{"sha": "7440d86c98ffaef74b1f49beed9f64694cb39e7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0MGQ4NmM5OGZmYWVmNzRiMWY0OWJlZWQ5ZjY0Njk0Y2IzOWU3YQ==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2006-10-31T18:13:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:13:55Z"}, "message": "symbols-processing-vms-ia64.adb, [...] (Process): Do not include symbols that come from generic instantiations in bodies.\n\n2006-10-31  Vincent Celier  <celier@adacore.com>\n\n\t* symbols-processing-vms-ia64.adb,\n\tsymbols-processing-vms-alpha.adb (Process): Do not include symbols\n\tthat come from generic instantiations in bodies.\n\nFrom-SVN: r118326", "tree": {"sha": "6f1cf3ee74923678377597d02b56500fcb245bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f1cf3ee74923678377597d02b56500fcb245bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7440d86c98ffaef74b1f49beed9f64694cb39e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7440d86c98ffaef74b1f49beed9f64694cb39e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7440d86c98ffaef74b1f49beed9f64694cb39e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7440d86c98ffaef74b1f49beed9f64694cb39e7a/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5e2b716b093bd113675d3fe13af6a3765a0e4fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e2b716b093bd113675d3fe13af6a3765a0e4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e2b716b093bd113675d3fe13af6a3765a0e4fe"}], "stats": {"total": 130, "additions": 93, "deletions": 37}, "files": [{"sha": "da1bf5d0110cc72edac1de5d70f2508f60e62b7c", "filename": "gcc/ada/symbols-processing-vms-alpha.adb", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7440d86c98ffaef74b1f49beed9f64694cb39e7a/gcc%2Fada%2Fsymbols-processing-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7440d86c98ffaef74b1f49beed9f64694cb39e7a/gcc%2Fada%2Fsymbols-processing-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsymbols-processing-vms-alpha.adb?ref=7440d86c98ffaef74b1f49beed9f64694cb39e7a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2003-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,6 +95,8 @@ package body Processing is\n      (Object_File : String;\n       Success     : out Boolean)\n    is\n+      OK : Boolean := True;\n+\n    begin\n       --  Open the object file with Byte_IO. Return with Success = False if\n       --  this fails.\n@@ -175,29 +177,46 @@ package body Processing is\n                      end if;\n                   end loop;\n \n-                  --  Create the new Symbol\n+                  --  Check if it is a symbol from a generic body\n \n-                  declare\n-                     S_Data : Symbol_Data;\n-                  begin\n-                     S_Data.Name := new String'(Symbol (1 .. LSymb));\n+                  OK := True;\n \n-                     --  The symbol kind (Data or Procedure) depends on the\n-                     --  V_NORM flag.\n+                  for J in 1 .. LSymb - 2 loop\n+                     if Symbol (J) = 'G' and then Symbol (J + 1) = 'P'\n+                       and then Symbol (J + 2) in '0' .. '9'\n+                     then\n+                        OK := False;\n+                        exit;\n+                     end if;\n+                  end loop;\n \n-                     if (Flags and V_NORM_Mask) = 0 then\n-                        S_Data.Kind := Data;\n+                  if OK then\n \n-                     else\n-                        S_Data.Kind := Proc;\n-                     end if;\n+                     --  Create the new Symbol\n+\n+                     declare\n+                        S_Data : Symbol_Data;\n+\n+                     begin\n+                        S_Data.Name := new String'(Symbol (1 .. LSymb));\n+\n+                        --  The symbol kind (Data or Procedure) depends on the\n+                        --  V_NORM flag.\n+\n+                        if (Flags and V_NORM_Mask) = 0 then\n+                           S_Data.Kind := Data;\n+\n+                        else\n+                           S_Data.Kind := Proc;\n+                        end if;\n \n-                     --  Put the new symbol in the table\n+                        --  Put the new symbol in the table\n \n-                     Symbol_Table.Increment_Last (Complete_Symbols);\n-                     Complete_Symbols.Table\n-                       (Symbol_Table.Last (Complete_Symbols)) := S_Data;\n-                  end;\n+                        Symbol_Table.Increment_Last (Complete_Symbols);\n+                        Complete_Symbols.Table\n+                          (Symbol_Table.Last (Complete_Symbols)) := S_Data;\n+                     end;\n+                  end if;\n \n                else\n                   --  As it is not a symbol subsection, skip to the next"}, {"sha": "5d62c3ce790c1d0035f5f95a7dd515a8b70c4bab", "filename": "gcc/ada/symbols-processing-vms-ia64.adb", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7440d86c98ffaef74b1f49beed9f64694cb39e7a/gcc%2Fada%2Fsymbols-processing-vms-ia64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7440d86c98ffaef74b1f49beed9f64694cb39e7a/gcc%2Fada%2Fsymbols-processing-vms-ia64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsymbols-processing-vms-ia64.adb?ref=7440d86c98ffaef74b1f49beed9f64694cb39e7a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 2004-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -85,27 +85,37 @@ package body Processing is\n \n       End_Symtab : Integer;\n \n-      Stname : Integer;\n-      Stinfo : Character;\n-      Sttype : Integer;\n-      Stbind : Integer;\n+      Stname  : Integer;\n+      Stinfo  : Character;\n+      Sttype  : Integer;\n+      Stbind  : Integer;\n       Stshndx : Integer;\n \n       Section_Headers : Section_Header_Ptr;\n \n-      Offset   : Natural := 0;\n+      Offset : Natural := 0;\n+      OK     : Boolean := True;\n \n       procedure Get_Byte (B : out Byte);\n       procedure Get_Half (H : out Integer);\n       procedure Get_Word (W : out Integer);\n       procedure Reset;\n+      --  All the above require comments ???\n+\n+      --------------\n+      -- Get_Byte --\n+      --------------\n \n       procedure Get_Byte (B : out Byte) is\n       begin\n          Byte_IO.Read (File, B);\n          Offset := Offset + 1;\n       end Get_Byte;\n \n+      --------------\n+      -- Get_Half --\n+      --------------\n+\n       procedure Get_Half (H : out Integer) is\n          C1, C2 : Character;\n       begin\n@@ -114,19 +124,29 @@ package body Processing is\n            Integer'(Character'Pos (C2)) * 256 + Integer'(Character'Pos (C1));\n       end Get_Half;\n \n+      --------------\n+      -- Get_Word --\n+      --------------\n+\n       procedure Get_Word (W : out Integer) is\n          H1, H2 : Integer;\n       begin\n          Get_Half (H1); Get_Half (H2);\n          W := H2 * 256 * 256 + H1;\n       end Get_Word;\n \n+      -----------\n+      -- Reset --\n+      -----------\n+\n       procedure Reset is\n       begin\n          Offset := 0;\n          Byte_IO.Reset (File);\n       end Reset;\n \n+   --  Start of processing for Process\n+\n    begin\n       --  Open the object file with Byte_IO. Return with Success = False if\n       --  this fails.\n@@ -216,6 +236,7 @@ package body Processing is\n       Symtab_Index := 0;\n \n       for J in Section_Headers'Range loop\n+\n          --  Get the data for each Section Header\n \n          Get_Word (Shname);\n@@ -312,24 +333,40 @@ package body Processing is\n               and then Stbind /= 0\n               and then Stshndx /= 0\n          then\n-            declare\n-               S_Data : Symbol_Data;\n-            begin\n-               S_Data.Name := new String'(Strings (Stname).all);\n+            --  Check if this is a symbol from a generic body\n \n-               if Sttype = 1 then\n-                  S_Data.Kind := Data;\n+            OK := True;\n \n-               else\n-                  S_Data.Kind := Proc;\n+            for J in Strings (Stname)'First .. Strings (Stname)'Last - 2 loop\n+               if Strings (Stname) (J) = 'G'\n+                 and then Strings (Stname) (J + 1) = 'P'\n+                 and then Strings (Stname) (J + 2) in '0' .. '9'\n+               then\n+                  OK := False;\n+                  exit;\n                end if;\n+            end loop;\n+\n+            if OK then\n+               declare\n+                  S_Data : Symbol_Data;\n+               begin\n+                  S_Data.Name := new String'(Strings (Stname).all);\n+\n+                  if Sttype = 1 then\n+                     S_Data.Kind := Data;\n \n-               --  Put the new symbol in the table\n+                  else\n+                     S_Data.Kind := Proc;\n+                  end if;\n \n-               Symbol_Table.Increment_Last (Complete_Symbols);\n-               Complete_Symbols.Table\n-                 (Symbol_Table.Last (Complete_Symbols)) := S_Data;\n-            end;\n+                  --  Put the new symbol in the table\n+\n+                  Symbol_Table.Increment_Last (Complete_Symbols);\n+                  Complete_Symbols.Table\n+                    (Symbol_Table.Last (Complete_Symbols)) := S_Data;\n+               end;\n+            end if;\n          end if;\n       end loop;\n "}]}