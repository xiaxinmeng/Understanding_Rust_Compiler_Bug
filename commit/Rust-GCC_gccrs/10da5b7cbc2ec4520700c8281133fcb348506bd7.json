{"sha": "10da5b7cbc2ec4520700c8281133fcb348506bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkYTViN2NiYzJlYzQ1MjA3MDBjODI4MTEzM2ZjYjM0ODUwNmJkNw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2016-10-26T15:34:18Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2016-10-26T15:34:18Z"}, "message": "Implement uniform_inside_sphere_distribution extension.\n\n2016-10-26  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement uniform_inside_sphere_distribution extension.\n\t* include/ext/random: Implement uniform_inside_sphere_distribution.\n\t* include/ext/random.tcc: Ditto.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n\tcons/default.cc: New.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n\tcons/parms.cc: New.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n\toperators/equal.cc: New.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n\toperators/generate.cc: New.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n\toperators/inequal.cc: New.\n\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n\toperators/serialize.cc: New.\n\nFrom-SVN: r241562", "tree": {"sha": "09b699b0607d3d220b0761aaf50568c0b4907e59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09b699b0607d3d220b0761aaf50568c0b4907e59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10da5b7cbc2ec4520700c8281133fcb348506bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10da5b7cbc2ec4520700c8281133fcb348506bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10da5b7cbc2ec4520700c8281133fcb348506bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10da5b7cbc2ec4520700c8281133fcb348506bd7/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2029ad65044c8f600d9396a675df477338ec0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2029ad65044c8f600d9396a675df477338ec0fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2029ad65044c8f600d9396a675df477338ec0fe"}], "stats": {"total": 671, "additions": 670, "deletions": 1}, "files": [{"sha": "9b73a08289128d13420e7d4d1528518bdd71c3aa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -1,3 +1,21 @@\n+2016-10-26  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement uniform_inside_sphere_distribution extension.\n+\t* include/ext/random: Implement uniform_inside_sphere_distribution.\n+\t* include/ext/random.tcc: Ditto.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n+\tcons/default.cc: New.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n+\tcons/parms.cc: New.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n+\toperators/equal.cc: New.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n+\toperators/generate.cc: New.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n+\toperators/inequal.cc: New.\n+\t* testsuite/ext/random/uniform_inside_sphere_distribution/\n+\toperators/serialize.cc: New.\n+\n 2016-10-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/bits/fs_dir.h (recursive_directory_iterator):"}, {"sha": "167c56010488ff9d084f1b91d30cfb06f3dd07dd", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -3493,6 +3493,218 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _RealType>& __d2)\n     { return !(__d1 == __d2); }\n \n+\n+  /**\n+   * @brief A distribution for random coordinates inside a unit sphere.\n+   */\n+  template<std::size_t _Dimen, typename _RealType = double>\n+    class uniform_inside_sphere_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+      static_assert(_Dimen != 0, \"dimension is zero\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      using result_type = std::array<_RealType, _Dimen>;\n+\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\tusing distribution_type\n+\t  = uniform_inside_sphere_distribution<_Dimen, _RealType>;\n+\tfriend class uniform_inside_sphere_distribution<_Dimen, _RealType>;\n+\n+\texplicit\n+\tparam_type(_RealType __radius = _RealType(1))\n+\t: _M_radius(__radius)\n+\t{\n+\t  __glibcxx_assert(_M_radius > _RealType(0));\n+\t}\n+\n+\t_RealType\n+\tradius() const\n+\t{ return _M_radius; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_radius == __p2._M_radius; }\n+\n+      private:\n+\t_RealType _M_radius;\n+      };\n+\n+      /**\n+       * @brief Constructors.\n+       */\n+      explicit\n+      uniform_inside_sphere_distribution(_RealType __radius = _RealType(1))\n+      : _M_param(__radius), _M_uosd()\n+      { }\n+\n+      explicit\n+      uniform_inside_sphere_distribution(const param_type& __p)\n+      : _M_param(__p), _M_uosd()\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { _M_uosd.reset(); }\n+\n+      /**\n+       * @brief Returns the @f$radius@f$ of the distribution.\n+       */\n+      _RealType\n+      radius() const\n+      { return _M_param.radius(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       * This function makes no sense for this distribution.\n+       */\n+      result_type\n+      min() const\n+      {\n+\tresult_type __res;\n+\t__res.fill(0);\n+\treturn __res;\n+      }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       * This function makes no sense for this distribution.\n+       */\n+      result_type\n+      max() const\n+      {\n+\tresult_type __res;\n+\t__res.fill(0);\n+\treturn __res;\n+      }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, _M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two uniform on sphere distributions have\n+       *        the same parameters and the sequences that would be\n+       *        generated are equal.\n+       */\n+      friend bool\n+      operator==(const uniform_inside_sphere_distribution& __d1,\n+\t\t const uniform_inside_sphere_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param && __d1._M_uosd == __d2._M_uosd; }\n+\n+      /**\n+       * @brief Inserts a %uniform_inside_sphere_distribution random number\n+       *        distribution @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %uniform_inside_sphere_distribution random number\n+       *             distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<size_t _Dimen1, typename _RealType1, typename _CharT,\n+\t       typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const __gnu_cxx::uniform_inside_sphere_distribution<_Dimen1,\n+\t\t\t\t\t\t\t\t   _RealType1>&\n+\t\t   );\n+\n+      /**\n+       * @brief Extracts a %uniform_inside_sphere_distribution random number\n+       *        distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %uniform_inside_sphere_distribution random number\n+       *             generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<std::size_t _Dimen1, typename _RealType1, typename _CharT,\n+\t       typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::uniform_inside_sphere_distribution<_Dimen1,\n+\t\t\t\t\t\t\t\t _RealType1>&);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+      uniform_on_sphere_distribution<_Dimen, _RealType> _M_uosd;\n+    };\n+\n+  /**\n+   * @brief Return true if two uniform on sphere distributions are different.\n+   */\n+  template<std::size_t _Dimen, typename _RealType>\n+    inline bool\n+    operator!=(const __gnu_cxx::uniform_inside_sphere_distribution<_Dimen,\n+\t       _RealType>& __d1,\n+\t       const __gnu_cxx::uniform_inside_sphere_distribution<_Dimen,\n+\t       _RealType>& __d2)\n+    { return !(__d1 == __d2); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __gnu_cxx\n "}, {"sha": "e1fd88d640892c45a11981624eaaef0214985921", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 161, "deletions": 1, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -1669,8 +1669,168 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is >> __x._M_nd;\n     }\n \n+\n+  namespace {\n+\n+    // Helper class for the uniform_inside_sphere_distribution generation\n+    // function.\n+    template<std::size_t _Dimen, bool _SmallDimen, typename _RealType>\n+      class uniform_inside_sphere_helper;\n+\n+    template<std::size_t _Dimen, typename _RealType>\n+      class uniform_inside_sphere_helper<_Dimen, false, _RealType>\n+      {\n+\tusing result_type\n+\t  = typename uniform_inside_sphere_distribution<_Dimen, _RealType>::\n+\t    result_type;\n+\n+      public:\n+\ttemplate<typename _UniformOnSphereDistribution,\n+\t\t typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformOnSphereDistribution& __uosd,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   _RealType __radius)\n+        {\n+\t  std::__detail::_Adaptor<_UniformRandomNumberGenerator,\n+\t\t\t\t  _RealType> __aurng(__urng);\n+\n+\t  _RealType __pow = 1 / _RealType(_Dimen);\n+\t  _RealType __urt = __radius * std::pow(__aurng(), __pow);\n+\t  result_type __ret = __uosd(__aurng);\n+\n+\t  std::transform(__ret.begin(), __ret.end(), __ret.begin(),\n+\t\t\t [__urt](_RealType __val)\n+\t\t\t { return __val * __urt; });\n+\n+\t  return __ret;\n+        }\n+      };\n+\n+    // Helper class for the uniform_inside_sphere_distribution generation\n+    // function specialized for small dimensions.\n+    template<std::size_t _Dimen, typename _RealType>\n+      class uniform_inside_sphere_helper<_Dimen, true, _RealType>\n+      {\n+\tusing result_type\n+\t  = typename uniform_inside_sphere_distribution<_Dimen, _RealType>::\n+\t    result_type;\n+\n+      public:\n+\ttemplate<typename _UniformOnSphereDistribution,\n+\t\t typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformOnSphereDistribution&,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   _RealType __radius)\n+        {\n+\t  result_type __ret;\n+\t  _RealType __sq;\n+\t  _RealType __radsq = __radius * __radius;\n+\t  std::__detail::_Adaptor<_UniformRandomNumberGenerator,\n+\t\t\t\t  _RealType> __aurng(__urng);\n+\n+\t  do\n+\t    {\n+\t      __sq = _RealType(0);\n+\t      for (int i = 0; i < _Dimen; ++i)\n+\t\t{\n+\t\t  __ret[i] = _RealType(2) * __aurng() - _RealType(1);\n+\t\t  __sq += __ret[i] * __ret[i];\n+\t\t}\n+\t    }\n+\t  while (__sq > _RealType(1));\n+\n+\t  for (int i = 0; i < _Dimen; ++i)\n+            __ret[i] *= __radius;\n+\n+\t  return __ret;\n+        }\n+      };\n+  } // namespace\n+\n+  //\n+  //  Experiments have shown that rejection is more efficient than transform\n+  //  for dimensions less than 8.\n+  //\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename uniform_inside_sphere_distribution<_Dimen, _RealType>::result_type\n+      uniform_inside_sphere_distribution<_Dimen, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+        uniform_inside_sphere_helper<_Dimen, _Dimen < 8, _RealType> __helper;\n+        return __helper(_M_uosd, __urng, __p.radius());\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _OutputIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      uniform_inside_sphere_distribution<_Dimen, _RealType>::\n+      __generate_impl(_OutputIterator __f, _OutputIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator>)\n+\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType, typename _CharT,\n+\t   typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::uniform_inside_sphere_distribution<_Dimen,\n+\t\t\t\t\t\t\t\t_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      __os << __x.radius() << __space << __x._M_uosd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+\n+      return __os;\n+    }\n+\n+  template<std::size_t _Dimen, typename _RealType, typename _CharT,\n+\t   typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::uniform_inside_sphere_distribution<_Dimen,\n+\t\t\t\t\t\t\t     _RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __radius_val;\n+      __is >> __radius_val >> __x._M_uosd;\n+      __x.param(typename uniform_inside_sphere_distribution<_Dimen, _RealType>::\n+\t\tparam_type(__radius_val));\n+\n+      __is.flags(__flags);\n+\n+      return __is;\n+    }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace __gnu_cxx\n \n \n #endif // _EXT_RANDOM_TCC"}, {"sha": "79ae488913a1afb2853a986df63d22b19ed20569", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fdefault.cc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do run { target cxx11 } }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template uniform_on_sphere\n+// 26.5.1.6 Random number distribution requirements [rand.req.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<2> u2;\n+  __gnu_cxx::uniform_inside_sphere_distribution<3> u3;\n+  __gnu_cxx::uniform_inside_sphere_distribution<4, double> u4;\n+  __gnu_cxx::uniform_inside_sphere_distribution<5, float> u5;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "924b997bb8f1acf6bdc055b6cabf9d171a9fae33", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/cons/parms.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Fcons%2Fparms.cc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do run { target cxx11 } }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template logistic_distribution\n+// 26.5.1.6 Random number distribution requirements [rand.req.dist]\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<2> u(1.5);\n+  VERIFY( u.radius() == 1.5 );\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<3> v(3.0);\n+  VERIFY( v.radius() == 3.0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "370ee5664fc6c21a221705122290d530df8c0832", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/operators/equal.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fequal.cc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do run { target cxx11 } }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template uniform_inside_sphere_distribution\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<3> u(2.0), v(2.0);\n+\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "60d76f30ffb7aac5ca3d0cb464760a3025190bf9", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/operators/generate.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fgenerate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fgenerate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fgenerate.cc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run { target cxx11 } }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template uniform_inside_sphere_distribution\n+// 26.5.1.6 Random number distribution requirements [rand.req.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+  std::minstd_rand0 rng;\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<3> u3(2.0);\n+\n+  for (size_t n = 0; n < 1000; ++n)\n+    {\n+      auto r = u3(rng);\n+\n+      VERIFY (std::abs(r[0]) < 2.0\n+           && std::abs(r[1]) < 2.0\n+           && std::abs(r[2]) < 2.0);\n+    }\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<2> u2(4000.0);\n+\n+  for (size_t n = 0; n < 1000; ++n)\n+    {\n+      auto r = u2(rng);\n+\n+      VERIFY (std::abs(r[0]) < 4000.0 && std::abs(r[1]) < 4000.0);\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0256d47a2f46129e372d278ac7c6c6818d2bf776", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/operators/inequal.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Finequal.cc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do run { target cxx11 } }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template uniform_inside_sphere_distribution\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  __gnu_cxx::uniform_inside_sphere_distribution<3> u(4.0), v(4.0);\n+\n+  VERIFY( !(u != v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d03ce35b29cdb35a83257bddc7b904d71829bf71", "filename": "libstdc++-v3/testsuite/ext/random/uniform_inside_sphere_distribution/operators/serialize.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10da5b7cbc2ec4520700c8281133fcb348506bd7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Funiform_inside_sphere_distribution%2Foperators%2Fserialize.cc?ref=10da5b7cbc2ec4520700c8281133fcb348506bd7", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run { target cxx11 } }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Class template uniform_inside_sphere_distribution\n+// 26.5.1.6 Random number distribution requirements [rand.req.dist]\n+\n+#include <ext/random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::stringstream str;\n+  __gnu_cxx::uniform_inside_sphere_distribution<3> u(8.0), v(8.0);\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+\n+  VERIFY( u == v );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}