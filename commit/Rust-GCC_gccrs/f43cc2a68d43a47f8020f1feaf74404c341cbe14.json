{"sha": "f43cc2a68d43a47f8020f1feaf74404c341cbe14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzY2MyYTY4ZDQzYTQ3ZjgwMjBmMWZlYWY3NDQwNGMzNDFjYmUxNA==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2014-01-07T19:17:50Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-01-07T19:17:50Z"}, "message": "regex_compiler.h (_AnyMatcher<>::_AnyMatcher(), [...]): Fix _AnyMatcher behavior of POSIX style and move _M_flags to template parameter...\n\n2014-01-07  Tim Shen  <timshen91@gmail.com>\n\n\t* include/bits/regex_compiler.h (_AnyMatcher<>::_AnyMatcher(),\n\t_AnyMatcher<>::operator(), _AnyMatcher<>::_M_apply(),\n\t_CharMatcher<>::_CharMatcher(), _CharMatcher<>::_M_translate(),\n\t_BracketMatcher<>::_BracketMatcher(), _BracketMatcher<>::operator(),\n\t_BracketMatcher<>::_M_add_char(),\n\t_BracketMatcher<>::_M_add_collating_element(),\n\t_BracketMatcher<>::_M_add_equivalence_class(),\n\t_BracketMatcher<>::_M_add_character_class(),\n\t_BracketMatcher<>::_M_make_range(), _BracketMatcher<>::_M_ready(),\n\t_BracketMatcher<>::_M_apply(), _BracketMatcher<>::_M_make_cache()):\n\tFix _AnyMatcher behavior of POSIX style and move _M_flags\n\tto template parameter; Add cache for _BracketMatcher. Adjust\n\tdeclarations from here...\n\t* include/bits/regex.h (basic_regex<>::imbue()): ...to here. Also,\n\timbuing a regex will trigger a recompilation to rebuild the cache.\n\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_atom(),\n\t_Compiler<>::_M_bracket_expression()): Adjust matchers' caller for\n\tdifferent template bool parameters.\n\t* include/bits/regex_executor.h: Remove unnecessary declarations.\n\t* include/std/regex: Adjust including orders.\n\t* testsuite/28_regex/traits/char/user_defined.cc: New.\n\t* testsuite/28_regex/traits/wchar_t/user_defined.cc: New.\n\nFrom-SVN: r206400", "tree": {"sha": "d9af9aa0a221012eb9c79a16fa98756258ed36f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9af9aa0a221012eb9c79a16fa98756258ed36f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f43cc2a68d43a47f8020f1feaf74404c341cbe14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43cc2a68d43a47f8020f1feaf74404c341cbe14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43cc2a68d43a47f8020f1feaf74404c341cbe14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43cc2a68d43a47f8020f1feaf74404c341cbe14/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b2721dab070d3e5e680bf08d8bbb49d055fbcbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2721dab070d3e5e680bf08d8bbb49d055fbcbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2721dab070d3e5e680bf08d8bbb49d055fbcbe"}], "stats": {"total": 443, "additions": 362, "deletions": 81}, "files": [{"sha": "4b81c9eeb6a6f06052bc7287726cf88a7aeee57d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -1,3 +1,28 @@\n+2014-01-07  Tim Shen  <timshen91@gmail.com>\n+\n+\t* include/bits/regex_compiler.h (_AnyMatcher<>::_AnyMatcher(),\n+\t_AnyMatcher<>::operator(), _AnyMatcher<>::_M_apply(),\n+\t_CharMatcher<>::_CharMatcher(), _CharMatcher<>::_M_translate(),\n+\t_BracketMatcher<>::_BracketMatcher(), _BracketMatcher<>::operator(),\n+\t_BracketMatcher<>::_M_add_char(),\n+\t_BracketMatcher<>::_M_add_collating_element(),\n+\t_BracketMatcher<>::_M_add_equivalence_class(),\n+\t_BracketMatcher<>::_M_add_character_class(),\n+\t_BracketMatcher<>::_M_make_range(), _BracketMatcher<>::_M_ready(),\n+\t_BracketMatcher<>::_M_apply(), _BracketMatcher<>::_M_make_cache()):\n+\tFix _AnyMatcher behavior of POSIX style and move _M_flags\n+\tto template parameter; Add cache for _BracketMatcher. Adjust\n+\tdeclarations from here...\n+\t* include/bits/regex.h (basic_regex<>::imbue()): ...to here. Also,\n+\timbuing a regex will trigger a recompilation to rebuild the cache.\n+\t* include/bits/regex_compiler.tcc (_Compiler<>::_M_atom(),\n+\t_Compiler<>::_M_bracket_expression()): Adjust matchers' caller for\n+\tdifferent template bool parameters.\n+\t* include/bits/regex_executor.h: Remove unnecessary declarations.\n+\t* include/std/regex: Adjust including orders.\n+\t* testsuite/28_regex/traits/char/user_defined.cc: New.\n+\t* testsuite/28_regex/traits/wchar_t/user_defined.cc: New.\n+\n 2014-01-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/abi/post/solaris2.9/baseline_symbols.txt: Regenerate."}, {"sha": "ae8e1f5d363952a3d08a4d35029b8bce8a4f1e91", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -30,6 +30,15 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template<typename, typename>\n+    class basic_regex;\n+\n+  template<typename, typename>\n+    class match_results;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+\n namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -48,6 +57,56 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      const basic_regex<_CharT, _TraitsT>& __re,\n \t\t      regex_constants::match_flag_type     __flags);\n \n+  template<typename, typename, typename, bool>\n+    class _Executor;\n+\n+  template<typename _Tp>\n+    struct __has_contiguous_iter : std::false_type { };\n+\n+  template<typename _Ch, typename _Tr, typename _Alloc>\n+    struct __has_contiguous_iter<std::basic_string<_Ch, _Tr, _Alloc>>\n+    : std::true_type  // string<Ch> storage is contiguous\n+    { };\n+\n+  template<typename _Tp, typename _Alloc>\n+    struct __has_contiguous_iter<std::vector<_Tp, _Alloc>>\n+    : std::true_type  // vector<Tp> storage is contiguous\n+    { };\n+\n+  template<typename _Alloc>\n+    struct __has_contiguous_iter<std::vector<bool, _Alloc>>\n+    : std::false_type // vector<bool> storage is not contiguous\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_contiguous_normal_iter : std::false_type { };\n+\n+  template<typename _Tp, typename _Cont>\n+    struct\n+    __is_contiguous_normal_iter<__gnu_cxx::__normal_iterator<_Tp, _Cont>>\n+    : __has_contiguous_iter<_Cont>::type\n+    { };\n+\n+  template<typename _Iter, typename _TraitsT>\n+    using __enable_if_contiguous_normal_iter\n+      = typename enable_if< __is_contiguous_normal_iter<_Iter>::value,\n+\t\t\t    std::shared_ptr<_NFA<_TraitsT>> >::type;\n+\n+  template<typename _Iter, typename _TraitsT>\n+    using __disable_if_contiguous_normal_iter\n+      = typename enable_if< !__is_contiguous_normal_iter<_Iter>::value,\n+\t\t\t    std::shared_ptr<_NFA<_TraitsT>> >::type;\n+\n+  template<typename _FwdIter, typename _TraitsT>\n+    __disable_if_contiguous_normal_iter<_FwdIter, _TraitsT>\n+    __compile_nfa(_FwdIter __first, _FwdIter __last, const _TraitsT& __traits,\n+\t\t  regex_constants::syntax_option_type __flags);\n+\n+  template<typename _Iter, typename _TraitsT>\n+    __enable_if_contiguous_normal_iter<_Iter, _TraitsT>\n+    __compile_nfa(_Iter __first, _Iter __last, const _TraitsT& __traits,\n+\t\t  regex_constants::syntax_option_type __flags);\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n \n@@ -501,6 +560,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbasic_regex(_FwdIter __first, _FwdIter __last,\n \t\t    flag_type __f = ECMAScript)\n \t: _M_flags(__f),\n+\t  _M_original_str(__first, __last),\n \t  _M_automaton(__detail::__compile_nfa(__first, __last, _M_traits,\n \t\t\t\t\t       _M_flags))\n \t{ }\n@@ -637,6 +697,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       flag_type __flags = ECMAScript)\n \t{\n \t  _M_flags = __flags;\n+\t  _M_original_str.assign(__s.begin(), __s.end());\n \t  _M_automaton = __detail::__compile_nfa(__s.begin(), __s.end(),\n \t\t\t\t\t\t _M_traits, _M_flags);\n \t  return *this;\n@@ -701,7 +762,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       locale_type\n       imbue(locale_type __loc)\n-      { return _M_traits.imbue(__loc); }\n+      {\n+\tauto __ret = _M_traits.imbue(__loc);\n+\tthis->assign(_M_original_str, _M_flags);\n+\treturn __ret;\n+      }\n \n       /**\n        * @brief Gets the locale currently imbued in the regular expression\n@@ -744,9 +809,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename, typename, typename, bool>\n \tfriend class __detail::_Executor;\n \n-      flag_type     _M_flags;\n-      _Rx_traits    _M_traits;\n-      _AutomatonPtr _M_automaton;\n+      flag_type              _M_flags;\n+      _Rx_traits             _M_traits;\n+      basic_string<_Ch_type> _M_original_str;\n+      _AutomatonPtr          _M_automaton;\n     };\n \n   /** @brief Standard regular expressions. */"}, {"sha": "4ac67dfed971975dafb1cec63cad4267ce51bc44", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 114, "deletions": 55, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -129,43 +129,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _StackT         _M_stack;\n     };\n \n-  template<typename _Tp>\n-    struct __has_contiguous_iter : std::false_type { };\n-\n-  template<typename _Ch, typename _Tr, typename _Alloc>\n-    struct __has_contiguous_iter<std::basic_string<_Ch, _Tr, _Alloc>>\n-    : std::true_type  // string<Ch> storage is contiguous\n-    { };\n-\n-  template<typename _Tp, typename _Alloc>\n-    struct __has_contiguous_iter<std::vector<_Tp, _Alloc>>\n-    : std::true_type  // vector<Tp> storage is contiguous\n-    { };\n-\n-  template<typename _Alloc>\n-    struct __has_contiguous_iter<std::vector<bool, _Alloc>>\n-    : std::false_type // vector<bool> storage is not contiguous\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_contiguous_normal_iter : std::false_type { };\n-\n-  template<typename _Tp, typename _Cont>\n-    struct\n-    __is_contiguous_normal_iter<__gnu_cxx::__normal_iterator<_Tp, _Cont>>\n-    : __has_contiguous_iter<_Cont>::type\n-    { };\n-\n-  template<typename _Iter, typename _TraitsT>\n-    using __enable_if_contiguous_normal_iter\n-      = typename enable_if< __is_contiguous_normal_iter<_Iter>::value,\n-\t\t\t    std::shared_ptr<_NFA<_TraitsT>> >::type;\n-\n-  template<typename _Iter, typename _TraitsT>\n-    using __disable_if_contiguous_normal_iter\n-      = typename enable_if< !__is_contiguous_normal_iter<_Iter>::value,\n-\t\t\t    std::shared_ptr<_NFA<_TraitsT>> >::type;\n-\n   template<typename _FwdIter, typename _TraitsT>\n     inline __disable_if_contiguous_normal_iter<_FwdIter, _TraitsT>\n     __compile_nfa(_FwdIter __first, _FwdIter __last, const _TraitsT& __traits,\n@@ -185,7 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __compile_nfa(__cfirst, __cfirst + __len, __traits, __flags);\n     }\n \n-  template<typename _TraitsT>\n+  template<typename _TraitsT, bool __is_ecma>\n     struct _AnyMatcher\n     {\n       typedef typename _TraitsT::char_type\t  _CharT;\n@@ -197,25 +160,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       operator()(_CharT __ch) const\n+      { return _M_apply(__ch, typename is_same<_CharT, char>::type()); }\n+\n+      bool\n+      _M_apply(_CharT __ch, true_type) const\n       {\n-\treturn _M_traits.translate(__ch) != '\\n'\n-\t  && _M_traits.translate(__ch) != '\\r'\n-\t  && _M_traits.translate(__ch) != u'\\u2028'\n-\t  && _M_traits.translate(__ch) != u'\\u2029';\n+\tauto __c = _M_traits.translate(__ch);\n+\tif (__is_ecma)\n+\t  {\n+\t    static auto __n = _M_traits.translate('\\n');\n+\t    static auto __r = _M_traits.translate('\\r');\n+\t    return __c != __n && __c != __r;\n+\t  }\n+\telse\n+\t  {\n+\t    static auto __nul = _M_traits.translate('\\0');\n+\t    return __c != __nul;\n+\t  }\n+      }\n+\n+      bool\n+      _M_apply(_CharT __ch, false_type) const\n+      {\n+\tauto __c = _M_traits.translate(__ch);\n+\tif (__is_ecma)\n+\t  {\n+\t    static auto __n = _M_traits.translate('\\n');\n+\t    static auto __r = _M_traits.translate('\\r');\n+\t    static auto __u2028 = _M_traits.translate(u'\\u2028');\n+\t    static auto __u2029 = _M_traits.translate(u'\\u2029');\n+\t    return __c != __n && __c != __r && __c != __u2028\n+\t      && __c != __u2029;\n+\t  }\n+\telse\n+\t  {\n+\t    static auto __nul = _M_traits.translate('\\0');\n+\t    return __c != __nul;\n+\t  }\n       }\n \n       const _TraitsT& _M_traits;\n     };\n \n-  template<typename _TraitsT>\n+  template<typename _TraitsT, bool __icase>\n     struct _CharMatcher\n     {\n       typedef typename _TraitsT::char_type\t  _CharT;\n-      typedef regex_constants::syntax_option_type _FlagT;\n \n-      explicit\n-      _CharMatcher(_CharT __ch, const _TraitsT& __traits, _FlagT __flags)\n-      : _M_traits(__traits), _M_flags(__flags), _M_ch(_M_translate(__ch))\n+      _CharMatcher(_CharT __ch, const _TraitsT& __traits)\n+      : _M_traits(__traits), _M_ch(_M_translate(__ch))\n       { }\n \n       bool\n@@ -225,44 +218,56 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _CharT\n       _M_translate(_CharT __ch) const\n       {\n-\tif (_M_flags & regex_constants::icase)\n+\tif (__icase)\n \t  return _M_traits.translate_nocase(__ch);\n \telse\n \t  return _M_traits.translate(__ch);\n       }\n \n       const _TraitsT& _M_traits;\n-      _FlagT          _M_flags;\n       _CharT          _M_ch;\n     };\n \n   /// Matches a character range (bracket expression)\n   // TODO: Convert used _M_flags fields to template parameters, including\n   // collate and icase. Avoid using std::set, could use flat_set\n-  // (sorted vector and binary search) instead; use an fixed sized (256)\n-  // vector<bool> for char specialization if necessary.\n+  // (sorted vector and binary search) instead.\n   template<typename _TraitsT>\n     struct _BracketMatcher\n     {\n+    public:\n       typedef typename _TraitsT::char_type\t  _CharT;\n       typedef typename _TraitsT::char_class_type  _CharClassT;\n       typedef typename _TraitsT::string_type      _StringT;\n       typedef regex_constants::syntax_option_type _FlagT;\n \n-      explicit\n+    public:\n       _BracketMatcher(bool __is_non_matching,\n \t\t      const _TraitsT& __traits,\n \t\t      _FlagT __flags)\n-      : _M_traits(__traits), _M_class_set(0), _M_flags(__flags),\n+      :\n+#ifdef _GLIBCXX_DEBUG\n+      _M_is_ready(false),\n+#endif\n+      _M_traits(__traits), _M_class_set(0), _M_flags(__flags),\n       _M_is_non_matching(__is_non_matching)\n       { }\n \n       bool\n-      operator()(_CharT) const;\n+      operator()(_CharT __ch) const\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(_M_is_ready);\n+\treturn _M_apply(__ch, _IsChar());\n+      }\n \n       void\n       _M_add_char(_CharT __c)\n-      { _M_char_set.insert(_M_translate(__c)); }\n+      {\n+\t_M_char_set.insert(_M_translate(__c));\n+#ifdef _GLIBCXX_DEBUG\n+\t_M_is_ready = false;\n+#endif\n+      }\n \n       void\n       _M_add_collating_element(const _StringT& __s)\n@@ -272,6 +277,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__st.empty())\n \t  __throw_regex_error(regex_constants::error_collate);\n \t_M_char_set.insert(_M_translate(__st[0]));\n+#ifdef _GLIBCXX_DEBUG\n+\t_M_is_ready = false;\n+#endif\n       }\n \n       void\n@@ -284,6 +292,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t__st = _M_traits.transform_primary(__st.data(),\n \t\t\t\t\t   __st.data() + __st.size());\n \t_M_equiv_set.insert(__st);\n+#ifdef _GLIBCXX_DEBUG\n+\t_M_is_ready = false;\n+#endif\n       }\n \n       void\n@@ -295,6 +306,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__mask == 0)\n \t  __throw_regex_error(regex_constants::error_ctype);\n \t_M_class_set |= __mask;\n+#ifdef _GLIBCXX_DEBUG\n+\t_M_is_ready = false;\n+#endif\n       }\n \n       void\n@@ -306,8 +320,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      _M_get_str(_M_translate(__r))));\n \telse\n \t  _M_range_set.insert(make_pair(_M_get_str(__l), _M_get_str(__r)));\n+#ifdef _GLIBCXX_DEBUG\n+\t_M_is_ready = false;\n+#endif\n       }\n \n+      void\n+      _M_ready()\n+      {\n+\t_M_make_cache(_IsChar());\n+#ifdef _GLIBCXX_DEBUG\n+\t_M_is_ready = true;\n+#endif\n+      }\n+\n+    private:\n+      typedef typename is_same<_CharT, char>::type _IsChar;\n+      struct _Dummy { };\n+      typedef typename conditional<_IsChar::value,\n+\t\t\t\t   std::bitset<1 << (8 * sizeof(_CharT))>,\n+\t\t\t\t   _Dummy>::type _CacheT;\n+      typedef typename make_unsigned<_CharT>::type _UnsignedCharT;\n+\n+    private:\n+      bool\n+      _M_apply(_CharT __ch, false_type) const;\n+\n+      bool\n+      _M_apply(_CharT __ch, true_type) const\n+      { return _M_cache[static_cast<_UnsignedCharT>(__ch)]; }\n+\n       _CharT\n       _M_translate(_CharT __c) const\n       {\n@@ -328,13 +370,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn _M_traits.transform(__s.begin(), __s.end());\n       }\n \n+      void\n+      _M_make_cache(true_type)\n+      {\n+\tfor (int __i = 0; __i < _M_cache.size(); __i++)\n+\t  _M_cache[static_cast<_UnsignedCharT>(__i)] =\n+\t    _M_apply(__i, false_type());\n+      }\n+\n+      void\n+      _M_make_cache(false_type)\n+      { }\n+\n+    private:\n+      _CacheT                            _M_cache;\n       std::set<_CharT>                   _M_char_set;\n       std::set<_StringT>                 _M_equiv_set;\n       std::set<pair<_StringT, _StringT>> _M_range_set;\n       const _TraitsT&                    _M_traits;\n       _CharClassT                        _M_class_set;\n       _FlagT                             _M_flags;\n       bool                               _M_is_non_matching;\n+#ifdef _GLIBCXX_DEBUG\n+      bool                               _M_is_ready;\n+#endif\n     };\n \n  //@} regex-detail"}, {"sha": "4da653f2aa3a0dcff3cd9dfbec946f2e56b2eb0e", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -284,15 +284,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_atom()\n     {\n       if (_M_match_token(_ScannerT::_S_token_anychar))\n-\t_M_stack.push(_StateSeqT(_M_nfa,\n-\t\t\t\t_M_nfa._M_insert_matcher\n-\t\t\t\t(_AnyMatcher<_TraitsT>(_M_traits))));\n+\t{\n+\t  if (_M_flags & regex_constants::ECMAScript)\n+\t    _M_stack.push(_StateSeqT(_M_nfa,\n+\t\t\t\t     _M_nfa._M_insert_matcher\n+\t\t\t\t     (_AnyMatcher<_TraitsT,\n+\t\t\t\t\ttrue>(_M_traits))));\n+\t  else\n+\t    _M_stack.push(_StateSeqT(_M_nfa,\n+\t\t\t\t     _M_nfa._M_insert_matcher\n+\t\t\t\t     (_AnyMatcher<_TraitsT,\n+\t\t\t\t\tfalse>(_M_traits))));\n+\t}\n       else if (_M_try_char())\n-\t_M_stack.push(_StateSeqT(_M_nfa,\n-\t\t\t\t _M_nfa._M_insert_matcher\n-\t\t\t\t (_CharMatcher<_TraitsT>(_M_value[0],\n-\t\t\t\t\t\t\t\t _M_traits,\n-\t\t\t\t\t\t\t\t _M_flags))));\n+\t{\n+\t  if (_M_flags & regex_constants::icase)\n+\t    _M_stack.push(_StateSeqT(_M_nfa,\n+\t\t\t\t     _M_nfa._M_insert_matcher\n+\t\t\t\t     (_CharMatcher<_TraitsT,\n+\t\t\t\t\ttrue>(_M_value[0],\n+\t\t\t\t\t      _M_traits))));\n+\t  else\n+\t    _M_stack.push(_StateSeqT(_M_nfa,\n+\t\t\t\t     _M_nfa._M_insert_matcher\n+\t\t\t\t     (_CharMatcher<_TraitsT,\n+\t\t\t\t\tfalse>(_M_value[0],\n+\t\t\t\t\t       _M_traits))));\n+\t}\n       else if (_M_match_token(_ScannerT::_S_token_backref))\n \t_M_stack.push(_StateSeqT(_M_nfa, _M_nfa.\n \t\t\t\t _M_insert_backref(_M_cur_int_value(10))));\n@@ -302,6 +320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _BMatcherT __matcher(_M_ctype.is(_CtypeT::upper, _M_value[0]),\n \t\t\t       _M_traits, _M_flags);\n \t  __matcher._M_add_character_class(_M_value);\n+\t  __matcher._M_ready();\n \t  _M_stack.push(_StateSeqT(_M_nfa,\n \t\t_M_nfa._M_insert_matcher(std::move(__matcher))));\n \t}\n@@ -341,6 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _BMatcherT __matcher(__neg, _M_traits, _M_flags);\n       while (!_M_match_token(_ScannerT::_S_token_bracket_end))\n \t_M_expression_term(__matcher);\n+      __matcher._M_ready();\n       _M_stack.push(_StateSeqT(_M_nfa,\n \t\t\t       _M_nfa._M_insert_matcher(std::move(__matcher))));\n       return true;\n@@ -432,7 +452,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _TraitsT>\n     bool\n-    _BracketMatcher<_TraitsT>::operator()(_CharT __ch) const\n+    _BracketMatcher<_TraitsT>::_M_apply(_CharT __ch, false_type) const\n     {\n       bool __ret = false;\n       if (_M_traits.isctype(__ch, _M_class_set)"}, {"sha": "bed90148da871e5784ab4fabab361967edef1a27", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -32,17 +32,6 @@\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  template<typename, typename>\n-    class basic_regex;\n-\n-  template<typename>\n-    class sub_match;\n-\n-  template<typename, typename>\n-    class match_results;\n-_GLIBCXX_END_NAMESPACE_VERSION\n-\n namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION"}, {"sha": "9395f5011e0ad5c23111a73be26c4c5735c042a2", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -56,11 +56,11 @@\n \n #include <bits/regex_constants.h>\n #include <bits/regex_error.h>\n-#include <bits/regex_scanner.h>\n #include <bits/regex_automaton.h>\n+#include <bits/regex.h>\n+#include <bits/regex_scanner.h>\n #include <bits/regex_compiler.h>\n #include <bits/regex_executor.h>\n-#include <bits/regex.h>\n \n #endif // C++11\n "}, {"sha": "7e8f21dc991112660ec88c8cd87a7ed9d35e119e", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/user_defined.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fuser_defined.cc?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do run }\n+\n+//\n+// 2014-01-07  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2010-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.3 Requirements [re.req]\n+// 28.2 (4) Table 127 - Regular expression traits class requirements\n+// 28.7 Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+template<typename CharT>\n+  class MyRegexTraits\n+  : public regex_traits<CharT>\n+  {\n+  public:\n+    CharT\n+    translate(CharT c) const\n+    {\n+      return c+1;\n+    }\n+  };\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  basic_regex<char, MyRegexTraits<char>> re(\".\");\n+  VERIFY(!regex_match(\"\\n\", re));\n+  VERIFY(!regex_match(\"\\r\", re));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7eca2d5474d8142d9c6a5a68b53f81262334d30e", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/user_defined.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fuser_defined.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43cc2a68d43a47f8020f1feaf74404c341cbe14/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fuser_defined.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fuser_defined.cc?ref=f43cc2a68d43a47f8020f1feaf74404c341cbe14", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do run }\n+\n+//\n+// 2014-01-07  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2010-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.3 Requirements [re.req]\n+// 28.2 (4) Table 127 - Regular expression traits class requirements\n+// 28.7 Class template regex_traits [re.traits]\n+\n+#include <regex>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+template<typename CharT>\n+  class MyRegexTraits\n+  : public regex_traits<CharT>\n+  {\n+  public:\n+    CharT\n+    translate(CharT c) const\n+    {\n+      return c+1;\n+    }\n+  };\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  basic_regex<wchar_t, MyRegexTraits<wchar_t>> re(L\".\");\n+  VERIFY(!regex_match(L\"\\n\", re));\n+  VERIFY(!regex_match(L\"\\r\", re));\n+  VERIFY(!regex_match(L\"\\u2028\", re));\n+  VERIFY(!regex_match(L\"\\u2029\", re));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}