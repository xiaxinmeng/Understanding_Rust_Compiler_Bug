{"sha": "471b19334842a13afc9ef16a9055e030ae2c9d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxYjE5MzM0ODQyYTEzYWZjOWVmMTZhOTA1NWUwMzBhZTJjOWQ1ZA==", "commit": {"author": {"name": "Matthias Kretz", "email": "kretz@kde.org", "date": "2021-02-03T15:49:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-03T15:49:29Z"}, "message": "libstdc++: Fix several check-simd interaction issues\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/experimental/simd/driver.sh (verify_test): Print\n\ttest output on run xfail. Do not repeat lines from the log that\n\twere already printed on stdout.\n\t(test_selector): Make the compiler flags pattern usable as a\n\tsubstring selector.\n\t(toplevel): Trap on SIGINT and remove the log and sum files.\n\tCall timout with --foreground to quickly terminate on SIGINT.\n\t* testsuite/experimental/simd/generate_makefile.sh: Simplify run\n\ttargets via target patterns. Default DRIVEROPTS to -v for run\n\ttargets. Remove log and sum files after completion of the run\n\ttarget (so that it's always recompiled).\n\tPlace help text into text file for reasonable 'make help'\n\tperformance.", "tree": {"sha": "24656170ad847b0888898be427f6d1fc29ad5c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24656170ad847b0888898be427f6d1fc29ad5c48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/471b19334842a13afc9ef16a9055e030ae2c9d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471b19334842a13afc9ef16a9055e030ae2c9d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471b19334842a13afc9ef16a9055e030ae2c9d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471b19334842a13afc9ef16a9055e030ae2c9d5d/comments", "author": {"login": "mattkretz", "id": 3306474, "node_id": "MDQ6VXNlcjMzMDY0NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3306474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattkretz", "html_url": "https://github.com/mattkretz", "followers_url": "https://api.github.com/users/mattkretz/followers", "following_url": "https://api.github.com/users/mattkretz/following{/other_user}", "gists_url": "https://api.github.com/users/mattkretz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattkretz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattkretz/subscriptions", "organizations_url": "https://api.github.com/users/mattkretz/orgs", "repos_url": "https://api.github.com/users/mattkretz/repos", "events_url": "https://api.github.com/users/mattkretz/events{/privacy}", "received_events_url": "https://api.github.com/users/mattkretz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc540e30a340ea028af6e6fa3f1921f1f8e334c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abc540e30a340ea028af6e6fa3f1921f1f8e334c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abc540e30a340ea028af6e6fa3f1921f1f8e334c"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "cf07ff9ad85bb5195bbf7b15dc5b538c2738a3c0", "filename": "libstdc++-v3/testsuite/experimental/simd/driver.sh", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b19334842a13afc9ef16a9055e030ae2c9d5d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b19334842a13afc9ef16a9055e030ae2c9d5d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fdriver.sh?ref=471b19334842a13afc9ef16a9055e030ae2c9d5d", "patch": "@@ -224,16 +224,17 @@ verify_test() {\n       fail \"timeout: execution test\"\n     elif [ \"$xfail\" = \"run\" ]; then\n       xfail \"execution test\"\n-      exit 0\n     else\n       fail \"execution test\"\n     fi\n     if $verbose; then\n-      if [ $(cat \"$log\"|wc -l) -gt 1000 ]; then\n+      lines=$(wc -l < \"$log\")\n+      lines=$((lines-3))\n+      if [ $lines -gt 1000 ]; then\n         echo \"[...]\"\n         tail -n1000 \"$log\"\n       else\n-        cat \"$log\"\n+        tail -n$lines \"$log\"\n       fi\n     elif ! $quiet; then\n       grep -i fail \"$log\" | head -n5\n@@ -267,7 +268,7 @@ test_selector() {\n       [ -z \"$target_triplet\" ] && target_triplet=$($CXX -dumpmachine)\n       if matches \"$target_triplet\" \"$pat_triplet\"; then\n         pat_flags=\"${string#* }\"\n-        if matches \"$CXXFLAGS\" \"$pat_flags\"; then\n+        if matches \"$CXXFLAGS\" \"*$pat_flags*\"; then\n           return 0\n         fi\n       fi\n@@ -276,6 +277,7 @@ test_selector() {\n   return 1\n }\n \n+trap \"rm -f '$log' '$sum'; exit\" INT\n rm -f \"$log\" \"$sum\"\n touch \"$log\" \"$sum\"\n \n@@ -316,15 +318,15 @@ if [ -n \"$xfail\" ]; then\n fi\n \n write_log_and_verbose \"$CXX $src $@ -D_GLIBCXX_SIMD_TESTTYPE=$type $abiflag -o $exe\"\n-timeout $timeout \"$CXX\" \"$src\" \"$@\" \"-D_GLIBCXX_SIMD_TESTTYPE=$type\" $abiflag -o \"$exe\" >> \"$log\" 2>&1\n+timeout --foreground $timeout \"$CXX\" \"$src\" \"$@\" \"-D_GLIBCXX_SIMD_TESTTYPE=$type\" $abiflag -o \"$exe\" >> \"$log\" 2>&1\n verify_compilation $?\n if [ -n \"$sim\" ]; then\n   write_log_and_verbose \"$sim ./$exe\"\n-  timeout $timeout $sim \"./$exe\" >> \"$log\" 2>&1 <&-\n+  timeout --foreground $timeout $sim \"./$exe\" >> \"$log\" 2>&1 <&-\n else\n   write_log_and_verbose \"./$exe\"\n   timeout=$(awk \"BEGIN { print int($timeout / 2) }\")\n-  timeout $timeout \"./$exe\" >> \"$log\" 2>&1 <&-\n+  timeout --foreground $timeout \"./$exe\" >> \"$log\" 2>&1 <&-\n fi\n verify_test $?\n "}, {"sha": "8d642a2941ad2d8d01b3f85a93d5bba530ee4d3e", "filename": "libstdc++-v3/testsuite/experimental/simd/generate_makefile.sh", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471b19334842a13afc9ef16a9055e030ae2c9d5d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471b19334842a13afc9ef16a9055e030ae2c9d5d/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fsimd%2Fgenerate_makefile.sh?ref=471b19334842a13afc9ef16a9055e030ae2c9d5d", "patch": "@@ -240,7 +240,7 @@ EOF\n %-$type.log: %-$type-0.log %-$type-1.log %-$type-2.log %-$type-3.log \\\n %-$type-4.log %-$type-5.log %-$type-6.log %-$type-7.log \\\n %-$type-8.log %-$type-9.log\n-\t@cat $^ > \\$@\n+\t@cat \\$^ > \\$@\n \t@cat \\$(^:log=sum) > \\$(@:log=sum)${rmline}\n \n EOF\n@@ -252,47 +252,47 @@ EOF\n EOF\n     done\n   done\n-  echo 'run-%: export GCC_TEST_RUN_EXPENSIVE=yes'\n-  all_tests | while read file && read name; do\n-    echo \"run-$name: $name.log\"\n-    all_types \"$file\" | while read t && read type; do\n-      echo \"run-$name-$type: $name-$type.log\"\n-      for i in $(seq 0 9); do\n-        echo \"run-$name-$type-$i: $name-$type-$i.log\"\n-      done\n-    done\n-    echo\n-  done\n   cat <<EOF\n-help:\n-\t@printf \"use DRIVEROPTS=<options> to pass the following options:\\n\"\\\\\n-\t\"-q, --quiet         Only print failures.\\n\"\\\\\n-\t\"-v, --verbose       Print compiler and test output on failure.\\n\"\\\\\n-\t\"-k, --keep-failed   Keep executables of failed tests.\\n\"\\\\\n-\t\"--sim <executable>  Path to an executable that is prepended to the test\\n\"\\\\\n-\t\"                    execution binary (default: the value of\\n\"\\\\\n-\t\"                    GCC_TEST_SIMULATOR).\\n\"\\\\\n-\t\"--timeout-factor <x>\\n\"\\\\\n-\t\"                    Multiply the default timeout with x.\\n\"\\\\\n-\t\"--run-expensive     Compile and run tests marked as expensive (default:\\n\"\\\\\n-\t\"                    true if GCC_TEST_RUN_EXPENSIVE is set, false otherwise).\\n\"\\\\\n-\t\"--only <pattern>    Compile and run only tests matching the given pattern.\\n\\n\"\n-\t@echo \"use TESTFLAGS=<flags> to pass additional compiler flags\"\n-\t@echo\n-\t@echo \"The following are some of the valid targets for this Makefile:\"\n-\t@echo \"... all\"\n-\t@echo \"... clean\"\n-\t@echo \"... help\"\n+run-%: export GCC_TEST_RUN_EXPENSIVE=yes\n+run-%: DRIVEROPTS=-v\n+run-%: %.log\n+\t@rm \\$^ \\$(^:log=sum)\n+\n+help: .make_help.txt\n+\t@cat \\$<\n+\n+EOF\n+  dsthelp=\"${dst%Makefile}.make_help.txt\"\n+  cat <<EOF > \"$dsthelp\"\n+use DRIVEROPTS=<options> to pass the following options:\n+-q, --quiet         Only print failures.\n+-v, --verbose       Print compiler and test output on failure.\n+-k, --keep-failed   Keep executables of failed tests.\n+--sim <executable>  Path to an executable that is prepended to the test\n+                    execution binary (default: the value of\n+                    GCC_TEST_SIMULATOR).\n+--timeout-factor <x>\n+                    Multiply the default timeout with x.\n+--run-expensive     Compile and run tests marked as expensive (default:\n+                    true if GCC_TEST_RUN_EXPENSIVE is set, false otherwise).\n+--only <pattern>    Compile and run only tests matching the given pattern.\n+\n+use TESTFLAGS=<flags> to pass additional compiler flags\n+\n+The following are some of the valid targets for this Makefile:\n+... all\n+... clean\n+... help\"\n EOF\n   all_tests | while read file && read name; do\n-    printf \"\\t@echo '... run-${name}'\\n\"\n+    echo \"... run-${name}\"\n     all_types | while read t && read type; do\n-      printf \"\\t@echo '... run-${name}-${type}'\\n\"\n+      echo \"... run-${name}-${type}\"\n       for i in $(seq 0 9); do\n-        printf \"\\t@echo '... run-${name}-${type}-$i'\\n\"\n+        echo \"... run-${name}-${type}-$i\"\n       done\n     done\n-  done\n+  done >> \"$dsthelp\"\n   cat <<EOF\n \n clean:"}]}