{"sha": "62295314f0a1f3ddea8cf54a888c4b9b3a4bec68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIyOTUzMTRmMGExZjNkZGVhOGNmNTRhODg4YzRiOWIzYTRiZWM2OA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2009-06-01T15:25:19Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2009-06-01T15:25:19Z"}, "message": "Add missing blanks after dots in entry.\n\nFrom-SVN: r148048", "tree": {"sha": "7ab2518e76335429179f45dc1a40d33e5c948fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ab2518e76335429179f45dc1a40d33e5c948fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62295314f0a1f3ddea8cf54a888c4b9b3a4bec68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62295314f0a1f3ddea8cf54a888c4b9b3a4bec68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62295314f0a1f3ddea8cf54a888c4b9b3a4bec68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62295314f0a1f3ddea8cf54a888c4b9b3a4bec68/comments", "author": null, "committer": null, "parents": [{"sha": "7eba2d1f3c016517f351372db22bc8f967e0ad65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eba2d1f3c016517f351372db22bc8f967e0ad65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eba2d1f3c016517f351372db22bc8f967e0ad65"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "86882e5def93a3a0b25d7efff4d33a6faaeb0bed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62295314f0a1f3ddea8cf54a888c4b9b3a4bec68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62295314f0a1f3ddea8cf54a888c4b9b3a4bec68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62295314f0a1f3ddea8cf54a888c4b9b3a4bec68", "patch": "@@ -29,11 +29,11 @@\n \textracted code for a bitfield element.  Accept an OUTER state\n \targument for recursive processing.  Recurse on record or array\n \tCONSTRUCTOR values, possibly past noop conversions.\n-\t(initializer_constant_valid_for_bitfield_p): New predicate. Whether\n+\t(initializer_constant_valid_for_bitfield_p): New predicate.  Whether\n \tVALUE is a valid constant-valued expression for use in a static\n \tbit-field initializer.\n-\t(output_constructor): Rework to use helpers. Accept and honor an\n-\tOUTER state argument for recursive calls. Return total size. Be\n+\t(output_constructor): Rework to use helpers.  Accept and honor an\n+\tOUTER state argument for recursive calls.  Return total size.  Be\n \tprepared for nested constructors initializing bitfields.\n \t(output_constant): Feed OUTER in calls to output_constructor.\n "}]}