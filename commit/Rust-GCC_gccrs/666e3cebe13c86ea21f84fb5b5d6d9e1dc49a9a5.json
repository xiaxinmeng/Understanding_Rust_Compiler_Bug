{"sha": "666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2ZTNjZWJlMTNjODZlYTIxZjg0ZmI1YjVkNmQ5ZTFkYzQ5YTlhNQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-08-12T16:23:12Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-08-12T16:23:12Z"}, "message": "tm.texi (TARGET_PROMOTE_FUNCTION_MODE): Add documentation for for_return == 2.\n\n2009-08-12  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* doc/tm.texi (TARGET_PROMOTE_FUNCTION_MODE): Add documentation\n\tfor for_return == 2.\n\t* function.c (assign_parm_setup_reg): Use for_return == 2, improve\n\tcomments.\n\t* calls.c (expand_call): Fix typo.\n\t* explow.c (promote_decl_mode): Use for_return == 2 for RESULT_DECL\n\tand PARM_DECL.\n\t* stmt.c (expand_value_return): Use promote_function_mode to copy out\n\tof pseudo.\n\t* targhooks.c (default_promote_function_mode): Handle for_return == 2.\n\t* config/cris/cris.c (cris_promote_function_mode): Likewise.\n\t* config/mmix/mmix.c (mmix_promote_function_mode): Likewise.\n\t* config/pa/pa.c (pa_promote_function_mode): Likewise.\n\nFrom-SVN: r150700", "tree": {"sha": "b0b3176056066392830be15ad78cfae11a09644e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0b3176056066392830be15ad78cfae11a09644e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b462d7786135d389f58ccda0a9dddf9ed4cee73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b462d7786135d389f58ccda0a9dddf9ed4cee73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b462d7786135d389f58ccda0a9dddf9ed4cee73"}], "stats": {"total": 74, "additions": 46, "deletions": 28}, "files": [{"sha": "8cea1ba72fe9ae09db226de1007c0ab723fdcbe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -1,3 +1,19 @@\n+2009-08-12  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* doc/tm.texi (TARGET_PROMOTE_FUNCTION_MODE): Add documentation\n+\tfor for_return == 2.\n+\t* function.c (assign_parm_setup_reg): Use for_return == 2, improve\n+\tcomments.\n+\t* calls.c (expand_call): Fix typo.\n+\t* explow.c (promote_decl_mode): Use for_return == 2 for RESULT_DECL\n+\tand PARM_DECL.\n+\t* stmt.c (expand_value_return): Use promote_function_mode to copy out\n+\tof pseudo.\n+\t* targhooks.c (default_promote_function_mode): Handle for_return == 2.\n+\t* config/cris/cris.c (cris_promote_function_mode): Likewise.\n+\t* config/mmix/mmix.c (mmix_promote_function_mode): Likewise.\n+\t* config/pa/pa.c (pa_promote_function_mode): Likewise.\n+\n 2009-08-11  Andrew Haley  <aph@redhat.com>\n \n \t* config/arm/arm.c (arm_init_libfuncs): Add __sync_synchronize."}, {"sha": "cdb934a2785a4234842701115571c07d447e5896", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -2353,9 +2353,9 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t\t\t &caller_unsignedp,\n \t\t\t\t TREE_TYPE (current_function_decl), 1);\n       callee_promoted_mode\n-\t= promote_function_mode (TREE_TYPE (caller_res), callee_mode,\n+\t= promote_function_mode (TREE_TYPE (funtype), callee_mode,\n \t\t\t\t &callee_unsignedp,\n-\t\t\t\t TREE_TYPE (funtype), 1);\n+\t\t\t\t funtype, 1);\n       if (caller_mode != VOIDmode\n \t  && (caller_promoted_mode != callee_promoted_mode\n \t      || ((caller_mode != caller_promoted_mode"}, {"sha": "6b3fd0fcfca1523c342ea8d9cc0b1d47a35eef3f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -3771,7 +3771,7 @@ cris_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n   /* Defining PROMOTE_FUNCTION_RETURN in gcc-2.7.2 uncovered bug 981110 (even\n      when modifying FUNCTION_VALUE to return the promoted mode).  Maybe\n      pointless as of now, but let's keep the old behavior.  */\n-  if (for_return)\n+  if (for_return == 1)\n     return mode;\n   return CRIS_PROMOTED_MODE (mode, *punsignedp, type);\n } "}, {"sha": "8521f374f81089c91c39c3a692de92f0744a67bb", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -2701,7 +2701,7 @@ mmix_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n {\n   /* Apparently not doing TRT if int < register-size.  FIXME: Perhaps\n      FUNCTION_VALUE and LIBCALL_VALUE needs tweaking as some ports say.  */\n-  if (for_return)\n+  if (for_return == 1)\n     return mode;\n \n   /* Promotion of modes currently generates slow code, extending before"}, {"sha": "c5543ef1195991649f235eaedd5bfbd11510b79e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -9199,7 +9199,7 @@ pa_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n                           const_tree fntype ATTRIBUTE_UNUSED,\n                           int for_return)\n {\n-  if (!for_return)\n+  if (for_return == 0)\n     return mode;\n   return promote_mode (type, mode, punsignedp);\n }"}, {"sha": "df4973d83686d8b69eecf9c278437bdb75918c36", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -1046,13 +1046,17 @@ and possibly change @code{*@var{punsignedp}} if the promotion should\n change signedness.  This function is called only for scalar @emph{or\n pointer} types.\n \n+@var{for_return} allows to distinguish the promotion of arguments and\n+return values.  If it is @code{1}, a return value is being promoted and\n+@code{TARGET_FUNCTION_VALUE} must perform the same promotions done here.\n+If it is @code{2}, the returned mode should be that of the register in\n+which an incoming parameter is copied, or the outgoing result is computed;\n+then the hook should return the same mode as @code{promote_mode}, though\n+the signedness may be different.\n+\n The default is to not promote arguments and return values.  You can\n also define the hook to @code{default_promote_function_mode_always_promote}\n if you would like to apply the same rules given by @code{PROMOTE_MODE}.\n-\n-@var{for_return} allows to distinguish the promotion of arguments and\n-return values.  If this target hook promotes return values,\n-@code{TARGET_FUNCTION_VALUE} must perform the same promotions done here.\n @end deftypefn\n \n @defmac PARM_BOUNDARY"}, {"sha": "933eac81bb143b7c356b702573de81038a671aa0", "filename": "gcc/explow.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -825,12 +825,10 @@ promote_decl_mode (const_tree decl, int *punsignedp)\n   enum machine_mode mode = DECL_MODE (decl);\n   enum machine_mode pmode;\n \n-  if (TREE_CODE (decl) == RESULT_DECL)\n+  if (TREE_CODE (decl) == RESULT_DECL\n+      || TREE_CODE (decl) == PARM_DECL)\n     pmode = promote_function_mode (type, mode, &unsignedp,\n-                                   TREE_TYPE (current_function_decl), 1);\n-  else if (TREE_CODE (decl) == PARM_DECL)\n-    pmode = promote_function_mode (type, mode, &unsignedp,\n-                                   TREE_TYPE (current_function_decl), 0);\n+                                   TREE_TYPE (current_function_decl), 2);\n   else\n     pmode = promote_mode (type, mode, &unsignedp);\n "}, {"sha": "b1d467c57872f517d872c2021076eb5ec765d568", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -2770,13 +2770,11 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n   bool did_conversion = false;\n \n   /* Store the parm in a pseudoregister during the function, but we may\n-     need to do it in a wider mode.  */\n-\n-  /* This is not really promoting for a call.  However we need to be\n-     consistent with assign_parm_find_data_types and expand_expr_real_1.  */\n+     need to do it in a wider mode.  Using 2 here makes the result\n+     consistent with promote_decl_mode and thus expand_expr_real_1.  */\n   promoted_nominal_mode\n     = promote_function_mode (data->nominal_type, data->nominal_mode, &unsignedp,\n-\t\t\t     TREE_TYPE (current_function_decl), 0);\n+\t\t\t     TREE_TYPE (current_function_decl), 2);\n \n   parmreg = gen_reg_rtx (promoted_nominal_mode);\n \n@@ -2796,7 +2794,8 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \n   assign_parm_remove_parallels (data);\n \n-  /* Copy the value into the register.  */\n+  /* Copy the value into the register, thus bridging between\n+     assign_parm_find_data_types and expand_expr_real_1.  */\n   if (data->nominal_mode != data->passed_mode\n       || promoted_nominal_mode != data->promoted_mode)\n     {"}, {"sha": "fe60ba6715058c5aa80b0cee2da10422b58af293", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -1511,25 +1511,24 @@ expand_naked_return (void)\n static void\n expand_value_return (rtx val)\n {\n-  /* Copy the value to the return location\n-     unless it's already there.  */\n+  /* Copy the value to the return location unless it's already there.  */\n \n   tree decl = DECL_RESULT (current_function_decl);\n   rtx return_reg = DECL_RTL (decl);\n   if (return_reg != val)\n     {\n-      int unsignedp;\n+      tree funtype = TREE_TYPE (current_function_decl);\n+      tree type = TREE_TYPE (decl);\n+      int unsignedp = TYPE_UNSIGNED (type);\n       enum machine_mode old_mode = DECL_MODE (decl);\n-      enum machine_mode mode = promote_decl_mode (decl, &unsignedp);\n+      enum machine_mode mode = promote_function_mode (type, old_mode,\n+\t\t\t\t\t\t      &unsignedp, funtype, 1);\n \n       if (mode != old_mode)\n \tval = convert_modes (mode, old_mode, val, unsignedp);\n \n       if (GET_CODE (return_reg) == PARALLEL)\n-\t{\n-          tree type = TREE_TYPE (decl);\n-\t  emit_group_load (return_reg, val, type, int_size_in_bytes (type));\n-\t}\n+\temit_group_load (return_reg, val, type, int_size_in_bytes (type));\n       else\n \temit_move_insn (return_reg, val);\n     }"}, {"sha": "7535bc10ab73ba2842bccc3d08b3e8aced1ed87d", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=666e3cebe13c86ea21f84fb5b5d6d9e1dc49a9a5", "patch": "@@ -119,6 +119,8 @@ default_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n \t\t\t       const_tree funtype ATTRIBUTE_UNUSED,\n \t\t\t       int for_return ATTRIBUTE_UNUSED)\n {\n+  if (for_return == 2)\n+    return promote_mode (type, mode, punsignedp);\n   return mode;\n }\n "}]}