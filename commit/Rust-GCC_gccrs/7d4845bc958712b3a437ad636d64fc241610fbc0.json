{"sha": "7d4845bc958712b3a437ad636d64fc241610fbc0", "node_id": "C_kwDOANBUbNoAKDdkNDg0NWJjOTU4NzEyYjNhNDM3YWQ2MzZkNjRmYzI0MTYxMGZiYzA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T11:49:51Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T11:49:51Z"}, "message": "Add code generation for range expressions", "tree": {"sha": "c2fe615c593831cb2d6a01796f9ec389f0b08e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2fe615c593831cb2d6a01796f9ec389f0b08e0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4845bc958712b3a437ad636d64fc241610fbc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4845bc958712b3a437ad636d64fc241610fbc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4845bc958712b3a437ad636d64fc241610fbc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4845bc958712b3a437ad636d64fc241610fbc0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa21267280e488f78fb180704d1a80bee177c6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa21267280e488f78fb180704d1a80bee177c6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa21267280e488f78fb180704d1a80bee177c6ba"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "e2d11382f8e06a2b25f761e9a2d5a4581030fb1a", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4845bc958712b3a437ad636d64fc241610fbc0/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4845bc958712b3a437ad636d64fc241610fbc0/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=7d4845bc958712b3a437ad636d64fc241610fbc0", "patch": "@@ -1377,5 +1377,112 @@ CompileExpr::visit (HIR::IdentifierExpr &expr)\n     }\n }\n \n+void\n+CompileExpr::visit (HIR::RangeFromToExpr &expr)\n+{\n+  tree from = CompileExpr::Compile (expr.get_from_expr ().get (), ctx);\n+  tree to = CompileExpr::Compile (expr.get_to_expr ().get (), ctx);\n+  if (from == error_mark_node || to == error_mark_node)\n+    {\n+      translated = error_mark_node;\n+      return;\n+    }\n+\n+  TyTy::BaseType *tyty = nullptr;\n+  bool ok\n+    = ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (), &tyty);\n+  rust_assert (ok);\n+\n+  tree adt = TyTyResolveCompile::compile (ctx, tyty);\n+\n+  // make the constructor\n+  translated\n+    = ctx->get_backend ()->constructor_expression (adt, false, {from, to}, -1,\n+\t\t\t\t\t\t   expr.get_locus ());\n+}\n+\n+void\n+CompileExpr::visit (HIR::RangeFromExpr &expr)\n+{\n+  tree from = CompileExpr::Compile (expr.get_from_expr ().get (), ctx);\n+  if (from == error_mark_node)\n+    {\n+      translated = error_mark_node;\n+      return;\n+    }\n+\n+  TyTy::BaseType *tyty = nullptr;\n+  bool ok\n+    = ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (), &tyty);\n+  rust_assert (ok);\n+\n+  tree adt = TyTyResolveCompile::compile (ctx, tyty);\n+\n+  // make the constructor\n+  translated\n+    = ctx->get_backend ()->constructor_expression (adt, false, {from}, -1,\n+\t\t\t\t\t\t   expr.get_locus ());\n+}\n+\n+void\n+CompileExpr::visit (HIR::RangeToExpr &expr)\n+{\n+  tree to = CompileExpr::Compile (expr.get_to_expr ().get (), ctx);\n+  if (to == error_mark_node)\n+    {\n+      translated = error_mark_node;\n+      return;\n+    }\n+\n+  TyTy::BaseType *tyty = nullptr;\n+  bool ok\n+    = ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (), &tyty);\n+  rust_assert (ok);\n+\n+  tree adt = TyTyResolveCompile::compile (ctx, tyty);\n+\n+  // make the constructor\n+  translated\n+    = ctx->get_backend ()->constructor_expression (adt, false, {to}, -1,\n+\t\t\t\t\t\t   expr.get_locus ());\n+}\n+\n+void\n+CompileExpr::visit (HIR::RangeFullExpr &expr)\n+{\n+  TyTy::BaseType *tyty = nullptr;\n+  bool ok\n+    = ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (), &tyty);\n+  rust_assert (ok);\n+\n+  tree adt = TyTyResolveCompile::compile (ctx, tyty);\n+  translated = ctx->get_backend ()->constructor_expression (adt, false, {}, -1,\n+\t\t\t\t\t\t\t    expr.get_locus ());\n+}\n+\n+void\n+CompileExpr::visit (HIR::RangeFromToInclExpr &expr)\n+{\n+  tree from = CompileExpr::Compile (expr.get_from_expr ().get (), ctx);\n+  tree to = CompileExpr::Compile (expr.get_to_expr ().get (), ctx);\n+  if (from == error_mark_node || to == error_mark_node)\n+    {\n+      translated = error_mark_node;\n+      return;\n+    }\n+\n+  TyTy::BaseType *tyty = nullptr;\n+  bool ok\n+    = ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (), &tyty);\n+  rust_assert (ok);\n+\n+  tree adt = TyTyResolveCompile::compile (ctx, tyty);\n+\n+  // make the constructor\n+  translated\n+    = ctx->get_backend ()->constructor_expression (adt, false, {from, to}, -1,\n+\t\t\t\t\t\t   expr.get_locus ());\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "096b70526c0a04e09edd30569f837d6c071d526f", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4845bc958712b3a437ad636d64fc241610fbc0/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4845bc958712b3a437ad636d64fc241610fbc0/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=7d4845bc958712b3a437ad636d64fc241610fbc0", "patch": "@@ -803,6 +803,16 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::MatchExpr &expr) override;\n \n+  void visit (HIR::RangeFromToExpr &expr) override;\n+\n+  void visit (HIR::RangeFromExpr &expr) override;\n+\n+  void visit (HIR::RangeToExpr &expr) override;\n+\n+  void visit (HIR::RangeFullExpr &expr) override;\n+\n+  void visit (HIR::RangeFromToInclExpr &expr) override;\n+\n protected:\n   tree compile_dyn_dispatch_call (const TyTy::DynamicObjectType *dyn,\n \t\t\t\t  TyTy::BaseType *receiver,"}, {"sha": "869461622765286244b9bf68ba8f6d3783c3229f", "filename": "gcc/testsuite/rust/compile/torture/range-lang-item1.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4845bc958712b3a437ad636d64fc241610fbc0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Frange-lang-item1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4845bc958712b3a437ad636d64fc241610fbc0/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Frange-lang-item1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Frange-lang-item1.rs?ref=7d4845bc958712b3a437ad636d64fc241610fbc0", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-w\" }\n+#[lang = \"RangeFull\"]\n+pub struct RangeFull;\n+\n+#[lang = \"Range\"]\n+pub struct Range<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+#[lang = \"RangeFrom\"]\n+pub struct RangeFrom<Idx> {\n+    pub start: Idx,\n+}\n+\n+#[lang = \"RangeTo\"]\n+pub struct RangeTo<Idx> {\n+    pub end: Idx,\n+}\n+\n+#[lang = \"RangeInclusive\"]\n+pub struct RangeInclusive<Idx> {\n+    pub start: Idx,\n+    pub end: Idx,\n+}\n+\n+fn test() {\n+    let a = 1..2; // range\n+    let b = 1..; // range from\n+    let c = ..3; // range to\n+    let d = 0..=2; // range inclusive\n+}"}]}