{"sha": "cbc3885de26e5378b74d8f208f5f5e0da2247437", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjMzg4NWRlMjZlNTM3OGI3NGQ4ZjIwOGY1ZjVlMGRhMjI0NzQzNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-20T00:27:34Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-05-20T00:27:34Z"}, "message": "entered into RCS\n\nFrom-SVN: r1024", "tree": {"sha": "b0cc42443be689116916103fc24217225e3b3a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0cc42443be689116916103fc24217225e3b3a63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbc3885de26e5378b74d8f208f5f5e0da2247437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc3885de26e5378b74d8f208f5f5e0da2247437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc3885de26e5378b74d8f208f5f5e0da2247437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc3885de26e5378b74d8f208f5f5e0da2247437/comments", "author": null, "committer": null, "parents": [{"sha": "2b4bd1bc301c22fc47d685f658a100c04597d041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4bd1bc301c22fc47d685f658a100c04597d041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4bd1bc301c22fc47d685f658a100c04597d041"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "49da7f1cbf9a6e430caca4348af555dc3a2e06e1", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc3885de26e5378b74d8f208f5f5e0da2247437/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc3885de26e5378b74d8f208f5f5e0da2247437/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=cbc3885de26e5378b74d8f208f5f5e0da2247437", "patch": "@@ -1267,11 +1267,13 @@\n \f\n ;; Patterns to recognize zero-extend insns produced by the combiner.\n ;; We don't allow both operands in memory, because of aliasing problems.\n+;; Explicitly disallow two memory operands via the condition since reloading\n+;; of this case will result in worse code than the uncombined patterns.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=do<>,d<\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"\"\n+  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n   if (DATA_REG_P (operands[0]))\n@@ -1300,7 +1302,7 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=do<>,d\")\n \t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"\"\n+  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n   if (DATA_REG_P (operands[0]))\n@@ -1340,7 +1342,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=do<>,d\")\n \t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"\"\n+  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"*\n {\n   if (DATA_REG_P (operands[0]))"}]}