{"sha": "b7663a763fdeff95ffe2ea8d1ef46ad74c26491e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc2NjNhNzYzZmRlZmY5NWZmZTJlYThkMWVmNDZhZDc0YzI2NDkxZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-09-18T16:19:56Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-09-18T16:19:56Z"}, "message": "Handle CLOBBER in reg_overlap_mentioned_p (PR86882)\n\nCombine will put CLOBBER (with a non-void mode) anywhere in a pattern\nto poison it.  reg_overlap_mentioned_p did not handle this.  This patch\nfixes that.\n\n\n\tPR rtl-optimization/86882\n\t* rtlanal.c (reg_overlap_mentioned_p): Handle CLOBBER.\n\nFrom-SVN: r264400", "tree": {"sha": "d3c357de4d00518720240c369368be7d6aab210c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c357de4d00518720240c369368be7d6aab210c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a12c16de529755cdf4dbc594dd48742107ad349e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12c16de529755cdf4dbc594dd48742107ad349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12c16de529755cdf4dbc594dd48742107ad349e"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "6f4e131384eeda85d075b1bda2381ec2a355bd36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7663a763fdeff95ffe2ea8d1ef46ad74c26491e", "patch": "@@ -1,3 +1,8 @@\n+2018-09-18  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/86882\n+\t* rtlanal.c (reg_overlap_mentioned_p): Handle CLOBBER.\n+\n 2018-09-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*<code>extend<mode>xf2): Macroize insn from"}, {"sha": "366df7c9b3fa23a9750941884cc1116498b8399c", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7663a763fdeff95ffe2ea8d1ef46ad74c26491e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b7663a763fdeff95ffe2ea8d1ef46ad74c26491e", "patch": "@@ -1815,6 +1815,7 @@ reg_overlap_mentioned_p (const_rtx x, const_rtx in)\n  recurse:\n   switch (GET_CODE (x))\n     {\n+    case CLOBBER:\n     case STRICT_LOW_PART:\n     case ZERO_EXTRACT:\n     case SIGN_EXTRACT:\n@@ -4757,17 +4758,17 @@ nonzero_bits1 (const_rtx x, scalar_int_mode mode, const_rtx known_x,\n \t  nonzero &= cached_nonzero_bits (SUBREG_REG (x), mode,\n \t\t\t\t\t  known_x, known_mode, known_ret);\n \n-          /* On many CISC machines, accessing an object in a wider mode\n+\t  /* On many CISC machines, accessing an object in a wider mode\n \t     causes the high-order bits to become undefined.  So they are\n \t     not known to be zero.  */\n \t  rtx_code extend_op;\n \t  if ((!WORD_REGISTER_OPERATIONS\n \t       /* If this is a typical RISC machine, we only have to worry\n \t\t  about the way loads are extended.  */\n+\t       || !MEM_P (SUBREG_REG (x))\n \t       || ((extend_op = load_extend_op (inner_mode)) == SIGN_EXTEND\n \t\t   ? val_signbit_known_set_p (inner_mode, nonzero)\n-\t\t   : extend_op != ZERO_EXTEND)\n-\t       || (!MEM_P (SUBREG_REG (x)) && !REG_P (SUBREG_REG (x))))\n+\t\t   : extend_op != ZERO_EXTEND))\n \t      && xmode_width > inner_width)\n \t    nonzero\n \t      |= (GET_MODE_MASK (GET_MODE (x)) & ~GET_MODE_MASK (inner_mode));"}]}