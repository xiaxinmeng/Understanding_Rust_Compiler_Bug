{"sha": "a02d84b6f82e3be7241fb0643ca5f46476af2506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyZDg0YjZmODJlM2JlNzI0MWZiMDY0M2NhNWY0NjQ3NmFmMjUwNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-28T13:38:10Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-28T13:38:10Z"}, "message": "nvptx.c (nvptx_output_call_insn): Expect hard regs.\n\n\t* config/nvptx/nvptx.c (nvptx_output_call_insn): Expect hard regs.\n\t* config/nvptx/nvptx.md (nvptx_reg_or_mem_operand): Rename to ...\n\t(nvptx_nonimmediate_operand): ... here.  Update all uses.\n\t(call_insn_operand): Use REG_P.\n\t(call_operation): Allow hard regs.\n\nFrom-SVN: r231972", "tree": {"sha": "21477fb882b7d8e6f7a71a53dc37c95ede22f296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21477fb882b7d8e6f7a71a53dc37c95ede22f296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02d84b6f82e3be7241fb0643ca5f46476af2506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02d84b6f82e3be7241fb0643ca5f46476af2506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02d84b6f82e3be7241fb0643ca5f46476af2506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02d84b6f82e3be7241fb0643ca5f46476af2506/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcdb352b2cd0855b99f0205209f4006c36fd509d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdb352b2cd0855b99f0205209f4006c36fd509d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcdb352b2cd0855b99f0205209f4006c36fd509d"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "3a5010080d0670cd655d7ad2013df10839d026cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d84b6f82e3be7241fb0643ca5f46476af2506/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d84b6f82e3be7241fb0643ca5f46476af2506/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a02d84b6f82e3be7241fb0643ca5f46476af2506", "patch": "@@ -1,3 +1,11 @@\n+2015-12-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (nvptx_output_call_insn): Expect hard regs.\n+\t* config/nvptx/nvptx.md (nvptx_reg_or_mem_operand): Rename to ...\n+\t(nvptx_nonimmediate_operand): ... here.  Update all uses.\n+\t(call_insn_operand): Use REG_P.\n+\t(call_operation): Allow hard regs.\n+\n 2015-12-25  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-visibility.c (function_and_variable_visibility): Do not"}, {"sha": "0f232a3641e6d04770796f25c1fbf8ef59ac4e3e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d84b6f82e3be7241fb0643ca5f46476af2506/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d84b6f82e3be7241fb0643ca5f46476af2506/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=a02d84b6f82e3be7241fb0643ca5f46476af2506", "patch": "@@ -1808,14 +1808,14 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n     {\n       rtx t = XEXP (XVECEXP (pat, 0, argno), 0);\n       machine_mode mode = GET_MODE (t);\n+      const char *ptx_type = nvptx_ptx_type_from_mode (mode, false);\n \n       /* Mode splitting has already been done.  */\n-      fprintf (asm_out_file, \"\\t\\t.param%s %%out_arg%d%s;\\n\",\n-\t       nvptx_ptx_type_from_mode (mode, false), argno,\n-\t       mode == QImode || mode == HImode ? \"[1]\" : \"\");\n-      fprintf (asm_out_file, \"\\t\\tst.param%s [%%out_arg%d], %%r%d;\\n\",\n-\t       nvptx_ptx_type_from_mode (mode, false), argno,\n-\t       REGNO (t));\n+      fprintf (asm_out_file, \"\\t\\t.param%s %%out_arg%d;\\n\"\n+\t       \"\\t\\tst.param%s [%%out_arg%d], \",\n+\t       ptx_type, argno, ptx_type, argno);\n+      output_reg (asm_out_file, REGNO (t), VOIDmode);\n+      fprintf (asm_out_file, \";\\n\");\n     }\n \n   fprintf (asm_out_file, \"\\t\\tcall \");"}, {"sha": "565be196b0a5f17e2bd6193b30547c511602b52a", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02d84b6f82e3be7241fb0643ca5f46476af2506/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02d84b6f82e3be7241fb0643ca5f46476af2506/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=a02d84b6f82e3be7241fb0643ca5f46476af2506", "patch": "@@ -69,7 +69,7 @@\n   return register_operand (op, mode);\n })\n \n-(define_predicate \"nvptx_reg_or_mem_operand\"\n+(define_predicate \"nvptx_nonimmediate_operand\"\n   (match_code \"mem,reg\")\n {\n   return (REG_P (op) ? register_operand (op, mode)\n@@ -104,7 +104,7 @@\n (define_predicate \"call_insn_operand\"\n   (match_code \"symbol_ref,reg\")\n {\n-  return GET_CODE (op) != SYMBOL_REF || SYMBOL_REF_FUNCTION_P (op);\n+  return REG_P (op) || SYMBOL_REF_FUNCTION_P (op);\n })\n \n ;; Return true if OP is a call with parallel USEs of the argument\n@@ -118,11 +118,7 @@\n     {\n       rtx elt = XVECEXP (op, 0, i);\n \n-      if (GET_CODE (elt) != USE\n-          || GET_CODE (XEXP (elt, 0)) != REG\n-          || XEXP (elt, 0) == frame_pointer_rtx\n-          || XEXP (elt, 0) == arg_pointer_rtx\n-          || XEXP (elt, 0) == stack_pointer_rtx)\n+      if (GET_CODE (elt) != USE || !REG_P (XEXP (elt, 0)))\n         return false;\n     }\n   return true;\n@@ -237,7 +233,7 @@\n \n (define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"nvptx_register_operand\" \"=R,R\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nvptx_reg_or_mem_operand\" \"R,m\")))]\n+\t(zero_extend:HI (match_operand:QI 1 \"nvptx_nonimmediate_operand\" \"R,m\")))]\n   \"\"\n   \"@\n    %.\\\\tcvt.u16.u%T1\\\\t%0, %1;\n@@ -246,7 +242,7 @@\n \n (define_insn \"zero_extend<mode>si2\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R,R\")\n-\t(zero_extend:SI (match_operand:QHIM 1 \"nvptx_reg_or_mem_operand\" \"R,m\")))]\n+\t(zero_extend:SI (match_operand:QHIM 1 \"nvptx_nonimmediate_operand\" \"R,m\")))]\n   \"\"\n   \"@\n    %.\\\\tcvt.u32.u%T1\\\\t%0, %1;\n@@ -255,7 +251,7 @@\n \n (define_insn \"zero_extend<mode>di2\"\n   [(set (match_operand:DI 0 \"nvptx_register_operand\" \"=R,R\")\n-\t(zero_extend:DI (match_operand:QHSIM 1 \"nvptx_reg_or_mem_operand\" \"R,m\")))]\n+\t(zero_extend:DI (match_operand:QHSIM 1 \"nvptx_nonimmediate_operand\" \"R,m\")))]\n   \"\"\n   \"@\n    %.\\\\tcvt.u64.u%T1\\\\t%0, %1;\n@@ -264,7 +260,7 @@\n \n (define_insn \"extend<mode>si2\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R,R\")\n-\t(sign_extend:SI (match_operand:QHIM 1 \"nvptx_reg_or_mem_operand\" \"R,m\")))]\n+\t(sign_extend:SI (match_operand:QHIM 1 \"nvptx_nonimmediate_operand\" \"R,m\")))]\n   \"\"\n   \"@\n    %.\\\\tcvt.s32.s%T1\\\\t%0, %1;\n@@ -273,15 +269,15 @@\n \n (define_insn \"extend<mode>di2\"\n   [(set (match_operand:DI 0 \"nvptx_register_operand\" \"=R,R\")\n-\t(sign_extend:DI (match_operand:QHSIM 1 \"nvptx_reg_or_mem_operand\" \"R,m\")))]\n+\t(sign_extend:DI (match_operand:QHSIM 1 \"nvptx_nonimmediate_operand\" \"R,m\")))]\n   \"\"\n   \"@\n    %.\\\\tcvt.s64.s%T1\\\\t%0, %1;\n    %.\\\\tld%A1.s%T1\\\\t%0, %1;\"\n   [(set_attr \"subregs_ok\" \"true\")])\n \n (define_insn \"trunchiqi2\"\n-  [(set (match_operand:QI 0 \"nvptx_reg_or_mem_operand\" \"=R,m\")\n+  [(set (match_operand:QI 0 \"nvptx_nonimmediate_operand\" \"=R,m\")\n \t(truncate:QI (match_operand:HI 1 \"nvptx_register_operand\" \"R,R\")))]\n   \"\"\n   \"@\n@@ -290,7 +286,7 @@\n   [(set_attr \"subregs_ok\" \"true\")])\n \n (define_insn \"truncsi<mode>2\"\n-  [(set (match_operand:QHIM 0 \"nvptx_reg_or_mem_operand\" \"=R,m\")\n+  [(set (match_operand:QHIM 0 \"nvptx_nonimmediate_operand\" \"=R,m\")\n \t(truncate:QHIM (match_operand:SI 1 \"nvptx_register_operand\" \"R,R\")))]\n   \"\"\n   \"@\n@@ -299,7 +295,7 @@\n   [(set_attr \"subregs_ok\" \"true\")])\n \n (define_insn \"truncdi<mode>2\"\n-  [(set (match_operand:QHSIM 0 \"nvptx_reg_or_mem_operand\" \"=R,m\")\n+  [(set (match_operand:QHSIM 0 \"nvptx_nonimmediate_operand\" \"=R,m\")\n \t(truncate:QHSIM (match_operand:DI 1 \"nvptx_register_operand\" \"R,R\")))]\n   \"\"\n   \"@"}]}