{"sha": "ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4NzAxZmU5MTgzMzZhZTY3Njk0ZTE1YThjYTliNGMyMTJhMWRkMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-12-11T21:35:40Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-12-11T21:35:40Z"}, "message": "Add --with-build-config=bootstrap-asan support\n\n\t* Makefile.def (target_modules): Add bootstrap=true and\n\traw_cxx=true to libsanitizer.\n\t* configure.ac (bootstrap_target_libs): Add libsanitizer.\n\t* Makefile.in: Regenerated.\n\t* configure: Likewise.\n\nFrom-SVN: r194425", "tree": {"sha": "a8b6b1aef29c04e29555a704d66db6f3ae7e3f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8b6b1aef29c04e29555a704d66db6f3ae7e3f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d10a2df271f61c3afbfffba661dbf02181cd5549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10a2df271f61c3afbfffba661dbf02181cd5549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d10a2df271f61c3afbfffba661dbf02181cd5549"}], "stats": {"total": 606, "additions": 582, "deletions": 24}, "files": [{"sha": "30d83bfe7084b5f9df86f02907928c926ce8b39c", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "patch": "@@ -1,3 +1,11 @@\n+2012-12-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.def (target_modules): Add bootstrap=true and\n+\traw_cxx=true to libsanitizer.\n+\t* configure.ac (bootstrap_target_libs): Add libsanitizer.\n+\t* Makefile.in: Regenerated.\n+\t* configure: Likewise.\n+\n 2012-12-01  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* MAINTAINERS: Remove self as RTL optimization maintainer."}, {"sha": "8d8af2332cd510f731b00eec01b98908eab0ecfc", "filename": "Makefile.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "patch": "@@ -119,7 +119,10 @@ target_modules = { module= libstdc++-v3;\n \t\t   lib_path=src/.libs;\n \t\t   raw_cxx=true; };\n target_modules = { module= libmudflap; lib_path=.libs; };\n-target_modules = { module= libsanitizer; lib_path=.libs; };\n+target_modules = { module= libsanitizer;\n+\t\t   bootstrap=true;\n+\t\t   lib_path=.libs;\n+\t\t   raw_cxx=true; };\n target_modules = { module= libssp; lib_path=.libs; };\n target_modules = { module= newlib; };\n target_modules = { module= libgcc; bootstrap=true; no_check=true; };"}, {"sha": "a9d2890f7f7f0bd6da17af6e59471b39d2d35427", "filename": "Makefile.in", "status": "modified", "additions": 560, "deletions": 23, "changes": 583, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "patch": "@@ -1073,7 +1073,9 @@ all-host: maybe-all-lto-plugin\n all-target: maybe-all-target-libstdc++-v3\n @endif target-libstdc++-v3-no-bootstrap\n all-target: maybe-all-target-libmudflap\n+@if target-libsanitizer-no-bootstrap\n all-target: maybe-all-target-libsanitizer\n+@endif target-libsanitizer-no-bootstrap\n all-target: maybe-all-target-libssp\n all-target: maybe-all-target-newlib\n @if target-libgcc-no-bootstrap\n@@ -32184,7 +32186,6 @@ configure-target-libsanitizer: stage_current\n @if target-libsanitizer\n maybe-configure-target-libsanitizer: configure-target-libsanitizer\n configure-target-libsanitizer: \n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \techo \"Checking multilib configuration for libsanitizer...\"; \\\n@@ -32202,7 +32203,7 @@ configure-target-libsanitizer:\n \tfi; \\\n \ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n \t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n-\t$(NORMAL_TARGET_EXPORTS)  \\\n+\t$(RAW_CXX_TARGET_EXPORTS)  \\\n \techo Configuring in $(TARGET_SUBDIR)/libsanitizer; \\\n \tcd \"$(TARGET_SUBDIR)/libsanitizer\" || exit 1; \\\n \tcase $(srcdir) in \\\n@@ -32221,6 +32222,276 @@ configure-target-libsanitizer:\n \n \n \n+.PHONY: configure-stage1-target-libsanitizer maybe-configure-stage1-target-libsanitizer\n+maybe-configure-stage1-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-configure-stage1-target-libsanitizer: configure-stage1-target-libsanitizer\n+configure-stage1-target-libsanitizer:\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libsanitizer...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libsanitizer/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 1 in $(TARGET_SUBDIR)/libsanitizer ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libsanitizer/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libsanitizer\"; \\\n+\tlibsrcdir=\"$$s/libsanitizer\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  $(STAGE1_CONFIGURE_FLAGS)\n+@endif target-libsanitizer-bootstrap\n+\n+.PHONY: configure-stage2-target-libsanitizer maybe-configure-stage2-target-libsanitizer\n+maybe-configure-stage2-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-configure-stage2-target-libsanitizer: configure-stage2-target-libsanitizer\n+configure-stage2-target-libsanitizer:\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libsanitizer...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libsanitizer/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 2 in $(TARGET_SUBDIR)/libsanitizer ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libsanitizer/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libsanitizer\"; \\\n+\tlibsrcdir=\"$$s/libsanitizer\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE2_CONFIGURE_FLAGS)\n+@endif target-libsanitizer-bootstrap\n+\n+.PHONY: configure-stage3-target-libsanitizer maybe-configure-stage3-target-libsanitizer\n+maybe-configure-stage3-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-configure-stage3-target-libsanitizer: configure-stage3-target-libsanitizer\n+configure-stage3-target-libsanitizer:\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libsanitizer...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libsanitizer/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 3 in $(TARGET_SUBDIR)/libsanitizer ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libsanitizer/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libsanitizer\"; \\\n+\tlibsrcdir=\"$$s/libsanitizer\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE3_CONFIGURE_FLAGS)\n+@endif target-libsanitizer-bootstrap\n+\n+.PHONY: configure-stage4-target-libsanitizer maybe-configure-stage4-target-libsanitizer\n+maybe-configure-stage4-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-configure-stage4-target-libsanitizer: configure-stage4-target-libsanitizer\n+configure-stage4-target-libsanitizer:\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libsanitizer...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libsanitizer/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 4 in $(TARGET_SUBDIR)/libsanitizer ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libsanitizer/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libsanitizer\"; \\\n+\tlibsrcdir=\"$$s/libsanitizer\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE4_CONFIGURE_FLAGS)\n+@endif target-libsanitizer-bootstrap\n+\n+.PHONY: configure-stageprofile-target-libsanitizer maybe-configure-stageprofile-target-libsanitizer\n+maybe-configure-stageprofile-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-configure-stageprofile-target-libsanitizer: configure-stageprofile-target-libsanitizer\n+configure-stageprofile-target-libsanitizer:\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libsanitizer...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libsanitizer/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage profile in $(TARGET_SUBDIR)/libsanitizer ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libsanitizer/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libsanitizer\"; \\\n+\tlibsrcdir=\"$$s/libsanitizer\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEprofile_CONFIGURE_FLAGS)\n+@endif target-libsanitizer-bootstrap\n+\n+.PHONY: configure-stagefeedback-target-libsanitizer maybe-configure-stagefeedback-target-libsanitizer\n+maybe-configure-stagefeedback-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-configure-stagefeedback-target-libsanitizer: configure-stagefeedback-target-libsanitizer\n+configure-stagefeedback-target-libsanitizer:\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libsanitizer...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libsanitizer/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libsanitizer/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libsanitizer/multilib.tmp $(TARGET_SUBDIR)/libsanitizer/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libsanitizer/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage feedback in $(TARGET_SUBDIR)/libsanitizer ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libsanitizer ; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libsanitizer/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libsanitizer\"; \\\n+\tlibsrcdir=\"$$s/libsanitizer\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEfeedback_CONFIGURE_FLAGS)\n+@endif target-libsanitizer-bootstrap\n+\n+\n+\n \n \n .PHONY: all-target-libsanitizer maybe-all-target-libsanitizer\n@@ -32232,17 +32503,265 @@ all-target-libsanitizer: stage_current\n TARGET-target-libsanitizer=all\n maybe-all-target-libsanitizer: all-target-libsanitizer\n all-target-libsanitizer: configure-target-libsanitizer\n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS)  \\\n+\t$(RAW_CXX_TARGET_EXPORTS)  \\\n \t(cd $(TARGET_SUBDIR)/libsanitizer && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)   \\\n+\t  $(MAKE) $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n \t\t$(TARGET-target-libsanitizer))\n @endif target-libsanitizer\n \n \n \n+.PHONY: all-stage1-target-libsanitizer maybe-all-stage1-target-libsanitizer\n+.PHONY: clean-stage1-target-libsanitizer maybe-clean-stage1-target-libsanitizer\n+maybe-all-stage1-target-libsanitizer:\n+maybe-clean-stage1-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-all-stage1-target-libsanitizer: all-stage1-target-libsanitizer\n+all-stage1: all-stage1-target-libsanitizer\n+TARGET-stage1-target-libsanitizer = $(TARGET-target-libsanitizer)\n+all-stage1-target-libsanitizer: configure-stage1-target-libsanitizer\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS)  \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t  \\\n+\t\tTFLAGS=\"$(STAGE1_TFLAGS)\" \\\n+\t\t$(TARGET-stage1-target-libsanitizer)\n+\n+maybe-clean-stage1-target-libsanitizer: clean-stage1-target-libsanitizer\n+clean-stage1: clean-stage1-target-libsanitizer\n+clean-stage1-target-libsanitizer:\n+\t@if [ $(current_stage) = stage1 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage1-libsanitizer/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage1-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t  clean\n+@endif target-libsanitizer-bootstrap\n+\n+\n+.PHONY: all-stage2-target-libsanitizer maybe-all-stage2-target-libsanitizer\n+.PHONY: clean-stage2-target-libsanitizer maybe-clean-stage2-target-libsanitizer\n+maybe-all-stage2-target-libsanitizer:\n+maybe-clean-stage2-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-all-stage2-target-libsanitizer: all-stage2-target-libsanitizer\n+all-stage2: all-stage2-target-libsanitizer\n+TARGET-stage2-target-libsanitizer = $(TARGET-target-libsanitizer)\n+all-stage2-target-libsanitizer: configure-stage2-target-libsanitizer\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE2_TFLAGS)\" \\\n+\t\t$(TARGET-stage2-target-libsanitizer)\n+\n+maybe-clean-stage2-target-libsanitizer: clean-stage2-target-libsanitizer\n+clean-stage2: clean-stage2-target-libsanitizer\n+clean-stage2-target-libsanitizer:\n+\t@if [ $(current_stage) = stage2 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage2-libsanitizer/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage2-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   clean\n+@endif target-libsanitizer-bootstrap\n+\n+\n+.PHONY: all-stage3-target-libsanitizer maybe-all-stage3-target-libsanitizer\n+.PHONY: clean-stage3-target-libsanitizer maybe-clean-stage3-target-libsanitizer\n+maybe-all-stage3-target-libsanitizer:\n+maybe-clean-stage3-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-all-stage3-target-libsanitizer: all-stage3-target-libsanitizer\n+all-stage3: all-stage3-target-libsanitizer\n+TARGET-stage3-target-libsanitizer = $(TARGET-target-libsanitizer)\n+all-stage3-target-libsanitizer: configure-stage3-target-libsanitizer\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE3_TFLAGS)\" \\\n+\t\t$(TARGET-stage3-target-libsanitizer)\n+\n+maybe-clean-stage3-target-libsanitizer: clean-stage3-target-libsanitizer\n+clean-stage3: clean-stage3-target-libsanitizer\n+clean-stage3-target-libsanitizer:\n+\t@if [ $(current_stage) = stage3 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage3-libsanitizer/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage3-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   clean\n+@endif target-libsanitizer-bootstrap\n+\n+\n+.PHONY: all-stage4-target-libsanitizer maybe-all-stage4-target-libsanitizer\n+.PHONY: clean-stage4-target-libsanitizer maybe-clean-stage4-target-libsanitizer\n+maybe-all-stage4-target-libsanitizer:\n+maybe-clean-stage4-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-all-stage4-target-libsanitizer: all-stage4-target-libsanitizer\n+all-stage4: all-stage4-target-libsanitizer\n+TARGET-stage4-target-libsanitizer = $(TARGET-target-libsanitizer)\n+all-stage4-target-libsanitizer: configure-stage4-target-libsanitizer\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE4_TFLAGS)\" \\\n+\t\t$(TARGET-stage4-target-libsanitizer)\n+\n+maybe-clean-stage4-target-libsanitizer: clean-stage4-target-libsanitizer\n+clean-stage4: clean-stage4-target-libsanitizer\n+clean-stage4-target-libsanitizer:\n+\t@if [ $(current_stage) = stage4 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage4-libsanitizer/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage4-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   clean\n+@endif target-libsanitizer-bootstrap\n+\n+\n+.PHONY: all-stageprofile-target-libsanitizer maybe-all-stageprofile-target-libsanitizer\n+.PHONY: clean-stageprofile-target-libsanitizer maybe-clean-stageprofile-target-libsanitizer\n+maybe-all-stageprofile-target-libsanitizer:\n+maybe-clean-stageprofile-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-all-stageprofile-target-libsanitizer: all-stageprofile-target-libsanitizer\n+all-stageprofile: all-stageprofile-target-libsanitizer\n+TARGET-stageprofile-target-libsanitizer = $(TARGET-target-libsanitizer)\n+all-stageprofile-target-libsanitizer: configure-stageprofile-target-libsanitizer\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGEprofile_TFLAGS)\" \\\n+\t\t$(TARGET-stageprofile-target-libsanitizer)\n+\n+maybe-clean-stageprofile-target-libsanitizer: clean-stageprofile-target-libsanitizer\n+clean-stageprofile: clean-stageprofile-target-libsanitizer\n+clean-stageprofile-target-libsanitizer:\n+\t@if [ $(current_stage) = stageprofile ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stageprofile-libsanitizer/Makefile ] || exit 0; \\\n+\t  $(MAKE) stageprofile-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   clean\n+@endif target-libsanitizer-bootstrap\n+\n+\n+.PHONY: all-stagefeedback-target-libsanitizer maybe-all-stagefeedback-target-libsanitizer\n+.PHONY: clean-stagefeedback-target-libsanitizer maybe-clean-stagefeedback-target-libsanitizer\n+maybe-all-stagefeedback-target-libsanitizer:\n+maybe-clean-stagefeedback-target-libsanitizer:\n+@if target-libsanitizer-bootstrap\n+maybe-all-stagefeedback-target-libsanitizer: all-stagefeedback-target-libsanitizer\n+all-stagefeedback: all-stagefeedback-target-libsanitizer\n+TARGET-stagefeedback-target-libsanitizer = $(TARGET-target-libsanitizer)\n+all-stagefeedback-target-libsanitizer: configure-stagefeedback-target-libsanitizer\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\" \\\n+\t\t$(TARGET-stagefeedback-target-libsanitizer)\n+\n+maybe-clean-stagefeedback-target-libsanitizer: clean-stagefeedback-target-libsanitizer\n+clean-stagefeedback: clean-stagefeedback-target-libsanitizer\n+clean-stagefeedback-target-libsanitizer:\n+\t@if [ $(current_stage) = stagefeedback ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stagefeedback-libsanitizer/Makefile ] || exit 0; \\\n+\t  $(MAKE) stagefeedback-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libsanitizer && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   clean\n+@endif target-libsanitizer-bootstrap\n+\n+\n+\n+\n \n \n .PHONY: check-target-libsanitizer maybe-check-target-libsanitizer\n@@ -32254,9 +32773,9 @@ check-target-libsanitizer:\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \t(cd $(TARGET_SUBDIR)/libsanitizer && \\\n-\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)   check)\n+\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)  'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   check)\n \n @endif target-libsanitizer\n \n@@ -32269,7 +32788,7 @@ install-target-libsanitizer: installdirs\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \t(cd $(TARGET_SUBDIR)/libsanitizer && \\\n \t  $(MAKE) $(TARGET_FLAGS_TO_PASS)  install)\n \n@@ -32284,7 +32803,7 @@ install-strip-target-libsanitizer: installdirs\n \t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \t(cd $(TARGET_SUBDIR)/libsanitizer && \\\n \t  $(MAKE) $(TARGET_FLAGS_TO_PASS)  install-strip)\n \n@@ -32303,7 +32822,7 @@ info-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing info in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32329,7 +32848,7 @@ dvi-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing dvi in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32355,7 +32874,7 @@ pdf-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing pdf in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32381,7 +32900,7 @@ html-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing html in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32407,7 +32926,7 @@ TAGS-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing TAGS in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32434,7 +32953,7 @@ install-info-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing install-info in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32461,7 +32980,7 @@ install-pdf-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing install-pdf in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32488,7 +33007,7 @@ install-html-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing install-html in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32514,7 +33033,7 @@ installcheck-target-libsanitizer: \\\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing installcheck in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32539,7 +33058,7 @@ mostlyclean-target-libsanitizer:\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing mostlyclean in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32564,7 +33083,7 @@ clean-target-libsanitizer:\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing clean in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32589,7 +33108,7 @@ distclean-target-libsanitizer:\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing distclean in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -32614,7 +33133,7 @@ maintainer-clean-target-libsanitizer:\n \t@[ -f $(TARGET_SUBDIR)/libsanitizer/Makefile ] || exit 0 ; \\\n \tr=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n \techo \"Doing maintainer-clean in $(TARGET_SUBDIR)/libsanitizer\" ; \\\n \tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n \t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n@@ -44869,7 +45388,12 @@ configure-stage4-target-libstdc++-v3: maybe-all-stage4-gcc\n configure-stageprofile-target-libstdc++-v3: maybe-all-stageprofile-gcc\n configure-stagefeedback-target-libstdc++-v3: maybe-all-stagefeedback-gcc\n configure-target-libmudflap: stage_last\n-configure-target-libsanitizer: stage_last\n+configure-stage1-target-libsanitizer: maybe-all-stage1-gcc\n+configure-stage2-target-libsanitizer: maybe-all-stage2-gcc\n+configure-stage3-target-libsanitizer: maybe-all-stage3-gcc\n+configure-stage4-target-libsanitizer: maybe-all-stage4-gcc\n+configure-stageprofile-target-libsanitizer: maybe-all-stageprofile-gcc\n+configure-stagefeedback-target-libsanitizer: maybe-all-stagefeedback-gcc\n configure-target-libssp: stage_last\n configure-target-newlib: stage_last\n configure-stage1-target-libgcc: maybe-all-stage1-gcc\n@@ -45648,6 +46172,13 @@ configure-stage4-target-libstdc++-v3: maybe-configure-stage4-target-libgomp\n configure-stageprofile-target-libstdc++-v3: maybe-configure-stageprofile-target-libgomp\n configure-stagefeedback-target-libstdc++-v3: maybe-configure-stagefeedback-target-libgomp\n configure-target-libsanitizer: maybe-all-target-libstdc++-v3\n+\n+configure-stage1-target-libsanitizer: maybe-all-stage1-target-libstdc++-v3\n+configure-stage2-target-libsanitizer: maybe-all-stage2-target-libstdc++-v3\n+configure-stage3-target-libsanitizer: maybe-all-stage3-target-libstdc++-v3\n+configure-stage4-target-libsanitizer: maybe-all-stage4-target-libstdc++-v3\n+configure-stageprofile-target-libsanitizer: maybe-all-stageprofile-target-libstdc++-v3\n+configure-stagefeedback-target-libsanitizer: maybe-all-stagefeedback-target-libstdc++-v3\n all-target-libstdc++-v3: maybe-configure-target-libgomp\n \n all-stage1-target-libstdc++-v3: maybe-configure-stage1-target-libgomp\n@@ -45675,6 +46206,12 @@ configure-stage3-target-libstdc++-v3: maybe-all-stage3-target-libgcc\n configure-stage4-target-libstdc++-v3: maybe-all-stage4-target-libgcc\n configure-stageprofile-target-libstdc++-v3: maybe-all-stageprofile-target-libgcc\n configure-stagefeedback-target-libstdc++-v3: maybe-all-stagefeedback-target-libgcc\n+configure-stage1-target-libsanitizer: maybe-all-stage1-target-libgcc\n+configure-stage2-target-libsanitizer: maybe-all-stage2-target-libgcc\n+configure-stage3-target-libsanitizer: maybe-all-stage3-target-libgcc\n+configure-stage4-target-libsanitizer: maybe-all-stage4-target-libgcc\n+configure-stageprofile-target-libsanitizer: maybe-all-stageprofile-target-libgcc\n+configure-stagefeedback-target-libsanitizer: maybe-all-stagefeedback-target-libgcc\n configure-stage1-target-libgomp: maybe-all-stage1-target-libgcc\n configure-stage2-target-libgomp: maybe-all-stage2-target-libgcc\n configure-stage3-target-libgomp: maybe-all-stage3-target-libgcc"}, {"sha": "acff17345db651e30a4460ff1f078315a2955931", "filename": "configure", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "patch": "@@ -6913,6 +6913,11 @@ if echo \" ${target_configdirs} \" | grep \" libgomp \" > /dev/null 2>&1 ; then\n   bootstrap_target_libs=${bootstrap_target_libs}target-libgomp,\n fi\n \n+# If we are building libsanitizer, bootstrap it.\n+if echo \" ${target_configdirs} \" | grep \" libsanitizer \" > /dev/null 2>&1 ; then\n+  bootstrap_target_libs=${bootstrap_target_libs}target-libsanitizer,\n+fi\n+\n # Determine whether gdb needs tk/tcl or not.\n # Use 'maybe' since enable_gdbtk might be true even if tk isn't available\n # and in that case we want gdb to be built without tk.  Ugh!"}, {"sha": "a92ff3af8b0be0c47b2d233ab991506e62346c71", "filename": "configure.ac", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8701fe918336ae67694e15a8ca9b4c212a1dd3/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=ac8701fe918336ae67694e15a8ca9b4c212a1dd3", "patch": "@@ -2433,6 +2433,11 @@ if echo \" ${target_configdirs} \" | grep \" libgomp \" > /dev/null 2>&1 ; then\n   bootstrap_target_libs=${bootstrap_target_libs}target-libgomp,\n fi\n \n+# If we are building libsanitizer, bootstrap it.\n+if echo \" ${target_configdirs} \" | grep \" libsanitizer \" > /dev/null 2>&1 ; then\n+  bootstrap_target_libs=${bootstrap_target_libs}target-libsanitizer,\n+fi\n+\n # Determine whether gdb needs tk/tcl or not.\n # Use 'maybe' since enable_gdbtk might be true even if tk isn't available\n # and in that case we want gdb to be built without tk.  Ugh!"}]}