{"sha": "2cca6e3f3dd2b10d8a136a15d994c9511f2fc932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjYTZlM2YzZGQyYjEwZDhhMTM2YTE1ZDk5NGM5NTExZjJmYzkzMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-08T21:12:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-08T21:12:01Z"}, "message": "(break_out_memory_refs): Don't call mark_reg_pointer here.\n\n(memory_address): Call it here if X changed and is now a REG or REG +\nCONST_INT.\n\nFrom-SVN: r6729", "tree": {"sha": "ca48568c1ce7117d93329edfe83078a8e6e99503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca48568c1ce7117d93329edfe83078a8e6e99503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cca6e3f3dd2b10d8a136a15d994c9511f2fc932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cca6e3f3dd2b10d8a136a15d994c9511f2fc932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cca6e3f3dd2b10d8a136a15d994c9511f2fc932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cca6e3f3dd2b10d8a136a15d994c9511f2fc932/comments", "author": null, "committer": null, "parents": [{"sha": "2fe204da02529a9a1449fd5c32df6e412fe2d0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe204da02529a9a1449fd5c32df6e412fe2d0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe204da02529a9a1449fd5c32df6e412fe2d0eb"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "914abc8a7be8c37ca5f5e88c87b81f64af027215", "filename": "gcc/explow.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cca6e3f3dd2b10d8a136a15d994c9511f2fc932/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cca6e3f3dd2b10d8a136a15d994c9511f2fc932/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=2cca6e3f3dd2b10d8a136a15d994c9511f2fc932", "patch": "@@ -274,19 +274,17 @@ break_out_memory_refs (x)\n   if (GET_CODE (x) == MEM\n       || (CONSTANT_P (x) && CONSTANT_ADDRESS_P (x)\n \t  && GET_MODE (x) != VOIDmode))\n-    {\n-      register rtx temp = force_reg (GET_MODE (x), x);\n-      mark_reg_pointer (temp);\n-      x = temp;\n-    }\n+    x = force_reg (GET_MODE (x), x);\n   else if (GET_CODE (x) == PLUS || GET_CODE (x) == MINUS\n \t   || GET_CODE (x) == MULT)\n     {\n       register rtx op0 = break_out_memory_refs (XEXP (x, 0));\n       register rtx op1 = break_out_memory_refs (XEXP (x, 1));\n+\n       if (op0 != XEXP (x, 0) || op1 != XEXP (x, 1))\n \tx = gen_rtx (GET_CODE (x), Pmode, op0, op1);\n     }\n+\n   return x;\n }\n \n@@ -435,6 +433,17 @@ memory_address (mode, x)\n \n  done:\n \n+  /* If we didn't change the address, we are done.  Otherwise, mark\n+     a reg as a pointer if we have REG or REG + CONST_INT.  */\n+  if (oldx == x)\n+    return x;\n+  else if (GET_CODE (x) == REG)\n+    mark_reg_pointer (x);\n+  else if (GET_CODE (x) == PLUS\n+\t   && GET_CODE (XEXP (x, 0)) == REG\n+\t   && GET_CODE (XEXP (x, 1)) == CONST_INT)\n+    mark_reg_pointer (XEXP (x, 0));\n+\n   /* OLDX may have been the address on a temporary.  Update the address\n      to indicate that X is now used.  */\n   update_temp_slot_address (oldx, x);"}]}