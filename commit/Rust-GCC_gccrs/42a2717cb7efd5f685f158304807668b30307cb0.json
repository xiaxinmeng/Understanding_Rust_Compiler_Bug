{"sha": "42a2717cb7efd5f685f158304807668b30307cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhMjcxN2NiN2VmZDVmNjg1ZjE1ODMwNDgwNzY2OGIzMDMwN2NiMA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-05-22T10:38:09Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-05-22T10:38:09Z"}, "message": "frontend-passes.c (cfe_register_funcs): Also register character functions if their charlens are known and constant.\n\n2011-05-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* frontend-passes.c (cfe_register_funcs):  Also register\n\tcharacter functions if their charlens are known and constant.\n\tAlso register allocatable functions.\n\n2011-05-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* gfortran.dg/function_optimize_8.f90:  New test case.\n\nFrom-SVN: r174027", "tree": {"sha": "6d75073bdeaba189f447c9d503bf807a5f7c390d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d75073bdeaba189f447c9d503bf807a5f7c390d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42a2717cb7efd5f685f158304807668b30307cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a2717cb7efd5f685f158304807668b30307cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a2717cb7efd5f685f158304807668b30307cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a2717cb7efd5f685f158304807668b30307cb0/comments", "author": null, "committer": null, "parents": [{"sha": "e38fdc948a93ebe926ecbd243f1f78dbe018b853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38fdc948a93ebe926ecbd243f1f78dbe018b853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38fdc948a93ebe926ecbd243f1f78dbe018b853"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "55994c3140e0d07cbfb96acf0037aa60fef908b9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=42a2717cb7efd5f685f158304807668b30307cb0", "patch": "@@ -1,3 +1,9 @@\n+2011-05-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* frontend-passes.c (cfe_register_funcs):  Also register\n+\tcharacter functions if their charlens are known and constant.\n+\tAlso register allocatable functions.\n+\n 2011-05-21  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/48699"}, {"sha": "0137a9ddbf2a1cd59a26e9d9493a0f540f674058", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=42a2717cb7efd5f685f158304807668b30307cb0", "patch": "@@ -137,8 +137,7 @@ optimize_expr (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n \n \n /* Callback function for common function elimination, called from cfe_expr_0.\n-   Put all eligible function expressions into expr_array.  We can't do\n-   allocatable functions.  */\n+   Put all eligible function expressions into expr_array.  */\n \n static int\n cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n@@ -148,8 +147,10 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n   if ((*e)->expr_type != EXPR_FUNCTION)\n     return 0;\n \n-  /* We don't do character functions (yet).  */\n-  if ((*e)->ts.type == BT_CHARACTER)\n+  /* We don't do character functions with unknown charlens.  */\n+  if ((*e)->ts.type == BT_CHARACTER \n+      && ((*e)->ts.u.cl == NULL || (*e)->ts.u.cl->length == NULL\n+\t  || (*e)->ts.u.cl->length->expr_type != EXPR_CONSTANT))\n     return 0;\n \n   /* If we don't know the shape at compile time, we create an allocatable\n@@ -163,9 +164,6 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n      is specified.  */\n   if ((*e)->value.function.esym)\n     {\n-      if ((*e)->value.function.esym->attr.allocatable)\n-\treturn 0;\n-\n       /* Don't create an array temporary for elemental functions.  */\n       if ((*e)->value.function.esym->attr.elemental && (*e)->rank > 0)\n \treturn 0;\n@@ -181,9 +179,10 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n   if ((*e)->value.function.isym)\n     {\n       /* Conversions are handled on the fly by the middle end,\n-\t transpose during trans-* stages.  */\n+\t transpose during trans-* stages and TRANSFER by the middle end.  */\n       if ((*e)->value.function.isym->id == GFC_ISYM_CONVERSION\n-\t  || (*e)->value.function.isym->id == GFC_ISYM_TRANSPOSE)\n+\t  || (*e)->value.function.isym->id == GFC_ISYM_TRANSPOSE\n+\t  || (*e)->value.function.isym->id == GFC_ISYM_TRANSFER)\n \treturn 0;\n \n       /* Don't create an array temporary for elemental functions,"}, {"sha": "74831063f8ec255835913e8c497a1f75554f9967", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42a2717cb7efd5f685f158304807668b30307cb0", "patch": "@@ -1,3 +1,7 @@\n+2011-05-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.dg/function_optimize_8.f90:  New test case.\n+\n 2011-05-22  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/49087"}, {"sha": "c197a6d7ff54ef66b9b676e296f528e46b6441d1", "filename": "gcc/testsuite/gfortran.dg/function_optimize_8.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a2717cb7efd5f685f158304807668b30307cb0/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_8.f90?ref=42a2717cb7efd5f685f158304807668b30307cb0", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do compile }\n+! { dg-options \"-O -fdump-tree-original\" }\n+module x\n+  implicit none\n+contains\n+  pure function myfunc(x) result(y)\n+    integer, intent(in) :: x\n+    integer, dimension(:), allocatable :: y\n+    allocate (y(3))\n+    y(1) = x\n+    y(2) = 2*x\n+    y(3) = 3*x\n+  end function myfunc\n+\n+  pure function mychar(x) result(r)\n+    integer, intent(in) :: x\n+    character(len=2) :: r\n+    r = achar(x + iachar('0')) // achar(x + iachar('1'))\n+  end function mychar\n+end module x\n+\n+program main\n+  use x\n+  implicit none\n+  integer :: n\n+  character(len=20) :: line\n+  n = 3\n+  write (unit=line,fmt='(3I2)') myfunc(n) + myfunc(n)\n+  if (line /= ' 61218') call abort\n+  write (unit=line,fmt='(A)') mychar(2) // mychar(2)\n+  if (line /= '2323') call abort\n+end program main\n+! { dg-final { scan-tree-dump-times \"myfunc\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"mychar\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }\n+! { dg-final { cleanup-modules \"x\" } }"}]}