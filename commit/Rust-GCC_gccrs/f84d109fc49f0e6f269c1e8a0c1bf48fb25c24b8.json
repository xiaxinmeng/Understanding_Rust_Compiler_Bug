{"sha": "f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0ZDEwOWZjNDlmMGU2ZjI2OWMxZThhMGMxYmY0OGZiMjVjMjRiOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-31T08:02:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-31T08:02:55Z"}, "message": "bt-load.c: Replace \"gen_rtx (FOO, \" with \"gen_rtx_FOO (\".\n\n\t* bt-load.c: Replace \"gen_rtx (FOO, \" with \"gen_rtx_FOO (\".\n\t* calls.c: Likewise.\n\t* emit-rtl.c: Likewise.\n\t* function.c: Likewise.\n\t* reload1.c: Likewise.\n\t* config/i386/cygming.h: Likewise.\n\t* config/i386/i386.c: Likewise.\n\t* config/i386/winnt.c: Likewise.\n\nFrom-SVN: r77025", "tree": {"sha": "1c4c36ba85199ae99a87b5792deb74d8342d3e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4c36ba85199ae99a87b5792deb74d8342d3e5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/comments", "author": null, "committer": null, "parents": [{"sha": "354b7da5e35d8b4266e484d514045a7dc1f624fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354b7da5e35d8b4266e484d514045a7dc1f624fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354b7da5e35d8b4266e484d514045a7dc1f624fb"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "5c3b446701b2e25594512d259edcce232fcb96a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -1,3 +1,14 @@\n+2004-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* bt-load.c: Replace \"gen_rtx (FOO, \" with \"gen_rtx_FOO (\".\n+\t* calls.c: Likewise.\n+\t* emit-rtl.c: Likewise.\n+\t* function.c: Likewise.\n+\t* reload1.c: Likewise.\n+\t* config/i386/cygming.h: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\n 2004-01-30  Dara Hazeghi  <dhazeghi@yahoo.com>\n \n \tPR bootstrap/9249"}, {"sha": "f49cec8d00b692f6848441c6aea1171c8264838a", "filename": "gcc/bt-load.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -1155,7 +1155,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n   set = single_set (old_insn);\n   src = SET_SRC (set);\n   btr_mode = GET_MODE (SET_DEST (set));\n-  btr_rtx = gen_rtx (REG, btr_mode, btr);\n+  btr_rtx = gen_rtx_REG (btr_mode, btr);\n \n   new_insn = gen_move_insn (btr_rtx, src);\n \n@@ -1184,7 +1184,7 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n \t  || GET_MODE (user->use) == VOIDmode)\n \treplacement_rtx = btr_rtx;\n       else\n-\treplacement_rtx = gen_rtx (REG, GET_MODE (user->use), btr);\n+\treplacement_rtx = gen_rtx_REG (GET_MODE (user->use), btr);\n       replace_rtx (user->insn, user->use, replacement_rtx);\n       user->use = replacement_rtx;\n     }"}, {"sha": "7960bbc7601fa2d9e30c4b6d0efe80a809a5439f", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -3549,7 +3549,7 @@ expand_call (tree exp, rtx target, int ignore)\n   if (flags & ECF_SP_DEPRESSED)\n     {\n       clear_pending_stack_adjust ();\n-      emit_insn (gen_rtx (CLOBBER, VOIDmode, stack_pointer_rtx));\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode, stack_pointer_rtx));\n       emit_move_insn (virtual_stack_dynamic_rtx, stack_pointer_rtx);\n       save_stack_pointer ();\n     }"}, {"sha": "00628f09e2ddb20844b5344f95e3d52d18beae0c", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -315,7 +315,7 @@ extern void i386_pe_unique_section (TREE, int);\n #define PROFILE_HOOK(LABEL)\t\t\t\t\t\t\\\n   if (MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      emit_call_insn (gen_rtx (CALL, VOIDmode,\t\t\t\t\\\n+      emit_call_insn (gen_rtx_CALL (VOIDmode,\t\t\t\t\\\n \tgen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\t\\\n \t\t     gen_rtx_SYMBOL_REF (Pmode, \"_monstartup\")),\t\\\n \tconst0_rtx));\t\t\t\t\t\t\t\\"}, {"sha": "02105a8f0da91a30d47e5b8d84aa80d2808a4559", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -12766,7 +12766,7 @@ x86_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n     }\n \n #ifdef TRANSFER_FROM_TRAMPOLINE\n-  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__enable_execute_stack\"),\n \t\t     LCT_NORMAL, VOIDmode, 1, tramp, Pmode);\n #endif\n }"}, {"sha": "cf7b61ebcc0c4cc8dea5560104c3bd0fab21d6b1", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -345,7 +345,7 @@ i386_pe_mark_dllexport (tree decl)\n   idp = get_identifier (newname);\n \n   XEXP (DECL_RTL (decl), 0) =\n-    gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (idp));\n+    gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n }\n \n /* Mark a DECL as being dllimport'd.  */\n@@ -393,9 +393,9 @@ i386_pe_mark_dllimport (tree decl)\n      identical.  */\n   idp = get_identifier (newname);\n \n-  newrtl = gen_rtx (MEM, Pmode,\n-\t\t    gen_rtx (SYMBOL_REF, Pmode,\n-\t\t\t     IDENTIFIER_POINTER (idp)));\n+  newrtl = gen_rtx_MEM (Pmode,\n+\t\t\tgen_rtx_SYMBOL_REF (Pmode,\n+\t\t\t\t\t    IDENTIFIER_POINTER (idp)));\n   XEXP (DECL_RTL (decl), 0) = newrtl;\n \n   /* Can't treat a pointer to this as a constant address */\n@@ -492,11 +492,11 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n       if (lookup_attribute (\"stdcall\",\n \t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n         XEXP (DECL_RTL (decl), 0) =\n-\t  gen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (decl));\n+\t  gen_rtx_SYMBOL_REF (Pmode, gen_stdcall_suffix (decl));\n       else if (lookup_attribute (\"fastcall\",\n \t\t\t\t TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n         XEXP (DECL_RTL (decl), 0) =\n-\t  gen_rtx (SYMBOL_REF, Pmode, gen_fastcall_suffix (decl));\n+\t  gen_rtx_SYMBOL_REF (Pmode, gen_fastcall_suffix (decl));\n     }\n \n   /* Mark the decl so we can tell from the rtl whether the object is\n@@ -523,7 +523,7 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n \n       /* Remove DLL_IMPORT_PREFIX.  */\n       tree idp = get_identifier (oldname + strlen (DLL_IMPORT_PREFIX));\n-      rtx newrtl = gen_rtx (SYMBOL_REF, Pmode, IDENTIFIER_POINTER (idp));\n+      rtx newrtl = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (idp));\n \n       if (DECL_INITIAL (decl) || !DECL_EXTERNAL (decl))\n \twarning (\"%J'%D' defined locally after being \""}, {"sha": "c720b651df8bc90baaf39b27773e4312e6d4d197", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -660,13 +660,13 @@ gen_lowpart_SUBREG (enum machine_mode mode, rtx reg)\n **\n **\t\t...would be generated by the following C code:\n **\n-**\t\tgen_rtx (PLUS, QImode,\n-**\t\t    gen_rtx (MEM, QImode,\n-**\t\t\tgen_rtx (REG, SImode, 1)),\n-**\t\t    gen_rtx (MEM, QImode,\n-**\t\t\tgen_rtx (PLUS, SImode,\n-**\t\t\t    gen_rtx (REG, SImode, 2),\n-**\t\t\t    gen_rtx (REG, SImode, 3)))),\n+**\t\tgen_rtx_PLUS (QImode,\n+**\t\t    gen_rtx_MEM (QImode,\n+**\t\t\tgen_rtx_REG (SImode, 1)),\n+**\t\t    gen_rtx_MEM (QImode,\n+**\t\t\tgen_rtx_PLUS (SImode,\n+**\t\t\t    gen_rtx_REG (SImode, 2),\n+**\t\t\t    gen_rtx_REG (SImode, 3)))),\n */\n \n /*VARARGS2*/"}, {"sha": "11edd8b9b2772a58990d700f2fa4c939b72b5c3e", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -3241,9 +3241,9 @@ purge_addressof_1 (rtx *loc, rtx insn, int force, int store, int may_postpone,\n \t\t    return true;\n \t\t  }\n \t      purge_addressof_replacements\n-\t\t= gen_rtx (EXPR_LIST, VOIDmode, XEXP (x, 0),\n-\t\t\t   gen_rtx_EXPR_LIST (VOIDmode, sub,\n-\t\t\t\t\t      purge_addressof_replacements));\n+\t\t= gen_rtx_EXPR_LIST (VOIDmode, XEXP (x, 0),\n+\t\t\t\t     gen_rtx_EXPR_LIST (VOIDmode, sub,\n+\t\t\t\t\t\t\tpurge_addressof_replacements));\n \t      return true;\n \t    }\n \t  goto restart;"}, {"sha": "32341d1c231ae746e4d03b82359c831e8f32fb33", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f84d109fc49f0e6f269c1e8a0c1bf48fb25c24b8", "patch": "@@ -3478,7 +3478,7 @@ init_elim_table (void)\n \n   /* Count the number of eliminable registers and build the FROM and TO\n      REG rtx's.  Note that code in gen_rtx will cause, e.g.,\n-     gen_rtx (REG, Pmode, STACK_POINTER_REGNUM) to equal stack_pointer_rtx.\n+     gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) to equal stack_pointer_rtx.\n      We depend on this.  */\n   for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n     {"}]}