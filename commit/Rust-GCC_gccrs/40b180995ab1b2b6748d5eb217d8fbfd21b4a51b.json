{"sha": "40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "node_id": "C_kwDOANBUbNoAKDQwYjE4MDk5NWFiMWIyYjY3NDhkNWViMjE3ZDhmYmZkMjFiNGE1MWI", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-11-19T09:34:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-02T16:26:19Z"}, "message": "[Ada] Proof of System.Val_Util utilities for 'Value support\n\ngcc/ada/\n\n\t* libgnat/s-valboo.adb (First_Non_Space_Ghost): Move to\n\tutilities.\n\t(Value_Boolean): Prefix call to First_Non_Space_Ghost.\n\t* libgnat/s-valboo.ads (First_Non_Space_Ghost): Move to\n\tutilities.\n\t(Is_Boolean_Image_Ghost, Value_Boolean): Prefix call to\n\tFirst_Non_Space_Ghost.\n\t* libgnat/s-valuer.adb (Scan_Raw_Real): Adapt to change of\n\tfunction Scan_Exponent to procedure.\n\t* libgnat/s-valueu.adb (Scan_Raw_Unsigned): Adapt to change of\n\tfunction Scan_Exponent to procedure.\n\t* libgnat/s-valuti.adb (First_Non_Space_Ghost): Function moved\n\there.\n\t(Last_Number_Ghost): New ghost query function.\n\t(Scan_Exponent): Change function with side-effects into\n\tprocedure, to mark in SPARK. Prove procedure wrt contract.\n\tChange type of local P to avoid possible range check failure (it\n\tis not known whether this can be activated by callers).\n\t(Scan_Plus_Sign, Scan_Sign): Change type of local P to avoid\n\tpossible range check failure. Add loop invariants and assertions\n\tfor proof.\n\t(Scan_Trailing_Blanks): Add loop invariant.\n\t(Scan_Underscore): Remove SPARK_Mode Off.\n\t* libgnat/s-valuti.ads (First_Non_Space_Ghost): Function moved\n\there.\n\t(Last_Number_Ghost, Only_Number_Ghost, Is_Natural_Format_Ghost,\n\tScan_Natural_Ghost): New ghost query functions.\n\t(Scan_Plus_Sign, Scan_Sign, Scan_Exponent, Scan_Trailing_Blanks,\n\tScan_Underscore): Add functional contracts.", "tree": {"sha": "22b9957fc7805dda51811c7b8ec3a37302ca5dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22b9957fc7805dda51811c7b8ec3a37302ca5dec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df3ec0e7e070fec09e0cd1f8064300cb3a1d402"}], "stats": {"total": 378, "additions": 307, "deletions": 71}, "files": [{"sha": "7559de3839552acfc2f423799e979a121efec2d6", "filename": "gcc/ada/libgnat/s-valboo.adb", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valboo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valboo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valboo.adb?ref=40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "patch": "@@ -43,19 +43,6 @@ package body System.Val_Bool\n   with SPARK_Mode\n is\n \n-   function First_Non_Space_Ghost (S : String) return Positive is\n-   begin\n-      for J in S'Range loop\n-         if S (J) /= ' ' then\n-            return J;\n-         end if;\n-\n-         pragma Loop_Invariant (for all K in S'First .. J => S (K) = ' ');\n-      end loop;\n-\n-      raise Program_Error;\n-   end First_Non_Space_Ghost;\n-\n    -------------------\n    -- Value_Boolean --\n    -------------------\n@@ -68,7 +55,7 @@ is\n    begin\n       Normalize_String (S, F, L);\n \n-      pragma Assert (F = First_Non_Space_Ghost (S));\n+      pragma Assert (F = System.Val_Util.First_Non_Space_Ghost (S));\n \n       if S (F .. L) = \"TRUE\" then\n          return True;"}, {"sha": "c4448e47dfa0670c9394c73c0cb757f9bbf3104e", "filename": "gcc/ada/libgnat/s-valboo.ads", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valboo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valboo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valboo.ads?ref=40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "patch": "@@ -47,22 +47,11 @@ package System.Val_Bool\n is\n    pragma Preelaborate;\n \n-   function First_Non_Space_Ghost (S : String) return Positive\n-   with\n-     Ghost,\n-     Pre  => not System.Val_Util.Only_Space_Ghost (S, S'First, S'Last),\n-     Post => First_Non_Space_Ghost'Result in S'Range\n-       and then S (First_Non_Space_Ghost'Result) /= ' '\n-       and then System.Val_Util.Only_Space_Ghost\n-         (S, S'First, First_Non_Space_Ghost'Result - 1);\n-   --  Ghost function that returns the index of the first non-space character\n-   --  in S, which necessarily exists given the precondition on S.\n-\n    function Is_Boolean_Image_Ghost (Str : String) return Boolean is\n      (not System.Val_Util.Only_Space_Ghost (Str, Str'First, Str'Last)\n         and then\n       (declare\n-         F : constant Positive := First_Non_Space_Ghost (Str);\n+         F : constant Positive := System.Val_Util.First_Non_Space_Ghost (Str);\n        begin\n          (F <= Str'Last - 3\n           and then Str (F)     in 't' | 'T'\n@@ -92,7 +81,8 @@ is\n    with\n      Pre  => Is_Boolean_Image_Ghost (Str),\n      Post =>\n-       Value_Boolean'Result = (Str (First_Non_Space_Ghost (Str)) in 't' | 'T');\n+       Value_Boolean'Result =\n+         (Str (System.Val_Util.First_Non_Space_Ghost (Str)) in 't' | 'T');\n    --  Computes Boolean'Value (Str)\n \n end System.Val_Bool;"}, {"sha": "a1793fa2c0e88dfbea1f349410106ab51d4703e3", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "patch": "@@ -511,6 +511,8 @@ package body System.Value_R is\n       Value : Uns;\n       --  Mantissa as an Integer\n \n+      Expon : Integer;\n+\n    begin\n       --  The default base is 10\n \n@@ -643,7 +645,8 @@ package body System.Value_R is\n       --  Update pointer and scan exponent\n \n       Ptr.all := Index;\n-      Scale := Scale + Scan_Exponent (Str, Ptr, Max, Real => True);\n+      Scan_Exponent (Str, Ptr, Max, Expon, Real => True);\n+      Scale := Scale + Expon;\n \n       --  Here is where we check for a bad based number\n "}, {"sha": "5b77358d72af4dd188d3978c0bbde2f03ce3d5fb", "filename": "gcc/ada/libgnat/s-valueu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valueu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valueu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valueu.adb?ref=40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "patch": "@@ -234,7 +234,7 @@ package body System.Value_U is\n       --  Come here with scanned unsigned value in Uval. The only remaining\n       --  required step is to deal with exponent if one is present.\n \n-      Expon := Scan_Exponent (Str, Ptr, Max);\n+      Scan_Exponent (Str, Ptr, Max, Expon);\n \n       if Expon /= 0 and then Uval /= 0 then\n "}, {"sha": "3e62d09b59580fec731e2f7a4166f74418fb61b3", "filename": "gcc/ada/libgnat/s-valuti.adb", "status": "modified", "additions": 105, "deletions": 34, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.adb?ref=40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "patch": "@@ -62,6 +62,41 @@ is\n       end if;\n    end Bad_Value;\n \n+   ---------------------------\n+   -- First_Non_Space_Ghost --\n+   ---------------------------\n+\n+   function First_Non_Space_Ghost (S : String) return Positive is\n+   begin\n+      for J in S'Range loop\n+         if S (J) /= ' ' then\n+            return J;\n+         end if;\n+\n+         pragma Loop_Invariant (for all K in S'First .. J => S (K) = ' ');\n+      end loop;\n+\n+      raise Program_Error;\n+   end First_Non_Space_Ghost;\n+\n+   -----------------------\n+   -- Last_Number_Ghost --\n+   -----------------------\n+\n+   function Last_Number_Ghost (Str : String) return Positive is\n+   begin\n+      for J in Str'Range loop\n+         if Str (J) not in '0' .. '9' | '_' then\n+            return J - 1;\n+         end if;\n+\n+         pragma Loop_Invariant\n+           (for all K in Str'First .. J => Str (K) in '0' .. '9' | '_');\n+      end loop;\n+\n+      return Str'Last;\n+   end Last_Number_Ghost;\n+\n    ----------------------\n    -- Normalize_String --\n    ----------------------\n@@ -119,23 +154,23 @@ is\n    -- Scan_Exponent --\n    -------------------\n \n-   function Scan_Exponent\n+   procedure Scan_Exponent\n      (Str  : String;\n       Ptr  : not null access Integer;\n       Max  : Integer;\n-      Real : Boolean := False) return Integer\n-   with\n-     SPARK_Mode => Off  --  Function with side-effect through Ptr\n+      Exp  : out Integer;\n+      Real : Boolean := False)\n    is\n-      P : Natural := Ptr.all;\n+      P : Integer := Ptr.all;\n       M : Boolean;\n       X : Integer;\n \n    begin\n       if P >= Max\n         or else (Str (P) /= 'E' and then Str (P) /= 'e')\n       then\n-         return 0;\n+         Exp := 0;\n+         return;\n       end if;\n \n       --  We have an E/e, see if sign follows\n@@ -146,7 +181,8 @@ is\n          P := P + 1;\n \n          if P > Max then\n-            return 0;\n+            Exp := 0;\n+            return;\n          else\n             M := False;\n          end if;\n@@ -155,7 +191,8 @@ is\n          P := P + 1;\n \n          if P > Max or else not Real then\n-            return 0;\n+            Exp := 0;\n+            return;\n          else\n             M := True;\n          end if;\n@@ -165,7 +202,8 @@ is\n       end if;\n \n       if Str (P) not in '0' .. '9' then\n-         return 0;\n+         Exp := 0;\n+         return;\n       end if;\n \n       --  Scan out the exponent value as an unsigned integer. Values larger\n@@ -176,28 +214,52 @@ is\n \n       X := 0;\n \n-      loop\n-         if X < (Integer'Last / 10) then\n-            X := X * 10 + (Character'Pos (Str (P)) - Character'Pos ('0'));\n-         end if;\n+      declare\n+         Rest : constant String := Str (P .. Max) with Ghost;\n+         Last : constant Natural := Last_Number_Ghost (Rest) with Ghost;\n \n-         P := P + 1;\n+      begin\n+         pragma Assert (Is_Natural_Format_Ghost (Rest));\n \n-         exit when P > Max;\n+         loop\n+            pragma Assert (Str (P) = Rest (P));\n+            pragma Assert (Str (P) in '0' .. '9');\n \n-         if Str (P) = '_' then\n-            Scan_Underscore (Str, P, Ptr, Max, False);\n-         else\n-            exit when Str (P) not in '0' .. '9';\n-         end if;\n-      end loop;\n+            if X < (Integer'Last / 10) then\n+               X := X * 10 + (Character'Pos (Str (P)) - Character'Pos ('0'));\n+            end if;\n+\n+            pragma Loop_Invariant (X >= 0);\n+            pragma Loop_Invariant (P in P'Loop_Entry .. Last);\n+            pragma Loop_Invariant (Str (P) in '0' .. '9');\n+            pragma Loop_Invariant\n+              (Scan_Natural_Ghost (Rest, P'Loop_Entry, 0)\n+               = (if P = Max\n+                    or else Rest (P + 1) not in '0' .. '9' | '_'\n+                    or else X >= Integer'Last / 10\n+                  then\n+                    X\n+                  else\n+                    Scan_Natural_Ghost (Rest, P + 1, X)));\n+\n+            P := P + 1;\n+\n+            exit when P > Max;\n+\n+            if Str (P) = '_' then\n+               Scan_Underscore (Str, P, Ptr, Max, False);\n+            else\n+               exit when Str (P) not in '0' .. '9';\n+            end if;\n+         end loop;\n+      end;\n \n       if M then\n          X := -X;\n       end if;\n \n       Ptr.all := P;\n-      return X;\n+      Exp := X;\n    end Scan_Exponent;\n \n    --------------------\n@@ -209,10 +271,8 @@ is\n       Ptr   : not null access Integer;\n       Max   : Integer;\n       Start : out Positive)\n-   with\n-     SPARK_Mode => Off  --  Not proved yet\n    is\n-      P : Natural := Ptr.all;\n+      P : Integer := Ptr.all;\n \n    begin\n       if P > Max then\n@@ -224,6 +284,12 @@ is\n       while Str (P) = ' ' loop\n          P := P + 1;\n \n+         pragma Loop_Invariant (Ptr.all = Ptr.all'Loop_Entry);\n+         pragma Loop_Invariant (P in Ptr.all .. Max);\n+         pragma Loop_Invariant (for some J in P .. Max => Str (J) /= ' ');\n+         pragma Loop_Invariant\n+           (for all J in Ptr.all .. P - 1 => Str (J) = ' ');\n+\n          if P > Max then\n             Ptr.all := P;\n             Bad_Value (Str);\n@@ -232,6 +298,8 @@ is\n \n       Start := P;\n \n+      pragma Assert (Start = First_Non_Space_Ghost (Str (Ptr.all .. Max)));\n+\n       --  Skip past an initial plus sign\n \n       if Str (P) = '+' then\n@@ -256,10 +324,8 @@ is\n       Max   : Integer;\n       Minus : out Boolean;\n       Start : out Positive)\n-   with\n-     SPARK_Mode => Off  --  Not proved yet\n    is\n-      P : Natural := Ptr.all;\n+      P : Integer := Ptr.all;\n \n    begin\n       --  Deal with case of null string (all blanks). As per spec, we raise\n@@ -274,6 +340,12 @@ is\n       while Str (P) = ' ' loop\n          P := P + 1;\n \n+         pragma Loop_Invariant (Ptr.all = Ptr.all'Loop_Entry);\n+         pragma Loop_Invariant (P in Ptr.all .. Max);\n+         pragma Loop_Invariant (for some J in P .. Max => Str (J) /= ' ');\n+         pragma Loop_Invariant\n+           (for all J in Ptr.all .. P - 1 => Str (J) = ' ');\n+\n          if P > Max then\n             Ptr.all := P;\n             Bad_Value (Str);\n@@ -282,6 +354,8 @@ is\n \n       Start := P;\n \n+      pragma Assert (Start = First_Non_Space_Ghost (Str (Ptr.all .. Max)));\n+\n       --  Remember an initial minus sign\n \n       if Str (P) = '-' then\n@@ -315,15 +389,14 @@ is\n    -- Scan_Trailing_Blanks --\n    --------------------------\n \n-   procedure Scan_Trailing_Blanks (Str : String; P : Positive)\n-   with\n-     SPARK_Mode => Off  --  Not proved yet\n-   is\n+   procedure Scan_Trailing_Blanks (Str : String; P : Positive) is\n    begin\n       for J in P .. Str'Last loop\n          if Str (J) /= ' ' then\n             Bad_Value (Str);\n          end if;\n+\n+         pragma Loop_Invariant (for all K in P .. J => Str (K) = ' ');\n       end loop;\n    end Scan_Trailing_Blanks;\n \n@@ -337,8 +410,6 @@ is\n       Ptr : not null access Integer;\n       Max : Integer;\n       Ext : Boolean)\n-   with\n-     SPARK_Mode => Off  --  Not proved yet\n    is\n       C : Character;\n "}, {"sha": "388a884c8e8a4bce425c4677a68f930c3793fb53", "filename": "gcc/ada/libgnat/s-valuti.ads", "status": "modified", "additions": 193, "deletions": 8, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b180995ab1b2b6748d5eb217d8fbfd21b4a51b/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.ads?ref=40b180995ab1b2b6748d5eb217d8fbfd21b4a51b", "patch": "@@ -47,6 +47,7 @@ with System.Case_Util;\n package System.Val_Util\n   with SPARK_Mode, Pure\n is\n+   pragma Unevaluated_Use_Of_Old (Allow);\n \n    procedure Bad_Value (S : String)\n    with\n@@ -62,6 +63,17 @@ is\n    --  Ghost function that returns True if S has only space characters from\n    --  index From to index To.\n \n+   function First_Non_Space_Ghost (S : String) return Positive\n+   with\n+     Ghost,\n+     Pre  => not Only_Space_Ghost (S, S'First, S'Last),\n+     Post => First_Non_Space_Ghost'Result in S'Range\n+       and then S (First_Non_Space_Ghost'Result) /= ' '\n+       and then Only_Space_Ghost\n+         (S, S'First, First_Non_Space_Ghost'Result - 1);\n+   --  Ghost function that returns the index of the first non-space character\n+   --  in S, which necessarily exists given the precondition on S.\n+\n    procedure Normalize_String\n      (S    : in out String;\n       F, L : out Integer)\n@@ -96,7 +108,27 @@ is\n       Ptr   : not null access Integer;\n       Max   : Integer;\n       Minus : out Boolean;\n-      Start : out Positive);\n+      Start : out Positive)\n+   with\n+     Pre  =>\n+       --  Ptr.all .. Max is either an empty range, or a valid range in Str\n+       (Ptr.all > Max or else (Ptr.all >= Str'First and then Max <= Str'Last))\n+       and then not Only_Space_Ghost (Str, Ptr.all, Max)\n+       and then\n+         (declare\n+            F : constant Positive :=\n+              First_Non_Space_Ghost (Str (Ptr.all .. Max));\n+          begin\n+            (if Str (F) in '+' | '-' then\n+               F <= Max - 1 and then Str (F + 1) /= ' ')),\n+     Post =>\n+       (declare\n+          F : constant Positive :=\n+            First_Non_Space_Ghost (Str (Ptr.all'Old .. Max));\n+        begin\n+          Minus = (Str (F) = '-')\n+            and then Ptr.all = (if Str (F) in '+' | '-' then F + 1 else F)\n+            and then Start = F);\n    --  The Str, Ptr, Max parameters are as for the scan routines (Str is the\n    --  string to be scanned starting at Ptr.all, and Max is the index of the\n    --  last character in the string). Scan_Sign first scans out any initial\n@@ -121,17 +153,150 @@ is\n      (Str   : String;\n       Ptr   : not null access Integer;\n       Max   : Integer;\n-      Start : out Positive);\n+      Start : out Positive)\n+   with\n+     Pre  =>\n+       --  Ptr.all .. Max is either an empty range, or a valid range in Str\n+       (Ptr.all > Max or else (Ptr.all >= Str'First and then Max <= Str'Last))\n+       and then not Only_Space_Ghost (Str, Ptr.all, Max)\n+       and then\n+         (declare\n+            F : constant Positive :=\n+              First_Non_Space_Ghost (Str (Ptr.all .. Max));\n+          begin\n+            (if Str (F) = '+' then\n+               F <= Max - 1 and then Str (F + 1) /= ' ')),\n+     Post =>\n+       (declare\n+          F : constant Positive :=\n+            First_Non_Space_Ghost (Str (Ptr.all'Old .. Max));\n+        begin\n+          Ptr.all = (if Str (F) = '+' then F + 1 else F)\n+            and then Start = F);\n    --  Same as Scan_Sign, but allows only plus, not minus. This is used for\n    --  modular types.\n \n-   function Scan_Exponent\n+   function Only_Number_Ghost (Str : String; From, To : Integer) return Boolean\n+   is\n+      (for all J in From .. To => Str (J) in '0' .. '9' | '_')\n+   with\n+     Ghost,\n+     Pre => From > To or else (From >= Str'First and then To <= Str'Last);\n+   --  Ghost function that returns True if S has only number characters from\n+   --  index From to index To.\n+\n+   function Last_Number_Ghost (Str : String) return Positive\n+   with\n+     Ghost,\n+     Pre  => Str /= \"\" and then Str (Str'First) in '0' .. '9',\n+     Post => Last_Number_Ghost'Result in Str'Range\n+       and then (if Last_Number_Ghost'Result < Str'Last then\n+                   Str (Last_Number_Ghost'Result + 1) not in '0' .. '9' | '_')\n+       and then Only_Number_Ghost (Str, Str'First, Last_Number_Ghost'Result);\n+   --  Ghost function that returns the index of the last character in S that\n+   --  is either a figure or underscore, which necessarily exists given the\n+   --  precondition on S.\n+\n+   function Is_Natural_Format_Ghost (Str : String) return Boolean is\n+     (Str /= \"\"\n+        and then Str (Str'First) in '0' .. '9'\n+        and then\n+        (declare\n+           L : constant Positive := Last_Number_Ghost (Str);\n+         begin\n+           Str (L) in '0' .. '9'\n+             and then (for all J in Str'First .. L =>\n+                         (if Str (J) = '_' then Str (J + 1) /= '_'))))\n+   with\n+     Ghost;\n+   --  Ghost function that determines if Str has the correct format for a\n+   --  natural number, consisting in a sequence of figures possibly separated\n+   --  by single underscores. It may be followed by other characters.\n+\n+   function Scan_Natural_Ghost\n+     (Str : String;\n+      P   : Natural;\n+      Acc : Natural)\n+      return Natural\n+   is\n+     (if Str (P) = '_' then\n+        Scan_Natural_Ghost (Str, P + 1, Acc)\n+      else\n+        (declare\n+           Shift_Acc : constant Natural :=\n+             Acc * 10 + (Character'Pos (Str (P)) - Character'Pos ('0'));\n+         begin\n+           (if P = Str'Last\n+              or else Str (P + 1) not in '0' .. '9' | '_'\n+              or else Shift_Acc >= Integer'Last / 10\n+            then\n+              Shift_Acc\n+            else\n+              Scan_Natural_Ghost (Str, P + 1, Shift_Acc))))\n+   with\n+     Ghost,\n+     Subprogram_Variant => (Increases => P),\n+     Pre => Is_Natural_Format_Ghost (Str)\n+       and then P in Str'First .. Last_Number_Ghost (Str)\n+       and then Acc < Integer'Last / 10;\n+   --  Ghost function that recursively computes the natural number in Str, up\n+   --  to the first number greater or equal to Natural'Last / 10, assuming Acc\n+   --  has been scanned already and scanning continues at index P.\n+\n+   procedure Scan_Exponent\n      (Str  : String;\n       Ptr  : not null access Integer;\n       Max  : Integer;\n-      Real : Boolean := False) return Integer\n+      Exp  : out Integer;\n+      Real : Boolean := False)\n    with\n-     SPARK_Mode => Off;  --  Function with side-effect through Ptr\n+     Pre =>\n+       --  Ptr.all .. Max is either an empty range, or a valid range in Str\n+       (Ptr.all > Max or else (Ptr.all >= Str'First and then Max <= Str'Last))\n+         and then\n+       Max < Natural'Last\n+         and then\n+       (if Ptr.all < Max and then Str (Ptr.all) in 'E' | 'e' then\n+          (declare\n+             Plus_Sign  : constant Boolean := Str (Ptr.all + 1) = '+';\n+             Minus_Sign : constant Boolean := Str (Ptr.all + 1) = '-';\n+             Sign       : constant Boolean := Plus_Sign or Minus_Sign;\n+           begin\n+             (if Minus_Sign and not Real then True\n+              elsif Sign\n+                and then (Ptr.all > Max - 2\n+                            or else Str (Ptr.all + 2) not in '0' .. '9')\n+              then True\n+              else\n+                (declare\n+                   Start : constant Natural :=\n+                     (if Sign then Ptr.all + 2 else Ptr.all + 1);\n+                 begin\n+                   Is_Natural_Format_Ghost (Str (Start .. Max)))))),\n+     Post =>\n+       (if Ptr.all'Old < Max and then Str (Ptr.all'Old) in 'E' | 'e' then\n+          (declare\n+             Plus_Sign  : constant Boolean := Str (Ptr.all'Old + 1) = '+';\n+             Minus_Sign : constant Boolean := Str (Ptr.all'Old + 1) = '-';\n+             Sign       : constant Boolean := Plus_Sign or Minus_Sign;\n+             Unchanged  : constant Boolean :=\n+               Exp = 0 and Ptr.all = Ptr.all'Old;\n+           begin\n+             (if Minus_Sign and not Real then Unchanged\n+              elsif Sign\n+                and then (Ptr.all'Old > Max - 2\n+                            or else Str (Ptr.all'Old + 2) not in '0' .. '9')\n+              then Unchanged\n+              else\n+                (declare\n+                   Start : constant Natural :=\n+                     (if Sign then Ptr.all'Old + 2 else Ptr.all'Old + 1);\n+                   Value : constant Natural :=\n+                     Scan_Natural_Ghost (Str (Start .. Max), Start, 0);\n+                 begin\n+                   Exp = (if Minus_Sign then -Value else Value))))\n+        else\n+          Exp = 0 and Ptr.all = Ptr.all'Old);\n    --  Called to scan a possible exponent. Str, Ptr, Max are as described above\n    --  for Scan_Sign. If Ptr.all < Max and Str (Ptr.all) = 'E' or 'e', then an\n    --  exponent is scanned out, with the exponent value returned in Exp, and\n@@ -146,18 +311,37 @@ is\n    --  This routine must not be called with Str'Last = Positive'Last. There is\n    --  no check for this case, the caller must ensure this condition is met.\n \n-   procedure Scan_Trailing_Blanks (Str : String; P : Positive);\n+   procedure Scan_Trailing_Blanks (Str : String; P : Positive)\n+   with\n+     Pre => P >= Str'First\n+       and then Only_Space_Ghost (Str, P, Str'Last);\n    --  Checks that the remainder of the field Str (P .. Str'Last) is all\n    --  blanks. Raises Constraint_Error if a non-blank character is found.\n \n+   pragma Warnings\n+     (GNATprove, Off, \"\"\"Ptr\"\" is not modified\",\n+      Reason => \"Ptr is actually modified when raising an exception\");\n    procedure Scan_Underscore\n      (Str : String;\n       P   : in out Natural;\n       Ptr : not null access Integer;\n       Max : Integer;\n-      Ext : Boolean);\n+      Ext : Boolean)\n+   with\n+     Pre  => P in Str'Range\n+       and then Str (P) = '_'\n+       and then Max in Str'Range\n+       and then P < Max\n+       and then\n+         (if Ext then\n+            Str (P + 1) in '0' .. '9' | 'A' .. 'F' | 'a' .. 'f'\n+          else\n+            Str (P + 1) in '0' .. '9'),\n+     Post =>\n+       P = P'Old + 1\n+         and then Ptr.all = Ptr.all;\n    --  Called if an underscore is encountered while scanning digits. Str (P)\n-   --  contains the underscore. Ptr it the pointer to be returned to the\n+   --  contains the underscore. Ptr is the pointer to be returned to the\n    --  ultimate caller of the scan routine, Max is the maximum subscript in\n    --  Str, and Ext indicates if extended digits are allowed. In the case\n    --  where the underscore is invalid, Constraint_Error is raised with Ptr\n@@ -166,5 +350,6 @@ is\n    --\n    --  This routine must not be called with Str'Last = Positive'Last. There is\n    --  no check for this case, the caller must ensure this condition is met.\n+   pragma Warnings (GNATprove, On, \"\"\"Ptr\"\" is not modified\");\n \n end System.Val_Util;"}]}