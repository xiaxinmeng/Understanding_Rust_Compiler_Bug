{"sha": "d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzYTBlMjI4YzUzM2ZlNGFiM2I3ODAwN2Q0M2IzYzZiZjZhODNkMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-08T16:33:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-08T16:33:51Z"}, "message": "type_traits: Implement is_same, add_reference and remove_reference.\n\n2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_same, add_reference and\n\tremove_reference.\n\t* testsuite/testsuite_tr1.h (test_relationship): New.\n\t* testsuite/tr1/4_metaprogramming/reference_modifications/\n\tadd_reference.cc: New.\n\t* testsuite/tr1/4_metaprogramming/reference_modifications/\n\tremove_reference.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_same/is_same.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_same/typedefs.cc: Likewise.\n\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_const/\n\tis_const.cc: Minor tweaks.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_volatile/\n\tis_volatile.cc: Likewise.\n\nFrom-SVN: r91907", "tree": {"sha": "24c5a85cb21522a57213c6802a0471feebedc1e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24c5a85cb21522a57213c6802a0471feebedc1e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/comments", "author": null, "committer": null, "parents": [{"sha": "ce5e944cb4e663b6cb2c41f7c1c5009dc558a943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce5e944cb4e663b6cb2c41f7c1c5009dc558a943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce5e944cb4e663b6cb2c41f7c1c5009dc558a943"}], "stats": {"total": 269, "additions": 250, "deletions": 19}, "files": [{"sha": "2c285e58aa6553024ce7774a0ad175e994a1a6a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -1,3 +1,22 @@\n+2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_same, add_reference and\n+\tremove_reference.\n+\t* testsuite/testsuite_tr1.h (test_relationship): New.\n+\t* testsuite/tr1/4_metaprogramming/reference_modifications/\n+\tadd_reference.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/reference_modifications/\n+\tremove_reference.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_same/is_same.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_same/typedefs.cc: Likewise.\n+\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_const/\n+\tis_const.cc: Minor tweaks.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_volatile/\n+\tis_volatile.cc: Likewise.\n+\n 2004-12-08  David Edelsohn  <edelsohn@gnu.org>\n \n \t* Makefile.am (AM_MAKEFLAGS): Remove duplicate LIBCFLAGS and"}, {"sha": "742536cb76a543eb02578bbf8f7843c5e2bbbb9a", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -240,8 +240,13 @@ namespace tr1\n     struct extent;\n   \n   /// @brief  relationships between types [4.6].\n-  template<typename _Tp, typename _Up>\n-    struct is_same;\n+  template<typename, typename>\n+    struct is_same\n+    : public false_type { };\n+\n+  template<typename _Tp>\n+    struct is_same<_Tp, _Tp>\n+    : public true_type { };\n \n   template<typename _From, typename _To>\n     struct is_convertible;\n@@ -270,10 +275,28 @@ namespace tr1\n \n   /// @brief  reference modifications [4.7.2].\n   template<typename _Tp>\n-    struct remove_reference;\n+    struct remove_reference\n+    {\n+      typedef _Tp     type;\n+    };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    {\n+      typedef _Tp     type;\n+    };\n   \n   template<typename _Tp>\n-    struct add_reference;\n+    struct add_reference\n+    {\n+      typedef _Tp&    type;\n+    };\n+\n+  template<typename _Tp>\n+    struct add_reference<_Tp&>\n+    {\n+      typedef _Tp&    type;\n+    };\n \n   /// @brief  array modififications [4.7.3].\n   template<typename _Tp>"}, {"sha": "b3d4cf94f17cad78d7a88346e5c80db4728a98b3", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -41,13 +41,13 @@ namespace __gnu_test\n     {\n       bool ret = true;\n       ret &= Category<Type>::value == Tv;\n-      ret &= Category<Type const>::value == Tv;\n-      ret &= Category<Type volatile>::value == Tv;\n-      ret &= Category<Type const volatile>::value == Tv;\n+      ret &= Category<const Type>::value == Tv;\n+      ret &= Category<volatile Type>::value == Tv;\n+      ret &= Category<const volatile Type>::value == Tv;\n       ret &= Category<Type>::type::value == Tv;\n-      ret &= Category<Type const>::type::value == Tv;\n-      ret &= Category<Type volatile>::type::value == Tv;\n-      ret &= Category<Type const volatile>::type::value == Tv;\n+      ret &= Category<const Type>::type::value == Tv;\n+      ret &= Category<volatile Type>::type::value == Tv;\n+      ret &= Category<const volatile Type>::type::value == Tv;\n       return ret;\n     }\n \n@@ -62,11 +62,22 @@ namespace __gnu_test\n       return ret;\n     }\n \n+  template<template<typename, typename> class Relationship,\n+\t   typename Type1, typename Type2, bool Tv>\n+    bool\n+    test_relationship()\n+    {\n+      bool ret = true;\n+      ret &= Relationship<Type1, Type2>::value == Tv;\n+      ret &= Relationship<Type1, Type2>::type::value == Tv;\n+      return ret;\n+    }\n+\n   // Test types.\n   class ClassType { };\n-  typedef ClassType const           cClassType;\n-  typedef ClassType volatile        vClassType;\n-  typedef ClassType const volatile  cvClassType;\n+  typedef const ClassType           cClassType;\n+  typedef volatile ClassType        vClassType;\n+  typedef const volatile ClassType  cvClassType;\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_TR1_H"}, {"sha": "7674689433a6541b6c88f0df1ef020bdcba0105f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/reference_modifications/add_reference.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fadd_reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fadd_reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fadd_reference.cc?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -0,0 +1,46 @@\n+// 2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.2 Reference modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::add_reference;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<add_reference<int>::type, int&>::value) );\n+  VERIFY( (is_same<add_reference<int&>::type, int&>::value) );\n+  VERIFY( (is_same<add_reference<const int>::type, const int&>::value) );\n+  VERIFY( (is_same<add_reference<int*>::type, int*&>::value) );\n+  VERIFY( (is_same<add_reference<ClassType&>::type, ClassType&>::value) );\n+  VERIFY( (is_same<add_reference<ClassType>::type, ClassType&>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f21d1a07cfc3cd4dcc4d72bcaafe86ef47cdb3ff", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/reference_modifications/remove_reference.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fremove_reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fremove_reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fremove_reference.cc?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -0,0 +1,46 @@\n+// 2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.7.2 Reference modifications\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::remove_reference;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (is_same<remove_reference<int&>::type, int>::value) );\n+  VERIFY( (is_same<remove_reference<int>::type, int>::value) );\n+  VERIFY( (is_same<remove_reference<const int&>::type, const int>::value) );\n+  VERIFY( (is_same<remove_reference<int*&>::type, int*>::value) );\n+  VERIFY( (is_same<remove_reference<ClassType&>::type, ClassType>::value) );\n+  VERIFY( (is_same<remove_reference<ClassType>::type, ClassType>::value) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "32d65af4a6dbe1488360b756ebc4a27d5094d8dd", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_same/is_same.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Fis_same.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Fis_same.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Fis_same.cc?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -0,0 +1,50 @@\n+// 2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.6 Relationships between types\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_same;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<is_same, int, int, true>()) );\n+  VERIFY( (test_relationship<is_same, const int, const int, true>()) );\n+  VERIFY( (test_relationship<is_same, int&, int&, true>()) );\n+  VERIFY( (test_relationship<is_same, ClassType, ClassType, true>()) );\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<is_same, void, int, false>()) );\n+  VERIFY( (test_relationship<is_same, int, const int, false>()) );\n+  VERIFY( (test_relationship<is_same, int, int&, false>()) );\n+  VERIFY( (test_relationship<is_same, int, ClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "39c47e242860a1b94fc0d5bd510b1d492b07560b", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_same/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Ftypedefs.cc?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_same<int, int>         test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "82de4285aae4487641cbfc1ac2c46bda868058eb", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_const/is_const.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -31,14 +31,14 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_const, int const, true>()) );\n-  VERIFY( (test_property<is_const, int const volatile, true>()) );\n+  VERIFY( (test_property<is_const, const int, true>()) );\n+  VERIFY( (test_property<is_const, const volatile int, true>()) );\n   VERIFY( (test_property<is_const, cClassType, true>()) );\n   VERIFY( (test_property<is_const, cvClassType, true>()) );\n \n   // Negative tests.\n   VERIFY( (test_property<is_const, int, false>()) );\n-  VERIFY( (test_property<is_const, int volatile, false>()) );\n+  VERIFY( (test_property<is_const, volatile int, false>()) );\n   VERIFY( (test_property<is_const, ClassType, false>()) );\n   VERIFY( (test_property<is_const, vClassType, false>()) );\n }"}, {"sha": "c47ec786aeb2e2a758adc863abd4332a03e2d792", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_volatile/is_volatile.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc?ref=d63a0e228c533fe4ab3b78007d43b3c6bf6a83d1", "patch": "@@ -31,14 +31,14 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_volatile, int volatile, true>()) );\n-  VERIFY( (test_property<is_volatile, int const volatile, true>()) );\n+  VERIFY( (test_property<is_volatile, volatile int, true>()) );\n+  VERIFY( (test_property<is_volatile, const volatile int, true>()) );\n   VERIFY( (test_property<is_volatile, vClassType, true>()) );\n   VERIFY( (test_property<is_volatile, cvClassType, true>()) );\n \n   // Negative tests.\n   VERIFY( (test_property<is_volatile, int, false>()) );\n-  VERIFY( (test_property<is_volatile, int const, false>()) );\n+  VERIFY( (test_property<is_volatile, const int, false>()) );\n   VERIFY( (test_property<is_volatile, ClassType, false>()) );\n   VERIFY( (test_property<is_volatile, cClassType, false>()) );\n }"}]}