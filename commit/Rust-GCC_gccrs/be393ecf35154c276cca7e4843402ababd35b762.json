{"sha": "be393ecf35154c276cca7e4843402ababd35b762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzOTNlY2YzNTE1NGMyNzZjY2E3ZTQ4NDM0MDJhYmFiZDM1Yjc2Mg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cambridge.redhat.com", "date": "2001-09-14T10:19:30Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-09-14T10:19:30Z"}, "message": "Rearrange arm/elf header files\n\nFrom-SVN: r45594", "tree": {"sha": "67a55c32ca6ec7ae816c669c07683e6f35b787f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67a55c32ca6ec7ae816c669c07683e6f35b787f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be393ecf35154c276cca7e4843402ababd35b762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be393ecf35154c276cca7e4843402ababd35b762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be393ecf35154c276cca7e4843402ababd35b762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be393ecf35154c276cca7e4843402ababd35b762/comments", "author": null, "committer": null, "parents": [{"sha": "733079758939b30bcdb505d5306b49ba60266c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733079758939b30bcdb505d5306b49ba60266c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733079758939b30bcdb505d5306b49ba60266c8a"}], "stats": {"total": 841, "additions": 328, "deletions": 513}, "files": [{"sha": "de153755c27f6c12f56f6caecf783b1e45fa8565", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,3 +1,50 @@\n+2001-09-14  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config.gcc: Move inclusion of arm elf specific header files\n+\tfrom the files themselves into the tm_file variable.  Make\n+\tsure that elfos.h is included before target specific elf\n+\theaders.\n+\t* config/arm/aout.h (NO_DOLLAR_IN_LABEL): Only define if not\n+\talready defined.\n+\t(ASM_OUTPUT_ASCII, ASM_OUTPUT_SKIP): Protect definition.\n+\t* config/arm.arm.h (TARGET_MEM_FUNCTIONS,\n+\tASM_OUTPUT_CASE_LABEL): Protect definition.\n+\t(CC1_SPEC, FP_DEFAULT, ARM_FUNCTION_PROFILE): Only define if\n+\tnot already defined.\n+\t* config/arm/conix-elf.h: (USER_LABEL_PREFIX,\n+\tLOCAL_LABEL_PREFIX, MAKE_DECL_ONE_ONLY, UNIQUE_SECTION):\n+\tRemove duplicate definition. \n+\t(READONLY_DATA_SECTION, SUBTARGET_EXTRA_SECTION,\n+\t(SUBTARGET_EXTRA_SECTION_FUNCTION, RDATA_SECTION_ASM_OP,\n+\t(RDATA_SECTION_FUNCTION): Remove redundant definition.\n+\t(STARTFILE_SPEC, ENDFILE_SPEC): Protect definition.\n+\tRemove inclusion of arm/elf.h.\n+\t* config/arm/unknown-elf.h: as for conix-elf.h.\n+\t(STARTFILE_SPEC): Include crti.o and crtn.o.\n+\t* config/arm/linux-elf.h: as for conix-elf.h.\n+\t* config/arm/ecos-elf.h: Remove inclusion of unknown-elf.h.\n+\t* config/arm/strongarm-elf.h: Remove inclusion of\n+\tunknown-elf.h.\n+\t* config/arm/xscale-elf.h: Remove inclusion of unknown-elf.h.\n+\t* config/arm/unknown-elf-oabi.h: Remove inclusion of\n+\tunknown-elf.h and elf.h.\n+\t* config/arm/uclinux-elf.h: Remove inclusion of linux-elf.h.\n+\t* config/arm/linux-gas.h (DBX_DEBUGGING_INFO,\n+\tASM_WEAKEN_LABEL): Remove redundant definition.\n+\t* config/arm/elf.h: Test for inclusion of elfos.h\n+\t(USER_LABEL_PREFIX, ASM_DECLARE_RESULT, ASM_DECLARE_RESULT,\n+\tASM_DECLARE_OBJECT_NAME, ASM_FINISH_DECLARE_OBJECT_NAME,\n+\tSUBTARGET_EXTRA_SECTION, SUBTARGET_EXTRA_SECTION_FUNCTION,\n+\tEXTRA_SECTIONS, INT_ASM_OP, ASM_WEAKEN_LABEL): Remove\n+\tredundant definition.\n+\t(TYPE_OPERAND_FMT, ASM_DECLARE_FUNCTION_NAME,\n+\tASM_DECLARE_FUNCTION_SIZE, ASM_OUTPUT_INTERNAL_LABEL,\n+\tASM_OUTPUT_ALIGNED_COMMON): Protect definition.\n+\t* t-arm-elf (EXTRA_MULTILIB_PARTS): Add crti.o and crtn.o.\n+\tAdd rules to build crti.o and crtn.o\n+\t* crti.asm: New file.\n+\t* crtn.asm: New file.\n+\n 2001-09-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-parse.in (_yylex): Use _cpp_backup_tokens."}, {"sha": "dc731f70ac7478a3d89ac9562ccc09cfe78125fe", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -531,7 +531,7 @@ arc-*-elf*)\n \textra_parts=\"crtinit.o crtfini.o\"\n \t;;\n arm*-*-rtems*)\n-\ttm_file=arm/rtems-elf.h\n+\ttm_file=\"elfos.h arm/unknown-elf.h arm/elf.h arm/rtems-elf.h rtems.h\"\n \ttmake_file=\"arm/t-arm-elf t-rtems\"\n \tif test x$enable_threads = xyes; then\n \t  thread_file='rtems'\n@@ -576,7 +576,7 @@ arm*-*-netbsd*)\n \t;;\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \txmake_file=x-linux\n-\ttm_file=\"arm/linux-elf.h\"\n+\ttm_file=\"elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\"\n \ttmake_file=\"t-slibgcc-elf-ver t-linux arm/t-linux\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n \tgnu_ld=yes\n@@ -587,27 +587,27 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \tesac\n \t;;\n arm*-*-uclinux*)\t\t# ARM ucLinux\n-\ttm_file=arm/uclinux-elf.h\n+\ttm_file=\"elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/linux-elf.h arm/uclinux-elf.h\"\n \ttmake_file=arm/t-arm-elf\n \t;;\n arm*-*-aout)\n \ttm_file=arm/aout.h\n \ttmake_file=arm/t-arm-aout\n \t;;\n arm*-*-ecos-elf)\n-\ttm_file=arm/ecos-elf.h\n+\ttm_file=\"elfos.h arm/unknown-elf.h arm/elf.h arm/ecos-elf.h\"\n \ttmake_file=arm/t-arm-elf\n \t;; \n arm*-*-elf)\n-\ttm_file=arm/unknown-elf.h\n+\ttm_file=\"elfos.h arm/unknown-elf.h arm/elf.h\"\n \ttmake_file=arm/t-arm-elf\n \t;;\n arm*-*-conix*)\n-\ttm_file=arm/conix-elf.h\n+\ttm_file=\"elfos.h arm/unknown-elf.h arm/elf.h arm/conix-elf.h\"\n \ttmake_file=arm/t-arm-elf\n \t;;\n arm*-*-oabi)\n-\ttm_file=arm/unknown-elf-oabi.h\n+\ttm_file=\"arm/unknown-elf-oabi.h elfos.h arm/unknown-elf.h arm/elf.h\"\n \ttmake_file=arm/t-arm-elf\n \t;;\n arm-*-pe*)\n@@ -3117,7 +3117,7 @@ stormy16-*-elf)\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n strongarm-*-elf*)\n-\ttm_file=arm/strongarm-elf.h\n+\ttm_file=\"arm/strongarm-elf.h elfos.h arm/unknown-elf.h arm/elf.h\"\n \ttmake_file=arm/t-strongarm-elf\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md\n@@ -3203,7 +3203,7 @@ we32k-att-sysv*)\n \tuse_collect2=yes\n \t;;\n xscale-*-elf)\n-\ttm_file=arm/xscale-elf.h\n+\ttm_file=\"arm/xscale-elf.h elfos.h arm/unknown-elf.h arm/elf.h\"\n \ttmake_file=arm/t-xscale-elf\n \tout_file=arm/arm.c\n \tmd_file=arm/arm.md"}, {"sha": "88dddc110f5006b1a7fd5191013a50defef62510", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -105,7 +105,9 @@ Boston, MA 02111-1307, USA.  */\n /* Arm Assembler barfs on dollars */\n #define DOLLARS_IN_IDENTIFIERS 0\n \n+#ifndef NO_DOLLAR_IN_LABEL\n #define NO_DOLLAR_IN_LABEL 1\n+#endif\n \n /* DBX register number for a given compiler register number */\n #define DBX_REGISTER_NUMBER(REGNO)  (REGNO)\n@@ -257,10 +259,12 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_BYTE(STREAM, VALUE)  \t\\\n   fprintf (STREAM, \"\\t.byte\\t%d\\n\", VALUE)\n \n+#undef  ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(STREAM, PTR, LEN)  \\\n   output_ascii_pseudo_op (STREAM, (const unsigned char *)(PTR), LEN)\n \n /* Output a gap.  In fact we fill it with nulls.  */\n+#undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM, NBYTES) \t\\\n   fprintf (STREAM, \"\\t.space\\t%d\\n\", NBYTES)\n "}, {"sha": "462a291beea1a43d1a2c82bc73d20d2d53b8a862", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -258,7 +258,9 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n %{!mthumb-interwork:%{!mno-thumb-interwork:%(cpp_interwork_default)}}\t\\\n \"\n \n+#ifndef CC1_SPEC\n #define CC1_SPEC \"\"\n+#endif\n \n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n@@ -548,7 +550,9 @@ extern enum floating_point_type arm_fpu_arch;\n \n /* Default floating point architecture.  Override in sub-target if\n    necessary.  */\n+#ifndef FP_DEFAULT\n #define FP_DEFAULT FP_SOFT2\n+#endif\n \n /* Nonzero if the processor has a fast multiply insn, and one that does\n    a 64-bit multiply of two 32-bit values.  */\n@@ -586,6 +590,7 @@ extern int arm_is_6_or_7;\n    that is controlled by the APCS-FRAME option.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n+#undef  TARGET_MEM_FUNCTIONS\n #define TARGET_MEM_FUNCTIONS 1\n \n #define OVERRIDE_OPTIONS  arm_override_options ()\n@@ -1554,6 +1559,7 @@ typedef struct\n \n    The ``mov ip,lr'' seems like a good idea to stick with cc convention.\n    ``prof'' doesn't seem to mind about this!  */\n+#ifndef ARM_FUNCTION_PROFILER\n #define ARM_FUNCTION_PROFILER(STREAM, LABELNO)  \t\\\n {\t\t\t\t\t\t\t\\\n   char temp[20];\t\t\t\t\t\\\n@@ -1567,6 +1573,7 @@ typedef struct\n   sym = gen_rtx (SYMBOL_REF, Pmode, temp);\t\t\\\n   ASM_OUTPUT_INT (STREAM, sym);\t\t\t\t\\\n }\n+#endif\n \n #define THUMB_FUNCTION_PROFILER(STREAM, LABELNO)\t\\\n {\t\t\t\t\t\t\t\\\n@@ -2578,6 +2585,7 @@ extern int making_const_table;\n \n /* This is how to output a label which precedes a jumptable.  Since\n    Thumb instructions are 2 bytes, we may need explicit alignment here.  */\n+#undef  ASM_OUTPUT_CASE_LABEL\n #define ASM_OUTPUT_CASE_LABEL(FILE, PREFIX, NUM, JUMPTABLE)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\"}, {"sha": "6cde16f574af774bcc816c6d7c0356dee464c23e", "filename": "gcc/config/arm/conix-elf.h", "status": "modified", "additions": 8, "deletions": 87, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fconix-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fconix-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconix-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for ARM with ConiX OS.\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Philip Blundell <pb@futuretv.com>\n    \n This file is part of GNU CC.\n@@ -18,95 +18,18 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n+`Boston, MA 02111-1307, USA.  */\n+\n+/* elfos.h should have already been included.  Now just override\n+   any conflicting definitions and add any extras.  */\n \n /* Run-time Target Specification.  */\n-#ifndef TARGET_VERSION\n+#undef  TARGET_VERSION\n #define TARGET_VERSION\tfputs (\" (ARM/ELF ConiX)\", stderr);\n-#endif\n \n /* Default to using APCS-32 and software floating point.  */\n-#ifndef TARGET_DEFAULT\n+#undef  TARGET_DEFAULT\n #define TARGET_DEFAULT\t(ARM_FLAG_SOFT_FLOAT | ARM_FLAG_APCS_32)\n-#endif\n-\n-/* Now we define the strings used to build the spec file.  */\n-#define STARTFILE_SPEC\t\t\"crtbegin%O%s crt0%O%s\"\n-\n-#define ENDFILE_SPEC\t\t\"crtend%O%s\"\n-\n-#define USER_LABEL_PREFIX \t\"\"\n-#define LOCAL_LABEL_PREFIX \t\".\"\n-\n-#define TEXT_SECTION\t\t\"\\t.text\"\n-\n-/* Debugging */\n-#define DWARF2_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n-\n-/* Support for Constructors and Destructors.  */\n-#define READONLY_DATA_SECTION\trdata_section\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-#define SUBTARGET_EXTRA_SECTIONS in_rdata,\n-\n-/* A list of extra section function definitions.  */\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\tRDATA_SECTION_FUNCTION\n-  \n-#define RDATA_SECTION_ASM_OP\t\"\\t.section .rodata\"\n-\n-#define RDATA_SECTION_FUNCTION \t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\\\n-      in_section = in_rdata;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n-\n-/* The ARM development system defines __main.  */\n-#define NAME__MAIN \"__gccmain\"\n-#define SYMBOL__MAIN __gccmain\n-\n-#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      int len;\t\t\t\t\t\t\t\\\n-      char * name, * string, * prefix;\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      if (! DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  prefix = \".\";                                         \\\n-\t  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\t    prefix = \".text.\";\t\t\t\t\t\\\n-\t  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\t    prefix = \".rodata.\";\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    prefix = \".data.\";\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\tprefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n-      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\tprefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tprefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      len = strlen (name) + strlen (prefix);\t\t\t\\\n-      string = alloca (len + 1);\t\t\t\t\\\n-      sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n \n #ifndef CPP_APCS_PC_DEFAULT_SPEC\n #define CPP_APCS_PC_DEFAULT_SPEC\t\"-D__APCS_32__\"\n@@ -116,8 +39,6 @@ rdata_section ()\t\t\t\t\t\t\\\n #define SUBTARGET_CPU_DEFAULT \t\tTARGET_CPU_arm7tdmi\n #endif\n      \n+#undef  CPP_PREDEFINES\n #define CPP_PREDEFINES \\\n   \"-D__arm__ -D__CONIX__ -Acpu=arm -Amachine=arm -D__ELF__\"\n-\n-/* Now get the routine arm-elf definitions.  */\n-#include \"arm/elf.h\""}, {"sha": "3799e927f1ea66061a69e42f8d23496889dd3001", "filename": "gcc/config/arm/crti.asm", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fcrti.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fcrti.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrti.asm?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -0,0 +1,70 @@\n+#   Copyright (C) 2001 Free Software Foundation, Inc.\n+#   Written By Nick Clifton\n+# \n+# This file is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+# \n+# In addition to the permissions in the GNU General Public License, the\n+# Free Software Foundation gives you unlimited permission to link the\n+# compiled version of this file with other programs, and to distribute\n+# those programs without any restriction coming from the use of this\n+# file.  (The General Public License restrictions do apply in other\n+# respects; for example, they cover modification of the file, and\n+# distribution when not linked into another program.)\n+# \n+# This file is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+#    As a special exception, if you link this library with files\n+#    compiled with GCC to produce an executable, this does not cause\n+#    the resulting executable to be covered by the GNU General Public License.\n+#    This exception does not however invalidate any other reasons why\n+#    the executable file might be covered by the GNU General Public License.\n+# \n+\n+# This file just make a stack frame for the contents of the .fini and\n+# .init sections.  Users may put any desired instructions in those\n+# sections.\n+\n+\t# Note - this macro is complimented by the FUNC_END macro\n+\t# in crtn.asm.  If you change this macro you must also change\n+\t# that macro match.\n+.macro FUNC_START\n+#ifdef __thumb__\n+\t.thumb\n+\t\n+\tpush\t{r4, r5, r6, r7, lr}\n+#else\n+\t.arm\n+\t#  Create a stack frame and save any call-preserved registers\n+\tmov\tip, sp\n+\tstmdb\tsp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}\n+\tsub\tfp, ip, #4\n+#endif\n+.endm\n+\t\t\n+\t.file\t\t\"crti.asm\"\n+\n+\t.section\t\".init\"\n+\t.align 2\n+\t.global\t_init\n+_init:\n+\tFUNC_START\n+\t\n+\t\t\n+\t.section\t\".fini\"\n+\t.align\t2\n+\t.global\t_fini\n+_fini:\n+\tFUNC_START\n+\t\n+# end of crti.asm"}, {"sha": "a7f0e9e2c713326a0c63552b418ae0d9c8f2995a", "filename": "gcc/config/arm/crtn.asm", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fcrtn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fcrtn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcrtn.asm?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -0,0 +1,81 @@\n+#   Copyright (C) 2001 Free Software Foundation, Inc.\n+#   Written By Nick Clifton\n+# \n+# This file is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+# \n+# In addition to the permissions in the GNU General Public License, the\n+# Free Software Foundation gives you unlimited permission to link the\n+# compiled version of this file with other programs, and to distribute\n+# those programs without any restriction coming from the use of this\n+# file.  (The General Public License restrictions do apply in other\n+# respects; for example, they cover modification of the file, and\n+# distribution when not linked into another program.)\n+# \n+# This file is distributed in the hope that it will be useful, but\n+# WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+# \n+#    As a special exception, if you link this library with files\n+#    compiled with GCC to produce an executable, this does not cause\n+#    the resulting executable to be covered by the GNU General Public License.\n+#    This exception does not however invalidate any other reasons why\n+#    the executable file might be covered by the GNU General Public License.\n+# \n+\n+# This file just makes sure that the .fini and .init sections do in\n+# fact return.  Users may put any desired instructions in those sections.\n+# This file is the last thing linked into any executable.\n+\n+\t# Note - this macro is complimented by the FUNC_START macro\n+\t# in crti.asm.  If you change this macro you must also change\n+\t# that macro match.\n+\t#\n+\t# Note - we do not try any fancy optimisations of the return\n+\t# sequences here, it is just not worth it.  Instead keep things\n+\t# simple.  Restore all the save resgisters, including the link\n+\t# register and then perform the correct function return instruction.\n+.macro FUNC_END\n+#ifdef __thumb__\n+\t.thumb\n+\t\n+\tpop\t{r4, r5, r6, r7}\n+\tpop\t{r3}\n+\tmov\tlr, r3\n+#else\n+\t.arm\n+\t\n+\tldmdb\tfp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}\n+#endif\n+\t\n+#if defined __THUMB_INTERWORK__ || defined __thumb__\n+\tbx\tlr\n+#else\n+#ifdef __APCS_26__\n+\tmovs\tpc, lr\n+#else\n+\tmov\tpc, lr\n+#endif\n+#endif\n+.endm\n+\t\t\n+\t\n+\t.file\t\t\"crtn.asm\"\n+\n+\t.section\t\".init\"\n+\t;;\n+\tFUNC_END\n+\t\n+\t.section\t\".fini\"\n+\t;;\n+\tFUNC_END\n+\t\n+# end of crtn.asm"}, {"sha": "f1377a9eca24de1f8e1cef56ae69ea8e48b8702e", "filename": "gcc/config/arm/ecos-elf.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fecos-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fecos-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fecos-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for ecos based ARM systems using ELF\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n  \n This file is part of GNU CC.\n  \n@@ -19,11 +19,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Run-time Target Specification.  */\n+#undef  TARGET_VERSION\n #define TARGET_VERSION\tfputs (\" (ARM/ELF Ecos)\", stderr);\n \n #define HAS_INIT_SECTION\n \n-#include \"unknown-elf.h\"\n-\n #undef INVOKE_main\n "}, {"sha": "e39381d0efe847076b48e4681fcedb5a768ac523", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 16, "deletions": 123, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -22,17 +22,14 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n-#define OBJECT_FORMAT_ELF\n+#ifndef OBJECT_FORMAT_ELF\n+ #error elf.h included before elfos.h\n+#endif\n \n #ifndef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n #endif\n \n-#ifndef USER_LABEL_PREFIX\n-#define USER_LABEL_PREFIX \"\"\n-#endif\n-\n #ifndef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC  \"-D__ELF__\"\n #endif\n@@ -58,30 +55,13 @@ Boston, MA 02111-1307, USA.  */\n %(subtarget_extra_asm_spec)\"\n #endif\n \n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n+/* The ARM uses @ are a comment character so we need to redefine\n+   TYPE_OPERAND_FMT.  */\n+#undef  TYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT\t\"%s\"\n \n-/* Write the extra assembler code needed to declare a function's result.\n-   Most svr4 assemblers don't require any special declaration of the\n-   result value, but there are exceptions.  */\n-#ifndef ASM_DECLARE_RESULT\n-#define ASM_DECLARE_RESULT(FILE, RESULT)\n-#endif\n-\n-/* These macros generate the special .type and .size directives which\n-   are used to set the corresponding fields of the linker symbol table\n-   entries in an ELF object file under SVR4.  These macros also output\n-   the starting labels for the relevant functions/objects.  */\n-#define TYPE_ASM_OP     \"\\t.type\\t\"\n-#define SIZE_ASM_OP     \"\\t.size\\t\"\n-\n-/* Write the extra assembler code needed to declare a function properly.\n-   Some svr4 assemblers need to also have something extra said about the\n-   function's return value.  We allow for that here.  */\n+/* We might need a ARM specific header to function declarations.  */\n+#undef  ASM_DECLARE_FUNCTION_NAME\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n@@ -96,56 +76,8 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Write the extra assembler code needed to declare an object properly.  */\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\t\\\n-      assemble_name (FILE, NAME);\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\\\n-      fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\\\n-      size_directive_output = 0;\t\t\t\t\\\n-      if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\\\n-        {\t\t\t\t\t\t\t\\\n-\t  size_directive_output = 1;\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\\\n-\t  assemble_name (FILE, NAME);\t\t\t\t\\\n-\t  putc (',', FILE);\t\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\\\n-\t\t   int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-\t  fputc ('\\n', FILE);\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\\\n-      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Output the size directive for a decl in rest_of_decl_compilation\n-   in the case where we did not do so before the initializer.\n-   Once we find the error_mark_node, we know that the value of\n-   size_directive_output was set\n-   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      const char * name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n-      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t\\\n-          && ! AT_END && TOP_LEVEL\t\t\t\t\t\\\n-\t  && DECL_INITIAL (DECL) == error_mark_node\t\t\t\\\n-\t  && !size_directive_output)\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-\t  size_directive_output = 1;\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n-\t  assemble_name (FILE, name);\t\t\t\t\t\\\n-\t  putc (',', FILE);\t\t\t\t\t\t\\\n-\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\\\n-\t\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t\\\n-\t fputc ('\\n', FILE);\t\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* This is how to declare the size of a function.  */\n+/* We might need an ARM specific trailer for function declarations.  */\n+#undef  ASM_DECLARE_FUNCTION_SIZE\n #define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n@@ -207,7 +139,7 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Output an internal label definition.  */\n-#ifndef ASM_OUTPUT_INTERNAL_LABEL\n+#undef  ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(STREAM, PREFIX, NUM)  \t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n@@ -216,58 +148,20 @@ Boston, MA 02111-1307, USA.  */\n       extern rtx arm_target_insn;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (arm_ccfsm_state == 3 && arm_target_label == (NUM)\t\\\n-\t&& !strcmp (PREFIX, \"L\"))\t\t\t\t\\\n+\t  && !strcmp (PREFIX, \"L\"))\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  arm_ccfsm_state = 0;\t\t\t\t\t\\\n \t  arm_target_insn = NULL;\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n-\tASM_GENERATE_INTERNAL_LABEL (s, (PREFIX), (NUM));\t\\\n-        ASM_OUTPUT_LABEL (STREAM, s);\t\t                \\\n+      ASM_GENERATE_INTERNAL_LABEL (s, (PREFIX), (NUM));\t\t\\\n+      ASM_OUTPUT_LABEL (STREAM, s);\t\t                \\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n-#endif\n \f\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-#ifndef SUBTARGET_EXTRA_SECTIONS\n-#define SUBTARGET_EXTRA_SECTIONS\n-#endif\n-\n-#ifndef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS SUBTARGET_EXTRA_SECTIONS\n-#endif\n-\n-/* A list of extra section function definitions.  */\n-#ifndef SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-#endif\n-\n-#ifndef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS \t\t\\\n-  SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-#endif\n-\n-/* Switch into a generic section.  */\n-#undef TARGET_ASM_NAMED_SECTION\n+#undef  TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  arm_elf_asm_named_section\n \f\n-/* Support the ctors/dtors sections for g++.  */\n-#ifndef INT_ASM_OP\n-#define INT_ASM_OP \t\"\\t.word\\t\"\n-#endif\n-\n-/* This is how we tell the assembler that a symbol is weak.  */\n-\n-#define ASM_WEAKEN_LABEL(FILE, NAME)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fputs (\"\\t.weak\\t\", FILE);\t\t\\\n-      assemble_name (FILE, NAME);\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-#ifndef ASM_OUTPUT_ALIGNED_COMMON\n+#undef  ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(STREAM, NAME, SIZE, ALIGN)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n@@ -276,7 +170,6 @@ Boston, MA 02111-1307, USA.  */\n       fprintf (STREAM, \", %d, %d\\n\", SIZE, ALIGN);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n-#endif\n \n /* For PIC code we need to explicitly specify (PLT) and (GOT) relocs.  */\n #define NEED_PLT_RELOC\tflag_pic"}, {"sha": "f6b91973c4b2941071e7d0eae5a39606b8009b8a", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 21, "deletions": 156, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -20,36 +20,42 @@ along with this program; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* elfos.h should have already been included.  Now just override\n+   any conflicting definitions and add any extras.  */\n+\n /* Run-time Target Specification.  */\n+#undef  TARGET_VERSION\n #define TARGET_VERSION  fputs (\" (ARM GNU/Linux with ELF)\", stderr);\n \n /* Do not assume anything about header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n /* Default is to use APCS-32 mode.  */\n+#undef  TARGET_DEFAULT\n #define TARGET_DEFAULT (ARM_FLAG_APCS_32 | ARM_FLAG_MMU_TRAPS)\n+\n #define SUBTARGET_EXTRA_LINK_SPEC \" -m armelf_linux -p\"\n+\n+#undef  MULTILIB_DEFAULTS\n #define MULTILIB_DEFAULTS \\\n \t{ \"marm\", \"mlittle-endian\", \"mhard-float\", \"mapcs-32\", \"mno-thumb-interwork\" }\n-#define CPP_APCS_PC_DEFAULT_SPEC \"-D__APCS_32__\"\n \n-/* Handle #pragma weak and #pragma pack.  */\n-#define HANDLE_SYSV_PRAGMA\n+#define CPP_APCS_PC_DEFAULT_SPEC \"-D__APCS_32__\"\n \n /* Now we define the strings used to build the spec file.  */\n #define LIB_SPEC \\\n   \"%{shared: -lc} \\\n    %{!shared: %{pthread:-lpthread} \\\n    %{profile:-lc_p} %{!profile: -lc}}\"\n \n-\n #define LIBGCC_SPEC \"%{msoft-float:-lfloat} -lgcc\"\n \n /* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n    the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n    provides part of the support for getting C++ file-scope static\n    object constructed before entering `main'. */\n    \n+#undef  STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared: \\\n      %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n@@ -63,9 +69,11 @@ Boston, MA 02111-1307, USA.  */\n    object constructed before entering `main', followed by a normal\n    GNU/Linux \"finalizer\" file, `crtn.o'.  */\n \n+#undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \\\n   \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n \n+#undef  LINK_SPEC\n #define LINK_SPEC \"%{h*} %{version:-v} \\\n    %{b} %{Wl,*:%*} \\\n    %{static:-Bstatic} \\\n@@ -85,159 +93,16 @@ Boston, MA 02111-1307, USA.  */\n /* Allow #sccs in preprocessor.  */\n #define SCCS_DIRECTIVE\n \n-#define USER_LABEL_PREFIX \t\"\"\t/* For ELF the default is no underscores */\n-#define LOCAL_LABEL_PREFIX \t\".\"\n-\n-#define IDENT_ASM_OP \t\"\\t.ident\\t\"\n-\n-/* Output #ident as a .ident.  */\n-#define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n-\n-/* Support const sections and the ctors and dtors sections for g++.\n-   Note that there appears to be two different ways to support const\n-   sections at the moment.  You can either #define the symbol\n-   READONLY_DATA_SECTION (giving it some code which switches to the\n-   readonly data section) or else you can #define the symbols\n-   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n-   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n-#define USE_CONST_SECTION\t1\n-\n-/* Support for Constructors and Destructors.  */\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-#define SUBTARGET_EXTRA_SECTIONS in_const,\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\tCONST_SECTION_FUNCTION\n-\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section ();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  arm_elf_asm_named_section\n-\n-/* A C statement or statements to switch to the appropriate\n-   section for output of DECL.  DECL is either a `VAR_DECL' node\n-   or a constant of some sort.  RELOC indicates whether forming\n-   the initial value of DECL requires link-time relocations.  */\n-#define SELECT_SECTION(DECL,RELOC,ALIGN)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (! flag_writable_strings)\t\t\t\t\t\\\n-\tconst_section ();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((flag_pic && RELOC)\t\t\t\t\t\t\\\n-\t  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)\t\t\\\n-\t  || !DECL_INITIAL (DECL)\t\t\t\t\t\\\n-\t  || (DECL_INITIAL (DECL) != error_mark_node\t\t\t\\\n-\t      && !TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\t\\\n-\tdata_section ();\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tconst_section ();\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    const_section ();\t\t\t\t\t\t\t\\\n-}\n-\n-#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      int len;\t\t\t\t\t\t\t\\\n-      char * name;\t\t\t\t\t\t\\\n-      char * string;\t\t\t\t\t\t\\\n-      char * prefix;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      if (! DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  prefix = \".\";                                         \\\n-\t  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\t    prefix = \".text.\";\t\t\t\t\t\\\n-\t  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\t    prefix = \".rodata.\";\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\\\n-\t    prefix = \".data.\";\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\tprefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n-      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\tprefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tprefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      len = strlen (name) + strlen (prefix);\t\t\t\\\n-      string = alloca (len + 1);\t\t\t\t\\\n-      sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* A C statement or statements to switch to the appropriate\n-   section for output of RTX in mode MODE.  RTX is some kind\n-   of constant in RTL.  The argument MODE is redundant except\n-   in the case of a `const_int' rtx.  Currently, these always\n-   go into the const section.  */\n-#define SELECT_RTX_SECTION(MODE,RTX,ALIGN) const_section ()\n-\n-/* On svr4, we *do* have support for the .init and .fini sections, and we\n-   can put stuff in there to be executed before and after `main'.  We let\n-   crtstuff.c and other files know this by defining the following symbols.\n-   The definitions say how to change sections to the .init and .fini\n-   sections.  This is the same for all known svr4 assemblers.  */\n-#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n-\n-\n-/* This is how we tell the assembler that a symbol is weak.  */\n-#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n-  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n-       fputc ('\\n', FILE); } while (0)\n-\n /* This is how we tell the assembler that two symbols have the same value.  */\n-\n-#define ASM_OUTPUT_DEF(FILE,NAME1,NAME2) \\\n-  do { assemble_name (FILE, NAME1); \t \\\n-       fputs (\" = \", FILE);\t\t \\\n-       assemble_name (FILE, NAME2);\t \\\n-       fputc ('\\n', FILE); } while (0)\n-\n-/* Make DWARF2 an option, but keep DBX as the default for now.\n-   Use -gdwarf-2 to turn on DWARF2.  */\n-#define DWARF2_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-/* Get the standard ELF stabs definitions.  */\n-#include \"dbxelf.h\"\n-\n-#include \"arm/elf.h\"\n-#include \"arm/linux-gas.h\"\n+#define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\\n+  do\t\t\t\t\t   \\\n+    {\t\t\t\t\t   \\\n+      assemble_name (FILE, NAME1); \t   \\\n+      fputs (\" = \", FILE);\t\t   \\\n+      assemble_name (FILE, NAME2);\t   \\\n+      fputc ('\\n', FILE);\t\t   \\\n+    }\t\t\t\t\t   \\\n+  while (0)\n \n /* NWFPE always understands FPA instructions.  */\n #undef  FP_DEFAULT"}, {"sha": "b4e346dd9ef30c1521bce3b012ab8606f8a44d6b", "filename": "gcc/config/arm/linux-gas.h", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Flinux-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Flinux-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-gas.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -20,24 +20,10 @@ along with this program; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/*\n- * We are using GAS, so stabs should work.\n- */\n+/* This is how we tell the assembler that a symbol is weak.\n+   GAS always supports weak symbols.  */\n \n-#ifndef DBX_DEBUGGING_INFO\n-#define DBX_DEBUGGING_INFO 1\n-#endif\n-\n-/*\n- * This is how we tell the assembler that a symbol is weak.  GAS always\n- * supports weak symbols.\n- */\n-\n-#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n-  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n-       fputc ('\\n', FILE); } while (0)\n-\n-/* This is used in ASM_FILE_START */\n+/* This is used in ASM_FILE_START.  */\n #undef  ARM_OS_NAME\n #define ARM_OS_NAME \"Linux\"\n "}, {"sha": "954f72b98820421d4589211c9160e9c841ec73ed", "filename": "gcc/config/arm/rtems-elf.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Frtems-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Frtems-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Frtems-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for RTEMS based ARM systems using ELF\n-   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n  \n This file is part of GNU CC.\n  \n@@ -19,19 +19,15 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Run-time Target Specification.  */\n+#undef  TARGET_VERSION\n #define TARGET_VERSION  fputs (\" (ARM/ELF RTEMS)\", stderr);\n \n #define HAS_INIT_SECTION\n \n-#include \"unknown-elf.h\"\n-\n-#undef CPP_PREDEFINES\n+#undef  CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Darm -Darm_elf -Drtems -D__rtems__ -D__ELF__ \\\n    -Asystem(rtems) -Acpu(arm) -Amachine(arm)\"\n \n /*#undef INVOKE_main*/\n \n-/* Get machine-independent configuration parameters for RTEMS.  */\n-#include <rtems.h>\n-\n "}, {"sha": "dc63ecdd6200103c9f6965c5b36c169ef8b5549e", "filename": "gcc/config/arm/semi.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fsemi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fsemi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsemi.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -21,11 +21,17 @@ Boston, MA 02111-1307, USA.  */\n \n #define STARTFILE_SPEC  \"crt0.o%s\"\n \n+#ifndef LIB_SPEC\n #define LIB_SPEC \"-lc\"\n+#endif\n \n+#ifndef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"-D__semi__\"\n+#endif\n \n+#ifndef LINK_SPEC\n #define LINK_SPEC \"%{mbig-endian:-EB} -X\"\n+#endif\n \n #ifndef TARGET_VERSION\n #define TARGET_VERSION fputs (\" (ARM/semi-hosted)\", stderr);"}, {"sha": "3fc848718bccc1f63f4d091b37769c7579e730b8", "filename": "gcc/config/arm/strongarm-elf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fstrongarm-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fstrongarm-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fstrongarm-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for non-Linux based StrongARM systems using ELF\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n    Contributed by Catherine Moore <clm@cygnus.com>\n \n This file is part of GNU CC.\n@@ -28,4 +28,3 @@ Boston, MA 02111-1307, USA.  */\n #define SUBTARGET_CPU_DEFAULT \t\tTARGET_CPU_strongarm\n #endif\n \n-#include \"unknown-elf.h\""}, {"sha": "d94b5d2ccbc087878fc07616420993bbc5adc930", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -70,10 +70,10 @@ MULTILIB_EXCEPTIONS  =\n # MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm610\n # MULTILIB_MATCHES    += mcpu?arm7=mcpu?arm620\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n # If EXTRA_MULTILIB_PARTS is not defined above then define EXTRA_PARTS here\n-# EXTRA_PARTS = crtbegin.o crtend.o\n+# EXTRA_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n@@ -82,3 +82,12 @@ INSTALL_LIBGCC = install-multilib\n # or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm"}, {"sha": "46e2ac4f615818e63f9c1fb781c7be83218b894a", "filename": "gcc/config/arm/t-strongarm-elf", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-elf?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -24,10 +24,7 @@ MULTILIB_OPTIONS     = mlittle-endian/mbig-endian mhard-float/msoft-float\n MULTILIB_DIRNAMES    = le be fpu soft\n MULTILIB_EXCEPTIONS  =\n MULTILIB_MATCHES     = mbig-endian=mbe mlittle-endian=mle\n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n-\n-# If EXTRA_MULTILIB_PARTS is not defined above then define EXTRA_PARTS here\n-# EXTRA_PARTS = crtbegin.o crtend.o\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n \n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n@@ -36,3 +33,12 @@ INSTALL_LIBGCC = install-multilib\n # or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm"}, {"sha": "0efc1d5477883f8c0e2a65004280671c44da1812", "filename": "gcc/config/arm/t-xscale-elf", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Ft-xscale-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Ft-xscale-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-xscale-elf?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -37,11 +37,21 @@ MULTILIB_EXCEPTIONS += *mhard-float/*mthumb*\n \n MULTILIB_REDUNDANT_DIRS = interwork/thumb=thumb\n \n-EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o\n+EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o\n+\n LIBGCC               = stmp-multilib\n INSTALL_LIBGCC       = install-multilib\n \n # Currently there is a bug somewhere in GCC's alias analysis\n # or scheduling code that is breaking _fpmul_parts in fp-bit.c.\n # Disabling function inlining is a workaround for this problem.\n TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline\n+\n+# Assemble startup files.\n+$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm\n+\n+$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \\\n+\t-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm"}, {"sha": "cad61b70bd4fceafc6d8e8e72361471aa39c4364", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for ARM running ucLinux using ELF\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n    Contributed by Philip Blundell <pb@nexus.co.uk>\n \n This file is part of GNU CC.\n@@ -19,8 +19,6 @@ along with this program; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#include \"arm/linux-elf.h\"\n-\n /* We don't want a PLT.  */\n #undef  NEED_PLT_RELOC\n #define NEED_PLT_RELOC 0"}, {"sha": "cc58f3ae2bed8e6ce4ef27eca5c5ee9a5fdecd2c", "filename": "gcc/config/arm/unknown-elf-oabi.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Funknown-elf-oabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Funknown-elf-oabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf-oabi.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -20,17 +20,13 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* Run-time Target Specification.  */\n-#ifndef TARGET_VERSION\n+#undef  TARGET_VERSION\n #define TARGET_VERSION\tfputs (\" (ARM/ELF non-Linux old abi)\", stderr);\n-#endif\n \n+#undef  CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Darm_oabi -Darm -Darm_elf -Acpu=arm -Amachine=arm -D__ELF__\"\n \n-#ifndef ASM_SPEC\n+#undef  ASM_SPEC\n #define ASM_SPEC \"-moabi %{mbig-endian:-EB} %{mcpu=*:-m%*} %{march=*:-m%*} \\\n  %{mapcs-*:-mapcs-%*} %{mthumb-interwork:-mthumb-interwork}\"\n-#endif\n \n-/* Now get the routine arm-elf definitions.  */\n-#include \"arm/unknown-elf.h\"\n-#include \"arm/elf.h\""}, {"sha": "ba5f7efb2f3789c1e501b0bd311cc57ee1d5d93c", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 12, "deletions": 89, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -19,6 +19,9 @@ along with this program; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n+/* elfos.h should have already been included.  Now just override\n+   any conflicting definitions and add any extras.  */\n+\n /* Run-time Target Specification.  */\n #ifndef TARGET_VERSION\n #define TARGET_VERSION\tfputs (\" (ARM/ELF non-Linux)\", stderr);\n@@ -30,103 +33,25 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n /* Now we define the strings used to build the spec file.  */\n-#define STARTFILE_SPEC\t\"crtbegin%O%s crt0%O%s\"\n-\n-#define ENDFILE_SPEC\t\"crtend%O%s\"\n-\n-#define USER_LABEL_PREFIX \t\"\"\n-#define LOCAL_LABEL_PREFIX \t\".\"\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC\t\" crti%O%s crtbegin%O%s crt0%O%s\"\n \n-#define TEXT_SECTION_ASM_OP \t\"\\t.text\"\n-#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC\t\"crtend%O%s crtn%O%s\"\n \n-#define INVOKE__main\n+/* The __USES_INITFINI__ define is tested in newlib/libc/sys/arm/crt0.S\n+   to see if it needs to invoked _init() and _fini().  */\n+#undef  SUBTARGET_CPP_SPEC\n+#define SUBTARGET_CPP_SPEC  \"-D__ELF__ -D__USES_INITFINI__\"\n \n-/* Debugging */\n-#define DWARF_DEBUGGING_INFO\n-#define DWARF2_DEBUGGING_INFO\n+#undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-/* Support for Constructors and Destrcutors .  */\n-#define READONLY_DATA_SECTION\trdata_section\n-\n-/* A list of other sections which the compiler might be \"in\" at any\n-   given time.  */\n-#define SUBTARGET_EXTRA_SECTIONS in_rdata\n-\n-/* A list of extra section function definitions.  */\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS\tRDATA_SECTION_FUNCTION\n-  \n-#define RDATA_SECTION_ASM_OP\t\"\\t.section .rodata\"\n-\n-#define RDATA_SECTION_FUNCTION \t\t\t\t\t\\\n-void rdata_section PARAMS ((void));\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\\\n-rdata_section ()\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_rdata)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", RDATA_SECTION_ASM_OP);\t\\\n-      in_section = in_rdata;\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n-\n-/* The ARM development system defines __main.  */\n-#define NAME__MAIN \"__gccmain\"\n-#define SYMBOL__MAIN __gccmain\n-\n /* Return a non-zero value if DECL has a section attribute.  */\n #define IN_NAMED_SECTION(DECL)\t\t\t\t\t\t\\\n   ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL)\t\\\n    && DECL_SECTION_NAME (DECL) != NULL_TREE)\n \n-#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-\n-#define UNIQUE_SECTION(DECL, RELOC)\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      int len;\t\t\t\t\t\t\t\t\\\n-      int sec;\t\t\t\t\t\t\t\t\\\n-      const char * name;\t\t\t\t\t\t\\\n-      char * string;\t\t\t\t\t\t\t\\\n-      char * prefix;\t\t\t\t\t\t\t\\\n-      static char * prefixes[4][2] =\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\t{ \".text.\",   \".gnu.linkonce.t.\" },\t\t\t\t\\\n-\t{ \".rodata.\", \".gnu.linkonce.r.\" },\t\t\t\t\\\n-\t{ \".data.\",   \".gnu.linkonce.d.\" },\t\t\t\t\\\n-        { \".bss.\",    \".gnu.linkonce.b.\" }\t\t\t\t\\\n-      };\t\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n-\tsec = 0;\t\t\t\t\t\t\t\\\n-      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n-\tsec = 1;\t\t\t\t\t\t\t\\\n-      else if (DECL_INITIAL (DECL) == NULL_TREE)\t\t\t\\\n-\tsec = 3;\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tsec = 2;\t\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      prefix = prefixes[sec][DECL_ONE_ONLY(DECL)];\t\t\t\\\n-      name   = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      /* Strip off any encoding in name.  */\t\t\t\t\\\n-      STRIP_NAME_ENCODING (name, name);\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      len    = strlen (name) + strlen (prefix);\t\t\t\t\\\n-      string = alloca (len + 1);\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      sprintf (string, \"%s%s\", prefix, name);\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-      DECL_SECTION_NAME (DECL) = build_string (len, string);\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef  ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)   \t\\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -169,5 +94,3 @@ rdata_section ()\t\t\t\t\t\t\\\n #define SUBTARGET_CPU_DEFAULT \t\tTARGET_CPU_arm7tdmi\n #endif\n \n-/* Now get the routine arm-elf definitions.  */\n-#include \"elf.h\""}, {"sha": "72615dac9e4722ade26f54f589175fad1baccfe2", "filename": "gcc/config/arm/xscale-elf.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fxscale-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be393ecf35154c276cca7e4843402ababd35b762/gcc%2Fconfig%2Farm%2Fxscale-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fxscale-elf.h?ref=be393ecf35154c276cca7e4843402ababd35b762", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for XScale architectures using ELF\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Catherine Moore <clm@cygnus.com>\n \n This file is part of GNU CC.\n@@ -34,5 +34,3 @@ Boston, MA 02111-1307, USA.  */\n #define MULTILIB_DEFAULTS \\\n   { \"mlittle-endian\", \"mno-thumb-interwork\", \"marm\" }\n #endif\n-\n-#include \"unknown-elf.h\""}]}