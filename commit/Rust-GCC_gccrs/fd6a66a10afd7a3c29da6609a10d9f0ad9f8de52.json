{"sha": "fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2YTY2YTEwYWZkN2EzYzI5ZGE2NjA5YTEwZDlmMGFkOWY4ZGU1Mg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-03-27T18:42:49Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-03-27T18:42:49Z"}, "message": "VMFrame.java: Update from upstream classpath.\n\n        * gnu/classpath/jdwp/VMFrame.java: Update from upstream\n        classpath.\n        * gnu/classpath/jdwp/natVMFrame.cc: Likewise.\n        * gnu/classpath/jdwp/VMVirtualMachine.java: Likewise.\n        * gnu/classpath/jdwp/natVMVirtualMachine.cc: Likewise.\n        (initialize): Fix compiler type-punning warning.\n        (getAllLoadedClasses): Return empty list instead of NULL.\n        (getLoadRequests): Likewise.\n        * gnu/classpath/jdwp/exception/InvalidTagException.h: New file.\n        * gnu/classpath/jdwp/exception/InvalidSlotException.h: New file.\n        * gnu/classpath/jdwp/exception/TypeMismatchException.h: New file.\n        * gnu/classpath/jdwp/VMVirtualMachine.h: Rebuilt.\n        * gnu/classpath/jdwp/value/CharValue.h: New file.\n        * gnu/classpath/jdwp/value/LongValue.h: New file.\n        * gnu/classpath/jdwp/value/ShortValue.h: New file.\n        * gnu/classpath/jdwp/value/Value.h: New file.\n        * gnu/classpath/jdwp/value/BooleanValue.h: New file.\n        * gnu/classpath/jdwp/value/VoidValue.h: New file.\n        * gnu/classpath/jdwp/value/ByteValue.h: New file.\n        * gnu/classpath/jdwp/value/FloatValue.h: New file.\n        * gnu/classpath/jdwp/value/ObjectValue.h: New file.\n        * gnu/classpath/jdwp/value/StringValue.h: New file.\n        * gnu/classpath/jdwp/value/ValueFactory.h: New file.\n        * gnu/classpath/jdwp/value/IntValue.h: New file.\n        * gnu/classpath/jdwp/value/DoubleValue.h: New file.\n        * gnu/classpath/jdwp/VMFrame.h: Rebuilt.\n        * gnu/classpath/jdwp/id/NullObjectId.h: New file.\n        * gnu/classpath/jdwp/util/MethodResult.h: Rebuilt.\n        * gnu/classpath/jdwp/util/NullObject.h: New file.\n        * gnu/classpath/jdwp/util/MonitorInfo.h: New file.\n        * Makefile.in: Rebuilt.\n        * sources.am: Rebuilt.\n\nFrom-SVN: r123266", "tree": {"sha": "eb86eb4fedefc71e12376b94701ea3f9e9041fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb86eb4fedefc71e12376b94701ea3f9e9041fbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab065b4d759004950fca79cd18a9e186f74f8e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab065b4d759004950fca79cd18a9e186f74f8e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab065b4d759004950fca79cd18a9e186f74f8e0a"}], "stats": {"total": 1126, "additions": 1095, "deletions": 31}, "files": [{"sha": "8c7e94653969819e53d409ac95eb8056fa567b68", "filename": "libjava/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -1,3 +1,38 @@\n+2007-03-27  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/VMFrame.java: Update from upstream\n+\tclasspath.\n+\t* gnu/classpath/jdwp/natVMFrame.cc: Likewise.\n+\t* gnu/classpath/jdwp/VMVirtualMachine.java: Likewise.\n+\t* gnu/classpath/jdwp/natVMVirtualMachine.cc: Likewise.\n+\t(initialize): Fix compiler type-punning warning.\n+\t(getAllLoadedClasses): Return empty list instead of NULL.\n+\t(getLoadRequests): Likewise.\n+\t* gnu/classpath/jdwp/exception/InvalidTagException.h: New file.\n+\t* gnu/classpath/jdwp/exception/InvalidSlotException.h: New file.\n+\t* gnu/classpath/jdwp/exception/TypeMismatchException.h: New file.\n+\t* gnu/classpath/jdwp/VMVirtualMachine.h: Rebuilt.\n+\t* gnu/classpath/jdwp/value/CharValue.h: New file.\n+\t* gnu/classpath/jdwp/value/LongValue.h: New file.\n+\t* gnu/classpath/jdwp/value/ShortValue.h: New file.\n+\t* gnu/classpath/jdwp/value/Value.h: New file.\n+\t* gnu/classpath/jdwp/value/BooleanValue.h: New file.\n+\t* gnu/classpath/jdwp/value/VoidValue.h: New file.\n+\t* gnu/classpath/jdwp/value/ByteValue.h: New file.\n+\t* gnu/classpath/jdwp/value/FloatValue.h: New file.\n+\t* gnu/classpath/jdwp/value/ObjectValue.h: New file.\n+\t* gnu/classpath/jdwp/value/StringValue.h: New file.\n+\t* gnu/classpath/jdwp/value/ValueFactory.h: New file.\n+\t* gnu/classpath/jdwp/value/IntValue.h: New file.\n+\t* gnu/classpath/jdwp/value/DoubleValue.h: New file.\n+\t* gnu/classpath/jdwp/VMFrame.h: Rebuilt.\n+\t* gnu/classpath/jdwp/id/NullObjectId.h: New file.\n+\t* gnu/classpath/jdwp/util/MethodResult.h: Rebuilt.\n+\t* gnu/classpath/jdwp/util/NullObject.h: New file.\n+\t* gnu/classpath/jdwp/util/MonitorInfo.h: New file.\n+\t* Makefile.in: Rebuilt.\n+\t* sources.am: Rebuilt.\n+\n 2006-03-26  David Daney  <ddaney@avtrex.com>\n \n \t* configure.ac: Remove checks for mktime, alloca, ioctl, gmtime_r,"}, {"sha": "a7ed11b9c7adf9762692969977663e0c9e956e12", "filename": "libjava/Makefile.in", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -159,9 +159,10 @@ am__DEPENDENCIES_1 = gnu/awt.lo gnu/awt/j2d.lo gnu/classpath.lo \\\n \tgnu/classpath/jdwp/exception.lo gnu/classpath/jdwp/id.lo \\\n \tgnu/classpath/jdwp/processor.lo \\\n \tgnu/classpath/jdwp/transport.lo gnu/classpath/jdwp/util.lo \\\n-\tgnu/gcj.lo gnu/gcj/convert.lo gnu/gcj/io.lo gnu/gcj/jvmti.lo \\\n-\tgnu/gcj/runtime.lo gnu/gcj/util.lo gnu/java/awt.lo \\\n-\tgnu/java/awt/color.lo gnu/java/awt/dnd.lo gnu/java/awt/font.lo \\\n+\tgnu/classpath/jdwp/value.lo gnu/gcj.lo gnu/gcj/convert.lo \\\n+\tgnu/gcj/io.lo gnu/gcj/jvmti.lo gnu/gcj/runtime.lo \\\n+\tgnu/gcj/util.lo gnu/java/awt.lo gnu/java/awt/color.lo \\\n+\tgnu/java/awt/dnd.lo gnu/java/awt/font.lo \\\n \tgnu/java/awt/font/autofit.lo gnu/java/awt/font/opentype.lo \\\n \tgnu/java/awt/font/opentype/truetype.lo gnu/java/awt/image.lo \\\n \tgnu/java/awt/java2d.lo gnu/java/awt/peer.lo \\\n@@ -1218,14 +1219,17 @@ classpath/gnu/classpath/jdwp/exception/InvalidFrameException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidLocationException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidMethodException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidObjectException.java \\\n+classpath/gnu/classpath/jdwp/exception/InvalidSlotException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidStringException.java \\\n+classpath/gnu/classpath/jdwp/exception/InvalidTagException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidThreadException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidThreadGroupException.java \\\n classpath/gnu/classpath/jdwp/exception/JdwpException.java \\\n classpath/gnu/classpath/jdwp/exception/JdwpIllegalArgumentException.java \\\n classpath/gnu/classpath/jdwp/exception/JdwpInternalErrorException.java \\\n classpath/gnu/classpath/jdwp/exception/NativeMethodException.java \\\n classpath/gnu/classpath/jdwp/exception/NotImplementedException.java \\\n+classpath/gnu/classpath/jdwp/exception/TypeMismatchException.java \\\n classpath/gnu/classpath/jdwp/exception/VmDeadException.java\n \n gnu_classpath_jdwp_exception_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_classpath_jdwp_exception_source_files)))\n@@ -1237,6 +1241,7 @@ classpath/gnu/classpath/jdwp/id/ClassObjectId.java \\\n classpath/gnu/classpath/jdwp/id/ClassReferenceTypeId.java \\\n classpath/gnu/classpath/jdwp/id/InterfaceReferenceTypeId.java \\\n classpath/gnu/classpath/jdwp/id/JdwpId.java \\\n+classpath/gnu/classpath/jdwp/id/NullObjectId.java \\\n classpath/gnu/classpath/jdwp/id/ObjectId.java \\\n classpath/gnu/classpath/jdwp/id/ReferenceTypeId.java \\\n classpath/gnu/classpath/jdwp/id/StringId.java \\\n@@ -1281,11 +1286,29 @@ classpath/gnu/classpath/jdwp/util/JdwpString.java \\\n classpath/gnu/classpath/jdwp/util/LineTable.java \\\n classpath/gnu/classpath/jdwp/util/Location.java \\\n classpath/gnu/classpath/jdwp/util/MethodResult.java \\\n+classpath/gnu/classpath/jdwp/util/MonitorInfo.java \\\n+classpath/gnu/classpath/jdwp/util/NullObject.java \\\n classpath/gnu/classpath/jdwp/util/Signature.java \\\n classpath/gnu/classpath/jdwp/util/Value.java \\\n classpath/gnu/classpath/jdwp/util/VariableTable.java\n \n gnu_classpath_jdwp_util_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_classpath_jdwp_util_source_files)))\n+gnu_classpath_jdwp_value_source_files = \\\n+classpath/gnu/classpath/jdwp/value/BooleanValue.java \\\n+classpath/gnu/classpath/jdwp/value/ByteValue.java \\\n+classpath/gnu/classpath/jdwp/value/CharValue.java \\\n+classpath/gnu/classpath/jdwp/value/DoubleValue.java \\\n+classpath/gnu/classpath/jdwp/value/FloatValue.java \\\n+classpath/gnu/classpath/jdwp/value/IntValue.java \\\n+classpath/gnu/classpath/jdwp/value/LongValue.java \\\n+classpath/gnu/classpath/jdwp/value/ObjectValue.java \\\n+classpath/gnu/classpath/jdwp/value/ShortValue.java \\\n+classpath/gnu/classpath/jdwp/value/StringValue.java \\\n+classpath/gnu/classpath/jdwp/value/Value.java \\\n+classpath/gnu/classpath/jdwp/value/ValueFactory.java \\\n+classpath/gnu/classpath/jdwp/value/VoidValue.java\n+\n+gnu_classpath_jdwp_value_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_classpath_jdwp_value_source_files)))\n gnu_gcj_source_files = \\\n gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n@@ -7225,6 +7248,7 @@ all_packages_source_files = \\\n   gnu/classpath/jdwp/processor.list \\\n   gnu/classpath/jdwp/transport.list \\\n   gnu/classpath/jdwp/util.list \\\n+  gnu/classpath/jdwp/value.list \\\n   gnu/gcj.list \\\n   gnu/gcj/convert.list \\\n   gnu/gcj/io.list \\\n@@ -7474,6 +7498,7 @@ ordinary_header_files = \\\n   $(gnu_classpath_jdwp_processor_header_files) \\\n   $(gnu_classpath_jdwp_transport_header_files) \\\n   $(gnu_classpath_jdwp_util_header_files) \\\n+  $(gnu_classpath_jdwp_value_header_files) \\\n   $(gnu_gcj_header_files) \\\n   $(gnu_gcj_convert_header_files) \\\n   $(gnu_gcj_io_header_files) \\\n@@ -10083,6 +10108,12 @@ gnu/classpath/jdwp/util.list: $(gnu_classpath_jdwp_util_source_files)\n \n -include gnu/classpath/jdwp/util.deps\n \n+gnu/classpath/jdwp/value.list: $(gnu_classpath_jdwp_value_source_files)\n+\t@$(mkinstalldirs) $(dir $@)\n+\techo $(srcdir)/classpath/lib/gnu/classpath/jdwp/value/*.class > gnu/classpath/jdwp/value.list\n+\n+-include gnu/classpath/jdwp/value.deps\n+\n gnu/gcj.list: $(gnu_gcj_source_files)\n \t@$(mkinstalldirs) $(dir $@)\n \techo $(srcdir)/classpath/lib/gnu/gcj/*.class > gnu/gcj.list"}, {"sha": "0108e7b96d57d094c407c226da0800ca827594be", "filename": "libjava/gnu/classpath/jdwp/VMFrame.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -20,6 +20,10 @@ extern \"Java\"\n         {\n             class Location;\n         }\n+        namespace value\n+        {\n+            class Value;\n+        }\n       }\n     }\n   }\n@@ -31,8 +35,8 @@ class gnu::classpath::jdwp::VMFrame : public ::java::lang::Object\n public:\n   VMFrame(::java::lang::Thread *, jlong, ::gnu::classpath::jdwp::util::Location *);\n   virtual ::gnu::classpath::jdwp::util::Location * getLocation();\n-  virtual ::java::lang::Object * getValue(jint);\n-  virtual void setValue(jint, ::java::lang::Object *);\n+  virtual ::gnu::classpath::jdwp::value::Value * getValue(jint, jbyte);\n+  virtual void setValue(jint, ::gnu::classpath::jdwp::value::Value *);\n   virtual ::java::lang::Thread * getThread();\n   virtual ::java::lang::Object * getObject();\n   virtual jlong getId();"}, {"sha": "4b144af75c314e1f8528e97f9e2180c8148646c9", "filename": "libjava/gnu/classpath/jdwp/VMFrame.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.java?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -40,6 +40,7 @@\n package gnu.classpath.jdwp;\n \n import gnu.classpath.jdwp.util.Location;\n+import gnu.classpath.jdwp.value.Value;\n \n /**\n  * Reference implementation of VM hooks for JDWP Frame access.\n@@ -93,14 +94,14 @@ public Location getLocation()\n    * \n    * @param slot the slot containing the variable\n    */\n-  public native Object getValue(int slot);\n+  public native Value getValue(int slot, byte sig);\n \n   /**\n    * Assigns the given variable to the given value. \n    * @param slot The slot which contains the variable\n    * @param value The value to assign the variable to\n    */\n-  public native void setValue(int slot, Object value);\n+  public native void setValue(int slot, Value value);\n   \n   /**\n    * Get the thread this frame is in."}, {"sha": "dd316940996442b2c319feeca64cb5bda191e0a6", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.h", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -27,6 +27,7 @@ extern \"Java\"\n         namespace util\n         {\n             class MethodResult;\n+            class MonitorInfo;\n         }\n       }\n     }\n@@ -44,8 +45,7 @@ class gnu::classpath::jdwp::VMVirtualMachine : public ::java::lang::Object\n   static void resumeThread(::java::lang::Thread *);\n   static void resumeAllThreads();\n   static jint getSuspendCount(::java::lang::Thread *);\n-  static jint getAllLoadedClassesCount();\n-  static ::java::util::Iterator * getAllLoadedClasses();\n+  static ::java::util::Collection * getAllLoadedClasses();\n   static jint getClassStatus(::java::lang::Class *);\n   static JArray< ::gnu::classpath::jdwp::VMMethod * > * getAllClassMethods(::java::lang::Class *);\n   static ::gnu::classpath::jdwp::VMMethod * getClassMethod(::java::lang::Class *, jlong);\n@@ -59,6 +59,29 @@ class gnu::classpath::jdwp::VMVirtualMachine : public ::java::lang::Object\n   static void registerEvent(::gnu::classpath::jdwp::event::EventRequest *);\n   static void unregisterEvent(::gnu::classpath::jdwp::event::EventRequest *);\n   static void clearEvents(jbyte);\n+  static void redefineClasses(JArray< ::java::lang::Class * > *, JArray< JArray< jbyte > * > *);\n+  static void setDefaultStratum(::java::lang::String *);\n+  static ::java::lang::String * getSourceDebugExtension(::java::lang::Class *);\n+  static JArray< jbyte > * getBytecodes(::gnu::classpath::jdwp::VMMethod *);\n+  static ::gnu::classpath::jdwp::util::MonitorInfo * getMonitorInfo(::java::lang::Object *);\n+  static JArray< ::java::lang::Object * > * getOwnedMonitors(::java::lang::Thread *);\n+  static ::java::lang::Object * getCurrentContendedMonitor(::java::lang::Thread *);\n+  static void popFrames(::java::lang::Thread *, jlong);\n+  static const jboolean canWatchFieldModification = 0;\n+  static const jboolean canWatchFieldAccess = 0;\n+  static const jboolean canGetBytecodes = 0;\n+  static const jboolean canGetSyntheticAttribute = 0;\n+  static const jboolean canGetOwnedMonitorInfo = 0;\n+  static const jboolean canGetCurrentContendedMonitor = 0;\n+  static const jboolean canGetMonitorInfo = 0;\n+  static const jboolean canRedefineClasses = 0;\n+  static const jboolean canAddMethod = 0;\n+  static const jboolean canUnrestrictedlyRedefineClasses = 0;\n+  static const jboolean canPopFrames = 0;\n+  static const jboolean canUseInstanceFilters = 0;\n+  static const jboolean canGetSourceDebugExtension = 0;\n+  static const jboolean canRequestVMDeathEvent = 0;\n+  static const jboolean canSetDefaultStratum = 0;\n private:\n   static ::java::util::Hashtable * _jdwp_suspend_counts;\n public: // actually package-private"}, {"sha": "a1249d1938e3e7a9a317de59f6ae6f396d1c5c5d", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.java", "status": "modified", "additions": 104, "deletions": 9, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.java?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -45,11 +45,13 @@\n import gnu.classpath.jdwp.exception.InvalidMethodException;\n import gnu.classpath.jdwp.exception.JdwpException;\n import gnu.classpath.jdwp.util.MethodResult;\n+import gnu.classpath.jdwp.util.MonitorInfo;\n+\n import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Hashtable;\n-import java.util.Iterator;\n \n /**\n  * A virtual machine according to JDWP.\n@@ -58,6 +60,23 @@\n  */\n public class VMVirtualMachine\n {\n+  // VM Capabilities\n+  public static final boolean canWatchFieldModification = false;\n+  public static final boolean canWatchFieldAccess = false;\n+  public static final boolean canGetBytecodes = false;\n+  public static final boolean canGetSyntheticAttribute = false;\n+  public static final boolean canGetOwnedMonitorInfo = false;\n+  public static final boolean canGetCurrentContendedMonitor = false;\n+  public static final boolean canGetMonitorInfo = false;\n+  public static final boolean canRedefineClasses = false;\n+  public static final boolean canAddMethod = false;\n+  public static final boolean canUnrestrictedlyRedefineClasses = false;\n+  public static final boolean canPopFrames = false;\n+  public static final boolean canUseInstanceFilters = false;\n+  public static final boolean canGetSourceDebugExtension = false;\n+  public static final boolean canRequestVMDeathEvent = false;\n+  public static final boolean canSetDefaultStratum = false;\n+\n   // Thread suspension table. Maps Thread to suspend count (Integer)\n   private static Hashtable _jdwp_suspend_counts;\n \n@@ -179,15 +198,9 @@ public static native int getSuspendCount (Thread thread)\n     throws JdwpException;\n  \n   /**\n-   * Returns a count of the number of loaded classes in the VM\n-   */\n-  public static native int getAllLoadedClassesCount ()\n-    throws JdwpException;\n-\n-  /**\n-   * Returns an iterator over all the loaded classes in the VM\n+   * Returns a Collection of all classes loaded in the VM\n    */\n-  public static native Iterator getAllLoadedClasses ()\n+  public static native Collection getAllLoadedClasses ()\n     throws JdwpException;\n \n   /**\n@@ -335,4 +348,86 @@ public static native void unregisterEvent (EventRequest request)\n    */\n   public static native void clearEvents (byte kind)\n     throws JdwpException;\n+\n+  /**\n+   * Redefines the given types. VM must support canRedefineClasses\n+   * capability (may also require canAddMethod and/or\n+   * canUnrestrictedlyRedefineClasses capabilities)\n+   *\n+   * @param types the classes to redefine\n+   * @param bytecodes the new bytecode definitions for the classes\n+   */\n+  public static native void redefineClasses(Class[] types, byte[][] bytecodes)\n+    throws JdwpException;\n+\n+  /**\n+   * Sets the default stratum. VM must support the\n+   * canSetDefaultStratum capability.\n+   *\n+   * @param stratum the new default stratum or empty string to\n+   *        use the reference default\n+   */\n+  public static native void setDefaultStratum(String stratum)\n+    throws JdwpException;\n+\n+  /**\n+   * Returns the source debug extension. VM must support the\n+   * canGetSourceDebugExtension capability.\n+   *\n+   * @param klass the class for which to return information\n+   * @returns the source debug extension\n+   */\n+  public static native String getSourceDebugExtension(Class klass)\n+    throws JdwpException;\n+\n+  /**\n+   * Returns the bytecode for the given method. VM must support the\n+   * canGetBytecodes capability.\n+   *\n+   * @param method the method for which to get bytecodes\n+   * @returns the bytecodes\n+   */\n+  public static native byte[] getBytecodes(VMMethod method)\n+    throws JdwpException;\n+\n+  /**\n+   * Returns monitor information about an object. VM must support\n+   * the canGetMonitorInformation capability.\n+   *\n+   * @param obj the object\n+   * @returns monitor information (owner, entry count, waiters)\n+   */\n+  public static native MonitorInfo getMonitorInfo(Object obj)\n+    throws JdwpException;\n+\n+  /**\n+   * Returns a list of owned monitors. VM must support the\n+   * canGetOwnedMonitorInfo capability.\n+   *\n+   * @param thread a thread\n+   * @returns the list of monitors owned by this thread\n+   */\n+  public static native Object[] getOwnedMonitors(Thread thread)\n+    throws JdwpException;\n+\n+  /**\n+   * Returns the current contended monitor for a thread. VM must\n+   * support canGetCurrentContendedMonitor capability.\n+   *\n+   * @param thread the thread\n+   * @returns the contended monitor\n+   */\n+  public static native Object getCurrentContendedMonitor(Thread thread)\n+    throws JdwpException;\n+\n+  /**\n+   * Pop all frames up to and including the given frame. VM must\n+   * support canPopFrames capability. It is the responsibility\n+   * of the VM to check if the thread is suspended. If it is not,\n+   * the VM should throw ThreadNotSuspendedException.\n+   *\n+   * @param thread the thread\n+   * @param frame the frame ID\n+   */\n+  public static native void popFrames(Thread thread, long frameId);\n }"}, {"sha": "4582dac596e289ce5bf1a22fe4a632550d43648c", "filename": "libjava/gnu/classpath/jdwp/exception/InvalidSlotException.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidSlotException.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,36 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_exception_InvalidSlotException__\n+#define __gnu_classpath_jdwp_exception_InvalidSlotException__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/exception/JdwpException.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace exception\n+        {\n+            class InvalidSlotException;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::exception::InvalidSlotException : public ::gnu::classpath::jdwp::exception::JdwpException\n+{\n+\n+public:\n+  InvalidSlotException(jint);\n+  InvalidSlotException(::java::lang::String *);\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_exception_InvalidSlotException__"}, {"sha": "f7f0f1e5955270b511398b5bdfa53a2040d7bc03", "filename": "libjava/gnu/classpath/jdwp/exception/InvalidTagException.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FInvalidTagException.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,35 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_exception_InvalidTagException__\n+#define __gnu_classpath_jdwp_exception_InvalidTagException__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/exception/JdwpException.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace exception\n+        {\n+            class InvalidTagException;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::exception::InvalidTagException : public ::gnu::classpath::jdwp::exception::JdwpException\n+{\n+\n+public:\n+  InvalidTagException(jbyte);\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_exception_InvalidTagException__"}, {"sha": "701bf6ebc7008c9c8084b39241ceec20e7966e5e", "filename": "libjava/gnu/classpath/jdwp/exception/TypeMismatchException.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fexception%2FTypeMismatchException.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,36 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_exception_TypeMismatchException__\n+#define __gnu_classpath_jdwp_exception_TypeMismatchException__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/exception/JdwpException.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace exception\n+        {\n+            class TypeMismatchException;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::exception::TypeMismatchException : public ::gnu::classpath::jdwp::exception::JdwpException\n+{\n+\n+public:\n+  TypeMismatchException(jbyte);\n+  TypeMismatchException(::java::lang::String *);\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_exception_TypeMismatchException__"}, {"sha": "6231783b54ebe748251bb9cea918870eb2071a11", "filename": "libjava/gnu/classpath/jdwp/id/NullObjectId.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FNullObjectId.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,36 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_id_NullObjectId__\n+#define __gnu_classpath_jdwp_id_NullObjectId__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/id/ObjectId.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace id\n+        {\n+            class NullObjectId;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::id::NullObjectId : public ::gnu::classpath::jdwp::id::ObjectId\n+{\n+\n+public:\n+  NullObjectId();\n+  static ::java::lang::Class * typeClass;\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_id_NullObjectId__"}, {"sha": "894791cfd5abee02367bbfed2e8e86804e0e45b9", "filename": "libjava/gnu/classpath/jdwp/natVMFrame.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMFrame.cc?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -12,17 +12,19 @@ details. */\n #include <jvm.h>\n \n #include <gnu/classpath/jdwp/VMFrame.h>\n+#include <gnu/classpath/jdwp/value/Value.h>\n \n using namespace java::lang;\n \n-Object*\n-gnu::classpath::jdwp::VMFrame::getValue (MAYBE_UNUSED jint slot)\n+gnu::classpath::jdwp::value::Value *\n+gnu::classpath::jdwp::VMFrame::getValue (MAYBE_UNUSED jint slot,\n+\t\t\t\t\t MAYBE_UNUSED jbyte tag)\n {\n   return 0;\n }\n \n void\n gnu::classpath::jdwp::VMFrame::setValue (MAYBE_UNUSED jint slot,\n-\t\t\t\t\t MAYBE_UNUSED Object* value)\n+\t\t\t\t\t MAYBE_UNUSED gnu::classpath::jdwp::value::Value *value)\n {\n }"}, {"sha": "73b21eedff1bbbc396238db438a69d65ea4fb5b5", "filename": "libjava/gnu/classpath/jdwp/natVMVirtualMachine.cc", "status": "modified", "additions": 66, "deletions": 10, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FnatVMVirtualMachine.cc?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -111,7 +111,13 @@ gnu::classpath::jdwp::VMVirtualMachine::initialize ()\n   _stepping_threads = new ::java::util::Hashtable ();\n \n   JavaVM *vm = _Jv_GetJavaVM ();\n-  vm->GetEnv (reinterpret_cast<void **> (&_jdwp_jvmtiEnv), JVMTI_VERSION_1_0);\n+  union\n+  {\n+    void *ptr;\n+    jvmtiEnv *env;\n+  } foo;\n+  vm->GetEnv (&(foo.ptr), JVMTI_VERSION_1_0);\n+  _jdwp_jvmtiEnv = foo.env;\n \n   // Wait for VM_INIT to do more initialization\n   jvmtiEventCallbacks callbacks;\n@@ -439,16 +445,11 @@ gnu::classpath::jdwp::VMVirtualMachine::clearEvents (MAYBE_UNUSED jbyte kind)\n {\n }\n \n-jint\n-gnu::classpath::jdwp::VMVirtualMachine::getAllLoadedClassesCount (void)\n-{\n-  return 0;\n-}\n-\n-java::util::Iterator *\n+java::util::Collection *\n gnu::classpath::jdwp::VMVirtualMachine::getAllLoadedClasses (void)\n {\n-  return NULL;\n+  using namespace ::java::util;\n+  return (Collection *) new ArrayList ();\n }\n \n jint\n@@ -629,7 +630,7 @@ java::util::ArrayList *\n gnu::classpath::jdwp::VMVirtualMachine::\n getLoadRequests (MAYBE_UNUSED ClassLoader *cl)\n {\n-  return NULL;\n+  return new ::java::util::ArrayList ();\n }\n \n MethodResult *\n@@ -649,6 +650,61 @@ getSourceFile (jclass clazz)\n   return _Jv_GetInterpClassSourceFile (clazz);\n }\n \n+void\n+gnu::classpath::jdwp::VMVirtualMachine::\n+redefineClasses (MAYBE_UNUSED JArray<jclass> *types,\n+\t\t MAYBE_UNUSED JArray<jbyteArray> *bytecodes)\n+{\n+}\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine::\n+setDefaultStratum (MAYBE_UNUSED jstring stratum)\n+{\n+}\n+\n+jstring\n+gnu::classpath::jdwp::VMVirtualMachine::\n+getSourceDebugExtension (MAYBE_UNUSED jclass klass)\n+{\n+  return NULL;\n+}\n+\n+jbyteArray\n+gnu::classpath::jdwp::VMVirtualMachine::\n+getBytecodes (MAYBE_UNUSED gnu::classpath::jdwp::VMMethod *method)\n+{\n+  return NULL;\n+}\n+\n+gnu::classpath::jdwp::util::MonitorInfo *\n+gnu::classpath::jdwp::VMVirtualMachine::\n+getMonitorInfo (MAYBE_UNUSED jobject obj)\n+{\n+  return NULL;\n+}\n+\n+jobjectArray\n+gnu::classpath::jdwp::VMVirtualMachine::\n+getOwnedMonitors (MAYBE_UNUSED ::java::lang::Thread *thread)\n+{\n+  return NULL;\n+}\n+\n+jobject\n+gnu::classpath::jdwp::VMVirtualMachine::\n+getCurrentContendedMonitor (MAYBE_UNUSED ::java::lang::Thread *thread)\n+{\n+  return NULL;\n+}\n+\n+void\n+gnu::classpath::jdwp::VMVirtualMachine::\n+popFrames (MAYBE_UNUSED ::java::lang::Thread *thread,\n+\t   MAYBE_UNUSED jlong frameId)\n+{\n+}\n+\n // A simple caching function used while single-stepping\n static jvmtiError\n get_linetable (jvmtiEnv *env, jmethodID method, jint *count_ptr,"}, {"sha": "3084467841741a1d7cfccd9d3bdf50100b162a9a", "filename": "libjava/gnu/classpath/jdwp/util/MethodResult.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMethodResult.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -33,9 +33,12 @@ class gnu::classpath::jdwp::util::MethodResult : public ::java::lang::Object\n   virtual void setReturnedValue(::java::lang::Object *);\n   virtual ::java::lang::Exception * getThrownException();\n   virtual void setThrownException(::java::lang::Exception *);\n+  virtual ::java::lang::Class * getResultType();\n+  virtual void setResultType(::java::lang::Class *);\n private:\n   ::java::lang::Object * __attribute__((aligned(__alignof__( ::java::lang::Object)))) returnedValue;\n   ::java::lang::Exception * thrownException;\n+  ::java::lang::Class * resType;\n public:\n   static ::java::lang::Class class$;\n };"}, {"sha": "8b7d65f03a0e8b55113b462fea59b47480da87b7", "filename": "libjava/gnu/classpath/jdwp/util/MonitorInfo.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FMonitorInfo.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,41 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_util_MonitorInfo__\n+#define __gnu_classpath_jdwp_util_MonitorInfo__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+#include <gcj/array.h>\n+\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace util\n+        {\n+            class MonitorInfo;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::util::MonitorInfo : public ::java::lang::Object\n+{\n+\n+public:\n+  MonitorInfo();\n+  virtual void write(::java::io::DataOutputStream *);\n+  jint __attribute__((aligned(__alignof__( ::java::lang::Object)))) entryCount;\n+  ::java::lang::Thread * owner;\n+  JArray< ::java::lang::Thread * > * waiters;\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_util_MonitorInfo__"}, {"sha": "c071e0a8868f904053532e7d867e7f39e5625442", "filename": "libjava/gnu/classpath/jdwp/util/NullObject.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Futil%2FNullObject.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,35 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_util_NullObject__\n+#define __gnu_classpath_jdwp_util_NullObject__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace util\n+        {\n+            class NullObject;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::util::NullObject : public ::java::lang::Object\n+{\n+\n+public:\n+  NullObject();\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_util_NullObject__"}, {"sha": "57fa16ca9bb3475ed6d62d58e20780df20bf7088", "filename": "libjava/gnu/classpath/jdwp/value/BooleanValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FBooleanValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_BooleanValue__\n+#define __gnu_classpath_jdwp_value_BooleanValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class BooleanValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::BooleanValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  BooleanValue(jboolean);\n+  jboolean getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jboolean __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_BooleanValue__"}, {"sha": "6fa45acd3fdd10de944bd4c8f47921c0faf7664f", "filename": "libjava/gnu/classpath/jdwp/value/ByteValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FByteValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_ByteValue__\n+#define __gnu_classpath_jdwp_value_ByteValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class ByteValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::ByteValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  ByteValue(jbyte);\n+  jbyte getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jbyte __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_ByteValue__"}, {"sha": "2f87f776acae0c31ad33415af5d1d1ff18156bae", "filename": "libjava/gnu/classpath/jdwp/value/CharValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FCharValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_CharValue__\n+#define __gnu_classpath_jdwp_value_CharValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class CharValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::CharValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  CharValue(jchar);\n+  jchar getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jchar __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_CharValue__"}, {"sha": "c68e68362577788e33f7a18c0db57722f0774a6a", "filename": "libjava/gnu/classpath/jdwp/value/DoubleValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FDoubleValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_DoubleValue__\n+#define __gnu_classpath_jdwp_value_DoubleValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class DoubleValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::DoubleValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  DoubleValue(jdouble);\n+  jdouble getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jdouble __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_DoubleValue__"}, {"sha": "d8917b9a51f8068cc65762cbaeaeef56f338b61b", "filename": "libjava/gnu/classpath/jdwp/value/FloatValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FFloatValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_FloatValue__\n+#define __gnu_classpath_jdwp_value_FloatValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class FloatValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::FloatValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  FloatValue(jfloat);\n+  jfloat getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jfloat __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_FloatValue__"}, {"sha": "0d09aff8dce5606435e3e1533a1bebb4cdb4859f", "filename": "libjava/gnu/classpath/jdwp/value/IntValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FIntValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_IntValue__\n+#define __gnu_classpath_jdwp_value_IntValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class IntValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::IntValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  IntValue(jint);\n+  jint getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jint __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_IntValue__"}, {"sha": "8416558e6490942b7f18d2e089ca89731babfe9e", "filename": "libjava/gnu/classpath/jdwp/value/LongValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FLongValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_LongValue__\n+#define __gnu_classpath_jdwp_value_LongValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class LongValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::LongValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  LongValue(jlong);\n+  jlong getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jlong __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_LongValue__"}, {"sha": "82829452694653b977dab342d09b42fb7b8f3048", "filename": "libjava/gnu/classpath/jdwp/value/ObjectValue.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FObjectValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,41 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_ObjectValue__\n+#define __gnu_classpath_jdwp_value_ObjectValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class ObjectValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::ObjectValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  ObjectValue(::java::lang::Object *);\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  ::java::lang::Object * __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_ObjectValue__"}, {"sha": "124d7818148bb81ad30e9bb59a1e542f9083e6d6", "filename": "libjava/gnu/classpath/jdwp/value/ShortValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FShortValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_ShortValue__\n+#define __gnu_classpath_jdwp_value_ShortValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class ShortValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::ShortValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  ShortValue(jshort);\n+  jshort getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  jshort __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_ShortValue__"}, {"sha": "dc8e52fd7b5a6925cab85a2af5e11b7806e5737e", "filename": "libjava/gnu/classpath/jdwp/value/StringValue.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FStringValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,42 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_StringValue__\n+#define __gnu_classpath_jdwp_value_StringValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class StringValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::StringValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  StringValue(::java::lang::String *);\n+  ::java::lang::String * getValue();\n+public: // actually protected\n+  ::java::lang::Object * getObject();\n+  void write(::java::io::DataOutputStream *);\n+public: // actually package-private\n+  ::java::lang::String * __attribute__((aligned(__alignof__( ::gnu::classpath::jdwp::value::Value)))) _value;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_StringValue__"}, {"sha": "8ab3d5465c24682e7da815df59f48e55e1ec1660", "filename": "libjava/gnu/classpath/jdwp/value/Value.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,55 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_Value__\n+#define __gnu_classpath_jdwp_value_Value__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class Value;\n+        }\n+      }\n+    }\n+  }\n+  namespace java\n+  {\n+    namespace nio\n+    {\n+        class ByteBuffer;\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::Value : public ::java::lang::Object\n+{\n+\n+public: // actually protected\n+  Value(jbyte);\n+public:\n+  virtual jbyte getTag();\n+  virtual void writeUntagged(::java::io::DataOutputStream *);\n+  virtual void writeTagged(::java::io::DataOutputStream *);\n+public: // actually protected\n+  virtual void write(::java::io::DataOutputStream *) = 0;\n+  virtual ::java::lang::Object * getObject() = 0;\n+public:\n+  static ::java::lang::Object * getUntaggedObject(::java::nio::ByteBuffer *, ::java::lang::Class *);\n+  static ::java::lang::Object * getTaggedObject(::java::nio::ByteBuffer *);\n+private:\n+  jbyte __attribute__((aligned(__alignof__( ::java::lang::Object)))) _tag;\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_Value__"}, {"sha": "316d5d0473c2806c20411faf2df0b9b64d8007c0", "filename": "libjava/gnu/classpath/jdwp/value/ValueFactory.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FValueFactory.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,50 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_ValueFactory__\n+#define __gnu_classpath_jdwp_value_ValueFactory__\n+\n+#pragma interface\n+\n+#include <java/lang/Object.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class Value;\n+            class ValueFactory;\n+        }\n+      }\n+    }\n+  }\n+  namespace java\n+  {\n+    namespace nio\n+    {\n+        class ByteBuffer;\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::ValueFactory : public ::java::lang::Object\n+{\n+\n+public:\n+  ValueFactory();\n+  static ::gnu::classpath::jdwp::value::Value * createFromTagged(::java::nio::ByteBuffer *);\n+  static ::gnu::classpath::jdwp::value::Value * createFromUntagged(::java::nio::ByteBuffer *, ::java::lang::Class *);\n+private:\n+  static ::gnu::classpath::jdwp::value::Value * create(::java::nio::ByteBuffer *, jbyte);\n+  static jbyte getTagForClass(::java::lang::Class *);\n+public:\n+  static ::gnu::classpath::jdwp::value::Value * createFromObject(::java::lang::Object *, ::java::lang::Class *);\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_ValueFactory__"}, {"sha": "48a7277541f5a7de5508c84180d43cb3ebfb7b00", "filename": "libjava/gnu/classpath/jdwp/value/VoidValue.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fvalue%2FVoidValue.h?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -0,0 +1,39 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_classpath_jdwp_value_VoidValue__\n+#define __gnu_classpath_jdwp_value_VoidValue__\n+\n+#pragma interface\n+\n+#include <gnu/classpath/jdwp/value/Value.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace classpath\n+    {\n+      namespace jdwp\n+      {\n+        namespace value\n+        {\n+            class VoidValue;\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::classpath::jdwp::value::VoidValue : public ::gnu::classpath::jdwp::value::Value\n+{\n+\n+public:\n+  VoidValue();\n+public: // actually protected\n+  virtual ::java::lang::Object * getObject();\n+  virtual void write(::java::io::DataOutputStream *);\n+public:\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_classpath_jdwp_value_VoidValue__"}, {"sha": "75272d7fcac62c0eefde2bce7e385159521ed878", "filename": "libjava/sources.am", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=fd6a66a10afd7a3c29da6609a10d9f0ad9f8de52", "patch": "@@ -336,14 +336,17 @@ classpath/gnu/classpath/jdwp/exception/InvalidFrameException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidLocationException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidMethodException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidObjectException.java \\\n+classpath/gnu/classpath/jdwp/exception/InvalidSlotException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidStringException.java \\\n+classpath/gnu/classpath/jdwp/exception/InvalidTagException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidThreadException.java \\\n classpath/gnu/classpath/jdwp/exception/InvalidThreadGroupException.java \\\n classpath/gnu/classpath/jdwp/exception/JdwpException.java \\\n classpath/gnu/classpath/jdwp/exception/JdwpIllegalArgumentException.java \\\n classpath/gnu/classpath/jdwp/exception/JdwpInternalErrorException.java \\\n classpath/gnu/classpath/jdwp/exception/NativeMethodException.java \\\n classpath/gnu/classpath/jdwp/exception/NotImplementedException.java \\\n+classpath/gnu/classpath/jdwp/exception/TypeMismatchException.java \\\n classpath/gnu/classpath/jdwp/exception/VmDeadException.java\n \n gnu_classpath_jdwp_exception_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_classpath_jdwp_exception_source_files)))\n@@ -363,6 +366,7 @@ classpath/gnu/classpath/jdwp/id/ClassObjectId.java \\\n classpath/gnu/classpath/jdwp/id/ClassReferenceTypeId.java \\\n classpath/gnu/classpath/jdwp/id/InterfaceReferenceTypeId.java \\\n classpath/gnu/classpath/jdwp/id/JdwpId.java \\\n+classpath/gnu/classpath/jdwp/id/NullObjectId.java \\\n classpath/gnu/classpath/jdwp/id/ObjectId.java \\\n classpath/gnu/classpath/jdwp/id/ReferenceTypeId.java \\\n classpath/gnu/classpath/jdwp/id/StringId.java \\\n@@ -431,6 +435,8 @@ classpath/gnu/classpath/jdwp/util/JdwpString.java \\\n classpath/gnu/classpath/jdwp/util/LineTable.java \\\n classpath/gnu/classpath/jdwp/util/Location.java \\\n classpath/gnu/classpath/jdwp/util/MethodResult.java \\\n+classpath/gnu/classpath/jdwp/util/MonitorInfo.java \\\n+classpath/gnu/classpath/jdwp/util/NullObject.java \\\n classpath/gnu/classpath/jdwp/util/Signature.java \\\n classpath/gnu/classpath/jdwp/util/Value.java \\\n classpath/gnu/classpath/jdwp/util/VariableTable.java\n@@ -444,6 +450,30 @@ gnu/classpath/jdwp/util.list: $(gnu_classpath_jdwp_util_source_files)\n -include gnu/classpath/jdwp/util.deps\n \n \n+gnu_classpath_jdwp_value_source_files = \\\n+classpath/gnu/classpath/jdwp/value/BooleanValue.java \\\n+classpath/gnu/classpath/jdwp/value/ByteValue.java \\\n+classpath/gnu/classpath/jdwp/value/CharValue.java \\\n+classpath/gnu/classpath/jdwp/value/DoubleValue.java \\\n+classpath/gnu/classpath/jdwp/value/FloatValue.java \\\n+classpath/gnu/classpath/jdwp/value/IntValue.java \\\n+classpath/gnu/classpath/jdwp/value/LongValue.java \\\n+classpath/gnu/classpath/jdwp/value/ObjectValue.java \\\n+classpath/gnu/classpath/jdwp/value/ShortValue.java \\\n+classpath/gnu/classpath/jdwp/value/StringValue.java \\\n+classpath/gnu/classpath/jdwp/value/Value.java \\\n+classpath/gnu/classpath/jdwp/value/ValueFactory.java \\\n+classpath/gnu/classpath/jdwp/value/VoidValue.java\n+\n+gnu_classpath_jdwp_value_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_classpath_jdwp_value_source_files)))\n+\n+gnu/classpath/jdwp/value.list: $(gnu_classpath_jdwp_value_source_files)\n+\t@$(mkinstalldirs) $(dir $@)\n+\techo $(srcdir)/classpath/lib/gnu/classpath/jdwp/value/*.class > gnu/classpath/jdwp/value.list\n+\n+-include gnu/classpath/jdwp/value.deps\n+\n+\n gnu_gcj_source_files = \\\n gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n@@ -8437,6 +8467,7 @@ all_packages_source_files = \\\n   gnu/classpath/jdwp/processor.list \\\n   gnu/classpath/jdwp/transport.list \\\n   gnu/classpath/jdwp/util.list \\\n+  gnu/classpath/jdwp/value.list \\\n   gnu/gcj.list \\\n   gnu/gcj/convert.list \\\n   gnu/gcj/io.list \\\n@@ -8686,6 +8717,7 @@ ordinary_header_files = \\\n   $(gnu_classpath_jdwp_processor_header_files) \\\n   $(gnu_classpath_jdwp_transport_header_files) \\\n   $(gnu_classpath_jdwp_util_header_files) \\\n+  $(gnu_classpath_jdwp_value_header_files) \\\n   $(gnu_gcj_header_files) \\\n   $(gnu_gcj_convert_header_files) \\\n   $(gnu_gcj_io_header_files) \\"}]}