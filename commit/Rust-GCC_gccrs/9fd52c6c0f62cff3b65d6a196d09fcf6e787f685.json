{"sha": "9fd52c6c0f62cff3b65d6a196d09fcf6e787f685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkNTJjNmMwZjYyY2ZmM2I2NWQ2YTE5NmQwOWZjZjZlNzg3ZjY4NQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2010-03-19T05:34:12Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2010-03-19T05:34:12Z"}, "message": "sparc.c: Include dwarf2out.h.\n\n\t* config/sparc/sparc.c: Include dwarf2out.h.\n\t(emit_pic_helper): Delete.\n\t(pic_helper_symbol_name): Delete.\n\t(pic_helper_emitted_p): Delete.\n\t(pic_helper_needed): New.\n\t(USE_HIDDEN_LINKONCE): Define to '1' if HAVE_GAS_HIDDEN else '0'.\n\t(get_pc_thunk_name): New.\n\t(load_pic_register): Remove 'delay_pic_helper' arg.  Use\n\tget_thunk_pc_name and ggc_strdup to generate PIC thunk symbol.\n\tSet pic_helper_needed to true.  Don't call emit_pic_helper.\n\t(sparc_expand_prologue): Update load_pic_register call.\n\t(sparc_output_mi_thunk): Likewise.\n\t(sparc_file_end): Emit a hidden comdat symbol for the PIC\n\tthunk if possible.  Output CFI information as needed.\n\nFrom-SVN: r157557", "tree": {"sha": "e502cd59f346d51a111c35208abed6a497b1e7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e502cd59f346d51a111c35208abed6a497b1e7c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fda79fea62e51f6acf40bcfda2e1fe50dc5fef1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda79fea62e51f6acf40bcfda2e1fe50dc5fef1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda79fea62e51f6acf40bcfda2e1fe50dc5fef1a"}], "stats": {"total": 132, "additions": 98, "deletions": 34}, "files": [{"sha": "45a4634bca8697e3f1a5a567b953d1736f2bcb00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fd52c6c0f62cff3b65d6a196d09fcf6e787f685", "patch": "@@ -1,3 +1,21 @@\n+2010-03-19  David S. Miller  <davem@davemloft.net>\n+\n+\tWith help from Eric Botcazou.\n+\t* config/sparc/sparc.c: Include dwarf2out.h.\n+\t(emit_pic_helper): Delete.\n+\t(pic_helper_symbol_name): Delete.\n+\t(pic_helper_emitted_p): Delete.\n+\t(pic_helper_needed): New.\n+\t(USE_HIDDEN_LINKONCE): Define to '1' if HAVE_GAS_HIDDEN else '0'.\n+\t(get_pc_thunk_name): New.\n+\t(load_pic_register): Remove 'delay_pic_helper' arg.  Use\n+\tget_thunk_pc_name and ggc_strdup to generate PIC thunk symbol.\n+\tSet pic_helper_needed to true.  Don't call emit_pic_helper.\n+\t(sparc_expand_prologue): Update load_pic_register call.\n+\t(sparc_output_mi_thunk): Likewise.\n+\t(sparc_file_end): Emit a hidden comdat symbol for the PIC\n+\tthunk if possible.  Output CFI information as needed.\n+\n 2010-03-11  Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n \t    Jack Howarth <howarth@bromo.med.uc.edu>\n "}, {"sha": "38711d3d72efc4e3f67abb1e0ddfb581cdc69b75", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 80, "deletions": 34, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fd52c6c0f62cff3b65d6a196d09fcf6e787f685/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9fd52c6c0f62cff3b65d6a196d09fcf6e787f685", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"params.h\"\n #include \"df.h\"\n+#include \"dwarf2out.h\"\n \n /* Processor costs */\n static const\n@@ -362,8 +363,7 @@ static rtx sparc_builtin_saveregs (void);\n static int epilogue_renumber (rtx *, int);\n static bool sparc_assemble_integer (rtx, unsigned int, int);\n static int set_extends (rtx);\n-static void emit_pic_helper (void);\n-static void load_pic_register (bool);\n+static void load_pic_register (void);\n static int save_or_restore_regs (int, int, rtx, int, int);\n static void emit_save_or_restore_regs (int);\n static void sparc_asm_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -2908,9 +2908,8 @@ sparc_cannot_force_const_mem (rtx x)\n }\n \f\n /* PIC support.  */\n-static GTY(()) char pic_helper_symbol_name[256];\n+static GTY(()) bool pic_helper_needed = false;\n static GTY(()) rtx pic_helper_symbol;\n-static GTY(()) bool pic_helper_emitted_p = false;\n static GTY(()) rtx global_offset_table;\n \n /* Ensure that we are not using patterns that are not OK with PIC.  */\n@@ -3521,34 +3520,31 @@ sparc_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   return x;\n }\n \n-/* Emit the special PIC helper function.  */\n+#ifdef HAVE_GAS_HIDDEN\n+# define USE_HIDDEN_LINKONCE 1\n+#else\n+# define USE_HIDDEN_LINKONCE 0\n+#endif\n \n static void\n-emit_pic_helper (void)\n+get_pc_thunk_name (char name[32], unsigned int regno)\n {\n-  const char *pic_name = reg_names[REGNO (pic_offset_table_rtx)];\n-  int align;\n+  const char *pic_name = reg_names[regno];\n \n-  switch_to_section (text_section);\n+  /* Skip the leading '%' as that cannot be used in a\n+     symbol name.  */\n+  pic_name += 1;\n \n-  align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n-  if (align > 0)\n-    ASM_OUTPUT_ALIGN (asm_out_file, align);\n-  ASM_OUTPUT_LABEL (asm_out_file, pic_helper_symbol_name);\n-  if (flag_delayed_branch)\n-    fprintf (asm_out_file, \"\\tjmp\\t%%o7+8\\n\\t add\\t%%o7, %s, %s\\n\",\n-\t    pic_name, pic_name);\n+  if (USE_HIDDEN_LINKONCE)\n+    sprintf (name, \"__sparc_get_pc_thunk.%s\", pic_name);\n   else\n-    fprintf (asm_out_file, \"\\tadd\\t%%o7, %s, %s\\n\\tjmp\\t%%o7+8\\n\\t nop\\n\",\n-\t    pic_name, pic_name);\n-\n-  pic_helper_emitted_p = true;\n+    ASM_GENERATE_INTERNAL_LABEL (name, \"LADDPC\", regno);\n }\n \n /* Emit code to load the PIC register.  */\n \n static void\n-load_pic_register (bool delay_pic_helper)\n+load_pic_register (void)\n {\n   int orig_flag_pic = flag_pic;\n \n@@ -3560,18 +3556,18 @@ load_pic_register (bool delay_pic_helper)\n     }\n \n   /* If we haven't initialized the special PIC symbols, do so now.  */\n-  if (!pic_helper_symbol_name[0])\n+  if (!pic_helper_needed)\n     {\n-      ASM_GENERATE_INTERNAL_LABEL (pic_helper_symbol_name, \"LADDPC\", 0);\n-      pic_helper_symbol = gen_rtx_SYMBOL_REF (Pmode, pic_helper_symbol_name);\n+      char name[32];\n+\n+      pic_helper_needed = true;\n+\n+      get_pc_thunk_name (name, REGNO (pic_offset_table_rtx));\n+      pic_helper_symbol = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n+\n       global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n     }\n \n-  /* If we haven't emitted the special PIC helper function, do so now unless\n-     we are requested to delay it.  */\n-  if (!delay_pic_helper && !pic_helper_emitted_p)\n-    emit_pic_helper ();\n-\n   flag_pic = 0;\n   if (TARGET_ARCH64)\n     emit_insn (gen_load_pcrel_symdi (pic_offset_table_rtx, global_offset_table,\n@@ -4221,7 +4217,7 @@ sparc_expand_prologue (void)\n \n   /* Load the PIC register if needed.  */\n   if (flag_pic && crtl->uses_pic_offset_table)\n-    load_pic_register (false);\n+    load_pic_register ();\n }\n \n /* This function generates the assembly code for function entry, which boils\n@@ -8882,7 +8878,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t  start_sequence ();\n \t  /* Delay emitting the PIC helper function because it needs to\n \t     change the section and we are emitting assembly code.  */\n-\t  load_pic_register (true);  /* clobbers %o7 */\n+\t  load_pic_register ();  /* clobbers %o7 */\n \t  scratch = legitimize_pic_address (funexp, scratch);\n \t  seq = get_insns ();\n \t  end_sequence ();\n@@ -9037,9 +9033,59 @@ sparc_output_dwarf_dtprel (FILE *file, int size, rtx x)\n static void\n sparc_file_end (void)\n {\n-  /* If we haven't emitted the special PIC helper function, do so now.  */\n-  if (pic_helper_symbol_name[0] && !pic_helper_emitted_p)\n-    emit_pic_helper ();\n+  /* If need to emit the special PIC helper function, do so now.  */\n+  if (pic_helper_needed)\n+    {\n+      unsigned int regno = REGNO (pic_offset_table_rtx);\n+      const char *pic_name = reg_names[regno];\n+      char name[32];\n+#ifdef DWARF2_UNWIND_INFO\n+      bool do_cfi;\n+#endif\n+\n+      get_pc_thunk_name (name, regno);\n+      if (USE_HIDDEN_LINKONCE)\n+\t{\n+\t  tree decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL,\n+\t\t\t\t  get_identifier (name),\n+\t\t\t\t  build_function_type (void_type_node,\n+\t\t\t\t\t\t       void_list_node));\n+\t  DECL_RESULT (decl) = build_decl (BUILTINS_LOCATION, RESULT_DECL,\n+\t\t\t\t\t   NULL_TREE, void_type_node);\n+\t  TREE_STATIC (decl) = 1;\n+\t  make_decl_one_only (decl, DECL_ASSEMBLER_NAME (decl));\n+\t  DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n+\t  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+\t  allocate_struct_function (decl, true);\n+\t  current_function_decl = decl;\n+\t  init_varasm_status ();\n+\t  assemble_start_function (decl, name);\n+\t}\n+      else\n+\t{\n+\t  const int align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+          switch_to_section (text_section);\n+\t  if (align > 0)\n+\t    ASM_OUTPUT_ALIGN (asm_out_file, align);\n+\t  ASM_OUTPUT_LABEL (asm_out_file, name);\n+\t}\n+\n+#ifdef DWARF2_UNWIND_INFO\n+      do_cfi = dwarf2out_do_cfi_asm ();\n+      if (do_cfi)\n+\tfprintf (asm_out_file, \"\\t.cfi_startproc\\n\");\n+#endif\n+      if (flag_delayed_branch)\n+\tfprintf (asm_out_file, \"\\tjmp\\t%%o7+8\\n\\t add\\t%%o7, %s, %s\\n\",\n+\t\t pic_name, pic_name);\n+      else\n+\tfprintf (asm_out_file, \"\\tadd\\t%%o7, %s, %s\\n\\tjmp\\t%%o7+8\\n\\t nop\\n\",\n+\t\t pic_name, pic_name);\n+#ifdef DWARF2_UNWIND_INFO\n+      if (do_cfi)\n+\tfprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n+#endif\n+    }\n \n   if (NEED_INDICATE_EXEC_STACK)\n     file_end_indicate_exec_stack ();"}]}