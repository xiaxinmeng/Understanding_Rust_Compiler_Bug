{"sha": "9f5361c8cac181dbc79b7302d7241a61e0ce2386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1MzYxYzhjYWMxODFkYmM3OWI3MzAyZDcyNDFhNjFlMGNlMjM4Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-06-20T08:57:17Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-06-20T08:57:17Z"}, "message": "[AArch64] Support for LDP/STP of Q-registers\n\nThis patch adds support for generating LDPs and STPs of Q-registers.\nThis allows for more compact code generation and makes better use of the ISA.\n\nIt's implemented in a straightforward way by allowing 16-byte modes in the\nsched-fusion machinery and adding appropriate peepholes in aarch64-ldpstp.md\nas well as the patterns themselves in aarch64-simd.md.\n\nIt adds a new no_ldp_stp_qregs tuning flag.\nI use it to restrict the peepholes in aarch64-ldpstp.md from merging the\noperations together into PARALLELs. I also use it to restrict the sched fusion\ncheck that brings such loads and stores together. This is enough to avoid\nforming the pairs when the tuning flag is set.\n\nI didn't see any non-noise performance effect on SPEC2017 on Cortex-A72 and Cortex-A53.\n\n        * config/aarch64/aarch64-tuning-flags.def (no_ldp_stp_qregs): New.\n        * config/aarch64/aarch64.c (xgene1_tunings): Add\n        AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS to tune_flags.\n        (aarch64_mode_valid_for_sched_fusion_p):\n        Allow 16-byte modes.\n        (aarch64_classify_address): Allow 16-byte modes for load_store_pair_p.\n        * config/aarch64/aarch64-ldpstp.md: Add peepholes for LDP STP of\n        128-bit modes.\n        * config/aarch64/aarch64-simd.md (load_pair<VQ:mode><VQ2:mode>):\n        New pattern.\n        (vec_store_pair<VQ:mode><VQ2:mode>): Likewise.\n        * config/aarch64/iterators.md (VQ2): New mode iterator.\n\n        * gcc.target/aarch64/ldp_stp_q.c: New test.\n        * gcc.target/aarch64/stp_vec_128_1.c: Likewise.\n        * gcc.target/aarch64/ldp_stp_q_disable.c: Likewise.\n\nFrom-SVN: r261796", "tree": {"sha": "199ba2d587d84ee6fc93df8134cce47cb4793499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/199ba2d587d84ee6fc93df8134cce47cb4793499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f5361c8cac181dbc79b7302d7241a61e0ce2386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5361c8cac181dbc79b7302d7241a61e0ce2386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5361c8cac181dbc79b7302d7241a61e0ce2386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5361c8cac181dbc79b7302d7241a61e0ce2386/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de840bde88a7719fa022f1de6f4e407bf5b4c8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de840bde88a7719fa022f1de6f4e407bf5b4c8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de840bde88a7719fa022f1de6f4e407bf5b4c8a8"}], "stats": {"total": 171, "additions": 167, "deletions": 4}, "files": [{"sha": "ae490155217d5a84018ca9887552458b435d5460", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -1,3 +1,18 @@\n+2018-06-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-tuning-flags.def (no_ldp_stp_qregs): New.\n+\t* config/aarch64/aarch64.c (xgene1_tunings): Add\n+\tAARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS to tune_flags.\n+\t(aarch64_mode_valid_for_sched_fusion_p):\n+\tAllow 16-byte modes.\n+\t(aarch64_classify_address): Allow 16-byte modes for load_store_pair_p.\n+\t* config/aarch64/aarch64-ldpstp.md: Add peepholes for LDP STP of\n+\t128-bit modes.\n+\t* config/aarch64/aarch64-simd.md (load_pair<VQ:mode><VQ2:mode>):\n+\tNew pattern.\n+\t(vec_store_pair<VQ:mode><VQ2:mode>): Likewise.\n+\t* config/aarch64/iterators.md (VQ2): New mode iterator.\n+\n 2018-06-20  Martin Liska  <mliska@suse.cz>\n \n \t* tree-switch-conversion.c (jump_table_cluster::can_be_handled):"}, {"sha": "650a80dcb2fed1c148a5bff83468fb2b768aa14a", "filename": "gcc/config/aarch64/aarch64-ldpstp.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-ldpstp.md?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -91,6 +91,37 @@\n   aarch64_swap_ldrstr_operands (operands, false);\n })\n \n+(define_peephole2\n+  [(set (match_operand:VQ 0 \"register_operand\" \"\")\n+\t(match_operand:VQ 1 \"memory_operand\" \"\"))\n+   (set (match_operand:VQ2 2 \"register_operand\" \"\")\n+\t(match_operand:VQ2 3 \"memory_operand\" \"\"))]\n+  \"TARGET_SIMD\n+   && aarch64_operands_ok_for_ldpstp (operands, true, <VQ:MODE>mode)\n+   && (aarch64_tune_params.extra_tuning_flags\n+\t& AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS) == 0\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (set (match_dup 2) (match_dup 3))])]\n+{\n+  aarch64_swap_ldrstr_operands (operands, true);\n+})\n+\n+(define_peephole2\n+  [(set (match_operand:VQ 0 \"memory_operand\" \"\")\n+\t(match_operand:VQ 1 \"register_operand\" \"\"))\n+   (set (match_operand:VQ2 2 \"memory_operand\" \"\")\n+\t(match_operand:VQ2 3 \"register_operand\" \"\"))]\n+  \"TARGET_SIMD\n+   && aarch64_operands_ok_for_ldpstp (operands, false, <VQ:MODE>mode)\n+   && (aarch64_tune_params.extra_tuning_flags\n+\t& AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS) == 0\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+\t      (set (match_dup 2) (match_dup 3))])]\n+{\n+  aarch64_swap_ldrstr_operands (operands, false);\n+})\n+\n+\n ;; Handle sign/zero extended consecutive load/store.\n \n (define_peephole2"}, {"sha": "aac5fa146ed8dde4507a0eb4ad6a07ce78d2f0cd", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -205,6 +205,34 @@\n   [(set_attr \"type\" \"neon_stp\")]\n )\n \n+(define_insn \"load_pair<VQ:mode><VQ2:mode>\"\n+  [(set (match_operand:VQ 0 \"register_operand\" \"=w\")\n+\t(match_operand:VQ 1 \"aarch64_mem_pair_operand\" \"Ump\"))\n+   (set (match_operand:VQ2 2 \"register_operand\" \"=w\")\n+\t(match_operand:VQ2 3 \"memory_operand\" \"m\"))]\n+  \"TARGET_SIMD\n+    && rtx_equal_p (XEXP (operands[3], 0),\n+\t\t    plus_constant (Pmode,\n+\t\t\t       XEXP (operands[1], 0),\n+\t\t\t       GET_MODE_SIZE (<VQ:MODE>mode)))\"\n+  \"ldp\\\\t%q0, %q2, %1\"\n+  [(set_attr \"type\" \"neon_ldp_q\")]\n+)\n+\n+(define_insn \"vec_store_pair<VQ:mode><VQ2:mode>\"\n+  [(set (match_operand:VQ 0 \"aarch64_mem_pair_operand\" \"=Ump\")\n+\t(match_operand:VQ 1 \"register_operand\" \"w\"))\n+   (set (match_operand:VQ2 2 \"memory_operand\" \"=m\")\n+\t(match_operand:VQ2 3 \"register_operand\" \"w\"))]\n+  \"TARGET_SIMD && rtx_equal_p (XEXP (operands[2], 0),\n+\t\tplus_constant (Pmode,\n+\t\t\t       XEXP (operands[0], 0),\n+\t\t\t       GET_MODE_SIZE (<VQ:MODE>mode)))\"\n+  \"stp\\\\t%q1, %q3, %0\"\n+  [(set_attr \"type\" \"neon_stp_q\")]\n+)\n+\n+\n (define_split\n   [(set (match_operand:VQ 0 \"register_operand\" \"\")\n       (match_operand:VQ 1 \"register_operand\" \"\"))]"}, {"sha": "fb9700ca42f4660e2d5e19c14866a9d784318dd5", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -41,4 +41,7 @@ AARCH64_EXTRA_TUNING_OPTION (\"slow_unaligned_ldpw\", SLOW_UNALIGNED_LDPW)\n    are not considered cheap.  */\n AARCH64_EXTRA_TUNING_OPTION (\"cheap_shift_extend\", CHEAP_SHIFT_EXTEND)\n \n+/* Disallow load/store pair instructions on Q-registers.  */\n+AARCH64_EXTRA_TUNING_OPTION (\"no_ldp_stp_qregs\", NO_LDP_STP_QREGS)\n+\n #undef AARCH64_EXTRA_TUNING_OPTION"}, {"sha": "b88e7cac27ab76e01b9769563ec9077d2a81bd7b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -880,7 +880,7 @@ static const struct tune_params xgene1_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS),\t/* tune_flags.  */\n   &generic_prefetch_tune\n };\n \n@@ -5690,7 +5690,10 @@ aarch64_mode_valid_for_sched_fusion_p (machine_mode mode)\n   return mode == SImode || mode == DImode\n \t || mode == SFmode || mode == DFmode\n \t || (aarch64_vector_mode_supported_p (mode)\n-\t     && known_eq (GET_MODE_SIZE (mode), 8));\n+\t     && (known_eq (GET_MODE_SIZE (mode), 8)\n+\t\t || (known_eq (GET_MODE_SIZE (mode), 16)\n+\t\t    && (aarch64_tune_params.extra_tuning_flags\n+\t\t\t& AARCH64_EXTRA_TUNE_NO_LDP_STP_QREGS) == 0)));\n }\n \n /* Return true if REGNO is a virtual pointer register, or an eliminable\n@@ -5847,7 +5850,8 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \n \t  if (load_store_pair_p)\n \t    return ((known_eq (GET_MODE_SIZE (mode), 4)\n-\t\t     || known_eq (GET_MODE_SIZE (mode), 8))\n+\t\t     || known_eq (GET_MODE_SIZE (mode), 8)\n+\t\t     || known_eq (GET_MODE_SIZE (mode), 16))\n \t\t    && aarch64_offset_7bit_signed_scaled_p (mode, offset));\n \t  else\n \t    return (offset_9bit_signed_unscaled_p (mode, offset)\n@@ -5907,7 +5911,8 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \n \t  if (load_store_pair_p)\n \t    return ((known_eq (GET_MODE_SIZE (mode), 4)\n-\t\t     || known_eq (GET_MODE_SIZE (mode), 8))\n+\t\t     || known_eq (GET_MODE_SIZE (mode), 8)\n+\t\t     || known_eq (GET_MODE_SIZE (mode), 16))\n \t\t    && aarch64_offset_7bit_signed_scaled_p (mode, offset));\n \t  else\n \t    return offset_9bit_signed_unscaled_p (mode, offset);"}, {"sha": "c5ef2eecf20c4167c071f1b964e45092222b147c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -84,6 +84,9 @@\n ;; Quad vector modes.\n (define_mode_iterator VQ [V16QI V8HI V4SI V2DI V8HF V4SF V2DF])\n \n+;; Copy of the above.\n+(define_mode_iterator VQ2 [V16QI V8HI V4SI V2DI V8HF V4SF V2DF])\n+\n ;; Quad integer vector modes.\n (define_mode_iterator VQ_I [V16QI V8HI V4SI V2DI])\n "}, {"sha": "a2c5eabd5a6efcaae2df3cd016eb8a1560c41ac5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -1,3 +1,9 @@\n+2018-06-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ldp_stp_q.c: New test.\n+\t* gcc.target/aarch64/stp_vec_128_1.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_q_disable.c: Likewise.\n+\n 2018-06-20  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-ssa/vrp104.c: Grep just for GIMPLE IL."}, {"sha": "b4f258699a30634f14d8a72405bddbbfd158db6e", "filename": "gcc/testsuite/gcc.target/aarch64/ldp_stp_q.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_q.c?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-options \"-O2 -moverride=tune=none\" } */\n+\n+typedef float float32x4_t __attribute__ ((__vector_size__ ((16))));\n+\n+float32x4_t arr[4][4];\n+\n+void\n+foo (float32x4_t x, float32x4_t y)\n+{\n+  arr[0][1] = x;\n+  arr[1][0] = y;\n+  arr[2][0] = x;\n+  arr[1][1] = y;\n+  arr[0][2] = x;\n+  arr[0][3] = y;\n+  arr[1][2] = x;\n+  arr[2][1] = y;\n+  arr[3][0] = x;\n+  arr[3][1] = y;\n+  arr[2][2] = x;\n+  arr[1][3] = y;\n+  arr[2][3] = x;\n+  arr[3][2] = y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"stp\\tq\\[0-9\\]+, q\\[0-9\\]\" 7 } } */"}, {"sha": "38c1870c47c69175e4b641532333bf7108351476", "filename": "gcc/testsuite/gcc.target/aarch64/ldp_stp_q_disable.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_q_disable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_q_disable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldp_stp_q_disable.c?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-options \"-O2 -moverride=tune=no_ldp_stp_qregs\" } */\n+\n+typedef float float32x4_t __attribute__ ((__vector_size__ ((16))));\n+\n+float32x4_t arr[4][4];\n+\n+void\n+foo (float32x4_t x, float32x4_t y)\n+{\n+  arr[0][1] = x;\n+  arr[1][0] = y;\n+  arr[2][0] = x;\n+  arr[1][1] = y;\n+  arr[0][2] = x;\n+  arr[0][3] = y;\n+  arr[1][2] = x;\n+  arr[2][1] = y;\n+  arr[3][0] = x;\n+  arr[3][1] = y;\n+  arr[2][2] = x;\n+  arr[1][3] = y;\n+  arr[2][3] = x;\n+  arr[3][2] = y;\n+}\n+\n+/* { dg-final { scan-assembler-not \"stp\\tq\\[0-9\\]+, q\\[0-9\\]\" } } */"}, {"sha": "7d8d54ebb8c7af6bcbde3e6ff9d3cb97ab293f1c", "filename": "gcc/testsuite/gcc.target/aarch64/stp_vec_128_1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_128_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f5361c8cac181dbc79b7302d7241a61e0ce2386/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_128_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstp_vec_128_1.c?ref=9f5361c8cac181dbc79b7302d7241a61e0ce2386", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -moverride=tune=none\" } */\n+\n+\n+typedef int int32x4_t __attribute__ ((__vector_size__ ((16))));\n+\n+void\n+bar (int32x4_t *foo)\n+{\n+  int i = 0;\n+  int32x4_t val = { 3, 2, 5, 1 };\n+\n+  for (i = 0; i < 256; i+=2)\n+    {\n+      foo[i] = val;\n+      foo[i+1] = val;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"stp\\tq\\[0-9\\]+, q\\[0-9\\]\" } } */"}]}