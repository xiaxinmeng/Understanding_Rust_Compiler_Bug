{"sha": "a708f4b67038ff12800a3874722374a66624e2a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwOGY0YjY3MDM4ZmYxMjgwMGEzODc0NzIyMzc0YTY2NjI0ZTJhMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-21T11:14:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-21T11:14:01Z"}, "message": "Make more use of simplify_gen_binary\n\nThis patch replaces various places that previously used:\n\n  if (GET_CODE (y) == CONST_INT)\n    ... plus_constant (..., x, [-]INTVAL (y)) ...\n  else\n    ... gen_rtx_PLUS/MINUS (..., x, y) ...\n\nwith single calls to simplify_gen_binary.  This allows\nthem to handle polynomial integers as well as constants.\n\n2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* calls.c (compute_argument_addresses): Use simplify_gen_binary\n\trather than choosing between plus_constant and gen_rtx_<CODE>.\n\t* expr.c (emit_push_insn): Likewise.\n\t(expand_expr_real_2): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253059", "tree": {"sha": "edc5c36cb2a56966dddefc63972cfbd2eefa465c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc5c36cb2a56966dddefc63972cfbd2eefa465c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a708f4b67038ff12800a3874722374a66624e2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a708f4b67038ff12800a3874722374a66624e2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a708f4b67038ff12800a3874722374a66624e2a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a708f4b67038ff12800a3874722374a66624e2a0/comments", "author": null, "committer": null, "parents": [{"sha": "6b1237e30840dac66ae8d16507581c948c76c52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1237e30840dac66ae8d16507581c948c76c52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1237e30840dac66ae8d16507581c948c76c52c"}], "stats": {"total": 41, "additions": 14, "deletions": 27}, "files": [{"sha": "8a534f65f8b45633c0167a54d6fdf42966736ab2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a708f4b67038ff12800a3874722374a66624e2a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a708f4b67038ff12800a3874722374a66624e2a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a708f4b67038ff12800a3874722374a66624e2a0", "patch": "@@ -1,3 +1,12 @@\n+2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* calls.c (compute_argument_addresses): Use simplify_gen_binary\n+\trather than choosing between plus_constant and gen_rtx_<CODE>.\n+\t* expr.c (emit_push_insn): Likewise.\n+\t(expand_expr_real_2): Likewise.\n+\n 2017-09-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "6bd025ed197a3af7db95c190518946582fdbc2c0", "filename": "gcc/calls.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a708f4b67038ff12800a3874722374a66624e2a0/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a708f4b67038ff12800a3874722374a66624e2a0/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=a708f4b67038ff12800a3874722374a66624e2a0", "patch": "@@ -2197,11 +2197,7 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t  if (POINTER_BOUNDS_P (args[i].tree_value))\n \t    continue;\n \n-\t  if (CONST_INT_P (offset))\n-\t    addr = plus_constant (Pmode, arg_reg, INTVAL (offset));\n-\t  else\n-\t    addr = gen_rtx_PLUS (Pmode, arg_reg, offset);\n-\n+\t  addr = simplify_gen_binary (PLUS, Pmode, arg_reg, offset);\n \t  addr = plus_constant (Pmode, addr, arg_offset);\n \n \t  if (args[i].partial != 0)\n@@ -2231,11 +2227,7 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t    }\n \t  set_mem_align (args[i].stack, align);\n \n-\t  if (CONST_INT_P (slot_offset))\n-\t    addr = plus_constant (Pmode, arg_reg, INTVAL (slot_offset));\n-\t  else\n-\t    addr = gen_rtx_PLUS (Pmode, arg_reg, slot_offset);\n-\n+\t  addr = simplify_gen_binary (PLUS, Pmode, arg_reg, slot_offset);\n \t  addr = plus_constant (Pmode, addr, arg_offset);\n \n \t  if (args[i].partial != 0)"}, {"sha": "2f8432d92ccac17c0a548faf4a16eff0656cef1b", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a708f4b67038ff12800a3874722374a66624e2a0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a708f4b67038ff12800a3874722374a66624e2a0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a708f4b67038ff12800a3874722374a66624e2a0", "patch": "@@ -4541,15 +4541,8 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n       else\n #endif\n \t{\n-\t  if (CONST_INT_P (args_so_far))\n-\t    addr\n-\t      = memory_address (mode,\n-\t\t\t\tplus_constant (Pmode, args_addr,\n-\t\t\t\t\t       INTVAL (args_so_far)));\n-\t  else\n-\t    addr = memory_address (mode, gen_rtx_PLUS (Pmode, args_addr,\n-\t\t\t\t\t\t       args_so_far));\n-\t  dest = gen_rtx_MEM (mode, addr);\n+\t  addr = simplify_gen_binary (PLUS, Pmode, args_addr, args_so_far);\n+\t  dest = gen_rtx_MEM (mode, memory_address (mode, addr));\n \n \t  /* We do *not* set_mem_attributes here, because incoming arguments\n \t     may overlap with sibling call outgoing arguments and we cannot\n@@ -8565,14 +8558,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t{\n \t  expand_operands (treeop0, treeop1,\n \t\t\t   NULL_RTX, &op0, &op1, modifier);\n-\n-\t  /* If the last operand is a CONST_INT, use plus_constant of\n-\t     the negated constant.  Else make the MINUS.  */\n-\t  if (CONST_INT_P (op1))\n-\t    return REDUCE_BIT_FIELD (plus_constant (mode, op0,\n-\t\t\t\t\t\t    -INTVAL (op1)));\n-\t  else\n-\t    return REDUCE_BIT_FIELD (gen_rtx_MINUS (mode, op0, op1));\n+\t  return simplify_gen_binary (MINUS, mode, op0, op1);\n \t}\n \n       /* No sense saving up arithmetic to be done"}]}