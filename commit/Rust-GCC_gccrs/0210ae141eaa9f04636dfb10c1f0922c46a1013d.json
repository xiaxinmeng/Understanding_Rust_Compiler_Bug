{"sha": "0210ae141eaa9f04636dfb10c1f0922c46a1013d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxMGFlMTQxZWFhOWYwNDYzNmRmYjEwYzFmMDkyMmM0NmExMDEzZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-01-07T09:04:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-01-07T09:04:01Z"}, "message": "re PR rtl-optimization/18861 (ICE Segmentation fault in try_crossjump_to_edge at ../../gcc/gcc/cfgcleanup.c:1637 with two switches (table jumps))\n\n\tPR rtl-optimization/18861\n\t* cfgbuild.c (BLOCK_USED_BY_TABLEJUMP): Define.\n\t(FULL_STATE): Define.\n\t(mark_tablejump_edge): New function.\n\t(purge_dead_tablejump_edges): New function.\n\t(find_bb_boundaries): Use it.\n\n\t* gcc.dg/20050105-1.c: New test.\n\nFrom-SVN: r93041", "tree": {"sha": "112f2adfdfdf127f8b17283fa4f93bb7dee66401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/112f2adfdfdf127f8b17283fa4f93bb7dee66401"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0210ae141eaa9f04636dfb10c1f0922c46a1013d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0210ae141eaa9f04636dfb10c1f0922c46a1013d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0210ae141eaa9f04636dfb10c1f0922c46a1013d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0210ae141eaa9f04636dfb10c1f0922c46a1013d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8870e2121de6b86e33178bfc4646aa10bbe7069b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8870e2121de6b86e33178bfc4646aa10bbe7069b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8870e2121de6b86e33178bfc4646aa10bbe7069b"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "244d03414da926662f6002e08b6fc34214aa7a88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0210ae141eaa9f04636dfb10c1f0922c46a1013d", "patch": "@@ -1,5 +1,12 @@\n 2005-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/18861\n+\t* cfgbuild.c (BLOCK_USED_BY_TABLEJUMP): Define.\n+\t(FULL_STATE): Define.\n+\t(mark_tablejump_edge): New function.\n+\t(purge_dead_tablejump_edges): New function.\n+\t(find_bb_boundaries): Use it.\n+\n \tPR tree-optimization/18828\n \t* builtins.c (expand_builtin_next_arg): Remove argument and all\n \tthe argument checking."}, {"sha": "a21c726e3c7dd2059540ec76cb511591e4b2acae", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=0210ae141eaa9f04636dfb10c1f0922c46a1013d", "patch": "@@ -559,14 +559,73 @@ enum state {BLOCK_NEW = 0, BLOCK_ORIGINAL, BLOCK_TO_SPLIT};\n #define STATE(BB) (enum state) ((size_t) (BB)->aux)\n #define SET_STATE(BB, STATE) ((BB)->aux = (void *) (size_t) (STATE))\n \n+/* Used internally by purge_dead_tablejump_edges, ORed into state.  */\n+#define BLOCK_USED_BY_TABLEJUMP\t\t32\n+#define FULL_STATE(BB) ((size_t) (BB)->aux)\n+\n+static void\n+mark_tablejump_edge (rtx label)\n+{\n+  basic_block bb;\n+\n+  gcc_assert (LABEL_P (label));\n+  /* See comment in make_label_edge.  */\n+  if (INSN_UID (label) == 0)\n+    return;\n+  bb = BLOCK_FOR_INSN (label);\n+  SET_STATE (bb, FULL_STATE (bb) | BLOCK_USED_BY_TABLEJUMP);\n+}\n+\n+static void\n+purge_dead_tablejump_edges (basic_block bb, rtx table)\n+{\n+  rtx insn = BB_END (bb), tmp;\n+  rtvec vec;\n+  int j;\n+  edge_iterator ei;\n+  edge e;\n+\n+  if (GET_CODE (PATTERN (table)) == ADDR_VEC)\n+    vec = XVEC (PATTERN (table), 0);\n+  else\n+    vec = XVEC (PATTERN (table), 1);\n+\n+  for (j = GET_NUM_ELEM (vec) - 1; j >= 0; --j)\n+    mark_tablejump_edge (XEXP (RTVEC_ELT (vec, j), 0));\n+\n+  /* Some targets (eg, ARM) emit a conditional jump that also\n+     contains the out-of-range target.  Scan for these and\n+     add an edge if necessary.  */\n+  if ((tmp = single_set (insn)) != NULL\n+       && SET_DEST (tmp) == pc_rtx\n+       && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n+       && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n+    mark_tablejump_edge (XEXP (XEXP (SET_SRC (tmp), 2), 0));\n+\n+  for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n+    {\n+      if (FULL_STATE (e->dest) & BLOCK_USED_BY_TABLEJUMP)\n+        SET_STATE (e->dest, FULL_STATE (e->dest)\n+                            & ~(size_t) BLOCK_USED_BY_TABLEJUMP);\n+      else if (!(e->flags & (EDGE_ABNORMAL | EDGE_EH)))\n+        {\n+          remove_edge (e);\n+          continue;\n+        }\n+      ei_next (&ei);\n+    }\n+}\n+\n /* Scan basic block BB for possible BB boundaries inside the block\n    and create new basic blocks in the progress.  */\n \n static void\n find_bb_boundaries (basic_block bb)\n {\n+  basic_block orig_bb = bb;\n   rtx insn = BB_HEAD (bb);\n   rtx end = BB_END (bb);\n+  rtx table;\n   rtx flow_transfer_insn = NULL_RTX;\n   edge fallthru = NULL;\n \n@@ -623,6 +682,11 @@ find_bb_boundaries (basic_block bb)\n      followed by cleanup at fallthru edge, so the outgoing edges may\n      be dead.  */\n   purge_dead_edges (bb);\n+\n+  /* purge_dead_edges doesn't handle tablejump's, but if we have split the\n+     basic block, we might need to kill some edges.  */\n+  if (bb != orig_bb && tablejump_p (BB_END (bb), NULL, &table))\n+    purge_dead_tablejump_edges (bb, table);\n }\n \n /*  Assume that frequency of basic block B is known.  Compute frequencies"}, {"sha": "fdfd6012c8a7e21ce9c569e80f5c6d5e48e4f96d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0210ae141eaa9f04636dfb10c1f0922c46a1013d", "patch": "@@ -1,5 +1,8 @@\n 2005-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/18861\n+\t* gcc.dg/20050105-1.c: New test.\n+\n \tPR tree-optimization/18828\n \t* gcc.dg/20050105-2.c: New test.\n "}, {"sha": "46a742ffe63ab938225ec43e5a45aed424ab95fa", "filename": "gcc/testsuite/gcc.dg/20050105-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2Ftestsuite%2Fgcc.dg%2F20050105-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0210ae141eaa9f04636dfb10c1f0922c46a1013d/gcc%2Ftestsuite%2Fgcc.dg%2F20050105-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050105-1.c?ref=0210ae141eaa9f04636dfb10c1f0922c46a1013d", "patch": "@@ -0,0 +1,31 @@\n+/* PR rtl-optimization/18861 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -floop-optimize2\" } */\n+\n+extern void abort (void);\n+\n+int\n+foo (int code)\n+{\n+  if (code >= 3)\n+    switch (code)\n+      {\n+      case 3: return 4;\n+      case 4: return 3;\n+      case 5: return 6;\n+      case 6: return 7;\n+      case 7: return 8;\n+      case 8: return 5;\n+      default: abort ();\n+      }\n+  switch (code)\n+    {\n+    case 3: return 4;\n+    case 4: return 3;\n+    case 5: return 6;\n+    case 6: return 7;\n+    case 7: return 8;\n+    case 8: return 5;\n+    default: abort ();\n+    }\n+}"}]}