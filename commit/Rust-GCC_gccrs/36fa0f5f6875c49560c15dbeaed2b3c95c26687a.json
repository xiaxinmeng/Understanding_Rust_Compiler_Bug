{"sha": "36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmYTBmNWY2ODc1YzQ5NTYwYzE1ZGJlYWVkMmIzYzk1YzI2Njg3YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-11-10T01:01:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-10T01:01:15Z"}, "message": "routine-1.c: New.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/routine-1.c: New.\n\t* c-c++-common/goacc/routine-2.c: New.\n\t* c-c++-common/goacc/routine-3.c: New.\n\t* c-c++-common/goacc/routine-4.c: New.\n\t* c-c++-common/goacc/routine-5.c: New.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-g-1.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: New.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c: New.\n\nFrom-SVN: r230080", "tree": {"sha": "54dec6e2c82e372cd019e386ed5f18367f2d8a1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54dec6e2c82e372cd019e386ed5f18367f2d8a1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/comments", "author": null, "committer": null, "parents": [{"sha": "fbae25c0084e592c1e97fc0c8cf1650772d8c93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbae25c0084e592c1e97fc0c8cf1650772d8c93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbae25c0084e592c1e97fc0c8cf1650772d8c93a"}], "stats": {"total": 580, "additions": 580, "deletions": 0}, "files": [{"sha": "0da08e4db41d162f2fafa8d4392f63b9a4bbb744", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -1,3 +1,11 @@\n+2015-11-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-c++-common/goacc/routine-1.c: New.\n+\t* c-c++-common/goacc/routine-2.c: New.\n+\t* c-c++-common/goacc/routine-3.c: New.\n+\t* c-c++-common/goacc/routine-4.c: New.\n+\t* c-c++-common/goacc/routine-5.c: New.\n+\n 2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/sparc-ret.c: Rename to..."}, {"sha": "a5e0d696f7c59c03281a722d6aecc7955d62c053", "filename": "gcc/testsuite/c-c++-common/goacc/routine-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,34 @@\n+\n+#pragma acc routine gang\n+void gang (void)\n+{\n+}\n+\n+#pragma acc routine worker\n+void worker (void)\n+{\n+}\n+\n+#pragma acc routine vector\n+void vector (void)\n+{\n+}\n+\n+#pragma acc routine seq\n+void seq (void)\n+{\n+}\n+\n+int main ()\n+{\n+\n+#pragma acc parallel num_gangs (32) num_workers (32) vector_length (32)\n+  {\n+    gang ();\n+    worker ();\n+    vector ();\n+    seq ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "fc5eb11bb54d0f03c96ce1bcd050f8ea3b9072cd", "filename": "gcc/testsuite/c-c++-common/goacc/routine-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,21 @@\n+#pragma acc routine gang worker /* { dg-error \"multiple loop axes\" } */\n+void gang (void)\n+{\n+}\n+\n+#pragma acc routine worker vector /* { dg-error \"multiple loop axes\" } */\n+void worker (void)\n+{\n+}\n+\n+#pragma acc routine vector seq /* { dg-error \"multiple loop axes\" } */\n+void vector (void)\n+{\n+}\n+\n+#pragma acc routine seq gang /* { dg-error \"multiple loop axes\" } */\n+void seq (void)\n+{\n+}\n+\n+#pragma acc routine (nothing) gang /* { dg-error \"not been declared\" } */"}, {"sha": "e6f83bd151a07ef1a93f269ab113f1063ce31e31", "filename": "gcc/testsuite/c-c++-common/goacc/routine-3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,53 @@\n+#pragma acc routine gang\n+void gang (void) /* { dg-message \"declared here\" 3 } */\n+{\n+}\n+\n+#pragma acc routine worker\n+void worker (void) /* { dg-message \"declared here\" 2 } */\n+{\n+}\n+\n+#pragma acc routine vector\n+void vector (void) /* { dg-message \"declared here\" 1 } */\n+{\n+}\n+\n+#pragma acc routine seq\n+void seq (void)\n+{\n+}\n+\n+int main ()\n+{\n+\n+#pragma acc parallel num_gangs (32) num_workers (32) vector_length (32)\n+  {\n+    #pragma acc loop gang /* { dg-message \"loop here\" 1 } */\n+    for (int i = 0; i < 10; i++)\n+      {\n+\tgang (); /*  { dg-error \"routine call uses same\" } */\n+\tworker ();\n+\tvector ();\n+\tseq ();\n+      }\n+    #pragma acc loop worker /* { dg-message \"loop here\" 2 } */\n+    for (int i = 0; i < 10; i++)\n+      {\n+\tgang (); /*  { dg-error \"routine call uses same\" } */\n+\tworker (); /*  { dg-error \"routine call uses same\" } */\n+\tvector ();\n+\tseq ();\n+      }\n+    #pragma acc loop vector /* { dg-message \"loop here\" 3 } */\n+    for (int i = 0; i < 10; i++)\n+      {\n+\tgang (); /*  { dg-error \"routine call uses same\" } */\n+\tworker (); /*  { dg-error \"routine call uses same\" } */\n+\tvector (); /*  { dg-error \"routine call uses same\" } */\n+\tseq ();\n+      }\n+  }\n+\n+  return 0;\n+}"}, {"sha": "004d7132bf6c05b5817ba953b1fe8843e8b2e3e2", "filename": "gcc/testsuite/c-c++-common/goacc/routine-4.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,41 @@\n+\n+void gang (void);\n+void worker (void);\n+void vector (void);\n+\n+#pragma acc routine (gang) gang\n+#pragma acc routine (worker) worker\n+#pragma acc routine (vector) vector\n+  \n+#pragma acc routine seq\n+void seq (void)\n+{\n+  gang ();  /* { dg-error \"routine call uses\" } */\n+  worker ();  /* { dg-error \"routine call uses\" } */\n+  vector ();  /* { dg-error \"routine call uses\" } */\n+  seq ();\n+}\n+\n+void vector (void) /* { dg-message \"declared here\" 1 } */\n+{\n+  gang ();  /* { dg-error \"routine call uses\" } */\n+  worker ();  /* { dg-error \"routine call uses\" } */\n+  vector ();\n+  seq ();\n+}\n+\n+void worker (void) /* { dg-message \"declared here\" 2 } */\n+{\n+  gang ();  /* { dg-error \"routine call uses\" } */\n+  worker ();\n+  vector ();\n+  seq ();\n+}\n+\n+void gang (void) /* { dg-message \"declared here\" 3 } */\n+{\n+  gang ();\n+  worker ();\n+  vector ();\n+  seq ();\n+}"}, {"sha": "c2a8fb2c342468fff75c2af5c84ab77a7457b7ff", "filename": "gcc/testsuite/c-c++-common/goacc/routine-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-5.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+\n+#pragma acc routine /* { dg-error \"not followed by\" } */\n+int a;\n+\n+#if 0 /* Disable for the moment.  */\n+#pragma acc routine /* dg-error \"not followed by\" */\n+void fn1 (void), fn1b (void);\n+#endif\n+\n+#pragma acc routine /* { dg-error \"not followed by\" } */\n+int b, fn2 (void);\n+\n+#if 0 /* Disable for the moment.  */\n+#pragma acc routine /*  dg-error \"not followed by\"  */\n+int fn3 (void), b2;\n+#endif\n+\n+#pragma acc routine /* { dg-error \"not followed by\" } */\n+typedef struct c c;\n+\n+#pragma acc routine /* { dg-error \"not followed by\" } */\n+struct d {} d;\n+\n+#pragma acc routine /* { dg-error \"not followed by\" } */\n+#pragma acc routine\n+int fn4 (void);\n+\n+int fn5a (void);\n+\n+#pragma acc routine /* { dg-error \"not followed by\" } */\n+#pragma acc routine (fn5a)\n+int fn5 (void);\n+\n+#ifdef __cplusplus\n+\n+#pragma acc routine /* { dg-error \"not followed by\" \"\" { target c++ } } */\n+namespace f {}\n+\n+namespace g {}\n+\n+#pragma acc routine /* { dg-error \"not followed by\" \"\" { target c++ } } */\n+using namespace g;\n+\n+#pragma acc routine (g) /* { dg-error \"does not refer to\" \"\" { target c++ } } */\n+\n+#endif\n+\n+#pragma acc routine (a) /* { dg-error \"does not refer to\" } */\n+  \n+#pragma acc routine (c) /* { dg-error \"does not refer to\" } */"}, {"sha": "08d467b10554fef51f0ddb270a086f225d7f0ed2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -1,3 +1,12 @@\n+2015-11-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-g-1.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-v-1.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: New.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c: New.\n+\n 2015-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: XFAIL."}, {"sha": "7f5d3d376177ba7b84bc3918e2e92c14d85fbbda", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+\n+#include  <openacc.h>\n+\n+int main ()\n+{\n+  int ok = 1;\n+  int val = 2;\n+  int ary[32];\n+  int ondev = 0;\n+\n+  for (int i = 0; i < 32; i++)\n+    ary[i] = ~0;\n+  \n+#pragma acc parallel num_gangs (32) copy (ok) firstprivate (val) copy(ary, ondev)\n+  {\n+    ondev = acc_on_device (acc_device_not_host);\n+#pragma acc loop gang(static:1)\n+    for (unsigned i = 0; i < 32; i++)\n+      {\n+\tif (val != 2)\n+\t  ok = 0;\n+\tval += i;\n+\tary[i] = val;\n+      }\n+  }\n+\n+  if (ondev)\n+    {\n+      if (!ok)\n+\treturn 1;\n+      if (val != 2)\n+\treturn 1;\n+\n+      for (int i = 0; i < 32; i++)\n+\tif (ary[i] != 2 + i)\n+\t  return 1;\n+    }\n+  \n+  return 0;\n+}"}, {"sha": "b1f238a7f188daa516168cacd0270975963923e3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-g-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O2\" */\n+\n+#include <stdio.h>\n+\n+#define N (32*32*32+17)\n+\n+#pragma acc routine gang\n+void __attribute__ ((noinline)) gang (int ary[N])\n+{\n+#pragma acc loop gang\n+    for (unsigned ix = 0; ix < N; ix++)\n+      {\n+\tif (__builtin_acc_on_device (5))\n+\t  {\n+\t    int g = 0, w = 0, v = 0;\n+\n+\t    __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n+\t    __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n+\t    __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t    ary[ix] = (g << 16) | (w << 8) | v;\n+\t  }\n+\telse\n+\t  ary[ix] = ix;\n+      }\n+}\n+\n+int main ()\n+{\n+  int ary[N];\n+  int ix;\n+  int exit = 0;\n+  int ondev = 0;\n+\n+  for (ix = 0; ix < N;ix++)\n+    ary[ix] = -1;\n+  \n+#pragma acc parallel num_gangs(32) vector_length(32) copy(ary) copy(ondev)\n+  {\n+    ondev = __builtin_acc_on_device (5);\n+    gang (ary);\n+  }\n+\n+  for (ix = 0; ix < N; ix++)\n+    {\n+      int expected = ix;\n+      if(ondev)\n+\t{\n+\t  int g = ix / ((N + 31) / 32);\n+\t  int w = 0;\n+\t  int v = 0;\n+\n+\t  expected = (g << 16) | (w << 8) | v;\n+\t}\n+      \n+      if (ary[ix] != expected)\n+\t{\n+\t  exit = 1;\n+\t  printf (\"ary[%d]=%x expected %x\\n\", ix, ary[ix], expected);\n+\t}\n+    }\n+  \n+  return exit;\n+}"}, {"sha": "5980747f137f854378c99abe18d7668686f6723a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-gwv-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-gwv-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O2\" */\n+\n+#include <stdio.h>\n+\n+#define N (32*32*32+17)\n+\n+#pragma acc routine gang\n+void __attribute__ ((noinline)) gang (int ary[N])\n+{\n+#pragma acc loop gang worker vector\n+  for (unsigned ix = 0; ix < N; ix++)\n+    {\n+      if (__builtin_acc_on_device (5))\n+\t{\n+\t  int g = 0, w = 0, v = 0;\n+\n+\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  ary[ix] = (g << 16) | (w << 8) | v;\n+\t}\n+      else\n+\tary[ix] = ix;\n+    }\n+}\n+\n+int main ()\n+{\n+  int ary[N];\n+  int ix;\n+  int exit = 0;\n+  int ondev = 0;\n+\n+  for (ix = 0; ix < N;ix++)\n+    ary[ix] = -1;\n+  \n+#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+  {\n+    ondev = __builtin_acc_on_device (5);\n+    gang (ary);\n+  }\n+\n+  for (ix = 0; ix < N; ix++)\n+    {\n+      int expected = ix;\n+      if(ondev)\n+\t{\n+\t  int chunk_size = (N + 32*32*32 - 1) / (32*32*32);\n+\t  \n+\t  int g = ix / (chunk_size * 32 * 32);\n+\t  int w = ix / 32 % 32;\n+\t  int v = ix % 32;\n+\n+\t  expected = (g << 16) | (w << 8) | v;\n+\t}\n+      \n+      if (ary[ix] != expected)\n+\t{\n+\t  exit = 1;\n+\t  printf (\"ary[%d]=%x expected %x\\n\", ix, ary[ix], expected);\n+\t}\n+    }\n+  \n+  return exit;\n+}"}, {"sha": "29e0f9017a51009ad9fa2156e1b65a99a07b5790", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-v-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-v-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O2\" */\n+\n+#include <stdio.h>\n+\n+#define N (32*32*32+17)\n+\n+#pragma acc routine vector\n+void __attribute__ ((noinline)) vector (int ary[N])\n+{\n+#pragma acc loop vector\n+  for (unsigned ix = 0; ix < N; ix++)\n+    {\n+      if (__builtin_acc_on_device (5))\n+\t{\n+\t  int g = 0, w = 0, v = 0;\n+\n+\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  ary[ix] = (g << 16) | (w << 8) | v;\n+\t}\n+      else\n+\tary[ix] = ix;\n+    }\n+}\n+\n+int main ()\n+{\n+  int ary[N];\n+  int ix;\n+  int exit = 0;\n+  int ondev = 0;\n+\n+  for (ix = 0; ix < N;ix++)\n+    ary[ix] = -1;\n+  \n+#pragma acc parallel vector_length(32) copy(ary) copy(ondev)\n+  {\n+    ondev = __builtin_acc_on_device (5);\n+    vector (ary);\n+  }\n+\n+  for (ix = 0; ix < N; ix++)\n+    {\n+      int expected = ix;\n+      if(ondev)\n+\t{\n+\t  int g = 0;\n+\t  int w = 0;\n+\t  int v = ix % 32;\n+\n+\t  expected = (g << 16) | (w << 8) | v;\n+\t}\n+      \n+      if (ary[ix] != expected)\n+\t{\n+\t  exit = 1;\n+\t  printf (\"ary[%d]=%x expected %x\\n\", ix, ary[ix], expected);\n+\t}\n+    }\n+  \n+  return exit;\n+}"}, {"sha": "95e717452c9e83a0d1f23632e974a3ccc727e695", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-w-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O2\" */\n+\n+#include <stdio.h>\n+\n+#define N (32*32*32+17)\n+\n+#pragma acc routine worker\n+void __attribute__ ((noinline)) worker (int ary[N])\n+{\n+#pragma acc loop worker\n+  for (unsigned ix = 0; ix < N; ix++)\n+    {\n+      if (__builtin_acc_on_device (5))\n+\t{\n+\t  int g = 0, w = 0, v = 0;\n+\n+\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  ary[ix] = (g << 16) | (w << 8) | v;\n+\t}\n+      else\n+\tary[ix] = ix;\n+    }\n+}\n+\n+int main ()\n+{\n+  int ary[N];\n+  int ix;\n+  int exit = 0;\n+  int ondev = 0;\n+\n+  for (ix = 0; ix < N;ix++)\n+    ary[ix] = -1;\n+  \n+#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+  {\n+    ondev = __builtin_acc_on_device (5);\n+    worker (ary);\n+  }\n+\n+  for (ix = 0; ix < N; ix++)\n+    {\n+      int expected = ix;\n+      if(ondev)\n+\t{\n+\t  int g = 0;\n+\t  int w = ix % 32;\n+\t  int v = 0;\n+\n+\t  expected = (g << 16) | (w << 8) | v;\n+\t}\n+      \n+      if (ary[ix] != expected)\n+\t{\n+\t  exit = 1;\n+\t  printf (\"ary[%d]=%x expected %x\\n\", ix, ary[ix], expected);\n+\t}\n+    }\n+  \n+  return exit;\n+}"}, {"sha": "3e8dcdeb3179b2cfdbe5a58a6c7e6c4edc2c6e38", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fa0f5f6875c49560c15dbeaed2b3c95c26687a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-1.c?ref=36fa0f5f6875c49560c15dbeaed2b3c95c26687a", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O2\" */\n+\n+#include <stdio.h>\n+\n+#define N (32*32*32+17)\n+\n+#pragma acc routine worker\n+void __attribute__ ((noinline)) worker (int ary[N])\n+{\n+#pragma acc loop worker vector\n+  for (unsigned ix = 0; ix < N; ix++)\n+    {\n+      if (__builtin_acc_on_device (5))\n+\t{\n+\t  int g = 0, w = 0, v = 0;\n+\n+\t  __asm__ volatile (\"mov.u32 %0,%%ctaid.x;\" : \"=r\" (g));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.y;\" : \"=r\" (w));\n+\t  __asm__ volatile (\"mov.u32 %0,%%tid.x;\" : \"=r\" (v));\n+\t  ary[ix] = (g << 16) | (w << 8) | v;\n+\t}\n+      else\n+\tary[ix] = ix;\n+    }\n+}\n+\n+int main ()\n+{\n+  int ary[N];\n+  int ix;\n+  int exit = 0;\n+  int ondev = 0;\n+\n+  for (ix = 0; ix < N;ix++)\n+    ary[ix] = -1;\n+  \n+#pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev)\n+  {\n+    ondev = __builtin_acc_on_device (5);\n+    worker (ary);\n+  }\n+\n+  for (ix = 0; ix < N; ix++)\n+    {\n+      int expected = ix;\n+      if(ondev)\n+\t{\n+\t  int g = 0;\n+\t  int w = (ix / 32) % 32;\n+\t  int v = ix % 32;\n+\n+\t  expected = (g << 16) | (w << 8) | v;\n+\t}\n+      \n+      if (ary[ix] != expected)\n+\t{\n+\t  exit = 1;\n+\t  printf (\"ary[%d]=%x expected %x\\n\", ix, ary[ix], expected);\n+\t}\n+    }\n+  \n+  return exit;\n+}"}]}