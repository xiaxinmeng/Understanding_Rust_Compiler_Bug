{"sha": "907d11194ed94c129cfd2c38c6acc2e3336d6949", "node_id": "C_kwDOANBUbNoAKDkwN2QxMTE5NGVkOTRjMTI5Y2ZkMmMzOGM2YWNjMmUzMzM2ZDY5NDk", "commit": {"author": {"name": "Jakub Dupak", "email": "dev@jakubdupak.com", "date": "2022-11-04T22:30:24Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:45Z"}, "message": "gccrs: ast: add visit overload for references\n\nThis is currently needed for lifetimes to use the existing infrastructure.\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Dump::visit): Add new reference visitor wrapper.\n\t* ast/rust-ast-dump.h: Declare it.\n\t* ast/rust-item.h: Add mutable visibility getters.\n\nSigned-off-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "681b5c75c11dd61b936ca65e9378c2140489ef3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681b5c75c11dd61b936ca65e9378c2140489ef3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907d11194ed94c129cfd2c38c6acc2e3336d6949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907d11194ed94c129cfd2c38c6acc2e3336d6949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907d11194ed94c129cfd2c38c6acc2e3336d6949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907d11194ed94c129cfd2c38c6acc2e3336d6949/comments", "author": {"login": "jdupak", "id": 22683640, "node_id": "MDQ6VXNlcjIyNjgzNjQw", "avatar_url": "https://avatars.githubusercontent.com/u/22683640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdupak", "html_url": "https://github.com/jdupak", "followers_url": "https://api.github.com/users/jdupak/followers", "following_url": "https://api.github.com/users/jdupak/following{/other_user}", "gists_url": "https://api.github.com/users/jdupak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdupak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdupak/subscriptions", "organizations_url": "https://api.github.com/users/jdupak/orgs", "repos_url": "https://api.github.com/users/jdupak/repos", "events_url": "https://api.github.com/users/jdupak/events{/privacy}", "received_events_url": "https://api.github.com/users/jdupak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f69a9b6abd398f6344135d8094cf8256c6279c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f69a9b6abd398f6344135d8094cf8256c6279c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f69a9b6abd398f6344135d8094cf8256c6279c"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "16c4a79dc6ea558f9ab4f2cd97aa07b2a73d3694", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907d11194ed94c129cfd2c38c6acc2e3336d6949/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907d11194ed94c129cfd2c38c6acc2e3336d6949/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=907d11194ed94c129cfd2c38c6acc2e3336d6949", "patch": "@@ -64,6 +64,13 @@ Dump::visit (std::unique_ptr<T> &node)\n   node->accept_vis (*this);\n }\n \n+template <typename T>\n+void\n+Dump::visit (T &node)\n+{\n+  node.accept_vis (*this);\n+}\n+\n template <typename T>\n void\n Dump::visit_items_joined_by_separator (T &collection,\n@@ -129,7 +136,7 @@ Dump::visit (FunctionParam &param)\n }\n \n void\n-Dump::visit (const Attribute &attrib)\n+Dump::visit (Attribute &attrib)\n {\n   stream << \"#[\";\n   visit_items_joined_by_separator (attrib.get_path ().get_segments (), \"::\");\n@@ -158,13 +165,13 @@ Dump::visit (const Attribute &attrib)\n }\n \n void\n-Dump::visit (const SimplePathSegment &segment)\n+Dump::visit (SimplePathSegment &segment)\n {\n   stream << segment.get_segment_name ();\n }\n \n void\n-Dump::visit (const Visibility &vis)\n+Dump::visit (Visibility &vis)\n {\n   switch (vis.get_vis_type ())\n     {\n@@ -1099,7 +1106,7 @@ Dump::visit (TraitItemType &item)\n void\n Dump::visit (Trait &trait)\n {\n-  for (const auto &attr : trait.get_outer_attrs ())\n+  for (auto &attr : trait.get_outer_attrs ())\n     {\n       visit (attr);\n       stream << \"\\n\" << indentation;"}, {"sha": "57419b753474625179084a4ddb8f891777136571", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907d11194ed94c129cfd2c38c6acc2e3336d6949/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907d11194ed94c129cfd2c38c6acc2e3336d6949/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=907d11194ed94c129cfd2c38c6acc2e3336d6949", "patch": "@@ -80,6 +80,11 @@ class Dump : public ASTVisitor\n    */\n   template <typename T> void visit (std::unique_ptr<T> &node);\n \n+  /**\n+   * @see visit<std::unique_ptr<T>>\n+   */\n+  template <typename T> void visit (T &node);\n+\n   /**\n    * Visit all items in given @collection, placing the separator in between but\n    * not at the end.\n@@ -122,12 +127,12 @@ class Dump : public ASTVisitor\n \t\t\t      std::unique_ptr<BlockExpr> &block);\n \n   void visit (FunctionParam &param);\n-  void visit (const Attribute &attrib);\n-  void visit (const Visibility &vis);\n+  void visit (Attribute &attrib);\n+  void visit (Visibility &vis);\n   void visit (std::vector<std::unique_ptr<GenericParam>> &params);\n   void visit (TupleField &field);\n   void visit (StructField &field);\n-  void visit (const SimplePathSegment &segment);\n+  void visit (SimplePathSegment &segment);\n   void visit (NamedFunctionParam &param);\n   void visit (MacroRule &rule);\n "}, {"sha": "4e237f2e21e9a2b6fb2cca02216495822b369073", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907d11194ed94c129cfd2c38c6acc2e3336d6949/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907d11194ed94c129cfd2c38c6acc2e3336d6949/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=907d11194ed94c129cfd2c38c6acc2e3336d6949", "patch": "@@ -908,6 +908,7 @@ class Method : public InherentImplItem, public TraitImplItem\n \n   FunctionQualifiers get_qualifiers () { return qualifiers; }\n \n+  Visibility &get_visibility () { return vis; }\n   const Visibility &get_visibility () const { return vis; }\n \n protected:\n@@ -1982,6 +1983,7 @@ struct StructField\n     return field_type;\n   }\n \n+  Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n   NodeId get_node_id () const { return node_id; }\n@@ -2116,6 +2118,7 @@ struct TupleField\n \n   NodeId get_node_id () const { return node_id; }\n \n+  Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n   Location get_locus () const { return locus; }\n@@ -4157,6 +4160,7 @@ class ExternalFunctionItem : public ExternalItem\n \n   Location get_locus () const { return locus; }\n \n+  Visibility &get_visibility () { return visibility; }\n   const Visibility &get_visibility () const { return visibility; }\n \n   ExternalFunctionItem ("}]}