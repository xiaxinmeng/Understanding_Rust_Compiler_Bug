{"sha": "638141a689dc8be1d5685200f578ee5a106119aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4MTQxYTY4OWRjOGJlMWQ1Njg1MjAwZjU3OGVlNWExMDYxMTlhYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-30T11:36:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-30T11:36:58Z"}, "message": "(assign_temp): Fix formatting.\n\nFrom-SVN: r10905", "tree": {"sha": "617fd14695432b5cdeddbdc36603bf58925fcea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/617fd14695432b5cdeddbdc36603bf58925fcea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638141a689dc8be1d5685200f578ee5a106119aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638141a689dc8be1d5685200f578ee5a106119aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638141a689dc8be1d5685200f578ee5a106119aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638141a689dc8be1d5685200f578ee5a106119aa/comments", "author": null, "committer": null, "parents": [{"sha": "4627dc07056968b73deac81b78931c6bc612746f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4627dc07056968b73deac81b78931c6bc612746f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4627dc07056968b73deac81b78931c6bc612746f"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "0c3aa7e07ad867a48e06deab11e75119c467dbb7", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638141a689dc8be1d5685200f578ee5a106119aa/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638141a689dc8be1d5685200f578ee5a106119aa/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=638141a689dc8be1d5685200f578ee5a106119aa", "patch": "@@ -918,7 +918,7 @@ assign_stack_temp (mode, size, keep)\n     }\n   return p->slot;\n }\n-\n+\f\n /* Assign a temporary of given TYPE.\n    KEEP is as for assign_stack_temp.\n    MEMORY_REQUIRED is 1 if the result must be addressable stack memory;\n@@ -931,6 +931,8 @@ assign_temp (type, keep, memory_required)\n      int memory_required;\n {\n   enum machine_mode mode = TYPE_MODE (type);\n+  int unsignedp = TREE_UNSIGNED (type);\n+\n   if (mode == BLKmode || memory_required)\n     {\n       int size = int_size_in_bytes (type);\n@@ -949,16 +951,17 @@ assign_temp (type, keep, memory_required)\n       MEM_IN_STRUCT_P (tmp) = AGGREGATE_TYPE_P (type);\n       return tmp;\n     }\n+\n   if (mode == VOIDmode)\n     return const0_rtx;\n+\n #ifndef PROMOTE_FOR_CALL_ONLY\n-  { int unsignedp = TREE_UNSIGNED (type);\n-    mode = promote_mode (type, mode, &unsignedp, 0);\n-  }\n+  mode = promote_mode (type, mode, &unsignedp, 0);\n #endif\n+\n   return gen_reg_rtx (mode);\n }\n-\n+\f\n /* Combine temporary stack slots which are adjacent on the stack.\n \n    This allows for better use of already allocated stack space.  This is only"}]}