{"sha": "abde42f7c757b26e71298e8cae90b0692bdd9fd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkZTQyZjdjNzU3YjI2ZTcxMjk4ZThjYWU5MGIwNjkyYmRkOWZkNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-08-17T13:50:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-08-17T13:50:15Z"}, "message": "Install the proper patch.\n\n\t* function.c (put_var_into_stack): Temporarily clear DECL_RTL.\n\t(assign_params): Avoid setting DECL_RTL to unfinished RTX.\n\t(expand_function_start): Likewise.\n\t* stmt.c (expand_decl): Likewise.\n\t* varasm.c (make_decl_rtx): Likewise.\n\nFrom-SVN: r44961", "tree": {"sha": "c1f73b83f17d5ed379df9f03a91168c269c58e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f73b83f17d5ed379df9f03a91168c269c58e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abde42f7c757b26e71298e8cae90b0692bdd9fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abde42f7c757b26e71298e8cae90b0692bdd9fd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abde42f7c757b26e71298e8cae90b0692bdd9fd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abde42f7c757b26e71298e8cae90b0692bdd9fd7/comments", "author": null, "committer": null, "parents": [{"sha": "3446405d5e9afd01c9afd6d6cc43803aa8c5890c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3446405d5e9afd01c9afd6d6cc43803aa8c5890c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3446405d5e9afd01c9afd6d6cc43803aa8c5890c"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "4929dd466e3c485b79f4caa1c3817df79ab862a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abde42f7c757b26e71298e8cae90b0692bdd9fd7", "patch": "@@ -1,3 +1,12 @@\n+Fri Aug 17 15:48:57 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\tInstall the proper patch.\n+\t* function.c (put_var_into_stack): Temporarily clear DECL_RTL.\n+\t(assign_params): Avoid setting DECL_RTL to unfinished RTX.\n+\t(expand_function_start): Likewise.\n+\t* stmt.c (expand_decl): Likewise.\n+\t* varasm.c (make_decl_rtx): Likewise.\n+\n Fri Aug 17 15:41:35 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* final.c: Undo my previous accidental checkin."}, {"sha": "0a6ed73b52e77236a1567979382e3c2d9e98795e", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=abde42f7c757b26e71298e8cae90b0692bdd9fd7", "patch": "@@ -1420,7 +1420,14 @@ put_var_into_stack (decl)\n \n       /* Change the CONCAT into a combined MEM for both parts.  */\n       PUT_CODE (reg, MEM);\n+\n+      /* set_mem_attributes uses DECL_RTL to avoid re-generating of\n+         already computed alias sets.  Here we want to re-generate.  */\n+      if (DECL_P (decl))\n+\tSET_DECL_RTL (decl, NULL);\n       set_mem_attributes (reg, decl, 1);\n+      if (DECL_P (decl))\n+\tSET_DECL_RTL (decl, reg);\n \n       /* The two parts are in memory order already.\n \t Use the lower parts address as ours.  */\n@@ -4688,10 +4695,10 @@ assign_parms (fndecl)\n \t     appropriately.  */\n \t  if (passed_pointer)\n \t    {\n-\t      SET_DECL_RTL (parm,\n-\t\t\t    gen_rtx_MEM (TYPE_MODE (TREE_TYPE (passed_type)), \n-\t\t\t\t\t parmreg));\n-\t      set_mem_attributes (DECL_RTL (parm), parm, 1);\n+\t      rtx x = gen_rtx_MEM (TYPE_MODE (TREE_TYPE (passed_type)),\n+\t\t\t     \t   parmreg);\n+\t      set_mem_attributes (x, parm, 1);\n+\t      SET_DECL_RTL (parm, x);\n \t    }\n \t  else\n \t    {\n@@ -5030,11 +5037,10 @@ assign_parms (fndecl)\n       if (parm == function_result_decl)\n \t{\n \t  tree result = DECL_RESULT (fndecl);\n+\t  rtx x = gen_rtx_MEM (DECL_MODE (result), DECL_RTL (parm));\n \n-\t  SET_DECL_RTL (result,\n-\t\t\tgen_rtx_MEM (DECL_MODE (result), DECL_RTL (parm)));\n-\n-\t  set_mem_attributes (DECL_RTL (result), result, 1);\n+\t  set_mem_attributes (x, result, 1);\n+\t  SET_DECL_RTL (result, x);\n \t}\n     }\n \n@@ -6451,11 +6457,9 @@ expand_function_start (subr, parms_have_cleanups)\n \t}\n       if (value_address)\n \t{\n-\t  SET_DECL_RTL (DECL_RESULT (subr),\n-\t\t\tgen_rtx_MEM (DECL_MODE (DECL_RESULT (subr)), \n-\t\t\t\t     value_address));\n-\t  set_mem_attributes (DECL_RTL (DECL_RESULT (subr)),\n-\t\t\t      DECL_RESULT (subr), 1);\n+\t  rtx x = gen_rtx_MEM (DECL_MODE (DECL_RESULT (subr)), value_address);\n+\t  set_mem_attributes (x, DECL_RESULT (subr), 1);\n+\t  SET_DECL_RTL (DECL_RESULT (subr), x);\n \t}\n     }\n   else if (DECL_MODE (DECL_RESULT (subr)) == VOIDmode)"}, {"sha": "357583d004f690763dd8bce7c010ef1d1ee5c351", "filename": "gcc/stmt.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=abde42f7c757b26e71298e8cae90b0692bdd9fd7", "patch": "@@ -3810,15 +3810,17 @@ expand_decl (decl)\n   else if (DECL_SIZE (decl) == 0)\n     /* Variable with incomplete type.  */\n     {\n+      rtx x;\n       if (DECL_INITIAL (decl) == 0)\n \t/* Error message was already done; now avoid a crash.  */\n-\tSET_DECL_RTL (decl, gen_rtx_MEM (BLKmode, const0_rtx));\n+\tx = gen_rtx_MEM (BLKmode, const0_rtx);\n       else\n \t/* An initializer is going to decide the size of this array.\n \t   Until we know the size, represent its address with a reg.  */\n-\tSET_DECL_RTL (decl, gen_rtx_MEM (BLKmode, gen_reg_rtx (Pmode)));\n+\tx = gen_rtx_MEM (BLKmode, gen_reg_rtx (Pmode));\n \n-      set_mem_attributes (DECL_RTL (decl), decl, 1);\n+      set_mem_attributes (x, decl, 1);\n+      SET_DECL_RTL (decl, x);\n     }\n   else if (DECL_MODE (decl) != BLKmode\n \t   /* If -ffloat-store, don't put explicit float vars\n@@ -3888,7 +3890,7 @@ expand_decl (decl)\n   else\n     /* Dynamic-size object: must push space on the stack.  */\n     {\n-      rtx address, size;\n+      rtx address, size, x;\n \n       /* Record the stack pointer on entry to block, if have\n \t not already done so.  */\n@@ -3913,9 +3915,10 @@ expand_decl (decl)\n \t\t\t\t\t      TYPE_ALIGN (TREE_TYPE (decl)));\n \n       /* Reference the variable indirect through that rtx.  */\n-      SET_DECL_RTL (decl, gen_rtx_MEM (DECL_MODE (decl), address));\n+      x = gen_rtx_MEM (DECL_MODE (decl), address);\n+      set_mem_attributes (x, decl, 1);\n+      SET_DECL_RTL (decl, x);\n \n-      set_mem_attributes (DECL_RTL (decl), decl, 1);\n \n       /* Indicate the alignment we actually gave this variable.  */\n #ifdef STACK_BOUNDARY"}, {"sha": "6cb2fb8ddfb6f5ab5082726a97178b95a3ece1aa", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abde42f7c757b26e71298e8cae90b0692bdd9fd7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=abde42f7c757b26e71298e8cae90b0692bdd9fd7", "patch": "@@ -681,6 +681,7 @@ make_decl_rtl (decl, asmspec)\n   const char *name = 0;\n   const char *new_name = 0;\n   int reg_number;\n+  rtx x;\n \n   /* Check that we are not being given an automatic variable.  */\n   /* A weak alias has TREE_PUBLIC set but not the other bits.  */\n@@ -848,11 +849,11 @@ make_decl_rtl (decl, asmspec)\n \t   && (TREE_PUBLIC (decl) || TREE_STATIC (decl)))))\n     TREE_SIDE_EFFECTS (decl) = 1;\n \n-  SET_DECL_RTL (decl, gen_rtx_MEM (DECL_MODE (decl),\n-\t\t\t\t   gen_rtx_SYMBOL_REF (Pmode, name)));\n-  SYMBOL_REF_WEAK (XEXP (DECL_RTL (decl), 0)) = DECL_WEAK (decl);\n+  x = gen_rtx_MEM (DECL_MODE (decl), gen_rtx_SYMBOL_REF (Pmode, name));\n+  SYMBOL_REF_WEAK (XEXP (x, 0)) = DECL_WEAK (decl);\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n-    set_mem_attributes (DECL_RTL (decl), decl, 1);\n+    set_mem_attributes (x, decl, 1);\n+  SET_DECL_RTL (decl, x);\n \n   /* Optionally set flags or add text to the name to record information\n      such as that it is a function name."}]}