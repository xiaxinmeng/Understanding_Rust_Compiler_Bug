{"sha": "c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmOWFmZDFkM2ZiZjUwMzBiYzZmOGZmMWJkYzgxZWJmNmM5YmMyMA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-10-05T19:38:27Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-10-05T19:38:27Z"}, "message": "m68hc11.h (CLASS_LIKELY_SPILLED_P): Remove.\n\n\t* config/m68hc11/m68hc11.h (CLASS_LIKELY_SPILLED_P): Remove.\n\t* config/m68hc11/m68hc11.c (TARGET_CLASS_LIKELY_SPILLED_P): Define.\n\t(m68hc11_class_likely_spilled_p): New function.\n\nFrom-SVN: r165000", "tree": {"sha": "f7f5aab59147443bd38a91a80e1495756a1c078d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7f5aab59147443bd38a91a80e1495756a1c078d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/comments", "author": null, "committer": null, "parents": [{"sha": "a26d8862530306e79ae1c57f3962b60dc5eaddd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a26d8862530306e79ae1c57f3962b60dc5eaddd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a26d8862530306e79ae1c57f3962b60dc5eaddd9"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "64bf07f2caeb5e45e0a1a863a199bc6822c1072a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "patch": "@@ -1,3 +1,9 @@\n+2010-10-05  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/m68hc11/m68hc11.h (CLASS_LIKELY_SPILLED_P): Remove.\n+\t* config/m68hc11/m68hc11.c (TARGET_CLASS_LIKELY_SPILLED_P): Define.\n+\t(m68hc11_class_likely_spilled_p): New function.\n+\n 2010-10-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-parser.c (c_parser_objc_method_definition): Updated comment."}, {"sha": "bf9c26cbbefcf2d96267dc862d67f8c9603f477f", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "patch": "@@ -76,6 +76,7 @@ static int m68hc11_rtx_costs_1 (rtx, enum rtx_code, enum rtx_code);\n static bool m68hc11_rtx_costs (rtx, int, int, int *, bool);\n static tree m68hc11_handle_fntype_attribute (tree *, tree, tree, int, bool *);\n static tree m68hc11_handle_page0_attribute (tree *, tree, tree, int, bool *);\n+static bool m68hc11_class_likely_spilled_p (reg_class_t);\n \n void create_regs_rtx (void);\n \n@@ -291,6 +292,9 @@ static const struct attribute_spec m68hc11_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m68hc11_can_eliminate\n \n+#undef TARGET_CLASS_LIKELY_SPILLED_P\n+#define TARGET_CLASS_LIKELY_SPILLED_P m68hc11_class_likely_spilled_p\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT m68hc11_trampoline_init\n \n@@ -581,6 +585,32 @@ preferred_reload_class (rtx operand, enum reg_class rclass)\n   return rclass;\n }\n \n+/* Implement TARGET_CLASS_LIKELY_SPILLED_P.  */\n+\n+static bool\n+m68hc11_class_likely_spilled_p (reg_class_t rclass)\n+{\n+  switch (rclass)\n+    {\n+    case D_REGS:\n+    case X_REGS:\n+    case Y_REGS:\n+    case A_REGS:\n+    case SP_REGS:\n+    case D_OR_X_REGS:\n+    case D_OR_Y_REGS:\n+    case X_OR_SP_REGS:\n+    case Y_OR_SP_REGS:\n+    case D_OR_SP_REGS:\n+      return true;\n+\n+    default:\n+      break;\n+    }\n+\n+  return false;\n+}\n+\n /* Return 1 if the operand is a valid indexed addressing mode.\n    For 68hc11:  n,r    with n in [0..255] and r in A_REGS class\n    For 68hc12:  n,r    no constraint on the constant, r in A_REGS class.  */"}, {"sha": "9e45cb51496951754a10d002458941c176db86c9", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=c1f9afd1d3fbf5030bc6f8ff1bdc81ebf6c9bc20", "patch": "@@ -704,34 +704,6 @@ extern enum reg_class m68hc11_tmp_regs_class;\n #define HARD_REGNO_RENAME_OK(REGNO1,REGNO2) \\\n   m68hc11_hard_regno_rename_ok ((REGNO1), (REGNO2))\n \n-/* A C expression whose value is nonzero if pseudos that have been\n-   assigned to registers of class CLASS would likely be spilled\n-   because registers of CLASS are needed for spill registers.\n-\n-   The default value of this macro returns 1 if CLASS has exactly one\n-   register and zero otherwise.  On most machines, this default\n-   should be used.  Only define this macro to some other expression\n-   if pseudo allocated by `local-alloc.c' end up in memory because\n-   their hard registers were needed for spill registers.  If this\n-   macro returns nonzero for those classes, those pseudos will only\n-   be allocated by `global.c', which knows how to reallocate the\n-   pseudo to another register.  If there would not be another\n-   register available for reallocation, you should not change the\n-   definition of this macro since the only effect of such a\n-   definition would be to slow down register allocation.  */\n-\n-#define CLASS_LIKELY_SPILLED_P(CLASS)\t\t\t\t\t\\\n-  (((CLASS) == D_REGS)\t\t\t\t\t\t\t\\\n-   || ((CLASS) == X_REGS)                                               \\\n-   || ((CLASS) == Y_REGS)                                               \\\n-   || ((CLASS) == A_REGS)                                               \\\n-   || ((CLASS) == SP_REGS)                                              \\\n-   || ((CLASS) == D_OR_X_REGS)                                          \\\n-   || ((CLASS) == D_OR_Y_REGS)                                          \\\n-   || ((CLASS) == X_OR_SP_REGS)                                         \\\n-   || ((CLASS) == Y_OR_SP_REGS)                                         \\\n-   || ((CLASS) == D_OR_SP_REGS))\n-\n /* Return the maximum number of consecutive registers needed to represent\n    mode MODE in a register of class CLASS.  */\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\\"}]}