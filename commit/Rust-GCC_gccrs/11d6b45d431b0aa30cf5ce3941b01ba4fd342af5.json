{"sha": "11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkNmI0NWQ0MzFiMGFhMzBjZjVjZTM5NDFiMDFiYTRmZDM0MmFmNQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-05-25T08:45:48Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-05-25T08:45:48Z"}, "message": "Allow some NOP conversions in (X+CST1)+CST2 in match.pd\n\n2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd ((A +- CST1) +- CST2): Allow some conversions.\n\t* tree.c (drop_tree_overflow): Handle COMPLEX_CST and VECTOR_CST.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/addadd.c: New file.\n\nFrom-SVN: r248448", "tree": {"sha": "30846871027092d0e1d084d5e2b5812c8c5e3518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30846871027092d0e1d084d5e2b5812c8c5e3518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10bc8017a3028c291e7b85486bc66bfc12b5f377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bc8017a3028c291e7b85486bc66bfc12b5f377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bc8017a3028c291e7b85486bc66bfc12b5f377"}], "stats": {"total": 102, "additions": 94, "deletions": 8}, "files": [{"sha": "cf75376b851b9cb78e63aca55ffe16a41a248905", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "patch": "@@ -1,3 +1,8 @@\n+2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd ((A +- CST1) +- CST2): Allow some conversions.\n+\t* tree.c (drop_tree_overflow): Handle COMPLEX_CST and VECTOR_CST.\n+\n 2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* fold-const.c (fold_binary_loc) [(A & C) == D]: Remove transformation."}, {"sha": "77271a016198a58fc5411f2e056207166d96a92b", "filename": "gcc/match.pd", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "patch": "@@ -1299,15 +1299,39 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   /* (A +- CST1) +- CST2 -> A + CST3  */\n   (for outer_op (plus minus)\n    (for inner_op (plus minus)\n+\tneg_inner_op (minus plus)\n     (simplify\n-     (outer_op (inner_op @0 CONSTANT_CLASS_P@1) CONSTANT_CLASS_P@2)\n-     /* If the constant operation overflows we cannot do the transform\n-\tas we would introduce undefined overflow, for example\n-\twith (a - 1) + INT_MIN.  */\n-     (with { tree cst = const_binop (outer_op == inner_op\n-\t\t\t\t     ? PLUS_EXPR : MINUS_EXPR, type, @1, @2); }\n-      (if (cst && !TREE_OVERFLOW (cst))\n-       (inner_op @0 { cst; } ))))))\n+     (outer_op (convert? (inner_op @0 CONSTANT_CLASS_P@1)) CONSTANT_CLASS_P@2)\n+     (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+      /* If one of the types wraps, use that one.  */\n+      (if (!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n+       (if (outer_op == PLUS_EXPR)\n+\t(plus (convert @0) (inner_op @2 (convert @1)))\n+\t(minus (convert @0) (neg_inner_op @2 (convert @1))))\n+       (if (!ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t    || TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0)))\n+\t(if (outer_op == PLUS_EXPR)\n+\t (convert (plus @0 (inner_op (convert @2) @1)))\n+\t (convert (minus @0 (neg_inner_op (convert @2) @1))))\n+\t/* If the constant operation overflows we cannot do the transform\n+\t   directly as we would introduce undefined overflow, for example\n+\t   with (a - 1) + INT_MIN.  */\n+\t(if (types_match (type, @0))\n+\t (with { tree cst = const_binop (outer_op == inner_op\n+\t\t\t\t\t ? PLUS_EXPR : MINUS_EXPR,\n+\t\t\t\t\t type, @1, @2); }\n+\t  (if (cst && !TREE_OVERFLOW (cst))\n+\t   (inner_op @0 { cst; } )\n+\t   /* X+INT_MAX+1 is X-INT_MIN.  */\n+\t   (if (INTEGRAL_TYPE_P (type) && cst\n+\t\t&& wi::eq_p (cst, wi::min_value (type)))\n+\t    (neg_inner_op @0 { wide_int_to_tree (type, cst); })\n+\t    /* Last resort, use some unsigned type.  */\n+\t    (with { tree utype = unsigned_type_for (type); }\n+\t     (convert (inner_op\n+\t\t       (convert:utype @0)\n+\t\t       (convert:utype\n+\t\t\t{ drop_tree_overflow (cst); }))))))))))))))\n \n   /* (CST1 - A) +- CST2 -> CST3 - A  */\n   (for outer_op (plus minus)"}, {"sha": "efe1dcb14f84ebd531ebdd81718a1d22358887a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "patch": "@@ -1,3 +1,7 @@\n+2017-05-25  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/addadd.c: New file.\n+\n 2017-05-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/lookup/friend12.C: Adjust diagnostics."}, {"sha": "16474db65658a5e3e88b141b24f991c80936a9e9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/addadd.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c?ref=11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(unsigned x){\n+  x += 123;\n+  int y = x;\n+  y -= 99;\n+  return y;\n+}\n+unsigned g(int x){\n+  x += 123;\n+  unsigned y = x;\n+  y -= 99;\n+  return y;\n+}\n+int h(int x){\n+  x += __INT_MAX__;\n+  x += 1;\n+  return x;\n+}\n+int i(int x){\n+  x += __INT_MAX__;\n+  x += __INT_MAX__;\n+  return x;\n+}\n+typedef int S __attribute__((vector_size(16)));\n+void j(S*x){\n+  *x += __INT_MAX__;\n+  *x += __INT_MAX__;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"2147483647\" \"optimized\" } } */"}, {"sha": "a58f9aaa69ec4b0b5ad22d92a41935ceae36b1c4", "filename": "gcc/tree.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6b45d431b0aa30cf5ce3941b01ba4fd342af5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=11d6b45d431b0aa30cf5ce3941b01ba4fd342af5", "patch": "@@ -13138,6 +13138,25 @@ drop_tree_overflow (tree t)\n      and drop the flag.  */\n   t = copy_node (t);\n   TREE_OVERFLOW (t) = 0;\n+\n+  /* For constants that contain nested constants, drop the flag\n+     from those as well.  */\n+  if (TREE_CODE (t) == COMPLEX_CST)\n+    {\n+      if (TREE_OVERFLOW (TREE_REALPART (t)))\n+\tTREE_REALPART (t) = drop_tree_overflow (TREE_REALPART (t));\n+      if (TREE_OVERFLOW (TREE_IMAGPART (t)))\n+\tTREE_IMAGPART (t) = drop_tree_overflow (TREE_IMAGPART (t));\n+    }\n+  if (TREE_CODE (t) == VECTOR_CST)\n+    {\n+      for (unsigned i = 0; i < VECTOR_CST_NELTS (t); ++i)\n+\t{\n+\t  tree& elt = VECTOR_CST_ELT (t, i);\n+\t  if (TREE_OVERFLOW (elt))\n+\t    elt = drop_tree_overflow (elt);\n+\t}\n+    }\n   return t;\n }\n "}]}