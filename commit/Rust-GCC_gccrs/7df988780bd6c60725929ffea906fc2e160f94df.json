{"sha": "7df988780bd6c60725929ffea906fc2e160f94df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RmOTg4NzgwYmQ2YzYwNzI1OTI5ZmZlYTkwNmZjMmUxNjBmOTRkZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-09-08T18:32:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-09-08T18:32:31Z"}, "message": "re PR rtl-optimization/6405 (Loop-unrolling related performance regressions)\n\n\n\tPR optimization/6405\n\t* unroll.c (loop_iterations): last_loop_insn should be the previous\n\tnon-note instruction before loop->end.\n\t* loop.c (strength_reduce): The conditional jump is the last\n\tnon-note instruction before loop->end (as above).\n\nFrom-SVN: r56956", "tree": {"sha": "ca4fc1bb6a60377368ad40416a7ee08a4aaca40f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca4fc1bb6a60377368ad40416a7ee08a4aaca40f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7df988780bd6c60725929ffea906fc2e160f94df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df988780bd6c60725929ffea906fc2e160f94df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df988780bd6c60725929ffea906fc2e160f94df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df988780bd6c60725929ffea906fc2e160f94df/comments", "author": null, "committer": null, "parents": [{"sha": "f40f4c8ed1f8a962169c6c39a6601cd3ca8ba91d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40f4c8ed1f8a962169c6c39a6601cd3ca8ba91d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40f4c8ed1f8a962169c6c39a6601cd3ca8ba91d"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "43f4844e1f531298f2436f937cec6b537d690e75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df988780bd6c60725929ffea906fc2e160f94df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df988780bd6c60725929ffea906fc2e160f94df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7df988780bd6c60725929ffea906fc2e160f94df", "patch": "@@ -1,3 +1,11 @@\n+2002-09-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/6405\n+\t* unroll.c (loop_iterations): last_loop_insn should be the previous\n+\tnon-note instruction before loop->end.\n+\t* loop.c (strength_reduce): The conditional jump is the last\n+\tnon-note instruction before loop->end (as above).\n+\n 2002-09-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* combine.c (try_combine): Handle the case that undobuf.other_insn"}, {"sha": "24b16aa9a904dbaf0a2d57da882941258a2f2a33", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df988780bd6c60725929ffea906fc2e160f94df/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df988780bd6c60725929ffea906fc2e160f94df/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=7df988780bd6c60725929ffea906fc2e160f94df", "patch": "@@ -5348,7 +5348,7 @@ strength_reduce (loop, flags)\n       unsigned HOST_WIDE_INT n\n \t= loop_info->n_iterations / loop_info->unroll_number;\n       if (n > 1)\n-\tpredict_insn (PREV_INSN (loop->end), PRED_LOOP_ITERATIONS,\n+\tpredict_insn (prev_nonnote_insn (loop->end), PRED_LOOP_ITERATIONS,\n \t\t      REG_BR_PROB_BASE - REG_BR_PROB_BASE / n);\n     }\n "}, {"sha": "61d63d8e2a359fc45d48275e98cd939ab83be173", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df988780bd6c60725929ffea906fc2e160f94df/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df988780bd6c60725929ffea906fc2e160f94df/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=7df988780bd6c60725929ffea906fc2e160f94df", "patch": "@@ -3273,7 +3273,7 @@ loop_iterations (loop)\n      accidentally get the branch for a contained loop if the branch for this\n      loop was deleted.  We can only trust branches immediately before the\n      loop_end.  */\n-  last_loop_insn = PREV_INSN (loop->end);\n+  last_loop_insn = prev_nonnote_insn (loop->end);\n \n   /* ??? We should probably try harder to find the jump insn\n      at the end of the loop.  The following code assumes that"}]}