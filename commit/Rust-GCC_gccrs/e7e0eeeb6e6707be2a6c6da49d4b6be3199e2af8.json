{"sha": "e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlMGVlZWI2ZTY3MDdiZTJhNmM2ZGE0OWQ0YjZiZTMxOTllMmFmOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-13T15:19:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-13T17:19:12Z"}, "message": "libstdc++: Avoid 32-bit time_t overflows in futex calls\n\nThe existing code doesn't check whether the chrono::seconds value is out\nof range of time_t. When using a timeout before the epoch (with a\nnegative value) subtracting the current time (as time_t) and then\nassigning it to a time_t can overflow to a large positive value. This\nmeans that we end up waiting several years even though the specific\ntimeout was in the distant past.\n\nWe do have a check for negative timeouts, but that happens after the\nconversion to time_t so happens after the overflow.\n\nThe conversion to a relative timeout is done in two places, so this\nfactors it into a new function and adds the overflow checks there.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/futex.cc (relative_timespec): New function to\n\tcreate relative time from two absolute times.\n\t(__atomic_futex_unsigned_base::_M_futex_wait_until)\n\t(__atomic_futex_unsigned_base::_M_futex_wait_until_steady):\n\tUse relative_timespec.", "tree": {"sha": "b3cb57da78e250150b9f926a4e7a9b3e87ad1418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3cb57da78e250150b9f926a4e7a9b3e87ad1418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1189b4e618517b62f938a94c722123cc0ef5f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1189b4e618517b62f938a94c722123cc0ef5f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1189b4e618517b62f938a94c722123cc0ef5f5"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "c2b2d32e8c4369f4ce574f8718ff85ad1f38bc01", "filename": "libstdc++-v3/src/c++11/futex.cc", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffutex.cc?ref=e7e0eeeb6e6707be2a6c6da49d4b6be3199e2af8", "patch": "@@ -31,6 +31,7 @@\n #include <unistd.h>\n #include <sys/time.h>\n #include <errno.h>\n+#include <ext/numeric_traits.h>\n #include <debug/debug.h>\n \n #ifdef _GLIBCXX_USE_CLOCK_GETTIME_SYSCALL\n@@ -46,20 +47,55 @@ const unsigned futex_clock_realtime_flag = 256;\n const unsigned futex_bitset_match_any = ~0;\n const unsigned futex_wake_op = 1;\n \n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n namespace\n {\n   std::atomic<bool> futex_clock_realtime_unavailable;\n   std::atomic<bool> futex_clock_monotonic_unavailable;\n-}\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  // Return the relative duration from (now_s + now_ns) to (abs_s + abs_ns)\n+  // as a timespec.\n+  struct timespec\n+  relative_timespec(chrono::seconds abs_s, chrono::nanoseconds abs_ns,\n+\t\t    time_t now_s, long now_ns)\n+  {\n+    struct timespec rt;\n+\n+    // Did we already time out?\n+    if (now_s > abs_s.count())\n+      {\n+\trt.tv_sec = -1;\n+\treturn rt;\n+      }\n+\n+    auto rel_s = abs_s.count() - now_s;\n+\n+    // Avoid overflows\n+    if (rel_s > __gnu_cxx::__int_traits<time_t>::__max)\n+      rel_s = __gnu_cxx::__int_traits<time_t>::__max;\n+    else if (rel_s < __gnu_cxx::__int_traits<time_t>::__min)\n+      rel_s = __gnu_cxx::__int_traits<time_t>::__min;\n+\n+    // Convert the absolute timeout value to a relative timeout\n+    rt.tv_sec = rel_s;\n+    rt.tv_nsec = abs_ns.count() - now_ns;\n+    if (rt.tv_nsec < 0)\n+      {\n+\trt.tv_nsec += 1000000000;\n+\t--rt.tv_sec;\n+      }\n+\n+    return rt;\n+  }\n+} // namespace\n \n   bool\n-  __atomic_futex_unsigned_base::_M_futex_wait_until(unsigned *__addr,\n-      unsigned __val,\n-      bool __has_timeout, chrono::seconds __s, chrono::nanoseconds __ns)\n+  __atomic_futex_unsigned_base::\n+  _M_futex_wait_until(unsigned *__addr, unsigned __val, bool __has_timeout,\n+\t\t      chrono::seconds __s, chrono::nanoseconds __ns)\n   {\n     if (!__has_timeout)\n       {\n@@ -109,15 +145,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// true or has just been set to true.\n \tstruct timeval tv;\n \tgettimeofday (&tv, NULL);\n+\n \t// Convert the absolute timeout value to a relative timeout\n-\tstruct timespec rt;\n-\trt.tv_sec = __s.count() - tv.tv_sec;\n-\trt.tv_nsec = __ns.count() - tv.tv_usec * 1000;\n-\tif (rt.tv_nsec < 0)\n-\t  {\n-\t    rt.tv_nsec += 1000000000;\n-\t    --rt.tv_sec;\n-\t  }\n+\tauto rt = relative_timespec(__s, __ns, tv.tv_sec, tv.tv_usec * 1000);\n+\n \t// Did we already time out?\n \tif (rt.tv_sec < 0)\n \t  return false;\n@@ -134,9 +165,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n \n   bool\n-  __atomic_futex_unsigned_base::_M_futex_wait_until_steady(unsigned *__addr,\n-      unsigned __val,\n-      bool __has_timeout, chrono::seconds __s, chrono::nanoseconds __ns)\n+  __atomic_futex_unsigned_base::\n+  _M_futex_wait_until_steady(unsigned *__addr, unsigned __val,\n+\t\t\t     bool __has_timeout,\n+\t\t\t     chrono::seconds __s, chrono::nanoseconds __ns)\n   {\n     if (!__has_timeout)\n       {\n@@ -188,15 +220,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n \tclock_gettime(CLOCK_MONOTONIC, &ts);\n #endif\n+\n \t// Convert the absolute timeout value to a relative timeout\n-\tstruct timespec rt;\n-\trt.tv_sec = __s.count() - ts.tv_sec;\n-\trt.tv_nsec = __ns.count() - ts.tv_nsec;\n-\tif (rt.tv_nsec < 0)\n-\t  {\n-\t    rt.tv_nsec += 1000000000;\n-\t    --rt.tv_sec;\n-\t  }\n+\tauto rt = relative_timespec(__s, __ns, ts.tv_sec, ts.tv_nsec);\n+\n \t// Did we already time out?\n \tif (rt.tv_sec < 0)\n \t  return false;"}]}