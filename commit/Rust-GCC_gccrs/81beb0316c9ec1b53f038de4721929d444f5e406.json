{"sha": "81beb0316c9ec1b53f038de4721929d444f5e406", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiZWIwMzE2YzllYzFiNTNmMDM4ZGU0NzIxOTI5ZDQ0NGY1ZTQwNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2009-06-13T12:49:25Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-06-13T12:49:25Z"}, "message": "re PR target/40327 (Use fewer instructions to add some constants to register)\n\n\tPR target/40327\n\t* arm/constraints.md (Pa, Pb): New constraints.\n\t* arm/arm.md (thumb1_addsi3): Support more complex additions.  Add a \n\tsplit pattern to deal with them.\n\nFrom-SVN: r148452", "tree": {"sha": "9462413f39917293691b2f80a1691fc920688266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9462413f39917293691b2f80a1691fc920688266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81beb0316c9ec1b53f038de4721929d444f5e406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81beb0316c9ec1b53f038de4721929d444f5e406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81beb0316c9ec1b53f038de4721929d444f5e406", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81beb0316c9ec1b53f038de4721929d444f5e406/comments", "author": null, "committer": null, "parents": [{"sha": "98f6c6001353550dbafae02051371d2bef236b99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f6c6001353550dbafae02051371d2bef236b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f6c6001353550dbafae02051371d2bef236b99"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "c2bdc07dee54bb60d78afa5e689611b0e42d4acf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81beb0316c9ec1b53f038de4721929d444f5e406/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81beb0316c9ec1b53f038de4721929d444f5e406/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81beb0316c9ec1b53f038de4721929d444f5e406", "patch": "@@ -1,3 +1,10 @@\n+2009-06-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/40327\n+\t* arm/constraints.md (Pa, Pb): New constraints.\n+\t* arm/arm.md (thumb1_addsi3): Support more complex additions.  Add a \n+\tsplit pattern to deal with them.\n+\n 2009-06-13  Joerg Sonnenberger  <joerg@britannica.bec.de>\n \n \t* doc/invoke.texi: Add missing option -Wp,OPTION in list,"}, {"sha": "40e41c560211a4071c9e4b1935479eac7f11192c", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81beb0316c9ec1b53f038de4721929d444f5e406/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81beb0316c9ec1b53f038de4721929d444f5e406/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=81beb0316c9ec1b53f038de4721929d444f5e406", "patch": "@@ -640,10 +640,10 @@\n ;; register.  Trying to reload it will always fail catastrophically,\n ;; so never allow those alternatives to match if reloading is needed.\n \n-(define_insn \"*thumb1_addsi3\"\n-  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*rk,*hk,l,!k\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,l,*0,*0,!k,!k\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*hk,*rk,!M,!O\")))]\n+(define_insn_and_split \"*thumb1_addsi3\"\n+  [(set (match_operand:SI          0 \"register_operand\" \"=l,l,l,*rk,*hk,l,!k,l,l\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,l,*0,*0,!k,!k,0,l\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"I,J,lL,*hk,*rk,!M,!O,Pa,Pb\")))]\n   \"TARGET_THUMB1\"\n   \"*\n    static const char * const asms[] = \n@@ -654,15 +654,32 @@\n      \\\"add\\\\t%0, %0, %2\\\",\n      \\\"add\\\\t%0, %0, %2\\\",\n      \\\"add\\\\t%0, %1, %2\\\",\n-     \\\"add\\\\t%0, %1, %2\\\"\n+     \\\"add\\\\t%0, %1, %2\\\",\n+     \\\"#\\\",\n+     \\\"#\\\"\n    };\n    if ((which_alternative == 2 || which_alternative == 6)\n        && GET_CODE (operands[2]) == CONST_INT\n        && INTVAL (operands[2]) < 0)\n      return \\\"sub\\\\t%0, %1, #%n2\\\";\n    return asms[which_alternative];\n   \"\n-  [(set_attr \"length\" \"2\")]\n+  \"&& reload_completed && CONST_INT_P (operands[2])\n+   && operands[1] != stack_pointer_rtx\n+   && (INTVAL (operands[2]) > 255 || INTVAL (operands[2]) < -255)\"\n+  [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 3)))]\n+  {\n+    HOST_WIDE_INT offset = INTVAL (operands[2]);\n+    if (offset > 255)\n+      offset = 255;\n+    else if (offset < -255)\n+      offset = -255;\n+    \n+    operands[3] = GEN_INT (offset);\n+    operands[2] = GEN_INT (INTVAL (operands[2]) - offset);\n+  }\n+  [(set_attr \"length\" \"2,2,2,2,2,2,2,4,4\")]\n )\n \n ;; Reloading and elimination of the frame pointer can"}, {"sha": "f71599edbd4f89243fc645ece17f90c3ca5ff062", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81beb0316c9ec1b53f038de4721929d444f5e406/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81beb0316c9ec1b53f038de4721929d444f5e406/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=81beb0316c9ec1b53f038de4721929d444f5e406", "patch": "@@ -30,6 +30,7 @@\n \n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv\n+;; in Thumb-1 state: Pa, Pb\n \n ;; The following memory constraints have been used:\n ;; in ARM/Thumb-2 state: Q, Ut, Uv, Uy, Un, Um, Us\n@@ -129,6 +130,18 @@\n       (match_test \"TARGET_THUMB1 && ival >= -508 && ival <= 508\n \t\t   && ((ival & 3) == 0)\")))\n \n+(define_constraint \"Pa\"\n+  \"@internal In Thumb-1 state a constant in the range -510 to +510\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB1 && ival >= -510 && ival <= 510\n+\t\t    && (ival > 255 || ival < -255)\")))\n+\n+(define_constraint \"Pb\"\n+  \"@internal In Thumb-1 state a constant in the range -262 to +262\"\n+  (and (match_code \"const_int\")\n+       (match_test \"TARGET_THUMB1 && ival >= -262 && ival <= 262\n+\t\t    && (ival > 255 || ival < -255)\")))\n+\n (define_constraint \"G\"\n  \"In ARM/Thumb-2 state a valid FPA immediate constant.\"\n  (and (match_code \"const_double\")"}]}