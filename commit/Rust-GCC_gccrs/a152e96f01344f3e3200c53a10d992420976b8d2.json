{"sha": "a152e96f01344f3e3200c53a10d992420976b8d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1MmU5NmYwMTM0NGYzZTMyMDBjNTNhMTBkOTkyNDIwOTc2YjhkMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-12-01T02:20:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-12-01T02:20:32Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Remove size-specific macros.\n\n2011-11-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Remove\n        size-specific macros. _GLIBCXX_ATOMIC_BUILTINS_1,\n        _GLIBCXX_ATOMIC_BUILTINS_2, _GLIBCXX_ATOMIC_BUILTINS_4,\n        _GLIBCXX_ATOMIC_BUILTINS_8. Use _GLIBCXX_ATOMIC_BUILTINS to\n        indicate use of C++11 atomic builtins.\n        * config.h.in: Regenerate.\n        * configure: Regenerate.\n        * include/Makefile.am (bits_sup_headers): Add atomic_lockfree_defines.h.\n        * include/Makefile.in: Regenerate.\n        * libsupc++/Makefile.am: Compile C++11 support with -std=gnu++0x.\n        * libsupc++/Makefile.in: Regenerate.\n\n        * include/bits/atomic_base.h: Move lock-free property macros...\n        * libsupc++/atomic_lockfree_defines.h: ...here.\n        * include/std/future: Use C++11 macros.\n        * libsupc++/eh_ptr.cc: Same.\n        * libsupc++/eh_throw.cc: Same.\n        * libsupc++/exception: Same.\n        * libsupc++/exception_ptr.h: Same.\n        * libsupc++/guard.cc: Same.\n        * libsupc++/nested_exception.cc: Same.\n        * libsupc++/nested_exception.h: Same.\n        * src/future.cc: Same.\n\n        * include/ext/atomicity.h: Use _GLIBCXX_ATOMIC_BUILTINS.\n\n        * doc/doxygen/user.cfg.in\n        * doc/xml/manual/concurrency_extensions.xml\n\n        * testsuite/18_support/exception_ptr/lifespan.cc\n        * testsuite/lib/libstdc++.exp\n\nFrom-SVN: r181869", "tree": {"sha": "d4912787d66dc0363f377302abaa209272a433b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4912787d66dc0363f377302abaa209272a433b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a152e96f01344f3e3200c53a10d992420976b8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a152e96f01344f3e3200c53a10d992420976b8d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a152e96f01344f3e3200c53a10d992420976b8d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a152e96f01344f3e3200c53a10d992420976b8d2/comments", "author": null, "committer": null, "parents": [{"sha": "de21ce7fa8f64a4438874ede019e77034de43310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de21ce7fa8f64a4438874ede019e77034de43310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de21ce7fa8f64a4438874ede019e77034de43310"}], "stats": {"total": 340, "additions": 200, "deletions": 140}, "files": [{"sha": "7ce62eae77b35d3f2ea7a3eb3b5001048192ade5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -1,3 +1,37 @@\n+2011-11-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * acinclude.m4 (GLIBCXX_ENABLE_ATOMIC_BUILTINS): Remove\n+        size-specific macros. _GLIBCXX_ATOMIC_BUILTINS_1,\n+        _GLIBCXX_ATOMIC_BUILTINS_2, _GLIBCXX_ATOMIC_BUILTINS_4,\n+        _GLIBCXX_ATOMIC_BUILTINS_8. Use _GLIBCXX_ATOMIC_BUILTINS to\n+        indicate use of C++11 atomic builtins.\n+        * config.h.in: Regenerate.\n+        * configure: Regenerate.\n+        * include/Makefile.am (bits_sup_headers): Add atomic_lockfree_defines.h.\n+        * include/Makefile.in: Regenerate.\n+        * libsupc++/Makefile.am: Compile C++11 support with -std=gnu++0x.\n+        * libsupc++/Makefile.in: Regenerate.\n+\n+        * include/bits/atomic_base.h: Move lock-free property macros...\n+        * libsupc++/atomic_lockfree_defines.h: ...here.\n+        * include/std/future: Use C++11 macros.\n+        * libsupc++/eh_ptr.cc: Same.\n+        * libsupc++/eh_throw.cc: Same.\n+        * libsupc++/exception: Same.\n+        * libsupc++/exception_ptr.h: Same.\n+        * libsupc++/guard.cc: Same.\n+        * libsupc++/nested_exception.cc: Same.\n+        * libsupc++/nested_exception.h: Same.\n+        * src/future.cc: Same.\n+\n+        * include/ext/atomicity.h: Use _GLIBCXX_ATOMIC_BUILTINS.\n+\n+        * doc/doxygen/user.cfg.in\n+        * doc/xml/manual/concurrency_extensions.xml\n+\n+        * testsuite/18_support/exception_ptr/lifespan.cc\n+        * testsuite/lib/libstdc++.exp\n+\n 2011-11-29  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable.h (_Hashtable<>::_M_rehash): Remove code"}, {"sha": "9d08178c35e6da95c8ba935b89b161426546ed52", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -2683,12 +2683,6 @@ dnl\n dnl Note:\n dnl libgomp and libgfortran use a link test, see CHECK_SYNC_FETCH_AND_ADD.\n dnl\n-dnl Defines:\n-dnl  _GLIBCXX_ATOMIC_BUILTINS_1\n-dnl  _GLIBCXX_ATOMIC_BUILTINS_2\n-dnl  _GLIBCXX_ATOMIC_BUILTINS_4\n-dnl  _GLIBCXX_ATOMIC_BUILTINS_8\n-dnl\n AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n@@ -2729,10 +2723,6 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [glibcxx_cv_atomic_bool=yes],\n       [glibcxx_cv_atomic_bool=no])\n   ])\n-  if test $glibcxx_cv_atomic_bool = yes; then\n-    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_1, 1,\n-      [Define if builtin atomic operations for bool are supported on this host.])\n-  fi\n   AC_MSG_RESULT($glibcxx_cv_atomic_bool)\n \n   AC_MSG_CHECKING([for atomic builtins for short])\n@@ -2751,10 +2741,6 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [glibcxx_cv_atomic_short=yes],\n       [glibcxx_cv_atomic_short=no])\n   ])\n-  if test $glibcxx_cv_atomic_short = yes; then\n-    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_2, 1,\n-      [Define if builtin atomic operations for short are supported on this host.])\n-  fi\n   AC_MSG_RESULT($glibcxx_cv_atomic_short)\n \n   AC_MSG_CHECKING([for atomic builtins for int])\n@@ -2773,10 +2759,6 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [glibcxx_cv_atomic_int=yes],\n       [glibcxx_cv_atomic_int=no])\n   ])\n-  if test $glibcxx_cv_atomic_int = yes; then\n-    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_4, 1,\n-      [Define if builtin atomic operations for int are supported on this host.])\n-  fi\n   AC_MSG_RESULT($glibcxx_cv_atomic_int)\n \n   AC_MSG_CHECKING([for atomic builtins for long long])\n@@ -2795,10 +2777,6 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n       [glibcxx_cv_atomic_long_long=yes],\n       [glibcxx_cv_atomic_long_long=no])\n   ])\n-  if test $glibcxx_cv_atomic_long_long = yes; then\n-    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_8, 1,\n-      [Define if builtin atomic operations for long long are supported on this host.])\n-  fi\n   AC_MSG_RESULT($glibcxx_cv_atomic_long_long)\n \n   else\n@@ -2832,8 +2810,6 @@ EOF\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_bool=no\n       else\n-      AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_1, 1,\n-      [Define if builtin atomic operations for bool are supported on this host.])\n \tglibcxx_cv_atomic_bool=yes\n       fi\n     fi\n@@ -2862,8 +2838,6 @@ EOF\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_short=no\n       else\n-      AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_2, 1,\n-      [Define if builtin atomic operations for short are supported on this host.])\n \tglibcxx_cv_atomic_short=yes\n       fi\n     fi\n@@ -2893,8 +2867,6 @@ EOF\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_int=no\n       else\n-      AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_4, 1,\n-\t[Define if builtin atomic operations for int are supported on this host.])\n \tglibcxx_cv_atomic_int=yes\n       fi\n     fi\n@@ -2923,8 +2895,6 @@ EOF\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_long_long=no\n       else\n-      AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_8, 1,\n-      [Define if builtin atomic operations for long long are supported on this host.])\n \tglibcxx_cv_atomic_long_long=yes\n       fi\n     fi\n@@ -2938,6 +2908,8 @@ EOF\n \n   # Set atomicity_dir to builtins if either of above tests pass.\n   if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS, 1,\n+    [Define if the compiler supports C++11 atomics.])\n     atomicity_dir=cpu/generic/atomicity_builtins\n   fi\n "}, {"sha": "378ddabb3f24a017a6cb294bf881b3cf108cd044", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -689,19 +689,8 @@\n /* Version number of package */\n #undef VERSION\n \n-/* Define if builtin atomic operations for bool are supported on this host. */\n-#undef _GLIBCXX_ATOMIC_BUILTINS_1\n-\n-/* Define if builtin atomic operations for short are supported on this host.\n-   */\n-#undef _GLIBCXX_ATOMIC_BUILTINS_2\n-\n-/* Define if builtin atomic operations for int are supported on this host. */\n-#undef _GLIBCXX_ATOMIC_BUILTINS_4\n-\n-/* Define if builtin atomic operations for long long are supported on this\n-   host. */\n-#undef _GLIBCXX_ATOMIC_BUILTINS_8\n+/* Define if the compiler supports C++11 atomics. */\n+#undef _GLIBCXX_ATOMIC_BUILTINS\n \n /* Define to use concept checking code from the boost libraries. */\n #undef _GLIBCXX_CONCEPT_CHECKS"}, {"sha": "3c64a28e3c80190c1670f46f165b186b2f37f1ee", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 10, "deletions": 39, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -15147,11 +15147,6 @@ rm -f core conftest.err conftest.$ac_objext \\\n \n fi\n \n-  if test $glibcxx_cv_atomic_bool = yes; then\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_1 1\" >>confdefs.h\n-\n-  fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_bool\" >&5\n $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n \n@@ -15193,11 +15188,6 @@ rm -f core conftest.err conftest.$ac_objext \\\n \n fi\n \n-  if test $glibcxx_cv_atomic_short = yes; then\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_2 1\" >>confdefs.h\n-\n-  fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_short\" >&5\n $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n \n@@ -15239,11 +15229,6 @@ rm -f core conftest.err conftest.$ac_objext \\\n \n fi\n \n-  if test $glibcxx_cv_atomic_int = yes; then\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_4 1\" >>confdefs.h\n-\n-  fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_int\" >&5\n $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n \n@@ -15285,11 +15270,6 @@ rm -f core conftest.err conftest.$ac_objext \\\n \n fi\n \n-  if test $glibcxx_cv_atomic_long_long = yes; then\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_8 1\" >>confdefs.h\n-\n-  fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_long_long\" >&5\n $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n \n@@ -15303,7 +15283,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15306 \"configure\"\n+#line 15286 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15329,9 +15309,6 @@ $as_echo_n \"checking for atomic builtins for bool... \" >&6; }\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_bool=no\n       else\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_1 1\" >>confdefs.h\n-\n \tglibcxx_cv_atomic_bool=yes\n       fi\n     fi\n@@ -15340,7 +15317,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15343 \"configure\"\n+#line 15320 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15366,9 +15343,6 @@ $as_echo_n \"checking for atomic builtins for short... \" >&6; }\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_short=no\n       else\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_2 1\" >>confdefs.h\n-\n \tglibcxx_cv_atomic_short=yes\n       fi\n     fi\n@@ -15377,7 +15351,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15380 \"configure\"\n+#line 15354 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15404,9 +15378,6 @@ $as_echo_n \"checking for atomic builtins for int... \" >&6; }\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_int=no\n       else\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_4 1\" >>confdefs.h\n-\n \tglibcxx_cv_atomic_int=yes\n       fi\n     fi\n@@ -15415,7 +15386,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15418 \"configure\"\n+#line 15389 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15441,9 +15412,6 @@ $as_echo_n \"checking for atomic builtins for long long... \" >&6; }\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n \tglibcxx_cv_atomic_long_long=no\n       else\n-\n-$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_8 1\" >>confdefs.h\n-\n \tglibcxx_cv_atomic_long_long=yes\n       fi\n     fi\n@@ -15463,6 +15431,9 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n   # Set atomicity_dir to builtins if either of above tests pass.\n   if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n+\n+$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS 1\" >>confdefs.h\n+\n     atomicity_dir=cpu/generic/atomicity_builtins\n   fi\n \n@@ -15491,7 +15462,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15494 \"configure\"\n+#line 15465 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15533,7 +15504,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15536 \"configure\"\n+#line 15507 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15567,7 +15538,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15570 \"configure\"\n+#line 15541 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "9178b0c767185d1efaecaba303cba4ebe7f3b9ce", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -1645,10 +1645,6 @@ PREDEFINED             = __cplusplus \\\n \t\t\t _GLIBCXX_USE_WCHAR_T \\\n \t\t\t _GLIBCXX_USE_LONG_LONG \\\n \t\t\t _GLIBCXX_USE_C99_STDINT_TR1 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_1 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_2 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_4 \\\n-\t\t\t _GLIBCXX_ATOMIC_BUILTINS_8 \\\n \t\t\t _GLIBCXX_USE_SCHED_YIELD \\\n \t\t\t _GLIBCXX_USE_NANOSLEEP \\\n \t\t\t PB_DS_DATA_TRUE_INDICATOR \\"}, {"sha": "c87f41ba1c13fb3878085365137eeaf42c54881c", "filename": "libstdc++-v3/doc/xml/manual/concurrency_extensions.xml", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency_extensions.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency_extensions.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconcurrency_extensions.xml?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -210,11 +210,19 @@ usage vary depending on the target hardware and the flags used during\n compile.\n </para>\n \n+\n+\n+<para>\n+<remark>\n+Incomplete/inconsistent. This is only C++11.\n+</remark>\n+</para>\n+\n <para>\n If builtins are possible for bool-sized integral types,\n-<code>_GLIBCXX_ATOMIC_BUILTINS_1</code> will be defined.\n+<code>ATOMIC_BOOL_LOCK_FREE</code> will be defined.\n If builtins are possible for int-sized integral types,\n-<code>_GLIBCXX_ATOMIC_BUILTINS_4</code> will be defined.\n+<code>ATOMIC_INT_LOCK_FREE</code> will be defined.\n </para>\n \n "}, {"sha": "1e9b144a07d2813f2057b7d76ff3efec1c162032", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -177,6 +177,7 @@ bits_headers = \\\n \n bits_sup_srcdir = ${glibcxx_srcdir}/libsupc++\n bits_sup_headers = \\\n+\t${bits_sup_srcdir}/atomic_lockfree_defines.h \\\n \t${bits_sup_srcdir}/cxxabi_forced.h \\\n \t${bits_sup_srcdir}/exception_defines.h \\\n \t${bits_sup_srcdir}/exception_ptr.h \\"}, {"sha": "fec2d94bf7b2f10e0bbcaea65e019afbd3f267a1", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -429,6 +429,7 @@ bits_headers = \\\n \n bits_sup_srcdir = ${glibcxx_srcdir}/libsupc++\n bits_sup_headers = \\\n+\t${bits_sup_srcdir}/atomic_lockfree_defines.h \\\n \t${bits_sup_srcdir}/cxxabi_forced.h \\\n \t${bits_sup_srcdir}/exception_defines.h \\\n \t${bits_sup_srcdir}/exception_ptr.h \\"}, {"sha": "3f00cda67755770879e94bf2c8a33a40f20a5b82", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -35,6 +35,7 @@\n #include <bits/c++config.h>\n #include <stdbool.h>\n #include <stdint.h>\n+#include <bits/atomic_lockfree_defines.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -70,15 +71,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   inline void\n   atomic_thread_fence(memory_order __m) noexcept\n-  {\n-    __atomic_thread_fence (__m);\n-  }\n+  { __atomic_thread_fence(__m); }\n \n   inline void\n   atomic_signal_fence(memory_order __m) noexcept\n-  {\n-    __atomic_thread_fence (__m);\n-  }\n+  { __atomic_thread_fence(__m); }\n \n   /// kill_dependency\n   template<typename _Tp>\n@@ -89,19 +86,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __ret;\n     }\n \n-  /// Lock-free Property\n-\n-\n-#define ATOMIC_BOOL_LOCK_FREE\t\t__GCC_ATOMIC_BOOL_LOCK_FREE\n-#define ATOMIC_CHAR_LOCK_FREE\t\t__GCC_ATOMIC_CHAR_LOCK_FREE\n-#define ATOMIC_WCHAR_T_LOCK_FREE\t__GCC_ATOMIC_WCHAR_T_LOCK_FREE\n-#define ATOMIC_CHAR16_T_LOCK_FREE\t__GCC_ATOMIC_CHAR16_T_LOCK_FREE\n-#define ATOMIC_CHAR32_T_LOCK_FREE\t__GCC_ATOMIC_CHAR32_T_LOCK_FREE\n-#define ATOMIC_SHORT_LOCK_FREE\t\t__GCC_ATOMIC_SHORT_LOCK_FREE\n-#define ATOMIC_INT_LOCK_FREE\t\t__GCC_ATOMIC_INT_LOCK_FREE\n-#define ATOMIC_LONG_LOCK_FREE\t\t__GCC_ATOMIC_LONG_LOCK_FREE\n-#define ATOMIC_LLONG_LOCK_FREE\t\t__GCC_ATOMIC_LLONG_LOCK_FREE\n-#define ATOMIC_POINTER_LOCK_FREE\t__GCC_ATOMIC_POINTER_LOCK_FREE\n \n   // Base types for atomics.\n   template<typename _IntTp>"}, {"sha": "c63b1d463616f037be465be341ca3699914e1ef4", "filename": "libstdc++-v3/include/ext/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -1,6 +1,6 @@\n // Support for atomic operations -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2008, 2009, 2010\n+// Copyright (C) 2004, 2005, 2006, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -42,7 +42,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // To abstract locking primitives across all thread policies, use:\n   // __exchange_and_add_dispatch\n   // __atomic_add_dispatch\n-#ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n+#ifdef _GLIBCXX_ATOMIC_BUILTINS\n   static inline _Atomic_word \n   __exchange_and_add(volatile _Atomic_word* __mem, int __val)\n   { return __sync_fetch_and_add(__mem, __val); }"}, {"sha": "040f573ea7229cb0070f09ed2cb43ffeed83e64b", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -187,7 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     async(_Fn&& __fn, _Args&&... __args);\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n-  && defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+  && (ATOMIC_INT_LOCK_FREE > 1)\n \n   /// Base class and enclosing scope.\n   struct __future_base\n@@ -1493,7 +1493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n-       // && _GLIBCXX_ATOMIC_BUILTINS_4\n+       // && ATOMIC_INT_LOCK_FREE\n \n   // @} group futures\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "fb5c26f374e2273bb9ff08f71b1822a49007cba9", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -35,8 +35,8 @@ std_HEADERS = \\\n \tcxxabi.h exception initializer_list new typeinfo \n \n bits_HEADERS = \\\n-\tcxxabi_forced.h hash_bytes.h \\\n-\texception_defines.h exception_ptr.h nested_exception.h \n+\tatomic_lockfree_defines.h cxxabi_forced.h \\\n+\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h \n \n headers = $(std_HEADERS) $(bits_HEADERS)\n \n@@ -136,6 +136,22 @@ cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n \n+# Use special rules for the C++0x sources so that the proper flags are passed.\n+eh_ptr.lo: eh_ptr.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+eh_ptr.o: eh_ptr.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+eh_throw.lo: eh_throw.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+eh_throw.o: eh_throw.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+guard.lo: guard.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+guard.o: guard.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n nested_exception.lo: nested_exception.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n nested_exception.o: nested_exception.cc"}, {"sha": "2cc92ec18890bf7f8fce1c9e457c8200f0b2d76b", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -346,8 +346,8 @@ std_HEADERS = \\\n \tcxxabi.h exception initializer_list new typeinfo \n \n bits_HEADERS = \\\n-\tcxxabi_forced.h hash_bytes.h \\\n-\texception_defines.h exception_ptr.h nested_exception.h \n+\tatomic_lockfree_defines.h cxxabi_forced.h \\\n+\texception_defines.h exception_ptr.h hash_bytes.h nested_exception.h \n \n headers = $(std_HEADERS) $(bits_HEADERS)\n @GLIBCXX_HOSTED_TRUE@c_sources = \\\n@@ -770,6 +770,22 @@ cp-demangle.lo: cp-demangle.c\n cp-demangle.o: cp-demangle.c\n \t$(C_COMPILE) -DIN_GLIBCPP_V3 -Wno-error -c $<\n \n+# Use special rules for the C++0x sources so that the proper flags are passed.\n+eh_ptr.lo: eh_ptr.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+eh_ptr.o: eh_ptr.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+eh_throw.lo: eh_throw.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+eh_throw.o: eh_throw.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n+guard.lo: guard.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+guard.o: guard.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n nested_exception.lo: nested_exception.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n nested_exception.o: nested_exception.cc"}, {"sha": "22331b615377f299179b67c536ccb2272f304edb", "filename": "libstdc++-v3/libsupc++/atomic_lockfree_defines.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fatomic_lockfree_defines.h?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -0,0 +1,63 @@\n+// -*- C++ -*- header.\n+\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/atomic_lockfree_defines.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{atomic}\n+ */\n+\n+#ifndef _GLIBCXX_ATOMIC_LOCK_FREE_H\n+#define _GLIBCXX_ATOMIC_LOCK_FREE_H 1\n+\n+#pragma GCC system_header\n+\n+/**\n+ * @addtogroup atomics\n+ * @{\n+ */\n+\n+/**\n+ * Lock-free property.\n+ *\n+ * 0 indicates that the types are never lock-free.\n+ * 1 indicates that the types are sometimes lock-free.\n+ * 2 indicates that the types are always lock-free.\n+ */\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#define ATOMIC_BOOL_LOCK_FREE\t\t__GCC_ATOMIC_BOOL_LOCK_FREE\n+#define ATOMIC_CHAR_LOCK_FREE\t\t__GCC_ATOMIC_CHAR_LOCK_FREE\n+#define ATOMIC_WCHAR_T_LOCK_FREE\t__GCC_ATOMIC_WCHAR_T_LOCK_FREE\n+#define ATOMIC_CHAR16_T_LOCK_FREE\t__GCC_ATOMIC_CHAR16_T_LOCK_FREE\n+#define ATOMIC_CHAR32_T_LOCK_FREE\t__GCC_ATOMIC_CHAR32_T_LOCK_FREE\n+#define ATOMIC_SHORT_LOCK_FREE\t\t__GCC_ATOMIC_SHORT_LOCK_FREE\n+#define ATOMIC_INT_LOCK_FREE\t\t__GCC_ATOMIC_INT_LOCK_FREE\n+#define ATOMIC_LONG_LOCK_FREE\t\t__GCC_ATOMIC_LONG_LOCK_FREE\n+#define ATOMIC_LLONG_LOCK_FREE\t\t__GCC_ATOMIC_LLONG_LOCK_FREE\n+#define ATOMIC_POINTER_LOCK_FREE\t__GCC_ATOMIC_POINTER_LOCK_FREE\n+#endif\n+\n+// @} group atomics\n+\n+#endif"}, {"sha": "0e710f2de62a7059bf059b9a4c3911664cb0dc56", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Implement the members of exception_ptr.\n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -23,8 +23,9 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <bits/c++config.h>\n+#include <bits/atomic_lockfree_defines.h>\n \n-#ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n+#if ATOMIC_INT_LOCK_FREE > 1\n \n #define _GLIBCXX_EH_PTR_COMPAT\n "}, {"sha": "728c5ccf284794aec790cc93fe4b343f294fd653", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -43,15 +43,15 @@ __gxx_exception_cleanup (_Unwind_Reason_Code code, _Unwind_Exception *exc)\n   if (code != _URC_FOREIGN_EXCEPTION_CAUGHT && code != _URC_NO_REASON)\n     __terminate (header->exc.terminateHandler);\n \n-#ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n+#if ATOMIC_INT_LOCK_FREE > 1\n   if (__sync_sub_and_fetch (&header->referenceCount, 1) == 0)\n     {\n #endif\n       if (header->exc.exceptionDestructor)\n \theader->exc.exceptionDestructor (header + 1);\n \n       __cxa_free_exception (header + 1);\n-#ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n+#if ATOMIC_INT_LOCK_FREE > 1\n     }\n #endif\n }"}, {"sha": "3deb45ef38f21c44a09afbe5f5bf2a68d94c03da", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -37,6 +37,7 @@\n #pragma GCC visibility push(default)\n \n #include <bits/c++config.h>\n+#include <bits/atomic_lockfree_defines.h>\n \n extern \"C++\" {\n \n@@ -149,8 +150,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n \n #pragma GCC visibility pop\n \n-#if (defined(__GXX_EXPERIMENTAL_CXX0X__) \\\n-     && defined(_GLIBCXX_ATOMIC_BUILTINS_4))\n+#if defined(__GXX_EXPERIMENTAL_CXX0X__) && (ATOMIC_INT_LOCK_FREE > 1)\n #include <bits/exception_ptr.h>\n #include <bits/nested_exception.h>\n #endif"}, {"sha": "bd18dc1b3a0e0cfb5e5f7ecf78a90d3218b2c61b", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -36,7 +36,7 @@\n #include <bits/c++config.h>\n #include <bits/exception_defines.h>\n \n-#if !defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+#if ATOMIC_INT_LOCK_FREE < 2\n #  error This platform does not support exception propagation.\n #endif\n "}, {"sha": "643ecd703a16e6814e43b247bae521844d1697be", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -32,7 +32,7 @@\n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n #if defined(__GTHREADS) && defined(__GTHREAD_HAS_COND) \\\n-    && defined(_GLIBCXX_ATOMIC_BUILTINS_4) && defined(_GLIBCXX_HAVE_LINUX_FUTEX)\n+  && (ATOMIC_INT_LOCK_FREE > 1) && defined(_GLIBCXX_HAVE_LINUX_FUTEX)\n # include <climits>\n # include <syscall.h>\n # include <unistd.h>"}, {"sha": "ad83ecdfb535628ec6371c5719eb97a75acb5672", "filename": "libstdc++-v3/libsupc++/nested_exception.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.cc?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -25,7 +25,7 @@\n \n namespace std \n {\n-#ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n+#if ATOMIC_INT_LOCK_FREE > 1\n   nested_exception::~nested_exception() = default;\n #endif\n } // namespace std"}, {"sha": "9b99c32dd7eb0fb1c05a34cefa0c545737f2cb0e", "filename": "libstdc++-v3/libsupc++/nested_exception.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnested_exception.h?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -38,7 +38,7 @@\n \n #include <bits/c++config.h>\n \n-#if !defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+#if ATOMIC_INT_LOCK_FREE < 2\n #  error This platform does not support exception propagation.\n #endif\n "}, {"sha": "e68642c34276db052ac5af1ac4fa2f7782186a1f", "filename": "libstdc++-v3/src/future.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffuture.cc?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   future_error::what() const noexcept { return _M_code.message().c_str(); }\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \\\n-  && defined(_GLIBCXX_ATOMIC_BUILTINS_4)\n+  && (ATOMIC_INT_LOCK_FREE > 1)\n   __future_base::_Result_base::_Result_base() = default;\n \n   __future_base::_Result_base::~_Result_base() = default;"}, {"sha": "b417ea68e1762b59937f25b453f326459b2295d5", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/lifespan.cc", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Flifespan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Flifespan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Flifespan.cc?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -150,11 +150,14 @@ void test06()\n \n   may_destruct = false;\n \n-  try {\n-    test06_helper();\n-  } catch(...) {\n-    may_destruct = true;\n-  }\n+  try \n+    {\n+      test06_helper();\n+    } \n+  catch(...) \n+    {\n+      may_destruct = true;\n+    }\n   may_destruct = false;\n }\n \n@@ -167,11 +170,14 @@ void test99()\n \n   may_destruct = false;\n \n-  try {\n-    throw destructing();\n-  } catch(...) {\n-    gep = current_exception();\n-  }\n+  try \n+    {\n+      throw destructing();\n+    } \n+  catch(...) \n+    {\n+      gep = current_exception();\n+    }\n }\n \n int main()"}, {"sha": "abb92bf358d62f3633d0a979e87015a30d97ff43", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a152e96f01344f3e3200c53a10d992420976b8d2/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=a152e96f01344f3e3200c53a10d992420976b8d2", "patch": "@@ -1219,14 +1219,16 @@ proc check_v3_target_atomic_builtins { } {\n \tset src atomic_builtins[pid].cc\n \n \tset f [open $src \"w\"]\n-\tputs $f \"#include <bits/c++config.h>\"\n-\tputs $f \"#ifndef _GLIBCXX_ATOMIC_BUILTINS_4\"\n-\tputs $f \"#  error No atomic builtins\"\n+\tputs $f \"#if __GCC_ATOMIC_BOOL_LOCK_FREE < 2\"\n+\tputs $f \"#  error No atomic bool\"\n+\tputs $f \"#endif\"\n+\tputs $f \"#if __GCC_ATOMIC_INT_LOCK_FREE < 2\"\n+\tputs $f \"#  error No atomic int\"\n \tputs $f \"#endif\"\n \tclose $f\n \n \tset cxxflags_saved $cxxflags\n-\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\tset cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror -std=gnu++0x\"\n \n \tset lines [v3_target_compile $src /dev/null preprocess \"\"]\n \tset cxxflags $cxxflags_saved"}]}