{"sha": "8b9395c37552bf11277fb6dc4a5bd38ce6ba479b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5Mzk1YzM3NTUyYmYxMTI3N2ZiNmRjNGE1YmQzOGNlNmJhNDc5Yg==", "commit": {"author": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-05-24T16:12:57Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-05-24T16:12:57Z"}, "message": "Document the c_fix types\n\nFrom-SVN: r34133", "tree": {"sha": "b7d9357e45df1fd90cfe3e436bf9d9c6d6f0f6fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d9357e45df1fd90cfe3e436bf9d9c6d6f0f6fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9395c37552bf11277fb6dc4a5bd38ce6ba479b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9395c37552bf11277fb6dc4a5bd38ce6ba479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9395c37552bf11277fb6dc4a5bd38ce6ba479b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9395c37552bf11277fb6dc4a5bd38ce6ba479b/comments", "author": null, "committer": null, "parents": [{"sha": "01ce976d50cf5b93c0026f8ff206af8a1544493e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ce976d50cf5b93c0026f8ff206af8a1544493e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ce976d50cf5b93c0026f8ff206af8a1544493e"}], "stats": {"total": 117, "additions": 75, "deletions": 42}, "files": [{"sha": "53c16ebe1754079fd49188658308da9312d4d99b", "filename": "gcc/fixinc/README", "status": "modified", "additions": 75, "deletions": 42, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9395c37552bf11277fb6dc4a5bd38ce6ba479b/gcc%2Ffixinc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9395c37552bf11277fb6dc4a5bd38ce6ba479b/gcc%2Ffixinc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FREADME?ref=8b9395c37552bf11277fb6dc4a5bd38ce6ba479b", "patch": "@@ -106,22 +106,77 @@ Here are the rules for making fixes in the inclhack.def file:\n         of stdin in order to avoid pipe stalls.  They may choose to\n         discard the input.\n \n-    3.  A C language subroutine method for both tests and fixes.\n-        See ``fixtests.c'' for instructions on writing C-language\n-        applicability tests and ``fixfixes.c'' for C-language fixing.\n-        These files also contain tables that describe the currently\n-        implemented fixes and tests.\n-\n-    4.  Replacement text.  If the replacement is empty, then no\n+    3.  Replacement text.  If the replacement is empty, then no\n         fix is applied.  Otherwise, the replacement text is\n         written to the output file and no further fixes are\n         applied.  If you really want a no-op file, replace the\n         file with a comment.\n \n         Replacement text \"fixes\" must be first in this file!!\n \n-    Examples of fixes:\n-    ------------------\n+    4.  A C language subroutine method for both tests and fixes.\n+        See ``fixtests.c'' for instructions on writing C-language\n+        applicability tests and ``fixfixes.c'' for C-language fixing.\n+        These files also contain tables that describe the currently\n+        implemented fixes and tests.\n+\n+    If at all possible, you should try to use one of the C language\n+    fixes as it is far more efficient.  There are currently five\n+    such fixes, three of which are very special purpose:\n+\n+    i) char_macro_def - This function repairs the definition of an\n+        ioctl macro that presumes CPP macro substitution within\n+        pairs of single quote characters.\n+\n+    ii) char_macro_use - This function repairs the usage of ioctl\n+        macros that no longer can wrap an argument with single quotes.\n+\n+    iii) machine_name - This function will look at \"#if\", \"#ifdef\",\n+        \"#ifndef\" and \"#elif\" directive lines and replace the first\n+        occurrence of a non-reserved name that is traditionally\n+        pre-defined by the native compiler.\n+\n+    The next two are for general use:\n+\n+    iv) wrap - wraps the entire file with \"#ifndef\", \"#define\" and\n+        \"#endif\" self-exclusionary text.  It also, optionally, inserts\n+        a prolog after the \"#define\" and an epilog just before the\n+        \"#endif\".  You can use this for a fix as follows:\n+\n+            c_fix     = wrap;\n+            c_fix_arg = \"/* prolog text */\";\n+            c_fix_arg = \"/* epilog text */\";\n+\n+        If you want an epilog without a prolog, set the first \"c_fix_arg\"\n+        to the empty string.  Both or the second \"c_fix_arg\"s may be\n+        omitted and the file will still be wrapped.\n+\n+    v) format - Replaces text selected with a regular expression with\n+        a specialized formating string.  The formatting works as follows:\n+        The format text is copied to the output until a '%' character\n+        is found.  If the character after the '%' is another '%', then\n+        one '%' is output and processing continues.  If the following\n+        character is not a digit, then the '%' and that character are\n+        copied and processing continues.  Finally, if the '%' *is*\n+        followed by a digit, that digit is used as an index into the\n+        regmatch_t array to replace the two characters with the matched\n+        text.  i.e.: \"%0\" is replaced by the full matching text, \"%1\"\n+        is the first matching sub-expression, etc.\n+\n+        This is used as follows:\n+\n+            c_fix     = format;\n+            c_fix_arg = \"#ifndef %1\\n%0\\n#endif\";\n+            c_fix_arg = \"#define[ \\t]+([A-Z][A-Z0-9a-z_]*).*\";\n+\n+        This would wrap a traditional #define inside of a \"#ifndef\"/\"#endif\"\n+        pair.  The second \"c_fix_arg\" may be omitted *IF* there is\n+        a select clause and the first one matches the text you want\n+        replaced.  You may delete text by supplying an empty string for\n+        the format (the first \"c_fix_arg\").\n+\n+EXAMPLES OF FIXES:\n+==================\n \n       hackname = AAA_ki_iface;\n       replace; /* empty replacement -> no fixing the file */\n@@ -150,45 +205,23 @@ Here are the rules for making fixes in the inclhack.def file:\n \n     ------------------\n \n-      hackname = dec_intern_asm;\n-      files    = c_asm.h;\n-      sed = \"/^[ \\t]*float[ \\t]*fasm/i\\\\\\n#ifdef __DECC\\n\";\n-      sed = \"/^[ \\t]*#[ \\t]*pragma[ \\t]*intrinsic([ \\t]*dasm/a\\\\\\n\"\n-            \"#endif\\n\";\n+        hackname  = hpux11_fabsf;\n+        files     = math.h;\n+        select    = \"^[ \\t]*#[ \\t]*define[ \\t]+fabsf\\\\(.*\";\n+        bypass    = \"__cplusplus\";\n \n-    When this ``fix'' is invoked, sed will be run on the original\n-    file with two \"-e\" arguments.  Since these arguments have double\n-    quoted string values, the strings actually passed to ``sed''\n-    will have been processed in the same fashion that the C compiler\n-    processes its string specifications.  Including the concatenation\n-    of the two pieces of the second sed \"-e\" argument.\n+        c_fix     = format;\n+        c_fix_arg = \"#ifndef __cplusplus\\n%0\\n#endif\";\n \n-    ------------------\n-\n-      hackname = m88k_multi_incl;\n-      shell    =\n-        \"echo Fixing $file, to protect against multiple inclusion. >&2\n-        cpp_wrapper=`echo $file | sed -e 's,\\\\.,_,g' -e 's,/,_,g'`\n-        echo \\\"#ifndef __GCC_GOT_${cpp_wrapper}_\\\"\n-        echo \\\"#define __GCC_GOT_${cpp_wrapper}_\\\"\n-        cat\n-        echo \\\"#endif /* ! __GCC_GOT_${cpp_wrapper}_ */\\\"\";\n+        test_text =\n+        \"#  define fabsf(x) ((float)fabs((double)(float)(x)))\\n\";\n \n-    This is a shell script fix.  Note the ``cat'' without any arguments.\n-    This will drain stdin.  If the contents of the file were to be\n-    discarded, you would have to have something like ``cat > /dev/null''\n-    in the script.\n+    This fix will ensure that the #define for fabs is wrapped\n+    with C++ protection, providing the header is not already\n+    C++ aware.\n \n     ------------------\n \n-      hackname = no_double_slash;\n-      c_fix    = \"no_double_slash\";\n-\n-    This specifies a fix to be supplied via a hand coded internal\n-    function named ``no_double_slash_fix()''.  See ``fixfixes.c''\n-    for documentation on how to include new functions into that\n-    module.\n-\n 5.  Testing fixes.\n \n     The brute force method is, of course, to configure and build"}]}