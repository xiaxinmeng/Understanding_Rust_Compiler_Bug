{"sha": "71e06bdeedb1a528715bad12f1b92c07d311cfae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlMDZiZGVlZGIxYTUyODcxNWJhZDEyZjFiOTJjMDdkMzExY2ZhZQ==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-07-27T13:29:21Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-07-27T13:29:21Z"}, "message": "rely* on GCC defining the __xxx_TYPE__ macros\n\nFrom-SVN: r35288", "tree": {"sha": "e69e98e1f329b8847e02918d3e9d5fa40469cdc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69e98e1f329b8847e02918d3e9d5fa40469cdc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e06bdeedb1a528715bad12f1b92c07d311cfae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e06bdeedb1a528715bad12f1b92c07d311cfae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e06bdeedb1a528715bad12f1b92c07d311cfae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e06bdeedb1a528715bad12f1b92c07d311cfae/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e12ab9b731406758cce12e897b7aa8cbc854e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e12ab9b731406758cce12e897b7aa8cbc854e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e12ab9b731406758cce12e897b7aa8cbc854e78"}], "stats": {"total": 154, "additions": 31, "deletions": 123}, "files": [{"sha": "c53c163ad3c3131716635554906997f3218547d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71e06bdeedb1a528715bad12f1b92c07d311cfae", "patch": "@@ -1,3 +1,11 @@\n+2000-07-24  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixincl/fixfixes.c(emit_gnu_type): rewrote to *rely* on GCC\n+\tdefining the __xxx_TYPE__ macros.\n+\t* fixincl/fixincl.tpl(gnu_type_map): now obsolete\n+\t* fixincl/fixlib.h: don't need to include \"tm.h\" anymore\n+\t* fixincl/inclhack.def(type_map): now obsolete\n+\n Thu Jul 27 11:54:17 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n \n \t* cpp.texi: Append a trailing full-stop to xrefs where needed."}, {"sha": "a68699b7db29757a209c71a9109e45bcc4171006", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 21, "deletions": 75, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=71e06bdeedb1a528715bad12f1b92c07d311cfae", "patch": "@@ -136,58 +136,41 @@ emit_gnu_type ( text, rm )\n   const char* text;\n   regmatch_t* rm;\n {\n-  extern t_gnu_type_map gnu_type_map[];\n-  extern int gnu_type_map_ct;\n-\n-  const char*     pzt  = text + rm[GTYPE_SE_CT].rm_so;\n-  t_gnu_type_map* p_tm = gnu_type_map;\n-  int   ct = gnu_type_map_ct;\n+  char z_TYPE[ 64 ];\n+  char z_type[ 64 ];\n \n   fwrite (text, rm[0].rm_so, 1, stdout);\n-  text += rm[0].rm_eo;\n \n-  for (;;)\n-    {\n-      if (strncmp (pzt, p_tm->pz_type, p_tm->type_name_len) == 0)\n-        break;\n+  {\n+    const char* ps = text   + rm[1].rm_so;\n+    const char* pe = text   + rm[1].rm_eo;\n+    char* pd = z_type;\n+    char* pD = z_TYPE;\n \n-#ifdef DEBUG\n-      if (--ct <= 0)\n-        return (const char*)NULL;\n-#else\n-      if (--ct <= 0)\n-        return text;\n-#endif\n-      p_tm++;\n-    }\n+    while (ps < pe)\n+      *(pD++) = toupper( *(pd++) = *(ps++) );\n+\n+    *pD = *pd = NUL;\n+  }\n \n   /*\n-   *  Now print out the reformed typedef\n+   *  Now print out the reformed typedef,\n+   *  with a C++ guard for WCHAR\n    */\n   {\n     tSCC z_fmt[] = \"\\\n-#ifndef __%s_TYPE__\\n#define __%s_TYPE__ %s\\n#endif\\n\\\n-\\\n #if !defined(_GCC_%s_T)%s\\n\\\n-\\\n-#define _GCC_%s_T\\ntypedef __%s_TYPE__ %s_t;\\n#endif\\n\";\n+#define _GCC_%s_T\\n\\\n+typedef __%s_TYPE__ %s_t;\\n\\\n+#endif\\n\";\n \n-    const char* pz_guard;\n+    const char* pz_guard = (strcmp (z_type, \"wchar\") == 0)\n+                           ? \" && ! defined(__cplusplus)\" : \"\";\n \n-    /*\n-     *  We magically know that the first entry and only the first\n-     *  entry needs guarding against __cplusplus (it is \"wchar_t\").\n-     *  If others wind up needing similar special treatment, then\n-     *  go look into inclhack.def.  This code, obviously, works closely\n-     *  with that file  :-)\n-     */\n-    pz_guard = (p_tm == gnu_type_map) ? \" && ! defined(__cplusplus)\" : \"\";\n-    printf (z_fmt, p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_gtype,\n-            p_tm->pz_TYPE, pz_guard,\n-            p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_type);\n+    printf (z_fmt, z_TYPE, pz_guard, z_TYPE, z_TYPE, z_type);\n   }\n \n-  return text;\n+  return text += rm[0].rm_eo;\n }\n \n \n@@ -694,44 +677,7 @@ FIX_PROC_HEAD( gnu_type_fix )\n \n   while (regexec (&re, text, GTYPE_SE_CT+1, rm, 0) == 0)\n     {\n-#ifndef DEBUG\n       text = emit_gnu_type (text, rm);\n-#else\n-      tSCC z_mismatch[] = \"``%s'' mismatched:\\n\";\n-\n-      /*\n-       *  Make sure we matched *all* subexpressions\n-       */\n-      if (rm[GTYPE_SE_CT].rm_so == -1)\n-        {\n-          int i;\n-\n-          fprintf (stderr, z_mismatch, pz_pat);\n-\n-          for (i=0; i <= GTYPE_SE_CT; i++)\n-            {\n-              if (rm[i].rm_so != -1)\n-                {\n-                  fprintf( stderr, \"%4d:  ``\", i );\n-                  fwrite( text + rm[i].rm_so, rm[i].rm_eo - rm[i].rm_so,\n-                          1, stderr );\n-                  fputs( \"''\\n\", stderr );\n-                }\n-              else\n-                {\n-                  fprintf( stderr, \"%4d:  BROKEN\\n\", i );\n-                }\n-            }\n-          exit (EXIT_BROKEN);\n-        }\n-\n-      text = emit_gnu_type (text, rm);\n-      if (text == NULL)\n-        {\n-          fprintf (stderr, z_mismatch, pz_pat);\n-          exit (EXIT_BROKEN);\n-        }\n-#endif\n     }\n \n   /*"}, {"sha": "a68dec85cac154d39b3855e6463792661ccdd70a", "filename": "gcc/fixinc/fixincl.tpl", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.tpl?ref=71e06bdeedb1a528715bad12f1b92c07d311cfae", "patch": "@@ -203,22 +203,3 @@ _FOR fix \",\\n\" =]\n \n /fix=]\n };\n-\n-#define GNU_TYPE_CT [=_eval type_map _count =]\n-int gnu_type_map_ct = GNU_TYPE_CT;\n-\n-/*\n- *  The following table depends upon XXX_TYPE being #define-d to the\n- *  correct string via defines in a header file pointed to by the\n- *  generated file \"tm.h\".\n- */\n-t_gnu_type_map gnu_type_map[ GNU_TYPE_CT ] = {[=\n-\n-_FOR type_map ,\n-\n-=]\n-  { [=_EVAL type_map _len=], \"[=type_map=]\", \"[=type_map _up=]\", [=\n-  type_map _up=]_TYPE }[=\n-\n-/type_map=]\n-};"}, {"sha": "e5b59a88364162bbc25db7f4a02c9a3ccb4ca9c4", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=71e06bdeedb1a528715bad12f1b92c07d311cfae", "patch": "@@ -5795,17 +5795,3 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      X11_SPRINTF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aX11_SprintfTests,   apzX11_SprintfPatch }\n };\n-\n-#define GNU_TYPE_CT 3\n-int gnu_type_map_ct = GNU_TYPE_CT;\n-\n-/*\n- *  The following table depends upon XXX_TYPE being #define-d to the\n- *  correct string via defines in a header file pointed to by the\n- *  generated file \"tm.h\".\n- */\n-t_gnu_type_map gnu_type_map[ GNU_TYPE_CT ] = {\n-  { 5, \"wchar\", \"WCHAR\", WCHAR_TYPE },\n-  { 7, \"ptrdiff\", \"PTRDIFF\", PTRDIFF_TYPE },\n-  { 4, \"size\", \"SIZE\", SIZE_TYPE }\n-};"}, {"sha": "7a110860e87bc1d7a65d62e4c41b44d5316b9f57", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=71e06bdeedb1a528715bad12f1b92c07d311cfae", "patch": "@@ -33,8 +33,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"machname.h\"\n #include \"libiberty.h\"\n \n-#include \"tm.h\"\n-\n #ifndef STDIN_FILENO\n # define STDIN_FILENO   0\n #endif\n@@ -149,7 +147,8 @@ typedef struct patch_desc tPatchDesc;\n     a particular fix (which files, how to qualify them,\n     how to actually make the fix, etc...)\n \n-    NB:  the FD_ defines are BIT FLAGS\n+    NB:  the FD_ defines are BIT FLAGS, even though\n+         some are mutually exclusive\n \n     */\n #define FD_MACH_ONLY      0x0000"}, {"sha": "f040130a588a3a6d868796f06467be3d2fef5932", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e06bdeedb1a528715bad12f1b92c07d311cfae/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=71e06bdeedb1a528715bad12f1b92c07d311cfae", "patch": "@@ -2519,14 +2519,6 @@ fix = {\n \n /*\n  * Fix these files to use the same types that we think they should.\n- * Each type must be present in two places:  the select clause\n- * and a \"type_map\" entry below.  The types mapped to are found from\n- * the \"tm.h\" header, which is a generated file that refers to\n- * a header in the gcc/config/ tree.  Keep these in sync!!\n- *\n- * Also, \"wchar\" is first and known to need guarding against __cplusplus.\n- * Keep *that* in mind, too, when hacking the gnu_type_fix routine\n- * in fixfixes.c.\n  */\n fix = {\n     hackname  = gnu_types;\n@@ -2545,10 +2537,6 @@ fix = {\n                 \"typedef ushort_t wchar_t; /* ushort_t */\";\n };\n \n-type_map = wchar;\n-type_map = ptrdiff;\n-type_map = size;\n-\n \n /*\n  *  Fix return value of mem{ccpy,chr,cpy,set} and str{len,spn,cspn}"}]}