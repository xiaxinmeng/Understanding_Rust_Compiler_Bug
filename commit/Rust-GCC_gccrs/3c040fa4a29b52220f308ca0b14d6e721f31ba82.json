{"sha": "3c040fa4a29b52220f308ca0b14d6e721f31ba82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MwNDBmYTRhMjliNTIyMjBmMzA4Y2EwYjE0ZDZlNzIxZjMxYmE4Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-07-31T17:08:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-07-31T17:08:52Z"}, "message": "libstdc++/72745 add static assertion for invalid tuple access\n\n\tPR libstdc++/72745\n\t* include/std/array (get): Use positive message for static assertions.\n\t* include/std/functional (_Safe_tuple_element_t): Fix indentation.\n\t* include/std/tuple (tuple_element<I, tuple<>>): Add partial\n\tspecialization for invalid indices, with static assertion.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: New test.\n\nFrom-SVN: r238924", "tree": {"sha": "cd212317232614b40be7551e82f1bddfa39cf65a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd212317232614b40be7551e82f1bddfa39cf65a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c040fa4a29b52220f308ca0b14d6e721f31ba82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c040fa4a29b52220f308ca0b14d6e721f31ba82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c040fa4a29b52220f308ca0b14d6e721f31ba82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c040fa4a29b52220f308ca0b14d6e721f31ba82/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f245e3a0ee9bc8a32a2adcc656fa5bd5236b8aca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f245e3a0ee9bc8a32a2adcc656fa5bd5236b8aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f245e3a0ee9bc8a32a2adcc656fa5bd5236b8aca"}], "stats": {"total": 110, "additions": 94, "deletions": 16}, "files": [{"sha": "b79a4053afd585410627b4e8adfed4b8c127a85b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c040fa4a29b52220f308ca0b14d6e721f31ba82", "patch": "@@ -1,5 +1,12 @@\n 2016-07-31  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/72745\n+\t* include/std/array (get): Use positive message for static assertions.\n+\t* include/std/functional (_Safe_tuple_element_t): Fix indentation.\n+\t* include/std/tuple (tuple_element<I, tuple<>>): Add partial\n+\tspecialization for invalid indices, with static assertion.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: New test.\n+\n \t* testsuite/20_util/duration/requirements/typedefs_neg3.cc: Move\n \tdg-error to relevant line.\n \t* testsuite/20_util/headers/type_traits/types_std_c++0x_neg.cc:"}, {"sha": "73a6fbce4f32362c9ad838a75deb47f968d8875b", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=3c040fa4a29b52220f308ca0b14d6e721f31ba82", "patch": "@@ -292,7 +292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     constexpr _Tp&\n     get(array<_Tp, _Nm>& __arr) noexcept\n     {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      static_assert(_Int < _Nm, \"array index is within bounds\");\n       return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n \t_S_ref(__arr._M_elems, _Int);\n     }\n@@ -301,15 +301,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     constexpr _Tp&&\n     get(array<_Tp, _Nm>&& __arr) noexcept\n     {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      static_assert(_Int < _Nm, \"array index is within bounds\");\n       return std::move(_GLIBCXX_STD_C::get<_Int>(__arr));\n     }\n \n   template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n     constexpr const _Tp&\n     get(const array<_Tp, _Nm>& __arr) noexcept\n     {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n+      static_assert(_Int < _Nm, \"array index is within bounds\");\n       return _GLIBCXX_STD_C::__array_traits<_Tp, _Nm>::\n \t_S_ref(__arr._M_elems, _Int);\n     }"}, {"sha": "700505e8f249d4b34e7ab542384be73f555d9e4d", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=3c040fa4a29b52220f308ca0b14d6e721f31ba82", "patch": "@@ -758,10 +758,10 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \n \n   // Like tuple_element_t but SFINAE-friendly.\n- template<std::size_t __i, typename _Tuple>\n-   using _Safe_tuple_element_t\n-     = typename enable_if<(__i < tuple_size<_Tuple>::value),\n-\t\t\t  tuple_element<__i, _Tuple>>::type::type;\n+  template<std::size_t __i, typename _Tuple>\n+    using _Safe_tuple_element_t\n+      = typename enable_if<(__i < tuple_size<_Tuple>::value),\n+\t\t\t   tuple_element<__i, _Tuple>>::type::type;\n \n   /**\n    *  Maps an argument to bind() into an actual argument to the bound"}, {"sha": "484cb4822f24a727ab7e00c66905035fb607a50b", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=3c040fa4a29b52220f308ca0b14d6e721f31ba82", "patch": "@@ -1243,6 +1243,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n \n+  /// class tuple_size\n+  template<typename... _Elements>\n+    struct tuple_size<tuple<_Elements...>>\n+    : public integral_constant<std::size_t, sizeof...(_Elements)> { };\n+\n+#if __cplusplus > 201402L\n+  template <typename _Tp>\n+    constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n+#endif\n+\n   /**\n    * Recursive case for tuple_element: strip off the first element in\n    * the tuple and retrieve the (i-1)th element of the remaining tuple.\n@@ -1260,15 +1270,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Head type;\n     };\n \n-  /// class tuple_size\n-  template<typename... _Elements>\n-    struct tuple_size<tuple<_Elements...>>\n-    : public integral_constant<std::size_t, sizeof...(_Elements)> { };\n-\n-#if __cplusplus > 201402L\n-  template <typename _Tp>\n-    constexpr size_t tuple_size_v = tuple_size<_Tp>::value;\n-#endif\n+  /**\n+   * Error case for tuple_element: invalid index.\n+   */\n+  template<size_t __i>\n+    struct tuple_element<__i, tuple<>>\n+    {\n+      static_assert(__i < tuple_size<tuple<>>::value,\n+\t  \"tuple index is in range\");\n+    };\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n     constexpr _Head&"}, {"sha": "95ff697ae7a7ccf98df1c3cd3e110ae37584a8fd", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c040fa4a29b52220f308ca0b14d6e721f31ba82/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=3c040fa4a29b52220f308ca0b14d6e721f31ba82", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-fno-show-column\" }\n+// { dg-do compile { target c++14 } }\n+// { dg-error \"in range\" \"\" { target *-*-* } 1279 }\n+\n+#include <tuple>\n+\n+void\n+test01()\n+{\n+  using test_type = std::tuple<>;\n+  test_type t;\n+  std::get<0>(t);\t\t\t\t// { dg-error \"no match\" }\n+  std::get<0>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n+  std::get<0>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+  std::get<5>(t);\t\t\t\t// { dg-error \"no match\" }\n+  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n+  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+}\n+\n+void\n+test02()\n+{\n+  using test_type = std::tuple<int>;\n+  test_type t;\n+  std::get<1>(t);\t\t\t\t// { dg-error \"no match\" }\n+  std::get<1>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n+  std::get<1>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+  std::get<5>(t);\t\t\t\t// { dg-error \"no match\" }\n+  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n+  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+}\n+\n+void\n+test03()\n+{\n+  using test_type = std::tuple<int, int, int, int>;\n+  test_type t;\n+  std::get<5>(t);\t\t\t\t// { dg-error \"no match\" }\n+  std::get<5>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n+  std::get<5>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+  std::get<6>(t);\t\t\t\t// { dg-error \"no match\" }\n+  std::get<6>(const_cast<const test_type&>(t));\t// { dg-error \"no match\" }\n+  std::get<6>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n+}"}]}