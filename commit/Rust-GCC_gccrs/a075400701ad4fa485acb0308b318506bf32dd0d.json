{"sha": "a075400701ad4fa485acb0308b318506bf32dd0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA3NTQwMDcwMWFkNGZhNDg1YWNiMDMwOGIzMTg1MDZiZjMyZGQwZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-12-16T05:01:38Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-12-16T05:01:38Z"}, "message": "struct-layout-encoding-1_generate.c (base_types): Change C++ style comments to C style comments.\n\n2005-12-16  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * objc.dg/gnu-encoding/struct-layout-encoding-1_generate.c (base_types):\n        Change C++ style comments to C style comments.\n        Remove aligned types from the array.\n        Keep Enums disabled.\n        (complex_types): Remove aligned types from the array.\n        Comment out \"_Complex long double\".\n        (attrib_types): Remove.\n        (complex_attrib_types): Remove.\n        (attrib_array_types): Remove.\n        (complex_attrib_array_types): Remove.\n        (aligned_bitfld_types): Remove.\n        (n_aligned_bitfld_types): Remove.\n        (FEATURE_ALIGNEDPACKED): Delete.\n        (ALL_FEATURES): Remove FEATURE_ALIGNEDPACKED.\n        (singles): Remove support for adding attributes.\n        (choose_type): Remove support for attributed types.\n        (generate_fields): Remove support for attributed bit-fields.\n        Remove support for adding attributes.\n        (generate_random_tests): Remove support for adding attributes.\n        (features): Add back \"[0] :0\" and \"complex vector [0]\".\n        (main): Remove support for attributed bit-fields.\n        Uncomment the calling of generate_random_tests for the rests of\n        the tests.\n\nFrom-SVN: r108623", "tree": {"sha": "9b6b85c5c14c8f65d756be4397657a8ddcb89852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b6b85c5c14c8f65d756be4397657a8ddcb89852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a075400701ad4fa485acb0308b318506bf32dd0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a075400701ad4fa485acb0308b318506bf32dd0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a075400701ad4fa485acb0308b318506bf32dd0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a075400701ad4fa485acb0308b318506bf32dd0d/comments", "author": null, "committer": null, "parents": [{"sha": "6d7f0973defffd092202e7c9711738b16caed540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7f0973defffd092202e7c9711738b16caed540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7f0973defffd092202e7c9711738b16caed540"}], "stats": {"total": 644, "additions": 38, "deletions": 606}, "files": [{"sha": "6662c2eaffa0e7434b7f6fd4304f7d443e1f93f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a075400701ad4fa485acb0308b318506bf32dd0d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a075400701ad4fa485acb0308b318506bf32dd0d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a075400701ad4fa485acb0308b318506bf32dd0d", "patch": "@@ -1,3 +1,29 @@\n+2005-12-16  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* objc.dg/gnu-encoding/struct-layout-encoding-1_generate.c (base_types):\n+\tChange C++ style comments to C style comments.\n+\tRemove aligned types from the array.\n+\tKeep Enums disabled.\n+\t(complex_types): Remove aligned types from the array.\n+\tComment out \"_Complex long double\".\n+\t(attrib_types): Remove.\n+\t(complex_attrib_types): Remove.\n+\t(attrib_array_types): Remove.\n+\t(complex_attrib_array_types): Remove.\n+\t(aligned_bitfld_types): Remove.\n+\t(n_aligned_bitfld_types): Remove.\n+\t(FEATURE_ALIGNEDPACKED): Delete.\n+\t(ALL_FEATURES): Remove FEATURE_ALIGNEDPACKED.\n+\t(singles): Remove support for adding attributes.\n+\t(choose_type): Remove support for attributed types.\n+\t(generate_fields): Remove support for attributed bit-fields.\n+\tRemove support for adding attributes.\n+\t(generate_random_tests): Remove support for adding attributes.\n+\t(features): Add back \"[0] :0\" and \"complex vector [0]\".\n+\t(main): Remove support for attributed bit-fields.\n+\tUncomment the calling of generate_random_tests for the rests of\n+\tthe tests.\n+\n 2005-12-16  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/combine/pr25224.c: New."}, {"sha": "4ed33d554c297e5d18e221808d40301cbc2ec174", "filename": "gcc/testsuite/objc.dg/gnu-encoding/struct-layout-encoding-1_generate.c", "status": "modified", "additions": 12, "deletions": 606, "changes": 618, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a075400701ad4fa485acb0308b318506bf32dd0d/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fstruct-layout-encoding-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a075400701ad4fa485acb0308b318506bf32dd0d/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fstruct-layout-encoding-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-encoding%2Fstruct-layout-encoding-1_generate.c?ref=a075400701ad4fa485acb0308b318506bf32dd0d", "patch": "@@ -81,32 +81,10 @@ struct types base_types[] = {\n { \"int *\", TYPE_PTR, 0, 0 },\n { \"float\", TYPE_FLOAT, 0, 0 },\n { \"double\", TYPE_FLOAT, 0, 0 },\n-//{ \"long double\", TYPE_FLOAT, 0, 0 }, //disabled as double and long double are encoded thee same\n-// currently\n+/*{ \"long double\", TYPE_FLOAT, 0, 0 },*/\n+/* Disabled as double and long double\n+   are encoded thee same, currently  */\n #define NTYPES1 16\n-/* objc encoding does not handle attributes at all.   */\n-#if 0\n-{ \"Tchar\", TYPE_UINT, 127, 'C' },\n-{ \"Tschar\", TYPE_INT, 127, 'C' },\n-{ \"Tuchar\", TYPE_UINT, 255, 'C' },\n-{ \"Tshort\", TYPE_INT, 32767, 'S' },\n-{ \"Tushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Tint\", TYPE_INT, 2147483647, 'I' },\n-{ \"Tuint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tlong\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Tulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Tllong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Tullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Tbool\", TYPE_UINT, 1, 'B' },\n-{ \"size_t\", TYPE_UINT, 18446744073709551615ULL, 0 },\n-{ \"Tptr\", TYPE_PTR, 0, 0 },\n-{ \"Tcptr\", TYPE_PTR, 0, 0 },\n-{ \"Tiptr\", TYPE_PTR, 0, 0 },\n-{ \"Tfnptr\", TYPE_FNPTR, 0, 0 },\n-{ \"Tfloat\", TYPE_FLOAT, 0, 0 },\n-{ \"Tdouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Tldouble\", TYPE_FLOAT, 0, 0 },\n-#endif\n #if 0\n /* enums are disabled for now as it seems like their encoding is broken, we should\n    just encode them using their underlaying type but we don't.   */\n@@ -120,25 +98,6 @@ struct types base_types[] = {\n { \"enum E7\", TYPE_SENUM, 2147483647, ' ' },\n { \"enum E8\", TYPE_UENUM, 4294967295U, ' ' },\n { \"enum E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"TE0\", TYPE_UENUM, 0, ' ' },\n-{ \"TE1\", TYPE_UENUM, 1, ' ' },\n-{ \"TE2\", TYPE_SENUM, 3, ' ' },\n-{ \"TE3\", TYPE_SENUM, 127, ' ' },\n-{ \"TE4\", TYPE_UENUM, 255, ' ' },\n-{ \"TE5\", TYPE_SENUM, 32767, ' ' },\n-{ \"TE6\", TYPE_UENUM, 65535, ' ' },\n-{ \"TE7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"TE8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"TE9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-#endif\n-#if 0\n-/* vector-defs.h typedefs */\n-{ \"qi\", TYPE_INT, 127, 0 },\n-{ \"hi\", TYPE_INT, 32767, 0 },\n-{ \"si\", TYPE_INT, 2147483647, 0 },\n-{ \"di\", TYPE_INT, 9223372036854775807LL, 0 },\n-{ \"sf\", TYPE_FLOAT, 0, 0 },\n-{ \"df\", TYPE_FLOAT, 0, 0 }\n #endif\n #define NTYPES2 (sizeof (base_types) / sizeof (base_types[0]))\n };\n@@ -156,21 +115,8 @@ struct types complex_types[] = {\n { \"_Complex unsigned long long int\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n { \"_Complex float\", TYPE_CFLOAT, 0, 0 },\n { \"_Complex double\", TYPE_CFLOAT, 0, 0 },\n-{ \"_Complex long double\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tcchar\", TYPE_CUINT, 127, 0 },\n-{ \"Tcschar\", TYPE_CINT, 127, 0 },\n-{ \"Tcuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Tcshort\", TYPE_CINT, 32767, 0 },\n-{ \"Tcushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Tcint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Tcuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Tclong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tculong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tcllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tcullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tcfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tcdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tcldouble\", TYPE_CFLOAT, 0, 0 }\n+/*{ \"_Complex long double\", TYPE_CFLOAT, 0, 0 }, */\n+/* Disable until long doubles are encoded correctly.   */\n #define NCTYPES2 (sizeof (complex_types) / sizeof (complex_types[0]))\n };\n struct types vector_types[] = {\n@@ -205,448 +151,9 @@ struct types vector_types[] = {\n { \"__m128\", TYPE_OTHER, 0, 0 }\n #define NVTYPES2 (sizeof (vector_types) / sizeof (vector_types[0]))\n };\n-struct types attrib_types[] = {\n-#if 0\n-{ \"Talchar\", TYPE_UINT, 127, 'C' },\n-{ \"Talschar\", TYPE_INT, 127, 'C' },\n-{ \"Taluchar\", TYPE_UINT, 255, 'C' },\n-{ \"Talshort\", TYPE_INT, 32767, 'S' },\n-{ \"Talushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Talint\", TYPE_INT, 2147483647, 'I' },\n-{ \"Taluint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tallong\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Talulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Talllong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Talullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Talbool\", TYPE_UINT, 1, 'B' },\n-{ \"Talptr\", TYPE_PTR, 0, 0 },\n-{ \"Talcptr\", TYPE_PTR, 0, 0 },\n-{ \"Taliptr\", TYPE_PTR, 0, 0 },\n-{ \"Talfloat\", TYPE_FLOAT, 0, 0 },\n-{ \"Taldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Talldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"TalE0\", TYPE_UENUM, 0, ' ' },\n-{ \"TalE1\", TYPE_UENUM, 1, ' ' },\n-{ \"TalE2\", TYPE_SENUM, 3, ' ' },\n-{ \"TalE3\", TYPE_SENUM, 127, ' ' },\n-{ \"TalE4\", TYPE_UENUM, 255, ' ' },\n-{ \"TalE5\", TYPE_SENUM, 32767, ' ' },\n-{ \"TalE6\", TYPE_UENUM, 65535, ' ' },\n-{ \"TalE7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"TalE8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"TalE9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Tal1char\", TYPE_UINT, 127, 'C' },\n-{ \"Tal1schar\", TYPE_INT, 127, 'C' },\n-{ \"Tal1uchar\", TYPE_UINT, 255, 'C' },\n-{ \"Tal1short\", TYPE_INT, 32767, 'S' },\n-{ \"Tal1ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Tal1int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Tal1uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tal1long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Tal1ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Tal1llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Tal1ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Tal1bool\", TYPE_UINT, 1, 'B' },\n-{ \"Tal1ptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal1cptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal1iptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal1float\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal1double\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal1ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal1E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Tal1E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Tal1E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Tal1E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Tal1E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Tal1E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Tal1E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Tal1E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Tal1E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Tal1E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Tal2char\", TYPE_UINT, 127, 'C' },\n-{ \"Tal2schar\", TYPE_INT, 127, 'C' },\n-{ \"Tal2uchar\", TYPE_UINT, 255, 'C' },\n-{ \"Tal2short\", TYPE_INT, 32767, 'S' },\n-{ \"Tal2ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Tal2int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Tal2uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tal2long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Tal2ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Tal2llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Tal2ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Tal2bool\", TYPE_UINT, 1, 'B' },\n-{ \"Tal2ptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal2cptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal2iptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal2float\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal2double\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal2ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal2E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Tal2E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Tal2E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Tal2E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Tal2E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Tal2E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Tal2E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Tal2E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Tal2E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Tal2E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Tal4char\", TYPE_UINT, 127, 'C' },\n-{ \"Tal4schar\", TYPE_INT, 127, 'C' },\n-{ \"Tal4uchar\", TYPE_UINT, 255, 'C' },\n-{ \"Tal4short\", TYPE_INT, 32767, 'S' },\n-{ \"Tal4ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Tal4int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Tal4uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tal4long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Tal4ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Tal4llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Tal4ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Tal4bool\", TYPE_UINT, 1, 'B' },\n-{ \"Tal4ptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal4cptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal4iptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal4float\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal4double\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal4ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal4E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Tal4E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Tal4E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Tal4E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Tal4E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Tal4E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Tal4E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Tal4E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Tal4E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Tal4E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Tal8char\", TYPE_UINT, 127, 'C' },\n-{ \"Tal8schar\", TYPE_INT, 127, 'C' },\n-{ \"Tal8uchar\", TYPE_UINT, 255, 'C' },\n-{ \"Tal8short\", TYPE_INT, 32767, 'S' },\n-{ \"Tal8ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Tal8int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Tal8uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tal8long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Tal8ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Tal8llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Tal8ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Tal8bool\", TYPE_UINT, 1, 'B' },\n-{ \"Tal8ptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal8cptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal8iptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal8float\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal8double\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal8ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal8E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Tal8E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Tal8E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Tal8E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Tal8E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Tal8E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Tal8E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Tal8E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Tal8E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Tal8E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Tal16char\", TYPE_UINT, 127, 'C' },\n-{ \"Tal16schar\", TYPE_INT, 127, 'C' },\n-{ \"Tal16uchar\", TYPE_UINT, 255, 'C' },\n-{ \"Tal16short\", TYPE_INT, 32767, 'S' },\n-{ \"Tal16ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Tal16int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Tal16uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Tal16long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Tal16ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Tal16llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Tal16ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Tal16bool\", TYPE_UINT, 1, 'B' },\n-{ \"Tal16ptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal16cptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal16iptr\", TYPE_PTR, 0, 0 },\n-{ \"Tal16float\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal16double\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal16ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Tal16E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Tal16E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Tal16E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Tal16E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Tal16E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Tal16E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Tal16E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Tal16E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Tal16E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Tal16E9\", TYPE_SENUM, 1099511627775LL, ' ' }\n-#endif\n-#define NATYPES2 (sizeof (attrib_types) / sizeof (attrib_types[0]))\n-};\n-struct types complex_attrib_types[] = {\n-#if 0\n-{ \"Talcchar\", TYPE_CUINT, 127, 0 },\n-{ \"Talcschar\", TYPE_CINT, 127, 0 },\n-{ \"Talcuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Talcshort\", TYPE_CINT, 32767, 0 },\n-{ \"Talcushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Talcint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Talcuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Talclong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talculong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talcllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talcullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talcfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talcdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talcldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal1cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Tal1cschar\", TYPE_CINT, 127, 0 },\n-{ \"Tal1cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Tal1cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Tal1cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Tal1cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Tal1cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Tal1clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal1culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal1cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal1cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal1cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal1cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal1cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal2cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Tal2cschar\", TYPE_CINT, 127, 0 },\n-{ \"Tal2cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Tal2cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Tal2cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Tal2cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Tal2cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Tal2clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal2culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal2cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal2cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal2cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal2cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal2cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal4cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Tal4cschar\", TYPE_CINT, 127, 0 },\n-{ \"Tal4cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Tal4cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Tal4cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Tal4cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Tal4cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Tal4clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal4culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal4cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal4cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal4cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal4cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal4cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal8cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Tal8cschar\", TYPE_CINT, 127, 0 },\n-{ \"Tal8cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Tal8cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Tal8cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Tal8cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Tal8cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Tal8clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal8culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal8cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal8cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal8cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal8cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal8cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal16cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Tal16cschar\", TYPE_CINT, 127, 0 },\n-{ \"Tal16cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Tal16cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Tal16cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Tal16cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Tal16cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Tal16clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal16culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal16cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Tal16cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Tal16cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal16cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Tal16cldouble\", TYPE_CFLOAT, 0, 0 }\n-#endif\n-#define NCATYPES2 (sizeof (complex_attrib_types) / sizeof (complex_attrib_types[0]))\n-};\n-struct types attrib_array_types[] = {\n-#if 0\n-{ \"Talx1char\", TYPE_UINT, 127, 'C' },\n-{ \"Talx1schar\", TYPE_INT, 127, 'C' },\n-{ \"Talx1uchar\", TYPE_UINT, 255, 'C' },\n-{ \"Talx1short\", TYPE_INT, 32767, 'S' },\n-{ \"Talx1ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Talx1int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Talx1uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Talx1long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Talx1ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Talx1llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Talx1ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Talx1bool\", TYPE_UINT, 1, 'B' },\n-{ \"Talx1ptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx1cptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx1iptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx1float\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx1double\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx1ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx1E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Talx1E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Talx1E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Talx1E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Talx1E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Talx1E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Talx1E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Talx1E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Talx1E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Talx1E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Talx2short\", TYPE_INT, 32767, 'S' },\n-{ \"Talx2ushort\", TYPE_UINT, 65535, 'S' },\n-{ \"Talx2int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Talx2uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Talx2long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Talx2ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Talx2llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Talx2ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Talx2ptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx2cptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx2iptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx2float\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx2double\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx2ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx2E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Talx2E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Talx2E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Talx2E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Talx2E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Talx2E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Talx2E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Talx2E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Talx2E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Talx2E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Talx4int\", TYPE_INT, 2147483647, 'I' },\n-{ \"Talx4uint\", TYPE_UINT, 4294967295U, 'I' },\n-{ \"Talx4long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Talx4ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Talx4llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Talx4ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Talx4ptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx4cptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx4iptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx4float\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx4double\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx4ldouble\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx4E0\", TYPE_UENUM, 0, ' ' },\n-{ \"Talx4E1\", TYPE_UENUM, 1, ' ' },\n-{ \"Talx4E2\", TYPE_SENUM, 3, ' ' },\n-{ \"Talx4E3\", TYPE_SENUM, 127, ' ' },\n-{ \"Talx4E4\", TYPE_UENUM, 255, ' ' },\n-{ \"Talx4E5\", TYPE_SENUM, 32767, ' ' },\n-{ \"Talx4E6\", TYPE_UENUM, 65535, ' ' },\n-{ \"Talx4E7\", TYPE_SENUM, 2147483647, ' ' },\n-{ \"Talx4E8\", TYPE_UENUM, 4294967295U, ' ' },\n-{ \"Talx4E9\", TYPE_SENUM, 1099511627775LL, ' ' },\n-{ \"Taly8long\", TYPE_INT, 9223372036854775807LL, 'L' },\n-{ \"Taly8ulong\", TYPE_UINT, 18446744073709551615ULL, 'L' },\n-{ \"Talx8llong\", TYPE_INT, 9223372036854775807LL, 'Q' },\n-{ \"Talx8ullong\", TYPE_UINT, 18446744073709551615ULL, 'Q' },\n-{ \"Taly8ptr\", TYPE_PTR, 0, 0 },\n-{ \"Taly8cptr\", TYPE_PTR, 0, 0 },\n-{ \"Taly8iptr\", TYPE_PTR, 0, 0 },\n-{ \"Talx8double\", TYPE_FLOAT, 0, 0 },\n-{ \"Talx8ldouble\", TYPE_FLOAT, 0, 0 }\n-#endif\n-#define NAATYPES2 (sizeof (attrib_array_types) / sizeof (attrib_array_types[0]))\n-};\n-struct types complex_attrib_array_types[] = {\n-#if 0\n-{ \"Talx1cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Talx1cschar\", TYPE_CINT, 127, 0 },\n-{ \"Talx1cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Talx1cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Talx1cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Talx1cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Talx1cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Talx1clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx1culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx1cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx1cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx1cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx1cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx1cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx2cchar\", TYPE_CUINT, 127, 0 },\n-{ \"Talx2cschar\", TYPE_CINT, 127, 0 },\n-{ \"Talx2cuchar\", TYPE_CUINT, 255, 0 },\n-{ \"Talx2cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Talx2cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Talx2cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Talx2cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Talx2clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx2culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx2cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx2cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx2cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx2cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx2cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx4cshort\", TYPE_CINT, 32767, 0 },\n-{ \"Talx4cushort\", TYPE_CUINT, 65535, 0 },\n-{ \"Talx4cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Talx4cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Talx4clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx4culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx4cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx4cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx4cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx4cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx4cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx8cint\", TYPE_CINT, 2147483647, 0 },\n-{ \"Talx8cuint\", TYPE_CUINT, 4294967295U, 0 },\n-{ \"Talx8clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx8culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx8cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx8cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx8cfloat\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx8cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx8cldouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Taly16clong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Taly16culong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx16cllong\", TYPE_CINT, 9223372036854775807LL, 0 },\n-{ \"Talx16cullong\", TYPE_CUINT, 18446744073709551615ULL, 0 },\n-{ \"Talx16cdouble\", TYPE_CFLOAT, 0, 0 },\n-{ \"Talx16cldouble\", TYPE_CFLOAT, 0, 0 }\n-#endif\n-#define NCAATYPES2 (sizeof (complex_attrib_array_types) / sizeof (complex_attrib_array_types[0]))\n-};\n \n struct types bitfld_types[NTYPES2];\n int n_bitfld_types;\n-struct types aligned_bitfld_types[NATYPES2];\n-int n_aligned_bitfld_types;\n-\n-const char *attributes[] = {\n-#if 0\n-\"atal\", \n-\"atpa\", \n-\"atal1\", \n-\"atal2\", \n-\"atal4\", \n-\"atal8\", \n-\"atal16\", \n-#endif\n-#define NATTRIBS1 0\n-#if 0\n-\"atalpa\", \n-\"atpaal\", \n-\"atal1pa\", \n-\"atal2pa\", \n-\"atal4pa\", \n-\"atal8pa\", \n-\"atal16pa\", \n-\"atpaal1\", \n-\"atpaal2\", \n-\"atpaal4\", \n-\"atpaal8\", \n-\"atpaal16\"\n-#endif\n-#define NATTRIBS2 (sizeof (attributes) / sizeof (attributes[0]))\n-};\n \n enum ETYPE\n {\n@@ -1399,11 +906,10 @@ enum FEATURE\n {\n   FEATURE_VECTOR = 1,\n   FEATURE_COMPLEX = 2,\n-  FEATURE_ALIGNEDPACKED = 4,\n   FEATURE_ZEROARRAY = 8,\n   FEATURE_ZEROBITFLD = 16,\n   ALL_FEATURES = FEATURE_COMPLEX | FEATURE_VECTOR | FEATURE_ZEROARRAY\n-\t\t | FEATURE_ALIGNEDPACKED | FEATURE_ZEROBITFLD\n+\t\t | FEATURE_ZEROBITFLD\n };\n \n void\n@@ -1416,16 +922,6 @@ singles (enum FEATURE features)\n   output (e);\n   e[0].etype = ETYPE_UNION;\n   output (e);\n-  for (i = 0;\n-       i < ((features & FEATURE_ALIGNEDPACKED) ? NATTRIBS2 : NATTRIBS1);\n-       ++i)\n-    {\n-      e[0].attrib = attributes[i];\n-      e[0].etype = ETYPE_STRUCT;\n-      output (e);\n-      e[0].etype = ETYPE_UNION;\n-      output (e);\n-    }\n   e[0].len = 1;\n   e[0].attrib = NULL;\n   for (i = 0; i < NTYPES2; ++i)\n@@ -1469,21 +965,6 @@ choose_type (enum FEATURE features, struct entry *e, int r, int in_array)\n     i += NCTYPES2;\n   if (features & FEATURE_VECTOR)\n     i += NVTYPES2;\n-  if ((r & 3) == 0)\n-    {\n-      if (in_array)\n-\t{\n-\t  i += NAATYPES2;\n-\t  if (features & FEATURE_COMPLEX)\n-\t    i += NCAATYPES2;\n-\t}\n-      else\n-\t{\n-\t  i += NATYPES2;\n-\t  if (features & FEATURE_COMPLEX)\n-\t    i += NCATYPES2;\n-\t}\n-    }\n   r >>= 2;\n   r %= i;\n   if (r < NTYPES2 - NTYPES1)\n@@ -1501,31 +982,7 @@ choose_type (enum FEATURE features, struct entry *e, int r, int in_array)\n \te->type = &vector_types[r];\n       r -= NVTYPES2;\n     }\n-  if (e->type == NULL && !in_array)\n-    {\n-      if (r < NATYPES2)\n-\te->type = &attrib_types[r];\n-      r -= NATYPES2;\n-    }\n-  if (e->type == NULL && !in_array && (features & FEATURE_COMPLEX))\n-    {\n-      if (r < NCATYPES2)\n-\te->type = &complex_attrib_types[r];\n-      r -= NCATYPES2;\n-    }\n-  if (e->type == NULL && in_array)\n-    {\n-      if (r < NAATYPES2)\n-\te->type = &attrib_array_types[r];\n-      r -= NAATYPES2;\n-    }\n-  if (e->type == NULL && in_array && (features & FEATURE_COMPLEX))\n-    {\n-      if (r < NCAATYPES2)\n-\te->type = &complex_attrib_array_types[r];\n-      r -= NCAATYPES2;\n-    }\n-  if (e->type == NULL)\n+    if (e->type == NULL)\n     abort ();\n }\n \n@@ -1562,7 +1019,7 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n       incr = 1;\n       switch (i)\n \t{\n-\tcase 6: /* BITfields disabled for now. */\n+\tcase 6: /* BITfields disabled for now as _Bool bitfields are broken. */\n \tcase 0:\n \tcase 1:\n \tcase 2:\n@@ -1631,15 +1088,9 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n \t      e[j].etype = ETYPE_BITFLD;\n \t      if (j == n || !sametype)\n \t\t{\n-\t\t  int k;\n \t\t  r = generate_random ();\n-\t\t  k = r & 3;\n \t\t  r >>= 2;\n-\t\t  if (!k)\n-\t\t    e[j].type\n-\t\t      = &aligned_bitfld_types[r % n_aligned_bitfld_types];\n-\t\t  else\n-\t\t    e[j].type\n+\t\t  e[j].type\n \t\t      = &bitfld_types[r % n_bitfld_types];\n \t\t}\n \t      else\n@@ -1744,35 +1195,6 @@ generate_fields (enum FEATURE features, struct entry *e, struct entry *parent,\n \t    }\n \t  break;\n \t}\n-      r = generate_random ();\n-      if (0 && (r & 7) == 0)\n-\t{\n-\t  r >>= 3;\n-\t  i = (features & FEATURE_ALIGNEDPACKED) ? NATTRIBS2 : NATTRIBS1;\n-\t  e[n].attrib = attributes[r % i];\n-\t  if (! (features & FEATURE_ALIGNEDPACKED)\n-\t      && strcmp (e[n].attrib, \"atpa\") == 0\n-\t      && ((e[n].type >= &attrib_types[0]\n-\t\t   && e[n].type < &attrib_types[NATYPES2])\n-\t\t  || (e[n].type >= &complex_attrib_types[0]\n-\t\t      && e[n].type < &complex_attrib_types[NCATYPES2])\n-\t\t  || (e[n].type >= &attrib_array_types[0]\n-\t\t      && e[n].type < &attrib_array_types[NAATYPES2])\n-\t\t  || (e[n].type >= &complex_attrib_array_types[0]\n-\t\t      && e[n].type < &complex_attrib_array_types[NAATYPES2])\n-\t\t  || (e[n].type >= &aligned_bitfld_types[0]\n-\t\t      && e[n].type < &aligned_bitfld_types[n_aligned_bitfld_types])))\n-\t    e[n].attrib = NULL;\n-\n-\t  /* If this is an array type, do not put aligned attributes on\n-\t     elements.  Aligning elements to a value greater than their\n-\t     size will result in a compiler error.  */\n-\n-\t  if ((e[n].etype == ETYPE_ARRAY)\n-\t      && e[n].attrib != NULL\n-\t      && (strncmp (e[n].attrib, \"atal\", 4) == 0))\n-            e[n].attrib = NULL;\n-\t}\n     }\n }\n \n@@ -1791,15 +1213,6 @@ generate_random_tests (enum FEATURE features, int len)\n     e[0].etype = ETYPE_STRUCT;\n   r >>= 3;\n   e[0].len = len;\n-  if (0 && (r & 31) == 0)\n-    {\n-      r >>= 5;\n-      if (features & FEATURE_ALIGNEDPACKED)\n-\tr %= NATTRIBS2;\n-      else\n-\tr %= NATTRIBS1;\n-      e[0].attrib = attributes[r];\n-    }\n   generate_fields (features, &e[1], &e[0], len);\n   output (e);\n }\n@@ -1809,13 +1222,9 @@ features[] = {\n { \"normal\", 0 },\n { \"complex\", FEATURE_COMPLEX },\n { \"vector\", FEATURE_VECTOR },\n-/*\n { \"[0] :0\", FEATURE_ZEROARRAY | FEATURE_ZEROBITFLD },\n { \"complex vector [0]\",\n-  FEATURE_COMPLEX | FEATURE_VECTOR | FEATURE_ZEROARRAY },\n-{ \"aligned packed complex vector [0] :0\",\n-  FEATURE_COMPLEX | FEATURE_VECTOR | FEATURE_ZEROARRAY\n-  | FEATURE_ALIGNEDPACKED | FEATURE_ZEROBITFLD },*/\n+  FEATURE_COMPLEX | FEATURE_VECTOR | FEATURE_ZEROARRAY }\n };\n \n int\n@@ -1884,9 +1293,6 @@ Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n   for (i = 0; i < NTYPES2; ++i)\n     if (base_types[i].bitfld)\n       bitfld_types[n_bitfld_types++] = base_types[i];\n-  for (i = 0; i < NATYPES2; ++i)\n-    if (attrib_types[i].bitfld)\n-      aligned_bitfld_types[n_aligned_bitfld_types++] = attrib_types[i];\n   for (i = 0; i < sizeof (features) / sizeof (features[0]); ++i)\n     {\n       int startidx = idx;\n@@ -1931,8 +1337,8 @@ Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n     }\n   if (! output_one)\n     limidx = idx;\n- // while (idx < n)\n- //   generate_random_tests (ALL_FEATURES, 1 + (generate_random () % 25));\n+  while (idx < n)\n+    generate_random_tests (ALL_FEATURES, 1 + (generate_random () % 25));\n   fclose (outfile);\n   return 0;\n }"}]}