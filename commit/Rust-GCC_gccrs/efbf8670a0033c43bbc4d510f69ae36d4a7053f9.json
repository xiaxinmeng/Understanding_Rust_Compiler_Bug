{"sha": "efbf8670a0033c43bbc4d510f69ae36d4a7053f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiZjg2NzBhMDAzM2M0M2JiYzRkNTEwZjY5YWUzNmQ0YTcwNTNmOQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-01-25T13:02:36Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-01-25T13:02:36Z"}, "message": "(SPARC_{V9,ARCH64}): Define.\n\n(TARGET_VERSION): Define.\n(TARGET_DEFAULT): Add MASK_ARCH64, delete MASK_ENV32.\n(JUMP_TABLES_IN_TEXT_SECTION): Define.\n(READONLY_DATA_SECTION): Make text_section.\n\nFrom-SVN: r11096", "tree": {"sha": "c2d67a22dbd9d6f8ee3d0d763e81ca24c884ed50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d67a22dbd9d6f8ee3d0d763e81ca24c884ed50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efbf8670a0033c43bbc4d510f69ae36d4a7053f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf8670a0033c43bbc4d510f69ae36d4a7053f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbf8670a0033c43bbc4d510f69ae36d4a7053f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf8670a0033c43bbc4d510f69ae36d4a7053f9/comments", "author": null, "committer": null, "parents": [{"sha": "a4f0488b1c46a0abb54a370fae168ff665fbd523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f0488b1c46a0abb54a370fae168ff665fbd523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f0488b1c46a0abb54a370fae168ff665fbd523"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "57e5e89145b3f9e3a147f86ec75342e4b8b13053", "filename": "gcc/config/sparc/sp64-aout.h", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf8670a0033c43bbc4d510f69ae36d4a7053f9/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf8670a0033c43bbc4d510f69ae36d4a7053f9/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h?ref=efbf8670a0033c43bbc4d510f69ae36d4a7053f9", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Sun SPARC-V9 on a hypothetical a.out format machine.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n    Contributed by Doug Evans, dje@cygnus.com.\n \n This file is part of GNU CC.\n@@ -21,30 +21,34 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n /* This is a v9 only compiler.  -mv8 is not expected to work.  If you want\n-   a v8/v9 compiler, this isn't the place to do it.  */\n-/* ??? Until real v9 machines exist, all of this is subject to change.  */\n-/* ??? This file should really be called sp64-sunos4.h or some such but that\n-   would be a bit misleading since no such machines exist yet.  The current\n-   name is also misleading since the term \"aout\" is more properly applied to\n-   embedded configurations.  */\n+   a v8/v9 compiler, this isn't the place to do it.\n \n-#define SPARCV9 /* See sparc.h.  */\n+   The only code model supported is Medium/Low.  */\n+\n+#define SPARC_V9 1\t/* See sparc.h.  */\n+#define SPARC_ARCH64 1\n \n #include \"sparc/sparc.h\"\n \n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (sparc64-aout)\")\n+\n /* A v9 compiler with 32 bit integers and 64 bit pointers,\n    in a Medium/Low code model with only 32 bit assembler support.  */\n \n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT \\\n-  (MASK_V9 + MASK_MEDLOW + MASK_ENV32 + MASK_PTR64 + MASK_HARD_QUAD + MASK_EPILOGUE + MASK_FPU)\n+  (MASK_V9 + MASK_ARCH64 + MASK_PTR64 + MASK_HARD_QUAD \\\n+   + MASK_MEDLOW + MASK_EPILOGUE + MASK_FPU)\n \n-/* ??? Disabled for v9 as the current implementation of the Medium/Anywhere\n-   code model needs this in the data segment (still true?).  Let's hope the\n-   assembler is fixed.  */\n+/* The medium/anywhere code model practically requires us to put jump tables\n+   in the text section as gcc is unable to distinguish LABEL_REF's of jump\n+   tables from other label refs (when we need to).  While we don't support\n+   the medium/anywhere code model, let's not make it difficult.  */\n #undef JUMP_TABLES_IN_TEXT_SECTION\n+#define JUMP_TABLES_IN_TEXT_SECTION\n \n-/* Put all data in the data segment (necessary for the current implementation\n+/* Put all data in the text segment (necessary for the current implementation\n    of the Medium/Anywhere code model - see if still true).  */\n \n-#define READONLY_DATA_SECTION data_section\n+#define READONLY_DATA_SECTION text_section"}]}