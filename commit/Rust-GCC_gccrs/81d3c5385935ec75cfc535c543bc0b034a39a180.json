{"sha": "81d3c5385935ec75cfc535c543bc0b034a39a180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFkM2M1Mzg1OTM1ZWM3NWNmYzUzNWM1NDNiYzBiMDM0YTM5YTE4MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-15T13:06:59Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-15T13:06:59Z"}, "message": "(output_addr_const): Don't printing leading zeros.\n\nFrom-SVN: r4466", "tree": {"sha": "0820d22feef97c0b7d3978194fe2480d7b069233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0820d22feef97c0b7d3978194fe2480d7b069233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81d3c5385935ec75cfc535c543bc0b034a39a180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d3c5385935ec75cfc535c543bc0b034a39a180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d3c5385935ec75cfc535c543bc0b034a39a180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d3c5385935ec75cfc535c543bc0b034a39a180/comments", "author": null, "committer": null, "parents": [{"sha": "b6526914b78cb1a5acb4f789a506f584aa21cc29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6526914b78cb1a5acb4f789a506f584aa21cc29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6526914b78cb1a5acb4f789a506f584aa21cc29"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "dafcfe5e79ed13d8e6c5ca7f9bf51d84a42f9629", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81d3c5385935ec75cfc535c543bc0b034a39a180/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81d3c5385935ec75cfc535c543bc0b034a39a180/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=81d3c5385935ec75cfc535c543bc0b034a39a180", "patch": "@@ -2293,7 +2293,7 @@ output_addr_const (file, x)\n       if (GET_MODE (x) == VOIDmode)\n \t{\n \t  /* We can use %d if the number is one word and positive.  */\n-\t  if (CONST_DOUBLE_HIGH (x) || CONST_DOUBLE_LOW (x) < 0)\n+\t  if (CONST_DOUBLE_HIGH (x))\n \t    fprintf (file,\n #if HOST_BITS_PER_WIDE_INT == 64\n #if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n@@ -2309,6 +2309,14 @@ output_addr_const (file, x)\n #endif\n #endif\n \t\t     CONST_DOUBLE_HIGH (x), CONST_DOUBLE_LOW (x));\n+\t  else if  (CONST_DOUBLE_LOW (x) < 0)\n+\t    fprintf (file,\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n+\t\t     \"0x%x\",\n+#else\n+\t\t     \"0x%lx\",\n+#endif\n+\t\t     CONST_DOUBLE_LOW (x));\n \t  else\n \t    fprintf (file,\n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT"}]}