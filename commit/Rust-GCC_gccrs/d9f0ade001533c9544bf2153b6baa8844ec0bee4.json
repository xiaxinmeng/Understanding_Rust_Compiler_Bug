{"sha": "d9f0ade001533c9544bf2153b6baa8844ec0bee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlmMGFkZTAwMTUzM2M5NTQ0YmYyMTUzYjZiYWE4ODQ0ZWMwYmVlNA==", "commit": {"author": {"name": "Sinan Lin", "email": "sinan@isrc.iscas.ac.cn", "date": "2021-03-04T10:02:39Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-03-18T16:04:32Z"}, "message": "PR target/99314: Fix integer signedness issue for cpymem pattern expansion.\n\nThird operand of cpymem pattern is unsigned HOST_WIDE_INT, however we\nare interpret that as signed HOST_WIDE_INT, that not a problem in\nmost case, but when the value is large than signed HOST_WIDE_INT, it\nmight screw up since we have using that value to calculate the buffer\nsize.\n\n2021-03-05  Sinan Lin  <sinan@isrc.iscas.ac.cn>\n\t    Kito Cheng  <kito.cheng@sifive.com>\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.c (riscv_block_move_straight): Change type\n\tto unsigned HOST_WIDE_INT for parameter and local variable with\n\tHOST_WIDE_INT type.\n\t(riscv_adjust_block_mem): Ditto.\n\t(riscv_block_move_loop): Ditto.\n\t(riscv_expand_block_move): Ditto.", "tree": {"sha": "8eecdce257f1dcb48988439276135d6880e48087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eecdce257f1dcb48988439276135d6880e48087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9f0ade001533c9544bf2153b6baa8844ec0bee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f0ade001533c9544bf2153b6baa8844ec0bee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9f0ade001533c9544bf2153b6baa8844ec0bee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9f0ade001533c9544bf2153b6baa8844ec0bee4/comments", "author": {"login": "linsinan1995", "id": 47880367, "node_id": "MDQ6VXNlcjQ3ODgwMzY3", "avatar_url": "https://avatars.githubusercontent.com/u/47880367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linsinan1995", "html_url": "https://github.com/linsinan1995", "followers_url": "https://api.github.com/users/linsinan1995/followers", "following_url": "https://api.github.com/users/linsinan1995/following{/other_user}", "gists_url": "https://api.github.com/users/linsinan1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/linsinan1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linsinan1995/subscriptions", "organizations_url": "https://api.github.com/users/linsinan1995/orgs", "repos_url": "https://api.github.com/users/linsinan1995/repos", "events_url": "https://api.github.com/users/linsinan1995/events{/privacy}", "received_events_url": "https://api.github.com/users/linsinan1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d44a9f3b9ab97634b7ef894e2c83ebd83582a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d44a9f3b9ab97634b7ef894e2c83ebd83582a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d44a9f3b9ab97634b7ef894e2c83ebd83582a8"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "96fc0c0a4a032a0d0cf870b2b8f1993689ce8126", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9f0ade001533c9544bf2153b6baa8844ec0bee4/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9f0ade001533c9544bf2153b6baa8844ec0bee4/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=d9f0ade001533c9544bf2153b6baa8844ec0bee4", "patch": "@@ -3146,9 +3146,9 @@ riscv_legitimize_call_address (rtx addr)\n    Assume that the areas do not overlap.  */\n \n static void\n-riscv_block_move_straight (rtx dest, rtx src, HOST_WIDE_INT length)\n+riscv_block_move_straight (rtx dest, rtx src, unsigned HOST_WIDE_INT length)\n {\n-  HOST_WIDE_INT offset, delta;\n+  unsigned HOST_WIDE_INT offset, delta;\n   unsigned HOST_WIDE_INT bits;\n   int i;\n   enum machine_mode mode;\n@@ -3194,8 +3194,8 @@ riscv_block_move_straight (rtx dest, rtx src, HOST_WIDE_INT length)\n    register.  Store them in *LOOP_REG and *LOOP_MEM respectively.  */\n \n static void\n-riscv_adjust_block_mem (rtx mem, HOST_WIDE_INT length,\n-\t\t       rtx *loop_reg, rtx *loop_mem)\n+riscv_adjust_block_mem (rtx mem, unsigned HOST_WIDE_INT length,\n+\t\t\trtx *loop_reg, rtx *loop_mem)\n {\n   *loop_reg = copy_addr_to_reg (XEXP (mem, 0));\n \n@@ -3210,11 +3210,11 @@ riscv_adjust_block_mem (rtx mem, HOST_WIDE_INT length,\n    the memory regions do not overlap.  */\n \n static void\n-riscv_block_move_loop (rtx dest, rtx src, HOST_WIDE_INT length,\n-\t\t      HOST_WIDE_INT bytes_per_iter)\n+riscv_block_move_loop (rtx dest, rtx src, unsigned HOST_WIDE_INT length,\n+\t\t       unsigned HOST_WIDE_INT bytes_per_iter)\n {\n   rtx label, src_reg, dest_reg, final_src, test;\n-  HOST_WIDE_INT leftover;\n+  unsigned HOST_WIDE_INT leftover;\n \n   leftover = length % bytes_per_iter;\n   length -= leftover;\n@@ -3259,18 +3259,19 @@ riscv_block_move_loop (rtx dest, rtx src, HOST_WIDE_INT length,\n bool\n riscv_expand_block_move (rtx dest, rtx src, rtx length)\n {\n+  unsigned HOST_WIDE_INT hwi_length = UINTVAL (length);\n   if (CONST_INT_P (length))\n     {\n-      HOST_WIDE_INT factor, align;\n+      unsigned HOST_WIDE_INT factor, align;\n \n       align = MIN (MIN (MEM_ALIGN (src), MEM_ALIGN (dest)), BITS_PER_WORD);\n       factor = BITS_PER_WORD / align;\n \n       if (optimize_function_for_size_p (cfun)\n-\t  && INTVAL (length) * factor * UNITS_PER_WORD > MOVE_RATIO (false))\n+\t  && hwi_length * factor * UNITS_PER_WORD > MOVE_RATIO (false))\n \treturn false;\n \n-      if (INTVAL (length) <= RISCV_MAX_MOVE_BYTES_STRAIGHT / factor)\n+      if (hwi_length <= (RISCV_MAX_MOVE_BYTES_STRAIGHT / factor))\n \t{\n \t  riscv_block_move_straight (dest, src, INTVAL (length));\n \t  return true;\n@@ -3280,7 +3281,8 @@ riscv_expand_block_move (rtx dest, rtx src, rtx length)\n \t  unsigned min_iter_words\n \t    = RISCV_MAX_MOVE_BYTES_PER_LOOP_ITER / UNITS_PER_WORD;\n \t  unsigned iter_words = min_iter_words;\n-\t  HOST_WIDE_INT bytes = INTVAL (length), words = bytes / UNITS_PER_WORD;\n+\t  unsigned HOST_WIDE_INT bytes = hwi_length;\n+\t  unsigned HOST_WIDE_INT words = bytes / UNITS_PER_WORD;\n \n \t  /* Lengthen the loop body if it shortens the tail.  */\n \t  for (unsigned i = min_iter_words; i < min_iter_words * 2 - 1; i++)"}]}