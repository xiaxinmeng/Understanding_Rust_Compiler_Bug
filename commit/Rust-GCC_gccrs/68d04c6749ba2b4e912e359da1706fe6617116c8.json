{"sha": "68d04c6749ba2b4e912e359da1706fe6617116c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkMDRjNjc0OWJhMmI0ZTkxMmUzNTlkYTE3MDZmZTY2MTcxMTZjOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-12-20T08:48:13Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-20T08:48:13Z"}, "message": "re PR c++/21228 (-Wunreachable-code produces spurious warnings for constructor)\n\n\tPR c++/21228\n\t* decl.c (use_eh_spec_block): New function.\n\t(store_parm_decls): Use it.\n\t(finish_function): Likewise.\n\t\n\tPR c++/21228\n\t* g++.dg/warn/Wunreachable-code-2.C: New test.\n\nFrom-SVN: r108851", "tree": {"sha": "be663b0ecc3d9eb125f8cd7f7af5c682c5c9353e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be663b0ecc3d9eb125f8cd7f7af5c682c5c9353e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d04c6749ba2b4e912e359da1706fe6617116c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d04c6749ba2b4e912e359da1706fe6617116c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d04c6749ba2b4e912e359da1706fe6617116c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d04c6749ba2b4e912e359da1706fe6617116c8/comments", "author": null, "committer": null, "parents": [{"sha": "c3115fd2d9b8c820af8900b35e3aec3857a3c888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3115fd2d9b8c820af8900b35e3aec3857a3c888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3115fd2d9b8c820af8900b35e3aec3857a3c888"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "766fbd527638aa4cb09af25415b9e532aa9f8240", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68d04c6749ba2b4e912e359da1706fe6617116c8", "patch": "@@ -1,3 +1,10 @@\n+2005-12-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21228\n+\t* decl.c (use_eh_spec_block): New function.\n+\t(store_parm_decls): Use it.\n+\t(finish_function): Likewise.\n+\t\n 2005-12-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24278"}, {"sha": "447e98dd0cc7ee8c383142482bd7fbcbfb179f80", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=68d04c6749ba2b4e912e359da1706fe6617116c8", "patch": "@@ -10482,6 +10482,30 @@ start_function (cp_decl_specifier_seq *declspecs,\n   return 1;\n }\n \f\n+/* Returns true iff an EH_SPEC_BLOCK should be created in the body of\n+   FN.  */\n+\n+static bool\n+use_eh_spec_block (tree fn)\n+{\n+  return (flag_exceptions && flag_enforce_eh_specs\n+\t  && !processing_template_decl\n+\t  && TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn))\n+\t  /* We insert the EH_SPEC_BLOCK only in the original\n+\t     function; then, it is copied automatically to the\n+\t     clones.  */\n+\t  && !DECL_CLONED_FUNCTION_P (fn)\n+\t  /* Implicitly-generated constructors and destructors have\n+\t     exception specifications.  However, those specifications\n+\t     are the union of the possible exceptions specified by the\n+\t     constructors/destructors for bases and members, so no\n+\t     unallowed exception will ever reach this function.  By\n+\t     not creating the EH_SPEC_BLOCK we save a little memory,\n+\t     and we avoid spurious warnings about unreachable\n+\t     code.  */\n+\t  && !DECL_ARTIFICIAL (fn));\n+}\n+\n /* Store the parameter declarations into the current function declaration.\n    This is called after parsing the parameter declarations, before\n    digesting the body of the function.\n@@ -10552,16 +10576,8 @@ store_parm_decls (tree current_function_parms)\n      DECL_ARGUMENTS is not modified.  */\n   current_binding_level->names = chainon (nonparms, DECL_ARGUMENTS (fndecl));\n \n-  /* For a cloned function, we've already got all the code we need;\n-     there's no need to add any extra bits.  */\n-  if (!DECL_CLONED_FUNCTION_P (fndecl))\n-    {\n-      /* Do the starting of the exception specifications, if we have any.  */\n-      if (flag_exceptions && !processing_template_decl\n-\t  && flag_enforce_eh_specs\n-\t  && TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl)))\n-\tcurrent_eh_spec_block = begin_eh_spec_block ();\n-    }\n+  if (use_eh_spec_block (current_function_decl))\n+    current_eh_spec_block = begin_eh_spec_block ();\n }\n \n \f\n@@ -10848,10 +10864,7 @@ finish_function (int flags)\n #endif\n \t}\n \n-      /* Finish dealing with exception specifiers.  */\n-      if (flag_exceptions && !processing_template_decl\n-\t  && flag_enforce_eh_specs\n-\t  && TYPE_RAISES_EXCEPTIONS (TREE_TYPE (current_function_decl)))\n+      if (use_eh_spec_block (current_function_decl))\n \tfinish_eh_spec_block (TYPE_RAISES_EXCEPTIONS\n \t\t\t      (TREE_TYPE (current_function_decl)),\n \t\t\t      current_eh_spec_block);"}, {"sha": "7073aeca8ad3b244dfd4f52071d28033ed86425a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68d04c6749ba2b4e912e359da1706fe6617116c8", "patch": "@@ -1,3 +1,8 @@\n+2005-12-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21228\n+\t* g++.dg/warn/Wunreachable-code-2.C: New test.\n+\n 2005-12-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24278"}, {"sha": "d50f7fe57d7f06557db3922c6d90c0005cfdc83a", "filename": "gcc/testsuite/g++.dg/warn/Wunreachable-code-2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d04c6749ba2b4e912e359da1706fe6617116c8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunreachable-code-2.C?ref=68d04c6749ba2b4e912e359da1706fe6617116c8", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/21228\n+/* { dg-options \"-Wunreachable-code\" } */\n+\n+class testStringBase\n+{\n+public:\n+  char *stringPtr;\n+};\n+\n+class testString : public testStringBase\n+{\n+public:\n+  testString();\n+};\n+\n+testString::testString()\n+{\n+  stringPtr = (char *) 9;\n+}\n+ \n+int main(int argc, char **argv) {\n+  testString s;\n+}"}]}