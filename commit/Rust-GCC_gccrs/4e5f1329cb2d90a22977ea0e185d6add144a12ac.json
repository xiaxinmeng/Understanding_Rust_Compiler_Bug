{"sha": "4e5f1329cb2d90a22977ea0e185d6add144a12ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU1ZjEzMjljYjJkOTBhMjI5NzdlYTBlMTg1ZDZhZGQxNDRhMTJhYw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-25T08:21:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-25T08:21:46Z"}, "message": "Fix typo.\n\nFrom-SVN: r28852", "tree": {"sha": "8c8efe8c50b6f7e339038dc58cd5a032218a1826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c8efe8c50b6f7e339038dc58cd5a032218a1826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e5f1329cb2d90a22977ea0e185d6add144a12ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5f1329cb2d90a22977ea0e185d6add144a12ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5f1329cb2d90a22977ea0e185d6add144a12ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5f1329cb2d90a22977ea0e185d6add144a12ac/comments", "author": null, "committer": null, "parents": [{"sha": "5722d61ce7a71fe6263ee57845911a4bda3bba68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5722d61ce7a71fe6263ee57845911a4bda3bba68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5722d61ce7a71fe6263ee57845911a4bda3bba68"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "965422b9a75dea2957e0b5ac2578c96022c08a9e", "filename": "gcc/NEWS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FNEWS?ref=4e5f1329cb2d90a22977ea0e185d6add144a12ac", "patch": "@@ -68,7 +68,7 @@ Build time improvements for targets which support lots of sched parameters\n (alpha and mips primarily).\n \n Compile time for certain programs using large constant initializers has been\n-improved (effects glibc significantly).\n+improved (affects glibc significantly).\n \n Plus an incredible number of infrastructure changes, warning fixes, bugfixes\n and local optimizations."}, {"sha": "c5fe1602b437fc4cf1b71df1e89d4f21bc040edf", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=4e5f1329cb2d90a22977ea0e185d6add144a12ac", "patch": "@@ -1335,7 +1335,7 @@\n   DONE;\n }\")\n \n-;; deiw wants two hi's in seperate registers or else they can be adjacent\n+;; deiw wants two hi's in separate registers or else they can be adjacent\n ;; in memory. DI mode will ensure two registers are available, but if we\n ;; want to allow memory as an operand we would need SI mode. There is no\n ;; way to do this, so just restrict operand 0 and 1 to be in registers.\n@@ -1392,7 +1392,7 @@\n   DONE;\n }\")\n \n-;; deib wants two qi's in seperate registers or else they can be adjacent\n+;; deib wants two qi's in separate registers or else they can be adjacent\n ;; in memory. DI mode will ensure two registers are available, but if we\n ;; want to allow memory as an operand we would need HI mode. There is no\n ;; way to do this, so just restrict operand 0 and 1 to be in registers."}, {"sha": "630fe35b8621f3a8402001a1289c68628aded0bd", "filename": "gcc/f/ffe.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2Ff%2Fffe.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2Ff%2Fffe.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fffe.texi?ref=4e5f1329cb2d90a22977ea0e185d6add144a12ac", "patch": "@@ -640,7 +640,7 @@ and\n except it also provides automatic conversion of tabs\n and ignoring of newline-related carriage returns.\n \n-It also effects the ``pure visual'' model,\n+It also affects the ``pure visual'' model,\n by which is meant that a user viewing his code\n in a typical text editor\n (assuming it's not preprocessed via @code{g77stripcard} or similar)"}, {"sha": "ed286fe20103c605270fafe641b6e934ba39e95b", "filename": "gcc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5f1329cb2d90a22977ea0e185d6add144a12ac/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=4e5f1329cb2d90a22977ea0e185d6add144a12ac", "patch": "@@ -2981,7 +2981,7 @@ stack.\n @item LOAD_ARGS_REVERSED\n If defined, the order in which arguments are loaded into their\n respective argument registers is reversed so that the last \n-argument is loaded first.  This macro only effects arguments\n+argument is loaded first.  This macro only affects arguments\n passed in registers.\n \n @end table"}]}