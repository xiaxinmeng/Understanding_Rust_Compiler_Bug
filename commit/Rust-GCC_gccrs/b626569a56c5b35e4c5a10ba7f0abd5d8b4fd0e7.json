{"sha": "b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyNjU2OWE1NmM1YjM1ZTRjNWExMGJhN2YwYWJkNWQ4YjRmZDBlNw==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-12-16T13:37:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:48Z"}, "message": "[Ada] Fix evaluation of expressions in inlined code\n\ngcc/ada/\n\n\t* sem_eval.adb (Check_Non_Static_Context_For_Overflow): Apply\n\tcompile-time checking for overflows in non-static contexts\n\tincluding inlined code.\n\t(Eval_Arithmetic_Op): Use the new procedure.\n\t(Eval_Unary_Op, Eval_Op_Expon): Add call to the new procedure.", "tree": {"sha": "d02c4bcb45c859bfeaedf8bf68e9e926eb5c80b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d02c4bcb45c859bfeaedf8bf68e9e926eb5c80b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4068698c47ff67bf48edf5c21a386204de370aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4068698c47ff67bf48edf5c21a386204de370aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4068698c47ff67bf48edf5c21a386204de370aaf"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "e3b465067c447b3dcbe184f8ba312475570deb7b", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=b626569a56c5b35e4c5a10ba7f0abd5d8b4fd0e7", "patch": "@@ -142,6 +142,16 @@ package body Sem_Eval is\n    -- Local Subprograms --\n    -----------------------\n \n+   procedure Check_Non_Static_Context_For_Overflow\n+     (N      : Node_Id;\n+      Stat   : Boolean;\n+      Result : Uint);\n+   --  For a signed integer type, check non-static overflow in Result when\n+   --  Stat is False. This applies also inside inlined code, where the static\n+   --  property may be an effect of the inlining, which should not be allowed\n+   --  to remove run-time checks (whether during compilation, or even more\n+   --  crucially in the special inlining-for-proof in GNATprove mode).\n+\n    function Choice_Matches\n      (Expr   : Node_Id;\n       Choice : Node_Id) return Match_Result;\n@@ -649,6 +659,34 @@ package body Sem_Eval is\n       end if;\n    end Check_Non_Static_Context;\n \n+   -------------------------------------------\n+   -- Check_Non_Static_Context_For_Overflow --\n+   -------------------------------------------\n+\n+   procedure Check_Non_Static_Context_For_Overflow\n+     (N      : Node_Id;\n+      Stat   : Boolean;\n+      Result : Uint)\n+   is\n+   begin\n+      if (not Stat or else In_Inlined_Body)\n+        and then Is_Signed_Integer_Type (Etype (N))\n+      then\n+         declare\n+            BT : constant Entity_Id := Base_Type (Etype (N));\n+            Lo : constant Uint := Expr_Value (Type_Low_Bound (BT));\n+            Hi : constant Uint := Expr_Value (Type_High_Bound (BT));\n+         begin\n+            if Result < Lo or else Result > Hi then\n+               Apply_Compile_Time_Constraint_Error\n+                 (N, \"value not in range of }??\",\n+                  CE_Overflow_Check_Failed,\n+                  Ent => BT);\n+            end if;\n+         end;\n+      end if;\n+   end Check_Non_Static_Context_For_Overflow;\n+\n    ---------------------------------\n    -- Check_String_Literal_Length --\n    ---------------------------------\n@@ -2143,25 +2181,10 @@ package body Sem_Eval is\n \n             if Is_Modular_Integer_Type (Ltype) then\n                Result := Result mod Modulus (Ltype);\n-\n-               --  For a signed integer type, check non-static overflow\n-\n-            elsif (not Stat) and then Is_Signed_Integer_Type (Ltype) then\n-               declare\n-                  BT : constant Entity_Id := Base_Type (Ltype);\n-                  Lo : constant Uint := Expr_Value (Type_Low_Bound (BT));\n-                  Hi : constant Uint := Expr_Value (Type_High_Bound (BT));\n-               begin\n-                  if Result < Lo or else Result > Hi then\n-                     Apply_Compile_Time_Constraint_Error\n-                       (N, \"value not in range of }??\",\n-                        CE_Overflow_Check_Failed,\n-                        Ent => BT);\n-                     return;\n-                  end if;\n-               end;\n             end if;\n \n+            Check_Non_Static_Context_For_Overflow (N, Stat, Result);\n+\n             --  If we get here we can fold the result\n \n             Fold_Uint (N, Result, Stat);\n@@ -3202,6 +3225,8 @@ package body Sem_Eval is\n                      Result := Result mod Modulus (Etype (N));\n                   end if;\n \n+                  Check_Non_Static_Context_For_Overflow (N, Stat, Result);\n+\n                   Fold_Uint (N, Result, Stat);\n                end if;\n             end;\n@@ -4375,6 +4400,8 @@ package body Sem_Eval is\n                Result := abs Rint;\n             end if;\n \n+            Check_Non_Static_Context_For_Overflow (N, Stat, Result);\n+\n             Fold_Uint (N, Result, Stat);\n          end;\n "}]}