{"sha": "65e79ca2f92de1e6430c5b3687df5b90736e5452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlNzljYTJmOTJkZTFlNjQzMGM1YjM2ODdkZjViOTA3MzZlNTQ1Mg==", "commit": {"author": {"name": "Olga Golovanevsky", "email": "olga@il.ibm.com", "date": "2007-12-13T13:47:22Z"}, "committer": {"name": "Olga Golovanevsky", "email": "olga@gcc.gnu.org", "date": "2007-12-13T13:47:22Z"}, "message": "struct: New directory with tests for struct-reorg optimizaion.\n\n2007-11-26  Olga Golovanevsky  <olga@il.ibm.com>\n\n\t* gcc.dg/struct: New directory with tests \n\tfor struct-reorg optimizaion.\n\t* gcc.dg/struct/struct-reorg.exp: New script.\n\t* gcc.dg/struct/wo_prof_array_through_pointer.c: New test.\n\t* gcc.dg/struct/wo_prof_malloc_size_var.c: Likewise.\n\t* gcc.dg/struct/wo_prof_mult_field_peeling.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_arg_to_local.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_return.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_str_init.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_substr_array.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_substr_pointer.c: Likewise.\n\t* gcc.dg/struct/wo_prof_escape_substr_value.c: Likewise.\n\t* gcc.dg/struct/wo_prof_global_array.c: Likewise.\n\t* gcc.dg/struct/wo_prof_global_var.c: Likewise.\n\t* gcc.dg/struct/wo_prof_local_array.c: Likewise.\n\t* gcc.dg/struct/wo_prof_local_var.c: Likewise.\n\t* gcc.dg/struct/wo_prof_two_strs.c: Likewise.\n\t* gcc.dg/struct/wo_prof_single_str_global.c: Likewise.\n\t* gcc.dg/struct/wo_prof_single_str_local.c: Likewise.\n\t* gcc.dg/struct/wo_prof_single_str_pointer.c: Likewise.\n\t* gcc.dg/struct/w_prof_two_strs.c: Likewise.\n\t* gcc.dg/struct/w_prof_global_array.c: Likewise.\n\t* gcc.dg/struct/w_prof_global_var.c: Likewise.\n\t* gcc.dg/struct/w_prof_local_array.c: Likewise.\n\t* gcc.dg/struct/w_prof_local_var.c: Likewise.\n\t* gcc.dg/struct/w_prof_single_str_global.c: Likewise.\n\t* gcc.dg/struct/w_ratio_cold_str.c: Likewise.\n\nFrom-SVN: r130893", "tree": {"sha": "197a438a5994ad47af918871e8b6c2af92b55127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/197a438a5994ad47af918871e8b6c2af92b55127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e79ca2f92de1e6430c5b3687df5b90736e5452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e79ca2f92de1e6430c5b3687df5b90736e5452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e79ca2f92de1e6430c5b3687df5b90736e5452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e79ca2f92de1e6430c5b3687df5b90736e5452/comments", "author": null, "committer": null, "parents": [{"sha": "781859743c53475841dda0d04a37c16a08297179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781859743c53475841dda0d04a37c16a08297179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781859743c53475841dda0d04a37c16a08297179"}], "stats": {"total": 963, "additions": 963, "deletions": 0}, "files": [{"sha": "087a0c8c36fc4cb788d0ce5e8d4280be14efb2b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -1,3 +1,33 @@\n+2007-11-26  Olga Golovanevsky  <olga@il.ibm.com>\n+\n+\t* gcc.dg/struct: New directory with tests \n+\tfor struct-reorg optimizaion.\n+\t* gcc.dg/struct/struct-reorg.exp: New script.\n+\t* gcc.dg/struct/wo_prof_array_through_pointer.c: New test.\n+\t* gcc.dg/struct/wo_prof_malloc_size_var.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_mult_field_peeling.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_arg_to_local.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_return.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_str_init.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_substr_array.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_substr_pointer.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_escape_substr_value.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_global_array.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_global_var.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_local_array.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_local_var.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_two_strs.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_single_str_global.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_single_str_local.c: Likewise.\n+\t* gcc.dg/struct/wo_prof_single_str_pointer.c: Likewise.\n+\t* gcc.dg/struct/w_prof_two_strs.c: Likewise.\n+\t* gcc.dg/struct/w_prof_global_array.c: Likewise.\n+\t* gcc.dg/struct/w_prof_global_var.c: Likewise.\n+\t* gcc.dg/struct/w_prof_local_array.c: Likewise.\n+\t* gcc.dg/struct/w_prof_local_var.c: Likewise.\n+\t* gcc.dg/struct/w_prof_single_str_global.c: Likewise.\n+\t* gcc.dg/struct/w_ratio_cold_str.c: Likewise.\n+\n 2007-12-13  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34427"}, {"sha": "392d5557a5a91f7c32be7d7b8c18719d55182e09", "filename": "gcc/testsuite/gcc.dg/struct/struct-reorg.exp", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,74 @@\n+#   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Test the functionality of programs compiled with profile-directed structure\n+# rearrangement using -fprofile-generate followed by -fprofile-use.\n+\n+load_lib gcc-dg.exp\n+load_lib target-supports.exp\n+\n+set DEFAULT_CFLAGS \"-O3 -fipa-struct-reorg -fdump-ipa-all -fwhole-program -combine -fipa-type-escape\"\n+\n+# Initialize `dg'.\n+dg-init\n+\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/wo_prof_*.c]] \"\" $DEFAULT_CFLAGS\n+\n+dg-final\n+\n+# Some targets don't support tree profiling.\n+if { ![check_profiling_available \"\"] } {\n+    return\n+}\n+\n+# The procedures in profopt.exp need these parameters.\n+set tool gcc\n+set prof_ext \"gcda gcno\"\n+\n+# Override the list defined in profopt.exp.\n+set PROFOPT_OPTIONS [list {}]\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load support procs.\n+load_lib profopt.exp\n+\n+# These are globals used by profopt-execute.  The first is options\n+# needed to generate profile data, the second is options to use the\n+# profile data.\n+set common \"-O3 -fwhole-program -combine -fipa-type-escape\"\n+set profile_option [concat $common \" -fprofile-generate\"]\n+set feedback_option [concat $common \" -fprofile-use -fipa-struct-reorg -fdump-ipa-all\"]\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/w_prof_*.c]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    profopt-execute $src\n+}\n+\n+set feedback_option [concat $feedback_option \" --param struct-reorg-cold-struct-ratio=30\"]\n+\n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/w_ratio_*.c]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    profopt-execute $src\n+}"}, {"sha": "cbfd0bc72bbefe0673fe9738f34fdf3e092b9fe4", "filename": "gcc/testsuite/gcc.dg/struct/w_prof_global_array.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_global_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_global_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_global_array.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,30 @@\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+str_t A[N];\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      A[i].a = 0;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i].a != 0) \n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */"}, {"sha": "5fa1ca55da61e4b8233553bba63956c6345ea498", "filename": "gcc/testsuite/gcc.dg/struct/w_prof_global_var.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_global_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_global_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_global_var.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,30 @@\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+str_t *p;\n+\n+int\n+main ()\n+{\n+  int i, sum;\n+\n+  p = malloc (N * sizeof (str_t));\n+  for (i = 0; i < N; i++)\n+    p[i].a = p[i].b + 1;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != p[i].b + 1)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */"}, {"sha": "6394d07bf76d607e16034054df9ba6d585473cb6", "filename": "gcc/testsuite/gcc.dg/struct/w_prof_local_array.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_local_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_local_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_local_array.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,30 @@\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+int\n+main ()\n+{\n+  int i;\n+  str_t A[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      A[i].a = 0;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i].a != 0) \n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */"}, {"sha": "91d580fda69ad3b7a5ee8cbcb827fadb26d45c20", "filename": "gcc/testsuite/gcc.dg/struct/w_prof_local_var.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_local_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_local_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_local_var.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,28 @@\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+int\n+main ()\n+{\n+  int i, sum;\n+\n+  str_t * p = malloc (N * sizeof (str_t));\n+  for (i = 0; i < N; i++)\n+    p[i].a = p[i].b + 1;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != p[i].b + 1)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */"}, {"sha": "db9372e4c0ee365c7e897f8f96bbd43e35c69ff2", "filename": "gcc/testsuite/gcc.dg/struct/w_prof_single_str_global.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_single_str_global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_single_str_global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_single_str_global.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,31 @@\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  int b;\n+}str_t;\n+\n+#define N 3\n+\n+str_t str;\n+\n+int\n+main ()\n+{\n+  int i;\n+  int res = 1<<(1<<N);\n+  str.a = 2;\n+\n+  for (i = 0; i < N; i++)\n+      str.a = str.a * str.a;\n+  \n+  if (str.a != res)\n+    abort ();\n+\n+  return str.a;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */\n+"}, {"sha": "aca646a1d34945d0cdbc17f58ce3bd93bde3aa6f", "filename": "gcc/testsuite/gcc.dg/struct/w_prof_two_strs.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_two_strs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_two_strs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_prof_two_strs.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,58 @@\n+#include <stdlib.h>\n+\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t1;\n+\n+typedef struct\n+{\n+  int c;\n+  float d;\n+}str_t2;\n+\n+#define N 1000\n+\n+str_t1 *p1;\n+str_t2 *p2;\n+int num;\n+\n+void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i=0; i < num; i++)\n+    p2[i].c = 2;\n+}\n+\n+int\n+main ()\n+{\n+  int i, r;\n+\n+  r = rand ();\n+  num = r > N ? N : num; \n+  p1 = malloc (num * sizeof (str_t1));\n+  p2 = malloc (num * sizeof (str_t2));\n+\n+  if (p1 == NULL || p2 == NULL)\n+    return 0;\n+\n+  for (i = 0; i < num; i++)\n+    p1[i].a = 1;\n+\n+  foo ();\n+\n+  for (i = 0; i < num; i++)\n+    if (p1[i].a != 1 || p2[i].c != 2)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 2\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */\n+"}, {"sha": "19de595e8ed815b43d62a0cd42c8b68c7f8993f5", "filename": "gcc/testsuite/gcc.dg/struct/w_ratio_cold_str.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_ratio_cold_str.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_ratio_cold_str.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fw_ratio_cold_str.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,43 @@\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  int b;\n+}str_t1;\n+\n+typedef struct\n+{\n+  float a;\n+  float b;\n+}str_t2;\n+\n+#define N1 1000\n+#define N2 100\n+str_t1 A1[N1];\n+str_t2 A2[N2];\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N1; i++)\n+    A1[i].a = 0;\n+\n+  for (i = 0; i < N2; i++)\n+    A2[i].a = 0;\n+\n+  for (i = 0; i < N1; i++)\n+    if (A1[i].a != 0) \n+      abort ();\n+\n+  for (i = 0; i < N2; i++)\n+    if (A2[i].a != 0) \n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final-use { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final-use { cleanup-ipa-dump \"*\" } } */"}, {"sha": "07460191ba0fbe9b5149032a63233b7795cf613d", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_array_through_pointer.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_array_through_pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_array_through_pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_array_through_pointer.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+int\n+main ()\n+{\n+  int i;\n+  str_t A[N];\n+  str_t *p = A;\n+\n+  for (i = 0; i < N; i++)\n+    p[i].a = 0;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != 0)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Currently str_t escapes due to incorrect ipa-type-escape analysis.  */\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "b120a799cd6fb9ee91a369a8c854422159b2670a", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_arg_to_local.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_arg_to_local.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_arg_to_local.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_arg_to_local.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-options \"-O3 -fno-inline -fipa-type-escape -fdump-ipa-all -fipa-struct-reorg -fwhole-program -combine\" } */\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+struct str\n+{\n+  int a;\n+  float b;\n+};\n+\n+#define N 1000\n+\n+int\n+foo (struct str * p_str)\n+{\n+  static int sum = 0;\n+\n+  sum = sum + p_str->a;\n+  return sum;\n+}\n+\n+int\n+main ()\n+{\n+  int i, sum;\n+  struct str * p = malloc (N * sizeof (struct str));\n+\n+  for (i = 0; i < N; i++)\n+    sum = foo (p+i);\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"is passed to local function...Excluded.\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "26944fe10b3906ad51c808de7715c19653b3730d", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_return.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_return.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-options \"-O3 -fno-inline -fipa-type-escape -fdump-ipa-all -fipa-struct-reorg -fwhole-program -combine\" } */\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+struct A {\n+  int d;\n+};\n+\n+struct A a;\n+\n+struct A foo ()\n+{\n+  a.d = 5;\n+  return a;\n+}\n+\n+int\n+main ()\n+{\n+  a.d = 0;\n+  foo ();\n+\n+  if (a.d != 5)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"is return type of function...Excluded\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "5f634fc119cf2497280727e3c363fc6433d7624f", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_str_init.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_str_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_str_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_str_init.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  int b;\n+}str_t;\n+\n+#define N 2\n+\n+str_t A[2] = {{1,1},{2,2}};\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    A[i].b = A[i].a;\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i].b != A[i].a)\n+      abort ();\n+  \n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"is initialized...Excluded\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */\n+"}, {"sha": "55a644e197172e63342eac5be54b3db1d077bf54", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_substr_array.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_array.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+typedef struct \n+{\n+  str_t A[N];\n+  int c;\n+}str_with_substr_t;\n+\n+str_with_substr_t a;\n+\n+int\n+main ()\n+{\n+  int i;\n+  \n+  for (i = 0; i < N; i++)\n+    a.A[i].b = 0;\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"is a field in the structure\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "fcb10e37b523935d4852e6b3483a7ad7565ed90b", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_substr_pointer.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_pointer.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+typedef struct \n+{\n+  str_t * sub_str;\n+  int c;\n+}str_with_substr_t;\n+\n+int\n+main (void)\n+{\n+  int i;\n+  str_with_substr_t A[N];\n+  str_t a[N];\n+\n+  for (i=0; i < N; i++)\n+    A[i].sub_str = &(a[i]);\n+\n+  for (i=0; i < N; i++)\n+    A[i].sub_str->a = 5;\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"is a field in the structure\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "49283a586f288f4c20cc97da1b3f1565fb43aa9b", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_escape_substr_value.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_escape_substr_value.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+typedef struct \n+{\n+  str_t sub_str;\n+  int c;\n+}str_with_substr_t;\n+\n+int\n+main ()\n+{\n+  int i;\n+  str_with_substr_t A[N];\n+\n+  for (i = 0; i < N; i++)\n+    A[i].sub_str.a = 5;\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i].sub_str.a != 5)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"is a field in the structure\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "1254281f5658b08403e982bd4da7b3532250a3ee", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_global_array.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_global_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_global_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_global_array.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+str_t A[N];\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      A[i].a = 0;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i].a != 0) \n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "7e08e96f7b4c2258fccc81c4bf320e6d51f17ad4", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_global_var.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_global_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_global_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_global_var.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+str_t *p;\n+\n+int\n+main ()\n+{\n+  int i, sum;\n+\n+  p = malloc (N * sizeof (str_t));\n+  for (i = 0; i < N; i++)\n+    p[i].a = p[i].b + 1;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != p[i].b + 1)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "28d66e4cccf14f86474555ab81b6f5a13ace903a", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_local_array.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_local_array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_local_array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_local_array.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+int\n+main ()\n+{\n+  int i;\n+  str_t A[N];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      A[i].a = 0;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i].a != 0) \n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "e931efa127299154b068e694a6c2d94d972f0d2c", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_local_var.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_local_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_local_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_local_var.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+int\n+main ()\n+{\n+  int i, sum;\n+\n+  str_t * p = malloc (N * sizeof (str_t));\n+  for (i = 0; i < N; i++)\n+    p[i].a = p[i].b + 1;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != p[i].b + 1)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "b1614c0faaa421dc48b4694ac05379d1f5598b3c", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_malloc_size_var.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_malloc_size_var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_malloc_size_var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_malloc_size_var.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t;\n+\n+#define N 1000\n+\n+int\n+main ()\n+{\n+  int i, num;\n+\n+  num = rand(); \n+  str_t * p = malloc (num * sizeof (str_t));\n+\n+  if (p == 0)\n+    return 0;\n+\n+  for (i = 0; i < N; i++)\n+    p[i].a = p[i].b + 1;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != p[i].b + 1)\n+      abort ();\n+  \n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* Currently the condition `if (p == 0)` is incorrectly reported as unsafe.  */\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "df2b4ee08bdd6f5838b54e8d40d5a1b0de037b57", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_mult_field_peeling.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_mult_field_peeling.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_mult_field_peeling.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_mult_field_peeling.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  float b;\n+  int c;\n+  float d;\n+}str_t;\n+\n+#define N 100\n+\n+int \n+main ()\n+{\n+  int i;\n+  str_t *p = malloc (N * sizeof (str_t));\n+\n+  for (i = 0; i < N; i++)\n+    p[i].a = 5;\n+\n+  for (i = 0; i < N; i++)\n+    if (p[i].a != 5)      \n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* The structure str_t is erroneously peeled into 4 structures instead of 2.  */\n+/* { dg-final { scan-ipa-dump \"the number of new types is 2\" \"ipa_struct_reorg\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "5569debfc0db35f4e78fb79f192096a5c681ed6b", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_single_str_global.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_global.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  int b;\n+}str_t;\n+\n+#define N 3\n+\n+str_t str;\n+\n+int\n+main ()\n+{\n+  int i;\n+  int res = 1<<(1<<N);\n+  str.a = 2;\n+\n+  for (i = 0; i < N; i++)\n+    str.a = str.a * str.a;\n+  \n+  if (str.a != res)\n+    abort ();\n+\n+  return str.a;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "65a9602963ab4142a8e728dd85c372f69e5bc324", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_single_str_local.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_local.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_local.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_local.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  int b;\n+}str_t;\n+\n+#define N 3\n+\n+int\n+main ()\n+{\n+  int i;\n+  int res = 1<<(1<<N);\n+  str_t str;\n+  \n+  str.a = 2;\n+\n+  for (i = 0; i < N; i++)\n+    str.a = str.a * str.a;\n+  \n+  if (str.a != res)\n+    abort ();\n+\n+  return str.a;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"No structures to transform\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "fd562579b351cd55c0ff3647b0f4e787e5fc4795", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_single_str_pointer.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_single_str_pointer.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+typedef struct\n+{\n+  int a;\n+  int *b;\n+}str_t;\n+\n+#define N 3\n+\n+str_t *p;\n+\n+int\n+main ()\n+{\n+  str_t str;\n+  int i;\n+  int res = 1 << (1 << N);\n+  p = &str;\n+  str.a = 2;\n+ \n+  p->b = &(p->a);\n+\n+  for (i=0; i < N; i++)\n+    p->a = *(p->b)*(*(p->b));\n+\n+  if (p->a != res)\n+    abort ();\n+  \n+  return p->a;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* The access &(p->a) is handled incorrectly in ipa-struct-reorg.c.  */\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 1\" \"ipa_struct_reorg\" { xfail *-*-* } } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}, {"sha": "5fb152a1420605ecca342283e1ca97bd66b19ba5", "filename": "gcc/testsuite/gcc.dg/struct/wo_prof_two_strs.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_two_strs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e79ca2f92de1e6430c5b3687df5b90736e5452/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_two_strs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fwo_prof_two_strs.c?ref=65e79ca2f92de1e6430c5b3687df5b90736e5452", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+typedef struct\n+{\n+  int a;\n+  float b;\n+}str_t1;\n+\n+typedef struct\n+{\n+  int c;\n+  float d;\n+}str_t2;\n+\n+#define N 1000\n+\n+str_t1 *p1;\n+str_t2 *p2;\n+int num;\n+\n+void\n+foo (void)\n+{\n+  int i;\n+\n+  for (i=0; i < num; i++)\n+    p2[i].c = 2;\n+}\n+\n+int\n+main ()\n+{\n+  int i, r;\n+\n+  r = rand ();\n+  num = r > N ? N : num; \n+  p1 = malloc (num * sizeof (str_t1));\n+  p2 = malloc (num * sizeof (str_t2));\n+\n+  if (p1 == NULL || p2 == NULL)\n+    return 0;\n+\n+  for (i = 0; i < num; i++)\n+    p1[i].a = 1;\n+\n+  foo ();\n+\n+  for (i = 0; i < num; i++)\n+    if (p1[i].a != 1 || p2[i].c != 2)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/*--------------------------------------------------------------------------*/\n+/* { dg-final { scan-ipa-dump \"Number of structures to transform is 2\" \"ipa_struct_reorg\" } } */\n+/* { dg-final { cleanup-ipa-dump \"*\" } } */"}]}