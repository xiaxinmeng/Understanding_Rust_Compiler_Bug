{"sha": "950a3816a7e54f132d34e5458474db5465b917ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwYTM4MTZhN2U1NGYxMzJkMzRlNTQ1ODQ3NGRiNTQ2NWI5MTdjYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-11-11T21:20:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-11-11T21:20:03Z"}, "message": "alpha.c (unicosmk_special_name): Prototype.\n\n\t* alpha.c (unicosmk_special_name): Prototype.\n\t(unicosmk_ssib_name): Delete unused variable.\n\t* alpha/unicosmk.h (common_section, ssib_section): Prototype.\n\t* alpha/vms.h (PREFIX): Undef before defining.\n\t* arm/pe.h (SUBTARGET_NAME_ENCODING_LENGTHS): Likewise.\n\t* i370/i370.c (mvs_hash_alias): Prototype.  Wrap with macro\n\tcontrolling usage.  Const-ify.\n\t(alias_number): Delete unused variable.\n\t* m32r/m32r.c (m32r_sched_init): Add missing argument.\n\t(m32r_expand_block_move): Fix uninitialized warnings.\n\t* mn10300/mn10300.h (REGNO_IN_RANGE_P): Fix 'unsigned >=0 is\n\talways true' warnings.\n\t* openbsd.h (TARGET_MEM_FUNCTIONS): Don't redefine.\n\t* sh/sh.c: Include \"integrate.h\".\n\t(output_far_jump): Fix uninitialized warning.\n\t* final.c (shorten_branches): Avoid automatic aggregate\n\tinitialization.\n\t* integrate.c (subst_constants): Likewise.\n\nFrom-SVN: r46932", "tree": {"sha": "0a1dfc117b123d1c4722d37ea327f3434dca7f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a1dfc117b123d1c4722d37ea327f3434dca7f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/950a3816a7e54f132d34e5458474db5465b917ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950a3816a7e54f132d34e5458474db5465b917ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/950a3816a7e54f132d34e5458474db5465b917ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/950a3816a7e54f132d34e5458474db5465b917ca/comments", "author": null, "committer": null, "parents": [{"sha": "0c50ee733d4ab7d8e363af4f5d530ac6a9e4081c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c50ee733d4ab7d8e363af4f5d530ac6a9e4081c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c50ee733d4ab7d8e363af4f5d530ac6a9e4081c"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "70d51f37ea527da173a1f8bb3db3062f78a2ce91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -1,3 +1,24 @@\n+2001-11-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.c (unicosmk_special_name): Prototype.\n+\t(unicosmk_ssib_name): Delete unused variable.\n+\t* alpha/unicosmk.h (common_section, ssib_section): Prototype.\n+\t* alpha/vms.h (PREFIX): Undef before defining.\n+\t* arm/pe.h (SUBTARGET_NAME_ENCODING_LENGTHS): Likewise.\n+\t* i370/i370.c (mvs_hash_alias): Prototype.  Wrap with macro\n+\tcontrolling usage.  Const-ify.\n+\t(alias_number): Delete unused variable.\n+\t* m32r/m32r.c (m32r_sched_init): Add missing argument.\n+\t(m32r_expand_block_move): Fix uninitialized warnings.\n+\t* mn10300/mn10300.h (REGNO_IN_RANGE_P): Fix 'unsigned >=0 is\n+\talways true' warnings.\n+\t* openbsd.h (TARGET_MEM_FUNCTIONS): Don't redefine.\n+\t* sh/sh.c: Include \"integrate.h\".\n+\t(output_far_jump): Fix uninitialized warning.\n+\t* final.c (shorten_branches): Avoid automatic aggregate\n+\tinitialization.\n+\t* integrate.c (subst_constants): Likewise.\n+\n 2001-11-11  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (shift_alg): Remove SHIFT_MAX."}, {"sha": "e78d6d925ca47399775a7efd0c24bc7a7a431cce", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -8028,7 +8028,7 @@ static void unicosmk_output_dex PARAMS ((FILE *));\n static void unicosmk_output_externs PARAMS ((FILE *));\n static void unicosmk_output_addr_vec PARAMS ((FILE *, rtx));\n static const char *unicosmk_ssib_name PARAMS ((void));\n-\n+static int unicosmk_special_name PARAMS ((const char *));\n \n /* Define the offset between two registers, one to be eliminated, and the\n    other its replacement, at the start of a routine.  */\n@@ -8457,7 +8457,6 @@ unicosmk_ssib_name ()\n \n   rtx x;\n   const char *fnname;\n-  char *ssib_name;\n   int len;\n \n   x = DECL_RTL (cfun->decl);"}, {"sha": "1b2c257eb4e64ff3bc5d8061a1b2ce10549c2475", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -365,13 +365,15 @@ do { fprintf (FILE, \"\\tbr $1,0\\n\");\t\t\t\\\n COMMON_SECTION\t\t\t\\\n SSIB_SECTION\t\n \n+extern void common_section PARAMS ((void));\n #define COMMON_SECTION\t\t\\\n void\t\t\t\t\\\n common_section ()\t\t\\\n {\t\t\t\t\\\n   in_section = in_common;\t\\\n }\n \n+extern void ssib_section PARAMS ((void));\n #define SSIB_SECTION\t\t\\\n void\t\t\t\t\\\n ssib_section ()\t\t\t\\"}, {"sha": "115fc2f8a4f59ec11f954ff299b89362164f91cc", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -413,6 +413,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define DIR_SEPARATOR ']'\n \n+#undef PREFIX\n #define PREFIX \"GNU_ROOT:\"\n \n /* XXX Really? Even with modern CRTL? */"}, {"sha": "4b9c38a1f0b3137452528eb45864a4a15031dc28", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #define ARM_PE_FLAG_CHAR '@'\n \n /* Ensure that @x. will be stripped from the function name.  */\n+#undef SUBTARGET_NAME_ENCODING_LENGTHS\n #define SUBTARGET_NAME_ENCODING_LENGTHS  \\\n   case ARM_PE_FLAG_CHAR: return 3;\n "}, {"sha": "16dc9a93d48a0c6fe6493fa14fbbd20cca07a20d", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -101,6 +101,9 @@ static label_node_t * mvs_get_label PARAMS ((int));\n static void i370_label_scan PARAMS ((void));\n static void i370_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+#ifdef LONGEXTERNAL\n+static int mvs_hash_alias PARAMS ((const char *));\n+#endif\n \n /* ===================================================== */\n /* defines and functions specific to the HLASM assembler */\n@@ -135,9 +138,6 @@ alias_node_t;\n /* Alias node list anchor.  */\n static alias_node_t *alias_anchor = 0;\n \n-/* Alias number */\n-static int alias_number = 0;\n-\n /* Define the length of the internal MVS function table.  */\n #define MVS_FUNCTION_TABLE_LENGTH 32\n \n@@ -851,9 +851,10 @@ mvs_function_check (name)\n \n /* Generate a hash for a given key. */\n \n+#ifdef LONGEXTERNAL\n static int\n mvs_hash_alias (key)\n-     char *key;\n+     const char *key;\n {\n   int h;\n   int i;\n@@ -864,7 +865,7 @@ mvs_hash_alias (key)\n     h = ((h * MVS_SET_SIZE) + key[i]) % MVS_HASH_PRIME;\n   return (h);\n }\n-\n+#endif\n \n /* Add the alias to the current alias list.  */\n "}, {"sha": "837fbda988f97084d95c2d202029e6c63da3d20b", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -69,7 +69,7 @@ static void  m32r_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n \n static int    m32r_adjust_cost \t   PARAMS ((rtx, rtx, rtx, int));\n static int    m32r_adjust_priority PARAMS ((rtx, int));\n-static void   m32r_sched_init\t   PARAMS ((FILE *, int));\n+static void   m32r_sched_init\t   PARAMS ((FILE *, int, int));\n static int    m32r_sched_reorder   PARAMS ((FILE *, int, rtx *, int *, int));\n static int    m32r_variable_issue  PARAMS ((FILE *, int, rtx, int));\n static int    m32r_issue_rate\t   PARAMS ((void));\n@@ -1555,9 +1555,10 @@ m32r_adjust_priority (insn, priority)\n /* Initialize for scheduling a group of instructions.  */\n \n static void\n-m32r_sched_init (stream, verbose)\n+m32r_sched_init (stream, verbose, max_ready)\n      FILE * stream ATTRIBUTE_UNUSED;\n      int verbose ATTRIBUTE_UNUSED;\n+     int max_ready ATTRIBUTE_UNUSED;\n {\n   m32r_sched_odd_word_p = FALSE;\n }\n@@ -2774,8 +2775,8 @@ m32r_expand_block_move (operands)\n   /* If necessary, generate a loop to handle the bulk of the copy.  */\n   if (bytes)\n     {\n-      rtx label;\n-      rtx final_src;\n+      rtx label = NULL_RTX;\n+      rtx final_src = NULL_RTX;\n       rtx at_a_time = GEN_INT (MAX_MOVE_BYTES);\n       rtx rounded_total = GEN_INT (bytes);\n "}, {"sha": "a60aa00860530e7e3189a325d8f80d4481cdb1a4", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -339,7 +339,7 @@ enum reg_class {\n \n #ifndef REG_OK_STRICT\n # define REGNO_IN_RANGE_P(regno,min,max) \\\n-  (((regno) >= (min) && (regno) <= (max)) || (regno) >= FIRST_PSEUDO_REGISTER)\n+  (IN_RANGE ((regno), (min), (max)) || (regno) >= FIRST_PSEUDO_REGISTER)\n #else\n # define REGNO_IN_RANGE_P(regno,min,max) \\\n   (IN_RANGE ((regno), (min), (max)) \\"}, {"sha": "2c0738f68b213117f408fc6763e3902ba82ea30f", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -140,7 +140,9 @@ Boston, MA 02111-1307, USA.  */\n /* Implicit calls to library routines.  */\n \n /* Use memcpy and memset instead of bcopy and bzero.  */\n+#ifndef TARGET_MEM_FUNCTIONS\n #define TARGET_MEM_FUNCTIONS\n+#endif\n \n /* Miscellaneous parameters.  */\n "}, {"sha": "5d4def82fb83177ff7901b889f5873c060dc2efa", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"recog.h\"\n #include \"c-pragma.h\"\n+#include \"integrate.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -746,7 +747,7 @@ output_far_jump (insn, op)\n      rtx op;\n {\n   struct { rtx lab, reg, op; } this;\n-  rtx braf_base_lab;\n+  rtx braf_base_lab = NULL_RTX;\n   const char *jump;\n   int far;\n   int offset = branch_dest (insn) - INSN_ADDRESSES (INSN_UID (insn));"}, {"sha": "351fe017c492e195fc349edb49ce19eb3f5c9e25", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -1425,12 +1425,15 @@ shorten_branches (first)\n \t      rtx rel_lab = XEXP (XEXP (body, 0), 0);\n \t      rtx min_lab = XEXP (XEXP (body, 2), 0);\n \t      rtx max_lab = XEXP (XEXP (body, 3), 0);\n-\t      addr_diff_vec_flags flags = ADDR_DIFF_VEC_FLAGS (body);\n \t      int rel_addr = INSN_ADDRESSES (INSN_UID (rel_lab));\n \t      int min_addr = INSN_ADDRESSES (INSN_UID (min_lab));\n \t      int max_addr = INSN_ADDRESSES (INSN_UID (max_lab));\n \t      rtx prev;\n \t      int rel_align = 0;\n+\t      addr_diff_vec_flags flags;\n+\n+\t      /* Avoid automatic aggregate initialization.  */\n+\t      flags = ADDR_DIFF_VEC_FLAGS (body);\n \n \t      /* Try to find a known alignment for rel_lab.  */\n \t      for (prev = rel_lab;"}, {"sha": "4bcfc226c7516edac60f43ded0993c747d367884", "filename": "gcc/integrate.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/950a3816a7e54f132d34e5458474db5465b917ca/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=950a3816a7e54f132d34e5458474db5465b917ca", "patch": "@@ -2693,7 +2693,10 @@ subst_constants (loc, insn, map, memonly)\n \t\tnew = CONST0_RTX (mode);\n \t      else\n \t\t{\n-\t\t  REAL_VALUE_TYPE val = FLOAT_STORE_FLAG_VALUE (mode);\n+\t\t  REAL_VALUE_TYPE val;\n+\n+\t\t  /* Avoid automatic aggregate initialization.  */\n+\t\t  val = FLOAT_STORE_FLAG_VALUE (mode);\n \t\t  new = CONST_DOUBLE_FROM_REAL_VALUE (val, mode);\n \t\t}\n \t    }"}]}