{"sha": "73109af7527b8c42510b1144cc2118a175960903", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxMDlhZjc1MjdiOGM0MjUxMGIxMTQ0Y2MyMTE4YTE3NTk2MDkwMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-09-06T19:57:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-09-06T19:57:57Z"}, "message": "re PR target/22362 (static function calls and global register variables)\n\n\tPR target/22362\n\t* config/i386/i386.c (ix86_function_regparm): Make sure automatic regparm\n\tfor internal functions doesn't use registers used by global registers\n\tvariables.  Use fewer register parameters if there are global register\n\tvariables.\n\n\t* gcc.target/i386/pr22362.c: New test.\n\nFrom-SVN: r103964", "tree": {"sha": "978465120a74b359693836e943442478555e6466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978465120a74b359693836e943442478555e6466"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73109af7527b8c42510b1144cc2118a175960903", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73109af7527b8c42510b1144cc2118a175960903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73109af7527b8c42510b1144cc2118a175960903", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73109af7527b8c42510b1144cc2118a175960903/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60a23e2e02d5fafd887891c0fd910f7fdc760055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a23e2e02d5fafd887891c0fd910f7fdc760055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a23e2e02d5fafd887891c0fd910f7fdc760055"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "9c603172c66084904d07f2b5d0adb2f068fb377e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73109af7527b8c42510b1144cc2118a175960903/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73109af7527b8c42510b1144cc2118a175960903/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73109af7527b8c42510b1144cc2118a175960903", "patch": "@@ -1,3 +1,11 @@\n+2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/22362\n+\t* config/i386/i386.c (ix86_function_regparm): Make sure automatic regparm\n+\tfor internal functions doesn't use registers used by global registers\n+\tvariables.  Use fewer register parameters if there are global register\n+\tvariables.\n+\n 2005-09-06  Olivier Hainque  <hainque@adacore.com>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "2325efd1aa5e4aa9e5a6379546d596f200cfb834", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73109af7527b8c42510b1144cc2118a175960903/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73109af7527b8c42510b1144cc2118a175960903/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=73109af7527b8c42510b1144cc2118a175960903", "patch": "@@ -2148,12 +2148,29 @@ ix86_function_regparm (tree type, tree decl)\n \t  struct cgraph_local_info *i = cgraph_local_info (decl);\n \t  if (i && i->local)\n \t    {\n+\t      int local_regparm, globals = 0, regno;\n+\n+\t      /* Make sure no regparm register is taken by a global register\n+\t\t variable.  */\n+\t      for (local_regparm = 0; local_regparm < 3; local_regparm++)\n+\t\tif (global_regs[local_regparm])\n+\t\t  break;\n \t      /* We can't use regparm(3) for nested functions as these use\n \t\t static chain pointer in third argument.  */\n-\t      if (DECL_CONTEXT (decl) && !DECL_NO_STATIC_CHAIN (decl))\n-\t\tregparm = 2;\n-\t      else\n-\t\tregparm = 3;\n+\t      if (local_regparm == 3\n+\t\t  && DECL_CONTEXT (decl) && !DECL_NO_STATIC_CHAIN (decl))\n+\t\tlocal_regparm = 2;\n+\t      /* Each global register variable increases register preassure,\n+\t\t so the more global reg vars there are, the smaller regparm\n+\t\t optimization use, unless requested by the user explicitly.  */\n+\t      for (regno = 0; regno < 6; regno++)\n+\t\tif (global_regs[regno])\n+\t\t  globals++;\n+\t      local_regparm\n+\t\t= globals < local_regparm ? local_regparm - globals : 0;\n+\n+\t      if (local_regparm > regparm)\n+\t\tregparm = local_regparm;\n \t    }\n \t}\n     }"}, {"sha": "b76b34bd00944a0e3d7be91c3d53ffe117bc1987", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73109af7527b8c42510b1144cc2118a175960903/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73109af7527b8c42510b1144cc2118a175960903/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73109af7527b8c42510b1144cc2118a175960903", "patch": "@@ -1,5 +1,8 @@\n 2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/22362\n+\t* gcc.target/i386/pr22362.c: New test.\n+\n \tPR rtl-optimization/23098\n \t* gcc.target/i386/pr23098.c: Add dg-require-effective-target ilp32.\n "}, {"sha": "a7c78b12f8484829424df0a513524754525e761e", "filename": "gcc/testsuite/gcc.target/i386/pr22362.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73109af7527b8c42510b1144cc2118a175960903/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22362.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73109af7527b8c42510b1144cc2118a175960903/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22362.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22362.c?ref=73109af7527b8c42510b1144cc2118a175960903", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/22362 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+register unsigned int reg0 __asm__ (\"esi\");\n+register unsigned int reg1 __asm__ (\"edi\");\n+register unsigned int reg2 __asm__ (\"ebx\");\n+\n+static unsigned int\n+__attribute__((noinline))\n+foo (unsigned long *x, void *y, void *z)\n+{\n+  int i;\n+\n+  for (i = 5; i > 0; i--)\n+    x[i] = (unsigned long) foo ((unsigned long *) x[i], y, z);\n+  return 0;\n+}\n+\n+unsigned int\n+bar (void)\n+{\n+  return foo (0, 0, 0);\n+}"}]}