{"sha": "55dd8445566670fbfd037d6d586875b68942fc60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVkZDg0NDU1NjY2NzBmYmZkMDM3ZDZkNTg2ODc1YjY4OTQyZmM2MA==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2009-08-29T19:27:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-08-29T19:27:05Z"}, "message": "move.h (_GLIBCXX_FORWARD): Add.\n\n2009-08-29  Chris Jefferson  <chris@bubblescope.net>\n\n\t* include/bits/move.h (_GLIBCXX_FORWARD): Add.\n\t* include/bits/stl_uninitialized.h (__uninitialized_construct_range):\n\tAdd.\n\t* include/bits/stl_tempbuf.h (_Temporary_buffer::\n\t_Temporary_buffer(_ForwardIterator, _ForwardIterator)): Use the latter.\n\t* include/bits/stl_construct.h (_Construct(_T1*, _T2&&)): Add in\n\tC++0x mode.\n\t* testsuite/util/testsuite_hooks.h (operator<(const copy_tracker&,\n    \tconst copy_tracker&)): Add.\n\t* testsuite/25_algorithms/stable_partition/mem_check.cc: New.\n\t* testsuite/25_algorithms/stable_sort/mem_check.cc: Likewise.\n\nFrom-SVN: r151207", "tree": {"sha": "d984898488471f4f866a2e225cabb539f07d3485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d984898488471f4f866a2e225cabb539f07d3485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55dd8445566670fbfd037d6d586875b68942fc60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dd8445566670fbfd037d6d586875b68942fc60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55dd8445566670fbfd037d6d586875b68942fc60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dd8445566670fbfd037d6d586875b68942fc60/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1588ca05296a29bb2322b956aaeebd539d33c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1588ca05296a29bb2322b956aaeebd539d33c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1588ca05296a29bb2322b956aaeebd539d33c5d"}], "stats": {"total": 272, "additions": 267, "deletions": 5}, "files": [{"sha": "818d3c3f2a187be725ca143c464bf278e2252f5c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -1,3 +1,17 @@\n+2009-08-29  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* include/bits/move.h (_GLIBCXX_FORWARD): Add.\n+\t* include/bits/stl_uninitialized.h (__uninitialized_construct_range):\n+\tAdd.\n+\t* include/bits/stl_tempbuf.h (_Temporary_buffer::\n+\t_Temporary_buffer(_ForwardIterator, _ForwardIterator)): Use the latter.\n+\t* include/bits/stl_construct.h (_Construct(_T1*, _T2&&)): Add in\n+\tC++0x mode.\n+\t* testsuite/util/testsuite_hooks.h (operator<(const copy_tracker&,\n+    \tconst copy_tracker&)): Add.\n+\t* testsuite/25_algorithms/stable_partition/mem_check.cc: New.\n+\t* testsuite/25_algorithms/stable_sort/mem_check.cc: Likewise.\n+\n 2009-08-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Fixups for string member functions.\n@@ -134,8 +148,8 @@\n \ttypes.\n \t(__unguarded_linear_insert): Assume always inserting value at __last.\n \t(__unguarded_partition): Take pivot by reference.\n-\t(__introsort_loop, __introselect) : Use __unguarded_partition_pivot.\n-\t* testsuite/25_algorithms/nth_element/moveable.cc : Enable.\n+\t(__introsort_loop, __introselect): Use __unguarded_partition_pivot.\n+\t* testsuite/25_algorithms/nth_element/moveable.cc: Enable.\n \n 2009-08-23  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n "}, {"sha": "668e64c7cd09508318fa0c131dd148aec914901e", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -84,8 +84,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n _GLIBCXX_END_NAMESPACE\n \n #define _GLIBCXX_MOVE(_Tp) std::move(_Tp)\n+#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)\n #else\n #define _GLIBCXX_MOVE(_Tp) (_Tp)\n+#define _GLIBCXX_FORWARD(_Tp, __val) (__val)\n #endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "0366eec69c73d699c7ba139ef657547655f35c67", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -67,11 +67,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    */\n   template<typename _T1, typename _T2>\n     inline void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+    // Allow perfect forwarding\n+    _Construct(_T1* __p, _T2&& __value)\n+#else\n     _Construct(_T1* __p, const _T2& __value)\n+#endif\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_]allocator::construct\n-      ::new(static_cast<void*>(__p)) _T1(__value);\n+      ::new(static_cast<void*>(__p)) _T1(_GLIBCXX_FORWARD(_T2, __value));\n     }\n \n   /**"}, {"sha": "2b887912a10361d01ea3dc47e9fa144a6d1b16df", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -188,8 +188,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t    value_type>(_M_original_len));\n \t  _M_buffer = __p.first;\n \t  _M_len = __p.second;\n-\t  if (!__is_pod(_Tp) && _M_len > 0)\n-\t    std::uninitialized_fill_n(_M_buffer, _M_len, *__first);\n+\t  if(_M_buffer)\n+\t    std::__uninitialized_construct_range(_M_buffer, _M_buffer + _M_len,\n+\t\t\t\t\t\t *__first);\n \t}\n       __catch(...)\n \t{"}, {"sha": "bd04ae9e571b5c30da0b9d4071830848387b1aba", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -172,6 +172,68 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n \n+  template<bool>\n+    struct __uninitialized_construct_range_dispatch\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        __ucr(_ForwardIterator __first, _ForwardIterator __last,\n+\t      _Tp& __value)\n+        {\n+\t  if(__first == __last)\n+\t    return;\n+\n+\t  _ForwardIterator __cur = __first;\n+\t  __try\n+\t    {\n+\t      std::_Construct(&*__first, _GLIBCXX_MOVE(__value));\n+\t      _ForwardIterator __prev = __cur;\n+\t      ++__cur;\n+\t      for(; __cur != __last; ++__cur, ++__prev)\n+\t\tstd::_Construct(&*__cur, _GLIBCXX_MOVE(*__prev));\n+\t      __value = _GLIBCXX_MOVE(*__prev);\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      std::_Destroy(__first, __cur);\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n+    };\n+\n+  template<>\n+    struct __uninitialized_construct_range_dispatch<true>\n+    {\n+      template<typename _ForwardIterator, typename _Tp>\n+        static void\n+        __ucr(_ForwardIterator, _ForwardIterator, _Tp&) { }\n+    };\n+\n+  // Constructs objects in the range [first, last).\n+  // Note that while these new objects will take valid values,\n+  // their exact value is not defined. In particular they may\n+  // be 'moved from'.\n+  //\n+  // While __value may altered during this algorithm, it will have\n+  // the same value when the algorithm finishes, unless one of the\n+  // constructions throws.\n+  //\n+  // Requirements: _ForwardIterator::value_type(_Tp&&) is valid.\n+  template<typename _ForwardIterator, typename _Tp>\n+    inline void\n+    __uninitialized_construct_range(_ForwardIterator __first,\n+\t\t\t\t    _ForwardIterator __last,\n+\t\t\t\t    _Tp& __value)\n+    {\n+      typedef typename std::iterator_traits<_ForwardIterator>::value_type\n+\t_ValueType;\n+\n+      std::__uninitialized_construct_range_dispatch<\n+        __has_trivial_constructor(_ValueType)>::\n+\t  __ucr(__first, __last, __value);\n+    }\n+\n+\n   template<bool>\n     struct __uninitialized_fill_n\n     {"}, {"sha": "81d816d36ad67086e35678e253e75a2b5f74ea7c", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/mem_check.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmem_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmem_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2Fmem_check.cc?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.2.12 [lib.alg.partitions] Partitions.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::copy_tracker;\n+using __gnu_test::copy_constructor;\n+using __gnu_test::assignment_operator;\n+using __gnu_test::destructor;\n+\n+typedef test_container<copy_tracker, random_access_iterator_wrapper> Container;\n+\n+const int A[] = {10, 20, 1, 11, 2, 21, 28, 29, 12, 35, 15, 27, 6, 16, 7, \n+                 25, 17, 8, 23, 18, 9, 19, 24, 30, 13, 4, 14, 22, 26};\n+\n+bool even(const copy_tracker& ct)\n+{ return ct.id() < 19; }\n+\n+void\n+test1(int throw_count)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copy_tracker vals[30];\n+  for(int i = 0; i < 30; ++i)\n+    vals[i] = A[i];\n+\n+  Container con(vals, vals + 30);\n+  copy_tracker::reset();\n+  copy_constructor::throw_on(throw_count);\n+  int throw_occurred = 0;\n+  try\n+    {\n+      std::stable_partition(con.begin(), con.end(), even);\n+    }\n+  catch(...) \n+    {\n+      throw_occurred = 1;\n+    }\n+\n+  // If a throw occurred in copy_constructor, we will end up with one more\n+  // copy_construct than destructor.\n+  VERIFY( destructor::count() == copy_constructor::count() - throw_occurred );\n+}\n+\n+int main()\n+{\n+  for(int i = 0; i < 32; ++i)\n+    test1(i);\n+  return 0;\n+}"}, {"sha": "78c14b43ec5ab214a692b89f239e34907d7b4bec", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/mem_check.cc", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmem_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmem_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fmem_check.cc?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -0,0 +1,103 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 25.3.1.2 [lib.stable.sort]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::copy_tracker;\n+using __gnu_test::copy_constructor;\n+using __gnu_test::assignment_operator;\n+using __gnu_test::destructor;\n+\n+typedef test_container<copy_tracker, random_access_iterator_wrapper> Container;\n+\n+const int A[] = {10, 20, 1, 11, 2, 21, 28, 29, 12, 35, 15, 27, 6, 16, 7, \n+                 25, 17, 8, 23, 18, 9, 19, 24, 30, 13, 4, 14, 22, 26};\n+\n+void\n+test_mem1(int throw_count)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copy_tracker vals[30];\n+  for(int i = 0; i < 30; ++i)\n+    vals[i] = A[i];\n+\n+  Container con(vals, vals + 30);\n+  copy_tracker::reset();\n+  copy_constructor::throw_on(throw_count);\n+  int throw_occurred = 0;\n+  try\n+    {\n+      std::stable_sort(con.begin(), con.end());\n+    }\n+  catch(...) \n+    {\n+      throw_occurred = 1;\n+    }\n+\n+  // If a throw occurred in copy_constructor, we will end up with one more\n+  // copy_construct than destructor.\n+  VERIFY( destructor::count() == copy_constructor::count() - throw_occurred );\n+}\n+\n+bool\n+is_ordered(const copy_tracker& lhs, const copy_tracker& rhs)\n+{ return lhs < rhs; }\n+\n+void\n+test_mem2(int throw_count)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  copy_tracker vals[30];\n+  for(int i = 0; i < 30; ++i)\n+    vals[i] = A[i];\n+\n+  Container con(vals, vals + 30);\n+  copy_tracker::reset();\n+  copy_constructor::throw_on(throw_count);\n+  int throw_occurred = 0;\n+  try\n+    {\n+      std::stable_sort(con.begin(), con.end(), is_ordered);\n+    }\n+  catch(...) \n+    {\n+      throw_occurred = 1;\n+    }\n+\n+  // If a throw occurred in copy_constructor, we will end up with one more\n+  // copy_construct than destructor.\n+  VERIFY( destructor::count() == copy_constructor::count() - throw_occurred );\n+}\n+\n+int main()\n+{\n+  for(int i = 0; i < 60; ++i)\n+  {\n+    test_mem1(i);\n+    test_mem2(i);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "d28a986b853b96155f0619e718beecb44b4aaafa", "filename": "libstdc++-v3/testsuite/util/testsuite_hooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55dd8445566670fbfd037d6d586875b68942fc60/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_hooks.h?ref=55dd8445566670fbfd037d6d586875b68942fc60", "patch": "@@ -301,6 +301,10 @@ namespace __gnu_test\n   operator==(const copy_tracker& lhs, const copy_tracker& rhs)\n   { return lhs.id() == rhs.id(); }\n \n+  inline bool\n+  operator<(const copy_tracker& lhs, const copy_tracker& rhs)\n+  { return lhs.id() < rhs.id(); }\n+\n   // Class for checking required type conversions, implicit and\n   // explicit for given library data structures. \n   template<typename _Container>"}]}