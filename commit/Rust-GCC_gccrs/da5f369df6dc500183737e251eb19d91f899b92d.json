{"sha": "da5f369df6dc500183737e251eb19d91f899b92d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1ZjM2OWRmNmRjNTAwMTgzNzM3ZTI1MWViMTlkOTFmODk5YjkyZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-02-27T14:34:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-02-27T14:34:23Z"}, "message": "Fix broken type comparison assert\n\nIn implementing Jason's suggested direction for 93933, the compiler\nexploded in a surprising way.  Turns out an assert had been passing\nNULLS to comptypes, and therefore not checking what it intended.\n\nFurther comptypes, could silently accept such nulls under most\ncircumstances.\n\n\t* class.c (adjust_clone_args): Correct arg-checking assert.\n\t* typeck.c (comptypes): Assert not nulls.", "tree": {"sha": "8a092dec50f1b1a78e0ef7516058c9e0d8a1b0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a092dec50f1b1a78e0ef7516058c9e0d8a1b0b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da5f369df6dc500183737e251eb19d91f899b92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5f369df6dc500183737e251eb19d91f899b92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da5f369df6dc500183737e251eb19d91f899b92d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da5f369df6dc500183737e251eb19d91f899b92d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94f2542305ccb5c4a3c4e5e8212713747623417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94f2542305ccb5c4a3c4e5e8212713747623417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94f2542305ccb5c4a3c4e5e8212713747623417"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "5e9eeec17ee90cdd3c6dcaf920e40150b6bd5469", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5f369df6dc500183737e251eb19d91f899b92d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5f369df6dc500183737e251eb19d91f899b92d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da5f369df6dc500183737e251eb19d91f899b92d", "patch": "@@ -1,3 +1,8 @@\n+2020-02-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (adjust_clone_args): Correct arg-checking assert.\n+\t* typeck.c (comptypes): Assert not nulls.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93789 - ICE with invalid array bounds."}, {"sha": "b3787f75d7b6aeab4cbc1f3ced917008b7f8794f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5f369df6dc500183737e251eb19d91f899b92d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5f369df6dc500183737e251eb19d91f899b92d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=da5f369df6dc500183737e251eb19d91f899b92d", "patch": "@@ -4900,8 +4900,8 @@ adjust_clone_args (tree decl)\n \t      break;\n \t    }\n \n-\t  gcc_assert (same_type_p (TREE_TYPE (decl_parms),\n-\t\t\t\t   TREE_TYPE (clone_parms)));\n+\t  gcc_checking_assert (same_type_p (TREE_VALUE (decl_parms),\n+\t\t\t\t\t    TREE_VALUE (clone_parms)));\n \n \t  if (TREE_PURPOSE (decl_parms) && !TREE_PURPOSE (clone_parms))\n \t    {"}, {"sha": "42d0b47cf1bf97b038364537cb7a658b5f663979", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da5f369df6dc500183737e251eb19d91f899b92d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da5f369df6dc500183737e251eb19d91f899b92d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=da5f369df6dc500183737e251eb19d91f899b92d", "patch": "@@ -1483,10 +1483,13 @@ structural_comptypes (tree t1, tree t2, int strict)\n bool\n comptypes (tree t1, tree t2, int strict)\n {\n+  gcc_checking_assert (t1 && t2);\n+\n   if (strict == COMPARE_STRICT && comparing_specializations\n       && (t1 != TYPE_CANONICAL (t1) || t2 != TYPE_CANONICAL (t2)))\n     /* If comparing_specializations, treat dependent aliases as distinct.  */\n     strict = COMPARE_STRUCTURAL;\n+\n   if (strict == COMPARE_STRICT)\n     {\n       if (t1 == t2)"}]}