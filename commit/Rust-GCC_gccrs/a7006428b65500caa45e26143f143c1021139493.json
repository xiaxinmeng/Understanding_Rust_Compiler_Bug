{"sha": "a7006428b65500caa45e26143f143c1021139493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMDY0MjhiNjU1MDBjYWE0NWUyNjE0M2YxNDNjMTAyMTEzOTQ5Mw==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-02-02T04:34:15Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-02-02T04:34:15Z"}, "message": "2002-02-01  Adam Megacz <adam@xwt.org>\n\n        * prims.cc\n        (_Jv_CreateJavaVM): We now use WIN32 instead of\n        USE_WIN32_SIGNALLING and USE_WINSOCK.\n        (win32_exception_handler): Now throws an exception out of\n        the signal handler; assumes SJLJ\n\nFrom-SVN: r49429", "tree": {"sha": "44639ae2b8b19fee5fc19dca154b0352865f2f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44639ae2b8b19fee5fc19dca154b0352865f2f0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7006428b65500caa45e26143f143c1021139493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7006428b65500caa45e26143f143c1021139493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7006428b65500caa45e26143f143c1021139493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7006428b65500caa45e26143f143c1021139493/comments", "author": null, "committer": null, "parents": [{"sha": "a70cb11b6cf6b16ef6b20328027a11ccb516c286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a70cb11b6cf6b16ef6b20328027a11ccb516c286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a70cb11b6cf6b16ef6b20328027a11ccb516c286"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "baabfcd518062c0e11163777d910f431fb2a5903", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7006428b65500caa45e26143f143c1021139493/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7006428b65500caa45e26143f143c1021139493/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a7006428b65500caa45e26143f143c1021139493", "patch": "@@ -1,3 +1,11 @@\n+2002-02-01  Adam Megacz <adam@xwt.org>\n+\n+\t* prims.cc\n+\t(_Jv_CreateJavaVM): We now use WIN32 instead of\n+\tUSE_WIN32_SIGNALLING and USE_WINSOCK.\n+\t(win32_exception_handler): Now throws an exception out of\n+\tthe signal handler; assumes SJLJ\n+\t\n 2002-02-01  Adam Megacz\n \n         * win32-threads.cc:"}, {"sha": "23ee38d50603d53f274220d3c780762e5e5e56d7", "filename": "libjava/prims.cc", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7006428b65500caa45e26143f143c1021139493/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7006428b65500caa45e26143f143c1021139493/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=a7006428b65500caa45e26143f143c1021139493", "patch": "@@ -10,14 +10,14 @@ details.  */\n \n #include <config.h>\n \n-#ifdef USE_WIN32_SIGNALLING\n+#ifdef WIN32\n #include <windows.h>\n-#endif /* USE_WIN32_SIGNALLING */\n+#endif /* WIN32 */\n \n-#ifdef USE_WINSOCK\n+#ifdef WIN32\n #undef __INSIDE_CYGWIN__\n #include <winsock.h>\n-#endif /* USE_WINSOCK */\n+#endif /* WIN32 */\n \n #include <stdlib.h>\n #include <stdarg.h>\n@@ -730,28 +730,19 @@ _Jv_ThisExecutable (const char *name)\n     }\n }\n \n-#ifdef USE_WIN32_SIGNALLING\n+#ifdef WIN32\n \n extern \"C\" int* win32_get_restart_frame (void *);\n \n LONG CALLBACK\n win32_exception_handler (LPEXCEPTION_POINTERS e)\n {\n-  int* setjmp_buf;\n-  if (e->ExceptionRecord->ExceptionCode == EXCEPTION_ACCESS_VIOLATION)   \n-    setjmp_buf = win32_get_restart_frame (nullp);\n+  if (e->ExceptionRecord->ExceptionCode == EXCEPTION_ACCESS_VIOLATION)\n+    _Jv_ThrowNullPointerException();\n   else if (e->ExceptionRecord->ExceptionCode == EXCEPTION_INT_DIVIDE_BY_ZERO)\n-    setjmp_buf = win32_get_restart_frame (arithexception);\n+    throw new java::lang::ArithmeticException;\n   else\n     return EXCEPTION_CONTINUE_SEARCH;\n-\n-  e->ContextRecord->Ebp = setjmp_buf[0];\n-  // FIXME: Why does i386-signal.h increment the PC here, do we need to do it?\n-  e->ContextRecord->Eip = setjmp_buf[1];\n-  // FIXME: Is this the stack pointer? Do we need it?\n-  e->ContextRecord->Esp = setjmp_buf[2];\n-\n-  return EXCEPTION_CONTINUE_EXECUTION;\n }\n \n #endif\n@@ -962,14 +953,11 @@ _Jv_CreateJavaVM (void* /*vm_args*/)\n   LTDL_SET_PRELOADED_SYMBOLS ();\n #endif\n \n-#ifdef USE_WINSOCK\n+#ifdef WIN32\n   // Initialise winsock for networking\n   WSADATA data;\n   if (WSAStartup (MAKEWORD (1, 1), &data))\n       MessageBox (NULL, \"Error initialising winsock library.\", \"Error\", MB_OK | MB_ICONEXCLAMATION);\n-#endif /* USE_WINSOCK */\n-\n-#ifdef USE_WIN32_SIGNALLING\n   // Install exception handler\n   SetUnhandledExceptionFilter (win32_exception_handler);\n #elif defined(HAVE_SIGACTION)"}]}