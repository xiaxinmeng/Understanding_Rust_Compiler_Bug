{"sha": "05170031abc9baabb16c0f181228bd9343b0bfc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNzAwMzFhYmM5YmFhYmIxNmMwZjE4MTIyOGJkOTM0M2IwYmZjNA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2006-11-23T18:39:32Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2006-11-23T18:39:32Z"}, "message": "re PR c/9072 (-Wconversion should be split into two distinct flags)\n\n2006-11-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/9072 \n\t* c.opt (Wtraditional-conversion): New.\n\t(Wconversion): Update description.\n\t* c-typeck.c (convert_arguments): Warnings for prototypes causing\n\ttype conversions different from what would happen in the absence\n\tof prototype are now handled by Wtraditional-conversion.\n\t* doc/invoke.texi (Wtraditional-conversion): New.\n\t(Wconversion): Update description.\n\t* doc/trouble.texi (Wconversion): Replace Wconversion by\n\tWtraditional-conversion.\n\ntestsuite/\n\n\tPR c/9072 \n\t* gcc.dg/builtin-protos-1.c: Replace Wconversion by\n\tWtraditional-conversion.\n\t* gcc.dg/overflow-warn-2.c: Likewise.\n\t* gcc.dg/Wconversion.c: Likewise. Renamed as\n\tWtraditional-conversion.c .\n\t* gcc.dg/Wconversion-2.c: Likewise. Renamed as\n\tWtraditional-conversion-2.c .\n\t* gcc.dg/dfp/Wconversion-2.c: Likewise. Renamed as\n\tWtraditional-conversion-2.c \n\t* gcc.dg/Wconversion-negative-constants.c: New.\n\nFrom-SVN: r119129", "tree": {"sha": "58e110ee1cede177bc7d803aaddb4783e9aa901a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58e110ee1cede177bc7d803aaddb4783e9aa901a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05170031abc9baabb16c0f181228bd9343b0bfc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05170031abc9baabb16c0f181228bd9343b0bfc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05170031abc9baabb16c0f181228bd9343b0bfc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05170031abc9baabb16c0f181228bd9343b0bfc4/comments", "author": null, "committer": null, "parents": [{"sha": "61968738d593d57924732efc7af1aae64bf49355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61968738d593d57924732efc7af1aae64bf49355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61968738d593d57924732efc7af1aae64bf49355"}], "stats": {"total": 191, "additions": 140, "deletions": 51}, "files": [{"sha": "0ce87445c74a3af25a8d56919b184a825f122ec3", "filename": "ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,6 +1,6 @@\n 2006-11-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n-        * MAINTAINERS (Write After Approval): Add myself.\n+\t* MAINTAINERS (Write After Approval): Add myself.\n \n 2006-11-22  Philipp Thomas <pth@suse.de>\n "}, {"sha": "f649c7b77493ef40acd455b4e7ade579d0c5c52e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,3 +1,16 @@\n+2006-11-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/9072 \n+\t* c.opt (Wtraditional-conversion): New.\n+\t(Wconversion): Update description.\n+\t* c-typeck.c (convert_arguments): Warnings for prototypes causing\n+\ttype conversions different from what would happen in the absence\n+\tof prototype are now handled by Wtraditional-conversion.\n+\t* doc/invoke.texi (Wtraditional-conversion): New.\n+\t(Wconversion): Update description.\n+\t* doc/trouble.texi (Wconversion): Replace Wconversion by\n+\tWtraditional-conversion.\n+\n 2006-11-23  Andrew Pinski  <pinskia@gmail.com>\n \n \t* predict.c (tree_estimate_probability): Check to make"}, {"sha": "1b0e33a794683afb42e88608818027802b833426", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -2427,7 +2427,7 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t    {\n \t      /* Optionally warn about conversions that\n \t\t differ from the default conversions.  */\n-\t      if (warn_conversion || warn_traditional)\n+\t      if (warn_traditional_conversion || warn_traditional)\n \t\t{\n \t\t  unsigned int formal_prec = TYPE_PRECISION (type);\n \n@@ -2503,8 +2503,8 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t    }\n \t\t  /* Detect integer changing in width or signedness.\n \t\t     These warnings are only activated with\n-\t\t     -Wconversion, not with -Wtraditional.  */\n-\t\t  else if (warn_conversion && INTEGRAL_TYPE_P (type)\n+\t\t     -Wtraditional-conversion, not with -Wtraditional.  */\n+\t\t  else if (warn_traditional_conversion && INTEGRAL_TYPE_P (type)\n \t\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (val)))\n \t\t    {\n \t\t      tree would_have_been = default_conversion (val);\n@@ -2517,7 +2517,7 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t\t   and the actual arg is that enum type.  */\n \t\t\t;\n \t\t      else if (formal_prec != TYPE_PRECISION (type1))\n-\t\t\twarning (OPT_Wconversion, \"passing argument %d of %qE \"\n+\t\t\twarning (OPT_Wtraditional_conversion, \"passing argument %d of %qE \"\n \t\t\t\t \"with different width due to prototype\",\n \t\t\t\t argnum, rname);\n \t\t      else if (TYPE_UNSIGNED (type) == TYPE_UNSIGNED (type1))\n@@ -2540,11 +2540,11 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t\t       && TYPE_UNSIGNED (TREE_TYPE (val)))\n \t\t\t;\n \t\t      else if (TYPE_UNSIGNED (type))\n-\t\t\twarning (OPT_Wconversion, \"passing argument %d of %qE \"\n+\t\t\twarning (OPT_Wtraditional_conversion, \"passing argument %d of %qE \"\n \t\t\t\t \"as unsigned due to prototype\",\n \t\t\t\t argnum, rname);\n \t\t      else\n-\t\t\twarning (OPT_Wconversion, \"passing argument %d of %qE \"\n+\t\t\twarning (OPT_Wtraditional_conversion, \"passing argument %d of %qE \"\n \t\t\t\t \"as signed due to prototype\", argnum, rname);\n \t\t    }\n \t\t}"}, {"sha": "6cd179038a66d378b2e03f584841da73739bfdbf", "filename": "gcc/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -151,7 +151,7 @@ Synonym for -Wcomment\n \n Wconversion\n C ObjC C++ ObjC++ Var(warn_conversion)\n-Warn about possibly confusing type conversions\n+Warn for implicit type conversions that may change a value\n \n Wctor-dtor-privacy\n C++ ObjC++ Var(warn_ctor_dtor_privacy)\n@@ -399,6 +399,10 @@ Wtraditional\n C ObjC Var(warn_traditional)\n Warn about features not present in traditional C\n \n+Wtraditional-conversion\n+C ObjC Var(warn_traditional_conversion)\n+Warn of prototypes causing type conversions different from what would happen in the absence of prototype\n+\n Wtrigraphs\n C ObjC C++ ObjC++\n Warn if trigraphs are encountered that might affect the meaning of the program"}, {"sha": "9f22681db32b78133858e50942c84ec8ee410ccc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -255,7 +255,7 @@ Objective-C and Objective-C++ Dialects}.\n @item C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n -Wmissing-prototypes  -Wnested-externs  -Wold-style-definition @gol\n--Wstrict-prototypes  -Wtraditional @gol\n+-Wstrict-prototypes  -Wtraditional  -Wtraditional-conversion @gol\n -Wdeclaration-after-statement -Wpointer-sign}\n \n @item Debugging Options\n@@ -3058,7 +3058,7 @@ traditional C case.\n Conversions by prototypes between fixed/floating point values and vice\n versa.  The absence of these prototypes when compiling with traditional\n C would cause serious problems.  This is a subset of the possible\n-conversion warnings, for the full set use @option{-Wconversion}.\n+conversion warnings, for the full set use @option{-Wtraditional-conversion}.\n \n @item\n Use of ISO C style function definitions.  This warning intentionally is\n@@ -3070,6 +3070,14 @@ because that feature is already a GCC extension and thus not relevant to\n traditional C compatibility.\n @end itemize\n \n+@item -Wtraditional-conversion @r{(C only)}\n+@opindex Wtraditional-conversion\n+Warn if a prototype causes a type conversion that is different from what\n+would happen to the same argument in the absence of a prototype.  This\n+includes conversions of fixed point to floating and vice versa, and\n+conversions changing the width or signedness of a fixed point argument\n+except when the same as the default promotion.\n+\n @item -Wdeclaration-after-statement @r{(C only)}\n @opindex Wdeclaration-after-statement\n Warn when a declaration is found after a statement in a block.  This\n@@ -3148,16 +3156,10 @@ this is why we did not make @option{-Wall} request these warnings.\n \n @item -Wconversion\n @opindex Wconversion\n-Warn if a prototype causes a type conversion that is different from what\n-would happen to the same argument in the absence of a prototype.  This\n-includes conversions of fixed point to floating and vice versa, and\n-conversions changing the width or signedness of a fixed point argument\n-except when the same as the default promotion.\n-\n-Also, warn if a negative integer constant expression is implicitly\n-converted to an unsigned type.  For example, warn about the assignment\n-@code{x = -1} if @code{x} is unsigned.  But do not warn about explicit\n-casts like @code{(unsigned) -1}.\n+Warn if a negative integer constant expression is implicitly converted\n+to an unsigned type.  For example, warn about the assignment\n+@code{unsigned x = -1} if @code{x} is unsigned. But do not warn about\n+explicit casts like @code{(unsigned) -1}.\n \n @item -Wsign-compare\n @opindex Wsign-compare"}, {"sha": "505f821d39b9ae4fb04ab66236a4e1231a6b1ed4", "filename": "gcc/doc/trouble.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fdoc%2Ftrouble.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Fdoc%2Ftrouble.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftrouble.texi?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -985,10 +985,10 @@ you are removing prototypes that were made with @command{protoize}; if\n the program worked before without any prototypes, it will work again\n without them.\n \n-@opindex Wconversion\n+@opindex Wtraditional-conversion\n You can find all the places where this problem might occur by compiling\n-the program with the @option{-Wconversion} option.  It prints a warning\n-whenever an argument is converted.\n+the program with the @option{-Wtraditional-conversion} option.  It\n+prints a warning whenever an argument is converted.\n \n @item\n Both conversion programs can be confused if there are macro calls in and"}, {"sha": "d78a3e52a7b1228a327435a7b3e4b33126f6f86d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,3 +1,17 @@\n+2006-11-23  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/9072 \n+\t* gcc.dg/builtin-protos-1.c: Replace Wconversion by\n+\tWtraditional-conversion.\n+\t* gcc.dg/overflow-warn-2.c: Likewise.\n+\t* gcc.dg/Wconversion.c: Likewise. Renamed as\n+\tWtraditional-conversion.c .\n+\t* gcc.dg/Wconversion-2.c: Likewise. Renamed as\n+\tWtraditional-conversion-2.c .\n+\t* gcc.dg/dfp/Wconversion-2.c: Likewise. Renamed as\n+\tWtraditional-conversion-2.c \n+\t* gcc.dg/Wconversion-negative-constants.c: New.\n+\n 2006-11-23  Andrew Pinski  <pinskia@gmail.com>\n \n \t* gcc.dg/tree-ssa/dump-1.c: New test."}, {"sha": "80ef4105cfc59d74e3a7c52640626a1dce8a1746", "filename": "gcc/testsuite/gcc.dg/Wconversion-negative-constants.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-negative-constants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-negative-constants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-negative-constants.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -0,0 +1,54 @@\n+/* Test for diagnostics for negative constants converted to unsigned types.\n+   These tests come from gcc/testsuite/gcc.dg/overflow-warn-2.c  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Wconversion\" } */\n+\n+#include <limits.h>\n+\n+void fuc (unsigned char);\n+\n+void hc (int x)\n+{\n+  unsigned char uc;\n+\n+  fuc (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  uc = '\\xa0'; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+\n+  fuc('A');\n+  uc = 'A';\n+\n+  uc = x ? 1 : -1;\n+\n+  uc = x ? SCHAR_MIN : 1;\n+}\n+\n+unsigned fui (unsigned int ui);\n+\n+void hi (int x)\n+{\n+  unsigned ui;\n+\n+  fui (-1); /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = x ? INT_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui ? SCHAR_MIN : 1U; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = 1U * -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+  ui = ui + INT_MIN; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n+\n+  ui = -1 * (1 * -1);\n+  ui = (unsigned) -1;\n+\n+  ui = x ? 1 : -1;\n+\n+  ui = x ? INT_MIN : 1;\n+\n+  ui = ui ? SCHAR_MIN : 1;\n+}\n+\n+\n+unsigned fui(unsigned a) { return a + -1; } /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */"}, {"sha": "60f0f64bd0e003a553dcad35521e4dd935c3d41e", "filename": "gcc/testsuite/gcc.dg/Wtraditional-conversion-2.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion-2.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,8 +1,8 @@\n-/* Test messages for -Wconversion, including that they are not\n+/* Test messages for -Wtraditional-conversion, including that they are not\n    pedwarns.  */\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -pedantic-errors -Wconversion\" } */\n+/* { dg-options \"-std=c99 -pedantic-errors -Wtraditional-conversion\" } */\n \n void fsc(signed char);\n void fsi(signed int);", "previous_filename": "gcc/testsuite/gcc.dg/Wconversion-2.c"}, {"sha": "a3f04acb5f824533d821b7ec5d7a15ebe784309a", "filename": "gcc/testsuite/gcc.dg/Wtraditional-conversion.c", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtraditional-conversion.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -5,7 +5,7 @@\n    not used in the appropriate place in the warning code.  */\n \n /* { dg-do compile } */\n-/* { dg-options -Wconversion } */\n+/* { dg-options -Wtraditional-conversion } */\n \n typedef enum { a } __attribute__((packed)) t;\n void f(t x) {}", "previous_filename": "gcc/testsuite/gcc.dg/Wconversion.c"}, {"sha": "85f96cff0c1c6af01e00904b30242a33903e1c69", "filename": "gcc/testsuite/gcc.dg/builtin-protos-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-protos-1.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options -Wconversion } */\n+/* { dg-options -Wtraditional-conversion } */\n \n int\n test_s (signed int x)"}, {"sha": "b5738c9d43970a816bed670c19a8487581df2b05", "filename": "gcc/testsuite/gcc.dg/dfp/Wtraditional-conversion-2.c", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,6 +1,8 @@\n-/* Test messages for -Wconversion (based on gcc.dg/Wconversion-2.c).  */\n+/* Test messages for -Wtraditional-conversion \n+   (based on gcc.dg/Wtraditional-conversion-2.c).  */\n+\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wconversion\" } */\n+/* { dg-options \"-std=gnu99 -Wtraditional-conversion\" } */\n \n void fsi(signed int);\n void fd32(_Decimal32);", "previous_filename": "gcc/testsuite/gcc.dg/dfp/Wconversion-2.c"}, {"sha": "3fa75b639b385a2ea58c750af285c8616a62e139", "filename": "gcc/testsuite/gcc.dg/overflow-warn-2.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05170031abc9baabb16c0f181228bd9343b0bfc4/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-2.c?ref=05170031abc9baabb16c0f181228bd9343b0bfc4", "patch": "@@ -1,7 +1,7 @@\n-/* Test for diagnostics for constant overflow.  Test with -Wconversion.  */\n+/* Test for diagnostics for constant overflow.  Test with -Wtraditional-conversion.  */\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=c99 -Wconversion\" } */\n+/* { dg-options \"-std=c99 -Wtraditional-conversion\" } */\n \n #include <limits.h>\n \n@@ -82,23 +82,23 @@ void\n h2 (void)\n {\n   fsc (SCHAR_MAX + 1);\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 84 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 84 } */\n   fsc (SCHAR_MIN - 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 86 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 86 } */\n   fsc (UCHAR_MAX);\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 88 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 88 } */\n   fsc (UCHAR_MAX + 1); /* { dg-warning \"warning: overflow in implicit constant conversion\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 90 } */\n-  fuc (-1); /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 92 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fsc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 90 } */\n+  fuc (-1);\n+  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 92 } */\n   fuc (UCHAR_MAX + 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 94 } */\n-  fuc (SCHAR_MIN); /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 96 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 94 } */\n+  fuc (SCHAR_MIN);\n+  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 96 } */\n   fuc (SCHAR_MIN - 1); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 98 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 98 } */\n   fuc (-UCHAR_MAX); /* { dg-warning \"warning: large integer implicitly truncated to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wconversion\" { target *-*-* } 100 } */\n+  /* { dg-warning \"warning: passing argument 1 of 'fuc' with different width due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 100 } */\n }\n \n void fui (unsigned int);\n@@ -111,7 +111,7 @@ void\n h2i (int x)\n {\n   /* For some reason, we only give certain warnings for implicit\n-     conversions among values of the same precision with -Wconversion,\n+     conversions among values of the same precision with -Wtraditional-conversion,\n      while we don't give others at all.  */\n   fsi ((unsigned)INT_MAX + 1); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n   si = (unsigned)INT_MAX + 1;\n@@ -121,12 +121,12 @@ h2i (int x)\n   si = x ? (unsigned)INT_MAX + 2 : 1;\n   fsi (UINT_MAX); /* { dg-warning \"warning: passing argument 1 of 'fsi' as signed due to prototype\" } */\n   si = UINT_MAX;\n-  fui (-1); /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wconversion\" { target *-*-* } 124 } */\n-  ui = -1; /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? -1 : 1U; /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  fui (INT_MIN); /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  /* { dg-warning \"warning: passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wconversion\" { target *-*-* } 128 } */\n-  ui = INT_MIN; /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n-  ui = x ? INT_MIN : 1U; /* { dg-warning \"warning: negative integer implicitly converted to unsigned type\" } */\n+  fui (-1);\n+  /* { dg-warning \"warning: passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 124 } */\n+  ui = -1;\n+  ui = x ? -1 : 1U;\n+  fui (INT_MIN);\n+  /* { dg-warning \"warning: passing argument 1 of 'fui' as unsigned due to prototype\" \"-Wtraditional-conversion\" { target *-*-* } 128 } */\n+  ui = INT_MIN;\n+  ui = x ? INT_MIN : 1U;\n }"}]}