{"sha": "5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVhNzFhNWE3YzlmMjVhNzUzOWJkYzhjNWVkN2E5MmJmMmUyMTE1Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-25T11:02:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-25T11:02:32Z"}, "message": "re PR tree-optimization/81510 (ice in operator[],  at vec.h:749)\n\n2017-07-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81510\n\t* tree-vect-loop.c (vect_is_simple_reduction): When the\n\treduction stmt is not inside the loop bail out.\n\n\t* gcc.dg/torture/pr81510.c: New testcase.\n\t* gcc.dg/torture/pr81510-2.c: Likewise.\n\nFrom-SVN: r250504", "tree": {"sha": "d8422d939914316f82a4becf678760077bcbcf77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8422d939914316f82a4becf678760077bcbcf77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdd293743d43c5721e75d951d57d73b50af6738d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd293743d43c5721e75d951d57d73b50af6738d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd293743d43c5721e75d951d57d73b50af6738d"}], "stats": {"total": 100, "additions": 81, "deletions": 19}, "files": [{"sha": "880b10e2955cd0b400f22d1540d3092597a1e0ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "patch": "@@ -1,3 +1,9 @@\n+2017-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81510\n+\t* tree-vect-loop.c (vect_is_simple_reduction): When the\n+\treduction stmt is not inside the loop bail out.\n+\n 2017-07-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81303"}, {"sha": "f75186947ad3e2a1fe2168eab3723817dcb0d8a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "patch": "@@ -1,3 +1,9 @@\n+2017-07-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81510\n+\t* gcc.dg/torture/pr81510.c: New testcase.\n+\t* gcc.dg/torture/pr81510-2.c: Likewise.\n+\n 2017-07-25  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/81520"}, {"sha": "7e2bc9866f7437c3ed17d506e528048c9af91c19", "filename": "gcc/testsuite/gcc.dg/torture/pr81510-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81510-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81510-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81510-2.c?ref=5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+typedef int h;\n+typedef int k;\n+int a;\n+int b;\n+int c;\n+int d;\n+int e;\n+int f(int g)\n+{\n+  h *i = &e;\n+  k *j;\n+  if (d -= b)\n+    for (; *j; *j += 1) {\n+\tg = g || (a = e ? c = (__UINTPTR_TYPE__)j : 0) + *i;\n+\ti = &d;\n+    }\n+}"}, {"sha": "c93c4683629e424ef2f6c47018321eb42f031458", "filename": "gcc/testsuite/gcc.dg/torture/pr81510.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81510.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81510.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81510.c?ref=5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-w\" } */\n+\n+typedef int d;\n+typedef int f;\n+typedef long h;\n+int a;\n+int b;\n+int c;\n+int e()\n+{\n+  f *g;\n+  h i;\n+  for (;;)\n+    if (g)\n+      for (; b; b++) {\n+\t  g = c;\n+\t  if (a &= c) {\n+\t      d *j = &b;\n+\t      h k;\n+\t      for (; i; i++) {\n+\t\t  *g ?: (*j = k);\n+\t\t  g = &a;\n+\t      }\n+\t      for (; i <= 3; i++)\n+\t\t;\n+\t  }\n+      }\n+}"}, {"sha": "5b1b8a1fdee321e2550a64c41bd4519552575935", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c", "patch": "@@ -2813,27 +2813,29 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n       return NULL;\n     }\n \n+  if (! flow_bb_inside_loop_p (loop, gimple_bb (def_stmt)))\n+    return NULL;\n+\n   nloop_uses = 0;\n   auto_vec<gphi *, 3> lcphis;\n-  if (flow_bb_inside_loop_p (loop, gimple_bb (def_stmt)))\n-    FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n-      {\n-\tgimple *use_stmt = USE_STMT (use_p);\n-\tif (is_gimple_debug (use_stmt))\n-\t  continue;\n-\tif (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n-\t  nloop_uses++;\n-\telse\n-\t  /* We can have more than one loop-closed PHI.  */\n-\t  lcphis.safe_push (as_a <gphi *> (use_stmt));\n-\tif (nloop_uses > 1)\n-\t  {\n-\t    if (dump_enabled_p ())\n-\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t       \"reduction used in loop.\\n\");\n-\t    return NULL;\n-\t  }\n-      }\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, name)\n+    {\n+      gimple *use_stmt = USE_STMT (use_p);\n+      if (is_gimple_debug (use_stmt))\n+\tcontinue;\n+      if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n+\tnloop_uses++;\n+      else\n+\t/* We can have more than one loop-closed PHI.  */\n+\tlcphis.safe_push (as_a <gphi *> (use_stmt));\n+      if (nloop_uses > 1)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"reduction used in loop.\\n\");\n+\t  return NULL;\n+\t}\n+    }\n \n   /* If DEF_STMT is a phi node itself, we expect it to have a single argument\n      defined in the inner loop.  */"}]}