{"sha": "0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA4NmJkOTkyZmVkM2JmNDkxYmUwYzNmNTM4N2M0ZjZjOWYyY2FjZQ==", "commit": {"author": {"name": "Andrew Burgess", "email": "andrew.burgess@embecosm.com", "date": "2015-12-19T19:22:51Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2015-12-19T19:22:51Z"}, "message": "arc.md (*loadqi_update): Use new 'any_mem_operand' and fix RTL pattern to include the plus.\n\ngcc:\n\n        2015-12-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n\n        * config/arc/arc.md (*loadqi_update): Use new 'any_mem_operand'\n        and fix RTL pattern to include the plus.\n        (*load_zeroextendqisi_update): Likewise.\n        (*load_signextendqisi_update): Likewise.\n        (*loadhi_update): Likewise.\n        (*load_zeroextendhisi_update): Likewise.\n        (*load_signextendhisi_update): Likewise.\n        (*loadsi_update): Likewise.\n        (*loadsf_update): Likewise.\n        * config/arc/predicates.md (load_update_operand): Delete.\n        (any_mem_operand): New predicate.\n\ngcc/testsuite:\n\n        2015-12-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n\n        * gcc.target/arc/load-update.c: New file.\n\nFrom-SVN: r231849", "tree": {"sha": "39697eb359f7ef88307259faee16f4d5aa7a029d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39697eb359f7ef88307259faee16f4d5aa7a029d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/comments", "author": {"login": "T-J-Teru", "id": 475372, "node_id": "MDQ6VXNlcjQ3NTM3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/T-J-Teru", "html_url": "https://github.com/T-J-Teru", "followers_url": "https://api.github.com/users/T-J-Teru/followers", "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}", "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}", "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions", "organizations_url": "https://api.github.com/users/T-J-Teru/orgs", "repos_url": "https://api.github.com/users/T-J-Teru/repos", "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}", "received_events_url": "https://api.github.com/users/T-J-Teru/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf"}], "stats": {"total": 107, "additions": 65, "deletions": 42}, "files": [{"sha": "b0ec3c7f7a9134b1f6bf0c9a1d73831896dfc186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "patch": "@@ -1,3 +1,17 @@\n+2015-12-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc.md (*loadqi_update): Use new 'any_mem_operand'\n+\tand fix RTL pattern to include the plus.\n+\t(*load_zeroextendqisi_update): Likewise.\n+\t(*load_signextendqisi_update): Likewise.\n+\t(*loadhi_update): Likewise.\n+\t(*load_zeroextendhisi_update): Likewise.\n+\t(*load_signextendhisi_update): Likewise.\n+\t(*loadsi_update): Likewise.\n+\t(*loadsf_update): Likewise.\n+\t* config/arc/predicates.md (load_update_operand): Delete.\n+\t(any_mem_operand): New predicate.\n+\n 2015-12-19  Sujoy Saraswati  <sujoy.saraswati@hpe.com>\n \n \tPR tree-optimization/61441"}, {"sha": "7ca4431f1a419c85bb2bb10ee97732b1a6c98d1f", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "patch": "@@ -1114,9 +1114,9 @@\n ;; Note: loadqi_update has no 16-bit variant\n (define_insn \"*loadqi_update\"\n   [(set (match_operand:QI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(match_operator:QI 4 \"load_update_operand\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")]))\n+        (match_operator:QI 4 \"any_mem_operand\"\n+         [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+                   (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))]))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1126,9 +1126,9 @@\n \n (define_insn \"*load_zeroextendqisi_update\"\n   [(set (match_operand:SI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operator:QI 4 \"load_update_operand\"\n-\t\t\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")])))\n+\t(zero_extend:SI (match_operator:QI 4 \"any_mem_operand\"\n+\t\t\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))])))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1138,9 +1138,9 @@\n \n (define_insn \"*load_signextendqisi_update\"\n   [(set (match_operand:SI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_operator:QI 4 \"load_update_operand\"\n-\t\t\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")])))\n+\t(sign_extend:SI (match_operator:QI 4 \"any_mem_operand\"\n+\t\t\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))])))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1164,9 +1164,9 @@\n ;; Note: no 16-bit variant for this pattern\n (define_insn \"*loadhi_update\"\n   [(set (match_operand:HI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(match_operator:HI 4 \"load_update_operand\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")]))\n+\t(match_operator:HI 4 \"any_mem_operand\"\n+\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))]))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1176,9 +1176,9 @@\n \n (define_insn \"*load_zeroextendhisi_update\"\n   [(set (match_operand:SI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operator:HI 4 \"load_update_operand\"\n-\t\t\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")])))\n+\t(zero_extend:SI (match_operator:HI 4 \"any_mem_operand\"\n+\t\t\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))])))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1189,9 +1189,9 @@\n ;; Note: no 16-bit variant for this instruction\n (define_insn \"*load_signextendhisi_update\"\n   [(set (match_operand:SI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(sign_extend:SI (match_operator:HI 4 \"load_update_operand\"\n-\t\t\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")])))\n+\t(sign_extend:SI (match_operator:HI 4 \"any_mem_operand\"\n+\t\t\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t\t\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))])))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1214,9 +1214,9 @@\n ;; No 16-bit variant for this instruction pattern\n (define_insn \"*loadsi_update\"\n   [(set (match_operand:SI 3 \"dest_reg_operand\" \"=r,r\")\n-\t(match_operator:SI 4 \"load_update_operand\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")]))\n+\t(match_operator:SI 4 \"any_mem_operand\"\n+\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))]))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n@@ -1238,9 +1238,9 @@\n \n (define_insn \"*loadsf_update\"\n   [(set (match_operand:SF 3 \"dest_reg_operand\" \"=r,r\")\n-\t(match_operator:SF 4 \"load_update_operand\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\")]))\n+\t(match_operator:SF 4 \"any_mem_operand\"\n+\t [(plus:SI (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t           (match_operand:SI 2 \"nonmemory_operand\" \"rI,Cal\"))]))\n    (set (match_operand:SI 0 \"dest_reg_operand\" \"=w,w\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\""}, {"sha": "268ff7ee0683a89249f5723ab0ee3ae68a536404", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "patch": "@@ -460,24 +460,6 @@\n }\n )\n \n-;; Return true if OP is valid load with update operand.\n-(define_predicate \"load_update_operand\"\n-  (match_code \"mem\")\n-{\n-  if (GET_CODE (op) != MEM\n-      || GET_MODE (op) != mode)\n-    return 0;\n-  op = XEXP (op, 0);\n-  if (GET_CODE (op) != PLUS\n-      || GET_MODE (op) != Pmode\n-      || !register_operand (XEXP (op, 0), Pmode)\n-      || !nonmemory_operand (XEXP (op, 1), Pmode))\n-    return 0;\n-  return 1;\n-\n-}\n-)\n-\n ;; Return true if OP is valid store with update operand.\n (define_predicate \"store_update_operand\"\n   (match_code \"mem\")\n@@ -817,3 +799,6 @@\n (define_predicate \"mem_noofs_operand\"\n   (and (match_code \"mem\")\n        (match_code \"reg\" \"0\")))\n+\n+(define_predicate \"any_mem_operand\"\n+  (match_code \"mem\"))\n\\ No newline at end of file"}, {"sha": "d1ebe8d9a883f9c5e8116600c683c9ee61d788f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "patch": "@@ -1,3 +1,7 @@\n+2015-12-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gcc.target/arc/load-update.c: New file.\n+\n 2015-12-18  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/68978"}, {"sha": "8299cb7ae7e962360bd3307254bdfbd2297c6713", "filename": "gcc/testsuite/gcc.target/arc/load-update.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fload-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0086bd992fed3bf491be0c3f5387c4f6c9f2cace/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fload-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fload-update.c?ref=0086bd992fed3bf491be0c3f5387c4f6c9f2cace", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+/* This caused a segfault due to incorrect rtl pattern in some\n+   instructions.  */\n+\n+int a, d;\n+char *b;\n+\n+void fn1()\n+{\n+  char *e = 0;\n+  for (; d; ++a)\n+    {\n+      char c = b [0];\n+      *e++ = '.';\n+      *e++ = 4;\n+      *e++ = \"0123456789abcdef\" [c & 5];\n+    }\n+}"}]}