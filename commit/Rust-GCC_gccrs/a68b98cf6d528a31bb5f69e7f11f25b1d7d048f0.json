{"sha": "a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4Yjk4Y2Y2ZDUyOGEzMWJiNWY2OWU3ZjExZjI1YjFkN2QwNDhmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-13T14:59:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-13T14:59:54Z"}, "message": "(lookup_field): Don't recurse unless FIELD is a RECORD_TYPE or\nUNION_TYPE.\n\nFrom-SVN: r13870", "tree": {"sha": "2c4d9a27b03f6f3370c75ab31b8bcc82a5ce359f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c4d9a27b03f6f3370c75ab31b8bcc82a5ce359f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0/comments", "author": null, "committer": null, "parents": [{"sha": "06140bdfa1c2a5aabd241d03e9d1bb62ad89c9c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06140bdfa1c2a5aabd241d03e9d1bb62ad89c9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06140bdfa1c2a5aabd241d03e9d1bb62ad89c9c3"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "32111d09dc05ca033520e158a830cccc7b6a74b2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a68b98cf6d528a31bb5f69e7f11f25b1d7d048f0", "patch": "@@ -1,5 +1,5 @@\n /* Build expressions with type checking for C compiler.\n-   Copyright (C) 1987, 88, 91, 92-6, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91-6, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1151,10 +1151,13 @@ lookup_field (type, component, indirect)\n \t      /* Step through all anon unions in linear fashion.  */\n \t      while (DECL_NAME (field_array[bot]) == NULL_TREE)\n \t\t{\n-\t\t  tree anon, junk;\n+\t\t  tree anon = 0, junk;\n \n \t\t  field = field_array[bot++];\n-\t\t  anon = lookup_field (TREE_TYPE (field), component, &junk);\n+\t\t  if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE\n+\t\t      || TREE_CODE (TREE_TYPE (field)) == UNION_TYPE)\n+\t\t    anon = lookup_field (TREE_TYPE (field), component, &junk);\n+\n \t\t  if (anon != NULL_TREE)\n \t\t    {\n \t\t      *indirect = field;\n@@ -1190,7 +1193,12 @@ lookup_field (type, component, indirect)\n \t  if (DECL_NAME (field) == NULL_TREE)\n \t    {\n \t      tree junk;\n-\t      tree anon = lookup_field (TREE_TYPE (field), component, &junk);\n+\t      tree anon = 0;\n+\n+\t      if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (field)) == UNION_TYPE)\n+\t\tanon = lookup_field (TREE_TYPE (field), component, &junk);\n+\n \t      if (anon != NULL_TREE)\n \t\t{\n \t\t  *indirect = field;"}]}