{"sha": "82f1c4b5fa00d766dfbcc089b2d23663cc96cb96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmMWM0YjVmYTAwZDc2NmRmYmNjMDg5YjJkMjM2NjNjYzk2Y2I5Ng==", "commit": {"author": {"name": "Casey Marshall", "email": "csm@gnu.org", "date": "2007-03-28T01:02:10Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-03-28T01:02:10Z"}, "message": "re PR classpath/31302 (Exception in SSLSocketImpl)\n\n2007-03-27  Casey Marshall  <csm@gnu.org>\n\n\tPR classpath/31302:\n\t* gnu/javax/net/ssl/provider/SSLSocketImpl.java (SSLSocketImpl):\n\tAlways make a new socket.\n\t(bind, connect, getInetAddress, getLocalAddress, getPort,\n\tgetLocalPort, getRemoteSocketAddress, getLocalSocketAddress,\n\tsetTcpNoDelay, getTcpNoDelay, setSoLinger, getSoLinger,\n\tsetOOBInline, getOOBInline, setSoTimeout, getSoTimeout,\n\tsetSendBufferSize, getSendBufferSize, setReceiveBufferSize,\n\tgetReceiveBufferSize, setKeepAlive, getKeepAlive, setTrafficClass,\n\tgetTrafficClass, setReuseAddress, getReuseAddress, close,\n\tshutdownInput, shutdownOutput, isConnected, isBound, isClosed,\n\tisInputShutdown, isOutputShutdown): Always use\n\t'underlyingSocket'.\n\nFrom-SVN: r123285", "tree": {"sha": "f72f4295961798c4555c9a1fc23156c72bd0e80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72f4295961798c4555c9a1fc23156c72bd0e80d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/comments", "author": null, "committer": null, "parents": [{"sha": "f70ddc12ecc259e863ca60ce364528fa387da531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70ddc12ecc259e863ca60ce364528fa387da531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70ddc12ecc259e863ca60ce364528fa387da531"}], "stats": {"total": 185, "additions": 54, "deletions": 131}, "files": [{"sha": "376c072852dfc2bacc25437cd5be6e41263190e3", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=82f1c4b5fa00d766dfbcc089b2d23663cc96cb96", "patch": "@@ -1,3 +1,19 @@\n+2007-03-27  Casey Marshall  <csm@gnu.org>\n+\n+\tPR classpath/31302:\n+\t* gnu/javax/net/ssl/provider/SSLSocketImpl.java (SSLSocketImpl):\n+\tAlways make a new socket.\n+\t(bind, connect, getInetAddress, getLocalAddress, getPort,\n+\tgetLocalPort, getRemoteSocketAddress, getLocalSocketAddress,\n+\tsetTcpNoDelay, getTcpNoDelay, setSoLinger, getSoLinger,\n+\tsetOOBInline, getOOBInline, setSoTimeout, getSoTimeout,\n+\tsetSendBufferSize, getSendBufferSize, setReceiveBufferSize,\n+\tgetReceiveBufferSize, setKeepAlive, getKeepAlive, setTrafficClass,\n+\tgetTrafficClass, setReuseAddress, getReuseAddress, close,\n+\tshutdownInput, shutdownOutput, isConnected, isBound, isClosed,\n+\tisInputShutdown, isOutputShutdown): Always use\n+\t'underlyingSocket'.\n+\n 2007-03-27  Tom Tromey  <tromey@redhat.com>\n \n \tPR classpath/31303:"}, {"sha": "eead7258bbc8014f31454496fc178d978117855a", "filename": "libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketImpl.java", "status": "modified", "additions": 38, "deletions": 131, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fnet%2Fssl%2Fprovider%2FSSLSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fnet%2Fssl%2Fprovider%2FSSLSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjavax%2Fnet%2Fssl%2Fprovider%2FSSLSocketImpl.java?ref=82f1c4b5fa00d766dfbcc089b2d23663cc96cb96", "patch": "@@ -200,7 +200,7 @@ private class SocketInputStream extends InputStream\n   \n   public SSLSocketImpl(SSLContextImpl contextImpl, String host, int port)\n   {\n-    this(contextImpl, host, port, null, false);\n+    this(contextImpl, host, port, new Socket(), true);\n   }\n   \n   public SSLSocketImpl(SSLContextImpl contextImpl, String host, int port,\n@@ -412,17 +412,8 @@ void doHandshake() throws IOException\n     ByteBuffer emptyBuffer = ByteBuffer.allocate(0);\n     SSLEngineResult result = null;\n     \n-    DataInputStream sockIn = null;\n-    if (underlyingSocket != null)\n-      sockIn = new DataInputStream(underlyingSocket.getInputStream());\n-    else\n-      sockIn = new DataInputStream(super.getInputStream());\n-\n-    OutputStream sockOut = null;\n-    if (underlyingSocket != null)\n-      sockOut = underlyingSocket.getOutputStream();\n-    else\n-      sockOut = super.getOutputStream();\n+    DataInputStream sockIn = new DataInputStream(underlyingSocket.getInputStream());\n+    OutputStream sockOut = underlyingSocket.getOutputStream();\n     \n     try\n       {\n@@ -550,69 +541,48 @@ void doHandshake() throws IOException\n \n   @Override public void bind(SocketAddress bindpoint) throws IOException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.bind(bindpoint);\n-    else\n-      super.bind(bindpoint);\n+    underlyingSocket.bind(bindpoint);\n   }\n   \n   @Override public void connect(SocketAddress endpoint) throws IOException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.connect(endpoint);\n-    else\n-      super.connect(endpoint);\n+    underlyingSocket.connect(endpoint);\n   }\n \n   @Override public void connect(SocketAddress endpoint, int timeout)\n     throws IOException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.connect(endpoint, timeout);\n-    else\n-      super.connect(endpoint, timeout);\n+    underlyingSocket.connect(endpoint, timeout);\n   }\n \n   @Override public InetAddress getInetAddress()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getInetAddress();\n-    return super.getInetAddress();\n+    return underlyingSocket.getInetAddress();\n   }\n   \n   @Override public InetAddress getLocalAddress()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getLocalAddress();\n-    return super.getLocalAddress();\n+    return underlyingSocket.getLocalAddress();\n   }\n   \n   @Override public int getPort()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getPort();\n-    return super.getPort();\n+    return underlyingSocket.getPort();\n   }\n \n   @Override public int getLocalPort()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getLocalPort();\n-    return super.getLocalPort();\n+    return underlyingSocket.getLocalPort();\n   }\n \n   @Override public SocketAddress getRemoteSocketAddress()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getRemoteSocketAddress();\n-    return super.getRemoteSocketAddress();\n+    return underlyingSocket.getRemoteSocketAddress();\n   }\n \n   public SocketAddress getLocalSocketAddress()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getLocalSocketAddress();\n-    return super.getLocalSocketAddress();\n+    return underlyingSocket.getLocalSocketAddress();\n   }\n \n   @Override public SocketChannel getChannel()\n@@ -632,32 +602,22 @@ public SocketAddress getLocalSocketAddress()\n \n   @Override public void setTcpNoDelay(boolean on) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setTcpNoDelay(on);\n-    else\n-      super.setTcpNoDelay(on);\n+    underlyingSocket.setTcpNoDelay(on);\n   }\n \n   @Override public boolean getTcpNoDelay() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getTcpNoDelay();\n-    return super.getTcpNoDelay();\n+    return underlyingSocket.getTcpNoDelay();\n   }\n \n   @Override public void setSoLinger(boolean on, int linger) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setSoLinger(on, linger);\n-    else\n-      super.setSoLinger(on, linger);\n+    underlyingSocket.setSoLinger(on, linger);\n   }\n \n   public int getSoLinger() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getSoLinger();\n-    return super.getSoLinger();\n+    return underlyingSocket.getSoLinger();\n   }\n \n   @Override public void sendUrgentData(int x) throws IOException\n@@ -667,167 +627,114 @@ public int getSoLinger() throws SocketException\n \n   @Override public void setOOBInline(boolean on) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setOOBInline(on);\n-    else\n-      super.setOOBInline(on);\n+    underlyingSocket.setOOBInline(on);\n   }\n \n   @Override public boolean getOOBInline() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getOOBInline();\n-    return super.getOOBInline();\n+    return underlyingSocket.getOOBInline();\n   }\n \n   @Override public void setSoTimeout(int timeout) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setSoTimeout(timeout);\n-    else\n-      super.setSoTimeout(timeout);\n+    underlyingSocket.setSoTimeout(timeout);\n   }\n \n   @Override public int getSoTimeout() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getSoTimeout();\n-    return super.getSoTimeout();\n+    return underlyingSocket.getSoTimeout();\n   }\n \n   @Override public void setSendBufferSize(int size) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setSendBufferSize(size);\n-    else\n-      super.setSendBufferSize(size);\n+    underlyingSocket.setSendBufferSize(size);\n   }\n \n   @Override public int getSendBufferSize() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getSendBufferSize();\n-    return super.getSendBufferSize();\n+    return underlyingSocket.getSendBufferSize();\n   }\n \n   @Override public void setReceiveBufferSize(int size) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setReceiveBufferSize(size);\n-    else\n-      underlyingSocket.setReceiveBufferSize(size);\n+    underlyingSocket.setReceiveBufferSize(size);\n   }\n \n   @Override public int getReceiveBufferSize() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getReceiveBufferSize();\n-    return super.getReceiveBufferSize();\n+    return underlyingSocket.getReceiveBufferSize();\n   }\n \n   @Override public void setKeepAlive(boolean on) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setKeepAlive(on);\n-    else\n-      super.setKeepAlive(on);\n+    underlyingSocket.setKeepAlive(on);\n   }\n \n   @Override public boolean getKeepAlive() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getKeepAlive();\n-    return super.getKeepAlive();\n+    return underlyingSocket.getKeepAlive();\n   }\n \n   @Override public void setTrafficClass(int tc) throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setTrafficClass(tc);\n-    else\n-      super.setTrafficClass(tc);\n+    underlyingSocket.setTrafficClass(tc);\n   }\n \n   @Override public int getTrafficClass() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getTrafficClass();\n-    return super.getTrafficClass();\n+    return underlyingSocket.getTrafficClass();\n   }\n \n   @Override public void setReuseAddress(boolean reuseAddress)\n     throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.setReuseAddress(reuseAddress);\n-    else\n-      super.setReuseAddress(reuseAddress);\n+    underlyingSocket.setReuseAddress(reuseAddress);\n   }\n \n   @Override public boolean getReuseAddress() throws SocketException\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.getReuseAddress();\n-    return super.getReuseAddress();\n+    return underlyingSocket.getReuseAddress();\n   }\n \n   @Override public void close() throws IOException\n   {\n     // XXX closure alerts.\n-    if (underlyingSocket != null && autoClose)\n+    if (autoClose)\n       underlyingSocket.close();\n-    else\n-      super.close();\n   }\n \n   @Override public void shutdownInput() throws IOException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.shutdownInput();\n-    else\n-      super.shutdownInput();\n+    underlyingSocket.shutdownInput();\n   }\n \n   @Override public void shutdownOutput() throws IOException\n   {\n-    if (underlyingSocket != null)\n-      underlyingSocket.shutdownOutput();\n-    else\n-      super.shutdownOutput();\n+    underlyingSocket.shutdownOutput();\n   }\n \n   @Override public boolean isConnected()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.isConnected();\n-    return super.isConnected();\n+    return underlyingSocket.isConnected();\n   }\n \n   @Override public boolean isBound()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.isBound();\n-    return super.isBound();\n+    return underlyingSocket.isBound();\n   }\n \n   @Override public boolean isClosed()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.isClosed();\n-    return super.isClosed();\n+    return underlyingSocket.isClosed();\n   }\n \n   @Override public boolean isInputShutdown()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.isInputShutdown();\n-    return super.isInputShutdown();\n+    return underlyingSocket.isInputShutdown();\n   }\n \n   @Override public boolean isOutputShutdown()\n   {\n-    if (underlyingSocket != null)\n-      return underlyingSocket.isOutputShutdown();\n-    return super.isOutputShutdown();\n+    return underlyingSocket.isOutputShutdown();\n   }\n }"}, {"sha": "e966b4d0c4226402efda02f489b8ef6f48a64216", "filename": "libjava/classpath/lib/gnu/javax/net/ssl/provider/SSLSocketImpl.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fnet%2Fssl%2Fprovider%2FSSLSocketImpl.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f1c4b5fa00d766dfbcc089b2d23663cc96cb96/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fnet%2Fssl%2Fprovider%2FSSLSocketImpl.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fjavax%2Fnet%2Fssl%2Fprovider%2FSSLSocketImpl.class?ref=82f1c4b5fa00d766dfbcc089b2d23663cc96cb96"}]}