{"sha": "4e1866fe6f17ad219a2855ab21b5e45de225ce25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxODY2ZmU2ZjE3YWQyMTlhMjg1NWFiMjFiNWU0NWRlMjI1Y2UyNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-10-31T00:38:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-10-31T00:38:49Z"}, "message": "compiler: Add -fgo-relative-import-path.\n\n\t* lang.opt (-fgo-relative-import-path): New option.\n\t* go-lang.c (go_relative_import_path): New static variable.\n\t(go_langhook_init): Pass go_relative_import_path to\n\tgo_create_gogo.\n\t(go_langhook_handle_option): Handle -fgo-relative-import-path.\n\t* go-c.h (go_create_gogo): Update declaration.\n\t* gccgo.texi (Invoking gccgo): Document\n\t-fgo-relative-import-path.\n\nFrom-SVN: r193008", "tree": {"sha": "8e27ff062ee5234453cbd514cc8ccfd5feba4037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e27ff062ee5234453cbd514cc8ccfd5feba4037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1866fe6f17ad219a2855ab21b5e45de225ce25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1866fe6f17ad219a2855ab21b5e45de225ce25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1866fe6f17ad219a2855ab21b5e45de225ce25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1866fe6f17ad219a2855ab21b5e45de225ce25/comments", "author": null, "committer": null, "parents": [{"sha": "a46837fe1cda1a23de3f99a0c5f7716251eee416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46837fe1cda1a23de3f99a0c5f7716251eee416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46837fe1cda1a23de3f99a0c5f7716251eee416"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "73cc732a1537fda6e421a63ecc1874c4beaa7adf", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -1,3 +1,14 @@\n+2012-10-30  Ian Lance Taylor  <iant@google.com>\n+\n+\t* lang.opt (-fgo-relative-import-path): New option.\n+\t* go-lang.c (go_relative_import_path): New static variable.\n+\t(go_langhook_init): Pass go_relative_import_path to\n+\tgo_create_gogo.\n+\t(go_langhook_handle_option): Handle -fgo-relative-import-path.\n+\t* go-c.h (go_create_gogo): Update declaration.\n+\t* gccgo.texi (Invoking gccgo): Document\n+\t-fgo-relative-import-path.\n+\n 2012-09-17  Ian Lance Taylor  <iant@google.com>\n \n \t* config-lang.in (target_libs): Add target-libbacktrace."}, {"sha": "91930c812f6ef9926ef2a7e3745922e6647bf4d8", "filename": "gcc/go/gccgo.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgccgo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgccgo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgccgo.texi?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -184,6 +184,12 @@ Using either @option{-fgo-pkgpath} or @option{-fgo-prefix} disables\n the special treatment of the @code{main} package and permits that\n package to be imported like any other.\n \n+@item -fgo-relative-import-path=@var{dir}\n+@cindex @option{-fgo-relative-import-path}\n+A relative import is an import that starts with @file{./} or\n+@file{../}.  If this option is used, @command{gccgo} will use\n+@var{dir} as a prefix for the relative import when searching for it.\n+\n @item -frequire-return-statement\n @itemx -fno-require-return-statement\n @cindex @option{-frequire-return-statement}"}, {"sha": "8f21b6be76d8066ab4b4f9b2ea150fe527695d91", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -33,7 +33,8 @@ extern int go_enable_optimize (const char*);\n extern void go_add_search_path (const char*);\n \n extern void go_create_gogo (int int_type_size, int pointer_size,\n-\t\t\t    const char* pkgpath, const char *prefix);\n+\t\t\t    const char* pkgpath, const char *prefix,\n+\t\t\t    const char *relative_import_path);\n \n extern void go_parse_input_files (const char**, unsigned int,\n \t\t\t\t  bool only_check_syntax,"}, {"sha": "f5229bbc451100e98050833833819fce1f003f4f", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -85,6 +85,7 @@ struct GTY(()) language_function\n \n static const char *go_pkgpath = NULL;\n static const char *go_prefix = NULL;\n+static const char *go_relative_import_path = NULL;\n \n /* Language hooks.  */\n \n@@ -101,7 +102,8 @@ go_langhook_init (void)\n      to, e.g., unsigned_char_type_node) but before calling\n      build_common_builtin_nodes (because it calls, indirectly,\n      go_type_for_size).  */\n-  go_create_gogo (INT_TYPE_SIZE, POINTER_SIZE, go_pkgpath, go_prefix);\n+  go_create_gogo (INT_TYPE_SIZE, POINTER_SIZE, go_pkgpath, go_prefix,\n+\t\t  go_relative_import_path);\n \n   build_common_builtin_nodes ();\n \n@@ -240,6 +242,10 @@ go_langhook_handle_option (\n       go_prefix = arg;\n       break;\n \n+    case OPT_fgo_relative_import_path_:\n+      go_relative_import_path = arg;\n+      break;\n+\n     default:\n       /* Just return 1 to indicate that the option is valid.  */\n       break;"}, {"sha": "11692af8095ed96d8d0098d13c7cad158af9c19a", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -21,7 +21,7 @@ static Gogo* gogo;\n GO_EXTERN_C\n void\n go_create_gogo(int int_type_size, int pointer_size, const char *pkgpath,\n-\t       const char *prefix)\n+\t       const char *prefix, const char *relative_import_path)\n {\n   go_assert(::gogo == NULL);\n   Linemap* linemap = go_get_linemap();\n@@ -32,6 +32,9 @@ go_create_gogo(int int_type_size, int pointer_size, const char *pkgpath,\n   else if (prefix != NULL)\n     ::gogo->set_prefix(prefix);\n \n+  if (relative_import_path != NULL)\n+    ::gogo->set_relative_import_path(relative_import_path);\n+\n   // FIXME: This should be in the gcc dependent code.\n   ::gogo->define_builtin_function_trees();\n }"}, {"sha": "3455a917f0ad93048cf9ef6428db6cfad4e4811e", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -44,6 +44,7 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int int_type_size,\n     pkgpath_set_(false),\n     pkgpath_from_option_(false),\n     prefix_from_option_(false),\n+    relative_import_path_(),\n     verify_types_(),\n     interface_types_(),\n     specific_type_functions_(),\n@@ -477,7 +478,8 @@ Gogo::import_package(const std::string& filename,\n       return;\n     }\n \n-  Import::Stream* stream = Import::open_package(filename, location);\n+  Import::Stream* stream = Import::open_package(filename, location,\n+\t\t\t\t\t\tthis->relative_import_path_);\n   if (stream == NULL)\n     {\n       error_at(location, \"import file %qs not found\", filename.c_str());"}, {"sha": "cc707ad2ddeec9d65561463f0b8dddfc1f15f71d", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -206,6 +206,17 @@ class Gogo\n   pkgpath_from_option() const\n   { return this->pkgpath_from_option_; }\n \n+  // Return the relative import path as set from the command line.\n+  // Returns an empty string if it was not set.\n+  const std::string&\n+  relative_import_path() const\n+  { return this->relative_import_path_; }\n+\n+  // Set the relative import path from a command line option.\n+  void\n+  set_relative_import_path(const std::string& s)\n+  {this->relative_import_path_ = s; }\n+\n   // Return the priority to use for the package we are compiling.\n   // This is two more than the largest priority of any package we\n   // import.\n@@ -732,6 +743,9 @@ class Gogo\n   bool pkgpath_from_option_;\n   // Whether an explicit prefix was set by -fgo-prefix.\n   bool prefix_from_option_;\n+  // The relative import path, from the -fgo-relative-import-path\n+  // option.\n+  std::string relative_import_path_;\n   // A list of types to verify.\n   std::vector<Type*> verify_types_;\n   // A list of interface types defined while parsing."}, {"sha": "4913100b5fddd17ba0db2a83bfe2cb1c2f52b0ac", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -41,6 +41,9 @@ go_add_search_path(const char* path)\n // When FILENAME is not an absolute path and does not start with ./ or\n // ../, we use the search path provided by -I and -L options.\n \n+// When FILENAME does start with ./ or ../, we use\n+// RELATIVE_IMPORT_PATH as a prefix.\n+\n // When FILENAME does not exist, we try modifying FILENAME to find the\n // file.  We use the first of these which exists:\n //   * We append \".gox\".\n@@ -55,19 +58,35 @@ go_add_search_path(const char* path)\n // later in the search path.\n \n Import::Stream*\n-Import::open_package(const std::string& filename, Location location)\n+Import::open_package(const std::string& filename, Location location,\n+\t\t     const std::string& relative_import_path)\n {\n   bool is_local;\n   if (IS_ABSOLUTE_PATH(filename))\n     is_local = true;\n-  else if (filename[0] == '.' && IS_DIR_SEPARATOR(filename[1]))\n+  else if (filename[0] == '.'\n+\t   && (filename[1] == '\\0' || IS_DIR_SEPARATOR(filename[1])))\n     is_local = true;\n   else if (filename[0] == '.'\n \t   && filename[1] == '.'\n-\t   && IS_DIR_SEPARATOR(filename[2]))\n+\t   && (filename[2] == '\\0' || IS_DIR_SEPARATOR(filename[2])))\n     is_local = true;\n   else\n     is_local = false;\n+\n+  std::string fn = filename;\n+  if (is_local && !IS_ABSOLUTE_PATH(filename) && !relative_import_path.empty())\n+    {\n+      if (fn == \".\")\n+\t{\n+\t  // A special case.\n+\t  fn = relative_import_path;\n+\t}\n+      else\n+\tfn = relative_import_path + '/' + fn;\n+      is_local = false;\n+    }\n+\n   if (!is_local)\n     {\n       for (std::vector<std::string>::const_iterator p = search_path.begin();\n@@ -77,14 +96,14 @@ Import::open_package(const std::string& filename, Location location)\n \t  std::string indir = *p;\n \t  if (!indir.empty() && indir[indir.size() - 1] != '/')\n \t    indir += '/';\n-\t  indir += filename;\n+\t  indir += fn;\n \t  Stream* s = Import::try_package_in_directory(indir, location);\n \t  if (s != NULL)\n \t    return s;\n \t}\n     }\n \n-  Stream* s = Import::try_package_in_directory(filename, location);\n+  Stream* s = Import::try_package_in_directory(fn, location);\n   if (s != NULL)\n     return s;\n "}, {"sha": "c6844cda8a54d6f5ed7b302278ead69bf65c7921", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -124,8 +124,10 @@ class Import\n   // Find import data.  This searches the file system for FILENAME and\n   // returns a pointer to a Stream object to read the data that it\n   // exports.  LOCATION is the location of the import statement.\n+  // RELATIVE_IMPORT_PATH is used as a prefix for a relative import.\n   static Stream*\n-  open_package(const std::string& filename, Location location);\n+  open_package(const std::string& filename, Location location,\n+\t       const std::string& relative_import_path);\n \n   // Constructor.\n   Import(Stream*, Location);"}, {"sha": "22197a71e3d2ba49a70f407b1d88502bea501ae2", "filename": "gcc/go/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1866fe6f17ad219a2855ab21b5e45de225ce25/gcc%2Fgo%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Flang.opt?ref=4e1866fe6f17ad219a2855ab21b5e45de225ce25", "patch": "@@ -61,6 +61,10 @@ fgo-prefix=\n Go Joined RejectNegative\n -fgo-prefix=<string>\tSet package-specific prefix for exported Go names\n \n+fgo-relative-import-path=\n+Go Joined RejectNegative\n+-fgo-relative-import-path=<path> Treat a relative import as relative to path\n+\n frequire-return-statement\n Go Var(go_require_return_statement) Init(1) Warning\n Functions which return values must end with return statements"}]}