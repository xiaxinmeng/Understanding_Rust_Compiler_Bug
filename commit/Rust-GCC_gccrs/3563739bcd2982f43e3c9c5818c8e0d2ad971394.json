{"sha": "3563739bcd2982f43e3c9c5818c8e0d2ad971394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2MzczOWJjZDI5ODJmNDNlM2M5YzU4MThjOGUwZDJhZDk3MTM5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T14:35:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T14:35:21Z"}, "message": "[multiple changes]\n\n2009-04-24  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-proc.adb, make.adb, mlib-prj.adb, prj.adb, prj.ads, clean.adb,\n\tprj-nmsc.adb, prj-env.adb (Project_List_Table, Project_Element):\n\tremoved. Lists of projects are now implemented via standard malloc\n\trather than through the table.\n\n2009-04-24  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch12.adb: Minor reformatting\n\n\t* g-trasym.adb: Minor reformatting\n\n\t* exp_ch6.adb: Minor reformatting\n\n2009-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* layout.adb (Layout_Type): For packed array type, copy unset\n\tsize/alignment fields from the referenced Packed_Array_Type.\n\n2009-04-24  Bob Duff  <duff@adacore.com>\n\n\t* lib-load.adb (Make_Instance_Unit): Revert previous change, no\n\tlonger needed after sem_ch12 changes.\n\n\t* sem.adb (Walk_Library_Items): Include with's in some debugging\n\tprintouts.\n\nFrom-SVN: r146727", "tree": {"sha": "fb3fc87fa6c935ed02ccd6b3f65c3a662b29c471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb3fc87fa6c935ed02ccd6b3f65c3a662b29c471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3563739bcd2982f43e3c9c5818c8e0d2ad971394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3563739bcd2982f43e3c9c5818c8e0d2ad971394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3563739bcd2982f43e3c9c5818c8e0d2ad971394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3563739bcd2982f43e3c9c5818c8e0d2ad971394/comments", "author": null, "committer": null, "parents": [{"sha": "806b956fed0026c5431340ee15e770dd513684a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806b956fed0026c5431340ee15e770dd513684a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806b956fed0026c5431340ee15e770dd513684a8"}], "stats": {"total": 450, "additions": 229, "deletions": 221}, "files": [{"sha": "872fc8f195ded3f5ea279d627f368bee6ee2500f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -1,3 +1,31 @@\n+2009-04-24  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-proc.adb, make.adb, mlib-prj.adb, prj.adb, prj.ads, clean.adb,\n+\tprj-nmsc.adb, prj-env.adb (Project_List_Table, Project_Element):\n+\tremoved. Lists of projects are now implemented via standard malloc\n+\trather than through the table.\n+\n+2009-04-24  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch12.adb: Minor reformatting\n+\n+\t* g-trasym.adb: Minor reformatting\n+\n+\t* exp_ch6.adb: Minor reformatting\n+\n+2009-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* layout.adb (Layout_Type): For packed array type, copy unset\n+\tsize/alignment fields from the referenced Packed_Array_Type.\n+\n+2009-04-24  Bob Duff  <duff@adacore.com>\n+\n+\t* lib-load.adb (Make_Instance_Unit): Revert previous change, no\n+\tlonger needed after sem_ch12 changes.\n+\n+\t* sem.adb (Walk_Library_Items): Include with's in some debugging\n+\tprintouts.\n+\n 2009-04-24  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.ads, prj-nmsc.adb (Unit_Project): removed, since in fact we were"}, {"sha": "756fa990272aa74ea509dc6177d5f1cc91fba796", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -1079,30 +1079,29 @@ package body Clean is\n       if All_Projects then\n          declare\n             Imported : Project_List := Data.Imported_Projects;\n-            Element  : Project_Element;\n             Process  : Boolean;\n \n          begin\n             --  For each imported project, call Clean_Project if the project\n             --  has not been processed already.\n \n-            while Imported /= Empty_Project_List loop\n-               Element := Project_Tree.Project_Lists.Table (Imported);\n-               Imported := Element.Next;\n+            while Imported /= null loop\n                Process := True;\n \n                for\n                  J in Processed_Projects.First .. Processed_Projects.Last\n                loop\n-                  if Element.Project = Processed_Projects.Table (J) then\n+                  if Imported.Project = Processed_Projects.Table (J) then\n                      Process := False;\n                      exit;\n                   end if;\n                end loop;\n \n                if Process then\n-                  Clean_Project (Element.Project);\n+                  Clean_Project (Imported.Project);\n                end if;\n+\n+               Imported := Imported.Next;\n             end loop;\n \n             --  If this project extends another project, call Clean_Project for"}, {"sha": "2ea49a3c4af995646877a9414421d9ac3a79ff53", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -2100,11 +2100,11 @@ package body Exp_Ch6 is\n                      Act_Prev := Expression (Act_Prev);\n                   end loop;\n \n-                  --  If the expression is a conversion of a dereference,\n-                  --  this is internally generated code that manipulates\n-                  --  addresses, e.g. when building interface tables. No\n-                  --  check should occur in this case, and the discriminated\n-                  --  object is not directly a hand.\n+                  --  If the expression is a conversion of a dereference, this\n+                  --  is internally generated code that manipulates addresses,\n+                  --  e.g. when building interface tables. No check should\n+                  --  occur in this case, and the discriminated object is not\n+                  --  directly a hand.\n \n                   if not Comes_From_Source (Actual)\n                     and then Nkind (Actual) = N_Unchecked_Type_Conversion\n@@ -2893,9 +2893,9 @@ package body Exp_Ch6 is\n       then\n          --  We perform two simple optimization on calls:\n \n-         --  a) replace calls to null procedures unconditionally,\n+         --  a) replace calls to null procedures unconditionally;\n \n-         --  b) For To_Address, just do an unchecked conversion. Not only is\n+         --  b) for To_Address, just do an unchecked conversion. Not only is\n          --  this efficient, but it also avoids order of elaboration problems\n          --  when address clauses are inlined (address expression elaborated\n          --  at the wrong point)."}, {"sha": "105001ddc1d2c13d4754fabc8755fe91d52c4fb7", "filename": "gcc/ada/g-trasym.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fg-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fg-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-trasym.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2008, AdaCore                     --\n+--                     Copyright (C) 1999-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -74,7 +74,7 @@ package body GNAT.Traceback.Symbolic is\n          buf      : System.Address;\n          len      : System.Address);\n       pragma Import (C, convert_addresses, \"convert_addresses\");\n-      --  This is the procedure version of the Ada aware addr2line.  It places\n+      --  This is the procedure version of the Ada-aware addr2line. It places\n       --  in BUF a string representing the symbolic translation of the N_ADDRS\n       --  raw addresses provided in ADDRS, looked up in debug information from\n       --  FILENAME. LEN points to an integer which contains the size of the\n@@ -100,8 +100,8 @@ package body GNAT.Traceback.Symbolic is\n       use type System.Address;\n \n    begin\n-      --  The symbolic translation of an empty set of addresses is the\n-      --  the empty string.\n+      --  The symbolic translation of an empty set of addresses is an empty\n+      --  string.\n \n       if Traceback'Length = 0 then\n          return \"\";\n@@ -111,8 +111,8 @@ package body GNAT.Traceback.Symbolic is\n       --  libaddr2line service to symbolize it all.\n \n       --  Compute, cache and provide the absolute path to our executable file\n-      --  name as the binary file where the relevant debug information is to\n-      --  be found. If the executable file name resolution fails, we have no\n+      --  name as the binary file where the relevant debug information is to be\n+      --  found. If the executable file name resolution fails, we have no\n       --  sensible basis to invoke the symbolizer at all.\n \n       --  Protect all this against concurrent accesses explicitly, as the"}, {"sha": "6cce7b91e606fc89f8833e1610b87f186ace18d3", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -2501,6 +2501,29 @@ package body Layout is\n       --  Non-elementary (composite) types\n \n       else\n+         --  For packed arrays, take size and alignment values from the packed\n+         --  array type if a packed array type has been created and the fields\n+         --  are not currently set.\n+\n+         if Is_Array_Type (E) and then Present (Packed_Array_Type (E)) then\n+            declare\n+               PAT : constant Entity_Id := Packed_Array_Type (E);\n+\n+            begin\n+               if Unknown_Esize (E) then\n+                  Set_Esize     (E, Esize     (PAT));\n+               end if;\n+\n+               if Unknown_RM_Size (E) then\n+                  Set_RM_Size   (E, RM_Size   (PAT));\n+               end if;\n+\n+               if Unknown_Alignment (E) then\n+                  Set_Alignment (E, Alignment (PAT));\n+               end if;\n+            end;\n+         end if;\n+\n          --  If RM_Size is known, set Esize if not known\n \n          if Known_RM_Size (E) and then Unknown_Esize (E) then\n@@ -2678,7 +2701,6 @@ package body Layout is\n    procedure Rewrite_Integer (N : Node_Id; V : Uint) is\n       Loc : constant Source_Ptr := Sloc (N);\n       Typ : constant Entity_Id  := Etype (N);\n-\n    begin\n       Rewrite (N, Make_Integer_Literal (Loc, Intval => V));\n       Set_Etype (N, Typ);"}, {"sha": "1d0c2d4e79da291906273e352ac733d0083ec8be", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -812,16 +812,7 @@ package body Lib.Load is\n          --  units table when first loaded as a declaration.\n \n          Units.Table (Units.Last) := Units.Table (Get_Cunit_Unit_Number (N));\n-\n-         --  The correct Cunit is the spec -- Library_Unit (N). But that causes\n-         --  gnatmake to fail in certain cases, so this is under control of\n-         --  Inspector_Mode for now. ???\n-\n-         if Inspector_Mode then\n-            Units.Table (Units.Last).Cunit := Library_Unit (N);\n-         else\n-            Units.Table (Units.Last).Cunit := N;\n-         end if;\n+         Units.Table (Units.Last).Cunit := Library_Unit (N);\n       end if;\n    end Make_Instance_Unit;\n "}, {"sha": "c3db62f4c430aa7ecf4f8772a9df49456d65729d", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -5797,7 +5797,6 @@ package body Make is\n                         then\n                            declare\n                               List    : Project_List;\n-                              Element : Project_Element;\n                               Proj2   : Project_Id;\n                               Rebuild : Boolean := False;\n \n@@ -5808,10 +5807,8 @@ package body Make is\n                            begin\n                               List := Project_Tree.Projects.Table (Proj1).\n                                                       All_Imported_Projects;\n-                              while List /= Empty_Project_List loop\n-                                 Element :=\n-                                   Project_Tree.Project_Lists.Table (List);\n-                                 Proj2 := Element.Project;\n+                              while List /= null loop\n+                                 Proj2 := List.Project;\n \n                                  if\n                                    Project_Tree.Projects.Table (Proj2).Library\n@@ -5828,7 +5825,7 @@ package body Make is\n                                     end if;\n                                  end if;\n \n-                                 List := Element.Next;\n+                                 List := List.Next;\n                               end loop;\n \n                               if Rebuild then\n@@ -7555,9 +7552,9 @@ package body Make is\n \n          --  Visit each imported project\n \n-         while List /= Empty_Project_List loop\n-            Proj := Project_Tree.Project_Lists.Table (List).Project;\n-            List := Project_Tree.Project_Lists.Table (List).Next;\n+         while List /= null loop\n+            Proj := List.Project;\n+            List := List.Next;\n             Recurse (Prj => Proj, Depth => Depth + 1);\n          end loop;\n "}, {"sha": "042cd65b5c46d460f302fddf4b1a5b063c299436", "filename": "gcc/ada/mlib-prj.adb", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fmlib-prj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fmlib-prj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-prj.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -680,7 +680,6 @@ package body MLib.Prj is\n          procedure Process_Project (Project : Project_Id) is\n             Data     : Project_Data := In_Tree.Projects.Table (Project);\n             Imported : Project_List := Data.Imported_Projects;\n-            Element  : Project_Element;\n \n          begin\n             --  Nothing to do if process has already been processed\n@@ -692,15 +691,12 @@ package body MLib.Prj is\n                --  We first process the imported projects to guarantee that\n                --  we have a proper reverse order for the libraries.\n \n-               while Imported /= Empty_Project_List loop\n-                  Element :=\n-                    In_Tree.Project_Lists.Table (Imported);\n-\n-                  if Element.Project /= No_Project then\n-                     Process_Project (Element.Project);\n+               while Imported /= null loop\n+                  if Imported.Project /= No_Project then\n+                     Process_Project (Imported.Project);\n                   end if;\n \n-                  Imported := Element.Next;\n+                  Imported := Imported.Next;\n                end loop;\n \n                --  If it is a library project, add it to Library_Projs"}, {"sha": "5c0a11b180fa3a74c0da8c9360506c9df202fd99", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -401,7 +401,7 @@ package body Prj.Env is\n \n       Current_Unit : Unit_Index := Unit_Table.First;\n \n-      First_Project : Project_List := Empty_Project_List;\n+      First_Project : Project_List;\n \n       Current_Project : Project_List;\n       Current_Naming  : Naming_Id;\n@@ -449,24 +449,18 @@ package body Prj.Env is\n          --  Is this project in the list of the visited project?\n \n          Current_Project := First_Project;\n-         while Current_Project /= Empty_Project_List\n-           and then In_Tree.Project_Lists.Table\n-                      (Current_Project).Project /= Project\n+         while Current_Project /= null\n+           and then Current_Project.Project /= Project\n          loop\n-            Current_Project :=\n-              In_Tree.Project_Lists.Table (Current_Project).Next;\n+            Current_Project := Current_Project.Next;\n          end loop;\n \n          --  If it is not, put it in the list, and visit it\n \n-         if Current_Project = Empty_Project_List then\n-            Project_List_Table.Increment_Last\n-              (In_Tree.Project_Lists);\n-            In_Tree.Project_Lists.Table\n-              (Project_List_Table.Last (In_Tree.Project_Lists)) :=\n-                 (Project => Project, Next => First_Project);\n-               First_Project :=\n-                 Project_List_Table.Last (In_Tree.Project_Lists);\n+         if Current_Project = null then\n+            First_Project := new Project_List_Element'\n+              (Project => Project,\n+               Next    => First_Project);\n \n             --  Is the naming scheme of this project one that we know?\n \n@@ -557,12 +551,9 @@ package body Prj.Env is\n                Current : Project_List := Data.Imported_Projects;\n \n             begin\n-               while Current /= Empty_Project_List loop\n-                  Check\n-                    (In_Tree.Project_Lists.Table\n-                       (Current).Project);\n-                  Current := In_Tree.Project_Lists.Table\n-                               (Current).Next;\n+               while Current /= null loop\n+                  Check (Current.Project);\n+                  Current := Current.Next;\n                end loop;\n             end;\n          end if;\n@@ -898,7 +889,6 @@ package body Prj.Env is\n \n       procedure Recursive_Flag (Prj : Project_Id) is\n          Imported : Project_List;\n-         Proj     : Project_Id;\n \n       begin\n          --  Nothing to do for non existent project or project that has already\n@@ -908,10 +898,9 @@ package body Prj.Env is\n             Present (Prj) := True;\n \n             Imported := In_Tree.Projects.Table (Prj).Imported_Projects;\n-            while Imported /= Empty_Project_List loop\n-               Proj     := In_Tree.Project_Lists.Table (Imported).Project;\n-               Imported := In_Tree.Project_Lists.Table (Imported).Next;\n-               Recursive_Flag (Proj);\n+            while Imported /= null loop\n+               Recursive_Flag (Imported.Project);\n+               Imported := Imported.Next;\n             end loop;\n \n             Recursive_Flag (In_Tree.Projects.Table (Prj).Extends);"}, {"sha": "9b68755add61508bebeec119e553f337e8ceee3f", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -356,7 +356,6 @@ package body Prj.Nmsc is\n    procedure Find_Ada_Sources\n      (Project               : Project_Id;\n       In_Tree               : Project_Tree_Ref;\n-      Data                  : in out Project_Data;\n       Explicit_Sources_Only : Boolean);\n    --  Find all Ada sources by traversing all source directories.\n    --  If Explicit_Sources_Only is True, then the sources found must belong to\n@@ -554,7 +553,7 @@ package body Prj.Nmsc is\n       Path_Name       : Path_Name_Type;\n       Project         : Project_Id;\n       In_Tree         : Project_Tree_Ref;\n-      Data            : in out Project_Data;\n+      Units           : in out Files_Htable.Instance;\n       Ada_Language    : Language_Ptr;\n       Location        : Source_Ptr;\n       Source_Recorded : in out Boolean);\n@@ -3393,7 +3392,7 @@ package body Prj.Nmsc is\n                        Prj.Util.Value_Of\n                          (Snames.Name_Library_Kind, Attributes, In_Tree);\n \n-      Imported_Project_List : Project_List := Empty_Project_List;\n+      Imported_Project_List : Project_List;\n \n       Continuation : String_Access := No_Continuation_String'Access;\n \n@@ -4040,14 +4039,11 @@ package body Prj.Nmsc is\n                   Check_Library (Data.Extends, Extends => True);\n \n                   Imported_Project_List := Data.Imported_Projects;\n-                  while Imported_Project_List /= Empty_Project_List loop\n+                  while Imported_Project_List /= null loop\n                      Check_Library\n-                       (In_Tree.Project_Lists.Table\n-                          (Imported_Project_List).Project,\n+                       (Imported_Project_List.Project,\n                         Extends => False);\n-                     Imported_Project_List :=\n-                       In_Tree.Project_Lists.Table\n-                         (Imported_Project_List).Next;\n+                     Imported_Project_List := Imported_Project_List.Next;\n                   end loop;\n                end if;\n             end if;\n@@ -7040,8 +7036,7 @@ package body Prj.Nmsc is\n \n       if Get_Mode = Ada_Only then\n          Find_Ada_Sources\n-           (Project, In_Tree, Data,\n-            Explicit_Sources_Only => Has_Explicit_Sources);\n+           (Project, In_Tree, Explicit_Sources_Only => Has_Explicit_Sources);\n \n       else\n          Search_Directories\n@@ -7137,17 +7132,20 @@ package body Prj.Nmsc is\n    procedure Find_Ada_Sources\n      (Project               : Project_Id;\n       In_Tree               : Project_Tree_Ref;\n-      Data                  : in out Project_Data;\n       Explicit_Sources_Only : Boolean)\n    is\n+      Data : Project_Data renames In_Tree.Projects.Table (Project);\n       Source_Dir     : String_List_Id;\n       Element        : String_Element;\n       Dir            : Dir_Type;\n       Dir_Has_Source : Boolean := False;\n       NL             : Name_Location;\n       Ada_Language   : Language_Ptr;\n+      Units          : Files_Htable.Instance;\n \n    begin\n+      Files_Htable.Reset (Units);\n+\n       if Current_Verbosity = High then\n          Write_Line (\"Looking for Ada sources:\");\n       end if;\n@@ -7251,7 +7249,7 @@ package body Prj.Nmsc is\n                         Path_Name       => Path_Name,\n                         Project         => Project,\n                         In_Tree         => In_Tree,\n-                        Data            => Data,\n+                        Units           => Units,\n                         Ada_Language    => Ada_Language,\n                         Location        => Location,\n                         Source_Recorded => Dir_Has_Source);\n@@ -7277,6 +7275,8 @@ package body Prj.Nmsc is\n       if Current_Verbosity = High then\n          Write_Line (\"End looking for sources\");\n       end if;\n+\n+      Files_Htable.Reset (Units);\n    end Find_Ada_Sources;\n \n    -------------------------------\n@@ -8184,11 +8184,12 @@ package body Prj.Nmsc is\n       Path_Name       : Path_Name_Type;\n       Project         : Project_Id;\n       In_Tree         : Project_Tree_Ref;\n-      Data            : in out Project_Data;\n+      Units           : in out Files_Htable.Instance;\n       Ada_Language    : Language_Ptr;\n       Location        : Source_Ptr;\n       Source_Recorded : in out Boolean)\n    is\n+      Data : Project_Data renames In_Tree.Projects.Table (Project);\n       Canonical_File : File_Name_Type;\n       Canonical_Path : Path_Name_Type;\n \n@@ -8252,7 +8253,7 @@ package body Prj.Nmsc is\n \n                --  Record the file name in the hash table Files_Htable\n \n-               Files_Htable.Set (In_Tree.Files_HT, Canonical_File, Project);\n+               Files_Htable.Set (Units, Canonical_File, Project);\n \n                UData.File_Names (Unit_Kind) :=\n                  (Name         => Canonical_File,\n@@ -8312,7 +8313,7 @@ package body Prj.Nmsc is\n             --  another project. If it is, report error but note we do that\n             --  only for the first unit in the source file.\n \n-            Unit_Prj := Files_Htable.Get (In_Tree.Files_HT, Canonical_File);\n+            Unit_Prj := Files_Htable.Get (Units, Canonical_File);\n \n             if not File_Recorded\n               and then Unit_Prj /= No_Project\n@@ -8329,7 +8330,7 @@ package body Prj.Nmsc is\n                The_Unit := Unit_Table.Last (In_Tree.Units);\n                Units_Htable.Set (In_Tree.Units_HT, Unit_Name, The_Unit);\n \n-               Files_Htable.Set (In_Tree.Files_HT, Canonical_File, Project);\n+               Files_Htable.Set (Units, Canonical_File, Project);\n \n                UData.Name := Unit_Name;\n                UData.File_Names (Unit_Kind) :="}, {"sha": "2c1c6794ffe00442ccc2a3f10291178d7ee0d436", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -1150,8 +1150,8 @@ package body Prj.Proc is\n \n       Temp_Result := No_Project;\n       List := Data.Imported_Projects;\n-      while List /= Empty_Project_List loop\n-         Result := In_Tree.Project_Lists.Table (List).Project;\n+      while List /= null loop\n+         Result := List.Project;\n \n          --  If the project is directly imported, then returns its ID\n \n@@ -1177,7 +1177,7 @@ package body Prj.Proc is\n             end loop;\n          end;\n \n-         List := In_Tree.Project_Lists.Table (List).Next;\n+         List := List.Next;\n       end loop;\n \n       pragma Assert (Temp_Result /= No_Project, \"project not found\");\n@@ -2531,26 +2531,22 @@ package body Prj.Proc is\n                   From_Project_Node_Tree => From_Project_Node_Tree,\n                   Extended_By            => No_Project);\n \n-               --  Add this project to our list of imported projects\n-\n-               Project_List_Table.Increment_Last (In_Tree.Project_Lists);\n-\n-               In_Tree.Project_Lists.Table\n-                 (Project_List_Table.Last (In_Tree.Project_Lists)) :=\n-                 (Project => New_Project, Next => Empty_Project_List);\n-\n                --  Imported is the id of the last imported project. If\n                --  it is nil, then this imported project is our first.\n \n-               if Imported = Empty_Project_List then\n+               if Imported = null then\n                   In_Tree.Projects.Table (Project).Imported_Projects :=\n-                    Project_List_Table.Last (In_Tree.Project_Lists);\n+                    new Project_List_Element'\n+                      (Project => New_Project,\n+                       Next    => null);\n+                  Imported :=\n+                    In_Tree.Projects.Table (Project).Imported_Projects;\n                else\n-                  In_Tree.Project_Lists.Table (Imported).Next :=\n-                    Project_List_Table.Last (In_Tree.Project_Lists);\n+                  Imported.Next := new Project_List_Element'\n+                    (Project => New_Project,\n+                     Next    => null);\n+                  Imported := Imported.Next;\n                end if;\n-\n-               Imported := Project_List_Table.Last (In_Tree.Project_Lists);\n             end if;\n \n             With_Clause :=\n@@ -2567,7 +2563,7 @@ package body Prj.Proc is\n       else\n          declare\n             Processed_Data   : Project_Data     := Empty_Project (In_Tree);\n-            Imported         : Project_List     := Empty_Project_List;\n+            Imported         : Project_List;\n             Declaration_Node : Project_Node_Id  := Empty_Node;\n             Tref             : Source_Buffer_Ptr;\n             Name             : constant Name_Id :="}, {"sha": "d6a98b45550c5e5effa6a43e38271e9d7eaed9ab", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 55, "deletions": 51, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -118,8 +118,8 @@ package body Prj is\n                       Naming                         => Std_Naming_Data,\n                       Languages      => No_Language_Index,\n                       Decl                           => No_Declarations,\n-                      Imported_Projects              => Empty_Project_List,\n-                      All_Imported_Projects          => Empty_Project_List,\n+                      Imported_Projects              => null,\n+                      All_Imported_Projects          => null,\n                       Ada_Include_Path               => null,\n                       Ada_Objects_Path               => null,\n                       Objects_Path                   => null,\n@@ -143,11 +143,12 @@ package body Prj is\n    --  Table to store the path name of all the created temporary files, so that\n    --  they can be deleted at the end, or when the program is interrupted.\n \n-   procedure Free (Project : in out Project_Data);\n+   procedure Free (Project : in out Project_Data; Reset_Only : Boolean);\n    --  Free memory allocated for Project\n \n    procedure Free_List (Languages : in out Language_Ptr);\n    procedure Free_List (Source : in out Source_Id);\n+   procedure Free_List (List : in out Project_List);\n    --  Free memory allocated for the list of languages or sources\n \n    procedure Language_Changed (Iter : in out Source_Iterator);\n@@ -532,9 +533,9 @@ package body Prj is\n             --  Visited all imported projects\n \n             List := Data.Imported_Projects;\n-            while List /= Empty_Project_List loop\n-               Recursive_Check (In_Tree.Project_Lists.Table (List).Project);\n-               List := In_Tree.Project_Lists.Table (List).Next;\n+            while List /= null loop\n+               Recursive_Check (List.Project);\n+               List := List.Next;\n             end loop;\n \n             if Imported_First then\n@@ -821,12 +822,19 @@ package body Prj is\n    -- Free --\n    ----------\n \n-   procedure Free (Project : in out Project_Data) is\n+   procedure Free (Project : in out Project_Data; Reset_Only : Boolean) is\n    begin\n       Free (Project.Include_Path);\n       Free (Project.Ada_Include_Path);\n       Free (Project.Objects_Path);\n       Free (Project.Ada_Objects_Path);\n+\n+      Free_List (Project.Imported_Projects);\n+      Free_List (Project.All_Imported_Projects);\n+\n+      if not Reset_Only then\n+         Free_List (Project.Languages);\n+      end if;\n    end Free;\n \n    ---------------\n@@ -849,6 +857,22 @@ package body Prj is\n    -- Free_List --\n    ---------------\n \n+   procedure Free_List (List : in out Project_List) is\n+      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n+        (Project_List_Element, Project_List);\n+      Tmp : Project_List;\n+   begin\n+      while List /= null loop\n+         Tmp := List.Next;\n+         Unchecked_Free (List);\n+         List := Tmp;\n+      end loop;\n+   end Free_List;\n+\n+   ---------------\n+   -- Free_List --\n+   ---------------\n+\n    procedure Free_List (Languages : in out Language_Ptr) is\n       procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n         (Language_Data, Language_Ptr);\n@@ -878,19 +902,16 @@ package body Prj is\n          Array_Element_Table.Free (Tree.Array_Elements);\n          Array_Table.Free (Tree.Arrays);\n          Package_Table.Free (Tree.Packages);\n-         Project_List_Table.Free (Tree.Project_Lists);\n          Alternate_Language_Table.Free (Tree.Alt_Langs);\n          Unit_Table.Free (Tree.Units);\n          Units_Htable.Reset (Tree.Units_HT);\n-         Files_Htable.Reset (Tree.Files_HT);\n          Source_Paths_Htable.Reset (Tree.Source_Paths_HT);\n          Unit_Sources_Htable.Reset (Tree.Unit_Sources_HT);\n \n          for P in Project_Table.First ..\n            Project_Table.Last (Tree.Projects)\n          loop\n-            Free_List (Tree.Projects.Table (P).Languages);\n-            Free (Tree.Projects.Table (P));\n+            Free (Tree.Projects.Table (P), Reset_Only => False);\n          end loop;\n \n          Project_Table.Free (Tree.Projects);\n@@ -923,19 +944,17 @@ package body Prj is\n       Array_Element_Table.Init      (Tree.Array_Elements);\n       Array_Table.Init              (Tree.Arrays);\n       Package_Table.Init            (Tree.Packages);\n-      Project_List_Table.Init       (Tree.Project_Lists);\n       Alternate_Language_Table.Init (Tree.Alt_Langs);\n       Unit_Table.Init               (Tree.Units);\n       Units_Htable.Reset            (Tree.Units_HT);\n-      Files_Htable.Reset            (Tree.Files_HT);\n       Source_Paths_Htable.Reset     (Tree.Source_Paths_HT);\n       Unit_Sources_Htable.Reset     (Tree.Unit_Sources_HT);\n \n       if not Project_Table.\"=\" (Tree.Projects.Table, null) then\n          for P in Project_Table.First ..\n            Project_Table.Last (Tree.Projects)\n          loop\n-            Free (Tree.Projects.Table (P));\n+            Free (Tree.Projects.Table (P), Reset_Only => True);\n          end loop;\n       end if;\n \n@@ -1366,59 +1385,45 @@ package body Prj is\n    procedure Compute_All_Imported_Projects\n      (Project : Project_Id; In_Tree : Project_Tree_Ref)\n    is\n-      procedure Add_To_List (Prj : Project_Id);\n-      --  Add a project to the list All_Imported_Projects of project Project\n+      Data : Project_Data renames In_Tree.Projects.Table (Project);\n \n       procedure Recursive_Add (Prj : Project_Id; Dummy : in out Boolean);\n       --  Recursively add the projects imported by project Project, but not\n       --  those that are extended.\n \n-      -----------------\n-      -- Add_To_List --\n-      -----------------\n-\n-      procedure Add_To_List (Prj : Project_Id) is\n-         Element : constant Project_Element :=\n-                     (Prj,\n-                      In_Tree.Projects.Table (Project).All_Imported_Projects);\n-         List    : Project_List;\n-\n-      begin\n-         --  Check that the project is not already in the list. We know the one\n-         --  passed to Recursive_Add have never been visited before, but the\n-         --  one passed it are the extended projects.\n-\n-         List := In_Tree.Projects.Table (Project).All_Imported_Projects;\n-         while List /= Empty_Project_List loop\n-            if In_Tree.Project_Lists.Table (List).Project = Prj then\n-               return;\n-            end if;\n-            List := In_Tree.Project_Lists.Table (List).Next;\n-         end loop;\n-\n-         --  Add it to the list\n-\n-         Project_List_Table.Increment_Last (In_Tree.Project_Lists);\n-         List := Project_List_Table.Last (In_Tree.Project_Lists);\n-         In_Tree.Project_Lists.Table (List) := Element;\n-         In_Tree.Projects.Table (Project).All_Imported_Projects := List;\n-      end Add_To_List;\n-\n       -------------------\n       -- Recursive_Add --\n       -------------------\n \n       procedure Recursive_Add (Prj : Project_Id; Dummy : in out Boolean) is\n          pragma Unreferenced (Dummy);\n-\n+         List    : Project_List;\n          Prj2    : Project_Id;\n \n       begin\n          --  A project is not importing itself\n \n          if Project /= Prj then\n             Prj2 := Ultimate_Extending_Project_Of (Prj, In_Tree);\n-            Add_To_List (Prj2);\n+\n+            --  Check that the project is not already in the list. We know the\n+            --  one passed to Recursive_Add have never been visited before, but\n+            --  the one passed it are the extended projects.\n+\n+            List := Data.All_Imported_Projects;\n+            while List /= null loop\n+               if List.Project = Prj2 then\n+                  return;\n+               end if;\n+               List := List.Next;\n+            end loop;\n+\n+            --  Add it to the list\n+\n+            Data.All_Imported_Projects :=\n+              new Project_List_Element'\n+                (Project => Prj2,\n+                 Next    => Data.All_Imported_Projects);\n          end if;\n       end Recursive_Add;\n \n@@ -1427,8 +1432,7 @@ package body Prj is\n       Dummy : Boolean := False;\n \n    begin\n-      In_Tree.Projects.Table (Project).All_Imported_Projects :=\n-        Empty_Project_List;\n+      Free_List (Data.All_Imported_Projects);\n       For_All_Projects (Project, In_Tree, Dummy);\n    end Compute_All_Imported_Projects;\n "}, {"sha": "5d04a61bc9340773c0f629cd08223ec2b60025ce", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -941,24 +941,13 @@ package Prj is\n    --  Returns True if Left and Right are the same naming scheme\n    --  not considering Specs and Bodies.\n \n-   type Project_List is new Nat;\n-   Empty_Project_List : constant Project_List := 0;\n-   --  A list of project files\n-\n-   type Project_Element is record\n+   type Project_List_Element;\n+   type Project_List is access Project_List_Element;\n+   type Project_List_Element is record\n       Project : Project_Id   := No_Project;\n-      Next    : Project_List := Empty_Project_List;\n+      Next    : Project_List := null;\n    end record;\n-   --  Element in a list of project files. Next is the id of the next\n-   --  project file in the list.\n-\n-   package Project_List_Table is new GNAT.Dynamic_Tables\n-     (Table_Component_Type => Project_Element,\n-      Table_Index_Type     => Project_List,\n-      Table_Low_Bound      => 1,\n-      Table_Initial        => 100,\n-      Table_Increment      => 100);\n-   --  The table that contains the lists of project files\n+   --  A list of projects\n \n    type Response_File_Format is\n      (None,\n@@ -1181,10 +1170,10 @@ package Prj is\n       --  The declarations (variables, attributes and packages) of this project\n       --  file.\n \n-      Imported_Projects : Project_List := Empty_Project_List;\n+      Imported_Projects : Project_List;\n       --  The list of all directly imported projects, if any\n \n-      All_Imported_Projects : Project_List := Empty_Project_List;\n+      All_Imported_Projects : Project_List;\n       --  The list of all projects imported directly or indirectly, if any\n \n       -----------------\n@@ -1449,12 +1438,10 @@ package Prj is\n          Array_Elements    : Array_Element_Table.Instance;\n          Arrays            : Array_Table.Instance;\n          Packages          : Package_Table.Instance;\n-         Project_Lists     : Project_List_Table.Instance;\n          Projects          : Project_Table.Instance;\n          Alt_Langs         : Alternate_Language_Table.Instance;\n          Units             : Unit_Table.Instance;\n          Units_HT          : Units_Htable.Instance;\n-         Files_HT          : Files_Htable.Instance;\n          Source_Paths_HT   : Source_Paths_Htable.Instance;\n          Unit_Sources_HT   : Unit_Sources_Htable.Instance;\n "}, {"sha": "2f8192b20cb430092a90e38f3c3dd6ad9cc57d0f", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -1615,7 +1615,7 @@ package body Sem is\n \n             begin\n                if Debug_Unit_Walk then\n-                  Write_Unit_Info (Unit_Num, Item);\n+                  Write_Unit_Info (Unit_Num, Item, Withs => True);\n                end if;\n \n                --  Main unit should come last\n@@ -1810,7 +1810,8 @@ package body Sem is\n \n             for Unit_Num in Done'Range loop\n                if not Done (Unit_Num) then\n-                  Write_Unit_Info (Unit_Num, Unit (Cunit (Unit_Num)));\n+                  Write_Unit_Info\n+                    (Unit_Num, Unit (Cunit (Unit_Num)), Withs => True);\n                end if;\n             end loop;\n "}, {"sha": "697c31333349c0b24148d7362ca854341bb913c0", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 38, "deletions": 41, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3563739bcd2982f43e3c9c5818c8e0d2ad971394/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=3563739bcd2982f43e3c9c5818c8e0d2ad971394", "patch": "@@ -889,8 +889,8 @@ package body Sem_Ch12 is\n       Actual_Types    : constant Elist_Id  := New_Elmt_List;\n       Assoc           : constant List_Id   := New_List;\n       Default_Actuals : constant Elist_Id  := New_Elmt_List;\n-      Gen_Unit        : constant Entity_Id\n-                          := Defining_Entity (Parent (F_Copy));\n+      Gen_Unit        : constant Entity_Id :=\n+                          Defining_Entity (Parent (F_Copy));\n \n       Actuals         : List_Id;\n       Actual          : Node_Id;\n@@ -903,7 +903,7 @@ package body Sem_Ch12 is\n       First_Named     : Node_Id := Empty;\n \n       Default_Formals : constant List_Id := New_List;\n-      --  If an Other_Choice is present, some of the formals may be defaulted.\n+      --  If an Others_Choice is present, some of the formals may be defaulted.\n       --  To simplify the treatment of visibility in an instance, we introduce\n       --  individual defaults for each such formal. These defaults are\n       --  appended to the list of associations and replace the Others_Choice.\n@@ -970,9 +970,7 @@ package body Sem_Ch12 is\n \n          --  End of list of purely positional parameters\n \n-         if No (Actual)\n-           or else Nkind (Actual) = N_Others_Choice\n-         then\n+         if No (Actual) or else Nkind (Actual) = N_Others_Choice then\n             Found_Assoc := Empty;\n             Act         := Empty;\n \n@@ -1055,8 +1053,8 @@ package body Sem_Ch12 is\n          Id      : Entity_Id;\n \n       begin\n-         --  Append copy of formal declaration to associations, and create\n-         --  new defining identifier for it.\n+         --  Append copy of formal declaration to associations, and create new\n+         --  defining identifier for it.\n \n          Decl := New_Copy_Tree (F);\n          Id := Make_Defining_Identifier (Sloc (F_Id), Chars => Chars (F_Id));\n@@ -4376,7 +4374,7 @@ package body Sem_Ch12 is\n       --  The new compilation unit is linked to its body, but both share the\n       --  same file, so we do not set Body_Required on the new unit so as not\n       --  to create a spurious dependency on a non-existent body in the ali.\n-      --  This simplifies codepeer unit traversal.\n+      --  This simplifies Codepeer unit traversal.\n \n       --  We use the original instantiation compilation unit as the resulting\n       --  compilation unit of the instance, since this is the main unit.\n@@ -4393,7 +4391,7 @@ package body Sem_Ch12 is\n \n       Set_Private_Present (Decl_Cunit, Private_Present (Body_Cunit));\n \n-      --  If the instance is not the main unit, its context, categorization,\n+      --  If the instance is not the main unit, its context, categorization\n       --  and elaboration entity are not relevant to the compilation.\n \n       if Body_Cunit /= Cunit (Main_Unit) then\n@@ -11363,8 +11361,8 @@ package body Sem_Ch12 is\n       --  the time the instantiations will be analyzed.\n \n       procedure Reset_Entity (N : Node_Id);\n-      --  Save semantic information on global entity, so that it is not\n-      --  resolved again at instantiation time.\n+      --  Save semantic information on global entity so that it is not resolved\n+      --  again at instantiation time.\n \n       procedure Save_Entity_Descendants (N : Node_Id);\n       --  Apply Save_Global_References to the two syntactic descendants of\n@@ -11416,9 +11414,9 @@ package body Sem_Ch12 is\n \n          function Is_Instance_Node (Decl : Node_Id) return Boolean is\n          begin\n-            return (Nkind (Decl) in N_Generic_Instantiation\n-              or else\n-                Nkind (Original_Node (Decl)) = N_Formal_Package_Declaration);\n+            return Nkind (Decl) in N_Generic_Instantiation\n+                     or else\n+                   Nkind (Original_Node (Decl)) = N_Formal_Package_Declaration;\n          end Is_Instance_Node;\n \n       --  Start of processing for Is_Global\n@@ -11460,15 +11458,15 @@ package body Sem_Ch12 is\n       procedure Reset_Entity (N : Node_Id) is\n \n          procedure Set_Global_Type (N : Node_Id; N2 : Node_Id);\n-         --  If the type of N2 is global to the generic unit. Save\n-         --  the type in the generic node.\n+         --  If the type of N2 is global to the generic unit. Save the type in\n+         --  the generic node.\n+         --  What does this comment mean???\n \n          function Top_Ancestor (E : Entity_Id) return Entity_Id;\n-         --  Find the ultimate ancestor of the current unit. If it is\n-         --  not a generic unit, then the name of the current unit\n-         --  in the prefix of an expanded name must be replaced with\n-         --  its generic homonym to ensure that it will be properly\n-         --  resolved in an instance.\n+         --  Find the ultimate ancestor of the current unit. If it is not a\n+         --  generic unit, then the name of the current unit in the prefix of\n+         --  an expanded name must be replaced with its generic homonym to\n+         --  ensure that it will be properly resolved in an instance.\n \n          ---------------------\n          -- Set_Global_Type --\n@@ -11483,10 +11481,10 @@ package body Sem_Ch12 is\n             if Entity (N) /= N2\n               and then Has_Private_View (Entity (N))\n             then\n-               --  If the entity of N is not the associated node, this is\n-               --  a nested generic and it has an associated node as well,\n-               --  whose type is already the full view (see below). Indicate\n-               --  that the original node has a private view.\n+               --  If the entity of N is not the associated node, this is a\n+               --  nested generic and it has an associated node as well, whose\n+               --  type is already the full view (see below). Indicate that the\n+               --  original node has a private view.\n \n                Set_Has_Private_View (N);\n             end if;\n@@ -11500,14 +11498,14 @@ package body Sem_Ch12 is\n                   Set_Has_Private_View (N);\n                end if;\n \n-            --  If it is a derivation of a private type in a context where\n-            --  no full view is needed, nothing to do either.\n+            --  If it is a derivation of a private type in a context where no\n+            --  full view is needed, nothing to do either.\n \n             elsif No (Full_View (Typ)) and then Typ /= Etype (Typ) then\n                null;\n \n-            --  Otherwise mark the type for flipping and use the full_view\n-            --  when available.\n+            --  Otherwise mark the type for flipping and use the full view when\n+            --  available.\n \n             else\n                Set_Has_Private_View (N);\n@@ -11581,8 +11579,7 @@ package body Sem_Ch12 is\n             --  is because in an instantiation Par.P.Q will not resolve to the\n             --  name of the instance, whose enclosing scope is not necessarily\n             --  Par. We use the generic homonym rather that the name of the\n-            --  generic itself, because it may be hidden by a local\n-            --  declaration.\n+            --  generic itself because it may be hidden by a local declaration.\n \n             elsif In_Open_Scopes (Entity (Parent (N2)))\n               and then not\n@@ -11609,7 +11606,7 @@ package body Sem_Ch12 is\n \n          --  A selected component may denote a static constant that has been\n          --  folded. If the static constant is global to the generic, capture\n-         --  its value. Otherwise the folding will happen in any instantiation,\n+         --  its value. Otherwise the folding will happen in any instantiation.\n \n          elsif Nkind (Parent (N)) = N_Selected_Component\n            and then Nkind_In (Parent (N2), N_Integer_Literal, N_Real_Literal)\n@@ -11861,13 +11858,13 @@ package body Sem_Ch12 is\n       -- Save_References --\n       ---------------------\n \n-      --  This is the recursive procedure that does the work, once the\n-      --  enclosing generic scope has been established. We have to treat\n-      --  specially a number of node rewritings that are required by semantic\n-      --  processing and which change the kind of nodes in the generic copy:\n-      --  typically constant-folding, replacing an operator node by a string\n-      --  literal, or a selected component by an expanded name. In each of\n-      --  those cases, the transformation is propagated to the generic unit.\n+      --  This is the recursive procedure that does the work once the enclosing\n+      --  generic scope has been established. We have to treat specially a\n+      --  number of node rewritings that are required by semantic processing\n+      --  and which change the kind of nodes in the generic copy: typically\n+      --  constant-folding, replacing an operator node by a string literal, or\n+      --  a selected component by an expanded name. In each of those cases, the\n+      --  transformation is propagated to the generic unit.\n \n       procedure Save_References (N : Node_Id) is\n       begin\n@@ -11948,7 +11945,7 @@ package body Sem_Ch12 is\n                  and then Ekind (Entity (N2)) = E_Enumeration_Literal\n                then\n                   --  Same if call was folded into a literal, but in this case\n-                  --  retain the entity to avoid spurious ambiguities if id is\n+                  --  retain the entity to avoid spurious ambiguities if it is\n                   --  overloaded at the point of instantiation or inlining.\n \n                   Rewrite (N, New_Copy (N2));"}]}