{"sha": "59e36c85e7e627feb458f2b8c43859d9422f1522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllMzZjODVlN2U2MjdmZWI0NThmMmI4YzQzODU5ZDk0MjJmMTUyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-03T09:47:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-03T09:47:51Z"}, "message": "PR libstdc++/85184 remove debug assertions from std::variant\n\nThe __glibcxx_assert macro should be used to check preconditions that\nusers must meet, not to check postconditions that the implementation\nmust meet. We have tests to verify std::variant meets its\npostconditions, users shouldn't pay for those checks at runtime.\n\n\tPR libstdc++/85184\n\t* include/std/variant (_Copy_assign_base, _Move_assign_base, variant):\n\tRemove assertions.\n\t(variant::emplace<_Tp>): Remove result of emplace<N> directly.\n\nFrom-SVN: r270117", "tree": {"sha": "c9e555e153c6ca34b885ee8aafe25593ef8321d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9e555e153c6ca34b885ee8aafe25593ef8321d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e36c85e7e627feb458f2b8c43859d9422f1522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e36c85e7e627feb458f2b8c43859d9422f1522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e36c85e7e627feb458f2b8c43859d9422f1522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e36c85e7e627feb458f2b8c43859d9422f1522/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb78ef4bcd216413199f9f27eed0ea0a56dd8da"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "4b0b3306b9be9d4dae59d94755270098b9fe7fdc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36c85e7e627feb458f2b8c43859d9422f1522/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36c85e7e627feb458f2b8c43859d9422f1522/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=59e36c85e7e627feb458f2b8c43859d9422f1522", "patch": "@@ -1,5 +1,10 @@\n 2019-04-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/85184\n+\t* include/std/variant (_Copy_assign_base, _Move_assign_base, variant):\n+\tRemove assertions.\n+\t(variant::emplace<_Tp>): Remove result of emplace<N> directly.\n+\n \t* include/std/string (__hash_string_base): New class template defining\n \toperator() for hashing strings.\n \t(hash<pmr::string>, hash<pmr::u8string>, hash<pmr::u16string>)"}, {"sha": "a21ef3005cfd5e10b4e5d1969b6509ce0c7136ff", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e36c85e7e627feb458f2b8c43859d9422f1522/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e36c85e7e627feb458f2b8c43859d9422f1522/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=59e36c85e7e627feb458f2b8c43859d9422f1522", "patch": "@@ -612,7 +612,6 @@ namespace __variant\n \t      this->_M_reset();\n \t    return {};\n \t  }, __variant_cast<_Types...>(__rhs));\n-\t__glibcxx_assert(this->_M_index == __rhs._M_index);\n \treturn *this;\n       }\n \n@@ -670,7 +669,6 @@ namespace __variant\n \t      this->_M_reset();\n \t    return {};\n \t  }, __variant_cast<_Types...>(__rhs));\n-\t__glibcxx_assert(this->_M_index == __rhs._M_index);\n \treturn *this;\n       }\n \n@@ -1245,7 +1243,7 @@ namespace __variant\n \tnoexcept(is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp&&>)\n \t: variant(in_place_index<__accepted_index<_Tp&&>>,\n \t\t  std::forward<_Tp>(__t))\n-\t{ __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this)); }\n+\t{ }\n \n       template<typename _Tp, typename... _Args,\n \t       typename = enable_if_t<__exactly_once<_Tp>\n@@ -1254,7 +1252,7 @@ namespace __variant\n \tvariant(in_place_type_t<_Tp>, _Args&&... __args)\n \t: variant(in_place_index<__index_of<_Tp>>,\n \t\t  std::forward<_Args>(__args)...)\n-\t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n+\t{ }\n \n       template<typename _Tp, typename _Up, typename... _Args,\n \t       typename = enable_if_t<__exactly_once<_Tp>\n@@ -1265,7 +1263,7 @@ namespace __variant\n \t\t_Args&&... __args)\n \t: variant(in_place_index<__index_of<_Tp>>, __il,\n \t\t  std::forward<_Args>(__args)...)\n-\t{ __glibcxx_assert(holds_alternative<_Tp>(*this)); }\n+\t{ }\n \n       template<size_t _Np, typename... _Args,\n \t       typename = enable_if_t<\n@@ -1274,7 +1272,7 @@ namespace __variant\n \tvariant(in_place_index_t<_Np>, _Args&&... __args)\n \t: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n-\t{ __glibcxx_assert(index() == _Np); }\n+\t{ }\n \n       template<size_t _Np, typename _Up, typename... _Args,\n \t       typename = enable_if_t<is_constructible_v<__to_type<_Np>,\n@@ -1284,7 +1282,7 @@ namespace __variant\n \t\t_Args&&... __args)\n \t: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),\n \t_Default_ctor_enabler(_Enable_default_constructor_tag{})\n-\t{ __glibcxx_assert(index() == _Np); }\n+\t{ }\n \n       template<typename _Tp>\n \tenable_if_t<__exactly_once<__accepted_type<_Tp&&>>\n@@ -1300,7 +1298,6 @@ namespace __variant\n \t    std::get<__index>(*this) = std::forward<_Tp>(__rhs);\n \t  else\n \t    this->emplace<__index>(std::forward<_Tp>(__rhs));\n-\t  __glibcxx_assert(holds_alternative<__accepted_type<_Tp&&>>(*this));\n \t  return *this;\n \t}\n \n@@ -1309,10 +1306,8 @@ namespace __variant\n \t\t    _Tp&>\n \templace(_Args&&... __args)\n \t{\n-\t  auto& ret =\n-\t    this->emplace<__index_of<_Tp>>(std::forward<_Args>(__args)...);\n-\t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n-\t  return ret;\n+\t  constexpr size_t __index = __index_of<_Tp>;\n+\t  return this->emplace<__index>(std::forward<_Args>(__args)...);\n \t}\n \n       template<typename _Tp, typename _Up, typename... _Args>\n@@ -1321,11 +1316,8 @@ namespace __variant\n \t\t    _Tp&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \t{\n-\t  auto& ret =\n-\t    this->emplace<__index_of<_Tp>>(__il,\n-\t\t\t\t\t   std::forward<_Args>(__args)...);\n-\t  __glibcxx_assert(holds_alternative<_Tp>(*this));\n-\t  return ret;\n+\t  constexpr size_t __index = __index_of<_Tp>;\n+\t  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);\n \t}\n \n       template<size_t _Np, typename... _Args>\n@@ -1363,7 +1355,6 @@ namespace __variant\n \t      this->_M_index = variant_npos;\n \t      __throw_exception_again;\n \t    }\n-\t  __glibcxx_assert(index() == _Np);\n \t  return std::get<_Np>(*this);\n \t}\n \n@@ -1399,7 +1390,6 @@ namespace __variant\n \t      this->_M_index = variant_npos;\n \t      __throw_exception_again;\n \t    }\n-\t  __glibcxx_assert(index() == _Np);\n \t  return std::get<_Np>(*this);\n \t}\n "}]}