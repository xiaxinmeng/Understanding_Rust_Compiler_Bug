{"sha": "f20f261304993444741e0f0a14d3147e591bc660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIwZjI2MTMwNDk5MzQ0NDc0MWUwZjBhMTRkMzE0N2U1OTFiYzY2MA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-11-06T19:46:39Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-11-06T19:46:39Z"}, "message": "tree-pass.h (make_pass_live_range_shrinkage): New external.\n\n2013-11-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* tree-pass.h (make_pass_live_range_shrinkage): New external.\n\t* timevar.def (TV_LIVE_RANGE_SHRINKAGE): New.\n\t* sched-rgn.c (gate_handle_live_range_shrinkage): New.\n\t(rest_of_handle_live_range_shrinkage): Ditto\n\t(class pass_live_range_shrinkage): Ditto.\n\t(pass_data_live_range_shrinkage): Ditto.\n\t(make_pass_live_range_shrinkage): Ditto.\n\t* sched-int.h (initialize_live_range_shrinkage): New prototype.\n\t(finish_live_range_shrinkage): Ditto.\n\t* sched-deps.c (create_insn_reg_set): Make void return value.\n\t* passes.def: Add pass_live_range_shrinkage.\n\t* ira.c (update_equiv_regs): Don't move if\n\tflag_live_range_shrinkage.\n\t* haifa-sched.c (live_range_shrinkage_p): New.\n\t(initialize_live_range_shrinkage, finish_live_range_shrinkage):\n\tNew functions.\n\t(rank_for_schedule): Add code for pressure relief through live\n\trange shrinkage.\n\t(schedule_insn): Print more debug info.\n\t(sched_init): Setup SCHED_PRESSURE_WEIGHTED for pressure relief\n\tthrough live range shrinkage.\n\t* doc/invoke.texi (-flive-range-shrinkage): New.\n\t* common.opt (flive-range-shrinkage): New.\n\nFrom-SVN: r204465", "tree": {"sha": "425edab80d5fb80caee33b5c43297c3c6bc2c90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/425edab80d5fb80caee33b5c43297c3c6bc2c90b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f20f261304993444741e0f0a14d3147e591bc660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20f261304993444741e0f0a14d3147e591bc660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f20f261304993444741e0f0a14d3147e591bc660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f20f261304993444741e0f0a14d3147e591bc660/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "992147ee6bc698a938feb38546ca25ce8b977651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992147ee6bc698a938feb38546ca25ce8b977651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992147ee6bc698a938feb38546ca25ce8b977651"}], "stats": {"total": 176, "additions": 160, "deletions": 16}, "files": [{"sha": "dfaf4e38d143989b15152469031ec8b065d9b913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -1,3 +1,29 @@\n+2013-11-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* tree-pass.h (make_pass_live_range_shrinkage): New external.\n+\t* timevar.def (TV_LIVE_RANGE_SHRINKAGE): New.\n+\t* sched-rgn.c (gate_handle_live_range_shrinkage): New.\n+\t(rest_of_handle_live_range_shrinkage): Ditto\n+\t(class pass_live_range_shrinkage): Ditto.\n+\t(pass_data_live_range_shrinkage): Ditto.\n+\t(make_pass_live_range_shrinkage): Ditto.\n+\t* sched-int.h (initialize_live_range_shrinkage): New prototype.\n+\t(finish_live_range_shrinkage): Ditto.\n+\t* sched-deps.c (create_insn_reg_set): Make void return value.\n+\t* passes.def: Add pass_live_range_shrinkage.\n+\t* ira.c (update_equiv_regs): Don't move if\n+\tflag_live_range_shrinkage.\n+\t* haifa-sched.c (live_range_shrinkage_p): New.\n+\t(initialize_live_range_shrinkage, finish_live_range_shrinkage):\n+\tNew functions.\n+\t(rank_for_schedule): Add code for pressure relief through live\n+\trange shrinkage.\n+\t(schedule_insn): Print more debug info.\n+\t(sched_init): Setup SCHED_PRESSURE_WEIGHTED for pressure relief\n+\tthrough live range shrinkage.\n+\t* doc/invoke.texi (-flive-range-shrinkage): New.\n+\t* common.opt (flive-range-shrinkage): New.\n+\n 2013-11-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/59021"}, {"sha": "7e1e3ded458b179041e603e77d657d3c0afcb47e", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -1738,6 +1738,10 @@ fregmove\n Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n+flive-range-shrinkage\n+Common Report Var(flag_live_range_shrinkage) Init(0) Optimization\n+Relief of register pressure through live range shrinkage\n+\n frename-registers\n Common Report Var(flag_rename_registers) Init(2) Optimization\n Perform a register renaming optimization pass"}, {"sha": "00634457f120f7de226310dea8e54f29ea945e0a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -377,7 +377,7 @@ Objective-C and Objective-C++ Dialects}.\n -fira-region=@var{region} -fira-hoist-pressure @gol\n -fira-loop-pressure -fno-ira-share-save-slots @gol\n -fno-ira-share-spill-slots -fira-verbose=@var{n} @gol\n--fivopts -fkeep-inline-functions -fkeep-static-consts @gol\n+-fivopts -fkeep-inline-functions -fkeep-static-consts -flive-range-shrinkage @gol\n -floop-block -floop-interchange -floop-strip-mine -floop-nest-optimize @gol\n -floop-parallelize-all -flto -flto-compression-level @gol\n -flto-partition=@var{alg} -flto-report -flto-report-wpa -fmerge-all-constants @gol\n@@ -7268,6 +7268,12 @@ registers after writing to their lower 32-bit half.\n \n Enabled for x86 at levels @option{-O2}, @option{-O3}.\n \n+@item -flive-range-shrinkage\n+@opindex flive-range-shrinkage\n+Attempt to decrease register pressure through register live range\n+shrinkage.  This is helpful for fast processors with small or moderate\n+size register sets.\n+\n @item -fira-algorithm=@var{algorithm}\n Use the specified coloring algorithm for the integrated register\n allocator.  The @var{algorithm} argument can be @samp{priority}, which"}, {"sha": "728d51b7308eec450ab058fd9e4574b0d10e9d6c", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 44, "deletions": 7, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -150,6 +150,24 @@ along with GCC; see the file COPYING3.  If not see\n \n #ifdef INSN_SCHEDULING\n \n+/* True if we do register pressure relief through live-range\n+   shrinkage.  */\n+static bool live_range_shrinkage_p;\n+\n+/* Switch on live range shrinkage.  */\n+void\n+initialize_live_range_shrinkage (void)\n+{\n+  live_range_shrinkage_p = true;\n+}\n+\n+/* Switch off live range shrinkage.  */\n+void\n+finish_live_range_shrinkage (void)\n+{\n+  live_range_shrinkage_p = false;\n+}\n+\n /* issue_rate is the number of insns that can be scheduled in the same\n    machine cycle.  It can be defined in the config/mach/mach.h file,\n    otherwise we set it to 1.  */\n@@ -2519,7 +2537,7 @@ rank_for_schedule (const void *x, const void *y)\n   rtx tmp = *(const rtx *) y;\n   rtx tmp2 = *(const rtx *) x;\n   int tmp_class, tmp2_class;\n-  int val, priority_val, info_val;\n+  int val, priority_val, info_val, diff;\n \n   if (MAY_HAVE_DEBUG_INSNS)\n     {\n@@ -2532,6 +2550,22 @@ rank_for_schedule (const void *x, const void *y)\n \treturn INSN_LUID (tmp) - INSN_LUID (tmp2);\n     }\n \n+  if (live_range_shrinkage_p)\n+    {\n+      /* Don't use SCHED_PRESSURE_MODEL -- it results in much worse\n+\t code.  */\n+      gcc_assert (sched_pressure == SCHED_PRESSURE_WEIGHTED);\n+      if ((INSN_REG_PRESSURE_EXCESS_COST_CHANGE (tmp) < 0\n+\t   || INSN_REG_PRESSURE_EXCESS_COST_CHANGE (tmp2) < 0)\n+\t  && (diff = (INSN_REG_PRESSURE_EXCESS_COST_CHANGE (tmp)\n+\t\t      - INSN_REG_PRESSURE_EXCESS_COST_CHANGE (tmp2))) != 0)\n+\treturn diff;\n+      /* Sort by INSN_LUID (original insn order), so that we make the\n+\t sort stable.  This minimizes instruction movement, thus\n+\t minimizing sched's effect on debugging and cross-jumping.  */\n+      return INSN_LUID (tmp) - INSN_LUID (tmp2);\n+    }\n+\n   /* The insn in a schedule group should be issued the first.  */\n   if (flag_sched_group_heuristic &&\n       SCHED_GROUP_P (tmp) != SCHED_GROUP_P (tmp2))\n@@ -2542,8 +2576,6 @@ rank_for_schedule (const void *x, const void *y)\n \n   if (sched_pressure != SCHED_PRESSURE_NONE)\n     {\n-      int diff;\n-\n       /* Prefer insn whose scheduling results in the smallest register\n \t pressure excess.  */\n       if ((diff = (INSN_REG_PRESSURE_EXCESS_COST_CHANGE (tmp)\n@@ -3731,7 +3763,10 @@ schedule_insn (rtx insn)\n \t{\n \t  fputc (':', sched_dump);\n \t  for (i = 0; i < ira_pressure_classes_num; i++)\n-\t    fprintf (sched_dump, \"%s%+d(%d)\",\n+\t    fprintf (sched_dump, \"%s%s%+d(%d)\",\n+\t\t     scheduled_insns.length () > 1\n+\t\t     && INSN_LUID (insn)\n+\t\t     < INSN_LUID (scheduled_insns[scheduled_insns.length () - 2]) ? \"@\" : \"\",\n \t\t     reg_class_names[ira_pressure_classes[i]],\n \t\t     pressure_info[i].set_increase, pressure_info[i].change);\n \t}\n@@ -6578,9 +6613,11 @@ sched_init (void)\n   if (targetm.sched.dispatch (NULL_RTX, IS_DISPATCH_ON))\n     targetm.sched.dispatch_do (NULL_RTX, DISPATCH_INIT);\n \n-  if (flag_sched_pressure\n-      && !reload_completed\n-      && common_sched_info->sched_pass_id == SCHED_RGN_PASS)\n+  if (live_range_shrinkage_p)\n+    sched_pressure = SCHED_PRESSURE_WEIGHTED;\n+  else if (flag_sched_pressure\n+\t   && !reload_completed\n+\t   && common_sched_info->sched_pass_id == SCHED_RGN_PASS)\n     sched_pressure = ((enum sched_pressure_algorithm)\n \t\t      PARAM_VALUE (PARAM_SCHED_PRESSURE_ALGORITHM));\n   else"}, {"sha": "10e71d97db3a71900113450a6567e27a7b717e0c", "filename": "gcc/ira.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -3794,11 +3794,12 @@ update_equiv_regs (void)\n \n \t\t  if (! reg_equiv[regno].replace\n \t\t      || reg_equiv[regno].loop_depth < loop_depth\n-\t\t      /* There is no sense to move insns if we did\n-\t\t\t register pressure-sensitive scheduling was\n-\t\t\t done because it will not improve allocation\n-\t\t\t but worsen insn schedule with a big\n-\t\t\t probability.  */\n+\t\t      /* There is no sense to move insns if live range\n+\t\t\t shrinkage or register pressure-sensitive\n+\t\t\t scheduling were done because it will not\n+\t\t\t improve allocation but worsen insn schedule\n+\t\t\t with a big probability.  */\n+\t\t      || flag_live_range_shrinkage\n \t\t      || (flag_sched_pressure && flag_schedule_insns))\n \t\t    continue;\n "}, {"sha": "8d8dd8003159a896aceaa2d37747740fd37de017", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -366,6 +366,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_mode_switching);\n       NEXT_PASS (pass_match_asm_constraints);\n       NEXT_PASS (pass_sms);\n+      NEXT_PASS (pass_live_range_shrinkage);\n       NEXT_PASS (pass_sched);\n       NEXT_PASS (pass_ira);\n       NEXT_PASS (pass_reload);"}, {"sha": "8496014a72b8b4f8b93b16d2a6aeab4df73aa622", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -1938,8 +1938,8 @@ create_insn_reg_use (int regno, rtx insn)\n   return use;\n }\n \n-/* Allocate and return reg_set_data structure for REGNO and INSN.  */\n-static struct reg_set_data *\n+/* Allocate reg_set_data structure for REGNO and INSN.  */\n+static void\n create_insn_reg_set (int regno, rtx insn)\n {\n   struct reg_set_data *set;\n@@ -1949,7 +1949,6 @@ create_insn_reg_set (int regno, rtx insn)\n   set->insn = insn;\n   set->next_insn_set = INSN_REG_SET_LIST (insn);\n   INSN_REG_SET_LIST (insn) = set;\n-  return set;\n }\n \n /* Set up insn register uses for INSN and dependency context DEPS.  */"}, {"sha": "33112eef0759ed57a3b68c0415e5f8433e9e68e0", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -1333,6 +1333,8 @@ extern void debug_ds (ds_t);\n \n \n /* Functions in haifa-sched.c.  */\n+extern void initialize_live_range_shrinkage (void);\n+extern void finish_live_range_shrinkage (void);\n extern void sched_init_region_reg_pressure_info (void);\n extern int haifa_classify_insn (const_rtx);\n extern void get_ebb_head_tail (basic_block, basic_block, rtx *, rtx *);"}, {"sha": "b2a7dbd4a944b5f4928e85efcf441ea3a329b7cf", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -3564,6 +3564,33 @@ advance_target_bb (basic_block bb, rtx insn)\n \n #endif\n \f\n+static bool\n+gate_handle_live_range_shrinkage (void)\n+{\n+#ifdef INSN_SCHEDULING\n+  return flag_live_range_shrinkage;\n+#else\n+  return 0;\n+#endif\n+}\n+\n+/* Run instruction scheduler.  */\n+static unsigned int\n+rest_of_handle_live_range_shrinkage (void)\n+{\n+#ifdef INSN_SCHEDULING\n+  int saved;\n+\n+  initialize_live_range_shrinkage ();\n+  saved = flag_schedule_interblock;\n+  flag_schedule_interblock = false;\n+  schedule_insns ();\n+  flag_schedule_interblock = saved;\n+  finish_live_range_shrinkage ();\n+#endif\n+  return 0;\n+}\n+\n static bool\n gate_handle_sched (void)\n {\n@@ -3622,6 +3649,45 @@ rest_of_handle_sched2 (void)\n \n namespace {\n \n+const pass_data pass_data_live_range_shrinkage =\n+{\n+  RTL_PASS, /* type */\n+  \"lr_shrinkage\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  true, /* has_gate */\n+  true, /* has_execute */\n+  TV_LIVE_RANGE_SHRINKAGE, /* tv_id */\n+  0, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  ( TODO_df_finish | TODO_verify_rtl_sharing\n+    | TODO_verify_flow ), /* todo_flags_finish */\n+};\n+\n+class pass_live_range_shrinkage : public rtl_opt_pass\n+{\n+public:\n+  pass_live_range_shrinkage(gcc::context *ctxt)\n+    : rtl_opt_pass(pass_data_live_range_shrinkage, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate () { return gate_handle_live_range_shrinkage (); }\n+  unsigned int execute () { return rest_of_handle_live_range_shrinkage (); }\n+\n+}; // class pass_live_range_shrinkage\n+\n+} // anon namespace\n+\n+rtl_opt_pass *\n+make_pass_live_range_shrinkage (gcc::context *ctxt)\n+{\n+  return new pass_live_range_shrinkage (ctxt);\n+}\n+\n+namespace {\n+\n const pass_data pass_data_sched =\n {\n   RTL_PASS, /* type */"}, {"sha": "897f66dd82e2f26720fd83e1f51fb7393fcfd059", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -224,6 +224,7 @@ DEFTIMEVAR (TV_COMBINE               , \"combiner\")\n DEFTIMEVAR (TV_IFCVT\t\t     , \"if-conversion\")\n DEFTIMEVAR (TV_MODE_SWITCH           , \"mode switching\")\n DEFTIMEVAR (TV_SMS\t\t     , \"sms modulo scheduling\")\n+DEFTIMEVAR (TV_LIVE_RANGE_SHRINKAGE  , \"live range shrinkage\")\n DEFTIMEVAR (TV_SCHED                 , \"scheduling\")\n DEFTIMEVAR (TV_IRA\t\t     , \"integrated RA\")\n DEFTIMEVAR (TV_LRA\t\t     , \"LRA non-specific\")"}, {"sha": "9efee1e7e0067d2eabef8c8f244552ab1528da63", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f20f261304993444741e0f0a14d3147e591bc660/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=f20f261304993444741e0f0a14d3147e591bc660", "patch": "@@ -531,6 +531,7 @@ extern rtl_opt_pass *make_pass_lower_subreg2 (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_mode_switching (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_sms (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_sched (gcc::context *ctxt);\n+extern rtl_opt_pass *make_pass_live_range_shrinkage (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_ira (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_reload (gcc::context *ctxt);\n extern rtl_opt_pass *make_pass_clean_state (gcc::context *ctxt);"}]}