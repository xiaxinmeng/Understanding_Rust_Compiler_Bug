{"sha": "28b69d5df050c5032f5df35281eb9491b5669224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiNjlkNWRmMDUwYzUwMzJmNWRmMzUyODFlYjk0OTFiNTY2OTIyNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-06-13T07:31:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-06-13T07:31:39Z"}, "message": "cmath: Tweak includes.\n\n2007-06-13  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/c_global/cmath: Tweak includes.\n\t* include/std/memory: Likewise.\n\t* include/std/complex: Likewise.\n\t* include/tr1/memory: Likewise.\n\t* include/tr1/complex: Likewise.\n\t* include/tr1/cmath: Likewise; do not wrap special functions\n\tin #ifndef __GXX_EXPERIMENTAL_CXX0X__.\n\nFrom-SVN: r125671", "tree": {"sha": "c6f6d7fefacdc21686e4a16956a009faf4a0288c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6f6d7fefacdc21686e4a16956a009faf4a0288c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28b69d5df050c5032f5df35281eb9491b5669224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b69d5df050c5032f5df35281eb9491b5669224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b69d5df050c5032f5df35281eb9491b5669224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b69d5df050c5032f5df35281eb9491b5669224/comments", "author": null, "committer": null, "parents": [{"sha": "0d52bcc19e63766de745d046844e8f2c12c89536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d52bcc19e63766de745d046844e8f2c12c89536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d52bcc19e63766de745d046844e8f2c12c89536"}], "stats": {"total": 68, "additions": 11, "deletions": 57}, "files": [{"sha": "ec10c586d689c191375954cec196911219e0b977", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -1,3 +1,13 @@\n+2007-06-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/c_global/cmath: Tweak includes.\n+\t* include/std/memory: Likewise.\n+\t* include/std/complex: Likewise.\n+\t* include/tr1/memory: Likewise.\n+\t* include/tr1/complex: Likewise.\n+\t* include/tr1/cmath: Likewise; do not wrap special functions\n+\tin #ifndef __GXX_EXPERIMENTAL_CXX0X__.\n+\n 2007-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/testsuite_performance.h: Add cstring include for"}, {"sha": "e37f4e8fb0f029aad756050cb3443407e73334a4", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -612,7 +612,6 @@ _GLIBCXX_END_NAMESPACE\n #  if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #    error C++0x header cannot be included from TR1 header\n #  endif\n-#  include <type_traits>\n #  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #    include <tr1_impl/cmath>\n #  else"}, {"sha": "2ed73f0a034763305826903cd62098738be8bdbf", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -1539,7 +1539,6 @@ _GLIBCXX_END_NAMESPACE\n #  if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #    error C++0x header cannot be included from TR1 header\n #  endif\n-#  include <type_traits>\n #  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #    include <tr1_impl/complex>\n #  else"}, {"sha": "a099b3ed177941cc77b10ab78d09f05003e4d0af", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -64,7 +64,6 @@\n #    error C++0x header cannot be included from TR1 header\n #  endif\n #  include <exception>        \t  // std::exception\n-#  include <new>              \t  // std::bad_alloc\n #  include <typeinfo>         \t  // std::type_info in get_deleter\n #  include <bits/stl_algobase.h>  // std::swap\n #  include <iosfwd>           \t  // std::basic_ostream"}, {"sha": "a7629d28bb3efa79ee76bde34edbc10dd1bafca5", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -41,8 +41,6 @@\n #endif\n \n #include <cmath>\n-#include <ext/type_traits.h>\n-#include <tr1/type_traits>\n \n #if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #  include <tr1_impl/cmath>\n@@ -63,10 +61,10 @@\n  * A collection of advanced mathematical special functions.\n  * @{\n  */\n-#ifndef __GXX_EXPERIMENTAL_CXX0X__\n #include <bits/stl_algobase.h>\n #include <limits>\n \n+#include <tr1/type_traits>\n #include <tr1/gamma.tcc>\n #include <tr1/bessel_function.tcc>\n #include <tr1/beta_function.tcc>\n@@ -85,7 +83,6 @@ namespace std\n namespace tr1\n {\n   //  5.2.1.1  Associated Laguerre polynomials.\n-\n   inline float\n   assoc_laguerref(unsigned int __n, unsigned int __m, float __x)\n   { return __detail::__assoc_laguerre<float>(__n, __m, __x); }\n@@ -104,9 +101,7 @@ namespace tr1\n       return __detail::__assoc_laguerre<__type>(__n, __m, __x);\n     }\n \n-\n   //  5.2.1.2  Associated Legendre functions.\n-\n   inline float\n   assoc_legendref(unsigned int __l, unsigned int __m, float __x)\n   { return __detail::__assoc_legendre_p<float>(__l, __m, __x); }\n@@ -123,9 +118,7 @@ namespace tr1\n       return __detail::__assoc_legendre_p<__type>(__l, __m, __x);\n     }\n \n-\n   //  5.2.1.3  Beta functions.\n-\n   inline float\n   betaf(float __x, float __y)\n   { return __detail::__beta<float>(__x, __y); }\n@@ -142,9 +135,7 @@ namespace tr1\n       return __detail::__beta<__type>(__x, __y);\n     }\n \n-\n   //  5.2.1.4  Complete elliptic interals of the first kind.\n-\n   inline float\n   comp_ellint_1f(float __k)\n   { return __detail::__comp_ellint_1<float>(__k); }\n@@ -161,9 +152,7 @@ namespace tr1\n       return __detail::__comp_ellint_1<__type>(__k);\n     }\n \n-\n   //  5.2.1.5  Complete elliptic interals of the second kind.\n-\n   inline float\n   comp_ellint_2f(float __k)\n   { return __detail::__comp_ellint_2<float>(__k); }\n@@ -180,9 +169,7 @@ namespace tr1\n       return __detail::__comp_ellint_2<__type>(__k);\n     }\n \n-\n   //  5.2.1.6  Complete elliptic interals of the third kind.\n-\n   inline float\n   comp_ellint_3f(float __k, float __nu)\n   { return __detail::__comp_ellint_3<float>(__k, __nu); }\n@@ -199,9 +186,7 @@ namespace tr1\n       return __detail::__comp_ellint_3<__type>(__k, __nu);\n     }\n \n-\n   //  5.2.1.7  Confluent hypergeometric functions.\n-\n   inline float\n   conf_hypergf(float __a, float __c, float __x)\n   { return __detail::__conf_hyperg<float>(__a, __c, __x); }\n@@ -218,9 +203,7 @@ namespace tr1\n       return __detail::__conf_hyperg<__type>(__a, __c, __x);\n     }\n \n-\n   //  5.2.1.8  Regular modified cylindrical Bessel functions.\n-\n   inline float\n   cyl_bessel_if(float __nu, float __x)\n   { return __detail::__cyl_bessel_i<float>(__nu, __x); }\n@@ -237,9 +220,7 @@ namespace tr1\n       return __detail::__cyl_bessel_i<__type>(__nu, __x);\n     }\n \n-\n   //  5.2.1.9  Cylindrical Bessel functions (of the first kind).\n-\n   inline float\n   cyl_bessel_jf(float __nu, float __x)\n   { return __detail::__cyl_bessel_j<float>(__nu, __x); }\n@@ -256,9 +237,7 @@ namespace tr1\n       return __detail::__cyl_bessel_j<__type>(__nu, __x);\n     }\n \n-\n   //  5.2.1.10  Irregular modified cylindrical Bessel functions.\n-\n   inline float\n   cyl_bessel_kf(float __nu, float __x)\n   { return __detail::__cyl_bessel_k<float>(__nu, __x); }\n@@ -275,9 +254,7 @@ namespace tr1\n       return __detail::__cyl_bessel_k<__type>(__nu, __x);\n     }\n \n-\n   //  5.2.1.11  Cylindrical Neumann functions.\n-\n   inline float\n   cyl_neumannf(float __nu, float __x)\n   { return __detail::__cyl_neumann_n<float>(__nu, __x); }\n@@ -294,9 +271,7 @@ namespace tr1\n       return __detail::__cyl_neumann_n<__type>(__nu, __x);\n     }\n \n-\n   //  5.2.1.12  Incomplete elliptic interals of the first kind.\n-\n   inline float\n   ellint_1f(float __k, float __phi)\n   { return __detail::__ellint_1<float>(__k, __phi); }\n@@ -313,9 +288,7 @@ namespace tr1\n       return __detail::__ellint_1<__type>(__k, __phi);\n     }\n \n-\n   //  5.2.1.13  Incomplete elliptic interals of the second kind.\n-\n   inline float\n   ellint_2f(float __k, float __phi)\n   { return __detail::__ellint_2<float>(__k, __phi); }\n@@ -332,9 +305,7 @@ namespace tr1\n       return __detail::__ellint_2<__type>(__k, __phi);\n     }\n \n-\n   //  5.2.1.14  Incomplete elliptic interals of the third kind.\n-\n   inline float\n   ellint_3f(float __k, float __nu, float __phi)\n   { return __detail::__ellint_3<float>(__k, __nu, __phi); }\n@@ -351,9 +322,7 @@ namespace tr1\n       return __detail::__ellint_3<__type>(__k, __nu, __phi);\n     }\n \n-\n   //  5.2.1.15  Exponential integrals.\n-\n   inline float\n   expintf(float __x)\n   { return __detail::__expint<float>(__x); }\n@@ -370,9 +339,7 @@ namespace tr1\n       return __detail::__expint<__type>(__x);\n     }\n \n-\n   //  5.2.1.16  Hermite polynomials.\n-\n   inline float\n   hermitef(unsigned int __n, float __x)\n   { return __detail::__poly_hermite<float>(__n, __x); }\n@@ -389,9 +356,7 @@ namespace tr1\n       return __detail::__poly_hermite<__type>(__n, __x);\n     }\n \n-\n   //  5.2.1.17  Hypergeometric functions.\n-\n   inline float\n   hypergf(float __a, float __b, float __c, float __x)\n   { return __detail::__hyperg<float>(__a, __b, __c, __x); }\n@@ -408,9 +373,7 @@ namespace tr1\n       return __detail::__hyperg<__type>(__a, __b, __c, __x);\n     }\n \n-\n   //  5.2.1.18  Laguerre polynomials.\n-\n   inline float\n   laguerref(unsigned int __n, float __x)\n   { return __detail::__laguerre<float>(__n, __x); }\n@@ -427,9 +390,7 @@ namespace tr1\n       return __detail::__laguerre<__type>(__n, __x);\n     }\n \n-\n   //  5.2.1.19  Legendre polynomials.\n-\n   inline float\n   legendref(unsigned int __n, float __x)\n   { return __detail::__poly_legendre_p<float>(__n, __x); }\n@@ -446,9 +407,7 @@ namespace tr1\n       return __detail::__poly_legendre_p<__type>(__n, __x);\n     }\n \n-\n   //  5.2.1.20  Riemann zeta function.\n-\n   inline float\n   riemann_zetaf(float __x)\n   { return __detail::__riemann_zeta<float>(__x); }\n@@ -465,9 +424,7 @@ namespace tr1\n       return __detail::__riemann_zeta<__type>(__x);\n     }\n \n-\n   //  5.2.1.21  Spherical Bessel functions.\n-\n   inline float\n   sph_besself(unsigned int __n, float __x)\n   { return __detail::__sph_bessel<float>(__n, __x); }\n@@ -484,9 +441,7 @@ namespace tr1\n       return __detail::__sph_bessel<__type>(__n, __x);\n     }\n \n-\n   //  5.2.1.22  Spherical associated Legendre functions.\n-\n   inline float\n   sph_legendref(unsigned int __l, unsigned int __m, float __theta)\n   { return __detail::__sph_legendre<float>(__l, __m, __theta); }\n@@ -503,9 +458,7 @@ namespace tr1\n       return __detail::__sph_legendre<__type>(__l, __m, __theta);\n     }\n \n-\n   //  5.2.1.23  Spherical Neumann functions.\n-\n   inline float\n   sph_neumannf(unsigned int __n, float __x)\n   { return __detail::__sph_neumann<float>(__n, __x); }\n@@ -523,10 +476,7 @@ namespace tr1\n     }\n \n   /* @} */ // group tr1_math_spec_func\n-\n }\n }\n \n-#endif // __GXX_EXPERIMENTAL_CXX0X__\n-\n #endif // _GLIBCXX_TR1_CMATH"}, {"sha": "a0a849116989ae9b875281500e2008e69855b9f4", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -41,8 +41,6 @@\n #endif\n \n #include <complex>\n-#include <ext/type_traits.h>\n-#include <tr1/type_traits>\n \n #if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #  include <tr1_impl/complex>"}, {"sha": "3cf92f46b1d4beda570bcc7c48c1ce358c71a456", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b69d5df050c5032f5df35281eb9491b5669224/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=28b69d5df050c5032f5df35281eb9491b5669224", "patch": "@@ -43,7 +43,6 @@\n \n #include <memory>\n #include <exception>        \t// std::exception\n-#include <new>              \t// std::bad_alloc\n #include <typeinfo>         \t// std::type_info in get_deleter\n #include <bits/stl_algobase.h>  // std::swap\n #include <iosfwd>           \t// std::basic_ostream"}]}