{"sha": "ef9a53feae5701953da9161afef2aea0329ec8b2", "node_id": "C_kwDOANBUbNoAKGVmOWE1M2ZlYWU1NzAxOTUzZGE5MTYxYWZlZjJhZWEwMzI5ZWM4YjI", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-03-31T08:10:02Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-04-28T18:46:49Z"}, "message": "gcov: Record EOF error during read\n\nUse an enum for file error codes.\n\ngcc/\n\n\t* gcov-io.cc (gcov_file_error): New enum.\n\t(gcov_var): Use gcov_file_error enum for the error member.\n\t(gcov_open): Use GCOV_FILE_NO_ERROR.\n\t(gcov_close): Use GCOV_FILE_WRITE_ERROR.\n\t(gcov_write): Likewise.\n\t(gcov_write_unsigned): Likewise.\n\t(gcov_write_string): Likewise.\n\t(gcov_read_bytes): Set error code if EOF is reached.\n\t(gcov_read_counter): Use GCOV_FILE_COUNTER_OVERFLOW.", "tree": {"sha": "ce3989d5caa5088c82df6fbfdec4aa0135ef43f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce3989d5caa5088c82df6fbfdec4aa0135ef43f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef9a53feae5701953da9161afef2aea0329ec8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9a53feae5701953da9161afef2aea0329ec8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9a53feae5701953da9161afef2aea0329ec8b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9a53feae5701953da9161afef2aea0329ec8b2/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff8d194cbc6354d3c52d5362d22cc1f56b73ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff8d194cbc6354d3c52d5362d22cc1f56b73ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff8d194cbc6354d3c52d5362d22cc1f56b73ef7"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "fdf745e6ce11566726903cde172031d6e0558493", "filename": "gcc/gcov-io.cc", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef9a53feae5701953da9161afef2aea0329ec8b2/gcc%2Fgcov-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef9a53feae5701953da9161afef2aea0329ec8b2/gcc%2Fgcov-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.cc?ref=ef9a53feae5701953da9161afef2aea0329ec8b2", "patch": "@@ -29,10 +29,20 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n static gcov_unsigned_t *gcov_read_words (void *buffer, unsigned);\n \n+/* Indicates the last gcov file access error or that no error occurred\n+   so far.  */\n+enum gcov_file_error\n+{\n+  GCOV_FILE_COUNTER_OVERFLOW = -1,\n+  GCOV_FILE_NO_ERROR = 0,\n+  GCOV_FILE_WRITE_ERROR = 1,\n+  GCOV_FILE_EOF = 2\n+};\n+\n struct gcov_var\n {\n   FILE *file;\n-  int error;\t\t\t/* < 0 overflow, > 0 disk error.  */\n+  enum gcov_file_error error;\n   int mode;\t\t\t/* < 0 writing, > 0 reading.  */\n   int endian;\t\t\t/* Swap endianness.  */\n #ifdef IN_GCOV_TOOL\n@@ -113,7 +123,7 @@ gcov_open (const char *name, int mode)\n #endif\n \n   gcov_nonruntime_assert (!gcov_var.file);\n-  gcov_var.error = 0;\n+  gcov_var.error = GCOV_FILE_NO_ERROR;\n #if !IN_LIBGCOV || defined (IN_GCOV_TOOL)\n   gcov_var.endian = 0;\n #endif\n@@ -217,7 +227,7 @@ gcov_close (void)\n   if (gcov_var.file)\n     {\n       if (fclose (gcov_var.file))\n-\tgcov_var.error = 1;\n+\tgcov_var.error = GCOV_FILE_WRITE_ERROR;\n \n       gcov_var.file = 0;\n     }\n@@ -253,7 +263,7 @@ gcov_write (const void *data, unsigned length)\n {\n   gcov_unsigned_t r = fwrite (data, length, 1, gcov_var.file);\n   if (r != 1)\n-    gcov_var.error = 1;\n+    gcov_var.error = GCOV_FILE_WRITE_ERROR;\n }\n \n /* Write unsigned VALUE to coverage file.  */\n@@ -263,7 +273,7 @@ gcov_write_unsigned (gcov_unsigned_t value)\n {\n   gcov_unsigned_t r = fwrite (&value, sizeof (value), 1, gcov_var.file);\n   if (r != 1)\n-    gcov_var.error = 1;\n+    gcov_var.error = GCOV_FILE_WRITE_ERROR;\n }\n \n #if !IN_LIBGCOV\n@@ -283,7 +293,7 @@ gcov_write_string (const char *string)\n     {\n       gcov_unsigned_t r = fwrite (string, length, 1, gcov_var.file);\n       if (r != 1)\n-\tgcov_var.error = 1;\n+\tgcov_var.error = GCOV_FILE_WRITE_ERROR;\n     }\n }\n #endif\n@@ -385,7 +395,11 @@ gcov_read_bytes (void *buffer, unsigned count)\n \n   unsigned read = fread (buffer, count, 1, gcov_var.file);\n   if (read != 1)\n-    return NULL;\n+    {\n+      if (feof (gcov_var.file))\n+\tgcov_var.error = GCOV_FILE_EOF;\n+      return NULL;\n+    }\n \n #ifdef IN_GCOV_TOOL\n   gcov_var.pos += count;\n@@ -434,7 +448,7 @@ gcov_read_counter (void)\n   if (sizeof (value) > sizeof (gcov_unsigned_t))\n     value |= ((gcov_type) from_file (buffer[1])) << 32;\n   else if (buffer[1])\n-    gcov_var.error = -1;\n+    gcov_var.error = GCOV_FILE_COUNTER_OVERFLOW;\n \n   return value;\n }"}]}