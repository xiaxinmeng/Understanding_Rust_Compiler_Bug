{"sha": "edadb734f66dad77a1479bf109ab4558e193d43a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhZGI3MzRmNjZkYWQ3N2ExNDc5YmYxMDlhYjQ1NThlMTkzZDQzYQ==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2013-01-10T17:57:34Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2013-01-10T17:57:34Z"}, "message": "re PR sanitizer/55488 (Implement cold calls in tsan run-time)\n\n2013-01-10  Wei Mi  <wmi@google.com>\n\nlibsanitizer/\n        PR sanitizer/55488\n        * tsan/Makefile.am: Add tsan_rtl_amd64.S.\n        * tsan/Makefile.in: Regenerated.\n        * tsan/tsan_rtl.h: Enable HACKY_CALL.\n\nFrom-SVN: r195092", "tree": {"sha": "f8b555133d0d28bbc72004746fcbb584d57cbed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8b555133d0d28bbc72004746fcbb584d57cbed0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edadb734f66dad77a1479bf109ab4558e193d43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edadb734f66dad77a1479bf109ab4558e193d43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edadb734f66dad77a1479bf109ab4558e193d43a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edadb734f66dad77a1479bf109ab4558e193d43a/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ddeb034f598997c85044aae0cdde729e27ed909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddeb034f598997c85044aae0cdde729e27ed909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ddeb034f598997c85044aae0cdde729e27ed909"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "49cbfdfd729e3c792d66ead3f9d957fbacb1b2c7", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=edadb734f66dad77a1479bf109ab4558e193d43a", "patch": "@@ -1,3 +1,10 @@\n+2013-01-10  Wei Mi  <wmi@google.com>\n+\n+\tPR sanitizer/55488\n+\t* tsan/Makefile.am: Add tsan_rtl_amd64.S.\n+\t* tsan/Makefile.in: Regenerated.\n+\t* tsan/tsan_rtl.h: Enable HACKY_CALL.\n+\n 2013-01-10  Kostya Serebryany  <kcc@google.com>\n \n \t* All source files: Merge from upstream r171973."}, {"sha": "04c6cdee931754ee8ef943298056f8a64c4df6d5", "filename": "libsanitizer/tsan/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2Ftsan%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2Ftsan%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2FMakefile.am?ref=edadb734f66dad77a1479bf109ab4558e193d43a", "patch": "@@ -34,7 +34,8 @@ tsan_files = \\\n \ttsan_fd.cc \\\n         tsan_interface_java.cc \\\n         tsan_mutexset.cc \\\n-        tsan_symbolize_addr2line_linux.cc\n+        tsan_symbolize_addr2line_linux.cc \\\n+        tsan_rtl_amd64.S\n \n libtsan_la_SOURCES = $(tsan_files) \n libtsan_la_LIBADD = $(top_builddir)/sanitizer_common/libsanitizer_common.la $(top_builddir)/interception/libinterception.la $(LIBSTDCXX_RAW_CXX_LDFLAGS)"}, {"sha": "8c38beb308cb8487b9c3114f7d32f75c2672efa2", "filename": "libsanitizer/tsan/Makefile.in", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2Ftsan%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2Ftsan%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2FMakefile.in?ref=edadb734f66dad77a1479bf109ab4558e193d43a", "patch": "@@ -88,7 +88,8 @@ am__objects_1 = tsan_clock.lo tsan_interface_atomic.lo tsan_mutex.lo \\\n \ttsan_md5.lo tsan_platform_mac.lo tsan_rtl_mutex.lo \\\n \ttsan_suppressions.lo tsan_interface_ann.lo tsan_mman.lo \\\n \ttsan_rtl_report.lo tsan_fd.lo tsan_interface_java.lo \\\n-\ttsan_mutexset.lo tsan_symbolize_addr2line_linux.lo\n+\ttsan_mutexset.lo tsan_symbolize_addr2line_linux.lo \\\n+\ttsan_rtl_amd64.lo\n am_libtsan_la_OBJECTS = $(am__objects_1)\n libtsan_la_OBJECTS = $(am_libtsan_la_OBJECTS)\n libtsan_la_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \\\n@@ -98,6 +99,11 @@ DEFAULT_INCLUDES = -I.@am__isrc@\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n am__depfiles_maybe = depfiles\n am__mv = mv -f\n+CPPASCOMPILE = $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)\n+LTCPPASCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS)\n CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -107,6 +113,15 @@ CXXLD = $(CXX)\n CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \\\n \t$(LDFLAGS) -o $@\n+COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n+\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+CCLD = $(CC)\n+LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n+\t$(LDFLAGS) -o $@\n SOURCES = $(libtsan_la_SOURCES)\n DIST_SOURCES = $(libtsan_la_SOURCES)\n ETAGS = etags\n@@ -277,7 +292,8 @@ tsan_files = \\\n \ttsan_fd.cc \\\n         tsan_interface_java.cc \\\n         tsan_mutexset.cc \\\n-        tsan_symbolize_addr2line_linux.cc\n+        tsan_symbolize_addr2line_linux.cc \\\n+        tsan_rtl_amd64.S\n \n libtsan_la_SOURCES = $(tsan_files) \n libtsan_la_LIBADD = $(top_builddir)/sanitizer_common/libsanitizer_common.la $(top_builddir)/interception/libinterception.la $(LIBSTDCXX_RAW_CXX_LDFLAGS)\n@@ -325,7 +341,7 @@ MAKEOVERRIDES =\n all: all-am\n \n .SUFFIXES:\n-.SUFFIXES: .cc .lo .o .obj\n+.SUFFIXES: .S .cc .lo .o .obj\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)\n \t@for dep in $?; do \\\n \t  case '$(am__configure_deps)' in \\\n@@ -412,6 +428,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_platform_mac.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_report.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_amd64.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_mutex.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_report.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_rtl_thread.Plo@am__quote@\n@@ -421,6 +438,27 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_symbolize_addr2line_linux.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tsan_sync.Plo@am__quote@\n \n+.S.o:\n+@am__fastdepCCAS_TRUE@\t$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n+@am__fastdepCCAS_TRUE@\t$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(CPPASCOMPILE) -c -o $@ $<\n+\n+.S.obj:\n+@am__fastdepCCAS_TRUE@\t$(CPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`\n+@am__fastdepCCAS_TRUE@\t$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tsource='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(CPPASCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.S.lo:\n+@am__fastdepCCAS_TRUE@\t$(LTCPPASCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n+@am__fastdepCCAS_TRUE@\t$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tsource='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@\tDEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCCAS_FALSE@\t$(LTCPPASCOMPILE) -c -o $@ $<\n+\n .cc.o:\n @am__fastdepCXX_TRUE@\t$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n @am__fastdepCXX_TRUE@\t$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po"}, {"sha": "bb2fe56bfe70d0899098e725744cf7586af2a4de", "filename": "libsanitizer/tsan/tsan_rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2Ftsan%2Ftsan_rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edadb734f66dad77a1479bf109ab4558e193d43a/libsanitizer%2Ftsan%2Ftsan_rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl.h?ref=edadb734f66dad77a1479bf109ab4558e193d43a", "patch": "@@ -580,7 +580,7 @@ void AfterSleep(ThreadState *thr, uptr pc);\n // The trick is that the call preserves all registers and the compiler\n // does not treat it as a call.\n // If it does not work for you, use normal call.\n-#if 0 && TSAN_DEBUG == 0\n+#if TSAN_DEBUG == 0\n // The caller may not create the stack frame for itself at all,\n // so we create a reserve stack frame for it (1024b must be enough).\n #define HACKY_CALL(f) \\"}]}