{"sha": "c37b0163fe5307ab508489926114de9cf7e240c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3YjAxNjNmZTUzMDdhYjUwODQ4OTkyNjExNGRlOWNmN2UyNDBjMQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-07-21T15:55:49Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-07-21T15:55:49Z"}, "message": "re PR libfortran/91030 (Poor performance of I/O -fconvert=big-endian)\n\n2019-07-21  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/91030\n\t* gfortran.texi (GFORTRAN_FORMATTED_BUFFER_SIZE): Document\n\t(GFORTRAN_UNFORMATTED_BUFFER_SIZE): Likewise.\n\n2019-07-21  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/91030\n\t* io/unix.c (BUFFER_SIZE): Delete.\n\t(BUFFER_FORMATTED_SIZE_DEFAULT): New variable.\n\t(BUFFER_UNFORMATTED_SIZE_DEFAULT): New variable.\n\t(unix_stream): Add buffer_size.\n\t(buf_read): Use s->buffer_size instead of BUFFER_SIZE.\n\t(buf_write): Likewise.\n\t(buf_init): Add argument unformatted.  Handle block sizes\n\tfor unformatted vs. formatted, using defaults if provided.\n\t(fd_to_stream): Add argument unformatted in call to buf_init.\n\t* libgfortran.h (options_t): Add buffer_size_formatted and\n\tbuffer_size_unformatted.\n\t* runtime/environ.c (variable_table): Add\n\tGFORTRAN_UNFORMATTED_BUFFER_SIZE and\n\tGFORTRAN_FORMATTED_BUFFER_SIZE.\n\nFrom-SVN: r273643", "tree": {"sha": "205699e71034f0bc8b7603c02225124f390c4073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/205699e71034f0bc8b7603c02225124f390c4073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c37b0163fe5307ab508489926114de9cf7e240c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b0163fe5307ab508489926114de9cf7e240c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37b0163fe5307ab508489926114de9cf7e240c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b0163fe5307ab508489926114de9cf7e240c1/comments", "author": null, "committer": null, "parents": [{"sha": "037455d49c2c19521bf60253c098d0e1e48d68fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037455d49c2c19521bf60253c098d0e1e48d68fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/037455d49c2c19521bf60253c098d0e1e48d68fa"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "c4c35adffeb4c2a0172df483d87f683d4053b454", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b0163fe5307ab508489926114de9cf7e240c1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b0163fe5307ab508489926114de9cf7e240c1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c37b0163fe5307ab508489926114de9cf7e240c1", "patch": "@@ -1,3 +1,9 @@\n+2019-07-21  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/91030\n+\t* gfortran.texi (GFORTRAN_FORMATTED_BUFFER_SIZE): Document\n+\t(GFORTRAN_UNFORMATTED_BUFFER_SIZE): Likewise.\n+\n 2019-07-16  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/90903"}, {"sha": "16be9e05b43282ff475db5444f16cb4d5ae40ffc", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b0163fe5307ab508489926114de9cf7e240c1/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b0163fe5307ab508489926114de9cf7e240c1/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=c37b0163fe5307ab508489926114de9cf7e240c1", "patch": "@@ -611,6 +611,8 @@ Malformed environment variables are silently ignored.\n * GFORTRAN_LIST_SEPARATOR::  Separator for list output\n * GFORTRAN_CONVERT_UNIT::  Set endianness for unformatted I/O\n * GFORTRAN_ERROR_BACKTRACE:: Show backtrace on run-time errors\n+* GFORTRAN_FORMATTED_BUFFER_SIZE:: Buffer size for formatted files.\n+* GFORTRAN_UNFORMATTED_BUFFER_SIZE:: Buffer size for unformatted files.\n @end menu\n \n @node TMPDIR\n@@ -782,6 +784,20 @@ the backtracing, set the variable to @samp{n}, @samp{N}, @samp{0}.\n Default is to print a backtrace unless the @option{-fno-backtrace}\n compile option was used.\n \n+@node GFORTRAN_FORMATTED_BUFFER_SIZE\n+@section @env{GFORTRAN_FORMATTED_BUFFER_SIZE}---Set buffer size for formatted I/O\n+\n+The @env{GFORTRAN_FORMATTED_BUFFER_SIZE} environment variable\n+specifies buffer size in bytes to be used for formatted output.\n+The default value is 8192.\n+\n+@node GFORTRAN_UNFORMATTED_BUFFER_SIZE\n+@section @env{GFORTRAN_UNFORMATTED_BUFFER_SIZE}---Set buffer size for unformatted I/O\n+\n+The @env{GFORTRAN_UNFORMATTED_BUFFER_SIZE} environment variable\n+specifies buffer size in bytes to be used for unformatted output.\n+The default value is 131072.\n+\n @c =====================================================================\n @c PART II: LANGUAGE REFERENCE\n @c ====================================================================="}, {"sha": "b4e3fe73282751e336018468444521414a3e6c23", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c37b0163fe5307ab508489926114de9cf7e240c1", "patch": "@@ -1,3 +1,21 @@\n+2019-07-21  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR libfortran/91030\n+\t* io/unix.c (BUFFER_SIZE): Delete.\n+\t(BUFFER_FORMATTED_SIZE_DEFAULT): New variable.\n+\t(BUFFER_UNFORMATTED_SIZE_DEFAULT): New variable.\n+\t(unix_stream): Add buffer_size.\n+\t(buf_read): Use s->buffer_size instead of BUFFER_SIZE.\n+\t(buf_write): Likewise.\n+\t(buf_init): Add argument unformatted.  Handle block sizes\n+\tfor unformatted vs. formatted, using defaults if provided.\n+\t(fd_to_stream): Add argument unformatted in call to buf_init.\n+\t* libgfortran.h (options_t): Add buffer_size_formatted and\n+\tbuffer_size_unformatted.\n+\t* runtime/environ.c (variable_table): Add\n+\tGFORTRAN_UNFORMATTED_BUFFER_SIZE and\n+\tGFORTRAN_FORMATTED_BUFFER_SIZE.\n+\n 2019-06-25  Kwok Cheung Yeung  <kcy@codesourcery.com>\n             Andrew Stubbs  <ams@codesourcery.com>\n "}, {"sha": "42792976c4b4c16acec661758ac9c09340227489", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=c37b0163fe5307ab508489926114de9cf7e240c1", "patch": "@@ -193,7 +193,8 @@ fallback_access (const char *path, int mode)\n \n /* Unix and internal stream I/O module */\n \n-static const int BUFFER_SIZE = 8192;\n+static const int FORMATTED_BUFFER_SIZE_DEFAULT = 8192;\n+static const int UNFORMATTED_BUFFER_SIZE_DEFAULT = 128*1024;\n \n typedef struct\n {\n@@ -205,6 +206,7 @@ typedef struct\n   gfc_offset file_length;\t/* Length of the file. */\n \n   char *buffer;                 /* Pointer to the buffer.  */\n+  ssize_t buffer_size;           /* Length of the buffer.  */\n   int fd;                       /* The POSIX file descriptor.  */\n \n   int active;\t\t\t/* Length of valid bytes in the buffer */\n@@ -592,9 +594,9 @@ buf_read (unix_stream *s, void *buf, ssize_t nbyte)\n           && raw_seek (s, new_logical, SEEK_SET) < 0)\n         return -1;\n       s->buffer_offset = s->physical_offset = new_logical;\n-      if (to_read <= BUFFER_SIZE/2)\n+      if (to_read <= s->buffer_size/2)\n         {\n-          did_read = raw_read (s, s->buffer, BUFFER_SIZE);\n+          did_read = raw_read (s, s->buffer, s->buffer_size);\n \t  if (likely (did_read >= 0))\n \t    {\n \t      s->physical_offset += did_read;\n@@ -632,11 +634,11 @@ buf_write (unix_stream *s, const void *buf, ssize_t nbyte)\n     s->buffer_offset = s->logical_offset;\n \n   /* Does the data fit into the buffer?  As a special case, if the\n-     buffer is empty and the request is bigger than BUFFER_SIZE/2,\n+     buffer is empty and the request is bigger than s->buffer_size/2,\n      write directly. This avoids the case where the buffer would have\n      to be flushed at every write.  */\n-  if (!(s->ndirty == 0 && nbyte > BUFFER_SIZE/2)\n-      && s->logical_offset + nbyte <= s->buffer_offset + BUFFER_SIZE\n+  if (!(s->ndirty == 0 && nbyte > s->buffer_size/2)\n+      && s->logical_offset + nbyte <= s->buffer_offset + s->buffer_size\n       && s->buffer_offset <= s->logical_offset\n       && s->buffer_offset + s->ndirty >= s->logical_offset)\n     {\n@@ -651,7 +653,7 @@ buf_write (unix_stream *s, const void *buf, ssize_t nbyte)\n          the request is bigger than the buffer size, write directly\n          bypassing the buffer.  */\n       buf_flush (s);\n-      if (nbyte <= BUFFER_SIZE/2)\n+      if (nbyte <= s->buffer_size/2)\n         {\n           memcpy (s->buffer, buf, nbyte);\n           s->buffer_offset = s->logical_offset;\n@@ -688,7 +690,7 @@ buf_write (unix_stream *s, const void *buf, ssize_t nbyte)\n static int\n buf_markeor (unix_stream *s)\n {\n-  if (s->unbuffered || s->ndirty >= BUFFER_SIZE / 2)\n+  if (s->unbuffered || s->ndirty >= s->buffer_size / 2)\n     return buf_flush (s);\n   return 0;\n }\n@@ -765,11 +767,32 @@ static const struct stream_vtable buf_vtable = {\n };\n \n static int\n-buf_init (unix_stream *s)\n+buf_init (unix_stream *s, bool unformatted)\n {\n   s->st.vptr = &buf_vtable;\n \n-  s->buffer = xmalloc (BUFFER_SIZE);\n+  /* Try to guess a good value for the buffer size.  For formatted\n+     I/O, we use so many CPU cycles converting the data that there is\n+     more sense in converving memory and especially cache.  For\n+     unformatted, a bigger block can have a large impact in some\n+     environments.  */\n+\n+  if (unformatted)\n+    {\n+      if (options.unformatted_buffer_size > 0)\n+\ts->buffer_size = options.unformatted_buffer_size;\n+      else\n+\ts->buffer_size = UNFORMATTED_BUFFER_SIZE_DEFAULT;\n+    }\n+  else\n+    {\n+      if (options.formatted_buffer_size > 0)\n+\ts->buffer_size = options.formatted_buffer_size;\n+      else\n+\ts->buffer_size = FORMATTED_BUFFER_SIZE_DEFAULT;\n+    }\n+\n+  s->buffer = xmalloc (s->buffer_size);\n   return 0;\n }\n \n@@ -1120,13 +1143,13 @@ fd_to_stream (int fd, bool unformatted)\n \t   (s->fd == STDIN_FILENO \n \t    || s->fd == STDOUT_FILENO \n \t    || s->fd == STDERR_FILENO)))\n-    buf_init (s);\n+    buf_init (s, unformatted);\n   else\n     {\n       if (unformatted)\n \t{\n \t  s->unbuffered = true;\n-\t  buf_init (s);\n+\t  buf_init (s, unformatted);\n \t}\n       else\n \traw_init (s);"}, {"sha": "c0db96f02a8aa8fca5c5a6a115f283caf1d12972", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=c37b0163fe5307ab508489926114de9cf7e240c1", "patch": "@@ -540,6 +540,7 @@ typedef struct\n \n   int all_unbuffered, unbuffered_preconnected;\n   int fpe, backtrace;\n+  int unformatted_buffer_size, formatted_buffer_size;\n }\n options_t;\n "}, {"sha": "5817d1997999defcd7f37a382d85db32fc7448e4", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c37b0163fe5307ab508489926114de9cf7e240c1/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=c37b0163fe5307ab508489926114de9cf7e240c1", "patch": "@@ -198,6 +198,14 @@ static variable variable_table[] = {\n   /* Print out a backtrace if possible on runtime error */\n   { \"GFORTRAN_ERROR_BACKTRACE\", -1, &options.backtrace, init_boolean },\n \n+  /* Buffer size for unformatted files.  */\n+  { \"GFORTRAN_UNFORMATTED_BUFFER_SIZE\", 0, &options.unformatted_buffer_size,\n+    init_integer },\n+\n+  /* Buffer size for formatted files.  */\n+  { \"GFORTRAN_FORMATTED_BUFFER_SIZE\", 0, &options.formatted_buffer_size,\n+    init_integer },\n+\n   { NULL, 0, NULL, NULL }\n };\n "}]}