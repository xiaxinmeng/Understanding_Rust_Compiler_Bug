{"sha": "993acb366ebf8a43f66669950b385710eba931cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzYWNiMzY2ZWJmOGE0M2Y2NjY2OTk1MGIzODU3MTBlYmE5MzFjYg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-12-14T20:31:22Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-12-14T20:31:22Z"}, "message": "re PR c++/45330 (Suggest likely nested-name-specifiers for undeclared identifiers.)\n\ngcc/cp/\n\tPR c++/45330\n\t* cp-tree.h (suggest_alternatives_for): Add location_t parameter.\n\t* name-lookup.c (suggest_alternatives_for): Likewise.  Adjust.\n\t* lex.c (unqualified_name_lookup_error): Adjust call to it.\n\t* semantics.c (qualified_name_lookup_error): Move to...\n\t* error.c (qualified_name_lookup_error): ...here.  Call.\n\tsuggest_alternatives_for.\n\ngcc/testsuite/\n\tPR c++/45330\n\t* g++.dg/lookup/suggestions1.C: New test.\n\nFrom-SVN: r167814", "tree": {"sha": "a3f1edf7efd982b0735aec9f5727133cb89fece1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f1edf7efd982b0735aec9f5727133cb89fece1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993acb366ebf8a43f66669950b385710eba931cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993acb366ebf8a43f66669950b385710eba931cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993acb366ebf8a43f66669950b385710eba931cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993acb366ebf8a43f66669950b385710eba931cb/comments", "author": null, "committer": null, "parents": [{"sha": "ec047df48239928a1776c10e7e5f11c76c6974a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec047df48239928a1776c10e7e5f11c76c6974a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec047df48239928a1776c10e7e5f11c76c6974a5"}], "stats": {"total": 107, "additions": 66, "deletions": 41}, "files": [{"sha": "d9d8f04b5b300eea72c51ca8b5c79a1ea5e9228c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -1,3 +1,13 @@\n+2010-12-14  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45330\n+\t* cp-tree.h (suggest_alternatives_for): Add location_t parameter.\n+\t* name-lookup.c (suggest_alternatives_for): Likewise.  Adjust.\n+\t* lex.c (unqualified_name_lookup_error): Adjust call to it.\n+\t* semantics.c (qualified_name_lookup_error): Move to...\n+\t* error.c (qualified_name_lookup_error): ...here.  Call.\n+\tsuggest_alternatives_for.\n+\n 2010-12-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46873"}, {"sha": "7b18973c49355e374bb2dc38616de6f63d804e41", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -4898,6 +4898,8 @@ extern void maybe_warn_variadic_templates       (void);\n extern void maybe_warn_cpp0x\t\t\t(cpp0x_warn_str str);\n extern bool pedwarn_cxx98                       (location_t, int, const char *, ...) ATTRIBUTE_GCC_DIAG(3,4);\n extern location_t location_of                   (tree);\n+extern void qualified_name_lookup_error\t\t(tree, tree, tree,\n+\t\t\t\t\t\t location_t);\n \n /* in except.c */\n extern void init_exception_processing\t\t(void);\n@@ -5286,8 +5288,6 @@ extern void finish_template_decl\t\t(tree);\n extern tree finish_template_type\t\t(tree, tree, int);\n extern tree finish_base_specifier\t\t(tree, tree, bool);\n extern void finish_member_declaration\t\t(tree);\n-extern void qualified_name_lookup_error\t\t(tree, tree, tree,\n-\t\t\t\t\t\t location_t);\n extern tree finish_id_expression\t\t(tree, tree, tree,\n \t\t\t\t\t\t cp_id_kind *,\n \t\t\t\t\t\t bool, bool, bool *,\n@@ -5631,7 +5631,7 @@ extern void cxx_omp_finish_clause\t\t(tree);\n extern bool cxx_omp_privatize_by_reference\t(const_tree);\n \n /* in name-lookup.c */\n-extern void suggest_alternatives_for (tree);\n+extern void suggest_alternatives_for (location_t, tree);\n \n /* -- end of C++ */\n "}, {"sha": "3e91115ba9d32e336d2e8f56ed10193404921908", "filename": "gcc/cp/error.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -3167,3 +3167,39 @@ pedwarn_cxx98 (location_t location, int opt, const char *gmsgid, ...)\n   va_end (ap);\n   return report_diagnostic (&diagnostic);\n }\n+\n+/* Issue a diagnostic that NAME cannot be found in SCOPE.  DECL is what\n+   we found when we tried to do the lookup.  LOCATION is the location of\n+   the NAME identifier.  */\n+\n+void\n+qualified_name_lookup_error (tree scope, tree name,\n+\t\t\t     tree decl, location_t location)\n+{\n+  if (scope == error_mark_node)\n+    ; /* We already complained.  */\n+  else if (TYPE_P (scope))\n+    {\n+      if (!COMPLETE_TYPE_P (scope))\n+\terror_at (location, \"incomplete type %qT used in nested name specifier\",\n+\t\t  scope);\n+      else if (TREE_CODE (decl) == TREE_LIST)\n+\t{\n+\t  error_at (location, \"reference to %<%T::%D%> is ambiguous\",\n+\t\t    scope, name);\n+\t  print_candidates (decl);\n+\t}\n+      else\n+\terror_at (location, \"%qD is not a member of %qT\", name, scope);\n+    }\n+  else if (scope != global_namespace)\n+    {\n+      error_at (location, \"%qD is not a member of %qD\", name, scope);\n+      suggest_alternatives_for (location, name);\n+    }\n+  else\n+    {\n+      error_at (location, \"%<::%D%> has not been declared\", name);\n+      suggest_alternatives_for (location, name);\n+    }\n+}"}, {"sha": "b04c89f46b6130e21ba5ea315ab2d6f8266448ba", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -452,7 +452,7 @@ unqualified_name_lookup_error (tree name)\n       if (!objc_diagnose_private_ivar (name))\n \t{\n \t  error (\"%qD was not declared in this scope\", name);\n-\t  suggest_alternatives_for (name);\n+\t  suggest_alternatives_for (location_of (name), name);\n \t}\n       /* Prevent repeated error messages by creating a VAR_DECL with\n \t this NAME in the innermost block scope.  */"}, {"sha": "e2e54507c4694447f1b4f9f42eb81e0b675dc95b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -3923,15 +3923,14 @@ remove_hidden_names (tree fns)\n    possible candidates.  */\n \n void\n-suggest_alternatives_for (tree name)\n+suggest_alternatives_for (location_t location, tree name)\n {\n   VEC(tree,heap) *candidates = NULL;\n   VEC(tree,heap) *namespaces_to_search = NULL;\n   int max_to_search = PARAM_VALUE (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP);\n   int n_searched = 0;\n   tree t;\n   unsigned ix;\n-  location_t name_location;\n \n   VEC_safe_push (tree, heap, namespaces_to_search, global_namespace);\n \n@@ -3955,15 +3954,13 @@ suggest_alternatives_for (tree name)\n \tVEC_safe_push (tree, heap, namespaces_to_search, t);\n     }\n \n-  name_location = location_of (name);\n-\n   /* If we stopped before we could examine all namespaces, inform the\n      user.  Do this even if we don't have any candidates, since there\n      might be more candidates further down that we weren't able to\n      find.  */\n   if (n_searched >= max_to_search\n       && !VEC_empty (tree, namespaces_to_search))\n-    inform (name_location,\n+    inform (location,\n \t    \"maximum limit of %d namespaces searched for %qE\",\n \t    max_to_search, name);\n \n@@ -3973,7 +3970,7 @@ suggest_alternatives_for (tree name)\n   if (VEC_empty (tree, candidates))\n     return;\n \n-  inform_n (name_location, VEC_length (tree, candidates),\n+  inform_n (location, VEC_length (tree, candidates),\n \t    \"suggested alternative:\",\n \t    \"suggested alternatives:\");\n "}, {"sha": "25b99320fa67ec1a04661074559ed0f820d1f84f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -2646,37 +2646,6 @@ finish_base_specifier (tree base, tree access, bool virtual_p)\n   return result;\n }\n \n-/* Issue a diagnostic that NAME cannot be found in SCOPE.  DECL is\n-   what we found when we tried to do the lookup.\n-   LOCATION is the location of the NAME identifier;\n-   The location is used in the error message*/\n-\n-void\n-qualified_name_lookup_error (tree scope, tree name,\n-\t\t\t     tree decl, location_t location)\n-{\n-  if (scope == error_mark_node)\n-    ; /* We already complained.  */\n-  else if (TYPE_P (scope))\n-    {\n-      if (!COMPLETE_TYPE_P (scope))\n-\terror_at (location, \"incomplete type %qT used in nested name specifier\",\n-\t\t  scope);\n-      else if (TREE_CODE (decl) == TREE_LIST)\n-\t{\n-\t  error_at (location, \"reference to %<%T::%D%> is ambiguous\",\n-\t\t    scope, name);\n-\t  print_candidates (decl);\n-\t}\n-      else\n-\terror_at (location, \"%qD is not a member of %qT\", name, scope);\n-    }\n-  else if (scope != global_namespace)\n-    error_at (location, \"%qD is not a member of %qD\", name, scope);\n-  else\n-    error_at (location, \"%<::%D%> has not been declared\", name);\n-}\n-\n /* If FNS is a member function, a set of member functions, or a\n    template-id referring to one or more member functions, return a\n    BASELINK for FNS, incorporating the current access context."}, {"sha": "99c8103ddd1b259dff419bc1232119d8f61b2c6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -1,3 +1,8 @@\n+2010-12-14  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR c++/45330\n+\t* g++.dg/lookup/suggestions1.C: New test.\n+\n 2010-12-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46937"}, {"sha": "1185d58416a0362c6db29b9e98311ce453d348c1", "filename": "gcc/testsuite/g++.dg/lookup/suggestions1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993acb366ebf8a43f66669950b385710eba931cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fsuggestions1.C?ref=993acb366ebf8a43f66669950b385710eba931cb", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile }\n+\n+namespace N { namespace M { int foo; } } // { dg-message \"N::M::foo\" }\n+int f (void) { return N::foo; }\t\t // { dg-error \"not a member\" }\n+// { dg-message \"suggested alternative\" \"missing namespace\" { target *-*-* } 4 }\n+\n+int g (void) { return ::foo; }\t// { dg-error \"not been declared\" }\n+// { dg-message \"suggested alternative\" \"omitted namespace\" { target *-*-* } 7 }"}]}