{"sha": "5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJiYjFmMzAwMGM1N2ZkNGQ5NTk2OWIzMGZhMGUzNWJlNmQ1NGZmYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-11T15:16:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-11T15:16:21Z"}, "message": "libstdc++: Make std::this_thread functions work without gthreads\n\nThe only function in namespace std::this_thread that actually depends on\nthread support being present is this_thread::get_id(). The other\nfunctions (yield, sleep_for and sleep_until) can be defined for targets\nwithout gthreads.\n\nA small change is needed in std::this_thread::sleep_for which currently\nuses the __gthread_time_t typedef. Since it just calls nanosleep\ndirectly, it should use timespec directly instead of the typedef.\n\nEven std::this_thread::get_id() could be made to work, the only\ndifficulty is that it returns a value of type std::thread::id and\nstd::thread is only defined when gthreads support exists.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/thread [!_GLIBCXX_HAS_GTHREADS] (this_thread::yield)\n\t(this_thread::sleep_until): Define.\n\t[!_GLIBCXX_HAS_GTHREADS] (this_thread::sleep_for): Define. Replace\n\tuse of __gthread_time_t typedef with timespec.\n\t* src/c++11/thread.cc [!_GLIBCXX_HAS_GTHREADS] (__sleep_for):\n\tLikewise.\n\t* testsuite/30_threads/this_thread/2.cc: Moved to...\n\t* testsuite/30_threads/this_thread/yield.cc: ...here.\n\t* testsuite/30_threads/this_thread/3.cc: Moved to...\n\t* testsuite/30_threads/this_thread/sleep_for-mt.cc: ...here.\n\t* testsuite/30_threads/this_thread/4.cc: Moved to...\n\t* testsuite/30_threads/this_thread/sleep_until-mt.cc: ...here.\n\t* testsuite/30_threads/this_thread/58038.cc: Add\n\tdg-require-sleep.\n\t* testsuite/30_threads/this_thread/60421.cc: Likewise.\n\t* testsuite/30_threads/this_thread/sleep_for.cc: New test.\n\t* testsuite/30_threads/this_thread/sleep_until.cc: New test.", "tree": {"sha": "3a4d5f7d465de0a98c1f1f3938e9746c772a03a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a4d5f7d465de0a98c1f1f3938e9746c772a03a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7840b4dc05539cf5575b3e9ff57ff5f6c3da2cae"}], "stats": {"total": 159, "additions": 127, "deletions": 32}, "files": [{"sha": "30ae93a0d5bf2a3bb4dd8fe9a4536b120f4a08e9", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -35,12 +35,16 @@\n # include <bits/c++0x_warning.h>\n #else\n \n-#include <bits/c++config.h>\n+#include <chrono> // std::chrono::*\n+\n+#ifdef _GLIBCXX_USE_NANOSLEEP\n+# include <cerrno>  // errno, EINTR\n+# include <time.h>  // nanosleep\n+#endif\n \n #if defined(_GLIBCXX_HAS_GTHREADS)\n #include <bits/gthr.h>\n \n-#include <chrono> // std::chrono::*\n #include <memory> // std::unique_ptr\n #include <tuple>  // std::tuple\n \n@@ -49,14 +53,11 @@\n # include <stop_token>\t// std::stop_source, std::stop_token, std::nostopstate\n #endif\n \n-#ifdef _GLIBCXX_USE_NANOSLEEP\n-# include <cerrno>  // errno, EINTR\n-# include <time.h>  // nanosleep\n-#endif\n-\n #include <bits/functional_hash.h> // std::hash\n #include <bits/invoke.h>\t  // std::__invoke\n \n+#endif // _GLIBCXX_HAS_GTHREADS\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -69,6 +70,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+#if defined(_GLIBCXX_HAS_GTHREADS)\n   /// thread\n   class thread\n   {\n@@ -352,6 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else\n \treturn __out << __id._M_thread;\n     }\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n   /** @namespace std::this_thread\n    *  @brief ISO C++ 2011 namespace for interacting with the current thread\n@@ -360,6 +363,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   namespace this_thread\n   {\n+#if defined _GLIBCXX_HAS_GTHREADS\n     /// get_id\n     inline thread::id\n     get_id() noexcept\n@@ -374,12 +378,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n       return thread::id(__gthread_self());\n     }\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n     /// yield\n     inline void\n     yield() noexcept\n     {\n-#ifdef _GLIBCXX_USE_SCHED_YIELD\n+#if defined _GLIBCXX_HAS_GTHREADS && defined _GLIBCXX_USE_SCHED_YIELD\n       __gthread_yield();\n #endif\n     }\n@@ -397,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tauto __s = chrono::duration_cast<chrono::seconds>(__rtime);\n \tauto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);\n #ifdef _GLIBCXX_USE_NANOSLEEP\n-\t__gthread_time_t __ts =\n+\tstruct ::timespec __ts =\n \t  {\n \t    static_cast<std::time_t>(__s.count()),\n \t    static_cast<long>(__ns.count())\n@@ -432,8 +437,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n-  // @} group threads\n-\n #ifdef __cpp_lib_jthread\n \n   class jthread\n@@ -562,8 +565,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     thread _M_thread;\n   };\n #endif // __cpp_lib_jthread\n+\n+  // @} group threads\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // _GLIBCXX_HAS_GTHREADS\n #endif // C++11\n #endif // _GLIBCXX_THREAD"}, {"sha": "a4c87d816a58819775f83050ff9b37aecd3cd72a", "filename": "libstdc++-v3/src/c++11/thread.cc", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fthread.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -29,6 +29,16 @@\n #include <cerrno>\n #include <cxxabi_forced.h>\n \n+#ifndef _GLIBCXX_USE_NANOSLEEP\n+# ifdef _GLIBCXX_HAVE_SLEEP\n+#  include <unistd.h>\n+# elif defined(_GLIBCXX_HAVE_WIN32_SLEEP)\n+#  include <windows.h>\n+# else\n+#  error \"No sleep function known for this target\"\n+# endif\n+#endif\n+\n #ifdef _GLIBCXX_HAS_GTHREADS\n \n #if defined(_GLIBCXX_USE_GET_NPROCS)\n@@ -59,16 +69,6 @@ static inline int get_nprocs()\n # define _GLIBCXX_NPROCS 0\n #endif\n \n-#ifndef _GLIBCXX_USE_NANOSLEEP\n-# ifdef _GLIBCXX_HAVE_SLEEP\n-#  include <unistd.h>\n-# elif defined(_GLIBCXX_HAVE_WIN32_SLEEP)\n-#  include <windows.h>\n-# else\n-#  error \"No sleep function known for this target\"\n-# endif\n-#endif\n-\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n   extern \"C\"\n@@ -180,13 +180,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __n;\n   }\n \n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // _GLIBCXX_HAS_GTHREADS\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n namespace this_thread\n {\n   void\n   __sleep_for(chrono::seconds __s, chrono::nanoseconds __ns)\n   {\n #ifdef _GLIBCXX_USE_NANOSLEEP\n-    __gthread_time_t __ts =\n+    struct ::timespec __ts =\n       {\n \tstatic_cast<std::time_t>(__s.count()),\n \tstatic_cast<long>(__ns.count())\n@@ -231,8 +239,5 @@ namespace this_thread\n #endif\n   }\n }\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-\n-#endif // _GLIBCXX_HAS_GTHREADS"}, {"sha": "fd007368527a9d4536794139795513d154571994", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/58038.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F58038.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F58038.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F58038.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-do run { target c++11 } }\n // { dg-require-time \"\" }\n+// { dg-require-sleep \"\" }\n \n #include <thread>\n #include <chrono>"}, {"sha": "3f9d8b134d2ea47f5487abbc0ca7a54278d42411", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/60421.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F60421.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F60421.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2F60421.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -22,6 +22,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n // { dg-require-time \"\" }\n+// { dg-require-sleep \"\" }\n \n #include <thread>\n #include <chrono>"}, {"sha": "45993811d010ae90c12b37502aae97891deaa104", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/sleep_for-mt.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_for-mt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_for-mt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_for-mt.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "previous_filename": "libstdc++-v3/testsuite/30_threads/this_thread/3.cc"}, {"sha": "9552a23435e30d2d0f180c3fe5692761d8a662eb", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/sleep_for.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_for.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_for.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_for.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-sleep \"\" }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+// This tests this_thread::sleep_until without using -pthread\n+\n+namespace chr = std::chrono;\n+\n+void\n+test01()\n+{\n+  chr::system_clock::time_point begin = chr::system_clock::now();\n+  chr::microseconds ms(500);\n+\n+  std::this_thread::sleep_for(ms);\n+\n+  VERIFY( (chr::system_clock::now() - begin) >= ms );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "fc8d10d844818ac4289a76242aea6b51316410a0", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/sleep_until-mt.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_until-mt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_until-mt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_until-mt.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "previous_filename": "libstdc++-v3/testsuite/30_threads/this_thread/4.cc"}, {"sha": "6af875911df3ff60e76e30dd7a1a18b591a7a189", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/sleep_until.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_until.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_until.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fsleep_until.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do run { target c++11 } }\n+// { dg-require-sleep \"\" }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+// This tests this_thread::sleep_until without using -pthread\n+\n+namespace chr = std::chrono;\n+\n+void\n+test01()\n+{\n+  chr::system_clock::time_point begin = chr::system_clock::now();\n+  chr::microseconds ms(500);\n+\n+  std::this_thread::sleep_until(chr::system_clock::now() + ms);\n+\n+  VERIFY( (chr::system_clock::now() - begin) >= ms );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "08f4efaaaf51f1e2da845bccf92a7d9ad099cddc", "filename": "libstdc++-v3/testsuite/30_threads/this_thread/yield.cc", "status": "renamed", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fyield.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fyield.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthis_thread%2Fyield.cc?ref=5bbb1f3000c57fd4d95969b30fa0e35be6d54ffb", "patch": "@@ -1,8 +1,5 @@\n-// { dg-do run }\n-// { dg-options \"-pthread\"  }\n-// { dg-require-effective-target c++11 }\n-// { dg-require-effective-target pthread }\n-// { dg-require-gthreads \"\" }\n+// { dg-do run { target c++11 } }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n \n // Copyright (C) 2008-2020 Free Software Foundation, Inc.\n //\n@@ -28,7 +25,7 @@\n \n int main()\n {\n-  try \n+  try\n     {\n       std::this_thread::yield();\n     }", "previous_filename": "libstdc++-v3/testsuite/30_threads/this_thread/2.cc"}]}