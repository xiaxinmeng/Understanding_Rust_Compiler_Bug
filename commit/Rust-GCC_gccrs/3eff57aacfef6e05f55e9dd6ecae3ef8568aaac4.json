{"sha": "3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmZjU3YWFjZmVmNmUwNWY1NWU5ZGQ2ZWNhZTNlZjg1NjhhYWFjNA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-20T11:44:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-20T11:44:08Z"}, "message": "[ARM][GCC][6x]:MVE ACLE vaddq intrinsics using arithmetic plus operator.\n\nThis patch supports following MVE ACLE vaddq intrinsics. The RTL patterns for this intrinsics are added using arithmetic \"plus\" operator.\n\nvaddq_s8, vaddq_s16, vaddq_s32, vaddq_u8, vaddq_u16, vaddq_u32, vaddq_f16, vaddq_f32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm_mve.h (vaddq_s8): Define macro.\n\t(vaddq_s16): Likewise.\n\t(vaddq_s32): Likewise.\n\t(vaddq_u8): Likewise.\n\t(vaddq_u16): Likewise.\n\t(vaddq_u32): Likewise.\n\t(vaddq_f16): Likewise.\n\t(vaddq_f32): Likewise.\n\t(__arm_vaddq_s8): Define intrinsic.\n\t(__arm_vaddq_s16): Likewise.\n\t(__arm_vaddq_s32): Likewise.\n\t(__arm_vaddq_u8): Likewise.\n\t(__arm_vaddq_u16): Likewise.\n\t(__arm_vaddq_u32): Likewise.\n\t(__arm_vaddq_f16): Likewise.\n\t(__arm_vaddq_f32): Likewise.\n\t(vaddq): Define polymorphic variant.\n\t* config/arm/iterators.md (VNIM): Define mode iterator for common types\n\tNeon, IWMMXT and MVE.\n\t(VNINOTM): Likewise.\n\t* config/arm/mve.md (mve_vaddq<mode>): Define RTL pattern.\n\t(mve_vaddq_f<mode>): Define RTL pattern.\n\t* config/arm/neon.md (add<mode>3): Rename to addv4hf3 RTL pattern.\n\t(addv8hf3_neon): Define RTL pattern.\n\t* config/arm/vec-common.md (add<mode>3): Modify standard add RTL pattern\n\tto support MVE.\n\t(addv8hf3): Define standard RTL pattern for MVE and Neon.\n\t(add<mode>3): Modify existing standard add RTL pattern for Neon and IWMMXT.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vaddq_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vaddq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_u8.c: Likewise.", "tree": {"sha": "d54a666157f3d98c375e0ad11f67cc0b527bb746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54a666157f3d98c375e0ad11f67cc0b527bb746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4549b2cd209eb621453ce13be7ffd84ffa720a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4549b2cd209eb621453ce13be7ffd84ffa720a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4549b2cd209eb621453ce13be7ffd84ffa720a"}], "stats": {"total": 398, "additions": 383, "deletions": 15}, "files": [{"sha": "b98f573e7118d3b723eb585328161fa2d6b44e48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -1,3 +1,36 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm_mve.h (vaddq_s8): Define macro.\n+\t(vaddq_s16): Likewise.\n+\t(vaddq_s32): Likewise.\n+\t(vaddq_u8): Likewise.\n+\t(vaddq_u16): Likewise.\n+\t(vaddq_u32): Likewise.\n+\t(vaddq_f16): Likewise.\n+\t(vaddq_f32): Likewise.\n+\t(__arm_vaddq_s8): Define intrinsic.\n+\t(__arm_vaddq_s16): Likewise.\n+\t(__arm_vaddq_s32): Likewise.\n+\t(__arm_vaddq_u8): Likewise.\n+\t(__arm_vaddq_u16): Likewise.\n+\t(__arm_vaddq_u32): Likewise.\n+\t(__arm_vaddq_f16): Likewise.\n+\t(__arm_vaddq_f32): Likewise.\n+\t(vaddq): Define polymorphic variant.\n+\t* config/arm/iterators.md (VNIM): Define mode iterator for common types\n+\tNeon, IWMMXT and MVE.\n+\t(VNINOTM): Likewise.\n+\t* config/arm/mve.md (mve_vaddq<mode>): Define RTL pattern.\n+\t(mve_vaddq_f<mode>): Define RTL pattern.\n+\t* config/arm/neon.md (add<mode>3): Rename to addv4hf3 RTL pattern.\n+\t(addv8hf3_neon): Define RTL pattern.\n+\t* config/arm/vec-common.md (add<mode>3): Modify standard add RTL pattern\n+\tto support MVE.\n+\t(addv8hf3): Define standard RTL pattern for MVE and Neon.\n+\t(add<mode>3): Modify existing standard add RTL pattern for Neon and IWMMXT.\n+\n 2020-03-20  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/94232"}, {"sha": "55c256910bb7f4c616ea592be699f7f4fc3f17f7", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -1898,6 +1898,14 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vstrwq_scatter_shifted_offset_p_u32(__base, __offset, __value, __p) __arm_vstrwq_scatter_shifted_offset_p_u32(__base, __offset, __value, __p)\n #define vstrwq_scatter_shifted_offset_s32(__base, __offset, __value) __arm_vstrwq_scatter_shifted_offset_s32(__base, __offset, __value)\n #define vstrwq_scatter_shifted_offset_u32(__base, __offset, __value) __arm_vstrwq_scatter_shifted_offset_u32(__base, __offset, __value)\n+#define vaddq_s8(__a, __b) __arm_vaddq_s8(__a, __b)\n+#define vaddq_s16(__a, __b) __arm_vaddq_s16(__a, __b)\n+#define vaddq_s32(__a, __b) __arm_vaddq_s32(__a, __b)\n+#define vaddq_u8(__a, __b) __arm_vaddq_u8(__a, __b)\n+#define vaddq_u16(__a, __b) __arm_vaddq_u16(__a, __b)\n+#define vaddq_u32(__a, __b) __arm_vaddq_u32(__a, __b)\n+#define vaddq_f16(__a, __b) __arm_vaddq_f16(__a, __b)\n+#define vaddq_f32(__a, __b) __arm_vaddq_f32(__a, __b)\n #endif\n \n __extension__ extern __inline void\n@@ -12341,6 +12349,48 @@ __arm_vstrwq_scatter_shifted_offset_u32 (uint32_t * __base, uint32x4_t __offset,\n   __builtin_mve_vstrwq_scatter_shifted_offset_uv4si ((__builtin_neon_si *) __base, __offset, __value);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_s8 (int8x16_t __a, int8x16_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_s16 (int16x8_t __a, int16x8_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_u8 (uint8x16_t __a, uint8x16_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_u16 (uint16x8_t __a, uint16x8_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n+{\n+  return __a + __b;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -14707,6 +14757,20 @@ __arm_vstrwq_scatter_shifted_offset_p_f32 (float32_t * __base, uint32x4_t __offs\n   __builtin_mve_vstrwq_scatter_shifted_offset_p_fv4sf (__base, __offset, __value, __p);\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_f16 (float16x8_t __a, float16x8_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __a + __b;\n+}\n+\n #endif\n \n enum {\n@@ -15186,6 +15250,8 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vaddq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vaddq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vaddq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t)), \\\n+  int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vaddq_f16 (__ARM_mve_coerce(p0, float16x8_t), __ARM_mve_coerce(p1, float16x8_t)), \\\n+  int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vaddq_f32 (__ARM_mve_coerce(p0, float32x4_t), __ARM_mve_coerce(p1, float32x4_t)), \\\n   int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8_t]: __arm_vaddq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t)), \\\n   int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16_t]: __arm_vaddq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t)), \\\n   int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32_t]: __arm_vaddq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t)), \\"}, {"sha": "f3cbc0d03564ef8866226f836a27ed6051353f5d", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -66,6 +66,14 @@\n ;; Integer and float modes supported by Neon and IWMMXT.\n (define_mode_iterator VALL [V2DI V2SI V4HI V8QI V2SF V4SI V8HI V16QI V4SF])\n \n+;; Integer and float modes supported by Neon, IWMMXT and MVE, used by\n+;; arithmetic epxand patterns.\n+(define_mode_iterator VNIM [V16QI V8HI V4SI V4SF])\n+\n+;; Integer and float modes supported by Neon and IWMMXT but not MVE, used by\n+;; arithmetic epxand patterns.\n+(define_mode_iterator VNINOTM [V2SI V4HI V8QI V2SF V2DI])\n+\n ;; Integer and float modes supported by Neon, IWMMXT and MVE.\n (define_mode_iterator VNIM1 [V16QI V8HI V4SI V4SF V2DI])\n "}, {"sha": "77b36a7a9a7f4e100673275ee2e84e6a5e4fbc47", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -9643,3 +9643,31 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"4\")])\n+\n+;;\n+;; [vaddq_s, vaddq_u])\n+;;\n+(define_insn \"mve_vaddq<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(plus:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vadd.i%#<V_sz_elem>  %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vaddq_f])\n+;;\n+(define_insn \"mve_vaddq_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(plus:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vadd.f%#<V_sz_elem> %q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "272e6c1e7cfc4c42065d1d50131ef49d89052d91", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -519,18 +519,30 @@\n ;; As with SFmode, full support for HFmode vector arithmetic is only available\n ;; when flag-unsafe-math-optimizations is enabled.\n \n-(define_insn \"add<mode>3\"\n+;; Add pattern with modes V8HF and V4HF is split into separate patterns to add\n+;; support for standard pattern addv8hf3 in MVE.  Following pattern is called\n+;; from \"addv8hf3\" standard pattern inside vec-common.md file.\n+\n+(define_insn \"addv8hf3_neon\"\n   [(set\n-    (match_operand:VH 0 \"s_register_operand\" \"=w\")\n-    (plus:VH\n-     (match_operand:VH 1 \"s_register_operand\" \"w\")\n-     (match_operand:VH 2 \"s_register_operand\" \"w\")))]\n+    (match_operand:V8HF 0 \"s_register_operand\" \"=w\")\n+    (plus:V8HF\n+     (match_operand:V8HF 1 \"s_register_operand\" \"w\")\n+     (match_operand:V8HF 2 \"s_register_operand\" \"w\")))]\n  \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n- \"vadd.<V_if_elem>\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n- [(set (attr \"type\")\n-   (if_then_else (match_test \"<Is_float_mode>\")\n-    (const_string \"neon_fp_addsub_s<q>\")\n-    (const_string \"neon_add<q>\")))]\n+ \"vadd.f16\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+ [(set_attr \"type\" \"neon_fp_addsub_s_q\")]\n+)\n+\n+(define_insn \"addv4hf3\"\n+  [(set\n+    (match_operand:V4HF 0 \"s_register_operand\" \"=w\")\n+    (plus:V4HF\n+     (match_operand:V4HF 1 \"s_register_operand\" \"w\")\n+     (match_operand:V4HF 2 \"s_register_operand\" \"w\")))]\n+ \"TARGET_NEON_FP16INST && flag_unsafe_math_optimizations\"\n+ \"vadd.f16\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+ [(set_attr \"type\" \"neon_fp_addsub_s_q\")]\n )\n \n (define_insn \"add<mode>3_fp16\""}, {"sha": "786daa628510a5def50530c5b459bece45a0007c", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -77,19 +77,51 @@\n      }\n })\n \n-;; Vector arithmetic. Expanders are blank, then unnamed insns implement\n-;; patterns separately for IWMMXT and Neon.\n+;; Vector arithmetic.  Expanders are blank, then unnamed insns implement\n+;; patterns separately for Neon, IWMMXT and MVE.\n \n (define_expand \"add<mode>3\"\n-  [(set (match_operand:VALL 0 \"s_register_operand\")\n-        (plus:VALL (match_operand:VALL 1 \"s_register_operand\")\n-                   (match_operand:VALL 2 \"s_register_operand\")))]\n+  [(set (match_operand:VNIM 0 \"s_register_operand\")\n+\t(plus:VNIM (match_operand:VNIM 1 \"s_register_operand\")\n+\t\t   (match_operand:VNIM 2 \"s_register_operand\")))]\n+  \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n+\t\t    || flag_unsafe_math_optimizations))\n+   || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE && VALID_MVE_SI_MODE(<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE(<MODE>mode))\"\n+{\n+})\n+\n+;; Vector arithmetic.  Expanders are blank, then unnamed insns implement\n+;; patterns separately for Neon and MVE.\n+\n+(define_expand \"addv8hf3\"\n+  [(set (match_operand:V8HF 0 \"s_register_operand\")\n+\t(plus:V8HF (match_operand:V8HF 1 \"s_register_operand\")\n+\t\t   (match_operand:V8HF 2 \"s_register_operand\")))]\n+  \"(TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE(V8HFmode))\n+   || (TARGET_NEON_FP16INST && flag_unsafe_math_optimizations)\"\n+{\n+  if (TARGET_NEON_FP16INST && flag_unsafe_math_optimizations)\n+    emit_insn (gen_addv8hf3_neon (operands[0], operands[1], operands[2]));\n+})\n+\n+;; Vector arithmetic.  Expanders are blank, then unnamed insns implement\n+;; patterns separately for Neon and IWMMXT.\n+\n+(define_expand \"add<mode>3\"\n+  [(set (match_operand:VNINOTM 0 \"s_register_operand\")\n+\t(plus:VNINOTM (match_operand:VNINOTM 1 \"s_register_operand\")\n+\t\t      (match_operand:VNINOTM 2 \"s_register_operand\")))]\n   \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n \t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n+;; Vector arithmetic. Expanders are blank, then unnamed insns implement\n+;; patterns separately for IWMMXT and Neon.\n+\n (define_expand \"sub<mode>3\"\n   [(set (match_operand:VALL 0 \"s_register_operand\")\n         (minus:VALL (match_operand:VALL 1 \"s_register_operand\")"}, {"sha": "e4aeb834b2e00cce5bdd357a004f014ca5d3cda9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -1,3 +1,16 @@\n+2020-03-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vaddq_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_u8.c: Likewise.\n+\n 2020-03-20  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/mve_fp_fpu1.c: Fix testisms."}, {"sha": "53b84d59f85ca359df68e906fc4c1e3599698a2e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f16.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b)\n+{\n+  return vaddq_f16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f16\"  }  } */"}, {"sha": "9bb7d1c0ecaf4c22303a2a89a41dd61c9fe6352e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_f32.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b)\n+{\n+  return vaddq_f32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.f32\"  }  } */"}, {"sha": "885473c9dfe6bf92e167cb64bd582b8f0f7b3a6a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s16.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vaddq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */"}, {"sha": "90ea50198176334b73a459a8a5ae1fc6db558cb0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s32.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vaddq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */"}, {"sha": "dbde92affe54d33939208a81b5f5edd4502dd5bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_s8.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vaddq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */"}, {"sha": "bc966732cdd6481d5a4cef83cc4cea2b6e91e4f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u16.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vaddq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i16\"  }  } */"}, {"sha": "ed262c29406ab01f60f7e171b27af3ae3f5c2f93", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u32.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vaddq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i32\"  }  } */"}, {"sha": "b12e657b7af2f2ed947eb28a6d0e5dcdfde862b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_u8.c?ref=3eff57aacfef6e05f55e9dd6ecae3ef8568aaac4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vaddq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vaddq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd.i8\"  }  } */"}]}