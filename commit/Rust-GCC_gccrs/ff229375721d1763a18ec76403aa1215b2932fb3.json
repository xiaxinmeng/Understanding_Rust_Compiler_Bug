{"sha": "ff229375721d1763a18ec76403aa1215b2932fb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyMjkzNzU3MjFkMTc2M2ExOGVjNzY0MDNhYTEyMTViMjkzMmZiMw==", "commit": {"author": {"name": "Delia Burduv", "email": "delia.burduv@arm.com", "date": "2020-03-06T10:32:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-06T10:42:43Z"}, "message": "ACLE intrinsics: BFloat16 store (vst<n>{q}_bf16) intrinsics for AArch32\n\n2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n\n\t* config/arm/arm_neon.h (bfloat16x4x2_t): New typedef.\n\t(bfloat16x8x2_t): New typedef.\n\t(bfloat16x4x3_t): New typedef.\n\t(bfloat16x8x3_t): New typedef.\n\t(bfloat16x4x4_t): New typedef.\n\t(bfloat16x8x4_t): New typedef.\n\t(vst2_bf16): New.\n\t(vst2q_bf16): New.\n\t(vst3_bf16): New.\n\t(vst3q_bf16): New.\n\t(vst4_bf16): New.\n\t(vst4q_bf16): New.\n\t* config/arm/arm-builtins.c (v2bf_UP): Define.\n\t(VAR13): New.\n\t(arm_init_simd_builtin_types): Init Bfloat16x2_t eltype.\n\t* config/arm/arm-modes.def (V2BF): New mode.\n\t* config/arm/arm-simd-builtin-types.def\n\t(Bfloat16x2_t): New entry.\n\t* config/arm/arm_neon_builtins.def\n\t(vst2): Changed to VAR13 and added v4bf, v8bf\n\t(vst3): Changed to VAR13 and added v4bf, v8bf\n\t(vst4): Changed to VAR13 and added v4bf, v8bf\n\t* config/arm/iterators.md (VDXBF): New iterator.\n\t(VQ2BF): New iterator.\n\t*config/arm/neon.md (neon_vst2<mode>): Used new iterators.\n\t(neon_vst2<mode>): Used new iterators.\n\t(neon_vst3<mode>): Used new iterators.\n\t(neon_vst3<mode>): Used new iterators.\n\t(neon_vst3qa<mode>): Used new iterators.\n\t(neon_vst3qb<mode>): Used new iterators.\n\t(neon_vst4<mode>): Used new iterators.\n\t(neon_vst4<mode>): Used new iterators.\n\t(neon_vst4qa<mode>): Used new iterators.\n\t(neon_vst4qb<mode>): Used new iterators.\n\n\t* gcc.target/arm/simd/bf16_vstn_1.c: New test.", "tree": {"sha": "66833e46153e7869903229adb39ebb1a86c86169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66833e46153e7869903229adb39ebb1a86c86169"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff229375721d1763a18ec76403aa1215b2932fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff229375721d1763a18ec76403aa1215b2932fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff229375721d1763a18ec76403aa1215b2932fb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff229375721d1763a18ec76403aa1215b2932fb3/comments", "author": null, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120070973425d785734837c06800dba3da4d1ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120070973425d785734837c06800dba3da4d1ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120070973425d785734837c06800dba3da4d1ac3"}], "stats": {"total": 248, "additions": 232, "deletions": 16}, "files": [{"sha": "6d2a35c8d2267a19f8cceeb4502c41db11aaf5fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -1,3 +1,40 @@\n+2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* config/arm/arm_neon.h (bfloat16x4x2_t): New typedef.\n+\t(bfloat16x8x2_t): New typedef.\n+\t(bfloat16x4x3_t): New typedef.\n+\t(bfloat16x8x3_t): New typedef.\n+\t(bfloat16x4x4_t): New typedef.\n+\t(bfloat16x8x4_t): New typedef.\n+\t(vst2_bf16): New.\n+\t(vst2q_bf16): New.\n+\t(vst3_bf16): New.\n+\t(vst3q_bf16): New.\n+\t(vst4_bf16): New.\n+\t(vst4q_bf16): New.\n+\t* config/arm/arm-builtins.c (v2bf_UP): Define.\n+\t(VAR13): New.\n+\t(arm_init_simd_builtin_types): Init Bfloat16x2_t eltype.\n+\t* config/arm/arm-modes.def (V2BF): New mode.\n+\t* config/arm/arm-simd-builtin-types.def\n+\t(Bfloat16x2_t): New entry.\n+\t* config/arm/arm_neon_builtins.def\n+\t(vst2): Changed to VAR13 and added v4bf, v8bf\n+\t(vst3): Changed to VAR13 and added v4bf, v8bf\n+\t(vst4): Changed to VAR13 and added v4bf, v8bf\n+\t* config/arm/iterators.md (VDXBF): New iterator.\n+\t(VQ2BF): New iterator.\n+\t*config/arm/neon.md (neon_vst2<mode>): Used new iterators.\n+\t(neon_vst2<mode>): Used new iterators.\n+\t(neon_vst3<mode>): Used new iterators.\n+\t(neon_vst3<mode>): Used new iterators.\n+\t(neon_vst3qa<mode>): Used new iterators.\n+\t(neon_vst3qb<mode>): Used new iterators.\n+\t(neon_vst4<mode>): Used new iterators.\n+\t(neon_vst4<mode>): Used new iterators.\n+\t(neon_vst4qa<mode>): Used new iterators.\n+\t(neon_vst4qb<mode>): Used new iterators.\n+\n 2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def"}, {"sha": "e0561c58fb3367876ce0164880df76f7331ec4e8", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -342,6 +342,7 @@ arm_set_sat_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define v4bf_UP  E_V4BFmode\n #define v2si_UP  E_V2SImode\n #define v2sf_UP  E_V2SFmode\n+#define v2bf_UP  E_V2BFmode\n #define di_UP    E_DImode\n #define v16qi_UP E_V16QImode\n #define v8hi_UP  E_V8HImode\n@@ -405,6 +406,9 @@ typedef struct {\n #define VAR12(T, N, A, B, C, D, E, F, G, H, I, J, K, L) \\\n   VAR11 (T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n   VAR1 (T, N, L)\n+#define VAR13(T, N, A, B, C, D, E, F, G, H, I, J, K, L, M) \\\n+  VAR12 (T, N, A, B, C, D, E, F, G, H, I, J, K, L) \\\n+  VAR1 (T, N, M)\n \n /* The builtin data can be found in arm_neon_builtins.def, arm_vfp_builtins.def\n    and arm_acle_builtins.def.  The entries in arm_neon_builtins.def require\n@@ -1037,6 +1041,7 @@ arm_init_simd_builtin_types (void)\n   arm_simd_types[Float32x4_t].eltype = float_type_node;\n \n   /* Init Bfloat vector types with underlying __bf16 scalar type.  */\n+  arm_simd_types[Bfloat16x2_t].eltype = arm_bf16_type_node;\n   arm_simd_types[Bfloat16x4_t].eltype = arm_bf16_type_node;\n   arm_simd_types[Bfloat16x8_t].eltype = arm_bf16_type_node;\n "}, {"sha": "6e48223b63d98fcbe38960700dd0949d74629f7f", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -80,6 +80,7 @@ VECTOR_MODE (FLOAT, HF, 2);   /*                 V2HF */\n \n FLOAT_MODE (BF, 2, 0);\n ADJUST_FLOAT_FORMAT (BF, &arm_bfloat_half_format);\n+VECTOR_MODE (FLOAT, BF, 2);   /*                 V2BF.  */\n VECTOR_MODE (FLOAT, BF, 4);   /*\t\t V4BF.  */\n VECTOR_MODE (FLOAT, BF, 8);   /*\t\t V8BF.  */\n "}, {"sha": "e35bb765cdf60b127f844877ca938dfb674ec16a", "filename": "gcc/config/arm/arm-simd-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm-simd-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm-simd-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-simd-builtin-types.def?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -48,5 +48,6 @@\n   ENTRY (Float16x8_t, V8HF, none, 128, float16, 19)\n   ENTRY (Float32x4_t, V4SF, none, 128, float32, 19)\n \n+  ENTRY (Bfloat16x2_t, V2BF, none, 32, bfloat16, 20)\n   ENTRY (Bfloat16x4_t, V4BF, none, 64, bfloat16, 20)\n   ENTRY (Bfloat16x8_t, V8BF, none, 128, bfloat16, 20)"}, {"sha": "4ab79d55e1f81151fc99dd2c357512ea01b1cad4", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -19382,6 +19382,36 @@ vbfdotq_lane_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x4_t __b,\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.2-a+bf16\")\n \n+typedef struct bfloat16x4x2_t\n+{\n+  bfloat16x4_t val[2];\n+} bfloat16x4x2_t;\n+\n+typedef struct bfloat16x8x2_t\n+{\n+  bfloat16x8_t val[2];\n+} bfloat16x8x2_t;\n+\n+typedef struct bfloat16x4x3_t\n+{\n+  bfloat16x4_t val[3];\n+} bfloat16x4x3_t;\n+\n+typedef struct bfloat16x8x3_t\n+{\n+  bfloat16x8_t val[3];\n+} bfloat16x8x3_t;\n+\n+typedef struct bfloat16x4x4_t\n+{\n+  bfloat16x4_t val[4];\n+} bfloat16x4x4_t;\n+\n+typedef struct bfloat16x8x4_t\n+{\n+  bfloat16x8_t val[4];\n+} bfloat16x8x4_t;\n+\n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcvt_f32_bf16 (bfloat16x4_t __a)\n@@ -19479,6 +19509,54 @@ vbfmlaltq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n   return __builtin_neon_vfmat_laneqv8bf (__r, __a, __b, __index);\n }\n \n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst2_bf16 (bfloat16_t * __ptr, bfloat16x4x2_t __val)\n+{\n+  union { bfloat16x4x2_t __i; __builtin_neon_ti __o; } __bu = { __val };\n+  return __builtin_neon_vst2v4bf (__ptr, __bu.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst2q_bf16 (bfloat16_t * __ptr, bfloat16x8x2_t __val)\n+{\n+  union { bfloat16x8x2_t __i; __builtin_neon_oi __o; } __bu = { __val };\n+  return __builtin_neon_vst2v8bf (__ptr, __bu.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst3_bf16 (bfloat16_t * __ptr, bfloat16x4x3_t __val)\n+{\n+  union { bfloat16x4x3_t __i; __builtin_neon_ei __o; } __bu = { __val };\n+  return __builtin_neon_vst3v4bf (__ptr, __bu.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst3q_bf16 (bfloat16_t * __ptr, bfloat16x8x3_t __val)\n+{\n+  union { bfloat16x8x3_t __i; __builtin_neon_ci __o; } __bu = { __val };\n+  return __builtin_neon_vst3v8bf (__ptr, __bu.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst4_bf16 (bfloat16_t * __ptr, bfloat16x4x4_t __val)\n+{\n+  union { bfloat16x4x4_t __i; __builtin_neon_oi __o; } __bu = { __val };\n+  return __builtin_neon_vst4v4bf (__ptr, __bu.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vst4q_bf16 (bfloat16_t * __ptr, bfloat16x8x4_t __val)\n+{\n+  union { bfloat16x8x4_t __i; __builtin_neon_xi __o; } __bu = { __val };\n+  return __builtin_neon_vst4v8bf (__ptr, __bu.__o);\n+}\n+\n #pragma GCC pop_options\n \n #ifdef __cplusplus"}, {"sha": "b73b3e5bba1313080969b30bb8cd8b504ea88cc3", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -325,26 +325,26 @@ VAR11 (LOAD1, vld2,\n VAR9 (LOAD1LANE, vld2_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n VAR6 (LOAD1, vld2_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n-VAR11 (STORE1, vst2,\n-\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR13 (STORE1, vst2,\n+\tv8qi, v4hi, v4hf, v4bf, v2si, v2sf, di, v16qi, v8hi, v8hf, v8bf, v4si, v4sf)\n VAR9 (STORE1LANE, vst2_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n VAR11 (LOAD1, vld3,\n \tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n VAR9 (LOAD1LANE, vld3_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n VAR6 (LOAD1, vld3_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n-VAR11 (STORE1, vst3,\n-\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR13 (STORE1, vst3,\n+\tv8qi, v4hi, v4hf, v4bf, v2si, v2sf, di, v16qi, v8hi, v8hf, v8bf, v4si, v4sf)\n VAR9 (STORE1LANE, vst3_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n VAR11 (LOAD1, vld4,\n \tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n VAR9 (LOAD1LANE, vld4_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n VAR6 (LOAD1, vld4_dup, v8qi, v4hi, v4hf, v2si, v2sf, di)\n-VAR11 (STORE1, vst4,\n-\tv8qi, v4hi, v4hf, v2si, v2sf, di, v16qi, v8hi, v8hf, v4si, v4sf)\n+VAR13 (STORE1, vst4,\n+\tv8qi, v4hi, v4hf, v4bf, v2si, v2sf, di, v16qi, v8hi, v8hf, v8bf, v4si, v4sf)\n VAR9 (STORE1LANE, vst4_lane,\n \tv8qi, v4hi, v4hf, v2si, v2sf, v8hi, v8hf, v4si, v4sf)\n VAR2 (TERNOP, sdot, v8qi, v16qi)"}, {"sha": "8ff3c156601425121684640b5454badab4463416", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -84,6 +84,9 @@\n ;; Double-width vector modes plus 64-bit elements.\n (define_mode_iterator VDX [V8QI V4HI V4HF V4BF V2SI V2SF DI])\n \n+;; Double-width vector modes plus 64-bit elements, including V4BF.\n+(define_mode_iterator VDXBF [V8QI V4HI V4HF (V4BF \"TARGET_BF16_SIMD\") V2SI V2SF DI])\n+\n ;; Double-width vector modes plus 64-bit elements,\n ;; with V4BFmode added, suitable for moves.\n (define_mode_iterator VDXMOV [V8QI V4HI V4HF V4BF V2SI V2SF DI])\n@@ -100,6 +103,9 @@\n ;; Quad-width vector modes, including V8HF.\n (define_mode_iterator VQ2 [V16QI V8HI V8HF V4SI V4SF])\n \n+;; Quad-width vector modes, including V8BF.\n+(define_mode_iterator VQ2BF [V16QI V8HI V8HF (V8BF \"TARGET_BF16_SIMD\") V4SI V4SF])\n+\n ;; Quad-width vector modes with 16- or 32-bit elements\n (define_mode_iterator VQ_HS [V8HI V8HF V4SI V4SF])\n "}, {"sha": "250d5784810cb45496d62b0a67950b5afc33abe8", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -5541,7 +5541,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst2<mode>\"\n   [(set (match_operand:TI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:TI [(match_operand:TI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST2))]\n   \"TARGET_NEON\"\n {\n@@ -5566,7 +5566,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst2<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n \t(unspec:OI [(match_operand:OI 1 \"s_register_operand\" \"w\")\n-\t\t    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t\t    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t\t   UNSPEC_VST2))]\n   \"TARGET_NEON\"\n   \"vst2.<V_sz_elem>\\t%h1, %A0\"\n@@ -5810,7 +5810,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst3<mode>\"\n   [(set (match_operand:EI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:EI [(match_operand:EI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST3))]\n   \"TARGET_NEON\"\n {\n@@ -5837,7 +5837,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vst3<mode>\"\n   [(match_operand:CI 0 \"neon_struct_operand\")\n    (match_operand:CI 1 \"s_register_operand\")\n-   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -5852,7 +5852,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst3qa<mode>\"\n   [(set (match_operand:EI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:EI [(match_operand:CI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST3A))]\n   \"TARGET_NEON\"\n {\n@@ -5871,7 +5871,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst3qb<mode>\"\n   [(set (match_operand:EI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:EI [(match_operand:CI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST3B))]\n   \"TARGET_NEON\"\n {\n@@ -6135,7 +6135,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst4<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:OI [(match_operand:OI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VDX [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VDXBF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST4))]\n   \"TARGET_NEON\"\n {\n@@ -6163,7 +6163,7 @@ if (BYTES_BIG_ENDIAN)\n (define_expand \"neon_vst4<mode>\"\n   [(match_operand:XI 0 \"neon_struct_operand\")\n    (match_operand:XI 1 \"s_register_operand\")\n-   (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+   (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_NEON\"\n {\n   rtx mem;\n@@ -6178,7 +6178,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst4qa<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:OI [(match_operand:XI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST4A))]\n   \"TARGET_NEON\"\n {\n@@ -6198,7 +6198,7 @@ if (BYTES_BIG_ENDIAN)\n (define_insn \"neon_vst4qb<mode>\"\n   [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n         (unspec:OI [(match_operand:XI 1 \"s_register_operand\" \"w\")\n-                    (unspec:VQ2 [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+                    (unspec:VQ2BF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n                    UNSPEC_VST4B))]\n   \"TARGET_NEON\"\n {"}, {"sha": "b7bbb47e7d143b2c3fa3478f622ef097eb3f7b9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -1,3 +1,7 @@\n+2020-03-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* gcc.target/arm/simd/bf16_vstn_1.c: New test.\n+\n 2020-03-06  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* gcc.target/riscv/pr93304.c: Update expected output and comment."}, {"sha": "2657b6f7cc4f3b5b7089a962933931b16686083a", "filename": "gcc/testsuite/gcc.target/arm/simd/bf16_vstn_1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_vstn_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff229375721d1763a18ec76403aa1215b2932fb3/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_vstn_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fbf16_vstn_1.c?ref=ff229375721d1763a18ec76403aa1215b2932fb3", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps -O2 -mfloat-abi=hard\" }  */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"arm_neon.h\"\n+\n+/*\n+**test_vst2_bf16:\n+**\t...\n+**\tvst2.16\t{d0-d1}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+void\n+test_vst2_bf16 (bfloat16_t *ptr, bfloat16x4x2_t val)\n+{\n+  vst2_bf16 (ptr, val);\n+}\n+\n+/*\n+**test_vst2q_bf16:\n+**      ...\n+**\tvst2.16\t{d0-d3}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+void\n+test_vst2q_bf16 (bfloat16_t *ptr, bfloat16x8x2_t val)\n+{\n+  vst2q_bf16 (ptr, val);\n+}\n+\n+/*\n+**test_vst3_bf16:\n+**      ...\n+**\tvst3.16\t{d0-d2}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+void\n+test_vst3_bf16 (bfloat16_t *ptr, bfloat16x4x3_t val)\n+{\n+  vst3_bf16 (ptr, val);\n+}\n+\n+/*\n+**test_vst3q_bf16:\n+**      ...\n+**\tvst3.16\t{d17, d19, d21}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+void\n+test_vst3q_bf16 (bfloat16_t *ptr, bfloat16x8x3_t val)\n+{\n+  vst3q_bf16 (ptr, val);\n+}\n+\n+/*\n+**test_vst4_bf16:\n+**      ...\n+**\tvst4.16\t{d0-d3}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+void\n+test_vst4_bf16 (bfloat16_t *ptr, bfloat16x4x4_t val)\n+{\n+  vst4_bf16 (ptr, val);\n+}\n+\n+/*\n+**test_vst4q_bf16:\n+**      ...\n+**\tvst4.16\t{d1, d3, d5, d7}, \\[r0\\]\n+**\tbx\tlr\n+*/\n+void\n+test_vst4q_bf16 (bfloat16_t *ptr, bfloat16x8x4_t val)\n+{\n+  vst4q_bf16 (ptr, val);\n+}\n+\n+int main()\n+{\n+  return 0;\n+}"}]}