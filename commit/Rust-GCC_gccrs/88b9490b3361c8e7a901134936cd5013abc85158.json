{"sha": "88b9490b3361c8e7a901134936cd5013abc85158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiOTQ5MGIzMzYxYzhlN2E5MDExMzQ5MzZjZDUwMTNhYmM4NTE1OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-06-10T18:50:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-10T18:50:23Z"}, "message": "i386.md (*btdi_rex64): Change operand 1 predicate to nonmemory_operand.\n\n\t* config/i386/i386.md (*btdi_rex64): Change operand 1 predicate to\n\tnonmemory_operand. Add \"N\" operand constraint.\n\t(*btsi): Ditto.\n\t(*jcc_btdi_mask_rex64): New instruction and split pattern.\n\t(*jcc_btsi_mask): Ditto.\n\t(*jcc_btsi_mask_1): Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/bt-mask-1.c: New test.\n\t* gcc.target/i386/bt-mask-2.c: Ditto.\n\nFrom-SVN: r136636", "tree": {"sha": "b5e9c0865ee8dd8c7864bd6bd254cb9564f5e0a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e9c0865ee8dd8c7864bd6bd254cb9564f5e0a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b9490b3361c8e7a901134936cd5013abc85158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b9490b3361c8e7a901134936cd5013abc85158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b9490b3361c8e7a901134936cd5013abc85158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b9490b3361c8e7a901134936cd5013abc85158/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0627bfb411bf2b4b88076fdc3fca5fb395cfb090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0627bfb411bf2b4b88076fdc3fca5fb395cfb090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0627bfb411bf2b4b88076fdc3fca5fb395cfb090"}], "stats": {"total": 149, "additions": 145, "deletions": 4}, "files": [{"sha": "4fcc73f30c7e7df1193f0cd8680cf0c4ff08fd44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88b9490b3361c8e7a901134936cd5013abc85158", "patch": "@@ -1,3 +1,12 @@\n+2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*btdi_rex64): Change operand 1 predicate to\n+\tnonmemory_operand. Add \"N\" operand constraint.\n+\t(*btsi): Ditto.\n+\t(*jcc_btdi_mask_rex64): New instruction and split pattern.\n+\t(*jcc_btsi_mask): Ditto.\n+\t(*jcc_btsi_mask_1): Ditto.\n+\n 2008-06-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (build_opaque_vector_type): Set"}, {"sha": "ca01494871f22450e3ca5f5dc5e8417dfc6a352e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 97, "deletions": 2, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=88b9490b3361c8e7a901134936cd5013abc85158", "patch": "@@ -13819,7 +13819,7 @@\n \t  (zero_extract:DI\n \t    (match_operand:DI 0 \"register_operand\" \"r\")\n \t    (const_int 1)\n-\t    (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t    (match_operand:DI 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n   \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\"\n   \"bt{q}\\t{%1, %0|%0, %1}\"\n@@ -13831,7 +13831,7 @@\n \t  (zero_extract:SI\n \t    (match_operand:SI 0 \"register_operand\" \"r\")\n \t    (const_int 1)\n-\t    (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t    (match_operand:SI 1 \"nonmemory_operand\" \"rN\"))\n \t  (const_int 0)))]\n   \"TARGET_USE_BT || optimize_size\"\n   \"bt{l}\\t{%1, %0|%0, %1}\"\n@@ -14117,6 +14117,39 @@\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n+;; avoid useless masking of bit offset operand\n+(define_insn_and_split \"*jcc_btdi_mask_rex64\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:DI\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (and:SI\n+\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n+\t\t      (label_ref (match_operand 4 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\n+   && (INTVAL (operands[3]) & 0x3f) == 0x3f\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:DI\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 4))\n+\t\t      (pc)))]\n+{\n+  operands[2] = simplify_gen_subreg (DImode, operands[2], SImode, 0);\n+\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n (define_insn_and_split \"*jcc_btsi\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n@@ -14148,6 +14181,35 @@\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n+;; avoid useless masking of bit offset operand\n+(define_insn_and_split \"*jcc_btsi_mask\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:SI\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (and:SI\n+\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")))])\n+\t\t      (label_ref (match_operand 4 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(TARGET_USE_BT || optimize_size)\n+   && (INTVAL (operands[3]) & 0x1f) == 0x1f\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SI\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 4))\n+\t\t      (pc)))]\n+  \"PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\")\n+\n (define_insn_and_split \"*jcc_btsi_1\"\n   [(set (pc)\n   \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n@@ -14179,6 +14241,39 @@\n   PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n })\n \n+;; avoid useless masking of bit offset operand\n+(define_insn_and_split \"*jcc_btsi_mask_1\"\n+  [(set (pc)\n+  \t(if_then_else\n+\t  (match_operator 0 \"bt_comparison_operator\"\n+\t    [(and:SI\n+\t       (lshiftrt:SI\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t (subreg:QI\n+\t\t   (and:SI\n+\t\t     (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 3 \"const_int_operand\" \"n\")) 0))\n+\t       (const_int 1))\n+\t     (const_int 0)])\n+\t  (label_ref (match_operand 4 \"\" \"\"))\n+\t  (pc)))]\n+  \"(TARGET_USE_BT || optimize_size)\n+   && (INTVAL (operands[3]) & 0x1f) == 0x1f\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SI\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 4))\n+\t\t      (pc)))]\n+  \"PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\")\n+\n ;; Define combination compare-and-branch fp compare instructions to use\n ;; during early optimization.  Splitting the operation apart early makes\n ;; for bad code when we want to reverse the operation."}, {"sha": "072a5cb948f955451d287a4fa4a2cd485903e0f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88b9490b3361c8e7a901134936cd5013abc85158", "patch": "@@ -1,8 +1,13 @@\n+2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/bt-mask-1.c: New test.\n+\t* gcc.target/i386/bt-mask-2.c: Ditto.\n+\n 2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/36473\n-\t* testsuite/gcc.target/i386/bt-1.c: New test.\n-\t* testsuite/gcc.target/i386/bt-2.c: Ditto.\n+\t* gcc.target/i386/bt-1.c: New test.\n+\t* gcc.target/i386/bt-2.c: Ditto.\n \n 2008-06-09  Andy Hutchinson  <hutchinsonandy@aim.com>\n "}, {"sha": "bdcfd558a1b8af6245a4c6ca78f8496ad40dd7cb", "filename": "gcc/testsuite/gcc.target/i386/bt-mask-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-1.c?ref=88b9490b3361c8e7a901134936cd5013abc85158", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+void foo (void);\n+\n+int test (int x, int n)\n+{\n+  n &= 0x1f;\n+\n+  if (x & (0x01 << n))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}, {"sha": "babfc2bcd364bd819643469085bbfa32e19dca10", "filename": "gcc/testsuite/gcc.target/i386/bt-mask-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b9490b3361c8e7a901134936cd5013abc85158/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-mask-2.c?ref=88b9490b3361c8e7a901134936cd5013abc85158", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+void foo (void);\n+\n+int test (long x, long n)\n+{\n+  n &= 0x3f;\n+\n+  if (x & ((long)0x01 << n))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}]}