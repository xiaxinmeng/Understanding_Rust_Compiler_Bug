{"sha": "59be80716a573cde48aadcfeabefde101bdd4a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliZTgwNzE2YTU3M2NkZTQ4YWFkY2ZlYWJlZmRlMTAxYmRkNGEyNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-06-13T20:12:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-06-13T20:12:40Z"}, "message": "re PR fortran/32323 (Accepts invalid vector subscript actual argument for intent(out) dummy argument)\n\n2007-06-13  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32323\n\t* interface.c (has_vector_section): New.\n\t(compare_actual_formal): Check for array sections with vector subscript.\n\n2007-06-13  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32323\n\t* gfortran.dg/actual_array_vect_1.f90: New.\n\nFrom-SVN: r125684", "tree": {"sha": "8d629a99edebd9a72e01d1870806ca5ee9f3876a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d629a99edebd9a72e01d1870806ca5ee9f3876a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59be80716a573cde48aadcfeabefde101bdd4a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59be80716a573cde48aadcfeabefde101bdd4a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59be80716a573cde48aadcfeabefde101bdd4a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59be80716a573cde48aadcfeabefde101bdd4a26/comments", "author": null, "committer": null, "parents": [{"sha": "ddb4f387ee60618b1cb04d2143b47f808f9c9e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb4f387ee60618b1cb04d2143b47f808f9c9e02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb4f387ee60618b1cb04d2143b47f808f9c9e02"}], "stats": {"total": 170, "additions": 125, "deletions": 45}, "files": [{"sha": "43fcc43e053e2c99feed3e28f52b514d0f29319c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=59be80716a573cde48aadcfeabefde101bdd4a26", "patch": "@@ -1,3 +1,9 @@\n+2007-06-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32323\n+\t* interface.c (has_vector_section): New.\n+\t(compare_actual_formal): Check for array sections with vector subscript.\n+\n 2007-06-12  Dirk Mueller  <dmueller@suse.de>\n \n \t* trans-stmt.c (gfc_trans_call): fix gcc_assert to"}, {"sha": "591e46e0af2209afa6aece9c9ed2b499e494425f", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=59be80716a573cde48aadcfeabefde101bdd4a26", "patch": "@@ -1261,6 +1261,29 @@ compare_parameter_protected (gfc_symbol *formal, gfc_expr *actual)\n }\n \n \n+/* Given an expression, check whether it is an array section\n+   which has a vector subscript. If it has, one is returned,\n+   otherwise zero.  */\n+\n+static int\n+has_vector_subscript (gfc_expr *e)\n+{\n+  int i;\n+  gfc_ref *ref;\n+\n+  if (e == NULL || e->rank == 0 || e->expr_type != EXPR_VARIABLE)\n+    return 0;\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    if (ref->type == REF_ARRAY && ref->u.ar.type == AR_SECTION)\n+      for (i = 0; i < ref->u.ar.dimen; i++)\n+\tif (ref->u.ar.dimen_type[i] == DIMEN_VECTOR)\n+\t  return 1;\n+\n+  return 0;\n+}\n+\n+\n /* Given formal and actual argument lists, see if they are compatible.\n    If they are compatible, the actual argument list is sorted to\n    correspond with the formal list, and elements for missing optional\n@@ -1471,6 +1494,19 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  return 0;\n \t}\n \n+      if ((f->sym->attr.intent == INTENT_OUT\n+\t   || f->sym->attr.intent == INTENT_INOUT\n+\t   || f->sym->attr.volatile_)\n+          && has_vector_subscript (a->expr))\n+\t{\n+\t  if (where)\n+\t    gfc_error (\"Array-section actual argument with vector subscripts \"\n+\t\t       \"at %L is incompatible with INTENT(IN), INTENT(INOUT) \"\n+\t\t       \"or VOLATILE attribute of the dummy argument '%s'\",\n+\t\t       &a->expr->where, f->sym->name);\n+\t  return 0;\n+\t}\n+\n       /* C1232 (R1221) For an actual argument which is an array section or\n \t an assumed-shape array, the dummy argument shall be an assumed-\n \t shape array, if the dummy argument has the VOLATILE attribute.  */"}, {"sha": "a0c242b403e30208d0e9f61c66b6b091bf2fcea3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59be80716a573cde48aadcfeabefde101bdd4a26", "patch": "@@ -1,3 +1,8 @@\n+2007-06-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32323\n+\t* gfortran.dg/actual_array_vect_1.f90: New.\n+\n 2007-06-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.target/sparc/mfpu.c: New test.\n@@ -61,8 +66,8 @@\n \n 2007-06-11  Paolo Bonzini  <bonzini@gnu.org>\n \n-        PR rtl-optimization/31025\n-        * gfortran.dg/pr31025.f90: New.\n+\tPR rtl-optimization/31025\n+\t* gfortran.dg/pr31025.f90: New.\n \n 2007-06-11  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -335,53 +340,53 @@\n \t* g++.dg/ext/is_pod_incomplete.C: New.\n \n 2007-05-31  Russell Yanofsky <russ@yanofsky.org>\n-            Douglas Gregor <doug.gregor@gmail.com>\n-            Pedro Lamarao <pedro.lamarao@mndfck.org>\n-            Howard Hinnant <howard.hinnant@gmail.com>\n+\t    Douglas Gregor <doug.gregor@gmail.com>\n+\t    Pedro Lamarao <pedro.lamarao@mndfck.org>\n+\t    Howard Hinnant <howard.hinnant@gmail.com>\n \n \tPR c++/7412\n \tPR c++/29939\n-        * g++.dg/cpp0x/rv8p.C: New.\n-        * g++.dg/cpp0x/temp-constructor-bug.C: New.\n-        * g++.dg/cpp0x/cast-bug.C: New.\n-        * g++.dg/cpp0x/elision_weak.C: New.\n-        * g++.dg/cpp0x/collapse-bug.C: New.\n-        * g++.dg/cpp0x/rv3p.C: New.\n-        * g++.dg/cpp0x/rv7n.C: New.\n-        * g++.dg/cpp0x/overload-conv-1.C: New.\n-        * g++.dg/cpp0x/rv2n.C: New.\n-        * g++.dg/cpp0x/deduce.C: New.\n-        * g++.dg/cpp0x/temp-va-arg-bug.C: New.\n-        * g++.dg/cpp0x/rv6p.C: New.\n-        * g++.dg/cpp0x/template_deduction.C: New.\n-        * g++.dg/cpp0x/implicit-copy.C: New.\n-        * g++.dg/cpp0x/rv1p.C: New.\n-        * g++.dg/cpp0x/cast.C: New.\n-        * g++.dg/cpp0x/rv5n.C: New.\n-        * g++.dg/cpp0x/collapse.C: New.\n-        * g++.dg/cpp0x/overload-conv-2.C: New.\n-        * g++.dg/cpp0x/rv4p.C: New.\n+\t* g++.dg/cpp0x/rv8p.C: New.\n+\t* g++.dg/cpp0x/temp-constructor-bug.C: New.\n+\t* g++.dg/cpp0x/cast-bug.C: New.\n+\t* g++.dg/cpp0x/elision_weak.C: New.\n+\t* g++.dg/cpp0x/collapse-bug.C: New.\n+\t* g++.dg/cpp0x/rv3p.C: New.\n+\t* g++.dg/cpp0x/rv7n.C: New.\n+\t* g++.dg/cpp0x/overload-conv-1.C: New.\n+\t* g++.dg/cpp0x/rv2n.C: New.\n+\t* g++.dg/cpp0x/deduce.C: New.\n+\t* g++.dg/cpp0x/temp-va-arg-bug.C: New.\n+\t* g++.dg/cpp0x/rv6p.C: New.\n+\t* g++.dg/cpp0x/template_deduction.C: New.\n+\t* g++.dg/cpp0x/implicit-copy.C: New.\n+\t* g++.dg/cpp0x/rv1p.C: New.\n+\t* g++.dg/cpp0x/cast.C: New.\n+\t* g++.dg/cpp0x/rv5n.C: New.\n+\t* g++.dg/cpp0x/collapse.C: New.\n+\t* g++.dg/cpp0x/overload-conv-2.C: New.\n+\t* g++.dg/cpp0x/rv4p.C: New.\n \t* g++.dg/cpp0x/rvo.C: New.\n-        * g++.dg/cpp0x/iop.C: New.\n-        * g++.dg/cpp0x/rv3n.C: New.\n-        * g++.dg/cpp0x/rv7p.C: New.\n-        * g++.dg/cpp0x/reference_collapsing.C: New.\n-        * g++.dg/cpp0x/overload.C: New.\n-        * g++.dg/cpp0x/named.C: New.\n-        * g++.dg/cpp0x/rv2p.C: New.\n-        * g++.dg/cpp0x/rv6n.C: New.\n-        * g++.dg/cpp0x/not_special.C: New.\n-        * g++.dg/cpp0x/bind.C: New.\n-        * g++.dg/cpp0x/rv1n.C: New.\n-        * g++.dg/cpp0x/rv5p.C: New.\n-        * g++.dg/cpp0x/elision.C: New.\n-        * g++.dg/cpp0x/named_refs.C: New.\n-        * g++.dg/cpp0x/unnamed_refs.C: New.\n-        * g++.dg/cpp0x/rv4n.C: New.\n-        * g++.dg/cpp0x/elision_neg.C: New.\n-        * g++.dg/init/copy7.C: Run in C++98 mode.\n-        * g++.dg/overload/arg1.C: Ditto.\n-        * g++.dg/overload/arg4.C: Ditto.\n+\t* g++.dg/cpp0x/iop.C: New.\n+\t* g++.dg/cpp0x/rv3n.C: New.\n+\t* g++.dg/cpp0x/rv7p.C: New.\n+\t* g++.dg/cpp0x/reference_collapsing.C: New.\n+\t* g++.dg/cpp0x/overload.C: New.\n+\t* g++.dg/cpp0x/named.C: New.\n+\t* g++.dg/cpp0x/rv2p.C: New.\n+\t* g++.dg/cpp0x/rv6n.C: New.\n+\t* g++.dg/cpp0x/not_special.C: New.\n+\t* g++.dg/cpp0x/bind.C: New.\n+\t* g++.dg/cpp0x/rv1n.C: New.\n+\t* g++.dg/cpp0x/rv5p.C: New.\n+\t* g++.dg/cpp0x/elision.C: New.\n+\t* g++.dg/cpp0x/named_refs.C: New.\n+\t* g++.dg/cpp0x/unnamed_refs.C: New.\n+\t* g++.dg/cpp0x/rv4n.C: New.\n+\t* g++.dg/cpp0x/elision_neg.C: New.\n+\t* g++.dg/init/copy7.C: Run in C++98 mode.\n+\t* g++.dg/overload/arg1.C: Ditto.\n+\t* g++.dg/overload/arg4.C: Ditto.\n \n 2007-05-30  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "8b4d6f495198e15eb64cf6a14e40077a5515135e", "filename": "gcc/testsuite/gfortran.dg/actual_array_vect_1.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_vect_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59be80716a573cde48aadcfeabefde101bdd4a26/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_vect_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_vect_1.f90?ref=59be80716a573cde48aadcfeabefde101bdd4a26", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! PR fortran/32323\n+! Array sections with vector subscripts are not allowed\n+! with dummy arguments which have VOLATILE or INTENT OUT/INOUT\n+!\n+! Contributed by terry@chem.gu.se\n+!\n+module mod\n+implicit none\n+contains\n+subroutine aa(v)\n+integer,dimension(:),volatile::v\n+write(*,*)size(v)\n+v=0\n+end subroutine aa\n+subroutine bb(v)\n+integer,dimension(:),intent(out)::v\n+write(*,*)size(v)\n+v=0\n+end subroutine bb\n+end module mod\n+\n+program ff\n+use mod\n+implicit none\n+integer,dimension(10)::w\n+w=1\n+call aa(w(2:4))\n+call aa(w((/3,2,1/))) ! { dg-error \"vector subscript\" }\n+call bb(w(2:4))\n+call bb(w((/3,2,1/))) ! { dg-error \"vector subscript\" }\n+write(*,*)w\n+end"}]}