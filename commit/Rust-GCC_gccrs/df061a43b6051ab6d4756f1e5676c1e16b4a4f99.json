{"sha": "df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwNjFhNDNiNjA1MWFiNmQ0NzU2ZjFlNTY3NmMxZTE2YjRhNGY5OQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-07-06T00:16:44Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-07-06T00:16:44Z"}, "message": "re PR c++/7099 (G++ doesn't set the noreturn attribute on std::exit and std::abort)\n\n\n\tPR c++/7099\n\t* builtin-attrs.def: Define new attribute lists for use in\n\tbuiltins.def.\n\t* builtins.def [DEF_BUILTIN]: Modify to take an additional\n\tATTRS argument, an enumerated value defined in builtin-attrs.def\n\tthat represents the attribute list for the builtins.  Modify\n\tall builtin functions to pass an appropriate attribute list.\n\tSpecify \"abort\", \"exit\", \"_exit\" and \"_Exit\" builtins here with\n\ttheir required noreturn attributes.\n\t* tree.h (enum_builtin_function): Ignore the additional parameter\n\tto DEF_BUILTIN.\n\t* builtins.c (built_in_names): Likewise.\n\t* c-common.c: (builtin_function_2): Replace the \"int noreturn_p\"\n\targument with a tree representing the functions attribute list.\n\tPass this \"attrs\" argument to builtin_function.  No longer handle\n\tthe noreturn_p processing manually.\n\t(built_in_attributes): Move the definitions from builtin-attrs.def\n\tbefore c_common_nodes_and_builtins.\n\t(c_common_nodes_and_builtins): Handle the new ATTRS parameter in\n\tDEF_BUILTIN, passing it to both builtin_function and the changed\n\tbuiltin_function_2.\n\n\t* doc/extend.texi: Document __builtin_abort, __builtin_exit,\n\t__builtin__exit and __builtin__Exit.\n\n\t* java/builtins.c (initialize_builtins): Ignore the additional\n\tparameter to DEF_BUILTIN.  Handle more C/C++ specific junk in\n\tthe builtins.def file.\n\nFrom-SVN: r55276", "tree": {"sha": "da467fb72d54d71cd83e12f6ba76c83be6c4cb53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da467fb72d54d71cd83e12f6ba76c83be6c4cb53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/comments", "author": null, "committer": null, "parents": [{"sha": "e5eb8de83c189172ca3944fee397ceaca60ad4ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5eb8de83c189172ca3944fee397ceaca60ad4ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5eb8de83c189172ca3944fee397ceaca60ad4ae"}], "stats": {"total": 396, "additions": 250, "deletions": 146}, "files": [{"sha": "9e0987735ce3c6b9615844f7f1f0eeea1aabe76d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -1,3 +1,30 @@\n+2002-07-05  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c++/7099\n+\t* builtin-attrs.def: Define new attribute lists for use in\n+\tbuiltins.def.\n+\t* builtins.def [DEF_BUILTIN]: Modify to take an additional\n+\tATTRS argument, an enumerated value defined in builtin-attrs.def\n+\tthat represents the attribute list for the builtins.  Modify\n+\tall builtin functions to pass an appropriate attribute list.\n+\tSpecify \"abort\", \"exit\", \"_exit\" and \"_Exit\" builtins here with\n+\ttheir required noreturn attributes.\n+\t* tree.h (enum_builtin_function): Ignore the additional parameter\n+\tto DEF_BUILTIN.\n+\t* builtins.c (built_in_names): Likewise.\n+\t* c-common.c: (builtin_function_2): Replace the \"int noreturn_p\"\n+\targument with a tree representing the functions attribute list.\n+\tPass this \"attrs\" argument to builtin_function.  No longer handle\n+\tthe noreturn_p processing manually.\n+\t(built_in_attributes): Move the definitions from builtin-attrs.def\n+\tbefore c_common_nodes_and_builtins.\n+\t(c_common_nodes_and_builtins): Handle the new ATTRS parameter in\n+\tDEF_BUILTIN, passing it to both builtin_function and the changed\n+\tbuiltin_function_2.\n+\n+\t* doc/extend.texi: Document __builtin_abort, __builtin_exit,\n+\t__builtin__exit and __builtin__Exit.\n+\n 2002-07-05  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.md (\"*movqi_68hc12\"): Avoid allocating"}, {"sha": "b307151d5089279f3214f5cded8b102d12b72a76", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -77,15 +77,30 @@ DEF_LIST_INT_INT (3,0)\n DEF_LIST_INT_INT (3,4)\n #undef DEF_LIST_INT_INT\n \n+/* Construct tress for identifiers.  */\n+DEF_ATTR_IDENT (ATTR_CONST, \"const\")\n+DEF_ATTR_IDENT (ATTR_FORMAT, \"format\")\n+DEF_ATTR_IDENT (ATTR_FORMAT_ARG, \"format_arg\")\n+DEF_ATTR_IDENT (ATTR_MALLOC, \"malloc\")\n+DEF_ATTR_IDENT (ATTR_NONNULL, \"nonnull\")\n+DEF_ATTR_IDENT (ATTR_NORETURN, \"noreturn\")\n+DEF_ATTR_IDENT (ATTR_NOTHROW, \"nothrow\")\n DEF_ATTR_IDENT (ATTR_PRINTF, \"printf\")\n+DEF_ATTR_IDENT (ATTR_PURE, \"pure\")\n DEF_ATTR_IDENT (ATTR_SCANF, \"scanf\")\n-DEF_ATTR_IDENT (ATTR_STRFTIME, \"strftime\")\n DEF_ATTR_IDENT (ATTR_STRFMON, \"strfmon\")\n+DEF_ATTR_IDENT (ATTR_STRFTIME, \"strftime\")\n \n-DEF_ATTR_IDENT (ATTR_FORMAT, \"format\")\n-DEF_ATTR_IDENT (ATTR_FORMAT_ARG, \"format_arg\")\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_LIST, ATTR_NOTHROW, ATTR_NULL, ATTR_NULL)\n \n-DEF_ATTR_IDENT (ATTR_NONNULL, \"nonnull\")\n+DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_LIST, ATTR_CONST,\t\\\n+\t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_PURE_NOTHROW_LIST, ATTR_PURE,\t\t\\\n+\t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_NORETURN_NOTHROW_LIST, ATTR_NORETURN,\t\\\n+\t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_MALLOC_NOTHROW_LIST, ATTR_MALLOC,\t\\\n+\t\t\tATTR_NULL, ATTR_NOTHROW_LIST)\n \n DEF_ATTR_TREE_LIST (ATTR_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, ATTR_NULL)\n DEF_ATTR_TREE_LIST (ATTR_NONNULL_2, ATTR_NONNULL, ATTR_LIST_2, ATTR_NULL)\n@@ -132,17 +147,8 @@ DEF_FORMAT_ARG_ATTRIBUTE(2)\n    -ffreestanding, these default attributes are disabled, and must be\n    specified manually if desired.  */\n \n-/* __builtin functions should be checked unconditionally, even with\n-   -ffreestanding.  */\n-DEF_FN_ATTR_IDENT (__builtin_printf, ATTR_FORMAT_PRINTF_1_2, true)\n-DEF_FN_ATTR_IDENT (__builtin_fprintf, ATTR_FORMAT_PRINTF_2_3, true)\n-DEF_FN_ATTR_IDENT (__builtin_printf_unlocked, ATTR_FORMAT_PRINTF_1_2, true)\n-DEF_FN_ATTR_IDENT (__builtin_fprintf_unlocked, ATTR_FORMAT_PRINTF_2_3, true)\n-\n /* Functions from ISO/IEC 9899:1990.  */\n #define DEF_C89_ATTR(NAME, ATTRS) DEF_FN_ATTR_IDENT (NAME, ATTRS, flag_hosted)\n-DEF_C89_ATTR (printf, ATTR_FORMAT_PRINTF_1_2)\n-DEF_C89_ATTR (fprintf, ATTR_FORMAT_PRINTF_2_3)\n DEF_C89_ATTR (sprintf, ATTR_FORMAT_PRINTF_2_3)\n DEF_C89_ATTR (scanf, ATTR_FORMAT_SCANF_1_2)\n DEF_C89_ATTR (fscanf, ATTR_FORMAT_SCANF_2_3)\n@@ -175,8 +181,5 @@ DEF_EXT_ATTR (dgettext, ATTR_FORMAT_ARG_2)\n DEF_EXT_ATTR (dcgettext, ATTR_FORMAT_ARG_2)\n /* X/Open strfmon function.  */\n DEF_EXT_ATTR (strfmon, ATTR_FORMAT_STRFMON_3_4)\n-/* Glibc thread-unsafe stdio functions.  */\n-DEF_EXT_ATTR (printf_unlocked, ATTR_FORMAT_PRINTF_1_2)\n-DEF_EXT_ATTR (fprintf_unlocked, ATTR_FORMAT_PRINTF_2_3)\n #undef DEF_EXT_ATTR\n #undef DEF_FN_ATTR_IDENT"}, {"sha": "4b66369d7863f8e5ba44e59de1662b53d6e65e9c", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -63,7 +63,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n \n-#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA) STRINGX(X),\n+#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA, AT) STRINGX(X),\n const char *const built_in_names[(int) END_BUILTINS] =\n {\n #include \"builtins.def\""}, {"sha": "5c2dbb20ebf42b92c16a79d0e76a21055fd56840", "filename": "gcc/builtins.def", "status": "modified", "additions": 151, "deletions": 59, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -22,7 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Before including this file, you should define a macro:\n \n      DEF_BUILTIN (ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P,\n-                  FALLBACK_P, NONANSI_P)\n+                  FALLBACK_P, NONANSI_P, ATTRS)\n \n    This macro will be called once for each builtin function.  The\n    ENUM will be of type `enum built_in_function', and will indicate\n@@ -50,25 +50,28 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    If NONANSI_P is true, then the non-`__builtin_' variant is not an\n    ANSI/ISO library function, and so we should pretend it does not\n-   exist when compiling in ANSI conformant mode.  */\n+   exist when compiling in ANSI conformant mode.\n+\n+   ATTRs is an attribute list as defined in builtin-attrs.def that\n+   describes the attributes of this builtin function.  */\n    \n /* A GCC builtin (like __builtin_saveregs) is provided by the\n    compiler, but does not correspond to a function in the standard\n    library.  */\n #undef DEF_GCC_BUILTIN\n #define DEF_GCC_BUILTIN(ENUM, NAME, TYPE)\t\t\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,\t\\\n-               false, false, false)\n+               false, false, false, ATTR_NULL)\n \n \n /* A fallback builtin is a builtin (like __builtin_puts) that falls\n    back to the corresopnding library function if necessary -- but\n    for which we should not introduce the non-`__builtin' variant of\n    the name.  */\n #undef DEF_FALLBACK_BUILTIN\t\t\t\t\n-#define DEF_FALLBACK_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+#define DEF_FALLBACK_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       false, true, false)\n+\t       false, true, false, ATTRS)\n \n /* Like DEF_FALLBACK_BUILTIN, except that the function is not one that\n    is specified by ANSI/ISO C.  So, when we're being fully conformant\n@@ -77,7 +80,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #undef DEF_EXT_FALLBACK_BUILTIN\n #define DEF_EXT_FALLBACK_BUILTIN(ENUM, NAME, TYPE)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       false, true, true)\n+\t       false, true, true, ATTR_NOTHROW_LIST)\n \n /* A library builtin (like __builtin_strchr) is a builtin equivalent\n    of an ANSI/ISO standard library function.  In addition to the\n@@ -86,65 +89,67 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    builtin function, we will fall back to the standard library\n    version. */\n #undef DEF_LIB_BUILTIN\t\t\t\t\t\n-#define DEF_LIB_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+#define DEF_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-\t       true, true, false)\n+\t       true, true, false, ATTRS)\n \n /* Like DEF_LIB_BUILTIN, except that a call to the builtin should\n    never fall back to the library version.  */\n #undef DEF_LIB_ALWAYS_BUILTIN\t\t\t\t\n #define DEF_LIB_ALWAYS_BUILTIN(ENUM, NAME, TYPE)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-    \t       true, false, true)\n+    \t       true, false, true, ATTR_CONST_NOTHROW_LIST)\n \n /* Like DEF_LIB_BUILTIN, except that the function is not one that is\n    specified by ANSI/ISO C.  So, when we're being fully conformant we\n    ignore the version of these builtins that does not begin with\n    __builtin.  */\n #undef DEF_EXT_LIB_BUILTIN\t\t\t\t\n-#define DEF_EXT_LIB_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+#define DEF_EXT_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, true, true)\n+   \t       true, true, true, ATTRS)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C99 or above.  */\n #undef DEF_C99_BUILTIN\t\t\t\t\t\n #define DEF_C99_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-   \t       true, !flag_isoc99, true)\n+   \t       true, !flag_isoc99, true, ATTR_NOTHROW_LIST)\n \n /* Like DEF_LIB_BUILTIN, except that the function is expanded in the\n    front-end.  */\n #undef DEF_FRONT_END_LIB_BUILTIN\t\t\t\n-#define DEF_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE)\t        \\\n+#define DEF_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n-\t       true, true, false)\n+\t       true, true, false, ATTRS)\n \n /* Like DEF_FRONT_END_LIB_BUILTIN, except that the function is not one\n    that is specified by ANSI/ISO C.  So, when we're being fully\n    conformant we ignore the version of these builtins that does not\n    begin with __builtin.  */\n #undef DEF_EXT_FRONT_END_LIB_BUILTIN\t\t\t\n-#define DEF_EXT_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE)\t        \\\n+#define DEF_EXT_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n-\t       true, true, true)\n+\t       true, true, true, ATTRS)\n \n /* A built-in that is not currently used.  */\n #undef DEF_UNUSED_BUILTIN\t\t\t\t\t\n #define DEF_UNUSED_BUILTIN(X)\t\t\t\t\t\\\n   DEF_BUILTIN (X, (const char *) NULL, NOT_BUILT_IN, BT_LAST,\t\\\n-\t       BT_LAST, false, false, false)\n+\t       BT_LAST, false, false, false, ATTR_NOTHROW_LIST)\n \n /* If SMALL_STACK is defined, then `alloca' is only defined in its\n    `__builtin' form.  */\n #if SMALL_STACK  \n DEF_FALLBACK_BUILTIN(BUILT_IN_ALLOCA,\n \t\t     \"__builtin_alloca\",\n-\t\t     BT_FN_PTR_SIZE)\n+\t\t     BT_FN_PTR_SIZE,\n+\t\t     ATTR_MALLOC_NOTHROW_LIST)\n #else\n DEF_EXT_LIB_BUILTIN(BUILT_IN_ALLOCA,\n \t\t    \"__builtin_alloca\",\n-\t\t    BT_FN_PTR_SIZE)\n+\t\t    BT_FN_PTR_SIZE,\n+\t\t    ATTR_MALLOC_NOTHROW_LIST)\n #endif\n \n DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_ABS,\n@@ -213,101 +218,146 @@ DEF_BUILTIN (BUILT_IN_BZERO,\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_VOID_PTR_SIZE, \n \t     BT_FN_VOID_VAR,\n-\t     true, true, true)\n+\t     true, true, true,\n+\t     ATTR_NOTHROW_LIST)\n DEF_BUILTIN (BUILT_IN_BCMP,\n \t     \"__builtin_bcmp\",\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n \t     BT_FN_INT_VAR,\n-\t     true, true, true)\n+\t     true, true, true,\n+\t     ATTR_PURE_NOTHROW_LIST)\n \n DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,\n \t\t    \"__builtin_ffs\",\n-\t\t    BT_FN_INT_INT)\n+\t\t    BT_FN_INT_INT,\n+\t\t    ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN(BUILT_IN_INDEX,\n \t\t    \"__builtin_index\",\n-\t\t    BT_FN_STRING_CONST_STRING_INT)\n+\t\t    BT_FN_STRING_CONST_STRING_INT,\n+\t\t    ATTR_PURE_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN(BUILT_IN_RINDEX,\n \t\t    \"__builtin_rindex\",\n-\t\t    BT_FN_STRING_CONST_STRING_INT)\n+\t\t    BT_FN_STRING_CONST_STRING_INT,\n+\t\t    ATTR_PURE_NOTHROW_LIST)\n \n DEF_LIB_BUILTIN(BUILT_IN_MEMCPY,\n \t\t\"__builtin_memcpy\",\n-\t\tBT_FN_PTR_PTR_CONST_PTR_SIZE)\n+\t\tBT_FN_PTR_PTR_CONST_PTR_SIZE,\n+\t\tATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_MEMCMP,\n \t\t\"__builtin_memcmp\",\n-\t\tBT_FN_INT_CONST_PTR_CONST_PTR_SIZE)\n+\t\tBT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_MEMSET,\n \t\t\"__builtin_memset\",\n-\t\tBT_FN_PTR_PTR_INT_SIZE)\n+\t\tBT_FN_PTR_PTR_INT_SIZE,\n+\t\tATTR_NOTHROW_LIST)\n \n DEF_LIB_BUILTIN(BUILT_IN_STRCAT,\n \t\t\"__builtin_strcat\",\n-\t\tBT_FN_STRING_STRING_CONST_STRING)\n+\t\tBT_FN_STRING_STRING_CONST_STRING,\n+\t\tATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRNCAT,\n \t\t\"__builtin_strncat\",\n-\t\tBT_FN_STRING_STRING_CONST_STRING_SIZE)\n+\t\tBT_FN_STRING_STRING_CONST_STRING_SIZE,\n+\t\tATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRCPY,\n \t\t\"__builtin_strcpy\",\n-\t\tBT_FN_STRING_STRING_CONST_STRING)\n+\t\tBT_FN_STRING_STRING_CONST_STRING,\n+\t\tATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRNCPY,\n \t\t\"__builtin_strncpy\",\n-\t\tBT_FN_STRING_STRING_CONST_STRING_SIZE)\n+\t\tBT_FN_STRING_STRING_CONST_STRING_SIZE,\n+\t\tATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRCMP,\n \t\t\"__builtin_strcmp\",\n-\t\tBT_FN_INT_CONST_STRING_CONST_STRING)\n+\t\tBT_FN_INT_CONST_STRING_CONST_STRING,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRNCMP,\n \t\t\"__builtin_strncmp\",\n-\t\tBT_FN_INT_CONST_STRING_CONST_STRING_SIZE)\n+\t\tBT_FN_INT_CONST_STRING_CONST_STRING_SIZE,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRLEN,\n \t\t\"__builtin_strlen\",\n-\t\tBT_FN_SIZE_CONST_STRING)\n+\t\tBT_FN_SIZE_CONST_STRING,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRSTR,\n \t\t\"__builtin_strstr\",\n-\t\tBT_FN_STRING_CONST_STRING_CONST_STRING)\n+\t\tBT_FN_STRING_CONST_STRING_CONST_STRING,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRPBRK,\n \t\t\"__builtin_strpbrk\",\n-\t\tBT_FN_STRING_CONST_STRING_CONST_STRING)\n+\t\tBT_FN_STRING_CONST_STRING_CONST_STRING,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRSPN,\n \t\t\"__builtin_strspn\",\n-\t\tBT_FN_SIZE_CONST_STRING_CONST_STRING)\n+\t\tBT_FN_SIZE_CONST_STRING_CONST_STRING,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRCSPN,\n \t\t\"__builtin_strcspn\",\n-\t\tBT_FN_SIZE_CONST_STRING_CONST_STRING)\n+\t\tBT_FN_SIZE_CONST_STRING_CONST_STRING,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRCHR,\n \t\t\"__builtin_strchr\",\n-\t\tBT_FN_STRING_CONST_STRING_INT)\n+\t\tBT_FN_STRING_CONST_STRING_INT,\n+\t\tATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRRCHR,\n \t\t\"__builtin_strrchr\",\n-\t\tBT_FN_STRING_CONST_STRING_INT)\n+\t\tBT_FN_STRING_CONST_STRING_INT,\n+\t\tATTR_PURE_NOTHROW_LIST)\n \n DEF_LIB_BUILTIN(BUILT_IN_SQRT,\n \t\t\"__builtin_sqrt\",\n-\t\tBT_FN_DOUBLE_DOUBLE)\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_LIB_BUILTIN(BUILT_IN_SIN,\n \t\t\"__builtin_sin\",\n-\t\tBT_FN_DOUBLE_DOUBLE)\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_COS,\n \t\t\"__builtin_cos\",\n-\t\tBT_FN_DOUBLE_DOUBLE)\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_SQRTF,\n \t\t\"__builtin_sqrtf\",\n-\t\tBT_FN_FLOAT_FLOAT)\n+\t\tBT_FN_FLOAT_FLOAT,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_LIB_BUILTIN(BUILT_IN_SINF,\n \t\t\"__builtin_sinf\",\n-\t\tBT_FN_FLOAT_FLOAT)\n+\t\tBT_FN_FLOAT_FLOAT,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_COSF,\n \t\t\"__builtin_cosf\",\n-\t\tBT_FN_FLOAT_FLOAT)\n+\t\tBT_FN_FLOAT_FLOAT,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_SQRTL,\n \t\t\"__builtin_sqrtl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_LIB_BUILTIN(BUILT_IN_SINL,\n \t\t\"__builtin_sinl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_COSL,\n \t\t\"__builtin_cosl\",\n-\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\tflag_unsafe_math_optimizations ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t       : ATTR_PURE_NOTHROW_LIST)\n \n DEF_UNUSED_BUILTIN(BUILT_IN_GETEXP)\n DEF_UNUSED_BUILTIN(BUILT_IN_GETMAN)\n@@ -361,16 +411,20 @@ DEF_GCC_BUILTIN(BUILT_IN_PREFETCH,\n /* Stdio builtins.  */\n DEF_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR,\n \t\t    \"__builtin_putchar\",\n-\t\t     BT_FN_INT_INT)\n+\t\t     BT_FN_INT_INT,\n+\t\t     ATTR_NOTHROW_LIST)\n DEF_FALLBACK_BUILTIN(BUILT_IN_PUTS,\n \t\t     \"__builtin_puts\",\n-\t\t     BT_FN_INT_CONST_STRING)\n+\t\t     BT_FN_INT_CONST_STRING,\n+\t\t     ATTR_NOTHROW_LIST)\n DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF,\n \t\t\t  \"__builtin_printf\",\n-\t\t\t  BT_FN_INT_CONST_STRING_VAR)\n+\t\t\t  BT_FN_INT_CONST_STRING_VAR,\n+\t\t\t  ATTR_FORMAT_PRINTF_1_2)\n DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,\n \t\t     \"__builtin_fputc\",\n-\t\t     BT_FN_INT_INT_PTR)\n+\t\t     BT_FN_INT_INT_PTR,\n+\t\t     ATTR_NOTHROW_LIST)\n /* Declare the __builtin_ style with arguments and the regular style\n    without them.  We rely on stdio.h to supply the arguments for the\n    regular style declaration since we had to use void* instead of\n@@ -380,13 +434,15 @@ DEF_BUILTIN (BUILT_IN_FPUTS,\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_INT_CONST_STRING_PTR,\n \t     BT_FN_INT_VAR,\n-\t     true, true, false)\n+\t     true, true, false, ATTR_NOTHROW_LIST)\n DEF_FALLBACK_BUILTIN(BUILT_IN_FWRITE,\n \t\t     \"__builtin_fwrite\",\n-\t\t     BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR)\n+\t\t     BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n+\t\t      ATTR_NOTHROW_LIST)\n DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF,\n \t\t\t \"__builtin_fprintf\",\n-\t\t\t BT_FN_INT_PTR_CONST_STRING_VAR)\n+\t\t\t BT_FN_INT_PTR_CONST_STRING_VAR,\n+\t\t\t ATTR_FORMAT_PRINTF_2_3)\n \n /* Stdio unlocked builtins.  */\n \n@@ -398,7 +454,8 @@ DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_PUTS_UNLOCKED,\n \t\t\t BT_FN_INT_CONST_STRING)\n DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF_UNLOCKED,\n \t\t\t      \"__builtin_printf_unlocked\",\n-\t\t\t      BT_FN_INT_CONST_STRING_VAR)\n+\t\t\t      BT_FN_INT_CONST_STRING_VAR,\n+\t\t\t      ATTR_FORMAT_PRINTF_1_2)\n DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FPUTC_UNLOCKED,\n \t\t\t \"__builtin_fputc_unlocked\",\n \t\t\t BT_FN_INT_INT_PTR)\n@@ -411,13 +468,14 @@ DEF_BUILTIN (BUILT_IN_FPUTS_UNLOCKED,\n \t     BUILT_IN_NORMAL,\n \t     BT_FN_INT_CONST_STRING_PTR,\n \t     BT_FN_INT_VAR,\n-\t     true, true, true)\n+\t     true, true, true, ATTR_NOTHROW_LIST)\n DEF_EXT_FALLBACK_BUILTIN(BUILT_IN_FWRITE_UNLOCKED,\n \t\t\t \"__builtin_fwrite_unlocked\",\n \t\t\t BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR)\n DEF_EXT_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF_UNLOCKED,\n \t\t\t      \"__builtin_fprintf_unlocked\",\n-\t\t\t      BT_FN_INT_PTR_CONST_STRING_VAR)\n+\t\t\t      BT_FN_INT_PTR_CONST_STRING_VAR,\n+\t\t\t      ATTR_FORMAT_PRINTF_2_3)\n \n   /* ISO C99 floating point unordered comparisons.  */\n DEF_GCC_BUILTIN(BUILT_IN_ISGREATER, \n@@ -486,3 +544,37 @@ DEF_UNUSED_BUILTIN(BUILT_IN_NEW)\n DEF_UNUSED_BUILTIN(BUILT_IN_VEC_NEW)\n DEF_UNUSED_BUILTIN(BUILT_IN_DELETE)\n DEF_UNUSED_BUILTIN(BUILT_IN_VEC_DELETE)\n+\n+/* Declare abort, exit, _exit and _Exit */\n+DEF_BUILTIN (BUILT_IN_ABORT,\n+\t     \"__builtin_abort\",\n+\t     NOT_BUILT_IN,\n+\t     (c_language == clk_cplusplus ? BT_FN_VOID : BT_FN_VOID_VAR),\n+\t     (c_language == clk_cplusplus ? BT_FN_VOID : BT_FN_VOID_VAR),\n+\t     1, 0, 0,\n+\t     ATTR_NORETURN_NOTHROW_LIST)\n+\n+DEF_BUILTIN (BUILT_IN_EXIT,\n+\t     \"__builtin_exit\",\n+\t     NOT_BUILT_IN,\n+\t     (c_language == clk_cplusplus ? BT_FN_VOID_INT : BT_FN_VOID_VAR),\n+\t     (c_language == clk_cplusplus ? BT_FN_VOID_INT : BT_FN_VOID_VAR),\n+\t     1, 0, 0,\n+\t     ATTR_NORETURN_NOTHROW_LIST)\n+\n+DEF_BUILTIN (BUILT_IN__EXIT,\n+\t     \"__builtin__exit\",\n+\t     NOT_BUILT_IN,\n+\t     BT_FN_VOID_INT,\n+\t     BT_FN_VOID_INT,\n+\t     1, 0, 1,\n+\t     ATTR_NORETURN_NOTHROW_LIST)\n+\n+DEF_BUILTIN (BUILT_IN__EXIT2,\n+\t     \"__builtin__Exit\",\n+\t     NOT_BUILT_IN,\n+\t     BT_FN_VOID_INT,\n+\t     BT_FN_VOID_INT,\n+\t     1, 0, !flag_isoc99,\n+\t     ATTR_NORETURN_NOTHROW_LIST)\n+"}, {"sha": "57c191ab423a25aaa96195d34f488971582ae63c", "filename": "gcc/c-common.c", "status": "modified", "additions": 39, "deletions": 67, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -2456,7 +2456,7 @@ c_common_truthvalue_conversion (expr)\n \f\n static tree builtin_function_2 PARAMS ((const char *, const char *, tree, tree,\n \t\t\t\t\tint, enum built_in_class, int, int,\n-\t\t\t\t\tint));\n+\t\t\t\t\ttree));\n \n /* Make a variant type in the proper way for C/C++, propagating qualifiers\n    down to the element type of an array.  */\n@@ -2681,6 +2681,30 @@ c_alignof_expr (expr)\n   return fold (build1 (NOP_EXPR, c_size_type_node, t));\n }\n \f\n+/* Handle C and C++ default attributes.  */\n+\n+enum built_in_attribute\n+{\n+#define DEF_ATTR_NULL_TREE(ENUM) ENUM,\n+#define DEF_ATTR_INT(ENUM, VALUE) ENUM,\n+#define DEF_ATTR_IDENT(ENUM, STRING) ENUM,\n+#define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN) ENUM,\n+#define DEF_FN_ATTR(NAME, ATTRS, PREDICATE) /* No entry needed in enum.  */\n+#include \"builtin-attrs.def\"\n+#undef DEF_ATTR_NULL_TREE\n+#undef DEF_ATTR_INT\n+#undef DEF_ATTR_IDENT\n+#undef DEF_ATTR_TREE_LIST\n+#undef DEF_FN_ATTR\n+  ATTR_LAST\n+};\n+\n+static GTY(()) tree built_in_attributes[(int) ATTR_LAST];\n+\n+static bool c_attrs_initialized = false;\n+\n+static void c_init_attributes PARAMS ((void));\n+\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n \n@@ -3041,8 +3065,11 @@ c_common_nodes_and_builtins ()\n #undef DEF_FUNCTION_TYPE_VAR_1\n #undef DEF_POINTER_TYPE\n \n-#define DEF_BUILTIN(ENUM, NAME, CLASS,\t\t\t\t\t\\\n-                    TYPE, LIBTYPE, BOTH_P, FALLBACK_P, NONANSI_P)\t\\\n+  if (!c_attrs_initialized)\n+    c_init_attributes ();\n+\n+#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE,\t\t\t\\\n+\t\t    BOTH_P, FALLBACK_P, NONANSI_P, ATTRS)\t\t\\\n   if (NAME)\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       tree decl;\t\t\t\t\t\t\t\\\n@@ -3055,7 +3082,8 @@ c_common_nodes_and_builtins ()\n \t\t\t\t CLASS,\t\t\t\t\t\\\n \t\t\t\t (FALLBACK_P\t\t\t\t\\\n \t\t\t\t  ? (NAME + strlen (\"__builtin_\"))\t\\\n-\t\t\t\t  : NULL), NULL_TREE);\t\t\t\\\n+\t\t\t\t  : NULL),\t\t\t\t\\\n+\t\t\t\t built_in_attributes[(int) ATTRS]);\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tdecl = builtin_function_2 (NAME,\t\t\t\t\\\n \t\t\t\t   NAME + strlen (\"__builtin_\"),\t\\\n@@ -3065,35 +3093,13 @@ c_common_nodes_and_builtins ()\n \t\t\t\t   CLASS,\t\t\t\t\\\n \t\t\t\t   FALLBACK_P,\t\t\t\t\\\n \t\t\t\t   NONANSI_P,\t\t\t\t\\\n-\t\t\t\t   /*noreturn_p=*/0);\t\t\t\\\n+\t\t\t\t   built_in_attributes[(int) ATTRS]);\t\\\n \t\t\t\t\t\t\t\t\t\\\n       built_in_decls[(int) ENUM] = decl;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\n #include \"builtins.def\"\n #undef DEF_BUILTIN\n \n-  /* Declare _exit and _Exit just to mark them as non-returning.  */\n-  builtin_function_2 (NULL, \"_exit\", NULL_TREE, \n-\t\t      builtin_types[BT_FN_VOID_INT],\n-\t\t      0, NOT_BUILT_IN, 0, 1, 1);\n-  builtin_function_2 (NULL, \"_Exit\", NULL_TREE, \n-\t\t      builtin_types[BT_FN_VOID_INT],\n-\t\t      0, NOT_BUILT_IN, 0, !flag_isoc99, 1);\n-\n-  /* Declare these functions non-returning\n-     to avoid spurious \"control drops through\" warnings.  */\n-  builtin_function_2 (NULL, \"abort\",\n-\t\t      NULL_TREE, ((c_language == clk_cplusplus)\n-\t\t\t\t  ? builtin_types[BT_FN_VOID]\n-\t\t\t\t  : builtin_types[BT_FN_VOID_VAR]),\n-\t\t      0, NOT_BUILT_IN, 0, 0, 1);\n-\n-  builtin_function_2 (NULL, \"exit\",\n-\t\t      NULL_TREE, ((c_language == clk_cplusplus)\n-\t\t\t\t  ? builtin_types[BT_FN_VOID_INT]\n-\t\t\t\t  : builtin_types[BT_FN_VOID_VAR]),\n-\t\t      0, NOT_BUILT_IN, 0, 0, 1);\n-\n   main_identifier_node = get_identifier (\"main\");\n }\n \n@@ -3161,15 +3167,15 @@ builtin_function_disabled_p (name)\n    conflicts with headers.  FUNCTION_CODE and CLASS are as for\n    builtin_function.  If LIBRARY_NAME_P is nonzero, NAME is passed as\n    the LIBRARY_NAME parameter to builtin_function when declaring BUILTIN_NAME.\n-   If NONANSI_P is nonzero, the name NAME is treated as a non-ANSI name; if\n-   NORETURN_P is nonzero, the function is marked as non-returning.\n+   If NONANSI_P is nonzero, the name NAME is treated as a non-ANSI name;\n+   ATTRS is the tree list representing the builtin's function attributes.\n    Returns the declaration of BUILTIN_NAME, if any, otherwise\n    the declaration of NAME.  Does not declare NAME if flag_no_builtin,\n    or if NONANSI_P and flag_no_nonansi_builtin.  */\n \n static tree\n builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n-\t\t    class, library_name_p, nonansi_p, noreturn_p)\n+\t\t    class, library_name_p, nonansi_p, attrs)\n      const char *builtin_name;\n      const char *name;\n      tree builtin_type;\n@@ -3178,33 +3184,23 @@ builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n      enum built_in_class class;\n      int library_name_p;\n      int nonansi_p;\n-     int noreturn_p;\n+     tree attrs;\n {\n   tree bdecl = NULL_TREE;\n   tree decl = NULL_TREE;\n   if (builtin_name != 0)\n     {\n       bdecl = builtin_function (builtin_name, builtin_type, function_code,\n \t\t\t\tclass, library_name_p ? name : NULL,\n-\t\t\t\tNULL_TREE);\n-      if (noreturn_p)\n-\t{\n-\t  TREE_THIS_VOLATILE (bdecl) = 1;\n-\t  TREE_SIDE_EFFECTS (bdecl) = 1;\n-\t}\n+\t\t\t\tattrs);\n     }\n   if (name != 0 && !flag_no_builtin && !builtin_function_disabled_p (name)\n       && !(nonansi_p && flag_no_nonansi_builtin))\n     {\n       decl = builtin_function (name, type, function_code, class, NULL,\n-\t\t\t       NULL_TREE);\n+\t\t\t       attrs);\n       if (nonansi_p)\n \tDECL_BUILT_IN_NONANSI (decl) = 1;\n-      if (noreturn_p)\n-\t{\n-\t  TREE_THIS_VOLATILE (decl) = 1;\n-\t  TREE_SIDE_EFFECTS (decl) = 1;\n-\t}\n     }\n   return (bdecl != 0 ? bdecl : decl);\n }\n@@ -4232,30 +4228,6 @@ boolean_increment (code, arg)\n   return val;\n }\n \f\n-/* Handle C and C++ default attributes.  */\n-\n-enum built_in_attribute\n-{\n-#define DEF_ATTR_NULL_TREE(ENUM) ENUM,\n-#define DEF_ATTR_INT(ENUM, VALUE) ENUM,\n-#define DEF_ATTR_IDENT(ENUM, STRING) ENUM,\n-#define DEF_ATTR_TREE_LIST(ENUM, PURPOSE, VALUE, CHAIN) ENUM,\n-#define DEF_FN_ATTR(NAME, ATTRS, PREDICATE) /* No entry needed in enum.  */\n-#include \"builtin-attrs.def\"\n-#undef DEF_ATTR_NULL_TREE\n-#undef DEF_ATTR_INT\n-#undef DEF_ATTR_IDENT\n-#undef DEF_ATTR_TREE_LIST\n-#undef DEF_FN_ATTR\n-  ATTR_LAST\n-};\n-\n-static GTY(()) tree built_in_attributes[(int) ATTR_LAST];\n-\n-static bool c_attrs_initialized = false;\n-\n-static void c_init_attributes PARAMS ((void));\n-\n /* Common initialization before parsing options.  */\n void\n c_common_init_options (lang)"}, {"sha": "56b92e74ff27e8433bff5104e165a0e623696442", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -4519,7 +4519,9 @@ The functions @code{abort}, @code{exit}, @code{_Exit} and @code{_exit}\n are recognized and presumed not to return, but otherwise are not built\n in.  @code{_exit} is not recognized in strict ISO C mode (@option{-ansi},\n @option{-std=c89} or @option{-std=c99}).  @code{_Exit} is not recognized in\n-strict C89 mode (@option{-ansi} or @option{-std=c89}).\n+strict C89 mode (@option{-ansi} or @option{-std=c89}).  All these functions\n+have corresponding versions prefixed with @code{__builtin_}, which may be\n+used even in strict C89 mode.\n \n Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n @code{bzero}, @code{index}, @code{rindex}, @code{ffs}, @code{fputs_unlocked},"}, {"sha": "d93b34641b62b6145c7b9d94053d4baa329422d4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -1,3 +1,9 @@\n+2002-07-05  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* java/builtins.c (initialize_builtins): Ignore the additional\n+\tparameter to DEF_BUILTIN.  Handle more C/C++ specific junk in\n+\tthe builtins.def file.\n+\n 2002-07-01  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR libgcj/7073:"}, {"sha": "dafad79b434669773696f478426ab6184a087892", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -284,6 +284,8 @@ initialize_builtins ()\n #define va_list_ref_type_node NULL_TREE\n #define va_list_arg_type_node NULL_TREE\n #define flag_isoc99 0\n+#define c_language 0\n+#define clk_cplusplus 0\n \n #define DEF_PRIMITIVE_TYPE(ENUM, VALUE)\t\t\t\t\t      \\\n   builtin_types[(int) ENUM] = VALUE;\n@@ -314,7 +316,7 @@ initialize_builtins ()\n #include \"builtin-types.def\"\n \n #define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, \\\n-                    FALLBACK_P, NONANSI_P) \\\n+                    FALLBACK_P, NONANSI_P, ATTRS) \\\n   define_builtin (ENUM, NAME, CLASS, builtin_types[TYPE], FALLBACK_P);\n #include \"builtins.def\"\n }"}, {"sha": "795abebfef22dba0f4897f0efef2ef0f4a57e23f", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df061a43b6051ab6d4756f1e5676c1e16b4a4f99/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=df061a43b6051ab6d4756f1e5676c1e16b4a4f99", "patch": "@@ -80,7 +80,7 @@ extern const char *const built_in_class_names[4];\n /* Codes that identify the various built in functions\n    so that expand_call can identify them quickly.  */\n \n-#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA) ENUM,\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT) ENUM,\n enum built_in_function\n {\n #include \"builtins.def\""}]}