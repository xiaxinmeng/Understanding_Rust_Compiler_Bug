{"sha": "7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxZTdlZWQ4OTFhN2I4ZmQ4YmJlNmExM2U2NDM1Y2ZiZTdlOTA1NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T23:25:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T23:25:01Z"}, "message": "libstdc++: Add C++ runtime support for new 128-bit long double format\n\nThis adds support for the new __ieee128 long double format on\npowerpc64le targets.\n\nMost of the complexity comes from wanting a single libstdc++.so library\nthat contains the symbols needed by code compiled with both\n-mabi=ibmlongdouble and -mabi=ieeelongdouble (and not forgetting\n-mlong-double-64 as well!)\n\nIn a few places this just requires an extra overload, for example\nstd::from_chars has to be overloaded for both forms of long double.\nThat can be done in a single translation unit that defines overloads\nfor 'long double' and also '__ieee128', so that user code including\n<charconv> will be able to link to a definition for either type of long\ndouble. Those are the easy cases.\n\nThe difficult parts are (as for the std::string ABI transition) the I/O\nand locale facets. In order to be able to write either form of long\ndouble to an ostream such as std::cout we need the locale to contain a\nstd::num_put facet that can handle both forms. The same approach is\ntaken as was already done for supporting 64-bit long double and 128-bit\nlong double: adding extra overloads of do_put to the facet class. On\ntargets where the new long double code is enabled, the facets that are\nregistered in the locale at program startup have additional overloads so\nthat they can work with any long double type. Where this fails to work\nis if user code installs its own facet, which will probably not have the\nadditional overloads and so will only be able to output one or the other\ntype. In practice the number of users expecting to be able to use their\nown locale facets in code using a mix of -mabi=ibmlongdouble and\n-mabi=ieeelongdouble is probably close to zero.\n\nlibstdc++-v3/ChangeLog:\n\n\t* Makefile.in: Regenerate.\n\t* config.h.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Make patterns less greedy.\n\t* config/os/gnu-linux/ldbl-ieee128-extra.ver: New file with patterns\n\tfor IEEE128 long double symbols.\n\t* configure: Regenerate.\n\t* configure.ac: Enable alternative 128-bit long double format on\n\tpowerpc64*-*-linux*.\n\t* doc/Makefile.in: Regenerate.\n\t* fragment.am: Regenerate.\n\t* include/Makefile.am: Set _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/c++config: Define inline namespace for new long\n\tdouble symbols. Don't define _GLIBCXX_USE_FLOAT128 when it's the\n\tsame type as long double.\n\t* include/bits/locale_classes.h [_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT]\n\t(locale::_Impl::_M_init_extra_ldbl128): Declare new member function.\n\t* include/bits/locale_facets.h (_GLIBCXX_NUM_FACETS): Simplify by\n\tonly counting narrow character facets.\n\t(_GLIBCXX_NUM_CXX11_FACETS): Likewise.\n\t(_GLIBCXX_NUM_LBDL_ALT128_FACETS): New.\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT] (num_get::__do_get): Define\n\tvtable placeholder for __ibm128 long double type.\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n\t(num_get::__do_get): Declare vtable placeholder for __ibm128 long\n\tdouble type.\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n\t(num_put::__do_put): Likewise.\n\t* include/bits/locale_facets.tcc\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n\t(num_get::__do_get, num_put::__do_put): Define.\n\t* include/bits/locale_facets_nonio.h\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n\t(money_get::__do_get): Declare vtable placeholder for __ibm128 long\n\tdouble type.\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n\t(money_put::__do_put): Likewise.\n\t* include/bits/locale_facets_nonio.tcc\n\t[_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && __LONG_DOUBLE_IEEE128__]\n\t(money_get::__do_get, money_put::__do_put): Define.\n\t* include/ext/numeric_traits.h [_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT]\n\t(__numeric_traits<__ibm128>, __numeric_traits<__ieee128>): Define.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* po/Makefile.in: Regenerate.\n\t* python/Makefile.in: Regenerate.\n\t* src/Makefile.am: Add compatibility-ldbl-alt128.cc and\n\tcompatibility-ldbl-alt128-cxx11.cc sources and recipes for objects.\n\t* src/Makefile.in: Regenerate.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/compatibility-ldbl-alt128-cxx11.cc: New file defining\n\tsymbols using the old 128-bit long double format, for the cxx11 ABI.\n\t* src/c++11/compatibility-ldbl-alt128.cc: Likewise, for the\n\tgcc4-compatible ABI.\n\t* src/c++11/compatibility-ldbl-facets-aliases.h: New header for long\n\tdouble compat aliases.\n\t* src/c++11/cow-locale_init.cc: Add comment.\n\t* src/c++11/cxx11-locale-inst.cc: Define C and C_is_char\n\tunconditionally.\n\t* src/c++11/cxx11-wlocale-inst.cc: Add sanity check. Include\n\tlocale-inst.cc directly, not via cxx11-locale-inst.cc.\n\t* src/c++11/locale-inst-monetary.h: New header for monetary\n\tcategory instantiations.\n\t* src/c++11/locale-inst-numeric.h: New header for numeric category\n\tinstantiations.\n\t* src/c++11/locale-inst.cc: Include new headers for monetary,\n\tnumeric, and long double definitions.\n\t* src/c++11/wlocale-inst.cc: Remove long double compat aliases that\n\tare defined in new header now.\n\t* src/c++17/Makefile.am: Use -mabi=ibmlongdouble for\n\tfloating_from_chars.cc.\n\t* src/c++17/Makefile.in: Regenerate.\n\t* src/c++17/floating_from_chars.cc (from_chars_impl): Add\n\tif-constexpr branch for __ieee128.\n\t(from_chars): Overload for __ieee128.\n\t* src/c++20/Makefile.in: Regenerate.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* src/c++98/locale_init.cc (num_facets): Adjust calculation.\n\t(locale::_Impl::_Impl(size_t)): Call _M_init_extra_ldbl128.\n\t* src/c++98/localename.cc (num_facets): Adjust calculation.\n\t(locale::_Impl::_Impl(const char*, size_t)): Call\n\t_M_init_extra_ldbl128.\n\t* src/filesystem/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\t* testsuite/util/testsuite_abi.cc: Add new symbol versions.\n\tAllow new symbols to be added to GLIBCXX_IEEE128_3.4.29 and\n\tCXXABI_IEEE128_1.3.13 too.\n\t* testsuite/26_numerics/complex/abi_tag.cc: Add u9__ieee128 to\n\tregex matching expected symbols.", "tree": {"sha": "8e47099349008b8f646610e85318aad196a4dc76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e47099349008b8f646610e85318aad196a4dc76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ae1f2c43d2274225f84f4370e556c4abd6010e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ae1f2c43d2274225f84f4370e556c4abd6010e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ae1f2c43d2274225f84f4370e556c4abd6010e"}], "stats": {"total": 1691, "additions": 1380, "deletions": 311}, "files": [{"sha": "a1955dddd150ce63ebd6073d5d329cfe1c8bd7cc", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -257,6 +257,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -396,11 +398,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "937c19c3075190579e72c4ef7acf0c58219c7d75", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -882,6 +882,10 @@\n /* Define to 1 if a full hosted library is built, or 0 if freestanding. */\n #undef _GLIBCXX_HOSTED\n \n+/* Define if compatibility should be provided for alternative 128-bit long\n+   double formats. */\n+#undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\n /* Define if compatibility should be provided for -mlong-double-64. */\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n "}, {"sha": "4b4bd8ab6da04a86344d0fc94a804905d419c5ea", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -682,7 +682,7 @@ GLIBCXX_3.4 {\n     _ZNSt12__basic_fileIcED*;\n \n     # std::__convert_to_v\n-    _ZSt14__convert_to_vI[^g]*;\n+    _ZSt14__convert_to_vI[^gU]*;\n \n     # __gnu_cxx::stdio_sync_filebuf\n     _ZTVN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EEE;\n@@ -931,7 +931,7 @@ GLIBCXX_3.4 {\n     _ZGVNSt8time_putI[cw]*;\n     _ZGVNSt9money_getI[cw]*;\n     _ZGVNSt9money_putI[cw]*;\n-    _ZGVNSt1[^07]*;\n+    _ZGVNSt1[^079]*;\n     _ZGVNSt10moneypunctI[cw]Lb[01]*;\n \n     # exception constructors taking std::string"}, {"sha": "3c3395e4d4e2635a0fde68ada0cc9fa1c986b080", "filename": "libstdc++-v3/config/os/gnu-linux/ldbl-ieee128-extra.ver", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fldbl-ieee128-extra.ver?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -0,0 +1,53 @@\n+# Appended to version file.\n+\n+GLIBCXX_IEEE128_3.4.29 {\n+\n+  *__gnu_cxx_ieee128*;\n+\n+  _ZNSt14numeric_limitsIu9__ieee128E*;\n+  _ZNSirsERu9__ieee128;\n+  _ZNSolsEu9__ieee128;\n+  _ZNSt13basic_istreamIwSt11char_traitsIwEErsERu9__ieee128;\n+  _ZNSt13basic_ostreamIwSt11char_traitsIwEElsEu9__ieee128;\n+  _ZSt14__convert_to_vIu9__ieee128EvPKcRT_RSt12_Ios_IostateRKP*;\n+  _ZStlsIu9__ieee128[cw]St11char_traitsI[cw]EERSt13basic_ostreamIT0_T1_ES6_RKSt7complexIT_E;\n+  _ZStrsIu9__ieee128[cw]St11char_traitsI[cw]EERSt13basic_istreamIT0_T1_ES6_RSt7complexIT_E;\n+\n+  _ZNSi10_M_extractIu9__ieee128EERSiRT_;\n+  _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractIu9__ieee128EERS2_RT_;\n+  _ZNSo9_M_insertIu9__ieee128EERSoT_;\n+  _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertIu9__ieee128EERS2_T_;\n+\n+  _ZNKSt3tr14hashIu9__ieee128EclEu9__ieee128;\n+  _ZNKSt4hashIu9__ieee128EclEu9__ieee128;\n+\n+  _ZNKSt19__gnu_cxx11_ieee1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES4_S4_bRSt8ios_baseRSt12_Ios_IostateRNSt7__cxx1112basic_stringIcS3_SaIcEEE;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE6do_getES4_S4_bRSt8ios_baseRSt12_Ios_IostateRu9__ieee128;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE8__do_getES4_S4_bRSt8ios_baseRSt12_Ios_IostateRd;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE8__do_getES4_S4_bRSt8ios_baseRSt12_Ios_IostateRg;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES4_bRSt8ios_basecRKNSt7__cxx1112basic_stringIcS3_SaIcEEE;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE6do_putES4_bRSt8ios_basecu9__ieee128;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE8__do_putES4_bRSt8ios_basecd;\n+  _ZNKSt19__gnu_cxx11_ieee1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE8__do_putES4_bRSt8ios_basecg;\n+  _ZSt9has_facetINSt19__gnu_cxx11_ieee1289money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEEEbRKSt6locale;\n+  _ZSt9has_facetINSt19__gnu_cxx11_ieee1289money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEEEEbRKSt6locale;\n+  _ZSt9use_facetINSt19__gnu_cxx11_ieee1289money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEEERKT_RKSt6locale;\n+  _ZSt9use_facetINSt19__gnu_cxx11_ieee1289money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEEEERKT_RKSt6locale;\n+  _ZTINSt19__gnu_cxx11_ieee1289money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEE;\n+  _ZTVNSt19__gnu_cxx11_ieee1289money_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEE;\n+  _ZTINSt19__gnu_cxx11_ieee1289money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEEE;\n+  _ZTVNSt19__gnu_cxx11_ieee1289money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEEE;\n+\n+  _ZNKSt19__gnu_cxx11_ieee1289money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE3putES4_bRSt8ios_base[cw]u9__ieee128;\n+\n+  _ZSt10from_charsPKcS0_Ru9__ieee128St12chars_format;\n+\n+} GLIBCXX_3.4.29;\n+\n+CXXABI_IEEE128_1.3.13 {\n+\n+  _ZT[IS]u9__ieee128;\n+  _ZT[IS]Pu9__ieee128;\n+  _ZT[IS]PKu9__ieee128;\n+\n+} CXXABI_1.3.13;"}, {"sha": "5249453b6c897a908d68fb38a39202cbf1e9d1cd", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 121, "deletions": 10, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -680,8 +680,12 @@ ENABLE_FILESYSTEM_TS_TRUE\n baseline_subdir_switch\n baseline_dir\n HWCAP_CFLAGS\n+GLIBCXX_LDBL_ALT128_COMPAT_FALSE\n+GLIBCXX_LDBL_ALT128_COMPAT_TRUE\n GLIBCXX_LDBL_COMPAT_FALSE\n GLIBCXX_LDBL_COMPAT_TRUE\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS\n+LONG_DOUBLE_128_FLAGS\n LONG_DOUBLE_COMPAT_FLAGS\n ENABLE_CXX11_ABI_FALSE\n ENABLE_CXX11_ABI_TRUE\n@@ -12136,7 +12140,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12139 \"configure\"\n+#line 12143 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12242,7 +12246,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12245 \"configure\"\n+#line 12249 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15934,7 +15938,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15937 \"configure\"\n+#line 15941 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15969,7 +15973,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15972 \"configure\"\n+#line 15976 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -16004,7 +16008,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16007 \"configure\"\n+#line 16011 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -16040,7 +16044,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16043 \"configure\"\n+#line 16047 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -16193,7 +16197,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16196 \"configure\"\n+#line 16200 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -16235,7 +16239,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 16238 \"configure\"\n+#line 16242 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -16269,7 +16273,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 16272 \"configure\"\n+#line 16276 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -75695,7 +75699,11 @@ $as_echo \"${default_libstdcxx_abi}\" >&6; }\n \n \n ac_ldbl_compat=no\n+ac_ldbl_alt128_compat=no\n+ac_ldbl_ieee128_default=no\n LONG_DOUBLE_COMPAT_FLAGS=\"-mlong-double-64\"\n+LONG_DOUBLE_128_FLAGS=\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS=\n case \"$target\" in\n   powerpc*-*-linux* | \\\n   sparc*-*-linux* | \\\n@@ -75729,13 +75737,103 @@ $as_echo \"#define _GLIBCXX_LONG_DOUBLE_COMPAT 1\" >>confdefs.h\n     port_specific_symbol_files=\"\\$(top_srcdir)/config/os/gnu-linux/ldbl-extra.ver\"\n     case \"$target\" in\n       powerpc*-*-linux*)\n-\tLONG_DOUBLE_COMPAT_FLAGS=\"$LONG_DOUBLE_COMPAT_FLAGS -mno-gnu-attribute\" ;;\n+\tLONG_DOUBLE_COMPAT_FLAGS=\"$LONG_DOUBLE_COMPAT_FLAGS -mno-gnu-attribute\"\n+        # Check for IEEE128 support in libm:\n+        { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __frexpieee128 in -lm\" >&5\n+$as_echo_n \"checking for __frexpieee128 in -lm... \" >&6; }\n+if ${ac_cv_lib_m___frexpieee128+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char __frexpieee128 ();\n+int\n+main ()\n+{\n+return __frexpieee128 ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m___frexpieee128=yes\n+else\n+  ac_cv_lib_m___frexpieee128=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m___frexpieee128\" >&5\n+$as_echo \"$ac_cv_lib_m___frexpieee128\" >&6; }\n+if test \"x$ac_cv_lib_m___frexpieee128\" = xyes; then :\n+  ac_ldbl_ieee128_in_libc=yes\n+else\n+  ac_ldbl_ieee128_in_libc=no\n+fi\n+\n+        if test $ac_ldbl_ieee128_in_libc = yes; then\n+          # Determine which long double format is the compiler's default:\n+          cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+            #ifndef __LONG_DOUBLE_IEEE128__\n+            #error compiler defaults to ibm128\n+            #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_ldbl_ieee128_default=yes\n+else\n+  ac_ldbl_ieee128_default=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+          # Library objects should use default long double format.\n+          if test \"$ac_ldbl_ieee128_default\" = yes; then\n+            LONG_DOUBLE_128_FLAGS=\"-mno-gnu-attribute\"\n+            # Except for the ones that explicitly use these flags:\n+            LONG_DOUBLE_ALT128_COMPAT_FLAGS=\"-mabi=ibmlongdouble -mno-gnu-attribute -Wno-psabi\"\n+          else\n+            LONG_DOUBLE_128_FLAGS=\"-mno-gnu-attribute\"\n+            LONG_DOUBLE_ALT128_COMPAT_FLAGS=\"-mabi=ieeelongdouble -mno-gnu-attribute -Wno-psabi\"\n+          fi\n+\n+$as_echo \"#define _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT 1\" >>confdefs.h\n+\n+          port_specific_symbol_files=\"$port_specific_symbol_files \\$(top_srcdir)/config/os/gnu-linux/ldbl-ieee128-extra.ver\"\n+          ac_ldbl_alt128_compat=yes\n+        else\n+          ac_ldbl_alt128_compat=no\n+        fi\n+\t;;\n     esac\n   fi\n esac\n \n \n \n+\n+\n+\n # Check if assembler supports disabling hardware capability support.\n \n   test -z \"$HWCAP_CFLAGS\" && HWCAP_CFLAGS=''\n@@ -78268,6 +78366,15 @@ else\n fi\n \n \n+    if test $ac_ldbl_alt128_compat = yes; then\n+  GLIBCXX_LDBL_ALT128_COMPAT_TRUE=\n+  GLIBCXX_LDBL_ALT128_COMPAT_FALSE='#'\n+else\n+  GLIBCXX_LDBL_ALT128_COMPAT_TRUE='#'\n+  GLIBCXX_LDBL_ALT128_COMPAT_FALSE=\n+fi\n+\n+\n     if test $enable_libstdcxx_filesystem_ts = yes; then\n   ENABLE_FILESYSTEM_TS_TRUE=\n   ENABLE_FILESYSTEM_TS_FALSE='#'\n@@ -78778,6 +78885,10 @@ if test -z \"${GLIBCXX_LDBL_COMPAT_TRUE}\" && test -z \"${GLIBCXX_LDBL_COMPAT_FALSE\n   as_fn_error $? \"conditional \\\"GLIBCXX_LDBL_COMPAT\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${GLIBCXX_LDBL_ALT128_COMPAT_TRUE}\" && test -z \"${GLIBCXX_LDBL_ALT128_COMPAT_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"GLIBCXX_LDBL_ALT128_COMPAT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ENABLE_FILESYSTEM_TS_TRUE}\" && test -z \"${ENABLE_FILESYSTEM_TS_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"ENABLE_FILESYSTEM_TS\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "3c799be82b10e25087f67673107d58853cb4f285", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -403,7 +403,11 @@ GLIBCXX_ENABLE_LIBSTDCXX_DUAL_ABI([yes])\n GLIBCXX_DEFAULT_ABI\n \n ac_ldbl_compat=no\n+ac_ldbl_alt128_compat=no\n+ac_ldbl_ieee128_default=no\n LONG_DOUBLE_COMPAT_FLAGS=\"-mlong-double-64\"\n+LONG_DOUBLE_128_FLAGS=\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS=\n case \"$target\" in\n   powerpc*-*-linux* | \\\n   sparc*-*-linux* | \\\n@@ -420,12 +424,43 @@ case \"$target\" in\n     port_specific_symbol_files=\"\\$(top_srcdir)/config/os/gnu-linux/ldbl-extra.ver\"\n     case \"$target\" in\n       powerpc*-*-linux*)\n-\tLONG_DOUBLE_COMPAT_FLAGS=\"$LONG_DOUBLE_COMPAT_FLAGS -mno-gnu-attribute\" ;;\n+\tLONG_DOUBLE_COMPAT_FLAGS=\"$LONG_DOUBLE_COMPAT_FLAGS -mno-gnu-attribute\"\n+        # Check for IEEE128 support in libm:\n+        AC_CHECK_LIB(m, __frexpieee128,\n+                     [ac_ldbl_ieee128_in_libc=yes],\n+                     [ac_ldbl_ieee128_in_libc=no])\n+        if test $ac_ldbl_ieee128_in_libc = yes; then\n+          # Determine which long double format is the compiler's default:\n+          AC_TRY_COMPILE(, [\n+            #ifndef __LONG_DOUBLE_IEEE128__\n+            #error compiler defaults to ibm128\n+            #endif\n+          ], [ac_ldbl_ieee128_default=yes], [ac_ldbl_ieee128_default=no])\n+          # Library objects should use default long double format.\n+          if test \"$ac_ldbl_ieee128_default\" = yes; then\n+            LONG_DOUBLE_128_FLAGS=\"-mno-gnu-attribute\"\n+            # Except for the ones that explicitly use these flags:\n+            LONG_DOUBLE_ALT128_COMPAT_FLAGS=\"-mabi=ibmlongdouble -mno-gnu-attribute -Wno-psabi\"\n+          else\n+            LONG_DOUBLE_128_FLAGS=\"-mno-gnu-attribute\"\n+            LONG_DOUBLE_ALT128_COMPAT_FLAGS=\"-mabi=ieeelongdouble -mno-gnu-attribute -Wno-psabi\"\n+          fi\n+          AC_DEFINE([_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT],1,\n+                [Define if compatibility should be provided for alternative 128-bit long double formats.])\n+          port_specific_symbol_files=\"$port_specific_symbol_files \\$(top_srcdir)/config/os/gnu-linux/ldbl-ieee128-extra.ver\"\n+          ac_ldbl_alt128_compat=yes\n+        else\n+          ac_ldbl_alt128_compat=no\n+        fi\n+\t;;\n     esac\n   fi\n esac\n AC_SUBST(LONG_DOUBLE_COMPAT_FLAGS)\n+AC_SUBST(LONG_DOUBLE_128_FLAGS)\n+AC_SUBST(LONG_DOUBLE_ALT128_COMPAT_FLAGS)\n GLIBCXX_CONDITIONAL(GLIBCXX_LDBL_COMPAT, test $ac_ldbl_compat = yes)\n+GLIBCXX_CONDITIONAL(GLIBCXX_LDBL_ALT128_COMPAT, test $ac_ldbl_alt128_compat = yes)\n \n # Check if assembler supports disabling hardware capability support.\n GCC_CHECK_ASSEMBLER_HWCAP"}, {"sha": "7681908103ab45d2579d4c998e2a188ace7ec399", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -216,6 +216,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -365,11 +367,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "54645739e5cd9a348e1246734317a245a6c64b01", "filename": "libstdc++-v3/fragment.am", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ffragment.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ffragment.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ffragment.am?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -25,10 +25,16 @@ else\n XTEMPLATE_FLAGS =\n endif\n \n+if GLIBCXX_LDBL_ALT128_COMPAT\n+LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n+else\n+LDBL_128_FLAGS =\n+endif\n+\n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "958dfea5a9870bcf0ca842b3d2064958c79a3fbf", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -1294,6 +1294,10 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n+\tldbl_alt128_compat='s,g,g,' ;\\\n+\tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n+\t${CONFIG_HEADER} > /dev/null 2>&1 \\\n+\t&& ldbl_alt128_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n \t-e \"s,define _GLIBCXX_RELEASE,define _GLIBCXX_RELEASE $$release,\" \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n@@ -1304,6 +1308,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_USE_ALLOCATOR_NEW, define _GLIBCXX_USE_ALLOCATOR_NEW $$allocatornew,\" \\\n \t-e \"s,define _GLIBCXX_USE_FLOAT128,$$float128,\" \\\n \t-e \"$$ldbl_compat\" \\\n+\t-e \"$$ldbl_alt128_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n@@ -1314,6 +1319,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/_LARGE_FILES/_GLIBCXX_LARGE_FILES/g' \\\n \t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n \t    -e '/[\t ]_GLIBCXX_LONG_DOUBLE_COMPAT[\t ]/d' \\\n+\t    -e '/[\t ]_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT[\t ]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@"}, {"sha": "b3256a7835e3d8163c118bcf59e9af72b813d213", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -216,6 +216,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -355,11 +357,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once \n@@ -1776,6 +1780,10 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n \t${CONFIG_HEADER} > /dev/null 2>&1 \\\n \t&& ldbl_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_COMPAT 1,' ;\\\n+\tldbl_alt128_compat='s,g,g,' ;\\\n+\tgrep \"^[\t ]*#[\t ]*define[\t ][\t ]*_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT[\t ][\t ]*1[\t ]*$$\" \\\n+\t${CONFIG_HEADER} > /dev/null 2>&1 \\\n+\t&& ldbl_alt128_compat='s,^#undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT$$,#define _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT 1,' ;\\\n \tsed -e \"s,define __GLIBCXX__,define __GLIBCXX__ $$date,\" \\\n \t-e \"s,define _GLIBCXX_RELEASE,define _GLIBCXX_RELEASE $$release,\" \\\n \t-e \"s,define _GLIBCXX_INLINE_VERSION, define _GLIBCXX_INLINE_VERSION $$ns_version,\" \\\n@@ -1786,6 +1794,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t-e \"s,define _GLIBCXX_USE_ALLOCATOR_NEW, define _GLIBCXX_USE_ALLOCATOR_NEW $$allocatornew,\" \\\n \t-e \"s,define _GLIBCXX_USE_FLOAT128,$$float128,\" \\\n \t-e \"$$ldbl_compat\" \\\n+\t-e \"$$ldbl_alt128_compat\" \\\n \t    < ${glibcxx_srcdir}/include/bits/c++config > $@ ;\\\n \tsed -e 's/HAVE_/_GLIBCXX_HAVE_/g' \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n@@ -1796,6 +1805,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/_LARGE_FILES/_GLIBCXX_LARGE_FILES/g' \\\n \t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n \t    -e '/[\t ]_GLIBCXX_LONG_DOUBLE_COMPAT[\t ]/d' \\\n+\t    -e '/[\t ]_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT[\t ]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n \techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@"}, {"sha": "8cce88aa87b51a78a838bcca8ef495b2e1c4ff70", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -425,8 +425,28 @@ _GLIBCXX_END_NAMESPACE_VERSION\n // GLIBCXX_ABI Deprecated\n // Define if compatibility should be provided for -mlong-double-64.\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n+// Define if compatibility should be provided for alternative 128-bit long\n+// double formats.\n+#undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\n+// Inline namespaces for long double 128 modes.\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+  && defined __LONG_DOUBLE_IEEE128__\n+namespace std\n+{\n+  // Namespaces for 128-bit IEEE long double format on 64-bit POWER LE.\n+  inline namespace __gnu_cxx_ieee128 { }\n+  inline namespace __gnu_cxx11_ieee128 { }\n+}\n+# define _GLIBCXX_NAMESPACE_LDBL __gnu_cxx_ieee128::\n+# define _GLIBCXX_BEGIN_NAMESPACE_LDBL namespace __gnu_cxx_ieee128 {\n+# define _GLIBCXX_END_NAMESPACE_LDBL }\n+# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 __gnu_cxx11_ieee128::\n+# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 namespace __gnu_cxx11_ieee128 {\n+# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 }\n+\n+#else // _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && IEEE128\n \n-// Inline namespace for long double 128 mode.\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n namespace std\n {\n@@ -440,6 +460,7 @@ namespace std\n # define _GLIBCXX_BEGIN_NAMESPACE_LDBL\n # define _GLIBCXX_END_NAMESPACE_LDBL\n #endif\n+\n #if _GLIBCXX_USE_CXX11_ABI\n # define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11\n # define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11\n@@ -450,6 +471,8 @@ namespace std\n # define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_LDBL\n #endif\n \n+#endif // _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && IEEE128\n+\n // Debug Mode implies checking assertions.\n #if defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_ASSERTIONS)\n # define _GLIBCXX_ASSERTIONS 1\n@@ -657,9 +680,12 @@ namespace std\n # define __cpp_lib_char8_t 201907L\n #endif\n \n-/* Define if __float128 is supported on this host. */\n+/* Define if __float128 is supported on this host.  */\n #if defined(__FLOAT128__) || defined(__SIZEOF_FLOAT128__)\n-#define _GLIBCXX_USE_FLOAT128\n+/* For powerpc64 don't use __float128 when it's the same type as long double. */\n+# if !(defined(_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT) && defined(__LONG_DOUBLE_IEEE128__))\n+#  define _GLIBCXX_USE_FLOAT128\n+# endif\n #endif\n \n #ifdef __has_builtin"}, {"sha": "ed7764e06e7822133298ec92c8ac3815e4602851", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -625,6 +625,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void _M_init_extra(facet**);\n     void _M_init_extra(void*, void*, const char*, const char*);\n+\n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+    void _M_init_extra_ldbl128(bool);\n+#endif\n   };\n \n "}, {"sha": "07be38fc92fac0819f3c9326b18c6dc44e11dba5", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -51,20 +51,23 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // NB: Don't instantiate required wchar_t facets if no wchar_t support.\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-# define  _GLIBCXX_NUM_FACETS 28\n-# define  _GLIBCXX_NUM_CXX11_FACETS 16\n-#else\n-# define  _GLIBCXX_NUM_FACETS 14\n-# define  _GLIBCXX_NUM_CXX11_FACETS 8\n-#endif\n+// Number of standard facets (for narrow characters only)\n+#define  _GLIBCXX_NUM_FACETS 14\n+\n+// Number of duplicated facets for cxx11 ABI\n+#define  _GLIBCXX_NUM_CXX11_FACETS (_GLIBCXX_USE_DUAL_ABI ? 8 : 0)\n+\n+// codecvt<char16_t> and codecvt<char32_t>\n #ifdef _GLIBCXX_USE_CHAR8_T\n # define _GLIBCXX_NUM_UNICODE_FACETS 4\n #else\n # define _GLIBCXX_NUM_UNICODE_FACETS 2\n #endif\n \n+// Facets duplicated for alt128 long double format\n+// num_get, num_put, money_get, money_put (+ cxx11 money_get, money_put)\n+#define _GLIBCXX_NUM_LBDL_ALT128_FACETS (4 + (_GLIBCXX_USE_DUAL_ABI ? 2 : 0))\n+\n   // Convert string to numeric value of type _Tp and store results.\n   // NB: This is specialized for all required types, there is no\n   // generic definition.\n@@ -2252,6 +2255,10 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n \n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      // For __gnu_cxx_ldbl128::num_get and __gnu_cxx_ieee128::num_get\n+      // this entry in the vtable is for a 64-bit \"long double\" with the\n+      // same format as double. This keeps the vtable layout consistent\n+      // with std::num_get (visible when -mlong-double-64 is used).\n       virtual iter_type\n       __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,\n \t       double&) const;\n@@ -2264,8 +2271,21 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       virtual iter_type\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+      // For __gnu_cxx_ieee128::num_get this entry in the vtable is for\n+      // the non-IEEE 128-bit \"long double\" (aka \"double double\"). This\n+      // is consistent with __gnu_cxx_ldbl128::num_get (-mabi=ibmlongdouble)\n+      virtual iter_type\n+      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,\n+\t       __ibm128&) const;\n+#endif\n+\n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n+      // For __gnu_cxx_ldbl128::num_get and __gnu_cxx_ieee128::num_get\n+      // this entry in the vtable is for the 128-bit \"long double\" type.\n       virtual iter_type\n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,\n \t     long double&) const;\n@@ -2545,6 +2565,13 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       virtual iter_type\n       do_put(iter_type, ios_base&, char_type, const void*) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+      virtual iter_type\n+      __do_put(iter_type, ios_base&, char_type, __ibm128) const;\n+#endif\n+\n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__\n       virtual iter_type"}, {"sha": "4fdca180a877faa61fa37d1f5fcb5d2e3b17721a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -772,6 +772,24 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       return __beg;\n     }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    num_get<_CharT, _InIter>::\n+    __do_get(iter_type __beg, iter_type __end, ios_base& __io,\n+\t     ios_base::iostate& __err, __ibm128& __v) const\n+    {\n+      string __xtrc;\n+      __xtrc.reserve(32);\n+      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n+      if (__beg == __end)\n+\t__err |= ios_base::eofbit;\n+      return __beg;\n+    }\n+#endif\n+\n   // For use by integer and floating-point types after they have been\n   // converted into a char_type string.\n   template<typename _CharT, typename _OutIter>\n@@ -1194,6 +1212,15 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL\n       return __s;\n     }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+  template<typename _CharT, typename _OutIter>\n+    _OutIter\n+    num_put<_CharT, _OutIter>::\n+    __do_put(iter_type __s, ios_base& __io, char_type __fill,\n+\t     __ibm128 __v) const\n+    { return _M_insert_float(__s, __io, __fill, 'L', __v); }\n+#endif\n _GLIBCXX_END_NAMESPACE_LDBL\n \n   // Construct correctly padded string, as per 22.2.2.2.2"}, {"sha": "6af68d3fa90375ddb17c45f9c55f1f28cd0882ee", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -1566,7 +1566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n        */\n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n+      && (_GLIBCXX_USE_CXX11_ABI == 0 || defined __LONG_DOUBLE_IEEE128__)\n       virtual iter_type\n       __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t       ios_base::iostate& __err, double& __units) const;\n@@ -1587,9 +1587,17 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n       do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t     ios_base::iostate& __err, string_type& __digits) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+      virtual iter_type\n+      __do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n+\t       ios_base::iostate& __err, __ibm128& __units) const;\n+#endif\n+\n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n+      && (_GLIBCXX_USE_CXX11_ABI == 0 || defined __LONG_DOUBLE_IEEE128__)\n       virtual iter_type\n       do_get(iter_type __s, iter_type __end, bool __intl, ios_base& __io,\n \t     ios_base::iostate& __err, long double& __units) const;\n@@ -1711,7 +1719,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n        */\n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n+      && (_GLIBCXX_USE_CXX11_ABI == 0 || defined __LONG_DOUBLE_IEEE128__)\n       virtual iter_type\n       __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t       double __units) const;\n@@ -1744,9 +1752,17 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     const string_type& __digits) const;\n \n+      // XXX GLIBCXX_ABI Deprecated\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+      virtual iter_type\n+      __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t       __ibm128 __units) const;\n+#endif\n+\n       // XXX GLIBCXX_ABI Deprecated\n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n+      && (_GLIBCXX_USE_CXX11_ABI == 0 || defined __LONG_DOUBLE_IEEE128__)\n       virtual iter_type\n       do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n \t     long double __units) const;"}, {"sha": "9e2b65779698fbf78377eb5496438d3034aae539", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -350,7 +350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n       }\n \n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n+      && (_GLIBCXX_USE_CXX11_ABI == 0 || defined __LONG_DOUBLE_IEEE128__)\n   template<typename _CharT, typename _InIter>\n     _InIter\n     money_get<_CharT, _InIter>::\n@@ -401,6 +401,22 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n       return __beg;\n     }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+  template<typename _CharT, typename _InIter>\n+    _InIter\n+    money_get<_CharT, _InIter>::\n+    __do_get(iter_type __beg, iter_type __end, bool __intl, ios_base& __io,\n+\t     ios_base::iostate& __err, __ibm128& __units) const\n+    {\n+      string __str;\n+      __beg = __intl ? _M_extract<true>(__beg, __end, __io, __err, __str)\n+\t             : _M_extract<false>(__beg, __end, __io, __err, __str);\n+      std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());\n+      return __beg;\n+    }\n+#endif\n+\n   template<typename _CharT, typename _OutIter>\n     template<bool _Intl>\n       _OutIter\n@@ -562,7 +578,7 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n       }\n \n #if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined __LONG_DOUBLE_128__ \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n+      && (_GLIBCXX_USE_CXX11_ABI == 0 || defined __LONG_DOUBLE_IEEE128__)\n   template<typename _CharT, typename _OutIter>\n     _OutIter\n     money_put<_CharT, _OutIter>::\n@@ -617,6 +633,47 @@ _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n     { return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n \t            : _M_insert<false>(__s, __io, __fill, __digits); }\n \n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT \\\n+      && defined __LONG_DOUBLE_IEEE128__\n+  template<typename _CharT, typename _OutIter>\n+    _OutIter\n+    money_put<_CharT, _OutIter>::\n+    __do_put(iter_type __s, bool __intl, ios_base& __io, char_type __fill,\n+\t     __ibm128 __units) const\n+    {\n+      const locale __loc = __io.getloc();\n+      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n+#if _GLIBCXX_USE_C99_STDIO\n+      // First try a buffer perhaps big enough.\n+      int __cs_size = 64;\n+      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 328. Bad sprintf format modifier in money_put<>::do_put()\n+      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n+\t\t\t\t\t\"%.*Lf\", 0, __units);\n+      // If the buffer was not large enough, try again with the correct size.\n+      if (__len >= __cs_size)\n+\t{\n+\t  __cs_size = __len + 1;\n+\t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+\t  __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,\n+\t\t\t\t\t\"%.*Lf\", 0, __units);\n+\t}\n+#else\n+      // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'.\n+      const int __cs_size =\n+\t__gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 3;\n+      char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n+      int __len = std::__convert_from_v(_S_get_c_locale(), __cs, 0, \"%.*Lf\", \n+\t\t\t\t\t0, __units);\n+#endif\n+      string_type __digits(__len, char_type());\n+      __ctype.widen(__cs, __cs + __len, &__digits[0]);\n+      return __intl ? _M_insert<true>(__s, __io, __fill, __digits)\n+\t            : _M_insert<false>(__s, __io, __fill, __digits);\n+    }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n   // NB: Not especially useful. Without an ios_base object or some"}, {"sha": "78a03e3f00d60636eabc2647ea595e89423c2eec", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -201,6 +201,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __numeric_traits_floating<long double>\n     { };\n \n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+# if defined __LONG_DOUBLE_IEEE128__\n+  // long double is __ieee128, define traits for __ibm128\n+  template<>\n+    struct __numeric_traits_floating<__ibm128>\n+    {\n+      static const int __max_digits10 = 33;\n+      static const bool __is_signed = true;\n+      static const int __digits10 = 31;\n+      static const int __max_exponent10 = 308;\n+    };\n+  template<>\n+    struct __numeric_traits<__ibm128>\n+    : public __numeric_traits_floating<__ibm128>\n+    { };\n+# elif defined __LONG_DOUBLE_IBM128__\n+  // long double is __ibm128, define traits for __ieee128\n+  template<>\n+    struct __numeric_traits_floating<__ieee128>\n+    {\n+      static const int __max_digits10 = 36;\n+      static const bool __is_signed = true;\n+      static const int __digits10 = 33;\n+      static const int __max_exponent10 = 4932;\n+    };\n+  template<>\n+    struct __numeric_traits<__ieee128>\n+    : public __numeric_traits_floating<__ieee128>\n+    { };\n+# endif\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "831f3ed0ad3593e0b41e575b55e2e53b9c88c3db", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -325,6 +325,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -464,11 +466,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "8edd2e0563973b79a236c9d6989181240f23ef45", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -216,6 +216,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -355,11 +357,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "c35dbe559610fac329a2bb0c8e503e59db5181eb", "filename": "libstdc++-v3/python/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -246,6 +246,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -385,11 +387,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "c32c88954f3676560b3cfd0aca5be48f127b3881", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -71,6 +71,20 @@ else\n ldbl_compat_sources =\n endif\n \n+if GLIBCXX_LDBL_ALT128_COMPAT\n+if ENABLE_DUAL_ABI\n+ldbl_alt128_compat_cxx11_sources = \\\n+\tcompatibility-ldbl-alt128-cxx11.cc\n+else\n+ldbl_alt128_compat_cxx11_sources =\n+endif\n+ldbl_alt128_compat_sources = \\\n+\tcompatibility-ldbl-alt128.cc \\\n+\t${ldbl_alt128_compat_cxx11_sources}\n+else\n+ldbl_alt128_compat_sources =\n+endif\n+\n \n parallel_compat_sources = \\\n \tcompatibility-parallel_list.cc  compatibility-parallel_list-2.cc\n@@ -87,7 +101,8 @@ cxx11_sources = \\\n \tcompatibility-atomic-c++0x.cc \\\n \tcompatibility-thread-c++0x.cc \\\n \tcompatibility-chrono.cc \\\n-\tcompatibility-condvar.cc\n+\tcompatibility-condvar.cc \\\n+\t${ldbl_alt128_compat_sources}\n \n libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n \n@@ -113,12 +128,36 @@ libstdc___la_LDFLAGS = \\\n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS) $(lt_host_flags)\n \n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n-# pass -mlong-double-64.\n+# pass -mlong-double-64, and not use -mabi={ieee,ibm}longdouble.\n if GLIBCXX_LDBL_COMPAT\n+if GLIBCXX_LDBL_ALT128_COMPAT\n+LTCXXCOMPILE64 = \\\n+  $(filter-out -mabi=ieeelongdouble -mabi=ibmlongdouble,$(LTCXXCOMPILE))\n+CXXCOMPILE64 = \\\n+  $(filter-out -mabi=ieeelongdouble -mabi=ibmlongdouble,$(CXXCOMPILE))\n+else\n+LTCXXCOMPILE64 = $(LTCXXCOMPILE)\n+CXXCOMPILE64 = $(CXXCOMPILE)\n+endif\n compatibility-ldbl.lo: compatibility-ldbl.cc\n-\t$(LTCXXCOMPILE) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n+\t$(LTCXXCOMPILE64) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n compatibility-ldbl.o: compatibility-ldbl.cc\n-\t$(CXXCOMPILE) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n+\t$(CXXCOMPILE64) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n+endif\n+\n+# Use special rules for compatibility-ldbl-alt128.cc compilation, as we need to\n+# ensure it is compiled with the correct flag.\n+if GLIBCXX_LDBL_ALT128_COMPAT\n+compatibility-ldbl-alt128.lo: compatibility-ldbl-alt128.cc\n+\t$(LTCXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+compatibility-ldbl-alt128.o: compatibility-ldbl-alt128.cc\n+\t$(CXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+if ENABLE_DUAL_ABI\n+compatibility-ldbl-alt128-cxx11.lo: compatibility-ldbl-alt128-cxx11.cc\n+\t$(LTCXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+compatibility-ldbl-alt128-cxx11.o: compatibility-ldbl-alt128-cxx11.cc\n+\t$(CXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+endif\n endif\n \n # Use special rules for C++11 files/objects."}, {"sha": "684b7aee16b12b8022ff96069116c04b758302ca", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -153,10 +153,14 @@ am__DEPENDENCIES_1 =\n @GLIBCXX_LDBL_COMPAT_TRUE@am__objects_1 = compatibility-ldbl.lo\n am__objects_2 = compatibility.lo compatibility-debug_list.lo \\\n \tcompatibility-debug_list-2.lo $(am__objects_1)\n-am__objects_3 = compatibility-c++0x.lo compatibility-atomic-c++0x.lo \\\n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@am__objects_3 = compatibility-ldbl-alt128-cxx11.lo\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@am__objects_4 =  \\\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\tcompatibility-ldbl-alt128.lo \\\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(am__objects_3)\n+am__objects_5 = compatibility-c++0x.lo compatibility-atomic-c++0x.lo \\\n \tcompatibility-thread-c++0x.lo compatibility-chrono.lo \\\n-\tcompatibility-condvar.lo\n-am_libstdc___la_OBJECTS = $(am__objects_2) $(am__objects_3)\n+\tcompatibility-condvar.lo $(am__objects_4)\n+am_libstdc___la_OBJECTS = $(am__objects_2) $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n @VTV_CYGMIN_FALSE@am_libstdc___la_rpath = -rpath $(toolexeclibdir)\n @VTV_CYGMIN_TRUE@am_libstdc___la_rpath = -rpath $(toolexeclibdir)\n@@ -311,6 +315,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -450,11 +456,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once \n@@ -483,6 +491,15 @@ SUBDIRS = c++98 c++11 c++17 c++20 $(filesystem_dir)\n \n @GLIBCXX_LDBL_COMPAT_FALSE@ldbl_compat_sources = \n @GLIBCXX_LDBL_COMPAT_TRUE@ldbl_compat_sources = compatibility-ldbl.cc\n+@ENABLE_DUAL_ABI_FALSE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@ldbl_alt128_compat_cxx11_sources = \n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@ldbl_alt128_compat_cxx11_sources = \\\n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\tcompatibility-ldbl-alt128-cxx11.cc\n+\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@ldbl_alt128_compat_sources = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@ldbl_alt128_compat_sources = \\\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\tcompatibility-ldbl-alt128.cc \\\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t${ldbl_alt128_compat_cxx11_sources}\n+\n parallel_compat_sources = \\\n \tcompatibility-parallel_list.cc  compatibility-parallel_list-2.cc\n \n@@ -497,7 +514,8 @@ cxx11_sources = \\\n \tcompatibility-atomic-c++0x.cc \\\n \tcompatibility-thread-c++0x.cc \\\n \tcompatibility-chrono.cc \\\n-\tcompatibility-condvar.cc\n+\tcompatibility-condvar.cc \\\n+\t${ldbl_alt128_compat_sources}\n \n libstdc___la_SOURCES = $(cxx98_sources) $(cxx11_sources)\n libstdc___la_LIBADD = \\\n@@ -520,6 +538,17 @@ libstdc___la_LDFLAGS = \\\n \t-version-info $(libtool_VERSION) ${version_arg} -lm\n \n libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS) $(lt_host_flags)\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@@GLIBCXX_LDBL_COMPAT_TRUE@LTCXXCOMPILE64 = $(LTCXXCOMPILE)\n+\n+# Use special rules for compatibility-ldbl.cc compilation, as we need to\n+# pass -mlong-double-64, and not use -mabi={ieee,ibm}longdouble.\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@@GLIBCXX_LDBL_COMPAT_TRUE@LTCXXCOMPILE64 = \\\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@@GLIBCXX_LDBL_COMPAT_TRUE@  $(filter-out -mabi=ieeelongdouble -mabi=ibmlongdouble,$(LTCXXCOMPILE))\n+\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@@GLIBCXX_LDBL_COMPAT_TRUE@CXXCOMPILE64 = $(CXXCOMPILE)\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@@GLIBCXX_LDBL_COMPAT_TRUE@CXXCOMPILE64 = \\\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@@GLIBCXX_LDBL_COMPAT_TRUE@  $(filter-out -mabi=ieeelongdouble -mabi=ibmlongdouble,$(CXXCOMPILE))\n+\n \n # A note on compatibility and static libraries.\n #\n@@ -962,13 +991,21 @@ vpath % $(top_srcdir)/src/c++11\n vpath % $(top_srcdir)/src/c++17\n vpath % $(top_srcdir)/src/c++20\n @ENABLE_FILESYSTEM_TS_TRUE@vpath % $(top_srcdir)/src/filesystem\n-\n-# Use special rules for compatibility-ldbl.cc compilation, as we need to\n-# pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc\n-@GLIBCXX_LDBL_COMPAT_TRUE@\t$(LTCXXCOMPILE) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n+@GLIBCXX_LDBL_COMPAT_TRUE@\t$(LTCXXCOMPILE64) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.o: compatibility-ldbl.cc\n-@GLIBCXX_LDBL_COMPAT_TRUE@\t$(CXXCOMPILE) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n+@GLIBCXX_LDBL_COMPAT_TRUE@\t$(CXXCOMPILE64) $(LONG_DOUBLE_COMPAT_FLAGS) -c $<\n+\n+# Use special rules for compatibility-ldbl-alt128.cc compilation, as we need to\n+# ensure it is compiled with the correct flag.\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@compatibility-ldbl-alt128.lo: compatibility-ldbl-alt128.cc\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(LTCXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@compatibility-ldbl-alt128.o: compatibility-ldbl-alt128.cc\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(CXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@compatibility-ldbl-alt128-cxx11.lo: compatibility-ldbl-alt128-cxx11.cc\n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(LTCXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@compatibility-ldbl-alt128-cxx11.o: compatibility-ldbl-alt128-cxx11.cc\n+@ENABLE_DUAL_ABI_TRUE@@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(CXXCOMPILE) $(LONG_DOUBLE_ALT128_COMPAT_FLAGS) -std=gnu++11 -c $<\n \n # Use special rules for C++11 files/objects.\n compatibility-c++0x.lo: compatibility-c++0x.cc"}, {"sha": "ae3a2fd5b4e71f8e9c3a63e9b85bc16b04de7dfa", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -282,6 +282,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -421,11 +423,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "7c03606bce4dbd65e3b06901ffb2e489372aa8a7", "filename": "libstdc++-v3/src/c++11/compatibility-ldbl-alt128-cxx11.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-alt128-cxx11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-alt128-cxx11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-alt128-cxx11.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -0,0 +1,102 @@\n+// Compatibility symbols for alternate 128-bit long-double format -*- C++ -*-\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <locale>\n+\n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\n+#if !defined(_GLIBCXX_USE_DUAL_ABI)\n+#error \"compatibility-ldbl-alt128-cxx11.cc must only be compiled when dual ABI is enabled\"\n+#endif\n+\n+#if ! defined __LONG_DOUBLE_IBM128__ && ! defined __LONG_DOUBLE_IEEE128__\n+#error \"compatibility-ldbl-alt128.cc must only be compiled for 128-bit long double\"\n+#endif\n+\n+#define C char\n+#define C_is_char\n+#include \"locale-inst-monetary.h\"\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+# undef C\n+# undef C_is_char\n+# define C wchar_t\n+# include \"locale-inst-monetary.h\"\n+#endif\n+\n+#include <functional>\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  namespace\n+  {\n+    alignas(money_get<char>) char money_get_c[sizeof(money_get<char>)];\n+    alignas(money_put<char>) char money_put_c[sizeof(money_put<char>)];\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    alignas(money_get<wchar_t>) char money_get_w[sizeof(money_get<wchar_t>)];\n+    alignas(money_put<wchar_t>) char money_put_w[sizeof(money_put<wchar_t>)];\n+#endif\n+\n+  template<typename Facet>\n+    void\n+    init_facet(function<void(const locale::id*, const locale::facet*)>& func,\n+\t       Facet* facet)\n+    {\n+      func(&Facet::id, facet);\n+    }\n+\n+  } // namespace\n+\n+  template class function<void(const locale::id*, const locale::facet*)>;\n+\n+  void\n+  __locale_Impl_init_extra_ldbl128(\n+      function<void(const locale::id*, const locale::facet*)> f,\n+      bool classic)\n+  {\n+    if (classic)\n+      {\n+\tinit_facet(f, new (&money_get_c) money_get<char>(1));\n+\tinit_facet(f, new (&money_put_c) money_put<char>(1));\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+\tinit_facet(f, new (&money_get_w) money_get<wchar_t>(1));\n+\tinit_facet(f, new (&money_put_w) money_put<wchar_t>(1));\n+#endif\n+      }\n+    else\n+      {\n+\tinit_facet(f, new money_get<char>);\n+\tinit_facet(f, new money_put<char>);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+\tinit_facet(f, new money_get<wchar_t>);\n+\tinit_facet(f, new money_put<wchar_t>);\n+#endif\n+      }\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif"}, {"sha": "7fb66917db136d47b4a555a4396af10217859ae8", "filename": "libstdc++-v3/src/c++11/compatibility-ldbl-alt128.cc", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-alt128.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-alt128.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-alt128.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -0,0 +1,244 @@\n+// Compatibility symbols for alternate 128-bit long-double format -*- C++ -*-\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include <locale>\n+\n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\n+#if ! defined __LONG_DOUBLE_IBM128__ && ! defined __LONG_DOUBLE_IEEE128__\n+#error \"compatibility-ldbl-alt128.cc must only be compiled for 128-bit long double\"\n+#endif\n+\n+#define C char\n+#define C_is_char\n+#include \"locale-inst-numeric.h\"\n+#include \"locale-inst-monetary.h\"\n+#include \"compatibility-ldbl-facets-aliases.h\"\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+# undef C\n+# undef C_is_char\n+# define C wchar_t\n+# include \"locale-inst-numeric.h\"\n+# include \"locale-inst-monetary.h\"\n+# include \"compatibility-ldbl-facets-aliases.h\"\n+# undef C\n+#endif\n+\n+#include <limits>\n+#include <functional>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // long double\n+  const bool numeric_limits<long double>::is_specialized;\n+  const int  numeric_limits<long double>::digits;\n+  const int  numeric_limits<long double>::digits10;\n+  const int  numeric_limits<long double>::max_digits10;\n+  const bool numeric_limits<long double>::is_signed;\n+  const bool numeric_limits<long double>::is_integer;\n+  const bool numeric_limits<long double>::is_exact;\n+  const int  numeric_limits<long double>::radix;\n+  const int  numeric_limits<long double>::min_exponent;\n+  const int  numeric_limits<long double>::min_exponent10;\n+  const int  numeric_limits<long double>::max_exponent;\n+  const int  numeric_limits<long double>::max_exponent10;\n+  const bool numeric_limits<long double>::has_infinity;\n+  const bool numeric_limits<long double>::has_quiet_NaN;\n+  const bool numeric_limits<long double>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<long double>::has_denorm;\n+  const bool numeric_limits<long double>::has_denorm_loss;\n+  const bool numeric_limits<long double>::is_iec559;\n+  const bool numeric_limits<long double>::is_bounded;\n+  const bool numeric_limits<long double>::is_modulo;\n+  const bool numeric_limits<long double>::traps;\n+  const bool numeric_limits<long double>::tinyness_before;\n+  const float_round_style numeric_limits<long double>::round_style;\n+\n+  template<>\n+    void\n+    __convert_to_v(const char* __s, long double& __v, ios_base::iostate& __err,\n+\t\t   const __c_locale& __cloc) throw()\n+    {\n+      char* __sanity;\n+#if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n+      // Prefer strtold_l, as __strtold_l isn't prototyped in more recent\n+      // glibc versions.\n+      __v = strtold_l(__s, &__sanity, __cloc);\n+#else\n+      __v = __strtold_l(__s, &__sanity, __cloc);\n+#endif\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 23. Num_get overflow result.\n+      if (__sanity == __s || *__sanity != '\\0')\n+\t{\n+\t  __v = 0.0l;\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == numeric_limits<long double>::infinity())\n+\t{\n+\t  __v = numeric_limits<long double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+      else if (__v == -numeric_limits<long double>::infinity())\n+\t{\n+\t  __v = -numeric_limits<long double>::max();\n+\t  __err = ios_base::failbit;\n+\t}\n+    }\n+\n+  namespace\n+  {\n+    alignas(money_get<char>) char money_get_c[sizeof(money_get<char>)];\n+    alignas(money_put<char>) char money_put_c[sizeof(money_put<char>)];\n+    alignas(num_get<char>) char num_get_c[sizeof(num_get<char>)];\n+    alignas(num_put<char>) char num_put_c[sizeof(num_put<char>)];\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    alignas(money_get<wchar_t>) char money_get_w[sizeof(money_get<wchar_t>)];\n+    alignas(money_put<wchar_t>) char money_put_w[sizeof(money_put<wchar_t>)];\n+    alignas(num_get<wchar_t>) char num_get_w[sizeof(num_get<wchar_t>)];\n+    alignas(num_put<wchar_t>) char num_put_w[sizeof(num_put<wchar_t>)];\n+#endif\n+  }\n+\n+  extern void\n+  __locale_Impl_init_extra_ldbl128(\n+      function<void(const locale::id*, const locale::facet*)>,\n+      bool);\n+\n+  void\n+  locale::_Impl::_M_init_extra_ldbl128(bool classic)\n+  {\n+    if (classic)\n+      {\n+\t_M_init_facet(new (&money_get_c) money_get<char>(1));\n+\t_M_init_facet(new (&money_put_c) money_put<char>(1));\n+\t_M_init_facet(new (&num_get_c) num_get<char>(1));\n+\t_M_init_facet(new (&num_put_c) num_put<char>(1));\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+\t_M_init_facet(new (&money_get_w) money_get<wchar_t>(1));\n+\t_M_init_facet(new (&money_put_w) money_put<wchar_t>(1));\n+\t_M_init_facet(new (&num_get_w) num_get<wchar_t>(1));\n+\t_M_init_facet(new (&num_put_w) num_put<wchar_t>(1));\n+#endif\n+      }\n+    else\n+      {\n+\t_M_init_facet(new money_get<char>);\n+\t_M_init_facet(new money_put<char>);\n+\t_M_init_facet(new num_get<char>);\n+\t_M_init_facet(new num_put<char>);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+\t_M_init_facet(new money_get<wchar_t>);\n+\t_M_init_facet(new money_put<wchar_t>);\n+\t_M_init_facet(new num_get<wchar_t>);\n+\t_M_init_facet(new num_put<wchar_t>);\n+#endif\n+      }\n+\n+#if _GLIBCXX_USE_DUAL_ABI\n+    __locale_Impl_init_extra_ldbl128(\n+\t[this](const locale::id* i, const facet* f) {\n+\t    _M_install_facet(i, f);\n+\t},\n+\tclassic);\n+#endif\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#include <istream>\n+#include <ostream>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template istream& istream::operator>>(long double&);\n+  template istream& istream::_M_extract(long double&);\n+  template ostream& ostream::operator<<(long double);\n+  template ostream& ostream::_M_insert(long double);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template wistream& wistream::operator>>(long double&);\n+  template wistream& wistream::_M_extract(long double&);\n+  template wostream& wostream::operator<<(long double);\n+  template wostream& wostream::_M_insert(long double);\n+#endif\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#include <complex>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+  template\n+    basic_istream<char, char_traits<char> >&\n+    operator>>(basic_istream<char, char_traits<char> >&,\n+\t       complex<long double>&);\n+  template\n+    basic_ostream<char, char_traits<char> >&\n+    operator<<(basic_ostream<char, char_traits<char> >&,\n+               const complex<long double>&);\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template\n+    basic_istream<wchar_t, char_traits<wchar_t> >&\n+    operator>>(basic_istream<wchar_t, char_traits<wchar_t> >&,\n+               complex<long double>&);\n+  template\n+    basic_ostream<wchar_t, char_traits<wchar_t> >&\n+    operator<<(basic_ostream<wchar_t, char_traits<wchar_t> >&,\n+               const complex<long double>&);\n+#endif\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#include <cmath>\n+#include <tr1/functional>\n+\n+// For std::tr1::hash<long double>::operator()\n+#include \"../c++98/hash-long-double-tr1-aux.cc\"\n+\n+// std::tr1::hash<long double>::operator()\n+// and std::hash<long double>::operator()\n+// are the same, no need to duplicate them.\n+#ifdef __LONG_DOUBLE_IBM128__\n+extern \"C\" size_t\n+_ZNKSt4hashIgEclEg (void)\n+  __attribute__((pure))\n+  __attribute__((alias (\"_ZNKSt3tr14hashIgEclEg\")));\n+#elif __LONG_DOUBLE_IEEE128__\n+extern \"C\" size_t\n+_ZNKSt4hashIu9__ieee128EclEu9__ieee128 (void)\n+  __attribute__((pure))\n+  __attribute__((alias (\"_ZNKSt3tr14hashIu9__ieee128EclEu9__ieee128\")));\n+#else\n+# error \"Configuration error\"\n+#endif\n+\n+#endif"}, {"sha": "7bdf9810d0ec491b3a00feabedd02d36840ee6db", "filename": "libstdc++-v3/src/c++11/compatibility-ldbl-facets-aliases.h", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-facets-aliases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-facets-aliases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-ldbl-facets-aliases.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -0,0 +1,128 @@\n+// Compatibility aliases for long double support in locales -*- C++ -*-\n+\n+// Copyright (C) 1999-2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef C\n+#define \"This file should not be compiled directly, only included\"\n+#endif\n+\n+#ifndef _GLIBCXX_LONG_DOUBLE_COMPAT\n+#define \"This file should only be used for _GLIBCXX_LONG_DOUBLE_COMPAT builds\"\n+#endif\n+\n+// XXX GLIBCXX_ABI Deprecated\n+#if defined __LONG_DOUBLE_128__ && ! defined __LONG_DOUBLE_IEEE128__\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wattribute-alias\"\n+\n+#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n+  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n+\n+// Define members of std::num_get and std::num_put as aliases for\n+// members of __gnu_cxx_ldbl128::num_get and __gnu_cxx_ldbl128::num_put\n+#ifdef C_is_char\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIjEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIjEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIlEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIlEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intImEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intImEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intItEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intItEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIxEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIxEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIyEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIyEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIlEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIlEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intImEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intImEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIxEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIxEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIyEES4_S4_RSt8ios_basecT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIyEES3_S3_RSt8ios_basecT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES4_S4_RSt8ios_baseccT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES3_S3_RSt8ios_baseccT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES3_S3_RSt8ios_baseccT_,\n+\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIeEES3_S3_RSt8ios_baseccT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb0EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb0EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb1EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb1EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb0EEES4_S4_RSt8ios_basecRKSs,\n+\t\t     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb0EEES3_S3_RSt8ios_basecRKSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb1EEES4_S4_RSt8ios_basecRKSs,\n+\t\t     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb1EEES3_S3_RSt8ios_basecRKSs);\n+#else // ! C_is_char\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIjEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIjEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIlEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIlEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intImEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intImEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intItEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intItEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIxEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIxEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIyEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n+\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIyEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIlEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIlEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intImEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intImEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIxEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIxEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIyEES4_S4_RSt8ios_basewT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIyEES3_S3_RSt8ios_basewT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES4_S4_RSt8ios_basewcT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES3_S3_RSt8ios_basewcT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES3_S3_RSt8ios_basewcT_,\n+\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIeEES3_S3_RSt8ios_basewcT_);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb0EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb0EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb1EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n+\t\t     _ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb1EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb0EEES4_S4_RSt8ios_basewRKSbIwS3_SaIwEE,\n+\t\t     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb0EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE);\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb1EEES4_S4_RSt8ios_basewRKSbIwS3_SaIwEE,\n+\t\t     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb1EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE);\n+#endif // C_is_char\n+\n+\n+#if defined _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+// Define __gnu_cxx_ieee128::num_put<>::_M_insert_float(..., __ibm128) as\n+// alias of __gnu_cxx_ldbl128::num_put<>::_M_insert_float(..., __ibm128)\n+# ifdef C_is_char\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIgEES4_S4_RSt8ios_baseccT_,\n+\t\t     _ZNKSt17__gnu_cxx_ieee1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIgEES4_S4_RSt8ios_baseccT_);\n+# else\n+_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIgEES4_S4_RSt8ios_basewcT_,\n+\t\t     _ZNKSt17__gnu_cxx_ieee1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIgEES4_S4_RSt8ios_basewcT_);\n+# endif\n+#endif // _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\n+#undef _GLIBCXX_LDBL_COMPAT\n+#pragma GCC diagnostic pop\n+\n+#endif  // __LONG_DOUBLE_128__ && ! __LONG_DOUBLE_IEEE128__"}, {"sha": "bf270712e47a95f66c4818dd2000d74b7923de9f", "filename": "libstdc++-v3/src/c++11/cow-locale_init.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-locale_init.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -125,6 +125,7 @@ namespace\n     _M_init_facet_unchecked(new (&messages_w) std::messages<wchar_t>(1));\n #endif\n \n+    // The caches must be populated last, after creating all facets.\n     _M_caches[numpunct<char>::id._M_id()] = __npc;\n     _M_caches[moneypunct<char, false>::id._M_id()] = __mpcf;\n     _M_caches[moneypunct<char, true>::id._M_id()] = __mpct;"}, {"sha": "9378550124f1613763b05830a812ba6588c1b18e", "filename": "libstdc++-v3/src/c++11/cxx11-locale-inst.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-locale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-locale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-locale-inst.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -32,8 +32,6 @@\n # error This file should not be compiled for this configuration.\n #endif\n \n-#ifndef C\n-# define C char\n-# define C_is_char\n-#endif\n+#define C char\n+#define C_is_char\n # include \"locale-inst.cc\""}, {"sha": "07eb600836164e130a1e0e26917af663b37c8a68", "filename": "libstdc++-v3/src/c++11/cxx11-wlocale-inst.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-wlocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-wlocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcxx11-wlocale-inst.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -24,9 +24,15 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n+// Facet wchar_t instantiations using new ABI strings.\n+\n #define _GLIBCXX_USE_CXX11_ABI 1\n #include <bits/c++config.h>\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n #ifdef _GLIBCXX_USE_WCHAR_T\n #define C wchar_t\n-#include \"cxx11-locale-inst.cc\"\n+#include \"locale-inst.cc\"\n #endif"}, {"sha": "e9b3e7c4e0cc9a91083d04b8ebd2d2f9108263b2", "filename": "libstdc++-v3/src/c++11/locale-inst-monetary.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-monetary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-monetary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-monetary.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -0,0 +1,69 @@\n+// Explicit instantantiations for monetary facets -*- C++ -*-\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef C\n+#define \"This file should not be compiled directly, only included\"\n+#endif\n+\n+// This header is included multiple times, to instantiate these symbols\n+// for char/wchar_t and for both std::string ABIs,\n+// and (depending on the target) for two long double formats.\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+  template const money_put<C>& use_facet<money_put<C> >(const locale&);\n+  template const money_get<C>& use_facet<money_get<C> >(const locale&);\n+\n+  template bool has_facet<money_put<C> >(const locale&);\n+  template bool has_facet<money_get<C> >(const locale&);\n+\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n+  template class money_get<C, istreambuf_iterator<C> >;\n+  template class money_put<C, ostreambuf_iterator<C> >;\n+\n+  template\n+    istreambuf_iterator<C>\n+    money_get<C, istreambuf_iterator<C> >::\n+    _M_extract<true>(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t     ios_base&, ios_base::iostate&, string&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    money_get<C, istreambuf_iterator<C> >::\n+    _M_extract<false>(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t      ios_base&, ios_base::iostate&, string&) const;\n+\n+  template\n+    ostreambuf_iterator<C>\n+    money_put<C, ostreambuf_iterator<C> >::\n+    _M_insert<true>(ostreambuf_iterator<C>, ios_base&, C,\n+\t\t    const string_type&) const;\n+\n+  template\n+    ostreambuf_iterator<C>\n+    money_put<C, ostreambuf_iterator<C> >::\n+    _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C,\n+\t\t     const string_type&) const;\n+_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n+} // namespace std"}, {"sha": "0ec93e27937ff4bcd25cd7e3e54b3eb8d41084ed", "filename": "libstdc++-v3/src/c++11/locale-inst-numeric.h", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst-numeric.h?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -0,0 +1,133 @@\n+// Explicit instantantiations for numeric facets -*- C++ -*-\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef C\n+#define \"This file should not be compiled directly, only included\"\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+  template const num_get<C>& use_facet<num_get<C> >(const locale&);\n+  template const num_put<C>& use_facet<num_put<C> >(const locale&);\n+\n+  template bool has_facet<num_get<C> >(const locale&);\n+  template bool has_facet<num_put<C> >(const locale&);\n+#endif\n+\n+_GLIBCXX_BEGIN_NAMESPACE_LDBL\n+\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+  template class num_get<C, istreambuf_iterator<C> >;\n+  template class num_put<C, ostreambuf_iterator<C> >;\n+#endif\n+\n+  // num_get member function templates\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   long&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned short&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned int&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned long&) const;\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   long long&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned long long&) const;\n+#endif\n+\n+#if ! _GLIBCXX_USE_CXX11_ABI\n+  // num_put member function templates\n+  template\n+    ostreambuf_iterator<C>\n+    num_put<C, ostreambuf_iterator<C> >::\n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n+\t\t  long) const;\n+\n+  template\n+    ostreambuf_iterator<C>\n+    num_put<C, ostreambuf_iterator<C> >::\n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n+\t\t  unsigned long) const;\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template\n+    ostreambuf_iterator<C>\n+    num_put<C, ostreambuf_iterator<C> >::\n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n+\t\t  long long) const;\n+\n+  template\n+    ostreambuf_iterator<C>\n+    num_put<C, ostreambuf_iterator<C> >::\n+    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n+\t\t  unsigned long long) const;\n+#endif\n+\n+  template\n+    ostreambuf_iterator<C>\n+    num_put<C, ostreambuf_iterator<C> >::\n+    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char,\n+\t\t    double) const;\n+\n+  template\n+    ostreambuf_iterator<C>\n+    num_put<C, ostreambuf_iterator<C> >::\n+    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char,\n+\t\t    long double) const;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_LDBL\n+} // namespace std"}, {"sha": "cd99648e8f68e9b722b276991137db19aeac6868", "filename": "libstdc++-v3/src/c++11/locale-inst.cc", "status": "modified", "additions": 5, "deletions": 195, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -43,6 +43,9 @@\n # define C_is_char\n #endif\n \n+#include \"locale-inst-numeric.h\"\n+#include \"locale-inst-monetary.h\"\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -58,33 +61,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class moneypunct_byname<C, false>;\n   template class moneypunct_byname<C, true>;\n _GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11\n-  template class money_get<C, istreambuf_iterator<C> >;\n-  template class money_put<C, ostreambuf_iterator<C> >;\n-  template\n-    istreambuf_iterator<C>\n-    money_get<C, istreambuf_iterator<C> >::\n-    _M_extract<true>(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t     ios_base&, ios_base::iostate&, string&) const;\n-\n-  template\n-    istreambuf_iterator<C>\n-    money_get<C, istreambuf_iterator<C> >::\n-    _M_extract<false>(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t      ios_base&, ios_base::iostate&, string&) const;\n-\n-  template\n-    ostreambuf_iterator<C>\n-    money_put<C, ostreambuf_iterator<C> >::\n-    _M_insert<true>(ostreambuf_iterator<C>, ios_base&, C,\n-\t\t    const string_type&) const;\n-\n-  template\n-    ostreambuf_iterator<C>\n-    money_put<C, ostreambuf_iterator<C> >::\n-    _M_insert<false>(ostreambuf_iterator<C>, ios_base&, C,\n-\t\t     const string_type&) const;\n-_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11\n \n   // numpunct, numpunct_byname, num_get, and num_put\n #if ! _GLIBCXX_USE_CXX11_ABI\n@@ -94,97 +70,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class numpunct<C>;\n   template class numpunct_byname<C>;\n _GLIBCXX_END_NAMESPACE_CXX11\n-_GLIBCXX_BEGIN_NAMESPACE_LDBL\n-#if ! _GLIBCXX_USE_CXX11_ABI\n-  template class num_get<C, istreambuf_iterator<C> >;\n-#endif\n-\n-  template\n-    istreambuf_iterator<C>\n-    num_get<C, istreambuf_iterator<C> >::\n-    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&,\n-\t\t   long&) const;\n-\n-  template\n-    istreambuf_iterator<C>\n-    num_get<C, istreambuf_iterator<C> >::\n-    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&,\n-\t\t   unsigned short&) const;\n-\n-  template\n-    istreambuf_iterator<C>\n-    num_get<C, istreambuf_iterator<C> >::\n-    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&,\n-\t\t   unsigned int&) const;\n-\n-  template\n-    istreambuf_iterator<C>\n-    num_get<C, istreambuf_iterator<C> >::\n-    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&,\n-\t\t   unsigned long&) const;\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template\n-    istreambuf_iterator<C>\n-    num_get<C, istreambuf_iterator<C> >::\n-    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&,\n-\t\t   long long&) const;\n-\n-  template\n-    istreambuf_iterator<C>\n-    num_get<C, istreambuf_iterator<C> >::\n-    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n-\t\t   ios_base&, ios_base::iostate&,\n-\t\t   unsigned long long&) const;\n-#endif\n-\n-#if ! _GLIBCXX_USE_CXX11_ABI\n-  template class num_put<C, ostreambuf_iterator<C> >;\n-\n-  template\n-    ostreambuf_iterator<C>\n-    num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n-\t\t  long) const;\n-\n-  template\n-    ostreambuf_iterator<C>\n-    num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n-\t\t  unsigned long) const;\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template\n-    ostreambuf_iterator<C>\n-    num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n-\t\t  long long) const;\n-\n-  template\n-    ostreambuf_iterator<C>\n-    num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_int(ostreambuf_iterator<C>, ios_base&, C,\n-\t\t  unsigned long long) const;\n-#endif\n-\n-  template\n-    ostreambuf_iterator<C>\n-    num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char,\n-\t\t    double) const;\n-\n-  template\n-    ostreambuf_iterator<C>\n-    num_put<C, ostreambuf_iterator<C> >::\n-    _M_insert_float(ostreambuf_iterator<C>, ios_base&, C, char,\n-\t\t    long double) const;\n-#endif\n-_GLIBCXX_END_NAMESPACE_LDBL\n \n   // time_get and time_put\n #if ! _GLIBCXX_USE_CXX11_ABI\n@@ -250,16 +135,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     const numpunct<C>&\n     use_facet<numpunct<C> >(const locale&);\n \n-#if ! _GLIBCXX_USE_CXX11_ABI\n-  template\n-    const num_put<C>&\n-    use_facet<num_put<C> >(const locale&);\n-\n-  template\n-    const num_get<C>&\n-    use_facet<num_get<C> >(const locale&);\n-#endif\n-\n   template\n     const moneypunct<C, true>&\n     use_facet<moneypunct<C, true> >(const locale&);\n@@ -268,14 +143,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     const moneypunct<C, false>&\n     use_facet<moneypunct<C, false> >(const locale&);\n \n-  template\n-    const money_put<C>&\n-    use_facet<money_put<C> >(const locale&);\n-\n-  template\n-    const money_get<C>&\n-    use_facet<money_get<C> >(const locale&);\n-\n #if ! _GLIBCXX_USE_CXX11_ABI\n   template\n     const __timepunct<C>&\n@@ -313,28 +180,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     bool\n     has_facet<numpunct<C> >(const locale&);\n \n-#if ! _GLIBCXX_USE_CXX11_ABI\n-  template\n-    bool\n-    has_facet<num_put<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<num_get<C> >(const locale&);\n-#endif\n-\n   template\n     bool\n     has_facet<moneypunct<C> >(const locale&);\n \n-  template\n-    bool\n-    has_facet<money_put<C> >(const locale&);\n-\n-  template\n-    bool\n-    has_facet<money_get<C> >(const locale&);\n-\n #if ! _GLIBCXX_USE_CXX11_ABI\n   template\n     bool\n@@ -380,45 +229,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n // XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && defined C_is_char \\\n-      && _GLIBCXX_USE_CXX11_ABI == 0\n-\n-#pragma GCC diagnostic ignored \"-Wattribute-alias\"\n-\n-#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n-  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n-\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIjEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIjEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIlEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIlEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intImEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intImEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intItEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intItEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIxEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIxEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIyEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE14_M_extract_intIyEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIlEES4_S4_RSt8ios_basecT_,\n-\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIlEES3_S3_RSt8ios_basecT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intImEES4_S4_RSt8ios_basecT_,\n-\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intImEES3_S3_RSt8ios_basecT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIxEES4_S4_RSt8ios_basecT_,\n-\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIxEES3_S3_RSt8ios_basecT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIyEES4_S4_RSt8ios_basecT_,\n-\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE13_M_insert_intIyEES3_S3_RSt8ios_basecT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES4_S4_RSt8ios_baseccT_,\n-\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES3_S3_RSt8ios_baseccT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIdEES3_S3_RSt8ios_baseccT_,\n-\t\t     _ZNKSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE15_M_insert_floatIeEES3_S3_RSt8ios_baseccT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb0EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n-\t\t     _ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb0EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb1EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n-\t\t     _ZNKSt9money_getIcSt19istreambuf_iteratorIcSt11char_traitsIcEEE10_M_extractILb1EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb0EEES4_S4_RSt8ios_basecRKSs,\n-\t\t     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb0EEES3_S3_RSt8ios_basecRKSs);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb1EEES4_S4_RSt8ios_basecRKSs,\n-\t\t     _ZNKSt9money_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE9_M_insertILb1EEES3_S3_RSt8ios_basecRKSs);\n-\n+#if defined _GLIBCXX_LONG_DOUBLE_COMPAT && ! _GLIBCXX_USE_CXX11_ABI\n+#include \"compatibility-ldbl-facets-aliases.h\"\n #endif // _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "a9a246f8f97f6071d8356f301c54301a7f54c03d", "filename": "libstdc++-v3/src/c++11/wlocale-inst.cc", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwlocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwlocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwlocale-inst.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -33,47 +33,4 @@\n #ifdef _GLIBCXX_USE_WCHAR_T\n #define C wchar_t\n #include \"locale-inst.cc\"\n-\n-// XXX GLIBCXX_ABI Deprecated\n-#if defined _GLIBCXX_LONG_DOUBLE_COMPAT\n-\n-#pragma GCC diagnostic ignored \"-Wattribute-alias\"\n-\n-#define _GLIBCXX_LDBL_COMPAT(dbl, ldbl) \\\n-  extern \"C\" void ldbl (void) __attribute__ ((alias (#dbl), weak))\n-\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIjEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIjEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIlEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIlEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intImEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intImEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intItEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intItEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIxEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIxEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIyEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRT_,\n-\t\t     _ZNKSt7num_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE14_M_extract_intIyEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIlEES4_S4_RSt8ios_basewT_,\n-\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIlEES3_S3_RSt8ios_basewT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intImEES4_S4_RSt8ios_basewT_,\n-\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intImEES3_S3_RSt8ios_basewT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIxEES4_S4_RSt8ios_basewT_,\n-\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIxEES3_S3_RSt8ios_basewT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIyEES4_S4_RSt8ios_basewT_,\n-\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE13_M_insert_intIyEES3_S3_RSt8ios_basewT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1287num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES4_S4_RSt8ios_basewcT_,\n-\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES3_S3_RSt8ios_basewcT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIdEES3_S3_RSt8ios_basewcT_,\n-\t\t     _ZNKSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE15_M_insert_floatIeEES3_S3_RSt8ios_basewcT_);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb0EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n-\t\t     _ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb0EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb1EEES4_S4_S4_RSt8ios_baseRSt12_Ios_IostateRSs,\n-\t\t     _ZNKSt9money_getIwSt19istreambuf_iteratorIwSt11char_traitsIwEEE10_M_extractILb1EEES3_S3_S3_RSt8ios_baseRSt12_Ios_IostateRSs);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb0EEES4_S4_RSt8ios_basewRKSbIwS3_SaIwEE,\n-\t\t     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb0EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE);\n-_GLIBCXX_LDBL_COMPAT(_ZNKSt17__gnu_cxx_ldbl1289money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb1EEES4_S4_RSt8ios_basewRKSbIwS3_SaIwEE,\n-\t\t     _ZNKSt9money_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE9_M_insertILb1EEES3_S3_RSt8ios_basewRKSbIwS2_SaIwEE);\n-\n-#endif // _GLIBCXX_LONG_DOUBLE_COMPAT\n-#endif\n+#endif // _GLIBCXX_USE_WCHAR_T"}, {"sha": "37cdb53c07661f79da82858b529627c2967e69d0", "filename": "libstdc++-v3/src/c++17/Makefile.am", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -61,6 +61,13 @@ vpath % $(top_srcdir)/src/c++17\n \n libc__17convenience_la_SOURCES = $(sources)  $(inst_sources)\n \n+if GLIBCXX_LDBL_ALT128_COMPAT\n+floating_from_chars.lo: floating_from_chars.cc\n+\t$(LTCXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+floating_from_chars.o: floating_from_chars.cc\n+\t$(CXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+endif\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after"}, {"sha": "ccae721ab3faaae22cff6bfb8821e9b4b121bb2d", "filename": "libstdc++-v3/src/c++17/Makefile.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -262,6 +262,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -401,11 +403,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once \n@@ -752,6 +756,11 @@ uninstall-am:\n \n vpath % $(top_srcdir)/src/c++17\n \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@floating_from_chars.lo: floating_from_chars.cc\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(LTCXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@floating_from_chars.o: floating_from_chars.cc\n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@\t$(CXXCOMPILE) -mabi=ibmlongdouble $(LONG_DOUBLE_128_FLAGS) -c $<\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "a1943351493760e1596cf3244ef57c060b9e84b6", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -44,6 +44,14 @@\n # include <xlocale.h>\n #endif\n \n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+#ifndef __LONG_DOUBLE_IBM128__\n+#error \"floating_from_chars.cc must be compiled with -mabi=ibmlongdouble\"\n+#endif\n+// strtold for __ieee128\n+extern \"C\" __ieee128 __strtoieee128(const char*, char**);\n+#endif\n+\n #if _GLIBCXX_HAVE_USELOCALE\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -316,6 +324,10 @@ namespace\n \t  tmpval = std::strtod(str, &endptr);\n \telse if constexpr (is_same_v<T, long double>)\n \t  tmpval = std::strtold(str, &endptr);\n+# ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\telse if constexpr (is_same_v<T, __ieee128>)\n+\t  tmpval = __strtoieee128(str, &endptr);\n+# endif\n #else\n \ttmpval = std::strtod(str, &endptr);\n #endif\n@@ -332,7 +344,7 @@ namespace\n \tconst ptrdiff_t n = endptr - str;\n \tif (conv_errno == ERANGE) [[unlikely]]\n \t  {\n-\t    if (isinf(tmpval)) // overflow\n+\t    if (__builtin_isinf(tmpval)) // overflow\n \t      ec = errc::result_out_of_range;\n \t    else // underflow (LWG 3081 wants to set value = tmpval here)\n \t      ec = errc::result_out_of_range;\n@@ -469,13 +481,37 @@ from_chars(const char* first, const char* last, long double& value,\n }\n \n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT\n+// Make std::from_chars for 64-bit long double an alias for the overload\n+// for double.\n extern \"C\" from_chars_result\n _ZSt10from_charsPKcS0_ReSt12chars_format(const char* first, const char* last,\n \t\t\t\t\t long double& value,\n \t\t\t\t\t chars_format fmt) noexcept\n __attribute__((alias (\"_ZSt10from_charsPKcS0_RdSt12chars_format\")));\n #endif\n \n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+from_chars_result\n+from_chars(const char* first, const char* last, __ieee128& value,\n+\t   chars_format fmt) noexcept\n+{\n+  buffer_resource mr;\n+  pmr::string buf(&mr);\n+  size_t len = 0;\n+  errc ec = errc::invalid_argument;\n+  __try\n+    {\n+      if (const char* pat = pattern(first, last, fmt, buf)) [[likely]]\n+\tlen = from_chars_impl(pat, value, ec);\n+    }\n+  __catch (const std::bad_alloc&)\n+    {\n+      fmt = chars_format{};\n+    }\n+  return make_result(first, len, fmt, ec);\n+}\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // _GLIBCXX_HAVE_USELOCALE"}, {"sha": "e6892d370fb7dc7a73cc410dbc7deb0af9674c85", "filename": "libstdc++-v3/src/c++20/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -257,6 +257,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -396,11 +398,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "ae75fbf4dd677c89dd3fb4d6f67f511ecc9ff38a", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -278,6 +278,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -417,11 +419,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "77c6eecc1a3ab24f0d54896db536f851974d562f", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -57,8 +57,16 @@ _GLIBCXX_LOC_ID(_ZNSt8messagesIwE2idE);\n \n namespace\n {\n-  const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n-    + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n+  const int num_facets = (\n+      _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_CXX11_FACETS\n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+      + _GLIBCXX_NUM_LBDL_ALT128_FACETS\n+#endif\n+      )\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    * 2\n+#endif\n+    + _GLIBCXX_NUM_UNICODE_FACETS;\n \n   __gnu_cxx::__mutex&\n   get_locale_mutex()\n@@ -559,13 +567,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif\n \n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+    _M_init_extra_ldbl128(true);\n+#endif\n+\n #if _GLIBCXX_USE_DUAL_ABI\n     facet* extra[] = { __npc, __mpcf, __mpct\n # ifdef  _GLIBCXX_USE_WCHAR_T\n         , __npw, __mpwf, __mpwt\n # endif\n     };\n \n+    // This call must be after creating all facets, as it sets caches.\n     _M_init_extra(extra);\n #endif\n "}, {"sha": "29f439ffa9abd9339fbccbbd4f56e646bf3aeef3", "filename": "libstdc++-v3/src/c++98/localename.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -171,8 +171,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n-const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n-  + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n+const int num_facets = (\n+    _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_CXX11_FACETS\n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+    + _GLIBCXX_NUM_LBDL_ALT128_FACETS\n+#endif\n+    )\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  * 2\n+#endif\n+  + _GLIBCXX_NUM_UNICODE_FACETS;\n \n   // Construct named _Impl.\n   locale::_Impl::\n@@ -284,6 +292,10 @@ const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n         _M_init_extra(&__cloc, &__clocm, __s, __smon);\n #endif\n \n+#ifdef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n+\t_M_init_extra_ldbl128(false);\n+#endif\n+\n \tlocale::facet::_S_destroy_c_locale(__cloc);\n \tif (__clocm != __cloc)\n \t  locale::facet::_S_destroy_c_locale(__clocm);"}, {"sha": "74a6d2765fc42bff9a42ac06439e5b95e2729f57", "filename": "libstdc++-v3/src/filesystem/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -286,6 +286,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -425,11 +427,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "bf2441320c6dc80aeaaff8a69d52c0c53112e581", "filename": "libstdc++-v3/testsuite/26_numerics/complex/abi_tag.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fabi_tag.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -8,7 +8,7 @@\n float (std::complex<float>::*p1)() const = &std::complex<float>::real;\n // { dg-final { scan-assembler \"_ZNKSt7complexIdE4realB5cxx11Ev\" } }\n double (std::complex<double>::*p2)() const = &std::complex<double>::real;\n-// { dg-final { scan-assembler \"_ZNKSt7complexI\\[eg\\]E4realB5cxx11Ev\" } }\n+// { dg-final { scan-assembler \"_ZNKSt7complexI\\(e\\|g\\|u9__ieee128\\)E4realB5cxx11Ev\" } }\n long double (std::complex<long double>::*p3)() const\n   = &std::complex<long double>::real;\n // { dg-final { scan-assembler \"_ZNKSt7complexIiE4realB5cxx11Ev\" } }\n@@ -18,7 +18,7 @@ int (std::complex<int>::*p4)() const = &std::complex<int>::real;\n float (std::complex<float>::*p5)() const = &std::complex<float>::imag;\n // { dg-final { scan-assembler \"_ZNKSt7complexIdE4imagB5cxx11Ev\" } }\n double (std::complex<double>::*p6)() const = &std::complex<double>::imag;\n-// { dg-final { scan-assembler \"_ZNKSt7complexI\\[eg\\]E4imagB5cxx11Ev\" } }\n+// { dg-final { scan-assembler \"_ZNKSt7complexI\\(e\\|g\\|u9__ieee128\\)E4imagB5cxx11Ev\" } }\n long double (std::complex<long double>::*p7)() const\n   = &std::complex<long double>::imag;\n // { dg-final { scan-assembler \"_ZNKSt7complexIiE4imagB5cxx11Ev\" } }"}, {"sha": "1aac7edff7f807528d09eed452e21d22777a0be5", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -216,6 +216,8 @@ LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n LIPO = @LIPO@\n LN_S = @LN_S@\n+LONG_DOUBLE_128_FLAGS = @LONG_DOUBLE_128_FLAGS@\n+LONG_DOUBLE_ALT128_COMPAT_FLAGS = @LONG_DOUBLE_ALT128_COMPAT_FLAGS@\n LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n LTLIBICONV = @LTLIBICONV@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -358,11 +360,13 @@ toolexeclibdir = $(glibcxx_toolexeclibdir)\n @ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n @ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n @ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+@GLIBCXX_LDBL_ALT128_COMPAT_FALSE@LDBL_128_FLAGS = \n+@GLIBCXX_LDBL_ALT128_COMPAT_TRUE@LDBL_128_FLAGS = $(LONG_DOUBLE_128_FLAGS)\n \n # These bits are all figured out from configure.  Look in acinclude.m4\n # or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n CONFIG_CXXFLAGS = \\\n-\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@ $(LDBL_128_FLAGS)\n \n WARN_CXXFLAGS = \\\n \t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once "}, {"sha": "75029549c0d640fb400983b0d13570f279cbba57", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=7c1e7eed891a7b8fd8bbe6a13e6435cfbe7e9055", "patch": "@@ -211,6 +211,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.28\");\n       known_versions.push_back(\"GLIBCXX_3.4.29\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.29\");\n+      known_versions.push_back(\"GLIBCXX_IEEE128_3.4.29\");\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n       known_versions.push_back(\"CXXABI_1.3.1\");\n@@ -226,6 +227,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"CXXABI_1.3.11\");\n       known_versions.push_back(\"CXXABI_1.3.12\");\n       known_versions.push_back(\"CXXABI_1.3.13\");\n+      known_versions.push_back(\"CXXABI_IEEE128_1.3.13\");\n       known_versions.push_back(\"CXXABI_TM_1\");\n       known_versions.push_back(\"CXXABI_FLOAT128\");\n     }\n@@ -244,9 +246,11 @@ check_version(symbol& test, bool added)\n \n       // Check that added symbols are added in the latest pre-release version.\n       bool latestp = (test.version_name == \"GLIBCXX_3.4.29\"\n-\t  // XXX remove next line when GLIBCXX_3.4.30 is added and baselines\n-\t  // have been regenerated to include GLIBCXX_LDBL_3.4.29 symbols:\n+\t  // XXX remove next 3 lines when baselines have been regenerated\n+\t  // to include {IEEE128,LDBL} symbols:\n \t\t     || test.version_name == \"GLIBCXX_LDBL_3.4.29\"\n+\t\t     || test.version_name == \"GLIBCXX_IEEE128_3.4.29\"\n+\t\t     || test.version_name == \"CXXABI_IEEE128_1.3.13\"\n \t\t     || test.version_name == \"CXXABI_1.3.13\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");\n@@ -260,7 +264,17 @@ check_version(symbol& test, bool added)\n \t  && test.demangled_name.find(\"std::__cxx11::\") != 0)\n \t{\n \t  if (test.version_name.find(\"_LDBL_\") == std::string::npos\n-\t      && test.version_name.find(\"_FLOAT128\") == std::string::npos)\n+\t      && test.version_name.find(\"_FLOAT128\") == std::string::npos\n+\t      && test.version_name.find(\"_IEEE128\") == std::string::npos)\n+\t    test.version_status = symbol::incompatible;\n+\t}\n+\n+      // Check that IEEE128 long double compatibility symbols demangled as\n+      // __ieee128 are put into some _LDBL_IEEE version name.\n+      // XXX is this right? might not want *everything* for __ieee128 in here.\n+      if (added && test.demangled_name.find(\"__ieee128\") != std::string::npos)\n+\t{\n+\t  if (test.version_name.find(\"_IEEE128\") == std::string::npos)\n \t    test.version_status = symbol::incompatible;\n \t}\n "}]}