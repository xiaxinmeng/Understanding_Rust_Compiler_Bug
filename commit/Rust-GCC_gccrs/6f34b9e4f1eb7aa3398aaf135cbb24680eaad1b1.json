{"sha": "6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "node_id": "C_kwDOANBUbNoAKDZmMzRiOWU0ZjFlYjdhYTMzOThhYWYxMzVjYmIyNDY4MGVhYWQxYjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-01T12:27:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-01T21:01:31Z"}, "message": "libstdc++: Missing constexpr for __gnu_debug::__valid_range etc\n\nThe new 25_algorithms/move/constexpr.cc test fails in debug mode,\nbecause the debug assertions use the non-constexpr overloads in\n<debug/stl_iterator.h>.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/stl_iterator.h (__valid_range): Add constexpr\n\tfor C++20. Qualify call to avoid ADL.\n\t(__get_distance, __can_advance, __unsafe, __base): Likewise.\n\t* testsuite/25_algorithms/move/constexpr.cc: Also check with\n\tstd::reverse_iterator arguments.", "tree": {"sha": "a2ae7e4a3bc2d5cea04d61d8eb9c9fec115dc8e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ae7e4a3bc2d5cea04d61d8eb9c9fec115dc8e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09bc98098e4ad474d2ba9da52457b29bbd08874b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09bc98098e4ad474d2ba9da52457b29bbd08874b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09bc98098e4ad474d2ba9da52457b29bbd08874b"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "54f7d42b074c19da440ce0a69d0843a49fd8a4c6", "filename": "libstdc++-v3/include/debug/stl_iterator.h", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstl_iterator.h?ref=6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "patch": "@@ -35,31 +35,38 @@ namespace __gnu_debug\n {\n   // Help Debug mode to see through reverse_iterator.\n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __valid_range(const std::reverse_iterator<_Iterator>& __first,\n \t\t  const std::reverse_iterator<_Iterator>& __last,\n \t\t  typename _Distance_traits<_Iterator>::__type& __dist)\n-    { return __valid_range(__last.base(), __first.base(), __dist); }\n+    {\n+      return __gnu_debug::__valid_range(__last.base(), __first.base(), __dist);\n+    }\n \n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename _Distance_traits<_Iterator>::__type\n     __get_distance(const std::reverse_iterator<_Iterator>& __first,\n \t\t   const std::reverse_iterator<_Iterator>& __last)\n-    { return __get_distance(__last.base(), __first.base()); }\n+    { return __gnu_debug::__get_distance(__last.base(), __first.base()); }\n \n   template<typename _Iterator, typename _Size>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __can_advance(const std::reverse_iterator<_Iterator>& __it, _Size __n)\n-    { return __can_advance(__it.base(), -__n); }\n+    { return __gnu_debug::__can_advance(__it.base(), -__n); }\n \n   template<typename _Iterator, typename _Diff>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __can_advance(const std::reverse_iterator<_Iterator>& __it,\n \t\t  const std::pair<_Diff, _Distance_precision>& __dist,\n \t\t  int __way)\n-    { return __can_advance(__it.base(), __dist, -__way); }\n+    { return __gnu_debug::__can_advance(__it.base(), __dist, -__way); }\n \n   template<typename _Iterator, typename _Sequence>\n+    _GLIBCXX20_CONSTEXPR\n     inline std::reverse_iterator<_Iterator>\n     __base(const std::reverse_iterator<_Safe_iterator<\n \t     _Iterator, _Sequence, std::random_access_iterator_tag> >& __it)\n@@ -82,6 +89,7 @@ namespace __gnu_debug\n     }\n #else\n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline auto\n     __unsafe(const std::reverse_iterator<_Iterator>& __it)\n     -> decltype(std::__make_reverse_iterator(__unsafe(__it.base())))\n@@ -91,37 +99,45 @@ namespace __gnu_debug\n #if __cplusplus >= 201103L\n   // Help Debug mode to see through move_iterator.\n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __valid_range(const std::move_iterator<_Iterator>& __first,\n \t\t  const std::move_iterator<_Iterator>& __last,\n \t\t  typename _Distance_traits<_Iterator>::__type& __dist)\n-    { return __valid_range(__first.base(), __last.base(), __dist); }\n+    {\n+      return __gnu_debug::__valid_range(__first.base(), __last.base(), __dist);\n+    }\n \n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename _Distance_traits<_Iterator>::__type\n     __get_distance(const std::move_iterator<_Iterator>& __first,\n \t\t   const std::move_iterator<_Iterator>& __last)\n-    { return __get_distance(__first.base(), __last.base()); }\n+    { return __gnu_debug::__get_distance(__first.base(), __last.base()); }\n \n   template<typename _Iterator, typename _Size>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __can_advance(const std::move_iterator<_Iterator>& __it, _Size __n)\n-    { return __can_advance(__it.base(), __n); }\n+    { return __gnu_debug::__can_advance(__it.base(), __n); }\n \n   template<typename _Iterator, typename _Diff>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     __can_advance(const std::move_iterator<_Iterator>& __it,\n \t\t  const std::pair<_Diff, _Distance_precision>& __dist,\n \t\t  int __way)\n-    { return __can_advance(__it.base(), __dist, __way); }\n+    { return __gnu_debug::__can_advance(__it.base(), __dist, __way); }\n \n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline auto\n     __unsafe(const std::move_iterator<_Iterator>& __it)\n     -> decltype(std::make_move_iterator(__unsafe(__it.base())))\n     { return std::make_move_iterator(__unsafe(__it.base())); }\n \n   template<typename _Iterator>\n+    _GLIBCXX20_CONSTEXPR\n     inline auto\n     __base(const std::move_iterator<_Iterator>& __it)\n     -> decltype(std::make_move_iterator(__base(__it.base())))"}, {"sha": "eb1f3b17e723ae706e662a5cfd123bf42a42df69", "filename": "libstdc++-v3/testsuite/25_algorithms/move/constexpr.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmove%2Fconstexpr.cc?ref=6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "patch": "@@ -17,3 +17,14 @@ test01()\n }\n \n static_assert(test01());\n+\n+constexpr bool\n+test02()\n+{\n+  int x[2] = {1,2}, y[2];\n+  std::span in(x), out(y);\n+  std::move(in.rbegin(), in.rend(), out.rbegin());\n+  return std::equal(in.rbegin(), in.rend(), out.rbegin());\n+}\n+\n+static_assert(test02());"}]}