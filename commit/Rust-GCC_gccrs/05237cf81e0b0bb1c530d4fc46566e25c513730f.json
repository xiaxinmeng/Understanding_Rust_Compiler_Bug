{"sha": "05237cf81e0b0bb1c530d4fc46566e25c513730f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyMzdjZjgxZTBiMGJiMWM1MzBkNGZjNDY1NjZlMjVjNTEzNzMwZg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-11-18T16:45:26Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-11-18T16:45:26Z"}, "message": "Make arm_feature_set agree with type of FL_* macros\n\n2016-11-18  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm-protos.h (FL_NONE, FL_ANY, FL_CO_PROC, FL_ARCH3M,\n    FL_MODE26, FL_MODE32, FL_ARCH4, FL_ARCH5, FL_THUMB, FL_LDSCHED,\n    FL_STRONG, FL_ARCH5E, FL_XSCALE, FL_ARCH6, FL_VFPV2, FL_WBUF,\n    FL_ARCH6K, FL_THUMB2, FL_NOTM, FL_THUMB_DIV, FL_VFPV3, FL_NEON,\n    FL_ARCH7EM, FL_ARCH7, FL_ARM_DIV, FL_ARCH8, FL_CRC32, FL_SMALLMUL,\n    FL_NO_VOLATILE_CE, FL_IWMMXT, FL_IWMMXT2, FL_ARCH6KZ, FL2_ARCH8_1,\n    FL2_ARCH8_2, FL2_FP16INST): Reindent comment, add final dot when\n    missing and make value unsigned.\n    (arm_feature_set): Use unsigned entries instead of unsigned long.\n\nFrom-SVN: r242596", "tree": {"sha": "19e0a1d1542541a0d1731bb96e5fae4728f7810d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19e0a1d1542541a0d1731bb96e5fae4728f7810d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05237cf81e0b0bb1c530d4fc46566e25c513730f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05237cf81e0b0bb1c530d4fc46566e25c513730f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05237cf81e0b0bb1c530d4fc46566e25c513730f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05237cf81e0b0bb1c530d4fc46566e25c513730f/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0954a00b9d0aeeab9a0db00a5c5ae452a753e9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0954a00b9d0aeeab9a0db00a5c5ae452a753e9f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0954a00b9d0aeeab9a0db00a5c5ae452a753e9f8"}], "stats": {"total": 103, "additions": 58, "deletions": 45}, "files": [{"sha": "ea7291110a71900a68cfdda3a8ab050513066f05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05237cf81e0b0bb1c530d4fc46566e25c513730f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05237cf81e0b0bb1c530d4fc46566e25c513730f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05237cf81e0b0bb1c530d4fc46566e25c513730f", "patch": "@@ -1,3 +1,15 @@\n+2016-11-18  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm-protos.h (FL_NONE, FL_ANY, FL_CO_PROC, FL_ARCH3M,\n+\tFL_MODE26, FL_MODE32, FL_ARCH4, FL_ARCH5, FL_THUMB, FL_LDSCHED,\n+\tFL_STRONG, FL_ARCH5E, FL_XSCALE, FL_ARCH6, FL_VFPV2, FL_WBUF,\n+\tFL_ARCH6K, FL_THUMB2, FL_NOTM, FL_THUMB_DIV, FL_VFPV3, FL_NEON,\n+\tFL_ARCH7EM, FL_ARCH7, FL_ARM_DIV, FL_ARCH8, FL_CRC32, FL_SMALLMUL,\n+\tFL_NO_VOLATILE_CE, FL_IWMMXT, FL_IWMMXT2, FL_ARCH6KZ, FL2_ARCH8_1,\n+\tFL2_ARCH8_2, FL2_FP16INST): Reindent comment, add final dot when\n+\tmissing and make value unsigned.\n+\t(arm_feature_set): Use unsigned entries instead of unsigned long.\n+\n 2016-11-18  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tRe-apply after PR bootstrap/77359 is fixed:"}, {"sha": "5cee7718554886982f535da2e9baa5015da609e4", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05237cf81e0b0bb1c530d4fc46566e25c513730f/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05237cf81e0b0bb1c530d4fc46566e25c513730f/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=05237cf81e0b0bb1c530d4fc46566e25c513730f", "patch": "@@ -351,50 +351,51 @@ extern bool arm_is_constant_pool_ref (rtx);\n /* Flags used to identify the presence of processor capabilities.  */\n \n /* Bit values used to identify processor capabilities.  */\n-#define FL_NONE\t      (0)\t      /* No flags.  */\n-#define FL_ANY\t      (0xffffffff)    /* All flags.  */\n-#define FL_CO_PROC    (1 << 0)        /* Has external co-processor bus */\n-#define FL_ARCH3M     (1 << 1)        /* Extended multiply */\n-#define FL_MODE26     (1 << 2)        /* 26-bit mode support */\n-#define FL_MODE32     (1 << 3)        /* 32-bit mode support */\n-#define FL_ARCH4      (1 << 4)        /* Architecture rel 4 */\n-#define FL_ARCH5      (1 << 5)        /* Architecture rel 5 */\n-#define FL_THUMB      (1 << 6)        /* Thumb aware */\n-#define FL_LDSCHED    (1 << 7)\t      /* Load scheduling necessary */\n-#define FL_STRONG     (1 << 8)\t      /* StrongARM */\n-#define FL_ARCH5E     (1 << 9)        /* DSP extensions to v5 */\n-#define FL_XSCALE     (1 << 10)\t      /* XScale */\n-/* spare\t      (1 << 11)\t*/\n-#define FL_ARCH6      (1 << 12)       /* Architecture rel 6.  Adds\n-\t\t\t\t\t media instructions.  */\n-#define FL_VFPV2      (1 << 13)       /* Vector Floating Point V2.  */\n-#define FL_WBUF\t      (1 << 14)\t      /* Schedule for write buffer ops.\n-\t\t\t\t\t Note: ARM6 & 7 derivatives only.  */\n-#define FL_ARCH6K     (1 << 15)       /* Architecture rel 6 K extensions.  */\n-#define FL_THUMB2     (1 << 16)\t      /* Thumb-2.  */\n-#define FL_NOTM\t      (1 << 17)\t      /* Instructions not present in the 'M'\n-\t\t\t\t\t profile.  */\n-#define FL_THUMB_DIV  (1 << 18)\t      /* Hardware divide (Thumb mode).  */\n-#define FL_VFPV3      (1 << 19)       /* Vector Floating Point V3.  */\n-#define FL_NEON       (1 << 20)       /* Neon instructions.  */\n-#define FL_ARCH7EM    (1 << 21)\t      /* Instructions present in the ARMv7E-M\n-\t\t\t\t\t architecture.  */\n-#define FL_ARCH7      (1 << 22)       /* Architecture 7.  */\n-#define FL_ARM_DIV    (1 << 23)\t      /* Hardware divide (ARM mode).  */\n-#define FL_ARCH8      (1 << 24)       /* Architecture 8.  */\n-#define FL_CRC32      (1 << 25)\t      /* ARMv8 CRC32 instructions.  */\n-\n-#define FL_SMALLMUL   (1 << 26)       /* Small multiply supported.  */\n-#define FL_NO_VOLATILE_CE   (1 << 27) /* No volatile memory in IT block.  */\n-\n-#define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n-#define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n-#define FL_ARCH6KZ    (1 << 31)       /* ARMv6KZ architecture.  */\n-\n-#define FL2_ARCH8_1   (1 << 0)\t      /* Architecture 8.1.  */\n-#define FL2_ARCH8_2   (1 << 1)\t      /* Architecture 8.2.  */\n-#define FL2_FP16INST  (1 << 2)\t      /* FP16 Instructions for ARMv8.2 and\n-\t\t\t\t\t later.  */\n+#define FL_NONE\t      (0U)\t\t/* No flags.  */\n+#define FL_ANY\t      (0xffffffffU)\t/* All flags.  */\n+#define FL_CO_PROC    (1U << 0)\t\t/* Has external co-processor bus.  */\n+#define FL_ARCH3M     (1U << 1)\t\t/* Extended multiply.  */\n+#define FL_MODE26     (1U << 2)\t\t/* 26-bit mode support.  */\n+#define FL_MODE32     (1U << 3)\t\t/* 32-bit mode support.  */\n+#define FL_ARCH4      (1U << 4)\t\t/* Architecture rel 4.  */\n+#define FL_ARCH5      (1U << 5)\t\t/* Architecture rel 5.  */\n+#define FL_THUMB      (1U << 6)\t\t/* Thumb aware.  */\n+#define FL_LDSCHED    (1U << 7)\t\t/* Load scheduling necessary.  */\n+#define FL_STRONG     (1U << 8)\t\t/* StrongARM.  */\n+#define FL_ARCH5E     (1U << 9)\t\t/* DSP extensions to v5.  */\n+#define FL_XSCALE     (1U << 10)\t/* XScale.  */\n+/* spare\t      (1U << 11) */\n+#define FL_ARCH6      (1U << 12)\t/* Architecture rel 6.  Adds\n+\t\t\t\t\t   media instructions.  */\n+#define FL_VFPV2      (1U << 13)\t/* Vector Floating Point V2.  */\n+#define FL_WBUF\t      (1U << 14)\t/* Schedule for write buffer ops.\n+\t\t\t\t\t   Note: ARM6 & 7 derivatives only.  */\n+#define FL_ARCH6K     (1U << 15)\t/* Architecture rel 6 K extensions.  */\n+#define FL_THUMB2     (1U << 16)\t/* Thumb-2.  */\n+#define FL_NOTM\t      (1U << 17)\t/* Instructions not present in the 'M'\n+\t\t\t\t\t   profile.  */\n+#define FL_THUMB_DIV  (1U << 18)\t/* Hardware divide (Thumb mode).  */\n+#define FL_VFPV3      (1U << 19)\t/* Vector Floating Point V3.  */\n+#define FL_NEON       (1U << 20)\t/* Neon instructions.  */\n+#define FL_ARCH7EM    (1U << 21)\t/* Instructions present in the ARMv7E-M\n+\t\t\t\t\t   architecture.  */\n+#define FL_ARCH7      (1U << 22)\t/* Architecture 7.  */\n+#define FL_ARM_DIV    (1U << 23)\t/* Hardware divide (ARM mode).  */\n+#define FL_ARCH8      (1U << 24)\t/* Architecture 8.  */\n+#define FL_CRC32      (1U << 25)\t/* ARMv8 CRC32 instructions.  */\n+#define FL_SMALLMUL   (1U << 26)\t/* Small multiply supported.  */\n+#define FL_NO_VOLATILE_CE  (1U << 27)\t/* No volatile memory in IT block.  */\n+\n+#define FL_IWMMXT     (1U << 29)\t/* XScale v2 or \"Intel Wireless MMX\n+\t\t\t\t\t   technology\".  */\n+#define FL_IWMMXT2    (1U << 30)\t/* \"Intel Wireless MMX2\n+\t\t\t\t\t    technology\".  */\n+#define FL_ARCH6KZ    (1U << 31)\t/* ARMv6KZ architecture.  */\n+\n+#define FL2_ARCH8_1   (1U << 0)\t\t/* Architecture 8.1.  */\n+#define FL2_ARCH8_2   (1U << 1)\t\t/* Architecture 8.2.  */\n+#define FL2_FP16INST  (1U << 2)\t\t/* FP16 Instructions for ARMv8.2 and\n+\t\t\t\t\t   later.  */\n \n /* Flags that only effect tuning, not available instructions.  */\n #define FL_TUNE\t\t(FL_WBUF | FL_VFPV2 | FL_STRONG | FL_LDSCHED \\\n@@ -436,7 +437,7 @@ extern bool arm_is_constant_pool_ref (rtx);\n \n typedef struct\n {\n-  unsigned long cpu[2];\n+  unsigned cpu[2];\n } arm_feature_set;\n \n "}]}