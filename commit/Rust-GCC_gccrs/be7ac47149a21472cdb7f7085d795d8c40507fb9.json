{"sha": "be7ac47149a21472cdb7f7085d795d8c40507fb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3YWM0NzE0OWEyMTQ3MmNkYjdmNzA4NWQ3OTVkOGM0MDUwN2ZiOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2003-12-20T00:00:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2003-12-20T00:00:39Z"}, "message": "c-format.c (print_char_table): Allow 'I' flag on floating point decimal formats.\n\n\t* c-format.c (print_char_table): Allow 'I' flag on floating point\n\tdecimal formats.\n\ntestsuite:\n\t* gcc.dg/format/ext-1.c: Allow 'I' flag on floating point decimal\n\tformats.\n\nFrom-SVN: r74860", "tree": {"sha": "64a0ab4c53fb87562e46a75c1284f6876aad3388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a0ab4c53fb87562e46a75c1284f6876aad3388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be7ac47149a21472cdb7f7085d795d8c40507fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7ac47149a21472cdb7f7085d795d8c40507fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7ac47149a21472cdb7f7085d795d8c40507fb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7ac47149a21472cdb7f7085d795d8c40507fb9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f901c4c23669ad6a7dde805042e6566793c8eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f901c4c23669ad6a7dde805042e6566793c8eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f901c4c23669ad6a7dde805042e6566793c8eea"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "da213a32708bb9f4709505b8a3ffd4b159c9617b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be7ac47149a21472cdb7f7085d795d8c40507fb9", "patch": "@@ -1,3 +1,8 @@\n+2003-12-19  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-format.c (print_char_table): Allow 'I' flag on floating point\n+\tdecimal formats.\n+\n 2003-12-19  Stuart Hastings  <stuart@apple.com>\n \t* gcc/config/i386/i386.c (ix86_expand_call, x86_output_mi_thunk):\n \tTrivial fixes for i386.c on Darwin/x86."}, {"sha": "a532259750c48099ae5637bf1200d319494a1181", "filename": "gcc/c-format.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=be7ac47149a21472cdb7f7085d795d8c40507fb9", "patch": "@@ -755,23 +755,23 @@ static const format_flag_pair strfmon_flag_pairs[] =\n static const format_char_info print_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\", \"i\"  },\n-  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",    \"i\"  },\n-  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",   \"i\"  },\n-  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"   },\n-  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"   },\n-  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"   },\n-  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"cR\" },\n-  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"c\"  },\n-  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",         \"W\"  },\n+  { \"di\",  0, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"-wp0 +'I\",  \"i\"  },\n+  { \"oxX\", 0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0#\",     \"i\"  },\n+  { \"u\",   0, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T9L_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"-wp0'I\",    \"i\"  },\n+  { \"fgG\", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'I\", \"\"   },\n+  { \"eE\",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#I\",  \"\"   },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",        \"\"   },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",       \"cR\" },\n+  { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",        \"c\"  },\n+  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T9L_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",          \"W\"  },\n   /* C99 conversion specifiers.  */\n-  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\", \"\"   },\n-  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",  \"\"   },\n+  { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'I\", \"\"   },\n+  { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\",   \"\"   },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",       \"\"   },\n-  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"R\"  },\n+  { \"C\",   0, STD_EXT, { TEX_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\",        \"\"   },\n+  { \"S\",   1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",       \"R\"  },\n   /* GNU conversion specifiers.  */\n-  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",      \"\"   },\n+  { \"m\",   0, STD_EXT, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wp\",       \"\"   },\n   { NULL,  0, 0, NOLENGTHS, NULL, NULL }\n };\n "}, {"sha": "bb7bce642a765793bf255f5077ff8f266cfe80ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be7ac47149a21472cdb7f7085d795d8c40507fb9", "patch": "@@ -1,3 +1,8 @@\n+2003-12-19  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/format/ext-1.c: Allow 'I' flag on floating point decimal\n+\tformats.\n+\n 2003-12-19  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/12795"}, {"sha": "3b020892afd22f9f0f1325728602c1f168d04dd9", "filename": "gcc/testsuite/gcc.dg/format/ext-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7ac47149a21472cdb7f7085d795d8c40507fb9/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fext-1.c?ref=be7ac47149a21472cdb7f7085d795d8c40507fb9", "patch": "@@ -92,7 +92,7 @@ foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,\n   */\n   printf (\"%*2$.*1$m\", i, i);\n   printf (\"%1$*2$.*1$m\", i, i); /* { dg-warning \"no argument\" \"printf %1\\$m\" } */\n-  /* As an extension, glibc includes the \"I\" flag for decimal integer\n+  /* As an extension, glibc includes the \"I\" flag for decimal\n      formats, to output using the locale's digits (e.g. in Arabic).\n      In GCC, we require this to be in the standard place for flags, though\n      glibc allows it also after width or precision.\n@@ -102,12 +102,12 @@ foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,\n   printf (\"%Ix\", u); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n   printf (\"%IX\", u); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n   printf (\"%In\", n); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n-  printf (\"%If\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n-  printf (\"%IF\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n-  printf (\"%Ie\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n-  printf (\"%IE\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n-  printf (\"%Ig\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n-  printf (\"%IG\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  printf (\"%If\", d);\n+  printf (\"%IF\", d);\n+  printf (\"%Ie\", d);\n+  printf (\"%IE\", d);\n+  printf (\"%Ig\", d);\n+  printf (\"%IG\", d);\n   printf (\"%Ia\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n   printf (\"%IA\", d); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n   printf (\"%Ic\", i); /* { dg-warning \"flag\" \"bad use of I flag\" } */"}]}