{"sha": "0a9088ee137d861c70898598d1bb79408f61689e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE5MDg4ZWUxMzdkODYxYzcwODk4NTk4ZDFiYjc5NDA4ZjYxNjg5ZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2017-10-31T21:36:51Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2017-10-31T21:36:51Z"}, "message": "[PR 81702] Remove devirtualization assert\n\n2017-10-31  Martin Jambor  <mjambor@suse.cz>\n\n\tPR c++/81702\n\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Remove assert.\n\ntestsuite/\n\t* g++.dg/tree-ssa/pr81702.C: New test.\n\nFrom-SVN: r254283", "tree": {"sha": "5ab4cd6c1e3f7f5ce40b1fe445ddfae962ccc36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ab4cd6c1e3f7f5ce40b1fe445ddfae962ccc36b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a9088ee137d861c70898598d1bb79408f61689e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9088ee137d861c70898598d1bb79408f61689e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a9088ee137d861c70898598d1bb79408f61689e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a9088ee137d861c70898598d1bb79408f61689e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77f4ead72e55094fca78530bff75f83eb0faadbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f4ead72e55094fca78530bff75f83eb0faadbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f4ead72e55094fca78530bff75f83eb0faadbd"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "689b5ab37114c2ac21214dce00b8b98578ce5373", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a9088ee137d861c70898598d1bb79408f61689e", "patch": "@@ -1,3 +1,8 @@\n+2017-10-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR c++/81702\n+\t* gimple-fold.c (gimple_get_virt_method_for_vtable): Remove assert.\n+\n 2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n \n \t* auto-profile.c (autofdo_source_profile::read): Use"}, {"sha": "85fd3971946a77de6729b0c7ff7313df4110dff4", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=0a9088ee137d861c70898598d1bb79408f61689e", "patch": "@@ -6586,7 +6586,6 @@ gimple_get_virt_method_for_vtable (HOST_WIDE_INT token,\n   gcc_assert (init);\n   if (init == error_mark_node)\n     {\n-      gcc_assert (in_lto_p);\n       /* Pass down that we lost track of the target.  */\n       if (can_refer)\n \t*can_refer = false;"}, {"sha": "82fd2aa74953fffea396c4bbe2d0024b600f2bbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a9088ee137d861c70898598d1bb79408f61689e", "patch": "@@ -1,3 +1,8 @@\n+2017-10-31  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR c++/81702\n+\t* g++.dg/tree-ssa/pr81702.C: New test.\n+\n 2017-10-31  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/jit.exp (jit-dg-test): If PRESERVE_EXECUTABLES is set in"}, {"sha": "85acd857e67dff8f10945a5eb4d6a7751042d5d0", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr81702.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81702.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a9088ee137d861c70898598d1bb79408f61689e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81702.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr81702.C?ref=0a9088ee137d861c70898598d1bb79408f61689e", "patch": "@@ -0,0 +1,110 @@\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+namespace std {\n+  struct type_info\n+  {\n+    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,\n+       unsigned __outer) const;\n+  };\n+}\n+\n+template< typename VALUE_T, typename TYPE >\n+struct List_policy\n+{\n+  typedef VALUE_T *Value_type;\n+  typedef TYPE **Type;\n+  typedef TYPE *Head_type;\n+  typedef TYPE Item_type;\n+};\n+\n+template< typename POLICY >\n+class List\n+{\n+public:\n+  typedef typename POLICY::Value_type Value_type;\n+  class Iterator\n+  {\n+    typedef typename POLICY::Type Internal_type;\n+  public:\n+    typedef typename POLICY::Value_type value_type;\n+    typedef typename POLICY::Value_type Value_type;\n+    Value_type operator -> () const { return static_cast<Value_type>(*_c); }\n+    Internal_type _c;\n+  };\n+  Iterator begin() { return Iterator(); }\n+  Iterator end() { return Iterator(); }\n+  typename POLICY::Head_type _f;\n+};\n+\n+template<typename ELEM_TYPE> class H_list_item_t { };\n+\n+template< typename T, typename POLICY >\n+class H_list : public List<POLICY>\n+{\n+public:\n+  typedef typename POLICY::Item_type Item;\n+  typedef List<POLICY> Base;\n+  typedef typename Base::Iterator Iterator;\n+  Iterator insert(T *e, Iterator const &pred)\n+  {\n+    Item **x = &this->_f;\n+    *x = static_cast<Item*>(e);\n+    return Iterator();\n+  }\n+};\n+\n+template< typename T >\n+struct H_list_t : H_list<T, List_policy< T, H_list_item_t<T> > >\n+{\n+  H_list_t(bool b) : H_list<T, List_policy< T, H_list_item_t<T> > >(b) {}\n+};\n+\n+template< typename BASE, typename MATCH_RESULT >\n+struct Type_matcher : H_list_item_t<BASE>\n+{\n+  explicit Type_matcher(std::type_info const *type);\n+  typedef MATCH_RESULT Match_result;\n+\n+private:\n+  std::type_info *_type;\n+  typedef H_list_t<BASE> List;\n+  typedef typename List::Iterator Iterator;\n+  static List _for_type;\n+};\n+\n+template< typename BASE, typename MR >\n+Type_matcher<BASE, MR>::Type_matcher(std::type_info const *t)\n+{\n+  Iterator c = _for_type.begin();\n+  t->__do_catch(c->_type, 0, 0);\n+  _for_type.insert(static_cast<BASE*>(this), _for_type.begin());\n+}\n+\n+template< typename VI, typename HW >\n+class Fa : public Type_matcher<Fa<VI, HW>, VI*>\n+{\n+public:\n+  typedef Fa<VI, HW> Self;\n+  virtual VI *do_match(HW *f) = 0;\n+  explicit Fa(std::type_info const *type) : Type_matcher<Self, VI*>(type) {}\n+};\n+\n+class Res {};\n+typedef Fa<Res, Res> R_fac;\n+\n+template< typename VI, typename HW_BASE, typename HW, typename BASE >\n+class Fa_t : public BASE\n+{\n+public:\n+  Fa_t() : BASE(&typeid(HW)) {}\n+  VI *do_match(HW_BASE *) { return 0; }\n+};\n+\n+template< typename VI, typename HW >\n+class Resource_factory_t : public Fa_t<VI, Res, HW, R_fac > {};\n+\n+class Foo {};\n+class Foo2;\n+class Foo3 : public Res {};\n+Resource_factory_t<Foo3, Foo> _x;"}]}