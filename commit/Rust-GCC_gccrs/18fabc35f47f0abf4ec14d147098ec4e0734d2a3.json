{"sha": "18fabc35f47f0abf4ec14d147098ec4e0734d2a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmYWJjMzVmNDdmMGFiZjRlYzE0ZDE0NzA5OGVjNGUwNzM0ZDJhMw==", "commit": {"author": {"name": "Levy Hsu", "email": "admin@levyhsu.com", "date": "2021-02-13T20:26:33Z"}, "committer": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2021-02-13T20:33:44Z"}, "message": "RISC-V: Avoid zero/sign extend for volatile loads.  Fix for 97417.\n\nThis expands sub-word loads as a zero/sign extended load, followed by\na subreg.  This helps eliminate unnecessary zero/sign extend insns after\nthe load, particularly for volatiles, but also in some other cases.\nTesting shows that it gives consistent code size decreases.\n\nTested with riscv32-elf rv32imac/ilp32 and riscv64-linux rv64gc/lp064d\nbuilds and checks.  Some -gsplit-stack tests fail with the patch, but\nthis turns out to be an existing bug with the split-stack support that\nI hadn't noticed before.  It isn't a bug in this patch.  Ignoring that\nthere are no regressions.\n\nCommitted.\n\n\tgcc/\n\tPR target/97417\n\t* config/riscv/riscv-shorten-memrefs.c (pass_shorten_memrefs): Add\n\textend parameter to get_si_mem_base_reg declaration.\n\t(get_si_mem_base_reg): Add extend parameter.  Set it.\n\t(analyze): Pass extend arg to get_si_mem_base_reg.\n\t(transform): Likewise.  Use it when rewriting mems.\n\t* config/riscv/riscv.c (riscv_legitimize_move): Check for subword\n\tloads and emit sign/zero extending load followed by subreg move.", "tree": {"sha": "60f291aab71ca4af4d8c3de1e3ab32cb530bbc31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f291aab71ca4af4d8c3de1e3ab32cb530bbc31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18fabc35f47f0abf4ec14d147098ec4e0734d2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fabc35f47f0abf4ec14d147098ec4e0734d2a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18fabc35f47f0abf4ec14d147098ec4e0734d2a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18fabc35f47f0abf4ec14d147098ec4e0734d2a3/comments", "author": {"login": "LevyHsu", "id": 18082840, "node_id": "MDQ6VXNlcjE4MDgyODQw", "avatar_url": "https://avatars.githubusercontent.com/u/18082840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LevyHsu", "html_url": "https://github.com/LevyHsu", "followers_url": "https://api.github.com/users/LevyHsu/followers", "following_url": "https://api.github.com/users/LevyHsu/following{/other_user}", "gists_url": "https://api.github.com/users/LevyHsu/gists{/gist_id}", "starred_url": "https://api.github.com/users/LevyHsu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LevyHsu/subscriptions", "organizations_url": "https://api.github.com/users/LevyHsu/orgs", "repos_url": "https://api.github.com/users/LevyHsu/repos", "events_url": "https://api.github.com/users/LevyHsu/events{/privacy}", "received_events_url": "https://api.github.com/users/LevyHsu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4953810bac524e19126a2745c75fed58db962c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4953810bac524e19126a2745c75fed58db962c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4953810bac524e19126a2745c75fed58db962c2"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "3f34065c1ce5700750cb50871bfb5460aa4a5216", "filename": "gcc/config/riscv/riscv-shorten-memrefs.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fabc35f47f0abf4ec14d147098ec4e0734d2a3/gcc%2Fconfig%2Friscv%2Friscv-shorten-memrefs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fabc35f47f0abf4ec14d147098ec4e0734d2a3/gcc%2Fconfig%2Friscv%2Friscv-shorten-memrefs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-shorten-memrefs.c?ref=18fabc35f47f0abf4ec14d147098ec4e0734d2a3", "patch": "@@ -75,12 +75,19 @@ class pass_shorten_memrefs : public rtl_opt_pass\n \n   regno_map * analyze (basic_block bb);\n   void transform (regno_map *m, basic_block bb);\n-  bool get_si_mem_base_reg (rtx mem, rtx *addr);\n+  bool get_si_mem_base_reg (rtx mem, rtx *addr, bool *extend);\n }; // class pass_shorten_memrefs\n \n bool\n-pass_shorten_memrefs::get_si_mem_base_reg (rtx mem, rtx *addr)\n+pass_shorten_memrefs::get_si_mem_base_reg (rtx mem, rtx *addr, bool *extend)\n {\n+  /* Whether it's sign/zero extended.  */\n+  if (GET_CODE (mem) == ZERO_EXTEND || GET_CODE (mem) == SIGN_EXTEND)\n+    {\n+      *extend = true;\n+      mem = XEXP (mem, 0);\n+    }\n+\n   if (!MEM_P (mem) || GET_MODE (mem) != SImode)\n     return false;\n   *addr = XEXP (mem, 0);\n@@ -110,7 +117,8 @@ pass_shorten_memrefs::analyze (basic_block bb)\n \t{\n \t  rtx mem = XEXP (pat, i);\n \t  rtx addr;\n-\t  if (get_si_mem_base_reg (mem, &addr))\n+\t  bool extend = false;\n+\t  if (get_si_mem_base_reg (mem, &addr, &extend))\n \t    {\n \t      HOST_WIDE_INT regno = REGNO (XEXP (addr, 0));\n \t      /* Do not count store zero as these cannot be compressed.  */\n@@ -150,7 +158,8 @@ pass_shorten_memrefs::transform (regno_map *m, basic_block bb)\n \t{\n \t  rtx mem = XEXP (pat, i);\n \t  rtx addr;\n-\t  if (get_si_mem_base_reg (mem, &addr))\n+\t  bool extend = false;\n+\t  if (get_si_mem_base_reg (mem, &addr, &extend))\n \t    {\n \t      HOST_WIDE_INT regno = REGNO (XEXP (addr, 0));\n \t      /* Do not transform store zero as these cannot be compressed.  */\n@@ -161,9 +170,20 @@ pass_shorten_memrefs::transform (regno_map *m, basic_block bb)\n \t\t}\n \t      if (m->get_or_insert (regno) > 3)\n \t\t{\n-\t\t  addr\n-\t\t    = targetm.legitimize_address (addr, addr, GET_MODE (mem));\n-\t\t  XEXP (pat, i) = replace_equiv_address (mem, addr);\n+\t\t  if (extend)\n+\t\t    {\n+\t\t      addr\n+\t\t\t= targetm.legitimize_address (addr, addr,\n+\t\t\t\t\t\t      GET_MODE (XEXP (mem, 0)));\n+\t\t      XEXP (XEXP (pat, i), 0)\n+\t\t\t= replace_equiv_address (XEXP (mem, 0), addr);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      addr = targetm.legitimize_address (addr, addr,\n+\t\t\t\t\t\t\t GET_MODE (mem));\n+\t\t      XEXP (pat, i) = replace_equiv_address (mem, addr);\n+\t\t    }\n \t\t  df_insn_rescan (insn);\n \t\t}\n \t    }"}, {"sha": "fffd0814eee59921e6281b0fa61bcb3e91bd9010", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18fabc35f47f0abf4ec14d147098ec4e0734d2a3/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18fabc35f47f0abf4ec14d147098ec4e0734d2a3/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=18fabc35f47f0abf4ec14d147098ec4e0734d2a3", "patch": "@@ -1524,6 +1524,28 @@ riscv_legitimize_const_move (machine_mode mode, rtx dest, rtx src)\n bool\n riscv_legitimize_move (machine_mode mode, rtx dest, rtx src)\n {\n+  /* Expand \n+       (set (reg:QI target) (mem:QI (address))) \n+     to\n+       (set (reg:DI temp) (zero_extend:DI (mem:QI (address))))\n+       (set (reg:QI target) (subreg:QI (reg:DI temp) 0))\n+     with auto-sign/zero extend.  */\n+  if (GET_MODE_CLASS (mode) == MODE_INT\n+      && GET_MODE_SIZE (mode) < UNITS_PER_WORD\n+      && can_create_pseudo_p ()\n+      && MEM_P (src))\n+    {\n+      rtx temp_reg;\n+      int zero_extend_p;\n+\n+      temp_reg = gen_reg_rtx (word_mode);\n+      zero_extend_p = (LOAD_EXTEND_OP (mode) == ZERO_EXTEND);\n+      emit_insn (gen_extend_insn (temp_reg, src, word_mode, mode, \n+\t\t\t\t  zero_extend_p));\n+      riscv_emit_move (dest, gen_lowpart (mode, temp_reg));\n+      return true;\n+    }\n+\n   if (!register_operand (dest, mode) && !reg_or_0_operand (src, mode))\n     {\n       rtx reg;"}]}