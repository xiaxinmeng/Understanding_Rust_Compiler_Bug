{"sha": "ac2a94545529758e5648ade68e55a0b5b257c445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyYTk0NTQ1NTI5NzU4ZTU2NDhhZGU2OGU1NWEwYjViMjU3YzQ0NQ==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-01-10T22:49:32Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-01-10T22:49:32Z"}, "message": "# Fix misspellings in comments.\n\nFrom-SVN: r3183", "tree": {"sha": "bbd5350b919e67c66c91f34a53903f69205bb17e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbd5350b919e67c66c91f34a53903f69205bb17e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2a94545529758e5648ade68e55a0b5b257c445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a94545529758e5648ade68e55a0b5b257c445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2a94545529758e5648ade68e55a0b5b257c445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a94545529758e5648ade68e55a0b5b257c445/comments", "author": null, "committer": null, "parents": [{"sha": "a1c3776604184797b285078a4e3ff5250abaa44d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c3776604184797b285078a4e3ff5250abaa44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c3776604184797b285078a4e3ff5250abaa44d"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "5501a8cfcf8d653f2bb9560a58c81bb671ffa495", "filename": "gcc/regclass.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=ac2a94545529758e5648ade68e55a0b5b257c445", "patch": "@@ -605,7 +605,7 @@ regclass (f, nregs)\n \t  int noperands;\n \n \t  /* Show that an insn inside a loop is likely to be executed three\n-\t     times more than insns outside a loop.  This is much more agressive\n+\t     times more than insns outside a loop.  This is much more aggressive\n \t     than the assumptions made elsewhere and is being tried as an\n \t     experiment.  */\n \n@@ -1084,7 +1084,7 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t\tbreak;\n \n \t      case 'm':  case 'o':  case 'V':\n-\t\t/* It doesn't seem worth distingishing between offsettable\n+\t\t/* It doesn't seem worth distinguishing between offsettable\n \t\t   and non-offsettable addresses here.  */\n \t\tallows_mem = 1;\n \t\tif (GET_CODE (op) == MEM)"}, {"sha": "c75f15859db0d652a8aa2975c01245fa1f2bab13", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=ac2a94545529758e5648ade68e55a0b5b257c445", "patch": "@@ -673,7 +673,7 @@ push_reload (in, out, inloc, outloc, class,\n   if (in != 0)\n     class = PREFERRED_RELOAD_CLASS (in, class);\n \n-  /* Output reloads may need analagous treatment, different in detail.  */\n+  /* Output reloads may need analogous treatment, different in detail.  */\n #ifdef PREFERRED_OUTPUT_RELOAD_CLASS\n   if (out != 0)\n     class = PREFERRED_OUTPUT_RELOAD_CLASS (out, class);"}, {"sha": "a738ba40a293fffc09dc41084e9bde6c7f2cbdd1", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=ac2a94545529758e5648ade68e55a0b5b257c445", "patch": "@@ -416,7 +416,7 @@ sdbout_record_type_name (type)\n \t{\n \t  t = TYPE_NAME (type);\n \t}\n-#if 1  /* As a temprary hack, use typedef names for C++ only.  */\n+#if 1  /* As a temporary hack, use typedef names for C++ only.  */\n       else if (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t       && TYPE_LANG_SPECIFIC (type))\n \t{"}, {"sha": "88f60b708b06d12dd04122509584c7555bc0b3c7", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ac2a94545529758e5648ade68e55a0b5b257c445", "patch": "@@ -3557,7 +3557,7 @@ check_for_full_enumeration_handling (type)\n   int all_values = 1;\n \n   /* The time complexity of this loop is currently O(N * M), with\n-     N being the number of enumerals in the enumerated type, and\n+     N being the number of members in the enumerated type, and\n      M being the number of case expressions in the switch. */\n \n   for (chain = TYPE_VALUES (type);\n@@ -3566,7 +3566,7 @@ check_for_full_enumeration_handling (type)\n     {\n       /* Find a match between enumeral and case expression, if possible.\n \t Quit looking when we've gone too far (since case expressions\n-\t are kept sorted in ascending order).  Warn about enumerals not\n+\t are kept sorted in ascending order).  Warn about enumerators not\n \t handled in the switch statement case expression list. */\n \n       for (n = case_stack->data.case_stmt.case_list;\n@@ -3584,7 +3584,7 @@ check_for_full_enumeration_handling (type)\n     }\n \n   /* Now we go the other way around; we warn if there are case\n-     expressions that don't correspond to enumerals.  This can\n+     expressions that don't correspond to enumerators.  This can\n      occur since C and C++ don't enforce type-checking of\n      assignments to enumeration variables. */\n "}, {"sha": "90a331132dc33539d10e63be38a8266690ec35da", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a94545529758e5648ade68e55a0b5b257c445/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ac2a94545529758e5648ade68e55a0b5b257c445", "patch": "@@ -370,7 +370,7 @@ static int flag_rerun_cse_after_loop;\n int flag_inline_functions;\n \n /* Nonzero for -fkeep-inline-functions: even if we make a function\n-   go inline everywhere, keep its defintion around for debugging\n+   go inline everywhere, keep its definition around for debugging\n    purposes.  */\n \n int flag_keep_inline_functions;"}]}