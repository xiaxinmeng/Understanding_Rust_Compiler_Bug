{"sha": "a4cb876dc96b5e400650422e16264f9d50b6751b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjYjg3NmRjOTZiNWU0MDA2NTA0MjJlMTYyNjRmOWQ1MGI2NzUxYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2015-07-16T17:17:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-07-16T17:17:31Z"}, "message": "plugin-nvptx.c (link_ptx): Constify string argument.\n\n\tlibgomp/\n\t* plugin/plugin-nvptx.c (link_ptx): Constify string argument.\n\tWorkaround driver library const error.\n\t(struct nvptx_tdata, nvptx_tdata_t): New.\n\t(GOMP_OFFLOAD_load_image): Use struct for target_data's real\n\ttype.\n\n\tgcc/\n\t* config/nvptx/mkoffload.c (process): Constify mapping variables.\n\tDefine target data struct and initialize it.\n\nFrom-SVN: r225897", "tree": {"sha": "128ed56f500a026f899fa5ed513c1ce657b9cacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128ed56f500a026f899fa5ed513c1ce657b9cacf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4cb876dc96b5e400650422e16264f9d50b6751b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cb876dc96b5e400650422e16264f9d50b6751b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4cb876dc96b5e400650422e16264f9d50b6751b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cb876dc96b5e400650422e16264f9d50b6751b/comments", "author": null, "committer": null, "parents": [{"sha": "38ef5e6add621c2d5052d4cd584bc6cd4d6002ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38ef5e6add621c2d5052d4cd584bc6cd4d6002ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38ef5e6add621c2d5052d4cd584bc6cd4d6002ee"}], "stats": {"total": 87, "additions": 58, "deletions": 29}, "files": [{"sha": "9506686c49a9f2793c61064a5edfbc66bcc099ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cb876dc96b5e400650422e16264f9d50b6751b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cb876dc96b5e400650422e16264f9d50b6751b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4cb876dc96b5e400650422e16264f9d50b6751b", "patch": "@@ -1,3 +1,8 @@\n+2015-07-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/mkoffload.c (process): Constify mapping variables.\n+\tDefine target data struct and initialize it.\n+\n 2015-07-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/66626"}, {"sha": "ca13e096f5cf19f5e9d5561020065237628d6ed3", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cb876dc96b5e400650422e16264f9d50b6751b/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cb876dc96b5e400650422e16264f9d50b6751b/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=a4cb876dc96b5e400650422e16264f9d50b6751b", "patch": "@@ -842,7 +842,6 @@ process (FILE *in, FILE *out)\n {\n   const char *input = read_file (in);\n   Token *tok = tokenize (input);\n-  unsigned int nvars = 0, nfuncs = 0;\n \n   do\n     tok = parse_file (tok);\n@@ -853,19 +852,30 @@ process (FILE *in, FILE *out)\n   write_stmts (out, rev_stmts (vars));\n   write_stmts (out, rev_stmts (fns));\n   fprintf (out, \";\\n\\n\");\n-  fprintf (out, \"static const char *var_mappings[] = {\\n\");\n-  for (id_map *id = var_ids; id; id = id->next, nvars++)\n+\n+  fprintf (out, \"static const char *const var_mappings[] = {\\n\");\n+  for (id_map *id = var_ids; id; id = id->next)\n     fprintf (out, \"\\t\\\"%s\\\"%s\\n\", id->ptx_name, id->next ? \",\" : \"\");\n   fprintf (out, \"};\\n\\n\");\n-  fprintf (out, \"static const char *func_mappings[] = {\\n\");\n-  for (id_map *id = func_ids; id; id = id->next, nfuncs++)\n+  fprintf (out, \"static const char *const func_mappings[] = {\\n\");\n+  for (id_map *id = func_ids; id; id = id->next)\n     fprintf (out, \"\\t\\\"%s\\\"%s\\n\", id->ptx_name, id->next ? \",\" : \"\");\n   fprintf (out, \"};\\n\\n\");\n \n-  fprintf (out, \"static const void *target_data[] = {\\n\");\n-  fprintf (out, \"  ptx_code, (void*) %u, var_mappings, (void*) %u, \"\n-\t\t\"func_mappings\\n\", nvars, nfuncs);\n-  fprintf (out, \"};\\n\\n\");\n+  fprintf (out,\n+\t   \"static struct nvptx_tdata {\\n\"\n+\t   \"  const char *ptx_src;\\n\"\n+\t   \"  const char *const *var_names;\\n\"\n+\t   \"  __SIZE_TYPE__ var_num;\\n\"\n+\t   \"  const char *const *fn_names;\\n\"\n+\t   \"  __SIZE_TYPE__ fn_num;\\n\"\n+\t   \"} target_data = {\\n\"\n+\t   \"  ptx_code,\\n\"\n+\t   \"  var_mappings,\"\n+\t   \"  sizeof (var_mappings) / sizeof (var_mappings[0]),\\n\"\n+\t   \"  func_mappings,\"\n+\t   \"  sizeof (func_mappings) / sizeof (func_mappings[0])\\n\"\n+\t   \"};\\n\\n\");\n \n   fprintf (out, \"#ifdef __cplusplus\\n\"\n \t   \"extern \\\"C\\\" {\\n\""}, {"sha": "6b15776accb209fd37499ef265d3911beb6b137c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cb876dc96b5e400650422e16264f9d50b6751b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cb876dc96b5e400650422e16264f9d50b6751b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a4cb876dc96b5e400650422e16264f9d50b6751b", "patch": "@@ -1,3 +1,11 @@\n+2015-07-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* plugin/plugin-nvptx.c (link_ptx): Constify string argument.\n+\tWorkaround driver library const error.\n+\t(struct nvptx_tdata, nvptx_tdata_t): New.\n+\t(GOMP_OFFLOAD_load_image): Use struct for target_data's real\n+\ttype.\n+\n 2015-07-15  Maxim Blumenthal  <maxim.blumenthal@intel.com>\n \n \t* testsuite/libgomp.fortran/examples-4/simd-8.f90: (main): Change type"}, {"sha": "cfb143bc068ee3ac368b9a091d0e9d1a45def7c3", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cb876dc96b5e400650422e16264f9d50b6751b/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cb876dc96b5e400650422e16264f9d50b6751b/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=a4cb876dc96b5e400650422e16264f9d50b6751b", "patch": "@@ -804,7 +804,7 @@ nvptx_get_num_devices (void)\n \n \n static void\n-link_ptx (CUmodule *module, char *ptx_code)\n+link_ptx (CUmodule *module, const char *ptx_code)\n {\n   CUjit_option opts[7];\n   void *optvals[7];\n@@ -874,7 +874,8 @@ link_ptx (CUmodule *module, char *ptx_code)\n \t\t\t cuda_error (r));\n     }\n \n-  r = cuLinkAddData (linkstate, CU_JIT_INPUT_PTX, ptx_code,\n+  /* cuLinkAddData's 'data' argument erroneously omits the const qualifier.  */\n+  r = cuLinkAddData (linkstate, CU_JIT_INPUT_PTX, (char *)ptx_code,\n               strlen (ptx_code) + 1, 0, 0, 0, 0);\n   if (r != CUDA_SUCCESS)\n     {\n@@ -1618,23 +1619,36 @@ GOMP_OFFLOAD_fini_device (int n)\n   pthread_mutex_unlock (&ptx_dev_lock);\n }\n \n+/* Data emitted by mkoffload.  */\n+\n+typedef struct nvptx_tdata\n+{\n+  const char *ptx_src;\n+\n+  const char *const *var_names;\n+  size_t var_num;\n+\n+  const char *const *fn_names;\n+  size_t fn_num;\n+} nvptx_tdata_t;\n+\n int\n GOMP_OFFLOAD_load_image (int ord, void *target_data,\n \t\t\t struct addr_pair **target_table)\n {\n   CUmodule module;\n-  char **fn_names, **var_names;\n+  const char *const *fn_names, *const *var_names;\n   unsigned int fn_entries, var_entries, i, j;\n   CUresult r;\n   struct targ_fn_descriptor *targ_fns;\n-  void **img_header = (void **) target_data;\n+  nvptx_tdata_t const *img_header = (nvptx_tdata_t const *) target_data;\n   struct ptx_image_data *new_image;\n \n   GOMP_OFFLOAD_init_device (ord);\n \n   nvptx_attach_host_thread_to_device (ord);\n \n-  link_ptx (&module, img_header[0]);\n+  link_ptx (&module, img_header->ptx_src);\n \n   pthread_mutex_lock (&ptx_image_lock);\n   new_image = GOMP_PLUGIN_malloc (sizeof (struct ptx_image_data));\n@@ -1644,22 +1658,14 @@ GOMP_OFFLOAD_load_image (int ord, void *target_data,\n   ptx_images = new_image;\n   pthread_mutex_unlock (&ptx_image_lock);\n \n-  /* The mkoffload utility emits a table of pointers/integers at the start of\n-     each offload image:\n-\n-     img_header[0] -> ptx code\n-     img_header[1] -> number of variables\n-     img_header[2] -> array of variable names (pointers to strings)\n-     img_header[3] -> number of kernels\n-     img_header[4] -> array of kernel names (pointers to strings)\n-\n-     The array of kernel names and the functions addresses form a\n-     one-to-one correspondence.  */\n+  /* The mkoffload utility emits a struct of pointers/integers at the\n+     start of each offload image.  The array of kernel names and the\n+     functions addresses form a one-to-one correspondence.  */\n \n-  var_entries = (uintptr_t) img_header[1];\n-  var_names = (char **) img_header[2];\n-  fn_entries = (uintptr_t) img_header[3];\n-  fn_names = (char **) img_header[4];\n+  var_entries = img_header->var_num;\n+  var_names = img_header->var_names;\n+  fn_entries = img_header->fn_num;\n+  fn_names = img_header->fn_names;\n \n   *target_table = GOMP_PLUGIN_malloc (sizeof (struct addr_pair)\n \t\t\t\t      * (fn_entries + var_entries));"}]}