{"sha": "b937d9162579de24618569ad11531c71dd01c275", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzN2Q5MTYyNTc5ZGUyNDYxODU2OWFkMTE1MzFjNzFkZDAxYzI3NQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-04-07T23:26:05Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-04-07T23:26:05Z"}, "message": "* libtool.m4: Update AC_LIBTOOL_SYS_MAX_CMD_LEN bits from upstream.\n\nFrom-SVN: r97808", "tree": {"sha": "d60ea2b5d164788d7a5e57b8836d29692a036859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d60ea2b5d164788d7a5e57b8836d29692a036859"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b937d9162579de24618569ad11531c71dd01c275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b937d9162579de24618569ad11531c71dd01c275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b937d9162579de24618569ad11531c71dd01c275", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b937d9162579de24618569ad11531c71dd01c275/comments", "author": null, "committer": null, "parents": [{"sha": "085e30b7b009cc74ae741bb3a2496de95feb800f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085e30b7b009cc74ae741bb3a2496de95feb800f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085e30b7b009cc74ae741bb3a2496de95feb800f"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "152a9123653531892b949dd56f443b4e0227170d", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b937d9162579de24618569ad11531c71dd01c275/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b937d9162579de24618569ad11531c71dd01c275/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=b937d9162579de24618569ad11531c71dd01c275", "patch": "@@ -1,3 +1,7 @@\n+2005-04-07  Mike Stump  <mrs@apple.com>\n+\n+\t* libtool.m4: Update AC_LIBTOOL_SYS_MAX_CMD_LEN bits from upstream.\n+\n 2005-04-04  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "3e170d19cdbf7426828aa8f536debc43f793926a", "filename": "libtool.m4", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b937d9162579de24618569ad11531c71dd01c275/libtool.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b937d9162579de24618569ad11531c71dd01c275/libtool.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libtool.m4?ref=b937d9162579de24618569ad11531c71dd01c275", "patch": "@@ -103,6 +103,8 @@ AC_REQUIRE([AC_OBJEXT])dnl\n AC_REQUIRE([AC_EXEEXT])dnl\n dnl\n \n+AC_LIBTOOL_SYS_MAX_CMD_LEN\n+\n # Only perform the check for file, if the check method requires it\n case $deplibs_check_method in\n file_magic*)\n@@ -279,6 +281,85 @@ ifdef([AC_PROVIDE_AC_LIBTOOL_WIN32_DLL],\n esac\n ])\n \n+\n+# AC_LIBTOOL_SYS_MAX_CMD_LEN\n+# --------------------------\n+AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN],\n+[# find the maximum length of command line arguments\n+AC_MSG_CHECKING([the maximum length of command line arguments])\n+AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n+  i=0\n+  teststring=\"ABCD\"\n+\n+  case $build_os in\n+  msdosdjgpp*)\n+    # On DJGPP, this test can blow up pretty badly due to problems in libc\n+    # (any single argument exceeding 2000 bytes causes a buffer overrun\n+    # during glob expansion).  Even if it were fixed, the result of this\n+    # check would be larger than it should be.\n+    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n+    ;;\n+\n+  cygwin* | mingw*)\n+    # On Win9x/ME, this test blows up -- it succeeds, but takes\n+    # about 5 minutes as the teststring grows exponentially.\n+    # Worse, since 9x/ME are not pre-emptively multitasking,\n+    # you end up with a \"frozen\" computer, even though with patience\n+    # the test eventually succeeds (with a max line length of 256k).\n+    # Instead, let's just punt: use the minimum linelength reported by\n+    # all of the supported platforms: 8192 (on NT/2K/XP).\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  amigaos*)\n+    # On AmigaOS with pdksh, this test takes hours, literally.\n+    # So we just punt and use a minimum line length of 8192.\n+    lt_cv_sys_max_cmd_len=8192;\n+    ;;\n+\n+  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n+    # This has been around since 386BSD, at least.  Likely further.\n+    if test -x /sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n+    elif test -x /usr/sbin/sysctl; then\n+      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n+    else\n+      lt_cv_sys_max_cmd_len=65536 # usable default for *BSD\n+    fi\n+    # And add a safety zone\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n+    ;;\n+  *)\n+    # If test is not a shell built-in, we'll probably end up computing a\n+    # maximum length that is only half of the actual maximum length, but\n+    # we can't tell.\n+    SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n+    while (test \"X\"`$SHELL [$]0 --fallback-echo \"X$teststring\" 2>/dev/null` \\\n+\t       = \"XX$teststring\") >/dev/null 2>&1 &&\n+\t    new_result=`expr \"X$teststring\" : \".*\" 2>&1` &&\n+\t    lt_cv_sys_max_cmd_len=$new_result &&\n+\t    test $i != 17 # 1/2 MB should be enough\n+    do\n+      i=`expr $i + 1`\n+      teststring=$teststring$teststring\n+    done\n+    teststring=\n+    # Add a significant safety factor because C++ compilers can tack on massive\n+    # amounts of additional arguments before passing them to the linker.\n+    # It appears as though 1/2 is a usable value.\n+    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n+    ;;\n+  esac\n+])\n+if test -n $lt_cv_sys_max_cmd_len ; then\n+  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\n+else\n+  AC_MSG_RESULT(none)\n+fi\n+])# AC_LIBTOOL_SYS_MAX_CMD_LEN\n+\n+\n # AC_LIBTOOL_DLOPEN - enable checks for dlopen support\n AC_DEFUN([AC_LIBTOOL_DLOPEN], [AC_BEFORE([$0],[AC_LIBTOOL_SETUP])])\n "}]}