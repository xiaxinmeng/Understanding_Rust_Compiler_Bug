{"sha": "b44f8ad8b2138f7bfd68053e8dce596adb964735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ0ZjhhZDhiMjEzOGY3YmZkNjgwNTNlOGRjZTU5NmFkYjk2NDczNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-02-28T15:27:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-02-28T15:27:17Z"}, "message": "PR preprocessor/84517 allow double-underscore macros after string literals\n\ngcc/testsuite:\n\n\tPR preprocessor/84517\n\t* g++.dg/cpp0x/udlit-macros.C: Expect a warning for \"\"__FILE__.\n\nlibcpp:\n\n\tPR preprocessor/84517\n\t* lex.c (is_macro_not_literal_suffix): New function.\n\t(lex_raw_string, lex_string): Use is_macro_not_literal_suffix to\n\tdecide when to issue -Wliteral-suffix warnings.\n\nFrom-SVN: r258069", "tree": {"sha": "598aa26af298bebfa086b251ff514b8dd08b82b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598aa26af298bebfa086b251ff514b8dd08b82b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b44f8ad8b2138f7bfd68053e8dce596adb964735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44f8ad8b2138f7bfd68053e8dce596adb964735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44f8ad8b2138f7bfd68053e8dce596adb964735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44f8ad8b2138f7bfd68053e8dce596adb964735/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6db43fa35b9d98d0eaa49bb9243e99aada49670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6db43fa35b9d98d0eaa49bb9243e99aada49670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6db43fa35b9d98d0eaa49bb9243e99aada49670"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "694a01846778fb43679c03f3b6c1732a53d03dd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44f8ad8b2138f7bfd68053e8dce596adb964735/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44f8ad8b2138f7bfd68053e8dce596adb964735/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b44f8ad8b2138f7bfd68053e8dce596adb964735", "patch": "@@ -1,3 +1,8 @@\n+2018-02-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR preprocessor/84517\n+\t* g++.dg/cpp0x/udlit-macros.C: Expect a warning for \"\"__FILE__.\n+\n 2018-02-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-c++-common/dump-ada-spec-12.c: New test."}, {"sha": "7ef324b7e04c568aeaa3398b8210f1f74015cc01", "filename": "gcc/testsuite/g++.dg/cpp0x/udlit-macros.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44f8ad8b2138f7bfd68053e8dce596adb964735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-macros.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44f8ad8b2138f7bfd68053e8dce596adb964735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-macros.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fudlit-macros.C?ref=b44f8ad8b2138f7bfd68053e8dce596adb964735", "patch": "@@ -16,7 +16,7 @@ int operator\"\"_ID(const char*, size_t) { return 0; }\n int main()\n {\n   long i64 = 123;\n-  char buf[100];\n+  char buf[] = \"xxxxxx\"__FILE__;      // { dg-warning \"invalid suffix on literal\" }\n   sprintf(buf, \"%\"PRId64\"abc\", i64);  // { dg-warning \"invalid suffix on literal\" }\n   return strcmp(buf, \"123abc\")\n \t + \"\"_zero"}, {"sha": "791c364f01b2017c26c932b0805c99be80f269d9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44f8ad8b2138f7bfd68053e8dce596adb964735/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44f8ad8b2138f7bfd68053e8dce596adb964735/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=b44f8ad8b2138f7bfd68053e8dce596adb964735", "patch": "@@ -1,3 +1,10 @@\n+2018-02-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR preprocessor/84517\n+\t* lex.c (is_macro_not_literal_suffix): New function.\n+\t(lex_raw_string, lex_string): Use is_macro_not_literal_suffix to\n+\tdecide when to issue -Wliteral-suffix warnings.\n+\n 2018-02-16  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/82939"}, {"sha": "37c365a3560bcd758ccf69375b43a26f52d38a41", "filename": "libcpp/lex.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44f8ad8b2138f7bfd68053e8dce596adb964735/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44f8ad8b2138f7bfd68053e8dce596adb964735/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=b44f8ad8b2138f7bfd68053e8dce596adb964735", "patch": "@@ -1630,6 +1630,21 @@ is_macro(cpp_reader *pfile, const uchar *base)\n   return !result ? false : (result->type == NT_MACRO);\n }\n \n+/* Returns true if a literal suffix does not have the expected form\n+   and is defined as a macro.  */\n+\n+static bool\n+is_macro_not_literal_suffix(cpp_reader *pfile, const uchar *base)\n+{\n+  /* User-defined literals outside of namespace std must start with a single\n+     underscore, so assume anything of that form really is a UDL suffix.\n+     We don't need to worry about UDLs defined inside namespace std because\n+     their names are reserved, so cannot be used as macro names in valid\n+     programs.  */\n+  if (base[0] == '_' && base[1] != '_')\n+    return false;\n+  return is_macro (pfile, base);\n+}\n \n /* Lexes a raw string.  The stored string contains the spelling, including\n    double quotes, delimiter string, '(' and ')', any leading\n@@ -1900,10 +1915,8 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n     {\n       /* If a string format macro, say from inttypes.h, is placed touching\n \t a string literal it could be parsed as a C++11 user-defined string\n-\t literal thus breaking the program.\n-\t Try to identify macros with is_macro. A warning is issued.\n-\t The macro name should not start with '_' for this warning. */\n-      if ((*cur != '_') && is_macro (pfile, cur))\n+\t literal thus breaking the program.  */\n+      if (is_macro_not_literal_suffix (pfile, cur))\n \t{\n \t  /* Raise a warning, but do not consume subsequent tokens.  */\n \t  if (CPP_OPTION (pfile, warn_literal_suffix) && !pfile->state.skipping)\n@@ -2031,10 +2044,8 @@ lex_string (cpp_reader *pfile, cpp_token *token, const uchar *base)\n     {\n       /* If a string format macro, say from inttypes.h, is placed touching\n \t a string literal it could be parsed as a C++11 user-defined string\n-\t literal thus breaking the program.\n-\t Try to identify macros with is_macro. A warning is issued.\n-\t The macro name should not start with '_' for this warning. */\n-      if ((*cur != '_') && is_macro (pfile, cur))\n+\t literal thus breaking the program.  */\n+      if (is_macro_not_literal_suffix (pfile, cur))\n \t{\n \t  /* Raise a warning, but do not consume subsequent tokens.  */\n \t  if (CPP_OPTION (pfile, warn_literal_suffix) && !pfile->state.skipping)"}]}