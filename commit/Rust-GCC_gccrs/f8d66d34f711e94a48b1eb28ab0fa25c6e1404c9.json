{"sha": "f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkNjZkMzRmNzExZTk0YTQ4YjFlYjI4YWIwZmEyNWM2ZTE0MDRjOQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-04-11T22:06:46Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-04-11T22:06:46Z"}, "message": "re PR middle-end/20933 (gcc can no longer bootstrap itself)\n\n\n\tPR tree-optimization/20933\n\t* tree-ssa-alias.c (compute_flow_insensitive_aliasing): Move\n\tlogic to reject aliases between read-only and writable\n\tvariables ...\n\t(may_alias_p): ... here.\n\t(get_tmt_for): Do not associate read-only tags to pointers\n\twhose pointed-to type is not read-only.\n\t* tree-ssa.c (verify_ssa): Check that memory stores have at\n\tleast one V_MAY_DEF or V_MUST_DEF.\n\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/20933\n\t* gcc.dg/tree-ssa/pr20933.c: New test.\n\nFrom-SVN: r97988", "tree": {"sha": "ea3a6eedbf40f8febad0a55f21fd8d5f0af2123d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea3a6eedbf40f8febad0a55f21fd8d5f0af2123d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/comments", "author": null, "committer": null, "parents": [{"sha": "9f32d037484306f1045b661d9bf29e893d846ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f32d037484306f1045b661d9bf29e893d846ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f32d037484306f1045b661d9bf29e893d846ede"}], "stats": {"total": 140, "additions": 130, "deletions": 10}, "files": [{"sha": "6d4dd6aa326d23c02f77ca3c1e182795abda1ddc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "patch": "@@ -1,3 +1,15 @@\n+2005-04-11  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/20933\n+\t* tree-ssa-alias.c (compute_flow_insensitive_aliasing): Move\n+\tlogic to reject aliases between read-only and writable\n+\tvariables ...\n+\t(may_alias_p): ... here.\n+\t(get_tmt_for): Do not associate read-only tags to pointers\n+\twhose pointed-to type is not read-only.\n+\t* tree-ssa.c (verify_ssa): Check that memory stores have at\n+\tleast one V_MAY_DEF or V_MUST_DEF.\n+\n 2005-04-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR/17092"}, {"sha": "52711671912d79de3d3343ec3ae0138046e603e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "patch": "@@ -1,3 +1,8 @@\n+2005-04-11  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/20933\n+\t* gcc.dg/tree-ssa/pr20933.c: New test.\n+\n 2005-04-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.dg/fold_nearest.f90: New test."}, {"sha": "d32d6003e79c5dc7ea34748bed88ca791ce63621", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20933.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20933.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20933.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20933.c?ref=f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern __SIZE_TYPE__ strlen (__const char *__s)\n+     __attribute__ ((__nothrow__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));\n+extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)\n+     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));\n+extern char *getenv (__const char *__name) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));\n+extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));\n+extern void * xmalloc (__SIZE_TYPE__) __attribute__ ((__malloc__));\n+\n+static __inline__ const char *\n+try (const char *dir, const char *base)\n+{\n+  if (base != 0)\n+    return base;\n+  if (dir != 0\n+      && access (dir, 4 | 2 | 1) == 0)\n+    return dir;\n+  return 0;\n+}\n+\n+static const char tmp[] = { '/', 't', 'm', 'p', 0 };\n+static const char usrtmp[] =\n+{ '/', 'u', 's', 'r', '/', 't', 'm', 'p', 0 };\n+static const char vartmp[] =\n+{ '/', 'v', 'a', 'r', '/', 't', 'm', 'p', 0 };\n+\n+static char *memoized_tmpdir;\n+char *\n+choose_tmpdir (void)\n+{\n+  const char *base = 0;\n+  char *tmpdir;\n+  unsigned int len;\n+\n+  if (memoized_tmpdir)\n+    return memoized_tmpdir;\n+\n+  base = try (getenv (\"TMPDIR\"), base);\n+  base = try (getenv (\"TMP\"), base);\n+  base = try (getenv (\"TEMP\"), base);\n+\n+\n+  base = try (\"/tmp\", base);\n+\n+\n+\n+  base = try (vartmp, base);\n+  base = try (usrtmp, base);\n+  base = try (tmp, base);\n+\n+\n+  if (base == 0)\n+    base = \".\";\n+\n+\n+\n+  len = strlen (base);\n+  tmpdir = xmalloc (len + 2);\n+  strcpy (tmpdir, base);\n+  /* Alias analysis was associating read-only memory tags to pointers\n+     that are not read-only.  We would then not issue any V_MAY_DEF in\n+     this store.  */\n+  tmpdir[len] = '/';\n+  tmpdir[len+1] = '\\0';\n+\n+  memoized_tmpdir = tmpdir;\n+  return tmpdir;\n+}"}, {"sha": "c0bce922788ceb54d353cb26dd2d07c4763d8421", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "patch": "@@ -1001,10 +1001,6 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n \t  if (!tag_stored_p && !var_stored_p)\n \t    continue;\n \n-\t  if ((unmodifiable_var_p (tag) && !unmodifiable_var_p (var))\n-\t      || (unmodifiable_var_p (var) && !unmodifiable_var_p (tag)))\n-\t    continue;\n-\n \t  if (may_alias_p (p_map->var, p_map->set, var, v_map->set))\n \t    {\n \t      subvar_t svars;\n@@ -1719,6 +1715,16 @@ may_alias_p (tree ptr, HOST_WIDE_INT mem_alias_set,\n       return false;\n     }\n \n+  /* If either MEM or VAR is a read-only global and the other one\n+     isn't, then PTR cannot point to VAR.  */\n+  if ((unmodifiable_var_p (mem) && !unmodifiable_var_p (var))\n+      || (unmodifiable_var_p (var) && !unmodifiable_var_p (mem)))\n+    {\n+      alias_stats.alias_noalias++;\n+      alias_stats.simple_resolved++;\n+      return false;\n+    }\n+\n   m_ann = var_ann (mem);\n \n   gcc_assert (m_ann->mem_tag_kind == TYPE_TAG);\n@@ -2319,9 +2325,11 @@ get_tmt_for (tree ptr, struct alias_info *ai)\n   for (i = 0, tag = NULL_TREE; i < ai->num_pointers; i++)\n     {\n       struct alias_map_d *curr = ai->pointers[i];\n-      if (tag_set == curr->set)\n+      tree curr_tag = var_ann (curr->var)->type_mem_tag;\n+      if (tag_set == curr->set\n+\t  && TYPE_READONLY (tag_type) == TYPE_READONLY (TREE_TYPE (curr_tag)))\n \t{\n-\t  tag = var_ann (curr->var)->type_mem_tag;\n+\t  tag = curr_tag;\n \t  break;\n \t}\n     }\n@@ -2356,6 +2364,10 @@ get_tmt_for (tree ptr, struct alias_info *ai)\n      pointed-to type.  */\n   gcc_assert (tag_set == get_alias_set (tag));\n \n+  /* If PTR's pointed-to type is read-only, then TAG's type must also\n+     be read-only.  */\n+  gcc_assert (TYPE_READONLY (tag_type) == TYPE_READONLY (TREE_TYPE (tag)));\n+\n   return tag;\n }\n "}, {"sha": "1e232e392e53e8ca321e74037934490f26bbb3d8", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=f8d66d34f711e94a48b1eb28ab0fa25c6e1404c9", "patch": "@@ -707,16 +707,37 @@ verify_ssa (bool check_modified_stmt)\n \t      goto err;\n \t    }\n \n+\t  if (TREE_CODE (stmt) == MODIFY_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (stmt, 0)) != SSA_NAME)\n+\t    {\n+\t      tree lhs, base_address;\n+\n+\t      lhs = TREE_OPERAND (stmt, 0);\n+\t      base_address = get_base_address (lhs);\n \n-\t      if (stmt_ann (stmt)->makes_aliased_stores \n-\t\t  && NUM_V_MAY_DEFS (STMT_V_MAY_DEF_OPS (stmt)) == 0)\n+\t      if (base_address\n+\t\t  && SSA_VAR_P (base_address)\n+\t\t  && NUM_V_MAY_DEFS (STMT_V_MAY_DEF_OPS (stmt)) == 0\n+\t\t  && NUM_V_MUST_DEFS (STMT_V_MUST_DEF_OPS (stmt)) == 0)\n \t\t{\n-\t\t  error (\"Statement makes aliased stores, but has no V_MAY_DEFS\");\n+\t\t  error (\"Statement makes a memory store, but has no \"\n+\t\t\t \"V_MAY_DEFS nor V_MUST_DEFS\");\n \t\t  print_generic_stmt (stderr, stmt, TDF_VOPS);\n \t\t  goto err;\n \t\t}\n+\t    }\n+\n+\n+\t  if (stmt_ann (stmt)->makes_aliased_stores \n+\t      && NUM_V_MAY_DEFS (STMT_V_MAY_DEF_OPS (stmt)) == 0)\n+\t    {\n+\t      error (\"Statement makes aliased stores, but has no V_MAY_DEFS\");\n+\t      print_generic_stmt (stderr, stmt, TDF_VOPS);\n+\t      goto err;\n+\t    }\n \n-\t  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_ALL_USES | SSA_OP_ALL_KILLS)\n+\t  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter,\n+\t                            SSA_OP_ALL_USES | SSA_OP_ALL_KILLS)\n \t    {\n \t      op = USE_FROM_PTR (use_p);\n \t      if (verify_use (bb, definition_block[SSA_NAME_VERSION (op)],"}]}