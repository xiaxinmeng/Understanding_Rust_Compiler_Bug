{"sha": "76369a821b895c4d4bf1412d108716c4bb0a90de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzNjlhODIxYjg5NWM0ZDRiZjE0MTJkMTA4NzE2YzRiYjBhOTBkZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-31T01:58:12Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-31T01:58:12Z"}, "message": "emit-rtl.c (mark_used_flags): New function.\n\n\t* emit-rtl.c (mark_used_flags): New function.\n\t(set_used_flags, reset_used_flags): Call it.\n\nFrom-SVN: r166101", "tree": {"sha": "9ae062a107bbf781d36702b920987d727b70ba32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae062a107bbf781d36702b920987d727b70ba32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76369a821b895c4d4bf1412d108716c4bb0a90de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76369a821b895c4d4bf1412d108716c4bb0a90de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76369a821b895c4d4bf1412d108716c4bb0a90de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76369a821b895c4d4bf1412d108716c4bb0a90de/comments", "author": null, "committer": null, "parents": [{"sha": "6528027423123ab5bf18568422d6d930cd544b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6528027423123ab5bf18568422d6d930cd544b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6528027423123ab5bf18568422d6d930cd544b06"}], "stats": {"total": 102, "additions": 37, "deletions": 65}, "files": [{"sha": "2d6360984a3960679def2acefbd4417812e933a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76369a821b895c4d4bf1412d108716c4bb0a90de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76369a821b895c4d4bf1412d108716c4bb0a90de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76369a821b895c4d4bf1412d108716c4bb0a90de", "patch": "@@ -1,3 +1,8 @@\n+2010-10-30  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* emit-rtl.c (mark_used_flags): New function.\n+\t(set_used_flags, reset_used_flags): Call it.\n+\n 2010-10-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/44569\n@@ -160,6 +165,22 @@\n \n \t* recog.c (split_all_insns): Remove dead code.\n \n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/microblaze/microblaze-protos.h (function_arg): Delete.\n+\t(function_arg_advance): Delete.\n+\t* config/microblaze/microblaze.h (FUNCTION_ARG_ADVANCE): Delete.\n+\t(FUNCTION_ARG): Delete.\n+\t* config/microblaze/microblaze.c (function_arg_advance): Rename to...\n+\t(microblaze_function_arg_advance): ...this.  Make static.  Take a\n+\tconst_tree and a bool.\n+\t(function-arg): Rename to...\n+\t(microblaze_function_arg): ...this.  Make static.  Take a const_tree\n+\tand a bool.\n+\t(microblaze_expand_prologue): Call targetm.calls.function_arg and\n+\ttargetm.calls.function_arg_advance.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* score.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete."}, {"sha": "eb4ea2a97d82e69b60bd8dd5fd656ce5d039a7c7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 16, "deletions": 65, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76369a821b895c4d4bf1412d108716c4bb0a90de/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76369a821b895c4d4bf1412d108716c4bb0a90de/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=76369a821b895c4d4bf1412d108716c4bb0a90de", "patch": "@@ -2728,11 +2728,10 @@ copy_rtx_if_shared_1 (rtx *orig1)\n   return;\n }\n \n-/* Clear all the USED bits in X to allow copy_rtx_if_shared to be used\n-   to look for shared sub-parts.  */\n+/* Set the USED bit in X and its non-shareable subparts to FLAG.  */\n \n-void\n-reset_used_flags (rtx x)\n+static void\n+mark_used_flags (rtx x, int flag)\n {\n   int i, j;\n   enum rtx_code code;\n@@ -2778,7 +2777,7 @@ reset_used_flags (rtx x)\n       break;\n     }\n \n-  RTX_FLAG (x, used) = 0;\n+  RTX_FLAG (x, used) = flag;\n \n   format_ptr = GET_RTX_FORMAT (code);\n   length = GET_RTX_LENGTH (code);\n@@ -2793,81 +2792,33 @@ reset_used_flags (rtx x)\n               x = XEXP (x, i);\n \t      goto repeat;\n             }\n-\t  reset_used_flags (XEXP (x, i));\n+\t  mark_used_flags (XEXP (x, i), flag);\n \t  break;\n \n \tcase 'E':\n \t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    reset_used_flags (XVECEXP (x, i, j));\n+\t    mark_used_flags (XVECEXP (x, i, j), flag);\n \t  break;\n \t}\n     }\n }\n \n-/* Set all the USED bits in X to allow copy_rtx_if_shared to be used\n+/* Clear all the USED bits in X to allow copy_rtx_if_shared to be used\n    to look for shared sub-parts.  */\n \n void\n-set_used_flags (rtx x)\n+reset_used_flags (rtx x)\n {\n-  int i, j;\n-  enum rtx_code code;\n-  const char *format_ptr;\n-\n-  if (x == 0)\n-    return;\n-\n-  code = GET_CODE (x);\n-\n-  /* These types may be freely shared so we needn't do any resetting\n-     for them.  */\n-\n-  switch (code)\n-    {\n-    case REG:\n-    case DEBUG_EXPR:\n-    case VALUE:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_FIXED:\n-    case CONST_VECTOR:\n-    case SYMBOL_REF:\n-    case CODE_LABEL:\n-    case PC:\n-    case CC0:\n-      return;\n-\n-    case DEBUG_INSN:\n-    case INSN:\n-    case JUMP_INSN:\n-    case CALL_INSN:\n-    case NOTE:\n-    case LABEL_REF:\n-    case BARRIER:\n-      /* The chain of insns is not being copied.  */\n-      return;\n-\n-    default:\n-      break;\n-    }\n-\n-  RTX_FLAG (x, used) = 1;\n+  mark_used_flags (x, 0);\n+}\n \n-  format_ptr = GET_RTX_FORMAT (code);\n-  for (i = 0; i < GET_RTX_LENGTH (code); i++)\n-    {\n-      switch (*format_ptr++)\n-\t{\n-\tcase 'e':\n-\t  set_used_flags (XEXP (x, i));\n-\t  break;\n+/* Set all the USED bits in X to allow copy_rtx_if_shared to be used\n+   to look for shared sub-parts.  */\n \n-\tcase 'E':\n-\t  for (j = 0; j < XVECLEN (x, i); j++)\n-\t    set_used_flags (XVECEXP (x, i, j));\n-\t  break;\n-\t}\n-    }\n+void\n+set_used_flags (rtx x)\n+{\n+  mark_used_flags (x, 1);\n }\n \f\n /* Copy X if necessary so that it won't be altered by changes in OTHER."}]}