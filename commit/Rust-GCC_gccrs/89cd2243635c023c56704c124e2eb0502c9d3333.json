{"sha": "89cd2243635c023c56704c124e2eb0502c9d3333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljZDIyNDM2MzVjMDIzYzU2NzA0YzEyNGUyZWIwNTAyYzlkMzMzMw==", "commit": {"author": {"name": "Felix Natter", "email": "fnatter@gmx.net", "date": "2001-07-12T00:02:34Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-07-12T00:02:34Z"}, "message": "porting-howto.xml: Initial checkin of master copy.\n\n2001-07-11   Felix Natter  <fnatter@gmx.net>\n\n\t* docs/html/17_intro/porting-howto.xml:  Initial checkin of\n\tmaster copy.\n\t* docs/html/17_intro/porting-howto.html:  check in v0.9.3\n\nFrom-SVN: r43953", "tree": {"sha": "0bd61a7994f2260827d6e84f1cd1fe14ff93534e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd61a7994f2260827d6e84f1cd1fe14ff93534e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89cd2243635c023c56704c124e2eb0502c9d3333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89cd2243635c023c56704c124e2eb0502c9d3333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89cd2243635c023c56704c124e2eb0502c9d3333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89cd2243635c023c56704c124e2eb0502c9d3333/comments", "author": {"login": "fnatter", "id": 1979118, "node_id": "MDQ6VXNlcjE5NzkxMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1979118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnatter", "html_url": "https://github.com/fnatter", "followers_url": "https://api.github.com/users/fnatter/followers", "following_url": "https://api.github.com/users/fnatter/following{/other_user}", "gists_url": "https://api.github.com/users/fnatter/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnatter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnatter/subscriptions", "organizations_url": "https://api.github.com/users/fnatter/orgs", "repos_url": "https://api.github.com/users/fnatter/repos", "events_url": "https://api.github.com/users/fnatter/events{/privacy}", "received_events_url": "https://api.github.com/users/fnatter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f905405bc326d31fe7c0b51f435f29cd063ae9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f905405bc326d31fe7c0b51f435f29cd063ae9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f905405bc326d31fe7c0b51f435f29cd063ae9f"}], "stats": {"total": 1048, "additions": 892, "deletions": 156}, "files": [{"sha": "26c246d441f4e807edf7f1a32bedad8d4e7b8cda", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89cd2243635c023c56704c124e2eb0502c9d3333/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89cd2243635c023c56704c124e2eb0502c9d3333/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=89cd2243635c023c56704c124e2eb0502c9d3333", "patch": "@@ -1,3 +1,9 @@\n+2001-07-11   Felix Natter  <fnatter@gmx.net>\n+\n+\t* docs/html/17_intro/porting-howto.xml:  Initial checkin of\n+\tmaster copy.\n+\t* docs/html/17_intro/porting-howto.html:  check in v0.9.3\n+\n 2001-07-11  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/doxygen/run_doxygen:  Don't keep output from previous run."}, {"sha": "582d4a6cdf2336842575599120d49eb583da5322", "filename": "libstdc++-v3/docs/html/17_intro/porting-howto.html", "status": "modified", "additions": 128, "deletions": 156, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89cd2243635c023c56704c124e2eb0502c9d3333/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89cd2243635c023c56704c124e2eb0502c9d3333/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html?ref=89cd2243635c023c56704c124e2eb0502c9d3333", "patch": "@@ -1,20 +1,20 @@\n-<!DOCTYPE HTML PUBLIC \"http://www.w3.org/TR/REC-html40/loose.dtd\" \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n <html>\n <head>\n <meta content=\"text/html; charset=ISO-8859-1\" http-equiv=\"Content-Type\">\n <title>Libstdc++-porting-howto</title>\n <meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.29\">\n </head>\n-<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\"><div id=\"libstdc++-porting\" class=\"article\">\n+<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\"><div id=\"libstdc++-porting-howto\" class=\"article\">\n <div class=\"titlepage\">\n <div><h1 class=\"title\">\n-<a name=\"libstdc++-porting\"></a>Libstdc++-porting-howto</h1></div>\n+<a name=\"libstdc++-porting-howto\"></a>Libstdc++-porting-howto</h1></div>\n <div><h3 class=\"author\">Felix Natter</h3></div>\n <div><div class=\"legalnotice\">\n <p class=\"legalnotice-title\"><b>Legal Notice</b></p>\n <p>\n-\tThis document can be distributed under the FDL\n-\t(<a href=\"http://www.gnu.org\" target=\"_top\">www.gnu.org</a>)\n+\t\tThis document can be distributed under the FDL\n+\t\t(<a href=\"http://www.gnu.org\" target=\"_top\">www.gnu.org</a>)\n       </p>\n </div></div>\n <div><p class=\"pubdate\">Tue Jun  5 20:07:49 2001</p></div>\n@@ -32,8 +32,8 @@\n <td align=\"left\">fnatter</td>\n </tr>\n <tr><td align=\"left\" colspan=\"3\">First released version using docbook-xml\n-\t  + second upload to libstdc++-page.\n-\t</td></tr>\n+\t\t  + second upload to libstdc++-page.\n+\t\t</td></tr>\n <tr>\n <td align=\"left\">Revision 0.9</td>\n <td align=\"left\">Wed Sep  6 02:59:32 2000</td>\n@@ -46,21 +46,37 @@\n <td align=\"left\">fnatter</td>\n </tr>\n <tr><td align=\"left\" colspan=\"3\">added information about why file-descriptors are not in the\n-\t  standard</td></tr>\n+\t\t  standard</td></tr>\n <tr>\n <td align=\"left\">Revision 0.9.2</td>\n <td align=\"left\">Tue Jun  5 20:07:49 2001</td>\n <td align=\"left\">fnatter</td>\n </tr>\n <tr><td align=\"left\" colspan=\"3\">\n-\t  a fix, added hint on increased portability of C-shadow-headers,\n-\t  added autoconf-test HAVE_CONTAINER_AT\n-\t</td></tr>\n+\t\t  a fix, added hint on increased portability of C-shadow-headers,\n+\t\t  added autoconf-test HAVE_CONTAINER_AT\n+\t\t</td></tr>\n+<tr>\n+<td align=\"left\">Revision 0.9.3</td>\n+<td align=\"left\">Fri Jun 29 16:15:56 2001</td>\n+<td align=\"left\">fnatter</td>\n+</tr>\n+<tr><td align=\"left\" colspan=\"3\">\n+\t\t\tchanged signature of nonstandard filebuf-constructor and\n+\t\t  update the section on filebuf::attach to point to ../ext/howto.html,\n+\t\t  added link to ../21/strings/howto.html\n+\t\t  in sec-stringstream, changed &lt;link&gt;-tags to have content\n+\t\t\t(so that these links work),\n+\t\t  replace &quot;user-space&quot; by &quot;global namespace&quot;\n+\t\t\tadd note about gcc 3.0 and shadow-headers\t\t\t\n+\t\t\tadd section about ostream::form and istream::scan\n+\t\t\tsec-vector-at: remove hint to modify headers\n+\t\t\tfix spelling error in sec-stringstream\n+\t\t</td></tr>\n </table></div></div>\n <div><div class=\"abstract\">\n <p>\n-<a name=\"id2715202\"></a>\n-<b>Abstract</b>\n+<a name=\"id2695641\"></a><b>Abstract</b>\n </p>\n <p>\n \tSome notes on porting applications from libstdc++-2.90 (or earlier\n@@ -93,8 +109,7 @@\n <dt>2. <a href=\"#sec-nocreate\">there is no ios::nocreate/ios::noreplace\n       in ISO 14882</a>\n </dt>\n-<dt>3. <a href=\"#sec-stream::attach\">\n-<b>stream::attach(int\n+<dt>3. <a href=\"#sec-stream::attach\"><b>stream::attach(int\n \tfd)</b> is not in the standard any more</a>\n </dt>\n <dt>4. <a href=\"#sec-headers\">The new headers</a>\n@@ -114,19 +129,19 @@\n       Libc-macros (i.e. <b>isspace</b> from\n       <tt>&lt;cctype&gt;</tt>)</a>\n </dt>\n-<dt>7. <a href=\"#sec-stream-state\">\n-      State of streams\n-    </a>\n+<dt>7. <a href=\"#sec-stream-state\">State of streams</a>\n </dt>\n <dt>8. <a href=\"#sec-vector-at\">vector::at is missing (i.e. gcc 2.95.x)</a>\n </dt>\n <dt>9. <a href=\"#sec-eof\">Using std::char_traits&lt;char&gt;::eof()</a>\n </dt>\n <dt>10. <a href=\"#sec-string-clear\">Using string::clear()/string::erase()</a>\n </dt>\n-<dt>11. <a href=\"#sec-stringstream\">Using stringstream's</a>\n+<dt>11. <a href=\"#sec-scan-form\">GNU Extensions ostream::form and istream::scan</a>\n+</dt>\n+<dt>12. <a href=\"#sec-stringstream\">Using stringstreams</a>\n </dt>\n-<dt>12. <a href=\"#sec-about\">About...</a>\n+<dt>13. <a href=\"#sec-about\">About...</a>\n </dt>\n </dl>\n </div>\n@@ -137,10 +152,8 @@\n     libstdc++-implementations&quot;.\n   </p>\n <div class=\"section\">\n-<a name=\"sec-nsstd\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-nsstd\"></a>\n-<span class=\"label\">1.</span> <span class=\"title\">Namespace std::</span>\n+<a name=\"sec-nsstd\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-nsstd\"></a><span class=\"label\">1.</span> <span class=\"title\">Namespace std::</span>\n </h2></div></div>\n <p>\n       The latest C++-standard (ISO-14882) requires that the standard\n@@ -149,19 +162,19 @@\n       things:\n       <div class=\"itemizedlist\"><ul>\n <li><p>\n-<a name=\"id2715113\"></a>wrap your code in <b>namespace std {\n+<a name=\"id2695691\"></a>wrap your code in <b>namespace std {\n \t      ... }</b> =&gt; This is not an option because only symbols\n \t    from the standard c++-library are defined in namespace std::.\n \t  </p></li>\n <li><p>\n-<a name=\"id2668711\"></a>put a kind of\n+<a name=\"id2695698\"></a>put a kind of\n \t    <i>using-declaration</i> in your source (either\n \t    <b>using namespace std;</b> or i.e. <b>using\n \t      std::string;</b>) =&gt; works well for source-files, but\n \t    cannot be used in header-files.\n \t  </p></li>\n <li><p>\n-<a name=\"id2668731\"></a>use a <i>fully qualified name</i> for\n+<a name=\"id2695717\"></a>use a <i>fully qualified name</i> for\n \t    each libstdc++-symbol (i.e. <b>std::string</b>,\n \t    <b>std::cout</b>) =&gt; can always be used\n \t  </p></li>\n@@ -188,10 +201,8 @@\n       that cannot ignore std::.\n     </p>\n <div class=\"section\">\n-<a name=\"sec-gtkmm-hack\"></a>\n-<div class=\"titlepage\"><div><h3 class=\"title\">\n-<a name=\"sec-gtkmm-hack\"></a>\n-<span class=\"label\">1.1.1.</span> <span class=\"title\">Using <i>namespace\n+<a name=\"sec-gtkmm-hack\"></a><div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-gtkmm-hack\"></a><span class=\"label\">1.1.1.</span> <span class=\"title\">Using <i>namespace\n \t  composition</i> if the project uses a separate\n \tnamespace</span>\n </h3></div></div>\n@@ -213,7 +224,7 @@\n \tnamespace Gtk::.  The result is that you don't have to use\n \t<b>std::string</b> in this header, but still\n \t<b>std::string</b> does not get imported into\n-\tuser-space (the global namespace ::) unless the user does\n+\tthe global namespace (::) unless the user does\n \t<b>using namespace Gtk;</b> (which is not recommended\n \tpractice for Gtk--, so it is not a problem).  Additionally, the\n \t<b>using</b>-declarations are wrapped in macros that\n@@ -225,10 +236,8 @@\n       </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-emptyns\"></a>\n-<div class=\"titlepage\"><div><h3 class=\"title\">\n-<a name=\"sec-emptyns\"></a>\n-<span class=\"label\">1.1.2.</span> <span class=\"title\">Defining an empty namespace std</span>\n+<a name=\"sec-emptyns\"></a><div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-emptyns\"></a><span class=\"label\">1.1.2.</span> <span class=\"title\">Defining an empty namespace std</span>\n </h3></div></div>\n <p>\n \tBy defining an (empty) namespace <b>std::</b> before\n@@ -241,10 +250,8 @@\n       </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-avoidfqn\"></a>\n-<div class=\"titlepage\"><div><h3 class=\"title\">\n-<a name=\"sec-avoidfqn\"></a>\n-<span class=\"label\">1.1.3.</span> <span class=\"title\">Avoid to use fully qualified names\n+<a name=\"sec-avoidfqn\"></a><div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-avoidfqn\"></a><span class=\"label\">1.1.3.</span> <span class=\"title\">Avoid to use fully qualified names\n \t(i.e. std::string)</span>\n </h3></div></div>\n <p>\n@@ -259,10 +266,8 @@\n       </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-osprojects\"></a>\n-<div class=\"titlepage\"><div><h3 class=\"title\">\n-<a name=\"sec-osprojects\"></a>\n-<span class=\"label\">1.1.4.</span> <span class=\"title\">How some open-source-projects deal\n+<a name=\"sec-osprojects\"></a><div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-osprojects\"></a><span class=\"label\">1.1.4.</span> <span class=\"title\">How some open-source-projects deal\n \twith this</span>\n </h3></div></div>\n <p>\n@@ -271,8 +276,7 @@\n       </p>\n <div class=\"table\">\n <p>\n-<a name=\"id2668681\"></a>\n-<b>Table 1. Namespace std:: in Open-Source programs</b>\n+<a name=\"id2696268\"></a><b>Table 1. Namespace std:: in Open-Source programs</b>\n </p>\n <table summary=\"Namespace std:: in Open-Source programs\" border=\"1\">\n <colgroup>\n@@ -306,8 +310,7 @@\n </div>\n <div class=\"table\">\n <p>\n-<a name=\"id2666288\"></a>\n-<b>Table 2. Notations for categories</b>\n+<a name=\"id2696334\"></a><b>Table 2. Notations for categories</b>\n </p>\n <table summary=\"Notations for categories\" border=\"1\">\n <colgroup>\n@@ -334,17 +337,15 @@\n </table>\n </div>\n <p>\n-\tAs you can see, this currently lacks an example of a project which\n-\tuses libstdc++-symbols in headers in a back-portable way (except\n-\tfor Gtk--: see the <a href=\"#sec-gtkmm-hack\"></a>).\n+\tAs you can see, this currently lacks an example of a project\n+\twhich uses libstdc++-symbols in headers in a back-portable way\n+\t(except for Gtk--: see the <a href=\"#sec-gtkmm-hack\">section on the gtkmm-hack</a>).\n       </p>\n </div>\n </div>\n <div class=\"section\">\n-<a name=\"sec-nocreate\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-nocreate\"></a>\n-<span class=\"label\">2.</span> <span class=\"title\">there is no ios::nocreate/ios::noreplace\n+<a name=\"sec-nocreate\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-nocreate\"></a><span class=\"label\">2.</span> <span class=\"title\">there is no ios::nocreate/ios::noreplace\n       in ISO 14882</span>\n </h2></div></div>\n <p>\n@@ -364,11 +365,8 @@\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-stream::attach\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-stream::attach\"></a>\n-<span class=\"label\">3.</span> <span class=\"title\">\n-<b>stream::attach(int\n+<a name=\"sec-stream::attach\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-stream::attach\"></a><span class=\"label\">3.</span> <span class=\"title\"><b>stream::attach(int\n \tfd)</b> is not in the standard any more</span>\n </h2></div></div>\n <p>\n@@ -379,32 +377,33 @@\n     </p>\n <p>\n       When using libstdc++-v3, you can use\n-      <div class=\"funcsynopsis\" id=\"id2666593\">\n+      <div class=\"funcsynopsis\" id=\"id2696909\">\n <p>\n-<a name=\"id2666593\"></a>\n-<pre class=\"funcsynopsisinfo\">\n+<a name=\"id2696909\"></a><pre class=\"funcsynopsisinfo\">\n \t  #include &lt;fstream&gt;\n \t</pre>\n-<p><code>\n-<code class=\"funcdef\">int <b class=\"fsfunc\">basic_filebuf</b>\n-</code>(<var class=\"pdparam\">__fd</var>, <var class=\"pdparam\">__name</var>, <var class=\"pdparam\">__mode</var>);<br>int <var class=\"pdparam\">__fd</var>;<br>const char* <var class=\"pdparam\">__name</var>;<br>ios_base::openmode <var class=\"pdparam\">__mode</var>;</code></p>\n+<p><code><code class=\"funcdef\">\n+\t\t  <b class=\"fsfunc\">basic_filebuf&lt;...&gt;::basic_filebuf&lt;...&gt;\n+\t\t\t</b>\n+\t\t</code>(<var class=\"pdparam\">file</var>, <var class=\"pdparam\">mode</var>, <var class=\"pdparam\">size</var>);<br>__c_file_type* <var class=\"pdparam\">file</var>;<br>ios_base::open_mode <var class=\"pdparam\">mode</var>;<br>int <var class=\"pdparam\">size</var>;</code></p>\n <p>\n </div>\n       but the the signature of this constructor has changed often, and\n-      it might change again.\n+      it might change again. For the current state of this, check\n+\t  <a href=\"../ext/howto.html\" target=\"_top\">the howto for extensions</a>.\n+\t</p>\n+<p>\n       For a portable solution (among systems which use\n       filedescriptors), you need to implement a subclass of\n-      <b>streambuf</b> (or\n-      <b>basic_streambuf&lt;..&gt;</b>) which opens a file\n+      <b>std::streambuf</b> (or\n+      <b>std::basic_streambuf&lt;..&gt;</b>) which opens a file\n       given a descriptor, and then pass an instance of this to the\n       stream-constructor (from the Josuttis-book).\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-headers\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-headers\"></a>\n-<span class=\"label\">4.</span> <span class=\"title\">The new headers</span>\n+<a name=\"sec-headers\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-headers\"></a><span class=\"label\">4.</span> <span class=\"title\">The new headers</span>\n </h2></div></div>\n <p>\n       All new headers can be seen in this <a href=\"headers_cc.txt\" target=\"_top\">\n@@ -415,10 +414,8 @@\n     a warning that you are using deprecated headers.\n     </p>\n <div class=\"section\">\n-<a name=\"sec-cheaders\"></a>\n-<div class=\"titlepage\"><div><h3 class=\"title\">\n-<a name=\"sec-cheaders\"></a>\n-<span class=\"label\">4.4.1.</span> <span class=\"title\">New headers replacing C-headers</span>\n+<a name=\"sec-cheaders\"></a><div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-cheaders\"></a><span class=\"label\">4.4.1.</span> <span class=\"title\">New headers replacing C-headers</span>\n </h3></div></div>\n <p>\n \tYou should not use the C-headers (except for system-level\n@@ -448,10 +445,8 @@\n       </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-fstream-header\"></a>\n-<div class=\"titlepage\"><div><h3 class=\"title\">\n-<a name=\"sec-fstream-header\"></a>\n-<span class=\"label\">4.4.2.</span> <span class=\"title\">\n+<a name=\"sec-fstream-header\"></a><div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-fstream-header\"></a><span class=\"label\">4.4.2.</span> <span class=\"title\">\n \t<tt>&lt;fstream&gt;</tt> does\n \tnot define <b>std::cout</b>,\n \t<b>std::cin</b> etc.</span>\n@@ -470,46 +465,43 @@\n </div>\n </div>\n <div class=\"section\">\n-<a name=\"sec-iterators\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-iterators\"></a>\n-<span class=\"label\">5.</span> <span class=\"title\">Iterators</span>\n+<a name=\"sec-iterators\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-iterators\"></a><span class=\"label\">5.</span> <span class=\"title\">Iterators</span>\n </h2></div></div>\n <p>\n       The following are not proper uses of iterators, but may be working\n       fixes for existing uses of iterators.\n       <div class=\"itemizedlist\"><ul>\n <li><p>\n-<a name=\"id2664787\"></a>you cannot do\n+<a name=\"id2692127\"></a>you cannot do\n \t    <b>ostream::operator&lt;&lt;(iterator)</b> to\n \t    print the address of the iterator =&gt; use\n \t    <b>operator&lt;&lt; &amp;*iterator</b> instead ?\n \t  </p></li>\n <li><p>\n-<a name=\"id2664753\"></a>you cannot clear an iterator's reference\n+<a name=\"id2697070\"></a>you cannot clear an iterator's reference\n \t    (<b>iterator = 0</b>) =&gt; use\n \t    <b>iterator = iterator_type();</b> ?\n \t  </p></li>\n <li><p>\n-<a name=\"id2664806\"></a>\n-<b>if (iterator)</b> won't work any\n+<a name=\"id2697221\"></a><b>if (iterator)</b> won't work any\n \t    more =&gt; use <b>if (iterator != iterator_type())</b>\n \t    ?</p></li>\n </ul></div>\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-macros\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-macros\"></a>\n-<span class=\"label\">6.</span> <span class=\"title\">\n+<a name=\"sec-macros\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-macros\"></a><span class=\"label\">6.</span> <span class=\"title\">\n       Libc-macros (i.e. <b>isspace</b> from\n       <tt>&lt;cctype&gt;</tt>)</span>\n </h2></div></div>\n <p>\n-      Glibc 2.0.x and 2.1.x define the <tt>&lt;ctype.h&gt;</tt> -functionality as\n-      macros (isspace, isalpha etc.). Libstdc++-v3 &quot;shadows&quot; these macros\n-      as described in the <a href=\"#sec-cheaders\"></a>.\n+      Glibc 2.0.x and 2.1.x define the\n+      <tt>&lt;ctype.h&gt;</tt>\n+      -functionality as macros (isspace, isalpha etc.). Libstdc++-v3\n+      &quot;shadows&quot; these macros as described in the <a href=\"#sec-cheaders\">section about\n+      c-headers</a>.\n     </p>\n <p>\n       Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n@@ -560,15 +552,13 @@\n \t--enable-cshadow-headers is currently broken. As a result, shadow\n \theaders are not being searched....\n       '\n+\t\t\tThis is now outdated, but gcc 3.0 still does not have fully\n+\t\t\tcompliant &quot;shadow headers&quot;.\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-stream-state\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-stream-state\"></a>\n-<span class=\"label\">7.</span> <span class=\"title\">\n-      State of streams\n-    </span>\n+<a name=\"sec-stream-state\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-stream-state\"></a><span class=\"label\">7.</span> <span class=\"title\">State of streams</span>\n </h2></div></div>\n <p>\n       At least some older implementations don't have\n@@ -579,31 +569,11 @@\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-vector-at\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-vector-at\"></a>\n-<span class=\"label\">8.</span> <span class=\"title\">vector::at is missing (i.e. gcc 2.95.x)</span>\n+<a name=\"sec-vector-at\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-vector-at\"></a><span class=\"label\">8.</span> <span class=\"title\">vector::at is missing (i.e. gcc 2.95.x)</span>\n </h2></div></div>\n <p>\n-      You could easily modify the header-files:\n-      <tt>prefix/include/g++-3/stl_vector.h</tt>:\n-      <pre class=\"programlisting\">\n-\treference operator[](size_type __n) { return *(begin() + __n); }\n-\treference at(size_type __n) {\n-\tif (begin() + __n &gt;= end())\n-\tthrow out_of_range(&quot;vector::at&quot;);\n-\treturn *(begin() + __n);\n-\t}\n-\tconst_reference operator[](size_type __n) const { return *(begin() + __n); }\n-\tconst_reference at(size_type __n) const {\n-\tif (begin() + __n &gt;= end())\n-\tthrow out_of_range(&quot;vector::at&quot;);\n-\treturn *(begin() + __n);\n-\t}\n-      </pre>\n-      (and so on for <b>deque</b> and <b>string</b>)\n-\n-      Of course a better solution is to add an autoconf-test for this:\n+      One solution is to add an autoconf-test for this:\n       <pre class=\"programlisting\">\n \tAC_MSG_CHECKING(for container::at)\n \tAC_TRY_COMPILE(\n@@ -631,10 +601,8 @@\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-eof\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-eof\"></a>\n-<span class=\"label\">9.</span> <span class=\"title\">Using std::char_traits&lt;char&gt;::eof()</span>\n+<a name=\"sec-eof\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-eof\"></a><span class=\"label\">9.</span> <span class=\"title\">Using std::char_traits&lt;char&gt;::eof()</span>\n </h2></div></div>\n <p>\n       <pre class=\"programlisting\">\n@@ -647,10 +615,8 @@\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-string-clear\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-string-clear\"></a>\n-<span class=\"label\">10.</span> <span class=\"title\">Using string::clear()/string::erase()</span>\n+<a name=\"sec-string-clear\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-string-clear\"></a><span class=\"label\">10.</span> <span class=\"title\">Using string::clear()/string::erase()</span>\n </h2></div></div>\n <p>\n       There are two functions for deleting the contents of a string:\n@@ -676,17 +642,24 @@\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-stringstream\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-stringstream\"></a>\n-<span class=\"label\">11.</span> <span class=\"title\">Using stringstream's</span>\n+<a name=\"sec-scan-form\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-scan-form\"></a><span class=\"label\">11.</span> <span class=\"title\">GNU Extensions ostream::form and istream::scan</span>\n+</h2></div></div>\n+<p>\n+\t\tThese\tare not supported any more - use\n+\t\t<a href=\"#sec-stringstream\">\n+\t\tstringstreams</a> instead.\t\n+\t\t</p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-stringstream\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-stringstream\"></a><span class=\"label\">12.</span> <span class=\"title\">Using stringstreams</span>\n </h2></div></div>\n <p>\n       Libstdc++-v3 provides the new\n-      <b>i/ostringstream</b>-classes,\n-      (<tt>&lt;sstream&gt;</tt>), but with older\n-      implementations you still have to use <b>i/ostrstream</b>\n-      (<tt>&lt;strstream&gt;</tt>):\n+      <b>i/ostringstream</b>-classes, (<tt>&lt;sstream&gt;</tt>), but for compatibility\n+      with older implementations you still have to use\n+      <b>i/ostrstream</b> (<tt>&lt;strstream&gt;</tt>):\n       <pre class=\"programlisting\">\n \t#ifdef HAVE_SSTREAM\n \t#include &lt;sstream&gt;\n@@ -696,20 +669,20 @@\n       </pre>\n       <div class=\"itemizedlist\"><ul>\n <li><p>\n-<a name=\"id2665237\"></a> <b>strstream</b> is considered to be\n+<a name=\"id2692504\"></a> <b>strstream</b> is considered to be\n \t    deprecated\n \t  </p></li>\n <li><p>\n-<a name=\"id2665256\"></a> <b>strstream</b> is limited to\n+<a name=\"id2692452\"></a> <b>strstream</b> is limited to\n \t    <b>char</b>\n \t  </p></li>\n <li><p>\n-<a name=\"id2665271\"></a> with <b>ostringstream</b> you don't\n+<a name=\"id2692539\"></a> with <b>ostringstream</b> you don't\n \t    have to take care of terminating the string or freeing its\n \t    memory\n \t  </p></li>\n <li><p>\n-<a name=\"id2665284\"></a> <b>istringstream</b> can be re-filled\n+<a name=\"id2692552\"></a> <b>istringstream</b> can be re-filled\n \t    (clear(); str(input);)\n \t  </p></li>\n </ul></div>\n@@ -766,17 +739,18 @@\n \tvoid fromString(const string&amp; input, X&amp; any)\n \t{\n \t#ifdef HAVE_SSTREAM\n-\tstd::istringstream iss(input);\n+\t  std::istringstream iss(input);\n \t#else\n-\tstd::istrstream iss(input.c_str());\n+\t  std::istrstream iss(input.c_str());\n \t#endif\n-\tX temp;\n-\tiss &gt;&gt; temp;\n-\tif (iss.fail())\n-\tthrow runtime_error(..)\n-\tany = temp;\n+\t  X temp;\n+\t  iss &gt;&gt; temp;\n+\t  if (iss.fail())\n+\t    throw runtime_error(..)\n+\t  any = temp;\n \t}\n       </pre>\n+\t  Another example of using stringstreams is in <a href=\"../21_strings/howto.html\" target=\"_top\">this howto</a>.\n     </p>\n <p>\n       I have read the Josuttis book on Standard C++, so some information\n@@ -786,10 +760,8 @@\n     </p>\n </div>\n <div class=\"section\">\n-<a name=\"sec-about\"></a>\n-<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n-<a name=\"sec-about\"></a>\n-<span class=\"label\">12.</span> <span class=\"title\">About...</span>\n+<a name=\"sec-about\"></a><div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-about\"></a><span class=\"label\">13.</span> <span class=\"title\">About...</span>\n </h2></div></div>\n <p>\n       Please send any experience, additions, corrections or questions to"}, {"sha": "f00d047989c6c6a203ac91c1add402a4d682cd5d", "filename": "libstdc++-v3/docs/html/17_intro/porting-howto.xml", "status": "added", "additions": 758, "deletions": 0, "changes": 758, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89cd2243635c023c56704c124e2eb0502c9d3333/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89cd2243635c023c56704c124e2eb0502c9d3333/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml?ref=89cd2243635c023c56704c124e2eb0502c9d3333", "patch": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+\n+<!DOCTYPE article PUBLIC \"-//OASIS//DTD DocBook XML V4.1//EN\"\n+                         \"dtd/docbook-4/docbookx.dtd\">\n+\n+<?xml-stylesheet type=\"text/xsl\" href=\"docbook-xslt/docbook/html/docbook.xsl\"?>\n+\n+<!--\n+  This is written using docbook 4.1 xml. HTML is generated using\n+  the xslt-stylesheets from http://www.nwalsh.com.\n+ \n+  xsltproc is an xslt-processor included in libxslt:\n+  (http://xmlsoft.org/XSLT/ or here:\n+  ftp://ftp.gnome.org/pub/GNOME/unstable/sources/libxslt/)\n+  (it requires libxml2: http://xmlsoft.org\n+\tor here: ftp://ftp.gnome.org/pub/GNOME/stable/sources/libxml/)\n+\n+  You can find the latest version of this document here:\n+  http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/porting-howto(.html|.xml)\n+-->\n+\t\n+<!-- TODO:\n+o remove //@label: use automatic numbering\n+o make this work: <link linkend=\"sec-gtkmm-hack\" endterm=\"sec-gtkmm-hack.title\"/>.\n+-->\n+\n+<article class = \"whitepaper\" id = \"libstdc++-porting-howto\" lang = \"en\">\n+  <articleinfo>\n+    <title>Libstdc++-porting-howto</title>\n+    <author>\n+      <firstname>Felix</firstname>\n+      <surname>Natter</surname>\n+    </author>\n+    <address>\n+      <email>fnatter@gmx.net</email>\n+    </address>\n+    <revhistory>\n+      <revision>\n+\t\t<revnumber>0.5</revnumber>\n+\t\t<date>Thu Jun  1 13:06:50 2000</date>\n+\t\t<authorinitials>fnatter</authorinitials>\n+\t\t<revremark>First docbook-version.</revremark>\n+      </revision>\n+      <revision>\n+\t\t<revnumber>0.8</revnumber>\n+\t\t<date>Sun Jul 30 20:28:40 2000</date>\n+\t\t<authorinitials>fnatter</authorinitials>\n+\t\t<revremark>First released version using docbook-xml\n+\t\t  + second upload to libstdc++-page.\n+\t\t</revremark>\n+      </revision>\n+      <revision>\n+\t\t<revnumber>0.9</revnumber>\n+\t\t<date>Wed Sep  6 02:59:32 2000</date>\n+\t\t<authorinitials>fnatter</authorinitials>\n+\t\t<revremark>5 new sections.</revremark>\n+      </revision>\n+      <revision>\n+\t\t<revnumber>0.9.1</revnumber>\n+\t\t<date>Sat Sep 23 14:20:15 2000</date>\n+\t\t<authorinitials>fnatter</authorinitials>\n+\t\t<revremark>added information about why file-descriptors are not in the\n+\t\t  standard</revremark>\n+      </revision>\n+      <revision>\n+\t\t<revnumber>0.9.2</revnumber>\n+\t\t<date>Tue Jun  5 20:07:49 2001</date>\n+\t\t<authorinitials>fnatter</authorinitials>\n+\t\t<revremark>\n+\t\t  a fix, added hint on increased portability of C-shadow-headers,\n+\t\t  added autoconf-test HAVE_CONTAINER_AT\n+\t\t</revremark>\n+      </revision>\n+      <revision>\n+\t\t<revnumber>0.9.3</revnumber>\n+\t\t<date>Fri Jun 29 16:15:56 2001</date>\n+\t\t<authorinitials>fnatter</authorinitials>\n+\t\t<revremark>\n+\t\t\tchanged signature of nonstandard filebuf-constructor and\n+\t\t  update the section on filebuf::attach to point to ../ext/howto.html,\n+\t\t  added link to ../21/strings/howto.html\n+\t\t  in sec-stringstream, changed &lt;link&gt;-tags to have content\n+\t\t\t(so that these links work),\n+\t\t  replace \"user-space\" by \"global namespace\"\n+\t\t\tadd note about gcc 3.0 and shadow-headers\t\t\t\n+\t\t\tadd section about ostream::form and istream::scan\n+\t\t\tsec-vector-at: remove hint to modify headers\n+\t\t\tfix spelling error in sec-stringstream\n+\t\t</revremark>\n+      </revision>\n+    </revhistory>\n+    <legalnotice><title>Legal Notice</title>\n+      <para>\n+\t\tThis document can be distributed under the FDL\n+\t\t(<ulink url = \"http://www.gnu.org\">www.gnu.org</ulink>)\n+      </para>\n+    </legalnotice>\n+    \n+    <pubdate>Tue Jun  5 20:07:49 2001</pubdate>\n+    <abstract>\n+      <para>\n+\tSome notes on porting applications from libstdc++-2.90 (or earlier\n+\tversions) to libstdc++-v3. Not speaking in terms of the GNU libstdc++\n+\timplementations, this means porting from earlier versions of the\n+\tC++-Standard to ISO 14882.\n+      </para>\n+    </abstract>\n+  </articleinfo>\n+\n+  <para>\n+    In the following, when I say portable, I will refer to \"portable among ISO\n+    14882-implementations\". On the other hand, if I say \"backportable\" or\n+    \"conservative\", I am talking about \"compiles with older\n+    libstdc++-implementations\".\n+  </para>\n+\n+  <section id=\"sec-nsstd\" label=\"1\"><title>Namespace std::</title>\n+    <para>\n+      The latest C++-standard (ISO-14882) requires that the standard\n+      C++-library is defined in namespace std::. Thus, in order to use\n+      classes from the standard C++-library, you can do one of three\n+      things:\n+      <itemizedlist>\n+\n+\t<listitem><para>wrap your code in <command>namespace std {\n+\t      ... }</command> =&gt; This is not an option because only symbols\n+\t    from the standard c++-library are defined in namespace std::.\n+\t  </para></listitem>\n+\n+\t<listitem><para>put a kind of\n+\t    <emphasis>using-declaration</emphasis> in your source (either\n+\t    <command>using namespace std;</command> or i.e. <command>using\n+\t      std::string;</command>) =&gt; works well for source-files, but\n+\t    cannot be used in header-files.\n+\t  </para></listitem>\n+\n+\t<listitem><para>use a <emphasis>fully qualified name</emphasis> for\n+\t    each libstdc++-symbol (i.e. <command>std::string</command>,\n+\t    <command>std::cout</command>) =&gt; can always be used\n+\t  </para></listitem>\n+      </itemizedlist>\n+    </para>\n+\n+    <para>\n+      Because there are many compilers which still use an implementation\n+      that does not have the standard C++-library in namespace\n+      <command>std::</command>, some care is required to support these as\n+      well.\n+    </para>\n+\n+    <para>\n+      Namespace back-portability-issues are generally not a problem with\n+      g++, because versions of g++ that do not have libstdc++ in\n+      <command>std::</command> use <command>-fno-honor-std</command>\n+      (ignore <command>std::</command>, <command>:: = std::</command>) by\n+      default. That is, the responsibility for enabling or disabling\n+      <command>std::</command> is on the user; the maintainer does not have\n+      to care about it. This probably applies to some other compilers as\n+      well.\n+    </para>\n+    <para>\n+      The following sections list some possible solutions to support compilers\n+      that cannot ignore std::.\n+    </para>\n+\n+    <section id = \"sec-gtkmm-hack\" label = \"1.1\">\n+      <title id=\"sec-gtkmm-hack.title\">Using <emphasis>namespace\n+\t  composition</emphasis> if the project uses a separate\n+\tnamespace</title>\n+      <para>\n+\t<ulink url = \"http://gtkmm.sourceforge.net\">Gtk--</ulink> defines\n+\tmost of its classes in namespace Gtk::. Thus, it was possible to\n+\tadapt Gtk-- to namespace std:: by using a C++-feature called\n+\t<emphasis>namespace composition</emphasis>. This is what happens if\n+\tyou put a <emphasis>using</emphasis>-declaration into a\n+\tnamespace-definition: the imported symbol(s) gets imported into the\n+\tcurrently active namespace(s). For example:\n+\t<programlisting>\n+\t  namespace Gtk {\n+\t  using std::string;\n+\t  class Window { ... }\n+\t  }\n+\t</programlisting>\n+\tIn this example, <command>std::string</command> gets imported into\n+\tnamespace Gtk::.  The result is that you don't have to use\n+\t<command>std::string</command> in this header, but still\n+\t<command>std::string</command> does not get imported into\n+\tthe global namespace (::) unless the user does\n+\t<command>using namespace Gtk;</command> (which is not recommended\n+\tpractice for Gtk--, so it is not a problem).  Additionally, the\n+\t<command>using</command>-declarations are wrapped in macros that\n+\tare set based on autoconf-tests to either \"\" or i.e. <command>using\n+\t  std::string;</command> (depending on whether the system has\n+\tlibstdc++ in <command>std::</command> or not).  (ideas from\n+\t<email>llewelly@dbritsch.dsl.xmission.com</email>, Karl Nelson\n+\t<email>kenelson@ece.ucdavis.edu</email>)\n+      </para>\n+    </section>\n+\n+    <section id = \"sec-emptyns\" label = \"1.2\">\n+      <title id=\"sec-emptyns.title\">Defining an empty namespace std</title>\n+      <para>\n+\tBy defining an (empty) namespace <command>std::</command> before\n+\tusing it, you avoid getting errors on systems where no part of the\n+\tlibrary is in namespace std:\n+\t<programlisting>\n+\t  namespace std { }\n+\t  using namespace std;\n+\t</programlisting>\n+      </para>\n+    </section>\n+\n+    <section id = \"sec-avoidfqn\" label = \"1.3\">\n+      <title id=\"sec-avoidfqn.title\">Avoid to use fully qualified names\n+\t(i.e. std::string)</title>\n+      <para>\n+\tIf some compilers complain about <command>using\n+\t  std::string;</command>, and if the \"hack\" for gtk-- mentioned above\n+\tdoes not work, then it might be a good idea to define a macro\n+\t<symbol>NS_STD</symbol>, which is defined to either \"\" or \"std\"\n+\tbased on an autoconf-test. Then you should be able to use\n+\t<command>NS_STD::string</command>, which will evaluate to\n+\t<command>::string</command> (\"string in the global namespace\") on\n+\tsystems that do not put string in std::.  (This is untested)\n+      </para>\n+    </section>\n+    \n+    <section id = \"sec-osprojects\" label = \"1.4\">\n+      <title id=\"sec-osprojects.title\">How some open-source-projects deal\n+\twith this</title>\n+      <para>\n+\tThis information was gathered around May 2000. It may not be correct\n+\tby the time you read this.\n+      </para>\n+      <table><title>Namespace std:: in Open-Source programs</title>\n+\t<tgroup cols = \"2\">\n+\t  <tbody>\n+\t    <row>\n+\t      <entry><ulink url = \"http://www.clanlib.org\">clanlib</ulink>\n+\t      </entry>\n+\t      <entry>usual</entry>\n+\t    </row>\n+\t    <row>\n+\t      <entry><ulink url = \"http://pingus.seul.org\">pingus</ulink>\n+\t      </entry>\n+\t      <entry>usual</entry>\n+\t    </row>\n+\t    <row>\n+\t      <entry><ulink url = \"http://www.mozilla.org\">mozilla</ulink>\n+\t      </entry>\n+\t      <entry>usual</entry>\n+\t    </row>\n+\t    <row>\n+\t      <entry><ulink url = \"http://www.mnemonic.org\">mnemonic</ulink>\n+\t      </entry> <entry>none</entry>\n+\t    </row>\n+\t    <row>\n+\t      <entry><ulink url = \"http://libsigc.sourceforge.net\">\n+\t\t  libsigc++</ulink></entry>\n+\t      <entry>conservative-impl</entry>\n+\t    </row>\n+\t  </tbody>\n+\t</tgroup>\n+      </table>\n+\n+      <table><title>Notations for categories</title>\n+\t<tgroup cols = \"2\">\n+\t  <tbody>\n+\t    <row>\n+\t      <entry>usual</entry>\n+\t      <entry>mostly fully qualified names and some\n+\t\tusing-declarations (but not in headers)</entry>\n+\t    </row>\n+\t    <row>\n+\t      <entry>none</entry> <entry>no namespace std at all</entry>\n+\t    </row>\n+\t    <row>\n+\t      <entry>conservative-impl</entry>\n+\t      <entry>wrap all\n+\t\tnamespace-handling in macros to support compilers without\n+\t\tnamespace-support (no libstdc++ used in headers)</entry>\n+\t    </row>\n+\t  </tbody>\n+\t</tgroup>\n+      </table>\n+\n+      <para>\n+\tAs you can see, this currently lacks an example of a project\n+\twhich uses libstdc++-symbols in headers in a back-portable way\n+\t(except for Gtk--: see the <link linkend=\"sec-gtkmm-hack\"\n+\tendterm=\"sec-gtkmm-hack.title\">section on the gtkmm-hack</link>).\n+      </para>\n+    </section>\t\t\n+  </section> <!-- end of namespace-section -->\n+\n+  <section id = \"sec-nocreate\" label = \"2\">\n+    <title id=\"sec-nocreate.title\">there is no ios::nocreate/ios::noreplace\n+      in ISO 14882</title>\n+    <para>\n+      I have seen <command>ios::nocreate</command> being used for\n+      input-streams, most probably because the author thought it would be\n+      more correct to specify nocreate \"explicitly\".  So you can simply\n+      leave it out for input-streams.\n+    </para>\n+    <para>\n+      For output streams, \"nocreate\" is probably the default, unless you\n+      specify <command>std::ios::trunc</command> ? To be safe, you can open\n+      the file for reading, check if it has been opened, and then decide\n+      whether you want to create/replace or not. To my knowledge, even\n+      older implementations support <command>app</command>,\n+      <command>ate</command> and <command>trunc</command> (except for\n+      <command>app</command> ?).\n+    </para>\n+  </section>\n+\n+  <section id = \"sec-stream::attach\" label = \"3\">\n+    <title id=\"sec-stream::attach.title\"><command>stream::attach(int\n+\tfd)</command> is not in the standard any more</title>\n+    <para>\n+      Phil Edwards <email>pedwards@disaster.jaj.com</email> writes:\n+      It was considered and rejected.  Not all environments use file\n+      descriptors.  Of those that do, not all of them use integers to represent\n+      them.\n+    </para>\n+    <para>\n+      When using libstdc++-v3, you can use\n+      <funcsynopsis>\n+\t<funcsynopsisinfo format=\"linespecific\">\n+\t  #include &lt;fstream&gt;\n+\t</funcsynopsisinfo>\n+\t<funcprototype>\n+\t  <funcdef>\n+\t\t  <function>basic_filebuf&lt;...&gt;::basic_filebuf&lt;...&gt;\n+\t\t\t</function>\n+\t\t</funcdef>\n+\t\t<paramdef>__c_file_type* <parameter>file</parameter></paramdef>\n+\t  <paramdef>ios_base::open_mode <parameter>mode</parameter></paramdef>\n+\t  <paramdef>int <parameter>size</parameter></paramdef>\n+\t</funcprototype>\n+      </funcsynopsis>\n+      but the the signature of this constructor has changed often, and\n+      it might change again. For the current state of this, check\n+\t  <ulink url=\"../ext/howto.html\">the howto for extensions</ulink>.\n+\t</para>\n+\t<para>\n+      For a portable solution (among systems which use\n+      filedescriptors), you need to implement a subclass of\n+      <command>std::streambuf</command> (or\n+      <command>std::basic_streambuf&lt;..&gt;</command>) which opens a file\n+      given a descriptor, and then pass an instance of this to the\n+      stream-constructor (from the Josuttis-book).\n+    </para>\n+  </section>\n+  \n+  <section id = \"sec-headers\" label = \"4\">\n+    <title id=\"sec-headers.title\">The new headers</title>\n+    <para>\n+      All new headers can be seen in this <ulink url=\"headers_cc.txt\">\n+\tsource-code</ulink>.\n+    </para>\n+    <para>\n+    The old C++-headers (iostream.h etc.) are available, but gcc generates\n+    a warning that you are using deprecated headers.\n+    </para>\n+\n+    <section id = \"sec-cheaders\" label = \"4.1\">\n+      <title id=\"sec-cheaders.title\">New headers replacing C-headers</title>\n+      <para>\n+\tYou should not use the C-headers (except for system-level\n+\theaders) from C++ programs. Instead, you should use a set of\n+\theaders that are named by prepending 'c' and, as usual,\n+\tomitting the extension (.h). For example, instead of using\n+\t<filename class=\"headerfile\">&lt;math.h&gt;</filename>, you\n+\tshould use <filename class =\n+\t\"headerfile\">&lt;cmath&gt;</filename>. In some cases this has\n+\tthe advantage that the C++-header is more standardized than\n+\tthe C-header (i.e. <filename\n+\tclass=\"headerfile\">&lt;ctime&gt;</filename> (almost)\n+\tcorresponds to either <filename class =\n+\t\"headerfile\">&lt;time.h&gt;</filename> or <filename class =\n+\t\"headerfile\">&lt;sys/time.h&gt;</filename>).\n+\n+\tThe standard specifies that if you include the C-style header\n+\t(<filename class = \"headerfile\">&lt;math.h&gt;</filename> in\n+\tthis case), the symbols will be available both in the global\n+\tnamespace and in namespace <command>std::</command> (but\n+\tlibstdc++ does not yet have fully compliant headers) On the\n+\tother hand, if you include only the new header (i.e. <filename\n+\tclass = \"headerfile\">&lt;cmath&gt;</filename>), the symbols\n+\twill only be defined in namespace <command>std::</command>\n+\t(and macros will be converted to inline-functions).\n+      </para>\n+      <para>\n+\tFor more information on this, and for information on how the\n+\tGNU C++ implementation might reuse (\"shadow\") the C\n+\tlibrary-functions, have a look at <ulink\n+\turl=\"http://www.cantrip.org/cheaders.html\">\n+\twww.cantrip.org</ulink>.\n+      </para>\n+    </section>\n+    \n+    <section id = \"sec-fstream-header\" label = \"4.2\">\n+      <title id=\"sec-fstream-header.title\">\n+\t<filename class=\"headerfile\">&lt;fstream&gt;</filename> does\n+\tnot define <command>std::cout</command>,\n+\t<command>std::cin</command> etc.</title>\n+      <para>\n+\tIn earlier versions of the standard,\n+\t<filename class=\"headerfile\">&lt;fstream.h&gt;</filename>,\n+\t<filename class=\"headerfile\">&lt;ostream.h&gt;</filename>\n+\t and <filename class=\"headerfile\">&lt;istream.h&gt;</filename>\n+\t  used to define\n+\t<command>cout</command>, <command>cin</command> and so on. Because\n+\tof the templatized iostreams in libstdc++-v3, you need to include\n+\t<filename class = \"headerfile\">&lt;iostream&gt;</filename>\n+\texplicitly to define these.\n+      </para>\n+    </section>\n+  </section>\n+\n+  <section id = \"sec-iterators\" label = \"5\">\n+    <title id=\"sec-iterators.title\">Iterators</title>\n+    <para>\n+      The following are not proper uses of iterators, but may be working\n+      fixes for existing uses of iterators.\n+      <itemizedlist>\n+\t<listitem><para>you cannot do\n+\t    <command>ostream::operator&lt;&lt;(iterator)</command> to\n+\t    print the address of the iterator =&gt; use\n+\t    <command>operator&lt;&lt; &amp;*iterator</command> instead ?\n+\t  </para>\n+\t</listitem>\n+\t<listitem><para>you cannot clear an iterator's reference\n+\t    (<command>iterator = 0</command>) =&gt; use\n+\t    <command>iterator = iterator_type();</command> ?\n+\t  </para>\n+\t</listitem>\n+\t<listitem><para><command>if (iterator)</command> won't work any\n+\t    more => use <command>if (iterator != iterator_type())</command>\n+\t    ?</para>\n+\t</listitem>\n+      </itemizedlist>\n+    </para>\n+  </section>\n+\n+  <section id = \"sec-macros\" label = \"6\">\n+    <title id=\"sec-macros.title\">\n+      Libc-macros (i.e. <command>isspace</command> from\n+      <filename class = \"headerfile\">&lt;cctype&gt;</filename>)</title>\n+    <para>\n+      Glibc 2.0.x and 2.1.x define the\n+      <filename class=\"headerfile\">&lt;ctype.h&gt;</filename>\n+      -functionality as macros (isspace, isalpha etc.). Libstdc++-v3\n+      \"shadows\" these macros as described in the <link\n+      linkend=\"sec-cheaders\" endterm=\"sec-cheaders.title\">section about\n+      c-headers</link>.\n+    </para>\n+    <para>\n+      Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n+      for gcc 2.95.x), however, keep these functions as macros, and so it\n+      is not back-portable to use fully qualified names. For example:\n+      <programlisting>\n+\t#include &lt;cctype&gt;\n+\tint main() { std::isspace('X'); }\n+      </programlisting>\n+      will result in something like this (unless using g++-v3):\n+      <programlisting>\n+\tstd:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int)\n+\t_ISspace )  ;\n+      </programlisting>\n+    </para>\n+    <para>\n+      One solution I can think of is to test for -v3 using\n+      autoconf-macros, and define macros for each of the C-functions\n+      (maybe that is possible with one \"wrapper\" macro as well ?).\n+    </para>\n+    <para>\n+      Another solution which would fix g++ is to tell the user to modify a\n+      header-file so that g++-2 (egcs 1.x) and g++-3 (gcc 2.95.x) define a\n+      macro which tells <filename\n+\t\t\t\t  class=\"headerfile\">&lt;ctype.h&gt;</filename> to define functions\n+      instead of macros:\n+      <programlisting>\n+\t// This keeps isalnum, et al from being propagated as macros.\n+\t#if __linux__\n+\t#define __NO_CTYPE 1\n+\t#endif\n+\n+\t[ now include &lt;ctype.h&gt; ]\n+      </programlisting>\n+    </para>\n+    <para>\n+      Another problem arises if you put a <command>using namespace\n+\tstd;</command> declaration at the top, and include <filename class\n+\t\t\t\t\t\t\t\t     = \"headerfile\">&lt;ctype.h&gt;</filename>. This will result in\n+      ambiguities between the definitions in the global namespace\n+      (<filename class = \"headerfile\">&lt;ctype.h&gt;</filename>) and the\n+      definitions in namespace <command>std::</command>\n+      (<command>&lt;cctype&gt;</command>).\n+    </para>\n+    <para>\n+      The solution to this problem was posted to the libstdc++-v3\n+      mailing-list:\n+      Benjamin Kosnik <email>bkoz@redhat.com</email> writes:\n+      <quote>\n+\t--enable-cshadow-headers is currently broken. As a result, shadow\n+\theaders are not being searched....\n+      </quote>\n+\t\t\tThis is now outdated, but gcc 3.0 still does not have fully\n+\t\t\tcompliant \"shadow headers\".\n+    </para>\n+  </section>\n+\n+  <section id=\"sec-stream-state\" label=\"7\">\n+    <title id=\"sec-stream-state.title\">State of streams</title>\n+    <para>\n+      At least some older implementations don't have\n+      <command>std::ios_base</command>, so you should use\n+      <command>std::ios::badbit</command>, <command>std::ios::failbit</command>\n+      and <command>std::ios::eofbit</command> and\n+      <command>std::ios::goodbit</command>.\n+    </para>\n+  </section>\n+\n+  <section id=\"sec-vector-at\" label=\"8\">\n+    <title>vector::at is missing (i.e. gcc 2.95.x)</title>\n+    <para>\n+      One solution is to add an autoconf-test for this:\n+      <programlisting>\n+\tAC_MSG_CHECKING(for container::at)\n+\tAC_TRY_COMPILE(\n+\t[\n+\t#include &lt;vector&gt;\n+\t#include &lt;deque&gt;\n+\t#include &lt;string&gt;\n+\t\n+\tusing namespace std;\n+\t],\n+\t[\n+\tdeque&lt;int&gt; test_deque(3);\n+\ttest_deque.at(2);\n+\tvector&lt;int&gt; test_vector(2);\n+\ttest_vector.at(1);\n+\tstring test_string(\"test_string\");\n+\ttest_string.at(3);\n+\t],\n+\t[AC_MSG_RESULT(yes)\n+\tAC_DEFINE(HAVE_CONTAINER_AT)],\n+\t[AC_MSG_RESULT(no)])\n+      </programlisting>\n+      If you are using other (non-GNU) compilers it might be a good idea\n+      to check for <command>string::at</command> separately.\n+    </para>\n+  </section>\n+\n+  <section id=\"sec-eof\" label=\"9\">\n+    <title>Using std::char_traits&lt;char&gt;::eof()</title>\n+    <para>\n+      <programlisting>\n+\t#ifdef HAVE_CHAR_TRAITS\n+\t#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n+\t#else\n+\t#define CPP_EOF EOF\n+\t#endif\n+      </programlisting>\n+    </para>\n+  </section>\n+\n+  <section id=\"sec-string-clear\" label=\"10\">\n+    <title>Using string::clear()/string::erase()</title>\n+    <para>\n+      There are two functions for deleting the contents of a string:\n+      <command>clear</command> and <command>erase</command> (the latter\n+      returns the string).\n+      <programlisting>\n+\tvoid \n+\tclear() { _M_mutate(0, this->size(), 0); }\n+      </programlisting>\n+      <programlisting>\n+\tbasic_string&amp; \n+\terase(size_type __pos = 0, size_type __n = npos)\n+\t{ \n+\treturn this->replace(_M_check(__pos), _M_fold(__pos, __n),\n+\t_M_data(), _M_data()); \n+\t}\n+      </programlisting>\n+      The implementation of <command>erase</command> seems to be more\n+      complicated (from libstdc++-v3), but <command>clear</command> is not\n+      implemented in gcc 2.95.x's libstdc++, so you should use\n+      <command>erase</command> (which is probably faster than\n+      <command>operator=(charT*)</command>).\n+    </para>\n+  </section>\n+\n+  <section id=\"sec-scan-form\" label=\"11\">\n+\t  <title>GNU Extensions ostream::form and istream::scan</title>\n+\t\t<para>\n+\t\tThese\tare not supported any more - use\n+\t\t<link\tlinkend=\"sec-stringstream\" endterm=\"sec-stringstream.title\">\n+\t\tstringstreams</link> instead.\t\n+\t\t</para>\n+  </section>\n+\n+  <section id=\"sec-stringstream\" label=\"12\">\n+    <title>Using stringstreams</title>\n+    <para>\n+      Libstdc++-v3 provides the new\n+      <command>i/ostringstream</command>-classes, (<filename\n+      class=\"headerfile\">&lt;sstream&gt;</filename>), but for compatibility\n+      with older implementations you still have to use\n+      <command>i/ostrstream</command> (<filename\n+      class=\"headerfile\">&lt;strstream&gt;</filename>):\n+      <programlisting>\n+\t#ifdef HAVE_SSTREAM\n+\t#include &lt;sstream&gt;\n+\t#else\n+\t#include &lt;strstream&gt;\n+\t#endif\n+      </programlisting>\n+      <itemizedlist>\n+\t<listitem><para> <command>strstream</command> is considered to be\n+\t    deprecated\n+\t  </para>\n+\t</listitem>\n+\t<listitem><para> <command>strstream</command> is limited to\n+\t    <command>char</command>\n+\t  </para>\n+\t</listitem>\n+\t<listitem><para> with <command>ostringstream</command> you don't\n+\t    have to take care of terminating the string or freeing its\n+\t    memory\n+\t  </para>\n+\t</listitem>\n+\t<listitem><para> <command>istringstream</command> can be re-filled\n+\t    (clear(); str(input);)\n+\t  </para>\n+\t</listitem>\n+      </itemizedlist>\n+    </para>\n+    <para>\n+      You can then use output-stringstreams like this:\n+      <programlisting>\n+\t#ifdef HAVE_SSTREAM\n+\tstd::ostringstream oss;\n+\t#else\n+\tstd::ostrstream oss;\n+\t#endif\n+\toss &lt;&lt; \"Name=\" &lt;&lt; m_name &lt;&lt; \", number=\" &lt;&lt; m_number &lt;&lt; std::endl;\n+\t...\n+\t#ifndef HAVE_SSTREAM\n+\toss &lt;&lt; std::ends; // terminate the char*-string\n+\t#endif\n+\t// str() returns char* for ostrstream and a string for ostringstream\n+\t// this also causes ostrstream to think that the buffer's memory\n+\t// is yours\n+\tm_label.set_text(oss.str());\n+\t#ifndef HAVE_SSTREAM\n+\t// let the ostrstream take care of freeing the memory\n+\toss.freeze(false);\n+\t#endif\n+      </programlisting>\n+    </para>\n+    <para>\n+      Input-stringstreams can be used similarly:\n+      <programlisting>\n+\tstd::string input;\n+\t...\n+\t#ifdef HAVE_SSTREAM\n+\tstd::istringstream iss(input);\n+\t#else\n+\tstd::istrstream iss(input.c_str());\n+\t#endif\n+\tint i;\n+\tiss >> i; \n+      </programlisting>\n+      One (the only?) restriction is that an istrstream cannot be re-filled:\n+      <programlisting>\n+\tstd::istringstream iss(numerator);\n+\tiss >> m_num;\n+\t// this is not possible with istrstream\n+\tiss.clear();\n+\tiss.str(denominator);\n+\tiss >> m_den;\n+      </programlisting>\n+      If you don't care about speed, you can put these conversions in\n+      a template-function:\n+      <programlisting>\n+\ttemplate &lt;class X&gt;\n+\tvoid fromString(const string&amp; input, X&amp; any)\n+\t{\n+\t#ifdef HAVE_SSTREAM\n+\t  std::istringstream iss(input);\n+\t#else\n+\t  std::istrstream iss(input.c_str());\n+\t#endif\n+\t  X temp;\n+\t  iss >> temp;\n+\t  if (iss.fail())\n+\t    throw runtime_error(..)\n+\t  any = temp;\n+\t}\n+      </programlisting>\n+\t  Another example of using stringstreams is in <ulink\n+\t  url=\"../21_strings/howto.html\">this howto</ulink>.\n+    </para>\n+    <para>\n+      I have read the Josuttis book on Standard C++, so some information\n+      comes from there. Additionally, there is information in\n+      \"info iostream\", which covers the old implementation that gcc 2.95.x\n+      uses.\n+    </para>\n+  </section>\n+\n+  <section id = \"sec-about\" label=\"13\">\n+    <title id=\"sec-about.title\">About...</title>\n+    <para>\n+      Please send any experience, additions, corrections or questions to\n+      <ulink url = \"mailto:fnatter@gmx.net\">fnatter@gmx.net</ulink> or for\n+      discussion to the libstdc++-v3-mailing-list.\n+    </para>\n+  </section>\n+\n+</article>\n+\n+  <!-- this is now obsolete, since the nwalsh-stylesheet generates an index\n+<para>\n+<itemizedlist>\n+<listitem><para>\n+<link linkend = \"sec-nsstd\" endterm = \"sec-nsstd.title\"/>\n+</para></listitem>\n+<listitem><para>\n+<link linkend = \"sec-nocreate\" endterm = \"sec-nocreate.title\"/>\n+</para></listitem>\n+<listitem><para>\n+<link linkend = \"sec-stream::attach\"\n+  endterm = \"sec-stream::attach.title\"/>\n+</para></listitem>\n+<listitem><para>\n+<link linkend = \"sec-headers\" endterm = \"sec-headers.title\"/>\n+</para></listitem>\n+<listitem><para>\n+<link linkend = \"sec-iterators\" endterm = \"sec-iterators.title\"/>\n+</para></listitem>\n+<listitem><para>\n+<link linkend = \"sec-macros\" endterm = \"sec-macros.title\"/>\n+</para></listitem>\n+<listitem><para>\n+<link linkend = \"sec-about\" endterm = \"sec-about.title\"/>\n+</para></listitem>\n+</itemizedlist>\n+</para>\n+  -->\n+\n+<!--\n+Local Variables:\n+compile-command: \"xsltproc -o porting-howto.html docbook-xslt/docbook/html/docbook.xsl porting-howto.xml\"\n+End:\n+-->"}]}