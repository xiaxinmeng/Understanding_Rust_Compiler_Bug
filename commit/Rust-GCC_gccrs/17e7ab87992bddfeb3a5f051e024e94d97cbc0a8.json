{"sha": "17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlN2FiODc5OTJiZGRmZWIzYTVmMDUxZTAyNGU5NGQ5N2NiYzBhOA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-04-17T05:21:50Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-04-17T05:21:50Z"}, "message": "Add pass parameter to TERMINATE_PASS_LIST\n\n2016-04-17  Tom de Vries  <tom@codesourcery.com>\n\n\tPR other/68875\n\t* pass_manager.h (TERMINATE_PASS_LIST): Add pass argument.\n\t* passes.c (pass_manager::pass_manager): Declare and init p_start in\n\tINSERT_PASSES_AFTER.  Add pass parameter to TERMINATE_PASS_LIST, and\n\tcheck if it's equal to p_start.\n\t* passes.def: Add arguments to TERMINATE_PASS_LISTs.\n\nFrom-SVN: r235071", "tree": {"sha": "feed22d61c5fac4a518aa2fd15530570673c839f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feed22d61c5fac4a518aa2fd15530570673c839f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/comments", "author": null, "committer": null, "parents": [{"sha": "767f8bb1b1a1cacaff3d0c9432101eb963643e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767f8bb1b1a1cacaff3d0c9432101eb963643e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767f8bb1b1a1cacaff3d0c9432101eb963643e57"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "91807e60b06cbcea6b2a4a6ad03d866e45bc0ba8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "patch": "@@ -1,3 +1,12 @@\n+2016-04-17  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR other/68875\n+\t* pass_manager.h (TERMINATE_PASS_LIST): Add pass argument.\n+\t* passes.c (pass_manager::pass_manager): Declare and init p_start in\n+\tINSERT_PASSES_AFTER.  Add pass parameter to TERMINATE_PASS_LIST, and\n+\tcheck if it's equal to p_start.\n+\t* passes.def: Add arguments to TERMINATE_PASS_LISTs.\n+\n 2016-04-15  Jan Hubicka  <jh@suse.cz>\n \n \tPR ipa/70018"}, {"sha": "4f89d316c80efab5dfe0369307670b26d00bfe95", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "patch": "@@ -121,7 +121,7 @@ class pass_manager\n #define POP_INSERT_PASSES()\n #define NEXT_PASS(PASS, NUM) opt_pass *PASS ## _ ## NUM\n #define NEXT_PASS_WITH_ARG(PASS, NUM, ARG) NEXT_PASS (PASS, NUM)\n-#define TERMINATE_PASS_LIST()\n+#define TERMINATE_PASS_LIST(PASS)\n \n #include \"pass-instances.def\"\n "}, {"sha": "7b6deee79c2896d45e89f80be4bf271ca04ef980", "filename": "gcc/passes.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "patch": "@@ -1555,8 +1555,15 @@ pass_manager::pass_manager (context *ctxt)\n \n   /* Build the tree of passes.  */\n \n-#define INSERT_PASSES_AFTER(PASS) \\\n-  p = &(PASS);\n+#define INSERT_PASSES_AFTER(PASS)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    opt_pass **p_start;\t\t\t\t\\\n+    p_start = p = &(PASS);\n+\n+#define TERMINATE_PASS_LIST(PASS)\t\t\\\n+    gcc_assert (p_start == &PASS);\t\t\\\n+    *p = NULL;\t\t\t\t\t\\\n+  }\n \n #define PUSH_INSERT_PASSES_WITHIN(PASS) \\\n   { \\\n@@ -1584,9 +1591,6 @@ pass_manager::pass_manager (context *ctxt)\n       PASS ## _ ## NUM->set_pass_param (0, ARG);\t\\\n     } while (0)\n \n-#define TERMINATE_PASS_LIST() \\\n-  *p = NULL;\n-\n #include \"pass-instances.def\"\n \n #undef INSERT_PASSES_AFTER"}, {"sha": "834fea28aa620ec538ef687a0822ab351c25e959", "filename": "gcc/passes.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e7ab87992bddfeb3a5f051e024e94d97cbc0a8/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=17e7ab87992bddfeb3a5f051e024e94d97cbc0a8", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n    PUSH_INSERT_PASSES_WITHIN (PASS)\n    POP_INSERT_PASSES ()\n    NEXT_PASS (PASS)\n-   TERMINATE_PASS_LIST ()\n+   TERMINATE_PASS_LIST (PASS)\n  */\n \n  /* All passes needed to lower the function into shape optimizers can\n@@ -43,7 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_warn_function_return);\n   NEXT_PASS (pass_expand_omp);\n   NEXT_PASS (pass_build_cgraph_edges);\n-  TERMINATE_PASS_LIST ()\n+  TERMINATE_PASS_LIST (all_lowering_passes)\n \n   /* Interprocedural optimization passes.  */\n   INSERT_PASSES_AFTER (all_small_ipa_passes)\n@@ -142,7 +142,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_ipa_increase_alignment);\n   NEXT_PASS (pass_ipa_tm);\n   NEXT_PASS (pass_ipa_lower_emutls);\n-  TERMINATE_PASS_LIST ()\n+  TERMINATE_PASS_LIST (all_small_ipa_passes)\n \n   INSERT_PASSES_AFTER (all_regular_ipa_passes)\n   NEXT_PASS (pass_ipa_whole_program_visibility);\n@@ -162,7 +162,7 @@ along with GCC; see the file COPYING3.  If not see\n      symbols are not allowed outside of the comdat group.  Privatizing early\n      would result in missed optimizations due to this restriction.  */\n   NEXT_PASS (pass_ipa_comdats);\n-  TERMINATE_PASS_LIST ()\n+  TERMINATE_PASS_LIST (all_regular_ipa_passes)\n \n   /* Simple IPA passes executed after the regular passes.  In WHOPR mode the\n      passes are executed after partitioning and thus see just parts of the\n@@ -171,7 +171,7 @@ along with GCC; see the file COPYING3.  If not see\n   NEXT_PASS (pass_ipa_pta);\n   NEXT_PASS (pass_dispatcher_calls);\n   NEXT_PASS (pass_omp_simd_clone);\n-  TERMINATE_PASS_LIST ()\n+  TERMINATE_PASS_LIST (all_late_ipa_passes)\n \n   /* These passes are run after IPA passes on every function that is being\n      output to the assembler file.  */\n@@ -487,4 +487,4 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_df_finish);\n   POP_INSERT_PASSES ()\n   NEXT_PASS (pass_clean_state);\n-  TERMINATE_PASS_LIST ()\n+  TERMINATE_PASS_LIST (all_passes)"}]}