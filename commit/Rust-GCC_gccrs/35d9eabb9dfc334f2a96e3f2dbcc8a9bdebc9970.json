{"sha": "35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkOWVhYmI5ZGZjMzM0ZjJhOTZlM2YyZGJjYzhhOWJkZWJjOTk3MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-03T16:13:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-03T16:13:19Z"}, "message": "(rtx_equal_for_thread_p): Return 0 for floating-point.\n\nFrom-SVN: r13361", "tree": {"sha": "c1ad3899cff25226a75fc071ecc32553ed293473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ad3899cff25226a75fc071ecc32553ed293473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970/comments", "author": null, "committer": null, "parents": [{"sha": "b685dbaebcd1ac317b3095f251d6a55ad055fd27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b685dbaebcd1ac317b3095f251d6a55ad055fd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b685dbaebcd1ac317b3095f251d6a55ad055fd27"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "1d2b3cb7f88039a30ac8883d2de20fa75208efc3", "filename": "gcc/jump.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=35d9eabb9dfc334f2a96e3f2dbcc8a9bdebc9970", "patch": "@@ -1,5 +1,5 @@\n /* Optimize jump instructions, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 91-95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 91-96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4506,6 +4506,13 @@ rtx_equal_for_thread_p (x, y, yinsn)\n   if (GET_MODE (x) != GET_MODE (y))\n     return 0;\n \n+  /* For floating-point, consider everything unequal.  This is a bit\n+     pessimistic, but this pass would only rarely do anything for FP\n+     anyway.  */\n+  if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT\n+      && FLOAT_MODE_P (GET_MODE (x)) && ! flag_fast_math)\n+    return 0;\n+\n   /* For commutative operations, the RTX match if the operand match in any\n      order.  Also handle the simple binary and unary cases without a loop.  */\n   if (code == EQ || code == NE || GET_RTX_CLASS (code) == 'c')"}]}