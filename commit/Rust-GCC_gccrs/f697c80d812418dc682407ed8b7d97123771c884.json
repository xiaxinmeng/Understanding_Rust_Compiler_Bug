{"sha": "f697c80d812418dc682407ed8b7d97123771c884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5N2M4MGQ4MTI0MThkYzY4MjQwN2VkOGI3ZDk3MTIzNzcxYzg4NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-24T14:49:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-24T14:49:45Z"}, "message": "c_locale.h (__convert_from_v): Only switch to the \"C\" locale if the current one isn't already \"C\" (for old glibcs).\n\n2007-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/gnu/c_locale.h (__convert_from_v): Only switch to the\n\t\"C\" locale if the current one isn't already \"C\" (for old glibcs).\n\t* config/os/gnu-linux/ctype_noninline.h (ctype<char>::classic_table,\n\tctype<char>::ctype(__c_locale, const mask*, bool, size_t),\n\tctype<char>::ctype(const mask*, bool, size_t)): Likewise, for generic\n\tlocale model.\n\t* config/locale/gnu/messages_members.h\n\t(messages<>::messages(__c_locale, const char*, size_t),\n\tmessages_byname<_CharT>::messages_byname(const char*, size_t)):\n\tOnly dynamically allocate memory if __s != \"C\".\n\t* config/locale/gnu/time_members.h\n\t(__timepunct<_CharT>::__timepunct(__c_locale, const char*, size_t)):\n\tLikewise.\n\t* config/locale/generic/time_members.h\n\t(__timepunct<_CharT>::__timepunct(__c_locale, const char*, size_t)):\n\tLikewise.\n\n\t* testsuite/util/testsuite_allocator.h: Revert last change.\n\nFrom-SVN: r125028", "tree": {"sha": "0c401c19e0b9e9e214b963754e8fc477f686f915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c401c19e0b9e9e214b963754e8fc477f686f915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f697c80d812418dc682407ed8b7d97123771c884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f697c80d812418dc682407ed8b7d97123771c884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f697c80d812418dc682407ed8b7d97123771c884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f697c80d812418dc682407ed8b7d97123771c884/comments", "author": null, "committer": null, "parents": [{"sha": "cb8b507b6593376bba81b344bc15d859f37c95ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8b507b6593376bba81b344bc15d859f37c95ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8b507b6593376bba81b344bc15d859f37c95ce"}], "stats": {"total": 173, "additions": 122, "deletions": 51}, "files": [{"sha": "02d6697c40afb8d75f3af914b8da45709e136bea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -1,3 +1,24 @@\n+2007-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/gnu/c_locale.h (__convert_from_v): Only switch to the\n+\t\"C\" locale if the current one isn't already \"C\" (for old glibcs).\n+\t* config/os/gnu-linux/ctype_noninline.h (ctype<char>::classic_table,\n+\tctype<char>::ctype(__c_locale, const mask*, bool, size_t),\n+\tctype<char>::ctype(const mask*, bool, size_t)): Likewise, for generic\n+\tlocale model.\n+\t* config/locale/gnu/messages_members.h\n+\t(messages<>::messages(__c_locale, const char*, size_t),\n+\tmessages_byname<_CharT>::messages_byname(const char*, size_t)):\n+\tOnly dynamically allocate memory if __s != \"C\".\n+\t* config/locale/gnu/time_members.h\n+\t(__timepunct<_CharT>::__timepunct(__c_locale, const char*, size_t)):\n+\tLikewise.\n+\t* config/locale/generic/time_members.h\n+\t(__timepunct<_CharT>::__timepunct(__c_locale, const char*, size_t)):\n+\tLikewise.\n+\n+\t* testsuite/util/testsuite_allocator.h: Revert last change.\n+\n 2007-05-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/util/testsuite_allocator.h (check_new): Assign false"}, {"sha": "20c2b54058d05e0bb25ef40d25d5b4a6e2c2ccbe", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -62,17 +62,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s, \n \t\t\t\t     size_t __refs) \n     : facet(__refs), _M_data(NULL)\n-    { \n-      const size_t __len = __builtin_strlen(__s) + 1;\n-      char* __tmp = new char[__len];\n-      __builtin_memcpy(__tmp, __s, __len);\n-      _M_name_timepunct = __tmp;\n+    {\n+      if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n+\t{\n+\t  const size_t __len = __builtin_strlen(__s) + 1;\n+\t  char* __tmp = new char[__len];\n+\t  __builtin_memcpy(__tmp, __s, __len);\n+\t  _M_name_timepunct = __tmp;\n+\t}\n+      else\n+\t_M_name_timepunct = _S_get_c_name();\n \n       try\n \t{ _M_initialize_timepunct(__cloc); }\n       catch(...)\n-\t{ \n-\t  delete [] _M_name_timepunct;\n+\t{\n+\t  if (_M_name_timepunct != _S_get_c_name())\n+\t    delete [] _M_name_timepunct;\n \t  __throw_exception_again;\n \t}\n     }"}, {"sha": "67ecb7d13c74d1181e3ba4ffb7fc0ac6492f3a57", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -76,11 +76,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __gnu_cxx::__uselocale(__cloc);\n #else\n-    char* __old = std::setlocale(LC_ALL, NULL);\n-    const size_t __len = __builtin_strlen(__old) + 1;\n-    char* __sav = new char[__len];\n-    __builtin_memcpy(__sav, __old, __len);\n-    std::setlocale(LC_ALL, \"C\");\n+    char* __old = std::setlocale(LC_NUMERIC, NULL);\n+    char* __sav = NULL;\n+    if (__builtin_strcmp(__old, \"C\"))\n+      {\n+\tconst size_t __len = __builtin_strlen(__old) + 1;\n+\tchar* __sav = new char[__len];\n+\t__builtin_memcpy(__sav, __old, __len);\n+\tstd::setlocale(LC_NUMERIC, \"C\");\n+      }\n #endif\n \n     __builtin_va_list __args;\n@@ -97,8 +101,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __gnu_cxx::__uselocale(__old);\n #else\n-    std::setlocale(LC_ALL, __sav);\n-    delete [] __sav;\n+    if (__sav)\n+      {\n+\tstd::setlocale(LC_NUMERIC, __sav);\n+\tdelete [] __sav;\n+      }\n #endif\n     return __ret;\n   }"}, {"sha": "28d783c136fdc0315b2af17330ba48c281885551", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -55,10 +55,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\tsize_t __refs) \n      : facet(__refs), _M_c_locale_messages(NULL), _M_name_messages(NULL)\n      {\n-       const size_t __len = __builtin_strlen(__s) + 1;\n-       char* __tmp = new char[__len];\n-       __builtin_memcpy(__tmp, __s, __len);\n-       _M_name_messages = __tmp;\n+       if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n+\t {\n+\t   const size_t __len = __builtin_strlen(__s) + 1;\n+\t   char* __tmp = new char[__len];\n+\t   __builtin_memcpy(__tmp, __s, __len);\n+\t   _M_name_messages = __tmp;\n+\t }\n+       else\n+\t _M_name_messages = _S_get_c_name();\n \n        // Last to avoid leaking memory if new throws.\n        _M_c_locale_messages = _S_clone_c_locale(__cloc);\n@@ -104,11 +109,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n      : messages<_CharT>(__refs) \n      { \n        if (this->_M_name_messages != locale::facet::_S_get_c_name())\n-\t delete [] this->_M_name_messages;\n-       const size_t __len = __builtin_strlen(__s) + 1;\n-       char* __tmp = new char[__len];\n-       __builtin_memcpy(__tmp, __s, __len);\n-       this->_M_name_messages = __tmp;\n+\t {\n+\t   delete [] this->_M_name_messages;\n+\t   if (__builtin_strcmp(__s, locale::facet::_S_get_c_name()) != 0)\n+\t     {\n+\t       const size_t __len = __builtin_strlen(__s) + 1;\n+\t       char* __tmp = new char[__len];\n+\t       __builtin_memcpy(__tmp, __s, __len);\n+\t       this->_M_name_messages = __tmp;\n+\t     }\n+\t   else\n+\t     this->_M_name_messages = locale::facet::_S_get_c_name();\n+\t }\n \n        if (__builtin_strcmp(__s, \"C\") != 0\n \t   && __builtin_strcmp(__s, \"POSIX\") != 0)"}, {"sha": "3e5e0c3ed2064610d81fe2fb04baa288b6bea052", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -59,17 +59,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t     size_t __refs) \n     : facet(__refs), _M_data(NULL), _M_c_locale_timepunct(NULL), \n       _M_name_timepunct(NULL)\n-    { \n-      const size_t __len = __builtin_strlen(__s) + 1;\n-      char* __tmp = new char[__len];\n-      __builtin_memcpy(__tmp, __s, __len);\n-      _M_name_timepunct = __tmp;\n+    {\n+      if (__builtin_strcmp(__s, _S_get_c_name()) != 0)\n+\t{\n+\t  const size_t __len = __builtin_strlen(__s) + 1;\n+\t  char* __tmp = new char[__len];\n+\t  __builtin_memcpy(__tmp, __s, __len);\n+\t  _M_name_timepunct = __tmp;\n+\t}\n+      else\n+\t_M_name_timepunct = _S_get_c_name();\n \n       try\n \t{ _M_initialize_timepunct(__cloc); }\n       catch(...)\n \t{\n-\t  delete [] _M_name_timepunct;\n+\t  if (_M_name_timepunct != _S_get_c_name())\n+\t    delete [] _M_name_timepunct;\n \t  __throw_exception_again;\n \t}\n     }"}, {"sha": "808b25c9328f1b22b6ea72d41dc9d80d4fe392c2", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_noninline.h", "status": "modified", "additions": 39, "deletions": 18, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_noninline.h?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -50,17 +50,24 @@\n   {\n     const ctype_base::mask* __ret;\n     char* __old = setlocale(LC_CTYPE, NULL);\n-    const size_t __len = __builtin_strlen(__old) + 1;\n-    char* __sav = new char[__len];\n-    __builtin_memcpy(__sav, __old, __len);\n-    setlocale(LC_CTYPE, \"C\");\n+    char* __sav = NULL;\n+    if (__builtin_strcmp(__old, \"C\"))\n+      {\n+\tconst size_t __len = __builtin_strlen(__old) + 1;\n+\t__sav = new char[__len];\n+\t__builtin_memcpy(__sav, __old, __len);\n+\tsetlocale(LC_CTYPE, \"C\");\n+      }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __ret = *__ctype_b_loc();\n #else\n     __ret = __ctype_b;\n #endif\n-    setlocale(LC_CTYPE, __sav);\n-    delete [] __sav;\n+    if (__sav)\n+      {\n+\tsetlocale(LC_CTYPE, __sav);\n+\tdelete [] __sav;\n+      }\n     return __ret;\n   }\n #endif\n@@ -85,10 +92,14 @@\n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     char* __old = setlocale(LC_CTYPE, NULL);\n-    const size_t __len = __builtin_strlen(__old) + 1;\n-    char* __sav = new char[__len];\n-    __builtin_memcpy(__sav, __old, __len);    \n-    setlocale(LC_CTYPE, \"C\");\n+    char* __sav = NULL;\n+    if (__builtin_strcmp(__old, \"C\"))\n+      {    \n+\tconst size_t __len = __builtin_strlen(__old) + 1;\n+\t__sav = new char[__len];\n+\t__builtin_memcpy(__sav, __old, __len);    \n+\tsetlocale(LC_CTYPE, \"C\");\n+      }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     _M_toupper = *__ctype_toupper_loc();\n     _M_tolower = *__ctype_tolower_loc();\n@@ -98,8 +109,11 @@\n     _M_tolower = __ctype_tolower;\n     _M_table = __table ? __table : __ctype_b;\n #endif\n-    setlocale(LC_CTYPE, __sav);\n-    delete [] __sav;\n+    if (__sav)\n+      {\n+\tsetlocale(LC_CTYPE, __sav);\n+\tdelete [] __sav;\n+      }\n     __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n     __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }\n@@ -123,10 +137,14 @@\n   _M_del(__table != 0 && __del), _M_widen_ok(0), _M_narrow_ok(0)\n   {\n     char* __old = setlocale(LC_CTYPE, NULL);\n-    const size_t __len = __builtin_strlen(__old) + 1;\n-    char* __sav = new char[__len];\n-    __builtin_memcpy(__sav, __old, __len);\n-    setlocale(LC_CTYPE, \"C\");\n+    char* __sav = NULL;\n+    if (__builtin_strcmp(__old, \"C\"))\n+      {\n+\tconst size_t __len = __builtin_strlen(__old) + 1;\n+\t__sav = new char[__len];\n+\t__builtin_memcpy(__sav, __old, __len);\n+\tsetlocale(LC_CTYPE, \"C\");\n+      }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     _M_toupper = *__ctype_toupper_loc();\n     _M_tolower = *__ctype_tolower_loc();\n@@ -136,8 +154,11 @@\n     _M_tolower = __ctype_tolower;\n     _M_table = __table ? __table : __ctype_b;\n #endif\n-    setlocale(LC_CTYPE, __sav);\n-    delete [] __sav;\n+    if (__sav)\n+      {\n+\tsetlocale(LC_CTYPE, __sav);\n+\tdelete [] __sav;\n+      }\n     __builtin_memset(_M_widen, 0, sizeof(_M_widen));\n     __builtin_memset(_M_narrow, 0, sizeof(_M_narrow));\n   }"}, {"sha": "d6108cc60648f3ba6e42bf31a30f1d8b91718147", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f697c80d812418dc682407ed8b7d97123771c884/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=f697c80d812418dc682407ed8b7d97123771c884", "patch": "@@ -42,8 +42,8 @@\n \n namespace \n {\n-  bool new_called;\n-  bool delete_called;\n+  bool new_called = false;\n+  bool delete_called = false;\n };\n \n namespace __gnu_test\n@@ -189,7 +189,6 @@ namespace __gnu_test\n     check_new(Alloc a = Alloc())\n     {\n       bool test __attribute__((unused)) = true;\n-      new_called = false;\n       a.allocate(10);\n       test &= ( new_called == uses_global_new );\n       return test;\n@@ -200,7 +199,6 @@ namespace __gnu_test\n     check_delete(Alloc a = Alloc())\n     {\n       bool test __attribute__((unused)) = true;\n-      delete_called = false;\n       typename Alloc::pointer p = a.allocate(10);\n       a.deallocate(p, 10);\n       test &= ( delete_called == uses_global_delete );"}]}