{"sha": "6058b874ef98af1104a5cb4618e1f3bfa7e3761c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1OGI4NzRlZjk4YWYxMTA0YTVjYjQ2MThlMWYzYmZhN2UzNzYxYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-09-21T12:33:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-11-02T21:38:34Z"}, "message": "x86: Also require MMX for __builtin_ia32_maskmovq\n\nMMX emulation with SEE is implemented at MMX intrinsic level, not at MMX\ninstruction level.  _mm_maskmove_si64 intrinsic for \"MASKMOVQ mm1, mm2\"\nis emulated with __builtin_ia32_maskmovdqu.  Since SSE \"MASKMOVQ mm1, mm2\"\nbuiltin function, __builtin_ia32_maskmovq, can't be emulated with XMM\nregisters, make __builtin_ia32_maskmovq also require MMX instead of SSE\nonly.\n\ngcc/\n\n\tPR target/97140\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Require MMX\n\tfor __builtin_ia32_maskmovq.\n\ngcc/testsuite/\n\n\tPR target/97140\n\t* gcc.target/i386/pr97140.c: New test.", "tree": {"sha": "1ad3bad4e081c4151b397d6cb43f17471ef5fbf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ad3bad4e081c4151b397d6cb43f17471ef5fbf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6058b874ef98af1104a5cb4618e1f3bfa7e3761c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6058b874ef98af1104a5cb4618e1f3bfa7e3761c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6058b874ef98af1104a5cb4618e1f3bfa7e3761c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6058b874ef98af1104a5cb4618e1f3bfa7e3761c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ce3d5fbb948cc600800b15f4ca774a0ce8e7a7"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "f479466e8f0ca30e4996c60c71da4d23f55eaa48", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6058b874ef98af1104a5cb4618e1f3bfa7e3761c/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6058b874ef98af1104a5cb4618e1f3bfa7e3761c/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=6058b874ef98af1104a5cb4618e1f3bfa7e3761c", "patch": "@@ -11074,11 +11074,17 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n        == (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4))\n       && (isa & (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4)) != 0)\n     isa |= (OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4);\n-  if ((bisa & OPTION_MASK_ISA_MMX) && !TARGET_MMX && TARGET_MMX_WITH_SSE)\n+\n+  if ((bisa & OPTION_MASK_ISA_MMX)\n+      && !TARGET_MMX\n+      && TARGET_MMX_WITH_SSE\n+      /* NB: __builtin_ia32_maskmovq also requires MMX.  */\n+      && fcode != IX86_BUILTIN_MASKMOVQ)\n     {\n       bisa &= ~OPTION_MASK_ISA_MMX;\n       bisa |= OPTION_MASK_ISA_SSE2;\n     }\n+\n   if ((bisa & isa) != bisa || (bisa2 & isa2) != bisa2)\n     {\n       bool add_abi_p = bisa & OPTION_MASK_ISA_64BIT;"}, {"sha": "edb39d916ea6372520f913f77cd5e4dde55ccdf1", "filename": "gcc/testsuite/gcc.target/i386/pr97140.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6058b874ef98af1104a5cb4618e1f3bfa7e3761c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6058b874ef98af1104a5cb4618e1f3bfa7e3761c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97140.c?ref=6058b874ef98af1104a5cb4618e1f3bfa7e3761c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx -Wno-psabi\" } */\n+\n+typedef int __m64 __attribute__ ((__vector_size__ (8), __may_alias__));\n+typedef char __v8qi __attribute__ ((__vector_size__ (8)));\n+void\n+_mm_maskmove_si64 (__m64 __A, __m64 __N, char *__P)\n+{\n+    __builtin_ia32_maskmovq ((__v8qi)__A, (__v8qi)__N, __P); /* { dg-error \"needs isa option -msse -m3dnowa -mmmx\" } */\n+}"}]}