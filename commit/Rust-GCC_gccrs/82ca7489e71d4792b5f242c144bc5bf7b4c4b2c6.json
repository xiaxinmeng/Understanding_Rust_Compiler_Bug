{"sha": "82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "node_id": "C_kwDOANBUbNoAKDgyY2E3NDg5ZTcxZDQ3OTJiNWYyNDJjMTQ0YmM1YmY3YjRjNGIyYzY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-03T14:57:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-16T08:42:02Z"}, "message": "[Ada] Fix spurious error on limited view with incomplete type\n\nThe problem is that Install_Limited_With_Clause does not fully implement\nAI05-0129, in the case where a regular with clause is processed before a\nlimited_with clause of the same package: the visible \"shadow\" entity is\nthat of the incomplete type, instead of that of the full type per the AI.\n\nThis requires adjusting Remove_Limited_With_Unit to match the change in\nInstall_Limited_With_Clause and also Build_Incomplete_Type_Declaration,\nwhich is responsible for synthesizing incomplete types out of full type\ndeclarations for self-referential types.\n\nA small tweak is also needed in Analyze_Subprogram_Body_Helper to align\nit with an equivalent processing for CW types in Find_Type_Name. And the\npatch also changes the Incomplete_View field in full type declarations\nto point to the entity of the view instead of its declaration.\n\ngcc/ada/\n\n\t* exp_ch3.adb (Build_Assignment): Adjust to the new definition of\n\tIncomplete_View field.\n\t* sem_ch10.ads (Decorate_Type): Declare.\n\t* sem_ch10.adb (Decorate_Type): Move to library level.\n\t(Install_Limited_With_Clause): In the already analyzed case, also\n\tdeal with incomplete type declarations present in the sources and\n\tsimplify the replacement code.\n\t(Build_Shadow_Entity): Deal with swapped views in package body.\n\t(Restore_Chain_For_Shadow): Deal with incomplete type declarations\n\tpresent in the sources.\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Adjust to the new\n\tdefinition of Incomplete_View field.\n\t(Build_Incomplete_Type_Declaration): Small consistency tweak.\n\tSet the incomplete type as the Incomplete_View of the full type.\n\tIf the scope is a package with a limited view, build a shadow\n\tentity for the incomplete type.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): When replacing\n\tthe limited view of a CW type as designated type of an anonymous\n\taccess return type, get to the CW type of the incomplete view of\n\tthe tagged type, if any.\n\t(Collect_Primitive_Operations): Adjust to the new definition of\n\tIncomplete_View field.\n\t* sinfo.ads (Incomplete_View): Denote the entity itself instead\n\tof its declaration.\n\t* sem_util.adb: Remove call to Defining_Entity.", "tree": {"sha": "b7a80fd7c422df5635623b84f3c04289a87d84cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7a80fd7c422df5635623b84f3c04289a87d84cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8b88f36ce705d20dddc86f999539cc854ef401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8b88f36ce705d20dddc86f999539cc854ef401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8b88f36ce705d20dddc86f999539cc854ef401"}], "stats": {"total": 391, "additions": 243, "deletions": 148}, "files": [{"sha": "018f88b175243e757d30e52afa710678413c0e05", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -2100,8 +2100,7 @@ package body Exp_Ch3 is\n                  and then Present (Incomplete_View (Parent (Rec_Type)))\n                then\n                   Append_Elmt (\n-                    N  => Defining_Identifier\n-                            (Incomplete_View (Parent (Rec_Type))),\n+                    N  => Incomplete_View (Parent (Rec_Type)),\n                     To => Map);\n                   Append_Elmt (\n                     N  => Defining_Identifier"}, {"sha": "80a729fec0cb0f35c427bb8466c4592399151a8c", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 167, "deletions": 124, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -3107,6 +3107,72 @@ package body Sem_Ch10 is\n       end if;\n    end Check_Stub_Level;\n \n+   -------------------\n+   -- Decorate_Type --\n+   -------------------\n+\n+   procedure Decorate_Type\n+     (Ent         : Entity_Id;\n+      Scop        : Entity_Id;\n+      Is_Tagged   : Boolean := False;\n+      Materialize : Boolean := False)\n+   is\n+      CW_Typ : Entity_Id;\n+\n+   begin\n+      --  An unanalyzed type or a shadow entity of a type is treated as an\n+      --  incomplete type, and carries the corresponding attributes.\n+\n+      Mutate_Ekind           (Ent, E_Incomplete_Type);\n+      Set_Etype              (Ent, Ent);\n+      Set_Full_View          (Ent, Empty);\n+      Set_Is_First_Subtype   (Ent);\n+      Set_Scope              (Ent, Scop);\n+      Set_Stored_Constraint  (Ent, No_Elist);\n+      Reinit_Size_Align      (Ent);\n+\n+      if From_Limited_With (Ent) then\n+         Set_Private_Dependents (Ent, New_Elmt_List);\n+      end if;\n+\n+      --  A tagged type and its corresponding shadow entity share one common\n+      --  class-wide type. The list of primitive operations for the shadow\n+      --  entity is empty.\n+\n+      if Is_Tagged then\n+         Set_Is_Tagged_Type (Ent);\n+         Set_Direct_Primitive_Operations (Ent, New_Elmt_List);\n+\n+         CW_Typ :=\n+           New_External_Entity\n+             (E_Void, Scope (Ent), Sloc (Ent), Ent, 'C', 0, 'T');\n+\n+         Set_Class_Wide_Type (Ent, CW_Typ);\n+\n+         --  Set parent to be the same as the parent of the tagged type.\n+         --  We need a parent field set, and it is supposed to point to\n+         --  the declaration of the type. The tagged type declaration\n+         --  essentially declares two separate types, the tagged type\n+         --  itself and the corresponding class-wide type, so it is\n+         --  reasonable for the parent fields to point to the declaration\n+         --  in both cases.\n+\n+         Set_Parent (CW_Typ, Parent (Ent));\n+\n+         Mutate_Ekind                  (CW_Typ, E_Class_Wide_Type);\n+         Set_Class_Wide_Type           (CW_Typ, CW_Typ);\n+         Set_Etype                     (CW_Typ, Ent);\n+         Set_Equivalent_Type           (CW_Typ, Empty);\n+         Set_From_Limited_With         (CW_Typ, From_Limited_With (Ent));\n+         Set_Has_Unknown_Discriminants (CW_Typ);\n+         Set_Is_First_Subtype          (CW_Typ);\n+         Set_Is_Tagged_Type            (CW_Typ);\n+         Set_Materialize_Entity        (CW_Typ, Materialize);\n+         Set_Scope                     (CW_Typ, Scop);\n+         Reinit_Size_Align             (CW_Typ);\n+      end if;\n+   end Decorate_Type;\n+\n    ------------------------\n    -- Expand_With_Clause --\n    ------------------------\n@@ -5021,9 +5087,8 @@ package body Sem_Ch10 is\n       --  by the shadow ones.\n \n       --  This code must be kept synchronized with the code that replaces the\n-      --  shadow entities by the real entities (see body of Remove_Limited\n-      --  With_Clause); otherwise the contents of the homonym chains are not\n-      --  consistent.\n+      --  shadow entities by the real entities in Remove_Limited_With_Unit,\n+      --  otherwise the contents of the homonym chains are not consistent.\n \n       else\n          --  Hide all the type entities of the public part of the package to\n@@ -5060,14 +5125,16 @@ package body Sem_Ch10 is\n               and then not Is_Child_Unit (Lim_Typ)\n             then\n                declare\n+                  Non_Lim_View : constant Entity_Id :=\n+                                   Non_Limited_View (Lim_Typ);\n+\n                   Prev : Entity_Id;\n \n                begin\n                   Prev := Current_Entity (Lim_Typ);\n-                  E := Prev;\n \n-                  --  Replace E in the homonyms list, so that the limited view\n-                  --  becomes available.\n+                  --  Replace Non_Lim_View in the homonyms list, so that the\n+                  --  limited view becomes available.\n \n                   --  If the nonlimited view is a record with an anonymous\n                   --  self-referential component, the analysis of the record\n@@ -5076,31 +5143,53 @@ package body Sem_Ch10 is\n                   --  entity is now the incomplete type, and that is the one to\n                   --  replace in the visibility structure.\n \n-                  if E = Non_Limited_View (Lim_Typ)\n+                  --  Similarly, if the source already contains the incomplete\n+                  --  type declaration, the limited view of the incomplete type\n+                  --  is in fact never visible (AI05-129) but we have created a\n+                  --  shadow entity E1 for it that points to E2, the incomplete\n+                  --  type at stake. This in turn has full view E3 that is the\n+                  --  full declaration, with a corresponding shadow entity E4.\n+                  --  When reinstalling the limited view, the visible entity E2\n+                  --  is first replaced with E1, but E4 must eventually become\n+                  --  the visible entity as per the AI and thus displace E1, as\n+                  --  it is replacing E3 in the homonyms list.\n+                  --\n+                  --           regular views          limited views\n+                  --\n+                  --        * E2 (incomplete)   <--    E1 (shadow)\n+                  --\n+                  --                |\n+                  --                V\n+                  --\n+                  --           E3 (full)        <--    E4 (shadow) *\n+                  --\n+                  --  [*] denotes the visible entity (Current_Entity)\n+\n+                  if Prev = Non_Lim_View\n                     or else\n-                      (Ekind (E) = E_Incomplete_Type\n-                        and then Full_View (E) = Non_Limited_View (Lim_Typ))\n+                      (Ekind (Prev) = E_Incomplete_Type\n+                        and then Full_View (Prev) = Non_Lim_View)\n+                    or else\n+                      (Ekind (Prev) = E_Incomplete_Type\n+                        and then From_Limited_With (Prev)\n+                        and then\n+                          Ekind (Non_Limited_View (Prev)) = E_Incomplete_Type\n+                        and then\n+                          Full_View (Non_Limited_View (Prev)) = Non_Lim_View)\n                   then\n-                     Set_Homonym (Lim_Typ, Homonym (Prev));\n                      Set_Current_Entity (Lim_Typ);\n \n                   else\n+                     while Present (Homonym (Prev))\n+                       and then Homonym (Prev) /= Non_Lim_View\n                      loop\n-                        E := Homonym (Prev);\n-\n-                        --  E may have been removed when installing a previous\n-                        --  limited_with_clause.\n-\n-                        exit when No (E);\n-                        exit when E = Non_Limited_View (Lim_Typ);\n                         Prev := Homonym (Prev);\n                      end loop;\n \n-                     if Present (E) then\n-                        Set_Homonym (Lim_Typ, Homonym (Homonym (Prev)));\n-                        Set_Homonym (Prev, Lim_Typ);\n-                     end if;\n+                     Set_Homonym (Prev, Lim_Typ);\n                   end if;\n+\n+                  Set_Homonym (Lim_Typ, Homonym (Non_Lim_View));\n                end;\n \n                if Debug_Flag_I then\n@@ -5665,7 +5754,7 @@ package body Sem_Ch10 is\n       --  Create a shadow entity that hides Ent and offers an abstract or\n       --  incomplete view of Ent. Scop is the proper scope. Flag Is_Tagged\n       --  should be set when Ent is a tagged type. The generated entity is\n-      --  added to Lim_Header. This routine updates the value of Last_Shadow.\n+      --  added to Shadow_Pack. The routine updates the value of Last_Shadow.\n \n       procedure Decorate_Package (Ent : Entity_Id; Scop : Entity_Id);\n       --  Perform minimal decoration of a package or its corresponding shadow\n@@ -5675,17 +5764,6 @@ package body Sem_Ch10 is\n       --  Perform full decoration of an abstract state or its corresponding\n       --  shadow entity denoted by Ent. Scop is the proper scope.\n \n-      procedure Decorate_Type\n-        (Ent         : Entity_Id;\n-         Scop        : Entity_Id;\n-         Is_Tagged   : Boolean := False;\n-         Materialize : Boolean := False);\n-      --  Perform minimal decoration of a type or its corresponding shadow\n-      --  entity denoted by Ent. Scop is the proper scope. Flag Is_Tagged\n-      --  should be set when Ent is a tagged type. Flag Materialize should be\n-      --  set when Ent is a tagged type and its class-wide type needs to appear\n-      --  in the tree.\n-\n       procedure Decorate_Variable (Ent : Entity_Id; Scop : Entity_Id);\n       --  Perform minimal decoration of a variable denoted by Ent. Scop is the\n       --  proper scope.\n@@ -5745,8 +5823,21 @@ package body Sem_Ch10 is\n             Decorate_Package (Shadow, Scop);\n \n          elsif Is_Type (Ent) then\n-            Decorate_Type        (Shadow, Scop, Is_Tagged);\n-            Set_Non_Limited_View (Shadow, Ent);\n+            Decorate_Type (Shadow, Scop, Is_Tagged);\n+\n+            --  If Ent is a private type and we are analyzing the body of its\n+            --  scope, its private and full views are swapped and, therefore,\n+            --  we need to undo this swapping in order to build the same shadow\n+            --  entity as we would have in other contexts.\n+\n+            if Is_Private_Type (Ent)\n+              and then Present (Full_View (Ent))\n+              and then In_Package_Body (Scop)\n+            then\n+               Set_Non_Limited_View (Shadow, Full_View (Ent));\n+            else\n+               Set_Non_Limited_View (Shadow, Ent);\n+            end if;\n \n             if Is_Tagged then\n                Set_Non_Limited_View\n@@ -5786,72 +5877,6 @@ package body Sem_Ch10 is\n          Set_Encapsulating_State (Ent, Empty);\n       end Decorate_State;\n \n-      -------------------\n-      -- Decorate_Type --\n-      -------------------\n-\n-      procedure Decorate_Type\n-        (Ent         : Entity_Id;\n-         Scop        : Entity_Id;\n-         Is_Tagged   : Boolean := False;\n-         Materialize : Boolean := False)\n-      is\n-         CW_Typ : Entity_Id;\n-\n-      begin\n-         --  An unanalyzed type or a shadow entity of a type is treated as an\n-         --  incomplete type, and carries the corresponding attributes.\n-\n-         Mutate_Ekind           (Ent, E_Incomplete_Type);\n-         Set_Etype              (Ent, Ent);\n-         Set_Full_View          (Ent, Empty);\n-         Set_Is_First_Subtype   (Ent);\n-         Set_Scope              (Ent, Scop);\n-         Set_Stored_Constraint  (Ent, No_Elist);\n-         Reinit_Size_Align      (Ent);\n-\n-         if From_Limited_With (Ent) then\n-            Set_Private_Dependents (Ent, New_Elmt_List);\n-         end if;\n-\n-         --  A tagged type and its corresponding shadow entity share one common\n-         --  class-wide type. The list of primitive operations for the shadow\n-         --  entity is empty.\n-\n-         if Is_Tagged then\n-            Set_Is_Tagged_Type (Ent);\n-            Set_Direct_Primitive_Operations (Ent, New_Elmt_List);\n-\n-            CW_Typ :=\n-              New_External_Entity\n-                (E_Void, Scope (Ent), Sloc (Ent), Ent, 'C', 0, 'T');\n-\n-            Set_Class_Wide_Type (Ent, CW_Typ);\n-\n-            --  Set parent to be the same as the parent of the tagged type.\n-            --  We need a parent field set, and it is supposed to point to\n-            --  the declaration of the type. The tagged type declaration\n-            --  essentially declares two separate types, the tagged type\n-            --  itself and the corresponding class-wide type, so it is\n-            --  reasonable for the parent fields to point to the declaration\n-            --  in both cases.\n-\n-            Set_Parent (CW_Typ, Parent (Ent));\n-\n-            Mutate_Ekind                  (CW_Typ, E_Class_Wide_Type);\n-            Set_Class_Wide_Type           (CW_Typ, CW_Typ);\n-            Set_Etype                     (CW_Typ, Ent);\n-            Set_Equivalent_Type           (CW_Typ, Empty);\n-            Set_From_Limited_With         (CW_Typ, From_Limited_With (Ent));\n-            Set_Has_Unknown_Discriminants (CW_Typ);\n-            Set_Is_First_Subtype          (CW_Typ);\n-            Set_Is_Tagged_Type            (CW_Typ);\n-            Set_Materialize_Entity        (CW_Typ, Materialize);\n-            Set_Scope                     (CW_Typ, Scop);\n-            Reinit_Size_Align             (CW_Typ);\n-         end if;\n-      end Decorate_Type;\n-\n       -----------------------\n       -- Decorate_Variable --\n       -----------------------\n@@ -6577,6 +6602,10 @@ package body Sem_Ch10 is\n       -- Remove_Shadow_Entities_With_Restore --\n       -----------------------------------------\n \n+      --  This code must be kept synchronized with the code that replaces the\n+      --  real entities by the shadow entities in Install_Limited_With_Clause,\n+      --  otherwise the contents of the homonym chains are not consistent.\n+\n       procedure Remove_Shadow_Entities_With_Restore (Pack_Id : Entity_Id) is\n          procedure Restore_Chain_For_Shadow (Shadow : Entity_Id);\n          --  Remove shadow entity Shadow by updating the entity and homonym\n@@ -6599,44 +6628,61 @@ package body Sem_Ch10 is\n          ------------------------------\n \n          procedure Restore_Chain_For_Shadow (Shadow : Entity_Id) is\n-            Prev : Entity_Id;\n-            Typ  : Entity_Id;\n+            Is_E3 : Boolean;\n+            Prev  : Entity_Id;\n+            Typ   : Entity_Id;\n \n          begin\n             --  If the package has incomplete types, the limited view of the\n             --  incomplete type is in fact never visible (AI05-129) but we\n             --  have created a shadow entity E1 for it, that points to E2,\n-            --  a nonlimited incomplete type. This in turn has a full view\n-            --  E3 that is the full declaration. There is a corresponding\n+            --  the incomplete type at stake. This in turn has a full view\n+            --  E3 that is the full declaration, with a corresponding\n             --  shadow entity E4. When reinstalling the nonlimited view,\n-            --  E2 must become the current entity and E3 must be ignored.\n+            --  the nonvisible entity E1 is first replaced with E2, but then\n+            --  E3 must *not* become the visible entity as it is replacing E4\n+            --  in the homonyms list and simply be ignored.\n+            --\n+            --           regular views          limited views\n+            --\n+            --        * E2 (incomplete)   <--    E1 (shadow)\n+            --\n+            --                |\n+            --                V\n+            --\n+            --           E3 (full)        <--    E4 (shadow) *\n+            --\n+            --  [*] denotes the visible entity (Current_Entity)\n \n             Typ := Non_Limited_View (Shadow);\n-\n-            --  Shadow is the limited view of a full type declaration that has\n-            --  a previous incomplete declaration, i.e. E3 from the previous\n-            --  description. Nothing to insert.\n-\n-            if Present (Current_Entity (Typ))\n-              and then Ekind (Current_Entity (Typ)) = E_Incomplete_Type\n-              and then Full_View (Current_Entity (Typ)) = Typ\n-            then\n-               return;\n-            end if;\n-\n             pragma Assert (not In_Chain (Typ));\n \n+            Is_E3 := Nkind (Parent (Typ)) = N_Full_Type_Declaration\n+              and then Present (Incomplete_View (Parent (Typ)));\n+\n             Prev := Current_Entity (Shadow);\n \n             if Prev = Shadow then\n-               Set_Current_Entity (Typ);\n+               if Is_E3 then\n+                  Set_Name_Entity_Id (Chars (Prev), Homonym (Prev));\n+                  return;\n+\n+               else\n+                  Set_Current_Entity (Typ);\n+               end if;\n \n             else\n-               while Present (Prev) and then Homonym (Prev) /= Shadow loop\n+               while Present (Homonym (Prev))\n+                 and then Homonym (Prev) /= Shadow\n+               loop\n                   Prev := Homonym (Prev);\n                end loop;\n \n-               if Present (Prev) then\n+               if Is_E3 then\n+                  Set_Homonym (Prev, Homonym (Shadow));\n+                  return;\n+\n+               else\n                   Set_Homonym (Prev, Typ);\n                end if;\n             end if;\n@@ -6760,9 +6806,6 @@ package body Sem_Ch10 is\n       --  and the previously hidden entities must be entered back into direct\n       --  visibility.\n \n-      --  WARNING: This code must be kept synchronized with that of routine\n-      --  Install_Limited_Withed_Clause.\n-\n       if Analyzed (Pack_Decl) then\n          Remove_Shadow_Entities_With_Restore (Pack_Id);\n "}, {"sha": "3dfae84fc0a85263ace5c42b39d3466efeccf5c5", "filename": "gcc/ada/sem_ch10.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch10.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch10.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.ads?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -34,6 +34,17 @@ package Sem_Ch10 is\n    procedure Analyze_Protected_Body_Stub                (N : Node_Id);\n    procedure Analyze_Subunit                            (N : Node_Id);\n \n+   procedure Decorate_Type\n+     (Ent         : Entity_Id;\n+      Scop        : Entity_Id;\n+      Is_Tagged   : Boolean := False;\n+      Materialize : Boolean := False);\n+   --  Perform minimal decoration of a type or its corresponding shadow\n+   --  entity denoted by Ent. Scop is the proper scope. Flag Is_Tagged\n+   --  should be set when Ent is a tagged type. Flag Materialize should be\n+   --  set when Ent is a tagged type and its class-wide type needs to appear\n+   --  in the tree.\n+\n    procedure Install_Context (N : Node_Id; Chain : Boolean := True);\n    --  Installs the entities from the context clause of the given compilation\n    --  unit into the visibility chains. This is done before analyzing a unit."}, {"sha": "d2605f5a30802a9dd0e4fd7b4e39fc99d3f71d1c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -61,6 +61,7 @@ with Sem_Cat;        use Sem_Cat;\n with Sem_Ch6;        use Sem_Ch6;\n with Sem_Ch7;        use Sem_Ch7;\n with Sem_Ch8;        use Sem_Ch8;\n+with Sem_Ch10;       use Sem_Ch10;\n with Sem_Ch13;       use Sem_Ch13;\n with Sem_Dim;        use Sem_Dim;\n with Sem_Disp;       use Sem_Disp;\n@@ -3158,7 +3159,7 @@ package body Sem_Ch3 is\n         and then Present (Full_View (Prev))\n       then\n          T := Full_View (Prev);\n-         Set_Incomplete_View (N, Parent (Prev));\n+         Set_Incomplete_View (N, Prev);\n       else\n          T := Prev;\n       end if;\n@@ -11600,10 +11601,9 @@ package body Sem_Ch3 is\n \n             if H = Typ then\n                Set_Name_Entity_Id (Chars (Typ), Homonym (Typ));\n+\n             else\n-               while Present (H)\n-                 and then Homonym (H) /= Typ\n-               loop\n+               while Present (Homonym (H)) and then Homonym (H) /= Typ loop\n                   H := Homonym (Typ);\n                end loop;\n \n@@ -11613,16 +11613,48 @@ package body Sem_Ch3 is\n             Insert_Before (Typ_Decl, Decl);\n             Analyze (Decl);\n             Set_Full_View (Inc_T, Typ);\n+            Set_Incomplete_View (Typ_Decl, Inc_T);\n \n-            if Is_Tagged then\n-\n-               --  Create a common class-wide type for both views, and set the\n-               --  Etype of the class-wide type to the full view.\n+            --  If the type is tagged, create a common class-wide type for\n+            --  both views, and set the Etype of the class-wide type to the\n+            --  full view.\n \n+            if Is_Tagged then\n                Make_Class_Wide_Type (Inc_T);\n                Set_Class_Wide_Type (Typ, Class_Wide_Type (Inc_T));\n                Set_Etype (Class_Wide_Type (Typ), Typ);\n             end if;\n+\n+            --  If the scope is a package with a limited view, create a shadow\n+            --  entity for the incomplete type like Build_Limited_Views, so as\n+            --  to make it possible for Remove_Limited_With_Unit to reinstall\n+            --  this incomplete type as the visible entity.\n+\n+            if Ekind (Scope (Inc_T)) = E_Package\n+              and then Present (Limited_View (Scope (Inc_T)))\n+            then\n+               declare\n+                  Shadow : constant Entity_Id := Make_Temporary (Loc, 'Z');\n+\n+               begin\n+                  --  This is modeled on Build_Shadow_Entity\n+\n+                  Set_Chars              (Shadow, Chars (Inc_T));\n+                  Set_Parent             (Shadow, Decl);\n+                  Decorate_Type          (Shadow, Scope (Inc_T), Is_Tagged);\n+                  Set_Is_Internal        (Shadow);\n+                  Set_From_Limited_With  (Shadow);\n+                  Set_Non_Limited_View   (Shadow, Inc_T);\n+                  Set_Private_Dependents (Shadow, New_Elmt_List);\n+\n+                  if Is_Tagged then\n+                     Set_Non_Limited_View\n+                       (Class_Wide_Type (Shadow), Class_Wide_Type (Inc_T));\n+                  end if;\n+\n+                  Append_Entity (Shadow, Limited_View (Scope (Inc_T)));\n+               end;\n+            end if;\n          end if;\n       end Build_Incomplete_Type_Declaration;\n "}, {"sha": "be093d6863fa9ce9a8d5d993fe4b502703d3fccf", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -3733,6 +3733,7 @@ package body Sem_Ch6 is\n \n          procedure Detect_And_Exchange (Id : Entity_Id) is\n             Typ : constant Entity_Id := Etype (Id);\n+\n          begin\n             if From_Limited_With (Typ)\n               and then Has_Non_Limited_View (Typ)\n@@ -5189,23 +5190,34 @@ package body Sem_Ch6 is\n       --  is the limited view of a class-wide type and the non-limited view is\n       --  available, update the return type accordingly.\n \n-      if Ada_Version >= Ada_2005 and then Present (Spec_Id) then\n+      if Ada_Version >= Ada_2005\n+        and then Present (Spec_Id)\n+        and then Ekind (Etype (Spec_Id)) = E_Anonymous_Access_Type\n+      then\n          declare\n             Etyp : Entity_Id;\n-            Rtyp : Entity_Id;\n \n          begin\n-            Rtyp := Etype (Spec_Id);\n+            Etyp := Directly_Designated_Type (Etype (Spec_Id));\n \n-            if Ekind (Rtyp) = E_Anonymous_Access_Type then\n-               Etyp := Directly_Designated_Type (Rtyp);\n+            if Is_Class_Wide_Type (Etyp)\n+              and then From_Limited_With (Etyp)\n+              and then Has_Non_Limited_View (Etyp)\n+            then\n+               Desig_View := Etyp;\n+               Etyp := Non_Limited_View (Etyp);\n+\n+               --  If the class-wide type has been created by the completion of\n+               --  an incomplete tagged type declaration, get the class-wide\n+               --  type of the incomplete tagged type to match Find_Type_Name.\n \n-               if Is_Class_Wide_Type (Etyp)\n-                 and then From_Limited_With (Etyp)\n+               if Nkind (Parent (Etyp)) = N_Full_Type_Declaration\n+                 and then Present (Incomplete_View (Parent (Etyp)))\n                then\n-                  Desig_View := Etyp;\n-                  Set_Directly_Designated_Type (Rtyp, Available_View (Etyp));\n+                  Etyp := Class_Wide_Type (Incomplete_View (Parent (Etyp)));\n                end if;\n+\n+               Set_Directly_Designated_Type (Etype (Spec_Id), Etyp);\n             end if;\n          end;\n       end if;"}, {"sha": "ea0a55a8e318753a3dae4f1591435ba1c9938db3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -6475,7 +6475,7 @@ package body Sem_Util is\n          elsif Nkind (Parent (B_Type)) = N_Full_Type_Declaration\n            and then Present (Incomplete_View (Parent (B_Type)))\n          then\n-            Id := Defining_Entity (Incomplete_View (Parent (B_Type)));\n+            Id := Incomplete_View (Parent (B_Type));\n \n             --  If T is a derived from a type with an incomplete view declared\n             --  elsewhere, that incomplete view is irrelevant, we want the"}, {"sha": "dcfe75e6528365655f3f1bf1a07a78509d22dc10", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=82ca7489e71d4792b5f242c144bc5bf7b4c4b2c6", "patch": "@@ -1536,10 +1536,8 @@ package Sinfo is\n \n    --  Incomplete_View\n    --    Present in full type declarations that are completions of incomplete\n-   --    type declarations. Denotes the corresponding incomplete type\n-   --    declaration. Used to simplify the retrieval of primitive operations\n-   --    that may be declared between the partial and the full view of an\n-   --    untagged type.\n+   --    type declarations. Denotes the corresponding incomplete view declared\n+   --    by the incomplete declaration.\n \n    --  Inherited_Discriminant\n    --    This flag is present in N_Component_Association nodes. It indicates"}]}