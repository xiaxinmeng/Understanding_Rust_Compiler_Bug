{"sha": "cd02f15f1aecc45b2c2feae16840503549508619", "node_id": "C_kwDOANBUbNoAKGNkMDJmMTVmMWFlY2M0NWIyYzJmZWFlMTY4NDA1MDM1NDk1MDg2MTk", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-06-10T15:26:17Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-11T21:39:10Z"}, "message": "xtensa: Improve constant synthesis for both integer and floating-point\n\nThis patch revises the previous implementation of constant synthesis.\n\nFirst, changed to use define_split machine description pattern and to run\nafter reload pass, in order not to interfere some optimizations such as\nthe loop invariant motion.\n\nSecond, not only integer but floating-point is subject to processing.\n\nThird, several new synthesis patterns - when the constant cannot fit into\na \"MOVI Ax, simm12\" instruction, but:\n\nI.   can be represented as a power of two minus one (eg. 32767, 65535 or\n     0x7fffffffUL)\n       => \"MOVI(.N) Ax, -1\" + \"SRLI Ax, Ax, 1 ... 31\" (or \"EXTUI\")\nII.  is between -34816 and 34559\n       => \"MOVI(.N) Ax, -2048 ... 2047\" + \"ADDMI Ax, Ax, -32768 ... 32512\"\nIII. (existing case) can fit into a signed 12-bit if the trailing zero bits\n     are stripped\n       => \"MOVI(.N) Ax, -2048 ... 2047\" + \"SLLI Ax, Ax, 1 ... 31\"\n\nThe above sequences consist of 5 or 6 bytes and have latency of 2 clock cycles,\nin contrast with \"L32R Ax, <litpool>\" (3 bytes and one clock latency, but may\nsuffer additional one clock pipeline stall and implementation-specific\nInstRAM/ROM access penalty) plus 4 bytes of constant value.\n\nIn addition, 3-instructions synthesis patterns (8 or 9 bytes, 3 clock latency)\nare also provided when optimizing for speed and L32R instruction has\nconsiderable access penalty:\n\nIV.  2-instructions synthesis (any of I ... III) followed by\n     \"SLLI Ax, Ax, 1 ... 31\"\nV.   2-instructions synthesis followed by either \"ADDX[248] Ax, Ax, Ax\"\n     or \"SUBX8 Ax, Ax, Ax\" (multiplying by 3, 5, 7 or 9)\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa-protos.h (xtensa_constantsynth):\n\tNew prototype.\n\t* config/xtensa/xtensa.cc (xtensa_emit_constantsynth,\n\txtensa_constantsynth_2insn, xtensa_constantsynth_rtx_SLLI,\n\txtensa_constantsynth_rtx_ADDSUBX, xtensa_constantsynth):\n\tNew backend functions that process the abovementioned logic.\n\t(xtensa_emit_move_sequence): Revert the previous changes.\n\t* config/xtensa/xtensa.md: New split patterns for integer\n\tand floating-point, as the frontend part.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/xtensa/constsynth_2insns.c: New.\n\t* gcc.target/xtensa/constsynth_3insns.c: Ditto.\n\t* gcc.target/xtensa/constsynth_double.c: Ditto.", "tree": {"sha": "1d24602e683cd4344f5927af29275f33fffaff1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d24602e683cd4344f5927af29275f33fffaff1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd02f15f1aecc45b2c2feae16840503549508619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd02f15f1aecc45b2c2feae16840503549508619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd02f15f1aecc45b2c2feae16840503549508619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd02f15f1aecc45b2c2feae16840503549508619/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd02e734e0f1742629403b46e5b1c650b00fd65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd02e734e0f1742629403b46e5b1c650b00fd65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd02e734e0f1742629403b46e5b1c650b00fd65"}], "stats": {"total": 263, "additions": 247, "deletions": 16}, "files": [{"sha": "c2fd750cd3acf080ac46a3f8c3c401f19cc5a51d", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=cd02f15f1aecc45b2c2feae16840503549508619", "patch": "@@ -44,6 +44,7 @@ extern int xtensa_expand_block_move (rtx *);\n extern int xtensa_expand_block_set_unrolled_loop (rtx *);\n extern int xtensa_expand_block_set_small_loop (rtx *);\n extern void xtensa_split_operand_pair (rtx *, machine_mode);\n+extern int xtensa_constantsynth (rtx, HOST_WIDE_INT);\n extern int xtensa_emit_move_sequence (rtx *, machine_mode);\n extern rtx xtensa_copy_incoming_a7 (rtx);\n extern void xtensa_expand_nonlocal_goto (rtx *);"}, {"sha": "3477e983592a5acd329123b24961a5329daaf6b2", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 117, "deletions": 16, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=cd02f15f1aecc45b2c2feae16840503549508619", "patch": "@@ -1037,6 +1037,123 @@ xtensa_split_operand_pair (rtx operands[4], machine_mode mode)\n }\n \n \n+/* Try to emit insns to load srcval (that cannot fit into signed 12-bit)\n+   into dst with synthesizing a such constant value from a sequence of\n+   load-immediate / arithmetic ones, instead of a L32R instruction\n+   (plus a constant in litpool).  */\n+\n+static void\n+xtensa_emit_constantsynth (rtx dst, enum rtx_code code,\n+\t\t\t   HOST_WIDE_INT imm0, HOST_WIDE_INT imm1,\n+\t\t\t   rtx (*gen_op)(rtx, HOST_WIDE_INT),\n+\t\t\t   HOST_WIDE_INT imm2)\n+{\n+  gcc_assert (REG_P (dst));\n+  emit_move_insn (dst, GEN_INT (imm0));\n+  emit_move_insn (dst, gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t       dst, GEN_INT (imm1)));\n+  if (gen_op)\n+    emit_move_insn (dst, gen_op (dst, imm2));\n+}\n+\n+static int\n+xtensa_constantsynth_2insn (rtx dst, HOST_WIDE_INT srcval,\n+\t\t\t    rtx (*gen_op)(rtx, HOST_WIDE_INT),\n+\t\t\t    HOST_WIDE_INT op_imm)\n+{\n+  int shift = exact_log2 (srcval + 1);\n+\n+  if (IN_RANGE (shift, 1, 31))\n+    {\n+      xtensa_emit_constantsynth (dst, LSHIFTRT, -1, 32 - shift,\n+\t\t\t\t gen_op, op_imm);\n+      return 1;\n+    }\n+\n+  if (IN_RANGE (srcval, (-2048 - 32768), (2047 + 32512)))\n+    {\n+      HOST_WIDE_INT imm0, imm1;\n+\n+      if (srcval < -32768)\n+\timm1 = -32768;\n+      else if (srcval > 32512)\n+\timm1 = 32512;\n+      else\n+\timm1 = srcval & ~255;\n+      imm0 = srcval - imm1;\n+      if (TARGET_DENSITY && imm1 < 32512 && IN_RANGE (imm0, 224, 255))\n+\timm0 -= 256, imm1 += 256;\n+      xtensa_emit_constantsynth (dst, PLUS, imm0, imm1, gen_op, op_imm);\n+\treturn 1;\n+    }\n+\n+  shift = ctz_hwi (srcval);\n+  if (xtensa_simm12b (srcval >> shift))\n+    {\n+      xtensa_emit_constantsynth (dst, ASHIFT, srcval >> shift, shift,\n+\t\t\t\t gen_op, op_imm);\n+      return 1;\n+    }\n+\n+  return 0;\n+}\n+\n+static rtx\n+xtensa_constantsynth_rtx_SLLI (rtx reg, HOST_WIDE_INT imm)\n+{\n+  return gen_rtx_ASHIFT (SImode, reg, GEN_INT (imm));\n+}\n+\n+static rtx\n+xtensa_constantsynth_rtx_ADDSUBX (rtx reg, HOST_WIDE_INT imm)\n+{\n+  return imm == 7\n+\t ? gen_rtx_MINUS (SImode, gen_rtx_ASHIFT (SImode, reg, GEN_INT (3)),\n+\t\t\t  reg)\n+\t : gen_rtx_PLUS (SImode, gen_rtx_ASHIFT (SImode, reg,\n+\t\t\t\t\t\t GEN_INT (floor_log2 (imm - 1))),\n+\t\t\t reg);\n+}\n+\n+int\n+xtensa_constantsynth (rtx dst, HOST_WIDE_INT srcval)\n+{\n+  /* No need for synthesizing for what fits into MOVI instruction.  */\n+  if (xtensa_simm12b (srcval))\n+    return 0;\n+\n+  /* 2-insns substitution.  */\n+  if ((optimize_size || (optimize && xtensa_extra_l32r_costs >= 1))\n+      && xtensa_constantsynth_2insn (dst, srcval, NULL, 0))\n+    return 1;\n+\n+  /* 3-insns substitution.  */\n+  if (optimize > 1 && !optimize_size && xtensa_extra_l32r_costs >= 2)\n+    {\n+      int shift, divisor;\n+\n+      /* 2-insns substitution followed by SLLI.  */\n+      shift = ctz_hwi (srcval);\n+      if (IN_RANGE (shift, 1, 31) &&\n+\t  xtensa_constantsynth_2insn (dst, srcval >> shift,\n+\t\t\t\t      xtensa_constantsynth_rtx_SLLI,\n+\t\t\t\t      shift))\n+\treturn 1;\n+\n+      /* 2-insns substitution followed by ADDX[248] or SUBX8.  */\n+      if (TARGET_ADDX)\n+\tfor (divisor = 3; divisor <= 9; divisor += 2)\n+\t  if (srcval % divisor == 0 &&\n+\t      xtensa_constantsynth_2insn (dst, srcval / divisor,\n+\t\t\t\t\t  xtensa_constantsynth_rtx_ADDSUBX,\n+\t\t\t\t\t  divisor))\n+\t    return 1;\n+    }\n+\n+  return 0;\n+}\n+\n+\n /* Emit insns to move operands[1] into operands[0].\n    Return 1 if we have written out everything that needs to be done to\n    do the move.  Otherwise, return 0 and the caller will emit the move\n@@ -1074,22 +1191,6 @@ xtensa_emit_move_sequence (rtx *operands, machine_mode mode)\n \n       if (! TARGET_AUTO_LITPOOLS && ! TARGET_CONST16)\n \t{\n-\t  /* Try to emit MOVI + SLLI sequence, that is smaller\n-\t     than L32R + literal.  */\n-\t  if (optimize_size && mode == SImode && CONST_INT_P (src)\n-\t      && register_operand (dst, mode))\n-\t    {\n-\t      HOST_WIDE_INT srcval = INTVAL (src);\n-\t      int shift = ctz_hwi (srcval);\n-\n-\t      if (xtensa_simm12b (srcval >> shift))\n-\t\t{\n-\t\t  emit_move_insn (dst, GEN_INT (srcval >> shift));\n-\t\t  emit_insn (gen_ashlsi3_internal (dst, dst, GEN_INT (shift)));\n-\t\t  return 1;\n-\t\t}\n-\t    }\n-\n \t  src = force_const_mem (SImode, src);\n \t  operands[1] = src;\n \t}"}, {"sha": "d806d43d1297e6a599a9731740ff332854e76cdf", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=cd02f15f1aecc45b2c2feae16840503549508619", "patch": "@@ -937,6 +937,19 @@\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"2,2,2,2,2,2,3,3,3,3,6,3,3,3,3,3\")])\n \n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operand:SI 1 \"constantpool_operand\"))]\n+  \"! optimize_debug && reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx x = avoid_constant_pool_reference (operands[1]);\n+  if (! CONST_INT_P (x))\n+    FAIL;\n+  if (! xtensa_constantsynth (operands[0], INTVAL (x)))\n+    emit_move_insn (operands[0], x);\n+})\n+\n ;; 16-bit Integer moves\n \n (define_expand \"movhi\"\n@@ -1139,6 +1152,43 @@\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"3\")])\n \n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(match_operand:SF 1 \"constantpool_operand\"))]\n+  \"! optimize_debug && reload_completed\"\n+  [(const_int 0)]\n+{\n+  int i = 0;\n+  rtx x = XEXP (operands[1], 0);\n+  long l[2];\n+  if (GET_CODE (x) == SYMBOL_REF\n+      && CONSTANT_POOL_ADDRESS_P (x))\n+    x = get_pool_constant (x);\n+  else if (GET_CODE (x) == CONST)\n+    {\n+      x = XEXP (x, 0);\n+      gcc_assert (GET_CODE (x) == PLUS\n+\t\t  && GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n+\t\t  && CONSTANT_POOL_ADDRESS_P (XEXP (x, 0))\n+\t\t  && CONST_INT_P (XEXP (x, 1)));\n+      i = INTVAL (XEXP (x, 1));\n+      gcc_assert (i == 0 || i == 4);\n+      i /= 4;\n+      x = get_pool_constant (XEXP (x, 0));\n+    }\n+  else\n+    gcc_unreachable ();\n+  if (GET_MODE (x) == SFmode)\n+    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l[0]);\n+  else if (GET_MODE (x) == DFmode)\n+    REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n+  else\n+    FAIL;\n+  x = gen_rtx_REG (SImode, REGNO (operands[0]));\n+  if (! xtensa_constantsynth (x, l[i]))\n+    emit_move_insn (x, GEN_INT (l[i]));\n+})\n+\n ;; 64-bit floating point moves\n \n (define_expand \"movdf\""}, {"sha": "43c85a25086a53c183bfbd1a775f5e09c1eb8ce1", "filename": "gcc/testsuite/gcc.target/xtensa/constsynth_2insns.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_2insns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_2insns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_2insns.c?ref=cd02f15f1aecc45b2c2feae16840503549508619", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+int test_0(void)\n+{\n+  return 4095;\n+}\n+\n+int test_1(void)\n+{\n+  return 2147483647;\n+}\n+\n+int test_2(void)\n+{\n+  return -34816;\n+}\n+\n+int test_3(void)\n+{\n+  return -2049;\n+}\n+\n+int test_4(void)\n+{\n+  return 2048;\n+}\n+\n+int test_5(void)\n+{\n+  return 34559;\n+}\n+\n+int test_6(void)\n+{\n+  return 43680;\n+}\n+\n+void test_7(int *p)\n+{\n+  *p = -1432354816;\n+}\n+\n+/* { dg-final { scan-assembler-not \"l32r\" } } */"}, {"sha": "f3c4a1c7c15b1903d6e6723ad361e108defde796", "filename": "gcc/testsuite/gcc.target/xtensa/constsynth_3insns.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_3insns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_3insns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_3insns.c?ref=cd02f15f1aecc45b2c2feae16840503549508619", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mextra-l32r-costs=3\" } */\n+\n+int test_0(void)\n+{\n+  return 134217216;\n+}\n+\n+int test_1(void)\n+{\n+  return -27604992;\n+}\n+\n+int test_2(void)\n+{\n+  return -162279;\n+}\n+\n+void test_3(int *p)\n+{\n+  *p = 192437;\n+}\n+\n+/* { dg-final { scan-assembler-not \"l32r\" } } */"}, {"sha": "890ca504780128025e4585417899bcb2940d559d", "filename": "gcc/testsuite/gcc.target/xtensa/constsynth_double.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd02f15f1aecc45b2c2feae16840503549508619/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fxtensa%2Fconstsynth_double.c?ref=cd02f15f1aecc45b2c2feae16840503549508619", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+void test(unsigned int count, double array[])\n+{\n+  unsigned int i;\n+  for (i = 0; i < count; ++i)\n+    array[i] = 1.0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"l32r\" } } */"}]}