{"sha": "593c0dddb7f21185d46b6a01ebc0c4c86248c738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzYzBkZGRiN2YyMTE4NWQ0NmI2YTAxZWJjMGM0Yzg2MjQ4YzczOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-24T13:03:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-24T13:03:40Z"}, "message": "constraints.md (Yf): New constraint.\n\n\t* config/i386/constraints.md (Yf): New constraint.\n\t* config/i386/i386.md (*movdf_internal_rex64): Use Yf*f instead\n\tof f constraint to conditionaly disable x87 register preferences.\n\t(*movdf_internal): Ditto.\n\t(*movsf_internal): Ditto.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/movsd.c: New test.\n\nFrom-SVN: r195423", "tree": {"sha": "3047102f078fa2aca11807b0296f305953b13f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3047102f078fa2aca11807b0296f305953b13f80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/593c0dddb7f21185d46b6a01ebc0c4c86248c738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593c0dddb7f21185d46b6a01ebc0c4c86248c738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593c0dddb7f21185d46b6a01ebc0c4c86248c738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593c0dddb7f21185d46b6a01ebc0c4c86248c738/comments", "author": null, "committer": null, "parents": [{"sha": "91f4a9e332b143dcdcb670ce8fa7cd83304787d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f4a9e332b143dcdcb670ce8fa7cd83304787d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f4a9e332b143dcdcb670ce8fa7cd83304787d5"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "6bacddc2de5d03ddce556f082a746202d48d17cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=593c0dddb7f21185d46b6a01ebc0c4c86248c738", "patch": "@@ -1,3 +1,11 @@\n+2013-01-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (Yf): New constraint.\n+\t* config/i386/i386.md (*movdf_internal_rex64): Use Yf*f instead\n+\tof f constraint to conditionaly disable x87 register preferences.\n+\t(*movdf_internal): Ditto.\n+\t(*movsf_internal): Ditto.\n+\n 2013-01-24  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR inline-asm/55934\n@@ -8,11 +16,6 @@\n \tselected from constraints on asms is valid for the operand mode.\n \t(curr_insn_transform): Remove incorrect comment.\n \n-2013-01-23  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/i386/i386.md (*movdf_internal_rex64): Disparage alternatives\n-\tinvolving stack registers slightly.\n-\n 2013-01-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_delegitimize_address): Check that"}, {"sha": "d567fd786933afb747fef569c25d9e50e3324ad5", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=593c0dddb7f21185d46b6a01ebc0c4c86248c738", "patch": "@@ -93,6 +93,7 @@\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  d\tInteger register when integer DFmode moves are enabled\n ;;  x\tInteger register when integer XFmode moves are enabled\n+;;  f\tx87 register when 80387 floating point arithmetic is enabled\n \n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n@@ -124,6 +125,10 @@\n  \"optimize_function_for_speed_p (cfun) ? GENERAL_REGS : NO_REGS\"\n  \"@internal Any integer register when integer XFmode moves are enabled.\")\n \n+(define_register_constraint \"Yf\"\n+ \"(ix86_fpmath & FPMATH_387) ? FLOAT_REGS : NO_REGS\"\n+ \"@internal Any x87 register when 80387 FP arithmetic is enabled.\")\n+\n (define_constraint \"z\"\n   \"@internal Constant call address operand.\"\n   (match_operand 0 \"constant_call_address_operand\"))"}, {"sha": "f09f769190d76e557e79da38c91fe6d02d3f40ba", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=593c0dddb7f21185d46b6a01ebc0c4c86248c738", "patch": "@@ -2934,9 +2934,9 @@\n \n (define_insn \"*movdf_internal_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=?f,?m,?f,?r,?m,?r,x,x,x,m,Yi,r \")\n+\t\t\"=Yf*f,m   ,Yf*f,?r ,?m,?r,x,x,x,m,Yi,r \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm ,f ,G ,rm,r ,F ,C,x,m,x,r ,Yi\"))]\n+\t\t\"Yf*fm,Yf*f,G   ,rmC,rC,F ,C,x,m,x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3074,9 +3074,9 @@\n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,?Yd*r ,!o   ,x,x,x,m,*x,*x,*x,m\")\n+\t\t\"=Yf*f,m   ,Yf*f,?Yd*r ,!o   ,x,x,x,m,*x,*x,*x,m\")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,Yd*roF,FYd*r,C,x,m,x,C ,*x,m ,*x\"))]\n+\t\t\"Yf*fm,Yf*f,G   ,Yd*roF,Yd*rF,C,x,m,x,C ,*x,m ,*x\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3213,9 +3213,9 @@\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=f,m,f,?r ,?m,x,x,x,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n+\t  \"=Yf*f,m   ,Yf*f,?r ,?m,x,x,x,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"fm,f,G,rmF,Fr,C,x,m,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n+\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,x,m,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)"}, {"sha": "a2d07aecff366b4b04ce1bb26d8ee834a715f3e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=593c0dddb7f21185d46b6a01ebc0c4c86248c738", "patch": "@@ -1,3 +1,7 @@\n+2013-01-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/movsd.c: New test.\n+\n 2013-01-24  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR inline-asm/55934\n@@ -8,9 +12,10 @@\n \tPR fortran/56081\n \t* gfortran.dg/select_8.f90: New.\n \n-2013-01-23  David Holsgrove <david.holsgrove@xilinx.com>\n+2013-01-23  David Holsgrove  <david.holsgrove@xilinx.com>\n \n-\t* gcc.target/microblaze/microblaze.exp: Remove target_config_cflags check\n+\t* gcc.target/microblaze/microblaze.exp: Remove\n+\ttarget_config_cflags check.\n \n 2013-01-23  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "32a19e79a08afef026f708c05b59077d0c7fe901", "filename": "gcc/testsuite/gcc.target/i386/movsd.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593c0dddb7f21185d46b6a01ebc0c4c86248c738/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmovsd.c?ref=593c0dddb7f21185d46b6a01ebc0c4c86248c738", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse2 -mfpmath=sse\" } */\n+\n+volatile double y;\n+\n+void\n+test ()\n+{\n+  int z;\n+\n+  for (z = 0; z < 1000; z++)\n+    y = 1.23;\n+}\n+\n+/* { dg-final { scan-assembler-not \"(fld|fst)\" } } */"}]}