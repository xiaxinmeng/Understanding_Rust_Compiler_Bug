{"sha": "9ab2f9aed07c3c02ee633801d30b86a216b4cc3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiMmY5YWVkMDdjM2MwMmVlNjMzODAxZDMwYjg2YTIxNmI0Y2MzYg==", "commit": {"author": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2019-09-26T19:19:47Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2019-09-26T19:19:47Z"}, "message": "rs6000-builtin.def: (LVSL...\n\n[gcc]\n\n2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>\n\t* config/rs6000/rs6000-builtin.def: (LVSL, LVSR, LVEBX, LVEHX,\n\tLVEWX, LVXL, LVXL_V2DF, LVXL_V2DI, LVXL_V4SF, LVXL_V4SI, LVXL_V8HI,\n\tLVXL_V16QI, LVX, LVX_V1TI, LVX_V2DF, LVX_V2DI, LVX_V4SF, LVX_V4SI,\n\tLVX_V8HI, LVX_V16QI, LVLX, LVLXL, LVRX, LVRXL, LXSDX, LXVD2X_V1TI,\n\tLXVD2X_V2DF, LXVD2X_V2DI, LXVDSX, LXVW4X_V4SF, LXVW4X_V4SI,\n\tLXVW4X_V8HI, LXVW4X_V16QI, LD_ELEMREV_V1TI, LD_ELEMREV_V2DF,\n\tLD_ELEMREV_V2DI, LD_ELEMREV_V4SF, LD_ELEMREV_V4SI, LD_ELEMREV_V8HI,\n\tLD_ELEMREV_V16QI): Use the PURE attribute.\n\n[testsuite]\n\n2019-09-26  Will Schmidt <will_schmidt@vnet.ibm.com>\n\t* gcc.target/powerpc/pure-builtin-redundant-load.c:  New.\n\nFrom-SVN: r276163", "tree": {"sha": "98fe241de0537f84f900d5c71d7dd79ac1b3ea6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98fe241de0537f84f900d5c71d7dd79ac1b3ea6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ab2f9aed07c3c02ee633801d30b86a216b4cc3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab2f9aed07c3c02ee633801d30b86a216b4cc3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab2f9aed07c3c02ee633801d30b86a216b4cc3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab2f9aed07c3c02ee633801d30b86a216b4cc3b/comments", "author": null, "committer": null, "parents": [{"sha": "be193fa7c9842f30f3aa804696ad83a4117d826e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be193fa7c9842f30f3aa804696ad83a4117d826e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be193fa7c9842f30f3aa804696ad83a4117d826e"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "16ab6abfc3bf9330f8f8f640481196314f089a5a", "filename": "gcc/testsuite/gcc.target/powerpc/pure-builtin-redundant-load.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab2f9aed07c3c02ee633801d30b86a216b4cc3b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpure-builtin-redundant-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab2f9aed07c3c02ee633801d30b86a216b4cc3b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpure-builtin-redundant-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpure-builtin-redundant-load.c?ref=9ab2f9aed07c3c02ee633801d30b86a216b4cc3b", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -fdump-tree-fre-all -mvsx\" } */\n+\n+/* Verify we remove a redundant load that occurs both before and after\n+we call a vector load builtin.\n+This testcase is introduced as we updated a number of our vector load\n+built-ins with the attribute of PURE instead of MEM, to indicate that\n+those builtins only read from memory, versus reading from and writing\n+to the same.\n+This means we can identify the redundant load instructions in an earlier\n+pass, and optimize them away.  */\n+\n+#include <altivec.h>\n+\n+vector signed short load_data;\n+\n+vector signed short foo()\n+{\n+\tvector signed short r11,r12,r13;\n+\tr11 = load_data;\n+\tr12 = vec_xl (0, &load_data[0]);\n+\tr13 = load_data;\n+\treturn (r11 + r12 + r13);\n+}\n+\n+vector signed short biz()\n+{\n+\tvector signed short r21,r22,r23;\n+\tr21 = load_data;\n+\tr22 = vec_lvehx (0, &load_data[0]);\n+\tr23 = load_data;\n+\treturn (r21 + r22 + r23);\n+}\n+\n+vector signed short bar()\n+{\n+\tvector signed short r31,r32,r33;\n+\tr31 = load_data;\n+\tr32 = vec_lvx (0, &load_data[0]);\n+\tr33 = load_data;\n+\treturn (r31 + r32 + r33);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Removing dead stmt r13_. = load_data;\" 1 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing dead stmt r23_. = load_data;\" 1 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Removing dead stmt r33_. = load_data;\" 1 \"fre1\" } } */"}]}