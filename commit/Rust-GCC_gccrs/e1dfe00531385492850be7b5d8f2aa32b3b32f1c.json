{"sha": "e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkZmUwMDUzMTM4NTQ5Mjg1MGJlN2I1ZDhmMmFhMzJiM2IzMmYxYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-07T11:15:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-07T11:15:40Z"}, "message": "re PR c++/55226 (ICE regression in regard to anonymous unions and constexpr)\n\n/cp\n2012-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/55226\n\tRevert:\n\t2012-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54922\n\t* semantics.c (cx_check_missing_mem_inits): Handle anonymous union\n\tmembers.\n\n/testsuite\n2012-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/55226\n\tRevert:\n\t2012-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/54922\n\t* g++.dg/cpp0x/constexpr-union4.C: New.\n\nFrom-SVN: r193292", "tree": {"sha": "57d8f1f4f0f9fb11cd2b1d2d1eb2eb43ae178540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57d8f1f4f0f9fb11cd2b1d2d1eb2eb43ae178540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/comments", "author": null, "committer": null, "parents": [{"sha": "44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "339a8359da44ca3973239a91209407fcc39fb46c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "patch": "@@ -1,3 +1,13 @@\n+2012-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/55226\n+\tRevert:\n+\t2012-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54922\n+\t* semantics.c (cx_check_missing_mem_inits): Handle anonymous union\n+\tmembers.\n+\n 2012-11-07  Florian Weimer  <fweimer@redhat.com>\n \n \t* init.c (build_new_1): Do not check for arithmetic overflow if\n@@ -12,7 +22,7 @@\n \t* decl.c (decls_match): Make decls unmatched for versioned\n \tfunctions.\n \t(duplicate_decls): Remove ambiguity for versioned functions.\n-\tDelete versioned function data for merged decls. \n+\tDelete versioned function data for merged decls.\n \t* decl2.c (check_classfn): Check attributes of versioned functions\n \tfor match.\n \t* call.c (get_function_version_dispatcher): New function."}, {"sha": "7def254cd81e8cb790d69ea09a338a6c876dd39e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "patch": "@@ -6139,23 +6139,17 @@ cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n   for (i = 0; i <= nelts; ++i)\n     {\n       tree index;\n-      tree anon_union_init_type = NULL_TREE;\n       if (i == nelts)\n \tindex = NULL_TREE;\n       else\n \t{\n \t  index = CONSTRUCTOR_ELT (body, i)->index;\n-\t  /* Handle anonymous union members.  */\n-\t  if (TREE_CODE (index) == COMPONENT_REF\n-\t      && ANON_UNION_TYPE_P (TREE_TYPE (TREE_OPERAND (index, 0))))\n-\t    anon_union_init_type = TREE_TYPE (TREE_OPERAND (index, 0));\n \t  /* Skip base and vtable inits.  */\n-\t  else if (TREE_CODE (index) != FIELD_DECL\n-\t\t   || DECL_ARTIFICIAL (index))\n+\t  if (TREE_CODE (index) != FIELD_DECL\n+\t      || DECL_ARTIFICIAL (index))\n \t    continue;\n \t}\n-      for (; field != index && TREE_TYPE (field) != anon_union_init_type;\n-\t   field = DECL_CHAIN (field))\n+      for (; field != index; field = DECL_CHAIN (field))\n \t{\n \t  tree ftype;\n \t  if (TREE_CODE (field) != FIELD_DECL"}, {"sha": "9b21b4c960cc6c4f21c6c303f2c0c9b8c88413fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dfe00531385492850be7b5d8f2aa32b3b32f1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1dfe00531385492850be7b5d8f2aa32b3b32f1c", "patch": "@@ -1,3 +1,12 @@\n+2012-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/55226\n+\tRevert:\n+\t2012-10-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/54922\n+\t* g++.dg/cpp0x/constexpr-union4.C: New.\n+\n 2012-11-07  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* gcc.target/aarch64/dwarf-cfa-reg.c: New test.\n@@ -17,7 +26,8 @@\n \n 2012-11-06  Andrew Pinski  <apinski@cavium.com>\n \n-\t* gcc.target/aarch64/vect-fmaxv-fminv-compile.c: Add -fno-vect-cost-model.\n+\t* gcc.target/aarch64/vect-fmaxv-fminv-compile.c: Add\n+\t-fno-vect-cost-model.\n \n 2012-11-06  Aldy Hernandez  <aldyh@redhat.com>\n \n@@ -37,7 +47,8 @@\n \n 2012-11-06  Jan Hubicka  <jh@suse.cz>\n \n-\t* gcc.dg/tree-ssa/loop-1.c: Make to look like a good unroling candidate still.\n+\t* gcc.dg/tree-ssa/loop-1.c: Make to look like a good unroling\n+\tcandidate still.\n \t* gcc.dg/tree-ssa/loop-23.c: Likewise.\n \t* gcc.dg/tree-ssa/cunroll-1.c: Unrolling now happens early.\n \t* gcc.dg/tree-prof/unroll-1.c: Remove confused dg-options."}, {"sha": "5695cb2ff7adec32d1ef690fdd519c76ab410075", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-union4.C", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-union4.C?ref=44c0e7b9250baf6205391c4a0c96ff1eb90a5ab1", "patch": "@@ -1,13 +0,0 @@\n-// PR c++/54922\n-// { dg-do compile { target c++11 } }\n-\n-class nullable_int\n-{\n-  bool init_;\n-  union {\n-    unsigned char for_value_init;\n-    int value_;\n-  };\n-public:\n-  constexpr nullable_int() : init_(false), for_value_init() {}\n-};"}]}