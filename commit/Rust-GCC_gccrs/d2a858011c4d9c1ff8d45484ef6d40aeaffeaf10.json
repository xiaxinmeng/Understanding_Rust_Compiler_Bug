{"sha": "d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhODU4MDExYzRkOWMxZmY4ZDQ1NDg0ZWY2ZDQwYWVhZmZlYWYxMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-14T13:32:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-14T13:32:56Z"}, "message": "gimple-fold.h (gimple_fold_stmt_to_constant_1): Add 2nd valueization hook defaulted to no_follow_ssa_edges.\n\n2014-11-14  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.h (gimple_fold_stmt_to_constant_1): Add 2nd\n\tvalueization hook defaulted to no_follow_ssa_edges.\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Pass\n\t2nd valueization hook to gimple_simplify.\n\t* tree-ssa-ccp.c (valueize_op_1): New function to be\n\tused for gimple_simplify called via gimple_fold_stmt_to_constant_1.\n\t(ccp_fold): Adjust.\n\t* tree-vrp.c (vrp_valueize_1): New function to be\n\tused for gimple_simplify called via gimple_fold_stmt_to_constant_1.\n\t(vrp_visit_assignment_or_call): Adjust.\n\nFrom-SVN: r217560", "tree": {"sha": "e4d71de012905eda50a0432c5be7efd7d50f5e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d71de012905eda50a0432c5be7efd7d50f5e4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5dde6ddac80b3a6e4cb3d988c5c449108411704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dde6ddac80b3a6e4cb3d988c5c449108411704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5dde6ddac80b3a6e4cb3d988c5c449108411704"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "7a1a54aac5c59f225fdaf61448730e699945ac67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "patch": "@@ -1,3 +1,16 @@\n+2014-11-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.h (gimple_fold_stmt_to_constant_1): Add 2nd\n+\tvalueization hook defaulted to no_follow_ssa_edges.\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Pass\n+\t2nd valueization hook to gimple_simplify.\n+\t* tree-ssa-ccp.c (valueize_op_1): New function to be\n+\tused for gimple_simplify called via gimple_fold_stmt_to_constant_1.\n+\t(ccp_fold): Adjust.\n+\t* tree-vrp.c (vrp_valueize_1): New function to be\n+\tused for gimple_simplify called via gimple_fold_stmt_to_constant_1.\n+\t(vrp_visit_assignment_or_call): Adjust.\n+\n 2014-11-14  Marek Polacek  <polacek@redhat.com>\n \n \t* fold-const.c (fold_negate_expr): Don't fold INTEGER_CST if"}, {"sha": "acdadcd88272229d75ddf7e9c2a81a5eebfed969", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "patch": "@@ -4467,15 +4467,16 @@ maybe_fold_or_comparisons (enum tree_code code1, tree op1a, tree op1b,\n    to avoid the indirect function call overhead.  */\n \n tree\n-gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n+gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree),\n+\t\t\t\ttree (*gvalueize) (tree))\n {\n   code_helper rcode;\n   tree ops[3] = {};\n   /* ???  The SSA propagators do not correctly deal with following SSA use-def\n      edges if there are intermediate VARYING defs.  For this reason\n      do not follow SSA edges here even though SCCVN can technically\n      just deal fine with that.  */\n-  if (gimple_simplify (stmt, &rcode, ops, NULL, no_follow_ssa_edges)\n+  if (gimple_simplify (stmt, &rcode, ops, NULL, gvalueize)\n       && rcode.is_tree_code ()\n       && (TREE_CODE_LENGTH ((tree_code) rcode) == 0\n \t  || ((tree_code) rcode) == ADDR_EXPR)"}, {"sha": "a38848f3396c0107b7bfd6a950dd15e54a0cd96a", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "patch": "@@ -36,7 +36,8 @@ extern bool arith_overflowed_p (enum tree_code, const_tree, const_tree,\n \t\t\t\tconst_tree);\n extern tree no_follow_ssa_edges (tree);\n extern tree follow_single_use_edges (tree);\n-extern tree gimple_fold_stmt_to_constant_1 (gimple, tree (*) (tree));\n+extern tree gimple_fold_stmt_to_constant_1 (gimple, tree (*) (tree),\n+\t\t\t\t\t    tree (*) (tree) = no_follow_ssa_edges);\n extern tree gimple_fold_stmt_to_constant (gimple, tree (*) (tree));\n extern tree fold_const_aggregate_ref_1 (tree, tree (*) (tree));\n extern tree fold_const_aggregate_ref (tree);"}, {"sha": "b3efa99f6f65dd54e1ae6e0e392378087f1b9c18", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "patch": "@@ -1126,6 +1126,27 @@ valueize_op (tree op)\n   return op;\n }\n \n+/* Return the constant value for OP, but signal to not follow SSA\n+   edges if the definition may be simulated again.  */\n+\n+static tree\n+valueize_op_1 (tree op)\n+{\n+  if (TREE_CODE (op) == SSA_NAME)\n+    {\n+      tree tem = get_constant_value (op);\n+      if (tem)\n+\treturn tem;\n+      /* If the definition may be simulated again we cannot follow\n+         this SSA edge as the SSA propagator does not necessarily\n+\t re-visit the use.  */\n+      gimple def_stmt = SSA_NAME_DEF_STMT (op);\n+      if (prop_simulate_again_p (def_stmt))\n+\treturn NULL_TREE;\n+    }\n+  return op;\n+}\n+\n /* CCP specific front-end to the non-destructive constant folding\n    routines.\n \n@@ -1158,7 +1179,8 @@ ccp_fold (gimple stmt)\n \n     case GIMPLE_ASSIGN:\n     case GIMPLE_CALL:\n-      return gimple_fold_stmt_to_constant_1 (stmt, valueize_op);\n+      return gimple_fold_stmt_to_constant_1 (stmt,\n+\t\t\t\t\t     valueize_op, valueize_op_1);\n \n     default:\n       gcc_unreachable ();"}, {"sha": "13b7c791eea5388a862d872e04235c1a301be1c7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=d2a858011c4d9c1ff8d45484ef6d40aeaffeaf10", "patch": "@@ -7025,6 +7025,27 @@ vrp_valueize (tree name)\n   return name;\n }\n \n+/* Return the singleton value-range for NAME if that is a constant\n+   but signal to not follow SSA edges.  */\n+\n+static inline tree\n+vrp_valueize_1 (tree name)\n+{\n+  if (TREE_CODE (name) == SSA_NAME)\n+    {\n+      value_range_t *vr = get_value_range (name);\n+      if (range_int_cst_singleton_p (vr))\n+\treturn vr->min;\n+      /* If the definition may be simulated again we cannot follow\n+         this SSA edge as the SSA propagator does not necessarily\n+\t re-visit the use.  */\n+      gimple def_stmt = SSA_NAME_DEF_STMT (name);\n+      if (prop_simulate_again_p (def_stmt))\n+\treturn NULL_TREE;\n+    }\n+  return name;\n+}\n+\n /* Visit assignment STMT.  If it produces an interesting range, record\n    the SSA name in *OUTPUT_P.  */\n \n@@ -7048,8 +7069,9 @@ vrp_visit_assignment_or_call (gimple stmt, tree *output_p)\n       value_range_t new_vr = VR_INITIALIZER;\n \n       /* Try folding the statement to a constant first.  */\n-      tree tem = gimple_fold_stmt_to_constant (stmt, vrp_valueize);\n-      if (tem)\n+      tree tem = gimple_fold_stmt_to_constant_1 (stmt, vrp_valueize,\n+\t\t\t\t\t\t vrp_valueize_1);\n+      if (tem && is_gimple_min_invariant (tem))\n \tset_value_range_to_value (&new_vr, tem, NULL);\n       /* Then dispatch to value-range extracting functions.  */\n       else if (code == GIMPLE_CALL)"}]}