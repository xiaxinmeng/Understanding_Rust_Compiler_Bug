{"sha": "d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5OTA0YjgzYTliN2UwYjFkYjI3ZjVjNzVjZDI4NThkMmRhYjNiNQ==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-02-17T09:16:49Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-02-17T09:16:49Z"}, "message": "doc Y2K and other g77 limits\n\nFrom-SVN: r25265", "tree": {"sha": "910b5c81028796d79f650457b4b6d102e5150047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910b5c81028796d79f650457b4b6d102e5150047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/comments", "author": null, "committer": null, "parents": [{"sha": "079a615d28fcd5ffdc97e4206225f3ea0c411c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079a615d28fcd5ffdc97e4206225f3ea0c411c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079a615d28fcd5ffdc97e4206225f3ea0c411c5a"}], "stats": {"total": 408, "additions": 400, "deletions": 8}, "files": [{"sha": "687a03e38d7096ef0d26244cf49c9366fcb97036", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "patch": "@@ -1,3 +1,10 @@\n+1999-02-17  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.texi, intdoc.in: Document Y2K and some other known\n+\tlimitations.\n+\t* intrin.def (DTIME, FDATE): Fix capitalization of\n+\tcase-sensitive forms of these intrinsics' names.\n+\n 1999-02-17  Dave Love  <fx@gnu.org>\n \n \t* intdoc.in: Say `common' logarithm for log10."}, {"sha": "92d68ff52349b23445903ac39fc01b72fde60988", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 205, "deletions": 6, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "patch": "@@ -14,10 +14,11 @@\n @c %**start of header\n @setfilename g77.info\n \n-@set last-up-date 1999-02-14\n+@set last-up-date 1999-02-17\n @set version-g77 0.5.24\n @set email-general egcs@@egcs.cygnus.com\n @set email-bugs egcs-bugs@@egcs.cygnus.com\n+@set email-burley craig@@jcb-sc.com\n @set path-g77 egcs/gcc/f\n @set path-libf2c egcs/libf2c\n \n@@ -99,7 +100,7 @@ translations approved by the Free Software Foundation instead of in the\n original English.\n @end ifinfo\n \n-Contributed by James Craig Burley (@email{craig@@jcb-sc.com}).\n+Contributed by James Craig Burley (@email{@value{email-burley}}).\n Inspired by a first pass at translating @file{g77-0.5.16/f/DOC} that\n was contributed to Craig by David Ronis (@email{ronis@@onsager.chem.mcgill.ca}).\n \n@@ -117,7 +118,7 @@ was contributed to Craig by David Ronis (@email{ronis@@onsager.chem.mcgill.ca}).\n @center for version @value{version-g77}\n @page\n @vskip 0pt plus 1filll\n-Copyright @copyright{} 1995-1997 Free Software Foundation, Inc.\n+Copyright @copyright{} 1995-1999 Free Software Foundation, Inc.\n @sp 2\n For GNU Fortran Version @value{version-g77}*\n @sp 1\n@@ -775,7 +776,7 @@ without royalty; alteration is not permitted.\n @cindex improvements, funding\n \n Work on GNU Fortran is still being done mostly by its author,\n-James Craig Burley (@email{craig@@jcb-sc.com}), who is a volunteer\n+James Craig Burley (@email{@value{email-burley}}), who is a volunteer\n for, not an employee of, the Free Software Foundation (FSF).\n As with other GNU software, funding is important because it can pay for\n needed equipment, personnel, and so on.\n@@ -2217,6 +2218,7 @@ Specify status of VXT intrinsics.\n @cindex lines, length\n @cindex length of source lines\n @cindex fixed form\n+@cindex limits, lengths of source lines\n Set column after which characters are ignored in typical fixed-form\n lines in the source file, and through which spaces are assumed (as\n if padded to that length) after the ends of short fixed-form lines.\n@@ -4657,6 +4659,7 @@ for the relevant aspects of GNU Fortran.)\n \n (Corresponds to Section 2.2 of ANSI X3.9-1978 FORTRAN 77.)\n \n+@cindex limits, lengths of names\n In GNU Fortran, a symbolic name is at least one character long,\n and has no arbitrary upper limit on length.\n However, names of entities requiring external linkage (such as\n@@ -7969,6 +7972,7 @@ of work!}\n \n @menu\n * Compiler Limits::\n+* Run-time Environment Limits::\n * Compiler Types::\n * Compiler Constants::\n * Compiler Intrinsics::\n@@ -7987,6 +7991,8 @@ symbols in a program, and so on.\n @cindex -Nl option\n @cindex options, -Nx\n @cindex -Nx option\n+@cindex limits, continuation lines\n+@cindex limits, lengths of names\n For example, some other Fortran compiler have an option\n (such as @samp{-Nl@var{x}}) to increase the limit on the\n number of continuation lines.\n@@ -8002,9 +8008,202 @@ limits in these areas.\n @cindex maximum rank\n @cindex number of dimensions, maximum\n @cindex maximum number of dimensions\n+@cindex limits, rank\n+@cindex limits, array dimensions\n @code{g77} does currently limit the number of dimensions in an array\n to the same degree as do the Fortran standards---seven (7).\n-This restriction might well be lifted in a future version.\n+This restriction might be lifted in a future version.\n+\n+@node Run-time Environment Limits\n+@section Run-time Environment Limits\n+@cindex limits, run-time library\n+@cindex wraparound\n+\n+As a portable Fortran implementation,\n+@code{g77} offers its users direct access to,\n+and otherwise depends upon,\n+the underlying facilities of the system\n+used to build @code{g77},\n+the system on which @code{g77} itself is used to compile programs,\n+and the system on which the @code{g77}-compiled program is actually run.\n+(For most users, the three systems are of the same\n+type---combination of operating environment and hardware---often\n+the same physical system.)\n+\n+The run-time environment for a particular system\n+inevitably imposes some limits on a program's use\n+of various system facilities.\n+These limits vary from system to system.\n+\n+Even when such limits might be well beyond the\n+possibility of being encountered on a particular system,\n+the @code{g77} run-time environment\n+has certain built-in limits,\n+usually, but not always, stemming from intrinsics\n+with inherently limited interfaces.\n+\n+Currently, the @code{g77} run-time environment\n+does not generally offer a less-limiting environment\n+by augmenting the underlying system's own environment.\n+\n+Therefore, code written in the GNU Fortran language,\n+while syntactically and semantically portable,\n+might nevertheless make non-portable assumptions\n+about the run-time environment---assumptions that\n+prove to be false for some particular environments.\n+\n+The GNU Fortran language,\n+the @code{g77} compiler and run-time environment,\n+and the @code{g77} documentation\n+do not yet offer comprehensive portable work-arounds for such limits,\n+though programmers should be able to\n+find their own in specific instances.\n+\n+Not all of the limitations are described in this document.\n+Some of the known limitations include:\n+\n+@menu\n+* Timer Wraparounds::\n+* Year 2000 (Y2K) Problems::\n+* Array Size::\n+* Character-variable Length::\n+* Year 10000 (Y10K) Problems::\n+@end menu\n+\n+@node Timer Wraparounds\n+@subsection Timer Wraparounds\n+\n+Intrinsics that return values computed from system timers,\n+whether elapsed (wall-clock) timers,\n+process CPU timers,\n+or other kinds of timers,\n+are prone to experiencing wrap-around errors\n+(or returning wrapped-around values from successive calls)\n+due to insufficient ranges\n+offered by the underlying system's timers.\n+\n+@cindex negative time\n+@cindex short time\n+@cindex long time\n+Some of the symptoms of such behaviors include\n+apparently negative time being computed for a duration,\n+an extremely short amount of time being computed for a long duration,\n+and an extremely long amount of time being computed for a short duration.\n+\n+See the following for intrinsics\n+known to have potential problems in these areas\n+on at least some systems:\n+@ref{CPU_Time Intrinsic},\n+@ref{DTime Intrinsic (function)}, @ref{DTime Intrinsic (subroutine)},\n+@ref{ETime Intrinsic (function)}, @ref{ETime Intrinsic (subroutine)},\n+@ref{MClock Intrinsic}, @ref{MClock8 Intrinsic},\n+@ref{Secnds Intrinsic},\n+@ref{Second Intrinsic (function)}, @ref{Second Intrinsic (subroutine)},\n+@ref{System_Clock Intrinsic},\n+@ref{Time Intrinsic (UNIX)}, @ref{Time Intrinsic (VXT)},\n+@ref{Time8 Intrinsic}.\n+\n+@node Year 2000 (Y2K) Problems\n+@subsection Year 2000 (Y2K) Problems\n+@cindex Y2K compliance\n+@cindex Year 2000 compliance\n+\n+While the @code{g77} compiler itself is believed to\n+be Year-2000 (Y2K) compliant,\n+some intrinsics are not,\n+and, potentially, some underlying systems are not,\n+perhaps rendering some Y2K-compliant intrinsics\n+non-compliant when used on those particular systems.\n+\n+Fortran code that uses non-Y2K-compliant intrinsics\n+(listed below)\n+is, itself, almost certainly not compliant,\n+and should be modified to use Y2K-compliant intrinsics instead.\n+\n+Fortran code that uses no non-Y2K-compliant intrinsics,\n+but which currently is running on a non-Y2K-compliant system,\n+can be made more Y2K compliant by compiling and\n+linking it for use on a new Y2K-compliant system,\n+such as a new version of an old, non-Y2K-compliant, system.\n+\n+Currently, information on Y2K and related issues\n+is being maintained at\n+@uref{http://www.gnu.org/software/year2000-list.html}.\n+\n+See the following for intrinsics\n+known to have potential problems in these areas\n+on at least some systems:\n+@ref{Date Intrinsic},\n+@ref{IDate Intrinsic (VXT)}.\n+\n+@node Array Size\n+@subsection Array Size\n+@cindex limits, array size\n+@cindex array size\n+\n+Currently, @code{g77} uses the default @code{INTEGER} type\n+for array indexes,\n+which limits the sizes of single-dimension arrays\n+on systems offering a larger address space\n+than can be addressed by that type.\n+(That @code{g77} puts all arrays in memory\n+could be considered another limitation---it\n+could use large temporary files---but that decision\n+is left to the programmer as an implementation choice\n+by most Fortran implementations.)\n+\n+@c ??? Investigate this, to offer a more clear statement\n+@c than the following paragraphs do.  -- burley 1999-02-17\n+It is not yet clear whether this limitation\n+never, sometimes, or always applies to the\n+sizes of multiple-dimension arrays as a whole.\n+\n+For example, on a system with 64-bit addresses\n+and 32-bit default @code{INTEGER},\n+an array with a size greater than can be addressed\n+by a 32-bit offset\n+can be declared using multiple dimensions.\n+Such an array is therefore larger\n+than a single-dimension array can be,\n+on the same system.\n+\n+@cindex limits, multi-dimension arrays\n+@cindex multi-dimension arrays\n+@cindex arrays, dimensioning\n+Whether large multiple-dimension arrays are reliably supported\n+depends mostly on the @code{gcc} back end (code generator)\n+used by @code{g77}, and has not yet been fully investigated.\n+\n+@node Character-variable Length\n+@subsection Character-variable Length\n+@cindex limits, on character-variable length\n+@cindex character-variable length\n+\n+Currently, @code{g77} uses the default @code{INTEGER} type\n+for the lengths of @code{CHARACTER} variables\n+and array elements.\n+\n+This means that, for example,\n+a system with a 64-bit address space\n+and a 32-bit default @code{INTEGER} type\n+does not, under @code{g77},\n+support a @code{CHARACTER*@var{n}} declaration\n+where @var{n} is greater than 2147483647.\n+\n+@node Year 10000 (Y10K) Problems\n+@subsection Year 10000 (Y10K) Problems\n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+\n+Most intrinsics returning, or computing values based on,\n+date information are prone to Year-10000 (Y10K) problems,\n+due to supporting only 4 digits for the year.\n+\n+See the following for examples:\n+@ref{FDate Intrinsic (function)}, @ref{FDate Intrinsic (subroutine)},\n+@ref{IDate Intrinsic (UNIX)},\n+@ref{Time Intrinsic (VXT)},\n+@ref{Date_and_Time Intrinsic}.\n \n @node Compiler Types\n @section Compiler Types\n@@ -11487,7 +11686,7 @@ In the meantime, finding and fixing the programming\n bugs that lead to these behaviors is, ultimately, the user's\n responsibility, as difficult as that task can sometimes be.\n \n-@cindex ``infinite spaces'' printed\n+@cindex infinite spaces printed\n @cindex space, endless printing of\n @cindex libc, non-ANSI or non-default\n @cindex C library"}, {"sha": "b33922d4a73994ff6089d5528f36f9896865906c", "filename": "gcc/f/intdoc.in", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2Fintdoc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2Fintdoc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintdoc.in?ref=d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "patch": "@@ -1059,7 +1059,11 @@ representing the numeric day of the month @var{dd}, a three-character\n abbreviation of the month name @var{mmm} and the last two digits of\n the year @var{yy}, e.g.@: @samp{25-Nov-96}.\n \n+@cindex Y2K compliance\n+@cindex Year 2000 compliance\n This intrinsic is not recommended, due to the year 2000 approaching.\n+Therefore, programs making use of this intrinsic\n+might not be Year 2000 (Y2K) compliant.\n @xref{CTime Intrinsic (subroutine)}, for information on obtaining more digits\n for the current (or any) date.\n \")\n@@ -1075,6 +1079,16 @@ The functions' value is equal to @samp{@var{@1@}(1) + @var{@1@}(2)}.\n Subsequent invocations of @samp{@0@()} return values accumulated since the\n previous invocation.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n Due to the side effects performed by this intrinsic, the function\n form is not recommended.\n \")\n@@ -1090,6 +1104,16 @@ The value of @var{@1@} is equal to @samp{@var{@2@}(1) + @var{@2@}(2)}.\n Subsequent invocations of @samp{@0@()} set values based on accumulations\n since the previous invocation.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n Some non-GNU implementations of Fortran provide this intrinsic as\n only a function, not as a subroutine.\n \")\n@@ -1101,6 +1125,16 @@ as the function value,\n and the user and system components of this in @samp{@var{@1@}(1)}\n and @samp{@var{@1@}(2)} respectively.\n The functions' value is equal to @samp{@var{@1@}(1) + @var{@1@}(2)}.\n+\n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n \")\n \n DEFDOC (ETIME_subr, \"Get elapsed time for process.\", \"\\\n@@ -1111,6 +1145,16 @@ and the user and system components of this in @samp{@var{@2@}(1)}\n and @samp{@var{@2@}(2)} respectively.\n The value of @var{@1@} is equal to @samp{@var{@2@}(1) + @var{@2@}(2)}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n Some non-GNU implementations of Fortran provide this intrinsic as\n only a function, not as a subroutine.\n \")\n@@ -1124,6 +1168,17 @@ Equivalent to:\n CTIME(TIME8())\n @end example\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n @xref{CTime Intrinsic (function)}.\n \")\n \n@@ -1137,6 +1192,17 @@ Equivalent to:\n CALL CTIME(@var{@1@}, TIME8())\n @end example\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n @xref{CTime Intrinsic (subroutine)}.\n \n Some non-GNU implementations of Fortran provide this intrinsic as\n@@ -1226,6 +1292,17 @@ Fills @var{@1@} with the numerical values at the current local time\n of day, month (in the range 1--12), and year in elements 1, 2, and 3,\n respectively.\n The year has four significant digits.\n+\n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n \")\n \n DEFDOC (IDATE_vxt, \"Get local time info (VAX/VMS).\", \"\\\n@@ -1234,7 +1311,20 @@ The month (in the range 1--12) is returned in @var{@1@},\n the day (in the range 1--7) in @var{@2@},\n and the year in @var{@3@} (in the range 0--99).\n \n+@cindex Y2K compliance\n+@cindex Year 2000 compliance\n+@cindex wraparound, Y2K\n+@cindex limits, Y2K\n This intrinsic is not recommended, due to the year 2000 approaching.\n+Therefore, programs making use of this intrinsic\n+might not be Year 2000 (Y2K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 2000.\n+\n+@xref{IDate Intrinsic (UNIX)}, for information on obtaining more digits\n+for the current date.\n \")\n \n DEFDOC (ITIME, \"Get local time of day.\", \"\\\n@@ -1246,9 +1336,16 @@ DEFDOC (MCLOCK, \"Get number of clock ticks for process.\", \"\\\n Returns the number of clock ticks since the start of the process.\n Supported on systems with @code{clock(3)} (q.v.).\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n This intrinsic is not fully portable, such as to systems\n with 32-bit @code{INTEGER} types but supporting times\n wider than 32 bits.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n @xref{MClock8 Intrinsic}, for information on a\n similar intrinsic that might be portable to more\n GNU Fortran implementations, though to fewer\n@@ -1262,12 +1359,18 @@ DEFDOC (MCLOCK8, \"Get number of clock ticks for process.\", \"\\\n Returns the number of clock ticks since the start of the process.\n Supported on systems with @code{clock(3)} (q.v.).\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n @emph{Warning:} this intrinsic does not increase the range\n of the timing values over that returned by @code{clock(3)}.\n On a system with a 32-bit @code{clock(3)},\n @code{@0@} will return a 32-bit value,\n even though converted to an @samp{INTEGER(KIND=2)} value.\n That means overflows of the 32-bit value can still occur.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n \n No Fortran implementations other than GNU Fortran are\n known to support this intrinsic at the time of this\n@@ -1283,17 +1386,45 @@ If the system does not support @code{clock(3)},\n DEFDOC (SECNDS, \"Get local time offset since midnight.\", \"\\\n Returns the local time in seconds since midnight minus the value\n @var{@1@}.\n+\n+@cindex wraparound, timings\n+@cindex limits, timings\n+This values returned by this intrinsic\n+become numerically less than previous values\n+(they wrap around) during a single run of the\n+compiler program, under normal circumstances\n+(such as running through the midnight hour).\n \")\n \n DEFDOC (SECOND_func, \"Get CPU time for process in seconds.\", \"\\\n Returns the process's runtime in seconds---the same value as the\n UNIX function @code{etime} returns.\n+\n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n \")\n \n DEFDOC (SECOND_subr, \"Get CPU time for process@99@in seconds.\", \"\\\n Returns the process's runtime in seconds in @var{@1@}---the same value\n as the UNIX function @code{etime} returns.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n This routine is known from Cray Fortran.  @xref{CPU_Time Intrinsic},\n for a standard equivalent.\n \")\n@@ -1307,12 +1438,32 @@ isn't in general.\n @var{@3@} is the maximum value this can take, which isn't very useful\n in this implementation since it's just the maximum C @code{unsigned\n int} value.\n+\n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n \")\n \n DEFDOC (CPU_TIME, \"Get current CPU time.\", \"\\\n Returns in @var{@1@} the current value of the system time.\n This implementation of the Fortran 95 intrinsic is just an alias for\n @code{second} @xref{Second Intrinsic (subroutine)}.\n+\n+@cindex wraparound, timings\n+@cindex limits, timings\n+On some systems, the underlying timings are represented\n+using types with sufficiently small limits that overflows\n+(wraparounds) are possible, such as 32-bit types.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n \")\n \n DEFDOC (TIME8, \"Get current time as time value.\", \"\\\n@@ -1321,12 +1472,18 @@ Returns the current time encoded as a long integer\n This value is suitable for passing to @code{CTIME},\n @code{GMTIME}, and @code{LTIME}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n @emph{Warning:} this intrinsic does not increase the range\n of the timing values over that returned by @code{time(3)}.\n On a system with a 32-bit @code{time(3)},\n @code{@0@} will return a 32-bit value,\n even though converted to an @samp{INTEGER(KIND=2)} value.\n That means overflows of the 32-bit value can still occur.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n \n No Fortran implementations other than GNU Fortran are\n known to support this intrinsic at the time of this\n@@ -1342,9 +1499,16 @@ Returns the current time encoded as an integer\n This value is suitable for passing to @code{CTIME},\n @code{GMTIME}, and @code{LTIME}.\n \n+@cindex wraparound, timings\n+@cindex limits, timings\n This intrinsic is not fully portable, such as to systems\n with 32-bit @code{INTEGER} types but supporting times\n wider than 32 bits.\n+Therefore, the values returned by this intrinsic\n+might be, or become, negative,\n+or numerically less than previous values,\n+during a single run of the compiled program.\n+\n @xref{Time8 Intrinsic}, for information on a\n similar intrinsic that might be portable to more\n GNU Fortran implementations, though to fewer\n@@ -2409,6 +2573,17 @@ DEFDOC (TIME_vxt, \"Get the time as a character value.\", \"\\\n Returns in @var{@1@} a character representation of the current time as\n obtained from @code{ctime(3)}.\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n @xref{Fdate Intrinsic (subroutine)} for an equivalent routine.\n \")\n \n@@ -2506,6 +2681,17 @@ minutes from UTC, hour of the day, minutes of the hour and milliseconds\n of the second in successive values of the array.\n @end table\n \n+@cindex Y10K compliance\n+@cindex Year 10000 compliance\n+@cindex wraparound, Y10K\n+@cindex limits, Y10K\n+Programs making use of this intrinsic\n+might not be Year 10000 (Y10K) compliant.\n+For example, the date might appear,\n+to such programs, to wrap around\n+(change from a larger value to a smaller one)\n+as of the Year 10000.\n+\n On systems where a millisecond timer isn't available, the millisecond\n value is returned as zero.\n \")"}, {"sha": "93df3f1eeff913d871cf0fdebc005908728b2898", "filename": "gcc/f/intrin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2Fintrin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5/gcc%2Ff%2Fintrin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.def?ref=d79904b83a9b7e0b1db27f5c75cd2858d2dab3b5", "patch": "@@ -133,7 +133,7 @@ DEFNAME\t(\"DSQRT\",\t\"dsqrt\",\t\"DSqRt\",\tgenNONE,\tspecDSQRT)\n DEFNAME\t(\"DTAN\",\t\"dtan\",\t\t\"DTan\",\t\tgenNONE,\tspecDTAN)\n DEFNAME\t(\"DTAND\",\t\"dtand\",\t\"DTanD\",\tgenNONE,\tspecDTAND)\t/* VXT */\n DEFNAME\t(\"DTANH\",\t\"dtanh\",\t\"DTanH\",\tgenNONE,\tspecDTANH)\n-DEFNAME\t(\"DTIME\",\t\"dtime\",\t\"Dtime\",\tgenDTIME,\tspecNONE)\t/* UNIX */\n+DEFNAME\t(\"DTIME\",\t\"dtime\",\t\"DTime\",\tgenDTIME,\tspecNONE)\t/* UNIX */\n DEFNAME\t(\"EOSHIFT\",\t\"eoshift\",\t\"EOShift\",\tgenNONE,\tspecEOSHIFT)\t/* F90 */\n DEFNAME\t(\"EPSILON\",\t\"epsilon\",\t\"Epsilon\",\tgenNONE,\tspecEPSILON)\t/* F90 */\n DEFNAME\t(\"ERF\",\t\t\"erf\",\t\t\"ErF\",\t\tgenNONE,\tspecERF)\t/* UNIX */\n@@ -142,7 +142,7 @@ DEFNAME\t(\"ETIME\",\t\"etime\",\t\"ETime\",\tgenETIME,\tspecNONE)\t/* UNIX */\n DEFNAME\t(\"EXIT\",\t\"exit\",\t\t\"Exit\",\t\tgenNONE,\tspecEXIT)\t/* UNIX */\n DEFNAME\t(\"EXP\",\t\t\"exp\",\t\t\"Exp\",\t\tgenNONE,\tspecEXP)\n DEFNAME\t(\"EXPONENT\",\t\"exponent\",\t\"Exponent\",\tgenNONE,\tspecEXPONENT)\t/* F90 */\n-DEFNAME\t(\"FDATE\",\t\"fdate\",\t\"Fdate\",\tgenFDATE,\tspecNONE)\t/* UNIX */\n+DEFNAME\t(\"FDATE\",\t\"fdate\",\t\"FDate\",\tgenFDATE,\tspecNONE)\t/* UNIX */\n DEFNAME\t(\"FGET\",\t\"fget\",\t\t\"FGet\",\t\tgenFGET,\tspecNONE)\t/* UNIX */\n DEFNAME\t(\"FGETC\",\t\"fgetc\",\t\"FGetC\",\tgenFGETC,\tspecNONE)\t/* UNIX */\n DEFNAME\t(\"FLOAT\",\t\"float\",\t\"Float\",\tgenNONE,\tspecFLOAT)"}]}