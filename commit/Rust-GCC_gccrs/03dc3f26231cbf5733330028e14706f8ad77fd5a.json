{"sha": "03dc3f26231cbf5733330028e14706f8ad77fd5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkYzNmMjYyMzFjYmY1NzMzMzMwMDI4ZTE0NzA2ZjhhZDc3ZmQ1YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-20T16:20:44Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-15T01:42:04Z"}, "message": "tree-diagnostic-path.cc: properly handle ad-hoc wrappers of UNKNOWN_LOCATION\n\nIn the reproducer for PR analyzer/58237 I noticed that some events that\nwere missing locations were also missing text; for example event 3 here:\n\n    |   15 |   while (fgets(buf, 10, fp) != NULL)\n    |      |         ~\n    |      |         |\n    |      |         (2) following 'false' branch...\n    |\n  'f1': event 3\n    |\n    |cc1:\n    |\n\nThe root cause is that the path_summary-printing code doesn't consider\nad-hoc locations when looking for reserved locations, and so fails to\ndetect an unknown location for the case where an unknown location has\nbeen wrapped into an ad-hoc location to record a block.\n\nThis patch fixes the issue by using get_pure_location, thus looking\nthrough ad-hoc wrappers, improving the result to:\n\n    |   15 |   while (fgets(buf, 10, fp) != NULL)\n    |      |         ~\n    |      |         |\n    |      |         (2) following 'false' branch...\n    |\n  'f1': event 3\n    |\n    |cc1:\n    | (3): ...to here\n    |\n\ngcc/ChangeLog:\n\t* tree-diagnostic-path.cc (path_summary::event_range::print):\n\tWhen testing for UNKNOWN_LOCATION, look through ad-hoc wrappers\n\tusing get_pure_location.", "tree": {"sha": "3d8be721ba491de74f1c3c0c5a2ca5f94c5df899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d8be721ba491de74f1c3c0c5a2ca5f94c5df899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03dc3f26231cbf5733330028e14706f8ad77fd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03dc3f26231cbf5733330028e14706f8ad77fd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03dc3f26231cbf5733330028e14706f8ad77fd5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03dc3f26231cbf5733330028e14706f8ad77fd5a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697251b7a1bb7c14d3805de22248e83a23b90d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697251b7a1bb7c14d3805de22248e83a23b90d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697251b7a1bb7c14d3805de22248e83a23b90d1a"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "2837364ae16fb6d108ef5bdf63311f8d6a2abe16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dc3f26231cbf5733330028e14706f8ad77fd5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dc3f26231cbf5733330028e14706f8ad77fd5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03dc3f26231cbf5733330028e14706f8ad77fd5a", "patch": "@@ -1,3 +1,9 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree-diagnostic-path.cc (path_summary::event_range::print):\n+\tWhen testing for UNKNOWN_LOCATION, look through ad-hoc wrappers\n+\tusing get_pure_location.\n+\n 2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93262"}, {"sha": "381a49cb0b4746e79e3b5395fd3788708e3ea455", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03dc3f26231cbf5733330028e14706f8ad77fd5a/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03dc3f26231cbf5733330028e14706f8ad77fd5a/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=03dc3f26231cbf5733330028e14706f8ad77fd5a", "patch": "@@ -172,7 +172,7 @@ class path_summary\n \t In particular the label for the event won't get printed.\n \t Fail more gracefully in this case by showing the event\n \t index and text, at no particular location.  */\n-      if (initial_loc <= BUILTINS_LOCATION)\n+      if (get_pure_location (initial_loc) <= BUILTINS_LOCATION)\n \t{\n \t  for (unsigned i = m_start_idx; i <= m_end_idx; i++)\n \t    {"}]}