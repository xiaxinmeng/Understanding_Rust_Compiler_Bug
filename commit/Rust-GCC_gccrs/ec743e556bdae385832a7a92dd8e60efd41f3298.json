{"sha": "ec743e556bdae385832a7a92dd8e60efd41f3298", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3NDNlNTU2YmRhZTM4NTgzMmE3YTkyZGQ4ZTYwZWZkNDFmMzI5OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-15T19:12:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-15T19:12:24Z"}, "message": "(simplify_cond): Make TESTS an array of rtunions.\n\nFrom-SVN: r13170", "tree": {"sha": "018ceaac9f6ffee8c80fbeb54aab677553ed4dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/018ceaac9f6ffee8c80fbeb54aab677553ed4dcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec743e556bdae385832a7a92dd8e60efd41f3298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec743e556bdae385832a7a92dd8e60efd41f3298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec743e556bdae385832a7a92dd8e60efd41f3298", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec743e556bdae385832a7a92dd8e60efd41f3298/comments", "author": null, "committer": null, "parents": [{"sha": "2710836960b0a77830d03d3c0f254199dae0a724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2710836960b0a77830d03d3c0f254199dae0a724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2710836960b0a77830d03d3c0f254199dae0a724"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "14ecac1f1e55969078bd8395e535be489e6af7c8", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec743e556bdae385832a7a92dd8e60efd41f3298/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec743e556bdae385832a7a92dd8e60efd41f3298/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=ec743e556bdae385832a7a92dd8e60efd41f3298", "patch": "@@ -2418,16 +2418,15 @@ simplify_cond (exp, insn_code, insn_index)\n      then build a new expression if they don't match EXP.  */\n   rtx defval = XEXP (exp, 1);\n   rtx new_defval = XEXP (exp, 1);\n-\n   int len = XVECLEN (exp, 0);\n-  rtx *tests = (rtx *) alloca (len * sizeof (rtx));\n+  rtunion *tests = (rtunion *) alloca (len * sizeof (rtunion));\n   int allsame = 1;\n   char *first_spacer;\n \n   /* This lets us free all storage allocated below, if appropriate.  */\n   first_spacer = (char *) obstack_finish (rtl_obstack);\n \n-  bcopy ((char *) &XVECEXP (exp, 0, 0), (char *) tests, len * sizeof (rtx));\n+  bcopy ((char *) XVEC (exp, 0)->elem, (char *) tests, len * sizeof (rtunion));\n \n   /* See if default value needs simplification.  */\n   if (GET_CODE (defval) == COND)\n@@ -2440,10 +2439,10 @@ simplify_cond (exp, insn_code, insn_index)\n       rtx newtest, newval;\n \n       /* Simplify this test.  */\n-      newtest = SIMPLIFY_TEST_EXP (tests[i], insn_code, insn_index);\n-      tests[i] = newtest;\n+      newtest = SIMPLIFY_TEST_EXP (tests[i].rtx, insn_code, insn_index);\n+      tests[i].rtx = newtest;\n \n-      newval = tests[i + 1];\n+      newval = tests[i + 1].rtx;\n       /* See if this value may need simplification.  */\n       if (GET_CODE (newval) == COND)\n \tnewval = simplify_cond (newval, insn_code, insn_index);\n@@ -2454,49 +2453,49 @@ simplify_cond (exp, insn_code, insn_index)\n \t  /* If test is true, make this value the default\n \t     and discard this + any following tests.  */\n \t  len = i;\n-\t  defval = tests[i + 1];\n+\t  defval = tests[i + 1].rtx;\n \t  new_defval = newval;\n \t}\n \n       else if (newtest == false_rtx)\n \t{\n \t  /* If test is false, discard it and its value.  */\n \t  for (j = i; j < len - 2; j++)\n-\t    tests[j] = tests[j + 2];\n+\t    tests[j].rtx = tests[j + 2].rtx;\n \t  len -= 2;\n \t}\n \n-      else if (i > 0 && attr_equal_p (newval, tests[i - 1]))\n+      else if (i > 0 && attr_equal_p (newval, tests[i - 1].rtx))\n \t{\n \t  /* If this value and the value for the prev test are the same,\n \t     merge the tests.  */\n \n-\t  tests[i - 2]\n-\t    = insert_right_side (IOR, tests[i - 2], newtest,\n+\t  tests[i - 2].rtx\n+\t    = insert_right_side (IOR, tests[i - 2].rtx, newtest,\n \t\t\t\t insn_code, insn_index);\n \n \t  /* Delete this test/value.  */\n \t  for (j = i; j < len - 2; j++)\n-\t    tests[j] = tests[j + 2];\n+\t    tests[j].rtx = tests[j + 2].rtx;\n \t  len -= 2;\n \t}\n \n       else\n-\ttests[i + 1] = newval;\n+\ttests[i + 1].rtx = newval;\n     }\n \n   /* If the last test in a COND has the same value\n      as the default value, that test isn't needed.  */\n \n-  while (len > 0 && attr_equal_p (tests[len - 1], new_defval))\n+  while (len > 0 && attr_equal_p (tests[len - 1].rtx, new_defval))\n     len -= 2;\n \n   /* See if we changed anything.  */\n   if (len != XVECLEN (exp, 0) || new_defval != XEXP (exp, 1))\n     allsame = 0;\n   else\n     for (i = 0; i < len; i++)\n-      if (! attr_equal_p (tests[i], XVECEXP (exp, 0, i)))\n+      if (! attr_equal_p (tests[i].rtx, XVECEXP (exp, 0, i)))\n \t{\n \t  allsame = 0;\n \t  break;\n@@ -2519,8 +2518,8 @@ simplify_cond (exp, insn_code, insn_index)\n       rtx newexp = rtx_alloc (COND);\n \n       XVEC (newexp, 0) = rtvec_alloc (len);\n-      bcopy ((char *) tests, (char *) &XVECEXP (newexp, 0, 0),\n-\t     len * sizeof (rtx));\n+      bcopy ((char *) tests, (char *) XVEC (newexp, 0)->elem,\n+\t     len * sizeof (rtunion));\n       XEXP (newexp, 1) = new_defval;\n       return newexp;\n     }"}]}