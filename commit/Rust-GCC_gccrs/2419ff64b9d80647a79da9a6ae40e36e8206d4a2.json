{"sha": "2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxOWZmNjRiOWQ4MDY0N2E3OWRhOWE2YWU0MGUzNmU4MjA2ZDRhMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-31T18:36:40Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-31T18:36:40Z"}, "message": "re PR fortran/52013 ([OOP] Polymorphism and coarrays: Support as class container)\n\n2012-01-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52013\n        * class.c (get_unique_hashed_string): Adapt trim length.\n        (gfc_build_class_symbol) Encode also corank in the container name.\n\n2012-01-31  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52013\n\nFrom-SVN: r183769", "tree": {"sha": "9b81e969cc1663e437719df6faab222044bd187a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b81e969cc1663e437719df6faab222044bd187a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2297ab7d840966f62a70328244f4c8560d388e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2297ab7d840966f62a70328244f4c8560d388e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2297ab7d840966f62a70328244f4c8560d388e0a"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "b39e03798f4328fafc924ea05c15234f0ace5ae7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "patch": "@@ -1,3 +1,9 @@\n+2012-01-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52013\n+\t* class.c (get_unique_hashed_string): Adapt trim length.\n+\t(gfc_build_class_symbol) Encode also corank in the container name.\n+\n 2012-01-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/52012"}, {"sha": "3ff6a0bd1c1aceb450f1a67580bbad0d5a791424", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "patch": "@@ -294,8 +294,10 @@ get_unique_hashed_string (char *string, gfc_symbol *derived)\n   char tmp[2*GFC_MAX_SYMBOL_LEN+2];\n   get_unique_type_string (&tmp[0], derived);\n   /* If string is too long, use hash value in hex representation (allow for\n-     extra decoration, cf. gfc_build_class_symbol & gfc_find_derived_vtab).  */\n-  if (strlen (tmp) > GFC_MAX_SYMBOL_LEN - 11)\n+     extra decoration, cf. gfc_build_class_symbol & gfc_find_derived_vtab).\n+     We need space to for 15 characters \"__class_\" + symbol name + \"_%d_%da\",\n+     where %d is the (co)rank which can be up to n = 15.  */\n+  if (strlen (tmp) > GFC_MAX_SYMBOL_LEN - 15)\n     {\n       int h = gfc_hash_value (derived);\n       sprintf (string, \"%X\", h);\n@@ -360,10 +362,10 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \n   /* Determine the name of the encapsulating type.  */\n   get_unique_hashed_string (tname, ts->u.derived);\n-  if ((*as) && (*as)->rank && attr->allocatable)\n-    sprintf (name, \"__class_%s_%d_a\", tname, (*as)->rank);\n-  else if ((*as) && (*as)->rank)\n-    sprintf (name, \"__class_%s_%d\", tname, (*as)->rank);\n+  if ((*as) && attr->allocatable)\n+    sprintf (name, \"__class_%s_%d_%da\", tname, (*as)->rank, (*as)->corank);\n+  else if ((*as))\n+    sprintf (name, \"__class_%s_%d_%d\", tname, (*as)->rank, (*as)->corank);\n   else if (attr->pointer)\n     sprintf (name, \"__class_%s_p\", tname);\n   else if (attr->allocatable)"}, {"sha": "3e0ca1e4ab89dd5152357395943cc7e2a60b43a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "patch": "@@ -1,3 +1,8 @@\n+2012-01-31  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52013\n+\t* gfortran.dg/elemental_args_check_6.f90: New.\n+\n 2012-01-31  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52043"}, {"sha": "f5ae59a48a0dd052e1013817307554f928e02fc0", "filename": "gcc/testsuite/gfortran.dg/elemental_args_check_6.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2419ff64b9d80647a79da9a6ae40e36e8206d4a2/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_6.f90?ref=2419ff64b9d80647a79da9a6ae40e36e8206d4a2", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/52013\n+!\n+type t\n+end type t\n+contains\n+  elemental subroutine f(x) \n+    class(t), intent(inout) :: x ! Valid\n+  end subroutine\n+  elemental subroutine g(y) ! { dg-error \"Coarray dummy argument 'y' at .1. to elemental procedure\" }\n+    class(t), intent(inout) :: y[*]\n+  end subroutine\n+end"}]}