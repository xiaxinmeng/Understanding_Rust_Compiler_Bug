{"sha": "fa1615d7a02d38753ac2c755c8c2dd20b53f613d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExNjE1ZDdhMDJkMzg3NTNhYzJjNzU1YzhjMmRkMjBiNTNmNjEzZA==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2008-08-05T23:06:33Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2008-08-05T23:06:33Z"}, "message": "xtensa.c (xtensa_va_start): Unshare valist.\n\n\t* config/xtensa/xtensa.c (xtensa_va_start): Unshare valist.\n\t(xtensa_gimplify_va_arg_expr): Unshare valist, orig_ndx, ndx, array,\n\tva_size, and type_size.\n\nFrom-SVN: r138747", "tree": {"sha": "0a5c9ae0c70ccde1e994740006d38f138da63e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5c9ae0c70ccde1e994740006d38f138da63e58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa1615d7a02d38753ac2c755c8c2dd20b53f613d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1615d7a02d38753ac2c755c8c2dd20b53f613d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1615d7a02d38753ac2c755c8c2dd20b53f613d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1615d7a02d38753ac2c755c8c2dd20b53f613d/comments", "author": null, "committer": null, "parents": [{"sha": "8bd206211ddadcfb501aeed34d137ffd5baee59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd206211ddadcfb501aeed34d137ffd5baee59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd206211ddadcfb501aeed34d137ffd5baee59a"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "b3b5981f83d96a2e43ebe8a79713e1e64b980145", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1615d7a02d38753ac2c755c8c2dd20b53f613d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1615d7a02d38753ac2c755c8c2dd20b53f613d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa1615d7a02d38753ac2c755c8c2dd20b53f613d", "patch": "@@ -1,3 +1,9 @@\n+2008-08-05  Bob Wilson  <bob.wilson@acm.org>\n+\t\n+\t* config/xtensa/xtensa.c (xtensa_va_start): Unshare valist.\n+\t(xtensa_gimplify_va_arg_expr): Unshare valist, orig_ndx, ndx, array,\n+\tva_size, and type_size.\n+\t\n 2008-08-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/37016"}, {"sha": "392eafa0eee04dbff59cd53fbf319704a34cba04", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1615d7a02d38753ac2c755c8c2dd20b53f613d/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1615d7a02d38753ac2c755c8c2dd20b53f613d/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=fa1615d7a02d38753ac2c755c8c2dd20b53f613d", "patch": "@@ -2533,8 +2533,10 @@ xtensa_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   f_ndx = TREE_CHAIN (f_reg);\n \n   stk = build3 (COMPONENT_REF, TREE_TYPE (f_stk), valist, f_stk, NULL_TREE);\n-  reg = build3 (COMPONENT_REF, TREE_TYPE (f_reg), valist, f_reg, NULL_TREE);\n-  ndx = build3 (COMPONENT_REF, TREE_TYPE (f_ndx), valist, f_ndx, NULL_TREE);\n+  reg = build3 (COMPONENT_REF, TREE_TYPE (f_reg), unshare_expr (valist),\n+\t\tf_reg, NULL_TREE);\n+  ndx = build3 (COMPONENT_REF, TREE_TYPE (f_ndx), unshare_expr (valist),\n+\t\tf_ndx, NULL_TREE);\n \n   /* Call __builtin_saveregs; save the result in __va_reg */\n   u = make_tree (sizetype, expand_builtin_saveregs ());\n@@ -2588,7 +2590,8 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t\t\t\t       pre_p, NULL);\n       real_part = get_initialized_tmp_var (real_part, pre_p, NULL);\n \n-      imag_part = xtensa_gimplify_va_arg_expr (valist, TREE_TYPE (type),\n+      imag_part = xtensa_gimplify_va_arg_expr (unshare_expr (valist),\n+\t\t\t\t\t       TREE_TYPE (type),\n \t\t\t\t\t       pre_p, NULL);\n       imag_part = get_initialized_tmp_var (imag_part, pre_p, NULL);\n \n@@ -2599,9 +2602,12 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   f_reg = TREE_CHAIN (f_stk);\n   f_ndx = TREE_CHAIN (f_reg);\n \n-  stk = build3 (COMPONENT_REF, TREE_TYPE (f_stk), valist, f_stk, NULL_TREE);\n-  reg = build3 (COMPONENT_REF, TREE_TYPE (f_reg), valist, f_reg, NULL_TREE);\n-  ndx = build3 (COMPONENT_REF, TREE_TYPE (f_ndx), valist, f_ndx, NULL_TREE);\n+  stk = build3 (COMPONENT_REF, TREE_TYPE (f_stk), valist,\n+\t\tf_stk, NULL_TREE);\n+  reg = build3 (COMPONENT_REF, TREE_TYPE (f_reg), unshare_expr (valist),\n+\t\tf_reg, NULL_TREE);\n+  ndx = build3 (COMPONENT_REF, TREE_TYPE (f_ndx), unshare_expr (valist),\n+\t\tf_ndx, NULL_TREE);\n \n   type_size = size_in_bytes (type);\n   va_size = round_up (type_size, UNITS_PER_WORD);\n@@ -2621,11 +2627,11 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     {\n       int align = MIN (TYPE_ALIGN (type), STACK_BOUNDARY) / BITS_PER_UNIT;\n \n-      t = build2 (PLUS_EXPR, integer_type_node, orig_ndx,\n+      t = build2 (PLUS_EXPR, integer_type_node, unshare_expr (orig_ndx),\n \t\t  build_int_cst (integer_type_node, align - 1));\n       t = build2 (BIT_AND_EXPR, integer_type_node, t,\n \t\t  build_int_cst (integer_type_node, -align));\n-      gimplify_assign (orig_ndx, t, pre_p);\n+      gimplify_assign (unshare_expr (orig_ndx), t, pre_p);\n     }\n \n \n@@ -2635,7 +2641,7 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n   t = fold_convert (integer_type_node, va_size);\n   t = build2 (PLUS_EXPR, integer_type_node, orig_ndx, t);\n-  gimplify_assign (ndx, t, pre_p);\n+  gimplify_assign (unshare_expr (ndx), t, pre_p);\n \n \n   /* Check if the argument is in registers:\n@@ -2652,15 +2658,15 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n       lab_false = create_artificial_label ();\n       lab_over = create_artificial_label ();\n \n-      t = build2 (GT_EXPR, boolean_type_node, ndx,\n+      t = build2 (GT_EXPR, boolean_type_node, unshare_expr (ndx),\n \t\t  build_int_cst (integer_type_node,\n \t\t\t\t MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD));\n       t = build3 (COND_EXPR, void_type_node, t,\n \t\t  build1 (GOTO_EXPR, void_type_node, lab_false),\n \t\t  NULL_TREE);\n       gimplify_and_add (t, pre_p);\n \n-      gimplify_assign (array, reg, pre_p);\n+      gimplify_assign (unshare_expr (array), reg, pre_p);\n \n       t = build1 (GOTO_EXPR, void_type_node, lab_over);\n       gimplify_and_add (t, pre_p);\n@@ -2682,17 +2688,17 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n   lab_false2 = create_artificial_label ();\n \n-  t = build2 (GT_EXPR, boolean_type_node, orig_ndx,\n+  t = build2 (GT_EXPR, boolean_type_node, unshare_expr (orig_ndx),\n \t      build_int_cst (integer_type_node,\n \t\t\t     MAX_ARGS_IN_REGISTERS * UNITS_PER_WORD));\n   t = build3 (COND_EXPR, void_type_node, t,\n \t      build1 (GOTO_EXPR, void_type_node, lab_false2),\n \t      NULL_TREE);\n   gimplify_and_add (t, pre_p);\n \n-  t = size_binop (PLUS_EXPR, va_size, size_int (32));\n+  t = size_binop (PLUS_EXPR, unshare_expr (va_size), size_int (32));\n   t = fold_convert (integer_type_node, t);\n-  gimplify_assign (ndx, t, pre_p);\n+  gimplify_assign (unshare_expr (ndx), t, pre_p);\n \n   t = build1 (LABEL_EXPR, void_type_node, lab_false2);\n   gimplify_and_add (t, pre_p);\n@@ -2719,17 +2725,18 @@ xtensa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \n   if (BYTES_BIG_ENDIAN && TREE_CODE (type_size) == INTEGER_CST)\n     {\n-      t = fold_build2 (GE_EXPR, boolean_type_node, type_size,\n+      t = fold_build2 (GE_EXPR, boolean_type_node, unshare_expr (type_size),\n \t\t       size_int (PARM_BOUNDARY / BITS_PER_UNIT));\n-      t = fold_build3 (COND_EXPR, sizetype, t, va_size, type_size);\n+      t = fold_build3 (COND_EXPR, sizetype, t, unshare_expr (va_size),\n+\t\t       unshare_expr (type_size));\n       size = t;\n     }\n   else\n-    size = va_size;\n+    size = unshare_expr (va_size);\n \n-  t = fold_convert (sizetype, ndx);\n+  t = fold_convert (sizetype, unshare_expr (ndx));\n   t = build2 (MINUS_EXPR, sizetype, t, size);\n-  addr = build2 (POINTER_PLUS_EXPR, ptr_type_node, array, t);\n+  addr = build2 (POINTER_PLUS_EXPR, ptr_type_node, unshare_expr (array), t);\n \n   addr = fold_convert (build_pointer_type (type), addr);\n   if (indirect)"}]}