{"sha": "da67acb9b37cf139da014f5bc11e2dbf25a7d597", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2N2FjYjliMzdjZjEzOWRhMDE0ZjViYzExZTJkYmYyNWE3ZDU5Nw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-08-14T18:35:13Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-08-14T18:35:13Z"}, "message": "PR c/81117 - Improve buffer overflow checking in strncpy - part 1\n\ngcc/ChangeLog:\n\n        PR c/81117\n\t* tree-diagnostic.c (default_tree_printer): Handle %G.\n\t* gimple-pretty-print.h (percent_G_format): Declare new function.\n\t* gimple-pretty-print.c (percent_G_format): Define.\n\t* tree-pretty-print.c (percent_K_format): Add argument.\n\ngcc/c/ChangeLog:\n\n\tPR c/81117\n\t* c-objc-common.c (c_objc_common_init): Handle 'G'.\n\ngcc/c-family/ChangeLog:\n\n\tPR c/81117\n\t* c-format.h (T89_G): New macro.\n\t* c-format.c (local_gcall_ptr_node): New variable.\n\t(init_dynamic_diag_info): Initialize it.\n\ngcc/cp/ChangeLog:\n\n\tPR c/81117\n\t* error.c (cp_printer): Handle 'G'.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/81117\n\t* gcc.dg/format/gcc_diag-10.c: Exercise %G.\n\nFrom-SVN: r251098", "tree": {"sha": "d3cc608c3e0c1104bf054ef4e742c6af1439c24f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3cc608c3e0c1104bf054ef4e742c6af1439c24f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da67acb9b37cf139da014f5bc11e2dbf25a7d597", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da67acb9b37cf139da014f5bc11e2dbf25a7d597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da67acb9b37cf139da014f5bc11e2dbf25a7d597", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da67acb9b37cf139da014f5bc11e2dbf25a7d597/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e3b1778b6207a10f2f1534fc9f01e6c8320a1dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3b1778b6207a10f2f1534fc9f01e6c8320a1dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3b1778b6207a10f2f1534fc9f01e6c8320a1dc"}], "stats": {"total": 151, "additions": 135, "deletions": 16}, "files": [{"sha": "9697dd9017024b2d2684805aeb5313718fd5b4b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -1,3 +1,11 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* tree-diagnostic.c (default_tree_printer): Handle %G.\n+\t* gimple-pretty-print.h (percent_G_format): Declare new function.\n+\t* gimple-pretty-print.c (percent_G_format): Define.\n+\t* tree-pretty-print.c (percent_K_format): Add argument.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR translation/79998"}, {"sha": "155383de773d2cc0a52d3f855ac13c006f3bd49f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -1,3 +1,10 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* c-format.h (T89_G): New macro.\n+\t* c-format.c (local_gcall_ptr_node): New variable.\n+\t(init_dynamic_diag_info): Initialize it.\n+\n 2017-08-11  Martin Liska  <mliska@suse.cz>\n \n \t* c-opts.c (c_common_post_options): Replace ASM_OUTPUT_DEF with"}, {"sha": "7c9095c2a5bab02b6dac1651756676b3d0744dc8", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -56,6 +56,7 @@ struct function_format_info\n \n /* Initialized in init_dynamic_diag_info.  */\n static GTY(()) tree local_tree_type_node;\n+static GTY(()) tree local_gcall_ptr_node;\n static GTY(()) tree locus;\n \n static bool decode_format_attr (tree, function_format_info *, int);\n@@ -689,7 +690,9 @@ static const format_char_info gcc_diag_char_table[] =\n \n   /* Custom conversion specifiers.  */\n \n-  /* These will require a \"tree\" at runtime.  */\n+  /* G requires a \"gcall*\" argument at runtime.  */\n+  { \"G\",   1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\\\"\",   NULL },\n+  /* K requires a \"tree\" argument at runtime.  */\n   { \"K\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"\\\"\",   NULL },\n \n   { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"//cR\",   NULL },\n@@ -718,6 +721,9 @@ static const format_char_info gcc_tdiag_char_table[] =\n   { \"E\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n   { \"K\", 1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n+  /* G requires a \"gcall*\" argument at runtime.  */\n+  { \"G\", 1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n+\n   { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n   { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"/cR\",   NULL },\n@@ -747,6 +753,9 @@ static const format_char_info gcc_cdiag_char_table[] =\n   { \"E\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n   { \"K\",   1, STD_C89, { T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n \n+  /* G requires a \"gcall*\" argument at runtime.  */\n+  { \"G\",   1, STD_C89, { T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\\\"\",   NULL },\n+\n   { \"v\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n   { \"r\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",    \"/cR\",   NULL },\n@@ -777,6 +786,9 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   { \"K\", 1, STD_C89,{ T89_T,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n   { \"v\", 0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q#\",  \"\",   NULL },\n \n+  /* G requires a \"gcall*\" argument at runtime.  */\n+  { \"G\", 1, STD_C89,{ T89_G,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\",   \"\\\"\",   NULL },\n+\n   /* These accept either an 'int' or an 'enum tree_code' (which is handled as an 'int'.)  */\n   { \"CLOPQ\",0,STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n \n@@ -3834,6 +3846,29 @@ init_dynamic_diag_info (void)\n \tlocal_tree_type_node = void_type_node;\n     }\n \n+  /* Similar to the above but for gcall*.  */\n+  if (!local_gcall_ptr_node\n+      || local_gcall_ptr_node == void_type_node)\n+    {\n+      if ((local_gcall_ptr_node = maybe_get_identifier (\"gcall\")))\n+\t{\n+\t  local_gcall_ptr_node\n+\t    = identifier_global_value (local_gcall_ptr_node);\n+\t  if (local_gcall_ptr_node)\n+\t    {\n+\t      if (TREE_CODE (local_gcall_ptr_node) != TYPE_DECL)\n+\t\t{\n+\t\t  error (\"%<gcall%> is not defined as a type\");\n+\t\t  local_gcall_ptr_node = 0;\n+\t\t}\n+\t      else\n+\t\tlocal_gcall_ptr_node = TREE_TYPE (local_gcall_ptr_node);\n+\t    }\n+\t}\n+      else\n+\tlocal_gcall_ptr_node = void_type_node;\n+    }\n+\n   static tree hwi;\n \n   if (!hwi)"}, {"sha": "05e9bb73ef1326136adb1e62bfbec5b8ecfa0133", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -298,6 +298,7 @@ struct format_kind_info\n #define T_UC\t&unsigned_char_type_node\n #define T99_UC\t{ STD_C99, NULL, T_UC }\n #define T_V\t&void_type_node\n+#define T89_G   { STD_C89, NULL, &local_gcall_ptr_node }\n #define T89_T   { STD_C89, NULL, &local_tree_type_node }\n #define T89_V\t{ STD_C89, NULL, T_V }\n #define T_W\t&wchar_type_node"}, {"sha": "3db4189c7d43b509b3b3a67206cc7a213e629a2b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -1,3 +1,8 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* c-objc-common.c (c_objc_common_init): Handle 'G'.\n+\n 2017-08-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81795"}, {"sha": "8f4d3eb91c538538db7f0797fd0b6d7ac6ec8bb4", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"c-family/c-pretty-print.h\"\n #include \"tree-pretty-print.h\"\n+#include \"gimple-pretty-print.h\"\n #include \"langhooks.h\"\n #include \"c-objc-common.h\"\n \n@@ -66,6 +67,8 @@ c_objc_common_init (void)\n    %D: a general decl,\n    %E: an identifier or expression,\n    %F: a function declaration,\n+   %G: a Gimple call statement,\n+   %K: a CALL_EXPR,\n    %T: a type.\n    %V: a list of type qualifiers from a tree.\n    %v: an explicit list of type qualifiers\n@@ -87,9 +90,16 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n   if (precision != 0 || wide)\n     return false;\n \n+  if (*spec == 'G')\n+    {\n+      percent_G_format (text);\n+      return true;\n+    }\n+\n   if (*spec == 'K')\n     {\n-      percent_K_format (text);\n+      t = va_arg (*text->args_ptr, tree);\n+      percent_K_format (text, t);\n       return true;\n     }\n "}, {"sha": "3fd74bfc196f535f71724aa832a11c38476e67cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -1,3 +1,8 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* error.c (cp_printer): Handle 'G'.\n+\n 2017-08-11  Martin Liska  <mliska@suse.cz>\n \n \t* decl2.c (get_tls_init_fn): Replace ASM_OUTPUT_DEF with"}, {"sha": "e4071547091ecaa93bc963c681f15f458155a6b1", "filename": "gcc/cp/error.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"cxx-pretty-print.h\"\n #include \"tree-pretty-print.h\"\n+#include \"gimple-pretty-print.h\"\n #include \"c-family/c-objc.h\"\n #include \"ubsan.h\"\n #include \"internal-fn.h\"\n@@ -4050,8 +4051,13 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n     case 'V': result = cv_to_string (next_tree, verbose);\tbreak;\n     case 'X': result = eh_spec_to_string (next_tree, verbose);  break;\n \n+    case 'G':\n+      percent_G_format (text);\n+      return true;\n+\n     case 'K':\n-      percent_K_format (text);\n+      t = va_arg (*text->args_ptr, tree);\n+      percent_K_format (text, t);\n       return true;\n \n     case 'H':"}, {"sha": "ed8e51c1c4677735462f88f460db64ee6cb63924", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -2911,3 +2911,22 @@ gimple_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n   pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n }\n \n+\n+/* Handle the %G format for TEXT.  Same as %K in handle_K_format in\n+   tree-pretty-print.c but with a Gimple call statement as an argument.  */\n+\n+void\n+percent_G_format (text_info *text)\n+{\n+  gcall *stmt = va_arg (*text->args_ptr, gcall*);\n+\n+  /* Build a call expression from the Gimple call statement and\n+     pass it to the K formatter that knows how to format it.  */\n+  tree exp = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n+  CALL_EXPR_FN (exp) = gimple_call_fn (stmt);\n+  TREE_TYPE (exp) = gimple_call_return_type (stmt);\n+  CALL_EXPR_STATIC_CHAIN (exp) = gimple_call_chain (stmt);\n+  SET_EXPR_LOCATION (exp, gimple_location (stmt));\n+\n+  percent_K_format (text, exp);\n+}"}, {"sha": "08720f4593661c7a0a4b929813c2ed840f05b512", "filename": "gcc/gimple-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fgimple-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Fgimple-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.h?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -35,5 +35,6 @@ extern void pp_gimple_stmt_1 (pretty_printer *, gimple *, int, dump_flags_t);\n extern void gimple_dump_bb (FILE *, basic_block, int, dump_flags_t);\n extern void gimple_dump_bb_for_graph (pretty_printer *, basic_block);\n extern void dump_ssaname_info_to_file (FILE *, tree, int);\n+extern void percent_G_format (text_info *);\n \n #endif /* ! GCC_GIMPLE_PRETTY_PRINT_H */"}, {"sha": "2bd4fad515323138957bc83e1777844b429e98e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -1,3 +1,8 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* gcc.dg/format/gcc_diag-10.c: Exercise %G.\n+\n 2017-08-14  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/ucnid-5.c: Skip on AIX."}, {"sha": "9bda73bc628bf548eeac29e3240f7192e0a302b2", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-10.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-10.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -15,6 +15,9 @@ typedef struct location_s\n union tree_node;\n typedef union tree_node *tree;\n \n+/* Define gcall as a dummy type.  The typedef must be provided for\n+   the C test to find the symbol.  */\n+typedef struct gcall gcall;\n \n #define FORMAT(kind) __attribute__ ((format (__gcc_## kind ##__, 1, 2)))\n \n@@ -23,12 +26,13 @@ void cdiag (const char*, ...) FORMAT (cdiag);\n void tdiag (const char*, ...) FORMAT (tdiag);\n void cxxdiag (const char*, ...) FORMAT (cxxdiag);\n \n-void test_diag (tree t)\n+void test_diag (tree t, gcall *gc)\n {\n   diag (\"%<\");   /* { dg-warning \"unterminated quoting directive\" } */\n   diag (\"%>\");   /* { dg-warning \"unmatched quoting directive \" } */\n   diag (\"%<foo%<bar%>%>\");   /* { dg-warning \"nested quoting directive\" } */\n \n+  diag (\"%G\", gc);\n   diag (\"%K\", t);\n \n   diag (\"%R\");       /* { dg-warning \"unmatched color reset directive\" } */\n@@ -38,14 +42,15 @@ void test_diag (tree t)\n   diag (\"%r%r%R\", \"\", \"\");\n   diag (\"%r%R%r%R\", \"\", \"\");\n \n+  diag (\"%<%G%>\", gc);  /* { dg-warning \".G. conversion used within a quoted sequence\" } */\n   diag (\"%<%K%>\", t);   /* { dg-warning \".K. conversion used within a quoted sequence\" } */\n \n   diag (\"%<%R%>\");      /* { dg-warning \"unmatched color reset directive\" } */\n   diag (\"%<%r%>\", \"\");  /* { dg-warning \"unterminated color directive\" } */\n   diag (\"%<%r%R%>\", \"\");\n }\n \n-void test_cdiag (tree t)\n+void test_cdiag (tree t, gcall *gc)\n {\n   cdiag (\"%<\");   /* { dg-warning \"unterminated quoting directive\" } */\n   cdiag (\"%>\");   /* { dg-warning \"unmatched quoting directive \" } */\n@@ -54,6 +59,7 @@ void test_cdiag (tree t)\n   cdiag (\"%D\", t);       /* { dg-warning \".D. conversion used unquoted\" } */\n   cdiag (\"%E\", t);\n   cdiag (\"%F\", t);       /* { dg-warning \".F. conversion used unquoted\" } */\n+  cdiag (\"%G\", gc);\n   cdiag (\"%K\", t);\n \n   cdiag (\"%R\");       /* { dg-warning \"unmatched color reset directive\" } */\n@@ -69,6 +75,7 @@ void test_cdiag (tree t)\n   cdiag (\"%<%D%>\", t);\n   cdiag (\"%<%E%>\", t);\n   cdiag (\"%<%F%>\", t);\n+  cdiag (\"%<%G%>\", gc);  /* { dg-warning \".G. conversion used within a quoted sequence\" } */\n   cdiag (\"%<%K%>\", t);   /* { dg-warning \".K. conversion used within a quoted sequence\" } */\n \n   cdiag (\"%<%R%>\");      /* { dg-warning \"unmatched color reset directive\" } */\n@@ -83,14 +90,15 @@ void test_cdiag (tree t)\n   cdiag (\"%<%qT%>\", t);  /* { dg-warning \".q. flag used within a quoted sequence\" } */\n }\n \n-void test_tdiag (tree t)\n+void test_tdiag (tree t, gcall *gc)\n {\n   tdiag (\"%<\");       /* { dg-warning \"unterminated quoting directive\" } */\n   tdiag (\"%>\");       /* { dg-warning \"unmatched quoting directive \" } */\n   tdiag (\"%<foo%<bar%>%>\");   /* { dg-warning \"nested quoting directive\" } */\n \n   tdiag (\"%D\", t);       /* { dg-warning \".D. conversion used unquoted\" } */\n   tdiag (\"%E\", t);\n+  tdiag (\"%G\", gc);\n   tdiag (\"%K\", t);\n \n   tdiag (\"%R\");          /* { dg-warning \"unmatched color reset directive\" } */\n@@ -105,6 +113,7 @@ void test_tdiag (tree t)\n \n   tdiag (\"%<%D%>\", t);\n   tdiag (\"%<%E%>\", t);\n+  tdiag (\"%<%G%>\", gc);  /* { dg-warning \".G. conversion used within a quoted sequence\" } */\n   tdiag (\"%<%K%>\", t);   /* { dg-warning \".K. conversion used within a quoted sequence\" } */\n \n   tdiag (\"%<%R%>\");      /* { dg-warning \"unmatched color reset directive\" } */\n@@ -118,12 +127,14 @@ void test_tdiag (tree t)\n   tdiag (\"%<%qT%>\", t);  /* { dg-warning \".q. flag used within a quoted sequence\" } */\n }\n \n-void test_cxxdiag (tree t)\n+void test_cxxdiag (tree t, gcall *gc)\n {\n   cxxdiag (\"%A\", t);     /* { dg-warning \".A. conversion used unquoted\" } */\n   cxxdiag (\"%D\", t);     /* { dg-warning \".D. conversion used unquoted\" } */\n   cxxdiag (\"%E\", t);\n   cxxdiag (\"%F\", t);     /* { dg-warning \".F. conversion used unquoted\" } */\n+  cxxdiag (\"%G\", gc);\n+  cxxdiag (\"%K\", t);\n \n   cxxdiag (\"%R\");        /* { dg-warning \"unmatched color reset directive\" } */\n   cxxdiag (\"%r\", \"\");    /* { dg-warning \"unterminated color directive\" } */"}, {"sha": "023e896a34a524dda37c6acd14cda73ed5538e66", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"diagnostic.h\"\n #include \"tree-pretty-print.h\"\n+#include \"gimple-pretty-print.h\"\n #include \"tree-diagnostic.h\"\n #include \"langhooks.h\"\n #include \"intl.h\"\n@@ -275,8 +276,13 @@ default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       t = va_arg (*text->args_ptr, tree);\n       break;\n \n+    case 'G':\n+      percent_G_format (text);\n+      return true;\n+\n     case 'K':\n-      percent_K_format (text);\n+      t = va_arg (*text->args_ptr, tree);\n+      percent_K_format (text, t);\n       return true;\n \n     default:"}, {"sha": "c7509af198be40add91b5e52bd8cc9eefca7322c", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"internal-fn.h\"\n #include \"gomp-constants.h\"\n+#include \"gimple.h\"\n \n /* Local functions, macros and variables.  */\n static const char *op_symbol (const_tree);\n@@ -3970,18 +3971,17 @@ newline_and_indent (pretty_printer *pp, int spc)\n   INDENT (spc);\n }\n \n-/* Handle a %K format for TEXT.  Separate from default_tree_printer so\n-   it can also be used in front ends.\n-   %K: a statement, from which EXPR_LOCATION and TREE_BLOCK will be recorded.\n-*/\n+/* Handle the %K format for TEXT.  Separate from default_tree_printer\n+   so it can also be used in front ends.\n+   Argument is a statement from which EXPR_LOCATION and TREE_BLOCK will\n+   be recorded.  */\n \n void\n-percent_K_format (text_info *text)\n+percent_K_format (text_info *text, tree t)\n {\n-  tree t = va_arg (*text->args_ptr, tree), block;\n   text->set_location (0, EXPR_LOCATION (t), true);\n   gcc_assert (pp_ti_abstract_origin (text) != NULL);\n-  block = TREE_BLOCK (t);\n+  tree block = TREE_BLOCK (t);\n   *pp_ti_abstract_origin (text) = NULL;\n \n   if (in_lto_p)"}, {"sha": "d17c5a504523d4392de2e1271e54d9815d3c260a", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da67acb9b37cf139da014f5bc11e2dbf25a7d597/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=da67acb9b37cf139da014f5bc11e2dbf25a7d597", "patch": "@@ -45,7 +45,7 @@ extern int op_code_prio (enum tree_code);\n extern int op_prio (const_tree);\n extern const char *op_symbol_code (enum tree_code);\n extern void print_call_name (pretty_printer *, tree, dump_flags_t);\n-extern void percent_K_format (text_info *);\n+extern void percent_K_format (text_info *, tree);\n extern void pp_tree_identifier (pretty_printer *, tree);\n extern void dump_function_header (FILE *, tree, dump_flags_t);\n extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);"}]}