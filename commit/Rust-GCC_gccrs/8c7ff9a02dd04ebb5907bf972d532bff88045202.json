{"sha": "8c7ff9a02dd04ebb5907bf972d532bff88045202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3ZmY5YTAyZGQwNGViYjU5MDdiZjk3MmQ1MzJiZmY4ODA0NTIwMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:13:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:13:42Z"}, "message": "2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n\n\t* gnat_ugn.texi, vms_data.ads: Add documentation of -j option for\n\tgnatelim.\n\n2014-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* gnat_rm.texi (Pragma Optimize_Alignment): Document the effect\n\tof the pragma on individual objects.\n\n2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb Node29 is now used as BIP_Initialization_Call.\n\t(BIP_Initialization_Call): New routine.\n\t(Set_BIP_Initialization_Call): New routine.\n\t(Write_Field29_Name): Add an entry for constants and variables.\n\t* einfo.ads Add new attribute BIP_Initialization_Call and update\n\tits usage in nodes.\n\t(BIP_Initialization_Call): New routine along with pragma Inline.\n\t(Set_BIP_Initialization_Call): New routine along with pragma Inline.\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n\tAdd local declaration Res_Decl. Capture the build-in-place\n\tinitialization call when the related object declaration has\n\tcreated a transient block.\n\t* exp_ch7.adb (Process_Transient_Objects): Add local variable\n\tFin_Insrt. Recognize a scenario where an object declaration acts\n\tas a transient context and is initialized by a build-in-place\n\tfunction call.\n\nFrom-SVN: r207543", "tree": {"sha": "42e7228e879dc2072cd4a58fb61298bb9c4c44e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e7228e879dc2072cd4a58fb61298bb9c4c44e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7ff9a02dd04ebb5907bf972d532bff88045202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7ff9a02dd04ebb5907bf972d532bff88045202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7ff9a02dd04ebb5907bf972d532bff88045202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7ff9a02dd04ebb5907bf972d532bff88045202/comments", "author": null, "committer": null, "parents": [{"sha": "a0367a97c5b4c714b43066ea44c66333f0526056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0367a97c5b4c714b43066ea44c66333f0526056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0367a97c5b4c714b43066ea44c66333f0526056"}], "stats": {"total": 205, "additions": 166, "deletions": 39}, "files": [{"sha": "8e027575e76bef66c10544059493da5e83d9e732", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -1,3 +1,32 @@\n+2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n+\n+\t* gnat_ugn.texi, vms_data.ads: Add documentation of -j option for\n+\tgnatelim.\n+\n+2014-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat_rm.texi (Pragma Optimize_Alignment): Document the effect\n+\tof the pragma on individual objects.\n+\n+2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb Node29 is now used as BIP_Initialization_Call.\n+\t(BIP_Initialization_Call): New routine.\n+\t(Set_BIP_Initialization_Call): New routine.\n+\t(Write_Field29_Name): Add an entry for constants and variables.\n+\t* einfo.ads Add new attribute BIP_Initialization_Call and update\n+\tits usage in nodes.\n+\t(BIP_Initialization_Call): New routine along with pragma Inline.\n+\t(Set_BIP_Initialization_Call): New routine along with pragma Inline.\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration):\n+\tAdd local declaration Res_Decl. Capture the build-in-place\n+\tinitialization call when the related object declaration has\n+\tcreated a transient block.\n+\t* exp_ch7.adb (Process_Transient_Objects): Add local variable\n+\tFin_Insrt. Recognize a scenario where an object declaration acts\n+\tas a transient context and is initialized by a build-in-place\n+\tfunction call.\n+\n 2014-02-06  Pascal Obry  <obry@adacore.com>\n \n \t* prj-util.adb (For_Interface_Sources): Fix handling of required"}, {"sha": "c1e0dd17849b35204f77103c724cabdfd0621c1d", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -242,6 +242,7 @@ package body Einfo is\n    --    Initialization_Statements       Node28\n    --    Underlying_Record_View          Node28\n \n+   --    BIP_Initialization_Call         Node29\n    --    Subprograms_For_Type            Node29\n \n    --    Corresponding_Equality          Node30\n@@ -767,6 +768,12 @@ package body Einfo is\n       return Elist16 (Id);\n    end Body_References;\n \n+   function BIP_Initialization_Call (Id : E) return N is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      return Node29 (Id);\n+   end BIP_Initialization_Call;\n+\n    function C_Pass_By_Copy (Id : E) return B is\n    begin\n       pragma Assert (Is_Record_Type (Id));\n@@ -3434,6 +3441,12 @@ package body Einfo is\n       Set_Elist16 (Id, V);\n    end Set_Body_References;\n \n+   procedure Set_BIP_Initialization_Call (Id : E; V : N) is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Constant, E_Variable));\n+      Set_Node29 (Id, V);\n+   end Set_BIP_Initialization_Call;\n+\n    procedure Set_C_Pass_By_Copy (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Record_Type (Id) and then Is_Base_Type (Id));\n@@ -9419,6 +9432,10 @@ package body Einfo is\n    procedure Write_Field29_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+         when E_Constant                                   |\n+              E_Variable                                   =>\n+            Write_Str (\"BIP_Initialization_Call\");\n+\n          when Type_Kind =>\n             Write_Str (\"Subprograms_For_Type\");\n "}, {"sha": "52ef9fad55fef86e32eaed5f444fff21401166d8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -499,6 +499,14 @@ package Einfo is\n --       defines the related state. If the body refines the said state, all\n --       references on this list are illegal due to the visible refinement.\n \n+--    BIP_Initialization_Call (Node29)\n+--       Defined in constants and variables whose corresponding declaration\n+--       is wrapped in a transient block and the inital value is provided by\n+--       a build-in-place function call. Contains the relocated build-in-place\n+--       call after the expansion has decoupled the call from the object. This\n+--       attribute is used by the finalization machinery to insert cleanup code\n+--       for all additional transient variables found in the transient block.\n+\n --    C_Pass_By_Copy (Flag125) [implementation base type only]\n --       Defined in record types. Set if a pragma Convention for the record\n --       type specifies convention C_Pass_By_Copy. This convention name is\n@@ -5307,6 +5315,7 @@ package Einfo is\n    --    Interface_Name                      (Node21)   (constants only)\n    --    Related_Type                        (Node27)   (constants only)\n    --    Initialization_Statements           (Node28)\n+   --    BIP_Initialization_Call             (Node29)\n    --    Linker_Section_Pragma               (Node33)\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n@@ -6013,6 +6022,7 @@ package Einfo is\n    --    Last_Assignment                     (Node26)\n    --    Related_Type                        (Node27)\n    --    Initialization_Statements           (Node28)\n+   --    BIP_Initialization_Call             (Node29)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n    --    Has_Alignment_Clause                (Flag46)\n@@ -6290,6 +6300,7 @@ package Einfo is\n    function Body_Entity                         (Id : E) return E;\n    function Body_Needed_For_SAL                 (Id : E) return B;\n    function Body_References                     (Id : E) return L;\n+   function BIP_Initialization_Call             (Id : E) return N;\n    function CR_Discriminant                     (Id : E) return E;\n    function C_Pass_By_Copy                      (Id : E) return B;\n    function Can_Never_Be_Null                   (Id : E) return B;\n@@ -6913,6 +6924,7 @@ package Einfo is\n    procedure Set_Body_Entity                     (Id : E; V : E);\n    procedure Set_Body_Needed_For_SAL             (Id : E; V : B := True);\n    procedure Set_Body_References                 (Id : E; V : L);\n+   procedure Set_BIP_Initialization_Call         (Id : E; V : N);\n    procedure Set_CR_Discriminant                 (Id : E; V : E);\n    procedure Set_C_Pass_By_Copy                  (Id : E; V : B := True);\n    procedure Set_Can_Never_Be_Null               (Id : E; V : B := True);\n@@ -7650,6 +7662,7 @@ package Einfo is\n    pragma Inline (Body_Entity);\n    pragma Inline (Body_Needed_For_SAL);\n    pragma Inline (Body_References);\n+   pragma Inline (BIP_Initialization_Call);\n    pragma Inline (CR_Discriminant);\n    pragma Inline (C_Pass_By_Copy);\n    pragma Inline (Can_Never_Be_Null);\n@@ -8121,6 +8134,7 @@ package Einfo is\n    pragma Inline (Set_Body_Entity);\n    pragma Inline (Set_Body_Needed_For_SAL);\n    pragma Inline (Set_Body_References);\n+   pragma Inline (Set_BIP_Initialization_Call);\n    pragma Inline (Set_CR_Discriminant);\n    pragma Inline (Set_C_Pass_By_Copy);\n    pragma Inline (Set_Can_Never_Be_Null);"}, {"sha": "556bfe08b1564ddbc0baf95a3cb4487e8eee1c96", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -10466,6 +10466,7 @@ package body Exp_Ch6 is\n       Pass_Caller_Acc : Boolean := False;\n       New_Expr        : Node_Id;\n       Ref_Type        : Entity_Id;\n+      Res_Decl        : Node_Id;\n       Result_Subt     : Entity_Id;\n \n    begin\n@@ -10678,11 +10679,12 @@ package body Exp_Ch6 is\n       Set_Etype (Def_Id, Ref_Type);\n       Set_Is_Known_Non_Null (Def_Id);\n \n-      Insert_After_And_Analyze (Ptr_Typ_Decl,\n+      Res_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Def_Id,\n           Object_Definition   => New_Reference_To (Ref_Type, Loc),\n-          Expression          => New_Expr));\n+          Expression          => New_Expr);\n+      Insert_After_And_Analyze (Ptr_Typ_Decl, Res_Decl);\n \n       --  If the result subtype of the called function is constrained and\n       --  is not itself the return expression of an enclosing BIP function,\n@@ -10691,6 +10693,24 @@ package body Exp_Ch6 is\n       if Is_Constrained (Underlying_Type (Result_Subt))\n         and then not Is_Return_Object (Defining_Identifier (Object_Decl))\n       then\n+         --  The related object declaration is encased in a transient block\n+         --  because the build-in-place function call contains at least one\n+         --  nested function call that produces a controlled transient\n+         --  temporary:\n+\n+         --    Obj : ... := BIP_Func_Call (Ctrl_Func_Call);\n+\n+         --  Since the build-in-place expansion decouples the call from the\n+         --  object declaration, the finalization machinery lacks the context\n+         --  which prompted the generation of the transient block. To resolve\n+         --  this scenario, store the build-in-place call.\n+\n+         if Scope_Is_Transient\n+           and then Node_To_Be_Wrapped = Object_Decl\n+         then\n+            Set_BIP_Initialization_Call (Obj_Def_Id, Res_Decl);\n+         end if;\n+\n          Set_Expression (Object_Decl, Empty);\n          Set_No_Initialization (Object_Decl);\n \n@@ -10790,9 +10810,9 @@ package body Exp_Ch6 is\n \n    begin\n       pragma Assert (Nkind (Allocator) = N_Allocator\n-                       and then Nkind (Function_Call) = N_Function_Call);\n+                      and then Nkind (Function_Call) = N_Function_Call);\n       pragma Assert (Convention (Function_Id) = Convention_CPP\n-                       and then Is_Constructor (Function_Id));\n+                      and then Is_Constructor (Function_Id));\n       pragma Assert (Is_Constrained (Underlying_Type (Result_Subt)));\n \n       --  Replace the initialized allocator of form \"new T'(Func (...))\" with"}, {"sha": "822f689304eb330dd004c3093087cd87d8879750", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -4487,6 +4487,7 @@ package body Exp_Ch7 is\n          Fin_Block : Node_Id;\n          Fin_Data  : Finalization_Exception_Data;\n          Fin_Decls : List_Id;\n+         Fin_Insrt : Node_Id;\n          Last_Fin  : Node_Id := Empty;\n          Loc       : Source_Ptr;\n          Obj_Id    : Entity_Id;\n@@ -4502,11 +4503,34 @@ package body Exp_Ch7 is\n       --  Start of processing for Process_Transient_Objects\n \n       begin\n+         --  Recognize a scenario where the transient context is an object\n+         --  declaration initialized by a build-in-place function call:\n+\n+         --    Obj : ... := BIP_Function_Call (Ctrl_Func_Call);\n+\n+         --  The rough expansion of the above is:\n+\n+         --    Temp : ... := Ctrl_Func_Call;\n+         --    Obj  : ...;\n+         --    Res  : ... := BIP_Func_Call (..., Obj, ...);\n+\n+         --  The finalization of any controlled transient must happen after\n+         --  the build-in-place function call is executed.\n+\n+         if Nkind (N) = N_Object_Declaration\n+           and then Present (BIP_Initialization_Call (Defining_Identifier (N)))\n+         then\n+            Must_Hook := True;\n+            Fin_Insrt := BIP_Initialization_Call (Defining_Identifier (N));\n+\n          --  Search the context for at least one subprogram call. If found, the\n          --  machinery exports all transient objects to the enclosing finalizer\n          --  due to the possibility of abnormal call termination.\n \n-         Detect_Subprogram_Call (N);\n+         else\n+            Detect_Subprogram_Call (N);\n+            Fin_Insrt := Last_Object;\n+         end if;\n \n          --  Examine all objects in the list First_Object .. Last_Object\n \n@@ -4689,7 +4713,7 @@ package body Exp_Ch7 is\n                if Present (Prev_Fin) then\n                   Insert_Before_And_Analyze (Prev_Fin, Fin_Block);\n                else\n-                  Insert_After_And_Analyze (Last_Object,\n+                  Insert_After_And_Analyze (Fin_Insrt,\n                     Make_Block_Statement (Loc,\n                       Declarations => Fin_Decls,\n                       Handled_Statement_Sequence =>\n@@ -4717,9 +4741,7 @@ package body Exp_Ch7 is\n          --       Raise_From_Controlled_Operation (E);\n          --    end if;\n \n-         if Built\n-           and then Present (Last_Fin)\n-         then\n+         if Built and then Present (Last_Fin) then\n             Insert_After_And_Analyze (Last_Fin,\n               Build_Raise_Statement (Fin_Data));\n          end if;"}, {"sha": "cc68e26c930a405ab508bb53ec5ca675425d7835", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -4812,13 +4812,14 @@ pragma Optimize_Alignment (TIME | SPACE | OFF);\n \n @noindent\n This is a configuration pragma which affects the choice of default alignments\n-for types where no alignment is explicitly specified. There is a time/space\n-trade-off in the selection of these values. Large alignments result in more\n-efficient code, at the expense of larger data space, since sizes have to be\n-increased to match these alignments. Smaller alignments save space, but the\n-access code is slower. The normal choice of default alignments (which is what\n-you get if you do not use this pragma, or if you use an argument of OFF),\n-tries to balance these two requirements.\n+for types and objects where no alignment is explicitly specified. There is a\n+time/space trade-off in the selection of these values. Large alignments result\n+in more efficient code, at the expense of larger data space, since sizes have\n+to be increased to match these alignments. Smaller alignments save space, but\n+the access code is slower. The normal choice of default alignments for types\n+and individual alignment promotions for objects (which is what you get if you\n+do not use this pragma, or if you use an argument of OFF), tries to balance\n+these two requirements.\n \n Specifying SPACE causes smaller default alignments to be chosen in two cases.\n First any packed record is given an alignment of 1. Second, if a size is given\n@@ -4848,6 +4849,10 @@ whose length depends on a discriminant), has a pragma Pack, then it is not\n in general possible to set the alignment of such a record to one, so the\n pragma is ignored in this case (with a warning).\n \n+Specifying SPACE also disables individual alignment promotions for objects,\n+which occur when the compiler increases the alignment of a specific object\n+without changing the alignment of its type.\n+\n Specifying TIME causes larger default alignments to be chosen in the case of\n small types with sizes that are not a power of 2. For example, consider:\n "}, {"sha": "762528cc82b6b59bb2bff763f29726ec02ff5bd3", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -11300,6 +11300,13 @@ Put @command{gnatelim} output into a specified file. If this file already exists\n it is overridden. If this switch is not used, @command{gnatelim} outputs its results\n into @file{stderr}\n \n+@item ^-j^/PROCESSES=^@var{n}\n+@cindex @option{^-j^/PROCESSES^} (@command{gnatelim})\n+Use @var{n} processes to carry out the tree creations (internal representations\n+of the argument sources). On a multiprocessor machine this speeds up processing\n+of big sets of argument sources. If @var{n} is 0, then the maximum number of\n+parallel tree creations is the number of core processors on the platform.\n+\n @item ^-q^/QUIET^\n @cindex @option{^-q^/QUIET^} (@command{gnatelim})\n Quiet mode: by default @code{gnatelim} outputs to the standard error"}, {"sha": "82567eaffd903df5c16be7b888308aa7b8ce9aaf", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7ff9a02dd04ebb5907bf972d532bff88045202/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=8c7ff9a02dd04ebb5907bf972d532bff88045202", "patch": "@@ -4010,6 +4010,18 @@ package VMS_Data is\n    --   Do not generate pragmas for subprograms declared in the sources\n    --  listed in a specified file\n \n+   S_Elim_Processes : aliased constant S := \"/PROCESSES=#\"                 &\n+                                            \"-j#\";\n+\n+   --        /NOPROCESSES (D)\n+   --        /PROCESSES=NNN\n+   --\n+   --   Use NNN processes to carry out the tree creations (internal\n+   --   representations of the argument sources). On a multiprocessor machine\n+   --   this speeds up processing of big sets of argument sources. If NNN is 0,\n+   --   then the maximum number of parallel tree creations is the number of\n+   --   core processors on the platform.\n+\n    S_Elim_Project : aliased constant S := \"/PROJECT_FILE=<\"                &\n                                              \"-P>\";\n    --        /PROJECT_FILE=filename\n@@ -4108,29 +4120,30 @@ package VMS_Data is\n    --        QUIET         Some warning messages are suppressed\n \n    Elim_Switches : aliased constant Switches :=\n-                     (S_Elim_Add     'Access,\n-                      S_Elim_All     'Access,\n-                      S_Elim_Bind    'Access,\n-                      S_Elim_Comp    'Access,\n-                      S_Elim_Config  'Access,\n-                      S_Elim_Current 'Access,\n-                      S_Elim_Ext     'Access,\n-                      S_Elim_Files   'Access,\n-                      S_Elim_Follow  'Access,\n-                      S_Elim_GNATMAKE'Access,\n-                      S_Elim_Log     'Access,\n-                      S_Elim_Logfile 'Access,\n-                      S_Elim_Main    'Access,\n-                      S_Elim_Mess    'Access,\n-                      S_Elim_Nodisp  'Access,\n-                      S_Elim_Out     'Access,\n-                      S_Elim_Project 'Access,\n-                      S_Elim_Quiet   'Access,\n-                      S_Elim_Search  'Access,\n-                      S_Elim_Subdirs 'Access,\n-                      S_Elim_Time    'Access,\n-                      S_Elim_Verb    'Access,\n-                      S_Elim_Warn    'Access);\n+                     (S_Elim_Add      'Access,\n+                      S_Elim_All      'Access,\n+                      S_Elim_Bind     'Access,\n+                      S_Elim_Comp     'Access,\n+                      S_Elim_Config   'Access,\n+                      S_Elim_Current  'Access,\n+                      S_Elim_Ext      'Access,\n+                      S_Elim_Files    'Access,\n+                      S_Elim_Follow   'Access,\n+                      S_Elim_GNATMAKE 'Access,\n+                      S_Elim_Log      'Access,\n+                      S_Elim_Logfile  'Access,\n+                      S_Elim_Main     'Access,\n+                      S_Elim_Mess     'Access,\n+                      S_Elim_Nodisp   'Access,\n+                      S_Elim_Out      'Access,\n+                      S_Elim_Processes'Access,\n+                      S_Elim_Project  'Access,\n+                      S_Elim_Quiet    'Access,\n+                      S_Elim_Search   'Access,\n+                      S_Elim_Subdirs  'Access,\n+                      S_Elim_Time     'Access,\n+                      S_Elim_Verb     'Access,\n+                      S_Elim_Warn     'Access);\n \n    ----------------------------\n    -- Switches for GNAT FIND --"}]}