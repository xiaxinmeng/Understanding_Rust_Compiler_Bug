{"sha": "89e65674fafe82979607385d00c940f65f38267b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllNjU2NzRmYWZlODI5Nzk2MDczODVkMDBjOTQwZjY1ZjM4MjY3Yg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-08-11T07:13:17Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-08-11T07:13:17Z"}, "message": "sparc.c (const64_operand, [...]): New predicates.\n\n\t* config/sparc/sparc.c (const64_operand, const64_high_operand):\n\tNew predicates.\n\t* config/sparc/sparc.h: Declare them.\n\t(PREDICATE_CODES): Add them.\n\t* config/sparc/sparc.md (movdi_lo_sum_sp64_dbl,\n\tmovdi_high_sp64_dbl, xordi3_sp64_dbl): Use them.\n\nFrom-SVN: r21663", "tree": {"sha": "206db0b4fb7ecf3789566178ebbc3ddedb14b269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206db0b4fb7ecf3789566178ebbc3ddedb14b269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89e65674fafe82979607385d00c940f65f38267b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e65674fafe82979607385d00c940f65f38267b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89e65674fafe82979607385d00c940f65f38267b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89e65674fafe82979607385d00c940f65f38267b/comments", "author": null, "committer": null, "parents": [{"sha": "2a01c939370303ea0fe7aabdcee592cc3d4ec446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a01c939370303ea0fe7aabdcee592cc3d4ec446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a01c939370303ea0fe7aabdcee592cc3d4ec446"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "b4ce3a24677c46076a4a85f958975704792603c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e65674fafe82979607385d00c940f65f38267b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e65674fafe82979607385d00c940f65f38267b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89e65674fafe82979607385d00c940f65f38267b", "patch": "@@ -18,6 +18,13 @@ Tue Aug 11 04:46:01 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \t(define_insn zero_extendsidi2_insn_sp32): New pattern and\n \tassosciated forced split for it.\n \n+\t* config/sparc/sparc.c (const64_operand, const64_high_operand):\n+\tNew predicates.\n+\t* config/sparc/sparc.h: Declare them.\n+\t(PREDICATE_CODES): Add them.\n+\t* config/sparc/sparc.md (movdi_lo_sum_sp64_dbl,\n+\tmovdi_high_sp64_dbl, xordi3_sp64_dbl): Use them.\n+\n Mon Aug 10 22:57:24 1998  John Carr  <jfc@mit.edu>\n \n \t* config/sparc/sparc.md (define_insn jump): Output ba,pt not b,pt"}, {"sha": "32afae107cc6277f79ecfee4389dfa9ba6a56aa2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e65674fafe82979607385d00c940f65f38267b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e65674fafe82979607385d00c940f65f38267b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=89e65674fafe82979607385d00c940f65f38267b", "patch": "@@ -781,6 +781,36 @@ arith_operand (op, mode)\n   return SPARC_SIMM13_P (val);\n }\n \n+/* Return true if OP is a CONST_INT or a CONST_DOUBLE which can fit in the\n+   immediate field of OR and XOR instructions.  Used for 64-bit\n+   constant formation patterns.  */\n+int\n+const64_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return ((GET_CODE (op) == CONST_INT\n+\t   && SPARC_SIMM13_P (INTVAL (op)))\n+\t  || (GET_CODE (op) == CONST_DOUBLE\n+\t      && CONST_DOUBLE_HIGH (op) == 0\n+\t      && SPARC_SIMM13_P (CONST_DOUBLE_LOW (op)))\n+\t  || GET_CODE (op) == CONSTANT_P_RTX);\n+}\n+\n+/* The same, but considering what can fit for a sethi instruction.  */\n+int\n+const64_high_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return ((GET_CODE (op) == CONST_INT\n+\t   && SPARC_SETHI_P (INTVAL (op)))\n+\t  || (GET_CODE (op) == CONST_DOUBLE\n+\t      && CONST_DOUBLE_HIGH (op) == 0\n+\t      && SPARC_SETHI_P (CONST_DOUBLE_LOW (op)))\n+\t  || GET_CODE (op) == CONSTANT_P_RTX);\n+}\n+\n /* Return true if OP is a register, or is a CONST_INT that can fit in a\n    signed 11 bit immediate field.  This is an acceptable SImode operand for\n    the movcc instructions.  */"}, {"sha": "c643897fe6792592721345162034a600cb99be34", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e65674fafe82979607385d00c940f65f38267b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e65674fafe82979607385d00c940f65f38267b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=89e65674fafe82979607385d00c940f65f38267b", "patch": "@@ -3201,7 +3201,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n {\"uns_arith_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t    \\\n {\"clobbered_register\", {REG}},\t\t\t\t\t\t\t    \\\n {\"input_operand\", {SUBREG, REG, CONSTANT_P_RTX, CONST_INT, MEM}},\t\t    \\\n-{\"zero_operand\", {CONST_INT, CONSTANT_P_RTX}},\n+{\"zero_operand\", {CONST_INT, CONSTANT_P_RTX}},\t\t\t\t\t    \\\n+{\"const64_operand\", {CONST_INT, CONST_DOUBLE, CONSTANT_P_RTX}},\t\t\t    \\\n+{\"const64_high_operand\", {CONST_INT, CONST_DOUBLE, CONSTANT_P_RTX}},\n \n \n /* The number of Pmode words for the setjmp buffer.  */\n@@ -3240,6 +3242,8 @@ extern int arith_operand ();\n extern int call_operand_address ();\n extern int input_operand ();\n extern int zero_operand ();\n+extern int const64_operand ();\n+extern int const64_high_operand ();\n extern int cc_arithop ();\n extern int cc_arithopn ();\n extern int check_pic ();"}, {"sha": "f5897e6ca5792ff683c0b45d20a99e598846ad43", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89e65674fafe82979607385d00c940f65f38267b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89e65674fafe82979607385d00c940f65f38267b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=89e65674fafe82979607385d00c940f65f38267b", "patch": "@@ -2355,14 +2355,9 @@\n (define_insn \"*movdi_lo_sum_sp64_dbl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-                   (match_operand:DI 2 \"const_double_operand\" \"\")))]\n-  \"TARGET_ARCH64\n-   && CONST_DOUBLE_HIGH (operands[2]) == 0\"\n-  \"*\n-{\n-  operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n-  return \\\"or\\\\t%1, %%lo(%a2), %0\\\";\n-}\"\n+                   (match_operand:DI 2 \"const64_operand\" \"\")))]\n+  \"TARGET_ARCH64\"\n+  \"or\\\\t%1, %%lo(%a2), %0\"\n   [(set_attr \"type\" \"ialu\")\n    (set_attr \"length\" \"1\")])\n \n@@ -2376,14 +2371,9 @@\n \n (define_insn \"*movdi_high_sp64_dbl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(high:DI (match_operand:DI 1 \"const_double_operand\" \"\")))]\n-  \"TARGET_ARCH64\n-   && CONST_DOUBLE_HIGH (operands[1]) == 0\"\n-  \"*\n-{\n-  operands[1] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n-  return \\\"sethi\\\\t%%hi(%a1), %0\\\";\n-}\"\n+\t(high:DI (match_operand:DI 1 \"const64_high_operand\" \"\")))]\n+  \"TARGET_ARCH64\"\n+  \"sethi\\\\t%%hi(%a1), %0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n@@ -5604,14 +5594,9 @@ movtf_is_ok:\n (define_insn \"*xordi3_sp64_dbl\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n-\t\t(match_operand:DI 2 \"const_double_operand\" \"\")))]\n-  \"TARGET_ARCH64\n-   && CONST_DOUBLE_HIGH (operands[2]) == 0\"\n-  \"*\n-{\n-  operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n-  return \\\"xor\\\\t%1, %2, %0\\\";\n-}\"\n+\t\t(match_operand:DI 2 \"const64_operand\" \"\")))]\n+  \"TARGET_ARCH64\"\n+  \"xor\\\\t%1, %2, %0\"\n   [(set_attr \"type\" \"ialu\")\n    (set_attr \"length\" \"1\")])\n "}]}