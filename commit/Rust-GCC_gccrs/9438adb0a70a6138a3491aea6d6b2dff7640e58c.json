{"sha": "9438adb0a70a6138a3491aea6d6b2dff7640e58c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzOGFkYjBhNzBhNjEzOGEzNDkxYWVhNmQ2YjJkZmY3NjQwZTU4Yw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-12T17:55:30Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-12T17:55:30Z"}, "message": "re PR target/49868 (Implement named address space to place/access data in flash memory)\n\n\tPR target/49868\n\t* gcc.target/avr/torture/addr-space-1.h: New file.\n\t* gcc.target/avr/torture/addr-space-g.h: New test.\n\t* gcc.target/avr/torture/addr-space-0.h: New test.\n\t* gcc.target/avr/torture/addr-space-1.h: New test.\n\t* gcc.target/avr/torture/addr-space-x.h: New test.\n\nFrom-SVN: r185255", "tree": {"sha": "430b6000e82810d3f7e42fb9333df11fde911b29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/430b6000e82810d3f7e42fb9333df11fde911b29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9438adb0a70a6138a3491aea6d6b2dff7640e58c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9438adb0a70a6138a3491aea6d6b2dff7640e58c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9438adb0a70a6138a3491aea6d6b2dff7640e58c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9438adb0a70a6138a3491aea6d6b2dff7640e58c/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b928d32b668a27f88fa29204411a98262d9dfa44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b928d32b668a27f88fa29204411a98262d9dfa44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b928d32b668a27f88fa29204411a98262d9dfa44"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "a580cfd26ad334cda154de0eadfc883d16aa68c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9438adb0a70a6138a3491aea6d6b2dff7640e58c", "patch": "@@ -1,3 +1,12 @@\n+2012-03-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/49868\n+\t* gcc.target/avr/torture/addr-space-1.h: New file.\n+\t* gcc.target/avr/torture/addr-space-g.h: New test.\n+\t* gcc.target/avr/torture/addr-space-0.h: New test.\n+\t* gcc.target/avr/torture/addr-space-1.h: New test.\n+\t* gcc.target/avr/torture/addr-space-x.h: New test.\n+\t\n 2012-03-12  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.dg/tree-ssa/phi-opt-7.c: New testcase."}, {"sha": "880654201d2aa9d1b7fab2112f7e334dd99dc91a", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-1-0.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-0.c?ref=9438adb0a70a6138a3491aea6d6b2dff7640e58c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-do run } */\n+\n+#define __as __flash\n+\n+#include \"addr-space-1.h\""}, {"sha": "137526527706f9a72c8b7ecdb80cd667a7e0c04e", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-1-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-1.c?ref=9438adb0a70a6138a3491aea6d6b2dff7640e58c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99 -Tavr51-flash1.x\" } */\n+/* { dg-do run } */\n+\n+#define __as __flash1\n+\n+#include \"addr-space-1.h\""}, {"sha": "60feca145871bf5c589a42f05a780444e1579a3f", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-1-g.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-g.c?ref=9438adb0a70a6138a3491aea6d6b2dff7640e58c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-do run } */\n+\n+#define __as\n+\n+#include \"addr-space-1.h\""}, {"sha": "0b3c43a4be7bdc25b2e36b0196ac2e6ac7e6c47b", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-1-x.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1-x.c?ref=9438adb0a70a6138a3491aea6d6b2dff7640e58c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-std=gnu99\" } */\n+/* { dg-do run } */\n+\n+#define __as __memx\n+\n+#include \"addr-space-1.h\""}, {"sha": "322a5b8b3b6e6ff135f6a68e4422088570ba0ea9", "filename": "gcc/testsuite/gcc.target/avr/torture/addr-space-1.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9438adb0a70a6138a3491aea6d6b2dff7640e58c/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Faddr-space-1.h?ref=9438adb0a70a6138a3491aea6d6b2dff7640e58c", "patch": "@@ -0,0 +1,83 @@\n+#include <stdlib.h>\n+#include <string.h>\n+\n+typedef struct\n+{\n+  char i1;\n+  short i2;\n+  long i4;\n+  long long i8;\n+  char str[2][10];\n+} a_t;\n+\n+const __as a_t A =\n+  {\n+    12, 345, 678910, 1234567891011ll,\n+    {\n+      \"xxx..xxx\",\n+      \"yyy..yyy\"\n+    }\n+  };\n+\n+const __as volatile a_t V =\n+  {\n+    12+1, 345+1, 678910+1, 1234567891011ll+1,\n+    {\n+      \"XXX..XXX\",\n+      \"YYY..YYY\"\n+    }\n+  };\n+\n+a_t A2;\n+volatile a_t V2;\n+\n+int main (void)\n+{\n+  if (A.i1 != 12\n+      || A.i1 != V.i1 -1)\n+    abort();\n+\n+  if (A.i2 != 345\n+      || A.i2 != V.i2 -1)\n+    abort();\n+\n+  if (A.i4 != 678910\n+      || A.i4 != V.i4 -1)\n+    abort();\n+\n+  if (A.i8 != 1234567891011ll\n+      || A.i8 != V.i8 -1)\n+    abort();\n+\n+  A2 = A;\n+  V2 = V;\n+\n+  if (A2.i1 != 12\n+      || A2.i1 != V2.i1 -1)\n+    abort();\n+\n+  if (A2.i2 != 345\n+      || A2.i2 != V2.i2 -1)\n+    abort();\n+\n+  if (A2.i4 != 678910\n+      || A2.i4 != V2.i4 -1)\n+    abort();\n+\n+  if (A2.i8 != 1234567891011ll\n+      || A2.i8 != V2.i8 -1)\n+    abort();\n+\n+  if (strcmp (A2.str[0], \"xxx..xxx\"))\n+    abort();\n+  if (strcmp (A2.str[1], \"yyy..yyy\"))\n+    abort();\n+\n+  if (strcmp ((const char*) V2.str[0], \"XXX..XXX\"))\n+    abort();\n+  if (strcmp ((const char*) V2.str[1], \"YYY..YYY\"))\n+   abort();\n+  \n+  exit (0);\n+  return 0;\n+}"}]}