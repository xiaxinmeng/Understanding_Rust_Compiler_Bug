{"sha": "d5d27976c89bdc3d1429c741d30572bd85c0a92c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkMjc5NzZjODliZGMzZDE0MjljNzQxZDMwNTcyYmQ4NWMwYTkyYw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-09-23T11:39:48Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-09-23T11:39:48Z"}, "message": "[AArch64] Fix vcvt_high_f64_f32 and vcvt_figh_f32_f64 intrinsics.\n\ngcc/\n\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_float_truncate_hi_v4sf): Rewrite as an expand.\n\t(aarch64_float_truncate_hi_v4sf_le): New.\n\t(aarch64_float_truncate_hi_v4sf_be): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvt_high_1.c: New.\n\nFrom-SVN: r228044", "tree": {"sha": "49f8009dcb3308e28450ee4ea7f5b9c76d2c432f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49f8009dcb3308e28450ee4ea7f5b9c76d2c432f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d27976c89bdc3d1429c741d30572bd85c0a92c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d27976c89bdc3d1429c741d30572bd85c0a92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d27976c89bdc3d1429c741d30572bd85c0a92c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d27976c89bdc3d1429c741d30572bd85c0a92c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07dc170b6f2dd893e6b4befe6706dfc0e48771d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07dc170b6f2dd893e6b4befe6706dfc0e48771d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07dc170b6f2dd893e6b4befe6706dfc0e48771d9"}], "stats": {"total": 147, "additions": 145, "deletions": 2}, "files": [{"sha": "27e527dc97a7f42a1ba87c38e1d53e2d4acff27b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5d27976c89bdc3d1429c741d30572bd85c0a92c", "patch": "@@ -1,3 +1,10 @@\n+2015-09-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_float_truncate_hi_v4sf): Rewrite as an expand.\n+\t(aarch64_float_truncate_hi_v4sf_le): New.\n+\t(aarch64_float_truncate_hi_v4sf_be): Likewise.\n+\n 2015-09-23  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (intra_create_variable_infos): Build"}, {"sha": "5ab2f2b77635a54ee82c0d4bd1dd1b366e7dd7ff", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d5d27976c89bdc3d1429c741d30572bd85c0a92c", "patch": "@@ -1703,6 +1703,15 @@\n   [(set_attr \"type\" \"neon_fp_cvt_widen_s\")]\n )\n \n+;; ??? Note that the vectorizer usage of the vec_unpacks_[lo/hi] patterns\n+;; is inconsistent with vector ordering elsewhere in the compiler, in that\n+;; the meaning of HI and LO changes depending on the target endianness.\n+;; While elsewhere we map the higher numbered elements of a vector to\n+;; the lower architectural lanes of the vector, for these patterns we want\n+;; to always treat \"hi\" as referring to the higher architectural lanes.\n+;; Consequently, while the patterns below look inconsistent with our\n+;; other big-endian patterns their behaviour is as required.\n+\n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"\")\n    (match_operand:VQ_HSF 1 \"register_operand\" \"\")]\n@@ -1757,17 +1766,42 @@\n   [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n )\n \n-(define_insn \"aarch64_float_truncate_hi_<Vdbl>\"\n+(define_insn \"aarch64_float_truncate_hi_<Vdbl>_le\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=w\")\n     (vec_concat:<VDBL>\n       (match_operand:VDF 1 \"register_operand\" \"0\")\n       (float_truncate:VDF\n \t(match_operand:<VWIDE> 2 \"register_operand\" \"w\"))))]\n-  \"TARGET_SIMD\"\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"fcvtn2\\\\t%0.<Vdtype>, %2<Vmwtype>\"\n   [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n )\n \n+(define_insn \"aarch64_float_truncate_hi_<Vdbl>_be\"\n+  [(set (match_operand:<VDBL> 0 \"register_operand\" \"=w\")\n+    (vec_concat:<VDBL>\n+      (float_truncate:VDF\n+\t(match_operand:<VWIDE> 2 \"register_operand\" \"w\"))\n+      (match_operand:VDF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"fcvtn2\\\\t%0.<Vdtype>, %2<Vmwtype>\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n+)\n+\n+(define_expand \"aarch64_float_truncate_hi_<Vdbl>\"\n+  [(match_operand:<VDBL> 0 \"register_operand\" \"=w\")\n+   (match_operand:VDF 1 \"register_operand\" \"0\")\n+   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx (*gen) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN\n+\t\t\t     ? gen_aarch64_float_truncate_hi_<Vdbl>_be\n+\t\t\t     : gen_aarch64_float_truncate_hi_<Vdbl>_le;\n+  emit_insn (gen (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\n+)\n+\n (define_expand \"vec_pack_trunc_v2df\"\n   [(set (match_operand:V4SF 0 \"register_operand\")\n       (vec_concat:V4SF"}, {"sha": "3e722c2c89c48421f7120b431be9df0636d10ac0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d5d27976c89bdc3d1429c741d30572bd85c0a92c", "patch": "@@ -1,3 +1,7 @@\n+2015-09-23  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvt_high_1.c: New.\n+\n 2015-09-23  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/tree-ssa/restrict2.C: Un-XFAIL testcase."}, {"sha": "27c6b574abcda246874a6a789631f826d1494c4d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvt_high_1.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_high_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d27976c89bdc3d1429c741d30572bd85c0a92c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_high_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt_high_1.c?ref=d5d27976c89bdc3d1429c741d30572bd85c0a92c", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include \"arm_neon.h\"\n+\n+void abort (void);\n+\n+void\n+foo (void)\n+{\n+  /* Test vcvt_high_f32_f64.  */\n+  float32x2_t arg1;\n+  float64x2_t arg2;\n+  float32x4_t result;\n+  arg1 = vcreate_f32 (UINT64_C (0x3f0db5793f6e1892));\n+  arg2 = vcombine_f64 (vcreate_f64 (UINT64_C (0x3fe8e49d23fb575d)),\n+\t\t       vcreate_f64 (UINT64_C (0x3fd921291b3df73e)));\n+  //  Expect: \"result\" = 3ec909483f4724e93f0db5793f6e1892\n+  result = vcvt_high_f32_f64 (arg1, arg2);\n+  float32_t got;\n+  float32_t exp;\n+\n+  /* Lane 0.  */\n+  got = vgetq_lane_f32 (result, 0);\n+  exp = ((float32_t) 0.9300624132156372);\n+  if (((((exp / got) < ((float32_t) 0.999))\n+\t || ((exp / got) > ((float32_t) 1.001)))\n+     && (((exp - got) < ((float32_t) -1.0e-4))\n+\t || ((exp - got) > ((float32_t) 1.0e-4)))))\n+    abort ();\n+\n+  /* Lane 1.  */\n+  got = vgetq_lane_f32 (result, 1);\n+  exp = ((float32_t) 0.5535503029823303);\n+  if (((((exp / got) < ((float32_t) 0.999))\n+\t  || ((exp / got) > ((float32_t) 1.001)))\n+     && (((exp - got) < ((float32_t) -1.0e-4))\n+\t   || ((exp - got) > ((float32_t) 1.0e-4)))))\n+    abort ();\n+\n+  /* Lane 2.  */\n+  got = vgetq_lane_f32 (result, 2);\n+  exp = ((float32_t) 0.7779069617051665);\n+  if (((((exp / got) < ((float32_t) 0.999))\n+\t  || ((exp / got) > ((float32_t) 1.001)))\n+      && (((exp - got) < ((float32_t) -1.0e-4))\n+\t  || ((exp - got) > ((float32_t) 1.0e-4)))))\n+    abort ();\n+\n+  /* Lane 3.  */\n+  got = vgetq_lane_f32 (result, 3);\n+  exp = ((float32_t) 0.3926489606891329);\n+  if (((((exp / got) < ((float32_t) 0.999))\n+\t  || ((exp / got) > ((float32_t) 1.001)))\n+      && (((exp - got) < ((float32_t) -1.0e-4))\n+\t  || ((exp - got) > ((float32_t) 1.0e-4)))))\n+    abort ();\n+}\n+\n+void\n+bar (void)\n+{\n+  /* Test vcvt_high_f64_f32.  */\n+  float32x4_t arg1;\n+  float64x2_t result;\n+  arg1 = vcombine_f32 (vcreate_f32 (UINT64_C (0x3f7c5cf13f261f74)),\n+\t\t       vcreate_f32 (UINT64_C (0x3e3a7bc03f6ccc1d)));\n+  //  Expect: \"result\" = 3fc74f78000000003fed9983a0000000\n+  result = vcvt_high_f64_f32 (arg1);\n+\n+  float64_t got;\n+  float64_t exp;\n+\n+  /* Lane 0.  */\n+  got = vgetq_lane_f64 (result, 0);\n+  exp = 0.9249895215034485;\n+  if (((((exp / got) < 0.999)\n+\t || ((exp / got) > 1.001))\n+     && (((exp - got) < -1.0e-4)\n+\t || ((exp - got) > 1.0e-4))))\n+    abort ();\n+\n+  /* Lane 1.  */\n+  got = vgetq_lane_f64 (result, 1);\n+  exp = 0.1821126937866211;\n+  if (((((exp / got) < 0.999)\n+\t  || ((exp / got) > 1.001))\n+      && (((exp - got) < -1.0e-4)\n+\t  || ((exp - got) > 1.0e-4))))\n+    abort ();\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  foo ();\n+  bar ();\n+  return 0;\n+}"}]}