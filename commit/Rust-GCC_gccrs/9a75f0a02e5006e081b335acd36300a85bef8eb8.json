{"sha": "9a75f0a02e5006e081b335acd36300a85bef8eb8", "node_id": "C_kwDOANBUbNoAKDlhNzVmMGEwMmU1MDA2ZTA4MWIzMzVhY2QzNjMwMGE4NWJlZjhlYjg", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-04-03T14:04:06Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-04-03T14:04:06Z"}, "message": "PR modula2/109388 clang warnings related to Modula-2\n\nThis patch removes an unused parameter 'module' from\nDoVariableDeclaration in M2GCCDeclare.mod.  It also removes unused\nprocedures from PHBuild.bnf.\n\ngcc/m2/ChangeLog:\n\n\tPR modula2/109388\n\t* gm2-compiler/M2GCCDeclare.mod (DoVariableDeclaration):\n\tRemove second parameter module.  Adjust all callers to\n\tremove the second parameter.\n\t* gm2-compiler/PHBuild.bnf (CheckAndInsert): Remove.\n\t(InStopSet): Remove.\n\t(PeepToken): Remove.\n\t(PushQualident): Remove.\n\t(SimpleDes): Remove.\n\t(ActualParameters): Remove.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "903938d01a7695e70b92d351011c3cbe84978d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/903938d01a7695e70b92d351011c3cbe84978d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a75f0a02e5006e081b335acd36300a85bef8eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a75f0a02e5006e081b335acd36300a85bef8eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a75f0a02e5006e081b335acd36300a85bef8eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a75f0a02e5006e081b335acd36300a85bef8eb8/comments", "author": null, "committer": null, "parents": [{"sha": "da3fd01757297c1d20cf3dcd76046488da737569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3fd01757297c1d20cf3dcd76046488da737569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da3fd01757297c1d20cf3dcd76046488da737569"}], "stats": {"total": 168, "additions": 11, "deletions": 157}, "files": [{"sha": "8dceaae4c60c410506175582cb421108ea2b7cf3", "filename": "gcc/m2/gm2-compiler/M2GCCDeclare.mod", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a75f0a02e5006e081b335acd36300a85bef8eb8/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a75f0a02e5006e081b335acd36300a85bef8eb8/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2GCCDeclare.mod?ref=9a75f0a02e5006e081b335acd36300a85bef8eb8", "patch": "@@ -3153,10 +3153,11 @@ END FindOuterModule ;\n \n \n (*\n-   DoVariableDeclaration -\n+   DoVariableDeclaration - create a corresponding gcc variable and add the association\n+                           between the front end symbol var and the gcc tree.\n *)\n \n-PROCEDURE DoVariableDeclaration (var, module: CARDINAL; name: ADDRESS;\n+PROCEDURE DoVariableDeclaration (var: CARDINAL; name: ADDRESS;\n                                  isImported, isExported,\n                                  isTemporary, isGlobal: BOOLEAN;\n                                  scope: Tree) ;\n@@ -3174,7 +3175,7 @@ BEGIN\n       (*\n         There are two issues to deal with:\n \n-        (i)   LeftValue is really a pointer to GetSType(Son), which is built\n+        (i)   LeftValue is really a pointer to GetSType (var), which is built\n               here.\n         (ii)  Front end might have specified the back end use a particular\n               data type, in which case we use the specified type.\n@@ -3183,7 +3184,7 @@ BEGIN\n       varType := SkipType (GetVarBackEndType (var)) ;\n       IF varType=NulSym\n       THEN\n-         (* we have not explicity told back end the type, so build it *)\n+         (* We have not explicity told back end the type, so build it.  *)\n          varType := GetSType (var) ;\n          IF IsVariableAtAddress (var)\n          THEN\n@@ -3192,14 +3193,14 @@ BEGIN\n             type := BuildPointerType (Mod2Gcc (varType))\n          END\n       ELSE\n+         (* We have been requested to use varType.  *)\n          type := Mod2Gcc (varType)\n       END ;\n       Assert (AllDependantsFullyDeclared (varType))\n    ELSE\n       type := Mod2Gcc (GetDType (var))\n    END ;\n    location := TokenToLocation (GetDeclaredMod (var)) ;\n-   (* The M2LINK module global variables are a special case and have initializers.  *)\n    PreAddModGcc (var, DeclareKnownVariable (location,\n                                             name, type,\n                                             isExported, isImported, isTemporary,\n@@ -3244,7 +3245,7 @@ BEGIN\n       decl := FindOuterModule (variable) ;\n       Assert (AllDependantsFullyDeclared (GetSType (variable))) ;\n       PushBinding (ModSym) ;\n-      DoVariableDeclaration (variable, decl,\n+      DoVariableDeclaration (variable,\n                              KeyToCharStar (GetFullSymName (variable)),\n                              (* in Modula-2 we are allowed to import from ourselves, but we do not present this to GCC *)\n                              IsEffectivelyImported(ModSym, variable) AND (GetMainModule () # decl),\n@@ -3272,7 +3273,7 @@ BEGIN\n       decl := FindOuterModule (variable) ;\n       Assert (AllDependantsFullyDeclared (GetSType (variable))) ;\n       PushBinding (mainModule) ;\n-      DoVariableDeclaration (variable, decl,\n+      DoVariableDeclaration (variable,\n                              KeyToCharStar (GetFullSymName (variable)),\n                              (NOT IsSourceSeen (decl)) AND\n                              IsEffectivelyImported (mainModule, variable) AND (GetMainModule () # decl),\n@@ -3368,7 +3369,7 @@ END DeclareImportedVariablesWholeProgram ;\n PROCEDURE DeclareLocalVariable (var: CARDINAL) ;\n BEGIN\n    Assert (AllDependantsFullyDeclared (var)) ;\n-   DoVariableDeclaration (var, NulSym,\n+   DoVariableDeclaration (var,\n                           KeyToCharStar (GetFullSymName (var)),\n                           FALSE,  (* local variables cannot be imported *)\n                           FALSE,  (* or exported *)\n@@ -3412,7 +3413,7 @@ BEGIN\n    Var := GetNth (sym, i) ;\n    WHILE Var # NulSym DO\n       Assert (AllDependantsFullyDeclared (GetSType (Var))) ;\n-      DoVariableDeclaration (Var, NulSym,\n+      DoVariableDeclaration (Var,\n                              KeyToCharStar (GetFullSymName (Var)),\n                              FALSE,   (* inner module variables cannot be imported *)\n                              FALSE,   (* or exported (as far as GCC is concerned)  *)"}, {"sha": "79ebcde97329fc23e7e5ac3d31614db93afe4774", "filename": "gcc/m2/gm2-compiler/PHBuild.bnf", "status": "modified", "additions": 1, "deletions": 148, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a75f0a02e5006e081b335acd36300a85bef8eb8/gcc%2Fm2%2Fgm2-compiler%2FPHBuild.bnf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a75f0a02e5006e081b335acd36300a85bef8eb8/gcc%2Fm2%2Fgm2-compiler%2FPHBuild.bnf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FPHBuild.bnf?ref=9a75f0a02e5006e081b335acd36300a85bef8eb8", "patch": "@@ -187,11 +187,6 @@ BEGIN\n END ErrorArray ;\n \n \n-PROCEDURE ErrorArrayAt (a: ARRAY OF CHAR; tok: CARDINAL) ;\n-BEGIN\n-   ErrorStringAt (InitString(a), tok)\n-END ErrorArrayAt ;\n-\n % declaration PHBuild begin\n \n \n@@ -285,76 +280,6 @@ BEGIN\n END MissingToken ;\n \n \n-(*\n-   CheckAndInsert -\n-*)\n-\n-PROCEDURE CheckAndInsert (t: toktype; stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) : BOOLEAN ;\n-BEGIN\n-   IF ((ORD(t)<32) AND (t IN stopset0)) OR\n-      ((ORD(t)>=32) AND (ORD(t)<64) AND (t IN stopset1)) OR\n-      ((ORD(t)>=64) AND (t IN stopset2))\n-   THEN\n-      WarnMissingToken(t) ;\n-      InsertTokenAndRewind(t) ;\n-      RETURN( TRUE )\n-   ELSE\n-      RETURN( FALSE )\n-   END\n-END CheckAndInsert ;\n-\n-\n-(*\n-   InStopSet\n-*)\n-\n-PROCEDURE InStopSet (t: toktype; stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) : BOOLEAN ;\n-BEGIN\n-   IF ((ORD(t)<32) AND (t IN stopset0)) OR\n-      ((ORD(t)>=32) AND (ORD(t)<64) AND (t IN stopset1)) OR\n-      ((ORD(t)>=64) AND (t IN stopset2))\n-   THEN\n-      RETURN( TRUE )\n-   ELSE\n-      RETURN( FALSE )\n-   END\n-END InStopSet ;\n-\n-\n-(*\n-   PeepToken - peep token checks to see whether the stopset is satisfied by currenttoken\n-               If it is not then it will insert a token providing the token\n-               is one of ; ] ) } . OF END ,\n-\n-               if the stopset contains <identtok> then we do not insert a token\n-*)\n-\n-PROCEDURE PeepToken (stopset0: SetOfStop0; stopset1: SetOfStop1; stopset2: SetOfStop2) ;\n-BEGIN\n-   (* and again (see above re: ORD)\n-    *)\n-   IF (NOT (((ORD(currenttoken)<32)  AND (currenttoken IN stopset0)) OR\n-     \t    ((ORD(currenttoken)>=32) AND (ORD(currenttoken)<64) AND (currenttoken IN stopset1)) OR\n-            ((ORD(currenttoken)>=64) AND (currenttoken IN stopset2)))) AND\n-      (NOT InStopSet(identtok, stopset0, stopset1, stopset2))\n-   THEN\n-      (* SyntaxCheck would fail since currentoken is not part of the stopset\n-         we check to see whether any of currenttoken might be a commonly\n-         omitted token.  *)\n-      IF CheckAndInsert(semicolontok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(rsbratok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(rparatok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(rcbratok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(periodtok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(oftok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(endtok, stopset0, stopset1, stopset2) OR\n-         CheckAndInsert(commatok, stopset0, stopset1, stopset2)\n-      THEN\n-      END\n-   END\n-END PeepToken ;\n-\n-\n (*\n    Expect -\n *)\n@@ -639,71 +564,6 @@ Qualident :=                                                               % VAR\n              { \".\" Ident }                                                 % END %\n            =:\n \n-PushQualident :=                                                           % VAR name         : Name ;\n-                                                                                 init, ip1    : CARDINAL ;\n-                                                                                 tok, tokstart: CARDINAL ; %\n-                                                                           % PushAutoOn %\n-             Ident                                                         % IF IsAutoPushOn()\n-                                                                             THEN\n-                                                                                PopTtok (name, tokstart) ;\n-                                                                                tok := tokstart ;\n-                                                                                init := GetSym (name) ;\n-                                                                                IF init=NulSym\n-                                                                                THEN\n-                                                                                   PushTFntok (NulSym, NulSym, name, tok)\n-                                                                                ELSE\n-                                                                                   WHILE IsDefImp (init) OR IsModule (init) DO\n-                                                                                      IF currenttoken # periodtok\n-                                                                                      THEN\n-                                                                                         ErrorArrayAt (\"expecting '.' after module in the construction of a qualident\", tok) ;\n-                                                                                         IF tok#tokstart\n-                                                                                         THEN\n-                                                                                            tok := MakeVirtualTok (tokstart, tokstart, tok)\n-                                                                                         END ;\n-                                                                                         PushTtok (init, tok) ;\n-                                                                                         PopAuto ;\n-                                                                                         RETURN\n-                                                                                      ELSE\n-                                                                                         Expect (periodtok, stopset0, stopset1, stopset2 + SetOfStop2{identtok}) ;\n-                                                                                         StartScope (init) ;\n-                                                                                         Ident (stopset0, stopset1, stopset2) ;\n-                                                                                         PopTtok (name, tok) ;\n-                                                                                         ip1 := GetSym (name) ;\n-                                                                                         IF ip1 = NulSym\n-                                                                                         THEN\n-                                                                                            ErrorArrayAt (\"unknown ident in the construction of a qualident\", tok) ;\n-                                                                                            EndScope ;\n-                                                                                            IF tok#tokstart\n-                                                                                            THEN\n-                                                                                               tok := MakeVirtualTok (tokstart, tokstart, tok)\n-                                                                                            END ;\n-                                                                                            PushTFntok (NulSym, NulSym, name, tok) ;\n-                                                                                            PopAuto ;\n-                                                                                            RETURN\n-                                                                                         ELSE\n-                                                                                            PutIncluded (ip1)\n-                                                                                         END ;\n-                                                                                         EndScope ;\n-                                                                                         CheckCanBeImported (init, ip1) ;\n-                                                                                         init := ip1\n-                                                                                      END\n-                                                                                   END ;\n-                                                                                   IF tok#tokstart\n-                                                                                   THEN\n-                                                                                      tok := MakeVirtualTok (tokstart, tokstart, tok)\n-                                                                                   END ;\n-                                                                                   IF IsProcedure (init) OR IsProcType (init)\n-                                                                                   THEN\n-                                                                                      PushTtok (init, tok)\n-                                                                                   ELSE\n-                                                                                      PushTFtok (init, GetType(init), tok)\n-                                                                                   END\n-                                                                                END\n-                                                                             ELSE %\n-             { \".\" Ident }                                                 % END %\n-                                                                           % PopAuto %\n-           =:\n-\n ConstantDeclaration :=                                                     % PushAutoOn %\n                                                                            % VAR tokno: CARDINAL ; %\n                        ( Ident \"=\"                                         % tokno := GetTokenNo () %\n@@ -1125,13 +985,6 @@ SetOrDesignatorOrFunction :=                                               % VAR\n                                                                            % Assert (n = Top ()) %\n                            =:\n \n--- SimpleDes := { \".\" Ident | \"[\" ExpList \"]\" | \"^\" } =:\n-SimpleDes := { SubDesignator } =:\n-\n-ActualParameters := \"(\"\n-                        ( ExpList |                                         % (* epsilon *) %\n-                        ) \")\" =:\n-\n ConstActualParameters := \"(\"                                                % BuildSizeCheckStart %\n                             ( ConstExpList |                                % BuildNulParam %\n                             ) \")\" =:\n@@ -1182,7 +1035,7 @@ IfStatement :=\n                                           StatementSequence\n               }\n               [ \"ELSE\"\n-                      StatementSequence ] \"END\"\n+                       StatementSequence ] \"END\"\n             =:\n \n CaseStatement := \"CASE\""}]}