{"sha": "e9d41c4ef9da8ba71570ecf83691c813c12d9149", "node_id": "C_kwDOANBUbNoAKGU5ZDQxYzRlZjlkYThiYTcxNTcwZWNmODM2OTFjODEzYzEyZDkxNDk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-19T09:49:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-19T09:49:30Z"}, "message": "Merge #1255\n\n1255: Privacy report expressions r=CohenArthur a=CohenArthur\n\nThis adds privacy reporting to all expression types inside our HIR. It also restricts the `PrivacyReporter` visitor to `HIR::Expression`s and `HIR::Stmt`s as a lot of the previous types did not need to be visited.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "ecd809d0bfee9b1ceca509eb69c84f1909e6f327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecd809d0bfee9b1ceca509eb69c84f1909e6f327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d41c4ef9da8ba71570ecf83691c813c12d9149", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihhKqCRBK7hj4Ov3rIwAAPGcIAKPFxoM/n7RsS6wYMLC0VEHB\ntraTaj77ow0Iflu3pyvTIH7FLSUQT7Q47i0omoNg4lcprpkTPSr+ZAS3kMWCyGda\nIZCjHb7fLyHgQqIHSHG8lvXB8HILC3zn8SJuXD1jL+8bGVgFI+iYN3kzdSVM1doO\nBwokCErRFqb6lqH5x0RPFBCNcVajkrtGHSnH935Qf4ZTs9wQzIjXL3ACguvWl1lL\nLTEeNXZVIDBB0W2l52TBCjSvsP2Mi8u/J1oIc9I4IOpOnQlLr/bRGH+/EHCcSY9I\nILsD9tO9V/SvGYz+eNW35zUTjoPtct7oS0jCfJDuVbi1UOdZcGNUulA31AnZu4w=\n=vW0Z\n-----END PGP SIGNATURE-----\n", "payload": "tree ecd809d0bfee9b1ceca509eb69c84f1909e6f327\nparent ff37b816e74091972c6722cce57338bacec6fb00\nparent dba78989e557246a0b4b53c020eb05b1130e6d42\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1652953770 +0000\ncommitter GitHub <noreply@github.com> 1652953770 +0000\n\nMerge #1255\n\n1255: Privacy report expressions r=CohenArthur a=CohenArthur\n\nThis adds privacy reporting to all expression types inside our HIR. It also restricts the `PrivacyReporter` visitor to `HIR::Expression`s and `HIR::Stmt`s as a lot of the previous types did not need to be visited.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d41c4ef9da8ba71570ecf83691c813c12d9149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d41c4ef9da8ba71570ecf83691c813c12d9149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d41c4ef9da8ba71570ecf83691c813c12d9149/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff37b816e74091972c6722cce57338bacec6fb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff37b816e74091972c6722cce57338bacec6fb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff37b816e74091972c6722cce57338bacec6fb00"}, {"sha": "dba78989e557246a0b4b53c020eb05b1130e6d42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba78989e557246a0b4b53c020eb05b1130e6d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba78989e557246a0b4b53c020eb05b1130e6d42"}], "stats": {"total": 683, "additions": 340, "deletions": 343}, "files": [{"sha": "377e86166245933544be246fec7066eefe251889", "filename": "gcc/rust/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 272, "deletions": 274, "changes": 546, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc?ref=e9d41c4ef9da8ba71570ecf83691c813c12d9149", "patch": "@@ -46,10 +46,13 @@ void\n PrivacyReporter::check_for_privacy_violation (const NodeId &use_id,\n \t\t\t\t\t      const Location &locus)\n {\n-  NodeId ref_node_id;\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n \n   // FIXME: Don't assert here - we might be dealing with a type\n-  rust_assert (resolver.lookup_resolved_name (use_id, &ref_node_id));\n+  if (!resolver.lookup_resolved_name (use_id, &ref_node_id))\n+    resolver.lookup_resolved_type (use_id, &ref_node_id);\n+\n+  rust_assert (ref_node_id != UNKNOWN_NODEID);\n \n   ModuleVisibility vis;\n \n@@ -98,161 +101,218 @@ void\n PrivacyReporter::visit (HIR::IdentifierExpr &ident_expr)\n {}\n \n-void\n-PrivacyReporter::visit (HIR::Lifetime &lifetime)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::LifetimeParam &lifetime_param)\n-{}\n-\n void\n PrivacyReporter::visit (HIR::PathInExpression &path)\n {\n   check_for_privacy_violation (path.get_mappings ().get_nodeid (),\n \t\t\t       path.get_locus ());\n }\n \n-void\n-PrivacyReporter::visit (HIR::TypePathSegment &segment)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TypePathSegmentGeneric &segment)\n-{}\n-\n void\n PrivacyReporter::visit (HIR::TypePathSegmentFunction &segment)\n-{}\n+{\n+  // FIXME: Do we need to do anything for this?\n+}\n \n void\n PrivacyReporter::visit (HIR::TypePath &path)\n-{}\n+{\n+  check_for_privacy_violation (path.get_mappings ().get_nodeid (),\n+\t\t\t       path.get_locus ());\n+}\n \n void\n PrivacyReporter::visit (HIR::QualifiedPathInExpression &path)\n-{}\n+{\n+  check_for_privacy_violation (path.get_mappings ().get_nodeid (),\n+\t\t\t       path.get_locus ());\n+}\n \n void\n PrivacyReporter::visit (HIR::QualifiedPathInType &path)\n-{}\n+{\n+  check_for_privacy_violation (path.get_mappings ().get_nodeid (),\n+\t\t\t       path.get_locus ());\n+}\n \n void\n PrivacyReporter::visit (HIR::LiteralExpr &expr)\n-{}\n+{\n+  // Literals cannot contain any sort of privacy violation\n+}\n \n void\n PrivacyReporter::visit (HIR::BorrowExpr &expr)\n-{}\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::DereferenceExpr &expr)\n-{}\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ErrorPropagationExpr &expr)\n-{}\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::NegationExpr &expr)\n-{}\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ArithmeticOrLogicalExpr &expr)\n-{}\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ComparisonExpr &expr)\n-{}\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::LazyBooleanExpr &expr)\n-{}\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::TypeCastExpr &expr)\n-{}\n+{\n+  expr.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::AssignmentExpr &expr)\n-{}\n+{\n+  expr.get_lhs ()->accept_vis (*this);\n+  expr.get_rhs ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::CompoundAssignmentExpr &expr)\n-{}\n+{\n+  expr.get_left_expr ()->accept_vis (*this);\n+  expr.get_right_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::GroupedExpr &expr)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ArrayElemsValues &elems)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ArrayElemsCopied &elems)\n-{}\n+{\n+  expr.get_expr_in_parens ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ArrayExpr &expr)\n-{}\n+{\n+  HIR::ArrayElems &elements = *expr.get_internal_elements ();\n+  switch (elements.get_array_expr_type ())\n+    {\n+      case HIR::ArrayElems::ArrayExprType::VALUES: {\n+\tHIR::ArrayElemsValues &elems\n+\t  = static_cast<HIR::ArrayElemsValues &> (elements);\n+\tfor (auto &value : elems.get_values ())\n+\t  value->accept_vis (*this);\n+      }\n+      return;\n+\n+    case HIR::ArrayElems::ArrayExprType::COPIED:\n+      HIR::ArrayElemsCopied &elems\n+\t= static_cast<HIR::ArrayElemsCopied &> (elements);\n+      elems.get_elem_to_copy ()->accept_vis (*this);\n+    }\n+}\n \n void\n PrivacyReporter::visit (HIR::ArrayIndexExpr &expr)\n-{}\n+{\n+  expr.get_array_expr ()->accept_vis (*this);\n+  expr.get_index_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::TupleExpr &expr)\n-{}\n+{\n+  for (auto &value : expr.get_tuple_elems ())\n+    value->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::TupleIndexExpr &expr)\n-{}\n+{\n+  expr.get_tuple_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::StructExprStruct &expr)\n-{}\n+{\n+  // FIXME: We need to check the visibility of the type it refers to here\n+}\n \n void\n PrivacyReporter::visit (HIR::StructExprFieldIdentifier &field)\n {}\n \n void\n PrivacyReporter::visit (HIR::StructExprFieldIdentifierValue &field)\n-{}\n+{\n+  field.get_value ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::StructExprFieldIndexValue &field)\n-{}\n+{\n+  field.get_value ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::StructExprStructFields &expr)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::StructExprStructBase &expr)\n-{}\n+{\n+  for (auto &field : expr.get_fields ())\n+    field->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::CallExpr &expr)\n {\n   expr.get_fnexpr ()->accept_vis (*this);\n \n-  // rust_assert (mappings.lookup_visibility (definition_id, def_vis));\n-  // check_for_privacy_violation (def_vis, expr.get_locus ());\n+  for (auto &param : expr.get_arguments ())\n+    param->accept_vis (*this);\n }\n \n void\n PrivacyReporter::visit (HIR::MethodCallExpr &expr)\n-{}\n+{\n+  expr.get_receiver ()->accept_vis (*this);\n+\n+  for (auto &param : expr.get_arguments ())\n+    param->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::FieldAccessExpr &expr)\n-{}\n+{\n+  expr.get_receiver_expr ()->accept_vis (*this);\n+\n+  // FIXME: We should also check if the field is public?\n+}\n \n void\n PrivacyReporter::visit (HIR::ClosureExprInner &expr)\n-{}\n+{\n+  // Not handled yet\n+}\n \n void\n PrivacyReporter::visit (HIR::BlockExpr &expr)\n@@ -267,123 +327,185 @@ PrivacyReporter::visit (HIR::BlockExpr &expr)\n \n void\n PrivacyReporter::visit (HIR::ClosureExprInnerTyped &expr)\n-{}\n+{\n+  // Not handled yet\n+}\n \n void\n PrivacyReporter::visit (HIR::ContinueExpr &expr)\n {}\n \n void\n PrivacyReporter::visit (HIR::BreakExpr &expr)\n-{}\n+{\n+  auto &break_expr = expr.get_expr ();\n+  if (break_expr)\n+    break_expr->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::RangeFromToExpr &expr)\n-{}\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::RangeFromExpr &expr)\n-{}\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::RangeToExpr &expr)\n-{}\n+{\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::RangeFullExpr &expr)\n {}\n \n void\n PrivacyReporter::visit (HIR::RangeFromToInclExpr &expr)\n-{}\n+{\n+  expr.get_from_expr ()->accept_vis (*this);\n+  expr.get_to_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::RangeToInclExpr &expr)\n-{}\n+{\n+  // Not handled yet\n+}\n \n void\n PrivacyReporter::visit (HIR::ReturnExpr &expr)\n-{}\n+{\n+  auto return_expr = expr.get_expr ();\n+  if (return_expr)\n+    return_expr->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::UnsafeBlockExpr &expr)\n-{}\n+{\n+  expr.get_block_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::LoopExpr &expr)\n-{}\n+{\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::WhileLoopExpr &expr)\n-{}\n+{\n+  expr.get_predicate_expr ()->accept_vis (*this);\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::WhileLetLoopExpr &expr)\n-{}\n+{\n+  expr.get_cond ()->accept_vis (*this);\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ForLoopExpr &expr)\n-{}\n+{\n+  expr.get_iterator_expr ()->accept_vis (*this);\n+  expr.get_loop_block ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::IfExpr &expr)\n-{}\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::IfExprConseqElse &expr)\n-{}\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+  expr.get_else_block ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::IfExprConseqIf &expr)\n-{}\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+  expr.get_conseq_if_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::IfExprConseqIfLet &expr)\n-{}\n+{\n+  expr.get_if_condition ()->accept_vis (*this);\n+  expr.get_if_block ()->accept_vis (*this);\n+\n+  // TODO: We need to visit the if_let_expr as well\n+}\n \n void\n PrivacyReporter::visit (HIR::IfLetExpr &expr)\n-{}\n+{\n+  // TODO: We need to visit the if_let_expr\n+  // TODO: We need to visit the block as well\n+}\n \n void\n PrivacyReporter::visit (HIR::IfLetExprConseqElse &expr)\n-{}\n+{\n+  // TODO: We need to visit the if_let_expr\n+  // TODO: We need to visit the if_block as well\n+  // TODO: We need to visit the else_block as well\n+}\n \n void\n PrivacyReporter::visit (HIR::IfLetExprConseqIf &expr)\n-{}\n+{\n+  // TODO: We need to visit the if_let_expr\n+  // TODO: We need to visit the if_block as well\n+  // TODO: We need to visit the else_block as well\n+}\n \n void\n PrivacyReporter::visit (HIR::IfLetExprConseqIfLet &expr)\n-{}\n+{\n+  // TODO: We need to visit the if_let_expr\n+  // TODO: We need to visit the if_block as well\n+  // TODO: We need to visit the else_block as well\n+}\n \n void\n PrivacyReporter::visit (HIR::MatchExpr &expr)\n-{}\n+{\n+  expr.get_scrutinee_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::AwaitExpr &expr)\n-{}\n+{\n+  // Not handled yet\n+}\n \n void\n PrivacyReporter::visit (HIR::AsyncBlockExpr &expr)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TypeParam &param)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::LifetimeWhereClauseItem &item)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TypeBoundWhereClauseItem &item)\n-{}\n+{\n+  // Not handled yet\n+}\n \n void\n PrivacyReporter::visit (HIR::Module &module)\n {\n+  // FIXME: We also need to think about module privacy\n+\n   auto old_module = current_module;\n   current_module\n     = Optional<NodeId>::some (module.get_mappings ().get_nodeid ());\n@@ -398,21 +520,11 @@ void\n PrivacyReporter::visit (HIR::ExternCrate &crate)\n {}\n \n-void\n-PrivacyReporter::visit (HIR::UseTreeGlob &use_tree)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::UseTreeList &use_tree)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::UseTreeRebind &use_tree)\n-{}\n-\n void\n PrivacyReporter::visit (HIR::UseDeclaration &use_decl)\n-{}\n+{\n+  // FIXME: Is there anything we need to do here?\n+}\n \n void\n PrivacyReporter::visit (HIR::Function &function)\n@@ -422,27 +534,39 @@ PrivacyReporter::visit (HIR::Function &function)\n \n void\n PrivacyReporter::visit (HIR::TypeAlias &type_alias)\n-{}\n+{\n+  // TODO: Check the type here\n+}\n \n void\n PrivacyReporter::visit (HIR::StructStruct &struct_item)\n-{}\n+{\n+  // TODO: Check the type of all fields\n+}\n \n void\n PrivacyReporter::visit (HIR::TupleStruct &tuple_struct)\n-{}\n+{\n+  // TODO: Check the type of all fields\n+}\n \n void\n PrivacyReporter::visit (HIR::EnumItem &item)\n-{}\n+{\n+  // TODO: Check the type of all variants\n+}\n \n void\n PrivacyReporter::visit (HIR::EnumItemTuple &item)\n-{}\n+{\n+  // TODO: Check the type\n+}\n \n void\n PrivacyReporter::visit (HIR::EnumItemStruct &item)\n-{}\n+{\n+  // TODO: Check the type\n+}\n \n void\n PrivacyReporter::visit (HIR::EnumItemDiscriminant &item)\n@@ -454,135 +578,59 @@ PrivacyReporter::visit (HIR::Enum &enum_item)\n \n void\n PrivacyReporter::visit (HIR::Union &union_item)\n-{}\n+{\n+  // TODO: Check the type\n+}\n \n void\n PrivacyReporter::visit (HIR::ConstantItem &const_item)\n-{}\n+{\n+  // TODO: We need to visit the type\n+  const_item.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::StaticItem &static_item)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TraitItemFunc &item)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TraitItemConst &item)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TraitItemType &item)\n-{}\n+{\n+  // TODO: We need to visit the type\n+  static_item.get_expr ()->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::Trait &trait)\n-{}\n+{\n+  // FIXME: We need to be an ItemVisitor as well\n+  // for (auto &item : trait.get_trait_items ())\n+  //   item->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ImplBlock &impl)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ExternalStaticItem &item)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ExternalFunctionItem &item)\n-{}\n+{\n+  for (auto &item : impl.get_impl_items ())\n+    item->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ExternBlock &block)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::LiteralPattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::IdentifierPattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::WildcardPattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::RangePatternBoundLiteral &bound)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::RangePatternBoundPath &bound)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::RangePatternBoundQualPath &bound)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::RangePattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ReferencePattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::StructPatternFieldTuplePat &field)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::StructPatternFieldIdentPat &field)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::StructPatternFieldIdent &field)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::StructPattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TupleStructItemsNoRange &tuple_items)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TupleStructItemsRange &tuple_items)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TupleStructPattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TuplePatternItemsMultiple &tuple_items)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TuplePatternItemsRanged &tuple_items)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TuplePattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::GroupedPattern &pattern)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::SlicePattern &pattern)\n-{}\n+{\n+  // FIXME: We need to be an ItemVisitor as well\n+  // for (auto &item : block.get_extern_items ())\n+  //   item->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::EmptyStmt &stmt)\n {}\n \n void\n PrivacyReporter::visit (HIR::LetStmt &stmt)\n-{}\n+{\n+  // FIXME: We probably have to check the type as well\n+  auto init_expr = stmt.get_init_expr ();\n+  if (init_expr)\n+    init_expr->accept_vis (*this);\n+}\n \n void\n PrivacyReporter::visit (HIR::ExprStmtWithoutBlock &stmt)\n@@ -592,59 +640,9 @@ PrivacyReporter::visit (HIR::ExprStmtWithoutBlock &stmt)\n \n void\n PrivacyReporter::visit (HIR::ExprStmtWithBlock &stmt)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TraitBound &bound)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ImplTraitType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TraitObjectType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ParenthesisedType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ImplTraitTypeOneBound &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::TupleType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::NeverType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::RawPointerType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ReferenceType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::ArrayType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::SliceType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::InferredType &type)\n-{}\n-\n-void\n-PrivacyReporter::visit (HIR::BareFunctionType &type)\n-{}\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n \n } // namespace Privacy\n } // namespace Rust"}, {"sha": "868428a7c98f81fdad1508d1735a7ed9f69842c1", "filename": "gcc/rust/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 21, "deletions": 69, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.h?ref=e9d41c4ef9da8ba71570ecf83691c813c12d9149", "patch": "@@ -32,7 +32,8 @@ namespace Privacy {\n  * violations. It should be started after using the `VisibilityResolver` visitor\n  * which resolves the visibilities of all items of a crate.\n  */\n-class PrivacyReporter : public HIR::HIRFullVisitor\n+class PrivacyReporter : public HIR::HIRExpressionVisitor,\n+\t\t\tpublic HIR::HIRStmtVisitor\n {\n public:\n   PrivacyReporter (Analysis::Mappings &mappings,\n@@ -56,16 +57,17 @@ class PrivacyReporter : public HIR::HIRFullVisitor\n   void check_for_privacy_violation (const NodeId &use_id,\n \t\t\t\t    const Location &locus);\n \n+  virtual void visit (HIR::StructExprFieldIdentifier &field);\n+  virtual void visit (HIR::StructExprFieldIdentifierValue &field);\n+  virtual void visit (HIR::StructExprFieldIndexValue &field);\n+\n+  virtual void visit (HIR::QualifiedPathInExpression &expr);\n+  virtual void visit (HIR::PathInExpression &expr);\n+  virtual void visit (HIR::ClosureExprInnerTyped &);\n+  virtual void visit (HIR::ClosureExprInner &expr);\n+  virtual void visit (HIR::StructExprStructFields &);\n+  virtual void visit (HIR::StructExprStruct &);\n   virtual void visit (HIR::IdentifierExpr &ident_expr);\n-  virtual void visit (HIR::Lifetime &lifetime);\n-  virtual void visit (HIR::LifetimeParam &lifetime_param);\n-  virtual void visit (HIR::PathInExpression &path);\n-  virtual void visit (HIR::TypePathSegment &segment);\n-  virtual void visit (HIR::TypePathSegmentGeneric &segment);\n-  virtual void visit (HIR::TypePathSegmentFunction &segment);\n-  virtual void visit (HIR::TypePath &path);\n-  virtual void visit (HIR::QualifiedPathInExpression &path);\n-  virtual void visit (HIR::QualifiedPathInType &path);\n   virtual void visit (HIR::LiteralExpr &expr);\n   virtual void visit (HIR::BorrowExpr &expr);\n   virtual void visit (HIR::DereferenceExpr &expr);\n@@ -78,24 +80,14 @@ class PrivacyReporter : public HIR::HIRFullVisitor\n   virtual void visit (HIR::AssignmentExpr &expr);\n   virtual void visit (HIR::CompoundAssignmentExpr &expr);\n   virtual void visit (HIR::GroupedExpr &expr);\n-  virtual void visit (HIR::ArrayElemsValues &elems);\n-  virtual void visit (HIR::ArrayElemsCopied &elems);\n   virtual void visit (HIR::ArrayExpr &expr);\n   virtual void visit (HIR::ArrayIndexExpr &expr);\n   virtual void visit (HIR::TupleExpr &expr);\n   virtual void visit (HIR::TupleIndexExpr &expr);\n-  virtual void visit (HIR::StructExprStruct &expr);\n-  virtual void visit (HIR::StructExprFieldIdentifier &field);\n-  virtual void visit (HIR::StructExprFieldIdentifierValue &field);\n-  virtual void visit (HIR::StructExprFieldIndexValue &field);\n-  virtual void visit (HIR::StructExprStructFields &expr);\n-  virtual void visit (HIR::StructExprStructBase &expr);\n   virtual void visit (HIR::CallExpr &expr);\n   virtual void visit (HIR::MethodCallExpr &expr);\n   virtual void visit (HIR::FieldAccessExpr &expr);\n-  virtual void visit (HIR::ClosureExprInner &expr);\n   virtual void visit (HIR::BlockExpr &expr);\n-  virtual void visit (HIR::ClosureExprInnerTyped &expr);\n   virtual void visit (HIR::ContinueExpr &expr);\n   virtual void visit (HIR::BreakExpr &expr);\n   virtual void visit (HIR::RangeFromToExpr &expr);\n@@ -121,72 +113,32 @@ class PrivacyReporter : public HIR::HIRFullVisitor\n   virtual void visit (HIR::MatchExpr &expr);\n   virtual void visit (HIR::AwaitExpr &expr);\n   virtual void visit (HIR::AsyncBlockExpr &expr);\n-  virtual void visit (HIR::TypeParam &param);\n-  virtual void visit (HIR::LifetimeWhereClauseItem &item);\n-  virtual void visit (HIR::TypeBoundWhereClauseItem &item);\n+\n+  virtual void visit (HIR::EnumItemTuple &);\n+  virtual void visit (HIR::EnumItemStruct &);\n+  virtual void visit (HIR::EnumItem &item);\n+  virtual void visit (HIR::TupleStruct &tuple_struct);\n+  virtual void visit (HIR::EnumItemDiscriminant &);\n+  virtual void visit (HIR::TypePathSegmentFunction &segment);\n+  virtual void visit (HIR::TypePath &path);\n+  virtual void visit (HIR::QualifiedPathInType &path);\n   virtual void visit (HIR::Module &module);\n   virtual void visit (HIR::ExternCrate &crate);\n-  virtual void visit (HIR::UseTreeGlob &use_tree);\n-  virtual void visit (HIR::UseTreeList &use_tree);\n-  virtual void visit (HIR::UseTreeRebind &use_tree);\n   virtual void visit (HIR::UseDeclaration &use_decl);\n   virtual void visit (HIR::Function &function);\n   virtual void visit (HIR::TypeAlias &type_alias);\n   virtual void visit (HIR::StructStruct &struct_item);\n-  virtual void visit (HIR::TupleStruct &tuple_struct);\n-  virtual void visit (HIR::EnumItem &item);\n-  virtual void visit (HIR::EnumItemTuple &item);\n-  virtual void visit (HIR::EnumItemStruct &item);\n-  virtual void visit (HIR::EnumItemDiscriminant &item);\n   virtual void visit (HIR::Enum &enum_item);\n   virtual void visit (HIR::Union &union_item);\n   virtual void visit (HIR::ConstantItem &const_item);\n   virtual void visit (HIR::StaticItem &static_item);\n-  virtual void visit (HIR::TraitItemFunc &item);\n-  virtual void visit (HIR::TraitItemConst &item);\n-  virtual void visit (HIR::TraitItemType &item);\n   virtual void visit (HIR::Trait &trait);\n   virtual void visit (HIR::ImplBlock &impl);\n-  virtual void visit (HIR::ExternalStaticItem &item);\n-  virtual void visit (HIR::ExternalFunctionItem &item);\n   virtual void visit (HIR::ExternBlock &block);\n-  virtual void visit (HIR::LiteralPattern &pattern);\n-  virtual void visit (HIR::IdentifierPattern &pattern);\n-  virtual void visit (HIR::WildcardPattern &pattern);\n-  virtual void visit (HIR::RangePatternBoundLiteral &bound);\n-  virtual void visit (HIR::RangePatternBoundPath &bound);\n-  virtual void visit (HIR::RangePatternBoundQualPath &bound);\n-  virtual void visit (HIR::RangePattern &pattern);\n-  virtual void visit (HIR::ReferencePattern &pattern);\n-  virtual void visit (HIR::StructPatternFieldTuplePat &field);\n-  virtual void visit (HIR::StructPatternFieldIdentPat &field);\n-  virtual void visit (HIR::StructPatternFieldIdent &field);\n-  virtual void visit (HIR::StructPattern &pattern);\n-  virtual void visit (HIR::TupleStructItemsNoRange &tuple_items);\n-  virtual void visit (HIR::TupleStructItemsRange &tuple_items);\n-  virtual void visit (HIR::TupleStructPattern &pattern);\n-  virtual void visit (HIR::TuplePatternItemsMultiple &tuple_items);\n-  virtual void visit (HIR::TuplePatternItemsRanged &tuple_items);\n-  virtual void visit (HIR::TuplePattern &pattern);\n-  virtual void visit (HIR::GroupedPattern &pattern);\n-  virtual void visit (HIR::SlicePattern &pattern);\n   virtual void visit (HIR::EmptyStmt &stmt);\n   virtual void visit (HIR::LetStmt &stmt);\n   virtual void visit (HIR::ExprStmtWithoutBlock &stmt);\n   virtual void visit (HIR::ExprStmtWithBlock &stmt);\n-  virtual void visit (HIR::TraitBound &bound);\n-  virtual void visit (HIR::ImplTraitType &type);\n-  virtual void visit (HIR::TraitObjectType &type);\n-  virtual void visit (HIR::ParenthesisedType &type);\n-  virtual void visit (HIR::ImplTraitTypeOneBound &type);\n-  virtual void visit (HIR::TupleType &type);\n-  virtual void visit (HIR::NeverType &type);\n-  virtual void visit (HIR::RawPointerType &type);\n-  virtual void visit (HIR::ReferenceType &type);\n-  virtual void visit (HIR::ArrayType &type);\n-  virtual void visit (HIR::SliceType &type);\n-  virtual void visit (HIR::InferredType &type);\n-  virtual void visit (HIR::BareFunctionType &type);\n \n   Analysis::Mappings &mappings;\n   Rust::Resolver::Resolver &resolver;"}, {"sha": "d48acea4786842ddb7bb589a125538e3744db85f", "filename": "gcc/testsuite/rust/compile/privacy3.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy3.rs?ref=e9d41c4ef9da8ba71570ecf83691c813c12d9149", "patch": "@@ -0,0 +1,28 @@\n+mod orange {\n+    mod green {\n+        fn sain_void() {}\n+        fn sain() -> bool {\n+            false\n+        }\n+        pub fn doux() {}\n+    }\n+\n+    fn brown() {\n+        if green::sain() {\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+            green::doux();\n+        }\n+\n+        {\n+            green::sain();\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+            green::sain();\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+            green::sain_void()\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+        }\n+\n+        let a = green::sain();\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}, {"sha": "d1ce0afd65431a55002d0193d29860312bb60423", "filename": "gcc/testsuite/rust/compile/privacy4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d41c4ef9da8ba71570ecf83691c813c12d9149/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy4.rs?ref=e9d41c4ef9da8ba71570ecf83691c813c12d9149", "patch": "@@ -0,0 +1,19 @@\n+mod orange {\n+    mod green {\n+        fn bean<T>(value: T) -> T {\n+            value\n+        }\n+    }\n+\n+    fn brown() {\n+        green::bean::<bool>(false);\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+        let a = green::bean::<i32>(15);\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+\n+        struct S;\n+\n+        let s = green::bean(S);\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}]}