{"sha": "c5145ceba16b859a432204a4a96788cbdc4726b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxNDVjZWJhMTZiODU5YTQzMjIwNGE0YTk2Nzg4Y2JkYzQ3MjZiMg==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-11-26T13:18:14Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-11-26T13:18:14Z"}, "message": "re PR target/18510 (GCC should have instrinsics for SPARC VIS instructions)\n\n2004-11-26  James A. Morrison  <phython@gcc.gnu.org>\n\n\tPR target/18510\n\t* doc/extend.texi (SPARC VIS Built-in Functions): New section.\n\nFrom-SVN: r91338", "tree": {"sha": "eae9b508bda436f58c01ff7c2cfc95f15e41125f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae9b508bda436f58c01ff7c2cfc95f15e41125f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5145ceba16b859a432204a4a96788cbdc4726b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5145ceba16b859a432204a4a96788cbdc4726b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5145ceba16b859a432204a4a96788cbdc4726b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5145ceba16b859a432204a4a96788cbdc4726b2/comments", "author": null, "committer": null, "parents": [{"sha": "a0fec0003ab3aa65110b41a0aeb9207c46f78450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0fec0003ab3aa65110b41a0aeb9207c46f78450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0fec0003ab3aa65110b41a0aeb9207c46f78450"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "7f7dbc1e4ac7407d35ea7f188583938b3f4801d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5145ceba16b859a432204a4a96788cbdc4726b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5145ceba16b859a432204a4a96788cbdc4726b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5145ceba16b859a432204a4a96788cbdc4726b2", "patch": "@@ -1,3 +1,8 @@\n+2004-11-26  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR target/18510\n+\t* doc/extend.texi (SPARC VIS Built-in Functions): New section.\n+\n 2004-11-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfgrtl.c (try_redirect_by_replacing_jump): Speed up the"}, {"sha": "cac004f415795165fc417d2edef4387347527297", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5145ceba16b859a432204a4a96788cbdc4726b2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5145ceba16b859a432204a4a96788cbdc4726b2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c5145ceba16b859a432204a4a96788cbdc4726b2", "patch": "@@ -5383,6 +5383,7 @@ instructions, but allow the compiler to schedule those calls.\n * X86 Built-in Functions::\n * MIPS Paired-Single Support::\n * PowerPC AltiVec Built-in Functions::\n+* SPARC VIS Built-in Functions::\n @end menu\n \n @node Alpha Built-in Functions\n@@ -8471,6 +8472,45 @@ int vec_any_numeric (vector float);\n int vec_any_out (vector float, vector float);\n @end smallexample\n \n+@node SPARC VIS Built-in Functions\n+@subsection SPARC VIS Built-in Functions\n+\n+GCC supports SIMD operations on the SPARC using both the generic vector\n+extentions (@pxref{Vector Extensions}) as well as built-in functions for\n+the SPARC Visual Instruction Set (VIS).  When you use the @option{-mvis}\n+switch, the VIS extension is exposed as the following built-in functions:\n+\n+@smallexample\n+typedef int v2si __attribute__ ((vector_size (8)));\n+typedef short v4hi __attribute__ ((vector_size (8)));\n+typedef short v2hi __attribute__ ((vector_size (4)));\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+typedef char v4qi __attribute__ ((vector_size (4)));\n+\n+void * __builtin_vis_alignaddr (void *, long);\n+int64_t __builtin_vis_faligndatadi (int64_t, int64_t);\n+v2si __builtin_vis_faligndatav2si (v2si, v2si);\n+v4hi __builtin_vis_faligndatav4hi (v4si, v4si);\n+v8qi __builtin_vis_faligndatav8qi (v8qi, v8qi);\n+\n+v4hi __builtin_vis_fexpand (v4qi);\n+\n+v4hi __builtin_vis_fmul8x16 (v4qi, v4hi);\n+v4hi __builtin_vis_fmul8x16au (v4qi, v4hi);\n+v4hi __builtin_vis_fmul8x16al (v4qi, v4hi);\n+v4hi __builtin_vis_fmul8sux16 (v8qi, v4hi);\n+v4hi __builtin_vis_fmul8ulx16 (v8qi, v4hi);\n+v2si __builtin_vis_fmuld8sux16 (v4qi, v2hi);\n+v2si __builtin_vis_fmuld8ulx16 (v4qi, v2hi);\n+\n+v4qi __builtin_vis_fpack16 (v4hi);\n+v8qi __builtin_vis_fpack32 (v2si, v2si);\n+v2hi __builtin_vis_fpackfix (v2si);\n+v8qi __builtin_vis_fpmerge (v4qi, v4qi);\n+\n+int64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);\n+@end smallexample\n+\n @node Target Format Checks\n @section Format Checks Specific to Particular Target Machines\n "}]}