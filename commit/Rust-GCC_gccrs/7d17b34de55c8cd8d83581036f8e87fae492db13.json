{"sha": "7d17b34de55c8cd8d83581036f8e87fae492db13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QxN2IzNGRlNTVjOGNkOGQ4MzU4MTAzNmY4ZTg3ZmFlNDkyZGIxMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-08-01T22:23:56Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-08-01T22:23:56Z"}, "message": "Finish ABI change started by last patch, this time I tested it.\n\n\t* config/ia64/ia64.c (ia64_function_arg): Fix last change.  Verify\n\ttype exists before using it.  Use number of words as alignment\n\totherwise.\n\t(ia64_function_arg_partial_nregs, ia64_function_arg_advance,\n\tia64_va_arg): Propagate ia64_function_args changes here.\n\nFrom-SVN: r35413", "tree": {"sha": "a13aa9c991ea3cccd3b7de7d874f4db84b698ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a13aa9c991ea3cccd3b7de7d874f4db84b698ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d17b34de55c8cd8d83581036f8e87fae492db13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d17b34de55c8cd8d83581036f8e87fae492db13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d17b34de55c8cd8d83581036f8e87fae492db13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d17b34de55c8cd8d83581036f8e87fae492db13/comments", "author": null, "committer": null, "parents": [{"sha": "0577bad8bf7781c9d0118b68e9d1bdc8b8d66d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0577bad8bf7781c9d0118b68e9d1bdc8b8d66d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0577bad8bf7781c9d0118b68e9d1bdc8b8d66d8f"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "2f9c4a62e1521b55e3c8049fdfb78ab739a8b56e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d17b34de55c8cd8d83581036f8e87fae492db13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d17b34de55c8cd8d83581036f8e87fae492db13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d17b34de55c8cd8d83581036f8e87fae492db13", "patch": "@@ -1,3 +1,11 @@\n+2000-08-01  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64.c (ia64_function_arg): Fix last change.  Verify\n+\ttype exists before using it.  Use number of words as alignment\n+\totherwise.\n+\t(ia64_function_arg_partial_nregs, ia64_function_arg_advance,\n+\tia64_va_arg): Propagate ia64_function_args changes here.\n+\n 2000-08-01  Richard Henderson  <rth@cygnus.com>\n \n \t* config/elfos.h (ASM_DECLARE_OBJECT_NAME): Care for null DECL."}, {"sha": "fb2a24c02c472892bde62b1a6194b7b7de94c69c", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d17b34de55c8cd8d83581036f8e87fae492db13/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d17b34de55c8cd8d83581036f8e87fae492db13/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=7d17b34de55c8cd8d83581036f8e87fae492db13", "patch": "@@ -1544,12 +1544,15 @@ ia64_function_arg (cum, mode, type, named, incoming)\n \n   /* Integer and float arguments larger than 8 bytes start at the next even\n      boundary.  Aggregates larger than 8 bytes start at the next even boundary\n-     if the aggregate has 16 byte alignment.  */\n+     if the aggregate has 16 byte alignment.  Net effect is that types with\n+     alignment greater than 8 start at the next even boundary.  */\n   /* ??? The ABI does not specify how to handle aggregates with alignment from\n      9 to 15 bytes, or greater than 16.   We handle them all as if they had\n      16 byte alignment.  Such aggregates can occur only if gcc extensions are\n      used.  */\n-  if ((TYPE_ALIGN (type) > 8 * BITS_PER_UNIT) && (cum->words & 1))\n+  if ((type ? (TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)\n+       : (words > 1))\n+      && (cum->words & 1))\n     offset = 1;\n \n   /* If all argument slots are used, then it must go on the stack.  */\n@@ -1690,8 +1693,11 @@ ia64_function_arg_partial_nregs (cum, mode, type, named)\n \t       / UNITS_PER_WORD);\n   int offset = 0;\n \n-  /* Arguments larger than 8 bytes start at the next even boundary.  */\n-  if (words > 1 && (cum->words & 1))\n+  /* Arguments with alignment larger than 8 bytes start at the next even\n+     boundary.  */\n+  if ((type ? (TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)\n+       : (words > 1))\n+      && (cum->words & 1))\n     offset = 1;\n \n   /* If all argument slots are used, then it must go on the stack.  */\n@@ -1729,8 +1735,11 @@ ia64_function_arg_advance (cum, mode, type, named)\n   if (cum->words >= MAX_ARGUMENT_SLOTS)\n     return;\n \n-  /* Arguments larger than 8 bytes start at the next even boundary.  */\n-  if (words > 1 && (cum->words & 1))\n+  /* Arguments with alignment larger than 8 bytes start at the next even\n+     boundary.  */\n+  if ((type ? (TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)\n+       : (words > 1))\n+      && (cum->words & 1))\n     offset = 1;\n \n   cum->words += words + offset;\n@@ -1832,9 +1841,9 @@ ia64_va_arg (valist, type)\n   HOST_WIDE_INT size;\n   tree t;\n \n-  /* Arguments larger than 8 bytes are 16 byte aligned.  */\n-  size = int_size_in_bytes (type);\n-  if (size > UNITS_PER_WORD)\n+  /* Arguments with alignment larger than 8 bytes start at the next even\n+     boundary.  */\n+  if (TYPE_ALIGN (type) > 8 * BITS_PER_UNIT)\n     {\n       t = build (PLUS_EXPR, TREE_TYPE (valist), valist,\n \t\t build_int_2 (2 * UNITS_PER_WORD - 1, 0));"}]}