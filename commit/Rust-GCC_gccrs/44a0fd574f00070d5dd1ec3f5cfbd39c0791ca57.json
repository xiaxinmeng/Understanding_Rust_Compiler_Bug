{"sha": "44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57", "node_id": "C_kwDOANBUbNoAKDQ0YTBmZDU3NGYwMDA3MGQ1ZGQxZWMzZjVjZmJkMzljMDc5MWNhNTc", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-13T13:15:38Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:29Z"}, "message": "libproc_macro: Add Group type interface\n\nAdd the Group rust type interface to libproc_macro.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/lib.rs: Add group module.\n\t* librust/proc_macro/rust/group.rs: Add rust Group type.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "0a053ed487aed942cd586434311d4a59bc4d8888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a053ed487aed942cd586434311d4a59bc4d8888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5640374631e9e9ee315e98aeb20b18818285e8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5640374631e9e9ee315e98aeb20b18818285e8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5640374631e9e9ee315e98aeb20b18818285e8ec"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "0434d6c12067d4584e761bd578e78b099c5f2ded", "filename": "librust/proc_macro/rust/group.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57/librust%2Fproc_macro%2Frust%2Fgroup.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57/librust%2Fproc_macro%2Frust%2Fgroup.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fgroup.rs?ref=44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57", "patch": "@@ -0,0 +1,76 @@\n+use std::fmt;\n+use Delimiter;\n+use Span;\n+use TokenStream;\n+\n+/// A delimited token stream.\n+#[derive(Clone)]\n+pub struct Group {\n+    // Internal implementation details\n+}\n+\n+impl Group {\n+    /// Creates a new `Group`.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * `delimiter` - The delimiter surrounding the inner [`TokenStream`].\n+    /// * `stream` - The tokenstream for this `Group`.\n+    pub fn new(_delimiter: Delimiter, _stream: TokenStream) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the delimiter of the `Group`.\n+    pub fn delimiter(&self) -> Delimiter {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the stream of the `Group`.\n+    ///\n+    /// # Note\n+    ///\n+    /// The returned stream does not include the delimiters of this group.\n+    pub fn stream(&self) -> TokenStream {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the span for the delimiters of this token stream, spanning the\n+    /// entire group.\n+    pub fn span(&self) -> Span {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the span pointing to the opening delimiter of this `Group`.\n+    pub fn span_open(&self) -> Span {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Get the span pointing to the closing delimiter of this `Group`.\n+    pub fn span_close(&self) -> Span {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    /// Change the span for this `Group`'s delimiters, but not its internal\n+    /// tokens.\n+    ///\n+    /// # Note\n+    ///\n+    /// This method will **not** set the span of all the internal tokens spanned\n+    /// by this group, but rather it will only set the span of the delimiter\n+    /// tokens at the level of the `Group`.\n+    pub fn set_span(&mut self, _span: Span) {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Display for Group {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}\n+\n+impl fmt::Debug for Group {\n+    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        todo!(\"Implement this function\")\n+    }\n+}"}, {"sha": "26011f8a7249763949ca61f7fceaafceda342c96", "filename": "librust/proc_macro/rust/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57/librust%2Fproc_macro%2Frust%2Flib.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57/librust%2Fproc_macro%2Frust%2Flib.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Flib.rs?ref=44a0fd574f00070d5dd1ec3f5cfbd39c0791ca57", "patch": "@@ -1,10 +1,12 @@\n+pub use group::Group;\n pub use ident::Ident;\n pub use literal::Literal;\n pub use punct::{Punct, Spacing};\n pub use span::Span;\n use std::error;\n use std::{fmt, str::FromStr};\n \n+mod group;\n mod ident;\n mod literal;\n mod punct;\n@@ -13,7 +15,7 @@ mod span;\n /// Describes how a sequence of token trees is delimited.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum Delimiter {\n-    /// The sequence is delimited by a parentheses `(...)`.\n+    /// The sequence is delimited by a parenthesis `(...)`.\n     Parenthesis,\n     /// The sequence is delimited by a brace `{...}`.\n     Brace,"}]}