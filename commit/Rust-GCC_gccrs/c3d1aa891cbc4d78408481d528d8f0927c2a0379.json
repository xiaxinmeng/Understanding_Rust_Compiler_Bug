{"sha": "c3d1aa891cbc4d78408481d528d8f0927c2a0379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNkMWFhODkxY2JjNGQ3ODQwODQ4MWQ1MjhkOGYwOTI3YzJhMDM3OQ==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-09T02:59:50Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-07-09T02:59:50Z"}, "message": "test/rs6000: Add cases to cover vector multiply\n\nThis patch is to add test cases to check if vectorizer\ncan exploit vector multiply instrutions on Power, some\nof them are supported since Power8, the others are newly\nintroduced by Power10.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/mul-vectorize-1.c: New test.\n\t* gcc.target/powerpc/mul-vectorize-2.c: New test.", "tree": {"sha": "1ab08fd714fa7a48c6f3da1b0484e402186b1ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab08fd714fa7a48c6f3da1b0484e402186b1ef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3d1aa891cbc4d78408481d528d8f0927c2a0379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d1aa891cbc4d78408481d528d8f0927c2a0379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3d1aa891cbc4d78408481d528d8f0927c2a0379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3d1aa891cbc4d78408481d528d8f0927c2a0379/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc4d2a516d042bc9a6936fad3f887aff353a296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc4d2a516d042bc9a6936fad3f887aff353a296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc4d2a516d042bc9a6936fad3f887aff353a296"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "ba01d5cec8f41273585b8b4f1ac8f4ba58ce4316", "filename": "gcc/testsuite/gcc.target/powerpc/mul-vectorize-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d1aa891cbc4d78408481d528d8f0927c2a0379/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d1aa891cbc4d78408481d528d8f0927c2a0379/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-1.c?ref=c3d1aa891cbc4d78408481d528d8f0927c2a0379", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test vectorizer can exploit ISA 2.07 instruction vmuluwm (Vector Multiply\n+   Unsigned Word Modulo) for both signed and unsigned word multiplication.  */\n+\n+#define N 128\n+\n+extern signed int si_a[N], si_b[N], si_c[N];\n+extern unsigned int ui_a[N], ui_b[N], ui_c[N];\n+\n+__attribute__ ((noipa)) void\n+test_si ()\n+{\n+  for (int i = 0; i < N; i++)\n+    si_c[i] = si_a[i] * si_b[i];\n+}\n+\n+__attribute__ ((noipa)) void\n+test_ui ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ui_c[i] = ui_a[i] * ui_b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvmuluwm\\M} 2 } } */"}, {"sha": "12ca97af409dabf4cbfe0f6512574e321fa2e813", "filename": "gcc/testsuite/gcc.target/powerpc/mul-vectorize-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3d1aa891cbc4d78408481d528d8f0927c2a0379/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3d1aa891cbc4d78408481d528d8f0927c2a0379/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmul-vectorize-2.c?ref=c3d1aa891cbc4d78408481d528d8f0927c2a0379", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test vectorizer can exploit ISA 3.1 instruction vmulld (Vector Multiply\n+   Low Doubleword) for both signed and unsigned doubleword multiplication.  */\n+\n+#define N 128\n+\n+extern signed long long sd_a[N], sd_b[N], sd_c[N];\n+extern unsigned long long ud_a[N], ud_b[N], ud_c[N];\n+\n+__attribute__ ((noipa)) void\n+test_sd ()\n+{\n+  for (int i = 0; i < N; i++)\n+    sd_c[i] = sd_a[i] * sd_b[i];\n+}\n+\n+__attribute__ ((noipa)) void\n+test_ud ()\n+{\n+  for (int i = 0; i < N; i++)\n+    ud_c[i] = ud_a[i] * ud_b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvmulld\\M} 2 } } */"}]}