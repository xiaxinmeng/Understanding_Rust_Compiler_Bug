{"sha": "15ec0729351b354a05bb6a0ac9a2f4da593efb62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlYzA3MjkzNTFiMzU0YTA1YmI2YTBhYzlhMmY0ZGE1OTNlZmI2Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-18T19:36:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-18T19:36:21Z"}, "message": "Various changes from devo.\n\nFrom-SVN: r16568", "tree": {"sha": "5ac637c78ec3263b30ed48d6bbb0cd024a42f226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac637c78ec3263b30ed48d6bbb0cd024a42f226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ec0729351b354a05bb6a0ac9a2f4da593efb62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ec0729351b354a05bb6a0ac9a2f4da593efb62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ec0729351b354a05bb6a0ac9a2f4da593efb62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ec0729351b354a05bb6a0ac9a2f4da593efb62/comments", "author": null, "committer": null, "parents": [{"sha": "8677f9876b7dbb2849f4865f8f57d4a58aae279a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8677f9876b7dbb2849f4865f8f57d4a58aae279a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8677f9876b7dbb2849f4865f8f57d4a58aae279a"}], "stats": {"total": 166, "additions": 137, "deletions": 29}, "files": [{"sha": "55df5aea1f435a7db5aa5143a97cf86492c66ce6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -1,12 +1,34 @@\n-Mon Oct  6 12:03:10 1997  Jeffrey A Law  (law@cygnus.com)\n+Fri Sep 26 10:50:53 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n-\t* lib/g77.exp, lib/f-torture.exp: New files.\n+\t* lib/c-torture.exp(c-torture-execute): Fix typo.\n+\n+\t* lib/old-dejagnu.exp(old-dejagnu): Use a name derived from the\n+\ttestcase as the executable name. Keep the executable around if\n+\tthe test fails.\n+\n+Fri Sep 19 17:19:53 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/c-torture.exp (TORTURE_OPTIONS): Removed unnecessary\n+ \tchanges.  Only test one -g option, and move it to the end of the\n+ \tlist of options to test.\n+\n+Fri Sep 19 17:58:00 1997  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* lib/c-torture.exp (TORTURE_OPTIONS): Check for the environment\n+\tvariable GCC_TORTURE_OPTIONS to supply default switches separated\n+\tby colons.  If no environment variable, run tests with -O0 -g, -O1\n+\t-g, and -O2 -g as well.\n+\n+Wed Sep 17 10:12:26 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* lib/plumhall.exp: Don't set PHSRC in this file. Add a few\n+\texplanatory comments. Fix indentation.\n \n Mon Sep 15 00:36:53 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* lib/g++.exp (g++_init): Look for xgcc in $basedir too.\n-\t\n-Thu Sep 11 13:52:01 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+Thu Sep 11 13:54:47 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* g++.old-deja/g++.brendan/scope4.C: No longer expected to fail.\n \t* g++.old-deja/g++.mike/p7325.C: Likewise.\n@@ -25,9 +47,17 @@ Thu Sep 11 09:53:40 1997  Joe Buck  (jbuck@synopsys.com)\n \t* g++.old-deja/g++.mike/p784.C: Ditto.\n \t* g++.old-deja/g++.mike/p785.C: Ditto.\n \n-Fri Sep  5 00:20:39 1997  Richard Henderson  (rth@cygnus.com)\n+Fri Sep  5 00:21:42 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+        * gcc.c-torture/execute/cbrt.c: Tweak to work on more targets.\n+\n+Wed Sep  3 17:15:00 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n-\t* cbrt.c: Tweak to work on more targets.\n+\t* lib/c-torture.exp(c-torture-execute): If the previous and the\n+ \tcurrent executables being tested are identical, we don't need to\n+ \trun the executable again. Try to make the executable names\n+ \tunique. Add an optional argument for passing additional compiler\n+ \tflags.\n \n Tue Sep  2 16:34:31 1997  Doug Evans  <dje@canuck.cygnus.com>\n "}, {"sha": "821bd0c6b26b092b65af09510632aae6791be5c4", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/asm-extn1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fasm-extn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fasm-extn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fasm-extn1.C?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -1,7 +1,7 @@\n // Build don't link: \n // Special g++ Options: -S\n // GROUPS passed asm-extension\n-// excess errors test - XFAIL a29k-*-*\n+// excess errors test - XFAIL a29k-*-* mn10300-elf\n // This used to crash because c_expand_asm_keyword didn't know what to\n // do with this.  The parser rules were changed to accept an expr, instead\n // of a stmt."}, {"sha": "95da594c2fc4ddba90e2abafcfac53f3954fa2e6", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh1.C?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -3,14 +3,15 @@\n \n extern \"C\" void printf (char *, ...);\n extern \"C\" int atoi (const char *);\n+extern \"C\" void exit (int);\n \n struct Exception\n  {\n      int v;\n      Exception(int i) { v = i; };\n  };\n \n- inc(int &i)\n+ void inc(int &i)\n  {\n      try {\n          if (i == 0)"}, {"sha": "2541f2799c7e8e736f9c5e577b4d9891779294ee", "filename": "gcc/testsuite/g++.old-deja/g++.mike/eh10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Feh10.C?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -9,7 +9,7 @@ void foo() {\n \n void ee(int *);\n \n-bar() {\n+void bar() {\n   int i = 2;\n   ee(&i);\n }"}, {"sha": "8402a36cc348c5522fa0bea822f57c441c461887", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p7325.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7325.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7325.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7325.C?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -1,6 +1,7 @@\n // I hate this type of test case.  I'm not sure how to code it better.\n // See the PR for what this tests.\n // prms-id: 7325\n+// execution test fails *-*-*\n \n int fail = 0;\n "}, {"sha": "b4a46840fe82b21e2b567dff0d9b5cd4b98cb355", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -1,7 +1,25 @@\n-Fri Aug 29 12:46:05 1997  Jeffrey A Law  (law@cygnus.com)\n+Wed Sep  3 17:29:35 1997  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* execute/ieee/ieee.exp: Check for ieee_multilib_flags target\n+\tfeature; pass this to c-torture-execute as needed.\n+\n+Fri Aug 29 12:48:09 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* execute/921007-1.c: Make strcmp static.\n \n+Tue Jul 29 00:40:38 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* conversion.c (test_float_to_integer): Make double precision tests\n+\tdependent on sizeof (double).\n+\n+Tue Jun 17 22:11:16 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* compile/961203-1.cexp: New script.\n+\n+Wed Jun  4 03:38:50 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* execute/ieee/ieee.exp: Set -mieee for SH.\n+\n Thu May 15 14:00:04 1997  Mike Meissner  <meissner@cygnus.com>\n \n \t* execute/va-arg-3.c: If NO_VARARGS is defined, nop test."}, {"sha": "fc69d6279ba026d50753353fed91b4e07c767cc4", "filename": "gcc/testsuite/gcc.c-torture/execute/conversion.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fconversion.c?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -207,6 +207,11 @@ test_float_to_integer()\n   if (f2u((float) ~((~0U) >> 1)) != ~((~0U) >> 1))\t/* 0x80000000 */\n     abort();\n \n+ /* CYGNUS LOCAL -- amylaar/32bit doubles */\n+ /* These tests require double precision, so for hosts that don't offer\n+    that much precision, just ignore these test.  */\n+ if (sizeof (double) >= 8) {\n+ /* END CYGNUS LOCAL -- amylaar/32bit doubles */\n   if (d2u(0.0) != 0)\n     abort();\n   if (d2u(0.999) != 0)\n@@ -221,6 +226,9 @@ test_float_to_integer()\n     abort();\n   if (d2u((double) ~((~0U) >> 1)) != ~((~0U) >> 1))\t/* 0x80000000 */\n     abort();\n+ /* CYGNUS LOCAL -- amylaar/32bit doubles */\n+ }\n+ /* END CYGNUS LOCAL -- amylaar/32bit doubles */\n \n \n   if (f2s(0.0) != 0)\n@@ -240,6 +248,11 @@ test_float_to_integer()\n   if (f2s((float)(int)~((~0U) >> 1)) != (int)~((~0U) >> 1)) /* 0x80000000 */\n     abort();\n \n+ /* CYGNUS LOCAL -- amylaar/32bit doubles */\n+ /* These tests require double precision, so for hosts that don't offer\n+    that much precision, just ignore these test.  */\n+ if (sizeof (double) >= 8) {\n+ /* END CYGNUS LOCAL -- amylaar/32bit doubles */\n   if (d2s(0.0) != 0)\n     abort();\n   if (d2s(0.999) != 0)\n@@ -258,6 +271,9 @@ test_float_to_integer()\n     abort();\n   if (d2s((double)(int)~((~0U) >> 1)) != (int)~((~0U) >> 1)) /* 0x80000000 */\n     abort();\n+ /* CYGNUS LOCAL -- amylaar/32bit doubles */\n+ }\n+ /* END CYGNUS LOCAL -- amylaar/32bit doubles */\n }\n \n #if __GNUC__"}, {"sha": "55f7f27625b78ea14577cbfd22259e52b2512a05", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/ieee.exp", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fieee.exp?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -28,11 +28,17 @@ if $tracelevel then {\n     strace $tracelevel\n }\n \n+if [target_info exists ieee_multilib_flags] {\n+    set additional_flags [target_info ieee_multilib_flags];\n+} else {\n+    set additional_flags \"\";\n+}\n+\n # load support procs\n load_lib c-torture.exp\n \n # initialize harness\n-gcc_init \n+gcc_init\n \n #\n # main test loop\n@@ -44,7 +50,7 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n \tcontinue\n     }\n \n-    c-torture-execute $src\n+    c-torture-execute $src $additional_flags\n }\n \n # All done."}, {"sha": "3e77d6c419ecd8e47bb2654d21cb71bff4c1b943", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -23,12 +23,16 @@\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n \n if ![info exists TORTURE_OPTIONS] {\n-    # FIXME: We should test -g at least once.\n+    # It is theoretically beneficial to group all of the O2 options together,\n+    # as in many cases the compiler will generate identical executables for\n+    # all of them--and the c-torture testsuite will skip testing identical\n+    # executables multiple times.\n     set TORTURE_OPTIONS [list \\\n \t{ -O0 } { -O1 } { -O2 } \\\n \t{ -O2 -fomit-frame-pointer -finline-functions } \\\n \t{ -O2 -fomit-frame-pointer -finline-functions -funroll-loops } \\\n-\t{ -O2 -fomit-frame-pointer -finline-functions -funroll-all-loops }]\n+\t{ -O2 -fomit-frame-pointer -finline-functions -funroll-all-loops } \\\n+\t{ -O2 -g } ]\n }\n \n \n@@ -130,9 +134,14 @@ proc c-torture-compile { src option } {\n # run the compile.exp tests for example - one need only pass compile.exp to\n # dejagnu, and not compile.exp, foo1.exp, foo2.exp, etc.).\n #\n-proc c-torture-execute { src } {\n+proc c-torture-execute { src args } {\n     global tmpdir tool srcdir output \n \n+    if { [llength $args] > 0 } {\n+\tset additional_flags [lindex $args 0];\n+    } else {\n+\tset additional_flags \"\";\n+    }\n     # Check for alternate driver.\n     if [file exists [file rootname $src].cexp] {\n \tverbose \"Using alternate driver [file rootname [file tail $src]].cexp\" 2\n@@ -163,31 +172,42 @@ proc c-torture-execute { src } {\n \tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n     }\n \n+    set count 0;\n+    set oldstatus \"foo\";\n     foreach option $option_list {\n+\tif { $count > 0 } {\n+\t    set oldexec $execname;\n+\t}\n+\tset execname \"${executable}${count}\";\n+\tincr count;\n+\n \t# torture_{compile,execute}_xfail are set by the .cexp script\n \t# (if present)\n \tif [info exists torture_compile_xfail] {\n \t    setup_xfail $torture_compile_xfail\n \t}\n-\tremote_file build delete $executable\n+\tremote_file build delete $execname;\n \tverbose \"Testing $testcase, $option\" 1\n \n \tset options \"\"\n \tlappend options \"additional_flags=-w $option\"\n-\tset comp_output [gcc_target_compile \"$src\" \"$executable\" executable $options];\n+\tif { $additional_flags != \"\" } {\n+\t    lappend options \"additional_flags=$additional_flags\";\n+\t}\n+\tset comp_output [gcc_target_compile \"$src\" \"${execname}\" executable $options];\n \n \t# Set a few common compiler messages.\n \tset fatal_signal \"*cc: Internal compiler error: program*got fatal signal\"\n \t\n \tif [string match \"$fatal_signal 6\" $comp_output] then {\n \t    gcc_fail $testcase \"Got Signal 6, $option\"\n-\t    remote_file build delete $executable\n+\t    remote_file build delete $execname\n \t    continue\n \t}\n \t\n \tif [string match \"$fatal_signal 11\" $comp_output] then {\n \t    gcc_fail $testcase \"Got Signal 11, $option\"\n-\t    remote_file build delete $executable\n+\t    remote_file build delete $execname\n \t    continue\n \t}\n \t\n@@ -196,7 +216,7 @@ proc c-torture-execute { src } {\n \t    warning \"$testcase: (with warnings) $option\"\n \t    send_log \"$comp_output\\n\"\n \t    unresolved \"$testcase, $option\"\n-\t    remote_file build delete $executable\n+\t    remote_file build delete $execname\n \t    continue\n \t}\n \t\n@@ -207,7 +227,7 @@ proc c-torture-execute { src } {\n \tif { $unsupported_message != \"\" } {\n \t    unsupported \"$testcase: $unsupported_message\"\n \t    continue\n-\t} elseif ![file exists $executable] {\n+\t} elseif ![file exists $execname] {\n \t    if ![is3way] {\n \t\tfail \"$testcase compilation, $option\"\n \t\tuntested \"$testcase execution, $option\"\n@@ -234,14 +254,27 @@ proc c-torture-execute { src } {\n \tif [info exists torture_execute_xfail] {\n \t    setup_xfail $torture_execute_xfail\n \t}\n-\t\n-\tset result [gcc_load \"$executable\" \"\" \"\"]\n-\tset status [lindex $result 0];\n-\tset output [lindex $result 1];\n-        if { $status == \"pass\" } {\n-\t    remote_file build delete $executable\n+\tset skip 0;\n+\tif [info exists oldexec] {\n+\t    if { [remote_file build cmp $oldexec $execname] == 0 } {\n+\t\tset skip 1;\n+\t    }\n+\t}\n+\tif { $skip == 0 } {\n+\t    set result [gcc_load \"$execname\" \"\" \"\"]\n+\t    set status [lindex $result 0];\n+\t    set output [lindex $result 1];\n+\t}\n+        if { $oldstatus == \"pass\" } {\n+\t    remote_file build delete $oldexec;\n         }\n \t$status \"$testcase execution, $option\"\n+\tset oldstatus $status;\n+    }\n+    if [info exists status] {\n+\tif { $status == \"pass\" } {\n+\t    remote_file build delete $execname;\n+\t}\n     }\n }\n "}, {"sha": "02f84a46cb9c50c574b76aa84b09cf296132bd7a", "filename": "gcc/testsuite/lib/old-dejagnu.exp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Flib%2Fold-dejagnu.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ec0729351b354a05bb6a0ac9a2f4da593efb62/gcc%2Ftestsuite%2Flib%2Fold-dejagnu.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fold-dejagnu.exp?ref=15ec0729351b354a05bb6a0ac9a2f4da593efb62", "patch": "@@ -230,7 +230,8 @@ proc old-dejagnu { compiler prog cflagsx default_cflags libs } {\n \n     lappend cflags \"compiler=$compiler\"\n \n-    set output \"$tmpdir/a.out\"\n+    regsub -all \"\\[./\\]\" \"$name\" \"-\" output;\n+    set output \"$tmpdir/$output\";\n     set compile_type \"executable\"\n \n     set tmp [lindex [grep $prog \"Build don.t link:\"] 0]\n@@ -522,7 +523,9 @@ proc old-dejagnu { compiler prog cflagsx default_cflags libs } {\n \t    set result [eval [format \"%s_load %s\" $tool $executable]]\n \t    set status [lindex $result 0];\n \t    set output [lindex $result 1];\n-\t    remote_file build delete $executable;\n+\t    if { $status == \"pass\" } {\n+\t\tremote_file build delete $executable;\n+\t    }\n \t    if { $execbug_flag || $excessbug_flag } then {\n \t\tsetup_xfail \"*-*-*\"\n \t    }"}]}