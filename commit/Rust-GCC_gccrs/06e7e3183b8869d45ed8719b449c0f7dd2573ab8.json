{"sha": "06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlN2UzMTgzYjg4NjlkNDVlZDg3MTliNDQ5YzBmN2RkMjU3M2FiOA==", "commit": {"author": {"name": "Rohit Arul Raj", "email": "rohitarulraj@freescale.com", "date": "2015-05-15T04:58:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-05-15T04:58:27Z"}, "message": "varasm.c (output_constant_pool_1): Pass down alignment from constant pool entry's descriptor to output_constant_pool_2.\n\n2015-05-14  Rohit Arul Raj  <rohitrulraj@freescale.com>\n\n\t* varasm.c (output_constant_pool_1): Pass down alignment from\n\tconstant pool entry's descriptor to output_constant_pool_2.\n\t(output_object_block): Add comment prior to call to\n\toutput_constant_pool_1.\n\n\t* gcc.target/powerpc/pr60158.c: New test.\n\nFrom-SVN: r223209", "tree": {"sha": "0f84fb84eaad7d48acc6f4fd4bef4aaab4000b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f84fb84eaad7d48acc6f4fd4bef4aaab4000b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/comments", "author": null, "committer": null, "parents": [{"sha": "a5551ee6fc33e6b0b4bef3b3720173a8bb7eed44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5551ee6fc33e6b0b4bef3b3720173a8bb7eed44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5551ee6fc33e6b0b4bef3b3720173a8bb7eed44"}], "stats": {"total": 110, "additions": 108, "deletions": 2}, "files": [{"sha": "4a3d74f21c533a4f996e17680a06e55b4c8d940f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "patch": "@@ -1,3 +1,10 @@\n+2015-05-14  Rohit Arul Raj  <rohitrulraj@freescale.com>\n+\n+\t* varasm.c (output_constant_pool_1): Pass down alignment from\n+\tconstant pool entry's descriptor to output_constant_pool_2.\n+\t(output_object_block): Add comment prior to call to\n+\toutput_constant_pool_1.\n+\n 2015-05-14  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/65862"}, {"sha": "8c71bd56822e8d957a41bed6ca0868497e6ffa03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "patch": "@@ -1,3 +1,7 @@\n+2015-05-14  Rohit Arul Raj  <rohitrulraj@freescale.com>\n+\n+\t* gcc.target/powerpc/pr60158.c: New test.\n+\n 2015-05-14  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* gcc.target/i386/sibcall-7.c: New test."}, {"sha": "e832397ddc218a4f38440dc3fb37b0b62de6d16d", "filename": "gcc/testsuite/gcc.target/powerpc/pr60158.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60158.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60158.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60158.c?ref=06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } { \"*\" } { \"\" } } */\n+/* { dg-options \"-mcpu=8548 -mno-spe -mfloat-gprs=double -Os -fdata-sections -fpic -mrelocatable\" } */\n+\n+#define NULL 0\n+int func (int val);\n+void *func2 (void *ptr);\n+\n+static const char *ifs;\n+static char map[256];\n+\n+typedef struct {\n+/* None of these fields are used, but removing any\n+   of them makes the problem go away.  */\n+  char *data;\n+  int length;\n+  int maxlen;\n+  int quote;\n+} o_string;\n+\n+#define NULL_O_STRING {NULL,0,0,0}\n+\n+static int parse_stream (void *dest, void *ctx)\n+{\n+  int ch = func (0), m;\n+\n+  while (ch != -1) {\n+    m = map[ch];\n+    if (ch != '\\n')\n+    func2(dest);\n+\n+    ctx = func2 (ctx);\n+    if (!func (0))\n+      return 0;\n+    if (m != ch) {\n+      func2 (\"htns\");\n+      break;\n+    }\n+  }\n+  return -1;\n+}\n+\n+static void mapset (const char *set, int code)\n+{\n+  const char *s;\n+  for (s=set; *s; s++)  map[(int)*s] = code;\n+}\n+\n+static void update_ifs_map(void)\n+{\n+  /* char *ifs and char map[256] are both globals.  */\n+  ifs = func2 (\"abc\");\n+  if (ifs == NULL) ifs=\"def\";\n+\n+  func2 (map);\n+  {\n+    char subst[2] = {4, 0};\n+    mapset (subst, 3);\n+  }\n+  mapset (\";&|#\", 1);\n+}\n+\n+int parse_stream_outer (int flag)\n+{\n+  int blah;\n+  o_string temp=NULL_O_STRING;\n+  int rcode;\n+\n+  do {\n+    update_ifs_map ();\n+    func2 (&blah); /* a memory clobber works as well.  */\n+    rcode = parse_stream (&temp, NULL);\n+    func2 (\"aoeu\");\n+    if (func (0) != 0) {\n+      func2 (NULL);\n+    }\n+  } while (rcode != -1);\n+  return 0;\n+}\n+\n+/* { dg-final { if ![file exists pr60158.s] { fail \"pr60158.c (compile)\"; return; } } } */\n+\n+/* { dg-final { set c_rel [llength [grep pr60158.s \\\\.data\\\\.rel\\\\.ro\\\\.local]] } } */\n+/* { dg-final { set c_fix [llength [grep pr60158.s \\\\.fixup]] } } */\n+/* { dg-final { if [string match $c_rel $c_fix] \\{\t} } */\n+/* { dg-final {     pass \"pr60158.c (passed)\"\t} } */\n+/* { dg-final { \\} else \\{\t} } */\n+/* { dg-final {     fail \"pr60158.c (.fixup table entries not generated for .data.rel.ro.local section)\"\t} } */\n+/* { dg-final { \\}\t} } */"}, {"sha": "7630202322e861d5e72909d38518caeea93459be", "filename": "gcc/varasm.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e7e3183b8869d45ed8719b449c0f7dd2573ab8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=06e7e3183b8869d45ed8719b449c0f7dd2573ab8", "patch": "@@ -3968,8 +3968,12 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc,\n   /* Output the label.  */\n   targetm.asm_out.internal_label (asm_out_file, \"LC\", desc->labelno);\n \n-  /* Output the data.  */\n-  output_constant_pool_2 (desc->mode, x, align);\n+  /* Output the data.\n+     Pass actual alignment value while emitting string constant to asm code\n+     as function 'output_constant_pool_1' explicitly passes the alignment as 1\n+     assuming that the data is already aligned which prevents the generation \n+     of fix-up table entries.  */\n+  output_constant_pool_2 (desc->mode, x, desc->align);\n \n   /* Make sure all constants in SECTION_MERGE and not SECTION_STRINGS\n      sections have proper size.  */\n@@ -7380,6 +7384,8 @@ output_object_block (struct object_block *block)\n       if (CONSTANT_POOL_ADDRESS_P (symbol))\n \t{\n \t  desc = SYMBOL_REF_CONSTANT (symbol);\n+\t  /* Pass 1 for align as we have already laid out everything in the block.\n+\t     So aligning shouldn't be necessary.  */\n \t  output_constant_pool_1 (desc, 1);\n \t  offset += GET_MODE_SIZE (desc->mode);\n \t}"}]}