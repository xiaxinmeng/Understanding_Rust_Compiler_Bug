{"sha": "6462c441e1ae91377025ca105d91263086bc1577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2MmM0NDFlMWFlOTEzNzcwMjVjYTEwNWQ5MTI2MzA4NmJjMTU3Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-05T03:10:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-05T03:10:42Z"}, "message": "cp-tree.h (DELTA_FROM_VTABLE_ENTRY): Remove.\n\n\t* cp-tree.h (DELTA_FROM_VTABLE_ENTRY): Remove.\n\t(SET_FNADDR_FROM_VTABLE_ENTRY): Likewise.\n\t(lang_decl_flags): Add vcall_offset.\n\t(THUNK_VCALL_OFFSET): Use it.\n\t* decl.c (lang_mark_tree): Don't mark DECL_ACCESS for a thunk.\n\t* method.c (make_thunk): Create the lang_decl here, not in\n\temit_thunk.\n\t(emit_thunk): Make generic thunks into ordinary functions once\n\tthey have been fed to expand_body.\n\t* semantics.c (expand_body): Set current_function_is_thunk here.\n\nFrom-SVN: r33699", "tree": {"sha": "126f829e671386cf6d10ee6d1d3f9da782f40515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126f829e671386cf6d10ee6d1d3f9da782f40515"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6462c441e1ae91377025ca105d91263086bc1577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6462c441e1ae91377025ca105d91263086bc1577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6462c441e1ae91377025ca105d91263086bc1577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6462c441e1ae91377025ca105d91263086bc1577/comments", "author": null, "committer": null, "parents": [{"sha": "9d4c21486cc7709172723c8fe12dd7f8d213b605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c21486cc7709172723c8fe12dd7f8d213b605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4c21486cc7709172723c8fe12dd7f8d213b605"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "636f30ec93797d178b44defc807610807472f34d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6462c441e1ae91377025ca105d91263086bc1577", "patch": "@@ -1,3 +1,16 @@\n+2000-05-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (DELTA_FROM_VTABLE_ENTRY): Remove.\n+\t(SET_FNADDR_FROM_VTABLE_ENTRY): Likewise.\n+\t(lang_decl_flags): Add vcall_offset.\n+\t(THUNK_VCALL_OFFSET): Use it.\n+\t* decl.c (lang_mark_tree): Don't mark DECL_ACCESS for a thunk.\n+\t* method.c (make_thunk): Create the lang_decl here, not in\n+\temit_thunk.\n+\t(emit_thunk): Make generic thunks into ordinary functions once\n+\tthey have been fed to expand_body.\n+\t* semantics.c (expand_body): Set current_function_is_thunk here.\n+\n 2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (update_vtable_entry_for_fn): Prototype."}, {"sha": "cb469679310454db1c2e5d7de8654774dcb92b22", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6462c441e1ae91377025ca105d91263086bc1577", "patch": "@@ -1294,13 +1294,6 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n   ((CP_TYPE_QUALS (NODE) & (TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE))\t\\\n    == TYPE_QUAL_CONST)\n \n-#define DELTA_FROM_VTABLE_ENTRY(ENTRY)\t\t\t\t\\\n-  (!flag_vtable_thunks ?\t\t\t\t\t\\\n-     TREE_VALUE (CONSTRUCTOR_ELTS (ENTRY))\t\t\t\\\n-   : !DECL_THUNK_P (TREE_OPERAND ((ENTRY), 0)) \t\t\t\\\n-   ? integer_zero_node\t\t\t\t\t\t\\\n-   : build_int_2 (THUNK_DELTA (TREE_OPERAND ((ENTRY), 0)), 0))\n-\n /* Virtual function addresses can be gotten from a virtual function\n    table entry using this macro.  */\n #define FNADDR_FROM_VTABLE_ENTRY(ENTRY)\t\t\t\t\t\\\n@@ -1310,8 +1303,6 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n    ? (ENTRY)\t\t\t\t\t\t\t\t\\\n    : DECL_INITIAL (TREE_OPERAND ((ENTRY), 0)))\n \n-#define SET_FNADDR_FROM_VTABLE_ENTRY(ENTRY,VALUE) \\\n-  (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (CONSTRUCTOR_ELTS (ENTRY)))) = (VALUE))\n #define FUNCTION_ARG_CHAIN(NODE) (TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (NODE))))\n #define PROMOTES_TO_AGGR_TYPE(NODE,CODE)\t\\\n   (((CODE) == TREE_CODE (NODE)\t\t\t\\\n@@ -1900,6 +1891,10 @@ struct lang_decl_flags\n     /* In a namespace-scope FUNCTION_DECL, this is\n        GLOBAL_INIT_PRIORITY.  */\n     int init_priority;\n+\n+    /* In a FUNCTION_DECL for which DECL_THUNK_P holds, this is\n+       THUNK_VCALL_OFFSET.  */\n+    HOST_WIDE_INT vcall_offset;\n   } u2;\n };\n \n@@ -3039,7 +3034,8 @@ extern int flag_new_for_scope;\n    vtable for the `this' pointer to find the vcall offset.  (The vptr\n    is always located at offset zero from the f `this' pointer.)  If\n    zero, then there is no vcall offset.  */\n-#define THUNK_VCALL_OFFSET(DECL) (DECL_CHECK (DECL)->decl.u2.i)\n+#define THUNK_VCALL_OFFSET(DECL) \\\n+  (DECL_LANG_SPECIFIC (DECL)->decl_flags.u2.vcall_offset)\n \n /* DECL_NEEDED_P holds of a declaration when we need to emit its\n    definition.  This is true when the back-end tells us that"}, {"sha": "81203b432ab4aad0c2a768ff01c049982fab677d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6462c441e1ae91377025ca105d91263086bc1577", "patch": "@@ -14731,7 +14731,9 @@ lang_mark_tree (t)\n       if (ld)\n \t{\n \t  ggc_mark (ld);\n-\t  if (!DECL_GLOBAL_CTOR_P (t) && !DECL_GLOBAL_DTOR_P (t))\n+\t  if (!DECL_GLOBAL_CTOR_P (t) \n+\t      && !DECL_GLOBAL_DTOR_P (t)\n+\t      && !DECL_THUNK_P (t))\n \t    ggc_mark_tree (ld->decl_flags.u2.access);\n \t  ggc_mark_tree (ld->decl_flags.context);\n \t  if (TREE_CODE (t) != NAMESPACE_DECL)"}, {"sha": "6491e2b1e521238c08f626563c8ad3be495ec177", "filename": "gcc/cp/method.c", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=6462c441e1ae91377025ca105d91263086bc1577", "patch": "@@ -2055,6 +2055,9 @@ make_thunk (function, delta, vcall_index)\n   if (thunk == NULL_TREE)\n     {\n       thunk = build_decl (FUNCTION_DECL, thunk_id, TREE_TYPE (func_decl));\n+      DECL_LANG_SPECIFIC (thunk) = DECL_LANG_SPECIFIC (func_decl);\n+      copy_lang_decl (func_decl);\n+      DECL_CONTEXT (thunk) = DECL_CONTEXT (func_decl);\n       TREE_READONLY (thunk) = TREE_READONLY (func_decl);\n       TREE_THIS_VOLATILE (thunk) = TREE_THIS_VOLATILE (func_decl);\n       comdat_linkage (thunk);\n@@ -2063,12 +2066,22 @@ make_thunk (function, delta, vcall_index)\n       THUNK_DELTA (thunk) = delta;\n       THUNK_VCALL_OFFSET (thunk) \n \t= vcall_index * int_size_in_bytes (vtable_entry_type);\n+      /* The thunk itself is not a constructor or destructor, even if\n+       the thing it is thunking to is.  */\n+      DECL_INTERFACE_KNOWN (thunk) = 1;\n+      DECL_NOT_REALLY_EXTERN (thunk) = 1;\n+      DECL_SAVED_FUNCTION_DATA (thunk) = NULL;\n+      DECL_DESTRUCTOR_P (thunk) = 0;\n+      DECL_CONSTRUCTOR_P (thunk) = 0;\n       DECL_EXTERNAL (thunk) = 1;\n       DECL_ARTIFICIAL (thunk) = 1;\n-      DECL_CONTEXT (thunk) = DECL_CONTEXT (func_decl);\n       /* Even if this thunk is a member of a local class, we don't\n \t need a static chain.  */\n       DECL_NO_STATIC_CHAIN (thunk) = 1;\n+      /* The THUNK is not a pending inline, even if the FUNC_DECL is.  */\n+      DECL_PENDING_INLINE_P (thunk) = 0;\n+      /* Nor has it been deferred.  */\n+      DECL_DEFERRED_FN (thunk) = 0;\n       /* So that finish_file can write out any thunks that need to be: */\n       pushdecl_top_level (thunk);\n     }\n@@ -2081,24 +2094,40 @@ void\n emit_thunk (thunk_fndecl)\n      tree thunk_fndecl;\n {\n-  tree fnaddr = DECL_INITIAL (thunk_fndecl);\n-  tree function = TREE_OPERAND (fnaddr, 0);\n-  int delta = THUNK_DELTA (thunk_fndecl);\n-  int vcall_offset = THUNK_VCALL_OFFSET (thunk_fndecl);\n+  tree fnaddr;\n+  tree function;\n+  int delta;\n+  int vcall_offset;\n \n   if (TREE_ASM_WRITTEN (thunk_fndecl))\n     return;\n \n-  TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n+  if (TREE_CODE (DECL_INITIAL (thunk_fndecl)) != ADDR_EXPR)\n+    /* We already turned this thunk into an ordinary function.\n+       There's no need to process this thunk again.  (We can't just\n+       clear DECL_THUNK_P because that will confuse\n+       FNADDR_FROM_VTABLE_ENTRY and friends.)  */\n+    return;\n+\n+  fnaddr = DECL_INITIAL (thunk_fndecl);\n+  function = TREE_OPERAND (fnaddr, 0);\n+  delta = THUNK_DELTA (thunk_fndecl);\n+  vcall_offset = THUNK_VCALL_OFFSET (thunk_fndecl);\n \n   TREE_ADDRESSABLE (function) = 1;\n   mark_used (function);\n \n   if (current_function_decl)\n     abort ();\n \n+  if (flag_syntax_only)\n+    {\n+      TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n+      return;\n+    }\n+\n #ifdef ASM_OUTPUT_MI_THUNK\n-  if (!flag_syntax_only && vcall_offset == 0)\n+  if (vcall_offset == 0)\n     {\n       const char *fnname;\n       current_function_decl = thunk_fndecl;\n@@ -2115,6 +2144,7 @@ emit_thunk (thunk_fndecl)\n       assemble_end_function (thunk_fndecl, fnname);\n       current_function_decl = 0;\n       cfun = 0;\n+      TREE_ASM_WRITTEN (thunk_fndecl) = 1;\n     }\n   else\n #endif /* ASM_OUTPUT_MI_THUNK */\n@@ -2141,21 +2171,10 @@ emit_thunk (thunk_fndecl)\n     a = nreverse (t);\n     DECL_ARGUMENTS (thunk_fndecl) = a;\n     DECL_RESULT (thunk_fndecl) = NULL_TREE;\n-    DECL_LANG_SPECIFIC (thunk_fndecl) = DECL_LANG_SPECIFIC (function);\n-    copy_lang_decl (thunk_fndecl);\n-    DECL_INTERFACE_KNOWN (thunk_fndecl) = 1;\n-    DECL_NOT_REALLY_EXTERN (thunk_fndecl) = 1;\n-    DECL_SAVED_FUNCTION_DATA (thunk_fndecl) = NULL;\n-\n-    /* The thunk itself is not a constructor or destructor, even if\n-       the thing it is thunking to is.  */\n-    DECL_DESTRUCTOR_P (thunk_fndecl) = 0;\n-    DECL_CONSTRUCTOR_P (thunk_fndecl) = 0;\n \n     push_to_top_level ();\n     start_function (NULL_TREE, thunk_fndecl, NULL_TREE, SF_PRE_PARSED);\n     store_parm_decls ();\n-    current_function_is_thunk = 1;\n \n     /* Adjust the this pointer by the constant.  */\n     t = ssize_int (delta);\n@@ -2199,19 +2218,12 @@ emit_thunk (thunk_fndecl)\n       finish_expr_stmt (t);\n \n     /* The back-end expects DECL_INITIAL to contain a BLOCK, so we\n-       clear this here.  */\n-    DECL_INITIAL (thunk_fndecl) = NULL_TREE;\n+       create one.  */\n     DECL_INITIAL (thunk_fndecl) = make_node (BLOCK);\n     BLOCK_VARS (DECL_INITIAL (thunk_fndecl)) \n       = DECL_ARGUMENTS (thunk_fndecl);\n     expand_body (finish_function (0));\n-    /* Restore the DECL_INITIAL for the THUNK_DECL.  */\n-    DECL_INITIAL (thunk_fndecl) = fnaddr;\n     pop_from_top_level ();\n-\n-    /* Don't let the backend defer this function.  */\n-    if (DECL_DEFER_OUTPUT (thunk_fndecl))\n-      output_inline_function (thunk_fndecl);\n   }\n }\n \f"}, {"sha": "d6d493f931d670aa31554d222ab5c6c6e6188a7f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6462c441e1ae91377025ca105d91263086bc1577/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6462c441e1ae91377025ca105d91263086bc1577", "patch": "@@ -2775,6 +2775,7 @@ expand_body (fn)\n \n   start_function (NULL_TREE, fn, NULL_TREE, SF_PRE_PARSED | SF_EXPAND);\n   store_parm_decls ();\n+  current_function_is_thunk = DECL_THUNK_P (fn);\n \n   /* We don't need to redeclare __FUNCTION__, __PRETTY_FUNCTION__, or\n      any of the other magic variables we set up when starting a"}]}