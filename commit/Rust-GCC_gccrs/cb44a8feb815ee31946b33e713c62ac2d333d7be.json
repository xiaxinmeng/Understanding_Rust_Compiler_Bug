{"sha": "cb44a8feb815ee31946b33e713c62ac2d333d7be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0NGE4ZmViODE1ZWUzMTk0NmIzM2U3MTNjNjJhYzJkMzMzZDdiZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-18T22:21:14Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T09:59:22Z"}, "message": "When we construct the fields can be in any order.\n\nThe gimple interface requires us to have the fields in order as to the\nAlgebraic Data Type which it references.", "tree": {"sha": "97b64ada54fcedd0dca0d99943ebaf699c2a0eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97b64ada54fcedd0dca0d99943ebaf699c2a0eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb44a8feb815ee31946b33e713c62ac2d333d7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb44a8feb815ee31946b33e713c62ac2d333d7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb44a8feb815ee31946b33e713c62ac2d333d7be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb44a8feb815ee31946b33e713c62ac2d333d7be/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f6f18fe296d4729648eec0b77c8610f0b43445c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6f18fe296d4729648eec0b77c8610f0b43445c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6f18fe296d4729648eec0b77c8610f0b43445c"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "0b2b5421a732658d8bdfbda08fb4e4b60761e337", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=cb44a8feb815ee31946b33e713c62ac2d333d7be", "patch": "@@ -1679,6 +1679,17 @@ class StructExprStructFields : public StructExprStruct\n     return fields;\n   };\n \n+  std::vector<std::unique_ptr<StructExprField> > get_fields_as_owner ()\n+  {\n+    return std::move (fields);\n+  };\n+\n+  void set_fields_as_owner (\n+    std::vector<std::unique_ptr<StructExprField> > new_fields)\n+  {\n+    fields = std::move (new_fields);\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "98db278ab82645603689bc5e8a0e3fef4d5305fa", "filename": "gcc/rust/typecheck/rust-hir-type-check-struct-field.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-struct-field.h?ref=cb44a8feb815ee31946b33e713c62ac2d333d7be", "patch": "@@ -57,6 +57,7 @@ class TypeCheckStructExpr : public TypeCheckBase\n   TyTy::ADTType *struct_path_resolved;\n   TyTy::TyBase *resolved_field;\n   std::set<std::string> fields_assigned;\n+  std::map<size_t, HIR::StructExprField *> adtFieldIndexToField;\n };\n \n } // namespace Resolver"}, {"sha": "a33dad1965c5f5269cf87fc4f0b8fe115ecc18ab", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=cb44a8feb815ee31946b33e713c62ac2d333d7be", "patch": "@@ -196,6 +196,11 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \t\t    struct_expr.struct_base->base_struct->get_locus_slow ());\n \t\t}\n \n+\t      size_t field_index;\n+\t      bool ok = struct_path_resolved->get_field (missing, &field_index);\n+\t      rust_assert (ok);\n+\n+\t      adtFieldIndexToField[field_index] = implicit_field;\n \t      struct_expr.get_fields ().push_back (\n \t\tstd::unique_ptr<HIR::StructExprField> (implicit_field));\n \t    }\n@@ -207,7 +212,18 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n   // assigned field in the constructor is in the same order as the field in the\n   // type\n \n-  // TODO\n+  std::vector<std::unique_ptr<HIR::StructExprField> > expr_fields\n+    = struct_expr.get_fields_as_owner ();\n+  for (auto &f : expr_fields)\n+    f.release ();\n+\n+  std::vector<std::unique_ptr<HIR::StructExprField> > ordered_fields;\n+  for (size_t i = 0; i < adtFieldIndexToField.size (); i++)\n+    {\n+      ordered_fields.push_back (\n+\tstd::unique_ptr<HIR::StructExprField> (adtFieldIndexToField[i]));\n+    }\n+  struct_expr.set_fields_as_owner (std::move (ordered_fields));\n }\n \n void\n@@ -266,9 +282,10 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n       return;\n     }\n \n+  size_t field_index;\n   TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value ());\n   TyTy::StructFieldType *field_type\n-    = struct_path_resolved->get_field (field.field_name);\n+    = struct_path_resolved->get_field (field.field_name, &field_index);\n   if (field_type == nullptr)\n     {\n       rust_error_at (field.get_locus (), \"unknown field\");\n@@ -277,7 +294,10 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifierValue &field)\n \n   resolved_field = field_type->get_field_type ()->combine (value);\n   if (resolved_field != nullptr)\n-    fields_assigned.insert (field.field_name);\n+    {\n+      fields_assigned.insert (field.field_name);\n+      adtFieldIndexToField[field_index] = &field;\n+    }\n }\n \n void\n@@ -291,9 +311,10 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n       return;\n     }\n \n+  size_t field_index;\n   TyTy::TyBase *value = TypeCheckExpr::Resolve (field.get_value ());\n   TyTy::StructFieldType *field_type\n-    = struct_path_resolved->get_field (field_name);\n+    = struct_path_resolved->get_field (field_name, &field_index);\n   if (field_type == nullptr)\n     {\n       rust_error_at (field.get_locus (), \"unknown field\");\n@@ -302,7 +323,10 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIndexValue &field)\n \n   resolved_field = field_type->get_field_type ()->combine (value);\n   if (resolved_field != nullptr)\n-    fields_assigned.insert (field_name);\n+    {\n+      fields_assigned.insert (field_name);\n+      adtFieldIndexToField[field_index] = &field;\n+    }\n }\n \n void\n@@ -315,8 +339,9 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n       return;\n     }\n \n+  size_t field_index;\n   TyTy::StructFieldType *field_type\n-    = struct_path_resolved->get_field (field.get_field_name ());\n+    = struct_path_resolved->get_field (field.get_field_name (), &field_index);\n   if (field_type == nullptr)\n     {\n       rust_error_at (field.get_locus (), \"unknown field\");\n@@ -331,7 +356,10 @@ TypeCheckStructExpr::visit (HIR::StructExprFieldIdentifier &field)\n \n   resolved_field = field_type->get_field_type ()->combine (value);\n   if (resolved_field != nullptr)\n-    fields_assigned.insert (field.field_name);\n+    {\n+      fields_assigned.insert (field.field_name);\n+      adtFieldIndexToField[field_index] = &field;\n+    }\n }\n \n } // namespace Resolver"}, {"sha": "615eae7025d9cb075fb1ea3a20113dbd55909c29", "filename": "gcc/testsuite/rust.test/compilable/struct_init_7.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init_7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init_7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init_7.rs?ref=cb44a8feb815ee31946b33e713c62ac2d333d7be", "patch": "@@ -0,0 +1,9 @@\n+struct Foo {\n+    a: i32,\n+    b: f32,\n+}\n+\n+fn main() {\n+    let a = Foo { a: 1, b: 2f32 };\n+    let b = Foo { b: 4f32, ..a };\n+}"}, {"sha": "e62f40af6de83aadf4e620dadfb6cbd957a230cc", "filename": "gcc/testsuite/rust.test/compilable/struct_init_8.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init_8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb44a8feb815ee31946b33e713c62ac2d333d7be/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init_8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstruct_init_8.rs?ref=cb44a8feb815ee31946b33e713c62ac2d333d7be", "patch": "@@ -0,0 +1,6 @@\n+struct Foo(f32, i32);\n+\n+fn main() {\n+    let a = Foo { 1: 1, 0: 2f32 };\n+    let b = Foo { ..a };\n+}"}]}