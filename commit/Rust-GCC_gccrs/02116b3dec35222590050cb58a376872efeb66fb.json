{"sha": "02116b3dec35222590050cb58a376872efeb66fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxMTZiM2RlYzM1MjIyNTkwMDUwY2I1OGEzNzY4NzJlZmViNjZmYg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-05-20T10:57:31Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-05-20T10:57:31Z"}, "message": "memcpy-2.c (SEQUENCE_LENGTH): Define.\n\n\t* gcc.c-torture/execute/memcpy-2.c (SEQUENCE_LENGTH): Define.\n\t(MAX_COPY): Bump up to 10 times sizeof (long long).\n\t(main): Use a pattern of SEQUENCE_LENGTH different characters to copy.\n\n\t* gcc.c-torture/execute/memset-1.c (MAX_COPY): Bump up to 10 times\n\tsizeof (long long).\n\n\t* gcc.c-torture/execute/strcpy-1.c: New test.\n\nFrom-SVN: r53658", "tree": {"sha": "50d19f654309d4fa9606ccc6aa29bc6dc908f7ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50d19f654309d4fa9606ccc6aa29bc6dc908f7ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02116b3dec35222590050cb58a376872efeb66fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02116b3dec35222590050cb58a376872efeb66fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02116b3dec35222590050cb58a376872efeb66fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02116b3dec35222590050cb58a376872efeb66fb/comments", "author": null, "committer": null, "parents": [{"sha": "b3f47c787cac7a101c40396a7c38faa64ad0bca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3f47c787cac7a101c40396a7c38faa64ad0bca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3f47c787cac7a101c40396a7c38faa64ad0bca6"}], "stats": {"total": 113, "additions": 105, "deletions": 8}, "files": [{"sha": "4f5290b1c7c8feca757bf040c695d293bba17dff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02116b3dec35222590050cb58a376872efeb66fb", "patch": "@@ -1,3 +1,14 @@\n+Mon May 20 10:51:35 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* gcc.c-torture/execute/memcpy-2.c (SEQUENCE_LENGTH): Define.\n+\t(MAX_COPY): Bump up to 10 times sizeof (long long).\n+\t(main): Use a pattern of SEQUENCE_LENGTH different characters to copy.\n+\n+\t* gcc.c-torture/execute/memset-1.c (MAX_COPY): Bump up to 10 times\n+\tsizeof (long long).\n+\n+\t* gcc.c-torture/execute/strcpy-1.c: New test.\n+\n 2002-05-19  Jason Merrill  <jason2redhat.com>\n \n \t* g++.dg/ext/oper1.C: New test."}, {"sha": "f328b64778d9af8b27cfd76586e5377da0511f01", "filename": "gcc/testsuite/gcc.c-torture/execute/memcpy-2.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemcpy-2.c?ref=02116b3dec35222590050cb58a376872efeb66fb", "patch": "@@ -12,7 +12,7 @@\n #endif\n \n #ifndef MAX_COPY\n-#define MAX_COPY (8 * sizeof (long long))\n+#define MAX_COPY (10 * sizeof (long long))\n #endif\n \n #ifndef MAX_EXTRA\n@@ -21,6 +21,11 @@\n \n #define MAX_LENGTH (MAX_OFFSET + MAX_COPY + MAX_EXTRA)\n \n+\n+/* Use a sequence length that is not divisible by two, to make it more\n+   likely to detect when words are mixed up.  */\n+#define SEQUENCE_LENGTH 31\n+\n static union {\n   char buf[MAX_LENGTH];\n   long long align_int;\n@@ -30,16 +35,18 @@ static union {\n main ()\n {\n   int off1, off2, len, i;\n-  char *p, *q;\n+  char *p, *q, c;\n \n   for (off1 = 0; off1 < MAX_OFFSET; off1++)\n     for (off2 = 0; off2 < MAX_OFFSET; off2++)\n       for (len = 1; len < MAX_COPY; len++)\n \t{\n-\t  for (i = 0; i < MAX_LENGTH; i++)\n+\t  for (i = 0, c = 'A'; i < MAX_LENGTH; i++, c++)\n \t    {\n \t      u1.buf[i] = 'a';\n-\t      u2.buf[i] = 'A';\n+\t      if (c >= 'A' + SEQUENCE_LENGTH)\n+\t\tc = 'A';\n+\t      u2.buf[i] = c;\n \t    }\n \n \t  p = memcpy (u1.buf + off1, u2.buf + off2, len);\n@@ -51,9 +58,13 @@ main ()\n \t    if (*q != 'a')\n \t      abort ();\n \n-\t  for (i = 0; i < len; i++, q++)\n-\t    if (*q != 'A')\n-\t      abort ();\n+\t  for (i = 0, c = 'A' + off2; i < len; i++, q++, c++)\n+\t    {\n+\t      if (c >= 'A' + SEQUENCE_LENGTH)\n+\t\tc = 'A';\n+\t      if (*q != c)\n+\t\tabort ();\n+\t    }\n \n \t  for (i = 0; i < MAX_EXTRA; i++, q++)\n \t    if (*q != 'a')"}, {"sha": "b0b70f3e67dfacd0ade1da81beb891d73d3d4078", "filename": "gcc/testsuite/gcc.c-torture/execute/memset-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemset-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemset-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fmemset-1.c?ref=02116b3dec35222590050cb58a376872efeb66fb", "patch": "@@ -12,7 +12,7 @@\n #endif\n \n #ifndef MAX_COPY\n-#define MAX_COPY (8 * sizeof (long long))\n+#define MAX_COPY (10 * sizeof (long long))\n #endif\n \n #ifndef MAX_EXTRA"}, {"sha": "9484e95d922b61c9598acc14abab67d48094a411", "filename": "gcc/testsuite/gcc.c-torture/execute/strcpy-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02116b3dec35222590050cb58a376872efeb66fb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstrcpy-1.c?ref=02116b3dec35222590050cb58a376872efeb66fb", "patch": "@@ -0,0 +1,75 @@\n+/* Copyright (C) 2002  Free Software Foundation.\n+\n+   Test strcpy with various combinations of pointer alignments and lengths to\n+   make sure any optimizations in the library are correct.  */\n+\n+#include <string.h>\n+\n+#ifndef MAX_OFFSET\n+#define MAX_OFFSET (sizeof (long long))\n+#endif\n+\n+#ifndef MAX_COPY\n+#define MAX_COPY (10 * sizeof (long long))\n+#endif\n+\n+#ifndef MAX_EXTRA\n+#define MAX_EXTRA (sizeof (long long))\n+#endif\n+\n+#define MAX_LENGTH (MAX_OFFSET + MAX_COPY + 1 + MAX_EXTRA)\n+\n+/* Use a sequence length that is not divisible by two, to make it more\n+   likely to detect when words are mixed up.  */\n+#define SEQUENCE_LENGTH 31\n+\n+static union {\n+  char buf[MAX_LENGTH];\n+  long long align_int;\n+  long double align_fp;\n+} u1, u2;\n+\n+main ()\n+{\n+  int off1, off2, len, i;\n+  char *p, *q, c;\n+\n+  for (off1 = 0; off1 < MAX_OFFSET; off1++)\n+    for (off2 = 0; off2 < MAX_OFFSET; off2++)\n+      for (len = 1; len < MAX_COPY; len++)\n+\t{\n+\t  for (i = 0, c = 'A'; i < MAX_LENGTH; i++, c++)\n+\t    {\n+\t      u1.buf[i] = 'a';\n+\t      if (c >= 'A' + SEQUENCE_LENGTH)\n+\t\tc = 'A';\n+\t      u2.buf[i] = c;\n+\t    }\n+\t  u2.buf[off2 + len] = '\\0';\n+\n+\t  p = strcpy (u1.buf + off1, u2.buf + off2);\n+\t  if (p != u1.buf + off1)\n+\t    abort ();\n+\n+\t  q = u1.buf;\n+\t  for (i = 0; i < off1; i++, q++)\n+\t    if (*q != 'a')\n+\t      abort ();\n+\n+\t  for (i = 0, c = 'A' + off2; i < len; i++, q++, c++)\n+\t    {\n+\t      if (c >= 'A' + SEQUENCE_LENGTH)\n+\t\tc = 'A';\n+\t      if (*q != c)\n+\t\tabort ();\n+\t    }\n+\n+\t  if (*q++ != '\\0')\n+\t    abort ();\n+\t  for (i = 0; i < MAX_EXTRA; i++, q++)\n+\t    if (*q != 'a')\n+\t      abort ();\n+\t}\n+\n+  exit (0);\n+}"}]}