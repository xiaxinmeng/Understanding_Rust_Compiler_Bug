{"sha": "7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzNGU2MDU2Y2IyYWU3M2UzZDdmM2IwNTFkM2EwOGU5MjExOGY1NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-24T08:58:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-24T08:58:44Z"}, "message": "dg-extract-results.sh: New file.\n\ncontrib/\n\t* dg-extract-results.sh: New file.\ngcc/\n\t* Makefile.in (lang_checks_parallelized, check_gcc_parallelize,\n\tcheck_p_tool, check_p_vars, check_p_subno, check_p_comma,\n\tcheck_p_subwork, check_p_numbers, check_p_subdir, check_p_subdirs):\n\tNew variables.\n\t(check-subtargets, check-%-subtargets, check-parallel-%): New\n\ttargets.\n\t(check-%): For test targets listed in lang_checks_parallelized\n\tif -j is used and RUNTESTFLAGS doesn't specify tests to execute,\n\trun the testing in multiple make goals, possibly parallel, and\n\tafterwards run dg-extract-results.sh to merge the sum and log files.\ngcc/cp/\n\t* Make-lang.in (check-c++-subtargets): New alias for\n\tcheck-g++-subtargets.\n\t(lang_checks_parallelized): Add check-g++.\n\t(check_g++_parallelize): New variable.\ngcc/fortran/\n\t* Make-lang.in (check-f95-subtargets, check-fortran-subtargets): New\n\taliases for check-gfortran-subtargets.\n\t(lang_checks_parallelized): Add check-gfortran.\n\t(check_gfortran_parallelize): New variable.\ngcc/ada/\n\t* gcc-interface/Make-lang.in (check-ada-subtargets): Depend on\n\tcheck-acats-subtargets and check-gnat-subtargets.\n\t(check_acats_targets): New variable.\n\t(check-acats-subtargets, check-acats%): New targets.\n\t(check-acats): If -j is used and CHAPTERS is empty, run the testing\n\tin multiple make goals, possibly parallel, and afterwards run\n\tdg-extract-results.sh to merge the sum and log files.\ngcc/java/\n\t* Make-lang.in (check-java-subtargets): New target.\nlibstdc++-v3/\n\t* testsuite/Makefile.am (AUTOMAKE_OPTIONS): Remove dejagnu.\n\t(RUNTESTDEFAULTFLAGS, EXPECT, check_DEJAGNU_normal_targets): New\n\tvariables.\n\t(%/site.exp, check-DEJAGNU%): New targets.\n\t(check-am): Run $(MAKE) check-DEJAGNU.\n\t* testsuite/Makefile.in: Regenerated.\n\nFrom-SVN: r141337", "tree": {"sha": "87b43c1e7fd2de458ec6ca098f5749750c29c799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87b43c1e7fd2de458ec6ca098f5749750c29c799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/comments", "author": null, "committer": null, "parents": [{"sha": "aea8cb376b8670465347c99ea33feb019637dedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea8cb376b8670465347c99ea33feb019637dedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea8cb376b8670465347c99ea33feb019637dedc"}], "stats": {"total": 844, "additions": 804, "deletions": 40}, "files": [{"sha": "5bdf4a2c9bfa9f26a9f71e596ad873953066c627", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,8 @@\n+2008-10-24  Janis Johnson  <janis187@us.ibm.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dg-extract-results.sh: New file.\n+\n 2008-07-14  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* check_makefile_deps.sh: New file."}, {"sha": "75ae38f70e8a0a7d33248effcd531873d1489d26", "filename": "contrib/dg-extract-results.sh", "status": "added", "additions": 416, "deletions": 0, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/contrib%2Fdg-extract-results.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/contrib%2Fdg-extract-results.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fdg-extract-results.sh?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -0,0 +1,416 @@\n+#! /bin/sh\n+\n+# For a specified tool and optional list of test variants, extract\n+# test results from one or more test summary (.sum) files and combine\n+# the results into a new test summary file, sent to the standard output.\n+# The resulting file can be used with test result comparison scripts for\n+# results from tests that were run in parallel.  See usage() below.\n+\n+# Copyright (C) 2008 Free Software Foundation\n+# Contributed by Janis Johnson <janis187@us.ibm.com>\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+PROGNAME=dg-extract-results.sh\n+\n+usage() {\n+  cat <<EOF >&2\n+Usage: $PROGNAME [-t tool] [-l variant-list] [-L] sum-file ...\n+\n+    tool           The tool (e.g. g++, libffi) for which to create a\n+                   new test summary file.  If not specified then all\n+                   specified sum files must be for the same tool.\n+    variant-list   One or more test variant names.  If the list is\n+                   not specified then one is constructed from all\n+                   variants in the files for <tool>.\n+    sum-file       A test summary file with the format of those\n+                   created by runtest from DejaGnu.\n+    If -L is used, merge *.log files instead of *.sum.  In this\n+    mode the exact order of lines may not be preserved, just different\n+    Running *.exp chunks should be in correct order.\n+EOF\n+}\n+\n+# Write a message to the standard error.\n+\n+msg() {\n+  echo \"$@\" >&2\n+}\n+\n+# Parse the command-line options.\n+\n+VARIANTS=\"\"\n+TOOL=\"\"\n+MODE=\"sum\"\n+\n+while getopts \"l:t:L\" ARG; do\n+  case $ARG in\n+  l)  VARIANTS=\"${VARIANTS} ${OPTARG}\";;\n+  t)  test -z \"$TOOL\" || (msg \"${PROGNAME}: only one tool can be specified\"; exit 1);\n+      TOOL=\"${OPTARG}\";;\n+  L)  MODE=\"log\";;\n+  \\?) usage; exit 0;;\n+  esac\n+done\n+shift `expr ${OPTIND} - 1`\n+\n+if test $# -lt 1 ; then\n+  usage\n+  exit 1\n+fi\n+\n+TMPDIR=${TMPDIR-/tmp}\n+SUM_FILES=\"$@\"\n+FIRST_SUM=$1\n+TMP=\n+trap 'EXIT_STATUS=$?; rm -rf $TMP && exit $EXIT_STATUS' 0\n+# Create a (secure) tmp directory for tmp files.\n+{\n+  TMP=`(umask 077 && mktemp -d -q \"${TMPDIR}/dg-combine-results-$$-XXXXXX\") 2>/dev/null` &&\n+  test -n \"$TMP\" && test -d \"$TMP\"\n+} ||\n+{\n+  TMP=${TMPDIR}/dg-combine-results-$$-$RANDOM\n+  (umask 077 && mkdir $TMP)\n+} ||\n+{\n+  msg \"${PROGNAME}: cannot create a temporary directory\"\n+  { (exit 1); exit 1; }\n+}\n+\n+# Find a good awk.\n+\n+if test -z \"$AWK\" ; then\n+  for AWK in gawk nawk awk\n+  do\n+    if type $AWK 2>&1 | grep 'not found' > /dev/null 2>&1 ; then\n+      :\n+    else\n+      break\n+    fi\n+  done\n+fi\n+\n+# Verify that the specified summary files exist.\n+\n+ERROR=0\n+for FILE in $SUM_FILES\n+do\n+  if ! test -f $FILE ; then\n+    msg \"${PROGNAME}: file $FILE does not exist.\"\n+    ERROR=1\n+  fi\n+done\n+test $ERROR -eq 0 || exit 1\n+\n+if [ -z \"$TOOL\" ]; then\n+  # If no tool was specified, all specified summary files must be for\n+  # the same tool.\n+\n+  CNT=`grep '=== .* tests ===' $SUM_FILES | $AWK '{ print $3 }' | sort -u | wc -l`\n+  if [ $CNT -eq 1 ]; then\n+    TOOL=`grep '=== .* tests ===' $FIRST_SUM | $AWK '{ print $2 }'`\n+  else\n+    msg \"${PROGNAME}: sum files are for multiple tools, specify a tool\"\n+    msg \"\"\n+    usage\n+    exit 1\n+  fi\n+else\n+  # Ignore the specified summary files that are not for this tool.  This\n+  # should keep the relevant files in the same order.\n+\n+  SUM_FILES=`grep -l \"=== $TOOL\" $SUM_FILES`\n+  if test -z \"$SUM_FILES\" ; then\n+    msg \"${PROGNAME}: none of the specified files are results for $TOOL\"\n+    exit 1\n+  fi\n+fi\n+\n+if [ \"$TOOL\" = acats ]; then\n+  # Acats *.sum or *.log files aren't dejagnu generated, and they have\n+  # somewhat different format.\n+  ACATS_AWK=${TMP}/acats.awk\n+  cat <<EOF > $ACATS_AWK\n+BEGIN {\n+  print_prologue=1; chapter=\"\"; insummary=0\n+  passcnt=0; failcnt=0; unsupcnt=0; failures=\"\"\n+}\n+/=== acats configuration ===/ {\n+  insummary=0\n+  if (print_prologue) print\n+  next\n+}\n+/=== acats tests ===/ {\n+  if (print_prologue) print\n+  print_prologue=0\n+  next\n+}\n+/^Running chapter / {\n+  chapter=\\$3\n+  print > \"${TMP}/chapter-\"chapter\n+  next\n+}\n+/=== acats Summary ===/ {\n+  chapter=\"\"\n+  insummary=1\n+  next\n+}\n+/^# of expected passes/\t\t{ if (insummary == 1) passcnt += \\$5; next; }\n+/^# of unexpected failures/\t{ if (insummary == 1) failcnt += \\$5; next; }\n+/^# of unsupported tests/\t{ if (insummary == 1) unsupcnt += \\$5; next; }\n+/^\\*\\*\\* FAILURES: / {\n+  if (insummary == 1) {\n+    if (failures) sub(/^\\*\\*\\* FAILURES:/,\"\")\n+    failures=failures\"\"\\$0\n+  }\n+}\n+{\n+  if (print_prologue) { print; next }\n+  if (chapter) print > \"${TMP}/chapter-\"chapter\n+}\n+END {\n+  system (\"cat ${TMP}/chapter-*\")\n+  print \"\t\t=== acats Summary ===\"\n+  print \"# of expected passes\t\t\" passcnt\n+  print \"# of unexpected failures\t\" failcnt\n+  if (unsupcnt) print \"# of unsupported tests\t\t\" unsupcnt\n+  if (failures) print failures\n+}\n+EOF\n+\n+  $AWK -f $ACATS_AWK $SUM_FILES\n+  exit 0\n+fi\n+\n+# If no variants were specified, find all variants in the remaining\n+# summary files.  Otherwise, ignore specified variants that aren't in\n+# any of those summary files.\n+\n+if test -z \"$VARIANTS\" ; then\n+  VAR_AWK=${TMP}/variants.awk\n+  cat <<EOF > $VAR_AWK\n+/^Schedule of variations:/      { in_vars=1; next }\n+/^$/                            { in_vars=0 }\n+/^Running target/               { exit }\n+{ if (in_vars==1) print \\$1; else next }\n+EOF\n+\n+  touch ${TMP}/varlist\n+  for FILE in $SUM_FILES; do\n+    $AWK -f $VAR_AWK $FILE >> ${TMP}/varlist\n+  done\n+  VARIANTS=\"`sort -u ${TMP}/varlist`\"\n+else\n+  VARS=\"$VARIANTS\"\n+  VARIANTS=\"\"\n+  for VAR in $VARS\n+  do\n+    grep -q \"Running target $VAR\" $SUM_FILES && VARIANTS=\"$VARIANTS $VAR\"\n+  done\n+fi\n+\n+# Find out if we have more than one variant, or any at all.\n+\n+VARIANT_COUNT=0\n+for VAR in $VARIANTS\n+do\n+  VARIANT_COUNT=`expr $VARIANT_COUNT + 1`\n+done\n+\n+if test $VARIANT_COUNT -eq 0 ; then\n+  msg \"${PROGNAME}: no file for $TOOL has results for the specified variants\"\n+  exit 1\n+fi\n+\n+cat $SUM_FILES \\\n+  | $AWK '/^Running/ { if ($2 != \"target\" && $3 == \"...\") print \"EXPFILE: \"$2 } ' \\\n+  | sort -u > ${TMP}/expfiles\n+\n+# Write the begining of the combined summary file.\n+\n+head -n 2 $FIRST_SUM\n+echo\n+echo \"\t\t=== $TOOL tests ===\"\n+echo\n+echo \"Schedule of variations:\"\n+for VAR in $VARIANTS\n+do\n+  echo \"    $VAR\"\n+done\n+echo\n+\n+# For each test variant for the tool, copy test reports from each of the\n+# summary files.  Set up two awk scripts from within the loop to\n+# initialize VAR and TOOL with the script, rather than assuming that the\n+# available version of awk can pass variables from the command line.\n+\n+for VAR in $VARIANTS\n+do\n+  GUTS_AWK=${TMP}/guts.awk\n+  cat << EOF > $GUTS_AWK\n+BEGIN {\n+  variant=\"$VAR\"\n+  firstvar=1\n+  expfileno=1\n+  cnt=0\n+  print_using=0\n+}\n+/^EXPFILE: / {\n+  expfiles[expfileno] = \\$2\n+  expfilesr[\\$2] = expfileno\n+  expfileno = expfileno + 1\n+}\n+/^Running target / {\n+  curvar = \\$3\n+  if (variant == curvar && firstvar == 1) { print; print_using=1; firstvar = 0 }\n+  next\n+}\n+/^Using / {\n+  if (variant == curvar && print_using) { print; next }\n+}\n+/^Running / {\n+  print_using=0\n+  if (variant == curvar) {\n+    curfile=\"${TMP}/list\"expfilesr[\\$2]\n+    expfileseen[\\$2]=expfileseen[\\$2] + 1\n+    testname=\"00\"\n+    next\n+  }\n+}\n+/\\===/ { curvar = \"\"; next }\n+/^(PASS|XPASS|FAIL|XFAIL|UNRESOLVED|WARNING|ERROR|UNSUPPORTED|UNTESTED|KFAIL):/ {\n+  testname=\\$2\n+  # Ugly hack for gfortran.dg/dg.exp\n+  if (\"$TOOL\" == \"gfortran\" && testname ~ /^gfortran.dg\\/g77\\//)\n+    testname=\"h\"testname\n+}\n+/^$/ { if (\"$MODE\" == \"sum\") next }\n+{ if (variant == curvar && curfile) {\n+    if (\"$MODE\" == \"sum\") {\n+      printf \"%s %08d|\", testname, cnt > curfile\n+      cnt = cnt + 1\n+    }\n+    filewritten[curfile]=1\n+    print > curfile\n+  } else\n+    next\n+}\n+END {\n+  n=1\n+  while (n < expfileno) {\n+    if (expfileseen[expfiles[n]]) {\n+      print \"Running \"expfiles[n]\" ...\"\n+      if (filewritten[\"${TMP}/list\"n]) {\n+\tif (expfileseen[expfiles[n]] == 1)\n+\t  cmd=\"cat\"\n+\telse\n+\t  cmd=\"LC_ALL=C sort\"\n+\tif (\"$MODE\" == \"sum\")\n+\t  system (cmd\" ${TMP}/list\"n\" | sed -n 's/^[^ ]* [^ |]*|//p'\")\n+\telse\n+\t  system (\"cat ${TMP}/list\"n)\n+      }\n+    }\n+    n = n + 1\n+  }\n+}\n+EOF\n+\n+  SUMS_AWK=${TMP}/sums.awk\n+  rm -f $SUMS_AWK\n+  cat << EOF > $SUMS_AWK\n+BEGIN {\n+  variant=\"$VAR\"\n+  tool=\"$TOOL\"\n+  passcnt=0; failcnt=0; untstcnt=0; xpasscnt=0; xfailcnt=0; unsupcnt=0; unrescnt=0;\n+  curvar=\"\"; insummary=0\n+}\n+/^Running target /\t\t{ curvar = \\$3; next }\n+/^# of /\t\t\t{ if (variant == curvar) insummary = 1 }\n+/^# of expected passes/\t\t{ if (insummary == 1) passcnt += \\$5; next; }\n+/^# of unexpected successes/\t{ if (insummary == 1) xpasscnt += \\$5; next; }\n+/^# of unexpected failures/\t{ if (insummary == 1) failcnt += \\$5; next; }\n+/^# of expected failures/\t{ if (insummary == 1) xfailcnt += \\$5; next; }\n+/^# of untested testcases/\t{ if (insummary == 1) untstcnt += \\$5; next; }\n+/^# of unresolved testcases/\t{ if (insummary == 1) unrescnt += \\$5; next; }\n+/^# of unsupported tests/\t{ if (insummary == 1) unsupcnt += \\$5; next; }\n+/^$/\t\t\t\t{ if (insummary == 1)\n+\t\t\t\t    { insummary = 0; curvar = \"\" }\n+\t\t\t\t  next\n+\t\t\t\t}\n+{ next }\n+END {\n+  printf (\"\\t\\t=== %s Summary for %s ===\\n\\n\", tool, variant)\n+  if (passcnt != 0) printf (\"# of expected passes\\t\\t%d\\n\", passcnt)\n+  if (xpasscnt != 0) printf (\"# of unexpected successes\\t%d\\n\", xpasscnt)\n+  if (failcnt != 0) printf (\"# of unexpected failures\\t%d\\n\", failcnt)\n+  if (xfailcnt != 0) printf (\"# of expected failures\\t\\t%d\\n\", xfailcnt)\n+  if (untstcnt != 0) printf (\"# of untested testcases\\t\\t%d\\n\", untstcnt)\n+  if (unrescnt != 0) printf (\"# of unresolved testcases\\t%d\\n\", unrescnt)\n+  if (unsupcnt != 0) printf (\"# of unsupported tests\\t\\t%d\\n\", unsupcnt)\n+}\n+EOF\n+\n+  PVAR=`echo $VAR | sed 's,/,.,g'`\n+  TMPFILE=${TMP}/var-$PVAR\n+  rm -f $TMPFILE\n+  rm -f ${TMP}/list*\n+  cat ${TMP}/expfiles $SUM_FILES | $AWK -f $GUTS_AWK\n+  cat $SUM_FILES | $AWK -f $SUMS_AWK > $TMPFILE\n+  # If there are multiple variants, output the counts for this one;\n+  # otherwise there will just be the final counts at the end.\n+  test $VARIANT_COUNT -eq 1 || cat $TMPFILE\n+done\n+\n+# Set up an awk script to get the combined summary counts for the tool.\n+\n+TOTAL_AWK=${TMP}/total.awk\n+cat << EOF > $TOTAL_AWK\n+BEGIN {\n+  tool=\"$TOOL\"\n+  passcnt=0; failcnt=0; untstcnt=0; xpasscnt=0; xfailcnt=0; unsupcnt=0; unrescnt=0\n+}\n+/^# of expected passes/\t\t{ passcnt += \\$5 }\n+/^# of unexpected failures/\t{ failcnt += \\$5 }\n+/^# of unexpected successes/\t{ xpasscnt += \\$5 }\n+/^# of expected failures/\t{ xfailcnt += \\$5 }\n+/^# of untested testcases/\t{ untstcnt += \\$5 }\n+/^# of unresolved testcases/\t{ unrescnt += \\$5 }\n+/^# of unsupported tests/\t{ unsupcnt += \\$5 }\n+END {\n+  printf (\"\\n\\t\\t=== %s Summary ===\\n\\n\", tool)\n+  if (passcnt != 0) printf (\"# of expected passes\\t\\t%d\\n\", passcnt)\n+  if (failcnt != 0) printf (\"# of unexpected failures\\t%d\\n\", failcnt)\n+  if (xpasscnt != 0) printf (\"# of unexpected successes\\t%d\\n\", xpasscnt)\n+  if (xfailcnt != 0) printf (\"# of expected failures\\t\\t%d\\n\", xfailcnt)\n+  if (untstcnt != 0) printf (\"# of untested testcases\\t\\t%d\\n\", untstcnt)\n+  if (unrescnt != 0) printf (\"# of unresolved testcases\\t%d\\n\", unrescnt)\n+  if (unsupcnt != 0) printf (\"# of unsupported tests\\t\\t%d\\n\", unsupcnt)\n+}\n+EOF\n+\n+# Find the total summaries for the tool and add to the end of the output.\n+cat ${TMP}/var-* | $AWK -f $TOTAL_AWK\n+\n+# This is ugly, but if there's version output from the compiler under test\n+# at the end of the file, we want it.  The other thing that might be there\n+# is the final summary counts.\n+tail -n 2 $FIRST_SUM | grep -q '^#' || tail -n 2 $FIRST_SUM\n+\n+exit 0"}, {"sha": "840e0eb2d128786aa0f2142aee0445c25151273a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,16 @@\n+2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Makefile.in (lang_checks_parallelized, check_gcc_parallelize,\n+\tcheck_p_tool, check_p_vars, check_p_subno, check_p_comma,\n+\tcheck_p_subwork, check_p_numbers, check_p_subdir, check_p_subdirs):\n+\tNew variables.\n+\t(check-subtargets, check-%-subtargets, check-parallel-%): New\n+\ttargets.\n+\t(check-%): For test targets listed in lang_checks_parallelized\n+\tif -j is used and RUNTESTFLAGS doesn't specify tests to execute,\n+\trun the testing in multiple make goals, possibly parallel, and\n+\tafterwards run dg-extract-results.sh to merge the sum and log files.\n+\n 2008-10-24  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_canonicalize_move_class): New function."}, {"sha": "b55c5c14e842b8ce3ad17fd3b30e8e27cacecfac", "filename": "gcc/Makefile.in", "status": "modified", "additions": 124, "deletions": 2, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -432,6 +432,23 @@ xm_file_list=@xm_file_list@\n xm_include_list=@xm_include_list@\n xm_defines=@xm_defines@\n lang_checks=check-gcc\n+lang_checks_parallelized=check-gcc\n+# This lists a couple of test files that take most time during check-gcc.\n+# When doing parallelized check-gcc, these can run in parallel with the\n+# remaining tests.  Each word in this variable stands for work for one\n+# make goal and one extra make goal is added to handle all the *.exp\n+# files not handled explicitly already.  If multiple *.exp files\n+# should be run in the same runtest invocation (usually if they aren't\n+# very long running, but still should be split of from the check-parallel-$lang\n+# remaining tests runtest invocation), they should be concatenated with commas.\n+# Note that [a-zA-Z] wildcards need to have []s prefixed with \\ (needed\n+# by tcl) and as the *.exp arguments are mached both as is and with\n+# */ prefixed to it in runtest_file_p, it is usually desirable to include\n+# a subdirectory name.\n+check_gcc_parallelize=execute.exp=execute/2* \\\n+\t\t      execute.exp=execute/\\[013-9a-zA-Z\\]* \\\n+\t\t      compile.exp dg.exp \\\n+\t\t      struct-layout-1.exp,unsorted.exp,stackalign.exp,i386.exp\n lang_opt_files=@lang_opt_files@ $(srcdir)/c.opt $(srcdir)/common.opt\n lang_specs_files=@lang_specs_files@\n lang_tree_files=@lang_tree_files@\n@@ -4477,6 +4494,8 @@ CHECK_TARGETS = check-gcc @check_languages@\n \n check: $(CHECK_TARGETS)\n \n+check-subtargets: $(patsubst %,%-subtargets,$(CHECK_TARGETS))\n+\n # The idea is to parallelize testing of multilibs, for example:\n #   make -j3 check-gcc//sh-hms-sim/{-m1,-m2,-m3,-m3e,-m4}/{,-nofpu}\n # will run 3 concurrent sessions of check-gcc, eventually testing\n@@ -4498,7 +4517,8 @@ $(TESTSUITEDIR)/site.exp: site.exp\n \t-rm -f $@\n \tsed '/set tmpdir/ s|testsuite|$(TESTSUITEDIR)|' < site.exp > $@\n \n-$(lang_checks): check-% : site.exp\n+# This is only used for check-% targets that aren't parallelized.\n+$(filter-out $(lang_checks_parallelized),$(lang_checks)): check-% : site.exp\n \t-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)\n \ttest -d $(TESTSUITEDIR)/$* || mkdir $(TESTSUITEDIR)/$*\n \t-(rootme=`${PWD_COMMAND}`; export rootme; \\\n@@ -4515,6 +4535,108 @@ $(lang_checks): check-% : site.exp\n \tGCC_EXEC_PREFIX=\"$(libdir)/gcc/\" ; export GCC_EXEC_PREFIX ; \\\n \t$(RUNTEST) --tool $* $(RUNTESTFLAGS))\n \n+$(patsubst %,%-subtargets,$(filter-out $(lang_checks_parallelized),$(lang_checks))): check-%-subtargets:\n+\t@echo check-$*\n+\n+check_p_tool=$(firstword $(subst _, ,$*))\n+check_p_vars=$(check_$(check_p_tool)_parallelize)\n+check_p_subno=$(word 2,$(subst _, ,$*))\n+check_p_comma=,\n+check_p_subwork=$(subst $(check_p_comma), ,$(if $(check_p_subno),$(word $(check_p_subno),$(check_p_vars))))\n+check_p_numbers=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n+check_p_subdir=$(subst _,,$*)\n+check_p_subdirs=$(wordlist 1,$(words $(check_$*_parallelize)),$(check_p_numbers))\n+\n+# For parallelized check-% targets, this decides whether parallelization\n+# is desirable (if -jN is used and RUNTESTFLAGS doesn't contain anything\n+# but optionally --target_board argument).  If it is desirable,\n+# recursive make is run with check-parallel-$lang{,1,2,3,4,5} etc. goals,\n+# which can be executed in parallel, as they are run in separate directories.\n+# check-parallel-$lang{1,2,3,4,5} etc. goals invoke runtest with the longest\n+# running *.exp files from the testsuite, as determined by check_$lang_parallelize\n+# variable.  The check-parallel-$lang goal in that case invokes runtest with\n+# all the remaining *.exp files not handled by the separate goals.\n+# Afterwards contrib/dg-extract-results.sh is used to merge the sum and log\n+# files.  If parallelization isn't desirable, only one recursive make\n+# is run with check-parallel-$lang goal and check_$lang_parallelize variable\n+# cleared to say that no additional arguments beyond $(RUNTESTFLAGS)\n+# should be passed to runtest.\n+#\n+# To parallelize some language check, add the corresponding check-$lang\n+# to lang_checks_parallelized variable and define check_$lang_parallelize\n+# variable (see above check_gcc_parallelize description).\n+$(lang_checks_parallelized): check-% : site.exp\n+\t@if [ -z \"$(filter-out --target_board=%, $(RUNTESTFLAGS))\" ] \\\n+\t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t  $(MAKE) TESTSUITEDIR=\"$(TESTSUITEDIR)\" RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" \\\n+\t    check-parallel-$* \\\n+\t    $(patsubst %,check-parallel-$*_%, $(check_p_subdirs)); \\\n+\t  for file in $(TESTSUITEDIR)/$*/$* \\\n+\t\t      $(patsubst %,$(TESTSUITEDIR)/$*%/$*,$(check_p_subdirs));\\\n+\t  do \\\n+\t    mv -f $$file.sum $$file.sum.sep; mv -f $$file.log $$file.log.sep; \\\n+\t  done; \\\n+\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh \\\n+\t    $(TESTSUITEDIR)/$*/$*.sum.sep \\\n+\t    $(patsubst %,$(TESTSUITEDIR)/$*%/$*.sum.sep,$(check_p_subdirs)) \\\n+\t    > $(TESTSUITEDIR)/$*/$*.sum; \\\n+\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh -L \\\n+\t    $(TESTSUITEDIR)/$*/$*.log.sep \\\n+\t    $(patsubst %,$(TESTSUITEDIR)/$*%/$*.log.sep,$(check_p_subdirs)) \\\n+\t    > $(TESTSUITEDIR)/$*/$*.log; \\\n+\telse \\\n+\t  $(MAKE) TESTSUITEDIR=\"$(TESTSUITEDIR)\" RUNTESTFLAGS=\"$(RUNTESTFLAGS)\" \\\n+\t    check_$*_parallelize= check-parallel-$*; \\\n+\tfi\n+\n+# Just print the parallelized subtargets for those that want to split\n+# the testing across machines.\n+$(patsubst %,%-subtargets,$(lang_checks_parallelized)): check-%-subtargets:\n+\t@echo check-parallel-$* \\\n+\t  $(patsubst %,check-parallel-$*_%, $(check_p_subdirs))\n+\n+# In the if [ -n \"$(check_p_subno)\" ] case runtest should be given the name of\n+# the given *.exp file(s).  See comment above check_gcc_parallelize variable\n+# for details on the content of these variables.\n+#\n+# In the elif [ -n \"$(check_p_vars)\" ] case runtest should be given\n+# names of all the *.exp files for this tool that aren't already handled by\n+# other goals.  First it finds all the *.exp files for this tool, then\n+# prunes those already specified in check_$lang_parallelize or duplicates.\n+#\n+# Otherwise check-$lang isn't parallelized and runtest is invoked just with\n+# the $(RUNTESTFLAGS) arguments.\n+check-parallel-% : site.exp\n+\t-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)\n+\ttest -d $(TESTSUITEDIR)/$(check_p_subdir) || mkdir $(TESTSUITEDIR)/$(check_p_subdir)\n+\t-(rootme=`${PWD_COMMAND}`; export rootme; \\\n+\tsrcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \\\n+\tcd $(TESTSUITEDIR)/$(check_p_subdir); \\\n+\trm -f tmp-site.exp; \\\n+\tsed '/set tmpdir/ s|testsuite|$(TESTSUITEDIR)/$(check_p_subdir)|' \\\n+\t\t< ../../site.exp > tmp-site.exp; \\\n+\t$(SHELL) $${srcdir}/../move-if-change tmp-site.exp site.exp; \\\n+\tEXPECT=${EXPECT} ; export EXPECT ; \\\n+\tif [ -f $${rootme}/../expect/expect ] ; then  \\\n+\t   TCL_LIBRARY=`cd .. ; cd $${srcdir}/../tcl/library ; ${PWD_COMMAND}` ; \\\n+\t    export TCL_LIBRARY ; fi ; \\\n+\tGCC_EXEC_PREFIX=\"$(libdir)/gcc/\" ; export GCC_EXEC_PREFIX ; \\\n+\truntestflags= ; \\\n+\tif [ -n \"$(check_p_subno)\" ] ; then \\\n+\t  runtestflags=\"$(check_p_subwork)\"; \\\n+\telif [ -n \"$(check_p_vars)\" ] ; then \\\n+\t  parts=\"`echo ' $(strip $(subst $(check_p_comma), ,$(check_p_vars))) ' \\\n+\t\t  | sed 's/=[^ ]* / /g'`\"; \\\n+\t  for part in `find $$srcdir/testsuite/$(check_p_tool)* -name \\*.exp` ; do \\\n+\t    part=`basename $$part` ; \\\n+\t    case \" $$parts $$runtestflags \" in \\\n+\t      *\" $$part \"*) ;; \\\n+\t      *) runtestflags=\"$$runtestflags $$part\" ;; \\\n+\t    esac ; \\\n+\t  done ; \\\n+\tfi ; \\\n+\t$(RUNTEST) --tool $(check_p_tool) $(RUNTESTFLAGS) $$runtestflags)\n+\n check-consistency: testsuite/site.exp\n \t-rootme=`${PWD_COMMAND}`; export rootme; \\\n \tsrcdir=`cd ${srcdir}; ${PWD_COMMAND}` ; export srcdir ; \\\n@@ -4552,7 +4674,7 @@ QMTEST_DIR=qmtestsuite\n ${QMTEST_DIR} stamp-qmtest:\n \t${QMTEST} -D ${QMTEST_DIR} create-tdb \\\n \t    -c gcc_database.GCCDatabase \\\n-            -a srcdir=`cd ${srcdir}/testsuite && ${PWD_COMMAND}` && \\\n+\t    -a srcdir=`cd ${srcdir}/testsuite && ${PWD_COMMAND}` && \\\n \t    $(STAMP) stamp-qmtest\n \n # Create the QMTest context file."}, {"sha": "bc5ee6dc361a5a085199d0f1ffc54ed3f9045aee", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,13 @@\n+2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/Make-lang.in (check-ada-subtargets): Depend on\n+\tcheck-acats-subtargets and check-gnat-subtargets.\n+\t(check_acats_targets): New variable.\n+\t(check-acats-subtargets, check-acats%): New targets.\n+\t(check-acats): If -j is used and CHAPTERS is empty, run the testing\n+\tin multiple make goals, possibly parallel, and afterwards run\n+\tdg-extract-results.sh to merge the sum and log files.\n+\n 2008-10-17  Geert Bosch  <bosch@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu) <N_Slice>: Simplify expansion"}, {"sha": "908efadf54b3a4275558e40b82ea1643e3cd30a1", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -818,15 +818,47 @@ ada.stagefeedback: stagefeedback-start\n lang_checks += check-gnat\n \n check-ada: check-acats check-gnat\n+check-ada-subtargets: check-acats-subtargets check-gnat-subtargets\n \n ACATSDIR = $(TESTSUITEDIR)/ada/acats\n \n+check_acats_targets = $(patsubst %,check-acats%, 0 1 2)\n+\n check-acats:\n-\ttest -d $(ACATSDIR) || mkdir -p $(ACATSDIR)\n+\t@test -d $(ACATSDIR) || mkdir -p $(ACATSDIR); \\\n+\tif [ -z \"$(CHAPTERS)\" ] && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; \\\n+\tthen \\\n+\t  $(MAKE) $(check_acats_targets); \\\n+\t  for idx in 0 1 2; do \\\n+\t    mv -f $(ACATSDIR)$$idx/acats.sum $(ACATSDIR)$$idx/acats.sum.sep; \\\n+\t    mv -f $(ACATSDIR)$$idx/acats.log $(ACATSDIR)$$idx/acats.log.sep; \\\n+\t  done; \\\n+\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh \\\n+\t    $(ACATSDIR)0/acats.sum.sep $(ACATSDIR)1/acats.sum.sep \\\n+\t    $(ACATSDIR)2/acats.sum.sep > $(ACATSDIR)/acats.sum; \\\n+\t  $(SHELL) $(srcdir)/../contrib/dg-extract-results.sh -L \\\n+\t    $(ACATSDIR)0/acats.log.sep $(ACATSDIR)1/acats.log.sep \\\n+\t    $(ACATSDIR)2/acats.log.sep > $(ACATSDIR)/acats.log; \\\n+\t  exit 0; \\\n+\tfi; \\\n \ttestdir=`cd ${srcdir}/${ACATSDIR} && ${PWD_COMMAND}`; \\\n \texport testdir; cd $(ACATSDIR) && $(SHELL) $${testdir}/run_acats $(CHAPTERS)\n \n-.PHONY: check-acats\n+check-acats-subtargets:\n+\t@echo $(check_acats_targets)\n+\n+# Parallelized check-acats\n+$(check_acats_targets): check-acats%:\n+\ttest -d $(ACATSDIR)$* || mkdir -p $(ACATSDIR)$*; \\\n+\ttestdir=`cd ${srcdir}/${ACATSDIR} && ${PWD_COMMAND}`; \\\n+\tcase \"$*\" in \\\n+\t  0) chapters=\"`cd $$testdir/tests; echo [a-b]* c[0-4]*`\";; \\\n+\t  1) chapters=\"`cd $$testdir/tests; echo c[5-9ab]*`\";; \\\n+\t  2) chapters=\"`cd $$testdir/tests; echo c[c-z]* [d-z]*`\";; \\\n+\tesac; \\\n+\texport testdir; cd $(ACATSDIR)$* && $(SHELL) $${testdir}/run_acats $$chapters\n+\n+.PHONY: check-acats $(check_acats_targets)\n \n \f\n # Bootstrapping targets for just GNAT - use the same stage directories"}, {"sha": "ee09f15939423fd7ae44b7f79bee317a4f0690c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,10 @@\n+2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check-c++-subtargets): New alias for\n+\tcheck-g++-subtargets.\n+\t(lang_checks_parallelized): Add check-g++.\n+\t(check_g++_parallelize): New variable.\n+\n 2008-10-21  Richard Guenther  <rguenther@suse.de>\n \n \t* semantics.c (simplify_aggr_init_exprs_r): Remove."}, {"sha": "b6ccb3ed42871c1b4886559a37f51bd5bd5e34c4", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -138,8 +138,12 @@ c++.srcman: doc/g++.1\n # check targets.  However, our DejaGNU framework requires 'check-g++' as its\n # entry point.  We feed the former to the latter here.\n check-c++ : check-g++\n+check-c++-subtargets : check-g++-subtargets\n # List of targets that can use the generic check- rule and its // variant.\n lang_checks += check-g++\n+lang_checks_parallelized += check-g++\n+# For description see comment above check_gcc_parallelize in gcc/Makefile.in.\n+check_g++_parallelize = old-deja.exp dg.exp\n \n #\f\n # Install hooks:"}, {"sha": "bd18bd1dc443b5be4433a5274726fee9efb80692", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,10 @@\n+2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check-f95-subtargets, check-fortran-subtargets): New\n+\taliases for check-gfortran-subtargets.\n+\t(lang_checks_parallelized): Add check-gfortran.\n+\t(check_gfortran_parallelize): New variable.\n+\n 2008-10-19  Paul Thomas  <pault@gcc.gnu.org>\n \n         PR fortran/37723"}, {"sha": "0335a212144d8331b1eeecc534178251b5ff22c5", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -145,7 +145,14 @@ fortran.srcextra:\n \n check-f95 : check-gfortran\n check-fortran : check-gfortran\n+check-f95-subtargets : check-gfortran-subtargets\n+check-fortran-subtargets : check-gfortran-subtargets\n lang_checks += check-gfortran\n+lang_checks_parallelized += check-gfortran\n+# For description see comment above check_gcc_parallelize in gcc/Makefile.in.\n+check_gfortran_parallelize = dg.exp=gfortran.dg/\\[a-cA-C\\]* \\\n+\t\t\t     dg.exp=gfortran.dg/\\[d-mD-M\\]* \\\n+\t\t\t     dg.exp=gfortran.dg/\\[n-zN-Z0-9\\]*\n \n # GFORTRAN documentation.\n GFORTRAN_TEXI = \\"}, {"sha": "094ca08d4b83662f0f20d91c3d04cd8991faaed6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,7 @@\n+2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Make-lang.in (check-java-subtargets): New target.\n+\n 2008-10-16  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/35483"}, {"sha": "45f3afb791f9b2c3d0c4f4de3f261648db6babf6", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -150,6 +150,7 @@ java.srcman: $(JAVA_MANFILES)\n \t-cp -p $^ $(srcdir)/doc\n \n check-java :\n+check-java-subtargets :\n \n # Install hooks:\n # jc1, gcj, and jvgenmain are installed elsewhere as part"}, {"sha": "1144f9c437572b04b99dbc4ab958a11bdc6e0421", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -1,3 +1,12 @@\n+2008-10-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/Makefile.am (AUTOMAKE_OPTIONS): Remove dejagnu.\n+\t(RUNTESTDEFAULTFLAGS, EXPECT, check_DEJAGNU_normal_targets): New\n+\tvariables.\n+\t(%/site.exp, check-DEJAGNU%): New targets.\n+\t(check-am): Run $(MAKE) check-DEJAGNU.\n+\t* testsuite/Makefile.in: Regenerated.\n+\n 2008-10-23  Chris Fairles  <cfairles@gcc.gnu.org>\n \n \t* config/os/generic/error_constants.h (errc): Use long type."}, {"sha": "14ce3b7bf4c17f19de4ebeb7fc64079a48b1c6f4", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -21,7 +21,9 @@\n ## Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n ## USA.\n \n-AUTOMAKE_OPTIONS = dejagnu nostdinc\n+AUTOMAKE_OPTIONS = nostdinc\n+RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir\n+EXPECT = expect\n \n include $(top_srcdir)/fragment.am\n \n@@ -86,6 +88,80 @@ new-abi-baseline:\n \t  fi; \\\n \t  ${extract_symvers} ../src/.libs/libstdc++.so $${output})\n \n+%/site.exp: site.exp\n+\t-test -d $* || mkdir $*\n+\t@srcdir=`cd $(srcdir); ${PWD_COMMAND}`;\n+\tobjdir=`${PWD_COMMAND}`/$*; \\\n+\tsed -e \"s|^set srcdir .*$$|set srcdir $$srcdir|\" \\\n+\t    -e \"s|^set objdir .*$$|set objdir $$objdir|\" \\\n+\t    site.exp > $*/site.exp.tmp\n+\t@-rm -f $*/site.bak\n+\t@test ! -f $*/site.exp || mv $*/site.exp $*/site.bak\n+\t@mv $*/site.exp.tmp $*/site.exp\n+\n+check_DEJAGNU_normal_targets = $(patsubst %,check-DEJAGNUnormal%,0 1 2 3)\n+$(check_DEJAGNU_normal_targets): check-DEJAGNUnormal%: normal%/site.exp\n+\n+# Run the testsuite in normal mode.\n+check-DEJAGNU $(check_DEJAGNU_normal_targets): check-DEJAGNU%: site.exp\n+\tif [ -z \"$*$(filter-out --target_board=%, $(RUNTESTFLAGS))\" ] \\\n+\t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) check-DEJAGNUnormal0 check-DEJAGNUnormal1 \\\n+\t\t  check-DEJAGNUnormal2 check-DEJAGNUnormal3; \\\n+\t  for idx in 0 1 2 3; do \\\n+\t    mv -f normal$$idx/libstdc++.sum normal$$idx/libstdc++.sum.sep; \\\n+\t    mv -f normal$$idx/libstdc++.log normal$$idx/libstdc++.log.sep; \\\n+\t  done; \\\n+\t  mv -f libstdc++.sum libstdc++.sum.sep; \\\n+\t  mv -f libstdc++.log libstdc++.log.sep; \\\n+\t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh \\\n+\t    libstdc++.sum.sep normal0/libstdc++.sum.sep \\\n+\t    normal1/libstdc++.sum.sep normal2/libstdc++.sum.sep \\\n+\t    normal3/libstdc++.sum.sep > libstdc++.sum; \\\n+\t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh -L \\\n+\t    libstdc++.log.sep normal0/libstdc++.log.sep \\\n+\t    normal1/libstdc++.log.sep normal2/libstdc++.log.sep \\\n+\t    normal3/libstdc++.log.sep > libstdc++.log; \\\n+\t  exit 0; \\\n+\tfi; \\\n+\tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n+\tEXPECT=$(EXPECT); export EXPECT; \\\n+\truntest=$(RUNTEST); \\\n+\tif [ -z \"$$runtest\" ]; then runtest=runtest; fi; \\\n+\ttool=libstdc++; \\\n+\tdirs=; \\\n+\tcase \"$*\" in \\\n+\t  normal0) \\\n+\t    if $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n+\t      $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t\t\t$(RUNTESTFLAGS) abi.exp; \\\n+\t    else echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\t    fi; \\\n+\t    dirs=\"`cd $$srcdir; echo [013-9][0-9]_*/* [abep]*/*`\";; \\\n+\t  normal1) \\\n+\t    dirs=\"`cd $$srcdir; echo 2[0-2]_*/*`\";; \\\n+\t  normal2) \\\n+\t    dirs=\"`cd $$srcdir; echo 2[4-9]_*/*`\";; \\\n+\t  normal3) \\\n+\t    dirs=\"`cd $$srcdir; echo 23_*/* t*/*`\";; \\\n+\tesac; \\\n+\tif [ -n \"$*\" ]; then cd \"$*\"; fi; \\\n+\tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n+\t  if [ -n \"$$dirs\" ]; then \\\n+\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t\t    $(RUNTESTFLAGS) \\\n+\t\t    \"conformance.exp=`echo $$dirs | sed 's/ /* /g;s/$$/*/'`\"; \\\n+\t  else \\\n+\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t\t    $(RUNTESTFLAGS); \\\n+\t  fi; \\\n+\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\tfi\n+\n+check-am:\n+\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU\n+.PHONY: check-DEJAGNU\n+\n # Use 'new-abi-baseline' to create an initial symbol file.  Then run\n # 'check-abi' to test for changes against that file.\n check-abi: site.exp baseline_symbols "}, {"sha": "85a2ffdaa745a8d0376d24ef9b8b80e9e93ff753", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 86, "deletions": 35, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7134e6056cb2ae73e3d7f3b051d3a08e92118f54/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=7134e6056cb2ae73e3d7f3b051d3a08e92118f54", "patch": "@@ -66,10 +66,6 @@ depcomp =\n am__depfiles_maybe =\n SOURCES =\n DIST_SOURCES =\n-DEJATOOL = $(PACKAGE)\n-RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir\n-EXPECT = expect\n-RUNTEST = runtest\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n@@ -272,7 +268,9 @@ target_cpu = @target_cpu@\n target_os = @target_os@\n target_vendor = @target_vendor@\n toplevel_srcdir = @toplevel_srcdir@\n-AUTOMAKE_OPTIONS = dejagnu nostdinc\n+AUTOMAKE_OPTIONS = nostdinc\n+RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir\n+EXPECT = expect\n \n # May be used by various substitution variables.\n gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n@@ -304,6 +302,7 @@ lists_of_files = \\\n \n baseline_file = ${baseline_dir}/baseline_symbols.txt\n extract_symvers = $(glibcxx_srcdir)/scripts/extract_symvers\n+check_DEJAGNU_normal_targets = $(patsubst %,check-DEJAGNUnormal%,0 1 2 3)\n \n # Runs the testsuite, but in compile only mode.\n # Can be used to test sources with non-GNU FE's at various warning\n@@ -381,23 +380,6 @@ ctags: CTAGS\n CTAGS:\n \n \n-check-DEJAGNU: site.exp\n-\tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n-\tEXPECT=$(EXPECT); export EXPECT; \\\n-\truntest=$(RUNTEST); \\\n-\tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t  l='$(DEJATOOL)'; for tool in $$l; do \\\n-\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) $(RUNTESTFLAGS); \\\n-\t  done; \\\n-\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n-\tfi\n-\n-distclean-DEJAGNU:\n-\t-rm -f site.exp site.bak\n-\t-l='$(DEJATOOL)'; for tool in $$l; do \\\n-\t  rm -f $$tool.sum $$tool.log; \\\n-\tdone\n-\n distdir: $(DISTFILES)\n \t$(mkdir_p) $(distdir)/..\n \t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n@@ -427,7 +409,6 @@ distdir: $(DISTFILES)\n \t  fi; \\\n \tdone\n check-am: all-am\n-\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU\n check: check-am\n all-am: Makefile\n installdirs:\n@@ -462,8 +443,7 @@ clean-am: clean-generic clean-libtool clean-local mostlyclean-am\n \n distclean: distclean-am\n \t-rm -f Makefile\n-distclean-am: clean-am distclean-DEJAGNU distclean-generic \\\n-\tdistclean-libtool\n+distclean-am: clean-am distclean-generic distclean-libtool\n \n dvi: dvi-am\n \n@@ -503,16 +483,15 @@ ps-am:\n \n uninstall-am: uninstall-info-am\n \n-.PHONY: all all-am check check-DEJAGNU check-am clean clean-generic \\\n-\tclean-libtool clean-local distclean distclean-DEJAGNU \\\n-\tdistclean-generic distclean-libtool distdir dvi dvi-am html \\\n-\thtml-am info info-am install install-am install-data \\\n-\tinstall-data-am install-exec install-exec-am install-info \\\n-\tinstall-info-am install-man install-strip installcheck \\\n-\tinstallcheck-am installdirs maintainer-clean \\\n-\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n-\tmostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am \\\n-\tuninstall-info-am\n+.PHONY: all all-am check check-am clean clean-generic clean-libtool \\\n+\tclean-local distclean distclean-generic distclean-libtool \\\n+\tdistdir dvi dvi-am html html-am info info-am install \\\n+\tinstall-am install-data install-data-am install-exec \\\n+\tinstall-exec-am install-info install-info-am install-man \\\n+\tinstall-strip installcheck installcheck-am installdirs \\\n+\tmaintainer-clean maintainer-clean-generic mostlyclean \\\n+\tmostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \\\n+\tuninstall uninstall-am uninstall-info-am\n \n \n # This rule generates all of the testsuite_files* lists at once.\n@@ -565,6 +544,78 @@ new-abi-baseline:\n \t  fi; \\\n \t  ${extract_symvers} ../src/.libs/libstdc++.so $${output})\n \n+%/site.exp: site.exp\n+\t-test -d $* || mkdir $*\n+\t@srcdir=`cd $(srcdir); ${PWD_COMMAND}`;\n+\tobjdir=`${PWD_COMMAND}`/$*; \\\n+\tsed -e \"s|^set srcdir .*$$|set srcdir $$srcdir|\" \\\n+\t    -e \"s|^set objdir .*$$|set objdir $$objdir|\" \\\n+\t    site.exp > $*/site.exp.tmp\n+\t@-rm -f $*/site.bak\n+\t@test ! -f $*/site.exp || mv $*/site.exp $*/site.bak\n+\t@mv $*/site.exp.tmp $*/site.exp\n+$(check_DEJAGNU_normal_targets): check-DEJAGNUnormal%: normal%/site.exp\n+\n+# Run the testsuite in normal mode.\n+check-DEJAGNU $(check_DEJAGNU_normal_targets): check-DEJAGNU%: site.exp\n+\tif [ -z \"$*$(filter-out --target_board=%, $(RUNTESTFLAGS))\" ] \\\n+\t    && [ \"$(filter -j, $(MFLAGS))\" = \"-j\" ]; then \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) check-DEJAGNUnormal0 check-DEJAGNUnormal1 \\\n+\t\t  check-DEJAGNUnormal2 check-DEJAGNUnormal3; \\\n+\t  for idx in 0 1 2 3; do \\\n+\t    mv -f normal$$idx/libstdc++.sum normal$$idx/libstdc++.sum.sep; \\\n+\t    mv -f normal$$idx/libstdc++.log normal$$idx/libstdc++.log.sep; \\\n+\t  done; \\\n+\t  mv -f libstdc++.sum libstdc++.sum.sep; \\\n+\t  mv -f libstdc++.log libstdc++.log.sep; \\\n+\t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh \\\n+\t    libstdc++.sum.sep normal0/libstdc++.sum.sep \\\n+\t    normal1/libstdc++.sum.sep normal2/libstdc++.sum.sep \\\n+\t    normal3/libstdc++.sum.sep > libstdc++.sum; \\\n+\t  $(SHELL) $(srcdir)/../../contrib/dg-extract-results.sh -L \\\n+\t    libstdc++.log.sep normal0/libstdc++.log.sep \\\n+\t    normal1/libstdc++.log.sep normal2/libstdc++.log.sep \\\n+\t    normal3/libstdc++.log.sep > libstdc++.log; \\\n+\t  exit 0; \\\n+\tfi; \\\n+\tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n+\tEXPECT=$(EXPECT); export EXPECT; \\\n+\truntest=$(RUNTEST); \\\n+\tif [ -z \"$$runtest\" ]; then runtest=runtest; fi; \\\n+\ttool=libstdc++; \\\n+\tdirs=; \\\n+\tcase \"$*\" in \\\n+\t  normal0) \\\n+\t    if $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n+\t      $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t\t\t$(RUNTESTFLAGS) abi.exp; \\\n+\t    else echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\t    fi; \\\n+\t    dirs=\"`cd $$srcdir; echo [013-9][0-9]_*/* [abep]*/*`\";; \\\n+\t  normal1) \\\n+\t    dirs=\"`cd $$srcdir; echo 2[0-2]_*/*`\";; \\\n+\t  normal2) \\\n+\t    dirs=\"`cd $$srcdir; echo 2[4-9]_*/*`\";; \\\n+\t  normal3) \\\n+\t    dirs=\"`cd $$srcdir; echo 23_*/* t*/*`\";; \\\n+\tesac; \\\n+\tif [ -n \"$*\" ]; then cd \"$*\"; fi; \\\n+\tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n+\t  if [ -n \"$$dirs\" ]; then \\\n+\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t\t    $(RUNTESTFLAGS) \\\n+\t\t    \"conformance.exp=`echo $$dirs | sed 's/ /* /g;s/$$/*/'`\"; \\\n+\t  else \\\n+\t    $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) \\\n+\t\t    $(RUNTESTFLAGS); \\\n+\t  fi; \\\n+\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\tfi\n+\n+check-am:\n+\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU\n+.PHONY: check-DEJAGNU\n+\n # Use 'new-abi-baseline' to create an initial symbol file.  Then run\n # 'check-abi' to test for changes against that file.\n check-abi: site.exp baseline_symbols "}]}