{"sha": "cee66c6853813ee9d10acaec6b4bb3084262263f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlNjZjNjg1MzgxM2VlOWQxMGFjYWVjNmI0YmIzMDg0MjYyMjYzZg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2014-12-09T18:26:04Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-12-09T18:26:04Z"}, "message": "[AArch64] Add TARGET_SCHED_REASSOCIATION_WIDTH\n\n2014-12-09  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n\n\t* gcc/config/aarch64/aarch64-protos.h (tune-params): Add reasociation\n\ttuning parameters.\n\t* gcc/config/aarch64/aarch64.c (TARGET_SCHED_REASSOCIATION_WIDTH):\n\tDefine.\n\t(aarch64_reassociation_width): New function.\n\t(generic_tunings): Add reassociation tuning parameters.\n\t(cortexa53_tunings): Likewise.\n\t(cortexa57_tunings): Likewise.\n\t(thunderx_tunings): Likewise.\n\nFrom-SVN: r218526", "tree": {"sha": "d738268619ee7aa0b1f19a2b82e650a7c95f5dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d738268619ee7aa0b1f19a2b82e650a7c95f5dcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cee66c6853813ee9d10acaec6b4bb3084262263f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee66c6853813ee9d10acaec6b4bb3084262263f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cee66c6853813ee9d10acaec6b4bb3084262263f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee66c6853813ee9d10acaec6b4bb3084262263f/comments", "author": null, "committer": null, "parents": [{"sha": "3759108f07fed59b39110d864e43e7ca5df2e6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3759108f07fed59b39110d864e43e7ca5df2e6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3759108f07fed59b39110d864e43e7ca5df2e6ad"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "f6bc21c612d5400966cbccc35c4e5c892d3afa6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cee66c6853813ee9d10acaec6b4bb3084262263f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cee66c6853813ee9d10acaec6b4bb3084262263f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cee66c6853813ee9d10acaec6b4bb3084262263f", "patch": "@@ -1,3 +1,15 @@\n+2014-12-09  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64-protos.h (tune-params): Add reasociation\n+\ttuning parameters.\n+\t* gcc/config/aarch64/aarch64.c (TARGET_SCHED_REASSOCIATION_WIDTH):\n+\tDefine.\n+\t(aarch64_reassociation_width): New function.\n+\t(generic_tunings): Add reassociation tuning parameters.\n+\t(cortexa53_tunings): Likewise.\n+\t(cortexa57_tunings): Likewise.\n+\t(thunderx_tunings): Likewise.\n+\n 2014-12-09  Andrew Pinski  apinski@cavium.com\n             Kyrylo Tkachov  kyrylo.tkachov@arm.com\n "}, {"sha": "2a7c30f4d926ea4c51211a777ab6a31ef9b1078b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cee66c6853813ee9d10acaec6b4bb3084262263f/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cee66c6853813ee9d10acaec6b4bb3084262263f/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cee66c6853813ee9d10acaec6b4bb3084262263f", "patch": "@@ -171,6 +171,9 @@ struct tune_params\n   const int memmov_cost;\n   const int issue_rate;\n   const unsigned int fuseable_ops;\n+  const int int_reassoc_width;\n+  const int fp_reassoc_width;\n+  const int vec_reassoc_width;\n };\n \n HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);"}, {"sha": "f2d390bdd00697b6f6592f2bb89473ac625de09c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cee66c6853813ee9d10acaec6b4bb3084262263f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cee66c6853813ee9d10acaec6b4bb3084262263f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cee66c6853813ee9d10acaec6b4bb3084262263f", "patch": "@@ -323,7 +323,10 @@ static const struct tune_params generic_tunings =\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING)\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_NOTHING),\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1\t/* vec_reassoc_width.  */\n };\n \n static const struct tune_params cortexa53_tunings =\n@@ -335,7 +338,10 @@ static const struct tune_params cortexa53_tunings =\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 2),\n   NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD\n-                             | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR))\n+                             | AARCH64_FUSE_MOVK_MOVK | AARCH64_FUSE_ADRP_LDR)),\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1\t/* vec_reassoc_width.  */\n };\n \n static const struct tune_params cortexa57_tunings =\n@@ -346,7 +352,10 @@ static const struct tune_params cortexa57_tunings =\n   &cortexa57_vector_cost,\n   NAMED_PARAM (memmov_cost, 4),\n   NAMED_PARAM (issue_rate, 3),\n-  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_MOVK_MOVK))\n+  NAMED_PARAM (fuseable_ops, (AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_MOVK_MOVK)),\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1\t/* vec_reassoc_width.  */\n };\n \n static const struct tune_params thunderx_tunings =\n@@ -357,7 +366,10 @@ static const struct tune_params thunderx_tunings =\n   &generic_vector_cost,\n   NAMED_PARAM (memmov_cost, 6),\n   NAMED_PARAM (issue_rate, 2),\n-  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_CMP_BRANCH)\n+  NAMED_PARAM (fuseable_ops, AARCH64_FUSE_CMP_BRANCH),\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  1\t/* vec_reassoc_width.  */\n };\n \n /* A processor implementing AArch64.  */\n@@ -450,6 +462,19 @@ static const char * const aarch64_condition_codes[] =\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\"\n };\n \n+static int\n+aarch64_reassociation_width (unsigned opc ATTRIBUTE_UNUSED,\n+\t\t\t     enum machine_mode mode)\n+{\n+  if (VECTOR_MODE_P (mode))\n+    return aarch64_tune_params->vec_reassoc_width;\n+  if (INTEGRAL_MODE_P (mode))\n+    return aarch64_tune_params->int_reassoc_width;\n+  if (FLOAT_MODE_P (mode))\n+    return aarch64_tune_params->fp_reassoc_width;\n+  return 1;\n+}\n+\n /* Provide a mapping from gcc register numbers to dwarf register numbers.  */\n unsigned\n aarch64_dbx_register_number (unsigned regno)\n@@ -11023,6 +11048,9 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n #undef TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS aarch64_preferred_reload_class\n \n+#undef TARGET_SCHED_REASSOCIATION_WIDTH\n+#define TARGET_SCHED_REASSOCIATION_WIDTH aarch64_reassociation_width\n+\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD aarch64_secondary_reload\n "}]}