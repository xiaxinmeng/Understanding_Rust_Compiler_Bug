{"sha": "a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3NjYzMTJkMzAwMWE3MDhlZDhhZDFiZDAyY2NiZjk1YmQyYzY3MQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-05-26T16:13:55Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-05-26T16:13:55Z"}, "message": "demangle-expected: Add tests for __int128 and unsigned __int128 types.\n\nlibiberty/\n\n2010-05-26  Kai Tietz  <kai.tietz@onevision.com>\n\n        * testsuite/demangle-expected: Add tests for __int128\n        and unsigned __int128 types.\n\ngcc/testsuite\n2010-05-26  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* lib/target-supports.exp (check_effective_target_int128): New\n\tfunction to check if __int128 types are available for target.\n\t* testsuite/c-c++-common/int128-types-1.c: New.\n\t* testsuite/c-c++-common/int128-1.c: New.\n\t* testsuite/c-c++-common/int128-2.c: New.\n\t* g++.dg/abi/mangle43.C: New.\n\t* g++.dg/init/enum1.C: Handle __int128 case and add -Wno-overflow.\n\t* g++.dg/cpp0x/nullptr04.C: Use __SIZE_TYPE__ for getting\n\tpointer-wide scalar.\n\t* g++.dg/other/pr25632.C: Likewise.\n\t* g++.dg/other/large-size-array.C (DIM): Use ULLONG_MAX for win64 case.\n\t* g++.dg/warn/pr13358-2.C: Add llp64 for check of special\n\toverflow warnings.\n\t* g++.dg/warn/pr13358-4.C: Likewise.\n\t* g++.dg/warn/Wconversion-null-2.C:  Add 'long long' case.\n\t* g++.dg/warn/Wconversion-null.C: Likewise.\n\ngcc/\n2010-05-26  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* builtin-types.def (BT_INT128): New primitive type.\n\t(BT_UINT128): Likewise.\n\t* c-common.c (c_common_r): Add __int128 keyword.\n\t(c_common_type_for_size): Handle __int128.\n\t(c_common_type_for_mode): Likewise.\n\t(c_common_signed_or_unsigned_type): Likewise.\n\t(c_common_nodes_and_builtins): Add builtin type\n\tif target supports 128-bit integer scalar.\n\t* c-common.h (enum rid): Add RID_INT128.\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __SIZEOF_INT128__\n\tif target supports 128-bit integer scalar.\n\t* c-decl.c (declspecs_add_type): Handle new keyword\n\t__int128.\n\t(finish_declspecs): Likewise.\n\t* c-parser.c (c_token_starts_typename): Handle RID_INT128.\n\t(c_token_starts_declspecs): Likewise.\n\t(c_parser_declspecs): Likewise.\n\t(c_parser_attributes): Likewise.\n\t(c_parser_objc_selector): Likewise.\n\t* c-pretty-print.c (pp_c_integer_constant): Handle __int128.\n\t* c-tree.h (enum c_typespec_keyword): Add cts_int128.\n\t* gimple.c (gimple_signed_or_unsigned_type): Handle int128 types.\n\t* tree.c (make_or_reuse_type): Likewise.\n\t(make_unsigned_type): Likewise.\n\t(build_common_tree_nodes_2): Likewise.\n\t* tree.h (enum integer_type_kind): Add itk_int128 and\n\titk_unsigned_int128.\n\t(int128_integer_type_node): New define..\n\t(int128_unsigned_type_node): New define.\n\t* cp/cp-tree.h (cp_decl_specifier_seq): Add new bifield\n\texplicit_int128_p.\n\t* cp/decl.c (grokdeclarator): Handle __int128.\n\t* cp/parser.c (cp_lexer_next_token_is_decl_specifier_ke): Likewise.\n\t(cp_parser_simple_type_specifier): Likewise.\n\t* cp/rtti.c (emit_support_tinfos): Add int128 nodes for rtti.\n\t* cp/typeck.c (cp_common_type): Handle __int128.\n\t* cp/mangle.c (integer_type_codes): Add itk_int128 and\n\titk_unsigned_int128.\n\t* doc/extend.texi: Add documentation about __int128 type.\n\nFrom-SVN: r159879", "tree": {"sha": "a8a266122bedc642da5d3e6dbb95526bcdf6c29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a266122bedc642da5d3e6dbb95526bcdf6c29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/comments", "author": null, "committer": null, "parents": [{"sha": "880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880ad25fc7968f5f3d1e9042b2c07812e01a2c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880ad25fc7968f5f3d1e9042b2c07812e01a2c99"}], "stats": {"total": 1246, "additions": 1228, "deletions": 18}, "files": [{"sha": "d8574a6fbf4d0487e8c07f07b7db88d02e9a25fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1,3 +1,45 @@\n+2010-05-26  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* builtin-types.def (BT_INT128): New primitive type.\n+\t(BT_UINT128): Likewise.\n+\t* c-common.c (c_common_r): Add __int128 keyword.\n+\t(c_common_type_for_size): Handle __int128.\n+\t(c_common_type_for_mode): Likewise.\n+\t(c_common_signed_or_unsigned_type): Likewise.\n+\t(c_common_nodes_and_builtins): Add builtin type\n+\tif target supports 128-bit integer scalar.\n+\t* c-common.h (enum rid): Add RID_INT128.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __SIZEOF_INT128__\n+\tif target supports 128-bit integer scalar.\n+\t* c-decl.c (declspecs_add_type): Handle new keyword\n+\t__int128.\n+\t(finish_declspecs): Likewise.\n+\t* c-parser.c (c_token_starts_typename): Handle RID_INT128.\n+\t(c_token_starts_declspecs): Likewise.\n+\t(c_parser_declspecs): Likewise.\n+\t(c_parser_attributes): Likewise.\n+\t(c_parser_objc_selector): Likewise.\n+\t* c-pretty-print.c (pp_c_integer_constant): Handle __int128.\n+\t* c-tree.h (enum c_typespec_keyword): Add cts_int128.\n+\t* gimple.c (gimple_signed_or_unsigned_type): Handle int128 types.\n+\t* tree.c (make_or_reuse_type): Likewise.\n+\t(make_unsigned_type): Likewise.\n+\t(build_common_tree_nodes_2): Likewise.\n+\t* tree.h (enum integer_type_kind): Add itk_int128 and\n+\titk_unsigned_int128.\n+\t(int128_integer_type_node): New define..\n+\t(int128_unsigned_type_node): New define.\n+\t* cp/cp-tree.h (cp_decl_specifier_seq): Add new bifield\n+\texplicit_int128_p.\n+\t* cp/decl.c (grokdeclarator): Handle __int128.\n+\t* cp/parser.c (cp_lexer_next_token_is_decl_specifier_ke): Likewise.\n+\t(cp_parser_simple_type_specifier): Likewise.\n+\t* cp/rtti.c (emit_support_tinfos): Add int128 nodes for rtti.\n+\t* cp/typeck.c (cp_common_type): Handle __int128.\n+\t* cp/mangle.c (integer_type_codes): Add itk_int128 and\n+\titk_unsigned_int128.\n+\t* doc/extend.texi: Add documentation about __int128 type.\n+\n 2010-05-26  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (copy_nary): Adjust."}, {"sha": "66d9263156cc7d80a406ae5983603a31391513df", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -72,6 +72,8 @@ DEF_PRIMITIVE_TYPE (BT_LONG, long_integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_ULONG, long_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGLONG, long_long_integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_ULONGLONG, long_long_unsigned_type_node)\n+DEF_PRIMITIVE_TYPE (BT_INT128, int128_integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UINT128, int128_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINTMAX, uintmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT32, uint32_type_node)"}, {"sha": "68fa9cf067e71cdc55588aa65f9ce8a4ce926519", "filename": "gcc/c-common.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -65,10 +65,12 @@ cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \ttree short_integer_type_node;\n \ttree long_integer_type_node;\n \ttree long_long_integer_type_node;\n+\ttree int128_integer_type_node;\n \n \ttree short_unsigned_type_node;\n \ttree long_unsigned_type_node;\n \ttree long_long_unsigned_type_node;\n+\ttree int128_unsigned_type_node;\n \n \ttree truthvalue_type_node;\n \ttree truthvalue_false_node;\n@@ -595,6 +597,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__has_trivial_copy\", RID_HAS_TRIVIAL_COPY, D_CXXONLY },\n   { \"__has_trivial_destructor\", RID_HAS_TRIVIAL_DESTRUCTOR, D_CXXONLY },\n   { \"__has_virtual_destructor\", RID_HAS_VIRTUAL_DESTRUCTOR, D_CXXONLY },\n+  { \"__int128\",\t\tRID_INT128,\t0 },\n   { \"__is_abstract\",\tRID_IS_ABSTRACT, D_CXXONLY },\n   { \"__is_base_of\",\tRID_IS_BASE_OF, D_CXXONLY },\n   { \"__is_class\",\tRID_IS_CLASS,\tD_CXXONLY },\n@@ -2857,6 +2860,11 @@ c_common_type_for_size (unsigned int bits, int unsignedp)\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n \n+  if (int128_integer_type_node\n+      && bits == TYPE_PRECISION (int128_integer_type_node))\n+    return (unsignedp ? int128_unsigned_type_node\n+\t    : int128_integer_type_node);\n+\n   if (bits == TYPE_PRECISION (widest_integer_literal_type_node))\n     return (unsignedp ? widest_unsigned_literal_type_node\n \t    : widest_integer_literal_type_node);\n@@ -2935,6 +2943,10 @@ c_common_type_for_mode (enum machine_mode mode, int unsignedp)\n   if (mode == TYPE_MODE (long_long_integer_type_node))\n     return unsignedp ? long_long_unsigned_type_node : long_long_integer_type_node;\n \n+  if (int128_integer_type_node\n+      && mode == TYPE_MODE (int128_integer_type_node))\n+    return unsignedp ? int128_unsigned_type_node : int128_integer_type_node;\n+\n   if (mode == TYPE_MODE (widest_integer_literal_type_node))\n     return unsignedp ? widest_unsigned_literal_type_node\n \t\t     : widest_integer_literal_type_node;\n@@ -3148,6 +3160,10 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n     return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n   if (type1 == long_long_integer_type_node || type1 == long_long_unsigned_type_node)\n     return unsignedp ? long_long_unsigned_type_node : long_long_integer_type_node;\n+  if (int128_integer_type_node\n+      && (type1 == int128_integer_type_node\n+\t  || type1 == int128_unsigned_type_node))\n+    return unsignedp ? int128_unsigned_type_node : int128_integer_type_node;\n   if (type1 == widest_integer_literal_type_node || type1 == widest_unsigned_literal_type_node)\n     return unsignedp ? widest_unsigned_literal_type_node : widest_integer_literal_type_node;\n #if HOST_BITS_PER_WIDE_INT >= 64\n@@ -3262,6 +3278,9 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n   if (TYPE_OK (long_long_integer_type_node))\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n+  if (int128_integer_type_node && TYPE_OK (int128_integer_type_node))\n+    return (unsignedp ? int128_unsigned_type_node\n+\t    : int128_integer_type_node);\n   if (TYPE_OK (widest_integer_literal_type_node))\n     return (unsignedp ? widest_unsigned_literal_type_node\n \t    : widest_integer_literal_type_node);\n@@ -3305,6 +3324,10 @@ c_build_bitfield_integer_type (unsigned HOST_WIDE_INT width, int unsignedp)\n   if (width == TYPE_PRECISION (long_long_integer_type_node))\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n+  if (int128_integer_type_node\n+      && width == TYPE_PRECISION (int128_integer_type_node))\n+    return (unsignedp ? int128_unsigned_type_node\n+\t    : int128_integer_type_node);\n   return build_nonstandard_integer_type (width, unsignedp);\n }\n \n@@ -4697,6 +4720,13 @@ c_common_nodes_and_builtins (void)\n   record_builtin_type (RID_UNSIGNED, \"unsigned int\", unsigned_type_node);\n   record_builtin_type (RID_MAX, \"long unsigned int\",\n \t\t       long_unsigned_type_node);\n+  if (int128_integer_type_node != NULL_TREE)\n+    {\n+      record_builtin_type (RID_INT128, \"__int128\",\n+\t\t\t   int128_integer_type_node);\n+      record_builtin_type (RID_MAX, \"__int128 unsigned\",\n+\t\t\t   int128_unsigned_type_node);\n+    }\n   if (c_dialect_cxx ())\n     record_builtin_type (RID_MAX, \"unsigned long\", long_unsigned_type_node);\n   record_builtin_type (RID_MAX, \"long long int\","}, {"sha": "d53fa0dcd82800d097f18378822938eb8744da8c", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -69,6 +69,7 @@ enum rid\n \n   /* C */\n   RID_INT,     RID_CHAR,   RID_FLOAT,    RID_DOUBLE, RID_VOID,\n+  RID_INT128,\n   RID_ENUM,    RID_STRUCT, RID_UNION,    RID_IF,     RID_ELSE,\n   RID_WHILE,   RID_DO,     RID_FOR,      RID_SWITCH, RID_CASE,\n   RID_DEFAULT, RID_BREAK,  RID_CONTINUE, RID_RETURN, RID_GOTO,"}, {"sha": "6bbdb460e7ad5b7e0945ed86009c3e38bdc9175d", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -814,6 +814,9 @@ c_cpp_builtins (cpp_reader *pfile)\n   builtin_define_type_sizeof (\"__SIZEOF_LONG__\", long_integer_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_LONG_LONG__\",\n \t\t\t      long_long_integer_type_node);\n+  if (int128_integer_type_node != NULL_TREE)\n+    builtin_define_type_sizeof (\"__SIZEOF_INT128__\",\n+\t\t\t        int128_integer_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_SHORT__\", short_integer_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_FLOAT__\", float_type_node);\n   builtin_define_type_sizeof (\"__SIZEOF_DOUBLE__\", double_type_node);"}, {"sha": "96db92d0e393be63e910b4f8c9d8b0b4aa400d5b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -8633,6 +8633,10 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\terror_at (loc,\n \t\t\t  (\"both %<long%> and %<void%> in \"\n \t\t\t   \"declaration specifiers\"));\n+\t      else if (specs->typespec_word == cts_int128)\n+\t\t  error_at (loc,\n+\t\t\t    (\"both %<long%> and %<__int128%> in \"\n+\t\t\t     \"declaration specifiers\"));\n \t      else if (specs->typespec_word == cts_bool)\n \t\terror_at (loc,\n \t\t\t  (\"both %<long%> and %<_Bool%> in \"\n@@ -8670,6 +8674,10 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\terror_at (loc,\n \t\t\t  (\"both %<short%> and %<void%> in \"\n \t\t\t   \"declaration specifiers\"));\n+\t      else if (specs->typespec_word == cts_int128)\n+\t\terror_at (loc,\n+\t\t\t  (\"both %<short%> and %<__int128%> in \"\n+\t\t\t   \"declaration specifiers\"));\n \t      else if (specs->typespec_word == cts_bool)\n \t\terror_at (loc,\n \t\t\t  (\"both %<short%> and %<_Bool%> in \"\n@@ -8819,7 +8827,13 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t      dupe = specs->saturating_p;\n \t      pedwarn (loc, OPT_pedantic,\n \t\t       \"ISO C does not support saturating types\");\n-\t      if (specs->typespec_word == cts_void)\n+\t      if (specs->typespec_word == cts_int128)\n+\t        {\n+\t\t  error_at (loc,\n+\t\t\t    (\"both %<_Sat%> and %<__int128%> in \"\n+\t\t\t     \"declaration specifiers\"));\n+\t        }\n+\t      else if (specs->typespec_word == cts_void)\n \t\terror_at (loc,\n \t\t\t  (\"both %<_Sat%> and %<void%> in \"\n \t\t\t   \"declaration specifiers\"));\n@@ -8874,7 +8888,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n       else\n \t{\n \t  /* \"void\", \"_Bool\", \"char\", \"int\", \"float\", \"double\", \"_Decimal32\",\n-\t     \"_Decimal64\", \"_Decimal128\", \"_Fract\" or \"_Accum\".  */\n+\t     \"__int128\", \"_Decimal64\", \"_Decimal128\", \"_Fract\" or \"_Accum\".  */\n \t  if (specs->typespec_word != cts_none)\n \t    {\n \t      error_at (loc,\n@@ -8883,6 +8897,31 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t    }\n \t  switch (i)\n \t    {\n+\t    case RID_INT128:\n+\t      if (int128_integer_type_node == NULL_TREE)\n+\t\t{\n+\t\t  error_at (loc, \"%<__int128%> is not supported for this target\");\n+\t\t  return specs;\n+\t\t}\n+\t      if (!in_system_header)\n+\t\tpedwarn (loc, OPT_pedantic,\n+\t\t\t \"ISO C does not support %<__int128%> type\");\n+\n+\t      if (specs->long_p)\n+\t\terror_at (loc,\n+\t\t\t  (\"both %<__int128%> and %<long%> in \"\n+\t\t\t   \"declaration specifiers\"));\n+\t      else if (specs->saturating_p)\n+\t\terror_at (loc,\n+\t\t\t  (\"both %<_Sat%> and %<__int128%> in \"\n+\t\t\t   \"declaration specifiers\"));\n+\t      else if (specs->short_p)\n+\t\terror_at (loc,\n+\t\t\t  (\"both %<__int128%> and %<short%> in \"\n+\t\t\t   \"declaration specifiers\"));\n+\t      else\n+\t\tspecs->typespec_word = cts_int128;\n+\t      return specs;\n \t    case RID_VOID:\n \t      if (specs->long_p)\n \t\terror_at (loc,\n@@ -9355,6 +9394,19 @@ finish_declspecs (struct c_declspecs *specs)\n \t  specs->type = build_complex_type (specs->type);\n \t}\n       break;\n+    case cts_int128:\n+      gcc_assert (!specs->long_p && !specs->short_p && !specs->long_long_p);\n+      gcc_assert (!(specs->signed_p && specs->unsigned_p));\n+      specs->type = (specs->unsigned_p\n+\t\t     ? int128_unsigned_type_node\n+\t\t     : int128_integer_type_node);\n+      if (specs->complex_p)\n+\t{\n+\t  pedwarn (input_location, OPT_pedantic,\n+\t\t   \"ISO C does not support complex integer types\");\n+\t  specs->type = build_complex_type (specs->type);\n+\t}\n+      break;\n     case cts_int:\n       gcc_assert (!(specs->long_p && specs->short_p));\n       gcc_assert (!(specs->signed_p && specs->unsigned_p));"}, {"sha": "b30b0636ec0636abd4f1099011e422f3b4d0763e", "filename": "gcc/c-parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -378,6 +378,7 @@ c_token_starts_typename (c_token *token)\n \t{\n \tcase RID_UNSIGNED:\n \tcase RID_LONG:\n+\tcase RID_INT128:\n \tcase RID_SHORT:\n \tcase RID_SIGNED:\n \tcase RID_COMPLEX:\n@@ -457,6 +458,7 @@ c_token_starts_declspecs (c_token *token)\n \tcase RID_THREAD:\n \tcase RID_UNSIGNED:\n \tcase RID_LONG:\n+\tcase RID_INT128:\n \tcase RID_SHORT:\n \tcase RID_SIGNED:\n \tcase RID_COMPLEX:\n@@ -1574,6 +1576,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n \n    type-specifier:\n      typeof-specifier\n+     __int128\n      _Decimal32\n      _Decimal64\n      _Decimal128\n@@ -1691,6 +1694,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t  break;\n \tcase RID_UNSIGNED:\n \tcase RID_LONG:\n+\tcase RID_INT128:\n \tcase RID_SHORT:\n \tcase RID_SIGNED:\n \tcase RID_COMPLEX:\n@@ -3005,6 +3009,7 @@ c_parser_attributes (c_parser *parser)\n \t\tcase RID_STATIC:\n \t\tcase RID_UNSIGNED:\n \t\tcase RID_LONG:\n+\t\tcase RID_INT128:\n \t\tcase RID_CONST:\n \t\tcase RID_EXTERN:\n \t\tcase RID_REGISTER:\n@@ -6987,6 +6992,7 @@ c_parser_objc_selector (c_parser *parser)\n     case RID_ALIGNOF:\n     case RID_UNSIGNED:\n     case RID_LONG:\n+    case RID_INT128:\n     case RID_CONST:\n     case RID_SHORT:\n     case RID_VOLATILE:"}, {"sha": "b9f9953ba794a4077c43bb2ca48740a2e7ea95bb", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -864,6 +864,9 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n   else if (type == long_long_integer_type_node\n \t   || type == long_long_unsigned_type_node)\n     pp_string (pp, \"ll\");\n+  else if (type == int128_integer_type_node\n+           || type == int128_unsigned_type_node)\n+    pp_string (pp, \"I128\");\n }\n \n /* Print out a CHARACTER literal.  */"}, {"sha": "6d8394ac067ce6f817cc089645549ef04a31df84", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -196,6 +196,7 @@ enum c_typespec_keyword {\n   cts_char,\n   cts_int,\n   cts_float,\n+  cts_int128,\n   cts_double,\n   cts_dfloat32,\n   cts_dfloat64,"}, {"sha": "37a0f1e50ea3762f2a3d05a4feb9227c931398b2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -4402,6 +4402,8 @@ typedef struct cp_decl_specifier_seq {\n   BOOL_BITFIELD any_type_specifiers_p : 1;\n   /* True iff \"int\" was explicitly provided.  */\n   BOOL_BITFIELD explicit_int_p : 1;\n+  /* True iff \"__int128\" was explicitly provided.  */\n+  BOOL_BITFIELD explicit_int128_p : 1;\n   /* True iff \"char\" was explicitly provided.  */\n   BOOL_BITFIELD explicit_char_p : 1;\n } cp_decl_specifier_seq;"}, {"sha": "495660dec2947e05f5b3ca9de49cb30aadf4a0bc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -7701,6 +7701,7 @@ grokdeclarator (const cp_declarator *declarator,\n {\n   tree type = NULL_TREE;\n   int longlong = 0;\n+  int explicit_int128 = 0;\n   int virtualp, explicitp, friendp, inlinep, staticp;\n   int explicit_int = 0;\n   int explicit_char = 0;\n@@ -7764,6 +7765,7 @@ grokdeclarator (const cp_declarator *declarator,\n   short_p = declspecs->specs[(int)ds_short];\n   long_p = declspecs->specs[(int)ds_long];\n   longlong = declspecs->specs[(int)ds_long] >= 2;\n+  explicit_int128 = declspecs->explicit_int128_p;\n   thread_p = declspecs->specs[(int)ds_thread];\n \n   if (decl_context == FUNCDEF)\n@@ -8092,12 +8094,16 @@ grokdeclarator (const cp_declarator *declarator,\n \terror (\"%<signed%> and %<unsigned%> specified together for %qs\", name);\n       else if (longlong && TREE_CODE (type) != INTEGER_TYPE)\n \terror (\"%<long long%> invalid for %qs\", name);\n+      else if (explicit_int128 && TREE_CODE (type) != INTEGER_TYPE)\n+\terror (\"%<__int128%> invalid for %qs\", name);\n       else if (long_p && TREE_CODE (type) == REAL_TYPE)\n \terror (\"%<long%> invalid for %qs\", name);\n       else if (short_p && TREE_CODE (type) == REAL_TYPE)\n \terror (\"%<short%> invalid for %qs\", name);\n       else if ((long_p || short_p) && TREE_CODE (type) != INTEGER_TYPE)\n \terror (\"%<long%> or %<short%> invalid for %qs\", name);\n+      else if ((long_p || short_p || explicit_char || explicit_int) && explicit_int128)\n+\terror (\"%<long%>, %<int%>, %<short%>, or %<char%> invalid for %qs\", name);\n       else if ((long_p || short_p) && explicit_char)\n \terror (\"%<long%> or %<short%> specified with char for %qs\", name);\n       else if (long_p && short_p)\n@@ -8112,14 +8118,30 @@ grokdeclarator (const cp_declarator *declarator,\n       else\n \t{\n \t  ok = 1;\n-\t  if (!explicit_int && !defaulted_int && !explicit_char && pedantic)\n+\t  if (!explicit_int && !defaulted_int && !explicit_char && !explicit_int128 && pedantic)\n \t    {\n \t      pedwarn (input_location, OPT_pedantic, \n \t\t       \"long, short, signed or unsigned used invalidly for %qs\",\n \t\t       name);\n \t      if (flag_pedantic_errors)\n \t\tok = 0;\n \t    }\n+\t  if (explicit_int128)\n+\t    {\n+\t      if (int128_integer_type_node == NULL_TREE)\n+\t        {\n+\t\t  error (\"%<__int128%> is not supported by this target\");\n+\t\t  ok = 0;\n+\t        }\n+\t      else if (pedantic)\n+\t\t{\n+\t\t  pedwarn (input_location, OPT_pedantic,\n+\t\t\t   \"ISO C++ does not support %<__int128%> for %qs\",\n+\t\t\t   name);\n+\t\t  if (flag_pedantic_errors)\n+\t\t    ok = 0;\n+\t\t}\n+\t    }\n \t}\n \n       /* Discard the type modifiers if they are invalid.  */\n@@ -8130,6 +8152,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  long_p = false;\n \t  short_p = false;\n \t  longlong = 0;\n+\t  explicit_int128 = false;\n \t}\n     }\n \n@@ -8154,7 +8177,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && TREE_CODE (type) == INTEGER_TYPE\n \t  && !same_type_p (TYPE_MAIN_VARIANT (type), wchar_type_node)))\n     {\n-      if (longlong)\n+      if (explicit_int128)\n+\ttype = int128_unsigned_type_node;\n+      else if (longlong)\n \ttype = long_long_unsigned_type_node;\n       else if (long_p)\n \ttype = long_unsigned_type_node;\n@@ -8169,6 +8194,8 @@ grokdeclarator (const cp_declarator *declarator,\n     }\n   else if (signed_p && type == char_type_node)\n     type = signed_char_type_node;\n+  else if (explicit_int128)\n+    type = int128_integer_type_node;\n   else if (longlong)\n     type = long_long_integer_type_node;\n   else if (long_p)\n@@ -8184,8 +8211,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t \"complex double\", but if any modifiers at all are specified it is\n \t the complex form of TYPE.  E.g, \"complex short\" is\n \t \"complex short int\".  */\n-\n-      else if (defaulted_int && ! longlong\n+      else if (defaulted_int && ! longlong && ! explicit_int128\n \t       && ! (long_p || short_p || signed_p || unsigned_p))\n \ttype = complex_double_type_node;\n       else if (type == integer_type_node)"}, {"sha": "a8a80a9b5357d318798cdd79555bae3bf69dc0a0", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -148,7 +148,9 @@ integer_type_codes[itk_none] =\n   'l',  /* itk_long */\n   'm',  /* itk_unsigned_long */\n   'x',  /* itk_long_long */\n-  'y'   /* itk_unsigned_long_long */\n+  'y',  /* itk_unsigned_long_long */\n+  'n',  /* itk_int128 */\n+  'o',  /* itk_unsigned_int128  */\n };\n \n static int decl_is_template_id (const tree, tree* const);"}, {"sha": "36d7eae5883583d1211ed33b449aed209469f928", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -682,6 +682,7 @@ cp_lexer_next_token_is_decl_specifier_keyword (cp_lexer *lexer)\n     case RID_SHORT:\n     case RID_INT:\n     case RID_LONG:\n+    case RID_INT128:\n     case RID_SIGNED:\n     case RID_UNSIGNED:\n     case RID_FLOAT:\n@@ -12164,6 +12165,7 @@ cp_parser_type_specifier (cp_parser* parser,\n    GNU Extension:\n \n    simple-type-specifier:\n+     __int128\n      __typeof__ unary-expression\n      __typeof__ ( type-id )\n \n@@ -12211,6 +12213,13 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \tdecl_specs->explicit_int_p = true;\n       type = integer_type_node;\n       break;\n+    case RID_INT128:\n+      if (!int128_integer_type_node)\n+\tbreak;\n+      if (decl_specs)\n+        decl_specs->explicit_int128_p = true;\n+      type = int128_integer_type_node;\n+      break;\n     case RID_LONG:\n       if (decl_specs)\n \t++decl_specs->specs[(int) ds_long];"}, {"sha": "17664f57ed510eac2fc440e7bc09d0ffbba64f9f", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1476,6 +1476,7 @@ emit_support_tinfos (void)\n     &integer_type_node, &unsigned_type_node,\n     &long_integer_type_node, &long_unsigned_type_node,\n     &long_long_integer_type_node, &long_long_unsigned_type_node,\n+    &int128_integer_type_node, &int128_unsigned_type_node,\n     &float_type_node, &double_type_node, &long_double_type_node,\n     &dfloat32_type_node, &dfloat64_type_node, &dfloat128_type_node,\n     &nullptr_type_node,"}, {"sha": "4ad93494d18d12e23b8a4de2e6d53ab8bf0b8cfd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -350,6 +350,17 @@ cp_common_type (tree t1, tree t2)\n \t\t    : long_long_integer_type_node);\n \t  return build_type_attribute_variant (t, attributes);\n \t}\n+      if (int128_integer_type_node != NULL_TREE\n+\t  && (same_type_p (TYPE_MAIN_VARIANT (t1),\n+\t\t\t   int128_integer_type_node)\n+\t      || same_type_p (TYPE_MAIN_VARIANT (t2),\n+\t\t\t      int128_integer_type_node)))\n+\t{\n+\t  tree t = ((TYPE_UNSIGNED (t1) || TYPE_UNSIGNED (t2))\n+\t\t    ? int128_unsigned_type_node\n+\t\t    : int128_integer_type_node);\n+\t  return build_type_attribute_variant (t, attributes);\n+\t}\n \n       /* Go through the same procedure, but for longs.  */\n       if (same_type_p (TYPE_MAIN_VARIANT (t1), long_unsigned_type_node)"}, {"sha": "8e9a7061b2b45df23f32665112cd58f2741fd7fa", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -33,6 +33,7 @@ extensions, accepted by GCC in C90 mode and in C++.\n * Typeof::              @code{typeof}: referring to the type of an expression.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression.\n * Long Long::           Double-word integers---@code{long long int}.\n+* __int128::\t\t\t128-bit integers---@code{__int128}.\n * Complex::             Data types for complex numbers.\n * Floating Types::      Additional Floating Types.\n * Half-Precision::      Half-Precision Floating Point.\n@@ -804,6 +805,17 @@ the operand in the middle would perform the side effect twice.  Omitting\n the middle operand uses the value already computed without the undesirable\n effects of recomputing it.\n \n+@node __int128\n+@section 128-bits integers\n+@cindex @code{__int128} data types\n+\n+As an extension the integer scalar type @code{__int128} is supported for\n+targets having an integer mode wide enough to hold 128-bit.\n+Simply write @code{__int128} for a signed 128-bit integer, or\n+@code{unsigned __int128} for an unsigned 128-bit integer.  There is no\n+support in GCC to express an integer constant of type @code{__int128}\n+for targets having @code{long long} integer with less then 128 bit width.\n+\n @node Long Long\n @section Double-Word Integers\n @cindex @code{long long} data types"}, {"sha": "07b91f81dc5be40b1bb3a3fe66ee018407654b36", "filename": "gcc/gimple.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -4098,6 +4098,10 @@ gimple_signed_or_unsigned_type (bool unsignedp, tree type)\n     return unsignedp\n            ? long_long_unsigned_type_node\n \t   : long_long_integer_type_node;\n+  if (int128_integer_type_node && (type1 == int128_integer_type_node || type1 == int128_unsigned_type_node))\n+    return unsignedp\n+           ? int128_unsigned_type_node\n+\t   : int128_integer_type_node;\n #if HOST_BITS_PER_WIDE_INT >= 64\n   if (type1 == intTI_type_node || type1 == unsigned_intTI_type_node)\n     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n@@ -4210,6 +4214,10 @@ gimple_signed_or_unsigned_type (bool unsignedp, tree type)\n     return (unsignedp\n \t    ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n+  if (int128_integer_type_node && TYPE_OK (int128_integer_type_node))\n+    return (unsignedp\n+\t    ? int128_unsigned_type_node\n+\t    : int128_integer_type_node);\n \n #if HOST_BITS_PER_WIDE_INT >= 64\n   if (TYPE_OK (intTI_type_node))"}, {"sha": "8852b4acf1e802128a90d8a6e713b3415093e5a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1,3 +1,22 @@\n+2010-05-26  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_int128): New\n+\tfunction to check if __int128 types are available for target.\n+\t* testsuite/c-c++-common/int128-types-1.c: New.\n+\t* testsuite/c-c++-common/int128-1.c: New.\n+\t* testsuite/c-c++-common/int128-2.c: New.\n+\t* g++.dg/abi/mangle43.C: New.\n+\t* g++.dg/init/enum1.C: Handle __int128 case and add -Wno-overflow.\n+\t* g++.dg/cpp0x/nullptr04.C: Use __SIZE_TYPE__ for getting\n+\tpointer-wide scalar.\n+\t* g++.dg/other/pr25632.C: Likewise.\n+\t* g++.dg/other/large-size-array.C (DIM): Use ULLONG_MAX for win64 case.\n+\t* g++.dg/warn/pr13358-2.C: Add llp64 for check of special\n+\toverflow warnings.\n+\t* g++.dg/warn/pr13358-4.C: Likewise.\n+\t* g++.dg/warn/Wconversion-null-2.C:  Add 'long long' case.\n+\t* g++.dg/warn/Wconversion-null.C: Likewise.\n+\n 2010-05-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43382"}, {"sha": "dafb2a9934996fb3e9516c07905c29c54a57e8d8", "filename": "gcc/testsuite/c-c++-common/int128-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-1.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"\" { target c++ } } */\n+\n+#include <stdarg.h>\n+\n+#ifndef __cplusplus\n+extern void abort (void);\n+#else\n+extern \"C\" void abort (void);\n+#endif\n+\n+#define MK_CONST128(A,B,C,D) \\\n+        ( (((unsigned __int128) (unsigned int) A) << 96) \\\n+         | (((unsigned __int128) (unsigned int) B) << 64) \\\n+         | (((unsigned __int128) (unsigned int) C) << 32) \\\n+         | ((unsigned __int128) (unsigned int) D) )\n+\n+#define MK_CONST128_SIGNED(A,B,C,D) \\\n+        ((__int128) MK_CONST128(A, B, C, D))\n+\n+void foo(int i, ...)\n+{\n+  __int128 q;\n+  va_list va;\n+\n+  va_start(va, i);\n+  q = va_arg(va, __int128);\n+  va_end(va);\n+\n+  if (q != MK_CONST128_SIGNED (0xfeffffffU, 2U, 3U, 4U))\n+    abort();\n+}\n+\n+int main(void)\n+{\n+  __int128 q = MK_CONST128_SIGNED (0xfeffffffU, 2U, 3U, 4U);\n+\n+  foo(1, q);\n+  return 0;\n+}"}, {"sha": "36042b0226ba4b1f86083da04f8e5fd2319a6ac1", "filename": "gcc/testsuite/c-c++-common/int128-2.c", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-2.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -0,0 +1,157 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"\" { target c++ } } */\n+\n+#ifndef __cplusplus\n+extern void abort (void);\n+#else\n+extern \"C\" void abort (void);\n+#endif\n+\n+#define MK_CONST128(A,B,C,D) \\\n+        ( (((unsigned __int128) (unsigned int) A) << 96) \\\n+         | (((unsigned __int128) (unsigned int) B) << 64) \\\n+         | (((unsigned __int128) (unsigned int) C) << 32) \\\n+         | ((unsigned __int128) (unsigned int) D) )\n+\n+#define MK_CONST128_SIGNED(A,B,C,D) \\\n+        ((__int128) MK_CONST128(A, B, C, D))\n+\n+#define MINUS_2 MK_CONST128_SIGNED (0xffffffffu, 0xffffffffu, 0xffffffffu, \\\n+\t\t0xfffffffeu)\n+#define MINUS_3 MK_CONST128_SIGNED (0xffffffffu, 0xffffffffu, 0xffffffffu, \\\n+\t\t0xfffffffdu)\n+#define MINUS_6 MK_CONST128_SIGNED (0xffffffffu, 0xffffffffu, 0xffffffffu, \\\n+\t\t0xfffffffau)\n+#define PLUS_1\tMK_CONST128_SIGNED (0, 0, 0, 1)\n+#define PLUS_2\tMK_CONST128_SIGNED (0, 0, 0, 2)\n+#define PLUS_3\tMK_CONST128_SIGNED (0, 0, 0, 3)\n+#define PLUS_6\tMK_CONST128_SIGNED (0, 0, 0, 6)\n+#define PLUS_10\tMK_CONST128_SIGNED (0, 0, 0, 10)\n+\n+#define U_8\tMK_CONST128 (0, 0, 0, 8)\n+#define U_MAX\tMK_CONST128 (0xffffffff,0xffffffff,0xffffffff,0xffffffff)\n+#define U_CST1\tMK_CONST128 (0xbeeffeed, 0xdeafcafe, 0xaffefade, 0x12345678)\n+#define U_CST2\tMK_CONST128 (0x41100112, 0x21503501, 0x50010521, 0xedcba987)\n+\n+signed __int128 foo_neg (signed __int128 v)\n+{\n+  return -v;\n+}\n+\n+unsigned __int128 foo_xor (unsigned __int128 x, unsigned __int128 y)\n+{\n+  return x ^ y;\n+}\n+\n+unsigned __int128 foo_inv (unsigned __int128 v)\n+{\n+  return ~v;\n+}\n+\n+unsigned __int128 foo_rotate_left (unsigned __int128 v)\n+{\n+  unsigned __int128 c;\n+  int i;\n+  for (i = 0; i < 128; i++)\n+    {\n+      c = v >> 127;\n+      v <<= 1;\n+      v |= c;\n+    }\n+  return v;\n+}\n+\n+unsigned __int128 foo_rotate_right (unsigned __int128 v)\n+{\n+  unsigned __int128 c;\n+  int i;\n+  for (i = 0; i < 128; i++)\n+    {\n+      c = (v & ((unsigned __int128) 1)) << 127;\n+      v >>= 1;\n+      v |= c;\n+    }\n+  return v;\n+}\n+\n+void foo_swap (unsigned __int128 *x, unsigned __int128 *y)\n+{\n+  unsigned __int128 x1 = x[0];\n+  unsigned __int128 y1 = y[0];\n+  x1 ^= y1 ^= x1 ^= y1;\n+  x[0] = x1;\n+  y[0] = y1;\n+}\n+\n+__int128 foo_add (signed __int128 a, unsigned __int128 b)\n+{\n+  return (__int128) (a + (__int128) b);\n+}\n+\n+__int128 foo_sub (unsigned __int128 a, signed __int128 b)\n+{\n+  return (__int128) ((__int128) a - b);\n+}\n+\n+__int128 foo_mul (signed __int128 a, signed __int128 b)\n+{\n+  return a * b;\n+}\n+\n+__int128 foo_div (signed __int128 a, signed __int128 b)\n+{\n+  return a / b;\n+}\n+\n+__int128 foo_shl (signed __int128 a, int shift)\n+{\n+  return a << (shift & 127);\n+}\n+\n+__int128 foo_shr (signed __int128 a, int shift)\n+{\n+  return a >> (shift & 127);\n+}\n+\n+int main(void)\n+{\n+  __int128 rslt;\n+  unsigned __int128 u1, u2;\n+\n+  rslt = foo_add (MINUS_2, U_8);\n+  if (rslt != PLUS_6)\n+    abort ();\n+  rslt = foo_sub (U_8, MINUS_2);\n+  if (rslt != PLUS_10)\n+     abort ();\n+  rslt = foo_sub ((unsigned __int128) foo_mul (MINUS_2, MINUS_2), MINUS_2);\n+  if (rslt != PLUS_6)\n+    abort ();\n+  if (rslt != foo_shl (PLUS_3, 1))\n+    abort ();\n+  rslt = foo_shl (MINUS_3, 1);\n+  if (rslt != MINUS_6)\n+    abort ();\n+  if (foo_shr (MINUS_6, 1) != MINUS_3)\n+    abort ();\n+  if (foo_div (MINUS_6, MINUS_3) != PLUS_2)\n+    abort ();\n+  if (foo_rotate_left (U_CST1) != U_CST1)\n+    abort ();\n+  if (foo_rotate_right (U_CST1) != U_CST1)\n+    abort ();\n+  u1 = U_CST1;\n+  u2 = U_8;\n+  foo_swap (&u1, &u2);\n+  if (u1 != U_8 || u2 != U_CST1)\n+    abort ();\n+\n+  if (foo_inv (U_CST2) != U_CST1)\n+    abort ();\n+  if (foo_neg (PLUS_2) != MINUS_2)\n+    abort ();\n+  if (foo_neg ((signed __int128) U_CST1) != foo_add (PLUS_1, foo_xor (U_CST1, U_MAX)))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7bee8fcd30f6f881381a5f40a1223e4814cfa811", "filename": "gcc/testsuite/c-c++-common/int128-types-1.c", "status": "added", "additions": 666, "deletions": 0, "changes": 666, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-types-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-types-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fint128-types-1.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -0,0 +1,666 @@\n+/* Test for valid and invalid combinations of type specifiers using __int128.\n+   */\n+/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"\" { target c++ } } */\n+\n+typedef char type;\n+__int128 *x0;\n+void __int128 *x1; /* { dg-error \"\" } */\n+char __int128 *x2; /* { dg-error \"\" } */\n+short __int128 *x3; /* { dg-error \"\" } */\n+int __int128 *x4; /* { dg-error \"\" } */\n+__int128 void *x5; /* { dg-error \"\" } */\n+__int128 char *x6; /* { dg-error \"\" } */\n+__int128 short *x7; /* { dg-error \"\" } */\n+__int128 int *x8; /* { dg-error \"\" } */\n+__int128 __int128 *x9; /* { dg-error \"\" } */\n+__int128 long *x10; /* { dg-error \"\" } */\n+__int128 float *x11; /* { dg-error \"\" } */\n+__int128 double *x12; /* { dg-error \"\" } */\n+__int128 signed *x13;\n+__int128 unsigned *x14;\n+__int128 _Bool *x15; /* { dg-error \"\" } */\n+__int128 _Complex *x16;\n+long __int128 *x17; /* { dg-error \"\" } */\n+float __int128 *x18; /* { dg-error \"\" } */\n+double __int128 *x19; /* { dg-error \"\" } */\n+signed __int128 *x20;\n+unsigned __int128 *x21;\n+_Bool __int128 *x22; /* { dg-error \"\" } */\n+_Complex __int128 *x23;\n+type __int128 *x24; /* { dg-error \"\" } */\n+char signed __int128 *x25; /* { dg-error \"\" } */\n+char unsigned __int128 *x26; /* { dg-error \"\" } */\n+char _Complex __int128 *x27; /* { dg-error \"\" } */\n+short int __int128 *x28; /* { dg-error \"\" } */\n+short signed __int128 *x29; /* { dg-error \"\" } */\n+short unsigned __int128 *x30; /* { dg-error \"\" } */\n+short _Complex __int128 *x31; /* { dg-error \"\" } */\n+int short __int128 *x32; /* { dg-error \"\" } */\n+int long __int128 *x33; /* { dg-error \"\" } */\n+int signed __int128 *x34; /* { dg-error \"\" } */\n+int unsigned __int128 *x35; /* { dg-error \"\" } */\n+int _Complex __int128 *x36; /* { dg-error \"\" } */\n+__int128 signed void *x37; /* { dg-error \"\" } */\n+__int128 signed char *x38; /* { dg-error \"\"  } */\n+__int128 signed short *x39; /* { dg-error \"\" } */\n+__int128 signed int *x40; /* { dg-error \"\" } */\n+__int128 signed __int128 *x41; /* { dg-error \"\" } */\n+__int128 signed long *x42; /* { dg-error \"\" } */\n+__int128 signed float *x43; /* { dg-error \"\" } */\n+__int128 signed double *x44; /* { dg-error \"\" } */\n+__int128 signed signed *x45; /* { dg-error \"\" } */\n+__int128 signed unsigned *x46; /* { dg-error \"\" } */\n+__int128 signed _Bool *x47; /* { dg-error \"\" } */\n+__int128 signed _Complex *x48;\n+__int128 unsigned void *x49; /* { dg-error \"\" } */\n+__int128 unsigned char *x50; /* { dg-error \"\" } */\n+__int128 unsigned short *x51; /* { dg-error \"\" } */\n+__int128 unsigned int *x52; /* { dg-error \"\" } */\n+__int128 unsigned __int128 *x53; /* { dg-error \"\" } */\n+__int128 unsigned long *x54; /* { dg-error \"\" } */\n+__int128 unsigned float *x55; /* { dg-error \"\" } */\n+__int128 unsigned double *x56; /* { dg-error \"\" } */\n+__int128 unsigned signed *x57; /* { dg-error \"\" } */\n+__int128 unsigned unsigned *x58; /* { dg-error \"\" } */\n+__int128 unsigned _Bool *x59; /* { dg-error \"\" } */\n+__int128 unsigned _Complex *x60;\n+__int128 _Complex void *x61; /* { dg-error \"\" } */\n+__int128 _Complex char *x62; /* { dg-error \"\" } */\n+__int128 _Complex short *x63; /* { dg-error \"\" } */\n+__int128 _Complex int *x64; /* { dg-error \"\" } */\n+__int128 _Complex __int128 *x65; /* { dg-error \"\" } */\n+__int128 _Complex long *x66; /* { dg-error \"\" } */\n+__int128 _Complex float *x67; /* { dg-error \"\" } */\n+__int128 _Complex double *x68; /* { dg-error \"\" } */\n+__int128 _Complex signed *x69;\n+__int128 _Complex unsigned *x70;\n+__int128 _Complex _Bool *x71; /* { dg-error \"\" } */\n+__int128 _Complex _Complex *x72; /* { dg-error \"\" } */\n+long int __int128 *x73; /* { dg-error \"\" } */\n+long long __int128 *x74; /* { dg-error \"\" } */\n+long double __int128 *x75; /* { dg-error \"\" } */\n+long signed __int128 *x76; /* { dg-error \"\" } */\n+long unsigned __int128 *x77; /* { dg-error \"\" } */\n+long _Complex __int128 *x78; /* { dg-error \"\" } */\n+float _Complex __int128 *x79; /* { dg-error \"\" } */\n+double long __int128 *x80; /* { dg-error \"\" } */\n+double _Complex __int128 *x81; /* { dg-error \"\" } */\n+signed char __int128 *x82; /* { dg-error \"\" } */\n+signed short __int128 *x83; /* { dg-error \"\" } */\n+signed int __int128 *x84; /* { dg-error \"\" } */\n+signed __int128 void *x85; /* { dg-error \"\" } */\n+signed __int128 char *x86; /* { dg-error \"\" } */\n+signed __int128 short *x87; /* { dg-error \"\" } */\n+signed __int128 int *x88; /* { dg-error \"\" } */\n+signed __int128 __int128 *x89; /* { dg-error \"\" } */\n+signed __int128 long *x90; /* { dg-error \"\" } */\n+signed __int128 float *x91; /* { dg-error \"\" } */\n+signed __int128 double *x92; /* { dg-error \"\" } */\n+signed __int128 signed *x93; /* { dg-error \"\" } */\n+signed __int128 unsigned *x94; /* { dg-error \"\" } */\n+signed __int128 _Bool *x95; /* { dg-error \"\" } */\n+signed __int128 _Complex *x96;\n+signed long __int128 *x97; /* { dg-error \"\" } */\n+signed _Complex __int128 *x98;\n+unsigned char __int128 *x99; /* { dg-error \"\" } */\n+unsigned short __int128 *x100; /* { dg-error \"\" } */\n+unsigned int __int128 *x101; /* { dg-error \"\" } */\n+unsigned __int128 void *x102; /* { dg-error \"\" } */\n+unsigned __int128 char *x103; /* { dg-error \"\" } */\n+unsigned __int128 short *x104; /* { dg-error \"\" } */\n+unsigned __int128 int *x105; /* { dg-error \"\" } */\n+unsigned __int128 __int128 *x106; /* { dg-error \"\" } */\n+unsigned __int128 long *x107; /* { dg-error \"\" } */\n+unsigned __int128 float *x108; /* { dg-error \"\" } */\n+unsigned __int128 double *x109; /* { dg-error \"\" } */\n+unsigned __int128 signed *x110; /* { dg-error \"\" } */\n+unsigned __int128 unsigned *x111; /* { dg-error \"\" } */\n+unsigned __int128 _Bool *x112; /* { dg-error \"\" } */\n+unsigned __int128 _Complex *x113;\n+unsigned long __int128 *x114; /* { dg-error \"\" } */\n+unsigned _Complex __int128 *x115;\n+_Complex char __int128 *x116; /* { dg-error \"\" } */\n+_Complex short __int128 *x117; /* { dg-error \"\" } */\n+_Complex int __int128 *x118; /* { dg-error \"\" } */\n+_Complex __int128 void *x119; /* { dg-error \"\" } */\n+_Complex __int128 char *x120; /* { dg-error \"\" } */\n+_Complex __int128 short *x121; /* { dg-error \"\" } */\n+_Complex __int128 int *x122; /* { dg-error \"\" } */\n+_Complex __int128 __int128 *x123; /* { dg-error \"\" } */\n+_Complex __int128 long *x124; /* { dg-error \"\" } */\n+_Complex __int128 float *x125; /* { dg-error \"\" } */\n+_Complex __int128 double *x126; /* { dg-error \"\" } */\n+_Complex __int128 signed *x127;\n+_Complex __int128 unsigned *x128;\n+_Complex __int128 _Bool *x129; /* { dg-error \"\" } */\n+_Complex __int128 _Complex *x130; /* { dg-error \"\" } */\n+_Complex long __int128 *x131; /* { dg-error \"\" } */\n+_Complex float __int128 *x132; /* { dg-error \"\" } */\n+_Complex double __int128 *x133; /* { dg-error \"\" } */\n+_Complex signed __int128 *x134;\n+_Complex unsigned __int128 *x135;\n+char signed _Complex __int128 *x136; /* { dg-error \"\" } */\n+char unsigned _Complex __int128 *x137; /* { dg-error \"\" } */\n+char _Complex signed __int128 *x138; /* { dg-error \"\" } */\n+char _Complex unsigned __int128 *x139; /* { dg-error \"\" } */\n+short int signed __int128 *x140; /* { dg-error \"\" } */\n+short int unsigned __int128 *x141; /* { dg-error \"\" } */\n+short int _Complex __int128 *x142; /* { dg-error \"\" } */\n+short signed int __int128 *x143; /* { dg-error \"\" } */\n+short signed _Complex __int128 *x144; /* { dg-error \"\" } */\n+short unsigned int __int128 *x145; /* { dg-error \"\" } */\n+short unsigned _Complex __int128 *x146; /* { dg-error \"\" } */\n+short _Complex int __int128 *x147; /* { dg-error \"\" } */\n+short _Complex signed __int128 *x148; /* { dg-error \"\" } */\n+short _Complex unsigned __int128 *x149; /* { dg-error \"\" } */\n+int short signed __int128 *x150; /* { dg-error \"\" } */\n+int short unsigned __int128 *x151; /* { dg-error \"\" } */\n+int short _Complex __int128 *x152; /* { dg-error \"\" } */\n+int long long __int128 *x153; /* { dg-error \"\" } */\n+int long signed __int128 *x154; /* { dg-error \"\" } */\n+int long unsigned __int128 *x155; /* { dg-error \"\" } */\n+int long _Complex __int128 *x156; /* { dg-error \"\" } */\n+int signed short __int128 *x157; /* { dg-error \"\" } */\n+int signed long __int128 *x158; /* { dg-error \"\" } */\n+int signed _Complex __int128 *x159; /* { dg-error \"\" } */\n+int unsigned short __int128 *x160; /* { dg-error \"\" } */\n+int unsigned long __int128 *x161; /* { dg-error \"\" } */\n+int unsigned _Complex __int128 *x162; /* { dg-error \"\" } */\n+int _Complex short __int128 *x163; /* { dg-error \"\" } */\n+int _Complex long __int128 *x164; /* { dg-error \"\" } */\n+int _Complex signed __int128 *x165; /* { dg-error \"\" } */\n+int _Complex unsigned __int128 *x166; /* { dg-error \"\" } */\n+__int128 signed _Complex void *x167; /* { dg-error \"\" } */\n+__int128 signed _Complex char *x168; /* { dg-error \"\" } */\n+__int128 signed _Complex short *x169; /* { dg-error \"\" } */\n+__int128 signed _Complex int *x170; /* { dg-error \"\" } */\n+__int128 signed _Complex __int128 *x171; /* { dg-error \"\" } */\n+__int128 signed _Complex long *x172; /* { dg-error \"\" } */\n+__int128 signed _Complex float *x173; /* { dg-error \"\" } */\n+__int128 signed _Complex double *x174; /* { dg-error \"\" } */\n+__int128 signed _Complex signed *x175; /* { dg-error \"\" } */\n+__int128 signed _Complex unsigned *x176; /* { dg-error \"\" } */\n+__int128 signed _Complex _Bool *x177; /* { dg-error \"\" } */\n+__int128 signed _Complex _Complex *x178; /* { dg-error \"\" } */\n+__int128 unsigned _Complex void *x179; /* { dg-error \"\" } */\n+__int128 unsigned _Complex char *x180; /* { dg-error \"\" } */\n+__int128 unsigned _Complex short *x181; /* { dg-error \"\" } */\n+__int128 unsigned _Complex int *x182; /* { dg-error \"\" } */\n+__int128 unsigned _Complex __int128 *x183; /* { dg-error \"\" } */\n+__int128 unsigned _Complex long *x184; /* { dg-error \"\" } */\n+__int128 unsigned _Complex float *x185; /* { dg-error \"\" } */\n+__int128 unsigned _Complex double *x186; /* { dg-error \"\" } */\n+__int128 unsigned _Complex signed *x187; /* { dg-error \"\" } */\n+__int128 unsigned _Complex unsigned *x188; /* { dg-error \"\" } */\n+__int128 unsigned _Complex _Bool *x189; /* { dg-error \"\" } */\n+__int128 unsigned _Complex _Complex *x190; /* { dg-error \"\" } */\n+__int128 _Complex signed void *x191; /* { dg-error \"\" } */\n+__int128 _Complex signed char *x192; /* { dg-error \"\" } */\n+__int128 _Complex signed short *x193; /* { dg-error \"\" } */\n+__int128 _Complex signed int *x194; /* { dg-error \"\" } */\n+__int128 _Complex signed __int128 *x195; /* { dg-error \"\" } */\n+__int128 _Complex signed long *x196; /* { dg-error \"\" } */\n+__int128 _Complex signed float *x197; /* { dg-error \"\" } */\n+__int128 _Complex signed double *x198; /* { dg-error \"\" } */\n+__int128 _Complex signed signed *x199; /* { dg-error \"\" } */\n+__int128 _Complex signed unsigned *x200; /* { dg-error \"\" } */\n+__int128 _Complex signed _Bool *x201; /* { dg-error \"\" } */\n+__int128 _Complex signed _Complex *x202; /* { dg-error \"\" } */\n+__int128 _Complex unsigned void *x203; /* { dg-error \"\" } */\n+__int128 _Complex unsigned char *x204; /* { dg-error \"\" } */\n+__int128 _Complex unsigned short *x205; /* { dg-error \"\" } */\n+__int128 _Complex unsigned int *x206; /* { dg-error \"\" } */\n+__int128 _Complex unsigned __int128 *x207; /* { dg-error \"\" } */\n+__int128 _Complex unsigned long *x208; /* { dg-error \"\" } */\n+__int128 _Complex unsigned float *x209; /* { dg-error \"\" } */\n+__int128 _Complex unsigned double *x210; /* { dg-error \"\" } */\n+__int128 _Complex unsigned signed *x211; /* { dg-error \"\" } */\n+__int128 _Complex unsigned unsigned *x212; /* { dg-error \"\" } */\n+__int128 _Complex unsigned _Bool *x213; /* { dg-error \"\" } */\n+__int128 _Complex unsigned _Complex *x214; /* { dg-error \"\" } */\n+long int long __int128 *x215; /* { dg-error \"\" } */\n+long int signed __int128 *x216; /* { dg-error \"\" } */\n+long int unsigned __int128 *x217; /* { dg-error \"\" } */\n+long int _Complex __int128 *x218; /* { dg-error \"\" } */\n+long long int __int128 *x219; /* { dg-error \"\" } */\n+long long signed __int128 *x220; /* { dg-error \"\" } */\n+long long unsigned __int128 *x221; /* { dg-error \"\" } */\n+long long _Complex __int128 *x222; /* { dg-error \"\" } */\n+long double _Complex __int128 *x223; /* { dg-error \"\" } */\n+long signed int __int128 *x224; /* { dg-error \"\" } */\n+long signed long __int128 *x225; /* { dg-error \"\" } */\n+long signed _Complex __int128 *x226; /* { dg-error \"\" } */\n+long unsigned int __int128 *x227; /* { dg-error \"\" } */\n+long unsigned long __int128 *x228; /* { dg-error \"\" } */\n+long unsigned _Complex __int128 *x229; /* { dg-error \"\" } */\n+long _Complex int __int128 *x230; /* { dg-error \"\" } */\n+long _Complex long __int128 *x231; /* { dg-error \"\" } */\n+long _Complex double __int128 *x232; /* { dg-error \"\" } */\n+long _Complex signed __int128 *x233; /* { dg-error \"\" } */\n+long _Complex unsigned __int128 *x234; /* { dg-error \"\" } */\n+double long _Complex __int128 *x235; /* { dg-error \"\" } */\n+double _Complex long __int128 *x236; /* { dg-error \"\" } */\n+signed char _Complex __int128 *x237; /* { dg-error \"\" } */\n+signed short int __int128 *x238; /* { dg-error \"\" } */\n+signed short _Complex __int128 *x239; /* { dg-error \"\" } */\n+signed int short __int128 *x240; /* { dg-error \"\" } */\n+signed int long __int128 *x241; /* { dg-error \"\" } */\n+signed int _Complex __int128 *x242; /* { dg-error \"\" } */\n+signed __int128 _Complex void *x243; /* { dg-error \"\" } */\n+signed __int128 _Complex char *x244; /* { dg-error \"\" } */\n+signed __int128 _Complex short *x245; /* { dg-error \"\" } */\n+signed __int128 _Complex int *x246; /* { dg-error \"\" } */\n+signed __int128 _Complex __int128 *x247; /* { dg-error \"\" } */\n+signed __int128 _Complex long *x248; /* { dg-error \"\" } */\n+signed __int128 _Complex float *x249; /* { dg-error \"\" } */\n+signed __int128 _Complex double *x250; /* { dg-error \"\" } */\n+signed __int128 _Complex signed *x251; /* { dg-error \"\" } */\n+signed __int128 _Complex unsigned *x252; /* { dg-error \"\" } */\n+signed __int128 _Complex _Bool *x253; /* { dg-error \"\" } */\n+signed __int128 _Complex _Complex *x254; /* { dg-error \"\" } */\n+signed long int __int128 *x255; /* { dg-error \"\" } */\n+signed long long __int128 *x256; /* { dg-error \"\" } */\n+signed long _Complex __int128 *x257; /* { dg-error \"\" } */\n+signed _Complex char __int128 *x258; /* { dg-error \"\" } */\n+signed _Complex short __int128 *x259; /* { dg-error \"\" } */\n+signed _Complex int __int128 *x260; /* { dg-error \"\" } */\n+signed _Complex __int128 void *x261; /* { dg-error \"\" } */\n+signed _Complex __int128 char *x262; /* { dg-error \"\" } */\n+signed _Complex __int128 short *x263; /* { dg-error \"\" } */\n+signed _Complex __int128 int *x264; /* { dg-error \"\" } */\n+signed _Complex __int128 __int128 *x265; /* { dg-error \"\" } */\n+signed _Complex __int128 long *x266; /* { dg-error \"\" } */\n+signed _Complex __int128 float *x267; /* { dg-error \"\" } */\n+signed _Complex __int128 double *x268; /* { dg-error \"\" } */\n+signed _Complex __int128 signed *x269; /* { dg-error \"\" } */\n+signed _Complex __int128 unsigned *x270; /* { dg-error \"\" } */\n+signed _Complex __int128 _Bool *x271; /* { dg-error \"\" } */\n+signed _Complex __int128 _Complex *x272; /* { dg-error \"\" } */\n+signed _Complex long __int128 *x273; /* { dg-error \"\" } */\n+unsigned char _Complex __int128 *x274; /* { dg-error \"\" } */\n+unsigned short int __int128 *x275; /* { dg-error \"\" } */\n+unsigned short _Complex __int128 *x276; /* { dg-error \"\" } */\n+unsigned int short __int128 *x277; /* { dg-error \"\" } */\n+unsigned int long __int128 *x278; /* { dg-error \"\" } */\n+unsigned int _Complex __int128 *x279; /* { dg-error \"\" } */\n+unsigned __int128 _Complex void *x280; /* { dg-error \"\" } */\n+unsigned __int128 _Complex char *x281; /* { dg-error \"\" } */\n+unsigned __int128 _Complex short *x282; /* { dg-error \"\" } */\n+unsigned __int128 _Complex int *x283; /* { dg-error \"\" } */\n+unsigned __int128 _Complex __int128 *x284; /* { dg-error \"\" } */\n+unsigned __int128 _Complex long *x285; /* { dg-error \"\" } */\n+unsigned __int128 _Complex float *x286; /* { dg-error \"\" } */\n+unsigned __int128 _Complex double *x287; /* { dg-error \"\" } */\n+unsigned __int128 _Complex signed *x288; /* { dg-error \"\" } */\n+unsigned __int128 _Complex unsigned *x289; /* { dg-error \"\" } */\n+unsigned __int128 _Complex _Bool *x290; /* { dg-error \"\" } */\n+unsigned __int128 _Complex _Complex *x291; /* { dg-error \"\" } */\n+unsigned long int __int128 *x292; /* { dg-error \"\" } */\n+unsigned long long __int128 *x293; /* { dg-error \"\" } */\n+unsigned long _Complex __int128 *x294; /* { dg-error \"\" } */\n+unsigned _Complex char __int128 *x295; /* { dg-error \"\" } */\n+unsigned _Complex short __int128 *x296; /* { dg-error \"\" } */\n+unsigned _Complex int __int128 *x297; /* { dg-error \"\" } */\n+unsigned _Complex __int128 void *x298; /* { dg-error \"\" } */\n+unsigned _Complex __int128 char *x299; /* { dg-error \"\" } */\n+unsigned _Complex __int128 short *x300; /* { dg-error \"\" } */\n+unsigned _Complex __int128 int *x301; /* { dg-error \"\" } */\n+unsigned _Complex __int128 __int128 *x302; /* { dg-error \"\" } */\n+unsigned _Complex __int128 long *x303; /* { dg-error \"\" } */\n+unsigned _Complex __int128 float *x304; /* { dg-error \"\" } */\n+unsigned _Complex __int128 double *x305; /* { dg-error \"\" } */\n+unsigned _Complex __int128 signed *x306; /* { dg-error \"\" } */\n+unsigned _Complex __int128 unsigned *x307; /* { dg-error \"\" } */\n+unsigned _Complex __int128 _Bool *x308; /* { dg-error \"\" } */\n+unsigned _Complex __int128 _Complex *x309; /* { dg-error \"\" } */\n+unsigned _Complex long __int128 *x310; /* { dg-error \"\" } */\n+_Complex char signed __int128 *x311; /* { dg-error \"\" } */\n+_Complex char unsigned __int128 *x312; /* { dg-error \"\" } */\n+_Complex short int __int128 *x313; /* { dg-error \"\" } */\n+_Complex short signed __int128 *x314; /* { dg-error \"\" } */\n+_Complex short unsigned __int128 *x315; /* { dg-error \"\" } */\n+_Complex int short __int128 *x316; /* { dg-error \"\" } */\n+_Complex int long __int128 *x317; /* { dg-error \"\" } */\n+_Complex int signed __int128 *x318; /* { dg-error \"\" } */\n+_Complex int unsigned __int128 *x319; /* { dg-error \"\" } */\n+_Complex __int128 signed void *x320; /* { dg-error \"\" } */\n+_Complex __int128 signed char *x321; /* { dg-error \"\" } */\n+_Complex __int128 signed short *x322; /* { dg-error \"\" } */\n+_Complex __int128 signed int *x323; /* { dg-error \"\" } */\n+_Complex __int128 signed __int128 *x324; /* { dg-error \"\" } */\n+_Complex __int128 signed long *x325; /* { dg-error \"\" } */\n+_Complex __int128 signed float *x326; /* { dg-error \"\" } */\n+_Complex __int128 signed double *x327; /* { dg-error \"\" } */\n+_Complex __int128 signed signed *x328; /* { dg-error \"\" } */\n+_Complex __int128 signed unsigned *x329; /* { dg-error \"\" } */\n+_Complex __int128 signed _Bool *x330; /* { dg-error \"\" } */\n+_Complex __int128 signed _Complex *x331; /* { dg-error \"\" } */\n+_Complex __int128 unsigned void *x332; /* { dg-error \"\" } */\n+_Complex __int128 unsigned char *x333; /* { dg-error \"\" } */\n+_Complex __int128 unsigned short *x334; /* { dg-error \"\" } */\n+_Complex __int128 unsigned int *x335; /* { dg-error \"\" } */\n+_Complex __int128 unsigned __int128 *x336; /* { dg-error \"\" } */\n+_Complex __int128 unsigned long *x337; /* { dg-error \"\" } */\n+_Complex __int128 unsigned float *x338; /* { dg-error \"\" } */\n+_Complex __int128 unsigned double *x339; /* { dg-error \"\" } */\n+_Complex __int128 unsigned signed *x340; /* { dg-error \"\" } */\n+_Complex __int128 unsigned unsigned *x341; /* { dg-error \"\" } */\n+_Complex __int128 unsigned _Bool *x342; /* { dg-error \"\" } */\n+_Complex __int128 unsigned _Complex *x343; /* { dg-error \"\" } */\n+_Complex long int __int128 *x344; /* { dg-error \"\" } */\n+_Complex long long __int128 *x345; /* { dg-error \"\" } */\n+_Complex long double __int128 *x346; /* { dg-error \"\" } */\n+_Complex long signed __int128 *x347; /* { dg-error \"\" } */\n+_Complex long unsigned __int128 *x348; /* { dg-error \"\" } */\n+_Complex double long __int128 *x349; /* { dg-error \"\" } */\n+_Complex signed char __int128 *x350; /* { dg-error \"\" } */\n+_Complex signed short __int128 *x351; /* { dg-error \"\" } */\n+_Complex signed int __int128 *x352; /* { dg-error \"\" } */\n+_Complex signed __int128 void *x353; /* { dg-error \"\" } */\n+_Complex signed __int128 char *x354; /* { dg-error \"\" } */\n+_Complex signed __int128 short *x355; /* { dg-error \"\" } */\n+_Complex signed __int128 int *x356; /* { dg-error \"\" } */\n+_Complex signed __int128 __int128 *x357; /* { dg-error \"\" } */\n+_Complex signed __int128 long *x358; /* { dg-error \"\" } */\n+_Complex signed __int128 float *x359; /* { dg-error \"\" } */\n+_Complex signed __int128 double *x360; /* { dg-error \"\" } */\n+_Complex signed __int128 signed *x361; /* { dg-error \"\" } */\n+_Complex signed __int128 unsigned *x362; /* { dg-error \"\" } */\n+_Complex signed __int128 _Bool *x363; /* { dg-error \"\" } */\n+_Complex signed __int128 _Complex *x364; /* { dg-error \"\" } */\n+_Complex signed long __int128 *x365; /* { dg-error \"\" } */\n+_Complex unsigned char __int128 *x366; /* { dg-error \"\" } */\n+_Complex unsigned short __int128 *x367; /* { dg-error \"\" } */\n+_Complex unsigned int __int128 *x368; /* { dg-error \"\" } */\n+_Complex unsigned __int128 void *x369; /* { dg-error \"\" } */\n+_Complex unsigned __int128 char *x370; /* { dg-error \"\" } */\n+_Complex unsigned __int128 short *x371; /* { dg-error \"\" } */\n+_Complex unsigned __int128 int *x372; /* { dg-error \"\" } */\n+_Complex unsigned __int128 __int128 *x373; /* { dg-error \"\" } */\n+_Complex unsigned __int128 long *x374; /* { dg-error \"\" } */\n+_Complex unsigned __int128 float *x375; /* { dg-error \"\" } */\n+_Complex unsigned __int128 double *x376; /* { dg-error \"\" } */\n+_Complex unsigned __int128 signed *x377; /* { dg-error \"\" } */\n+_Complex unsigned __int128 unsigned *x378; /* { dg-error \"\" } */\n+_Complex unsigned __int128 _Bool *x379; /* { dg-error \"\" } */\n+_Complex unsigned __int128 _Complex *x380; /* { dg-error \"\" } */\n+_Complex unsigned long __int128 *x381; /* { dg-error \"\" } */\n+short int signed _Complex __int128 *x382; /* { dg-error \"\" } */\n+short int unsigned _Complex __int128 *x383; /* { dg-error \"\" } */\n+short int _Complex signed __int128 *x384; /* { dg-error \"\" } */\n+short int _Complex unsigned __int128 *x385; /* { dg-error \"\" } */\n+short signed int _Complex __int128 *x386; /* { dg-error \"\" } */\n+short signed _Complex int __int128 *x387; /* { dg-error \"\" } */\n+short unsigned int _Complex __int128 *x388; /* { dg-error \"\" } */\n+short unsigned _Complex int __int128 *x389; /* { dg-error \"\" } */\n+short _Complex int signed __int128 *x390; /* { dg-error \"\" } */\n+short _Complex int unsigned __int128 *x391; /* { dg-error \"\" } */\n+short _Complex signed int __int128 *x392; /* { dg-error \"\" } */\n+short _Complex unsigned int __int128 *x393; /* { dg-error \"\" } */\n+int short signed _Complex __int128 *x394; /* { dg-error \"\" } */\n+int short unsigned _Complex __int128 *x395; /* { dg-error \"\" } */\n+int short _Complex signed __int128 *x396; /* { dg-error \"\" } */\n+int short _Complex unsigned __int128 *x397; /* { dg-error \"\" } */\n+int long long signed __int128 *x398; /* { dg-error \"\" } */\n+int long long unsigned __int128 *x399; /* { dg-error \"\" } */\n+int long long _Complex __int128 *x400; /* { dg-error \"\" } */\n+int long signed long __int128 *x401; /* { dg-error \"\" } */\n+int long signed _Complex __int128 *x402; /* { dg-error \"\" } */\n+int long unsigned long __int128 *x403; /* { dg-error \"\" } */\n+int long unsigned _Complex __int128 *x404; /* { dg-error \"\" } */\n+int long _Complex long __int128 *x405; /* { dg-error \"\" } */\n+int long _Complex signed __int128 *x406; /* { dg-error \"\" } */\n+int long _Complex unsigned __int128 *x407; /* { dg-error \"\" } */\n+int signed short _Complex __int128 *x408; /* { dg-error \"\" } */\n+int signed long long __int128 *x409; /* { dg-error \"\" } */\n+int signed long _Complex __int128 *x410; /* { dg-error \"\" } */\n+int signed _Complex short __int128 *x411; /* { dg-error \"\" } */\n+int signed _Complex long __int128 *x412; /* { dg-error \"\" } */\n+int unsigned short _Complex __int128 *x413; /* { dg-error \"\" } */\n+int unsigned long long __int128 *x414; /* { dg-error \"\" } */\n+int unsigned long _Complex __int128 *x415; /* { dg-error \"\" } */\n+int unsigned _Complex short __int128 *x416; /* { dg-error \"\" } */\n+int unsigned _Complex long __int128 *x417; /* { dg-error \"\" } */\n+int _Complex short signed __int128 *x418; /* { dg-error \"\" } */\n+int _Complex short unsigned __int128 *x419; /* { dg-error \"\" } */\n+int _Complex long long __int128 *x420; /* { dg-error \"\" } */\n+int _Complex long signed __int128 *x421; /* { dg-error \"\" } */\n+int _Complex long unsigned __int128 *x422; /* { dg-error \"\" } */\n+int _Complex signed short __int128 *x423; /* { dg-error \"\" } */\n+int _Complex signed long __int128 *x424; /* { dg-error \"\" } */\n+int _Complex unsigned short __int128 *x425; /* { dg-error \"\" } */\n+int _Complex unsigned long __int128 *x426; /* { dg-error \"\" } */\n+long int long signed __int128 *x427; /* { dg-error \"\" } */\n+long int long unsigned __int128 *x428; /* { dg-error \"\" } */\n+long int long _Complex __int128 *x429; /* { dg-error \"\" } */\n+long int signed long __int128 *x430; /* { dg-error \"\" } */\n+long int signed _Complex __int128 *x431; /* { dg-error \"\" } */\n+long int unsigned long __int128 *x432; /* { dg-error \"\" } */\n+long int unsigned _Complex __int128 *x433; /* { dg-error \"\" } */\n+long int _Complex long __int128 *x434; /* { dg-error \"\" } */\n+long int _Complex signed __int128 *x435; /* { dg-error \"\" } */\n+long int _Complex unsigned __int128 *x436; /* { dg-error \"\" } */\n+long long int signed __int128 *x437; /* { dg-error \"\" } */\n+long long int unsigned __int128 *x438; /* { dg-error \"\" } */\n+long long int _Complex __int128 *x439; /* { dg-error \"\" } */\n+long long signed int __int128 *x440; /* { dg-error \"\" } */\n+long long signed _Complex __int128 *x441; /* { dg-error \"\" } */\n+long long unsigned int __int128 *x442; /* { dg-error \"\" } */\n+long long unsigned _Complex __int128 *x443; /* { dg-error \"\" } */\n+long long _Complex int __int128 *x444; /* { dg-error \"\" } */\n+long long _Complex signed __int128 *x445; /* { dg-error \"\" } */\n+long long _Complex unsigned __int128 *x446; /* { dg-error \"\" } */\n+long signed int long __int128 *x447; /* { dg-error \"\" } */\n+long signed int _Complex __int128 *x448; /* { dg-error \"\" } */\n+long signed long int __int128 *x449; /* { dg-error \"\" } */\n+long signed long _Complex __int128 *x450; /* { dg-error \"\" } */\n+long signed _Complex int __int128 *x451; /* { dg-error \"\" } */\n+long signed _Complex long __int128 *x452; /* { dg-error \"\" } */\n+long unsigned int long __int128 *x453; /* { dg-error \"\" } */\n+long unsigned int _Complex __int128 *x454; /* { dg-error \"\" } */\n+long unsigned long int __int128 *x455; /* { dg-error \"\" } */\n+long unsigned long _Complex __int128 *x456; /* { dg-error \"\" } */\n+long unsigned _Complex int __int128 *x457; /* { dg-error \"\" } */\n+long unsigned _Complex long __int128 *x458; /* { dg-error \"\" } */\n+long _Complex int long __int128 *x459; /* { dg-error \"\" } */\n+long _Complex int signed __int128 *x460; /* { dg-error \"\" } */\n+long _Complex int unsigned __int128 *x461; /* { dg-error \"\" } */\n+long _Complex long int __int128 *x462; /* { dg-error \"\" } */\n+long _Complex long signed __int128 *x463; /* { dg-error \"\" } */\n+long _Complex long unsigned __int128 *x464; /* { dg-error \"\" } */\n+long _Complex signed int __int128 *x465; /* { dg-error \"\" } */\n+long _Complex signed long __int128 *x466; /* { dg-error \"\" } */\n+long _Complex unsigned int __int128 *x467; /* { dg-error \"\" } */\n+long _Complex unsigned long __int128 *x468; /* { dg-error \"\" } */\n+signed short int _Complex __int128 *x469; /* { dg-error \"\" } */\n+signed short _Complex int __int128 *x470; /* { dg-error \"\" } */\n+signed int short _Complex __int128 *x471; /* { dg-error \"\" } */\n+signed int long long __int128 *x472; /* { dg-error \"\" } */\n+signed int long _Complex __int128 *x473; /* { dg-error \"\" } */\n+signed int _Complex short __int128 *x474; /* { dg-error \"\" } */\n+signed int _Complex long __int128 *x475; /* { dg-error \"\" } */\n+signed long int long __int128 *x476; /* { dg-error \"\" } */\n+signed long int _Complex __int128 *x477; /* { dg-error \"\" } */\n+signed long long int __int128 *x478; /* { dg-error \"\" } */\n+signed long long _Complex __int128 *x479; /* { dg-error \"\" } */\n+signed long _Complex int __int128 *x480; /* { dg-error \"\" } */\n+signed long _Complex long __int128 *x481; /* { dg-error \"\" } */\n+signed _Complex short int __int128 *x482; /* { dg-error \"\" } */\n+signed _Complex int short __int128 *x483; /* { dg-error \"\" } */\n+signed _Complex int long __int128 *x484; /* { dg-error \"\" } */\n+signed _Complex long int __int128 *x485; /* { dg-error \"\" } */\n+signed _Complex long long __int128 *x486; /* { dg-error \"\" } */\n+unsigned short int _Complex __int128 *x487; /* { dg-error \"\" } */\n+unsigned short _Complex int __int128 *x488; /* { dg-error \"\" } */\n+unsigned int short _Complex __int128 *x489; /* { dg-error \"\" } */\n+unsigned int long long __int128 *x490; /* { dg-error \"\" } */\n+unsigned int long _Complex __int128 *x491; /* { dg-error \"\" } */\n+unsigned int _Complex short __int128 *x492; /* { dg-error \"\" } */\n+unsigned int _Complex long __int128 *x493; /* { dg-error \"\" } */\n+unsigned long int long __int128 *x494; /* { dg-error \"\" } */\n+unsigned long int _Complex __int128 *x495; /* { dg-error \"\" } */\n+unsigned long long int __int128 *x496; /* { dg-error \"\" } */\n+unsigned long long _Complex __int128 *x497; /* { dg-error \"\" } */\n+unsigned long _Complex int __int128 *x498; /* { dg-error \"\" } */\n+unsigned long _Complex long __int128 *x499; /* { dg-error \"\" } */\n+unsigned _Complex short int __int128 *x500; /* { dg-error \"\" } */\n+unsigned _Complex int short __int128 *x501; /* { dg-error \"\" } */\n+unsigned _Complex int long __int128 *x502; /* { dg-error \"\" } */\n+unsigned _Complex long int __int128 *x503; /* { dg-error \"\" } */\n+unsigned _Complex long long __int128 *x504; /* { dg-error \"\" } */\n+_Complex short int signed __int128 *x505; /* { dg-error \"\" } */\n+_Complex short int unsigned __int128 *x506; /* { dg-error \"\" } */\n+_Complex short signed int __int128 *x507; /* { dg-error \"\" } */\n+_Complex short unsigned int __int128 *x508; /* { dg-error \"\" } */\n+_Complex int short signed __int128 *x509; /* { dg-error \"\" } */\n+_Complex int short unsigned __int128 *x510; /* { dg-error \"\" } */\n+_Complex int long long __int128 *x511; /* { dg-error \"\" } */\n+_Complex int long signed __int128 *x512; /* { dg-error \"\" } */\n+_Complex int long unsigned __int128 *x513; /* { dg-error \"\" } */\n+_Complex int signed short __int128 *x514; /* { dg-error \"\" } */\n+_Complex int signed long __int128 *x515; /* { dg-error \"\" } */\n+_Complex int unsigned short __int128 *x516; /* { dg-error \"\" } */\n+_Complex int unsigned long __int128 *x517; /* { dg-error \"\" } */\n+_Complex long int long __int128 *x518; /* { dg-error \"\" } */\n+_Complex long int signed __int128 *x519; /* { dg-error \"\" } */\n+_Complex long int unsigned __int128 *x520; /* { dg-error \"\" } */\n+_Complex long long int __int128 *x521; /* { dg-error \"\" } */\n+_Complex long long signed __int128 *x522; /* { dg-error \"\" } */\n+_Complex long long unsigned __int128 *x523; /* { dg-error \"\" } */\n+_Complex long signed int __int128 *x524; /* { dg-error \"\" } */\n+_Complex long signed long __int128 *x525; /* { dg-error \"\" } */\n+_Complex long unsigned int __int128 *x526; /* { dg-error \"\" } */\n+_Complex long unsigned long __int128 *x527; /* { dg-error \"\" } */\n+_Complex signed short int __int128 *x528; /* { dg-error \"\" } */\n+_Complex signed int short __int128 *x529; /* { dg-error \"\" } */\n+_Complex signed int long __int128 *x530; /* { dg-error \"\" } */\n+_Complex signed long int __int128 *x531; /* { dg-error \"\" } */\n+_Complex signed long long __int128 *x532; /* { dg-error \"\" } */\n+_Complex unsigned short int __int128 *x533; /* { dg-error \"\" } */\n+_Complex unsigned int short __int128 *x534; /* { dg-error \"\" } */\n+_Complex unsigned int long __int128 *x535; /* { dg-error \"\" } */\n+_Complex unsigned long int __int128 *x536; /* { dg-error \"\" } */\n+_Complex unsigned long long __int128 *x537; /* { dg-error \"\" } */\n+int long long signed _Complex __int128 *x538; /* { dg-error \"\" } */\n+int long long unsigned _Complex __int128 *x539; /* { dg-error \"\" } */\n+int long long _Complex signed __int128 *x540; /* { dg-error \"\" } */\n+int long long _Complex unsigned __int128 *x541; /* { dg-error \"\" } */\n+int long signed long _Complex __int128 *x542; /* { dg-error \"\" } */\n+int long signed _Complex long __int128 *x543; /* { dg-error \"\" } */\n+int long unsigned long _Complex __int128 *x544; /* { dg-error \"\" } */\n+int long unsigned _Complex long __int128 *x545; /* { dg-error \"\" } */\n+int long _Complex long signed __int128 *x546; /* { dg-error \"\" } */\n+int long _Complex long unsigned __int128 *x547; /* { dg-error \"\" } */\n+int long _Complex signed long __int128 *x548; /* { dg-error \"\" } */\n+int long _Complex unsigned long __int128 *x549; /* { dg-error \"\" } */\n+int signed long long _Complex __int128 *x550; /* { dg-error \"\" } */\n+int signed long _Complex long __int128 *x551; /* { dg-error \"\" } */\n+int signed _Complex long long __int128 *x552; /* { dg-error \"\" } */\n+int unsigned long long _Complex __int128 *x553; /* { dg-error \"\" } */\n+int unsigned long _Complex long __int128 *x554; /* { dg-error \"\" } */\n+int unsigned _Complex long long __int128 *x555; /* { dg-error \"\" } */\n+int _Complex long long signed __int128 *x556; /* { dg-error \"\" } */\n+int _Complex long long unsigned __int128 *x557; /* { dg-error \"\" } */\n+int _Complex long signed long __int128 *x558; /* { dg-error \"\" } */\n+int _Complex long unsigned long __int128 *x559; /* { dg-error \"\" } */\n+int _Complex signed long long __int128 *x560; /* { dg-error \"\" } */\n+int _Complex unsigned long long __int128 *x561; /* { dg-error \"\" } */\n+long int long signed _Complex __int128 *x562; /* { dg-error \"\" } */\n+long int long unsigned _Complex __int128 *x563; /* { dg-error \"\" } */\n+long int long _Complex signed __int128 *x564; /* { dg-error \"\" } */\n+long int long _Complex unsigned __int128 *x565; /* { dg-error \"\" } */\n+long int signed long _Complex __int128 *x566; /* { dg-error \"\" } */\n+long int signed _Complex long __int128 *x567; /* { dg-error \"\" } */\n+long int unsigned long _Complex __int128 *x568; /* { dg-error \"\" } */\n+long int unsigned _Complex long __int128 *x569; /* { dg-error \"\" } */\n+long int _Complex long signed __int128 *x570; /* { dg-error \"\" } */\n+long int _Complex long unsigned __int128 *x571; /* { dg-error \"\" } */\n+long int _Complex signed long __int128 *x572; /* { dg-error \"\" } */\n+long int _Complex unsigned long __int128 *x573; /* { dg-error \"\" } */\n+long long int signed _Complex __int128 *x574; /* { dg-error \"\" } */\n+long long int unsigned _Complex __int128 *x575; /* { dg-error \"\" } */\n+long long int _Complex signed __int128 *x576; /* { dg-error \"\" } */\n+long long int _Complex unsigned __int128 *x577; /* { dg-error \"\" } */\n+long long signed int _Complex __int128 *x578; /* { dg-error \"\" } */\n+long long signed _Complex int __int128 *x579; /* { dg-error \"\" } */\n+long long unsigned int _Complex __int128 *x580; /* { dg-error \"\" } */\n+long long unsigned _Complex int __int128 *x581; /* { dg-error \"\" } */\n+long long _Complex int signed __int128 *x582; /* { dg-error \"\" } */\n+long long _Complex int unsigned __int128 *x583; /* { dg-error \"\" } */\n+long long _Complex signed int __int128 *x584; /* { dg-error \"\" } */\n+long long _Complex unsigned int __int128 *x585; /* { dg-error \"\" } */\n+long signed int long _Complex __int128 *x586; /* { dg-error \"\" } */\n+long signed int _Complex long __int128 *x587; /* { dg-error \"\" } */\n+long signed long int _Complex __int128 *x588; /* { dg-error \"\" } */\n+long signed long _Complex int __int128 *x589; /* { dg-error \"\" } */\n+long signed _Complex int long __int128 *x590; /* { dg-error \"\" } */\n+long signed _Complex long int __int128 *x591; /* { dg-error \"\" } */\n+long unsigned int long _Complex __int128 *x592; /* { dg-error \"\" } */\n+long unsigned int _Complex long __int128 *x593; /* { dg-error \"\" } */\n+long unsigned long int _Complex __int128 *x594; /* { dg-error \"\" } */\n+long unsigned long _Complex int __int128 *x595; /* { dg-error \"\" } */\n+long unsigned _Complex int long __int128 *x596; /* { dg-error \"\" } */\n+long unsigned _Complex long int __int128 *x597; /* { dg-error \"\" } */\n+long _Complex int long signed __int128 *x598; /* { dg-error \"\" } */\n+long _Complex int long unsigned __int128 *x599; /* { dg-error \"\" } */\n+long _Complex int signed long __int128 *x600; /* { dg-error \"\" } */\n+long _Complex int unsigned long __int128 *x601; /* { dg-error \"\" } */\n+long _Complex long int signed __int128 *x602; /* { dg-error \"\" } */\n+long _Complex long int unsigned __int128 *x603; /* { dg-error \"\" } */\n+long _Complex long signed int __int128 *x604; /* { dg-error \"\" } */\n+long _Complex long unsigned int __int128 *x605; /* { dg-error \"\" } */\n+long _Complex signed int long __int128 *x606; /* { dg-error \"\" } */\n+long _Complex signed long int __int128 *x607; /* { dg-error \"\" } */\n+long _Complex unsigned int long __int128 *x608; /* { dg-error \"\" } */\n+long _Complex unsigned long int __int128 *x609; /* { dg-error \"\" } */\n+signed int long long _Complex __int128 *x610; /* { dg-error \"\" } */\n+signed int long _Complex long __int128 *x611; /* { dg-error \"\" } */\n+signed int _Complex long long __int128 *x612; /* { dg-error \"\" } */\n+signed long int long _Complex __int128 *x613; /* { dg-error \"\" } */\n+signed long int _Complex long __int128 *x614; /* { dg-error \"\" } */\n+signed long long int _Complex __int128 *x615; /* { dg-error \"\" } */\n+signed long long _Complex int __int128 *x616; /* { dg-error \"\" } */\n+signed long _Complex int long __int128 *x617; /* { dg-error \"\" } */\n+signed long _Complex long int __int128 *x618; /* { dg-error \"\" } */\n+signed _Complex int long long __int128 *x619; /* { dg-error \"\" } */\n+signed _Complex long int long __int128 *x620; /* { dg-error \"\" } */\n+signed _Complex long long int __int128 *x621; /* { dg-error \"\" } */\n+unsigned int long long _Complex __int128 *x622; /* { dg-error \"\" } */\n+unsigned int long _Complex long __int128 *x623; /* { dg-error \"\" } */\n+unsigned int _Complex long long __int128 *x624; /* { dg-error \"\" } */\n+unsigned long int long _Complex __int128 *x625; /* { dg-error \"\" } */\n+unsigned long int _Complex long __int128 *x626; /* { dg-error \"\" } */\n+unsigned long long int _Complex __int128 *x627; /* { dg-error \"\" } */\n+unsigned long long _Complex int __int128 *x628; /* { dg-error \"\" } */\n+unsigned long _Complex int long __int128 *x629; /* { dg-error \"\" } */\n+unsigned long _Complex long int __int128 *x630; /* { dg-error \"\" } */\n+unsigned _Complex int long long __int128 *x631; /* { dg-error \"\" } */\n+unsigned _Complex long int long __int128 *x632; /* { dg-error \"\" } */\n+unsigned _Complex long long int __int128 *x633; /* { dg-error \"\" } */\n+_Complex int long long signed __int128 *x634; /* { dg-error \"\" } */\n+_Complex int long long unsigned __int128 *x635; /* { dg-error \"\" } */\n+_Complex int long signed long __int128 *x636; /* { dg-error \"\" } */\n+_Complex int long unsigned long __int128 *x637; /* { dg-error \"\" } */\n+_Complex int signed long long __int128 *x638; /* { dg-error \"\" } */\n+_Complex int unsigned long long __int128 *x639; /* { dg-error \"\" } */\n+_Complex long int long signed __int128 *x640; /* { dg-error \"\" } */\n+_Complex long int long unsigned __int128 *x641; /* { dg-error \"\" } */\n+_Complex long int signed long __int128 *x642; /* { dg-error \"\" } */\n+_Complex long int unsigned long __int128 *x643; /* { dg-error \"\" } */\n+_Complex long long int signed __int128 *x644; /* { dg-error \"\" } */\n+_Complex long long int unsigned __int128 *x645; /* { dg-error \"\" } */\n+_Complex long long signed int __int128 *x646; /* { dg-error \"\" } */\n+_Complex long long unsigned int __int128 *x647; /* { dg-error \"\" } */\n+_Complex long signed int long __int128 *x648; /* { dg-error \"\" } */\n+_Complex long signed long int __int128 *x649; /* { dg-error \"\" } */\n+_Complex long unsigned int long __int128 *x650; /* { dg-error \"\" } */\n+_Complex long unsigned long int __int128 *x651; /* { dg-error \"\" } */\n+_Complex signed int long long __int128 *x652; /* { dg-error \"\" } */\n+_Complex signed long int long __int128 *x653; /* { dg-error \"\" } */\n+_Complex signed long long int __int128 *x654; /* { dg-error \"\" } */\n+_Complex unsigned int long long __int128 *x655; /* { dg-error \"\" } */\n+_Complex unsigned long int long __int128 *x656; /* { dg-error \"\" } */\n+_Complex unsigned long long int __int128 *x657; /* { dg-error \"\" } */"}, {"sha": "4dfa425f6cd97057104099ed6256f44f3dda83aa", "filename": "gcc/testsuite/g++.dg/abi/mangle43.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle43.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile { target int128 } }\n+// { dg-options \"\" }\n+\n+struct S {\n+  S(void) { m_i128 = 0; m_u128 = 0; }\n+  ~S(void) { }\n+  __int128 get1 (void) { return m_i128; }\n+  unsigned __int128 get2 (void) { return m_u128; }\n+  void set1 (__int128 i) { m_i128 = i; }\n+  void set2 (unsigned int i) { m_u128 = 1; }\n+  __int128 m_i128;\n+  unsigned __int128 m_u128;\n+};\n+\n+struct S glb;\n+\n+__int128 fo1 (void) { return glb.get1 (); }\n+unsigned __int128 fo2 (void) { return glb.get2 (); }\n+__int128 fo3 (__int128 i) { __int128 v = fo1 (); glb.set1 (i); return v; }\n+unsigned __int128 fo4 (unsigned __int128 i)\n+{\n+  unsigned __int128 v = fo2 (); glb.set2 (i);\n+  return v;\n+}\n+\n+__int128 fo5 (__int128 i)\n+{\n+  return fo3 (i);\n+}\n+\n+__int128 fo5 (unsigned __int128 i)\n+{\n+  return (__int128) fo4 (i);\n+}\n+\n+\n+// { dg-final { scan-assembler \"\\n_?_Z3fo1v\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z3fo2v\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z3fo3n\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z3fo4o\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z3fo5n\\[: \\t\\n\\]\" } }\n+// { dg-final { scan-assembler \"\\n_?_Z3fo5o\\[: \\t\\n\\]\" } }\n+"}, {"sha": "28e37156f8cd30d0e20e4d50544677db8f0d85c7", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr04.C", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -3,7 +3,11 @@\n \n // Test cast to int\n \n+#define unsigned\n+__extension__ typedef __SIZE_TYPE__ ssize_t;\n+#undef unsigned\n+\n const int n4 = static_cast<const int>(nullptr); // { dg-error \"invalid static_cast \" }\n const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"loses precision\" }\n-const long int n6 = reinterpret_cast<long int>(nullptr);\n-const long int n7 = (long int)nullptr;\n+const ssize_t n6 = reinterpret_cast<ssize_t>(nullptr);\n+const ssize_t n7 = (ssize_t)nullptr;"}, {"sha": "4876e4594e638210f7494e05a711ac47951da4a1", "filename": "gcc/testsuite/g++.dg/init/enum1.C", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fenum1.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1,6 +1,14 @@\n+/* { dg-options \"-Wno-overflow\" } */\n+\n+#ifndef __SIZEOF_INT128__\n+#define UNACCEPT 0xffffffffffffffffLL\n+#else\n+#define UNACCEPT ~((unsigned __int128) 0)\n+#endif\n+\n enum test {\n   acceptable = -1,\n-  unacceptable = 0xffffffffffffffffLL\n+  unacceptable = UNACCEPT\n }; // { dg-error \"\" }\n \n enum test t = acceptable, u = unacceptable;"}, {"sha": "9614fb1253932e6ea934bfea222cdf67cd0525c2", "filename": "gcc/testsuite/g++.dg/other/large-size-array.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1,11 +1,15 @@\n /* { dg-do compile } */\n #include <limits.h>\n \n+#ifdef _WIN64\n+#define DIM ULLONG_MAX>>1\n+#else\n #ifdef __LP64__\n #define DIM UINT_MAX>>1\n #else\n #define DIM USHRT_MAX>>1\n #endif\n+#endif\n \n int\n sub (int *a)"}, {"sha": "fe0ad7a2497f6989260c12a94ea0854d81660ac8", "filename": "gcc/testsuite/g++.dg/other/pr25632.C", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr25632.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr25632.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr25632.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -2,10 +2,14 @@\n \n /* { dg-do compile } */\n \n+#define unsigned\n+__extension__ typedef __SIZE_TYPE__ ssize_t;\n+#undef unsigned\n+\n struct sockaddr_un {\n     char sun_path[1];\n };\n-const unsigned SI_SUN_HEAD_LEN = (long)(((struct sockaddr_un *)0)->sun_path);\n+const unsigned SI_SUN_HEAD_LEN = (ssize_t)(((struct sockaddr_un *)0)->sun_path);\n int SiGetPeerName ()\n {\n     return SI_SUN_HEAD_LEN;"}, {"sha": "c3050f6122be2a87a16cd506cae08fe3febb5f0e", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null-2.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -5,6 +5,7 @@\n \n void g(int) {}\n void g(long) {}\n+void g(long long) {}\n extern void g(void*);\n \n template <int I>\n@@ -21,6 +22,9 @@ void l(int) {}\n template <>\n void l(long) {}\n \n+template <>\n+void l(long long) {}\n+\n int main()\n {\n   int i = NULL; // { dg-warning \"\" } converting NULL to non-pointer type"}, {"sha": "e2ca13e514c6549ab2e0b7e7a829a871b5a71ebe", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -5,6 +5,7 @@\n \n void g(int) {}\n void g(long) {}\n+void g(long long) {}\n extern void g(void*);\n \n template <int I>\n@@ -21,6 +22,9 @@ void l(int) {}\n template <>\n void l(long) {}\n \n+template <>\n+void l(long long) {}\n+\n int main()\n {\n   int i = NULL; //  converting NULL to non-pointer type"}, {"sha": "9ab8bbc41b388f7829def15f3d7d7ca195d0bf7a", "filename": "gcc/testsuite/g++.dg/warn/pr13358-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-2.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -9,9 +9,9 @@ void use_longlong ()\n {\n   unsigned long long x1, x2, x3; // { dg-error \"ISO C\\\\+\\\\+ 1998 does not support 'long long'\" }\n   // make sure we error with hex, decimal and octal\n-  x1 = 0x1b27da572ef3cd86; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n-  x2 = 1956772631100509574; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n-  x3 = 0154476645345674746606; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+  x1 = 0x1b27da572ef3cd86; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target { llp64 || ilp32 } } }\n+  x2 = 1956772631100509574; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target { llp64 || ilp32 } } }\n+  x3 = 0154476645345674746606; // { dg-error \"integer constant is too large for 'long' type\" \"long long\" { target { llp64 || ilp32 } } }\n }\n \n void use_longlong2 ()"}, {"sha": "b9a59ca62c49a910bf3dc4472f5ca7cbdfe96346", "filename": "gcc/testsuite/g++.dg/warn/pr13358-4.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr13358-4.C?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -9,9 +9,9 @@ void use_longlong ()\n {\n   unsigned long long x1, x2, x3; // { dg-warning \"ISO C\\\\+\\\\+ 1998 does not support 'long long'\" }\n   // make sure we warn with hex, decimal and octal\n-  x1 = 0x1b27da572ef3cd86; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n-  x2 = 1956772631100509574; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n-  x3 = 0154476645345674746606; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target ilp32 } }\n+  x1 = 0x1b27da572ef3cd86; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target { llp64 || ilp32 } } }\n+  x2 = 1956772631100509574; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target { llp64 || ilp32 } } }\n+  x3 = 0154476645345674746606; // { dg-warning \"integer constant is too large for 'long' type\" \"long long\" { target { llp64 || ilp32 } } }\n }\n \n void use_longlong2 ()"}, {"sha": "1a36127e95b600ef6812bc78b788a2b46122a5d4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1500,6 +1500,19 @@ proc check_effective_target_vect_intfloat_cvt { } {\n     return $et_vect_intfloat_cvt_saved\n }\n \n+#Return 1 if we're supporting __int128 for target, 0 otherwise.\n+\n+proc check_effective_target_int128 { } {\n+    return [check_no_compiler_messages int128 object {\n+\tint dummy[\n+    \t#ifndef __SIZEOF_INT128__\n+    \t-1\n+    \t#else\n+    \t1\n+    \t#endif\n+\t];\n+    }]\n+}\n \n # Return 1 if the target supports unsigned int->float conversion \n #"}, {"sha": "4bef134c7f008d796b20875446bd67b0dce20ab1", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -8709,6 +8709,9 @@ make_or_reuse_type (unsigned size, int unsignedp)\n   if (size == LONG_LONG_TYPE_SIZE)\n     return (unsignedp ? long_long_unsigned_type_node\n             : long_long_integer_type_node);\n+  if (size == 128 && int128_integer_type_node)\n+    return (unsignedp ? int128_unsigned_type_node\n+            : int128_integer_type_node);\n \n   if (unsignedp)\n     return make_unsigned_type (size);\n@@ -8824,7 +8827,17 @@ build_common_tree_nodes (bool signed_char)\n   long_unsigned_type_node = make_unsigned_type (LONG_TYPE_SIZE);\n   long_long_integer_type_node = make_signed_type (LONG_LONG_TYPE_SIZE);\n   long_long_unsigned_type_node = make_unsigned_type (LONG_LONG_TYPE_SIZE);\n-\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+    /* TODO: This isn't correct, but as logic depends at the moment on\n+       host's instead of target's wide-integer.\n+       If there is a target not supporting TImode, but has an 128-bit\n+       integer-scalar register, this target check needs to be adjusted. */\n+    if (targetm.scalar_mode_supported_p (TImode))\n+      {\n+        int128_integer_type_node = make_signed_type (128);\n+        int128_unsigned_type_node = make_unsigned_type (128);\n+      }\n+#endif\n   /* Define a boolean type.  This type only represents boolean values but\n      may be larger than char depending on the value of BOOL_TYPE_SIZE.\n      Front ends which want to override this size (i.e. Java) can redefine"}, {"sha": "5f0098c481fb600ca0da358eee00e423fb92f14a", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -3845,6 +3845,8 @@ enum integer_type_kind\n   itk_unsigned_long,\n   itk_long_long,\n   itk_unsigned_long_long,\n+  itk_int128,\n+  itk_unsigned_int128,\n   itk_none\n };\n \n@@ -3865,6 +3867,8 @@ extern GTY(()) tree integer_types[itk_none];\n #define long_unsigned_type_node\t\tinteger_types[itk_unsigned_long]\n #define long_long_integer_type_node\tinteger_types[itk_long_long]\n #define long_long_unsigned_type_node\tinteger_types[itk_unsigned_long_long]\n+#define int128_integer_type_node\tinteger_types[itk_int128]\n+#define int128_unsigned_type_node\tinteger_types[itk_unsigned_int128]\n \f\n /* Set to the default thread-local storage (tls) model to use.  */\n "}, {"sha": "520d5dc4a7be1f835ee6802f97cda8c77164a623", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -1,3 +1,8 @@\n+2\u00df1\u00df-05-26  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* testsuite/demangle-expected: Add tests for __int128\n+\tand unsigned __int128 types.\n+\n 2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "ef84bc113a84e7c3491554339887949e1559b7c0", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6766312d3001a708ed8ad1bd02ccbf95bd2c671/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=a6766312d3001a708ed8ad1bd02ccbf95bd2c671", "patch": "@@ -3220,6 +3220,16 @@ _26_GLOBAL_$N$_tmp_n.iilg4Gya$app_instance\n {anonymous}::app_instance\n {anonymous}::app_instance\n #\n+--format=gnu-v3 --no-params\n+_Z3fo5n\n+fo5(__int128)\n+fo5\n+#\n+--format=gnu-v3 --no-params\n+_Z3fo5o\n+fo5(unsigned __int128)\n+fo5\n+#\n --format=java\n _ZN4java3awt10ScrollPane7addImplEPNS0_9ComponentEPNS_4lang6ObjectEi\n java.awt.ScrollPane.addImpl(java.awt.Component, java.lang.Object, int)"}]}