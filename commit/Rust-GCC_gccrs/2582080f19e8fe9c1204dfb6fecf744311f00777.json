{"sha": "2582080f19e8fe9c1204dfb6fecf744311f00777", "node_id": "C_kwDOANBUbNoAKDI1ODIwODBmMTllOGZlOWMxMjA0ZGZiNmZlY2Y3NDQzMTFmMDA3Nzc", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-07-14T17:31:21Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-07-15T23:58:05Z"}, "message": "x86: Disable sibcall if indirect_return attribute doesn't match\n\nWhen shadow stack is enabled, function with indirect_return attribute\nmay return via indirect jump.  In this case, we need to disable sibcall\nif caller doesn't have indirect_return attribute and indirect branch\ntracking is enabled since compiler won't generate ENDBR when calling the\ncaller.\n\ngcc/\n\n\tPR target/85620\n\t* config/i386/i386.cc (ix86_function_ok_for_sibcall): Return\n\tfalse if callee has indirect_return attribute and caller\n\tdoesn't.\n\ngcc/testsuite/\n\n\tPR target/85620\n\t* gcc.target/i386/pr85620-2.c: Updated.\n\t* gcc.target/i386/pr85620-5.c: New test.\n\t* gcc.target/i386/pr85620-6.c: Likewise.\n\t* gcc.target/i386/pr85620-7.c: Likewise.", "tree": {"sha": "ccb21c1bca24976e4f9b669fcddf28c46ada2dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccb21c1bca24976e4f9b669fcddf28c46ada2dec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2582080f19e8fe9c1204dfb6fecf744311f00777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2582080f19e8fe9c1204dfb6fecf744311f00777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2582080f19e8fe9c1204dfb6fecf744311f00777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2582080f19e8fe9c1204dfb6fecf744311f00777/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "e03f86d4a2386469260ee6ac145712002115dc78", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=2582080f19e8fe9c1204dfb6fecf744311f00777", "patch": "@@ -1024,6 +1024,16 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n \t return false;\n     }\n \n+  /* Disable sibcall if callee has indirect_return attribute and\n+     caller doesn't since callee will return to the caller's caller\n+     via an indirect jump.  */\n+  if (((flag_cf_protection & (CF_RETURN | CF_BRANCH))\n+       == (CF_RETURN | CF_BRANCH))\n+      && lookup_attribute (\"indirect_return\", TYPE_ATTRIBUTES (type))\n+      && !lookup_attribute (\"indirect_return\",\n+\t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (cfun->decl))))\n+    return false;\n+\n   /* Otherwise okay.  That also includes certain types of indirect calls.  */\n   return true;\n }"}, {"sha": "14ce0ffd1e1612b1fa3156044e2b7a51c0dded98", "filename": "gcc/testsuite/gcc.target/i386/pr85620-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-2.c?ref=2582080f19e8fe9c1204dfb6fecf744311f00777", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fcf-protection\" } */\n-/* { dg-final { scan-assembler-times {\\mendbr} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mendbr} 2 } } */\n+/* { dg-final { scan-assembler-not \"jmp\" } } */\n \n struct ucontext;\n "}, {"sha": "04537702d091ed9cf4b16187dda0c1d032877d76", "filename": "gcc/testsuite/gcc.target/i386/pr85620-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-5.c?ref=2582080f19e8fe9c1204dfb6fecf744311f00777", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler-not \"jmp\" } } */\n+\n+struct ucontext;\n+\n+extern int (*bar) (struct ucontext *) __attribute__((__indirect_return__));\n+\n+int\n+foo (struct ucontext *oucp)\n+{\n+  return bar (oucp);\n+}"}, {"sha": "0b6a64e8454b83a5fd92dd3dc67738dc24eca882", "filename": "gcc/testsuite/gcc.target/i386/pr85620-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-6.c?ref=2582080f19e8fe9c1204dfb6fecf744311f00777", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler \"jmp\" } } */\n+\n+struct ucontext;\n+\n+extern int bar (struct ucontext *) __attribute__((__indirect_return__));\n+\n+__attribute__((__indirect_return__))\n+int\n+foo (struct ucontext *oucp)\n+{\n+  return bar (oucp);\n+}"}, {"sha": "fa62d56decfb1d805e0ce861fee1e415c7e6a386", "filename": "gcc/testsuite/gcc.target/i386/pr85620-7.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2582080f19e8fe9c1204dfb6fecf744311f00777/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85620-7.c?ref=2582080f19e8fe9c1204dfb6fecf744311f00777", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcf-protection\" } */\n+/* { dg-final { scan-assembler \"jmp\" } } */\n+\n+struct ucontext;\n+\n+extern int (*bar) (struct ucontext *) __attribute__((__indirect_return__));\n+extern int foo (struct ucontext *) __attribute__((__indirect_return__));\n+\n+int\n+foo (struct ucontext *oucp)\n+{\n+  return bar (oucp);\n+}"}]}