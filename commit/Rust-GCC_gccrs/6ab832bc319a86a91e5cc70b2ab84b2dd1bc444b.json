{"sha": "6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiODMyYmMzMTlhODZhOTFlNWNjNzBiMmFiODRiMmRkMWJjNDQ0Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-21T12:36:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-21T12:36:48Z"}, "message": "(FIXED_REGNO_P): Treate global regs as fixed.\n\n(CHEAP_REGNO): Renamed from CHEAP_REG.\n(CHEAP_REG): New macro; user var in hard reg is cheap.\n(COST): Pass RTL to CHEAP_REG, not regno.\n(rtx_cost, case REG): Likewise.\n\nFrom-SVN: r6836", "tree": {"sha": "0c59207dbfb86fd30a0bbb7eab830f8c3306973a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c59207dbfb86fd30a0bbb7eab830f8c3306973a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b/comments", "author": null, "committer": null, "parents": [{"sha": "a61e5d28e921f75e4219377d941942c8eef711dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61e5d28e921f75e4219377d941942c8eef711dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61e5d28e921f75e4219377d941942c8eef711dd"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "19307ac634736314a2793249ead7199846546516", "filename": "gcc/cse.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6ab832bc319a86a91e5cc70b2ab84b2dd1bc444b", "patch": "@@ -445,29 +445,36 @@ struct table_elt\n #ifdef OVERLAPPING_REGNO_P\n #define FIXED_REGNO_P(N)  \\\n   (((N) == FRAME_POINTER_REGNUM || (N) == HARD_FRAME_POINTER_REGNUM \\\n-    || fixed_regs[N])\t  \\\n+    || fixed_regs[N] || global_regs[N])\t  \\\n    && ! OVERLAPPING_REGNO_P ((N)))\n #else\n #define FIXED_REGNO_P(N)  \\\n   ((N) == FRAME_POINTER_REGNUM || (N) == HARD_FRAME_POINTER_REGNUM \\\n-   || fixed_regs[N])\n+   || fixed_regs[N] || global_regs[N])\n #endif\n \n /* Compute cost of X, as stored in the `cost' field of a table_elt.  Fixed\n    hard registers and pointers into the frame are the cheapest with a cost\n    of 0.  Next come pseudos with a cost of one and other hard registers with\n    a cost of 2.  Aside from these special cases, call `rtx_cost'.  */\n \n-#define CHEAP_REG(N) \\\n+#define CHEAP_REGNO(N) \\\n   ((N) == FRAME_POINTER_REGNUM || (N) == HARD_FRAME_POINTER_REGNUM \t\\\n    || (N) == STACK_POINTER_REGNUM || (N) == ARG_POINTER_REGNUM\t     \t\\\n    || ((N) >= FIRST_VIRTUAL_REGISTER && (N) <= LAST_VIRTUAL_REGISTER) \t\\\n    || ((N) < FIRST_PSEUDO_REGISTER\t\t\t\t\t\\\n        && FIXED_REGNO_P (N) && REGNO_REG_CLASS (N) != NO_REGS))\n \n+/* A register is cheap if it is a user variable assigned to the register\n+   or if its register number always corresponds to a cheap register.  */\n+\n+#define CHEAP_REG(N) \\\n+  ((REG_USERVAR_P (N) && REGNO (N) < FIRST_PSEUDO_REGISTER)\t\\\n+   || CHEAP_REGNO (REGNO (N)))\n+\n #define COST(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == REG\t\t\t\t\t\\\n-   ? (CHEAP_REG (REGNO (X)) ? 0\t\t\t\t\\\n+   ? (CHEAP_REG (X) ? 0\t\t\t\t\t\\\n       : REGNO (X) >= FIRST_PSEUDO_REGISTER ? 1\t\t\\\n       : 2)\t\t\t\t\t\t\\\n    : rtx_cost (X, SET) * 2)\n@@ -717,7 +724,7 @@ rtx_cost (x, outer_code)\n   switch (code)\n     {\n     case REG:\n-      return ! CHEAP_REG (REGNO (x));\n+      return ! CHEAP_REG (x);\n \n     case SUBREG:\n       /* If we can't tie these modes, make this expensive.  The larger"}]}