{"sha": "45d439ac1a9e2df33ac7ef573009749dbebf581b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkNDM5YWMxYTllMmRmMzNhYzdlZjU3MzAwOTc0OWRiZWJmNTgxYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-27T16:52:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-27T16:52:23Z"}, "message": "builtin-types.def (BT_FN_PTR_CONST_PTR_SIZE_VAR): New.\n\n\t* builtin-types.def (BT_FN_PTR_CONST_PTR_SIZE_VAR): New.\n\t* builtins.def (BUILT_IN_ASSUME_ALIGNED): New builtin.\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call,\n\tfind_func_clobbers): Handle BUILT_IN_ASSUME_ALIGNED.\n\t* tree-ssa-ccp.c (bit_value_assume_aligned): New function.\n\t(evaluate_stmt, execute_fold_all_builtins): Handle\n\tBUILT_IN_ASSUME_ALIGNED.\n\t* tree-ssa-dce.c (propagate_necessity): Likewise.\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1,\n\tcall_may_clobber_ref_p_1): Likewise.\n\t* builtins.c (is_simple_builtin, expand_builtin): Likewise.\n\t(expand_builtin_assume_aligned): New function.\n\t* doc/extend.texi (__builtin_assume_aligned): Document.\n\n\t* c-common.c (check_builtin_function_arguments): Handle\n\tBUILT_IN_ASSUME_ALIGNED.\n\n\t* gcc.dg/builtin-assume-aligned-1.c: New test.\n\t* gcc.dg/builtin-assume-aligned-2.c: New test.\n\t* gcc.target/i386/builtin-assume-aligned-1.c: New test.\n\nFrom-SVN: r175541", "tree": {"sha": "efa39246412ef14d5214fe10b53a962abeab3d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efa39246412ef14d5214fe10b53a962abeab3d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45d439ac1a9e2df33ac7ef573009749dbebf581b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d439ac1a9e2df33ac7ef573009749dbebf581b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d439ac1a9e2df33ac7ef573009749dbebf581b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d439ac1a9e2df33ac7ef573009749dbebf581b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc2a58daabf95cfac0dd346ff717902bdc6e3d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2a58daabf95cfac0dd346ff717902bdc6e3d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2a58daabf95cfac0dd346ff717902bdc6e3d93"}], "stats": {"total": 258, "additions": 255, "deletions": 3}, "files": [{"sha": "8ed86d29e23c5d78e402a0a9574de56eef4efc74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1,5 +1,19 @@\n 2011-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* builtin-types.def (BT_FN_PTR_CONST_PTR_SIZE_VAR): New.\n+\t* builtins.def (BUILT_IN_ASSUME_ALIGNED): New builtin.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call,\n+\tfind_func_clobbers): Handle BUILT_IN_ASSUME_ALIGNED.\n+\t* tree-ssa-ccp.c (bit_value_assume_aligned): New function.\n+\t(evaluate_stmt, execute_fold_all_builtins): Handle\n+\tBUILT_IN_ASSUME_ALIGNED.\n+\t* tree-ssa-dce.c (propagate_necessity): Likewise.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1,\n+\tcall_may_clobber_ref_p_1): Likewise.\n+\t* builtins.c (is_simple_builtin, expand_builtin): Likewise.\n+\t(expand_builtin_assume_aligned): New function.\n+\t* doc/extend.texi (__builtin_assume_aligned): Document.\n+\n \tPR debug/49544\n \t* cselib.c (promote_debug_loc): If cselib_preserve_constants\n \tand l has two DEBUG_INSN owned locs instead of just one, adjust"}, {"sha": "551b2222d731fa0c8a27e6ed20fb0c9b5f95b385", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+/* Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -454,6 +454,8 @@ DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_CONST_STRING_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_CONST_STRING, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_INT_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_INT, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_VAR_2 (BT_FN_PTR_CONST_PTR_SIZE_VAR, BT_PTR,\n+\t\t\t BT_CONST_PTR, BT_SIZE)\n \n DEF_FUNCTION_TYPE_VAR_3 (BT_FN_INT_STRING_SIZE_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_STRING, BT_SIZE, BT_CONST_STRING)"}, {"sha": "0747e04a3af1bba85e294161023ebcc205ad3c50", "filename": "gcc/builtins.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -4604,6 +4604,23 @@ expand_builtin_expect (tree exp, rtx target)\n   return target;\n }\n \n+/* Expand a call to __builtin_assume_aligned.  We just return our first\n+   argument as the builtin_assume_aligned semantic should've been already\n+   executed by CCP.  */\n+\n+static rtx\n+expand_builtin_assume_aligned (tree exp, rtx target)\n+{\n+  if (call_expr_nargs (exp) < 2)\n+    return const0_rtx;\n+  target = expand_expr (CALL_EXPR_ARG (exp, 0), target, VOIDmode,\n+\t\t\tEXPAND_NORMAL);\n+  gcc_assert (!TREE_SIDE_EFFECTS (CALL_EXPR_ARG (exp, 1))\n+\t      && (call_expr_nargs (exp) < 3\n+\t\t  || !TREE_SIDE_EFFECTS (CALL_EXPR_ARG (exp, 2))));\n+  return target;\n+}\n+\n void\n expand_builtin_trap (void)\n {\n@@ -5823,6 +5840,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       return expand_builtin_va_copy (exp);\n     case BUILT_IN_EXPECT:\n       return expand_builtin_expect (exp, target);\n+    case BUILT_IN_ASSUME_ALIGNED:\n+      return expand_builtin_assume_aligned (exp, target);\n     case BUILT_IN_PREFETCH:\n       expand_builtin_prefetch (exp);\n       return const0_rtx;\n@@ -13461,6 +13480,7 @@ is_simple_builtin (tree decl)\n       case BUILT_IN_OBJECT_SIZE:\n       case BUILT_IN_UNREACHABLE:\n \t/* Simple register moves or loads from stack.  */\n+      case BUILT_IN_ASSUME_ALIGNED:\n       case BUILT_IN_RETURN_ADDRESS:\n       case BUILT_IN_EXTRACT_RETURN_ADDR:\n       case BUILT_IN_FROB_RETURN_ADDR:"}, {"sha": "fc5664fb8e1ba94dbe554aedc4b07ecfa181ef83", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the definitions and documentation for the\n    builtins used in the GNU compiler.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -638,6 +638,7 @@ DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVP, \"execvp\", BT_FN_INT_CONST_STRING_PT\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVE, \"execve\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_EXIT, \"exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_LONG_LONG_LONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_ASSUME_ALIGNED, \"assume_aligned\", BT_FN_PTR_CONST_PTR_SIZE_VAR, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTEND_POINTER, \"extend_pointer\", BT_FN_UNWINDWORD_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTRACT_RETURN_ADDR, \"extract_return_addr\", BT_FN_PTR_PTR, ATTR_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFS, \"ffs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "0595cd1a7ac796825168aaea48a94cdf41501651", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1,3 +1,8 @@\n+2011-06-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (check_builtin_function_arguments): Handle\n+\tBUILT_IN_ASSUME_ALIGNED.\n+\n 2011-06-21  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-common.c: Add sync_ or SYNC__ to builtin names."}, {"sha": "a50b405262a00d8b7d481341f67721b005405345", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -8166,6 +8166,18 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n \t}\n       return false;\n \n+    case BUILT_IN_ASSUME_ALIGNED:\n+      if (builtin_function_validate_nargs (fndecl, nargs, 2 + (nargs > 2)))\n+\t{\n+\t  if (nargs >= 3 && TREE_CODE (TREE_TYPE (args[2])) != INTEGER_TYPE)\n+\t    {\n+\t      error (\"non-integer argument 3 in call to function %qE\", fndecl);\n+\t      return false;\n+\t    }\n+\t  return true;\n+\t}\n+      return false;\n+\n     default:\n       return true;\n     }"}, {"sha": "0e80590534c6c3c37957d568a336ae4576fcd00e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -7646,6 +7646,28 @@ int g (int c)\n \n @end deftypefn\n \n+@deftypefn {Built-in Function} void *__builtin_assume_aligned (const void *@var{exp}, size_t @var{align}, ...)\n+This function returns its first argument, and allows the compiler\n+to assume that the returned pointer is at least @var{align} bytes\n+aligned.  This built-in can have either two or three arguments,\n+if it has three, the third argument should have integer type, and\n+if it is non-zero means misalignment offset.  For example:\n+\n+@smallexample\n+void *x = __builtin_assume_aligned (arg, 16);\n+@end smallexample\n+\n+means that the compiler can assume x, set to arg, is at least\n+16 byte aligned, while:\n+\n+@smallexample\n+void *x = __builtin_assume_aligned (arg, 32, 8);\n+@end smallexample\n+\n+means that the compiler can assume for x, set to arg, that\n+(char *) x - 8 is 32 byte aligned.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} void __builtin___clear_cache (char *@var{begin}, char *@var{end})\n This function is used to flush the processor's instruction cache for\n the region of memory between @var{begin} inclusive and @var{end}"}, {"sha": "97ad07aaa57445a01c9475fab0ce5a0b1908f2e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1,5 +1,9 @@\n 2011-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/builtin-assume-aligned-1.c: New test.\n+\t* gcc.dg/builtin-assume-aligned-2.c: New test.\n+\t* gcc.target/i386/builtin-assume-aligned-1.c: New test.\n+\n \tPR debug/49544\n \t* gcc.dg/pr49544.c: New test.\n "}, {"sha": "46b65a76877f065f662af9d92740c840ec8201bd", "filename": "gcc/testsuite/gcc.dg/builtin-assume-aligned-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-assume-aligned-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-assume-aligned-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-assume-aligned-1.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n+\n+void\n+test1 (double *out1, double *out2, double *out3, double *in1,\n+       double *in2, int len)\n+{\n+  int i;\n+  double *__restrict o1 = __builtin_assume_aligned (out1, 16);\n+  double *__restrict o2 = __builtin_assume_aligned (out2, 16);\n+  double *__restrict o3 = __builtin_assume_aligned (out3, 16);\n+  double *__restrict i1 = __builtin_assume_aligned (in1, 16);\n+  double *__restrict i2 = __builtin_assume_aligned (in2, 16);\n+  for (i = 0; i < len; ++i)\n+    {\n+      o1[i] = i1[i] * i2[i];\n+      o2[i] = i1[i] + i2[i];\n+      o3[i] = i1[i] - i2[i];\n+    }\n+}\n+\n+void\n+test2 (double *out1, double *out2, double *out3, double *in1,\n+       double *in2, int len)\n+{\n+  int i, align = 32, misalign = 16;\n+  out1 = __builtin_assume_aligned (out1, align, misalign);\n+  out2 = __builtin_assume_aligned (out2, align, 16);\n+  out3 = __builtin_assume_aligned (out3, 32, misalign);\n+  in1 = __builtin_assume_aligned (in1, 32, 16);\n+  in2 = __builtin_assume_aligned (in2, 32, 0);\n+  for (i = 0; i < len; ++i)\n+    {\n+      out1[i] = in1[i] * in2[i];\n+      out2[i] = in1[i] + in2[i];\n+      out3[i] = in1[i] - in2[i];\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"__builtin_assume_aligned\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5b0de5720c1f02d5417d3855ff2092bf26f4a5ce", "filename": "gcc/testsuite/gcc.dg/builtin-assume-aligned-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-assume-aligned-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-assume-aligned-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-assume-aligned-2.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+double *bar (void);\n+\n+void\n+foo (double *ptr, int i)\n+{\n+  double *a = __builtin_assume_aligned (ptr, 16, 8, 7);\t/* { dg-error \"too many arguments to function\" } */\n+  double *b = __builtin_assume_aligned (bar (), 16);\n+  double *c = __builtin_assume_aligned (bar (), 16, 8);\n+  double *d = __builtin_assume_aligned (ptr, i, ptr);\t/* { dg-error \"non-integer argument 3 in call to function\" } */\n+  double *e = __builtin_assume_aligned (ptr, i, *ptr);\t/* { dg-error \"non-integer argument 3 in call to function\" } */\n+  *a = 0.0;\n+  *b = 0.0;\n+  *c = 0.0;\n+  *d = 0.0;\n+  *e = 0.0;\n+}"}, {"sha": "4acf48bdc108ff1afe03b5b55ecec64a6afe8ad2", "filename": "gcc/testsuite/gcc.target/i386/builtin-assume-aligned-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-assume-aligned-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-assume-aligned-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin-assume-aligned-1.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse2 -mno-avx\" } */\n+\n+void\n+test1 (double *out1, double *out2, double *out3, double *in1,\n+       double *in2, int len)\n+{\n+  int i;\n+  double *__restrict o1 = __builtin_assume_aligned (out1, 16);\n+  double *__restrict o2 = __builtin_assume_aligned (out2, 16);\n+  double *__restrict o3 = __builtin_assume_aligned (out3, 16);\n+  double *__restrict i1 = __builtin_assume_aligned (in1, 16);\n+  double *__restrict i2 = __builtin_assume_aligned (in2, 16);\n+  for (i = 0; i < len; ++i)\n+    {\n+      o1[i] = i1[i] * i2[i];\n+      o2[i] = i1[i] + i2[i];\n+      o3[i] = i1[i] - i2[i];\n+    }\n+}\n+\n+void\n+test2 (double *out1, double *out2, double *out3, double *in1,\n+       double *in2, int len)\n+{\n+  int i, align = 32, misalign = 16;\n+  out1 = __builtin_assume_aligned (out1, align, misalign);\n+  out2 = __builtin_assume_aligned (out2, align, 16);\n+  out3 = __builtin_assume_aligned (out3, 32, misalign);\n+  in1 = __builtin_assume_aligned (in1, 32, 16);\n+  in2 = __builtin_assume_aligned (in2, 32, 0);\n+  for (i = 0; i < len; ++i)\n+    {\n+      out1[i] = in1[i] * in2[i];\n+      out2[i] = in1[i] + in2[i];\n+      out3[i] = in1[i] - in2[i];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not \"movhpd\" } } */\n+/* { dg-final { scan-assembler-not \"movlpd\" } } */"}, {"sha": "bac11810c6bc02ecf11862e65c65e3fe6ad6b6f3", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1253,6 +1253,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_SINCOS:\n \tcase BUILT_IN_SINCOSF:\n \tcase BUILT_IN_SINCOSL:\n+\tcase BUILT_IN_ASSUME_ALIGNED:\n \t  return false;\n \t/* __sync_* builtins and some OpenMP builtins act as threading\n \t   barriers.  */\n@@ -1511,6 +1512,7 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t  return false;\n \tcase BUILT_IN_STACK_SAVE:\n \tcase BUILT_IN_ALLOCA:\n+\tcase BUILT_IN_ASSUME_ALIGNED:\n \t  return false;\n \t/* Freeing memory kills the pointed-to memory.  More importantly\n \t   the call has to serve as a barrier for moving loads and stores"}, {"sha": "78724de286beb73c317dbc8e34bfd60c86968fd2", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -1476,6 +1476,64 @@ bit_value_binop (enum tree_code code, tree type, tree rhs1, tree rhs2)\n   return val;\n }\n \n+/* Return the propagation value when applying __builtin_assume_aligned to\n+   its arguments.  */\n+\n+static prop_value_t\n+bit_value_assume_aligned (gimple stmt)\n+{\n+  tree ptr = gimple_call_arg (stmt, 0), align, misalign = NULL_TREE;\n+  tree type = TREE_TYPE (ptr);\n+  unsigned HOST_WIDE_INT aligni, misaligni = 0;\n+  prop_value_t ptrval = get_value_for_expr (ptr, true);\n+  prop_value_t alignval;\n+  double_int value, mask;\n+  prop_value_t val;\n+  if (ptrval.lattice_val == UNDEFINED)\n+    return ptrval;\n+  gcc_assert ((ptrval.lattice_val == CONSTANT\n+\t       && TREE_CODE (ptrval.value) == INTEGER_CST)\n+\t      || double_int_minus_one_p (ptrval.mask));\n+  align = gimple_call_arg (stmt, 1);\n+  if (!host_integerp (align, 1))\n+    return ptrval;\n+  aligni = tree_low_cst (align, 1);\n+  if (aligni <= 1\n+      || (aligni & (aligni - 1)) != 0)\n+    return ptrval;\n+  if (gimple_call_num_args (stmt) > 2)\n+    {\n+      misalign = gimple_call_arg (stmt, 2);\n+      if (!host_integerp (misalign, 1))\n+\treturn ptrval;\n+      misaligni = tree_low_cst (misalign, 1);\n+      if (misaligni >= aligni)\n+\treturn ptrval;\n+    }\n+  align = build_int_cst_type (type, -aligni);\n+  alignval = get_value_for_expr (align, true);\n+  bit_value_binop_1 (BIT_AND_EXPR, type, &value, &mask,\n+\t\t     type, value_to_double_int (ptrval), ptrval.mask,\n+\t\t     type, value_to_double_int (alignval), alignval.mask);\n+  if (!double_int_minus_one_p (mask))\n+    {\n+      val.lattice_val = CONSTANT;\n+      val.mask = mask;\n+      gcc_assert ((mask.low & (aligni - 1)) == 0);\n+      gcc_assert ((value.low & (aligni - 1)) == 0);\n+      value.low |= misaligni;\n+      /* ???  Delay building trees here.  */\n+      val.value = double_int_to_tree (type, value);\n+    }\n+  else\n+    {\n+      val.lattice_val = VARYING;\n+      val.value = NULL_TREE;\n+      val.mask = double_int_minus_one;\n+    }\n+  return val;\n+}\n+\n /* Evaluate statement STMT.\n    Valid only for assignments, calls, conditionals, and switches. */\n \n@@ -1647,6 +1705,10 @@ evaluate_stmt (gimple stmt)\n \t      val = get_value_for_expr (gimple_call_arg (stmt, 0), true);\n \t      break;\n \n+\t    case BUILT_IN_ASSUME_ALIGNED:\n+\t      val = bit_value_assume_aligned (stmt);\n+\t      break;\n+\n \t    default:;\n \t    }\n \t}\n@@ -2186,6 +2248,11 @@ execute_fold_all_builtins (void)\n                 result = integer_zero_node;\n \t\tbreak;\n \n+\t      case BUILT_IN_ASSUME_ALIGNED:\n+\t\t/* Remove __builtin_assume_aligned.  */\n+\t\tresult = gimple_call_arg (stmt, 0);\n+\t\tbreak;\n+\n \t      case BUILT_IN_STACK_RESTORE:\n \t\tresult = optimize_stack_restore (i);\n \t\tif (result)"}, {"sha": "9597b57393904d0f9f84551fb92f7d73e39d4ef4", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -837,7 +837,8 @@ propagate_necessity (struct edge_list *el)\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_FREE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_SAVE\n-\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE))\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ASSUME_ALIGNED))\n \t\tcontinue;\n \n \t      /* Calls implicitly load from memory, their arguments"}, {"sha": "799f9cf7e53a6bd73a014cd55b0d536d8db0dde7", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d439ac1a9e2df33ac7ef573009749dbebf581b/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=45d439ac1a9e2df33ac7ef573009749dbebf581b", "patch": "@@ -4002,6 +4002,7 @@ find_func_aliases_for_builtin_call (gimple t)\n       case BUILT_IN_STPCPY_CHK:\n       case BUILT_IN_STRCAT_CHK:\n       case BUILT_IN_STRNCAT_CHK:\n+      case BUILT_IN_ASSUME_ALIGNED:\n \t{\n \t  tree res = gimple_call_lhs (t);\n \t  tree dest = gimple_call_arg (t, (DECL_FUNCTION_CODE (fndecl)\n@@ -4726,6 +4727,7 @@ find_func_clobbers (gimple origt)\n \t      return;\n \t    }\n \t  /* The following functions neither read nor clobber memory.  */\n+\t  case BUILT_IN_ASSUME_ALIGNED:\n \t  case BUILT_IN_FREE:\n \t    return;\n \t  /* Trampolines are of no interest to us.  */"}]}