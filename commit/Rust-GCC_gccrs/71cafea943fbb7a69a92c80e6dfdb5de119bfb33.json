{"sha": "71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjYWZlYTk0M2ZiYjdhNjlhOTJjODBlNmRmZGI1ZGUxMTliZmIzMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-08T14:15:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-08T14:15:15Z"}, "message": "cgraphbuild.c (build_cgraph_edges): Do not walk into debugs.\n\n\n\t* cgraphbuild.c (build_cgraph_edges): Do not walk into debugs.\n\t(make_pass_rebuild_cgraph_edges): Also clear references.\n\t* cgraph.c (verify_cgraph_node): Add basic ipa-ref verifier.\n\t* ipa-inline-transform.c (inline_transform): Remove all references\n\tafter inlining.\n\t* cgraphunit.c (expand_function): Remove all references after expansion.\n\t* ipa-ref.c (ipa_ref_has_aliases_p): Fix formatting.\n\t(ipa_find_reference): Rewrite to iterator.\n\t(remove_stmt_references): Likewise.\n\t(ipa_clear_stmts_in_references): New function.\n\t* ipa-ref.h (ipa_clear_stmts_in_references): Declare.\n\t* cgraphclones.c (cgraph_materialize_all_clones): Remove or clear references.\n\t* ipa-split.c (split_function): Remove references in split function.\n\nFrom-SVN: r201601", "tree": {"sha": "a15a1a431d19e3655466a7906f95ba58df17e24a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a15a1a431d19e3655466a7906f95ba58df17e24a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/comments", "author": null, "committer": null, "parents": [{"sha": "27d2e61268434dc682b81227e93ae9022d4d290f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d2e61268434dc682b81227e93ae9022d4d290f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d2e61268434dc682b81227e93ae9022d4d290f"}], "stats": {"total": 163, "additions": 114, "deletions": 49}, "files": [{"sha": "349981c24ef6ec9f766d6c0d297e03a6f5f30d9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -1,3 +1,19 @@\n+2013-08-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphbuild.c (build_cgraph_edges): Do not walk into debugs.\n+\t(make_pass_rebuild_cgraph_edges): Also clear references.\n+\t* cgraph.c (verify_cgraph_node): Add basic ipa-ref verifier.\n+\t* ipa-inline-transform.c (inline_transform): Remove all references\n+\tafter inlining.\n+\t* cgraphunit.c (expand_function): Remove all references after expansion.\n+\t* ipa-ref.c (ipa_ref_has_aliases_p): Fix formatting.\n+\t(ipa_find_reference): Rewrite to iterator.\n+\t(remove_stmt_references): Likewise.\n+\t(ipa_clear_stmts_in_references): New function.\n+\t* ipa-ref.h (ipa_clear_stmts_in_references): Declare.\n+\t* cgraphclones.c (cgraph_materialize_all_clones): Remove or clear references.\n+\t* ipa-split.c (split_function): Remove references in split function.\n+\n 2013-08-08  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/57431"}, {"sha": "d217b4af3c5406c2e986ee69d28242feb61b1749", "filename": "gcc/cgraph.c", "status": "modified", "additions": 65, "deletions": 45, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -2537,55 +2537,75 @@ verify_cgraph_node (struct cgraph_node *node)\n     {\n       if (this_cfun->cfg)\n \t{\n+\t  pointer_set_t *stmts = pointer_set_create ();\n+\t  int i;\n+\t  struct ipa_ref *ref;\n+\n \t  /* Reach the trees by walking over the CFG, and note the\n \t     enclosing basic-blocks in the call edges.  */\n \t  FOR_EACH_BB_FN (this_block, this_cfun)\n-\t    for (gsi = gsi_start_bb (this_block);\n-                 !gsi_end_p (gsi);\n-                 gsi_next (&gsi))\n-\t      {\n-\t\tgimple stmt = gsi_stmt (gsi);\n-\t\tif (is_gimple_call (stmt))\n-\t\t  {\n-\t\t    struct cgraph_edge *e = cgraph_edge (node, stmt);\n-\t\t    tree decl = gimple_call_fndecl (stmt);\n-\t\t    if (e)\n-\t\t      {\n-\t\t\tif (e->aux)\n-\t\t\t  {\n-\t\t\t    error (\"shared call_stmt:\");\n-\t\t\t    cgraph_debug_gimple_stmt (this_cfun, stmt);\n-\t\t\t    error_found = true;\n-\t\t\t  }\n-\t\t\tif (!e->indirect_unknown_callee)\n-\t\t\t  {\n-\t\t\t    if (verify_edge_corresponds_to_fndecl (e, decl))\n-\t\t\t      {\n-\t\t\t\terror (\"edge points to wrong declaration:\");\n-\t\t\t\tdebug_tree (e->callee->symbol.decl);\n-\t\t\t\tfprintf (stderr,\" Instead of:\");\n-\t\t\t\tdebug_tree (decl);\n-\t\t\t\terror_found = true;\n-\t\t\t      }\n-\t\t\t  }\n-\t\t\telse if (decl)\n-\t\t\t  {\n-\t\t\t    error (\"an indirect edge with unknown callee \"\n-\t\t\t\t   \"corresponding to a call_stmt with \"\n-\t\t\t\t   \"a known declaration:\");\n-\t\t\t    error_found = true;\n-\t\t\t    cgraph_debug_gimple_stmt (this_cfun, e->call_stmt);\n-\t\t\t  }\n-\t\t\te->aux = (void *)1;\n-\t\t      }\n-\t\t    else if (decl)\n-\t\t      {\n-\t\t\terror (\"missing callgraph edge for call stmt:\");\n-\t\t\tcgraph_debug_gimple_stmt (this_cfun, stmt);\n-\t\t\terror_found = true;\n-\t\t      }\n-\t\t  }\n+\t    {\n+\t      for (gsi = gsi_start_phis (this_block);\n+\t\t   !gsi_end_p (gsi); gsi_next (&gsi))\n+\t\tpointer_set_insert (stmts, gsi_stmt (gsi));\n+\t      for (gsi = gsi_start_bb (this_block);\n+\t\t   !gsi_end_p (gsi);\n+\t\t   gsi_next (&gsi))\n+\t\t{\n+\t\t  gimple stmt = gsi_stmt (gsi);\n+\t\t  pointer_set_insert (stmts, stmt);\n+\t\t  if (is_gimple_call (stmt))\n+\t\t    {\n+\t\t      struct cgraph_edge *e = cgraph_edge (node, stmt);\n+\t\t      tree decl = gimple_call_fndecl (stmt);\n+\t\t      if (e)\n+\t\t\t{\n+\t\t\t  if (e->aux)\n+\t\t\t    {\n+\t\t\t      error (\"shared call_stmt:\");\n+\t\t\t      cgraph_debug_gimple_stmt (this_cfun, stmt);\n+\t\t\t      error_found = true;\n+\t\t\t    }\n+\t\t\t  if (!e->indirect_unknown_callee)\n+\t\t\t    {\n+\t\t\t      if (verify_edge_corresponds_to_fndecl (e, decl))\n+\t\t\t\t{\n+\t\t\t\t  error (\"edge points to wrong declaration:\");\n+\t\t\t\t  debug_tree (e->callee->symbol.decl);\n+\t\t\t\t  fprintf (stderr,\" Instead of:\");\n+\t\t\t\t  debug_tree (decl);\n+\t\t\t\t  error_found = true;\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t  else if (decl)\n+\t\t\t    {\n+\t\t\t      error (\"an indirect edge with unknown callee \"\n+\t\t\t\t     \"corresponding to a call_stmt with \"\n+\t\t\t\t     \"a known declaration:\");\n+\t\t\t      error_found = true;\n+\t\t\t      cgraph_debug_gimple_stmt (this_cfun, e->call_stmt);\n+\t\t\t    }\n+\t\t\t  e->aux = (void *)1;\n+\t\t\t}\n+\t\t      else if (decl)\n+\t\t\t{\n+\t\t\t  error (\"missing callgraph edge for call stmt:\");\n+\t\t\t  cgraph_debug_gimple_stmt (this_cfun, stmt);\n+\t\t\t  error_found = true;\n+\t\t\t}\n+\t\t    }\n+\t\t}\n \t      }\n+\t    for (i = 0;\n+\t\t ipa_ref_list_reference_iterate (&node->symbol.ref_list, i, ref);\n+\t\t i++)\n+\t      if (ref->stmt && !pointer_set_contains (stmts, ref->stmt))\n+\t\t{\n+\t\t  error (\"reference to dead statement\");\n+\t\t  cgraph_debug_gimple_stmt (this_cfun, ref->stmt);\n+\t\t  error_found = true;\n+\t\t}\n+\t    pointer_set_destroy (stmts);\n \t}\n       else\n \t/* No CFG available?!  */"}, {"sha": "333deed81460551190bb055d72560a5355bc5cb5", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -318,6 +318,9 @@ build_cgraph_edges (void)\n \t  gimple stmt = gsi_stmt (gsi);\n \t  tree decl;\n \n+\t  if (is_gimple_debug (stmt))\n+\t    continue;\n+\n \t  if (is_gimple_call (stmt))\n \t    {\n \t      int freq = compute_call_stmt_bb_frequency (current_function_decl,\n@@ -537,7 +540,9 @@ make_pass_rebuild_cgraph_edges (gcc::context *ctxt)\n static unsigned int\n remove_cgraph_callee_edges (void)\n {\n-  cgraph_node_remove_callees (cgraph_get_node (current_function_decl));\n+  struct cgraph_node *node = cgraph_get_node (current_function_decl);\n+  cgraph_node_remove_callees (node);\n+  ipa_remove_all_references (&node->symbol.ref_list);\n   return 0;\n }\n "}, {"sha": "464c524fd28fe4eaecea340e495f2f34a48e82b0", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -876,7 +876,12 @@ cgraph_materialize_all_clones (void)\n     }\n   FOR_EACH_FUNCTION (node)\n     if (!node->symbol.analyzed && node->callees)\n-      cgraph_node_remove_callees (node);\n+      {\n+        cgraph_node_remove_callees (node);\n+\tipa_remove_all_references (&node->symbol.ref_list);\n+      }\n+    else\n+      ipa_clear_stmts_in_references ((symtab_node)node);\n   if (cgraph_dump_file)\n     fprintf (cgraph_dump_file, \"Materialization Call site updates done.\\n\");\n #ifdef ENABLE_CHECKING"}, {"sha": "3cd2b417ca7bb9ea5daf5852f9f2adbaebdcf571", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -1677,6 +1677,7 @@ expand_function (struct cgraph_node *node)\n   /* Eliminate all call edges.  This is important so the GIMPLE_CALL no longer\n      points to the dead function body.  */\n   cgraph_node_remove_callees (node);\n+  ipa_remove_all_references (&node->symbol.ref_list);\n }\n \n "}, {"sha": "54b113ac0001d49d8a667e2975bff9155aeb844d", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -414,6 +414,7 @@ inline_transform (struct cgraph_node *node)\n \n   for (e = node->callees; e; e = e->next_callee)\n     cgraph_redirect_edge_call_stmt_to_callee (e);\n+  ipa_remove_all_references (&node->symbol.ref_list);\n \n   timevar_push (TV_INTEGRATION);\n   if (node->callees)"}, {"sha": "8c5b430b5a2ccbf77f0380c3ec258e3fdcf709cf", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -2011,6 +2011,7 @@ early_inliner (void)\n #ifdef ENABLE_CHECKING\n   verify_cgraph_node (node);\n #endif\n+  ipa_remove_all_references (&node->symbol.ref_list);\n \n   /* Even when not optimizing or not inlining inline always-inline\n      functions.  */"}, {"sha": "d2c6002e17674d75c51499b0d4ab37ca13f0ac1f", "filename": "gcc/ipa-ref.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -218,6 +218,7 @@ ipa_ref_has_aliases_p (struct ipa_ref_list *ref_list)\n {\n   struct ipa_ref *ref;\n   int i;\n+\n   for (i = 0; ipa_ref_list_referring_iterate (ref_list, i, ref); i++)\n     if (ref->use == IPA_REF_ALIAS)\n       return true;\n@@ -234,7 +235,7 @@ ipa_find_reference (symtab_node referring_node, symtab_node referred_node,\n   struct ipa_ref *r = NULL;\n   int i;\n \n-  FOR_EACH_VEC_SAFE_ELT (referring_node->symbol.ref_list.references, i, r)\n+  for (i = 0; ipa_ref_list_reference_iterate (&referring_node->symbol.ref_list, i, r); i++)\n     if (r->referred == referred_node\n \t&& (in_lto_p || r->stmt == stmt))\n       return r;\n@@ -250,7 +251,20 @@ ipa_remove_stmt_references (symtab_node referring_node, gimple stmt)\n   struct ipa_ref *r = NULL;\n   int i;\n \n-  FOR_EACH_VEC_SAFE_ELT (referring_node->symbol.ref_list.references, i, r)\n+  for (i = 0; ipa_ref_list_reference_iterate (&referring_node->symbol.ref_list, i, r); i++)\n     if (r->stmt == stmt)\n       ipa_remove_reference (r);\n }\n+\n+/* Remove all stmt references in non-speculative references.\n+   Those are not maintained during inlining & clonning. */\n+\n+void\n+ipa_clear_stmts_in_references (symtab_node referring_node)\n+{\n+  struct ipa_ref *r = NULL;\n+  int i;\n+\n+  for (i = 0; ipa_ref_list_reference_iterate (&referring_node->symbol.ref_list, i, r); i++)\n+    r->stmt = NULL;\n+}"}, {"sha": "0b37a14ee6e17e21f3d540c91052b2e6b3c93a6f", "filename": "gcc/ipa-ref.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref.h?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -75,3 +75,4 @@ bool ipa_ref_cannot_lead_to_return (struct ipa_ref *);\n bool ipa_ref_has_aliases_p (struct ipa_ref_list *);\n struct ipa_ref * ipa_find_reference (symtab_node, symtab_node, gimple);\n void ipa_remove_stmt_references (symtab_node, gimple);\n+void ipa_clear_stmts_in_references (symtab_node);"}, {"sha": "faf7c8480c96171d88f49366d9604e0586f877e9", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cafea943fbb7a69a92c80e6dfdb5de119bfb33/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=71cafea943fbb7a69a92c80e6dfdb5de119bfb33", "patch": "@@ -1223,6 +1223,7 @@ split_function (struct split_point *split_point)\n       DECL_FUNCTION_CODE (node->symbol.decl) = (enum built_in_function) 0;\n     }\n   cgraph_node_remove_callees (cur_node);\n+  ipa_remove_all_references (&cur_node->symbol.ref_list);\n   if (!split_part_return_p)\n     TREE_THIS_VOLATILE (node->symbol.decl) = 1;\n   if (dump_file)"}]}