{"sha": "dafdf26963a622e074aeeeab399fbe33521d1baa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmZGYyNjk2M2E2MjJlMDc0YWVlZWFiMzk5ZmJlMzM1MjFkMWJhYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-01-30T17:50:01Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-01-30T17:50:01Z"}, "message": "re PR fortran/47523 (Concatenation with deferred length character with lhs variable)\n\n2011-01-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/47523\n\t* trans-expr.c (gfc_trans_assignment_1): If the rhs is an op\n\texpr and is assigned to a deferred character length scalar,\n\tmake sure that the function is called before reallocation,\n\tso that the length is available. Include procedure pointer\n\tand procedure pointer component rhs as well.\n\n2011-01-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/47523\n\t* trans-expr.c (gfc_trans_assignment_1): If the rhs is an op\n\texpr and is assigned to a deferred character length scalar,\n\tmake sure that the function is called before reallocation,\n\tso that the length is available. Include procedure pointer\n\tand procedure pointer component rhs as well.\n\n\tPR fortran/45170\n\tPR fortran/35810\n\tPR fortran/47350\n\t* gfortran.dg/allocatable_function_5.f90: New test not added by\n\tmistake on 2011-01-28.\n\nFrom-SVN: r169413", "tree": {"sha": "b8da97f66b986afd0a1f0f8d4f158a5b4dbd22d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8da97f66b986afd0a1f0f8d4f158a5b4dbd22d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dafdf26963a622e074aeeeab399fbe33521d1baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafdf26963a622e074aeeeab399fbe33521d1baa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dafdf26963a622e074aeeeab399fbe33521d1baa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dafdf26963a622e074aeeeab399fbe33521d1baa/comments", "author": null, "committer": null, "parents": [{"sha": "7be03a0ef9150f728b5710c0b9ca0962c137a4fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be03a0ef9150f728b5710c0b9ca0962c137a4fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be03a0ef9150f728b5710c0b9ca0962c137a4fc"}], "stats": {"total": 98, "additions": 94, "deletions": 4}, "files": [{"sha": "ce56256017b8f9a6a352194ee310041afbe73d4e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dafdf26963a622e074aeeeab399fbe33521d1baa", "patch": "@@ -1,3 +1,18 @@\n+2011-01-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/47523\n+\t* trans-expr.c (gfc_trans_assignment_1): If the rhs is an op\n+\texpr and is assigned to a deferred character length scalar,\n+\tmake sure that the function is called before reallocation,\n+\tso that the length is available. Include procedure pointer\n+\tand procedure pointer component rhs as well.\n+\n+\tPR fortran/45170\n+\tPR fortran/35810\n+\tPR fortran/47350\n+\t* gfortran.dg/allocatable_function_5.f90: New test not added by\n+\tmistake on 2011-01-28.\n+\n 2011-01-29  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47531"}, {"sha": "96828020689c7377b31a3a9b7c22d47c7da5ef75", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=dafdf26963a622e074aeeeab399fbe33521d1baa", "patch": "@@ -5977,6 +5977,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   stmtblock_t body;\n   bool l_is_temp;\n   bool scalar_to_array;\n+  bool def_clen_func;\n   tree string_length;\n   int n;\n \n@@ -6097,10 +6098,14 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n   /* For a deferred character length function, the function call must\n      happen before the (re)allocation of the lhs, otherwise the character\n      length of the result is not known.  */\n+  def_clen_func = (((expr2->expr_type == EXPR_FUNCTION)\n+\t\t\t   || (expr2->expr_type == EXPR_COMPCALL)\n+\t\t\t   || (expr2->expr_type == EXPR_PPC))\n+\t\t       && expr2->ts.deferred);\n   if (gfc_option.flag_realloc_lhs\n-\t&& expr2->expr_type == EXPR_FUNCTION\n \t&& expr2->ts.type == BT_CHARACTER\n-\t&& expr2->ts.deferred)\n+\t&& (def_clen_func || expr2->expr_type == EXPR_OP)\n+\t&& expr1->ts.deferred)\n     gfc_add_block_to_block (&block, &rse.pre);\n \n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,"}, {"sha": "a9e16459ecf8659ae79eb4bcc6cfb16b20f2085a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dafdf26963a622e074aeeeab399fbe33521d1baa", "patch": "@@ -1,3 +1,8 @@\n+2011-01-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/47523\n+\t* gfortran.dg/realloc_on_assign_5.f03: New test.\n+\n 2011-01-29  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gfortran.dg/bessel_6.f90: XFAIL on spu-*-*.\n@@ -66,9 +71,8 @@\n \tPR fortran/47350\n \t* gfortran.dg/realloc_on_assign_3.f03: New test.\n \t* gfortran.dg/realloc_on_assign_4.f03: New test.\n-\t* gfortran.dg/realloc_on_assign_5.f90: New test.\n \t* gfortran.dg/allocatable_function_5.f90: New test.\n-\t* gfortran.dg/allocate_deferred_char_scalar_1.f90: New test.\n+\t* gfortran.dg/allocate_deferred_char_scalar_1.f03: New test.\n \t* gfortran.dg/deferred_type_param_2.f90: Remove two \"not yet\n \timplemented\" dg-errors.\n "}, {"sha": "8e7d49b0fa8872a5ea8a5aa42eb669b37c544e52", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_5.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_5.f90?ref=dafdf26963a622e074aeeeab399fbe33521d1baa", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do run }\n+! Tests function return of deferred length scalars.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+module m\n+contains\n+  function mfoo (carg) result(res)\n+    character (:), allocatable :: res\n+    character (*) :: carg\n+    res = carg(2:4)\n+  end function\n+  function mbar (carg)\n+    character (:), allocatable :: mbar\n+    character (*) :: carg\n+    mbar = carg(2:13)\n+  end function\n+end module\n+\n+  use m\n+  character (:), allocatable :: lhs\n+  lhs = foo (\"foo calling \")\n+  if (lhs .ne. \"foo\") call abort\n+  if (len (lhs) .ne. 3) call abort\n+  deallocate (lhs)\n+  lhs = bar (\"bar calling - baaaa!\")\n+  if (lhs .ne. \"bar calling\") call abort\n+  if (len (lhs) .ne. 12) call abort\n+  deallocate (lhs)\n+  lhs = mfoo (\"mfoo calling \")\n+  if (lhs .ne. \"foo\") call abort\n+  if (len (lhs) .ne. 3) call abort\n+  deallocate (lhs)\n+  lhs = mbar (\"mbar calling - baaaa!\")\n+  if (lhs .ne. \"bar calling\") call abort\n+  if (len (lhs) .ne. 12) call abort\n+contains\n+  function foo (carg) result(res)\n+    character (:), allocatable :: res\n+    character (*) :: carg\n+    res = carg(1:3)\n+  end function\n+  function bar (carg)\n+    character (:), allocatable :: bar\n+    character (*) :: carg\n+    bar = carg(1:12)\n+  end function\n+end"}, {"sha": "db4233d5f774f8bfc19d0c642ea0df995c461577", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_5.f03", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dafdf26963a622e074aeeeab399fbe33521d1baa/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_5.f03?ref=dafdf26963a622e074aeeeab399fbe33521d1baa", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! Test the fix for PR47523 in which concatenations did not work\n+! correctly with assignments to deferred character length scalars.\n+!\n+! Contributed by Thomas Koenig  <tkoenig@gcc.gnu.org>\n+!\n+program main\n+  implicit none\n+  character(:), allocatable :: a, b\n+  a = 'a'\n+  if (a .ne. 'a') call abort\n+  a = a // 'x'\n+  if (a .ne. 'ax') call abort\n+  if (len (a) .ne. 2) call abort\n+  a = (a(2:2))\n+  if (a .ne. 'x') call abort\n+  if (len (a) .ne. 1) call abort\n+end program main"}]}