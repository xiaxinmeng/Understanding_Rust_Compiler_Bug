{"sha": "e0f391dd9030fce35ef9bb3592c1115f56c5a615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmMzkxZGQ5MDMwZmNlMzVlZjliYjM1OTJjMTExNWY1NmM1YTYxNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-05-24T19:22:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-05-24T19:22:03Z"}, "message": "builtins.c (define_builtin): Don't call make_decl_rtl.\n\n        * builtins.c (define_builtin): Don't call make_decl_rtl.\n        * constants.c (build_constant_data_ref): Likewise.\n        * class.c (build_utf8_ref): Likewise.\n        (build_fieldref_cache_entry, build_static_field_ref): Likewise.\n        (get_dispatch_table, layout_class_method): Likewise.\n        (build_class_ref): Likewise. Don't set DECL_SIZE or DECL_SIZE_UNIT\n        by hand.\n        (make_local_function_alias): Don't SET_DECL_ASSEMBLER_NAME.\n        (make_method_value): Use METHOD_ABSTRACT instead of DECL_RTL_SET_P\n        to determine if we need a non-zero address.\n        * decl.c (builtin_function): Don't call make_decl_rtl.\n        (give_name_to_locals): Don't SET_DECL_ASSEMBLER_NAME.\n        * expr.c (build_known_method_ref): Don't call make_decl_rtl.\n        * resource.c (compile_resource_data): Likewise.\n        * parse.y (resolve_field_access): Re-word comment to avoid\n        building DECL_RTL.\n\nFrom-SVN: r100108", "tree": {"sha": "4a60193fab42a6c6d1b45415aecfc9c782a4737b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a60193fab42a6c6d1b45415aecfc9c782a4737b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f391dd9030fce35ef9bb3592c1115f56c5a615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f391dd9030fce35ef9bb3592c1115f56c5a615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f391dd9030fce35ef9bb3592c1115f56c5a615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f391dd9030fce35ef9bb3592c1115f56c5a615/comments", "author": null, "committer": null, "parents": [{"sha": "8cfb12bfd597944d043b187199d23b3fc8381612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfb12bfd597944d043b187199d23b3fc8381612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfb12bfd597944d043b187199d23b3fc8381612"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "8617681c39b59ca3f88bff9d6f6bfbae5f6a5c24", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -1,3 +1,22 @@\n+2005-05-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* builtins.c (define_builtin): Don't call make_decl_rtl.\n+\t* constants.c (build_constant_data_ref): Likewise.\n+\t* class.c (build_utf8_ref): Likewise.\n+\t(build_fieldref_cache_entry, build_static_field_ref): Likewise.\n+\t(get_dispatch_table, layout_class_method): Likewise.\n+\t(build_class_ref): Likewise. Don't set DECL_SIZE or DECL_SIZE_UNIT\n+\tby hand.\n+\t(make_local_function_alias): Don't SET_DECL_ASSEMBLER_NAME.\n+\t(make_method_value): Use METHOD_ABSTRACT instead of DECL_RTL_SET_P\n+\tto determine if we need a non-zero address.\n+\t* decl.c (builtin_function): Don't call make_decl_rtl.\n+\t(give_name_to_locals): Don't SET_DECL_ASSEMBLER_NAME.\n+\t* expr.c (build_known_method_ref): Don't call make_decl_rtl.\n+\t* resource.c (compile_resource_data): Likewise.\n+\t* parse.y (resolve_field_access): Re-word comment to avoid\n+\tbuilding DECL_RTL.\n+\n 2005-05-24  Richard Henderson  <rth@redhat.com>\n \n \t* class.c (registered_class): Take it out of class_roots; turn into"}, {"sha": "63cbfac2789e1df1e9f2fead6360142ba72136f1", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -144,7 +144,6 @@ define_builtin (enum built_in_function val,\n   DECL_EXTERNAL (decl) = 1;\n   TREE_PUBLIC (decl) = 1;\n   SET_DECL_ASSEMBLER_NAME (decl, get_identifier (libname));\n-  make_decl_rtl (decl);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (decl) = val;"}, {"sha": "56163510c756c64836767014cb1c7a85a5d4953c", "filename": "gcc/java/class.c", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -916,7 +916,6 @@ build_utf8_ref (tree name)\n   rest_of_decl_compilation (decl, global_bindings_p (), 0);\n   cgraph_varpool_mark_needed_node (cgraph_varpool_node (decl));\n   utf8_decl_list = decl;\n-  make_decl_rtl (decl);\n   ref = build1 (ADDR_EXPR, utf8const_ptr_type, decl);\n   IDENTIFIER_UTF8_REF (name) = ref;\n   return ref;\n@@ -948,9 +947,9 @@ build_class_ref (tree type)\n       if (TREE_CODE (type) == POINTER_TYPE)\n \ttype = TREE_TYPE (type);\n \n-      if  (flag_indirect_dispatch\n-\t   && type != output_class\n-\t   && TREE_CODE (type) == RECORD_TYPE)\n+      if (flag_indirect_dispatch\n+\t  && type != output_class\n+\t  && TREE_CODE (type) == RECORD_TYPE)\n \treturn build_indirect_class_ref (type);\n \n       if (TREE_CODE (type) == RECORD_TYPE)\n@@ -963,8 +962,6 @@ build_class_ref (tree type)\n \t  if (decl == NULL_TREE)\n \t    {\n \t      decl = build_decl (VAR_DECL, decl_name, class_type_node);\n-\t      DECL_SIZE (decl) = TYPE_SIZE (class_type_node);\n-\t      DECL_SIZE_UNIT (decl) = TYPE_SIZE_UNIT (class_type_node);\n \t      TREE_STATIC (decl) = 1;\n \t      TREE_PUBLIC (decl) = 1;\n \t      DECL_IGNORED_P (decl) = 1;\n@@ -974,7 +971,6 @@ build_class_ref (tree type)\n \t      SET_DECL_ASSEMBLER_NAME (decl, \n \t\t\t\t       java_mangle_class_field\n \t\t\t\t       (&temporary_obstack, type));\n-\t      make_decl_rtl (decl);\n \t      pushdecl_top_level (decl);\n \t    }\n \t}\n@@ -1027,7 +1023,6 @@ build_class_ref (tree type)\n \t      TREE_PUBLIC (decl) = 1;\n \t      DECL_EXTERNAL (decl) = 1;\n \t      DECL_ARTIFICIAL (decl) = 1;\n-\t      make_decl_rtl (decl);\n \t      pushdecl_top_level (decl);\n \t    }\n \t}\n@@ -1058,7 +1053,6 @@ build_fieldref_cache_entry (int index, tree fdecl ATTRIBUTE_UNUSED)\n       TREE_PUBLIC (decl) = 0;\n       DECL_EXTERNAL (decl) = 0;\n       DECL_ARTIFICIAL (decl) = 1;\n-      make_decl_rtl (decl);\n       pushdecl_top_level (decl);\n     }\n   return decl;\n@@ -1083,12 +1077,8 @@ build_static_field_ref (tree fdecl)\n \t      || JNUMERIC_TYPE_P (TREE_TYPE (fdecl)))\n \t  && TREE_CONSTANT (DECL_INITIAL (fdecl))))\n     {\n-      if (!DECL_RTL_SET_P (fdecl))\n-\t{\n-\t  if (is_compiled == 1)\n-\t    DECL_EXTERNAL (fdecl) = 1;\n-\t  make_decl_rtl (fdecl);\n-\t}\n+      if (is_compiled == 1)\n+\tDECL_EXTERNAL (fdecl) = 1;\n     }\n   else\n     {\n@@ -1240,7 +1230,6 @@ make_local_function_alias (tree method)\n   DECL_INITIAL (alias) = error_mark_node;\n   TREE_ADDRESSABLE (alias) = 1;\n   TREE_USED (alias) = 1;\n-  SET_DECL_ASSEMBLER_NAME (alias, DECL_NAME (alias));\n   TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (alias)) = 1;\n   if (!flag_syntax_only)\n     assemble_alias (alias, DECL_ASSEMBLER_NAME (method));\n@@ -1320,7 +1309,7 @@ make_method_value (tree mdecl)\n     index = integer_minus_one_node;\n \n   code = null_pointer_node;\n-  if (DECL_RTL_SET_P (mdecl))\n+  if (!METHOD_ABSTRACT (mdecl))\n     code = build1 (ADDR_EXPR, nativecode_ptr_type_node, \n \t\t   make_local_function_alias (mdecl));\n   START_RECORD_CONSTRUCTOR (minit, method_type_node);\n@@ -1442,9 +1431,6 @@ get_dispatch_table (tree type, tree this_class_addr)\n \t}\n       else\n \t{\n-\t  if (!DECL_RTL_SET_P (method))\n-\t    make_decl_rtl (method);\n-\n \t  if (TARGET_VTABLE_USES_DESCRIPTORS)\n \t    for (j = 0; j < TARGET_VTABLE_USES_DESCRIPTORS; ++j)\n \t      {\n@@ -2335,12 +2321,6 @@ layout_class_method (tree this_class, tree super_class,\n   SET_DECL_ASSEMBLER_NAME (method_decl,\n \t\t\t   java_mangle_decl (&temporary_obstack, \n \t\t\t\t\t     method_decl));\n-  /* We don't generate a RTL for the method if it's abstract, or if\n-     it's an interface method that isn't clinit. */\n-  if (! METHOD_ABSTRACT (method_decl) \n-      || (CLASS_INTERFACE (TYPE_NAME (this_class)) \n-\t  && (DECL_CLINIT_P (method_decl))))\n-    make_decl_rtl (method_decl);\n \n   if (ID_INIT_P (method_name))\n     {"}, {"sha": "196da58310693921b727d21e9bc76d9c1b0732be", "filename": "gcc/java/constants.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -446,7 +446,6 @@ build_constant_data_ref (void)\n \n       decl = build_decl (VAR_DECL, decl_name, type);\n       TREE_STATIC (decl) = 1;\n-      make_decl_rtl (decl);\n       TYPE_CPOOL_DATA_REF (output_class) = decl;\n     }\n "}, {"sha": "5b693cb50f662dcca57fc2f26054faf5f82cb74b", "filename": "gcc/java/decl.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -558,7 +558,6 @@ builtin_function (const char *name,\n   TREE_PUBLIC (decl) = 1;\n   if (library_name)\n     SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));\n-  make_decl_rtl (decl);\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = cl;\n   DECL_FUNCTION_CODE (decl) = function_code;\n@@ -1854,7 +1853,6 @@ give_name_to_locals (JCF *jcf)\n \t{\n \t  tree decl = TREE_VEC_ELT (decl_map, slot);\n \t  DECL_NAME (decl) = name;\n-\t  SET_DECL_ASSEMBLER_NAME (decl, name);\n \t  if (TREE_CODE (decl) != PARM_DECL || TREE_TYPE (decl) != type)\n \t    warning (0, \"bad type in parameter debug info\");\n \t}\n@@ -1921,7 +1919,6 @@ give_name_to_locals (JCF *jcf)\n \t      sprintf (buffer, \"ARG_%d\", arg_i);\n \t      DECL_NAME (parm) = get_identifier (buffer);\n \t    }\n-\t  SET_DECL_ASSEMBLER_NAME (parm, DECL_NAME (parm));\n \t}\n     }\n }\n@@ -2127,6 +2124,11 @@ java_mark_decl_local (tree decl)\n \n   /* If we've already constructed DECL_RTL, give encode_section_info\n      a second chance, now that we've changed the flags.  */\n+  /* ??? Ideally, we'd have flag_unit_at_a_time set, and not have done\n+     anything that would have referenced DECL_RTL so far.  But at the\n+     moment we force flag_unit_at_a_time off due to excessive memory\n+     consumption when compiling large jar files.  Which probably means\n+     that we need to re-order how we process jar files...  */\n   if (DECL_RTL_SET_P (decl))\n     make_decl_rtl (decl);\n }"}, {"sha": "b48847126b850bd7001cccf139d2420225ba356c", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -2050,7 +2050,6 @@ build_known_method_ref (tree method, tree method_type ATTRIBUTE_UNUSED,\n       if (! flag_indirect_dispatch \n \t  || (! DECL_EXTERNAL (method) && ! TREE_PUBLIC (method)))\n \t{\n-\t  make_decl_rtl (method);\n \t  func = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (method)),\n \t\t\t method);\n \t}"}, {"sha": "388062e625a348d34239a098aebd0135671ed6a1", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -9550,11 +9550,7 @@ resolve_field_access (tree qual_wfl, tree *field_decl, tree *field_type)\n       field_ref = length;\n \n       /* In case we're dealing with a static array, we need to\n-\t initialize its class before the array length can be fetched.\n-\t It's also a good time to create a DECL_RTL for the field if\n-\t none already exists, otherwise if the field was declared in a\n-\t class found in an external file and hasn't been (and won't\n-\t be) accessed for its value, none will be created. */\n+\t initialize its class before the array length can be fetched.  */\n       if (TREE_CODE (where_found) == VAR_DECL && FIELD_STATIC (where_found))\n \t{\n \t  build_static_field_ref (where_found);"}, {"sha": "2a0b6909197bbb6e6bf8e9554c7fa99807878f0c", "filename": "gcc/java/resource.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f391dd9030fce35ef9bb3592c1115f56c5a615/gcc%2Fjava%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fresource.c?ref=e0f391dd9030fce35ef9bb3592c1115f56c5a615", "patch": "@@ -93,7 +93,6 @@ compile_resource_data (const char *name, const char *buffer, int length)\n   layout_decl (decl, 0);\n   pushdecl (decl);\n   rest_of_decl_compilation (decl, global_bindings_p (), 0);\n-  make_decl_rtl (decl);\n   cgraph_varpool_finalize_decl (decl);\n \n   resources = tree_cons (NULL_TREE, decl, resources);"}]}