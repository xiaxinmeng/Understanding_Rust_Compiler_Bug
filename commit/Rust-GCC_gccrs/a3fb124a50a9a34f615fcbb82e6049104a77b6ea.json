{"sha": "a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmYjEyNGE1MGE5YTM0ZjYxNWZjYmI4MmU2MDQ5MTA0YTc3YjZlYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-01T06:38:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-01T06:38:43Z"}, "message": "(do_ident): Substitute macros and output here.\n\n(directive_table): Turn off the pass_thru field for #ident.\n\nFrom-SVN: r5959", "tree": {"sha": "1e6cf692b5b79ead447efff71aebbd1531a6d60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e6cf692b5b79ead447efff71aebbd1531a6d60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fb124a50a9a34f615fcbb82e6049104a77b6ea/comments", "author": null, "committer": null, "parents": [{"sha": "568b388feb480ec060e28e27217a4330e8d34f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568b388feb480ec060e28e27217a4330e8d34f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568b388feb480ec060e28e27217a4330e8d34f8b"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "5bf87046a938286125440a259096500e70a21063", "filename": "gcc/cccp.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3fb124a50a9a34f615fcbb82e6049104a77b6ea/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3fb124a50a9a34f615fcbb82e6049104a77b6ea/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=a3fb124a50a9a34f615fcbb82e6049104a77b6ea", "patch": "@@ -905,7 +905,7 @@ static struct directive directive_table[] = {\n   {  4, do_sccs, \"sccs\", T_SCCS},\n #endif\n   {  6, do_pragma, \"pragma\", T_PRAGMA, 0, 0, 1},\n-  {  5, do_ident, \"ident\", T_IDENT, 0, 0, 1},\n+  {  5, do_ident, \"ident\", T_IDENT},\n   {  6, do_assert, \"assert\", T_ASSERT},\n   {  8, do_unassert, \"unassert\", T_UNASSERT},\n   {  -1, 0, \"\", T_UNUSED},\n@@ -6141,9 +6141,31 @@ static int\n do_ident (buf, limit)\n      U_CHAR *buf, *limit;\n {\n+  FILE_BUF trybuf;\n+  int len;\n+  FILE_BUF *op = &outbuf;\n+\n   /* Allow #ident in system headers, since that's not user's fault.  */\n   if (pedantic && !instack[indepth].system_header_p)\n     pedwarn (\"ANSI C does not allow `#ident'\");\n+\n+  trybuf = expand_to_temp_buffer (buf, limit, 0, 0);\n+  buf = (U_CHAR *) alloca (trybuf.bufp - trybuf.buf + 1);\n+  bcopy (trybuf.buf, buf, trybuf.bufp - trybuf.buf);\n+  limit = buf + (trybuf.bufp - trybuf.buf);\n+  len = (limit - buf);\n+  free (trybuf.buf);\n+\n+  /* Output directive name.  */\n+  check_expand (op, 8);\n+  bcopy (\"#ident \", op->bufp, 7);\n+  op->bufp += 7;\n+\n+  /* Output the expanded argument line.  */\n+  check_expand (op, len);\n+  bcopy (buf, op->bufp, len);\n+  op->bufp += len;\n+\n   return 0;\n }\n "}]}