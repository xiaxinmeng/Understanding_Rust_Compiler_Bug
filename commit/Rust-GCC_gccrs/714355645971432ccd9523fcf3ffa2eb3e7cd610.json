{"sha": "714355645971432ccd9523fcf3ffa2eb3e7cd610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0MzU1NjQ1OTcxNDMyY2NkOTUyM2ZjZjNmZmEyZWIzZTdjZDYxMA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-09-21T17:56:25Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-09-21T17:56:25Z"}, "message": "predicates.md (ca_operand): Allow subregs.\n\n2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n\n\t* config/rs6000/predicates.md (ca_operand): Allow subregs.\n\t(input_operand): Do not allow ca_operand.\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): For the\n\tcarry bit, allow SImode and Pmode.\n\t(rs6000_init_hard_regno_mode_ok): Make the carry bit class NO_REGS.\n\nFrom-SVN: r215429", "tree": {"sha": "935effe7731196db04a1efd09eb0a74086796fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/935effe7731196db04a1efd09eb0a74086796fd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/714355645971432ccd9523fcf3ffa2eb3e7cd610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714355645971432ccd9523fcf3ffa2eb3e7cd610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714355645971432ccd9523fcf3ffa2eb3e7cd610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714355645971432ccd9523fcf3ffa2eb3e7cd610/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1c173a32b193c4c75062cc8c3953e329d5cd7e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c173a32b193c4c75062cc8c3953e329d5cd7e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c173a32b193c4c75062cc8c3953e329d5cd7e88"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "26643bc7c8aa5f48a8268afb577dcd6130274b25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714355645971432ccd9523fcf3ffa2eb3e7cd610/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714355645971432ccd9523fcf3ffa2eb3e7cd610/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=714355645971432ccd9523fcf3ffa2eb3e7cd610", "patch": "@@ -1,3 +1,11 @@\n+2014-09-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (ca_operand): Allow subregs.\n+\t(input_operand): Do not allow ca_operand.\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): For the\n+\tcarry bit, allow SImode and Pmode.\n+\t(rs6000_init_hard_regno_mode_ok): Make the carry bit class NO_REGS.\n+\n 2014-09-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_call): Generate MS->SYSV extra"}, {"sha": "ae6e3ed60641ddd3b2c02e7a39f8778a34f02b88", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714355645971432ccd9523fcf3ffa2eb3e7cd610/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714355645971432ccd9523fcf3ffa2eb3e7cd610/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=714355645971432ccd9523fcf3ffa2eb3e7cd610", "patch": "@@ -116,8 +116,16 @@\n \n ;; Return 1 if op is the carry register.\n (define_predicate \"ca_operand\"\n-  (and (match_code \"reg\")\n-       (match_test \"CA_REGNO_P (REGNO (op))\")))\n+  (match_operand 0 \"register_operand\")\n+{\n+  if (GET_CODE (op) == SUBREG)\n+    op = SUBREG_REG (op);\n+\n+  if (!REG_P (op))\n+    return 0;\n+\n+  return CA_REGNO_P (REGNO (op));\n+})\n \n ;; Return 1 if op is a signed 5-bit constant integer.\n (define_predicate \"s5bit_cint_operand\"\n@@ -1121,6 +1129,10 @@\n       || GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n     return register_operand (op, mode);\n \n+  /* We don't allow moving the carry bit around.  */\n+  if (ca_operand (op, mode))\n+    return 0;\n+\n   /* The only cases left are integral modes one word or smaller (we\n      do not get called for MODE_CC values).  These can be in any\n      register.  */"}, {"sha": "62001b01a561ca489466d11ec6d65c8dcc8dd409", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714355645971432ccd9523fcf3ffa2eb3e7cd610/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714355645971432ccd9523fcf3ffa2eb3e7cd610/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=714355645971432ccd9523fcf3ffa2eb3e7cd610", "patch": "@@ -1780,7 +1780,7 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     return GET_MODE_CLASS (mode) == MODE_CC;\n \n   if (CA_REGNO_P (regno))\n-    return mode == BImode;\n+    return mode == Pmode || mode == SImode;\n \n   /* AltiVec only in AldyVec registers.  */\n   if (ALTIVEC_REGNO_P (regno))\n@@ -2475,7 +2475,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \n   rs6000_regno_regclass[LR_REGNO] = LINK_REGS;\n   rs6000_regno_regclass[CTR_REGNO] = CTR_REGS;\n-  rs6000_regno_regclass[CA_REGNO] = CA_REGS;\n+  rs6000_regno_regclass[CA_REGNO] = NO_REGS;\n   rs6000_regno_regclass[VRSAVE_REGNO] = VRSAVE_REGS;\n   rs6000_regno_regclass[VSCR_REGNO] = VRSAVE_REGS;\n   rs6000_regno_regclass[SPE_ACC_REGNO] = SPE_ACC_REGS;"}]}