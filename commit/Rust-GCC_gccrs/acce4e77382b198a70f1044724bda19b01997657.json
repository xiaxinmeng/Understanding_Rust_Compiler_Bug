{"sha": "acce4e77382b198a70f1044724bda19b01997657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjZTRlNzczODJiMTk4YTcwZjEwNDQ3MjRiZGExOWIwMTk5NzY1Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-04-06T11:08:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-04-06T11:08:17Z"}, "message": "tm.texi.in: Document C target hooks as separate from general target hooks.\n\n\t* doc/tm.texi.in: Document C target hooks as separate from general\n\ttarget hooks.\n\t* doc/tm.texi: Regenerate.\n\t* genhooks.c (struct hook_desc): Add docname field.\n\t(HOOK_VECTOR_1, DEFHOOKPOD, DEFHOOK, DEFHOOK_UNDOC).  Initialize\n\tdocname field.\n\t(hook_array): Include c-target.def.\n\t(emit_documentation): Use docname field in output.\n\t(emit_init_macros): Take docname argument.  Only emit definitions\n\tfor hooks matching docname.\n\t(main): Expect additional arguments in all cases.  Pass argument\n\tto emit_init_macros.\n\t* target.def: Move initial macro definitions and comments to\n\ttarget-hooks-macros.h.\n\t(gcc_targetcm): Move to c-family/c-target.def.\n\t* target.h (targetcm): Move declaration to c-family/c-target.h.\n\t* targhooks.c (default_handle_c_option): Move to\n\tc-family/c-opts.c.\n\t* targhooks.h (default_handle_c_option): Move declaration to\n\tc-family/c-common.h.\n\t* target-hooks-macros.h: New file.\n\t* config.gcc (target_has_targetcm): Define and use to add to\n\tc_target_objs and cxx_target_objs.\n\t* config/default-c.c: New file.\n\t* config/darwin-c.c: Include c-target.h and c-target-def.h instead\n\tof target.h and target-def.h.\n\t(TARGET_HANDLE_C_OPTION, targetcm): Define later in file.\n\t(darwin_objc_construct_string, darwin_cfstring_ref_p,\n\tdarwin_check_cfstring_format_arg): Make static.\n\t(TARGET_OBJC_CONSTRUCT_STRING_OBJECT,\n\tTARGET_STRING_OBJECT_REF_TYPE_P,\n\tTARGET_CHECK_STRING_OBJECT_FORMAT_ARG): Define here.\n\t* config/darwin-protos.h (darwin_objc_construct_string,\n\tdarwin_cfstring_ref_p, darwin_check_cfstring_format_arg): Don't\n\tdeclare.\n\t* config/darwin.h (TARGET_OBJC_CONSTRUCT_STRING_OBJECT,\n\tTARGET_STRING_OBJECT_REF_TYPE_P,\n\tTARGET_CHECK_STRING_OBJECT_FORMAT_ARG, TARGET_HAS_TARGETCM):\n\tRemove.\n\t* config/t-darwin (darwin-c.o): Update dependencies.\n\t* system.h (TARGET_HAS_TARGETCM): Poison.\n\t* Makefile.in (TARGET_H): Update.\n\t(TARGET_DEF, C_TARGET_DEF, C_TARGET_H, C_TARGET_DEF_H): Define.\n\t(c-family/c-format.o, c-family/c-opts.o): Update dependencies.\n\t(default-c.o): New target.\n\t(s-target-hooks-def-h): Pass \"Target Hook\" string to genhooks.\n\t(c-family/c-target-hooks-def.h, s-c-target-hooks-def-h): New\n\ttargets.\n\t(s-tm-texi): Pass -d option to genhooks.  Also test timestamp on\n\tc-target.def.\n\t(build/genhooks.o): Update dependencies.\n\nc-family:\n\t* c-target-def.h: New file.\n\t* c-target.def: New file.\n\t* c-target.h: New file.\n\t* c-common.c (targetcm): Don't define here.\n\t* c-common.h (default_handle_c_option): Declare.\n\t* c-format.c: Include c-target.h instead of target.h.\n\t* c-opts.c: Include c-target.h instead of target.h.  Explicitly\n\tinclude tm.h.\n\t(default_handle_c_option): Move from targhooks.c.\n\nobjc:\n\t* objc-act.c: Include c-target.h instead of target.h.\n\t* Make-lang.in (objc/objc-act.o): Update dependencies.\n\nFrom-SVN: r172035", "tree": {"sha": "8e4c7045bc87ed3ed6e71d6b4f137a6be8e21970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e4c7045bc87ed3ed6e71d6b4f137a6be8e21970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acce4e77382b198a70f1044724bda19b01997657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acce4e77382b198a70f1044724bda19b01997657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acce4e77382b198a70f1044724bda19b01997657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acce4e77382b198a70f1044724bda19b01997657/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275b4baa7103f181bf0d7a7e3b97497d6b678ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275b4baa7103f181bf0d7a7e3b97497d6b678ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275b4baa7103f181bf0d7a7e3b97497d6b678ce6"}], "stats": {"total": 645, "additions": 457, "deletions": 188}, "files": [{"sha": "f413ed235e0edd26769a0eb9668127f1ebbf986b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,3 +1,57 @@\n+2011-04-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/tm.texi.in: Document C target hooks as separate from general\n+\ttarget hooks.\n+\t* doc/tm.texi: Regenerate.\n+\t* genhooks.c (struct hook_desc): Add docname field.\n+\t(HOOK_VECTOR_1, DEFHOOKPOD, DEFHOOK, DEFHOOK_UNDOC).  Initialize\n+\tdocname field.\n+\t(hook_array): Include c-target.def.\n+\t(emit_documentation): Use docname field in output.\n+\t(emit_init_macros): Take docname argument.  Only emit definitions\n+\tfor hooks matching docname.\n+\t(main): Expect additional arguments in all cases.  Pass argument\n+\tto emit_init_macros.\n+\t* target.def: Move initial macro definitions and comments to\n+\ttarget-hooks-macros.h.\n+\t(gcc_targetcm): Move to c-family/c-target.def.\n+\t* target.h (targetcm): Move declaration to c-family/c-target.h.\n+\t* targhooks.c (default_handle_c_option): Move to\n+\tc-family/c-opts.c.\n+\t* targhooks.h (default_handle_c_option): Move declaration to\n+\tc-family/c-common.h.\n+\t* target-hooks-macros.h: New file.\n+\t* config.gcc (target_has_targetcm): Define and use to add to\n+\tc_target_objs and cxx_target_objs.\n+\t* config/default-c.c: New file.\n+\t* config/darwin-c.c: Include c-target.h and c-target-def.h instead\n+\tof target.h and target-def.h.\n+\t(TARGET_HANDLE_C_OPTION, targetcm): Define later in file.\n+\t(darwin_objc_construct_string, darwin_cfstring_ref_p,\n+\tdarwin_check_cfstring_format_arg): Make static.\n+\t(TARGET_OBJC_CONSTRUCT_STRING_OBJECT,\n+\tTARGET_STRING_OBJECT_REF_TYPE_P,\n+\tTARGET_CHECK_STRING_OBJECT_FORMAT_ARG): Define here.\n+\t* config/darwin-protos.h (darwin_objc_construct_string,\n+\tdarwin_cfstring_ref_p, darwin_check_cfstring_format_arg): Don't\n+\tdeclare.\n+\t* config/darwin.h (TARGET_OBJC_CONSTRUCT_STRING_OBJECT,\n+\tTARGET_STRING_OBJECT_REF_TYPE_P,\n+\tTARGET_CHECK_STRING_OBJECT_FORMAT_ARG, TARGET_HAS_TARGETCM):\n+\tRemove.\n+\t* config/t-darwin (darwin-c.o): Update dependencies.\n+\t* system.h (TARGET_HAS_TARGETCM): Poison.\n+\t* Makefile.in (TARGET_H): Update.\n+\t(TARGET_DEF, C_TARGET_DEF, C_TARGET_H, C_TARGET_DEF_H): Define.\n+\t(c-family/c-format.o, c-family/c-opts.o): Update dependencies.\n+\t(default-c.o): New target.\n+\t(s-target-hooks-def-h): Pass \"Target Hook\" string to genhooks.\n+\t(c-family/c-target-hooks-def.h, s-c-target-hooks-def-h): New\n+\ttargets.\n+\t(s-tm-texi): Pass -d option to genhooks.  Also test timestamp on\n+\tc-target.def.\n+\t(build/genhooks.o): Update dependencies.\n+\n 2011-04-06  Richard Guenther  <rguenther@suse.de>\n  \n \t* ipa-inline.c (enum inlining_mode): Remove."}, {"sha": "2ff21e2475054d9b5f83999caebe30fab18b581c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -873,12 +873,17 @@ endif\n # Shorthand variables for dependency lists.\n VEC_H = vec.h statistics.h\n EXCEPT_H = except.h $(HASHTAB_H) vecprim.h vecir.h\n-TARGET_H = $(TM_H) target.h target.def insn-modes.h\n+TARGET_DEF = target.def target-hooks-macros.h\n+C_TARGET_DEF = c-family/c-target.def target-hooks-macros.h\n+TARGET_H = $(TM_H) target.h $(TARGET_DEF) insn-modes.h\n+C_TARGET_H = c-family/c-target.h $(C_TARGET_DEF)\n MACHMODE_H = machmode.h mode-classes.def insn-modes.h\n HOOKS_H = hooks.h $(MACHMODE_H)\n HOSTHOOKS_DEF_H = hosthooks-def.h $(HOOKS_H)\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h target-hooks-def.h $(HOOKS_H) targhooks.h\n+C_TARGET_DEF_H = c-family/c-target-def.h c-family/c-target-hooks-def.h \\\n+  $(TREE_H) $(C_COMMON_H) $(HOOKS_H)\n RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H) reg-notes.def insn-notes.def \\\n   $(INPUT_H) $(REAL_H) statistics.h $(VEC_H) $(FIXED_VALUE_H) alias.h \\\n   $(HASHTAB_H)\n@@ -2110,7 +2115,7 @@ c-family/c-dump.o : c-family/c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n c-family/c-format.o : c-family/c-format.c c-family/c-format.h \\\n \t$(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) langhooks.h \\\n-\t$(C_COMMON_H) $(FLAGS_H) intl.h \\\n+\t$(C_COMMON_H) $(FLAGS_H) intl.h $(C_TARGET_H) \\\n \t$(DIAGNOSTIC_CORE_H) alloc-pool.h c-family/c-objc.h\n \n c-family/c-gimplify.o : c-family/c-gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n@@ -2129,7 +2134,7 @@ c-family/c-omp.o : c-family/c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n c-family/c-opts.o : c-family/c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n         $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) toplev.h langhooks.h \\\n-        $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n+        $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H) $(C_TARGET_H) \\\n         $(OPTS_H) $(OPTIONS_H) $(MKDEPS_H) incpath.h cppdefault.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n@@ -2168,6 +2173,10 @@ c-family/c-ada-spec.o : c-family/c-ada-spec.c c-family/c-ada-spec.h \\\n c-family/stub-objc.o : c-family/stub-objc.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TREE_H) $(C_COMMON_H) c-family/c-objc.h\n \n+default-c.o: config/default-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(C_TARGET_H) $(C_TARGET_DEF_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n+\t  $< $(OUTPUT_OPTION)\n \n # Files used by all variants of C and some other languages.\n \n@@ -3659,11 +3668,21 @@ target-hooks-def.h: s-target-hooks-def-h; @true\n $(srcdir)/doc/tm.texi: s-tm-texi; @true\n \n s-target-hooks-def-h: build/genhooks$(build_exeext)\n-\t$(RUN_GEN) build/genhooks$(build_exeext) > tmp-target-hooks-def.h\n+\t$(RUN_GEN) build/genhooks$(build_exeext) \"Target Hook\" \\\n+\t\t\t\t\t     > tmp-target-hooks-def.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-target-hooks-def.h \\\n \t\t\t\t\t     target-hooks-def.h\n \t$(STAMP) s-target-hooks-def-h\n \n+c-family/c-target-hooks-def.h: s-c-target-hooks-def-h; @true\n+\n+s-c-target-hooks-def-h: build/genhooks$(build_exeext)\n+\t$(RUN_GEN) build/genhooks$(build_exeext) \"C Target Hook\" \\\n+\t\t\t\t\t     > tmp-c-target-hooks-def.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-c-target-hooks-def.h \\\n+\t\t\t\t\t     c-family/c-target-hooks-def.h\n+\t$(STAMP) s-c-target-hooks-def-h\n+\n # check if someone mistakenly only changed tm.texi.\n # We use a different pathname here to avoid a circular dependency.\n s-tm-texi: $(srcdir)/doc/../doc/tm.texi\n@@ -3673,7 +3692,7 @@ s-tm-texi: $(srcdir)/doc/../doc/tm.texi\n # \\r is not portable to Solaris tr, therefore we have a special\n # case for ASCII.  We use \\r for other encodings like EBCDIC.\n s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n-\t$(RUN_GEN) build/genhooks$(build_exeext) \\\n+\t$(RUN_GEN) build/genhooks$(build_exeext) -d \\\n \t\t\t$(srcdir)/doc/tm.texi.in > tmp-tm.texi\n \tcase `echo X|tr X '\\101'` in \\\n \t  A) tr -d '\\015' < tmp-tm.texi > tmp2-tm.texi ;; \\\n@@ -3684,7 +3703,9 @@ s-tm-texi: build/genhooks$(build_exeext) $(srcdir)/doc/tm.texi.in\n \t@if cmp -s $(srcdir)/doc/tm.texi tm.texi; then \\\n \t  $(STAMP) $@; \\\n \telif test $(srcdir)/doc/tm.texi -nt $(srcdir)/doc/tm.texi.in \\\n-\t  && test $(srcdir)/doc/tm.texi -nt $(srcdir)/target.def; then \\\n+\t  && ( test $(srcdir)/doc/tm.texi -nt $(srcdir)/target.def \\\n+\t    || test $(srcdir)/doc/tm.texi -nt $(srcdir)/c-family/c-target.def \\\n+\t  ); then \\\n \t  echo >&2 ; \\\n \t  echo You should edit $(srcdir)/doc/tm.texi.in rather than $(srcdir)/doc/tm.texi . >&2 ; \\\n \t  false; \\\n@@ -3897,7 +3918,8 @@ build/genpreds.o : genpreds.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h $(OBSTACK_H)\n build/genrecog.o : genrecog.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n-build/genhooks.o : genhooks.c target.def $(BCONFIG_H) $(SYSTEM_H) errors.h\n+build/genhooks.o : genhooks.c $(TARGET_DEF) $(C_TARGET_DEF)\t\t\\\n+  $(BCONFIG_H) $(SYSTEM_H) errors.h\n \n # Compile the programs that generate insn-* from the machine description.\n # They are compiled with $(COMPILER_FOR_BUILD), and associated libraries,"}, {"sha": "a7efe84e418b4649d6f6e0a20a541b8eafe2753d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,3 +1,15 @@\n+2011-04-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-target-def.h: New file.\n+\t* c-target.def: New file.\n+\t* c-target.h: New file.\n+\t* c-common.c (targetcm): Don't define here.\n+\t* c-common.h (default_handle_c_option): Declare.\n+\t* c-format.c: Include c-target.h instead of target.h.\n+\t* c-opts.c: Include c-target.h instead of target.h.  Explicitly\n+\tinclude tm.h.\n+\t(default_handle_c_option): Move from targhooks.c.\n+\n 2011-03-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/48248"}, {"sha": "1252b18b820c04a9fb2ff850789387ac1daba430", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -9252,10 +9252,6 @@ warn_for_unused_label (tree label)\n     }\n }\n \n-#ifndef TARGET_HAS_TARGETCM\n-struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;\n-#endif\n-\n /* Warn for division by zero according to the value of DIVISOR.  LOC\n    is the location of the division operator.  */\n "}, {"sha": "91e21ffe06429ba0c8781bb66f227d7c753b5d1e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -700,6 +700,7 @@ extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);\n extern bool c_common_handle_option (size_t, const char *, int, int, location_t,\n \t\t\t\t    const struct cl_option_handlers *);\n+extern bool default_handle_c_option (size_t, const char *, int);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);\n extern tree c_common_fixed_point_type_for_size (unsigned int, unsigned int,"}, {"sha": "801e4347da9fcdf47cad49bf414eaac44a88df0b", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,6 +1,6 @@\n /* Check calls to formatted I/O functions (-Wformat).\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -32,7 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"c-format.h\"\n #include \"alloc-pool.h\"\n-#include \"target.h\"\n+#include \"c-target.h\"\n \f\n /* Set format warning options according to a -Wformat=n option.  */\n "}, {"sha": "dd87591e6c87dfc4469ec07daaa64571adf0600a", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -36,7 +36,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"options.h\"\n #include \"mkdeps.h\"\n-#include \"target.h\"\t\t/* For gcc_targetcm.  */\n+#include \"c-target.h\"\n+#include \"tm.h\"\t\t\t/* For BYTES_BIG_ENDIAN,\n+\t\t\t\t   DOLLARS_IN_IDENTIFIERS,\n+\t\t\t\t   STDC_0_IN_SYSTEM_HEADERS,\n+\t\t\t\t   TARGET_FLT_EVAL_METHOD_NON_DEFAULT and\n+\t\t\t\t   TARGET_OPTF.  */\n #include \"tm_p.h\"\t\t/* For C_COMMON_OVERRIDE_OPTIONS.  */\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n@@ -809,6 +814,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n   return result;\n }\n \n+/* Default implementation of TARGET_HANDLE_C_OPTION.  */\n+\n+bool\n+default_handle_c_option (size_t code ATTRIBUTE_UNUSED,\n+\t\t\t const char *arg ATTRIBUTE_UNUSED,\n+\t\t\t int value ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n /* Post-switch processing.  */\n bool\n c_common_post_options (const char **pfilename)"}, {"sha": "00bdc25a0f007ba12a65133b1c419b76e2e531f2", "filename": "gcc/c-family/c-target-def.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-target-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-target-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target-def.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -0,0 +1,22 @@\n+/* Default initializers for C-family target hooks.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"c-family/c-target-hooks-def.h\"\n+#include \"tree.h\"\n+#include \"c-family/c-common.h\"\n+#include \"hooks.h\""}, {"sha": "356fe26680a92dccdedc61231ca2ac6c3cdd6b82", "filename": "gcc/c-family/c-target.def", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.def?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -0,0 +1,79 @@\n+/* Target hook definitions for C-family front ends.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* See target-hooks-macros.h for details of macros that should be\n+   provided by the including file, and how to use them here.  */\n+#include \"target-hooks-macros.h\"\n+\n+#undef HOOK_TYPE\n+#define HOOK_TYPE \"C Target Hook\"\n+\n+HOOK_VECTOR (TARGETCM_INITIALIZER, gcc_targetcm)\n+\n+#undef HOOK_PREFIX\n+#define HOOK_PREFIX \"TARGET_\"\n+\n+/* Handle target switch CODE (an OPT_* value).  ARG is the argument\n+   passed to the switch; it is NULL if no argument was.  VALUE is the\n+   value of ARG if CODE specifies a UInteger option, otherwise it is\n+   1 if the positive form of the switch was used and 0 if the negative\n+   form was.  Return true if the switch was valid.  */\n+DEFHOOK\n+(handle_c_option,\n+ \"\",\n+ bool, (size_t code, const char *arg, int value),\n+ default_handle_c_option)\n+\n+/* Targets may provide a string object type that can be used within\n+   and between C, C++, and Objective-C dialects.  */\n+\n+DEFHOOK\n+(objc_construct_string_object,\n+ \"Targets may provide a string object type that can be used within\\\n+ and between C, C++ and their respective Objective-C dialects.\\\n+ A string object might, for example, embed encoding and length information.\\\n+ These objects are considered opaque to the compiler and handled as references.\\\n+ An ideal implementation makes the composition of the string object\\\n+ match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep),\\\n+ allowing efficient interworking between C-only and Objective-C code.\\\n+ If a target implements string objects then this hook should return a\\\n+ reference to such an object constructed from the normal `C' string\\\n+ representation provided in @var{string}.\\\n+ At present, the hook is used by Objective-C only, to obtain a\\\n+ common-format string object when the target provides one.\",\n+ tree, (tree string),\n+ NULL)\n+ \n+DEFHOOK\n+(string_object_ref_type_p,\n+ \"If a target implements string objects then this hook should return\\\n+ @code{true} if @var{stringref} is a valid reference to such an object.\",\n+ bool, (const_tree stringref),\n+ hook_bool_const_tree_false)\n+\n+DEFHOOK\n+(check_string_object_format_arg,\n+ \"If a target implements string objects then this hook should should\\\n+  provide a facility to check the function arguments in @var{args_list}\\\n+  against the format specifiers in @var{format_arg} where the type of\\\n+  @var{format_arg} is one recognized as a valid string reference type.\",\n+ void, (tree format_arg, tree args_list),\n+ NULL)\n+ \n+HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "69ca4dd32c67b82fb27a14f036c39560c1edf972", "filename": "gcc/c-family/c-target.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fc-family%2Fc-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-target.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -0,0 +1,37 @@\n+/* Data structure definitions for target-specific C-family behavior.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.\n+\n+   In other words, you are welcome to use, share and improve this program.\n+   You are forbidden to forbid anyone else to use, share and improve\n+   what you give them.   Help stamp out software-hoarding!  */\n+\n+#ifndef GCC_C_TARGET_H\n+#define GCC_C_TARGET_H\n+\n+#define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n+#define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (* NAME) PARAMS;\n+#define DEFHOOK_UNDOC DEFHOOK\n+#define HOOKSTRUCT(FRAGMENT) FRAGMENT\n+\n+#include \"c-target.def\"\n+\n+/* Each target can provide their own.  */\n+extern struct gcc_targetcm targetcm;\n+\n+#endif /* GCC_C_TARGET_H */"}, {"sha": "811b8e1f22080434ded6d9e330dfcb216c5e8696", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -183,6 +183,9 @@\n #\n #  gnu_ld\t\tSet to yes or no depending on whether the target\n #\t\t\tsystem normally uses GNU ld.\n+#\n+#  target_has_targetcm\tSet to yes or no depending on whether the target\n+#\t\t\thas its own definition of targetcm.\n \n out_file=\n tmake_file=\n@@ -200,6 +203,7 @@ extra_options=\n c_target_objs=\n cxx_target_objs=\n fortran_target_objs=\n+target_has_targetcm=no\n tm_defines=\n xm_defines=\n # Set this to force installation and use of collect2.\n@@ -478,6 +482,7 @@ case ${target} in\n   c_target_objs=\"${c_target_objs} darwin-c.o\"\n   cxx_target_objs=\"${cxx_target_objs} darwin-c.o\"\n   fortran_target_objs=\"darwin-f.o\"\n+  target_has_targetcm=yes\n   extra_objs=\"darwin.o\"\n   extra_gcc_objs=\"darwin-driver.o\"\n   default_use_cxa_atexit=yes\n@@ -2661,6 +2666,11 @@ powerpc*-*-* | rs6000-*-*)\n \ttm_file=\"${tm_file} rs6000/option-defaults.h\"\n esac\n \n+if [ \"$target_has_targetcm\" = \"no\" ]; then\n+  c_target_objs=\"$c_target_objs default-c.o\"\n+  cxx_target_objs=\"$cxx_target_objs default-c.o\"\n+fi\n+\n # Support for --with-cpu and related options (and a few unrelated options,\n # too).\n case ${with_cpu} in"}, {"sha": "08de2f8ef6c3f2d2a5bf80c0c4dc962d80ab12c7", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,5 +1,5 @@\n /* Darwin support needed only by C/C++ frontends.\n-   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2010\n+   Copyright (C) 2001, 2003, 2004, 2005, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n@@ -34,8 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"cppdefault.h\"\n #include \"prefix.h\"\n-#include \"target.h\"\n-#include \"target-def.h\"\n+#include \"c-family/c-target.h\"\n+#include \"c-family/c-target-def.h\"\n \n /* Pragmas.  */\n \n@@ -660,13 +660,8 @@ handle_c_option (size_t code,\n   return true;\n }\n \n-#undef TARGET_HANDLE_C_OPTION\n-#define TARGET_HANDLE_C_OPTION handle_c_option\n-\n-struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;\n-\n /* Allow ObjC* access to CFStrings.  */\n-tree\n+static tree\n darwin_objc_construct_string (tree str)\n {\n   if (!darwin_constant_cfstrings)\n@@ -685,7 +680,7 @@ darwin_objc_construct_string (tree str)\n /* The string ref type is created as CFStringRef by <CFBase.h> therefore, we\n    must match for it explicitly, since it's outside the gcc code.  */\n \n-bool\n+static bool\n darwin_cfstring_ref_p (const_tree strp)\n {\n   tree tn;\n@@ -701,7 +696,7 @@ darwin_cfstring_ref_p (const_tree strp)\n }\n \n /* At present the behavior of this is undefined and it does nothing.  */\n-void\n+static void\n darwin_check_cfstring_format_arg (tree ARG_UNUSED (format_arg), \n \t\t\t\t  tree ARG_UNUSED (args_list))\n {\n@@ -715,3 +710,17 @@ EXPORTED_CONST format_kind_info darwin_additional_format_types[] = {\n     NULL, NULL\n   }\n };\n+\n+#undef TARGET_HANDLE_C_OPTION\n+#define TARGET_HANDLE_C_OPTION handle_c_option\n+\n+#undef TARGET_OBJC_CONSTRUCT_STRING_OBJECT\n+#define TARGET_OBJC_CONSTRUCT_STRING_OBJECT darwin_objc_construct_string\n+\n+#undef TARGET_STRING_OBJECT_REF_TYPE_P\n+#define TARGET_STRING_OBJECT_REF_TYPE_P darwin_cfstring_ref_p\n+\n+#undef TARGET_CHECK_STRING_OBJECT_FORMAT_ARG\n+#define TARGET_CHECK_STRING_OBJECT_FORMAT_ARG darwin_check_cfstring_format_arg\n+\n+struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;"}, {"sha": "150230df367a1b20430fbc0b13e07055167933a5", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -112,10 +112,7 @@ extern void darwin_cpp_builtins (struct cpp_reader *);\n \n extern tree darwin_init_cfstring_builtins (unsigned);\n extern tree darwin_fold_builtin (tree, int, tree *, bool);\n-extern tree darwin_objc_construct_string (tree);\n extern bool darwin_cfstring_p (tree);\n-extern bool darwin_cfstring_ref_p (const_tree);\n-extern void darwin_check_cfstring_format_arg (tree, tree);\n extern tree darwin_build_constant_cfstring (tree);\n extern void darwin_enter_string_into_cfstring_table (tree);\n "}, {"sha": "4725015a138df3cdd956ca32f55b5b730992437a", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -965,20 +965,9 @@ __enable_execute_stack (void *addr)                                     \\\n /* We have target-specific builtins.  */\n #define TARGET_FOLD_BUILTIN darwin_fold_builtin\n \n-#define TARGET_OBJC_CONSTRUCT_STRING_OBJECT \\\n-  darwin_objc_construct_string\n-\n-#define TARGET_STRING_OBJECT_REF_TYPE_P \\\n-  darwin_cfstring_ref_p\n-\n #define TARGET_N_FORMAT_TYPES 1\n #define TARGET_FORMAT_TYPES darwin_additional_format_types\n \n-#define TARGET_CHECK_STRING_OBJECT_FORMAT_ARG \\\n-  darwin_check_cfstring_format_arg\n-\n-#define TARGET_HAS_TARGETCM 1\n-\n #ifndef USED_FOR_TARGET\n extern void darwin_driver_init (unsigned int *,struct cl_decoded_option **);\n #define GCC_DRIVER_HOST_INITIALIZATION \\"}, {"sha": "7ca3d87edf336a396ce09191834fef79196391ab", "filename": "gcc/config/default-c.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdefault-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Fdefault-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdefault-c.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -0,0 +1,34 @@\n+/* Default C-family target hooks initializer.\n+   Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"c-family/c-target.h\"\n+#include \"c-family/c-target-def.h\"\n+\n+/* Do not include tm.h or tm_p.h here; if it is useful for a target to\n+   define some macros for the initializer in a header without defining\n+   targetcm itself (for example, because of interactions with some\n+   hooks depending on the target OS and others on the target\n+   architecture), create a separate tm_c.h for only the relevant\n+   definitions.  */\n+\n+struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;"}, {"sha": "1faafbe89d3800a98e1330405c94d308ab367c6a", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+# Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -29,7 +29,7 @@ darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h     \\\n \n darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(CPPLIB_H) $(TREE_H) $(C_PRAGMA_H) $(TM_P_H) \\\n-  incpath.h flags.h $(C_COMMON_H)\n+  incpath.h flags.h $(C_COMMON_H) $(C_TARGET_H) $(C_TARGET_DEF_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/darwin-c.c $(PREPROCESSOR_DEFINES)\n "}, {"sha": "e5938fe45f805337b0a3e388ece26f4344ed2149", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -91,6 +91,14 @@ form part of the @code{targetm} structure, it is documented below as a\n from being defined in the @file{.h} file to being part of the\n @code{targetm} structure.\n \n+Similarly, there is a @code{targetcm} variable for hooks that are\n+specific to front ends for C-family languages, documented as ``C\n+Target Hook''.  This is declared in @file{c-family/c-target.h}, the\n+the initializer @code{TARGETCM_INITIALIZER} in\n+@file{c-family/c-target-def.h}.  If targets initialize @code{targetcm}\n+themselves, they should set @code{target_has_targetcm=yes} in\n+@file{config.gcc}; otherwise a default definition is used.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver\n@@ -678,7 +686,7 @@ option was passed (@code{UNKNOWN_LOCATION} except for options passed\n via attributes).\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_HANDLE_C_OPTION (size_t @var{code}, const char *@var{arg}, int @var{value})\n+@deftypefn {C Target Hook} bool TARGET_HANDLE_C_OPTION (size_t @var{code}, const char *@var{arg}, int @var{value})\n This target hook is called whenever the user specifies one of the\n target-specific C language family options described by the @file{.opt}\n definition files(@pxref{Options}).  It has the opportunity to do some\n@@ -692,15 +700,15 @@ only available in the C (and related language) front ends, then you\n should use @code{TARGET_HANDLE_C_OPTION} instead.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_OBJC_CONSTRUCT_STRING_OBJECT (tree @var{string})\n+@deftypefn {C Target Hook} tree TARGET_OBJC_CONSTRUCT_STRING_OBJECT (tree @var{string})\n Targets may provide a string object type that can be used within and between C, C++ and their respective Objective-C dialects. A string object might, for example, embed encoding and length information. These objects are considered opaque to the compiler and handled as references. An ideal implementation makes the composition of the string object match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep), allowing efficient interworking between C-only and Objective-C code. If a target implements string objects then this hook should return a reference to such an object constructed from the normal `C' string representation provided in @var{string}. At present, the hook is used by Objective-C only, to obtain a common-format string object when the target provides one.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_STRING_OBJECT_REF_TYPE_P (const_tree @var{stringref})\n+@deftypefn {C Target Hook} bool TARGET_STRING_OBJECT_REF_TYPE_P (const_tree @var{stringref})\n If a target implements string objects then this hook should return @code{true} if @var{stringref} is a valid reference to such an object.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_CHECK_STRING_OBJECT_FORMAT_ARG (tree @var{format_arg}, tree @var{args_list})\n+@deftypefn {C Target Hook} void TARGET_CHECK_STRING_OBJECT_FORMAT_ARG (tree @var{format_arg}, tree @var{args_list})\n If a target implements string objects then this hook should should  provide a facility to check the function arguments in @var{args_list}  against the format specifiers in @var{format_arg} where the type of  @var{format_arg} is one recognized as a valid string reference type.\n @end deftypefn\n "}, {"sha": "27949d126af07830681bee6b7f1ff5e1922eebcc", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -91,6 +91,14 @@ form part of the @code{targetm} structure, it is documented below as a\n from being defined in the @file{.h} file to being part of the\n @code{targetm} structure.\n \n+Similarly, there is a @code{targetcm} variable for hooks that are\n+specific to front ends for C-family languages, documented as ``C\n+Target Hook''.  This is declared in @file{c-family/c-target.h}, the\n+the initializer @code{TARGETCM_INITIALIZER} in\n+@file{c-family/c-target-def.h}.  If targets initialize @code{targetcm}\n+themselves, they should set @code{target_has_targetcm=yes} in\n+@file{config.gcc}; otherwise a default definition is used.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver"}, {"sha": "89f60c9ce4438cd86a9dc79b87ee9cb919970a04", "filename": "gcc/genhooks.c", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fgenhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fgenhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenhooks.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,6 +1,6 @@\n /* Process target.def to create initialization macros definition in\n    target-hooks-def.h and documentation in target-hooks.texi.\n-   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -22,17 +22,18 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"errors.h\"\n \n-struct hook_desc { const char *doc, *type, *name, *param, *init; };\n+struct hook_desc { const char *doc, *type, *name, *param, *init, *docname; };\n static struct hook_desc hook_array[] = {\n-#define HOOK_VECTOR_1(NAME, FRAGMENT) \\\n-  { 0, 0, #NAME, 0, 0 },\n+#define HOOK_VECTOR_1(NAME, FRAGMENT)\t\\\n+  { 0, 0, #NAME, 0, 0, HOOK_TYPE },\n #define DEFHOOKPOD(NAME, DOC, TYPE, INIT) \\\n-  { DOC, #TYPE, HOOK_PREFIX #NAME, 0, #INIT },\n+  { DOC, #TYPE, HOOK_PREFIX #NAME, 0, #INIT, HOOK_TYPE },\n #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) \\\n-  { DOC, #TYPE, HOOK_PREFIX #NAME, #PARAMS, #INIT },\n+  { DOC, #TYPE, HOOK_PREFIX #NAME, #PARAMS, #INIT, HOOK_TYPE },\n #define DEFHOOK_UNDOC(NAME, DOC, TYPE, PARAMS, INIT) \\\n-  { \"*\", #TYPE, HOOK_PREFIX #NAME, #PARAMS, #INIT },\n+  { \"*\", #TYPE, HOOK_PREFIX #NAME, #PARAMS, #INIT, HOOK_TYPE },\n #include \"target.def\"\n+#include \"c-family/c-target.def\"\n #undef DEFHOOK\n };\n \n@@ -221,7 +222,7 @@ emit_documentation (const char *in_fname)\n \t      /* Print header.  Function-valued hooks have a parameter list, \n \t\t unlike POD-valued ones.  */\n \t      deftype = hook_array[i].param ? \"deftypefn\" : \"deftypevr\";\n-\t      printf (\"@%s {Target Hook} \", deftype);\n+\t      printf (\"@%s {%s} \", deftype, hook_array[i].docname);\n \t      if (strchr (hook_array[i].type, ' '))\n \t\tprintf (\"{%s}\", hook_array[i].type);\n \t      else\n@@ -249,8 +250,9 @@ emit_documentation (const char *in_fname)\n \t\t{\n \t\t  char *namex = upstrdup (hook_array[j].name);\n \n-\t\t  printf (\"\\n@%sx {Target Hook} {%s} %s\",\n-\t\t\t  deftype, hook_array[j].type, namex);\n+\t\t  printf (\"\\n@%sx {%s} {%s} %s\",\n+\t\t\t  deftype, hook_array[j].docname,\n+\t\t\t  hook_array[j].type, namex);\n \t\t}\n \t      if (hook_array[i].doc[0])\n \t\t{\n@@ -285,9 +287,10 @@ emit_documentation (const char *in_fname)\n \n /* Emit #defines to stdout (this will be redirected to generate\n    target-hook-def.h) which set target hooks initializer macros\n-   to their default values.  */\n+   to their default values.  These should only be emitted for hooks\n+   whose type is given by DOCNAME.  */\n static void\n-emit_init_macros (void)\n+emit_init_macros (const char *docname)\n {\n   int i;\n   const int MAX_NEST = 2;\n@@ -299,6 +302,9 @@ emit_init_macros (void)\n \t{\n \t  char *name = upstrdup (hook_array[i].name);\n \n+\t  if (strcmp (hook_array[i].docname, docname) != 0)\n+\t    continue;\n+\n \t  if (!hook_array[i].type)\n \t    {\n \t      if (*name)\n@@ -334,9 +340,9 @@ emit_init_macros (void)\n int\n main (int argc, char **argv)\n {\n-  if (argc >= 2)\n-    emit_documentation (argv[1]);\n+  if (argc >= 3)\n+    emit_documentation (argv[2]);\n   else\n-    emit_init_macros ();\n+    emit_init_macros (argv[1]);\n   return 0;\n }"}, {"sha": "5e0d5ab87dd1e639a6d6cd47ee80a415e35ff89f", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -1,3 +1,8 @@\n+2011-04-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* objc-act.c: Include c-target.h instead of target.h.\n+\t* Make-lang.in (objc/objc-act.o): Update dependencies.\n+\n 2011-03-06  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang-specs.h: Match -save-temps* instead of -save-temps."}, {"sha": "182ebf40c33f4b47a43cbbdb3a3be72c59e21247", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -98,7 +98,8 @@ objc/objc-next-runtime-abi-02.o: objc/objc-next-runtime-abi-02.c $(START_HDRS) \\\n objc/objc-act.o : objc/objc-act.c $(START_HDRS) $(GGC_H) \\\n    $(DIAGNOSTIC_CORE_H) toplev.h $(FLAGS_H) input.h $(FUNCTION_H) output.h debug.h \\\n    $(LANGHOOKS_DEF_H) $(HASHTAB_H) $(C_PRAGMA_H) gt-objc-objc-act.h $(OBSTACK_H) \\\n-   $(GIMPLE_H) objc/objc-runtime-shared-support.h objc/objc-runtime-hooks.h\n+   $(GIMPLE_H) objc/objc-runtime-shared-support.h objc/objc-runtime-hooks.h \\\n+   $(C_TARGET_H)\n \n objc.srcextra:\n "}, {"sha": "26a5aa99a6a1453d80c21a897d5c7b6f57af2dea", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"debug.h\"\n-#include \"target.h\"\n+#include \"c-family/c-target.h\"\n #include \"diagnostic-core.h\"\n #include \"intl.h\"\n #include \"cgraph.h\""}, {"sha": "c611fed4d53496a179c81c84e0b212924976948d", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -830,7 +830,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tFUNCTION_ARG_BOUNDARY MUST_USE_SJLJ_EXCEPTIONS US_SOFTWARE_GOFAST  \\\n \tUSING_SVR4_H SVR4_ASM_SPEC FUNCTION_ARG FUNCTION_ARG_ADVANCE\t   \\\n \tFUNCTION_INCOMING_ARG IRA_COVER_CLASSES TARGET_VERSION\t\t   \\\n-\tMACHINE_TYPE\n+\tMACHINE_TYPE TARGET_HAS_TARGETCM\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "3ef5ae391220051f457d68cd1b241daeb93f2bc5", "filename": "gcc/target-hooks-macros.h", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarget-hooks-macros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarget-hooks-macros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-hooks-macros.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -0,0 +1,82 @@\n+/* Common macros for target hook definitions.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The following macros should be provided by the including file:\n+\n+   DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT): Define a function-valued hook.\n+   DEFHOOKPOD(DOC, TYPE, NAME, INIT): Define a piece-of-data 'hook'.  */\n+\n+/* Defaults for optional macros:\n+   DEFHOOKPODX(NAME, TYPE, INIT): Like DEFHOOKPOD, but share documentation\n+   with the previous 'hook'.  */\n+#ifndef DEFHOOKPODX\n+#define DEFHOOKPODX(NAME, TYPE, INIT) DEFHOOKPOD (NAME, 0, TYPE, INIT)\n+#endif\n+   \n+/* HOOKSTRUCT(FRAGMENT): Declarator fragments to encapsulate all the\n+   members into a struct gcc_target, which in turn contains several\n+   sub-structs.  */\n+#ifndef HOOKSTRUCT\n+#define HOOKSTRUCT(FRAGMENT)\n+#endif\n+/* HOOK_VECTOR: Start a struct declaration, which then gets its own initializer.\n+   HOOK_VECTOR_END: Close a struct declaration, providing a member declarator\n+                    name for nested use.  */\n+#ifndef HOOK_VECTOR_1\n+#define HOOK_VECTOR_1(NAME, FRAGMENT) HOOKSTRUCT(FRAGMENT)\n+#endif\n+#define HOOK_VECTOR(INIT_NAME, SNAME) HOOK_VECTOR_1 (INIT_NAME, struct SNAME {)\n+#define HOOK_VECTOR_END(DECL_NAME) HOOK_VECTOR_1(,} DECL_NAME ;)\n+\n+/* FIXME: For pre-existing hooks, we can't place the documentation in the\n+   documentation field here till we get permission from the FSF to include\n+   it in GPLed software - the target hook documentation is so far only\n+   available under the GFDL.  */\n+\n+/* A hook should generally be documented by a string in the DOC parameter,\n+   which should contain texinfo markup.  If the documentation is only available\n+   under the GPL, but not under the GFDL, put it in a comment above the hook\n+   definition.  If the function declaration is available both under GPL and\n+   GFDL, but the documentation is only available under the GFDL, put the\n+   documentaton in tm.texi.in, heading with @hook <hookname> and closing\n+   the paragraph with @end deftypefn / deftypevr as appropriate, and marking\n+   the next autogenerated hook with @hook <hookname>.\n+   In both these cases, leave the DOC string empty, i.e. \"\".\n+   Sometimes, for some historic reason the function declaration \n+   has to be documented differently\n+   than what it is.  In that case, use DEFHOOK_UNDOC to supress auto-generation\n+   of documentation.  DEFHOOK_UNDOC takes a DOC string which it ignores, so\n+   you can put GPLed documentation string there if you have hopes that you\n+   can clear the declaration & documentation for GFDL distribution later,\n+   in which case you can then simply change the DEFHOOK_UNDOC to DEFHOOK\n+   to turn on the autogeneration of the documentation.\n+\n+    A documentation string of \"*\" means not to emit any documentation at all,\n+   and is mainly used internally for DEFHOOK_UNDOC.  It should generally not\n+   be used otherwise, but it has its use for exceptional cases where automatic\n+   documentation is not wanted, and the real documentation is elsewere, like\n+   for TARGET_ASM_{,UN}ALIGNED_INT_OP, which are hooks only for implementation\n+   purposes; they refer to structs, the components of which are documented as\n+   separate hooks TARGET_ASM_{,UN}ALIGNED_[HSDT]I_OP.\n+   A DOC string of 0 is for internal use of DEFHOOKPODX and special table\n+   entries only.  */\n+\n+/* Empty macro arguments are undefined in C90, so use an empty macro\n+   to close top-level hook structures.  */\n+#define C90_EMPTY_HACK"}, {"sha": "b25ca270edd90db90c614b28fdf50d240da0bcca", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 112, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -21,67 +21,14 @@\n    You are forbidden to forbid anyone else to use, share and improve\n    what you give them.   Help stamp out software-hoarding!  */\n \n-/* The following macros should be provided by the including file:\n-\n-   DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT): Define a function-valued hook.\n-   DEFHOOKPOD(DOC, TYPE, NAME, INIT): Define a piece-of-data 'hook'.  */\n-\n-/* Defaults for optional macros:\n-   DEFHOOKPODX(NAME, TYPE, INIT): Like DEFHOOKPOD, but share documentation\n-   with the previous 'hook'.  */\n-#ifndef DEFHOOKPODX\n-#define DEFHOOKPODX(NAME, TYPE, INIT) DEFHOOKPOD (NAME, 0, TYPE, INIT)\n-#endif\n-   \n-/* HOOKSTRUCT(FRAGMENT): Declarator fragments to encapsulate all the\n-   members into a struct gcc_target, which in turn contains several\n-   sub-structs.  */\n-#ifndef HOOKSTRUCT\n-#define HOOKSTRUCT(FRAGMENT)\n-#endif\n-/* HOOK_VECTOR: Start a struct declaration, which then gets its own initializer.\n-   HOOK_VECTOR_END: Close a struct declaration, providing a member declarator\n-                    name for nested use.  */\n-#ifndef HOOK_VECTOR_1\n-#define HOOK_VECTOR_1(NAME, FRAGMENT) HOOKSTRUCT(FRAGMENT)\n-#endif\n-#define HOOK_VECTOR(INIT_NAME, SNAME) HOOK_VECTOR_1 (INIT_NAME, struct SNAME {)\n-#define HOOK_VECTOR_END(DECL_NAME) HOOK_VECTOR_1(,} DECL_NAME ;)\n+/* See target-hooks-macros.h for details of macros that should be\n+   provided by the including file, and how to use them here.  */\n+#include \"target-hooks-macros.h\"\n \n-HOOK_VECTOR (TARGET_INITIALIZER, gcc_target)\n+#undef HOOK_TYPE\n+#define HOOK_TYPE \"Target Hook\"\n \n-/* FIXME: For pre-existing hooks, we can't place the documentation in the\n-   documentation field here till we get permission from the FSF to include\n-   it in GPLed software - the target hook documentation is so far only\n-   available under the GFDL.  */\n-\n-/* A hook should generally be documented by a string in the DOC parameter,\n-   which should contain texinfo markup.  If the documentation is only available\n-   under the GPL, but not under the GFDL, put it in a comment above the hook\n-   definition.  If the function declaration is available both under GPL and\n-   GFDL, but the documentation is only available under the GFDL, put the\n-   documentaton in tm.texi.in, heading with @hook <hookname> and closing\n-   the paragraph with @end deftypefn / deftypevr as appropriate, and marking\n-   the next autogenerated hook with @hook <hookname>.\n-   In both these cases, leave the DOC string empty, i.e. \"\".\n-   Sometimes, for some historic reason the function declaration \n-   has to be documented differently\n-   than what it is.  In that case, use DEFHOOK_UNDOC to supress auto-generation\n-   of documentation.  DEFHOOK_UNDOC takes a DOC string which it ignores, so\n-   you can put GPLed documentation string there if you have hopes that you\n-   can clear the declaration & documentation for GFDL distribution later,\n-   in which case you can then simply change the DEFHOOK_UNDOC to DEFHOOK\n-   to turn on the autogeneration of the documentation.\n-\n-   A documentation string of \"*\" means not to emit any documentation at all,\n-   and is mainly used internally for DEFHOOK_UNDOC.  It should generally not\n-   be used otherwise, but it has its use for exceptional cases where automatic\n-   documentation is not wanted, and the real documentation is elsewere, like\n-   for TARGET_ASM_{,UN}ALIGNED_INT_OP, which are hooks only for implementation\n-   purposes; they refer to structs, the components of which are documented as\n-   separate hooks TARGET_ASM_{,UN}ALIGNED_[HSDT]I_OP.\n-   A DOC string of 0 is for internal use of DEFHOOKPODX and special table\n-   entries only.  */\n+HOOK_VECTOR (TARGET_INITIALIZER, gcc_target)\n \n /* Functions that output assembler for the target.  */\n #define HOOK_PREFIX \"TARGET_ASM_\"\n@@ -2715,58 +2662,5 @@ DEFHOOKPOD\n \n /* Leave the boolean fields at the end.  */\n \n-/* Empty macro arguments are undefined in C90, so use an empty macro.  */\n-#define C90_EMPTY_HACK\n /* Close the 'struct gcc_target' definition.  */\n HOOK_VECTOR_END (C90_EMPTY_HACK)\n-\n-HOOK_VECTOR (TARGETCM_INITIALIZER, gcc_targetcm)\n-\n-/* Handle target switch CODE (an OPT_* value).  ARG is the argument\n-   passed to the switch; it is NULL if no argument was.  VALUE is the\n-   value of ARG if CODE specifies a UInteger option, otherwise it is\n-   1 if the positive form of the switch was used and 0 if the negative\n-   form was.  Return true if the switch was valid.  */\n-DEFHOOK\n-(handle_c_option,\n- \"\",\n- bool, (size_t code, const char *arg, int value),\n- default_handle_c_option)\n-\n-/* Targets may provide a string object type that can be used within\n-   and between C, C++, and Objective-C dialects.  */\n-\n-DEFHOOK\n-(objc_construct_string_object,\n- \"Targets may provide a string object type that can be used within\\\n- and between C, C++ and their respective Objective-C dialects.\\\n- A string object might, for example, embed encoding and length information.\\\n- These objects are considered opaque to the compiler and handled as references.\\\n- An ideal implementation makes the composition of the string object\\\n- match that of the Objective-C @code{NSString} (@code{NXString} for GNUStep),\\\n- allowing efficient interworking between C-only and Objective-C code.\\\n- If a target implements string objects then this hook should return a\\\n- reference to such an object constructed from the normal `C' string\\\n- representation provided in @var{string}.\\\n- At present, the hook is used by Objective-C only, to obtain a\\\n- common-format string object when the target provides one.\",\n- tree, (tree string),\n- NULL)\n- \n-DEFHOOK\n-(string_object_ref_type_p,\n- \"If a target implements string objects then this hook should return\\\n- @code{true} if @var{stringref} is a valid reference to such an object.\",\n- bool, (const_tree stringref),\n- hook_bool_const_tree_false)\n-\n-DEFHOOK\n-(check_string_object_format_arg,\n- \"If a target implements string objects then this hook should should\\\n-  provide a facility to check the function arguments in @var{args_list}\\\n-  against the format specifiers in @var{format_arg} where the type of\\\n-  @var{format_arg} is one recognized as a valid string reference type.\",\n- void, (tree format_arg, tree args_list),\n- NULL)\n- \n-HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "eae0b76a8995c52912ee622fc6770a1a619598a1", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -176,7 +176,4 @@ struct default_options\n \n extern struct gcc_target targetm;\n \n-/* Each target can provide their own.  */\n-extern struct gcc_targetcm targetcm;\n-\n #endif /* GCC_TARGET_H */"}, {"sha": "419f6b11f75a5232bc2e29180b4c8595775d8657", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -930,14 +930,6 @@ default_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n   return rclass;\n }\n \n-bool\n-default_handle_c_option (size_t code ATTRIBUTE_UNUSED,\n-\t\t\t const char *arg ATTRIBUTE_UNUSED,\n-\t\t\t int value ATTRIBUTE_UNUSED)\n-{\n-  return false;\n-}\n-\n /* By default, if flag_pic is true, then neither local nor global relocs\n    should be placed in readonly memory.  */\n "}, {"sha": "93f86bfe4b05d5f022f1e05d7df1f35505aaf4b5", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acce4e77382b198a70f1044724bda19b01997657/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=acce4e77382b198a70f1044724bda19b01997657", "patch": "@@ -129,7 +129,6 @@ extern reg_class_t default_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\t     secondary_reload_info *);\n extern void default_target_option_override (void);\n extern void hook_void_bitmap (bitmap);\n-extern bool default_handle_c_option (size_t, const char *, int);\n extern int default_reloc_rw_mask (void);\n extern tree default_mangle_decl_assembler_name (tree, tree);\n extern tree default_emutls_var_fields (tree, tree *);"}]}