{"sha": "4e61a9695a2292d4ba89a32a198606ef8bdced35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU2MWE5Njk1YTIyOTJkNGJhODlhMzJhMTk4NjA2ZWY4YmRjZWQzNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-06-16T11:24:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-06-16T11:24:10Z"}, "message": "call.c (build_method_call): Remove bogus code for two-argument delete.\n\n\t* call.c (build_method_call): Remove bogus code for two-argument\n\tdelete.\n\t* init.c (build_new_1): Expand on comment, and remove dead code.\n\nFrom-SVN: r27547", "tree": {"sha": "8eb25ccabadb40a37d53c31350c7586d347dbfc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb25ccabadb40a37d53c31350c7586d347dbfc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e61a9695a2292d4ba89a32a198606ef8bdced35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e61a9695a2292d4ba89a32a198606ef8bdced35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e61a9695a2292d4ba89a32a198606ef8bdced35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e61a9695a2292d4ba89a32a198606ef8bdced35/comments", "author": null, "committer": null, "parents": [{"sha": "75c613dbc5bfb736400045edde2af639cb266e26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c613dbc5bfb736400045edde2af639cb266e26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c613dbc5bfb736400045edde2af639cb266e26"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "4336252961673d2f7ba13eb3c5b4fb489c32810c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e61a9695a2292d4ba89a32a198606ef8bdced35", "patch": "@@ -1,5 +1,9 @@\n 1999-06-16  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* call.c (build_method_call): Remove bogus code for two-argument\n+\tdelete.\n+\t* init.c (build_new_1): Expand on comment, and remove dead code.\n+\n \t* init.c (expand_cleanup_for_base): New function, split out\n \tfrom ...\n \t(emit_base_init): Here."}, {"sha": "cdfba0441e1f6b6385a5ef90e302a68547a50cff", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4e61a9695a2292d4ba89a32a198606ef8bdced35", "patch": "@@ -474,29 +474,6 @@ build_method_call (instance, name, parms, basetype_path, flags)\n       return build_min_nt (METHOD_CALL_EXPR, name, instance, parms, NULL_TREE);\n     }\n \n-  /* This is the logic that magically deletes the second argument to\n-     operator delete, if it is not needed.  */\n-  if (name == ansi_opname[(int) DELETE_EXPR] && list_length (parms)==2)\n-    {\n-      tree save_last = TREE_CHAIN (parms);\n-\n-      /* get rid of unneeded argument */\n-      TREE_CHAIN (parms) = NULL_TREE;\n-      if (build_method_call (instance, name, parms, basetype_path,\n-\t\t\t     (LOOKUP_SPECULATIVELY|flags) & ~LOOKUP_COMPLAIN))\n-\t{\n-\t  /* If it finds a match, return it.  */\n-\t  return build_method_call (instance, name, parms, basetype_path, flags);\n-\t}\n-      /* If it doesn't work, two argument delete must work */\n-      TREE_CHAIN (parms) = save_last;\n-    }\n-  /* We already know whether it's needed or not for vec delete.  */\n-  else if (name == ansi_opname[(int) VEC_DELETE_EXPR]\n-\t   && TYPE_LANG_SPECIFIC (TREE_TYPE (instance))\n-\t   && ! TYPE_VEC_DELETE_TAKES_SIZE (TREE_TYPE (instance)))\n-    TREE_CHAIN (parms) = NULL_TREE;\n-\n   if (TREE_CODE (name) == BIT_NOT_EXPR)\n     {\n       if (parms)"}, {"sha": "019b5f9117757395a8ff3ff54b5a4b5f3a827f5e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4e61a9695a2292d4ba89a32a198606ef8bdced35", "patch": "@@ -2191,21 +2191,21 @@ build_new_1 (exp)\n       signature_error (NULL_TREE, true_type);\n       return error_mark_node;\n     }\n+  \n+  /* When we allocate an array, and the corresponding deallocation\n+     function takes a second argument of type size_t, and that's the\n+     \"usual deallocation function\", we allocate some extra space at\n+     the beginning of the array to store the size of the array.\n \n-#if 1\n-  /* Get a little extra space to store a couple of things before the new'ed\n-     array, if this isn't the default placement new.  */\n+     Well, that's what we should do.  For backwards compatibility, we\n+     have to do this whenever there's a two-argument array-delete\n+     operator. \n \n+     FIXME: For -fnew-abi, we don't have to maintain backwards\n+     compatibility and we should fix this.  */\n   use_cookie = (has_array && TYPE_VEC_NEW_USES_COOKIE (true_type)\n \t\t&& ! (placement && ! TREE_CHAIN (placement)\n \t\t      && TREE_TYPE (TREE_VALUE (placement)) == ptr_type_node));\n-#else\n-  /* Get a little extra space to store a couple of things before the new'ed\n-     array, if this is either non-placement new or new (nothrow).  */\n-  \n-  use_cookie = (has_array && TYPE_VEC_NEW_USES_COOKIE (true_type)\n-\t\t&& (! placement || nothrow));\n-#endif\n \n   if (use_cookie)\n     {"}, {"sha": "f1777a693b65146e287d9f01480cfd098310832d", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete6.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e61a9695a2292d4ba89a32a198606ef8bdced35/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete6.C?ref=4e61a9695a2292d4ba89a32a198606ef8bdced35", "patch": "@@ -0,0 +1,27 @@\n+// Origin: Alexander Schiemann (aschiem@count.math.uni-sb.de)\n+\n+int i;\n+\n+struct B{};\n+\n+struct A{\n+\n+  static void* operator new(unsigned int)\n+  {return &i;}\n+\n+  inline static void operator delete(void*p); \n+\n+  static void operator delete(void*, const B&){} \n+\n+};\n+\n+\n+inline void A::operator delete(void*p)\n+{A::operator delete(p,B());}\n+\n+\n+int main()\n+{A *ap=new A;\n+delete ap;}\n+\n+"}]}