{"sha": "87ca615aa6f400c64d0bf13088c0ffdd14e22830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjYTYxNWFhNmY0MDBjNjRkMGJmMTMwODhjMGZmZGQxNGUyMjgzMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-01-17T06:54:53Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-01-22T01:31:54Z"}, "message": "Fix target/93119 (aarch64): ICE with traditional TLS support on ILP32\n\nThe problem here was g:23b88fda665d2f995c was not a complete fix\nfor supporting tranditional TLS on ILP32.\n\nSo the problem here is a couple of things, first __tls_get_addr\ncall will return a C pointer value so we need to use ptr_mode\nwhen we are creating the call.  Then we need to convert\nback that register to the correct mode, either zero extending\nit or just creating a move instruction.\nAlso symbol_ref can either be in SImode or DImode.  So we need to\nallow both modes.\n\nBuilt and tested on aarch64-linux-gnu with no regressions.\nAlso built a full toolchain (including glibc) defaulting to traditional\nTLS that targets ilp32 and lp64.\n\nChangeLog:\nPR target/93119\n* config/aarch64/aarch64.md (tlsgd_small_<mode>): Have operand 0\nas PTR mode. Have operand 1 as being modeless, it can be P mode.\n(*tlsgd_small_<mode>): Likewise.\n* config/aarch64/aarch64.c (aarch64_load_symref_appropriately)\n<case SYMBOL_SMALL_TLSGD>: Call gen_tlsgd_small_* with a ptr_mode\nregister.  Convert that register back to dest using convert_mode.", "tree": {"sha": "ba64ee35b1ca11859330206faebda0f656292d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba64ee35b1ca11859330206faebda0f656292d28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87ca615aa6f400c64d0bf13088c0ffdd14e22830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca615aa6f400c64d0bf13088c0ffdd14e22830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ca615aa6f400c64d0bf13088c0ffdd14e22830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ca615aa6f400c64d0bf13088c0ffdd14e22830/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac68e287fc2e939ae6b45ba7ff04e493982b7f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac68e287fc2e939ae6b45ba7ff04e493982b7f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac68e287fc2e939ae6b45ba7ff04e493982b7f62"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "85cf788cc5062ce76bec8def1e8cba1cef9cffba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87ca615aa6f400c64d0bf13088c0ffdd14e22830", "patch": "@@ -1,3 +1,14 @@\n+2020-01-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/9311\n+\t* config/aarch64/aarch64.md (tlsgd_small_<mode>): Have operand 0\n+\tas PTR mode. Have operand 1 as being modeless, it can be P mode.\n+\t(*tlsgd_small_<mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately)\n+\t<case SYMBOL_SMALL_TLSGD>: Call gen_tlsgd_small_* with a ptr_mode\n+\tregister.  Convert that register back to dest using convert_mode.\n+\n+\n 2020-01-21  Jim Wilson  <jimw@sifive.com>\n \n \t* config/riscv/riscv-sr.c (riscv_sr_match_prologue): Use INTVAL"}, {"sha": "9acf33dbe6413a2bbce8d4537ff54e9266bed61f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=87ca615aa6f400c64d0bf13088c0ffdd14e22830", "patch": "@@ -2607,19 +2607,28 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n     case SYMBOL_SMALL_TLSGD:\n       {\n \trtx_insn *insns;\n-\tmachine_mode mode = GET_MODE (dest);\n-\trtx result = gen_rtx_REG (mode, R0_REGNUM);\n+\t/* The return type of __tls_get_addr is the C pointer type\n+\t   so use ptr_mode.  */\n+\trtx result = gen_rtx_REG (ptr_mode, R0_REGNUM);\n+\trtx tmp_reg = dest;\n+\n+\tif (GET_MODE (dest) != ptr_mode)\n+\t  tmp_reg = can_create_pseudo_p () ? gen_reg_rtx (ptr_mode) : result;\n \n \tstart_sequence ();\n-\tif (TARGET_ILP32)\n+\tif (ptr_mode == SImode)\n \t  aarch64_emit_call_insn (gen_tlsgd_small_si (result, imm));\n \telse\n \t  aarch64_emit_call_insn (gen_tlsgd_small_di (result, imm));\n \tinsns = get_insns ();\n \tend_sequence ();\n \n \tRTL_CONST_CALL_P (insns) = 1;\n-\temit_libcall_block (insns, dest, result, imm);\n+\temit_libcall_block (insns, tmp_reg, result, imm);\n+\t/* Convert back to the mode of the dest adding a zero_extend\n+\t   from SImode (ptr_mode) to DImode (Pmode). */\n+\tif (dest != tmp_reg)\n+\t  convert_move (dest, tmp_reg, true);\n \treturn;\n       }\n "}, {"sha": "55dde54b16a5ce8292a6ed86058102732cad522f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=87ca615aa6f400c64d0bf13088c0ffdd14e22830", "patch": "@@ -6755,21 +6755,21 @@\n ;; instructions in the TLS stubs, in order to enable linker relaxation.\n ;; Therefore we treat the stubs as an atomic sequence.\n (define_expand \"tlsgd_small_<mode>\"\n- [(parallel [(set (match_operand 0 \"register_operand\")\n+ [(parallel [(set (match_operand:PTR 0 \"register_operand\")\n                   (call (mem:DI (match_dup 2)) (const_int 1)))\n \t     (unspec:DI [(const_int 0)] UNSPEC_CALLEE_ABI)\n-\t     (unspec:DI [(match_operand:PTR 1 \"aarch64_valid_symref\")] UNSPEC_GOTSMALLTLS)\n+\t     (unspec:DI [(match_operand 1 \"aarch64_valid_symref\")] UNSPEC_GOTSMALLTLS)\n \t     (clobber (reg:DI LR_REGNUM))])]\n  \"\"\n {\n   operands[2] = aarch64_tls_get_addr ();\n })\n \n (define_insn \"*tlsgd_small_<mode>\"\n-  [(set (match_operand 0 \"register_operand\" \"\")\n+  [(set (match_operand:PTR 0 \"register_operand\" \"\")\n \t(call (mem:DI (match_operand:DI 2 \"\" \"\")) (const_int 1)))\n    (unspec:DI [(const_int 0)] UNSPEC_CALLEE_ABI)\n-   (unspec:DI [(match_operand:PTR 1 \"aarch64_valid_symref\" \"S\")] UNSPEC_GOTSMALLTLS)\n+   (unspec:DI [(match_operand 1 \"aarch64_valid_symref\" \"S\")] UNSPEC_GOTSMALLTLS)\n    (clobber (reg:DI LR_REGNUM))\n   ]\n   \"\""}, {"sha": "1be1b59ac02374125bf61d092bb5260e4e93a965", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87ca615aa6f400c64d0bf13088c0ffdd14e22830", "patch": "@@ -1,3 +1,8 @@\n+2020-01-21  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/93119\n+\t* gcc.target/aarch64/pr93119.c: New test.\n+\n 2020-01-22  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/93348"}, {"sha": "93fa80e10b68b89a14f736b9d2fec92a32c8790e", "filename": "gcc/testsuite/gcc.target/aarch64/pr93119.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87ca615aa6f400c64d0bf13088c0ffdd14e22830/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr93119.c?ref=87ca615aa6f400c64d0bf13088c0ffdd14e22830", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-mtls-dialect=trad -fpic\" } */\n+\n+__thread int g_tlsdata;\n+\n+int func1()\n+{\n+  g_tlsdata++;\n+  return g_tlsdata;\n+}"}]}