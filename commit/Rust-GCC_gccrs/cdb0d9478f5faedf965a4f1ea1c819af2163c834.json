{"sha": "cdb0d9478f5faedf965a4f1ea1c819af2163c834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RiMGQ5NDc4ZjVmYWVkZjk2NWE0ZjFlYTFjODE5YWYyMTYzYzgzNA==", "commit": {"author": {"name": "Nikolai Bozhenov", "email": "n.bozhenov@samsung.com", "date": "2015-11-09T23:29:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-09T23:29:36Z"}, "message": "[sched] Dump dependency graph to a dot file\n\n\t* sched-int.h (dump_rgn_dependencies_dot): Declare\n\t* sched-rgn.c (dump_rgn_dependencies_dot): New function\n\t* print-rtl.h (print_insn): Add prototype\n\nFrom-SVN: r230062", "tree": {"sha": "45a8b430f2eb5f7bee92f7102208cb17f39b9d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45a8b430f2eb5f7bee92f7102208cb17f39b9d6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdb0d9478f5faedf965a4f1ea1c819af2163c834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb0d9478f5faedf965a4f1ea1c819af2163c834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdb0d9478f5faedf965a4f1ea1c819af2163c834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdb0d9478f5faedf965a4f1ea1c819af2163c834/comments", "author": null, "committer": null, "parents": [{"sha": "4111f1c9b2a59ad85c9d26bb83153eff887960af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4111f1c9b2a59ad85c9d26bb83153eff887960af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4111f1c9b2a59ad85c9d26bb83153eff887960af"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "bf1f13aff789cec15c3cb8ee94560e69582cb06f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdb0d9478f5faedf965a4f1ea1c819af2163c834", "patch": "@@ -1,5 +1,9 @@\n 2015-11-09  Nikolai Bozhenov  <n.bozhenov@samsung.com>\n \n+\t* sched-int.h (dump_rgn_dependencies_dot): Declare\n+\t* sched-rgn.c (dump_rgn_dependencies_dot): New function\n+\t* print-rtl.h (print_insn): Add prototype\n+\n \t* haifa-sched.c (setup_sched_dump): Don't redirect output to stderr.\n \t* common.opt (-fsched-verbose): Set default value to 1.\n \t* invoke.texi (-fsched-verbose): Update the option's description."}, {"sha": "f601d338cfba3fce3077ff69d67c0f8c89eca4ba", "filename": "gcc/print-rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2Fprint-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2Fprint-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.h?ref=cdb0d9478f5faedf965a4f1ea1c819af2163c834", "patch": "@@ -30,6 +30,8 @@ extern void dump_rtl_slim (FILE *, const rtx_insn *, const rtx_insn *,\n \t\t\t   int, int);\n extern void print_value (pretty_printer *, const_rtx, int);\n extern void print_pattern (pretty_printer *, const_rtx, int);\n+extern void print_insn (pretty_printer *pp, const rtx_insn *x, int verbose);\n+\n extern void rtl_dump_bb_for_graph (pretty_printer *, basic_block);\n extern const char *str_pattern_slim (const_rtx);\n "}, {"sha": "460034777206eb1b4bf7667b86a8a486123c3d0b", "filename": "gcc/sched-int.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=cdb0d9478f5faedf965a4f1ea1c819af2163c834", "patch": "@@ -1497,6 +1497,9 @@ extern void compute_priorities (void);\n extern void increase_insn_priority (rtx_insn *, int);\n extern void debug_rgn_dependencies (int);\n extern void debug_dependencies (rtx_insn *, rtx_insn *);\n+extern void dump_rgn_dependencies_dot (FILE *);\n+extern void dump_rgn_dependencies_dot (const char *);\n+\n extern void free_rgn_deps (void);\n extern int contributes_to_priority (rtx_insn *, rtx_insn *);\n extern void extend_rgns (int *, int *, sbitmap, int *);"}, {"sha": "83bb58afdee4188c962d8c5aba2f6580c0d45c72", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdb0d9478f5faedf965a4f1ea1c819af2163c834/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=cdb0d9478f5faedf965a4f1ea1c819af2163c834", "patch": "@@ -63,6 +63,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"sel-sched.h\"\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n+#include \"pretty-print.h\"\n+#include \"print-rtl.h\"\n \n #ifdef INSN_SCHEDULING\n \n@@ -2860,6 +2862,108 @@ void debug_dependencies (rtx_insn *head, rtx_insn *tail)\n \n   fprintf (sched_dump, \"\\n\");\n }\n+\n+/* Dump dependency graph for the current region to a file using dot syntax.  */\n+\n+void\n+dump_rgn_dependencies_dot (FILE *file)\n+{\n+  rtx_insn *head, *tail, *con, *pro;\n+  sd_iterator_def sd_it;\n+  dep_t dep;\n+  int bb;\n+  pretty_printer pp;\n+\n+  pp.buffer->stream = file;\n+  pp_printf (&pp, \"digraph SchedDG {\\n\");\n+\n+  for (bb = 0; bb < current_nr_blocks; ++bb)\n+    {\n+      /* Begin subgraph (basic block).  */\n+      pp_printf (&pp, \"subgraph cluster_block_%d {\\n\", bb);\n+      pp_printf (&pp, \"\\t\" \"color=blue;\" \"\\n\");\n+      pp_printf (&pp, \"\\t\" \"style=bold;\" \"\\n\");\n+      pp_printf (&pp, \"\\t\" \"label=\\\"BB #%d\\\";\\n\", BB_TO_BLOCK (bb));\n+\n+      /* Setup head and tail (no support for EBBs).  */\n+      gcc_assert (EBB_FIRST_BB (bb) == EBB_LAST_BB (bb));\n+      get_ebb_head_tail (EBB_FIRST_BB (bb), EBB_LAST_BB (bb), &head, &tail);\n+      tail = NEXT_INSN (tail);\n+\n+      /* Dump all insns.  */\n+      for (con = head; con != tail; con = NEXT_INSN (con))\n+\t{\n+\t  if (!INSN_P (con))\n+\t    continue;\n+\n+\t  /* Pretty print the insn.  */\n+\t  pp_printf (&pp, \"\\t%d [label=\\\"{\", INSN_UID (con));\n+\t  pp_write_text_to_stream (&pp);\n+\t  print_insn (&pp, con, /*verbose=*/false);\n+\t  pp_write_text_as_dot_label_to_stream (&pp, /*for_record=*/true);\n+\t  pp_write_text_to_stream (&pp);\n+\n+\t  /* Dump instruction attributes.  */\n+\t  pp_printf (&pp, \"|{ uid:%d | luid:%d | prio:%d }}\\\",shape=record]\\n\",\n+\t\t     INSN_UID (con), INSN_LUID (con), INSN_PRIORITY (con));\n+\n+\t  /* Dump all deps.  */\n+\t  FOR_EACH_DEP (con, SD_LIST_BACK, sd_it, dep)\n+\t    {\n+\t      int weight = 0;\n+\t      const char *color;\n+\t      pro = DEP_PRO (dep);\n+\n+\t      switch (DEP_TYPE (dep))\n+\t\t{\n+\t\tcase REG_DEP_TRUE:\n+\t\t  color = \"black\";\n+\t\t  weight = 1;\n+\t\t  break;\n+\t\tcase REG_DEP_OUTPUT:\n+\t\tcase REG_DEP_ANTI:\n+\t\t  color = \"orange\";\n+\t\t  break;\n+\t\tcase REG_DEP_CONTROL:\n+\t\t  color = \"blue\";\n+\t\t  break;\n+\t\tdefault:\n+\t\t  gcc_unreachable ();\n+\t\t}\n+\n+\t      pp_printf (&pp, \"\\t%d -> %d [color=%s\",\n+\t\t\t INSN_UID (pro), INSN_UID (con), color);\n+\t      if (int cost = dep_cost (dep))\n+\t\tpp_printf (&pp, \",label=%d\", cost);\n+\t      pp_printf (&pp, \",weight=%d\", weight);\n+\t      pp_printf (&pp, \"];\\n\");\n+\t    }\n+\t}\n+      pp_printf (&pp, \"}\\n\");\n+    }\n+\n+  pp_printf (&pp, \"}\\n\");\n+  pp_flush (&pp);\n+}\n+\n+/* Dump dependency graph for the current region to a file using dot syntax.  */\n+\n+DEBUG_FUNCTION void\n+dump_rgn_dependencies_dot (const char *fname)\n+{\n+  FILE *fp;\n+\n+  fp = fopen (fname, \"w\");\n+  if (!fp)\n+    {\n+      perror (\"fopen\");\n+      return;\n+    }\n+\n+  dump_rgn_dependencies_dot (fp);\n+  fclose (fp);\n+}\n+\n \f\n /* Returns true if all the basic blocks of the current region have\n    NOTE_DISABLE_SCHED_OF_BLOCK which means not to schedule that region.  */"}]}