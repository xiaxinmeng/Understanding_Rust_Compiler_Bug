{"sha": "a86477661406f2ebe7ac3590c4c59a31769ca282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg2NDc3NjYxNDA2ZjJlYmU3YWMzNTkwYzRjNTlhMzE3NjljYTI4Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-17T15:30:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-10-17T15:30:22Z"}, "message": "Update comment.\n\nFrom-SVN: r8283", "tree": {"sha": "b74575e6375b1cc9d85756fd6507b7f089cdee6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b74575e6375b1cc9d85756fd6507b7f089cdee6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a86477661406f2ebe7ac3590c4c59a31769ca282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86477661406f2ebe7ac3590c4c59a31769ca282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86477661406f2ebe7ac3590c4c59a31769ca282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86477661406f2ebe7ac3590c4c59a31769ca282/comments", "author": null, "committer": null, "parents": [{"sha": "ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca72f752bfe58121ad60f17434fa5f9906fb5c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca72f752bfe58121ad60f17434fa5f9906fb5c1a"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "a09a1d93e35cdd583b20c14dc7b6b23d447c05c9", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86477661406f2ebe7ac3590c4c59a31769ca282/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86477661406f2ebe7ac3590c4c59a31769ca282/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a86477661406f2ebe7ac3590c4c59a31769ca282", "patch": "@@ -1718,9 +1718,9 @@ constrain_operands (insn_code_num, strict)\n \n \t      case 'p':\n \t\t/* p is used for address_operands.  When we are called by\n-\t\t   gen_input_reload, no one will have checked that the\n-\t\t   address is strictly valid, i.e., that all pseudos\n-\t\t   requiring hard regs have gotten them.  */\n+\t\t   gen_reload, no one will have checked that the address is\n+\t\t   strictly valid, i.e., that all pseudos requiring hard regs\n+\t\t   have gotten them.  */\n \t\tif (strict <= 0\n \t\t    || (strict_memory_address_p\n \t\t\t(insn_operand_mode[insn_code_num][opno], op)))"}, {"sha": "e8938415516e7a8485455c6d07ea98895041e594", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a86477661406f2ebe7ac3590c4c59a31769ca282/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a86477661406f2ebe7ac3590c4c59a31769ca282/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a86477661406f2ebe7ac3590c4c59a31769ca282", "patch": "@@ -2417,7 +2417,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t\t\t && &SET_DEST (set) == recog_operand_loc[i]);\n       else if (code == PLUS)\n \t/* We can get a PLUS as an \"operand\" as a result of\n-\t   register elimination.  See eliminate_regs and gen_input_reload.  */\n+\t   register elimination.  See eliminate_regs and gen_reload.  */\n \tsubsted_operand[i] = recog_operand[i] = *recog_operand_loc[i]\n \t  = find_reloads_toplev (recog_operand[i], i, address_type[i],\n \t\t\t\t ind_levels, 0);"}]}