{"sha": "0a41f3b2c87015471c1bf6d585e65f5219954a78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0MWYzYjJjODcwMTU0NzFjMWJmNmQ1ODVlNjVmNTIxOTk1NGE3OA==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2007-06-11T18:22:49Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2007-06-11T18:22:49Z"}, "message": "df-scan.c (df_insn_delete, [...]): Fixed spelling of word \"deferred\".\n\n2007-06-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* df-scan.c (df_insn_delete, df_insn_rescan, df_insn_rescan_all,\n\tdf_process_deferred_rescans, df_notes_rescan): Fixed spelling of\n\tword \"deferred\".\n\t* df-core.c: Ditto.\n\nFrom-SVN: r125625", "tree": {"sha": "7387ce6b4b20bae39a75e179d912f80580819c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7387ce6b4b20bae39a75e179d912f80580819c22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a41f3b2c87015471c1bf6d585e65f5219954a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a41f3b2c87015471c1bf6d585e65f5219954a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a41f3b2c87015471c1bf6d585e65f5219954a78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a41f3b2c87015471c1bf6d585e65f5219954a78/comments", "author": null, "committer": null, "parents": [{"sha": "6fb5fa3cbc0d78cf9f4ff7cac5e1d8af1e65c5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb5fa3cbc0d78cf9f4ff7cac5e1d8af1e65c5bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb5fa3cbc0d78cf9f4ff7cac5e1d8af1e65c5bb"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "65014db2af43c01f73af6d422b5dd3df1fe7f4fa", "filename": "MAINTAINERS", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a41f3b2c87015471c1bf6d585e65f5219954a78/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a41f3b2c87015471c1bf6d585e65f5219954a78/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=0a41f3b2c87015471c1bf6d585e65f5219954a78", "patch": "@@ -194,8 +194,6 @@ build machinery (*.in)\tPaolo Bonzini\t\tbonzini@gnu.org\n build machinery (*.in)\tDJ Delorie\t\tdj@redhat.com\n build machinery (*.in)\tNathanael Nerode\tneroden@gcc.gnu.org\n build machinery (*.in)\tAlexandre Oliva\t\taoliva@redhat.com\n-dataflow\t\tPaolo Bonzini\t\tbonzini@gnu.org\n-dataflow\t\tDaniel Berlin\t\tdberlin@dberlin.org\n docs co-maintainer\tGerald Pfeifer\t\tgerald@pfeifer.com\n docs co-maintainer\tJoseph Myers\t\tjsm@polyomino.org.uk\n predict.def\t\tJan Hubicka\t\tjh@suse.cz\n@@ -226,7 +224,7 @@ auto-vectorizer\t\tRichard Guenther\trguenther@suse.de\n auto-vectorizer\t\tZdenek Dvorak\t\tdvorakz@suse.cz\n auto-vectorizer\t\tDorit Nuzman\t\tdorit@il.ibm.com\n \n-Note individuals who maintain parts of the compiler need approval to check\n+Note that individuals who maintain parts of the compiler need approval to check\n in changes outside of the parts of the compiler they maintain.\n \n \t\t\tNon-Algorithmic Maintainers\n@@ -236,10 +234,24 @@ loop optimizer\t\tDaniel Berlin\t\tdberlin@dberlin.org\n middle-end\t\tRichard Guenther\trguenther@suse.de\n libcpp\t\t\tTom Tromey\t\ttromey@redhat.com\n \n-Note individuals who maintain parts of the compiler as non-algorithmic\n-maintainer need approval to check in algorithmic changes or changes\n+Note that individuals who maintain parts of the compiler as non-algorithmic\n+maintainers need approval to check in algorithmic changes or changes\n outside of the parts of the compiler they maintain.\n \n+\t\t\tNon-Autopoiesis Maintainers\n+\n+dataflow\t\tDaniel Berlin\t\tdberlin@dberlin.org\n+dataflow\t\tPaolo Bonzini\t\tbonzini@gnu.org\n+dataflow\t\tSeonbae Park\t\tseongbae.park@gmail.com\n+dataflow \t\tKenneth Zadeck\t\tzadeck@naturalbridge.com\n+(FIXME: The fortran people need to be added here since they follow this rule)\n+\n+\n+Note that individuals who maintain parts of the compiler as\n+non-autopoiesis maintainers need approval changes outside of the parts\n+of the compiler they maintain and also need approval for their own\n+patches.\n+\n \t\t\tWrite After Approval\t(last name alphabetical order)\n \n Mark G. Adams                                   mark.g.adams@sympatico.ca\n@@ -358,6 +370,7 @@ Carlos O'Donell\t\t\t\t\tcarlos@codesourcery.com\n Jeffrey D. Oldham\t\t\t\toldham@codesourcery.com\n Andrea Ornstein\t\t\t\t\tandrea.ornstein@st.com\n Rainer Orth\t\t\t\t\tro@TechFak.Uni-Bielefeld.DE\n+Seonbae Park\t\t\t\t\tseongbae.park@gmail.com\n Devang Patel\t\t\t\t\tdpatel@apple.com\n Alexandre Petit-Bianco\t\t\t\tapbianco@redhat.com\n Nicolas Pitre\t\t\t\t\tnico@cam.org"}, {"sha": "8b64afcc37ef3cdfab619a94dde5af56c73db00e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a41f3b2c87015471c1bf6d585e65f5219954a78", "patch": "@@ -1,3 +1,10 @@\n+2007-06-11  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* df-scan.c (df_insn_delete, df_insn_rescan, df_insn_rescan_all,\n+\tdf_process_deferred_rescans, df_notes_rescan): Fixed spelling of\n+\tword \"deferred\".\n+\t* df-core.c: Ditto.\n+\t\n 2007-06-11  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* Merge dataflow-branch into mainline (see ChangeLog.dataflow)"}, {"sha": "24c57e18392830b148f1acbe7d8fc37d49f05632", "filename": "gcc/df-core.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=0a41f3b2c87015471c1bf6d585e65f5219954a78", "patch": "@@ -114,7 +114,7 @@ optimizations that reorder blocks invalidate the bitvector.\n DF_ANALYZE causes all of the defined problems to be (re)solved.  When\n DF_ANALYZE is completes, the IN and OUT sets for each basic block\n contain the computer information.  The DF_*_BB_INFO macros can be used\n-to access these bitvectors.  All defered rescannings are down before\n+to access these bitvectors.  All deferred rescannings are down before\n the transfer functions are recompited.\n \n DF_DUMP can then be called to dump the information produce to some\n@@ -126,7 +126,7 @@ can all be called separately as part of a larger dump function.\n \n DF_FINISH_PASS causes df_remove_problem to be called on all of the\n optional problems.  It also causes any insns whose scanning has been\n-defered to be rescanned as well as clears all of the changeable flags.\n+deferred to be rescanned as well as clears all of the changeable flags.\n Setting the pass manager TODO_df_finish flag causes this function to\n be run.  However, the pass manager will call df_finish_pass AFTER the\n pass dumping has been done, so if you want to see the results of the\n@@ -190,7 +190,7 @@ There are four ways of doing the incremental scanning:\n \n    To enable this mode, call df_set_flags (DF_DEFER_INSN_RESCAN).\n    (This mode can be cleared by calling df_clear_flags\n-   (DF_DEFER_INSN_RESCAN) but this does not cause the defered insns to\n+   (DF_DEFER_INSN_RESCAN) but this does not cause the deferred insns to\n    be rescanned.\n \n    3) Total rescanning - In this mode the rescanning is disabled."}, {"sha": "7b878fdd81f3d6483f2651bdaabdc9ade8ad6a8e", "filename": "gcc/df-scan.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=0a41f3b2c87015471c1bf6d585e65f5219954a78", "patch": "@@ -995,7 +995,7 @@ df_insn_delete (basic_block bb, unsigned int uid)\n \n   insn_info = DF_INSN_UID_SAFE_GET (uid);\n \n-  /* The client has defered rescanning.  */\n+  /* The client has deferred rescanning.  */\n   if (df->changeable_flags & DF_DEFER_INSN_RESCAN)\n     {\n       if (insn_info)\n@@ -1104,7 +1104,7 @@ df_insn_rescan (rtx insn)\n \n   insn_info = DF_INSN_UID_SAFE_GET (uid);\n \n-  /* The client has defered rescanning.  */\n+  /* The client has deferred rescanning.  */\n   if (df->changeable_flags & DF_DEFER_INSN_RESCAN)\n     {\n       if (!insn_info)\n@@ -1214,7 +1214,7 @@ df_insn_rescan_all (void)\n }\n \n \n-/* Process all of the defered rescans or deletions.  */\n+/* Process all of the deferred rescans or deletions.  */\n \n void\n df_process_deferred_rescans (void)\n@@ -1238,7 +1238,7 @@ df_process_deferred_rescans (void)\n     }\n \n   if (dump_file)\n-    fprintf (dump_file, \"starting the processing of defered insns\\n\");\n+    fprintf (dump_file, \"starting the processing of deferred insns\\n\");\n \n   bitmap_copy (tmp, df->insns_to_delete);\n   EXECUTE_IF_SET_IN_BITMAP (tmp, 0, uid, bi)\n@@ -1265,7 +1265,7 @@ df_process_deferred_rescans (void)\n     }\n \n   if (dump_file)\n-    fprintf (dump_file, \"ending the processing of defered insns\\n\");\n+    fprintf (dump_file, \"ending the processing of deferred insns\\n\");\n \n   BITMAP_FREE (tmp);\n   bitmap_clear (df->insns_to_delete);\n@@ -2009,7 +2009,7 @@ df_notes_rescan (rtx insn)\n \n   insn_info = DF_INSN_UID_SAFE_GET (INSN_UID(insn));\n \n-  /* The client has defered rescanning.  */\n+  /* The client has deferred rescanning.  */\n   if (df->changeable_flags & DF_DEFER_INSN_RESCAN)\n     {\n       if (!insn_info)"}, {"sha": "547db8c4044e0594c3103c6e9034da7e3f5aae07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a41f3b2c87015471c1bf6d585e65f5219954a78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a41f3b2c87015471c1bf6d585e65f5219954a78", "patch": "@@ -1,3 +1,8 @@\n+2007-06-11  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR rtl-optimization/31025\n+        * gfortran.dg/pr31025.f90: New.\n+\n 2007-06-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32280\n@@ -2650,11 +2655,6 @@\n \tPR tree-optimization/31041\n \t* gcc.dg/vect/pr31041.c: New test.\n \n-2007-03-16  Paolo Bonzini  <bonzini@gnu.org>\n-\n-        PR rtl-optimization/31025\n-        * gfortran.dg/pr31025.f90: New.\n-\n 2007-03-16  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* g++.dg/warn/Wconversion-integer.C: New"}]}