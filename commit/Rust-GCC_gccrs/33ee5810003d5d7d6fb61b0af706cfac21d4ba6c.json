{"sha": "33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlZTU4MTAwMDNkNWQ3ZDZmYjYxYjBhZjcwNmNmYWMyMWQ0YmE2Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-10T10:29:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-10T10:29:36Z"}, "message": "re PR target/36473 (Generate bit test (bt) instructions)\n\n\tPR target/36473\n\t* config/i386/i386.c (ix86_tune_features) [TUNE_USE_BT]:\n\tAdd m_CORE2 and m_GENERIC.\n\t* config/i386/predicates.md (bt_comparison_operator): New predicate.\n\t* config/i386/i386.md (*btdi_rex64): New instruction pattern.\n\t(*btsi): Ditto.\n\t(*jcc_btdi_rex64): New instruction and split pattern.\n\t(*jcc_btsi): Ditto.\n\t(*jcc_btsi_1): Ditto.\n\t(*btsq): Fix Intel asm dialect operand order.\n\t(*btrq): Ditto.\n\t(*btcq): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/36473\n\t* testsuite/gcc.target/i386/bt-1.c: New test.\n\t* testsuite/gcc.target/i386/bt-2.c: Ditto.\n\nFrom-SVN: r136615", "tree": {"sha": "adb12f0c0cddf0e92f91c40cfd912d8549be148b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adb12f0c0cddf0e92f91c40cfd912d8549be148b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/comments", "author": null, "committer": null, "parents": [{"sha": "f1ebbb579c845765a4ca795bb82b58738f83b796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ebbb579c845765a4ca795bb82b58738f83b796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ebbb579c845765a4ca795bb82b58738f83b796"}], "stats": {"total": 203, "additions": 190, "deletions": 13}, "files": [{"sha": "bd7d2048dc020227952951ad3d03c8c3decdfbca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -1,3 +1,18 @@\n+2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36473\n+\t* config/i386/i386.c (ix86_tune_features) [TUNE_USE_BT]:\n+\tAdd m_CORE2 and m_GENERIC.\n+\t* config/i386/predicates.md (bt_comparison_operator): New predicate.\n+\t* config/i386/i386.md (*btdi_rex64): New instruction pattern.\n+\t(*btsi): Ditto.\n+\t(*jcc_btdi_rex64): New instruction and split pattern.\n+\t(*jcc_btsi): Ditto.\n+\t(*jcc_btsi_1): Ditto.\n+\t(*btsq): Fix Intel asm dialect operand order.\n+\t(*btrq): Ditto.\n+\t(*btcq): Ditto.\n+\n 2008-06-09  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \tPR middle-end/36447"}, {"sha": "6fd4c0266d00a705ed65683e86501d351fec5b3c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -1390,7 +1390,7 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   m_PPRO | m_AMD_MULTIPLE | m_K6_GEODE | m_PENT | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_USE_BT */\n-  m_AMD_MULTIPLE,\n+  m_AMD_MULTIPLE | m_CORE2 | m_GENERIC,\n \n   /* X86_TUNE_USE_INCDEC */\n   ~(m_PENT4 | m_NOCONA | m_GENERIC),"}, {"sha": "4da50afce2853370d38f985e82cd71e00ff9f09f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 125, "deletions": 3, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -13691,7 +13691,7 @@\n \t(const_int 1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n-  \"bts{q} %1,%0\"\n+  \"bts{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")])\n \n (define_insn \"*btrq\"\n@@ -13701,7 +13701,7 @@\n \t(const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n-  \"btr{q} %1,%0\"\n+  \"btr{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")])\n \n (define_insn \"*btcq\"\n@@ -13711,7 +13711,7 @@\n \t(not:DI (zero_extract:DI (match_dup 0) (const_int 1) (match_dup 1))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n-  \"btc{q} %1,%0\"\n+  \"btc{q}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")])\n \n ;; Allow Nocona to avoid these instructions if a register is available.\n@@ -13812,6 +13812,30 @@\n   emit_insn (gen_xordi3 (operands[0], operands[0], op1));\n   DONE;\n })\n+\n+(define_insn \"*btdi_rex64\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:DI\n+\t    (match_operand:DI 0 \"register_operand\" \"r\")\n+\t    (const_int 1)\n+\t    (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t  (const_int 0)))]\n+  \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\"\n+  \"bt{q}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")])\n+\n+(define_insn \"*btsi\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SI\n+\t    (match_operand:SI 0 \"register_operand\" \"r\")\n+\t    (const_int 1)\n+\t    (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t  (const_int 0)))]\n+  \"TARGET_USE_BT || optimize_size\"\n+  \"bt{l}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")])\n \f\n ;; Store-flag instructions.\n \n@@ -14057,6 +14081,104 @@\n     FAIL;\n })\n \n+;; zero_extend in SImode is correct, since this is what combine pass\n+;; generates from shift insn with QImode operand.  Actually, the mode of\n+;; operand 2 (bit offset operand) doesn't matter since bt insn takes\n+;; appropriate modulo of the bit offset value.\n+\n+(define_insn_and_split \"*jcc_btdi_rex64\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:DI\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (zero_extend:SI\n+\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_64BIT && (TARGET_USE_BT || optimize_size)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:DI\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  operands[2] = simplify_gen_subreg (DImode, operands[2], QImode, 0);\n+\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n+(define_insn_and_split \"*jcc_btsi\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(zero_extract:SI\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (const_int 1)\n+\t\t\t   (zero_extend:SI\n+\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\")))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_USE_BT || optimize_size\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SI\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n+\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n+(define_insn_and_split \"*jcc_btsi_1\"\n+  [(set (pc)\n+  \t(if_then_else (match_operator 0 \"bt_comparison_operator\"\n+\t\t\t[(and:SI\n+\t\t\t   (lshiftrt:SI\n+\t\t\t     (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t\t\t   (const_int 1))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 3 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"TARGET_USE_BT || optimize_size\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (zero_extract:SI\n+\t    (match_dup 1)\n+\t    (const_int 1)\n+\t    (match_dup 2))\n+\t  (const_int 0)))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 0 [(reg:CCC FLAGS_REG) (const_int 0)])\n+\t\t      (label_ref (match_dup 3))\n+\t\t      (pc)))]\n+{\n+  operands[2] = simplify_gen_subreg (SImode, operands[2], QImode, 0);\n+\n+  PUT_CODE (operands[0], reverse_condition (GET_CODE (operands[0])));\n+})\n+\n ;; Define combination compare-and-branch fp compare instructions to use\n ;; during early optimization.  Splitting the operation apart early makes\n ;; for bad code when we want to reverse the operation."}, {"sha": "4f2ff6b7c9f62e342aab74945623828787e3c542", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -920,6 +920,9 @@\n (define_predicate \"ix86_comparison_uns_operator\"\n   (match_code \"ne,eq,geu,gtu,leu,ltu\"))\n \n+(define_predicate \"bt_comparison_operator\"\n+  (match_code \"ne,eq\"))\n+\n ;; Return 1 if OP is a valid comparison operator in valid mode.\n (define_predicate \"ix86_comparison_operator\"\n   (match_operand 0 \"comparison_operator\")"}, {"sha": "1f6c771fa30b5715900a4b945a8783cd5a4e3847", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -1,3 +1,9 @@\n+2008-06-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36473\n+\t* testsuite/gcc.target/i386/bt-1.c: New test.\n+\t* testsuite/gcc.target/i386/bt-2.c: Ditto.\n+\n 2008-06-09  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \t* gcc.c-torture/execute/builtins/lib/chk.c: Only include sys/types.h\n@@ -47,8 +53,8 @@\n \n 2008-06-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35242\n-        * g++.dg/cpp0x/vt-35242.C: New.\n+\tPR c++/35242\n+\t* g++.dg/cpp0x/vt-35242.C: New.\n \n 2008-06-08  Janus Weil  <janus@gcc.gnu.org>\n \n@@ -127,8 +133,8 @@\n \n 2008-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35327\n-        * g++.dg/parse/crash41.C: New.\n+\tPR c++/35327\n+\t* g++.dg/parse/crash41.C: New.\n \n 2008-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -184,7 +190,7 @@\n \t* gfortran.dg/proc_decl_2.f90: Extended.\n \n 2008-06-04  Joseph Myers  <joseph@codesourcery.com>\n-            Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* gcc.target/m68k/xgot-1.c: New test.\n \n@@ -240,8 +246,8 @@\n \n 2008-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/36404\n-        * g++.dg/template/crash79.C: New.\n+\tPR c++/36404\n+\t* g++.dg/template/crash79.C: New.\n \t* g++.dg/other/pr28114.C: Adjust.\t\n \n 2008-06-02  Daniel Kraft  <d@domob.eu>\n@@ -304,8 +310,8 @@\n \n 2008-05-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-        PR c++/35243\n-        * g++.dg/cpp0x/vt-35243.C: New.\t\n+\tPR c++/35243\n+\t* g++.dg/cpp0x/vt-35243.C: New.\t\n \n 2008-05-29  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "3727155d68f1389f1cb33071323d1bdfd8d8f73b", "filename": "gcc/testsuite/gcc.target/i386/bt-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-1.c?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/36473 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+extern void foo (void);\n+\n+int test(int x, int n)\n+{\n+  if (x & ( 0x01 << n ))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" } } */"}, {"sha": "34fa829e406868953ea7cefa841aeae4c8f88ffe", "filename": "gcc/testsuite/gcc.target/i386/bt-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33ee5810003d5d7d6fb61b0af706cfac21d4ba6c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbt-2.c?ref=33ee5810003d5d7d6fb61b0af706cfac21d4ba6c", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/36473 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2\" } */\n+\n+extern void foo (void);\n+\n+int test(long x, long n)\n+{\n+  if (x & ( (long)0x01 << n ))\n+    foo ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"btl\\[ \\t\\]\" { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler \"btq\\[ \\t\\]\" { target lp64 } } } */"}]}