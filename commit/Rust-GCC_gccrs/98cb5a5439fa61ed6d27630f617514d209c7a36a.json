{"sha": "98cb5a5439fa61ed6d27630f617514d209c7a36a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjYjVhNTQzOWZhNjFlZDZkMjc2MzBmNjE3NTE0ZDIwOWM3YTM2YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-03-19T10:36:09Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-03-19T10:36:09Z"}, "message": "re PR fortran/26716 (gfortran: incorrect choice of overloaded function)\n\n2006-03-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/26716\n\t*expr.c (external_spec_function): Permit elemental functions.\n\n\tPR fortran/26716\n\t*interface.c (compare_actual_formal): Detect call for procedure\n\tusage and require rank checking, in this case, for assumed shape\n\tand deferred shape arrays.\n\t(gfc_procedure_use): Revert to pre-PR25070 call to\n\tcompare_actual_formal that does not require rank checking..\n\n2006-03-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/26716\n\t* gfortran.dg/elemental_initializer_1.f90: New test.\n\n\tPR fortran/26716\n\t* gfortran.dg/assumed_shape_ranks_2: New test.\n\nFrom-SVN: r112210", "tree": {"sha": "b16dca5ec532707c455566c5c970430026e1f61d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b16dca5ec532707c455566c5c970430026e1f61d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98cb5a5439fa61ed6d27630f617514d209c7a36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cb5a5439fa61ed6d27630f617514d209c7a36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cb5a5439fa61ed6d27630f617514d209c7a36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cb5a5439fa61ed6d27630f617514d209c7a36a/comments", "author": null, "committer": null, "parents": [{"sha": "4d58f908f91b068c2a7fe2b0c6e84eed2990c2e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d58f908f91b068c2a7fe2b0c6e84eed2990c2e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d58f908f91b068c2a7fe2b0c6e84eed2990c2e0"}], "stats": {"total": 117, "additions": 108, "deletions": 9}, "files": [{"sha": "e56a6e751d1f1c0b1cb76078fb320af860e499be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=98cb5a5439fa61ed6d27630f617514d209c7a36a", "patch": "@@ -1,3 +1,15 @@\n+2006-03-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/26716\n+\t*expr.c (external_spec_function): Permit elemental functions.\n+\n+\tPR fortran/26716\n+\t*interface.c (compare_actual_formal): Detect call for procedure\n+\tusage and require rank checking, in this case, for assumed shape\n+\tand deferred shape arrays.\n+\t(gfc_procedure_use): Revert to pre-PR25070 call to\n+\tcompare_actual_formal that does not require rank checking..\n+\n 2006-03-16  Roger Sayle  <roger@eyesopen.com>\n \n \t* gfortran.h (gfc_equiv_info): Add length field."}, {"sha": "8362f5336fcdd891b00799910af0bcc6bf0ee23c", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=98cb5a5439fa61ed6d27630f617514d209c7a36a", "patch": "@@ -1636,7 +1636,7 @@ external_spec_function (gfc_expr * e)\n       return FAILURE;\n     }\n \n-  if (!f->attr.pure)\n+  if (!f->attr.pure && !f->attr.elemental)\n     {\n       gfc_error (\"Specification function '%s' at %L must be PURE\", f->name,\n \t\t &e->where);"}, {"sha": "060da056ade0c8c008bfbab7ec079b0125d4d775", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=98cb5a5439fa61ed6d27630f617514d209c7a36a", "patch": "@@ -1178,6 +1178,7 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n   gfc_actual_arglist **new, *a, *actual, temp;\n   gfc_formal_arglist *f;\n   int i, n, na;\n+  bool rank_check;\n \n   actual = *ap;\n \n@@ -1260,11 +1261,14 @@ compare_actual_formal (gfc_actual_arglist ** ap,\n \t  return 0;\n \t}\n \n+      rank_check = where != NULL\n+\t\t     && !is_elemental\n+\t\t     && f->sym->as\n+\t\t     && (f->sym->as->type == AS_ASSUMED_SHAPE\n+\t\t\t   || f->sym->as->type == AS_DEFERRED);\n+\n       if (!compare_parameter\n-\t  (f->sym, a->expr,\n-\t   ranks_must_agree && f->sym->as\n-\t     && f->sym->as->type == AS_ASSUMED_SHAPE,\n-\t   is_elemental))\n+\t  (f->sym, a->expr, ranks_must_agree || rank_check, is_elemental))\n \t{\n \t  if (where)\n \t    gfc_error (\"Type/rank mismatch in argument '%s' at %L\",\n@@ -1595,9 +1599,6 @@ check_intents (gfc_formal_arglist * f, gfc_actual_arglist * a)\n void\n gfc_procedure_use (gfc_symbol * sym, gfc_actual_arglist ** ap, locus * where)\n {\n-  int ranks_must_agree;\n-  ranks_must_agree = !sym->attr.elemental && (sym->attr.contained\n-\t\t\t|| sym->attr.if_source == IFSRC_IFBODY);\n \n   /* Warn about calls with an implicit interface.  */\n   if (gfc_option.warn_implicit_interface\n@@ -1606,7 +1607,7 @@ gfc_procedure_use (gfc_symbol * sym, gfc_actual_arglist ** ap, locus * where)\n                  sym->name, where);\n \n   if (sym->attr.if_source == IFSRC_UNKNOWN\n-      || !compare_actual_formal (ap, sym->formal, ranks_must_agree,\n+      || !compare_actual_formal (ap, sym->formal, 0,\n \t\t\t\t sym->attr.elemental, where))\n     return;\n "}, {"sha": "9fa8de7152886fd050e4495788340dfbdf37d899", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98cb5a5439fa61ed6d27630f617514d209c7a36a", "patch": "@@ -1,3 +1,11 @@\n+2006-03-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/26716\n+\t* gfortran.dg/elemental_initializer_1.f90: New test.\n+\n+\tPR fortran/26716\n+\t* gfortran.dg/assumed_shape_ranks_2: New test.\n+\n 2006-03-18  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/980523-1.c, gcc.dg/980526-1.c, gcc.dg/switch-1.c: Use"}, {"sha": "641d3d929f4fdec3d14344b4786ec55c529c7289", "filename": "gcc/testsuite/gfortran.dg/assumed_shape_ranks_2.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_2.f90?ref=98cb5a5439fa61ed6d27630f617514d209c7a36a", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! Tests the fix for the regression PR26716.\n+! Test contributed by Martin Reinecke  <martin@mpa-garching.mpg.de>\n+!\n+module mod1\n+  implicit none\n+\n+  interface foo\n+     module procedure foo1, foo2\n+  end interface\n+\n+contains\n+\n+  subroutine foo1(bar, i)\n+    real bar\n+    integer i\n+    i = 1\n+   end subroutine\n+\n+  subroutine foo2(bar, i)\n+    real bar(3)\n+    integer i\n+    i = 2\n+  end subroutine\n+\n+end module mod1\n+\n+  use mod1\n+  implicit none\n+\n+  real bar(3)\n+  integer i\n+\n+  i = 0\n+  call foo (1e0, i)\n+  if (i .ne. 1) call abort ()\n+\n+  i = 0\n+  call foo (bar(1), i)\n+  if (i .ne. 1) call abort ()\n+\n+  i = 0\n+  call foo (bar, i)\n+  if (i .ne. 2) call abort ()\n+end"}, {"sha": "7280e2582b08b8931779c3fa4f586f477e0f62c1", "filename": "gcc/testsuite/gfortran.dg/elemental_initializer_1.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_initializer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98cb5a5439fa61ed6d27630f617514d209c7a36a/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_initializer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_initializer_1.f90?ref=98cb5a5439fa61ed6d27630f617514d209c7a36a", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! Tests the fix for elemental functions not being allowed in\n+! specification expressions in pure procedures.\n+!\n+! Testcase from iso_varying_string by Rich Townsend <rhdt@star.ucl.ac.uk>\n+! The allocatable component has been changed to a pointer for this testcase.\n+!\n+module iso_varying_string\n+\n+  type varying_string\n+     private\n+     character(LEN=1), dimension(:), pointer :: chars\n+  end type varying_string\n+\n+  interface len\n+     module procedure len_\n+  end interface len\n+\n+contains\n+\n+  pure function char_auto (string) result (char_string)\n+    type(varying_string), intent(in) :: string\n+    character(LEN=len(string))       :: char_string ! Error was here\n+    char_string = \"\"\n+  end function char_auto\n+\n+  elemental function len_ (string) result (length)\n+    type(varying_string), intent(in) :: string\n+    integer                          :: length\n+    length = 1\n+  end function len_\n+\n+end module iso_varying_string"}]}