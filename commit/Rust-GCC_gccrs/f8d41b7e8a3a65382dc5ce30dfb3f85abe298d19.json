{"sha": "f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkNDFiN2U4YTNhNjUzODJkYzVjZTMwZGZiM2Y4NWFiZTI5OGQxOQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-18T15:51:35Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T09:59:22Z"}, "message": "Add TupleIndexExpressions\n\nNow we can type resolve and reference the results from TupleIndexExpr's.", "tree": {"sha": "f1b6f0b25bfafe426090a3294762ba982f215165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b6f0b25bfafe426090a3294762ba982f215165"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a942d6fbd0cc087cbc801ce4681a498e59dce2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a942d6fbd0cc087cbc801ce4681a498e59dce2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a942d6fbd0cc087cbc801ce4681a498e59dce2c"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "ff02d6b2c59c401b3aef47c2d71accad53c13c7d", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -38,6 +38,17 @@ class CompileExpr : public HIRCompileBase\n     return compiler.translated;\n   }\n \n+  void visit (HIR::TupleIndexExpr &expr)\n+  {\n+    HIR::Expr *tuple_expr = expr.get_tuple_expr ().get ();\n+    TupleIndex index = expr.get_tuple_index ();\n+\n+    Bexpression *receiver_ref = CompileExpr::Compile (tuple_expr, ctx);\n+    translated\n+      = ctx->get_backend ()->struct_field_expression (receiver_ref, index,\n+\t\t\t\t\t\t      expr.get_locus ());\n+  }\n+\n   void visit (HIR::TupleExpr &expr)\n   {\n     if (expr.is_unit ())"}, {"sha": "6f872ab896a9a00dcc0986c0ebe434a229af64bf", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -132,6 +132,25 @@ class ASTLoweringExpr : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n+  void visit (AST::TupleIndexExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+\n+    HIR::Expr *tuple_expr\n+      = ASTLoweringExpr::translate (expr.get_tuple_expr ().get (), &terminated);\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::TupleIndexExpr (mapping,\n+\t\t\t\t std::unique_ptr<HIR::Expr> (tuple_expr),\n+\t\t\t\t expr.get_tuple_index (),\n+\t\t\t\t std::move (outer_attribs), expr.get_locus ());\n+  }\n+\n   void visit (AST::TupleExpr &expr)\n   {\n     std::vector<HIR::Attribute> inner_attribs;"}, {"sha": "a81d52339f66894755327b9e028a9937804c6050", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -1314,6 +1314,12 @@ class TupleIndexExpr : public ExprWithoutBlock\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_tuple_expr ()\n+  {\n+    rust_assert (tuple_expr != nullptr);\n+    return tuple_expr;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "91ed6e0933d51b266fff2c8d287a5f6ea047921f", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -35,6 +35,11 @@ class ResolveExpr : public ResolverBase\n     expr->accept_vis (resolver);\n   };\n \n+  void visit (AST::TupleIndexExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_tuple_expr ().get (), expr.get_node_id ());\n+  }\n+\n   void visit (AST::TupleExpr &expr)\n   {\n     if (expr.is_unit ())"}, {"sha": "fddbdeb854a457ac83042a55f23f7449f11b7b2f", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -46,6 +46,42 @@ class TypeCheckExpr : public TypeCheckBase\n     return resolver.infered;\n   }\n \n+  void visit (HIR::TupleIndexExpr &expr)\n+  {\n+    auto resolved = TypeCheckExpr::Resolve (expr.get_tuple_expr ().get ());\n+    if (resolved == nullptr)\n+      {\n+\trust_error_at (expr.get_tuple_expr ()->get_locus_slow (),\n+\t\t       \"failed to resolve TupleIndexExpr receiver\");\n+\treturn;\n+      }\n+    if (resolved->get_kind () != TyTy::TypeKind::ADT)\n+      {\n+\trust_error_at (expr.get_tuple_expr ()->get_locus_slow (),\n+\t\t       \"Expected ADT type got: %s\",\n+\t\t       resolved->as_string ().c_str ());\n+\treturn;\n+      }\n+\n+    TyTy::ADTType *adt = (TyTy::ADTType *) resolved;\n+    TupleIndex index = expr.get_tuple_index ();\n+    if ((size_t) index >= adt->num_fields ())\n+      {\n+\trust_error_at (expr.get_locus (), \"unknown field at index %i\", index);\n+\treturn;\n+      }\n+\n+    auto field_tyty = adt->get_field ((size_t) index);\n+    if (field_tyty == nullptr)\n+      {\n+\trust_error_at (expr.get_locus (),\n+\t\t       \"failed to lookup field type at index %i\", index);\n+\treturn;\n+      }\n+\n+    infered = field_tyty->get_field_type ();\n+  }\n+\n   void visit (HIR::TupleExpr &expr)\n   {\n     if (expr.is_unit ())"}, {"sha": "d0fb6fc44297bb2cf8e6c8da3632ce78281ba8b1", "filename": "gcc/testsuite/rust.test/compilable/tuple3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple3.rs?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let a = (1, true);\n+\n+    let b;\n+    let c;\n+\n+    b = a.0;\n+    c = a.1;\n+}"}, {"sha": "5e0a76e1de89ae91ac8b29f2133f323578581b5d", "filename": "gcc/testsuite/rust.test/compilable/tuple_struct2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple_struct2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple_struct2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple_struct2.rs?ref=f8d41b7e8a3a65382dc5ce30dfb3f85abe298d19", "patch": "@@ -0,0 +1,11 @@\n+struct Foo(i32, bool);\n+\n+fn main() {\n+    let a = Foo(1, true);\n+\n+    let b;\n+    let c;\n+\n+    b = a.0;\n+    c = a.1;\n+}"}]}