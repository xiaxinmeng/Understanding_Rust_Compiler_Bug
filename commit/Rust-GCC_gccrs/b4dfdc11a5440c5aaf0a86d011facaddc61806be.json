{"sha": "b4dfdc11a5440c5aaf0a86d011facaddc61806be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkZmRjMTFhNTQ0MGM1YWFmMGE4NmQwMTFmYWNhZGRjNjE4MDZiZQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-07-31T09:33:58Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-07-31T09:33:58Z"}, "message": "re PR c++/60517 (warning/error for taking address of member of a temporary object)\n\n2014-07-31  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/60517\ngcc/c/\n\t* c-typeck.c (c_finish_return): Return 0 instead of the address of\n\ta local variable.\ngcc/cp/\n\t* typeck.c (maybe_warn_about_returning_address_of_local): Return\n\twhether it is returning the address of a local variable.\n\t(check_return_expr): Return 0 instead of the address of a local\n\tvariable.\ngcc/c-family/\n\t* c.opt (-Wreturn-local-addr): Move to common.opt.\ngcc/\n\t* common.opt (-Wreturn-local-addr): Moved from c.opt.\n\t* gimple-ssa-isolate-paths.c: Include diagnostic-core.h and intl.h.\n\t(isolate_path): New argument to avoid inserting a trap.\n\t(find_implicit_erroneous_behaviour): Handle returning the address\n\tof a local variable.\n\t(find_explicit_erroneous_behaviour): Likewise.\ngcc/testsuite/\n\t* c-c++-common/addrtmp.c: New file.\n\t* c-c++-common/uninit-G.c: Adapt.\n\nFrom-SVN: r213323", "tree": {"sha": "35e40a78855886e1ee834f1472e67c904d487f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e40a78855886e1ee834f1472e67c904d487f62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4dfdc11a5440c5aaf0a86d011facaddc61806be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4dfdc11a5440c5aaf0a86d011facaddc61806be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4dfdc11a5440c5aaf0a86d011facaddc61806be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4dfdc11a5440c5aaf0a86d011facaddc61806be/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e50df4de7f0daea8b3f6682cfe5f16398b4f155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e50df4de7f0daea8b3f6682cfe5f16398b4f155"}], "stats": {"total": 210, "additions": 183, "deletions": 27}, "files": [{"sha": "64d2fa34e66ffbcc4624e9e1ce5d2daab55c505d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -1,3 +1,13 @@\n+2014-07-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/60517\n+\t* common.opt (-Wreturn-local-addr): Moved from c.opt.\n+\t* gimple-ssa-isolate-paths.c: Include diagnostic-core.h and intl.h.\n+\t(isolate_path): New argument to avoid inserting a trap.\n+\t(find_implicit_erroneous_behaviour): Handle returning the address\n+\tof a local variable.\n+\t(find_explicit_erroneous_behaviour): Likewise.\n+\n 2014-07-31  Bingfeng Mei <bmei@broadcom.com>\n \n \tPR lto/61868"}, {"sha": "bf1ad5b0cc3c68bb324bd61fecb012046247b669", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -1,3 +1,8 @@\n+2014-07-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/60517\n+\t* c.opt (-Wreturn-local-addr): Move to common.opt.\n+\n 2014-07-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/61659"}, {"sha": "c3be6222015f730efa4ee3f13c2652902330150d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -709,10 +709,6 @@ Wreorder\n C++ ObjC++ Var(warn_reorder) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn when the compiler reorders code\n \n-Wreturn-local-addr\n-C ObjC C++ ObjC++ Var(warn_return_local_addr) Init(1) Warning\n-Warn about returning a pointer/reference to a local or temporary variable.\n-\n Wreturn-type\n C ObjC C++ ObjC++ Var(warn_return_type) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn whenever a function's return type defaults to \\\"int\\\" (C), or about inconsistent return types (C++)"}, {"sha": "aec8cf1a1f9fbddf8ae23fe12f929e49e0ab7473", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -1,3 +1,9 @@\n+2014-07-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/60517\n+\t* c-typeck.c (c_finish_return): Return 0 instead of the address of\n+\ta local variable.\n+\n 2014-07-30  Tom Tromey  <tromey@redhat.com>\n \n \t* c-typeck.c (struct constructor_stack) <designator_depth>: New"}, {"sha": "fe9440c39d974429985dcc80c3844fdc915e6514", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -9350,8 +9350,12 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \t\t    warning_at (loc, OPT_Wreturn_local_addr,\n \t\t\t\t\"function returns address of label\");\n \t\t  else\n-\t\t    warning_at (loc, OPT_Wreturn_local_addr,\n-\t\t\t\t\"function returns address of local variable\");\n+\t\t    {\n+\t\t      warning_at (loc, OPT_Wreturn_local_addr,\n+\t\t\t\t  \"function returns address of local variable\");\n+\t\t      tree zero = build_zero_cst (TREE_TYPE (res));\n+\t\t      t = build2 (COMPOUND_EXPR, TREE_TYPE (res), t, zero);\n+\t\t    }\n \t\t}\n \t      break;\n "}, {"sha": "40c8b3c9bb9d34c1ad6920b40b7e3d9fbabe216d", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -607,6 +607,10 @@ Wpedantic\n Common Var(pedantic) Warning\n Issue warnings needed for strict compliance to the standard\n \n+Wreturn-local-addr\n+Common Var(warn_return_local_addr) Init(1) Warning\n+Warn about returning a pointer/reference to a local or temporary variable.\n+\n Wshadow\n Common Var(warn_shadow) Warning\n Warn when one local variable shadows another"}, {"sha": "36d8b39504b5ee92e1399324a160162607c6ebc4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -1,3 +1,11 @@\n+2014-07-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/60517\n+\t* typeck.c (maybe_warn_about_returning_address_of_local): Return\n+\twhether it is returning the address of a local variable.\n+\t(check_return_expr): Return 0 instead of the address of a local\n+\tvariable.\n+\n 2014-07-30  Jason Merrill  <jason@redhat.com>\n \n \tPR lto/53808"}, {"sha": "735cd5860409327f19a74604cbf4847cc70c5aab", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -56,7 +56,7 @@ static tree pointer_diff (tree, tree, tree, tsubst_flags_t);\n static tree get_delta_difference (tree, tree, bool, bool, tsubst_flags_t);\n static void casts_away_constness_r (tree *, tree *, tsubst_flags_t);\n static bool casts_away_constness (tree, tree, tsubst_flags_t);\n-static void maybe_warn_about_returning_address_of_local (tree);\n+static bool maybe_warn_about_returning_address_of_local (tree);\n static tree lookup_destructor (tree, tree, tree, tsubst_flags_t);\n static void warn_args_num (location_t, tree, bool);\n static int convert_arguments (tree, vec<tree, va_gc> **, tree, int,\n@@ -8296,9 +8296,9 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n }\n \f\n /* If RETVAL is the address of, or a reference to, a local variable or\n-   temporary give an appropriate warning.  */\n+   temporary give an appropriate warning and return true.  */\n \n-static void\n+static bool\n maybe_warn_about_returning_address_of_local (tree retval)\n {\n   tree valtype = TREE_TYPE (DECL_RESULT (current_function_decl));\n@@ -8316,7 +8316,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n     }\n \n   if (TREE_CODE (whats_returned) != ADDR_EXPR)\n-    return;\n+    return false;\n   whats_returned = TREE_OPERAND (whats_returned, 0);\n \n   while (TREE_CODE (whats_returned) == COMPONENT_REF\n@@ -8329,14 +8329,14 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t  || TREE_CODE (whats_returned) == TARGET_EXPR)\n \t{\n \t  warning (OPT_Wreturn_local_addr, \"returning reference to temporary\");\n-\t  return;\n+\t  return true;\n \t}\n       if (VAR_P (whats_returned)\n \t  && DECL_NAME (whats_returned)\n \t  && TEMP_NAME_P (DECL_NAME (whats_returned)))\n \t{\n \t  warning (OPT_Wreturn_local_addr, \"reference to non-lvalue returned\");\n-\t  return;\n+\t  return true;\n \t}\n     }\n \n@@ -8356,8 +8356,10 @@ maybe_warn_about_returning_address_of_local (tree retval)\n       else\n \twarning (OPT_Wreturn_local_addr, \"address of local variable %q+D \"\n \t\t \"returned\", whats_returned);\n-      return;\n+      return true;\n     }\n+\n+  return false;\n }\n \n /* Check that returning RETVAL from the current function is valid.\n@@ -8650,8 +8652,9 @@ check_return_expr (tree retval, bool *no_warning)\n \t       && TREE_CODE (TREE_OPERAND (retval, 1)) == AGGR_INIT_EXPR)\n \tretval = build2 (COMPOUND_EXPR, TREE_TYPE (retval), retval,\n \t\t\t TREE_OPERAND (retval, 0));\n-      else\n-\tmaybe_warn_about_returning_address_of_local (retval);\n+      else if (maybe_warn_about_returning_address_of_local (retval))\n+\tretval = build2 (COMPOUND_EXPR, TREE_TYPE (retval), retval,\n+\t\t\t build_zero_cst (TREE_TYPE (retval)));\n     }\n \n   /* Actually copy the value returned into the appropriate location.  */"}, {"sha": "0b62915f55d5e066f40d879c69fa07726d7f8f84", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 94, "deletions": 10, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -42,6 +42,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"tree-cfg.h\"\n+#include \"diagnostic-core.h\"\n+#include \"intl.h\"\n \n \n static bool cfg_altered;\n@@ -132,13 +134,15 @@ insert_trap_and_remove_trailing_statements (gimple_stmt_iterator *si_p, tree op)\n    Optimization is simple as well.  Replace STMT in BB' with an\n    unconditional trap and remove all outgoing edges from BB'.\n \n+   If RET_ZERO, do not trap, only return NULL.\n+\n    DUPLICATE is a pre-existing duplicate, use it as BB' if it exists.\n \n    Return BB'.  */\n \n basic_block\n isolate_path (basic_block bb, basic_block duplicate,\n-\t      edge e, gimple stmt, tree op)\n+\t      edge e, gimple stmt, tree op, bool ret_zero)\n {\n   gimple_stmt_iterator si, si2;\n   edge_iterator ei;\n@@ -151,8 +155,9 @@ isolate_path (basic_block bb, basic_block duplicate,\n   if (!duplicate)\n     {\n       duplicate = duplicate_block (bb, NULL, NULL);\n-      for (ei = ei_start (duplicate->succs); (e2 = ei_safe_edge (ei)); )\n-\tremove_edge (e2);\n+      if (!ret_zero)\n+\tfor (ei = ei_start (duplicate->succs); (e2 = ei_safe_edge (ei)); )\n+\t  remove_edge (e2);\n     }\n \n   /* Complete the isolation step by redirecting E to reach DUPLICATE.  */\n@@ -197,7 +202,17 @@ isolate_path (basic_block bb, basic_block duplicate,\n      SI2 points to the duplicate of STMT in DUPLICATE.  Insert a trap\n      before SI2 and remove SI2 and all trailing statements.  */\n   if (!gsi_end_p (si2))\n-    insert_trap_and_remove_trailing_statements (&si2, op);\n+    {\n+      if (ret_zero)\n+\t{\n+\t  gimple ret = gsi_stmt (si2);\n+\t  tree zero = build_zero_cst (TREE_TYPE (gimple_return_retval (ret)));\n+\t  gimple_return_set_retval (ret, zero);\n+\t  update_stmt (ret);\n+\t}\n+      else\n+\tinsert_trap_and_remove_trailing_statements (&si2, op);\n+    }\n \n   return duplicate;\n }\n@@ -255,16 +270,49 @@ find_implicit_erroneous_behaviour (void)\n \t       i = next_i)\n \t    {\n \t      tree op = gimple_phi_arg_def (phi, i);\n+\t      edge e = gimple_phi_arg_edge (phi, i);\n+\t      imm_use_iterator iter;\n+\t      gimple use_stmt;\n \n \t      next_i = i + 1;\n \n+\t      if (TREE_CODE (op) == ADDR_EXPR)\n+\t\t{\n+\t\t  tree valbase = get_base_address (TREE_OPERAND (op, 0));\n+\t\t  if ((TREE_CODE (valbase) == VAR_DECL\n+\t\t       && !is_global_var (valbase))\n+\t\t      || TREE_CODE (valbase) == PARM_DECL)\n+\t\t    {\n+\t\t      FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n+\t\t\t{\n+\t\t\t  if (gimple_code (use_stmt) != GIMPLE_RETURN\n+\t\t\t      || gimple_return_retval (use_stmt) != lhs)\n+\t\t\t    continue;\n+\n+\t\t\t  if (warning_at (gimple_location (use_stmt),\n+\t\t\t\t\t  OPT_Wreturn_local_addr,\n+\t\t\t\t\t  \"function may return address \"\n+\t\t\t\t\t  \"of local variable\"))\n+\t\t\t    inform (DECL_SOURCE_LOCATION(valbase),\n+\t\t\t\t    \"declared here\");\n+\n+\t\t\t  if (gimple_bb (use_stmt) == bb)\n+\t\t\t    {\n+\t\t\t      duplicate = isolate_path (bb, duplicate, e,\n+\t\t\t\t\t\t\tuse_stmt, lhs, true);\n+\n+\t\t\t      /* When we remove an incoming edge, we need to\n+\t\t\t\t reprocess the Ith element.  */\n+\t\t\t      next_i = i;\n+\t\t\t      cfg_altered = true;\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\n \t      if (!integer_zerop (op))\n \t\tcontinue;\n \n-\t      edge e = gimple_phi_arg_edge (phi, i);\n-\t      imm_use_iterator iter;\n-\t      gimple use_stmt;\n-\n \t      /* We've got a NULL PHI argument.  Now see if the\n  \t         PHI's result is dereferenced within BB.  */\n \t      FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n@@ -280,8 +328,8 @@ find_implicit_erroneous_behaviour (void)\n \t\t\t\t\t   flag_isolate_erroneous_paths_attribute))\n \n \t\t    {\n-\t\t      duplicate = isolate_path (bb, duplicate,\n-\t\t\t\t\t\te, use_stmt, lhs);\n+\t\t      duplicate = isolate_path (bb, duplicate, e,\n+\t\t\t\t\t\tuse_stmt, lhs, false);\n \n \t\t      /* When we remove an incoming edge, we need to\n \t\t\t reprocess the Ith element.  */\n@@ -347,9 +395,45 @@ find_explicit_erroneous_behaviour (void)\n \t      cfg_altered = true;\n \t      break;\n \t    }\n+\n+\t  /* Detect returning the address of a local variable.  This only\n+\t     becomes undefined behavior if the result is used, so we do not\n+\t     insert a trap and only return NULL instead.  */\n+\t  if (gimple_code (stmt) == GIMPLE_RETURN)\n+\t    {\n+\t      tree val = gimple_return_retval (stmt);\n+\t      if (val && TREE_CODE (val) == ADDR_EXPR)\n+\t\t{\n+\t\t  tree valbase = get_base_address (TREE_OPERAND (val, 0));\n+\t\t  if ((TREE_CODE (valbase) == VAR_DECL\n+\t\t       && !is_global_var (valbase))\n+\t\t      || TREE_CODE (valbase) == PARM_DECL)\n+\t\t    {\n+\t\t      /* We only need it for this particular case.  */\n+\t\t      calculate_dominance_info (CDI_POST_DOMINATORS);\n+\t\t      const char* msg;\n+\t\t      bool always_executed = dominated_by_p\n+\t\t\t(CDI_POST_DOMINATORS,\n+\t\t\t single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun)), bb);\n+\t\t      if (always_executed)\n+\t\t\tmsg = N_(\"function returns address of local variable\");\n+\t\t      else\n+\t\t\tmsg = N_(\"function may return address of \"\n+\t\t\t\t \"local variable\");\n+\n+\t\t      if (warning_at (gimple_location (stmt),\n+\t\t\t\t      OPT_Wreturn_local_addr, msg))\n+\t\t\tinform (DECL_SOURCE_LOCATION(valbase), \"declared here\");\n+\t\t      tree zero = build_zero_cst (TREE_TYPE (val));\n+\t\t      gimple_return_set_retval (stmt, zero);\n+\t\t      update_stmt (stmt);\n+\t\t    }\n+\t\t}\n+\t    }\n \t}\n     }\n }\n+\n /* Search the function for statements which, if executed, would cause\n    the program to fault such as a dereference of a NULL pointer.\n "}, {"sha": "c0e558593f51427a788168d3bf3ceff7d620d22a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -1,3 +1,9 @@\n+2014-07-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/60517\n+\t* c-c++-common/addrtmp.c: New file.\n+\t* c-c++-common/uninit-G.c: Adapt.\n+\n 2014-07-31  Bingfeng Mei  <bmei@broadcom.com>\n \n \tPR lto/61868"}, {"sha": "3b8140cf80557196ca2c712c8253748e3cd7019f", "filename": "gcc/testsuite/c-c++-common/addrtmp.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Faddrtmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Faddrtmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Faddrtmp.c?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct A { int a,b; } A;\n+int*g(int*x){return x;}\n+int*f1(){\n+  A x[2]={{1,2},{3,4}};\n+  return g(&x[1].a); // { dg-warning \"returns address of local variable\" }\n+}\n+int*f2(int n){\n+  A x[2]={{1,2},{3,4}};\n+  return n?0:g(&x[1].a); // { dg-warning \"may return address of local variable\" }\n+}\n+A y[2]={{1,2},{3,4}};\n+int*h(){\n+  return g(&y[1].a);\n+}\n+int*j(int n){\n+  A x[2]={{1,2},{3,4}};\n+  int*p=g(&y[1].a);\n+  if(n==1)p=g(&x[1].a);\n+  if(n==2)p=g(&x[0].b);\n+  return p; // { dg-warning \"may return address of local variable\" }\n+}\n+int*s()\n+{\n+  static int i;\n+  return &i;\n+}"}, {"sha": "1a06f0665c19d9c18c5526894834cae8fa2cd447", "filename": "gcc/testsuite/c-c++-common/uninit-G.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funinit-G.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4dfdc11a5440c5aaf0a86d011facaddc61806be/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funinit-G.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Funinit-G.c?ref=b4dfdc11a5440c5aaf0a86d011facaddc61806be", "patch": "@@ -2,8 +2,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -Wuninitialized\" } */\n \n-void *f()\n+void g(void*);\n+void f()\n {\n   void *i = &i;\n-  return i;\n+  g(i);\n }"}]}