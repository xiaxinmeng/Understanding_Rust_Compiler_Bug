{"sha": "eca767aa51d1f69614222ceb130ca6bb07713232", "node_id": "C_kwDOANBUbNoAKGVjYTc2N2FhNTFkMWY2OTYxNDIyMmNlYjEzMGNhNmJiMDc3MTMyMzI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-29T07:28:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-29T07:28:32Z"}, "message": "c++: Implement DR2351 - void{} [PR102820]\n\nHere is an implementation of DR2351 - void{} - where void{} after\npack expansion is considered valid and the same thing as void().\nFor templates, if CONSTRUCTOR_NELTS is 0, the CONSTRUCTOR is not dependent\nand we can return void_node right away, if it is dependent and contains\nonly packs, then it is potentially zero element and so we need to build\nCONSTRUCTOR_IS_DEPENDENT CONSTRUCTOR, while if it contains any non-pack\nelts, we can diagnose it right away.\n\n2021-10-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102820\n\t* semantics.c (maybe_zero_constructor_nelts): New function.\n\t(finish_compound_literal): Implement DR2351 - void{}.\n\tIf type is cv void and compound_literal has no elements, return\n\tvoid_node.  If type is cv void and compound_literal might have no\n\telements after expansion, handle it like other dependent compound\n\tliterals.\n\n\t* g++.dg/cpp0x/dr2351.C: New test.", "tree": {"sha": "6fd22f2e45dab8a8542eeeff6ace686b4dd9e035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd22f2e45dab8a8542eeeff6ace686b4dd9e035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca767aa51d1f69614222ceb130ca6bb07713232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca767aa51d1f69614222ceb130ca6bb07713232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca767aa51d1f69614222ceb130ca6bb07713232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca767aa51d1f69614222ceb130ca6bb07713232/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "146b83e14a0a76a9ce8a4cb79997a078f437f779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146b83e14a0a76a9ce8a4cb79997a078f437f779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146b83e14a0a76a9ce8a4cb79997a078f437f779"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "2443d0327498bf2fba11d80b51a4762a945dfe4e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca767aa51d1f69614222ceb130ca6bb07713232/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca767aa51d1f69614222ceb130ca6bb07713232/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=eca767aa51d1f69614222ceb130ca6bb07713232", "patch": "@@ -3079,6 +3079,22 @@ finish_unary_op_expr (location_t op_loc, enum tree_code code, cp_expr expr,\n   return result;\n }\n \n+/* Return true if CONSTRUCTOR EXPR after pack expansion could have no\n+   elements.  */\n+\n+static bool\n+maybe_zero_constructor_nelts (tree expr)\n+{\n+  if (CONSTRUCTOR_NELTS (expr) == 0)\n+    return true;\n+  if (!processing_template_decl)\n+    return false;\n+  for (constructor_elt &elt : CONSTRUCTOR_ELTS (expr))\n+    if (!PACK_EXPANSION_P (elt.value))\n+      return false;\n+  return true;\n+}\n+\n /* Finish a compound-literal expression or C++11 functional cast with aggregate\n    initializer.  TYPE is the type to which the CONSTRUCTOR in COMPOUND_LITERAL\n    is being cast.  */\n@@ -3104,9 +3120,20 @@ finish_compound_literal (tree type, tree compound_literal,\n \n   if (!TYPE_OBJ_P (type))\n     {\n-      if (complain & tf_error)\n-\terror (\"compound literal of non-object type %qT\", type);\n-      return error_mark_node;\n+      /* DR2351 */\n+      if (VOID_TYPE_P (type) && CONSTRUCTOR_NELTS (compound_literal) == 0)\n+\treturn void_node;\n+      else if (VOID_TYPE_P (type)\n+\t       && processing_template_decl\n+\t       && maybe_zero_constructor_nelts (compound_literal))\n+\t/* If there are only packs in compound_literal, it could\n+\t   be void{} after pack expansion.  */;\n+      else\n+\t{\n+\t  if (complain & tf_error)\n+\t    error (\"compound literal of non-object type %qT\", type);\n+\t  return error_mark_node;\n+\t}\n     }\n \n   if (template_placeholder_p (type))"}, {"sha": "5116dfe104ecb4b56e72b18ea725678eb0ca6482", "filename": "gcc/testsuite/g++.dg/cpp0x/dr2351.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca767aa51d1f69614222ceb130ca6bb07713232/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdr2351.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca767aa51d1f69614222ceb130ca6bb07713232/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdr2351.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdr2351.C?ref=eca767aa51d1f69614222ceb130ca6bb07713232", "patch": "@@ -0,0 +1,51 @@\n+// DR2351\n+// { dg-do compile { target c++11 } }\n+\n+void\n+foo ()\n+{\n+  void{};\n+  void();\n+}\n+\n+template <class ...T>\n+void\n+bar (T... t)\n+{\n+  void{t...};\n+  void(t...);\n+}\n+\n+void\n+baz ()\n+{\n+  bar ();\n+}\n+\n+template <class ...T>\n+void\n+qux (T... t)\n+{\n+  void{t...};\t// { dg-error \"compound literal of non-object type\" }\n+}\n+\n+void\n+corge ()\n+{\n+  qux (1, 2);\n+}\n+\n+template <class ...T>\n+void\n+garply (T... t)\n+{\n+  void{t..., t..., t...};\n+  void(t..., t..., t...);\n+}\n+\n+template <class ...T>\n+void\n+grault (T... t)\n+{\n+  void{t..., 1};\t// { dg-error \"compound literal of non-object type\" }\n+}"}]}