{"sha": "5e851c020abe8d78f73ace4ff8a3a2e047662865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU4NTFjMDIwYWJlOGQ3OGY3M2FjZTRmZjhhM2EyZTA0NzY2Mjg2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-26T20:32:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-26T20:32:05Z"}, "message": "reorg.c (try_merge_delay_insns): Declare i and j inside the for loops rather than one for the whole function.\n\n\t* reorg.c (try_merge_delay_insns): Declare i and j inside the\n\tfor loops rather than one for the whole function.\n\nFrom-SVN: r235451", "tree": {"sha": "1e7bd78305573f11df0397525a78334fa82dec89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e7bd78305573f11df0397525a78334fa82dec89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e851c020abe8d78f73ace4ff8a3a2e047662865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e851c020abe8d78f73ace4ff8a3a2e047662865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e851c020abe8d78f73ace4ff8a3a2e047662865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e851c020abe8d78f73ace4ff8a3a2e047662865/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca1206be9a340b874a1f6e47f9028c22dda5a9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca1206be9a340b874a1f6e47f9028c22dda5a9f9"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "23852916ad83138049f7271bc654890766b5f38e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e851c020abe8d78f73ace4ff8a3a2e047662865/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e851c020abe8d78f73ace4ff8a3a2e047662865/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e851c020abe8d78f73ace4ff8a3a2e047662865", "patch": "@@ -1,3 +1,8 @@\n+2016-04-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* reorg.c (try_merge_delay_insns): Declare i and j inside the\n+\tfor loops rather than one for the whole function.\n+\n 2016-04-26  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (X + CST CMP X): New transformation."}, {"sha": "c58d608bcb74aaba05a65284555b34af6d9d6fca", "filename": "gcc/reorg.c", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e851c020abe8d78f73ace4ff8a3a2e047662865/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e851c020abe8d78f73ace4ff8a3a2e047662865/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=5e851c020abe8d78f73ace4ff8a3a2e047662865", "patch": "@@ -1260,7 +1260,6 @@ try_merge_delay_insns (rtx_insn *insn, rtx_insn *thread)\n   rtx next_to_match = XVECEXP (PATTERN (insn), 0, slot_number);\n   struct resources set, needed, modified;\n   auto_vec<std::pair<rtx_insn *, bool>, 10> merged_insns;\n-  int i, j;\n   int flags;\n \n   flags = get_jump_flags (delay_insn, JUMP_LABEL (delay_insn));\n@@ -1275,7 +1274,7 @@ try_merge_delay_insns (rtx_insn *insn, rtx_insn *thread)\n      will essentially disable this optimization.  This method is somewhat of\n      a kludge, but I don't see a better way.)  */\n   if (! annul_p)\n-    for (i = 1 ; i < num_slots; i++)\n+    for (int i = 1; i < num_slots; i++)\n       if (XVECEXP (PATTERN (insn), 0, i))\n \tmark_referenced_resources (XVECEXP (PATTERN (insn), 0, i), &needed,\n \t\t\t\t   true);\n@@ -1346,19 +1345,19 @@ try_merge_delay_insns (rtx_insn *insn, rtx_insn *thread)\n       mark_set_resources (filled_insn, &set, 0, MARK_SRC_DEST_CALL);\n       mark_referenced_resources (filled_insn, &needed, true);\n \n-      for (i = 1; i < pat->len (); i++)\n+      for (int i = 1; i < pat->len (); i++)\n \t{\n \t  rtx_insn *dtrial = pat->insn (i);\n \n \t  CLEAR_RESOURCE (&modified);\n \t  /* Account for resources set by the insn following NEXT_TO_MATCH\n \t     inside INSN's delay list. */\n-\t  for (j = 1; slot_number + j < num_slots; j++)\n+\t  for (int j = 1; slot_number + j < num_slots; j++)\n \t    mark_set_resources (XVECEXP (PATTERN (insn), 0, slot_number + j),\n \t\t\t\t&modified, 0, MARK_SRC_DEST_CALL);\n \t  /* Account for resources set by the insn before DTRIAL and inside\n \t     TRIAL's delay list. */\n-\t  for (j = 1; j < i; j++)\n+\t  for (int j = 1; j < i; j++)\n \t    mark_set_resources (XVECEXP (pat, 0, j),\n \t\t\t\t&modified, 0, MARK_SRC_DEST_CALL); \n \t  if (! insn_references_resource_p (dtrial, &set, true)\n@@ -1411,24 +1410,22 @@ try_merge_delay_insns (rtx_insn *insn, rtx_insn *thread)\n     {\n       unsigned int len = merged_insns.length ();\n       for (unsigned int i = len - 1; i < len; i--)\n-\t{\n-\t  if (merged_insns[i].second)\n-\t    {\n-\t      update_block (merged_insns[i].first, thread);\n-\t      rtx_insn *new_rtx = delete_from_delay_slot (merged_insns[i].first);\n-\t      if (thread->deleted ())\n-\t\tthread = new_rtx;\n-\t    }\n-\t  else\n-\t    {\n-\t      update_block (merged_insns[i].first, thread);\n-\t      delete_related_insns (merged_insns[i].first);\n-\t    }\n-\t}\n+\tif (merged_insns[i].second)\n+\t  {\n+\t    update_block (merged_insns[i].first, thread);\n+\t    rtx_insn *new_rtx = delete_from_delay_slot (merged_insns[i].first);\n+\t    if (thread->deleted ())\n+\t      thread = new_rtx;\n+\t  }\n+\telse\n+\t  {\n+\t    update_block (merged_insns[i].first, thread);\n+\t    delete_related_insns (merged_insns[i].first);\n+\t  }\n \n       INSN_ANNULLED_BRANCH_P (delay_insn) = 0;\n \n-      for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n+      for (int i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n \tINSN_FROM_TARGET_P (XVECEXP (PATTERN (insn), 0, i)) = 0;\n     }\n }"}]}