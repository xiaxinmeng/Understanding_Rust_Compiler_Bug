{"sha": "e0f6cba004eb94ef9a06c68d09160d8601503085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmNmNiYTAwNGViOTRlZjlhMDZjNjhkMDkxNjBkODYwMTUwMzA4NQ==", "commit": {"author": {"name": "Magnus Granberg", "email": "zorry@gentoo.org", "date": "2015-08-19T22:07:06Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-08-19T22:07:06Z"}, "message": "common.opt (fstack-protector): Initialize to -1.\n\n       * common.opt (fstack-protector): Initialize to -1.\n        (fstack-protector-all): Likewise.\n        (fstack-protector-strong): Likewise.\n        (fstack-protector-explicit): Likewise.\n        * configure.ac: Add --enable-default-ssp.\n        * defaults.h (DEFAULT_FLAG_SSP): New.  Default SSP to strong.\n        * opts.c (finish_options): Update opts->x_flag_stack_protect if it is\n        -1.\n        * doc/install.texi: Document --enable-default-ssp.\n        * config.in: Regenerated.\n        * configure: Likewise.\n\n        * lib/target-supports.exp\n        (check_effective_target_fstack_protector_enabled): New test.\n        * gcc.target/i386/ssp-default.c: New test.\n\nFrom-SVN: r227017", "tree": {"sha": "3ca7ccb634b618bf1984f21463abb0f4d2de83ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ca7ccb634b618bf1984f21463abb0f4d2de83ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f6cba004eb94ef9a06c68d09160d8601503085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f6cba004eb94ef9a06c68d09160d8601503085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f6cba004eb94ef9a06c68d09160d8601503085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f6cba004eb94ef9a06c68d09160d8601503085/comments", "author": {"login": "zorry", "id": 8334094, "node_id": "MDQ6VXNlcjgzMzQwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8334094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorry", "html_url": "https://github.com/zorry", "followers_url": "https://api.github.com/users/zorry/followers", "following_url": "https://api.github.com/users/zorry/following{/other_user}", "gists_url": "https://api.github.com/users/zorry/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorry/subscriptions", "organizations_url": "https://api.github.com/users/zorry/orgs", "repos_url": "https://api.github.com/users/zorry/repos", "events_url": "https://api.github.com/users/zorry/events{/privacy}", "received_events_url": "https://api.github.com/users/zorry/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c24f5688adae2f885279e8fdce74a030e6944b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24f5688adae2f885279e8fdce74a030e6944b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24f5688adae2f885279e8fdce74a030e6944b7b"}], "stats": {"total": 135, "additions": 130, "deletions": 5}, "files": [{"sha": "14446bc67955f1e1c82c06f14ef52ec6c0370a53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -1,3 +1,17 @@\n+2015-08-19  Magnus Granberg  <zorry@gentoo.org>\n+\n+\t* common.opt (fstack-protector): Initialize to -1.\n+\t(fstack-protector-all): Likewise.\n+\t(fstack-protector-strong): Likewise.\n+\t(fstack-protector-explicit): Likewise.\n+\t* configure.ac: Add --enable-default-ssp.\n+\t* defaults.h (DEFAULT_FLAG_SSP): New.  Default SSP to strong.\n+\t* opts.c (finish_options): Update opts->x_flag_stack_protect if it is\n+\t-1.\n+\t* doc/install.texi: Document --enable-default-ssp.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\n 2015-08-19  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR rtl-optimization/64164"}, {"sha": "4dcd51807af5edb4b3e43874a7cfcb2a1e41cd24", "filename": "gcc/common.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -2124,15 +2124,15 @@ Common RejectNegative Joined Var(common_deferred_options) Defer\n -fstack-limit-symbol=<name>\tTrap if the stack goes past symbol <name>\n \n fstack-protector\n-Common Report Var(flag_stack_protect, 1)\n+Common Report Var(flag_stack_protect, 1) Init(-1)\n Use propolice as a stack protection method\n \n fstack-protector-all\n-Common Report RejectNegative Var(flag_stack_protect, 2)\n+Common Report RejectNegative Var(flag_stack_protect, 2) Init(-1)\n Use a stack protection method for every function\n \n fstack-protector-strong\n-Common Report RejectNegative Var(flag_stack_protect, 3)\n+Common Report RejectNegative Var(flag_stack_protect, 3) Init(-1)\n Use a smart stack protection method for certain functions\n \n fstack-protector-explicit"}, {"sha": "22a4e6b7cb22bd7fc3cc6cc52661c1ac5c12e42a", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -95,6 +95,13 @@\n #endif\n \n \n+/* Define if your target supports default stack protector and it is enabled.\n+   */\n+#ifndef USED_FOR_TARGET\n+#undef ENABLE_DEFAULT_SSP\n+#endif\n+\n+\n /* Define if you want more run-time sanity checks for dataflow. */\n #ifndef USED_FOR_TARGET\n #undef ENABLE_DF_CHECKING"}, {"sha": "cf685f29ea6eacfb9844bae5af93c2de97676967", "filename": "gcc/configure", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -678,6 +678,7 @@ MAINT\n zlibinc\n zlibdir\n HOST_LIBS\n+enable_default_ssp\n libgcc_visibility\n gcc_cv_readelf\n gcc_cv_objdump\n@@ -930,6 +931,7 @@ enable_fix_cortex_a53_843419\n with_glibc_version\n enable_gnu_unique_object\n enable_linker_build_id\n+enable_default_ssp\n with_long_double_128\n with_gc\n with_system_zlib\n@@ -1666,6 +1668,7 @@ Optional Features:\n                           extension on glibc systems\n   --enable-linker-build-id\n                           compiler will always pass --build-id to linker\n+  --enable-default-ssp    enable Stack Smashing Protection as default\n   --enable-maintainer-mode\n                           enable make rules and dependencies not useful (and\n                           sometimes confusing) to the casual installer\n@@ -18341,7 +18344,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18344 \"configure\"\n+#line 18347 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18447,7 +18450,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18450 \"configure\"\n+#line 18453 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -28047,6 +28050,29 @@ $as_echo \"#define TARGET_LIBC_PROVIDES_SSP 1\" >>confdefs.h\n \n fi\n \n+# Check whether --enable-default-ssp was given.\n+# Check whether --enable-default-ssp was given.\n+if test \"${enable_default_ssp+set}\" = set; then :\n+  enableval=$enable_default_ssp;\n+if test x$gcc_cv_libc_provides_ssp = xyes; then\n+  case \"$target\" in\n+    ia64*-*-*) enable_default_ssp=no ;;\n+    *) enable_default_ssp=$enableval ;;\n+  esac\n+else\n+  enable_default_ssp=no\n+fi\n+else\n+  enable_default_ssp=no\n+fi\n+\n+if test x$enable_default_ssp == xyes ; then\n+\n+$as_echo \"#define ENABLE_DEFAULT_SSP 1\" >>confdefs.h\n+\n+fi\n+\n+\n # Test for <sys/sdt.h> on the target.\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking sys/sdt.h in the target C library\" >&5"}, {"sha": "d3c1449516d08097586fd896590a1379112f9e5d", "filename": "gcc/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -5329,6 +5329,25 @@ if test x$gcc_cv_libc_provides_ssp = xyes; then\n \t    [Define if your target C library provides stack protector support])\n fi\n \n+# Check whether --enable-default-ssp was given.\n+AC_ARG_ENABLE(default-ssp,\n+[AS_HELP_STRING([--enable-default-ssp],\n+  [enable Stack Smashing Protection as default])],[\n+if test x$gcc_cv_libc_provides_ssp = xyes; then\n+  case \"$target\" in\n+    ia64*-*-*) enable_default_ssp=no ;;\n+    *) enable_default_ssp=$enableval ;;\n+  esac\n+else\n+  enable_default_ssp=no\n+fi],\n+enable_default_ssp=no)\n+if test x$enable_default_ssp == xyes ; then\n+  AC_DEFINE(ENABLE_DEFAULT_SSP, 1,\n+      [Define if your target supports default stack protector and it is enabled.])\n+fi\n+AC_SUBST([enable_default_ssp])\n+\n # Test for <sys/sdt.h> on the target.\n GCC_TARGET_TEMPLATE([HAVE_SYS_SDT_H])\n AC_MSG_CHECKING(sys/sdt.h in the target C library)"}, {"sha": "4fe8eb17f48289aa3802fbc22970f26372c45b4c", "filename": "gcc/defaults.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -1359,6 +1359,18 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define STACK_SIZE_MODE word_mode\n #endif\n \n+/* Default value for flag_stack_protect when flag_stack_protect is initialized to -1:\n+   --enable-default-ssp: Default flag_stack_protect to -fstack-protector-strong.\n+   --disable-default-ssp: Default flag_stack_protect to 0.\n+ */\n+#ifdef ENABLE_DEFAULT_SSP\n+# ifndef DEFAULT_FLAG_SSP\n+#  define DEFAULT_FLAG_SSP 3\n+# endif\n+#else\n+# define DEFAULT_FLAG_SSP 0\n+#endif\n+\n /* Provide default values for the macros controlling stack checking.  */\n \n /* The default is neither full builtin stack checking...  */"}, {"sha": "6ba0fb97058bc33961f3ee19d27463cc285bc334", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -1642,6 +1642,9 @@ Using the GNU Compiler Collection (GCC)},\n See ``RS/6000 and PowerPC Options'' in the main manual\n @end ifhtml\n \n+@item --enable-default-ssp\n+Turn on @option{-fstack-protector-strong} by default.\n+\n @item --enable-cld\n This option enables @option{-mcld} by default for 32-bit x86 targets.\n @ifnothtml"}, {"sha": "f1a9acd7ba04af2b6868ca25ce031ee2b7f1b360", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -754,6 +754,11 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n       opts->x_flag_opts_finished = true;\n     }\n \n+  /* We initialize opts->x_flag_stack_protect to -1 so that targets\n+     can set a default value.  */\n+  if (opts->x_flag_stack_protect == -1)\n+    opts->x_flag_stack_protect = DEFAULT_FLAG_SSP;\n+\n   if (opts->x_optimize == 0)\n     {\n       /* Inlining does not work if not optimizing,"}, {"sha": "9654cc340892b9d565948d2b95fd55185c1e5e2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -1,3 +1,9 @@\n+2015-08-19  Magnus Granberg  <zorry@gentoo.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_fstack_protector_enabled): New test.\n+\t* gcc.target/i386/ssp-default.c: New test.\n+\n 2015-08-19  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/66929"}, {"sha": "3f65ed8a80d044fd333b9ef7954143e1e146c595", "filename": "gcc/testsuite/gcc.target/i386/ssp-default.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssp-default.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssp-default.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fssp-default.c?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run { target native } } */\n+/* { dg-require-effective-target fstack_protector_enabled } */\n+\n+#include <stdlib.h>\n+\n+void\n+__stack_chk_fail (void)\n+{\n+  exit (0); /* pass */\n+}\n+\n+int main ()\n+{\n+  int i;\n+  char foo[255];\n+\n+  /* smash stack */\n+  for (i = 0; i <= 400; i++)\n+    foo[i] = 42;\n+\n+  return 1; /* fail */\n+}"}, {"sha": "b6551e834d0ec7652b16dcb887153587f3e33bb1", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f6cba004eb94ef9a06c68d09160d8601503085/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e0f6cba004eb94ef9a06c68d09160d8601503085", "patch": "@@ -1145,6 +1145,17 @@ proc check_effective_target_pie_enabled { } {\n     }]\n }\n \n+# Return 1 if the target generates -fstack-protector by default.\n+\n+proc check_effective_target_fstack_protector_enabled {} {\n+    return [ check_no_compiler_messages fstack_protector_enabled assembly {\n+    #if !defined(__SSP__) && !defined(__SSP_ALL__) && \\\n+      !defined(__SSP_STRONG__) && !defined(__SSP_EXPICIT__)\n+    #error unsupported\n+    #endif\n+    }]\n+}\n+\n # Return 1 if the target does not use a status wrapper.\n \n proc check_effective_target_unwrapped { } {"}]}