{"sha": "29c3d574af087966662b30fe33b3727f9bb504df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjljM2Q1NzRhZjA4Nzk2NjY2MmIzMGZlMzNiMzcyN2Y5YmI1MDRkZg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-09-23T10:41:04Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T10:41:04Z"}, "message": "[PATCH 13/17][ARM] Add VFP FP16 instrinsics.\n\ngcc/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config.gcc (extra_headers): Add arm_fp16.h\n\t* config/arm/arm_fp16.h: New.\n\t* config/arm/arm_neon.h: Include \"arm_fp16.h\".\n\nFrom-SVN: r240423", "tree": {"sha": "f20f9c46839cd1b0a27f013a3792f0ea41341b30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f20f9c46839cd1b0a27f013a3792f0ea41341b30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c3d574af087966662b30fe33b3727f9bb504df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c3d574af087966662b30fe33b3727f9bb504df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c3d574af087966662b30fe33b3727f9bb504df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c3d574af087966662b30fe33b3727f9bb504df/comments", "author": null, "committer": null, "parents": [{"sha": "0768b127e5ea675efb5377fc6bbd52e399a6f580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0768b127e5ea675efb5377fc6bbd52e399a6f580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0768b127e5ea675efb5377fc6bbd52e399a6f580"}], "stats": {"total": 264, "additions": 263, "deletions": 1}, "files": [{"sha": "88556b8268292eb74a23e4ea28075a82f92c481f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29c3d574af087966662b30fe33b3727f9bb504df", "patch": "@@ -1,3 +1,9 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config.gcc (extra_headers): Add arm_fp16.h\n+\t* config/arm/arm_fp16.h: New.\n+\t* config/arm/arm_neon.h: Include \"arm_fp16.h\".\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm_neon_builtins.def (vadd): New (v8hf, v4hf"}, {"sha": "5a9c50c020800c9ceb9d490bb844177aa1ac9869", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=29c3d574af087966662b30fe33b3727f9bb504df", "patch": "@@ -320,7 +320,7 @@ arc*-*-*)\n arm*-*-*)\n \tcpu_type=arm\n \textra_objs=\"arm-builtins.o aarch-common.o\"\n-\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h\"\n+\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\""}, {"sha": "c72d8c4892022d704bf2617b32755deb2317025f", "filename": "gcc/config/arm/arm_fp16.h", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2Fconfig%2Farm%2Farm_fp16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2Fconfig%2Farm%2Farm_fp16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_fp16.h?ref=29c3d574af087966662b30fe33b3727f9bb504df", "patch": "@@ -0,0 +1,255 @@\n+/* ARM FP16 intrinsics include file.\n+\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_ARM_FP16_H\n+#define _GCC_ARM_FP16_H 1\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stdint.h>\n+\n+/* Intrinsics for FP16 instructions.  */\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=fp-armv8\")\n+\n+#if defined (__ARM_FEATURE_FP16_SCALAR_ARITHMETIC)\n+\n+typedef __fp16 float16_t;\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vabsh_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vabshf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vaddh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtah_s32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtahssi (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtah_u32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtahusi (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_s32 (int32_t __a)\n+{\n+  return __builtin_neon_vcvthshf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_u32 (uint32_t __a)\n+{\n+  return __builtin_neon_vcvthuhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_s32 (int32_t __a, const int __b)\n+{\n+  return __builtin_neon_vcvths_nhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_n_f16_u32 (uint32_t __a, const int __b)\n+{\n+  return __builtin_neon_vcvthu_nhf ((int32_t)__a, __b);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvth_n_s32_f16 (float16_t __a, const int __b)\n+{\n+  return __builtin_neon_vcvths_nsi (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvth_n_u32_f16 (float16_t __a, const int __b)\n+{\n+  return (uint32_t)__builtin_neon_vcvthu_nsi (__a, __b);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvth_s32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvthssi (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvth_u32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvthusi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtmh_s32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtmhssi (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtmh_u32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtmhusi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtnh_s32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtnhssi (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtnh_u32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtnhusi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtph_s32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtphssi (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtph_u32_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vcvtphusi (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vdivh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a / __b;\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vfmah_f16 (float16_t __a, float16_t __b, float16_t __c)\n+{\n+  return __builtin_neon_vfmahf (__a, __b, __c);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vfmsh_f16 (float16_t __a, float16_t __b, float16_t __c)\n+{\n+  return __builtin_neon_vfmshf (__a, __b, __c);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmaxnmh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_neon_vmaxnmhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vminnmh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __builtin_neon_vminnmhf (__a, __b);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vmulh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a * __b;\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vnegh_f16 (float16_t __a)\n+{\n+  return  - __a;\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndah_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndahf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndh_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndih_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndihf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndmh_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndmhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndnh_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndnhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndph_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndphf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndxh_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vrndxhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vsqrth_f16 (float16_t __a)\n+{\n+  return __builtin_neon_vsqrthf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vsubh_f16 (float16_t __a, float16_t __b)\n+{\n+  return __a - __b;\n+}\n+\n+#endif /* __ARM_FEATURE_FP16_SCALAR_ARITHMETIC  */\n+#pragma GCC pop_options\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"}, {"sha": "8ed5aa8f19be406a996cd166fd772e382506bb44", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c3d574af087966662b30fe33b3727f9bb504df/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=29c3d574af087966662b30fe33b3727f9bb504df", "patch": "@@ -38,6 +38,7 @@\n extern \"C\" {\n #endif\n \n+#include <arm_fp16.h>\n #include <stdint.h>\n \n typedef __simd64_int8_t int8x8_t;"}]}