{"sha": "106dbde4b6239ffcffe1c480780921b0387e858a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2ZGJkZTRiNjIzOWZmY2ZmZTFjNDgwNzgwOTIxYjAzODdlODU4YQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-12-18T23:39:56Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-12-18T23:39:56Z"}, "message": "re PR fortran/34495 (accepts invalid initialization expressions withTRANSFER)\n\ngcc/fortran:\n2007-12-19  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/34495\n        * expr.c (check_init_expr): Check whether variables with flavor\n        FL_PARAMETER do have a value assigned. Added error messages where\n        appropriate.\n        * simplify.c (gfc_simplify_transfer): Added check if the MOLD\n        argument is a constant if working with initialization\n        expressions.\n\ngcc/testsuite:\n2007-12-19  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/34495\n        * gfortran.dg/transfer_simplify_2.f90: Fixed invalid initialization\n\texpressions.\n        * gfortran.dg/transfer_simplify_7.f90: New test.\n\nFrom-SVN: r131047", "tree": {"sha": "4a0f5a35f0cffb8801a01fd7818abf666ed82794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a0f5a35f0cffb8801a01fd7818abf666ed82794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/106dbde4b6239ffcffe1c480780921b0387e858a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106dbde4b6239ffcffe1c480780921b0387e858a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106dbde4b6239ffcffe1c480780921b0387e858a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106dbde4b6239ffcffe1c480780921b0387e858a/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "520f6c8df8c48a5fd3c15e80e4853d638d28a715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520f6c8df8c48a5fd3c15e80e4853d638d28a715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520f6c8df8c48a5fd3c15e80e4853d638d28a715"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "56585cf55b762fd7c78df42a3f8151ce4c507508", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=106dbde4b6239ffcffe1c480780921b0387e858a", "patch": "@@ -1,3 +1,13 @@\n+2007-12-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34495\n+\t* expr.c (check_init_expr): Check whether variables with flavor\n+\tFL_PARAMETER do have a value assigned. Added error messages where\n+\tappropriate.\n+\t* simplify.c (gfc_simplify_transfer): Added check if the MOLD\n+\targument is a constant if working with initialization\n+\texpressions.\n+\n 2007-12-17  Tobias Burnus  <burnus@net-b.de>\n \n \t* intrinsic.c (add_functions): Undo change; mark float and"}, {"sha": "4e77605381de662366bce5250099f4cad2750df5", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=106dbde4b6239ffcffe1c480780921b0387e858a", "patch": "@@ -2202,7 +2202,18 @@ check_init_expr (gfc_expr *e)\n \n       if (e->symtree->n.sym->attr.flavor == FL_PARAMETER)\n \t{\n-\t  t = simplify_parameter_variable (e, 0);\n+\t  /* A PARAMETER shall not be used to define itself, i.e.\n+\t\tREAL, PARAMETER :: x = transfer(0, x)\n+\t     is invalid.  */\n+\t  if (!e->symtree->n.sym->value)\n+\t    {\n+\t      gfc_error(\"PARAMETER '%s' is used at %L before its definition \"\n+\t\t\t\"is complete\", e->symtree->n.sym->name, &e->where);\n+\t      t = FAILURE;\n+\t    }\n+\t  else\n+\t    t = simplify_parameter_variable (e, 0);\n+\n \t  break;\n \t}\n \n@@ -2233,6 +2244,12 @@ check_init_expr (gfc_expr *e)\n \t\t\t   e->symtree->n.sym->name, &e->where);\n \t\tbreak;\n \n+\t      case AS_EXPLICIT:\n+\t\tgfc_error (\"Array '%s' at %L is a variable, which does \"\n+\t\t\t   \"not reduce to a constant expression\",\n+\t\t\t   e->symtree->n.sym->name, &e->where);\n+\t\tbreak;\n+\n \t      default:\n \t\tgcc_unreachable();\n \t  }"}, {"sha": "abcff3cb164bc6b39ef4dd0bd0aedd8c4b2ec141", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=106dbde4b6239ffcffe1c480780921b0387e858a", "patch": "@@ -4088,6 +4088,7 @@ gfc_simplify_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   unsigned char *buffer;\n \n   if (!gfc_is_constant_expr (source)\n+\t|| (gfc_init_expr && !gfc_is_constant_expr (mold))\n \t|| !gfc_is_constant_expr (size))\n     return NULL;\n "}, {"sha": "c22d05ce3ee71cb346f01c900f8b36b09697edc8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=106dbde4b6239ffcffe1c480780921b0387e858a", "patch": "@@ -1,3 +1,10 @@\n+2007-12-19  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/34495\n+\t* gfortran.dg/transfer_simplify_2.f90: Fixed invalid initialization\n+\texpressions.\n+\t* gfortran.dg/transfer_simplify_7.f90: New test.\n+\n 2007-12-18  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/pr32912-3.c: Compile with -w."}, {"sha": "a4da6a539695321577045b250df9bc7f5f747a04", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_2.f90?ref=106dbde4b6239ffcffe1c480780921b0387e858a", "patch": "@@ -71,7 +71,7 @@ end subroutine real8_to_integer4\n \n   subroutine integer8_to_real4\n     integer               ::  k\n-    integer(8), parameter ::  i1(2) = transfer ((/asin (1.0_8), log (1.0_8)/), i1)\n+    integer(8), parameter ::  i1(2) = transfer ((/asin (1.0_8), log (1.0_8)/), 0_8)\n     integer(8)            ::  i2(2) = i1\n     real(4), parameter    ::  r1(4) = transfer (i1, (/(1.0_4,k=1,4)/))\n     real(4)               ::  r2(4)\n@@ -82,7 +82,7 @@ end subroutine integer8_to_real4\n \n   subroutine integer8_to_complex4\n     integer               ::  k\n-    integer(8), parameter ::  i1(2) = transfer ((/asin (1.0_8), log (1.0_8)/), i1)\n+    integer(8), parameter ::  i1(2) = transfer ((/asin (1.0_8), log (1.0_8)/), 0_8)\n     integer(8)            ::  i2(2) = i1\n     complex(4), parameter ::  z1(2) = transfer (i1, (/((1.0_4,2.0_4),k=1,2)/))\n     complex(4)            ::  z2(2)"}, {"sha": "0ba3efa32a04dc0d7a498c8b404c730801b8d49e", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_7.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106dbde4b6239ffcffe1c480780921b0387e858a/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_7.f90?ref=106dbde4b6239ffcffe1c480780921b0387e858a", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do compile }\n+! PR fortran/34495 - accepts invalid init-expr with TRANSFER\n+\n+! 'b' is implicitly typed\n+real :: a = transfer(1234, b)              ! { dg-error \"does not reduce to a constant\" }\n+\n+! 'c' is used on lhs and rhs\n+real :: c = transfer(1234, c)              ! { dg-error \"does not reduce to a constant\" }\n+\n+! 'bp' is implicitly typed\n+real, parameter :: ap = transfer(1234, bp) ! { dg-error \"does not reduce to a constant\" }\n+\n+! 'yp' is used on lhs and rhs\n+real, parameter :: cp = transfer(1234, cp) ! { dg-error \"before its definition is complete\" }\n+\n+\n+! same with arrays\n+real, dimension(2) :: a2 = transfer([1, 2], b2)  ! { dg-error \"does not reduce to a constant\" }\n+\n+real, dimension(2) :: a2 = transfer([1, 2], b2)  ! { dg-error \"does not reduce to a constant\" }\n+\n+dimension :: bp(2)\n+real, parameter, dimension(2) :: ap2 = transfer([1, 2], bp2)  ! { dg-error \"does not reduce to a constant\" }\n+\n+real, parameter, dimension(2) :: cp2 = transfer([1, 2], cp2)  ! { dg-error \"before its definition is complete\" }\n+\n+\n+! same with matrices\n+real, dimension(2,2) :: a3 = transfer([1, 2, 3, 4], b3)  ! { dg-error \"does not reduce to a constant\" }\n+\n+real, dimension(2,2) :: a3 = transfer([1, 2, 3, 4], b3)  ! { dg-error \"does not reduce to a constant\" }\n+\n+dimension :: bp3(2,2)\n+real, parameter, dimension(2,2) :: ap3 = transfer([1, 2, 3, 4], bp3)  ! { dg-error \"does not reduce to a constant\" }\n+\n+real, parameter, dimension(2,2) :: cp3 = transfer([1, 2, 3, 4], cp3)  ! { dg-error \"before its definition is complete\" }\n+\n+end"}]}