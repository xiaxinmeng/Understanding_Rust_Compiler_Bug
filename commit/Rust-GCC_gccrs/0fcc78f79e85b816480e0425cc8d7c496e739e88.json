{"sha": "0fcc78f79e85b816480e0425cc8d7c496e739e88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjYzc4Zjc5ZTg1YjgxNjQ4MGUwNDI1Y2M4ZDdjNDk2ZTczOWU4OA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-06-16T21:24:56Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-06-16T21:24:56Z"}, "message": "MSP430: Implement 64-bit shifts in assembly code\n\ngcc/ChangeLog:\n\n2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.c (msp430_expand_helper): Setup arguments which\n\tdescribe how to perform MSPABI compliant 64-bit shift.\n\t* config/msp430/msp430.md (ashldi3): New define_expand.\n\t(ashrdi3): New define_expand.\n\t(lshrdi3): New define_expand.\n\nlibgcc/ChangeLog:\n\n2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/slli.S (__mspabi_sllll): New library function for\n\tperforming a logical left shift of a 64-bit value.\n\t* config/msp430/srai.S (__mspabi_srall): New library function for\n\tperforming a arithmetic right shift of a 64-bit value.\n\t* config/msp430/srll.S (__mspabi_srlll): New library function for\n\tperforming a logical right shift of a 64-bit value.\n\ngcc/testsuite/ChangeLog:\n\n2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* gcc.target/msp430/mspabi_sllll.c: New test.\n\t* gcc.target/msp430/mspabi_srall.c: New test.\n\t* gcc.target/msp430/mspabi_srlll.c: New test.\n\t* gcc.c-torture/execute/shiftdi-2.c: New test.\n\nFrom-SVN: r272360", "tree": {"sha": "588d5986dd2a505d0fff820371c546025752c25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/588d5986dd2a505d0fff820371c546025752c25e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fcc78f79e85b816480e0425cc8d7c496e739e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc78f79e85b816480e0425cc8d7c496e739e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcc78f79e85b816480e0425cc8d7c496e739e88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcc78f79e85b816480e0425cc8d7c496e739e88/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1409f3b0f39baa489d4cc467a3489dfe78653ec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1409f3b0f39baa489d4cc467a3489dfe78653ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1409f3b0f39baa489d4cc467a3489dfe78653ec4"}], "stats": {"total": 229, "additions": 227, "deletions": 2}, "files": [{"sha": "1b7528b41673e9e4e910963804a902a971fbd228", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -1,3 +1,11 @@\n+2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.c (msp430_expand_helper): Setup arguments which\n+\tdescribe how to perform MSPABI compliant 64-bit shift.\n+\t* config/msp430/msp430.md (ashldi3): New define_expand.\n+\t(ashrdi3): New define_expand.\n+\t(lshrdi3): New define_expand.\n+\n 2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* doc/sourcebuild.texi: Document new effective target keyword"}, {"sha": "365e9eba747f94d2af35da30b6bd8d229c0fbac3", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -3046,6 +3046,7 @@ msp430_expand_helper (rtx *operands, const char *helper_name, bool const_variant\n {\n   rtx c, f;\n   char *helper_const = NULL;\n+  int arg1 = 12;\n   int arg2 = 13;\n   int arg1sz = 1;\n   machine_mode arg0mode = GET_MODE (operands[0]);\n@@ -3079,6 +3080,13 @@ msp430_expand_helper (rtx *operands, const char *helper_name, bool const_variant\n       arg2 = 14;\n       arg1sz = 2;\n     }\n+  else if (arg1mode == DImode)\n+    {\n+      /* Shift value in R8:R11, shift amount in R12.  */\n+      arg1 = 8;\n+      arg1sz = 4;\n+      arg2 = 12;\n+    }\n \n   if (const_variants\n       && CONST_INT_P (operands[2])\n@@ -3091,7 +3099,7 @@ msp430_expand_helper (rtx *operands, const char *helper_name, bool const_variant\n       snprintf (helper_const, len, \"%s_%d\", helper_name, (int) INTVAL (operands[2]));\n     }\n \n-  emit_move_insn (gen_rtx_REG (arg1mode, 12),\n+  emit_move_insn (gen_rtx_REG (arg1mode, arg1),\n \t\t  operands[1]);\n   if (!helper_const)\n     emit_move_insn (gen_rtx_REG (arg2mode, arg2),\n@@ -3104,12 +3112,13 @@ msp430_expand_helper (rtx *operands, const char *helper_name, bool const_variant\n   RTL_CONST_CALL_P (c) = 1;\n \n   f = 0;\n-  use_regs (&f, 12, arg1sz);\n+  use_regs (&f, arg1, arg1sz);\n   if (!helper_const)\n     use_regs (&f, arg2, 1);\n   add_function_usage_to (c, f);\n \n   emit_move_insn (operands[0],\n+\t\t  /* Return value will always start in R12.  */\n \t\t  gen_rtx_REG (arg0mode, 12));\n }\n "}, {"sha": "f6d688950cb38dcbc657e620e1671d4558e27d62", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -822,6 +822,18 @@\n    DONE;\"\n )\n \n+(define_expand \"ashldi3\"\n+  [(set (match_operand:DI\t     0 \"nonimmediate_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"general_operand\")\n+\t\t   (match_operand:DI 2 \"general_operand\")))]\n+  \"\"\n+  {\n+    /* No const_variant for 64-bit shifts.  */\n+    msp430_expand_helper (operands, \\\"__mspabi_sllll\\\", false);\n+    DONE;\n+  }\n+)\n+\n ;;----------\n \n ;; signed A >> C\n@@ -911,6 +923,18 @@\n    DONE;\"\n )\n \n+(define_expand \"ashrdi3\"\n+  [(set (match_operand:DI\t     0 \"nonimmediate_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"general_operand\")\n+\t\t   (match_operand:DI 2 \"general_operand\")))]\n+  \"\"\n+  {\n+    /* No const_variant for 64-bit shifts.  */\n+    msp430_expand_helper (operands, \\\"__mspabi_srall\\\", false);\n+    DONE;\n+  }\n+)\n+\n ;;----------\n \n ;; unsigned A >> C\n@@ -990,6 +1014,18 @@\n    DONE;\"\n )\n \n+(define_expand \"lshrdi3\"\n+  [(set (match_operand:DI\t     0 \"nonimmediate_operand\")\n+\t(ashift:DI (match_operand:DI 1 \"general_operand\")\n+\t\t   (match_operand:DI 2 \"general_operand\")))]\n+  \"\"\n+  {\n+    /* No const_variant for 64-bit shifts.  */\n+    msp430_expand_helper (operands, \\\"__mspabi_srlll\\\", false);\n+    DONE;\n+  }\n+)\n+\n ;;------------------------------------------------------------\n ;; Function Entry/Exit\n "}, {"sha": "55693dc8ac265b217fb6cfbcb508ea4be93a8d53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -1,3 +1,10 @@\n+2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/mspabi_sllll.c: New test.\n+\t* gcc.target/msp430/mspabi_srall.c: New test.\n+\t* gcc.target/msp430/mspabi_srlll.c: New test.\n+\t* gcc.c-torture/execute/shiftdi-2.c: New test.\n+\n 2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* lib/target-supports.exp: Add check_effective_target_longlong64. "}, {"sha": "812946f2850c2ed60d0f355f2177069d42cb26a9", "filename": "gcc/testsuite/gcc.c-torture/execute/shiftdi-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftdi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftdi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fshiftdi-2.c?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-require-effective-target longlong64 } */\n+\n+long long a = 568513516876543756;\n+long long b = -754324895235774564;\n+unsigned long long c = 156789543257562457;\n+\n+long long expected_a[64] = {568513516876543756, 1137027033753087512, 2274054067506175024, 4548108135012350048, 9096216270024700096, -254311533660151424, -508623067320302848, -1017246134640605696, -2034492269281211392, -4068984538562422784, -8137969077124845568, 2170805919459860480, 4341611838919720960, 8683223677839441920, -1080296718030667776, -2160593436061335552, -4321186872122671104, -8642373744245342208, 1161996585218867200, 2323993170437734400, 4647986340875468800, -9150771391958614016, 145201289792323584, 290402579584647168, 580805159169294336, 1161610318338588672, 2323220636677177344, 4646441273354354688, -9153861527000842240, 139021019707867136, 278042039415734272, 556084078831468544, 1112168157662937088, 2224336315325874176, 4448672630651748352, 8897345261303496704, -652053551102558208, -1304107102205116416, -2608214204410232832, -5216428408820465664, 8013887256068620288, -2418969561572311040, -4837939123144622080, 8770865827420307456, -905012418868936704, -1810024837737873408, -3620049675475746816, -7240099350951493632, 3966545371806564352, 7933090743613128704, -2580562586483294208, -5161125172966588416, 8124493727776374784, -2197756618156802048, -4395513236313604096, -8791026472627208192, 864691128455135232, 1729382256910270464, 3458764513820540928, 6917529027641081856, -4611686018427387904, -9223372036854775808ULL, 0, 0};\n+long long expected_b[64] = {-754324895235774564, -377162447617887282, -188581223808943641, -94290611904471821, -47145305952235911, -23572652976117956, -11786326488058978, -5893163244029489, -2946581622014745, -1473290811007373, -736645405503687, -368322702751844, -184161351375922, -92080675687961, -46040337843981, -23020168921991, -11510084460996, -5755042230498, -2877521115249, -1438760557625, -719380278813, -359690139407, -179845069704, -89922534852, -44961267426, -22480633713, -11240316857, -5620158429, -2810079215, -1405039608, -702519804, -351259902, -175629951, -87814976, -43907488, -21953744, -10976872, -5488436, -2744218, -1372109, -686055, -343028, -171514, -85757, -42879, -21440, -10720, -5360, -2680, -1340, -670, -335, -168, -84, -42, -21, -11, -6, -3, -2, -1, -1, -1, -1};\n+unsigned long long expected_c[64] = {156789543257562457, 78394771628781228, 39197385814390614, 19598692907195307, 9799346453597653, 4899673226798826, 2449836613399413, 1224918306699706, 612459153349853, 306229576674926, 153114788337463, 76557394168731, 38278697084365, 19139348542182, 9569674271091, 4784837135545, 2392418567772, 1196209283886, 598104641943, 299052320971, 149526160485, 74763080242, 37381540121, 18690770060, 9345385030, 4672692515, 2336346257, 1168173128, 584086564, 292043282, 146021641, 73010820, 36505410, 18252705, 9126352, 4563176, 2281588, 1140794, 570397, 285198, 142599, 71299, 35649, 17824, 8912, 4456, 2228, 1114, 557, 278, 139, 69, 34, 17, 8, 4, 2, 1, 0, 0, 0, 0, 0, 0};\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < 64; i++)\n+  {\n+    if ((a << i) != expected_a[i]\n+\t|| (b >> i) != expected_b[i]\n+\t|| (c >> i) != expected_c[i])\n+      __builtin_abort ();\n+  }\n+  return 0;\n+}"}, {"sha": "b88a8be73ffe535773d4625a597d6a6f1ab26716", "filename": "gcc/testsuite/gcc.target/msp430/mspabi_sllll.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_sllll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_sllll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_sllll.c?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"ashldi3\" } } */\n+/* { dg-final { scan-assembler \"__mspabi_sllll\" } } */\n+\n+long long\n+foo (long long a)\n+{\n+  return a << 4;\n+}\n+"}, {"sha": "a0aba3d43d78756f6431a256ba731a07f8031f90", "filename": "gcc/testsuite/gcc.target/msp430/mspabi_srall.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_srall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_srall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_srall.c?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"ashrdi3\" } } */\n+/* { dg-final { scan-assembler \"__mspabi_srall\" } } */\n+\n+long long\n+foo (long long a)\n+{\n+  return a >> 4;\n+}\n+"}, {"sha": "cb9a3744b77106bf039d522d5bdce44a7a84ba84", "filename": "gcc/testsuite/gcc.target/msp430/mspabi_srlll.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_srlll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_srlll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmspabi_srlll.c?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"lshrdi3\" } } */\n+/* { dg-final { scan-assembler \"__mspabi_srlll\" } } */\n+\n+unsigned long long\n+foo (unsigned long long a)\n+{\n+  return a >> 4;\n+}\n+"}, {"sha": "fee8b3811a36e79df31b089fd946e0ccd379c6dc", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -1,3 +1,12 @@\n+2019-06-16  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/slli.S (__mspabi_sllll): New library function for\n+\tperforming a logical left shift of a 64-bit value.\n+\t* config/msp430/srai.S (__mspabi_srall): New library function for\n+\tperforming a arithmetic right shift of a 64-bit value.\n+\t* config/msp430/srll.S (__mspabi_srlll): New library function for\n+\tperforming a logical right shift of a 64-bit value.\n+\n 2019-06-14  Matt Thomas  <matt@3am-software.com>\n \t    Matthew Green  <mrg@eterna.com.au>\n \t    Nick Hudson  <skrll@netbsd.org>"}, {"sha": "9210fe6e9343f49fae2966adb1b9df415b05f86f", "filename": "libgcc/config/msp430/slli.S", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2Fconfig%2Fmsp430%2Fslli.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2Fconfig%2Fmsp430%2Fslli.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Fslli.S?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -110,3 +110,36 @@ __mspabi_slll:\n \tRET\n #endif\n \n+/* Logical Left Shift - R8:R11 -> R12:R15\n+   A 64-bit argument would normally be passed in R12:R15, but __mspabi_sllll has\n+   special conventions, so the 64-bit value to shift is passed in R8:R11.\n+   According to the MSPABI, the shift amount is a 64-bit value in R12:R15, but\n+   we only use the low word in R12.  */\n+\n+\t.section\t.text.__mspabi_sllll\n+\t.global __mspabi_sllll\n+__mspabi_sllll:\n+\tMOV R11, R15 ; Free up R11 first\n+\tMOV R12, R11 ; Save the shift amount in R11\n+\tMOV R10, R14\n+\tMOV R9, R13\n+\tMOV R8, R12\n+\tCMP #0,R11\n+\tJNZ 1f\n+#ifdef __MSP430X_LARGE__\n+\tRETA\n+#else\n+\tRET\n+#endif\n+1:\n+\tRLA R12\n+\tRLC R13\n+\tRLC R14\n+\tRLC R15\n+\tADD #-1,R11\n+\tJNZ 1b\n+#ifdef __MSP430X_LARGE__\n+\tRETA\n+#else\n+\tRET\n+#endif"}, {"sha": "ed5c6a5ad7cd78f983c66e9c306e589c62cab70a", "filename": "libgcc/config/msp430/srai.S", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2Fconfig%2Fmsp430%2Fsrai.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2Fconfig%2Fmsp430%2Fsrai.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Fsrai.S?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -108,3 +108,37 @@ __mspabi_sral:\n #else\n \tRET\n #endif\n+\n+/* Arithmetic Right Shift - R8:R11 -> R12:R15\n+   A 64-bit argument would normally be passed in R12:R15, but __mspabi_srall has\n+   special conventions, so the 64-bit value to shift is passed in R8:R11.\n+   According to the MSPABI, the shift amount is a 64-bit value in R12:R15, but\n+   we only use the low word in R12.  */\n+\n+\t.section\t.text.__mspabi_srall\n+\t.global __mspabi_srall\n+__mspabi_srall:\n+\tMOV R11, R15 ; Free up R11 first\n+\tMOV R12, R11 ; Save the shift amount in R11\n+\tMOV R10, R14\n+\tMOV R9, R13\n+\tMOV R8, R12\n+\tCMP #0, R11\n+\tJNZ 1f\n+#ifdef __MSP430X_LARGE__\n+\tRETA\n+#else\n+\tRET\n+#endif\n+1:\n+\tRRA R15\n+\tRRC R14\n+\tRRC R13\n+\tRRC R12\n+\tADD #-1,R11\n+\tJNZ 1b\n+#ifdef __MSP430X_LARGE__\n+\tRETA\n+#else\n+\tRET\n+#endif"}, {"sha": "bc1b034e4b9831f68efcd644deaa3a80a911fc76", "filename": "libgcc/config/msp430/srli.S", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2Fconfig%2Fmsp430%2Fsrli.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fcc78f79e85b816480e0425cc8d7c496e739e88/libgcc%2Fconfig%2Fmsp430%2Fsrli.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Fsrli.S?ref=0fcc78f79e85b816480e0425cc8d7c496e739e88", "patch": "@@ -112,3 +112,38 @@ __mspabi_srll:\n #else\n \tRET\n #endif\n+\n+/* Logical Right Shift - R8:R11 -> R12:R15\n+   A 64-bit argument would normally be passed in R12:R15, but __mspabi_srlll has\n+   special conventions, so the 64-bit value to shift is passed in R8:R11.\n+   According to the MSPABI, the shift amount is a 64-bit value in R12:R15, but\n+   we only use the low word in R12.  */\n+\n+\t.section\t.text.__mspabi_srlll\n+\t.global __mspabi_srlll\n+__mspabi_srlll:\n+\tMOV R11, R15 ; Free up R11 first\n+\tMOV R12, R11 ; Save the shift amount in R11\n+\tMOV R10, R14\n+\tMOV R9, R13\n+\tMOV R8, R12\n+\tCMP #0,R11\n+\tJNZ 1f\n+#ifdef __MSP430X_LARGE__\n+\tRETA\n+#else\n+\tRET\n+#endif\n+1:\n+\tCLRC\n+\tRRC R15\n+\tRRC R14\n+\tRRC R13\n+\tRRC R12\n+\tADD #-1,R11\n+\tJNZ 1b\n+#ifdef __MSP430X_LARGE__\n+\tRETA\n+#else\n+\tRET\n+#endif"}]}