{"sha": "be98560f314f6940b262501fca7ffdd99b223b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU5ODU2MGYzMTRmNjk0MGIyNjI1MDFmY2E3ZmZkZDk5YjIyM2IwNA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-10-11T23:34:03Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-10-11T23:34:03Z"}, "message": "parse.y (patch_if_else_statement): If the condition is constant, optimize away the test.\n\n\n\t* parse.y (patch_if_else_statement):  If the condition is constant,\n\toptimize away the test.\n\nFrom-SVN: r46207", "tree": {"sha": "01bd063c25f7f684651a3ab1070967f70d165aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01bd063c25f7f684651a3ab1070967f70d165aa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be98560f314f6940b262501fca7ffdd99b223b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be98560f314f6940b262501fca7ffdd99b223b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be98560f314f6940b262501fca7ffdd99b223b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be98560f314f6940b262501fca7ffdd99b223b04/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfac6e9fb4ea2fc7b05ded85c805501e4d7700b9"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "634bdc36dfe2b73f346b749ce82f5b5d6440ac0e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be98560f314f6940b262501fca7ffdd99b223b04/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be98560f314f6940b262501fca7ffdd99b223b04/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=be98560f314f6940b262501fca7ffdd99b223b04", "patch": "@@ -1,3 +1,8 @@\n+2001-10-11  Per Bothner  <per@bothner.com>\n+\n+\t* parse.y (patch_if_else_statement):  If the condition is constant,\n+\toptimize away the test.\n+\n 2001-10-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (patch_cast): Call patch_string on the first operand of"}, {"sha": "a5c9867e2871b4a2541c956154ef464f1174298f", "filename": "gcc/java/parse.y", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be98560f314f6940b262501fca7ffdd99b223b04/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be98560f314f6940b262501fca7ffdd99b223b04/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=be98560f314f6940b262501fca7ffdd99b223b04", "patch": "@@ -15016,6 +15016,9 @@ patch_if_else_statement (node)\n      tree node;\n {\n   tree expression = TREE_OPERAND (node, 0);\n+  int can_complete_normally\n+    = (CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 1))\n+       | CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 2)));\n \n   TREE_TYPE (node) = error_mark_node;\n   EXPR_WFL_LINECOL (wfl_operator) = EXPR_WFL_LINECOL (node);\n@@ -15031,11 +15034,22 @@ patch_if_else_statement (node)\n       return error_mark_node;\n     }\n   \n+  if (TREE_CODE (expression) == INTEGER_CST)\n+    {\n+      if (integer_zerop (expression))\n+\tnode = TREE_OPERAND (node, 2);\n+      else\n+\tnode = TREE_OPERAND (node, 1);\n+      if (CAN_COMPLETE_NORMALLY (node) != can_complete_normally)\n+\t{\n+\t  node = build (COMPOUND_EXPR, void_type_node, node, empty_stmt_node);\n+\t  CAN_COMPLETE_NORMALLY (node) = can_complete_normally;\n+\t}\n+      return node;\n+    }\n   TREE_TYPE (node) = void_type_node;\n   TREE_SIDE_EFFECTS (node) = 1;\n-  CAN_COMPLETE_NORMALLY (node)\n-    = CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 1))\n-    | CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 2));\n+  CAN_COMPLETE_NORMALLY (node) = can_complete_normally;\n   return node;\n }\n "}]}