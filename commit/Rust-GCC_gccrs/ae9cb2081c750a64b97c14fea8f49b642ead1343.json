{"sha": "ae9cb2081c750a64b97c14fea8f49b642ead1343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU5Y2IyMDgxYzc1MGE2NGI5N2MxNGZlYThmNDliNjQyZWFkMTM0Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-17T18:46:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-17T18:46:42Z"}, "message": "(expr_no_commas): Do not store temporary skip_evaluation increments on yacc value stack...\n\n(expr_no_commas): Do not store temporary skip_evaluation increments on\nyacc value stack; the code was buggy and occasionally wrote past the\nend of the stack.\n\nFrom-SVN: r13720", "tree": {"sha": "c5b086bf5900c6d02d0eb34abd71f691494bda3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5b086bf5900c6d02d0eb34abd71f691494bda3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae9cb2081c750a64b97c14fea8f49b642ead1343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9cb2081c750a64b97c14fea8f49b642ead1343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9cb2081c750a64b97c14fea8f49b642ead1343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9cb2081c750a64b97c14fea8f49b642ead1343/comments", "author": null, "committer": null, "parents": [{"sha": "289d1b21a861305e89c145eed513c4193d7dd63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289d1b21a861305e89c145eed513c4193d7dd63c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289d1b21a861305e89c145eed513c4193d7dd63c"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "e395f86670e67fddf8993878325d88be5807a72f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae9cb2081c750a64b97c14fea8f49b642ead1343/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae9cb2081c750a64b97c14fea8f49b642ead1343/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ae9cb2081c750a64b97c14fea8f49b642ead1343", "patch": "@@ -1,5 +1,5 @@\n /* YACC parser for C syntax and for Objective C.  -*-c-*-\n-   Copyright (C) 1987, 88, 89, 92-5, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92-6, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -577,38 +577,34 @@ expr_no_commas:\n \t\t{ $$ = parser_build_binary_op ($2, $1, $3); }\n \t| expr_no_commas ANDAND\n \t\t{ $1 = truthvalue_conversion (default_conversion ($1));\n-\t\t  $<itype>2 = $1 == boolean_false_node;\n-\t\t  skip_evaluation += $<itype>2; }\n+\t\t  skip_evaluation += $1 == boolean_false_node; }\n \t  expr_no_commas\n-\t\t{ skip_evaluation -= $<itype>2;\n+\t\t{ skip_evaluation -= $1 == boolean_false_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ANDIF_EXPR, $1, $4); }\n \t| expr_no_commas OROR\n \t\t{ $1 = truthvalue_conversion (default_conversion ($1));\n-\t\t  $<itype>3 = $1 == boolean_true_node;\n-\t\t  skip_evaluation += $<itype>3; }\n+\t\t  skip_evaluation += $1 == boolean_true_node; }\n \t  expr_no_commas\n-\t\t{ skip_evaluation -= $<itype>3;\n+\t\t{ skip_evaluation -= $1 == boolean_true_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ORIF_EXPR, $1, $4); }\n \t| expr_no_commas '?'\n \t\t{ $1 = truthvalue_conversion (default_conversion ($1));\n-\t\t  $<itype>3 = $1 == boolean_true_node;\n-\t\t  $<itype>2 = $1 == boolean_false_node;\n-\t\t  skip_evaluation += $<itype>2; }\n+\t\t  skip_evaluation += $1 == boolean_false_node; }\n           expr ':'\n-\t\t{ skip_evaluation += $<itype>3 - $<itype>2; }\n+\t\t{ skip_evaluation += (($1 == boolean_true_node)\n+\t\t\t\t      - ($1 == boolean_false_node)); }\n \t  expr_no_commas\n-\t\t{ skip_evaluation -= $<itype>3;\n+\t\t{ skip_evaluation -= $1 == boolean_true_node;\n \t\t  $$ = build_conditional_expr ($1, $4, $7); }\n \t| expr_no_commas '?'\n \t\t{ if (pedantic)\n \t\t    pedwarn (\"ANSI C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n \t\t  $<ttype>2 = save_expr ($1);\n \t\t  $1 = truthvalue_conversion (default_conversion ($<ttype>2));\n-\t\t  $<itype>3 = $1 == boolean_true_node;\n-\t\t  skip_evaluation += $<itype>3; }\n+\t\t  skip_evaluation += $1 == boolean_true_node; }\n \t  ':' expr_no_commas\n-\t\t{ skip_evaluation -= $<itype>3;\n+\t\t{ skip_evaluation -= $1 == boolean_true_node;\n \t\t  $$ = build_conditional_expr ($1, $<ttype>2, $5); }\n \t| expr_no_commas '=' expr_no_commas\n \t\t{ $$ = build_modify_expr ($1, NOP_EXPR, $3);"}]}