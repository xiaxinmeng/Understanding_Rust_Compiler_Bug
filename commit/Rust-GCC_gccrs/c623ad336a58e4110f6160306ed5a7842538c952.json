{"sha": "c623ad336a58e4110f6160306ed5a7842538c952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyM2FkMzM2YTU4ZTQxMTBmNjE2MDMwNmVkNWE3ODQyNTM4Yzk1Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-05-07T21:17:13Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-05-07T21:17:13Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r936", "tree": {"sha": "914c5be09460da31e1bb398d1a4043656a56116a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914c5be09460da31e1bb398d1a4043656a56116a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c623ad336a58e4110f6160306ed5a7842538c952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c623ad336a58e4110f6160306ed5a7842538c952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c623ad336a58e4110f6160306ed5a7842538c952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c623ad336a58e4110f6160306ed5a7842538c952/comments", "author": null, "committer": null, "parents": [{"sha": "130659a44243067c8462546a2337256b9ba163c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130659a44243067c8462546a2337256b9ba163c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130659a44243067c8462546a2337256b9ba163c2"}], "stats": {"total": 169, "additions": 142, "deletions": 27}, "files": [{"sha": "e05044208ac9c774734439467d12c8d8c49fadc1", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 142, "deletions": 27, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c623ad336a58e4110f6160306ed5a7842538c952/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c623ad336a58e4110f6160306ed5a7842538c952/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=c623ad336a58e4110f6160306ed5a7842538c952", "patch": "@@ -18,6 +18,7 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n+#include \"halfpic.h\"\n #include \"i386gas.h\"\n \n #define OSF_OS\n@@ -29,6 +30,16 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define abort fancy_abort\n #endif\n \n+#define MASK_HALF_PIC     0x00000100  /* Mask for half-pic code */\n+#define TARGET_HALF_PIC   (target_flags & MASK_HALF_PIC)\n+\n+#ifdef SUBTARGET_SWITCHES\n+#undef SUBTARGET_SWITCHES\n+#endif\n+#define SUBTARGET_SWITCHES \\\n+     { \"half-pic\",     MASK_HALF_PIC},    \\\n+     { \"no-half-pic\", -MASK_HALF_PIC},\n+ \n /* Prefix that appears before all global/static identifiers, except for\n    temporary labels.  */\n \n@@ -59,7 +70,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifdef  CC1_SPEC\n #undef  CC1_SPEC\n #endif\n-#define CC1_SPEC       \"\"\n+#define CC1_SPEC                 \\\n+  \"%{pic-none:    -mno-half-pic} \\\n+   %{pic-lib:     -mhalf-pic}    \\\n+   %{pic-extern:  -mhalf-pic}    \\\n+   %{pic-calls:   -mhalf-pic}\"\n \n #ifdef ASM_SPEC\n #undef ASM_SPEC\n@@ -70,18 +85,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  LINK_SPEC\n #endif\n #define LINK_SPEC      \"%{v*: -v}                           \\\n-                        %{pic-none: -noshrlib} %{noshrlib}  \\\n-\t\t\t%{!pic-none: -warn_nopic}           \\\n-                        %{nostdlib} %{glue}\"\n+\t               %{!noshrlib: %{pic-none: -noshrlib} %{!pic-none: -warn_nopic}} \\\n+\t               %{nostdlib} %{noshrlib} %{glue}\"\n \n #ifdef  LIB_SPEC\n #undef  LIB_SPEC\n #endif\n \n-/* For now, force static libraries instead of shared, but do so that\n-   does not use -noshrlib, since the old linker does not provide it.  */\n-\n-#define LIB_SPEC \"%{!pic-none: %{!pic-lib: -L/usr/ccs/lib }} -lc\"\n+#define LIB_SPEC \"-lc\"\n \n #ifdef  LIBG_SPEC\n #undef  LIBG_SPEC\n@@ -116,6 +127,123 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef  FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO) fprintf (FILE, \"\\tcall _mcount\\n\")\n \n+/* Some machines may desire to change what optimizations are\n+   performed for various optimization levels.   This macro, if\n+   defined, is executed once just after the optimization level is\n+   determined and before the remainder of the command options have\n+   been parsed.  Values set in this macro are used as the default\n+   values for the other command line options.\n+\n+   LEVEL is the optimization level specified; 2 if -O2 is\n+   specified, 1 if -O is specified, and 0 if neither is specified.  */\n+\n+#define OPTIMIZATION_OPTIONS(LEVEL)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  flag_gnu_linker\t\t\t= FALSE;\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (LEVEL)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      flag_omit_frame_pointer\t\t= TRUE;\t\t\t\t\\\n+      flag_thread_jumps\t\t\t= TRUE;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (LEVEL >= 2)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      flag_strength_reduce\t\t= TRUE;\t\t\t\t\\\n+      flag_cse_follow_jumps\t\t= TRUE;\t\t\t\t\\\n+      flag_expensive_optimizations\t= TRUE;\t\t\t\t\\\n+      flag_rerun_cse_after_loop\t\t= TRUE;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (LEVEL >= 3)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      flag_inline_functions\t\t= TRUE;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* A C expression that is 1 if the RTX X is a constant which is a\n+   valid address.  On most machines, this can be defined as\n+   `CONSTANT_P (X)', but a few machines are more restrictive in\n+   which constant addresses are supported.\n+\n+   `CONSTANT_P' accepts integer-values expressions whose values are\n+   not explicitly known, such as `symbol_ref', `label_ref', and\n+   `high' expressions and `const' arithmetic expressions, in\n+   addition to `const_int' and `const_double' expressions.  */\n+\n+#ifdef CONSTANT_ADDRESS_P\n+#undef CONSTANT_ADDRESS_P\n+#endif\n+#define CONSTANT_ADDRESS_P(X)                                           \\\n+  (CONSTANT_P (X) && (!HALF_PIC_P () || !HALF_PIC_ADDRESS_P (X)))\n+\n+/* Define this macro if references to a symbol must be treated\n+   differently depending on something about the variable or\n+   function named by the symbol (such as what section it is in).\n+\n+   The macro definition, if any, is executed immediately after the\n+   rtl for DECL has been created and stored in `DECL_RTL (DECL)'. \n+   The value of the rtl will be a `mem' whose address is a\n+   `symbol_ref'.\n+\n+   The usual thing for this macro to do is to a flag in the\n+   `symbol_ref' (such as `SYMBOL_REF_FLAG') or to store a modified\n+   name string in the `symbol_ref' (if one bit is not enough\n+   information).\n+\n+   The best way to modify the name string is by adding text to the\n+   beginning, with suitable punctuation to prevent any ambiguity. \n+   Allocate the new name in `saveable_obstack'.  You will have to\n+   modify `ASM_OUTPUT_LABELREF' to remove and decode the added text\n+   and output the name accordingly.\n+\n+   You can also check the information stored in the `symbol_ref' in\n+   the definition of `GO_IF_LEGITIMATE_ADDRESS' or\n+   `PRINT_OPERAND_ADDRESS'. */\n+\n+#ifdef ENCODE_SECTION_INFO\n+#undef ENCODE_SECTION_INFO\n+#endif\n+#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+   if (HALF_PIC_P ())\t\t\t\t\t\t        \\\n+      HALF_PIC_ENCODE (DECL);\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+\n+/* A C statement (sans semicolon) to output to the stdio stream\n+   STREAM any text necessary for declaring the name NAME of an\n+   initialized variable which is being defined.  This macro must\n+   output the label definition (perhaps using `ASM_OUTPUT_LABEL'). \n+   The argument DECL is the `VAR_DECL' tree node representing the\n+   variable.\n+\n+   If this macro is not defined, then the variable name is defined\n+   in the usual manner as a label (by means of `ASM_OUTPUT_LABEL').  */\n+\n+#ifdef ASM_DECLARE_OBJECT_NAME\n+#undef ASM_DECLARE_OBJECT_NAME\n+#endif\n+#define ASM_DECLARE_OBJECT_NAME(STREAM, NAME, DECL)\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+ {\t\t\t\t\t\t\t\t\t\\\n+   ASM_OUTPUT_LABEL(STREAM,NAME);                                       \\\n+   HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t\\\n+ }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+/* This is how to declare a function name. */\n+\n+#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL)\t\t\t\\\n+do\t\t\t\t\t\t\t\t\t\\\n+ {\t\t\t\t\t\t\t\t\t\\\n+   ASM_OUTPUT_LABEL(STREAM,NAME);                                       \\\n+   HALF_PIC_DECLARE (NAME);\t\t\t\t\t\t\\\n+ }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n /* Tell collect that the object format is OSF/rose.  */\n #define OBJECT_FORMAT_ROSE\n \n@@ -128,6 +256,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    to do the search */\n #define LINK_LIBGCC_SPECIAL\n \n+/* A C statement to output assembler commands which will identify the object\n+  file as having been compile with GNU CC. We don't need or want this for\n+  OSF1. GDB doesn't need it and kdb doesn't like it */\n+#define ASM_IDENTIFY_GCC(FILE)\n+\n /* This is how to output an assembler line defining a `double' constant.\n    Use \"word\" pseudos to avoid printing NaNs, infinity, etc.  */\n \n@@ -156,27 +289,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   fprintf (STREAM, \"\\t.long\\t0x%08lx\\t\\t# %.12g\\n\", u2.l, u2.f);\t\\\n }\n \n-/* Generate calls to memcpy, etc., not bcopy, etc.  */\n+/* Generate calls to memcpy, etc., not bcopy, etc. */\n #define TARGET_MEM_FUNCTIONS\n \n-/* A C statement to output assembler commands which will identify\n-   the object file as having been compiled with GNU CC (or another\n-   GNU compiler).\n-\n-   If you don't define this macro, the string `gcc2_compiled.:' is\n-   output.  This string is calculated to define a symbol which, on\n-   BSD systems, will never be defined for any other reason.  GDB\n-   checks for the presence of this symbol when reading the symbol\n-   table of an executable.\n-\n-   On non-BSD systems, you must arrange communication with GDB in\n-   some other fashion.  If GDB is not used on your system, you can\n-   define this macro with an empty body.\n-\n-   On OSF/1, gcc2_compiled. confuses the kernel debugger, so don't\n-   put it out.  */\n-\n-#define ASM_IDENTIFY_GCC(STREAM)\n \n \f\n /* Defines to be able to build libgcc.a with GCC.  */"}]}