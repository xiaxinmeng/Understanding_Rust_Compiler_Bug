{"sha": "5ca9299f10baafa4f376871390638fd5dcf42cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNhOTI5OWYxMGJhYWZhNGYzNzY4NzEzOTA2MzhmZDVkY2Y0MmNkZQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-05-17T17:01:06Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-05-17T17:01:06Z"}, "message": "PR c/6689, PR optimization/6615\n\n2002-05-17  David S. Miller  <davem@redhat.com>\n\n\tPR c/6689, PR optimization/6615\n\t* local-alloc.c (struct equivalence): Rename 'src' to 'src_p'\n\tand make it a pointer to rtx.  Update comments.\n\t(update_equiv_regs): When scanning for equivalences, record\n\taddress of SET_SRC (set) in reg_equiv[].src_p.  Dereference\n\tit while making the equiv replacements.\n\nFrom-SVN: r53561", "tree": {"sha": "37c3b6b43a5c89da93d5a9a3727f36603d99b384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c3b6b43a5c89da93d5a9a3727f36603d99b384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ca9299f10baafa4f376871390638fd5dcf42cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca9299f10baafa4f376871390638fd5dcf42cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca9299f10baafa4f376871390638fd5dcf42cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca9299f10baafa4f376871390638fd5dcf42cde/comments", "author": null, "committer": null, "parents": [{"sha": "508bc1723a870c18046ac2cd68f9d37be71eebdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508bc1723a870c18046ac2cd68f9d37be71eebdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508bc1723a870c18046ac2cd68f9d37be71eebdf"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "51ac12203e0a610af773929b66dd931f2f8c546d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9299f10baafa4f376871390638fd5dcf42cde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9299f10baafa4f376871390638fd5dcf42cde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ca9299f10baafa4f376871390638fd5dcf42cde", "patch": "@@ -1,3 +1,12 @@\n+2002-05-17  David S. Miller  <davem@redhat.com>\n+\n+\tPR c/6689, PR optimization/6615\n+\t* local-alloc.c (struct equivalence): Rename 'src' to 'src_p'\n+\tand make it a pointer to rtx.  Update comments.\n+\t(update_equiv_regs): When scanning for equivalences, record\n+\taddress of SET_SRC (set) in reg_equiv[].src_p.  Dereference\n+\tit while making the equiv replacements.\n+\n 2002-05-17  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/sparc/sparc.c (sparc_aout_select_section): Fixed typo."}, {"sha": "d4aa8bbdb6548153afaced6eb5b4b550b19b8892", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ca9299f10baafa4f376871390638fd5dcf42cde/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ca9299f10baafa4f376871390638fd5dcf42cde/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=5ca9299f10baafa4f376871390638fd5dcf42cde", "patch": "@@ -245,7 +245,7 @@ static rtx this_insn;\n struct equivalence\n {\n   /* Set when an attempt should be made to replace a register\n-     with the associated src entry.  */\n+     with the associated src_p entry.  */\n \n   char replace;\n \n@@ -255,7 +255,7 @@ struct equivalence\n \n   rtx replacement;\n \n-  rtx src;\n+  rtx *src_p;\n \n   /* Loop depth is used to recognize equivalences which appear\n      to be present within the same loop (or in an inner loop).  */\n@@ -1005,7 +1005,7 @@ update_equiv_regs ()\n \t\trecorded_label_ref = 1;\n \n \t      reg_equiv[regno].replacement = XEXP (note, 0);\n-\t      reg_equiv[regno].src = src;\n+\t      reg_equiv[regno].src_p = &SET_SRC (set);\n \t      reg_equiv[regno].loop_depth = loop_depth;\n \n \t      /* Don't mess with things live during setjmp.  */\n@@ -1087,7 +1087,7 @@ update_equiv_regs ()\n \n \t\t  if (asm_noperands (PATTERN (equiv_insn)) < 0\n \t\t      && validate_replace_rtx (regno_reg_rtx[regno],\n-\t\t\t\t\t       reg_equiv[regno].src, insn))\n+\t\t\t\t\t       *(reg_equiv[regno].src_p), insn))\n \t\t    {\n \t\t      rtx equiv_link;\n \t\t      rtx last_link;"}]}