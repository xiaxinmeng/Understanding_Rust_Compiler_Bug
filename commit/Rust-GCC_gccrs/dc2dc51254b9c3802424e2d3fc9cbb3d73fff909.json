{"sha": "dc2dc51254b9c3802424e2d3fc9cbb3d73fff909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyZGM1MTI1NGI5YzM4MDI0MjRlMmQzZmM5Y2JiM2Q3M2ZmZjkwOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-04-12T18:53:08Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-04-12T18:53:08Z"}, "message": "In gcc/objc/: 2011-04-12 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-act.c (comp_proto_with_proto): Do not create and use\n\tinefficient temporary argument lists.  Compare the arguments\n\tdirectly.  (match_proto_with_proto): Removed; incorporated into\n\tcomp_proto_with_proto ().\n\nFrom-SVN: r172337", "tree": {"sha": "a98fb5e961109cb3c19fe96de5e154e7f8f02df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98fb5e961109cb3c19fe96de5e154e7f8f02df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6c467624ade351285b37b266e7ef5aa54380958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c467624ade351285b37b266e7ef5aa54380958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c467624ade351285b37b266e7ef5aa54380958"}], "stats": {"total": 112, "additions": 84, "deletions": 28}, "files": [{"sha": "59bf50ee334b0521ab0b1d4522657307d3b5921b", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=dc2dc51254b9c3802424e2d3fc9cbb3d73fff909", "patch": "@@ -1,3 +1,10 @@\n+2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-act.c (comp_proto_with_proto): Do not create and use\n+\tinefficient temporary argument lists.  Compare the arguments\n+\tdirectly.  (match_proto_with_proto): Removed; incorporated into\n+\tcomp_proto_with_proto ().\n+\t\n 2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (printable_ivar_name): New."}, {"sha": "a0651f6bf53a2fd2174100a1dbaee9b11317a616", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 77, "deletions": 28, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2dc51254b9c3802424e2d3fc9cbb3d73fff909/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=dc2dc51254b9c3802424e2d3fc9cbb3d73fff909", "patch": "@@ -147,7 +147,6 @@ static void objc_gen_property_data (tree, tree);\n static void objc_synthesize_getter (tree, tree, tree);\n static void objc_synthesize_setter (tree, tree, tree);\n static char *objc_build_property_setter_name (tree);\n-static int match_proto_with_proto (tree, tree, int);\n static tree lookup_property (tree, tree);\n static tree lookup_property_in_list (tree, tree);\n static tree lookup_property_in_protocol_list (tree, tree);\n@@ -4836,13 +4835,13 @@ objc_method_decl (enum tree_code opcode)\n   return opcode == INSTANCE_METHOD_DECL || opcode == CLASS_METHOD_DECL;\n }\n \n-/* Used by `build_objc_method_call' and `comp_proto_with_proto'.  Return\n-   an argument list for method METH.  CONTEXT is either METHOD_DEF or\n-   METHOD_REF, saying whether we are trying to define a method or call\n-   one.  SUPERFLAG says this is for a send to super; this makes a\n-   difference for the NeXT calling sequence in which the lookup and\n-   the method call are done together.  If METH is null, user-defined\n-   arguments (i.e., beyond self and _cmd) shall be represented by `...'.  */\n+/* Used by `build_objc_method_call'.  Return an argument list for\n+   method METH.  CONTEXT is either METHOD_DEF or METHOD_REF, saying\n+   whether we are trying to define a method or call one.  SUPERFLAG\n+   says this is for a send to super; this makes a difference for the\n+   NeXT calling sequence in which the lookup and the method call are\n+   done together.  If METH is null, user-defined arguments (i.e.,\n+   beyond self and _cmd) shall be represented by `...'.  */\n \n tree\n get_arg_type_list (tree meth, int context, int superflag)\n@@ -8241,19 +8240,13 @@ objc_types_share_size_and_alignment (tree type1, tree type2)\n static int\n comp_proto_with_proto (tree proto1, tree proto2, int strict)\n {\n+  tree type1, type2;\n+\n   /* The following test is needed in case there are hashing\n      collisions.  */\n   if (METHOD_SEL_NAME (proto1) != METHOD_SEL_NAME (proto2))\n     return 0;\n \n-  return match_proto_with_proto (proto1, proto2, strict);\n-}\n-\n-static int\n-match_proto_with_proto (tree proto1, tree proto2, int strict)\n-{\n-  tree type1, type2;\n-\n   /* Compare return types.  */\n   type1 = TREE_VALUE (TREE_TYPE (proto1));\n   type2 = TREE_VALUE (TREE_TYPE (proto2));\n@@ -8263,19 +8256,75 @@ match_proto_with_proto (tree proto1, tree proto2, int strict)\n     return 0;\n \n   /* Compare argument types.  */\n-  for (type1 = get_arg_type_list (proto1, METHOD_REF, 0),\n-       type2 = get_arg_type_list (proto2, METHOD_REF, 0);\n-       type1 && type2;\n-       type1 = TREE_CHAIN (type1), type2 = TREE_CHAIN (type2))\n-    {\n-      if (!objc_types_are_equivalent (TREE_VALUE (type1), TREE_VALUE (type2))\n-\t  && (strict\n-\t      || !objc_types_share_size_and_alignment (TREE_VALUE (type1),\n-\t\t\t\t\t\t       TREE_VALUE (type2))))\n-\treturn 0;\n-    }\n \n-  return (!type1 && !type2);\n+  /* The first argument (objc_object_type) is always the same, no need\n+     to compare.  */\n+\n+  /* The second argument (objc_selector_type) is always the same, no\n+     need to compare.  */\n+\n+  /* Compare the other arguments.  */\n+  {\n+    tree arg1, arg2;\n+\n+    /* Compare METHOD_SEL_ARGS.  */\n+    for (arg1 = METHOD_SEL_ARGS (proto1), arg2 = METHOD_SEL_ARGS (proto2);\n+\t arg1 && arg2;\n+\t arg1 = DECL_CHAIN (arg1), arg2 = DECL_CHAIN (arg2))\n+      {\n+\ttype1 = TREE_VALUE (TREE_TYPE (arg1));\n+\ttype2 = TREE_VALUE (TREE_TYPE (arg2));\n+\t\n+\t/* FIXME: Do we need to decay argument types to compare them ?  */\n+\ttype1 = objc_decay_parm_type (type1);\n+\ttype2 = objc_decay_parm_type (type2);\n+\t\n+\tif (!objc_types_are_equivalent (type1, type2)\n+\t    && (strict || !objc_types_share_size_and_alignment (type1, type2)))\n+\t  return 0;\n+      }\n+    \n+    /* The loop ends when arg1 or arg2 are NULL.  Make sure they are\n+       both NULL.  */\n+    if (arg1 != arg2)\n+      return 0;\n+\n+    /* Compare METHOD_ADD_ARGS.  */\n+    if ((METHOD_ADD_ARGS (proto1) && !METHOD_ADD_ARGS (proto2))\n+\t|| (METHOD_ADD_ARGS (proto2) && !METHOD_ADD_ARGS (proto1)))\n+      return 0;\n+\n+    if (METHOD_ADD_ARGS (proto1))\n+      {\n+\tfor (arg1 = TREE_CHAIN (METHOD_ADD_ARGS (proto1)), arg2 = TREE_CHAIN (METHOD_ADD_ARGS (proto2));\n+\t     arg1 && arg2;\n+\t     arg1 = TREE_CHAIN (arg1), arg2 = TREE_CHAIN (arg2))\n+\t  {\n+\t    type1 = TREE_TYPE (TREE_VALUE (arg1));\n+\t    type2 = TREE_TYPE (TREE_VALUE (arg2));\n+\t    \n+\t    /* FIXME: Do we need to decay argument types to compare them ?  */\n+\t    type1 = objc_decay_parm_type (type1);\n+\t    type2 = objc_decay_parm_type (type2);\n+\t    \n+\t    if (!objc_types_are_equivalent (type1, type2)\n+\t\t&& (strict || !objc_types_share_size_and_alignment (type1, type2)))\n+\t      return 0;\n+\t  }\n+      }\n+    \n+    /* The loop ends when arg1 or arg2 are NULL.  Make sure they are\n+       both NULL.  */\n+    if (arg1 != arg2)\n+      return 0;\n+\n+    /* Compare METHOD_ADD_ARGS_ELLIPSIS_P.  */\n+    if (METHOD_ADD_ARGS_ELLIPSIS_P (proto1) != METHOD_ADD_ARGS_ELLIPSIS_P (proto2))\n+      return 0;\n+  }\n+\n+  /* Success.  */\n+  return 1;\n }\n \n /* This routine returns true if TYPE is a valid objc object type,"}]}