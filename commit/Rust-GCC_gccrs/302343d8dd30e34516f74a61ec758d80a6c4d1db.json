{"sha": "302343d8dd30e34516f74a61ec758d80a6c4d1db", "node_id": "C_kwDOANBUbNoAKDMwMjM0M2Q4ZGQzMGUzNDUxNmY3NGE2MWVjNzU4ZDgwYTZjNGQxZGI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-18T15:10:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-18T16:31:03Z"}, "message": "libstdc++: Fix ambiguous std::pair constructors [PR101124]\n\nThe deprecated non-standard std::pair constructors that allow\nconstructing std::pair<move-only-type, pointer-type> from an rvalue and\na literal zero where not sufficiently constrained. They were viable when\nconstructing std::pair<copyable-type, pointer-type>, and that case\nshould work fine using the standard constructors.\n\nReplace the constraints on the non-standard constructors so they are\nonly viable in cases that should actually be ill-formed according to the\nstandard.\n\nAlso rename __null_ptr_constant to __zero_as_null_pointer_constant so it\nmatches the name of the -Wzero-as-null-pointer-constant warning. Also\nmake the text of the deprecated warning describe the problem in more\ndetail.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101124\n\t* include/bits/stl_pair.h (pair): Adjust constraints on\n\tdeprecated constructors accepting literal zero as null pointer\n\tconstant. Improve wording of deprecated attribute.\n\t* testsuite/20_util/pair/cons/99957.cc: Check that deprecated\n\tconstructors do not cause ambiguities for copyable types.", "tree": {"sha": "651b3cfb3b599910fcee4742cdb186d1aae2cac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/651b3cfb3b599910fcee4742cdb186d1aae2cac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/302343d8dd30e34516f74a61ec758d80a6c4d1db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302343d8dd30e34516f74a61ec758d80a6c4d1db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302343d8dd30e34516f74a61ec758d80a6c4d1db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302343d8dd30e34516f74a61ec758d80a6c4d1db/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50bc6e463b5f0696bc3cb9edd743d09b17309370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50bc6e463b5f0696bc3cb9edd743d09b17309370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50bc6e463b5f0696bc3cb9edd743d09b17309370"}], "stats": {"total": 97, "additions": 62, "deletions": 35}, "files": [{"sha": "8564fd1ae9e234f6ea97111efbf65d0a4bdbb52e", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 52, "deletions": 33, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302343d8dd30e34516f74a61ec758d80a6c4d1db/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302343d8dd30e34516f74a61ec758d80a6c4d1db/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=302343d8dd30e34516f74a61ec758d80a6c4d1db", "patch": "@@ -462,62 +462,81 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: first(__p.first), second(__p.second) { }\n \n #if _GLIBCXX_USE_DEPRECATED\n+#if defined(__DEPRECATED)\n+# define _GLIBCXX_DEPRECATED_PAIR_CTOR \\\n+      __attribute__ ((__deprecated__ (\"use 'nullptr' instead of '0' to \" \\\n+\t\t\t\t      \"initialize std::pair of move-only \" \\\n+\t\t\t\t      \"type and pointer\")))\n+#else\n+# define _GLIBCXX_DEPRECATED_PAIR_CTOR\n+#endif\n+\n     private:\n       /// @cond undocumented\n \n       // A type which can be constructed from literal zero, but not nullptr\n-      struct __null_ptr_constant\n+      struct __zero_as_null_pointer_constant\n       {\n-\t__null_ptr_constant(int __null_ptr_constant::*) { }\n+\t__zero_as_null_pointer_constant(int __zero_as_null_pointer_constant::*)\n+\t{ }\n \ttemplate<typename _Tp,\n \t\t typename = __enable_if_t<is_null_pointer<_Tp>::value>>\n-\t__null_ptr_constant(_Tp) = delete;\n+\t__zero_as_null_pointer_constant(_Tp) = delete;\n       };\n-\n-      // True if type _Up is one of _Tp& or const _Tp&\n-      template<typename _Up, typename _Tp>\n-\tusing __is_lvalue_of\n-\t  = __or_<is_same<_Up, const _Tp&>, is_same<_Up, _Tp&>>;\n-\n       /// @endcond\n     public:\n \n       // Deprecated extensions to DR 811.\n+      // These allow construction from an rvalue and a literal zero,\n+      // in cases where the standard says the zero should be deduced as int\n       template<typename _U1,\n-\t       __enable_if_t<!__is_lvalue_of<_U1, _T1>::value\n-\t\t\t     && _PCCP::template\n-\t\t\t       _DeprConsPair<true, _U1, nullptr_t>(),\n+\t       __enable_if_t<__and_<__not_<is_reference<_U1>>,\n+\t\t\t\t    is_pointer<_T2>,\n+\t\t\t\t    is_constructible<_T1, _U1>,\n+\t\t\t\t    __not_<is_constructible<_T1, const _U1&>>,\n+\t\t\t\t    is_convertible<_U1, _T1>>::value,\n \t\t\t     bool> = true>\n-       _GLIBCXX_DEPRECATED_SUGGEST(\"nullptr\")\n-       constexpr pair(_U1&& __x, __null_ptr_constant)\n-       : first(std::forward<_U1>(__x)), second(nullptr) { }\n+\t_GLIBCXX_DEPRECATED_PAIR_CTOR\n+\tconstexpr\n+\tpair(_U1&& __x, __zero_as_null_pointer_constant, ...)\n+\t: first(std::forward<_U1>(__x)), second(nullptr) { }\n \n       template<typename _U1,\n-\t       __enable_if_t<!__is_lvalue_of<_U1, _T1>::value\n-\t\t\t     && _PCCP::template\n-\t\t\t       _DeprConsPair<false, _U1, nullptr_t>(),\n+\t       __enable_if_t<__and_<__not_<is_reference<_U1>>,\n+\t\t\t\t    is_pointer<_T2>,\n+\t\t\t\t    is_constructible<_T1, _U1>,\n+\t\t\t\t    __not_<is_constructible<_T1, const _U1&>>,\n+\t\t\t\t    __not_<is_convertible<_U1, _T1>>>::value,\n \t\t\t     bool> = false>\n-       _GLIBCXX_DEPRECATED_SUGGEST(\"nullptr\")\n-       explicit constexpr pair(_U1&& __x, __null_ptr_constant)\n-       : first(std::forward<_U1>(__x)), second(nullptr) { }\n+\t_GLIBCXX_DEPRECATED_PAIR_CTOR\n+\texplicit constexpr\n+\tpair(_U1&& __x, __zero_as_null_pointer_constant, ...)\n+\t: first(std::forward<_U1>(__x)), second(nullptr) { }\n \n       template<typename _U2,\n-\t       __enable_if_t<!__is_lvalue_of<_U2, _T2>::value\n-\t\t\t     && _PCCP::template\n-\t\t\t       _DeprConsPair<true, nullptr_t, _U2>(),\n+\t       __enable_if_t<__and_<is_pointer<_T1>,\n+\t\t\t\t    __not_<is_reference<_U2>>,\n+\t\t\t\t    is_constructible<_T2, _U2>,\n+\t\t\t\t    __not_<is_constructible<_T2, const _U2&>>,\n+\t\t\t\t    is_convertible<_U2, _T2>>::value,\n \t\t\t     bool> = true>\n-       _GLIBCXX_DEPRECATED_SUGGEST(\"nullptr\")\n-       constexpr pair(__null_ptr_constant, _U2&& __y)\n-       : first(nullptr), second(std::forward<_U2>(__y)) { }\n+\t_GLIBCXX_DEPRECATED_PAIR_CTOR\n+\tconstexpr\n+\tpair(__zero_as_null_pointer_constant, _U2&& __y, ...)\n+\t: first(nullptr), second(std::forward<_U2>(__y)) { }\n \n       template<typename _U2,\n-\t       __enable_if_t<!__is_lvalue_of<_U2, _T2>::value\n-\t\t\t     && _PCCP::template\n-\t\t\t       _DeprConsPair<false, nullptr_t, _U2>(),\n+\t       __enable_if_t<__and_<is_pointer<_T1>,\n+\t\t\t\t    __not_<is_reference<_U2>>,\n+\t\t\t\t    is_constructible<_T2, _U2>,\n+\t\t\t\t    __not_<is_constructible<_T2, const _U2&>>,\n+\t\t\t\t    __not_<is_convertible<_U2, _T2>>>::value,\n \t\t\t     bool> = false>\n-       _GLIBCXX_DEPRECATED_SUGGEST(\"nullptr\")\n-       explicit pair(__null_ptr_constant, _U2&& __y)\n-       : first(nullptr), second(std::forward<_U2>(__y)) { }\n+\t_GLIBCXX_DEPRECATED_PAIR_CTOR\n+\texplicit constexpr\n+\tpair(__zero_as_null_pointer_constant, _U2&& __y, ...)\n+\t: first(nullptr), second(std::forward<_U2>(__y)) { }\n+#undef _GLIBCXX_DEPRECATED_PAIR_CTOR\n #endif\n \n       template<typename _U1, typename _U2, typename"}, {"sha": "8432856d0b0001049c4a1a249a04b52301702e2b", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/99957.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/302343d8dd30e34516f74a61ec758d80a6c4d1db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2F99957.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/302343d8dd30e34516f74a61ec758d80a6c4d1db/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2F99957.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2F99957.cc?ref=302343d8dd30e34516f74a61ec758d80a6c4d1db", "patch": "@@ -22,8 +22,16 @@ struct ExplicitMoveOnly\n // PR libstdc++/99957\n // check non-standard constructors are deprecated\n \n-pair<int*, ExplicitMoveOnly> v14{0, MoveOnly{}}; // { dg-warning \"deprecated\" }\n-pair<ExplicitMoveOnly, int*> v15{MoveOnly{}, 0}; // { dg-warning \"deprecated\" }\n+pair<int*, ExplicitMoveOnly> v14(0, MoveOnly{}); // { dg-warning \"deprecated\" }\n+pair<ExplicitMoveOnly, int*> v15(MoveOnly{}, 0); // { dg-warning \"deprecated\" }\n \n pair<int*, MoveOnly> v16 = {0, MoveOnly{}}; // { dg-warning \"deprecated\" }\n pair<MoveOnly, int*> v17 = {MoveOnly{}, 0}; // { dg-warning \"deprecated\" }\n+\n+// PR libstdc++/101124\n+// check deprecated constructors don't cause unwanted ambiguities\n+\n+std::pair<long*, int> p(0, 0); // { dg-bogus \"ambiguous\" }\n+\n+struct X { } x;\n+std::pair<const X, void*> p2(x, 0); // { dg-bogus \"ambiguous\" }"}]}