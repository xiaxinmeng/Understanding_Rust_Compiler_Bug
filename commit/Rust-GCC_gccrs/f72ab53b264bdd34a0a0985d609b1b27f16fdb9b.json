{"sha": "f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyYWI1M2IyNjRiZGQzNGEwYTA5ODVkNjA5YjFiMjdmMTZmZGI5Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-11-07T21:33:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-11-07T21:33:44Z"}, "message": "class.c (add_implicitly_declared_members): Put implicitly declared functions at the end of TYPE_METHODs when...\n\n\t* class.c (add_implicitly_declared_members): Put implicitly\n\tdeclared functions at the end of TYPE_METHODs when -fabi-version\n\tis at least 2.\n\n\t* testsuite/g++.dg/abi/dtor1.C: New test.\n\t* testsuite/g++.dg/abi/dtor2.C: Likewise.\n\nFrom-SVN: r58908", "tree": {"sha": "0736c00c81f57f19c12f944af5c35fda1007c5c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0736c00c81f57f19c12f944af5c35fda1007c5c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/comments", "author": null, "committer": null, "parents": [{"sha": "0977774ba0e8c40e13183a40300a255a803ecf89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0977774ba0e8c40e13183a40300a255a803ecf89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0977774ba0e8c40e13183a40300a255a803ecf89"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "3f37368194b4cf90387e65af467be97ddd9cffba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "patch": "@@ -1,3 +1,9 @@\n+2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (add_implicitly_declared_members): Put implicitly\n+\tdeclared functions at the end of TYPE_METHODs when -fabi-version\n+\tis at least 2.\n+\n 2002-11-05  Geoffrey Keating  <geoffk@apple.com>\n \n \t* decl2.c (finish_file): Correct spelling."}, {"sha": "82f7c8f911e5afbe766d4d690122746402054444", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "patch": "@@ -125,7 +125,7 @@ static void finish_struct_methods PARAMS ((tree));\n static void maybe_warn_about_overly_private_class PARAMS ((tree));\n static int field_decl_cmp PARAMS ((const tree *, const tree *));\n static int method_name_cmp PARAMS ((const tree *, const tree *));\n-static tree add_implicitly_declared_members PARAMS ((tree, int, int, int));\n+static void add_implicitly_declared_members PARAMS ((tree, int, int, int));\n static tree fixed_type_or_null PARAMS ((tree, int *, int *));\n static tree resolve_address_of_overloaded_function PARAMS ((tree, tree, int,\n \t\t\t\t\t\t\t  int, int, tree));\n@@ -2742,7 +2742,7 @@ maybe_add_class_template_decl_list (type, t, friend_p)\n    reference, respectively.  If a virtual destructor is created, its\n    DECL is returned; otherwise the return value is NULL_TREE.  */\n \n-static tree\n+static void\n add_implicitly_declared_members (t, cant_have_default_ctor,\n \t\t\t\t cant_have_const_cctor,\n \t\t\t\t cant_have_const_assignment)\n@@ -2817,12 +2817,23 @@ add_implicitly_declared_members (t, cant_have_default_ctor,\n       add_method (t, *f, /*error_p=*/0);\n       maybe_add_class_template_decl_list (current_class_type, *f, /*friend_p=*/0);\n     }\n-  *f = TYPE_METHODS (t);\n-  TYPE_METHODS (t) = implicit_fns;\n+  if (abi_version_at_least (2))\n+    /* G++ 3.2 put the implicit destructor at the *beginning* of the\n+       list, which cause the destructor to be emitted in an incorrect\n+       location in the vtable.  */\n+    TYPE_METHODS (t) = chainon (TYPE_METHODS (t), implicit_fns);\n+  else\n+    {\n+      if (warn_abi && virtual_dtor)\n+\twarning (\"vtable layout for class `%T' may not be ABI-compliant \"\n+\t\t \"and may change in a future version of GCC due to implicit \"\n+\t\t \"virtual destructor\",\n+\t\t t);\n+      *f = TYPE_METHODS (t);\n+      TYPE_METHODS (t) = implicit_fns;\n+    }\n \n   --adding_implicit_members;\n-\n-  return virtual_dtor;\n }\n \n /* Subroutine of finish_struct_1.  Recursively count the number of fields"}, {"sha": "7ad265e55c0b1ce104bc29933e9fc09039448850", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "patch": "@@ -1,3 +1,8 @@\n+2002-11-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/g++.dg/abi/dtor1.C: New test.\n+\t* testsuite/g++.dg/abi/dtor2.C: Likewise.\n+\n 2002-11-05  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++.old-deja/g++.eh/badalloc1.C: XFAIL excess errors test on"}, {"sha": "48b0a5571277ffe771c7a78d273cf47ac4d4ff87", "filename": "gcc/testsuite/g++.dg/abi/dtor1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor1.C?ref=f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target i?86-*-* } }\n+// { dg-options \"-fabi-version=0\" }\n+\n+struct A {\n+  virtual void a ();\n+};\n+\n+struct B {\n+  virtual ~B ();\n+};\n+\n+struct C : public A, public B {\n+  virtual void c ();\n+};\n+\n+struct D : virtual public C {\n+  virtual void d ();\n+};\n+\n+void D::d () {}\n+\n+// { dg-final { scan-assembler _ZTv0_n20_N1DD1Ev } }"}, {"sha": "f4a1336fefa4052fcbce16e3227ec5eafe7855f1", "filename": "gcc/testsuite/g++.dg/abi/dtor2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72ab53b264bdd34a0a0985d609b1b27f16fdb9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fdtor2.C?ref=f72ab53b264bdd34a0a0985d609b1b27f16fdb9b", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+// { dg-options \"-Wabi\" }\n+\n+struct A {\n+  virtual void a ();\n+};\n+\n+struct B {\n+  virtual ~B ();\n+};\n+\n+struct C : public A, public B { // { dg-warning \"virtual\" }\n+  virtual void c ();\n+};"}]}