{"sha": "f968d60be0ef5ee2ebcf06f673f33d469602188c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2OGQ2MGJlMGVmNWVlMmViY2YwNmY2NzNmMzNkNDY5NjAyMTg4Yw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-12-28T11:22:14Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-12-28T11:22:14Z"}, "message": "re PR fortran/55763 (Issues with some simpler CLASS(*) programs)\n\n2012-12-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55763\n        * check.c (gfc_check_move_alloc): Handle unlimited polymorphic.\n        * trans-intrinsic.c (conv_intrinsic_move_alloc): Ditto.\n\n2012-12-28  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/55763\n        * gfortran.dg/unlimited_polymorphic_5.f90\n\nFrom-SVN: r194743", "tree": {"sha": "12254814161ab792663751f405fa5cca5c701f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12254814161ab792663751f405fa5cca5c701f75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f968d60be0ef5ee2ebcf06f673f33d469602188c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f968d60be0ef5ee2ebcf06f673f33d469602188c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f968d60be0ef5ee2ebcf06f673f33d469602188c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f968d60be0ef5ee2ebcf06f673f33d469602188c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70225583efac5b66080e2699956623c146465955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70225583efac5b66080e2699956623c146465955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70225583efac5b66080e2699956623c146465955"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "d04897eabfae1b0b884e3b3fd400a15cdfc63a4d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f968d60be0ef5ee2ebcf06f673f33d469602188c", "patch": "@@ -1,3 +1,9 @@\n+2012-12-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* check.c (gfc_check_move_alloc): Handle unlimited polymorphic.\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Ditto.\n+\n 2012-12-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/48976"}, {"sha": "0923f121215ddccfecc8d35211462cd49a6fbc88", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=f968d60be0ef5ee2ebcf06f673f33d469602188c", "patch": "@@ -2791,18 +2791,15 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n       return FAILURE;\n     }\n \n-  if (to->ts.kind != from->ts.kind)\n+  /* CLASS arguments: Make sure the vtab of from is present.  */\n+  if (to->ts.type == BT_CLASS && !UNLIMITED_POLY (from))\n     {\n-      gfc_error (\"The FROM and TO arguments of the MOVE_ALLOC intrinsic at %L\"\n-\t\t \" must be of the same kind %d/%d\", &to->where, from->ts.kind,\n-\t\t to->ts.kind);\n-      return FAILURE;\n+      if (from->ts.type == BT_CLASS || from->ts.type == BT_DERIVED)\n+\tgfc_find_derived_vtab (from->ts.u.derived);\n+      else\n+\tgfc_find_intrinsic_vtab (&from->ts);\n     }\n \n-  /* CLASS arguments: Make sure the vtab of from is present.  */\n-  if (to->ts.type == BT_CLASS)\n-    gfc_find_derived_vtab (from->ts.u.derived);\n-\n   return SUCCESS;\n }\n "}, {"sha": "5a89be1a98d8ad8e1158a45e0b7d47d97b67adf8", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f968d60be0ef5ee2ebcf06f673f33d469602188c", "patch": "@@ -7373,8 +7373,13 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \n \t  if (from_expr->ts.type == BT_CLASS)\n \t    {\n-\t      vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n-\t      gcc_assert (vtab);\n+\t      if (UNLIMITED_POLY (from_expr))\n+\t\tvtab = NULL;\n+\t      else\n+\t\t{\n+\t\t  vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t\t  gcc_assert (vtab);\n+\t\t}\n \n \t      gfc_free_expr (from_expr2);\n \t      gfc_init_se (&from_se, NULL);\n@@ -7386,13 +7391,23 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \t\t\t\t  from_se.expr));\n \n               /* Reset _vptr component to declared type.  */\n-\t      tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n-\t      gfc_add_modify_loc (input_location, &block, from_se.expr,\n-\t\t\t\t  fold_convert (TREE_TYPE (from_se.expr), tmp));\n+\t      if (UNLIMITED_POLY (from_expr))\n+\t\tgfc_add_modify_loc (input_location, &block, from_se.expr,\n+\t\t\t\t    fold_convert (TREE_TYPE (from_se.expr),\n+\t\t\t\t\t\t  null_pointer_node));\n+\t      else\n+\t\t{\n+\t\t  tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n+\t\t  gfc_add_modify_loc (input_location, &block, from_se.expr,\n+\t\t\t\t      fold_convert (TREE_TYPE (from_se.expr), tmp));\n+\t\t}\n \t    }\n \t  else\n \t    {\n-\t      vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t      if (from_expr->ts.type != BT_DERIVED)\n+\t\tvtab = gfc_find_intrinsic_vtab (&from_expr->ts);\n+\t      else\n+\t\tvtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n \t      gcc_assert (vtab);\n \t      tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n \t      gfc_add_modify_loc (input_location, &block, to_se.expr,\n@@ -7415,8 +7430,13 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \n       if (from_expr->ts.type == BT_CLASS)\n \t{\n-\t  vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n-\t  gcc_assert (vtab);\n+\t  if (UNLIMITED_POLY (from_expr))\n+\t    vtab = NULL;\n+\t  else\n+\t    {\n+\t      vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t      gcc_assert (vtab);\n+\t    }\n \n \t  from_se.want_pointer = 1;\n \t  from_expr2 = gfc_copy_expr (from_expr);\n@@ -7427,13 +7447,23 @@ conv_intrinsic_move_alloc (gfc_code *code)\n \t\t\t      from_se.expr));\n \n \t  /* Reset _vptr component to declared type.  */\n-\t  tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n-\t  gfc_add_modify_loc (input_location, &block, from_se.expr,\n-\t\t\t      fold_convert (TREE_TYPE (from_se.expr), tmp));\n+\t  if (UNLIMITED_POLY (from_expr))\n+\t    gfc_add_modify_loc (input_location, &block, from_se.expr,\n+\t\t\t\tfold_convert (TREE_TYPE (from_se.expr),\n+\t\t\t\t\t      null_pointer_node));\n+\t  else\n+\t    {\n+\t      tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n+\t      gfc_add_modify_loc (input_location, &block, from_se.expr,\n+\t\t\t\t  fold_convert (TREE_TYPE (from_se.expr), tmp));\n+\t    }\n \t}\n       else\n \t{\n-\t  vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n+\t  if (from_expr->ts.type != BT_DERIVED)\n+\t    vtab = gfc_find_intrinsic_vtab (&from_expr->ts);\n+\t  else\n+\t    vtab = gfc_find_derived_vtab (from_expr->ts.u.derived);\n \t  gcc_assert (vtab);\n \t  tmp = gfc_build_addr_expr (NULL_TREE, gfc_get_symbol_decl (vtab));\n \t  gfc_add_modify_loc (input_location, &block, to_se.expr,"}, {"sha": "38935dc13fa5067d24c72f7ae824be6392611040", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f968d60be0ef5ee2ebcf06f673f33d469602188c", "patch": "@@ -1,3 +1,8 @@\n+2012-12-28  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/55763\n+\t* gfortran.dg/unlimited_polymorphic_5.f90\n+\n 2012-12-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/48960"}, {"sha": "12a3c4a5624733dbe717a4e93d14e4dd62b13bb2", "filename": "gcc/testsuite/gfortran.dg/unlimited_polymorphic_5.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f968d60be0ef5ee2ebcf06f673f33d469602188c/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funlimited_polymorphic_5.f90?ref=f968d60be0ef5ee2ebcf06f673f33d469602188c", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+!\n+! PR fortran/55763\n+!\n+! Based on Reinhold Bader's test case\n+!\n+\n+program mvall_03\n+  implicit none\n+  integer, parameter :: n1 = 100, n2 = 200\n+  class(*), allocatable :: i1(:), i3(:)\n+  integer, allocatable :: i2(:)\n+\n+  allocate(real :: i1(n1))\n+  allocate(i2(n2))\n+  i2 = 2\n+  call move_alloc(i2, i1)\n+  if (size(i1) /= n2 .or. allocated(i2)) then\n+    call abort\n+!   write(*,*) 'FAIL'\n+  else\n+!    write(*,*) 'OK'\n+  end if\n+\n+  select type (i1)\n+    type is (integer)\n+      if (any (i1 /= 2)) call abort\n+    class default\n+      call abort()\n+  end select\n+  call move_alloc (i1, i3)\n+  if (size(i3) /= n2 .or. allocated(i1)) then\n+    call abort()\n+  end if\n+  select type (i3)\n+    type is (integer)\n+      if (any (i3 /= 2)) call abort\n+    class default\n+      call abort()\n+  end select\n+end program"}]}