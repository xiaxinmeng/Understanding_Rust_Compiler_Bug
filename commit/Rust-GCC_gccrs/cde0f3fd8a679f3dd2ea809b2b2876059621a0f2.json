{"sha": "cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlMGYzZmQ4YTY3OWYzZGQyZWE4MDliMmIyODc2MDU5NjIxYTBmMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-08-01T22:03:34Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-08-01T22:03:34Z"}, "message": "expr.c (store_constructor): Use promote_decl_mode.\n\n2009-04-17  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expr.c (store_constructor): Use promote_decl_mode.  Remove\n\tnow write-only variable unsignedp.\n\t(expand_expr_real_1): Use promote_decl_mode.\n\t* expr.h (promote_function_mode, promote_decl_mode): New.\n\t(promote_mode): Remove last argument.\n\t* function.c (assign_temp): Drop last argument of promote_mode.\n\t(assign_parm_find_data_types): Use promote_function_mode.\n\t(assign_parm_setup_reg): Likewise.\n\t(expand_function_end): Use promote_function_mode.\n\t* calls.c (initialize_argument_information): Use promote_function_mode.\n\t(precompute_arguments): Use promote_mode instead of checking if\n\tonly PROMOTE_FUNCTION_MODE is defined.\n\t(expand_call): When making sibcall decisions, use promote_function_mode.\n\tBelow, remove an if for targetm.calls.promote_function_return and\n\tand use promote_function_mode.\n\t(emit_library_call_value_1): Use promote_function_mode, fix bug\n\twhere promote_mode was passed FOR_CALL == 0 for a return value in an\n\tassertion.\n\t* cfgexpand.c (expand_one_register_var): Use promote_decl_mode.\n\t* explow.c (promote_function_mode, promote_decl_mode): New.\n\t(promote_mode): Keep only the FOR_CALL == 0 case.\n\t* combine.c (setup_incoming_promotion): Remove test of\n\tpromote_function_args.  Use promote_function_mode.\n\t* stmt.c (expand_value_return): Use promote_decl_mode.\n\t(expand_decl): Use promote_decl_mode.\n\n\t* expr.c (store_constructor): Use promote_decl_mode.  Remove\n\tnow write-only variable unsignedp.\n\t(expand_expr_real_1): Use promote_decl_mode.\n\t* expr.h (promote_function_mode, promote_decl_mode): New.\n\t(promote_mode): Remove last argument.\n\t* function.c (assign_temp): Drop last argument of promote_mode.\n\t(assign_parm_find_data_types): Use promote_function_mode.\n\t(assign_parm_setup_reg): Likewise.\n\t(expand_function_end): Use promote_function_mode.\n\t* calls.c (initialize_argument_information): Use promote_function_mode.\n\t(precompute_arguments): Use promote_mode instead of checking if\n\tonly PROMOTE_FUNCTION_MODE is defined.\n\t(expand_call): When making sibcall decisions, use promote_function_mode.\n\tBelow, remove an if for targetm.calls.promote_function_return and\n\tand use promote_function_mode.\n\t(emit_library_call_value_1): Use promote_function_mode, fix bug\n\twhere promote_mode was passed FOR_CALL == 0 for a return value in an\n\tassertion.\n\t* cfgexpand.c (expand_one_register_var): Use promote_decl_mode.\n\t* explow.c (promote_function_mode, promote_decl_mode): New.\n\t(promote_mode): Keep only the FOR_CALL == 0 case.\n\t* combine.c (setup_incoming_promotion): Remove test of\n\tpromote_function_args.  Use promote_function_mode.\n\t* stmt.c (expand_value_return): Use promote_decl_mode.\n\t(expand_decl): Use promote_decl_mode.\n\n\t* explow.c (promote_function_mode): Just call the target hook.\n\t* targhooks.c (default_promote_function_mode,\n\tdefault_promote_function_mode_always_promote): New.\n\t* targhooks.h (default_promote_function_mode,\n\tdefault_promote_function_mode_always_promote): Declare.\n\t* target.h (promote_function_args, promote_function_return): Remove.\n\t(promote_function_mode): New.\n\t* target-def.h (TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\t(TARGET_PROMOTE_FUNCTION_MODE): New.\n\t(TARGET_CALLS): Adjust.\n\t* system.h (TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN, PROMOTE_FUNCTION_MODE): Poison.\n\n\t* config/s390/s390.h (PROMOTE_FUNCTION_MODE): Move...\n\t* config/s390/s390.c (s390_promote_function_mode): ... here,\n\twith pointer handling.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\n\t* config/sparc/sparc.h (PROMOTE_FUNCTION_MODE): Move...\n\t* config/sparc/sparc.c (sparc_promote_function_mode): ... here,\n\twith pointer handling.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\t\n\t* config/sh/sh-protos.h (sh_promote_function_mode): New.\n\t* config/sh/sh.c (sh_promote_function_mode): New.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\n\t* config/cris/cris.h (PROMOTE_FUNCTION_MODE): Move...\n\t* config/cris/cris.c (cris_promote_function_mode): ... here.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_ARGS): Remove.\n\n\t* config/mmix/mmix.h (PROMOTE_FUNCTION_MODE): Move...\n\t* config/mmix/mmix.c (mmix_promote_function_mode): ... here.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_ARGS): Remove.\n\n\t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Move...\n\t* config/arm/arm.c (arm_promote_function_mode): ... here, without complex\n\ttype handling.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\n\t* config/pa/pa.c (pa_promote_function_mode): New.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\n\t* config/alpha/alpha.c (TARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN): Remove.\n\t(TARGET_PROMOTE_FUNCTION_MODE): Define equivalently.\n\t* config/xtensa/xtensa.c: Likewise.\n\t* config/stormy16/stormy16.c: Likewise.\n\t* config/iq2000/iq2000.c: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/picochip/picochip.c: Likewise.\n\t* config/arc/arc.c: Likewise.\n\t* config/mcore/mcore.c: Likewise.\n\t* config/score/score.c: Likewise.\n\t* config/mips/mips.c: Likewise.\n\t* config/bfin/bfin.c: Likewise.\n\t* config/ia64/ia64.c: Likewise (disabled though).\n\n\t* config/frv/frv.h: Remove pointless remark.\n\n\t* doc/tm.texi (PROMOTE_FUNCTION_MODE,\n\tTARGET_PROMOTE_FUNCTION_ARGS,\n\tTARGET_PROMOTE_FUNCTION_RETURN): Consolidate into...\n\t(TARGET_PROMOTE_FUNCTION_MODE): ... this.\n\nFrom-SVN: r150336", "tree": {"sha": "f0eeae6aa04e1213f78c59803b4a875d6b3602cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0eeae6aa04e1213f78c59803b4a875d6b3602cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cf0e2702b285e115bc51d35b1c308add387a149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf0e2702b285e115bc51d35b1c308add387a149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf0e2702b285e115bc51d35b1c308add387a149"}], "stats": {"total": 884, "additions": 541, "deletions": 343}, "files": [{"sha": "b75113fb8c1cb9e673b00b77e1219018c26e916c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1,3 +1,130 @@\n+2009-04-17  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expr.c (store_constructor): Use promote_decl_mode.  Remove\n+\tnow write-only variable unsignedp.\n+\t(expand_expr_real_1): Use promote_decl_mode.\n+\t* expr.h (promote_function_mode, promote_decl_mode): New.\n+\t(promote_mode): Remove last argument.\n+\t* function.c (assign_temp): Drop last argument of promote_mode.\n+\t(assign_parm_find_data_types): Use promote_function_mode.\n+\t(assign_parm_setup_reg): Likewise.\n+\t(expand_function_end): Use promote_function_mode.\n+\t* calls.c (initialize_argument_information): Use promote_function_mode.\n+\t(precompute_arguments): Use promote_mode instead of checking if\n+\tonly PROMOTE_FUNCTION_MODE is defined.\n+\t(expand_call): When making sibcall decisions, use promote_function_mode.\n+\tBelow, remove an if for targetm.calls.promote_function_return and\n+\tand use promote_function_mode.\n+\t(emit_library_call_value_1): Use promote_function_mode, fix bug\n+\twhere promote_mode was passed FOR_CALL == 0 for a return value in an\n+\tassertion.\n+\t* cfgexpand.c (expand_one_register_var): Use promote_decl_mode.\n+\t* explow.c (promote_function_mode, promote_decl_mode): New.\n+\t(promote_mode): Keep only the FOR_CALL == 0 case.\n+\t* combine.c (setup_incoming_promotion): Remove test of\n+\tpromote_function_args.  Use promote_function_mode.\n+\t* stmt.c (expand_value_return): Use promote_decl_mode.\n+\t(expand_decl): Use promote_decl_mode.\n+\n+\t* expr.c (store_constructor): Use promote_decl_mode.  Remove\n+\tnow write-only variable unsignedp.\n+\t(expand_expr_real_1): Use promote_decl_mode.\n+\t* expr.h (promote_function_mode, promote_decl_mode): New.\n+\t(promote_mode): Remove last argument.\n+\t* function.c (assign_temp): Drop last argument of promote_mode.\n+\t(assign_parm_find_data_types): Use promote_function_mode.\n+\t(assign_parm_setup_reg): Likewise.\n+\t(expand_function_end): Use promote_function_mode.\n+\t* calls.c (initialize_argument_information): Use promote_function_mode.\n+\t(precompute_arguments): Use promote_mode instead of checking if\n+\tonly PROMOTE_FUNCTION_MODE is defined.\n+\t(expand_call): When making sibcall decisions, use promote_function_mode.\n+\tBelow, remove an if for targetm.calls.promote_function_return and\n+\tand use promote_function_mode.\n+\t(emit_library_call_value_1): Use promote_function_mode, fix bug\n+\twhere promote_mode was passed FOR_CALL == 0 for a return value in an\n+\tassertion.\n+\t* cfgexpand.c (expand_one_register_var): Use promote_decl_mode.\n+\t* explow.c (promote_function_mode, promote_decl_mode): New.\n+\t(promote_mode): Keep only the FOR_CALL == 0 case.\n+\t* combine.c (setup_incoming_promotion): Remove test of\n+\tpromote_function_args.  Use promote_function_mode.\n+\t* stmt.c (expand_value_return): Use promote_decl_mode.\n+\t(expand_decl): Use promote_decl_mode.\n+\n+\t* explow.c (promote_function_mode): Just call the target hook.\n+\t* targhooks.c (default_promote_function_mode,\n+\tdefault_promote_function_mode_always_promote): New.\n+\t* targhooks.h (default_promote_function_mode,\n+\tdefault_promote_function_mode_always_promote): Declare.\n+\t* target.h (promote_function_args, promote_function_return): Remove.\n+\t(promote_function_mode): New.\n+\t* target-def.h (TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): New.\n+\t(TARGET_CALLS): Adjust.\n+\t* system.h (TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN, PROMOTE_FUNCTION_MODE): Poison.\n+\n+\t* config/s390/s390.h (PROMOTE_FUNCTION_MODE): Move...\n+\t* config/s390/s390.c (s390_promote_function_mode): ... here,\n+\twith pointer handling.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\n+\t* config/sparc/sparc.h (PROMOTE_FUNCTION_MODE): Move...\n+\t* config/sparc/sparc.c (sparc_promote_function_mode): ... here,\n+\twith pointer handling.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\t\n+\t* config/sh/sh-protos.h (sh_promote_function_mode): New.\n+\t* config/sh/sh.c (sh_promote_function_mode): New.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\n+\t* config/cris/cris.h (PROMOTE_FUNCTION_MODE): Move...\n+\t* config/cris/cris.c (cris_promote_function_mode): ... here.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS): Remove.\n+\n+\t* config/mmix/mmix.h (PROMOTE_FUNCTION_MODE): Move...\n+\t* config/mmix/mmix.c (mmix_promote_function_mode): ... here.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS): Remove.\n+\n+\t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Move...\n+\t* config/arm/arm.c (arm_promote_function_mode): ... here, without complex\n+\ttype handling.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\n+\t* config/pa/pa.c (pa_promote_function_mode): New.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\n+\t* config/alpha/alpha.c (TARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN): Remove.\n+\t(TARGET_PROMOTE_FUNCTION_MODE): Define equivalently.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/iq2000/iq2000.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/picochip/picochip.c: Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/score/score.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise (disabled though).\n+\n+\t* config/frv/frv.h: Remove pointless remark.\n+\n+\t* doc/tm.texi (PROMOTE_FUNCTION_MODE,\n+\tTARGET_PROMOTE_FUNCTION_ARGS,\n+\tTARGET_PROMOTE_FUNCTION_RETURN): Consolidate into...\n+\t(TARGET_PROMOTE_FUNCTION_MODE): ... this.\n+\n 2009-08-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* doc/invoke.texi (-fgraphite-force-parallel): Renamed"}, {"sha": "6d186c581c34e0c4ece06561cc76f79c5b451488", "filename": "gcc/calls.c", "status": "modified", "additions": 51, "deletions": 54, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1122,13 +1122,9 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t    }\n \t}\n \n-      mode = TYPE_MODE (type);\n       unsignedp = TYPE_UNSIGNED (type);\n-\n-      if (targetm.calls.promote_function_args (fndecl\n-\t\t\t\t\t       ? TREE_TYPE (fndecl)\n-\t\t\t\t\t       : fntype))\n-\tmode = promote_mode (type, mode, &unsignedp, 1);\n+      mode = promote_function_mode (type, TYPE_MODE (type), &unsignedp,\n+\t\t\t\t    fndecl ? TREE_TYPE (fndecl) : fntype, 0);\n \n       args[i].unsignedp = unsignedp;\n       args[i].mode = mode;\n@@ -1308,37 +1304,40 @@ precompute_arguments (int num_actuals, struct arg_data *args)\n \n   for (i = 0; i < num_actuals; i++)\n     {\n+      tree type;\n       enum machine_mode mode;\n \n       if (TREE_CODE (args[i].tree_value) != CALL_EXPR)\n \tcontinue;\n \n       /* If this is an addressable type, we cannot pre-evaluate it.  */\n-      gcc_assert (!TREE_ADDRESSABLE (TREE_TYPE (args[i].tree_value)));\n+      type = TREE_TYPE (args[i].tree_value);\n+      gcc_assert (!TREE_ADDRESSABLE (type));\n \n       args[i].initial_value = args[i].value\n \t= expand_normal (args[i].tree_value);\n \n-      mode = TYPE_MODE (TREE_TYPE (args[i].tree_value));\n+      mode = TYPE_MODE (type);\n       if (mode != args[i].mode)\n \t{\n+\t  int unsignedp = args[i].unsignedp;\n \t  args[i].value\n \t    = convert_modes (args[i].mode, mode,\n \t\t\t     args[i].value, args[i].unsignedp);\n-#if defined(PROMOTE_FUNCTION_MODE) && !defined(PROMOTE_MODE)\n+\n \t  /* CSE will replace this only if it contains args[i].value\n \t     pseudo, so convert it down to the declared mode using\n \t     a SUBREG.  */\n \t  if (REG_P (args[i].value)\n-\t      && GET_MODE_CLASS (args[i].mode) == MODE_INT)\n+\t      && GET_MODE_CLASS (args[i].mode) == MODE_INT\n+\t      && promote_mode (type, mode, &unsignedp) != args[i].mode)\n \t    {\n \t      args[i].initial_value\n \t\t= gen_lowpart_SUBREG (mode, args[i].value);\n \t      SUBREG_PROMOTED_VAR_P (args[i].initial_value) = 1;\n \t      SUBREG_PROMOTED_UNSIGNED_SET (args[i].initial_value,\n \t\t\t\t\t    args[i].unsignedp);\n \t    }\n-#endif\n \t}\n     }\n }\n@@ -2346,17 +2345,17 @@ expand_call (tree exp, rtx target, int ignore)\n       tree caller_res = DECL_RESULT (current_function_decl);\n \n       caller_unsignedp = TYPE_UNSIGNED (TREE_TYPE (caller_res));\n-      caller_mode = caller_promoted_mode = DECL_MODE (caller_res);\n+      caller_mode = DECL_MODE (caller_res);\n       callee_unsignedp = TYPE_UNSIGNED (TREE_TYPE (funtype));\n-      callee_mode = callee_promoted_mode = TYPE_MODE (TREE_TYPE (funtype));\n-      if (targetm.calls.promote_function_return (TREE_TYPE (current_function_decl)))\n-\tcaller_promoted_mode\n-\t  = promote_mode (TREE_TYPE (caller_res), caller_mode,\n-\t\t\t  &caller_unsignedp, 1);\n-      if (targetm.calls.promote_function_return (funtype))\n-\tcallee_promoted_mode\n-\t  = promote_mode (TREE_TYPE (funtype), callee_mode,\n-\t\t\t  &callee_unsignedp, 1);\n+      callee_mode = TYPE_MODE (TREE_TYPE (funtype));\n+      caller_promoted_mode\n+\t= promote_function_mode (TREE_TYPE (caller_res), caller_mode,\n+\t\t\t\t &caller_unsignedp,\n+\t\t\t\t TREE_TYPE (current_function_decl), 1);\n+      callee_promoted_mode\n+\t= promote_function_mode (TREE_TYPE (caller_res), callee_mode,\n+\t\t\t\t &callee_unsignedp,\n+\t\t\t\t TREE_TYPE (funtype), 1);\n       if (caller_mode != VOIDmode\n \t  && (caller_promoted_mode != callee_promoted_mode\n \t      || ((caller_mode != caller_promoted_mode\n@@ -3030,38 +3029,37 @@ expand_call (tree exp, rtx target, int ignore)\n       else\n \ttarget = copy_to_reg (avoid_likely_spilled_reg (valreg));\n \n-      if (targetm.calls.promote_function_return(funtype))\n+      /* If we promoted this return value, make the proper SUBREG.\n+         TARGET might be const0_rtx here, so be careful.  */\n+      if (REG_P (target)\n+\t  && TYPE_MODE (TREE_TYPE (exp)) != BLKmode\n+\t  && GET_MODE (target) != TYPE_MODE (TREE_TYPE (exp)))\n \t{\n-\t  /* If we promoted this return value, make the proper SUBREG.\n-\t     TARGET might be const0_rtx here, so be careful.  */\n-\t  if (REG_P (target)\n-\t      && TYPE_MODE (TREE_TYPE (exp)) != BLKmode\n-\t      && GET_MODE (target) != TYPE_MODE (TREE_TYPE (exp)))\n+\t  tree type = TREE_TYPE (exp);\n+\t  int unsignedp = TYPE_UNSIGNED (type);\n+\t  int offset = 0;\n+\t  enum machine_mode pmode;\n+\n+\t  /* Ensure we promote as expected, and get the new unsignedness.  */\n+\t  pmode = promote_function_mode (type, TYPE_MODE (type), &unsignedp,\n+\t\t\t\t\t funtype, 1);\n+\t  gcc_assert (GET_MODE (target) == pmode);\n+\n+\t  if ((WORDS_BIG_ENDIAN || BYTES_BIG_ENDIAN)\n+\t      && (GET_MODE_SIZE (GET_MODE (target))\n+\t\t  > GET_MODE_SIZE (TYPE_MODE (type))))\n \t    {\n-\t      tree type = TREE_TYPE (exp);\n-\t      int unsignedp = TYPE_UNSIGNED (type);\n-\t      int offset = 0;\n-\t      enum machine_mode pmode;\n-\n-\t      pmode = promote_mode (type, TYPE_MODE (type), &unsignedp, 1);\n-\t      /* If we don't promote as expected, something is wrong.  */\n-\t      gcc_assert (GET_MODE (target) == pmode);\n-\n-\t      if ((WORDS_BIG_ENDIAN || BYTES_BIG_ENDIAN)\n-\t\t  && (GET_MODE_SIZE (GET_MODE (target))\n-\t\t      > GET_MODE_SIZE (TYPE_MODE (type))))\n-\t\t{\n-\t\t  offset = GET_MODE_SIZE (GET_MODE (target))\n-\t\t    - GET_MODE_SIZE (TYPE_MODE (type));\n-\t\t  if (! BYTES_BIG_ENDIAN)\n-\t\t    offset = (offset / UNITS_PER_WORD) * UNITS_PER_WORD;\n-\t\t  else if (! WORDS_BIG_ENDIAN)\n-\t\t    offset %= UNITS_PER_WORD;\n-\t\t}\n-\t      target = gen_rtx_SUBREG (TYPE_MODE (type), target, offset);\n-\t      SUBREG_PROMOTED_VAR_P (target) = 1;\n-\t      SUBREG_PROMOTED_UNSIGNED_SET (target, unsignedp);\n+\t      offset = GET_MODE_SIZE (GET_MODE (target))\n+\t        - GET_MODE_SIZE (TYPE_MODE (type));\n+\t      if (! BYTES_BIG_ENDIAN)\n+\t        offset = (offset / UNITS_PER_WORD) * UNITS_PER_WORD;\n+\t      else if (! WORDS_BIG_ENDIAN)\n+\t        offset %= UNITS_PER_WORD;\n \t    }\n+\n+\t  target = gen_rtx_SUBREG (TYPE_MODE (type), target, offset);\n+\t  SUBREG_PROMOTED_VAR_P (target) = 1;\n+\t  SUBREG_PROMOTED_UNSIGNED_SET (target, unsignedp);\n \t}\n \n       /* If size of args is variable or this was a constructor call for a stack\n@@ -3876,15 +3874,14 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t}\n       else\n \t{\n-\t  /* Convert to the proper mode if PROMOTE_MODE has been active.  */\n+\t  /* Convert to the proper mode if a promotion has been active.  */\n \t  if (GET_MODE (valreg) != outmode)\n \t    {\n \t      int unsignedp = TYPE_UNSIGNED (tfom);\n \n-\t      gcc_assert (targetm.calls.promote_function_return (tfom));\n-\t      gcc_assert (promote_mode (tfom, outmode, &unsignedp, 0)\n+\t      gcc_assert (promote_function_mode (tfom, outmode, &unsignedp,\n+\t\t\t\t\t\t fndecl ? TREE_TYPE (fndecl) : fntype, 1)\n \t\t\t  == GET_MODE (valreg));\n-\n \t      valreg = convert_modes (outmode, GET_MODE (valreg), valreg, 0);\n \t    }\n "}, {"sha": "07d6dd30974cea54c85c1c33ba91e5fb3578c41f", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1202,9 +1202,7 @@ expand_one_register_var (tree var)\n {\n   tree decl = SSAVAR (var);\n   tree type = TREE_TYPE (decl);\n-  int unsignedp = TYPE_UNSIGNED (type);\n-  enum machine_mode reg_mode\n-    = promote_mode (type, DECL_MODE (decl), &unsignedp, 0);\n+  enum machine_mode reg_mode = promote_decl_mode (decl, NULL);\n   rtx x = gen_reg_rtx (reg_mode);\n \n   set_rtl (var, x);"}, {"sha": "6a0e6ec5c93d0e1c4ac011a6b95629f584535acc", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1333,9 +1333,6 @@ setup_incoming_promotions (rtx first)\n   tree arg;\n   bool strictly_local = false;\n \n-  if (!targetm.calls.promote_function_args (TREE_TYPE (cfun->decl)))\n-    return;\n-\n   for (arg = DECL_ARGUMENTS (current_function_decl); arg;\n        arg = TREE_CHAIN (arg))\n     {\n@@ -1365,7 +1362,8 @@ setup_incoming_promotions (rtx first)\n \n       /* The mode and signedness of the argument as it is actually passed, \n          after any TARGET_PROMOTE_FUNCTION_ARGS-driven ABI promotions.  */\n-      mode3 = promote_mode (DECL_ARG_TYPE (arg), mode2, &uns3, 1);\n+      mode3 = promote_function_mode (DECL_ARG_TYPE (arg), mode2, &uns3,\n+\t\t\t\t     TREE_TYPE (cfun->decl), 0);\n \n       /* The mode of the register in which the argument is being passed.  */\n       mode4 = GET_MODE (reg);"}, {"sha": "f250e14a0c2eed147deb380d0d6ab2d8b85bc00f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -10818,10 +10818,8 @@ alpha_init_libfuncs (void)\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG alpha_reorg\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_false\n #undef TARGET_RETURN_IN_MEMORY"}, {"sha": "f53c8988b4fc5111cfcbb3cb1b181c20ca557ef9", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -133,10 +133,8 @@ static const struct attribute_spec arc_attribute_table[] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST arc_address_cost\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n "}, {"sha": "83db0ec1cda99c9d94f871bda5ccf462e79f9231", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -125,6 +125,8 @@ static int arm_adjust_cost (rtx, rtx, rtx, int);\n static int count_insns_for_constant (HOST_WIDE_INT, int);\n static int arm_get_strip_length (int);\n static bool arm_function_ok_for_sibcall (tree, tree);\n+static enum machine_mode arm_promote_function_mode (const_tree, enum machine_mode,\n+\t\t\t\t\t\t    int *, const_tree, int);\n static void arm_internal_label (FILE *, const char *, unsigned long);\n static void arm_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t tree);\n@@ -329,10 +331,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS arm_init_libfuncs\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE arm_promote_function_mode\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES arm_promote_prototypes\n #undef TARGET_PASS_BY_REFERENCE\n@@ -3072,7 +3072,7 @@ arm_canonicalize_comparison (enum rtx_code code, enum machine_mode mode,\n /* Define how to find the value returned by a function.  */\n \n rtx\n-arm_function_value(const_tree type, const_tree func ATTRIBUTE_UNUSED)\n+arm_function_value(const_tree type, const_tree func)\n {\n   enum machine_mode mode;\n   int unsignedp ATTRIBUTE_UNUSED;\n@@ -3081,7 +3081,7 @@ arm_function_value(const_tree type, const_tree func ATTRIBUTE_UNUSED)\n   mode = TYPE_MODE (type);\n   /* Promote integer types.  */\n   if (INTEGRAL_TYPE_P (type))\n-    PROMOTE_FUNCTION_MODE (mode, unsignedp, type);\n+    mode = arm_promote_function_mode (type, mode, &unsignedp, func, 1);\n \n   /* Promotes small structs returned in a register to full-word size\n      for big-endian AAPCS.  */\n@@ -19094,6 +19094,19 @@ arm_promote_prototypes (const_tree t ATTRIBUTE_UNUSED)\n     return !TARGET_AAPCS_BASED;\n }\n \n+static enum machine_mode\n+arm_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+                           enum machine_mode mode,\n+                           int *punsignedp ATTRIBUTE_UNUSED,\n+                           const_tree fntype ATTRIBUTE_UNUSED,\n+                           int for_return ATTRIBUTE_UNUSED)\n+{\n+  if (GET_MODE_CLASS (mode) == MODE_INT\n+      && GET_MODE_SIZE (mode) < 4)\n+    return SImode;\n+\n+  return mode;\n+}\n \n /* AAPCS based ABIs use short enums by default.  */\n "}, {"sha": "082b5fabc3a986af7a9747c648cdd2964f987e4f", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -501,11 +501,6 @@ extern int arm_arch_hwdiv;\n       (MODE) = SImode;\t\t\t\t\\\n     }\n \n-#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n-  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\\\n-      && GET_MODE_SIZE (MODE) < 4)                      \\\n-    (MODE) = SImode;\n-\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0"}, {"sha": "13887480d1fa7438b34765e09bfda852f187714f", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -6296,12 +6296,8 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE bfin_issue_rate\n \n-#undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n \n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES bfin_arg_partial_bytes"}, {"sha": "a9fe9dee52f58b95c098cc6998c9de8d8214d915", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -85,6 +85,9 @@ static int in_code = 0;\n /* Fix for reg_overlap_mentioned_p.  */\n static int cris_reg_overlap_mentioned_p (rtx, rtx);\n \n+static enum machine_mode cris_promote_function_mode (const_tree, enum machine_mode,\n+\t\t\t\t\t\t     int *, const_tree, int);\n+\n static void cris_print_base (rtx, FILE *);\n \n static void cris_print_index (rtx, FILE *);\n@@ -166,8 +169,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST cris_address_cost\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE cris_promote_function_mode\n+\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX cris_struct_value_rtx\n #undef TARGET_SETUP_INCOMING_VARARGS\n@@ -3753,6 +3757,25 @@ cris_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \t  || CRIS_FUNCTION_ARG_SIZE (mode, type) > 8);\n }\n \n+/* A combination of defining TARGET_PROMOTE_FUNCTION_MODE, promoting arguments\n+   and *not* defining TARGET_PROMOTE_PROTOTYPES or PROMOTE_MODE gives the\n+   best code size and speed for gcc, ipps and products in gcc-2.7.2.  */\n+\n+enum machine_mode\n+cris_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+                            enum machine_mode mode,\n+                            int *punsignedp ATTRIBUTE_UNUSED,\n+\t\t\t    const_tree fntype ATTRIBUTE_UNUSED,\n+                            int for_return)\n+{\n+  /* Defining PROMOTE_FUNCTION_RETURN in gcc-2.7.2 uncovered bug 981110 (even\n+     when modifying FUNCTION_VALUE to return the promoted mode).  Maybe\n+     pointless as of now, but let's keep the old behavior.  */\n+  if (for_return)\n+    return mode;\n+  return CRIS_PROMOTED_MODE (mode, *punsignedp, type);\n+} \n+\n \n static int\n cris_arg_partial_bytes (CUMULATIVE_ARGS *ca, enum machine_mode mode,"}, {"sha": "392910796624436531dc89f32269c1878ed85d3a", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -352,24 +352,10 @@ extern int target_flags;\n \n #define UNITS_PER_WORD 4\n \n-/* A combination of defining PROMOTE_FUNCTION_MODE,\n-   TARGET_PROMOTE_FUNCTION_ARGS that always returns true\n-   and *not* defining TARGET_PROMOTE_PROTOTYPES or PROMOTE_MODE gives the\n-   best code size and speed for gcc, ipps and products in gcc-2.7.2.  */\n #define CRIS_PROMOTED_MODE(MODE, UNSIGNEDP, TYPE) \\\n  (GET_MODE_CLASS (MODE) == MODE_INT && GET_MODE_SIZE (MODE) < 4) \\\n   ? SImode : MODE\n \n-#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)  \\\n-  (MODE) = CRIS_PROMOTED_MODE (MODE, UNSIGNEDP, TYPE)\n-\n-/* Defining PROMOTE_FUNCTION_RETURN in gcc-2.7.2 uncovers bug 981110 (even\n-   if defining FUNCTION_VALUE with MODE as PROMOTED_MODE ;-)\n-\n-   FIXME: Report this when cris.h is part of GCC, so others can easily\n-   see the problem.  Maybe check other systems that define\n-   TARGET_PROMOTE_FUNCTION_RETURN that always returns true.  */\n-\n /* We will be using prototype promotion, so they will be 32 bit.  */\n #define PARM_BOUNDARY 32\n "}, {"sha": "dfb3fb8eeb1d11c3c45b76282f9d66a4a479f86c", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1764,10 +1764,6 @@ typedef struct frv_stack {\n    (Actually, on most machines, scalar values are returned in the same place\n    regardless of mode).\n \n-   If `TARGET_PROMOTE_FUNCTION_RETURN' is defined to return true, you\n-   must apply the same promotion rules specified in `PROMOTE_MODE' if\n-   VALTYPE is a scalar type.\n-\n    If the precise function being called is known, FUNC is a tree node\n    (`FUNCTION_DECL') for it; otherwise, FUNC is a null pointer.  This makes it\n    possible to use a different value-returning convention for specific"}, {"sha": "71acdab0bb9b1288d95e87ba8ce645786e7cebf4", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -459,14 +459,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n /* ??? ABI doesn't allow us to define this.  */\n #if 0\n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n-#endif\n-\n-/* ??? ABI doesn't allow us to define this.  */\n-#if 0\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #endif\n \n /* ??? Investigate.  */"}, {"sha": "ff0c868aaf22ac0ce9e8a9a12ab02847218d2007", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -189,10 +189,8 @@ static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n #undef  TARGET_HAVE_SWITCHABLE_BSS_SECTIONS\n #define TARGET_HAVE_SWITCHABLE_BSS_SECTIONS false\n \n-#undef  TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_const_tree_true\n-#undef  TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_const_tree_true\n+#undef  TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE\tdefault_promote_function_mode_always_promote\n #undef  TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES\thook_bool_const_tree_true\n \n@@ -2186,15 +2184,14 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n    FUNC.  */\n \n rtx\n-iq2000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n+iq2000_function_value (const_tree valtype, const_tree func)\n {\n   int reg = GP_RETURN;\n   enum machine_mode mode = TYPE_MODE (valtype);\n   int unsignedp = TYPE_UNSIGNED (valtype);\n \n-  /* Since we define TARGET_PROMOTE_FUNCTION_RETURN that returns true,\n-     we must promote the mode just as PROMOTE_MODE does.  */\n-  mode = promote_mode (valtype, mode, &unsignedp, 1);\n+  /* Since we promote return types, we must promote the mode here too.  */\n+  mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n \n   return gen_rtx_REG (mode, reg);\n }"}, {"sha": "170b4b00de61925eebb75c121d9e597f9ea8a6a8", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -192,10 +192,8 @@ static const struct attribute_spec mcore_attribute_table[] =\n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG\tmcore_reorg\n \n-#undef  TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_const_tree_true\n-#undef  TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_const_tree_true\n+#undef  TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE\tdefault_promote_function_mode_always_promote\n #undef  TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES\thook_bool_const_tree_true\n \n@@ -2730,14 +2728,15 @@ handle_structs_in_regs (enum machine_mode mode, const_tree type, int reg)\n }\n \n rtx\n-mcore_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n+mcore_function_value (const_tree valtype, const_tree func)\n {\n   enum machine_mode mode;\n   int unsigned_p;\n   \n   mode = TYPE_MODE (valtype);\n \n-  mode = promote_mode (valtype, mode, &unsigned_p, 1);\n+  /* Since we promote return types, we must promote the mode here too.  */\n+  mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n   \n   return handle_structs_in_regs (mode, valtype, FIRST_RET_REG);\n }"}, {"sha": "222cb8942f9aeb08e7b2fbcade730864c9b8e266", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -279,7 +279,7 @@ extern void mips_expand_prologue (void);\n extern void mips_expand_before_return (void);\n extern void mips_expand_epilogue (bool);\n extern bool mips_can_use_return_insn (void);\n-extern rtx mips_function_value (const_tree, enum machine_mode);\n+extern rtx mips_function_value (const_tree, const_tree, enum machine_mode);\n \n extern bool mips_cannot_change_mode_class (enum machine_mode,\n \t\t\t\t\t   enum machine_mode, enum reg_class);"}, {"sha": "083b253faf0d304648c45fd44757829b5371b1da", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -4976,7 +4976,7 @@ mips_return_fpr_pair (enum machine_mode mode,\n    VALTYPE is null and MODE is the mode of the return value.  */\n \n rtx\n-mips_function_value (const_tree valtype, enum machine_mode mode)\n+mips_function_value (const_tree valtype, const_tree func, enum machine_mode mode)\n {\n   if (valtype)\n     {\n@@ -4986,9 +4986,9 @@ mips_function_value (const_tree valtype, enum machine_mode mode)\n       mode = TYPE_MODE (valtype);\n       unsigned_p = TYPE_UNSIGNED (valtype);\n \n-      /* Since TARGET_PROMOTE_FUNCTION_RETURN unconditionally returns true,\n-\t we must promote the mode just as PROMOTE_MODE does.  */\n-      mode = promote_mode (valtype, mode, &unsigned_p, 1);\n+      /* Since TARGET_PROMOTE_FUNCTION_MODE unconditionally promotes,\n+\t return values, promote the mode here too.  */\n+      mode = promote_function_mode (valtype, mode, &unsigned_p, func, 1);\n \n       /* Handle structures whose fields are returned in $f0/$f2.  */\n       switch (mips_fpr_return_fields (valtype, fields))\n@@ -14851,10 +14851,8 @@ mips_final_postscan_insn (FILE *file, rtx insn, rtx *opvec, int noperands)\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR mips_gimplify_va_arg_expr\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef  TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n "}, {"sha": "8515ce10408df2b744cb8817f98c1be4c2bb809d", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -2204,10 +2204,10 @@ enum reg_class\n #define FP_ARG_LAST  (FP_ARG_FIRST + MAX_ARGS_IN_REGISTERS - 1)\n \n #define LIBCALL_VALUE(MODE) \\\n-  mips_function_value (NULL_TREE, MODE)\n+  mips_function_value (NULL_TREE, NULL_TREE, MODE)\n \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  mips_function_value (VALTYPE, VOIDmode)\n+  mips_function_value (VALTYPE, FUNC, VOIDmode)\n \n /* 1 if N is a possible register number for a function value.\n    On the MIPS, R2 R3 and F0 F2 are the only register thus used."}, {"sha": "9e94279b85a0b0a2793f533f7e77fb6e979cce34", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -135,6 +135,9 @@ static void mmix_file_start (void);\n static void mmix_file_end (void);\n static bool mmix_rtx_costs (rtx, int, int, int *, bool);\n static rtx mmix_struct_value_rtx (tree, int);\n+static enum machine_mode mmix_promote_function_mode (const_tree,\n+\t\t\t\t\t\t     enum machine_mode,\n+\t                                             int *, const_tree, int);\n static bool mmix_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, const_tree, bool);\n static bool mmix_frame_pointer_required (void);\n@@ -188,14 +191,9 @@ static bool mmix_frame_pointer_required (void);\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG mmix_reorg\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#if 0\n-/* Apparently not doing TRT if int < register-size.  FIXME: Perhaps\n-   FUNCTION_VALUE and LIBCALL_VALUE needs tweaking as some ports say.  */\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n-#endif\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE mmix_promote_function_mode\n+\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX mmix_struct_value_rtx\n@@ -2692,6 +2690,28 @@ mmix_intval (rtx x)\n   fatal_insn (\"MMIX Internal: This is not a constant:\", x);\n }\n \n+/* Worker function for TARGET_PROMOTE_FUNCTION_MODE.  */\n+\n+enum machine_mode\n+mmix_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+                            enum machine_mode mode,\n+                            int *punsignedp ATTRIBUTE_UNUSED,\n+                            const_tree fntype ATTRIBUTE_UNUSED,\n+                            int for_return)\n+{\n+  /* Apparently not doing TRT if int < register-size.  FIXME: Perhaps\n+     FUNCTION_VALUE and LIBCALL_VALUE needs tweaking as some ports say.  */\n+  if (for_return)\n+    return mode;\n+\n+  /* Promotion of modes currently generates slow code, extending before\n+     operation, so we do it only for arguments.  */\n+  if (GET_MODE_CLASS (mode) == MODE_INT\n+      && GET_MODE_SIZE (mode) < 8)\n+    return DImode;\n+  else\n+    return mode;\n+}\n /* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n \n static rtx"}, {"sha": "41466545e21b4ecb2c798ddcf1ab7bcd25c8260c", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -182,23 +182,6 @@ extern int target_flags;\n #define FLOAT_WORDS_BIG_ENDIAN 1\n #define UNITS_PER_WORD 8\n \n-/* FIXME: Promotion of modes currently generates slow code, extending\n-   before every operation.  */\n-/* I'm a little bit undecided about this one.  It might be beneficial to\n-   promote all operations.  */\n-\n-#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n- do {\t\t\t\t\t\t\\\n-  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n-      && GET_MODE_SIZE (MODE) < 8)\t\t\\\n-   {\t\t\t\t\t\t\\\n-     (MODE) = DImode;\t\t\t\t\\\n-     /* Do the following some time later,\t\\\n-\tscrutinizing differences.  */\t\t\\\n-     if (0) (UNSIGNEDP) = 0;\t\t\t\\\n-   }\t\t\t\t\t\t\\\n- } while (0)\n-\n /* We need to align everything to 64 bits that can affect the alignment\n    of other types.  Since address N is interpreted in MMIX as (N modulo\n    access_size), we must align.  */"}, {"sha": "bbd09f522e04b07a6074cc4fa8cb3b76b01f94e9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -285,8 +285,8 @@ static size_t n_deferred_plabels = 0;\n #define TARGET_INIT_LIBFUNCS pa_hpux_init_libfuncs\n #endif\n \n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE pa_promote_function_mode\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n@@ -9187,11 +9187,25 @@ insn_refs_are_delayed (rtx insn)\n \t   && get_attr_type (insn) == TYPE_MILLI));\n }\n \n+/* Promote the return value, but not the arguments.  */\n+\n+enum machine_mode\n+pa_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+                          enum machine_mode mode,\n+                          int *punsignedp ATTRIBUTE_UNUSED,\n+                          const_tree fntype ATTRIBUTE_UNUSED,\n+                          int for_return)\n+{\n+  if (!for_return)\n+    return mode;\n+  return promote_mode (mode, punsignedp, type);\n+}\n+\n /* On the HP-PA the value is found in register(s) 28(-29), unless\n    the mode is SF or DF. Then the value is returned in fr4 (32).\n \n-   This must perform the same promotions as PROMOTE_MODE, else\n-   TARGET_PROMOTE_FUNCTION_RETURN will not work correctly.\n+   This must perform the same promotions as PROMOTE_MODE, else promoting\n+   return values in TARGET_PROMOTE_FUNCTION_MODE will not work correctly.\n \n    Small structures must be returned in a PARALLEL on PA64 in order\n    to match the HP Compiler ABI.  */"}, {"sha": "ecec1f7121ed5c676c6852224ea1a515b4db79ac", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -254,10 +254,8 @@ static char picochip_get_vliw_alu_id (void);\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES picochip_arg_partial_bytes\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n \n@@ -4144,15 +4142,15 @@ warn_of_byte_access (void)\n }\n \f\n rtx\n-picochip_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n+picochip_function_value (const_tree valtype, const_tree func,\n                          bool outgoing ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode = TYPE_MODE (valtype);\n   int unsignedp = TYPE_UNSIGNED (valtype);\n \n   /* Since we define PROMOTE_FUNCTION_RETURN, we must promote the mode\n      just as PROMOTE_MODE does.  */\n-  mode = promote_mode (valtype, mode, &unsignedp, 1);\n+  mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n \n   return gen_rtx_REG (mode, 0);\n "}, {"sha": "8c0feb55057bab37b2547b1cc0033b4c75d10851", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1347,10 +1347,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n /* On rs6000, function arguments are promoted, as are function return\n    values.  */\n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n \n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY rs6000_return_in_memory"}, {"sha": "8b9ad5aedb5a41e9772f160469d13b2bcb42ac90", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -125,6 +125,6 @@ extern void s390_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n #ifdef RTX_CODE\n extern rtx s390_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n-extern rtx s390_function_value (const_tree, enum machine_mode);\n+extern rtx s390_function_value (const_tree, const_tree, enum machine_mode);\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */"}, {"sha": "25203ab52b6c1df7f97e1b85e5f378e87e5bcad8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -8343,17 +8343,36 @@ s390_return_in_memory (const_tree type, const_tree fundecl ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+/* Function arguments and return values are promoted to word size.  */\n+\n+static enum machine_mode\n+s390_promote_function_mode (const_tree type, enum machine_mode mode,\n+                            int *punsignedp,\n+                            const_tree fntype ATTRIBUTE_UNUSED,\n+                            int for_return ATTRIBUTE_UNUSED)\n+{\n+  if (INTEGRAL_MODE_P (mode)\n+      && GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n+    {\n+      if (POINTER_TYPE_P (type))\n+\t*punsignedp = POINTERS_EXTEND_UNSIGNED;\n+      return Pmode;\n+    }\n+\n+  return mode;\n+}\n+\n /* Define where to return a (scalar) value of type TYPE.\n    If TYPE is null, define where to return a (scalar)\n    value of mode MODE from a libcall.  */\n \n rtx\n-s390_function_value (const_tree type, enum machine_mode mode)\n+s390_function_value (const_tree type, const_tree fn, enum machine_mode mode)\n {\n   if (type)\n     {\n       int unsignedp = TYPE_UNSIGNED (type);\n-      mode = promote_mode (type, TYPE_MODE (type), &unsignedp, 1);\n+      mode = promote_function_mode (type, TYPE_MODE (type), &unsignedp, fn, 1);\n     }\n \n   gcc_assert (GET_MODE_CLASS (mode) == MODE_INT || SCALAR_FLOAT_MODE_P (mode));\n@@ -9998,10 +10017,8 @@ s390_reorg (void)\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR s390_gimplify_va_arg\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE s390_promote_function_mode\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE s390_pass_by_reference\n "}, {"sha": "4772367eee54653b2676d72c8bb7a3c15df1c3c0", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -216,13 +216,6 @@ extern int s390_arch_flags;\n #endif\n #define MAX_BITS_PER_WORD 64\n \n-/* Function arguments and return values are promoted to word size.  */\n-#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\t\\\n-if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n-    GET_MODE_SIZE (MODE) < UNITS_PER_WORD) { \t\t\\\n-  (MODE) = Pmode;\t\t\t\t\t\\\n-\t  }\n-\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY (TARGET_64BIT ? 64 : 32)\n \n@@ -697,10 +690,10 @@ CUMULATIVE_ARGS;\n /* Scalar return values.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  s390_function_value ((VALTYPE), VOIDmode)\n+  s390_function_value ((VALTYPE), (FUNC), VOIDmode)\n \n #define LIBCALL_VALUE(MODE) \\\n-  s390_function_value (NULL, (MODE))\n+  s390_function_value (NULL, NULL, (MODE))\n \n /* Only gpr 2 and fpr 0 are ever used as return registers.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 2 || (N) == 16)"}, {"sha": "0241383fc8676228040b6eedae976d9c2f34a95b", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -89,11 +89,8 @@\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK      score_output_mi_thunk\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS    hook_bool_tree_true\n-\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN  hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE    default_promote_function_mode_always_promote\n \n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES       hook_bool_tree_true"}, {"sha": "385620d33d62d262c8dbb90a4453efd865afead9", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -859,15 +859,14 @@ score3_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n    VALTYPE is null and MODE is the mode of the return value.  */\n rtx\n-score3_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n-                       enum machine_mode mode)\n+score3_function_value (tree valtype, tree func, enum machine_mode mode)\n {\n   if (valtype)\n     {\n       int unsignedp;\n       mode = TYPE_MODE (valtype);\n       unsignedp = TYPE_UNSIGNED (valtype);\n-      mode = promote_mode (valtype, mode, &unsignedp, 1);\n+      mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n     }\n   return gen_rtx_REG (mode, RT_REGNUM);\n }"}, {"sha": "368ac03a3ba197be6fd23152c7e2ef8a7d44ba7a", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -850,15 +850,14 @@ score7_function_arg (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n    VALTYPE is the return type and MODE is VOIDmode.  For libcalls,\n    VALTYPE is null and MODE is the mode of the return value.  */\n rtx\n-score7_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n-                       enum machine_mode mode)\n+score7_function_value (tree valtype, tree func, enum machine_mode mode)\n {\n   if (valtype)\n     {\n       int unsignedp;\n       mode = TYPE_MODE (valtype);\n       unsignedp = TYPE_UNSIGNED (valtype);\n-      mode = promote_mode (valtype, mode, &unsignedp, 1);\n+      mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n     }\n   return gen_rtx_REG (mode, RT_REGNUM);\n }"}, {"sha": "dec662b197ed3f2e006363ab417f2f9430d530f4", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -166,6 +166,8 @@ extern int sh_pass_in_reg_p (CUMULATIVE_ARGS *, enum machine_mode, tree);\n extern void sh_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, signed int, enum machine_mode);\n extern bool sh_promote_prototypes (const_tree);\n extern rtx sh_dwarf_register_span (rtx);\n+extern enum machine_mode sh_promote_function_mode (const_tree, enum machine_mode,\n+\t\t\t\t\t\t   int *, const_tree, int);\n \n extern rtx replace_n_hard_rtx (rtx, rtx *, int , int);\n extern int shmedia_cleanup_truncate (rtx *, void *);"}, {"sha": "9c919d0a774103c633241573665f5ffb110cc764", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -438,9 +438,7 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES sh_promote_prototypes\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS sh_promote_prototypes\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN sh_promote_prototypes\n+#define TARGET_PROMOTE_FUNCTION_ARGS sh_promote_function_mode\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX sh_struct_value_rtx\n@@ -7896,6 +7894,16 @@ sh_dwarf_register_span (rtx reg)\n \t\t\t\t\t      DBX_REGISTER_NUMBER (regno))));\n }\n \n+enum machine_mode\n+sh_promote_function_mode (const_tree type, enum machine_mode mode,\n+\t\t\t  int *punsignedp, const_tree funtype, int for_return)\n+{\n+  if (sh_promote_prototypes (funtype))\n+    return promote_mode (type, machine_mode, punsignedp);\n+  else\n+    return mode;\n+}\n+\n bool\n sh_promote_prototypes (const_tree type)\n {"}, {"sha": "52cbe703458b5b7ec5b56a87fdeb155bd37cc5ee", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -404,6 +404,8 @@ static int get_some_local_dynamic_name_1 (rtx *, void *);\n static bool sparc_rtx_costs (rtx, int, int, int *, bool);\n static bool sparc_promote_prototypes (const_tree);\n static rtx sparc_struct_value_rtx (tree, int);\n+static enum machine_mode sparc_promote_function_mode (const_tree, enum machine_mode,\n+\t\t\t\t\t\t      int *, const_tree, int);\n static bool sparc_return_in_memory (const_tree, const_tree);\n static bool sparc_strict_argument_naming (CUMULATIVE_ARGS *);\n static void sparc_va_start (tree, rtx);\n@@ -524,17 +526,8 @@ static bool fpu_option_set = false;\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n \n-/* This is only needed for TARGET_ARCH64, but since PROMOTE_FUNCTION_MODE is a\n-   no-op for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime\n-   test for this value.  */\n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-\n-/* This is only needed for TARGET_ARCH64, but since PROMOTE_FUNCTION_MODE is a\n-   no-op for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime\n-   test for this value.  */\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE sparc_promote_function_mode\n \n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES sparc_promote_prototypes\n@@ -4642,6 +4635,36 @@ sparc_promote_prototypes (const_tree fntype ATTRIBUTE_UNUSED)\n   return TARGET_ARCH32 ? true : false;\n }\n \n+/* Handle promotion of pointer and integer arguments.  */\n+\n+static enum machine_mode\n+sparc_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+                             enum machine_mode mode,\n+                             int *punsignedp ATTRIBUTE_UNUSED,\n+                             const_tree fntype ATTRIBUTE_UNUSED,\n+                             int for_return ATTRIBUTE_UNUSED)\n+{\n+  if (POINTER_TYPE_P (type))\n+    {\n+      *punsignedp = POINTERS_EXTEND_UNSIGNED;\n+      return Pmode;\n+    }\n+\n+  /* For TARGET_ARCH64 we need this, as we don't have instructions\n+     for arithmetic operations which do zero/sign extension at the same time,\n+     so without this we end up with a srl/sra after every assignment to an\n+     user variable,  which means very very bad code.  */\n+\n+  if (TARGET_ARCH64\n+      && GET_MODE_CLASS (mode) == MODE_INT\n+      && GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n+    return word_mode;\n+\n+  return mode;\n+}\n+\n+\n+\n /* Handle the TARGET_STRICT_ARGUMENT_NAMING target hook.  */\n \n static bool\n@@ -5784,7 +5807,8 @@ function_value (const_tree type, enum machine_mode mode, int incoming_p)\n \t    mclass = MODE_INT;\n \t}\n \n-      /* This must match PROMOTE_FUNCTION_MODE.  */\n+      /* This must match sparc_promote_function_mode.\n+\t ??? Maybe 32-bit pointers should actually remain in Pmode?  */\n       else if (mclass == MODE_INT && GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n \tmode = word_mode;\n     }"}, {"sha": "3b713611f84c19279e38fbeb84489cd3688717a1", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -636,16 +636,6 @@ extern struct sparc_cpu_select sparc_select[];\n    if ptr_mode and Pmode are the same.  */\n #define POINTERS_EXTEND_UNSIGNED 1\n \n-/* For TARGET_ARCH64 we need this, as we don't have instructions\n-   for arithmetic operations which do zero/sign extension at the same time,\n-   so without this we end up with a srl/sra after every assignment to an\n-   user variable,  which means very very bad code.  */\n-#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE) \\\n-if (TARGET_ARCH64\t\t\t\t\\\n-    && GET_MODE_CLASS (MODE) == MODE_INT\t\\\n-    && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\\\n-  (MODE) = word_mode;\n-\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY (TARGET_ARCH64 ? 64 : 32)\n "}, {"sha": "06b96c7b8cef54dd2d2a3da45f18ec56392888dd", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -2640,10 +2640,8 @@ xstormy16_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #undef  TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR xstormy16_gimplify_va_arg_expr\n \n-#undef  TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef  TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef  TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef  TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n "}, {"sha": "77ba2d9d01798f92d14596b9b0fb010c220b570b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -185,10 +185,8 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_EXPAND_BUILTIN_VA_START\n #define TARGET_EXPAND_BUILTIN_VA_START xtensa_va_start\n \n-#undef TARGET_PROMOTE_FUNCTION_ARGS\n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_true\n-#undef TARGET_PROMOTE_FUNCTION_RETURN\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_MODE\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode_always_promote\n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n "}, {"sha": "84d320bc95b2264913efe1b6a80f94cb8857089b", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -582,7 +582,7 @@ extern const enum reg_class xtensa_regno_to_class[FIRST_PSEUDO_REGISTER];\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  Because we have defined\n-   TARGET_PROMOTE_FUNCTION_RETURN that returns true, we have to\n+   TARGET_PROMOTE_FUNCTION_MODE to promote everything, we have to\n    perform the same promotions as PROMOTE_MODE.  */\n #define XTENSA_LIBCALL_VALUE(MODE, OUTGOINGP)\t\t\t\t\\\n   gen_rtx_REG ((GET_MODE_CLASS (MODE) == MODE_INT\t\t\t\\"}, {"sha": "bb4f61b9e8335369e7248728e98fc5f736bf0d95", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1039,27 +1039,20 @@ sign-extend the result to 64 bits.  On such machines, set\n Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n-@defmac PROMOTE_FUNCTION_MODE\n-Like @code{PROMOTE_MODE}, but is applied to outgoing function arguments or\n-function return values, as specified by @code{TARGET_PROMOTE_FUNCTION_ARGS}\n-and @code{TARGET_PROMOTE_FUNCTION_RETURN}, respectively.\n-\n-The default is @code{PROMOTE_MODE}.\n-@end defmac\n-\n-@deftypefn {Target Hook} bool TARGET_PROMOTE_FUNCTION_ARGS (tree @var{fntype})\n-This target hook should return @code{true} if the promotion described by\n-@code{PROMOTE_FUNCTION_MODE} should be done for outgoing function\n-arguments.\n-@end deftypefn\n-\n-@deftypefn {Target Hook} bool TARGET_PROMOTE_FUNCTION_RETURN (tree @var{fntype})\n-This target hook should return @code{true} if the promotion described by\n-@code{PROMOTE_FUNCTION_MODE} should be done for the return value of\n-functions.\n-\n-If this target hook returns @code{true}, @code{TARGET_FUNCTION_VALUE}\n-must perform the same promotions done by @code{PROMOTE_FUNCTION_MODE}.\n+@deftypefn {Target Hook} enum machine_mode TARGET_PROMOTE_FUNCTION_MODE (tree @var{type}, enum machine_mode @var{mode}, int *@var{punsignedp}, tree @var{funtype}, int @var{for_return})\n+Like @code{PROMOTE_MODE}, but it is applied to outgoing function arguments or\n+function return values.  The target hook should return the new mode\n+and possibly change @code{*@var{punsignedp}} if the promotion should\n+change signedness.  This function is called only for scalar @emph{or\n+pointer} types.\n+\n+The default is to not promote arguments and return values.  You can\n+also define the hook to @code{default_promote_function_mode_always_promote}\n+if you would like to apply the same rules given by @code{PROMOTE_MODE}.\n+\n+@var{for_return} allows to distinguish the promotion of arguments and\n+return values.  If this target hook promotes return values,\n+@code{TARGET_FUNCTION_VALUE} must perform the same promotions done here.\n @end deftypefn\n \n @defmac PARM_BOUNDARY"}, {"sha": "0a2616436e3fd02ed4e1ab102ce7978ffeb7ae18", "filename": "gcc/explow.c", "status": "modified", "additions": 64, "deletions": 31, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -749,63 +749,96 @@ copy_to_suggested_reg (rtx x, rtx target, enum machine_mode mode)\n   return temp;\n }\n \f\n-/* Return the mode to use to store a scalar of TYPE and MODE.\n+/* Return the mode to use to pass or return a scalar of TYPE and MODE.\n    PUNSIGNEDP points to the signedness of the type and may be adjusted\n    to show what signedness to use on extension operations.\n \n-   FOR_CALL is nonzero if this call is promoting args for a call.  */\n+   FOR_RETURN is nonzero if the caller is promoting the return value\n+   of FNDECL, else it is for promoting args.  */\n \n-#if defined(PROMOTE_MODE) && !defined(PROMOTE_FUNCTION_MODE)\n-#define PROMOTE_FUNCTION_MODE PROMOTE_MODE\n-#endif\n+enum machine_mode\n+promote_function_mode (const_tree type, enum machine_mode mode, int *punsignedp,\n+\t\t       const_tree funtype, int for_return)\n+{\n+  gcc_assert (GET_MODE_CLASS (mode) != MODE_COMPLEX_INT);\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE:   case ENUMERAL_TYPE:   case BOOLEAN_TYPE:\n+    case REAL_TYPE:      case OFFSET_TYPE:     case FIXED_POINT_TYPE:\n+    case POINTER_TYPE:   case REFERENCE_TYPE:\n+      return targetm.calls.promote_function_mode (type, mode, punsignedp, funtype,\n+\t\t\t\t\t\t  for_return);\n+\n+    default:\n+      return mode;\n+    }\n+}\n+/* Return the mode to use to store a scalar of TYPE and MODE.\n+   PUNSIGNEDP points to the signedness of the type and may be adjusted\n+   to show what signedness to use on extension operations.  */\n \n enum machine_mode\n-promote_mode (const_tree type, enum machine_mode mode, int *punsignedp,\n-\t      int for_call ATTRIBUTE_UNUSED)\n+promote_mode (const_tree type, enum machine_mode mode, int *punsignedp)\n {\n+  /* FIXME: this is the same logic that was there until GCC 4.4, but we\n+     probably want to test POINTERS_EXTEND_UNSIGNED even if PROMOTE_MODE\n+     is not defined.  The affected targets are M32C, S390, SPARC.  */\n+#ifdef PROMOTE_MODE\n   const enum tree_code code = TREE_CODE (type);\n   int unsignedp = *punsignedp;\n \n-#ifndef PROMOTE_MODE\n-  if (! for_call)\n-    return mode;\n-#endif\n-\n   switch (code)\n     {\n-#ifdef PROMOTE_FUNCTION_MODE\n     case INTEGER_TYPE:   case ENUMERAL_TYPE:   case BOOLEAN_TYPE:\n     case REAL_TYPE:      case OFFSET_TYPE:     case FIXED_POINT_TYPE:\n-#ifdef PROMOTE_MODE\n-      if (for_call)\n-\t{\n-#endif\n-\t  PROMOTE_FUNCTION_MODE (mode, unsignedp, type);\n-#ifdef PROMOTE_MODE\n-\t}\n-      else\n-\t{\n-\t  PROMOTE_MODE (mode, unsignedp, type);\n-\t}\n-#endif\n+      PROMOTE_MODE (mode, unsignedp, type);\n+      *punsignedp = unsignedp;\n+      return mode;\n       break;\n-#endif\n \n #ifdef POINTERS_EXTEND_UNSIGNED\n     case REFERENCE_TYPE:\n     case POINTER_TYPE:\n-      mode = Pmode;\n-      unsignedp = POINTERS_EXTEND_UNSIGNED;\n+      *punsignedp = POINTERS_EXTEND_UNSIGNED;\n+      return Pmode;\n       break;\n #endif\n \n     default:\n-      break;\n+      return mode;\n     }\n-\n-  *punsignedp = unsignedp;\n+#else\n   return mode;\n+#endif\n }\n+\n+\n+/* Use one of promote_mode or promote_function_mode to find the promoted\n+   mode of DECL.  If PUNSIGNEDP is not NULL, store there the unsignedness\n+   of DECL after promotion.  */\n+\n+enum machine_mode\n+promote_decl_mode (const_tree decl, int *punsignedp)\n+{\n+  tree type = TREE_TYPE (decl);\n+  int unsignedp = TYPE_UNSIGNED (type);\n+  enum machine_mode mode = DECL_MODE (decl);\n+  enum machine_mode pmode;\n+\n+  if (TREE_CODE (decl) == RESULT_DECL)\n+    pmode = promote_function_mode (type, mode, &unsignedp,\n+                                   TREE_TYPE (current_function_decl), 1);\n+  else if (TREE_CODE (decl) == PARM_DECL)\n+    pmode = promote_function_mode (type, mode, &unsignedp,\n+                                   TREE_TYPE (current_function_decl), 0);\n+  else\n+    pmode = promote_mode (type, mode, &unsignedp);\n+\n+  if (punsignedp)\n+    *punsignedp = unsignedp;\n+  return pmode;\n+}\n+\n \f\n /* Adjust the stack pointer by ADJUST (an rtx for a number of bytes).\n    This pops when ADJUST is positive.  ADJUST need not be constant.  */"}, {"sha": "08c747ecffbb7d79119122ffb06c056bfeaab8dd", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -5435,13 +5435,11 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    enum machine_mode mode;\n \t    HOST_WIDE_INT bitsize;\n \t    HOST_WIDE_INT bitpos;\n-\t    int unsignedp;\n \t    rtx xtarget = target;\n \n \t    if (cleared && initializer_zerop (value))\n \t      continue;\n \n-\t    unsignedp = TYPE_UNSIGNED (elttype);\n \t    mode = TYPE_MODE (elttype);\n \t    if (mode == BLKmode)\n \t      bitsize = (host_integerp (TYPE_SIZE (elttype), 1)\n@@ -5497,14 +5495,10 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    tree exit_cond;\n \n \t\t    expand_normal (hi_index);\n-\t\t    unsignedp = TYPE_UNSIGNED (domain);\n \n \t\t    index = build_decl (EXPR_LOCATION (exp),\n \t\t\t\t\tVAR_DECL, NULL_TREE, domain);\n-\n-\t\t    index_r\n-\t\t      = gen_reg_rtx (promote_mode (domain, DECL_MODE (index),\n-\t\t\t\t\t\t   &unsignedp, 0));\n+\t\t    index_r = gen_reg_rtx (promote_decl_mode (index, NULL));\n \t\t    SET_DECL_RTL (index, index_r);\n \t\t    store_expr (lo_index, index_r, 0, false);\n \n@@ -7429,9 +7423,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n \t  /* Get the signedness used for this variable.  Ensure we get the\n \t     same mode we got when the variable was declared.  */\n-\t  pmode = promote_mode (type, DECL_MODE (exp), &unsignedp,\n-\t\t\t\t(TREE_CODE (exp) == RESULT_DECL\n-\t\t\t\t || TREE_CODE (exp) == PARM_DECL) ? 1 : 0);\n+\t  pmode = promote_decl_mode (exp, &unsignedp);\n \t  gcc_assert (GET_MODE (decl_rtl) == pmode);\n \n \t  temp = gen_lowpart_SUBREG (mode, decl_rtl);"}, {"sha": "8e23aecb4b9292418571453c1fa10f49da8b0f5d", "filename": "gcc/expr.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -719,8 +719,17 @@ extern rtx force_reg (enum machine_mode, rtx);\n /* Return given rtx, copied into a new temp reg if it was in memory.  */\n extern rtx force_not_mem (rtx);\n \n+/* Return mode and signedness to use when an argument or result in the\n+   given mode is promoted.  */\n+extern enum machine_mode promote_function_mode (const_tree, enum machine_mode, int *,\n+\t\t\t\t\t        const_tree, int);\n+\n+/* Return mode and signedness to use when an object in the given mode\n+   is promoted.  */\n+extern enum machine_mode promote_mode (const_tree, enum machine_mode, int *);\n+\n /* Return mode and signedness to use when object is promoted.  */\n-extern enum machine_mode promote_mode (const_tree, enum machine_mode, int *, int);\n+enum machine_mode promote_decl_mode (const_tree, int *);\n \n /* Remove some bytes from the stack.  An rtx says how many.  */\n extern void adjust_stack (rtx);"}, {"sha": "2294b971547f631ea05f5507277ab5a5fb084748", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -922,7 +922,7 @@ assign_temp (tree type_or_decl, int keep, int memory_required,\n \n #ifdef PROMOTE_MODE\n   if (! dont_promote)\n-    mode = promote_mode (type, mode, &unsignedp, 0);\n+    mode = promote_mode (type, mode, &unsignedp);\n #endif\n \n   return gen_reg_rtx (mode);\n@@ -2167,6 +2167,7 @@ assign_parm_find_data_types (struct assign_parm_data_all *all, tree parm,\n {\n   tree nominal_type, passed_type;\n   enum machine_mode nominal_mode, passed_mode, promoted_mode;\n+  int unsignedp;\n \n   memset (data, 0, sizeof (*data));\n \n@@ -2219,13 +2220,9 @@ assign_parm_find_data_types (struct assign_parm_data_all *all, tree parm,\n     }\n \n   /* Find mode as it is passed by the ABI.  */\n-  promoted_mode = passed_mode;\n-  if (targetm.calls.promote_function_args (TREE_TYPE (current_function_decl)))\n-    {\n-      int unsignedp = TYPE_UNSIGNED (passed_type);\n-      promoted_mode = promote_mode (passed_type, promoted_mode,\n-\t\t\t\t    &unsignedp, 1);\n-    }\n+  unsignedp = TYPE_UNSIGNED (passed_type);\n+  promoted_mode = promote_function_mode (passed_type, passed_mode, &unsignedp,\n+\t\t\t\t         TREE_TYPE (current_function_decl), 0);\n \n  egress:\n   data->nominal_type = nominal_type;\n@@ -2778,7 +2775,8 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n   /* This is not really promoting for a call.  However we need to be\n      consistent with assign_parm_find_data_types and expand_expr_real_1.  */\n   promoted_nominal_mode\n-    = promote_mode (data->nominal_type, data->nominal_mode, &unsignedp, 1);\n+    = promote_function_mode (data->nominal_type, data->nominal_mode, &unsignedp,\n+\t\t\t     TREE_TYPE (current_function_decl), 0);\n \n   parmreg = gen_reg_rtx (promoted_nominal_mode);\n \n@@ -4722,10 +4720,9 @@ expand_function_end (void)\n \t  else if (GET_MODE (real_decl_rtl) != GET_MODE (decl_rtl))\n \t    {\n \t      int unsignedp = TYPE_UNSIGNED (TREE_TYPE (decl_result));\n-\n-\t      if (targetm.calls.promote_function_return (TREE_TYPE (current_function_decl)))\n-\t\tpromote_mode (TREE_TYPE (decl_result), GET_MODE (decl_rtl),\n-\t\t\t      &unsignedp, 1);\n+\t      promote_function_mode (TREE_TYPE (decl_result),\n+\t\t\t\t     GET_MODE (decl_rtl), &unsignedp,\n+\t\t\t\t     TREE_TYPE (current_function_decl), 1);\n \n \t      convert_move (real_decl_rtl, decl_rtl, unsignedp);\n \t    }"}, {"sha": "29bcf870fba707f338af86d81927fb6d5dfe104f", "filename": "gcc/stmt.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -1514,23 +1514,22 @@ expand_value_return (rtx val)\n   /* Copy the value to the return location\n      unless it's already there.  */\n \n-  rtx return_reg = DECL_RTL (DECL_RESULT (current_function_decl));\n+  tree decl = DECL_RESULT (current_function_decl);\n+  rtx return_reg = DECL_RTL (decl);\n   if (return_reg != val)\n     {\n-      tree type = TREE_TYPE (DECL_RESULT (current_function_decl));\n-      if (targetm.calls.promote_function_return (TREE_TYPE (current_function_decl)))\n-      {\n-\tint unsignedp = TYPE_UNSIGNED (type);\n-\tenum machine_mode old_mode\n-\t  = DECL_MODE (DECL_RESULT (current_function_decl));\n-\tenum machine_mode mode\n-\t  = promote_mode (type, old_mode, &unsignedp, 1);\n-\n-\tif (mode != old_mode)\n-\t  val = convert_modes (mode, old_mode, val, unsignedp);\n-      }\n+      int unsignedp;\n+      enum machine_mode old_mode = DECL_MODE (decl);\n+      enum machine_mode mode = promote_decl_mode (decl, &unsignedp);\n+\n+      if (mode != old_mode)\n+\tval = convert_modes (mode, old_mode, val, unsignedp);\n+\n       if (GET_CODE (return_reg) == PARALLEL)\n-\temit_group_load (return_reg, val, type, int_size_in_bytes (type));\n+\t{\n+          tree type = TREE_TYPE (decl);\n+\t  emit_group_load (return_reg, val, type, int_size_in_bytes (type));\n+\t}\n       else\n \temit_move_insn (return_reg, val);\n     }\n@@ -1848,9 +1847,7 @@ expand_decl (tree decl)\n   else if (use_register_for_decl (decl))\n     {\n       /* Automatic variable that can go in a register.  */\n-      int unsignedp = TYPE_UNSIGNED (type);\n-      enum machine_mode reg_mode\n-\t= promote_mode (type, DECL_MODE (decl), &unsignedp, 0);\n+      enum machine_mode reg_mode = promote_decl_mode (decl, NULL);\n \n       SET_DECL_RTL (decl, gen_reg_rtx (reg_mode));\n "}, {"sha": "5d47f2e1839b537d7869a0441936cfef037a91b5", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -684,7 +684,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tDIVDI3_LIBCALL UDIVSI3_LIBCALL UDIVDI3_LIBCALL MODSI3_LIBCALL\t\\\n \tMODDI3_LIBCALL UMODSI3_LIBCALL UMODDI3_LIBCALL BUILD_VA_LIST_TYPE \\\n \tPRETEND_OUTGOING_VARARGS_NAMED STRUCT_VALUE_INCOMING_REGNUM\t\\\n-\tASM_OUTPUT_SECTION_NAME PROMOTE_FUNCTION_ARGS\t\t\t\\\n+\tASM_OUTPUT_SECTION_NAME PROMOTE_FUNCTION_ARGS PROMOTE_FUNCTION_MODE \\\n \tSTRUCT_VALUE_INCOMING STRICT_ARGUMENT_NAMING\t\t\t\\\n \tPROMOTE_FUNCTION_RETURN PROMOTE_PROTOTYPES STRUCT_VALUE_REGNUM\t\\\n \tSETUP_INCOMING_VARARGS EXPAND_BUILTIN_SAVEREGS\t\t\t\\\n@@ -754,7 +754,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tLANG_HOOKS_TREE_INLINING_ESTIMATE_NUM_INSNS \\\n \tLANG_HOOKS_PUSHLEVEL LANG_HOOKS_SET_BLOCK \\\n \tLANG_HOOKS_MAYBE_BUILD_CLEANUP LANG_HOOKS_UPDATE_DECL_AFTER_SAVING \\\n-\tLANG_HOOKS_POPLEVEL LANG_HOOKS_TRUTHVALUE_CONVERSION\n+\tLANG_HOOKS_POPLEVEL LANG_HOOKS_TRUTHVALUE_CONVERSION \\\n+\tTARGET_PROMOTE_FUNCTION_ARGS TARGET_PROMOTE_FUNCTION_RETURN\n \n /* Miscellaneous macros that are no longer used.  */\n  #pragma GCC poison USE_MAPPED_LOCATION"}, {"sha": "26464ed4472127fe03625a20eba7586fc641d4dd", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -574,8 +574,7 @@\n \n #define TARGET_ARM_EABI_UNWINDER false\n \n-#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_const_tree_false\n-#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_const_tree_false\n+#define TARGET_PROMOTE_FUNCTION_MODE default_promote_function_mode\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_false\n \n #define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n@@ -605,8 +604,7 @@\n #define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS hook_bool_void_true\n \n #define TARGET_CALLS {\t\t\t\t\t\t\\\n-   TARGET_PROMOTE_FUNCTION_ARGS,\t\t\t\t\\\n-   TARGET_PROMOTE_FUNCTION_RETURN,\t\t\t\t\\\n+   TARGET_PROMOTE_FUNCTION_MODE,\t\t\t\t\\\n    TARGET_PROMOTE_PROTOTYPES,\t\t\t\t\t\\\n    TARGET_STRUCT_VALUE_RTX,\t\t\t\t\t\\\n    TARGET_RETURN_IN_MEMORY,\t\t\t\t\t\\"}, {"sha": "27fd77b7779e2494449ffb85238d2a1d2fc08b80", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -832,8 +832,11 @@ struct gcc_target\n \n   /* Functions relating to calls - argument passing, returns, etc.  */\n   struct calls {\n-    bool (*promote_function_args) (const_tree fntype);\n-    bool (*promote_function_return) (const_tree fntype);\n+    enum machine_mode (*promote_function_mode) (const_tree type,\n+\t\t\t\t\t\tenum machine_mode mode,\n+\t\t\t\t\t\tint *punsignedp,\n+\t\t\t\t\t\tconst_tree fntype,\n+\t\t\t\t\t\tint for_return);\n     bool (*promote_prototypes) (const_tree fntype);\n     rtx (*struct_value_rtx) (tree fndecl, int incoming);\n     bool (*return_in_memory) (const_tree type, const_tree fndecl);"}, {"sha": "8c3c2ab1e24bb9766ed8a1457871db85a67e5207", "filename": "gcc/targhooks.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -112,6 +112,27 @@ default_unspec_may_trap_p (const_rtx x, unsigned flags)\n   return 0;\n }\n \n+enum machine_mode\n+default_promote_function_mode (const_tree type ATTRIBUTE_UNUSED,\n+\t\t\t       enum machine_mode mode,\n+\t\t\t       int *punsignedp ATTRIBUTE_UNUSED,\n+\t\t\t       const_tree funtype ATTRIBUTE_UNUSED,\n+\t\t\t       int for_return ATTRIBUTE_UNUSED)\n+{\n+  return mode;\n+}\n+\n+enum machine_mode\n+default_promote_function_mode_always_promote (const_tree type,\n+\t\t\t\t\t      enum machine_mode mode,\n+\t\t\t\t\t      int *punsignedp,\n+\t\t\t\t\t      const_tree funtype ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      int for_return ATTRIBUTE_UNUSED)\n+{\n+  return promote_mode (type, mode, punsignedp);\n+}\n+\n+\n enum machine_mode\n default_cc_modes_compatible (enum machine_mode m1, enum machine_mode m2)\n {"}, {"sha": "5564a7983cfd347e9e33019165a84f0a4bedaf64", "filename": "gcc/targhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -24,6 +24,10 @@ extern void default_external_libcall (rtx);\n extern rtx default_legitimize_address (rtx, rtx, enum machine_mode);\n \n extern int default_unspec_may_trap_p (const_rtx, unsigned);\n+extern enum machine_mode default_promote_function_mode (const_tree, enum machine_mode,\n+\t\t\t\t\t\t\tint *, const_tree, int);\n+extern enum machine_mode default_promote_function_mode_always_promote\n+\t\t\t(const_tree, enum machine_mode, int *, const_tree, int);\n \n extern enum machine_mode default_cc_modes_compatible (enum machine_mode,\n \t\t\t\t\t\t      enum machine_mode);"}, {"sha": "420ee8099b4445402c16b499ba6268d7d84d6ea1", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cde0f3fd8a679f3dd2ea809b2b2876059621a0f2/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=cde0f3fd8a679f3dd2ea809b2b2876059621a0f2", "patch": "@@ -566,9 +566,8 @@ get_temp_reg (tree name)\n {\n   tree var = TREE_CODE (name) == SSA_NAME ? SSA_NAME_VAR (name) : name;\n   tree type = TREE_TYPE (var);\n-  int unsignedp = TYPE_UNSIGNED (type);\n-  enum machine_mode reg_mode\n-    = promote_mode (type, DECL_MODE (var), &unsignedp, 0);\n+  int unsignedp;\n+  enum machine_mode reg_mode = promote_decl_mode (var, &unsignedp);\n   rtx x = gen_reg_rtx (reg_mode);\n   if (POINTER_TYPE_P (type))\n     mark_reg_pointer (x, TYPE_ALIGN (TREE_TYPE (TREE_TYPE (var))));"}]}