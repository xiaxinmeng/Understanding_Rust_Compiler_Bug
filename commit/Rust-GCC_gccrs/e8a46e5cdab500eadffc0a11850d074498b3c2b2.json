{"sha": "e8a46e5cdab500eadffc0a11850d074498b3c2b2", "node_id": "C_kwDOANBUbNoAKGU4YTQ2ZTVjZGFiNTAwZWFkZmZjMGExMTg1MGQwNzQ0OThiM2MyYjI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-01T08:13:17Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-01T08:13:17Z"}, "message": "Double word logical operation clean-ups in i386.md.\n\nThis patch tidies up and unifies doubleword handling in i386.md;\nconverting all doubleword splitters for logic operations to post-reload\nform, generalizing their define_insn_and_split templates to <dwi> form\n(supporting TARGET_64BIT ? TImode : DImode), and where required tweaking\nthe corresponding expanders to use SDWIM to support TImode doubleword\noperations.\n\n2022-07-01  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (general_szext_operand): Add TImode\n\tsupport using x86_64_hilo_general_operand predicate.\n\t(*cmp<dwi>_doubleword): Use x86_64_hilo_general_operand predicate.\n\t(*add<dwi>3_doubleword): Improved optimization of zero addition.\n\t(and<mode>3): Use SDWIM mode iterator to add support for double\n\tword bit-wise AND in TImode.  Use force_reg when double word\n\timmediate operand isn't x86_64_hilo_general_operand.\n\t(and<dwi>3_doubleword): Generalized from anddi3_doubleword and\n\tconverted into a post-reload splitter.\n\t(*andndi3_doubleword): Previous define_insn deleted.\n\t(*andn<mode>3_doubleword_bmi): New define_insn_and_split for\n\tTARGET_BMI that splits post-reload.\n\t(*andn<mode>3_doubleword): New define_insn_and_split for\n\t!TARGET_BMI, that lowers/splits before reload.\n\t(<any_or><mode>3): Use SDWIM mode iterator to add suppport for\n\tdouble word bit-wise XOR and bit-wise IOR in TImode.  Use\n\tforce_reg when double word immediate operand isn't\n\tx86_64_hilo_general_operand.\n\t(*<any_or>di3_doubleword): Generalized from <any_or>di3_doubleword.\n\t(one_cmpl<mode>2): Use SDWIM mode iterator to add support for\n\tdouble word bit-wise NOT in TImode.\n\t(one_cmpl<dwi>2_doubleword): Generalize from one_cmpldi2_doubleword\n\tand converted into a post-reload splitter.", "tree": {"sha": "5b968fa78a6c43e16787c63e5519c41d2739cab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b968fa78a6c43e16787c63e5519c41d2739cab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8a46e5cdab500eadffc0a11850d074498b3c2b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a46e5cdab500eadffc0a11850d074498b3c2b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a46e5cdab500eadffc0a11850d074498b3c2b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a46e5cdab500eadffc0a11850d074498b3c2b2/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90129d39ca0fc1d2ac9cf960379feccea878bd90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90129d39ca0fc1d2ac9cf960379feccea878bd90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90129d39ca0fc1d2ac9cf960379feccea878bd90"}], "stats": {"total": 201, "additions": 97, "deletions": 104}, "files": [{"sha": "646a556a8117e9afa1068540a2e5bd2739061911", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 97, "deletions": 104, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a46e5cdab500eadffc0a11850d074498b3c2b2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a46e5cdab500eadffc0a11850d074498b3c2b2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e8a46e5cdab500eadffc0a11850d074498b3c2b2", "patch": "@@ -1192,7 +1192,8 @@\n \t[(QI \"general_operand\")\n \t (HI \"general_operand\")\n \t (SI \"x86_64_szext_general_operand\")\n-\t (DI \"x86_64_szext_general_operand\")])\n+\t (DI \"x86_64_szext_general_operand\")\n+\t (TI \"x86_64_hilo_general_operand\")])\n \n (define_mode_attr nonmemory_szext_operand\n \t[(QI \"nonmemory_operand\")\n@@ -1509,7 +1510,7 @@\n (define_insn_and_split \"*cmp<dwi>_doubleword\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:<DWI> 0 \"nonimmediate_operand\")\n-\t\t     (match_operand:<DWI> 1 \"x86_64_general_operand\")))]\n+\t\t     (match_operand:<DWI> 1 \"x86_64_hilo_general_operand\")))]\n   \"ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n@@ -5802,7 +5803,12 @@\n   split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n   if (operands[2] == const0_rtx)\n     {\n-      ix86_expand_binary_operator (PLUS, <MODE>mode, &operands[3]);\n+      if (operands[5] != const0_rtx)\n+\tix86_expand_binary_operator (PLUS, <MODE>mode, &operands[3]);\n+      else if (!rtx_equal_p (operands[3], operands[4]))\n+\temit_move_insn (operands[3], operands[4]);\n+      else\n+\temit_note (NOTE_INSN_DELETED);\n       DONE;\n     }\n })\n@@ -9846,19 +9852,22 @@\n ;; it should be done with splitters.\n \n (define_expand \"and<mode>3\"\n-  [(set (match_operand:SWIM1248x 0 \"nonimmediate_operand\")\n-\t(and:SWIM1248x (match_operand:SWIM1248x 1 \"nonimmediate_operand\")\n-\t\t       (match_operand:SWIM1248x 2 \"<general_szext_operand>\")))]\n+  [(set (match_operand:SDWIM 0 \"nonimmediate_operand\")\n+\t(and:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\")\n+\t\t   (match_operand:SDWIM 2 \"<general_szext_operand>\")))]\n   \"\"\n {\n   machine_mode mode = <MODE>mode;\n \n-  if (<MODE>mode == DImode && !TARGET_64BIT)\n-    ;\n-  else if (const_int_operand (operands[2], <MODE>mode)\n-\t   && register_operand (operands[0], <MODE>mode)\n-\t   && !(TARGET_ZERO_EXTEND_WITH_AND\n-\t\t&& optimize_function_for_speed_p (cfun)))\n+  if (GET_MODE_SIZE (<MODE>mode) > UNITS_PER_WORD\n+      && !x86_64_hilo_general_operand (operands[2], <MODE>mode))\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n+\n+  if (GET_MODE_SIZE (<MODE>mode) <= UNITS_PER_WORD\n+      && const_int_operand (operands[2], <MODE>mode)\n+      && register_operand (operands[0], <MODE>mode)\n+      && !(TARGET_ZERO_EXTEND_WITH_AND\n+\t   && optimize_function_for_speed_p (cfun)))\n     {\n       unsigned HOST_WIDE_INT ival = UINTVAL (operands[2]);\n \n@@ -9880,34 +9889,37 @@\n   DONE;\n })\n \n-(define_insn_and_split \"*anddi3_doubleword\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n-\t(and:DI\n-\t (match_operand:DI 1 \"nonimmediate_operand\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\")))\n+(define_insn_and_split \"*and<dwi>3_doubleword\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+\t(and:<DWI>\n+\t (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\")\n+\t (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\n-   && ix86_binary_operator_ok (AND, DImode, operands)\n-   && ix86_pre_reload_split ()\"\n+  \"ix86_binary_operator_ok (AND, <DWI>mode, operands)\"\n   \"#\"\n-  \"&& 1\"\n-  [(const_int 0)]\n+  \"&& reload_completed\"\n+  [(const_int:DWIH 0)]\n {\n-  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n+  bool emit_insn_deleted_note_p = false;\n+\n+  split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n \n   if (operands[2] == const0_rtx)\n     emit_move_insn (operands[0], const0_rtx);\n   else if (operands[2] == constm1_rtx)\n-    emit_move_insn (operands[0], operands[1]);\n+    emit_insn_deleted_note_p = true;\n   else\n-    emit_insn (gen_andsi3 (operands[0], operands[1], operands[2]));\n+    ix86_expand_binary_operator (AND, <MODE>mode, &operands[0]);\n \n   if (operands[5] == const0_rtx)\n     emit_move_insn (operands[3], const0_rtx);\n   else if (operands[5] == constm1_rtx)\n-    emit_move_insn (operands[3], operands[4]);\n+    {\n+      if (emit_insn_deleted_note_p)\n+\temit_note (NOTE_INSN_DELETED);\n+    }\n   else\n-    emit_insn (gen_andsi3 (operands[3], operands[4], operands[5]));\n+    ix86_expand_binary_operator (AND, <MODE>mode, &operands[3]);\n \n   DONE;\n })\n@@ -10391,54 +10403,38 @@\n   operands[2] = gen_int_mode (INTVAL (operands[2]), QImode);\n })\n \n-(define_insn \"*andndi3_doubleword\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(and:DI\n-\t  (not:DI (match_operand:DI 1 \"register_operand\"))\n-\t  (match_operand:DI 2 \"nonimmediate_operand\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n-   && ix86_pre_reload_split ()\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(and:DI\n-\t  (not:DI (match_operand:DI 1 \"register_operand\"))\n-\t  (match_operand:DI 2 \"nonimmediate_operand\")))\n+(define_insn_and_split \"*andn<mode>3_doubleword_bmi\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\")\n+\t(and:<DWI>\n+\t  (not:<DWI> (match_operand:<DWI> 1 \"register_operand\"))\n+\t  (match_operand:<DWI> 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && TARGET_BMI && TARGET_STV && TARGET_SSE2\n-   && can_create_pseudo_p ()\"\n+  \"TARGET_BMI\"\n+  \"#\"\n+  \"&& reload_completed\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (and:SI (not:SI (match_dup 1)) (match_dup 2)))\n+\t\t   (and:DWIH (not:DWIH (match_dup 1)) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (parallel [(set (match_dup 3)\n-\t\t   (and:SI (not:SI (match_dup 4)) (match_dup 5)))\n+\t\t   (and:DWIH (not:DWIH (match_dup 4)) (match_dup 5)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\")\n+  \"split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\")\n \n-(define_split\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(and:DI\n-\t  (not:DI (match_operand:DI 1 \"register_operand\"))\n-\t  (match_operand:DI 2 \"nonimmediate_operand\")))\n+(define_insn_and_split \"*andn<mode>3_doubleword\"\n+  [(set (match_operand:DWI 0 \"register_operand\")\n+\t(and:DWI\n+\t  (not:DWI (match_operand:DWI 1 \"register_operand\"))\n+\t  (match_operand:DWI 2 \"nonimmediate_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && !TARGET_BMI && TARGET_STV && TARGET_SSE2\n-   && can_create_pseudo_p ()\"\n-  [(set (match_dup 6) (not:SI (match_dup 1)))\n+  \"!TARGET_BMI\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 3) (not:DWI (match_dup 1)))\n    (parallel [(set (match_dup 0)\n-\t\t   (and:SI (match_dup 6) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])\n-   (set (match_dup 7) (not:SI (match_dup 4)))\n-   (parallel [(set (match_dup 3)\n-\t\t   (and:SI (match_dup 7) (match_dup 5)))\n+\t\t   (and:DWI (match_dup 3) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-{\n-  operands[6] = gen_reg_rtx (SImode);\n-  operands[7] = gen_reg_rtx (SImode);\n-\n-  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n-})\n+  \"operands[3] = gen_reg_rtx (<MODE>mode);\")\n \n (define_insn \"*andn<mode>_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r,?k\")\n@@ -10532,63 +10528,62 @@\n ;; If this is considered useful, it should be done with splitters.\n \n (define_expand \"<code><mode>3\"\n-  [(set (match_operand:SWIM1248x 0 \"nonimmediate_operand\")\n-\t(any_or:SWIM1248x (match_operand:SWIM1248x 1 \"nonimmediate_operand\")\n-\t\t\t  (match_operand:SWIM1248x 2 \"<general_operand>\")))]\n+  [(set (match_operand:SDWIM 0 \"nonimmediate_operand\")\n+\t(any_or:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\")\n+\t\t      (match_operand:SDWIM 2 \"<general_operand>\")))]\n   \"\"\n-  \"ix86_expand_binary_operator (<CODE>, <MODE>mode, operands); DONE;\")\n+{\n+  if (GET_MODE_SIZE (<MODE>mode) > UNITS_PER_WORD\n+      && !x86_64_hilo_general_operand (operands[2], <MODE>mode))\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n \n-(define_insn_and_split \"*<code>di3_doubleword\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro,r\")\n-\t(any_or:DI\n-\t (match_operand:DI 1 \"nonimmediate_operand\" \"0,0\")\n-\t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"re,o\")))\n+  ix86_expand_binary_operator (<CODE>, <MODE>mode, operands);\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*<code><mode>3_doubleword\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro,r\")\n+\t(any_or:<DWI>\n+\t (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0,0\")\n+\t (match_operand:<DWI> 2 \"x86_64_hilo_general_operand\" \"r<di>,o\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\n-   && ix86_binary_operator_ok (<CODE>, DImode, operands)\"\n+  \"ix86_binary_operator_ok (<CODE>, <DWI>mode, operands)\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(const_int 0)]\n+  [(const_int:DWIH 0)]\n {\n   /* This insn may disappear completely when operands[2] == const0_rtx\n      and operands[0] == operands[1], which requires a NOTE_INSN_DELETED.  */\n   bool emit_insn_deleted_note_p = false;\n \n-  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n+  split_double_mode (<DWI>mode, &operands[0], 3, &operands[0], &operands[3]);\n \n   if (operands[2] == const0_rtx)\n-    {\n-      if (!rtx_equal_p (operands[0], operands[1]))\n-\temit_move_insn (operands[0], operands[1]);\n-      else\n-\temit_insn_deleted_note_p = true;\n-    }\n+    emit_insn_deleted_note_p = true;\n   else if (operands[2] == constm1_rtx)\n     {\n       if (<CODE> == IOR)\n \temit_move_insn (operands[0], constm1_rtx);\n       else\n-\tix86_expand_unary_operator (NOT, SImode, &operands[0]);\n+\tix86_expand_unary_operator (NOT, <MODE>mode, &operands[0]);\n     }\n   else\n-    ix86_expand_binary_operator (<CODE>, SImode, &operands[0]);\n+    ix86_expand_binary_operator (<CODE>, <MODE>mode, &operands[0]);\n \n   if (operands[5] == const0_rtx)\n     {\n-      if (!rtx_equal_p (operands[3], operands[4]))\n-\temit_move_insn (operands[3], operands[4]);\n-      else if (emit_insn_deleted_note_p)\n+      if (emit_insn_deleted_note_p)\n \temit_note (NOTE_INSN_DELETED);\n     }\n   else if (operands[5] == constm1_rtx)\n     {\n       if (<CODE> == IOR)\n \temit_move_insn (operands[3], constm1_rtx);\n       else\n-\tix86_expand_unary_operator (NOT, SImode, &operands[3]);\n+\tix86_expand_unary_operator (NOT, <MODE>mode, &operands[3]);\n     }\n   else\n-    ix86_expand_binary_operator (<CODE>, SImode, &operands[3]);\n+    ix86_expand_binary_operator (<CODE>, <MODE>mode, &operands[3]);\n \n   DONE;\n })\n@@ -11727,24 +11722,22 @@\n ;; One complement instructions\n \n (define_expand \"one_cmpl<mode>2\"\n-  [(set (match_operand:SWIM1248x 0 \"nonimmediate_operand\")\n-\t(not:SWIM1248x (match_operand:SWIM1248x 1 \"nonimmediate_operand\")))]\n+  [(set (match_operand:SDWIM 0 \"nonimmediate_operand\")\n+\t(not:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\")))]\n   \"\"\n   \"ix86_expand_unary_operator (NOT, <MODE>mode, operands); DONE;\")\n \n-(define_insn_and_split \"*one_cmpldi2_doubleword\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n-\t(not:DI (match_operand:DI 1 \"nonimmediate_operand\")))]\n-  \"!TARGET_64BIT\n-   && ix86_unary_operator_ok (NOT, DImode, operands)\n-   && ix86_pre_reload_split ()\"\n+(define_insn_and_split \"*one_cmpl<dwi>2_doubleword\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(not:<DWI> (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0\")))]\n+  \"ix86_unary_operator_ok (NOT, <DWI>mode, operands)\"\n   \"#\"\n-  \"&& 1\"\n+  \"&& reload_completed\"\n   [(set (match_dup 0)\n-\t(not:SI (match_dup 1)))\n+\t(not:DWIH (match_dup 1)))\n    (set (match_dup 2)\n-\t(not:SI (match_dup 3)))]\n-  \"split_double_mode (DImode, &operands[0], 2, &operands[0], &operands[2]);\")\n+\t(not:DWIH (match_dup 3)))]\n+  \"split_double_mode (<DWI>mode, &operands[0], 2, &operands[0], &operands[2]);\")\n \n (define_insn \"*one_cmpl<mode>2_1\"\n   [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm,?k\")"}]}