{"sha": "fc5f8d746362a42adc52e538dec248bd2992a794", "node_id": "C_kwDOANBUbNoAKGZjNWY4ZDc0NjM2MmE0MmFkYzUyZTUzOGRlYzI0OGJkMjk5MmE3OTQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-02T11:48:06Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-02T11:48:06Z"}, "message": "Default type checking on CallExpr's to TyTy::ErrorType\n\nIt is ok for type checking to error/fail on a construct within the crate,\nwe can try our best to continue on to find as many errors as possible. To\nachieve this without running into nullptr's we can use the ErrorType node\nto signify an error. This also cleans up alot of noise in our error\nhandling.", "tree": {"sha": "c49825727c7726769f7226e3ed8b3697192cb7d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c49825727c7726769f7226e3ed8b3697192cb7d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc5f8d746362a42adc52e538dec248bd2992a794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5f8d746362a42adc52e538dec248bd2992a794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5f8d746362a42adc52e538dec248bd2992a794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5f8d746362a42adc52e538dec248bd2992a794/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3defa10bc63ba3f81da00fc322b5b1e0d1717ed"}], "stats": {"total": 13, "additions": 2, "deletions": 11}, "files": [{"sha": "c11fd4d6da6b3adebe9567924ff3009da1cecae7", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=fc5f8d746362a42adc52e538dec248bd2992a794", "patch": "@@ -71,7 +71,8 @@ class TypeCheckCallExpr : private TyVisitor\n private:\n   TypeCheckCallExpr (HIR::CallExpr &c, TyTy::VariantDef &variant,\n \t\t     Resolver::TypeCheckContext *context)\n-    : resolved (nullptr), call (c), variant (variant), context (context),\n+    : resolved (new TyTy::ErrorType (c.get_mappings ().get_hirid ())), call (c),\n+      variant (variant), context (context),\n       mappings (Analysis::Mappings::get ())\n   {}\n "}, {"sha": "0b8d999fec172310a7b14eb6634b43d9348e419d", "filename": "gcc/testsuite/rust/compile/func2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc2.rs?ref=fc5f8d746362a42adc52e538dec248bd2992a794", "patch": "@@ -4,6 +4,4 @@ fn test(a: i32, b: i32) -> i32 {\n \n fn main() {\n     let a = test(1); // { dg-error \"unexpected number of arguments 1 expected 2\" }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "2a329476118748293b6244330a2f5ce859cf3d8e", "filename": "gcc/testsuite/rust/compile/func3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc3.rs?ref=fc5f8d746362a42adc52e538dec248bd2992a794", "patch": "@@ -6,6 +6,4 @@ fn main() {\n     let a = test(1, true);\n     // { dg-error \"expected .i32. got .bool.\" \"\" { target *-*-* } .-1 }\n     // { dg-error \"Type Resolution failure on parameter\" \"\" { target *-*-* } .-2 }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-3 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-4 }\n }"}, {"sha": "2f4cb4a353bba5bb9a55384bc9fa2ceb87f32a0f", "filename": "gcc/testsuite/rust/compile/tuple_struct1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct1.rs?ref=fc5f8d746362a42adc52e538dec248bd2992a794", "patch": "@@ -5,6 +5,4 @@ struct Foo {\n \n fn main() {\n     let a = Foo(1, 2); // { dg-error \"expected function, tuple struct or tuple variant, found struct 'Foo'\" }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "1fc1896857738fd43ef1c4dad61dc6dc7310eae3", "filename": "gcc/testsuite/rust/compile/tuple_struct2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct2.rs?ref=fc5f8d746362a42adc52e538dec248bd2992a794", "patch": "@@ -2,6 +2,4 @@ struct Bar(i32, i32, bool);\n \n fn main() {\n     let a = Bar(1, 2); // { dg-error \"unexpected number of arguments 2 expected 3\" }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "4af66b8370e23e59e4d01af8bce7bf0a1e74f6c1", "filename": "gcc/testsuite/rust/compile/tuple_struct3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc5f8d746362a42adc52e538dec248bd2992a794/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct3.rs?ref=fc5f8d746362a42adc52e538dec248bd2992a794", "patch": "@@ -3,6 +3,4 @@ struct Foo(i32, i32, bool);\n fn main() {\n     let c = Foo(1, 2f32, true);\n     // { dg-error \"expected .i32. got .f32.\" \"\" { target *-*-* } .-1 }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-2 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-3 }\n }"}]}