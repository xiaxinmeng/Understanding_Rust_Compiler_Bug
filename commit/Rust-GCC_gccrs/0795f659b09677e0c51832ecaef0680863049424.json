{"sha": "0795f659b09677e0c51832ecaef0680863049424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5NWY2NTliMDk2NzdlMGM1MTgzMmVjYWVmMDY4MDg2MzA0OTQyNA==", "commit": {"author": {"name": "Vlad Lazar", "email": "vlad.lazar@arm.com", "date": "2018-09-13T09:36:58Z"}, "committer": {"name": "Vlad Lazar", "email": "vladlazar@gcc.gnu.org", "date": "2018-09-13T09:36:58Z"}, "message": "[AArch64] Add support for TARGET_COMPUTE_FRAME_LAYOUT\n\nThe patch adds support for the TARGET_COMPUTE_FRAME_LAYOUT hook on AArch64\nand removes unneeded frame layout recalculation.\n\n2018-09-13  Vlad Lazar  <vlad.lazar@arm.com>\n\n\t* config/aarch64/aarch64.h (TARGET_COMPUTE_FRAME_LAYOUT): Define.\n\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Remove\n\taarch64_layout_frame call.\n\t(aarch64_expand_epilogue): Likewise.\n\t(aarch64_initial_elimination_offset): Likewise.\n\t(aarch64_get_separate_components): Likewise.\n\t(aarch64_use_return_insn_p): Likewise.\n\t(aarch64_layout_frame): Remove unneeded check.\n\nFrom-SVN: r264263", "tree": {"sha": "fab0627e3c22f529120f6e8a8091e9197c69fb90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fab0627e3c22f529120f6e8a8091e9197c69fb90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0795f659b09677e0c51832ecaef0680863049424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0795f659b09677e0c51832ecaef0680863049424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0795f659b09677e0c51832ecaef0680863049424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0795f659b09677e0c51832ecaef0680863049424/comments", "author": null, "committer": null, "parents": [{"sha": "54de7d7dd08a28f1783ee7c99bf57b5ac93614ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54de7d7dd08a28f1783ee7c99bf57b5ac93614ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54de7d7dd08a28f1783ee7c99bf57b5ac93614ef"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "d9a383f90a8e68d55b13a6503df98353196cc9bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0795f659b09677e0c51832ecaef0680863049424/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0795f659b09677e0c51832ecaef0680863049424/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0795f659b09677e0c51832ecaef0680863049424", "patch": "@@ -1,3 +1,14 @@\n+2018-09-13  Vlad Lazar  <vlad.lazar@arm.com>\n+\n+\t* config/aarch64/aarch64.h (TARGET_COMPUTE_FRAME_LAYOUT): Define.\n+\t* config/aarch64/aarch64.c (aarch64_expand_prologue): Remove\n+\taarch64_layout_frame call. \n+\t(aarch64_expand_epilogue): Likewise.\n+\t(aarch64_initial_elimination_offset): Likewise.\n+\t(aarch64_get_separate_components): Likewise.\n+\t(aarch64_use_return_insn_p): Likewise.\n+\t(aarch64_layout_frame): Remove unneeded check.\n+\n 2018-09-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.ac: Only append"}, {"sha": "1240bed549731767cb98596fa57e168d629f4cd4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0795f659b09677e0c51832ecaef0680863049424/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0795f659b09677e0c51832ecaef0680863049424/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0795f659b09677e0c51832ecaef0680863049424", "patch": "@@ -3938,9 +3938,6 @@ aarch64_layout_frame (void)\n   HOST_WIDE_INT offset = 0;\n   int regno, last_fp_reg = INVALID_REGNUM;\n \n-  if (reload_completed && cfun->machine->frame.laid_out)\n-    return;\n-\n   cfun->machine->frame.emit_frame_chain = aarch64_needs_frame_chain ();\n \n #define SLOT_NOT_REQUIRED (-2)\n@@ -4484,8 +4481,6 @@ offset_12bit_unsigned_scaled_p (machine_mode mode, poly_int64 offset)\n static sbitmap\n aarch64_get_separate_components (void)\n {\n-  aarch64_layout_frame ();\n-\n   sbitmap components = sbitmap_alloc (LAST_SAVED_REGNUM + 1);\n   bitmap_clear (components);\n \n@@ -4509,7 +4504,7 @@ aarch64_get_separate_components (void)\n \n   unsigned reg1 = cfun->machine->frame.wb_candidate1;\n   unsigned reg2 = cfun->machine->frame.wb_candidate2;\n-  /* If aarch64_layout_frame has chosen registers to store/restore with\n+  /* If registers have been chosen to be stored/restored with\n      writeback don't interfere with them to avoid having to output explicit\n      stack adjustment instructions.  */\n   if (reg2 != INVALID_REGNUM)\n@@ -4767,8 +4762,6 @@ aarch64_add_cfa_expression (rtx_insn *insn, unsigned int reg,\n void\n aarch64_expand_prologue (void)\n {\n-  aarch64_layout_frame ();\n-\n   poly_int64 frame_size = cfun->machine->frame.frame_size;\n   poly_int64 initial_adjust = cfun->machine->frame.initial_adjust;\n   HOST_WIDE_INT callee_adjust = cfun->machine->frame.callee_adjust;\n@@ -4881,8 +4874,6 @@ aarch64_use_return_insn_p (void)\n   if (crtl->profile)\n     return false;\n \n-  aarch64_layout_frame ();\n-\n   return known_eq (cfun->machine->frame.frame_size, 0);\n }\n \n@@ -4894,8 +4885,6 @@ aarch64_use_return_insn_p (void)\n void\n aarch64_expand_epilogue (bool for_sibcall)\n {\n-  aarch64_layout_frame ();\n-\n   poly_int64 initial_adjust = cfun->machine->frame.initial_adjust;\n   HOST_WIDE_INT callee_adjust = cfun->machine->frame.callee_adjust;\n   poly_int64 final_adjust = cfun->machine->frame.final_adjust;\n@@ -7414,8 +7403,6 @@ aarch64_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n poly_int64\n aarch64_initial_elimination_offset (unsigned from, unsigned to)\n {\n-  aarch64_layout_frame ();\n-\n   if (to == HARD_FRAME_POINTER_REGNUM)\n     {\n       if (from == ARG_POINTER_REGNUM)"}, {"sha": "5c5a2268de98f4cbaaba7e198209d8949ad15062", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0795f659b09677e0c51832ecaef0680863049424/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0795f659b09677e0c51832ecaef0680863049424/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=0795f659b09677e0c51832ecaef0680863049424", "patch": "@@ -480,6 +480,9 @@ extern unsigned aarch64_architecture_version;\n #undef DONT_USE_BUILTIN_SETJMP\n #define DONT_USE_BUILTIN_SETJMP 1\n \n+#undef TARGET_COMPUTE_FRAME_LAYOUT\n+#define TARGET_COMPUTE_FRAME_LAYOUT aarch64_layout_frame\n+\n /* Register in which the structure value is to be returned.  */\n #define AARCH64_STRUCT_VALUE_REGNUM R8_REGNUM\n "}]}