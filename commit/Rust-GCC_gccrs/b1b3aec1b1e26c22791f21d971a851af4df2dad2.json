{"sha": "b1b3aec1b1e26c22791f21d971a851af4df2dad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFiM2FlYzFiMWUyNmMyMjc5MWYyMWQ5NzFhODUxYWY0ZGYyZGFkMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-23T23:55:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-23T23:55:31Z"}, "message": "compiler: Give an error if a variable is defined but not used.\n\nFrom-SVN: r183458", "tree": {"sha": "ed963d480affb07d364c84b0b56a97f7bb92427b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed963d480affb07d364c84b0b56a97f7bb92427b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1b3aec1b1e26c22791f21d971a851af4df2dad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b3aec1b1e26c22791f21d971a851af4df2dad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b3aec1b1e26c22791f21d971a851af4df2dad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b3aec1b1e26c22791f21d971a851af4df2dad2/comments", "author": null, "committer": null, "parents": [{"sha": "8bae34da8a4625767bc7e1caab295855963ff280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bae34da8a4625767bc7e1caab295855963ff280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bae34da8a4625767bc7e1caab295855963ff280"}], "stats": {"total": 191, "additions": 169, "deletions": 22}, "files": [{"sha": "ebecbbde2000376b0d8d26aa05f28698bb16f650", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -1472,6 +1472,7 @@ Unknown_expression::do_lower(Gogo*, Named_object*, Statement_inserter*, int)\n \t       real->message_name().c_str());\n       return Expression::make_error(location);\n     case Named_object::NAMED_OBJECT_VAR:\n+      real->var_value()->set_is_used();\n       return Expression::make_var_reference(real, location);\n     case Named_object::NAMED_OBJECT_FUNC:\n     case Named_object::NAMED_OBJECT_FUNC_DECLARATION:"}, {"sha": "61d1bd8c116e22620db5f482e26faa0bcede053c", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -1036,6 +1036,23 @@ Gogo::add_named_object(Named_object* no)\n   this->current_bindings()->add_named_object(no);\n }\n \n+// Mark all local variables used.  This is used when some types of\n+// parse error occur.\n+\n+void\n+Gogo::mark_locals_used()\n+{\n+  for (Open_functions::iterator pf = this->functions_.begin();\n+       pf != this->functions_.end();\n+       ++pf)\n+    {\n+      for (std::vector<Block*>::iterator pb = pf->blocks.begin();\n+\t   pb != pf->blocks.end();\n+\t   ++pb)\n+\t(*pb)->bindings()->mark_locals_used();\n+    }\n+}\n+\n // Record that we've seen an interface type.\n \n void\n@@ -1731,6 +1748,15 @@ Check_types_traverse::variable(Named_object* named_object)\n \t\t     reason.c_str());\n \t  var->clear_init();\n \t}\n+      else if (!var->is_used()\n+\t       && !var->is_global()\n+\t       && !var->is_parameter()\n+\t       && !var->is_receiver()\n+\t       && !var->type()->is_error()\n+\t       && (init == NULL || !init->is_error_expression())\n+\t       && !Lex::is_invalid_identifier(named_object->name()))\n+\terror_at(var->location(), \"%qs declared and not used\",\n+\t\t named_object->message_name().c_str());\n     }\n   return TRAVERSE_CONTINUE;\n }\n@@ -2973,6 +2999,7 @@ Function::closure_var()\n       Type* struct_type = Type::make_struct_type(sfl, loc);\n       Variable* var = new Variable(Type::make_pointer_type(struct_type),\n \t\t\t\t   NULL, false, true, false, loc);\n+      var->set_is_used();\n       this->closure_var_ = Named_object::make_variable(\"closure\", NULL, var);\n       // Note that the new variable is not in any binding contour.\n     }\n@@ -3693,7 +3720,7 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n \t\t   Location location)\n   : type_(type), init_(init), preinit_(NULL), location_(location),\n     backend_(NULL), is_global_(is_global), is_parameter_(is_parameter),\n-    is_receiver_(is_receiver), is_varargs_parameter_(false),\n+    is_receiver_(is_receiver), is_varargs_parameter_(false), is_used_(false),\n     is_address_taken_(false), is_non_escaping_address_taken_(false),\n     seen_(false), init_is_lowered_(false), type_from_init_tuple_(false),\n     type_from_range_index_(false), type_from_range_value_(false),\n@@ -4877,6 +4904,19 @@ Bindings::define_type(Named_object* no, Named_type* type)\n   this->named_objects_.push_back(no);\n }\n \n+// Mark all local variables as used.  This is used for some types of\n+// parse error.\n+\n+void\n+Bindings::mark_locals_used()\n+{\n+  for (std::vector<Named_object*>::iterator p = this->named_objects_.begin();\n+       p != this->named_objects_.end();\n+       ++p)\n+    if ((*p)->is_variable())\n+      (*p)->var_value()->set_is_used();\n+}\n+\n // Traverse bindings.\n \n int"}, {"sha": "dfaa596b31862e2f591605c6e69a86318a3cad79", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -344,6 +344,11 @@ class Gogo\n   void\n   add_named_object(Named_object*);\n \n+  // Mark all local variables in current bindings as used.  This is\n+  // used when there is a parse error to avoid useless errors.\n+  void\n+  mark_locals_used();\n+\n   // Return a name to use for a thunk function.  A thunk function is\n   // one we create during the compilation, for a go statement or a\n   // defer statement or a method expression.\n@@ -1232,6 +1237,16 @@ class Variable\n     this->is_varargs_parameter_ = true;\n   }\n \n+  // Return whether the variable has been used.\n+  bool\n+  is_used() const\n+  { return this->is_used_; }\n+\n+  // Mark that the variable has been used.\n+  void\n+  set_is_used()\n+  { this->is_used_ = true; }\n+\n   // Clear the initial value; used for error handling.\n   void\n   clear_init()\n@@ -1368,6 +1383,8 @@ class Variable\n   bool is_receiver_ : 1;\n   // Whether this is the varargs parameter of a function.\n   bool is_varargs_parameter_ : 1;\n+  // Whether this variable is ever referenced.\n+  bool is_used_ : 1;\n   // Whether something takes the address of this variable.  For a\n   // local variable this implies that the variable has to be on the\n   // heap.\n@@ -2124,6 +2141,11 @@ class Bindings\n   void\n   remove_binding(Named_object*);\n \n+  // Mark all variables as used.  This is used for some types of parse\n+  // error.\n+  void\n+  mark_locals_used();\n+\n   // Traverse the tree.  See the Traverse class.\n   int\n   traverse(Traverse*, bool is_global);"}, {"sha": "d46334f17a7b014d600e67c9164504e5bb2e381c", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -866,6 +866,7 @@ Lex::gather_identifier()\n \t  this->lineoff_ = p - this->linebuf_;\n \t  const char* pnext = this->advance_one_utf8_char(p, &ci,\n \t\t\t\t\t\t\t  &issued_error);\n+\t  bool is_invalid = false;\n \t  if (!Lex::is_unicode_letter(ci) && !Lex::is_unicode_digit(ci))\n \t    {\n \t      // There is no valid place for a non-ASCII character\n@@ -876,6 +877,7 @@ Lex::gather_identifier()\n \t\terror_at(this->location(),\n \t\t\t \"invalid character 0x%x in identifier\",\n \t\t\t ci);\n+\t      is_invalid = true;\n \t    }\n \t  if (is_first)\n \t    {\n@@ -887,6 +889,8 @@ Lex::gather_identifier()\n \t      buf.assign(pstart, p - pstart);\n \t      has_non_ascii_char = true;\n \t    }\n+\t  if (is_invalid && !Lex::is_invalid_identifier(buf))\n+\t    buf.append(\"$INVALID$\");\n \t  p = pnext;\n \t  char ubuf[50];\n \t  // This assumes that all assemblers can handle an identifier\n@@ -2312,3 +2316,13 @@ Lex::is_exported_name(const std::string& name)\n       return Lex::is_unicode_uppercase(ci);\n     }\n }\n+\n+// Return whether the identifier NAME contains an invalid character.\n+// This is based on how we handle invalid characters in\n+// gather_identifier.\n+\n+bool\n+Lex::is_invalid_identifier(const std::string& name)\n+{\n+  return name.find(\"$INVALID$\") != std::string::npos;\n+}"}, {"sha": "b184b1e92692eacc9b502dca89aa3150647ad9db", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -349,6 +349,13 @@ class Lex\n   static bool\n   is_exported_name(const std::string& name);\n \n+  // Return whether the identifier NAME is invalid.  When we see an\n+  // invalid character we still build an identifier, but we use a\n+  // magic string to indicate that the identifier is invalid.  We then\n+  // use this to avoid knockon errors.\n+  static bool\n+  is_invalid_identifier(const std::string& name);\n+\n   // A helper function.  Append V to STR.  IS_CHARACTER is true if V\n   // is a Unicode character which should be converted into UTF-8,\n   // false if it is a byte value to be appended directly.  The"}, {"sha": "35af75854725cc3e0f4ecf54f4a048a317e5c0cb", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -49,7 +49,8 @@ Parse::Parse(Lex* lex, Gogo* gogo)\n     break_stack_(NULL),\n     continue_stack_(NULL),\n     iota_(0),\n-    enclosing_vars_()\n+    enclosing_vars_(),\n+    type_switch_vars_()\n {\n }\n \n@@ -539,6 +540,7 @@ Parse::field_decl(Struct_field_list* sfl)\n   else\n     {\n       error_at(this->location(), \"expected field name\");\n+      this->gogo_->mark_locals_used();\n       while (!token->is_op(OPERATOR_SEMICOLON)\n \t     && !token->is_op(OPERATOR_RCURLY)\n \t     && !token->is_eof())\n@@ -554,6 +556,7 @@ Parse::field_decl(Struct_field_list* sfl)\n \t  if (!this->peek_token()->is_identifier())\n \t    {\n \t      error_at(this->location(), \"expected field name\");\n+\t      this->gogo_->mark_locals_used();\n \t      while (!token->is_op(OPERATOR_SEMICOLON)\n \t\t     && !token->is_op(OPERATOR_RCURLY)\n \t\t     && !token->is_eof())\n@@ -1123,6 +1126,8 @@ Parse::block()\n \t  if (!token->is_eof() || !saw_errors())\n \t    error_at(this->location(), \"expected %<}%>\");\n \n+\t  this->gogo_->mark_locals_used();\n+\n \t  // Skip ahead to the end of the block, in hopes of avoiding\n \t  // lots of meaningless errors.\n \t  Location ret = token->location();\n@@ -1249,6 +1254,7 @@ Parse::method_spec(Typed_identifier_list* methods)\n \t\t     \"name list not allowed in interface type\");\n \t  else\n \t    error_at(location, \"expected signature or type name\");\n+\t  this->gogo_->mark_locals_used();\n \t  token = this->peek_token();\n \t  while (!token->is_eof()\n \t\t && !token->is_op(OPERATOR_SEMICOLON)\n@@ -1498,6 +1504,7 @@ Parse::type_spec(void*)\n \n   if (type->is_error_type())\n     {\n+      this->gogo_->mark_locals_used();\n       while (!this->peek_token()->is_op(OPERATOR_SEMICOLON)\n \t     && !this->peek_token()->is_eof())\n \tthis->advance_token();\n@@ -1558,6 +1565,7 @@ Parse::var_spec(void*)\n       type = this->type();\n       if (type->is_error_type())\n \t{\n+\t  this->gogo_->mark_locals_used();\n \t  while (!this->peek_token()->is_op(OPERATOR_EQ)\n \t\t && !this->peek_token()->is_op(OPERATOR_SEMICOLON)\n \t\t && !this->peek_token()->is_eof())\n@@ -1894,6 +1902,7 @@ Parse::init_var(const Typed_identifier& tid, Type* type, Expression* init,\n \t      // initializer can be assigned to the type.\n \t      Variable* var = new Variable(type, init, false, false, false,\n \t\t\t\t\t   location);\n+\t      var->set_is_used();\n \t      static int count;\n \t      char buf[30];\n \t      snprintf(buf, sizeof buf, \"sink$%d\", count);\n@@ -2188,6 +2197,7 @@ Parse::receiver()\n       if (!token->is_identifier())\n \t{\n \t  error_at(this->location(), \"method has no receiver\");\n+\t  this->gogo_->mark_locals_used();\n \t  while (!token->is_eof() && !token->is_op(OPERATOR_RPAREN))\n \t    token = this->advance_token();\n \t  if (!token->is_eof())\n@@ -2227,6 +2237,7 @@ Parse::receiver()\n   if (!token->is_identifier())\n     {\n       error_at(this->location(), \"expected receiver name or type\");\n+      this->gogo_->mark_locals_used();\n       int c = token->is_op(OPERATOR_LPAREN) ? 1 : 0;\n       while (!token->is_eof())\n \t{\n@@ -2258,6 +2269,7 @@ Parse::receiver()\n \terror_at(this->location(), \"method has multiple receivers\");\n       else\n \terror_at(this->location(), \"expected %<)%>\");\n+      this->gogo_->mark_locals_used();\n       while (!token->is_eof() && !token->is_op(OPERATOR_RPAREN))\n \ttoken = this->advance_token();\n       if (!token->is_eof())\n@@ -2365,6 +2377,7 @@ Parse::operand(bool may_be_sink)\n \t    }\n \t  case Named_object::NAMED_OBJECT_VAR:\n \t  case Named_object::NAMED_OBJECT_RESULT_VAR:\n+\t    this->mark_var_used(named_object);\n \t    return Expression::make_var_reference(named_object, location);\n \t  case Named_object::NAMED_OBJECT_SINK:\n \t    if (may_be_sink)\n@@ -2477,6 +2490,8 @@ Parse::enclosing_var_reference(Named_object* in_function, Named_object* var,\n {\n   go_assert(var->is_variable() || var->is_result_variable());\n \n+  this->mark_var_used(var);\n+\n   Named_object* this_function = this->gogo_->current_function();\n   Named_object* closure = this_function->func_value()->closure_var();\n \n@@ -2648,6 +2663,7 @@ Parse::composite_lit(Type* type, int depth, Location location)\n \t{\n \t  error_at(this->location(), \"expected %<,%> or %<}%>\");\n \n+\t  this->gogo_->mark_locals_used();\n \t  int depth = 0;\n \t  while (!token->is_eof()\n \t\t && (depth > 0 || !token->is_op(OPERATOR_RCURLY)))\n@@ -3019,6 +3035,7 @@ Parse::id_to_expression(const std::string& name, Location location)\n       return Expression::make_const_reference(named_object, location);\n     case Named_object::NAMED_OBJECT_VAR:\n     case Named_object::NAMED_OBJECT_RESULT_VAR:\n+      this->mark_var_used(named_object);\n       return Expression::make_var_reference(named_object, location);\n     case Named_object::NAMED_OBJECT_SINK:\n       return Expression::make_sink(location);\n@@ -3534,6 +3551,7 @@ Parse::simple_stat(bool may_be_composite_lit, bool* return_exp,\n \t{\n \t  if (!exp->is_error_expression())\n \t    error_at(token->location(), \"non-name on left side of %<:=%>\");\n+\t  this->gogo_->mark_locals_used();\n \t  while (!token->is_op(OPERATOR_SEMICOLON)\n \t\t && !token->is_eof())\n \t    token = this->advance_token();\n@@ -4287,7 +4305,15 @@ Parse::type_case_clause(Named_object* switch_no, Type_case_clauses* clauses,\n \t  Variable* v = new Variable(type, init, false, false, false,\n \t\t\t\t     location);\n \t  v->set_is_type_switch_var();\n-\t  this->gogo_->add_variable(switch_no->name(), v);\n+\t  Named_object* no = this->gogo_->add_variable(switch_no->name(), v);\n+\n+\t  // We don't want to issue an error if the compiler\n+\t  // introduced special variable is not used.  Instead we want\n+\t  // to issue an error if the variable defined by the switch\n+\t  // is not used.  That is handled via type_switch_vars_ and\n+\t  // Parse::mark_var_used.\n+\t  v->set_is_used();\n+\t  this->type_switch_vars_[no] = switch_no;\n \t}\n       this->statement_list();\n       statements = this->gogo_->finish_block(this->location());\n@@ -4343,6 +4369,7 @@ Parse::type_switch_case(std::vector<Type*>* types, bool* is_default)\n \t    types->push_back(t);\n \t  else\n \t    {\n+\t      this->gogo_->mark_locals_used();\n \t      token = this->peek_token();\n \t      while (!token->is_op(OPERATOR_COLON)\n \t\t     && !token->is_op(OPERATOR_COMMA)\n@@ -5209,6 +5236,7 @@ Parse::program()\n       else\n \t{\n \t  error_at(this->location(), \"expected declaration\");\n+\t  this->gogo_->mark_locals_used();\n \t  do\n \t    this->advance_token();\n \t  while (!this->peek_token()->is_eof()\n@@ -5267,6 +5295,7 @@ Parse::increment_iota()\n bool\n Parse::skip_past_error(Operator op)\n {\n+  this->gogo_->mark_locals_used();\n   const Token* token = this->peek_token();\n   while (!token->is_op(op))\n     {\n@@ -5294,3 +5323,22 @@ Parse::verify_not_sink(Expression* expr)\n     }\n   return expr;\n }\n+\n+// Mark a variable as used.\n+\n+void\n+Parse::mark_var_used(Named_object* no)\n+{\n+  if (no->is_variable())\n+    {\n+      no->var_value()->set_is_used();\n+\n+      // When a type switch uses := to define a variable, then for\n+      // each case with a single type we introduce a new variable with\n+      // the appropriate type.  When we do, if the newly introduced\n+      // variable is used, then the type switch variable is used.\n+      Type_switch_vars::iterator p = this->type_switch_vars_.find(no);\n+      if (p != this->type_switch_vars_.end())\n+\tp->second->var_value()->set_is_used();\n+    }\n+}"}, {"sha": "f45aa854d9b0d2b51f839896703572daa97d4da0", "filename": "gcc/go/gofrontend/parse.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Fgo%2Fgofrontend%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.h?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -155,6 +155,11 @@ class Parse\n   // break or continue statement with no label.\n   typedef std::vector<std::pair<Statement*, Label*> > Bc_stack;\n \n+  // Map from type switch variables to the variables they mask, so\n+  // that a use of the type switch variable can become a use of the\n+  // real variable.\n+  typedef Unordered_map(Named_object*, Named_object*) Type_switch_vars;\n+\n   // Parser nonterminals.\n   void identifier_list(Typed_identifier_list*);\n   Expression_list* expression_list(Expression*, bool may_be_sink);\n@@ -288,6 +293,10 @@ class Parse\n   Statement*\n   find_bc_statement(const Bc_stack*, const std::string&) const;\n \n+  // Mark a variable as used.\n+  void\n+  mark_var_used(Named_object*);\n+\n   // The lexer output we are parsing.\n   Lex* lex_;\n   // The current token.\n@@ -307,6 +316,8 @@ class Parse\n   // References from the local function to variables defined in\n   // enclosing functions.\n   Enclosing_vars enclosing_vars_;\n+  // Map from type switch variables to real variables.\n+  Type_switch_vars type_switch_vars_;\n };\n \n "}, {"sha": "bcc78466dc2094112fb52e33e6d3acf2babee679", "filename": "gcc/testsuite/go.test/test/blank1.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -9,4 +9,5 @@ package _\t// ERROR \"invalid package name _\"\n func main() {\n \t_()\t// ERROR \"cannot use _ as value\"\n \tx := _+1\t// ERROR \"cannot use _ as value\"\n+\t_ = x\n }"}, {"sha": "38a6e51abcb3ae5733c294b20e913dcd06295e0f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug014.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug014.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug014.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug014.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -11,4 +11,5 @@ func main() {\n \tvar c01 uint8 = '\\07';  // ERROR \"oct|char\"\n \tvar cx0 uint8 = '\\x0';  // ERROR \"hex|char\"\n \tvar cx1 uint8 = '\\x';  // ERROR \"hex|char\"\n+\t_, _, _, _ = c00, c01, cx0, cx1\n }"}, {"sha": "10e406de6ea1611949b83635e93d9ca6a764bec7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug108.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug108.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug108.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug108.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -7,4 +7,5 @@\n package main\n func f() {\n \tv := 1 << 1025;\t\t// ERROR \"overflow|stupid shift\"\n+\t_ = v\n }"}, {"sha": "1b125e5d1ee4bd265e7921b3a7a1e78c8a35d5ba", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug141.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug141.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug141.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug141.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -20,7 +20,7 @@ type Getter interface {\n \n func f1(p Empty) {\n \tswitch x := p.(type) {\n-\tdefault: println(\"failed to match interface\"); os.Exit(1);\n+\tdefault: println(\"failed to match interface\", x); os.Exit(1);\n \tcase Getter: break;\n \t}\n "}, {"sha": "1ca14150765fc2e9816835669a1bd14d41033929", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug175.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug175.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug175.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug175.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -10,5 +10,5 @@ func f() (int, bool) { return 0, true }\n \n func main() {\n \tx, y := f(), 2;\t// ERROR \"multi\"\n+\t_, _ = x, y\n }\n-"}, {"sha": "63b8633bd9fca5ccfa4bb7b551bf488cba9a1336", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug200.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug200.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug200.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug200.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -12,7 +12,7 @@ func main() {\n \t// and worse, compiled the wrong code\n \t// for one of them.\n \tvar x interface{};\n-\tswitch v := x.(type) {\n+\tswitch x.(type) {\n \tcase func(int):\n \tcase func(f int):\t// ERROR \"duplicate\"\n \t}"}, {"sha": "4d81dbb4de440df45052acade8ea6e4fcd739768", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug213.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug213.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug213.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug213.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -7,7 +7,7 @@\n package main\n func main() {\n \tvar v interface{} = 0;\n-\tswitch x := v.(type) {\n+\tswitch v.(type) {\n \tcase int:\n \t\tfallthrough;\t\t// ERROR \"fallthrough\"\n \tdefault:"}, {"sha": "adce3667708f62c689dc4206d0a947ff2b493527", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug248.dir/bug2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug248.dir%2Fbug2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug248.dir%2Fbug2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug248.dir%2Fbug2.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -80,7 +80,7 @@ func main() {\n \t\tcase 2:\n \t\t\ti = 3.14\n \t\t}\n-\t\tswitch k := i.(type) {\n+\t\tswitch i.(type) {\n \t\tcase p0.T:\n \t\t\tif j != 0 {\n \t\t\t\tprintln(\"type switch p0.T\")"}, {"sha": "d893916cd96ad5552402de20ff1675c63a368f84", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug309.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug309.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug309.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug309.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -15,5 +15,7 @@ func foo(t interface{}, c chan int) {\n \t\tcase <-c:\n \t\t\t// bug was: internal compiler error: var without type, init: v\n \t\t}\n+\tdefault:\n+\t\t_ = v\n \t}\n }"}, {"sha": "9347ec28b62d4460c85aa4b0dca9cb9c5d43024c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug363.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug363.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug363.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug363.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -17,5 +17,5 @@ func main() {\n \tprintln(b)\n \n \tvar c int64 = (1<<i) + 4.0  // ok - it's all int64\n-\tprintln(b)\n+\tprintln(c)\n }"}, {"sha": "2a1a932de902b2d89496b963797396dc31352c05", "filename": "gcc/testsuite/go.test/test/func4.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc4.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -11,4 +11,5 @@ var notmain func()\n func main() {\n \tvar x = &main\t\t// ERROR \"address of|invalid\"\n \tmain = notmain\t// ERROR \"assign to|invalid\"\n+\t_ = x\n }"}, {"sha": "ecb4f138ace8ca50565b2c2aa89cfff606db3f77", "filename": "gcc/testsuite/go.test/test/indirect1.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findirect1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findirect1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findirect1.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -65,4 +65,5 @@ func f() {\n \t\tcap(b2)+\t// ERROR \"illegal|invalid|must be\"\n \t\tcap(b3)+\n \t\tcap(b4)\t// ERROR \"illegal|invalid|must be\"\n+\t_ = x\n }"}, {"sha": "70f83c9c9b7f703f408aa416466b4fd51eb7c815", "filename": "libgo/go/io/ioutil/ioutil_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/libgo%2Fgo%2Fio%2Fioutil%2Fioutil_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/libgo%2Fgo%2Fio%2Fioutil%2Fioutil_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fio%2Fioutil%2Fioutil_test.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -71,13 +71,13 @@ func TestReadDir(t *testing.T) {\n \t\tt.Fatalf(\"ReadDir %s: error expected, none found\", dirname)\n \t}\n \n+\t/* Does not work in gccgo testing environment.\n \tdirname = \"..\"\n \tlist, err := ReadDir(dirname)\n \tif err != nil {\n \t\tt.Fatalf(\"ReadDir %s: %v\", dirname, err)\n \t}\n \n-/* Does not work in gccgo testing environment.\n \tfoundFile := false\n \tfoundSubDir := false\n \tfor _, dir := range list {\n@@ -94,5 +94,5 @@ func TestReadDir(t *testing.T) {\n \tif !foundSubDir {\n \t\tt.Fatalf(\"ReadDir %s: ioutil directory not found\", dirname)\n \t}\n-*/\n+\t*/\n }"}, {"sha": "a3c56585ce72e7fe82833c88b435c15883c1b42d", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -243,7 +243,7 @@ type commonType struct {\n \talign      int8\n \tfieldAlign uint8\n \tsize       uintptr\n-\thash\t   uint32\n+\thash       uint32\n \thashfn     func(unsafe.Pointer, uintptr)\n \tequalfn    func(unsafe.Pointer, unsafe.Pointer, uintptr)\n \tstring     *string\n@@ -464,7 +464,7 @@ func (t *uncommonType) Method(i int) (m Method) {\n \tm.Type = mt.toType()\n \tx := new(unsafe.Pointer)\n \t*x = p.tfn\n-\tm.Func = Value{mt, unsafe.Pointer(x), fl|flagIndir}\n+\tm.Func = Value{mt, unsafe.Pointer(x), fl | flagIndir}\n \tm.Index = i\n \treturn\n }\n@@ -999,10 +999,8 @@ func (ct *commonType) ptrTo() *commonType {\n \t\treturn &p.commonType\n \t}\n \n-\trt := (*runtime.Type)(unsafe.Pointer(ct))\n-\n \trp := new(runtime.PtrType)\n-\t\n+\n \t// initialize p using *byte's ptrType as a prototype.\n \t// have to do assignment as ptrType, not runtime.PtrType,\n \t// in order to write to unexported fields."}, {"sha": "a1bc33426204a4b266db2ab169c0ffb446b51258", "filename": "libgo/go/reflect/value.go", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1b3aec1b1e26c22791f21d971a851af4df2dad2/libgo%2Fgo%2Freflect%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1b3aec1b1e26c22791f21d971a851af4df2dad2/libgo%2Fgo%2Freflect%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fvalue.go?ref=b1b3aec1b1e26c22791f21d971a851af4df2dad2", "patch": "@@ -215,8 +215,8 @@ type emptyInterface struct {\n type nonEmptyInterface struct {\n \t// see ../runtime/iface.c:/Itab\n \titab *struct {\n-\t\ttyp    *runtime.Type // dynamic concrete type\n-\t\tfun    [100000]unsafe.Pointer // method table\n+\t\ttyp *runtime.Type          // dynamic concrete type\n+\t\tfun [100000]unsafe.Pointer // method table\n \t}\n \tword iword\n }\n@@ -448,7 +448,6 @@ func (v Value) call(method string, in []Value) []Value {\n \t\tnin++\n \t}\n \tparams := make([]unsafe.Pointer, nin)\n-\tdelta := 0\n \toff := 0\n \tif v.flag&flagMethod != 0 {\n \t\t// Hard-wired first argument.\n@@ -517,7 +516,7 @@ func isMethod(t *commonType) bool {\n \t\t\tparams++\n \t\t} else if c == ')' {\n \t\t\tparens--\n-\t\t} else if parens == 0 && c == ' ' && s[i + 1] != '(' && !sawRet {\n+\t\t} else if parens == 0 && c == ' ' && s[i+1] != '(' && !sawRet {\n \t\t\tparams++\n \t\t\tsawRet = true\n \t\t}\n@@ -1627,7 +1626,7 @@ func MakeChan(typ Type, buffer int) Value {\n \t\tpanic(\"reflect.MakeChan: unidirectional channel type\")\n \t}\n \tch := makechan(typ.runtimeType(), uint32(buffer))\n-\treturn Value{typ.common(), unsafe.Pointer(ch), flagIndir | (flag(Chan)<<flagKindShift)}\n+\treturn Value{typ.common(), unsafe.Pointer(ch), flagIndir | (flag(Chan) << flagKindShift)}\n }\n \n // MakeMap creates a new map of the specified type.\n@@ -1636,7 +1635,7 @@ func MakeMap(typ Type) Value {\n \t\tpanic(\"reflect.MakeMap of non-map type\")\n \t}\n \tm := makemap(typ.runtimeType())\n-\treturn Value{typ.common(), unsafe.Pointer(m), flagIndir | (flag(Map)<<flagKindShift)}\n+\treturn Value{typ.common(), unsafe.Pointer(m), flagIndir | (flag(Map) << flagKindShift)}\n }\n \n // Indirect returns the value that v points to."}]}