{"sha": "2fe24884e0495e23d37285c3814dd48a97dd3cf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlMjQ4ODRlMDQ5NWUyM2QzNzI4NWMzODE0ZGQ0OGE5N2RkM2NmNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-03T19:02:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-03T19:02:45Z"}, "message": "pa.c (fmpyaddoperands): Verifys given registers are suitable for use in fmpyadd instructions.\n\n\t* pa.c (fmpyaddoperands): Verifys given registers are suitable for\n\tuse in fmpyadd instructions.\n\t(fmpysuboperands): Likewise, but for fmpysub instructions.\n\nFrom-SVN: r3070", "tree": {"sha": "d10acb095f8dd9824bfcf593731d92bdf71b3d25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d10acb095f8dd9824bfcf593731d92bdf71b3d25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe24884e0495e23d37285c3814dd48a97dd3cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe24884e0495e23d37285c3814dd48a97dd3cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe24884e0495e23d37285c3814dd48a97dd3cf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe24884e0495e23d37285c3814dd48a97dd3cf4/comments", "author": null, "committer": null, "parents": [{"sha": "2c871711c3e85fc89e67b24e39199f1ac0f18b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c871711c3e85fc89e67b24e39199f1ac0f18b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c871711c3e85fc89e67b24e39199f1ac0f18b02"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "d6bf0b7fdd276cd4922bf5601aa6618522774dcd", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe24884e0495e23d37285c3814dd48a97dd3cf4/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe24884e0495e23d37285c3814dd48a97dd3cf4/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=2fe24884e0495e23d37285c3814dd48a97dd3cf4", "patch": "@@ -2249,7 +2249,6 @@ static int magic_milli[]= {0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,\n    whether or not we've used them already. [n][0] is signed, [n][1] is\n    unsigned. */\n \n-\n static int div_milli[16][2];\n \n int\n@@ -2532,6 +2531,99 @@ function_label_operand  (op, mode)\n   return GET_CODE (op) == SYMBOL_REF && FUNCTION_NAME_P (XSTR (op, 0));\n }\n \n+/* Returns 1 if the 5 operands specified in OPERANDS are suitable for\n+   use in fmpyadd instructions.  Because of the inout operand in the\n+   add part this function may swap operands[3] and operands[4] to make them\n+   suitable for fmpyadd instructions.  */\n+int\n+fmpyaddoperands(operands)\n+     rtx *operands;\n+{\n+\n+  /* All modes must be the same.  */\n+  if (! (GET_MODE (operands[0]) == GET_MODE (operands[1])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[2])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[3])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[4])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[5])))\n+    return 0;\n+\n+  /* Both DFmode and SFmode should work.  But using SFmode makes the\n+     assembler complain.  Just turn it off for now.  */\n+  if (GET_MODE (operands[0]) != DFmode)\n+    return 0;\n+\n+  /* Only 2 real operands to the addition.  One input must be the output.  */\n+  if (! rtx_equal_p (operands[3], operands[4])\n+      && ! rtx_equal_p (operands[3], operands[5]))\n+    return 0;\n+\n+  /* Inout operand of add can not conflict with any operands from multiply.  */\n+  if (rtx_equal_p (operands[3], operands[0])\n+     || rtx_equal_p (operands[3], operands[1])\n+     || rtx_equal_p (operands[3], operands[2]))\n+    return 0;\n+\n+  /* multiply can not feed into addition operands.  */\n+  if (rtx_equal_p (operands[4], operands[0])\n+      || rtx_equal_p (operands[5], operands[0]))\n+    return 0;\n+\n+  /* Make the inout operand be operands[5] and operands[3].  Output template\n+     assumes operands[4] is the read-only add operand.  */\n+  if (rtx_equal_p (operands[3], operands[4]))\n+    {\n+      rtx tmp;\n+      tmp = operands[4];\n+      operands[4] = operands[5];\n+      operands[5] = tmp;\n+    }\n+\n+  /* Passed.  Operands are suitable for fmpyadd.  */\n+  return 1;\n+}\n+\n+/* Returns 1 if the 5 operands specified in OPERANDS are suitable for\n+   use in fmpysub instructions.  It is very similar to fmpyaddoperands\n+   above except operands[3] and operands[4] must be the same without\n+   swapping.  */\n+int\n+fmpysuboperands(operands)\n+     rtx *operands;\n+{\n+\n+  /* All modes must be the same.  */\n+  if (! (GET_MODE (operands[0]) == GET_MODE (operands[1])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[2])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[3])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[4])\n+\t && GET_MODE (operands[0]) == GET_MODE (operands[5])))\n+    return 0;\n+\n+  /* Both DFmode and SFmode should work.  But using SFmode makes the\n+     assembler complain.  Just turn it off for now.  */\n+  if (GET_MODE (operands[0]) != DFmode)\n+    return 0;\n+\n+  /* Only 2 real operands to the subtraction.  One input must be the output.  */\n+  if (! rtx_equal_p (operands[3], operands[4]))\n+    return 0;\n+\n+  /* multiply can not feed into subtraction.  */\n+  if (rtx_equal_p (operands[4], operands[0])\n+      || rtx_equal_p (operands[5], operands[0]))\n+    return 0;\n+\n+  /* Inout operand of add can not conflict with any operands from multiply.  */\n+  if (rtx_equal_p (operands[3], operands[0])\n+     || rtx_equal_p (operands[3], operands[1])\n+     || rtx_equal_p (operands[3], operands[2]))\n+    return 0;\n+\n+  /* Passed.  Operands are suitable for fmpysub.  */\n+  return 1;\n+}\n+\n /* Return 1 if OP is suitable for the second add operand (the unshifed \n    operand) in an shadd instruction.   Allow CONST_INT to work around\n    a reload bug.  */"}]}