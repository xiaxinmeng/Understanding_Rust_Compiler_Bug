{"sha": "b16650ac472b03123a7190c84d6c75daf8a6557c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2NjUwYWM0NzJiMDMxMjNhNzE5MGM4NGQ2Yzc1ZGFmOGE2NTU3Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-01-18T17:42:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-01-18T17:42:11Z"}, "message": "ipa-icf-32.c: Update template.\n\n\n\t* gcc.dg/ipa/ipa-icf-32.c: Update template.\n\t* c-c++-common/asan/instrument-with-calls-3.c: Likewise.\n\t* c-c++-common/asan/instrument-with-calls-2.c: Likewise.\n\t* c-c++-common/asan/instrument-with-calls-1.c: Likewise.\n\t* c-c++-common/asan/kasan-recover-1.c: Likewise.\n\t* c-c++-common/asan/kasan-recover-2.c: Likewise.\n\n\t* ipa-reference.c (set_reference_optimization_summary,\n\tipa_reference_get_not_written_global): Do nothing if ipa-reference is disabled.\n\t(ignore_module_statics): New static var.\n\t(propagate_bits): If ipa-reference is disabled, do not look into local properties.\n\t(analyze_function): Disable analysis when ipa_reference is disabled.\n\t(generate_summary): Do not dump when reference is disabled;\n\tcollect vars accessed from functions with ipa-reference disabled.\n\t(get_read_write_all_from_node): When ipa-reference is disabled, use the\n\tnode flags.\n\t(gate): Enable for LTO.\n\t(ignore_edge_p): New function.\n\t(propagate): Skip functions w/o ipa-reference analysis.\n\t* optc-save-gen.awk: Handle optimize_debug correctly.\n\t* opth-gen.awk: Likewise.\n\t* common.opt (fauto-inc-dec, fdelete-dead-exceptions, ffunction-cse,\n\tfgraphite, fstrict-volatile-bitfields, fira-algorithm, fira-region,\n\tfira-share-save-slots, fira-share-spill-slots,\n\tfmodulo-sched-allow-regmoves, fpartial-inlining,\n\tsched-stalled-insns, fsched-stalled-insns-dep, fstrict-overflow,\n\tftracer, ftree-parallelize-loops, fassociative-math,\n\tfreciprocal-math, fvect-cost-model, fsimd-cost-model): Mark as\n\tOptimization\n\t(fauto-profile, fcommon, fdata-sections, fipa-icf-variables,\n        ftoplevel-reorder, funit-at-a-time, fwhole-program): Do not mark as\n        Optimization.\n\t* ipa-icf.c (gate, sem_item_optimizer::filter_removed_items):\n\tFix for IPA.\n\nFrom-SVN: r219823", "tree": {"sha": "8adefaf359f0ba900559f677e0e56f23f125b6f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8adefaf359f0ba900559f677e0e56f23f125b6f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b16650ac472b03123a7190c84d6c75daf8a6557c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16650ac472b03123a7190c84d6c75daf8a6557c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16650ac472b03123a7190c84d6c75daf8a6557c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16650ac472b03123a7190c84d6c75daf8a6557c/comments", "author": null, "committer": null, "parents": [{"sha": "33c3b6be4d07de8f633a58b48d2e602586c1ad07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c3b6be4d07de8f633a58b48d2e602586c1ad07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c3b6be4d07de8f633a58b48d2e602586c1ad07"}], "stats": {"total": 193, "additions": 142, "deletions": 51}, "files": [{"sha": "a858d1f154f0898c2f2cf3e2b6ab0e0c74a7f944", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,3 +1,33 @@\n+2015-01-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-reference.c (set_reference_optimization_summary,\n+\tipa_reference_get_not_written_global): Do nothing if ipa-reference is disabled.\n+\t(ignore_module_statics): New static var.\n+\t(propagate_bits): If ipa-reference is disabled, do not look into local properties.\n+\t(analyze_function): Disable analysis when ipa_reference is disabled.\n+\t(generate_summary): Do not dump when reference is disabled;\n+\tcollect vars accessed from functions with ipa-reference disabled.\n+\t(get_read_write_all_from_node): When ipa-reference is disabled, use the\n+\tnode flags.\n+\t(gate): Enable for LTO.\n+\t(ignore_edge_p): New function.\n+\t(propagate): Skip functions w/o ipa-reference analysis.\n+\t* optc-save-gen.awk: Handle optimize_debug correctly.\n+\t* opth-gen.awk: Likewise.\n+\t* common.opt (fauto-inc-dec, fdelete-dead-exceptions, ffunction-cse,\n+\tfgraphite, fstrict-volatile-bitfields, fira-algorithm, fira-region,\n+\tfira-share-save-slots, fira-share-spill-slots,\n+\tfmodulo-sched-allow-regmoves, fpartial-inlining,\n+\tsched-stalled-insns, fsched-stalled-insns-dep, fstrict-overflow,\n+\tftracer, ftree-parallelize-loops, fassociative-math,\n+\tfreciprocal-math, fvect-cost-model, fsimd-cost-model): Mark as\n+\tOptimization\n+\t(fauto-profile, fcommon, fdata-sections, fipa-icf-variables,\n+        ftoplevel-reorder, funit-at-a-time, fwhole-program): Do not mark as\n+        Optimization.\n+\t* ipa-icf.c (gate, sem_item_optimizer::filter_removed_items):\n+\tFix for IPA.\n+\n 2015-01-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/64378"}, {"sha": "22a3b6bca80738bafd3806f246caa65b78152d93", "filename": "gcc/common.opt", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -912,11 +912,11 @@ Common Report Var(flag_asynchronous_unwind_tables) Optimization\n Generate unwind tables that are exact at each instruction boundary\n \n fauto-inc-dec\n-Common Report Var(flag_auto_inc_dec) Init(1)\n+Common Report Var(flag_auto_inc_dec) Init(1) Optimization\n Generate auto-inc/dec instructions\n \n fauto-profile\n-Common Report Var(flag_auto_profile) Optimization\n+Common Report Var(flag_auto_profile)\n Use sample profile information for call graph node weights. The default\n profile file is fbdata.afdo in 'pwd'.\n \n@@ -981,7 +981,7 @@ Common Report Var(flag_combine_stack_adjustments) Optimization\n Looks for opportunities to reduce stack adjustments and stack references.\n \n fcommon\n-Common Report Var(flag_no_common,0) Optimization\n+Common Report Var(flag_no_common,0)\n Do not put uninitialized globals in the common section\n \n fcompare-debug\n@@ -1029,7 +1029,7 @@ Common Report Var(flag_cx_fortran_rules) Optimization\n Complex multiplication and division follow Fortran rules\n \n fdata-sections\n-Common Report Var(flag_data_sections) Optimization\n+Common Report Var(flag_data_sections)\n Place data items into their own section\n \n fdbg-cnt-list\n@@ -1059,7 +1059,7 @@ Common Report Var(flag_delayed_branch) Optimization\n Attempt to fill delay slots of branch instructions\n \n fdelete-dead-exceptions\n-Common Report Var(flag_delete_dead_exceptions) Init(0)\n+Common Report Var(flag_delete_dead_exceptions) Init(0) Optimization\n Delete dead instructions that may throw exceptions\n \n fdelete-null-pointer-checks\n@@ -1268,7 +1268,7 @@ Enum(fp_contract_mode) String(fast) Value(FP_CONTRACT_FAST)\n ; Used for compiling the Unix kernel, where strange substitutions are\n ; done on the assembly output.\n ffunction-cse\n-Common Report Var(flag_no_function_cse,0)\n+Common Report Var(flag_no_function_cse,0) Optimization\n Allow function addresses to be held in registers\n \n ffunction-sections\n@@ -1299,7 +1299,7 @@ has finished\n \n ; This option is not documented yet as its semantics will change.\n fgraphite\n-Common Report Var(flag_graphite)\n+Common Report Var(flag_graphite) Opitmization\n Enable in and out of Graphite representation\n \n fgraphite-identity\n@@ -1348,7 +1348,7 @@ Common Report Var(flag_loop_optimize_isl) Optimization\n Enable the ISL based loop nest optimizer\n \n fstrict-volatile-bitfields\n-Common Report Var(flag_strict_volatile_bitfields) Init(-1)\n+Common Report Var(flag_strict_volatile_bitfields) Init(-1) Optimization\n Force bitfield accesses to match their type width\n \n fguess-branch-probability\n@@ -1477,7 +1477,7 @@ Common Report Var(flag_ipa_icf_functions) Optimization\n Perform Identical Code Folding for functions\n \n fipa-icf-variables\n-Common Report Var(flag_ipa_icf_variables) Optimization\n+Common Report Var(flag_ipa_icf_variables)\n Perform Identical Code Folding for variables\n \n fipa-reference\n@@ -1493,7 +1493,7 @@ Common Ignore\n Does nothing. Preserved for backward compatibility.\n \n fira-algorithm=\n-Common Joined RejectNegative Enum(ira_algorithm) Var(flag_ira_algorithm) Init(IRA_ALGORITHM_CB)\n+Common Joined RejectNegative Enum(ira_algorithm) Var(flag_ira_algorithm) Init(IRA_ALGORITHM_CB) Optimization\n -fira-algorithm=[CB|priority] Set the used IRA algorithm\n \n Enum\n@@ -1506,7 +1506,7 @@ EnumValue\n Enum(ira_algorithm) String(priority) Value(IRA_ALGORITHM_PRIORITY)\n \n fira-region=\n-Common Joined RejectNegative Enum(ira_region) Var(flag_ira_region) Init(IRA_REGION_AUTODETECT)\n+Common Joined RejectNegative Enum(ira_region) Var(flag_ira_region) Init(IRA_REGION_AUTODETECT) Optimization\n -fira-region=[one|all|mixed] Set regions for IRA\n \n Enum\n@@ -1532,11 +1532,11 @@ Use IRA based register pressure calculation\n in RTL loop optimizations.\n \n fira-share-save-slots\n-Common Report Var(flag_ira_share_save_slots) Init(1)\n+Common Report Var(flag_ira_share_save_slots) Init(1) Optimization\n Share slots for saving different hard registers.\n \n fira-share-spill-slots\n-Common Report Var(flag_ira_share_spill_slots) Init(1)\n+Common Report Var(flag_ira_share_spill_slots) Init(1) Optimization\n Share stack slots for spilled pseudo-registers.\n \n fira-verbose=\n@@ -1658,7 +1658,7 @@ Common Report Var(flag_modulo_sched) Optimization\n Perform SMS based modulo scheduling before the first scheduling pass\n \n fmodulo-sched-allow-regmoves\n-Common Report Var(flag_modulo_sched_allow_regmoves)\n+Common Report Var(flag_modulo_sched_allow_regmoves) Optimization\n Perform SMS based modulo scheduling with register moves allowed\n \n fmove-loop-invariants\n@@ -1719,7 +1719,7 @@ Common Report Var(flag_optimize_sibling_calls) Optimization\n Optimize sibling and tail recursive calls\n \n fpartial-inlining\n-Common Report Var(flag_partial_inlining)\n+Common Report Var(flag_partial_inlining) Optimization\n Perform partial inlining\n \n fpre-ipa-mem-report\n@@ -1966,7 +1966,7 @@ Common Report Var(flag_sched_stalled_insns) Optimization UInteger\n Allow premature scheduling of queued insns\n \n fsched-stalled-insns=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Optimization\n -fsched-stalled-insns=<number>\tSet number of queued insns that can be prematurely scheduled\n \n ; sched_stalled_insns_dep controls how many recently scheduled cycles will\n@@ -1978,7 +1978,7 @@ Common Report Var(flag_sched_stalled_insns_dep,1) Init(1) Optimization UInteger\n Set dependence distance checking in premature scheduling of queued insns\n \n fsched-stalled-insns-dep=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Optimization\n -fsched-stalled-insns-dep=<number>\tSet dependence distance checking in premature scheduling of queued insns\n \n fsched-group-heuristic\n@@ -2114,7 +2114,7 @@ Common Report Var(flag_strict_aliasing) Optimization\n Assume strict aliasing rules apply\n \n fstrict-overflow\n-Common Report Var(flag_strict_overflow)\n+Common Report Var(flag_strict_overflow) Optimization\n Treat signed overflow as undefined\n \n fsync-libcalls\n@@ -2157,11 +2157,11 @@ EnumValue\n Enum(tls_model) String(local-exec) Value(TLS_MODEL_LOCAL_EXEC)\n \n ftoplevel-reorder\n-Common Report Var(flag_toplevel_reorder) Init(2) Optimization\n+Common Report Var(flag_toplevel_reorder) Init(2)\n Reorder top level functions, variables, and asms\n \n ftracer\n-Common Report Var(flag_tracer)\n+Common Report Var(flag_tracer) Optimization\n Perform superblock formation via tail duplication\n \n ; Zero means that floating-point math operations cannot generate a\n@@ -2285,7 +2285,7 @@ Common Report Var(flag_tree_loop_optimize) Init(1) Optimization\n Enable loop optimizations on tree level\n \n ftree-parallelize-loops=\n-Common Report Joined RejectNegative UInteger Var(flag_tree_parallelize_loops) Init(1)\n+Common Report Joined RejectNegative UInteger Var(flag_tree_parallelize_loops) Init(1) Optimization\n Enable automatic parallelization of loops\n \n ftree-phiprop\n@@ -2337,7 +2337,7 @@ Common Report Var(flag_tree_vrp) Init(0) Optimization\n Perform Value Range Propagation on trees\n \n funit-at-a-time\n-Common Report Var(flag_unit_at_a_time) Init(1) Optimization\n+Common Report Var(flag_unit_at_a_time) Init(1)\n Compile whole compilation unit at a time\n \n funroll-loops\n@@ -2356,12 +2356,12 @@ Common Report Var(flag_unsafe_loop_optimizations) Optimization\n Allow loop optimizations to assume that the loops behave in normal way\n \n fassociative-math\n-Common Report Var(flag_associative_math) SetByCombined\n+Common Report Var(flag_associative_math) SetByCombined Optimization\n Allow optimization for floating-point arithmetic which may change the\n result of the operation due to rounding.\n \n freciprocal-math\n-Common Report Var(flag_reciprocal_math) SetByCombined\n+Common Report Var(flag_reciprocal_math) SetByCombined Optimization\n Same as -fassociative-math for expressions which include division.\n \n ; Nonzero means that unsafe floating-point math optimizations are allowed\n@@ -2439,11 +2439,11 @@ Common Report Var(flag_tree_slp_vectorize) Optimization\n Enable basic block vectorization (SLP) on trees\n \n fvect-cost-model=\n-Common Joined RejectNegative Enum(vect_cost_model) Var(flag_vect_cost_model) Init(VECT_COST_MODEL_DEFAULT)\n+Common Joined RejectNegative Enum(vect_cost_model) Var(flag_vect_cost_model) Init(VECT_COST_MODEL_DEFAULT) Optimization\n Specifies the cost model for vectorization\n  \n fsimd-cost-model=\n-Common Joined RejectNegative Enum(vect_cost_model) Var(flag_simd_cost_model) Init(VECT_COST_MODEL_UNLIMITED)\n+Common Joined RejectNegative Enum(vect_cost_model) Var(flag_simd_cost_model) Init(VECT_COST_MODEL_UNLIMITED) Optimization\n Specifies the vectorization cost model for code marked with a simd directive\n \n Enum\n@@ -2540,7 +2540,7 @@ Common Report Var(flag_tree_builtin_call_dce) Init(0) Optimization\n Enable conditional dead code elimination for builtin calls\n \n fwhole-program\n-Common Report Var(flag_whole_program) Init(0) Optimization\n+Common Report Var(flag_whole_program) Init(0)\n Perform whole program optimizations\n \n fwrapv"}, {"sha": "0ac01a9c3d065eb508f39fb7a3553f28468b9f51", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1652,7 +1652,8 @@ sem_item_optimizer::filter_removed_items (void)\n     {\n       sem_item *item = m_items[i];\n \n-      if (!flag_ipa_icf_functions && item->type == FUNC)\n+      if (item->type == FUNC\n+\t  && !opt_for_fn (item->decl, flag_ipa_icf_functions))\n \t{\n \t  remove_item (item);\n \t  continue;\n@@ -2499,7 +2500,7 @@ class pass_ipa_icf : public ipa_opt_pass_d\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n   {\n-    return flag_ipa_icf_variables || flag_ipa_icf_functions;\n+    return in_lto_p || flag_ipa_icf_variables || flag_ipa_icf_functions;\n   }\n \n   virtual unsigned int execute (function *)"}, {"sha": "6a677ca502c5248537eb5770e3b4af542a9a91f7", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -132,6 +132,9 @@ static splay_tree reference_vars_to_consider;\n    static we are considering.  This is added to the local info when asm\n    code is found that clobbers all memory.  */\n static bitmap all_module_statics;\n+/* Set of all statics that should be ignored becuase they are touched by\n+   -fno-ipa-reference code.  */\n+static bitmap ignore_module_statics;\n \n /* Obstack holding bitmaps of local analysis (live from analysis to\n    propagation)  */\n@@ -198,6 +201,9 @@ set_reference_optimization_summary (struct cgraph_node *node,\n bitmap\n ipa_reference_get_not_read_global (struct cgraph_node *fn)\n {\n+  if (!opt_for_fn (fn->decl, flag_ipa_reference)\n+      || !opt_for_fn (current_function_decl, flag_ipa_reference))\n+    return NULL;\n   ipa_reference_optimization_summary_t info =\n     get_reference_optimization_summary (fn->function_symbol (NULL));\n   if (info)\n@@ -216,6 +222,9 @@ ipa_reference_get_not_read_global (struct cgraph_node *fn)\n bitmap\n ipa_reference_get_not_written_global (struct cgraph_node *fn)\n {\n+  if (!opt_for_fn (fn->decl, flag_ipa_reference)\n+      || !opt_for_fn (current_function_decl, flag_ipa_reference))\n+    return NULL;\n   ipa_reference_optimization_summary_t info =\n     get_reference_optimization_summary (fn);\n   if (info)\n@@ -273,6 +282,8 @@ is_proper_for_analysis (tree t)\n     return false;\n \n   /* TODO: Check aliases.  */\n+  if (bitmap_bit_p (ignore_module_statics, DECL_UID (t)))\n+    return false;\n \n   /* This is a variable we care about.  Check if we have seen it\n      before, and if not add it the set of variables we care about.  */\n@@ -381,8 +392,9 @@ propagate_bits (ipa_reference_global_vars_info_t x_global, struct cgraph_node *x\n \n       /* Only look into nodes we can propagate something.  */\n       int flags = flags_from_decl_or_type (y->decl);\n-      if (avail > AVAIL_INTERPOSABLE\n-\t  || (avail == AVAIL_INTERPOSABLE && (flags & ECF_LEAF)))\n+      if (opt_for_fn (y->decl, flag_ipa_reference)\n+\t  && (avail > AVAIL_INTERPOSABLE\n+\t      || (avail == AVAIL_INTERPOSABLE && (flags & ECF_LEAF))))\n \t{\n \t  if (get_reference_vars_info (y))\n \t    {\n@@ -437,6 +449,7 @@ ipa_init (void)\n   bitmap_obstack_initialize (&local_info_obstack);\n   bitmap_obstack_initialize (&optimization_summary_obstack);\n   all_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n+  ignore_module_statics = BITMAP_ALLOC (&optimization_summary_obstack);\n \n   node_removal_hook_holder =\n       symtab->add_cgraph_removal_hook (&remove_node_data, NULL);\n@@ -474,6 +487,8 @@ analyze_function (struct cgraph_node *fn)\n   int i;\n   tree var;\n \n+  if (!opt_for_fn (fn->decl, flag_ipa_reference))\n+    return;\n   local = init_function_info (fn);\n   for (i = 0; fn->iterate_reference (i, ref); i++)\n     {\n@@ -558,6 +573,22 @@ generate_summary (void)\n   ipa_init ();\n \n   /* Process all of the functions next.  */\n+  FOR_EACH_DEFINED_FUNCTION (node)\n+    if (!node->alias && !opt_for_fn (node->decl, flag_ipa_reference))\n+      {\n+        struct ipa_ref *ref = NULL;\n+        int i;\n+        tree var;\n+\tfor (i = 0; node->iterate_reference (i, ref); i++)\n+\t  {\n+\t    if (!is_a <varpool_node *> (ref->referred))\n+\t      continue;\n+\t    var = ref->referred->decl;\n+\t    if (!is_proper_for_analysis (var))\n+\t      continue;\n+\t    bitmap_set_bit (ignore_module_statics, DECL_UID (var));\n+\t  }\n+      }\n   FOR_EACH_DEFINED_FUNCTION (node)\n     analyze_function (node);\n \n@@ -570,7 +601,8 @@ generate_summary (void)\n \n   if (dump_file)\n     FOR_EACH_DEFINED_FUNCTION (node)\n-      if (node->get_availability () >= AVAIL_INTERPOSABLE)\n+      if (node->get_availability () >= AVAIL_INTERPOSABLE\n+\t  && opt_for_fn (node->decl, flag_ipa_reference))\n \t{\n \t  ipa_reference_local_vars_info_t l;\n \t  unsigned int index;\n@@ -607,7 +639,7 @@ read_write_all_from_decl (struct cgraph_node *node,\n   tree decl = node->decl;\n   int flags = flags_from_decl_or_type (decl);\n   if ((flags & ECF_LEAF)\n-      && node->get_availability () <= AVAIL_INTERPOSABLE)\n+      && node->get_availability () < AVAIL_INTERPOSABLE)\n     ;\n   else if (flags & ECF_CONST)\n     ;\n@@ -640,7 +672,8 @@ get_read_write_all_from_node (struct cgraph_node *node,\n   struct cgraph_edge *e, *ie;\n \n   /* When function is overwritable, we can not assume anything.  */\n-  if (node->get_availability () <= AVAIL_INTERPOSABLE)\n+  if (node->get_availability () <= AVAIL_INTERPOSABLE\n+      || (node->analyzed && !opt_for_fn (node->decl, flag_ipa_reference)))\n     read_write_all_from_decl (node, read_all, write_all);\n \n   for (e = node->callees;\n@@ -650,7 +683,8 @@ get_read_write_all_from_node (struct cgraph_node *node,\n       enum availability avail;\n       struct cgraph_node *callee = e->callee->function_symbol (&avail);\n       gcc_checking_assert (callee);\n-      if (avail <= AVAIL_INTERPOSABLE)\n+      if (avail <= AVAIL_INTERPOSABLE\n+          || (callee->analyzed && !opt_for_fn (callee->decl, flag_ipa_reference)))\n \tread_write_all_from_decl (callee, read_all, write_all);\n     }\n \n@@ -672,6 +706,18 @@ get_read_write_all_from_node (struct cgraph_node *node,\n       }\n }\n \n+/* Skip edges from and to nodes without ipa_reference enables.  This leave\n+   them out of strongy connected coponents and makes them easyto skip in the\n+   propagation loop bellow.  */\n+\n+static bool\n+ignore_edge_p (cgraph_edge *e)\n+{\n+  return (!opt_for_fn (e->caller->decl, flag_ipa_reference)\n+          || !opt_for_fn (e->callee->function_symbol ()->decl,\n+\t\t\t  flag_ipa_reference));\n+}\n+\n /* Produce the global information by preforming a transitive closure\n    on the local information that was produced by ipa_analyze_function.  */\n \n@@ -695,7 +741,7 @@ propagate (void)\n      the global information.  All the nodes within a cycle will have\n      the same info so we collapse cycles first.  Then we can do the\n      propagation in one pass from the leaves to the roots.  */\n-  order_pos = ipa_reduced_postorder (order, true, true, NULL);\n+  order_pos = ipa_reduced_postorder (order, true, true, ignore_edge_p);\n   if (dump_file)\n     ipa_print_order (dump_file, \"reduced\", order, order_pos);\n \n@@ -710,7 +756,7 @@ propagate (void)\n       bool write_all = false;\n \n       node = order[i];\n-      if (node->alias)\n+      if (node->alias || !opt_for_fn (node->decl, flag_ipa_reference))\n \tcontinue;\n \n       node_info = get_reference_vars_info (node);\n@@ -788,7 +834,7 @@ propagate (void)\n \t  struct cgraph_node *w;\n \n \t  node = order[i];\n-\t  if (node->alias)\n+          if (node->alias || !opt_for_fn (node->decl, flag_ipa_reference))\n \t    continue;\n \n \t  fprintf (dump_file,\n@@ -829,7 +875,7 @@ propagate (void)\n       ipa_reference_optimization_summary_t opt;\n \n       node_info = get_reference_vars_info (node);\n-      if (!node->alias\n+      if (!node->alias && opt_for_fn (node->decl, flag_ipa_reference)\n \t  && (node->get_availability () > AVAIL_INTERPOSABLE\n \t      || (flags_from_decl_or_type (node->decl) & ECF_LEAF)))\n \t{\n@@ -1178,7 +1224,7 @@ class pass_ipa_reference : public ipa_opt_pass_d\n   /* opt_pass methods: */\n   virtual bool gate (function *)\n     {\n-      return (flag_ipa_reference\n+      return ((in_lto_p || flag_ipa_reference)\n \t      /* Don't bother doing anything if the program has errors.  */\n \t      && !seen_error ());\n     }"}, {"sha": "2509699bf3a1d8346082fe679675e0274065d583", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -84,15 +84,17 @@ print \"void\";\n print \"cl_optimization_save (struct cl_optimization *ptr, struct gcc_options *opts)\";\n print \"{\";\n \n-n_opt_char = 2;\n+n_opt_char = 3;\n n_opt_short = 0;\n n_opt_int = 0;\n n_opt_enum = 1;\n n_opt_other = 0;\n var_opt_char[0] = \"optimize\";\n var_opt_char[1] = \"optimize_size\";\n+var_opt_char[2] = \"optimize_debug\";\n var_opt_range[\"optimize\"] = \"0, 255\";\n-var_opt_range[\"optimize_size\"] = \"0, 255\";\n+var_opt_range[\"optimize_size\"] = \"0, 1\";\n+var_opt_range[\"optimize_debug\"] = \"0, 1\";\n var_opt_enum[0] = \"flag_fp_contract_mode\";\n \n # Sort by size to mimic how the structure is laid out to be friendlier to the\n@@ -734,11 +736,13 @@ for (i = 0; i < n_target_val; i++) {\n \n print \"}\";\n \n-n_opt_val = 2;\n+n_opt_val = 3;\n var_opt_val[0] = \"x_optimize\"\n var_opt_val_type[0] = \"char \"\n var_opt_val[1] = \"x_optimize_size\"\n+var_opt_val[2] = \"x_optimize_debug\"\n var_opt_val_type[1] = \"char \"\n+var_opt_val_type[2] = \"char \"\n for (i = 0; i < n_opts; i++) {\n \tif (flag_set_p(\"Optimization\", flags[i])) {\n \t\tname = var_name(flags[i])"}, {"sha": "473932b2ecc3bc42ba4dd1f9daa54d354ec1d3d4", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -132,13 +132,14 @@ print \"/* Structure to save/restore optimization and target specific options.  *\n print \"struct GTY(()) cl_optimization\";\n print \"{\";\n \n-n_opt_char = 2;\n+n_opt_char = 3;\n n_opt_short = 0;\n n_opt_int = 0;\n n_opt_enum = 1;\n n_opt_other = 0;\n var_opt_char[0] = \"unsigned char x_optimize\";\n var_opt_char[1] = \"unsigned char x_optimize_size\";\n+var_opt_char[2] = \"unsigned char x_optimize_debug\";\n var_opt_enum[0] = \"enum fp_contract_mode x_flag_fp_contract_mode\";\n \n for (i = 0; i < n_opts; i++) {"}, {"sha": "801d87ebfc6c358d164e17e138c1a5e1ba68a338", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,3 +1,12 @@\n+2015-01-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/ipa-icf-32.c: Update template.\n+\t* c-c++-common/asan/instrument-with-calls-3.c: Likewise.\n+\t* c-c++-common/asan/instrument-with-calls-2.c: Likewise.\n+\t* c-c++-common/asan/instrument-with-calls-1.c: Likewise.\n+\t* c-c++-common/asan/kasan-recover-1.c: Likewise.\n+\t* c-c++-common/asan/kasan-recover-2.c: Likewise.\n+\n 2015-01-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/64378"}, {"sha": "7b55c2e5857e2809a7cfea02eb499c94f41236e6", "filename": "gcc/testsuite/c-c++-common/asan/instrument-with-calls-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-1.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"--param asan-instrumentation-with-call-threshold=0\" } */\n+/* { dg-options \"--param asan-instrumentation-with-call-threshold=0 -ffat-lto-objects\" } */\n \n void f(char *a, int *b) {\n   *b = *a;"}, {"sha": "efb481bab12fac97fd2df9350af8576827311a6e", "filename": "gcc/testsuite/c-c++-common/asan/instrument-with-calls-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-2.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"--param asan-instrumentation-with-call-threshold=1\" } */\n+/* { dg-options \"--param asan-instrumentation-with-call-threshold=1 -ffat-lto-objects\" } */\n \n int x;\n "}, {"sha": "42033f1cab98421e2d2aeb271ac0df9a3998d49e", "filename": "gcc/testsuite/c-c++-common/asan/instrument-with-calls-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Finstrument-with-calls-3.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"--param asan-instrumentation-with-call-threshold=0\" } */\n+/* { dg-options \"--param asan-instrumentation-with-call-threshold=0 -ffat-lto-objects\" } */\n \n struct A {\n   char x[7];"}, {"sha": "356d50a0d5922afa4ccb7c262a66bfab75d53746", "filename": "gcc/testsuite/c-c++-common/asan/kasan-recover-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-1.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address --param asan-instrumentation-with-call-threshold=100\" } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address --param asan-instrumentation-with-call-threshold=100 -ffat-lto-objects\" } */\n \n void\n foo (int *p)"}, {"sha": "d9655470abebd0b0b6827111675a4ef6eb05352c", "filename": "gcc/testsuite/c-c++-common/asan/kasan-recover-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fkasan-recover-2.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address\" } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address -ffat-lto-objects\" } */\n \n void\n foo (int *p)"}, {"sha": "55ab086cd50bebe0f2d91f21479af48c5f7529af", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-icf-32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16650ac472b03123a7190c84d6c75daf8a6557c/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-icf-32.c?ref=b16650ac472b03123a7190c84d6c75daf8a6557c", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do run } */\n-/* { dg-options \"-O0 -fipa-icf -fdump-ipa-icf-details\" } */\n+/* { dg-options \"-O1 -fipa-icf -fdump-ipa-icf-details\" } */\n \n int\n-__attribute__((optimize(\"O0\"), noinline, noclone))\n+__attribute__((optimize(\"Os\"), noinline, noclone))\n foo(int a)\n {\n   return a * a;"}]}