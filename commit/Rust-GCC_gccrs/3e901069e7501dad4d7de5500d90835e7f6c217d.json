{"sha": "3e901069e7501dad4d7de5500d90835e7f6c217d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5MDEwNjllNzUwMWRhZDRkN2RlNTUwMGQ5MDgzNWU3ZjZjMjE3ZA==", "commit": {"author": {"name": "Harsha Jagasia", "email": "harsha.jagasia@amd.com", "date": "2009-11-04T21:15:42Z"}, "committer": {"name": "Dwarakanath Rajagopal", "email": "dwarak@gcc.gnu.org", "date": "2009-11-04T21:15:42Z"}, "message": "invoke.texi (-mlwp): Add documentation.\n\n2009-11-04  Harsha Jagasia  <harsha.jagasia@amd.com>\n            Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n\n        * doc/invoke.texi (-mlwp): Add documentation.\n        * doc/extend.texi (x86 intrinsics): Add LWP intrinsics.\n        * config.gcc (i[34567]86-*-*): Include lwpintrin.h.\n        (x86_64-*-*): Ditto.\n        * config/i386/lwpintrin.h: New file, provide x86 compiler\n        intrinisics for LWP.\n        * config/i386/cpuid.h (bit_LWP): Define LWP bit.\n        * config/i386/x86intrin.h: Add LWP check and lwpintrin.h.\n        * config/i386/i386-c.c (ix86_target_macros_internal): Check\n        ISA_FLAG for LWP. \n        * config/i386/i386.h (TARGET_LWP): New macro for LWP.\n        * config/i386/i386.opt (-mlwp): New switch for LWP support.\n        * config/i386/i386.c (OPTION_MASK_ISA_LWP_SET): New.\n        (OPTION_MASK_ISA_LWP_UNSET): New.       \n        (ix86_handle_option): Handle -mlwp.\n        (isa_opts): Handle -mlwp.\n        (enum pta_flags): Add PTA_LWP.\n        (override_options): Add LWP support.\n        (IX86_BUILTIN_LLWPCB16): New for LWP intrinsic.\n        (IX86_BUILTIN_LLWPCB32): Ditto.\n        (IX86_BUILTIN_LLWPCB64): Ditto.\n        (IX86_BUILTIN_SLWPCB16): Ditto.\n        (IX86_BUILTIN_SLWPCB32): Ditto.\n        (IX86_BUILTIN_SLWPCB64): Ditto.\n        (IX86_BUILTIN_LWPVAL16): Ditto.\n        (IX86_BUILTIN_LWPVAL32): Ditto.\n        (IX86_BUILTIN_LWPVAL64): Ditto.\n        (IX86_BUILTIN_LWPINS16): Ditto.\n        (IX86_BUILTIN_LWPINS32): Ditto.\n        (IX86_BUILTIN_LWPINS64): Ditto.\n        (enum  ix86_special_builtin_type): Add LWP intrinsic support.\n        (builtin_description): Ditto.\n        (ix86_init_mmx_sse_builtins): Ditto.\n        (ix86_expand_special_args_builtin): Ditto.\n        * config/i386/i386.md (UNSPEC_LLWP_INTRINSIC): Add new UNSPEC\n        for LWP support.\n        (UNSPEC_SLWP_INTRINSIC): Ditto.\n        (UNSPECV_LWPVAL_INTRINSIC): Ditto.\n        (UNSPECV_LWPINS_INTRINSIC): Ditto.\n        (lwp_llwpcbhi1): New lwp pattern.\n        (lwp_llwpcbsi1): Ditto.\n        (lwp_llwpcbdi1): Ditto.\n        (lwp_slwpcbhi1): Ditto.\n        (lwp_slwpcbsi1): Ditto.\n        (lwp_slwpcbdi1): Ditto.\n        (lwp_lwpvalhi3): Ditto.\n        (lwp_lwpvalsi3): Ditto.\n        (lwp_lwpvaldi3): Ditto.\n        (lwp_lwpinshi3): Ditto.\n        (lwp_lwpinssi3): Ditto.\n        (lwp_lwpinsdi3): Ditto.\n\n\nCo-Authored-By: Dwarakanath Rajagopal <dwarak.rajagopal@amd.com>\n\nFrom-SVN: r153917", "tree": {"sha": "6735bfdcfc869ec764d7d7c03c6243158a7f9fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6735bfdcfc869ec764d7d7c03c6243158a7f9fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e901069e7501dad4d7de5500d90835e7f6c217d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e901069e7501dad4d7de5500d90835e7f6c217d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e901069e7501dad4d7de5500d90835e7f6c217d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e901069e7501dad4d7de5500d90835e7f6c217d/comments", "author": null, "committer": null, "parents": [{"sha": "6168891d1f70ad7e962dbe9cbeac6944e9473d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6168891d1f70ad7e962dbe9cbeac6944e9473d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6168891d1f70ad7e962dbe9cbeac6944e9473d97"}], "stats": {"total": 465, "additions": 457, "deletions": 8}, "files": [{"sha": "0ec0c60cf01c00df3a58d5e7ac30958bd3ca4d8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -1,3 +1,58 @@\n+2009-11-04  Harsha Jagasia  <harsha.jagasia@amd.com>\n+\t    Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n+\n+\t* doc/invoke.texi (-mlwp): Add documentation.\n+\t* doc/extend.texi (x86 intrinsics): Add LWP intrinsics.\n+\t* config.gcc (i[34567]86-*-*): Include lwpintrin.h.\n+\t(x86_64-*-*): Ditto.\n+\t* config/i386/lwpintrin.h: New file, provide x86 compiler\n+\tintrinisics for LWP.\n+\t* config/i386/cpuid.h (bit_LWP): Define LWP bit.\n+\t* config/i386/x86intrin.h: Add LWP check and lwpintrin.h.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Check\n+\tISA_FLAG for LWP. \n+\t* config/i386/i386.h (TARGET_LWP): New macro for LWP.\n+\t* config/i386/i386.opt (-mlwp): New switch for LWP support.\n+\t* config/i386/i386.c (OPTION_MASK_ISA_LWP_SET): New.\n+\t(OPTION_MASK_ISA_LWP_UNSET): New.\t\n+\t(ix86_handle_option): Handle -mlwp.\n+\t(isa_opts): Handle -mlwp.\n+\t(enum pta_flags): Add PTA_LWP.\n+\t(override_options): Add LWP support.\n+\t(IX86_BUILTIN_LLWPCB16): New for LWP intrinsic.\n+\t(IX86_BUILTIN_LLWPCB32): Ditto.\n+\t(IX86_BUILTIN_LLWPCB64): Ditto.\n+\t(IX86_BUILTIN_SLWPCB16): Ditto.\n+\t(IX86_BUILTIN_SLWPCB32): Ditto.\n+\t(IX86_BUILTIN_SLWPCB64): Ditto.\n+\t(IX86_BUILTIN_LWPVAL16): Ditto.\n+\t(IX86_BUILTIN_LWPVAL32): Ditto.\n+\t(IX86_BUILTIN_LWPVAL64): Ditto.\n+\t(IX86_BUILTIN_LWPINS16): Ditto.\n+\t(IX86_BUILTIN_LWPINS32): Ditto.\n+\t(IX86_BUILTIN_LWPINS64): Ditto.\n+\t(enum  ix86_special_builtin_type): Add LWP intrinsic support.\n+\t(builtin_description): Ditto.\n+\t(ix86_init_mmx_sse_builtins): Ditto.\n+\t(ix86_expand_special_args_builtin): Ditto.\n+\t* config/i386/i386.md (UNSPEC_LLWP_INTRINSIC): Add new UNSPEC for \n+\tLWP support.\n+\t(UNSPEC_SLWP_INTRINSIC): Ditto.\n+\t(UNSPECV_LWPVAL_INTRINSIC): Ditto.\n+\t(UNSPECV_LWPINS_INTRINSIC): Ditto.\n+\t(lwp_llwpcbhi1): New lwp pattern.\n+\t(lwp_llwpcbsi1): Ditto.\n+\t(lwp_llwpcbdi1): Ditto.\n+\t(lwp_slwpcbhi1): Ditto.\n+\t(lwp_slwpcbsi1): Ditto.\n+\t(lwp_slwpcbdi1): Ditto.\n+\t(lwp_lwpvalhi3): Ditto.\n+\t(lwp_lwpvalsi3): Ditto.\n+\t(lwp_lwpvaldi3): Ditto.\n+\t(lwp_lwpinshi3): Ditto.\n+\t(lwp_lwpinssi3): Ditto.\n+\t(lwp_lwpinsdi3): Ditto.\n+\t\n 2009-11-04  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n             Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n "}, {"sha": "1d3c3fc84f8c48aef94f403e2291c8583d791300", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -288,7 +288,7 @@ i[34567]86-*-*)\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n-\t\t       ia32intrin.h cross-stdarg.h\"\n+\t\t       ia32intrin.h cross-stdarg.h lwpintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -298,7 +298,7 @@ x86_64-*-*)\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n-\t\t       ia32intrin.h cross-stdarg.h\"\n+\t\t       ia32intrin.h cross-stdarg.h lwpintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "21f0e3184ef4cb7b0550625b702bda714add3968", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -48,6 +48,7 @@\n /* %ecx */\n #define bit_FMA4        (1 << 16) \n #define bit_LAHF_LM\t(1 << 0)\n+#define bit_LWP \t(1 << 15)\n #define bit_SSE4a\t(1 << 6)\n #define bit_XOP         (1 << 11)\n "}, {"sha": "5a5311fba0f140e7aba0dcd2cc3394a1a2b3f907", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -234,6 +234,8 @@ ix86_target_macros_internal (int isa_flag,\n     def_or_undef (parse_in, \"__FMA4__\");\n   if (isa_flag & OPTION_MASK_ISA_XOP)\n     def_or_undef (parse_in, \"__XOP__\");\n+  if (isa_flag & OPTION_MASK_ISA_LWP)\n+    def_or_undef (parse_in, \"__LWP__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE))\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))"}, {"sha": "1c064bf98d86b748f9901722d63d67c1a3874171", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 134, "deletions": 3, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -1966,6 +1966,8 @@ static int ix86_isa_flags_explicit;\n    | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_XOP_SET \\\n   (OPTION_MASK_ISA_XOP | OPTION_MASK_ISA_FMA4_SET)\n+#define OPTION_MASK_ISA_LWP_SET \\\n+  OPTION_MASK_ISA_LWP\n \n /* AES and PCLMUL need SSE2 because they use xmm registers */\n #define OPTION_MASK_ISA_AES_SET \\\n@@ -2020,6 +2022,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_FMA4_UNSET \\\n   (OPTION_MASK_ISA_FMA4 | OPTION_MASK_ISA_XOP_UNSET)\n #define OPTION_MASK_ISA_XOP_UNSET OPTION_MASK_ISA_XOP\n+#define OPTION_MASK_ISA_LWP_UNSET OPTION_MASK_ISA_LWP\n \n #define OPTION_MASK_ISA_AES_UNSET OPTION_MASK_ISA_AES\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n@@ -2280,6 +2283,19 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n+   case OPT_mlwp:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_LWP_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_LWP_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_LWP_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_LWP_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mabm:\n       if (value)\n \t{\n@@ -2409,6 +2425,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-m64\",\t\tOPTION_MASK_ISA_64BIT },\n     { \"-mfma4\",\t\tOPTION_MASK_ISA_FMA4 },\n     { \"-mxop\",\t\tOPTION_MASK_ISA_XOP },\n+    { \"-mlwp\",\t\tOPTION_MASK_ISA_LWP },\n     { \"-msse4a\",\tOPTION_MASK_ISA_SSE4A },\n     { \"-msse4.2\",\tOPTION_MASK_ISA_SSE4_2 },\n     { \"-msse4.1\",\tOPTION_MASK_ISA_SSE4_1 },\n@@ -2640,7 +2657,8 @@ override_options (bool main_args_p)\n       PTA_FMA = 1 << 19,\n       PTA_MOVBE = 1 << 20,\n       PTA_FMA4 = 1 << 21,\n-      PTA_XOP = 1 << 22\n+      PTA_XOP = 1 << 22,\n+      PTA_LWP = 1 << 23\n     };\n \n   static struct pta\n@@ -2989,6 +3007,9 @@ override_options (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_XOP\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_XOP))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_XOP;\n+\tif (processor_alias_table[i].flags & PTA_LWP\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_LWP))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_LWP;\n \tif (processor_alias_table[i].flags & PTA_ABM\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_ABM))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_ABM;\n@@ -3672,6 +3693,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     IX86_ATTR_ISA (\"ssse3\",\tOPT_mssse3),\n     IX86_ATTR_ISA (\"fma4\",\tOPT_mfma4),\n     IX86_ATTR_ISA (\"xop\",\tOPT_mxop),\n+    IX86_ATTR_ISA (\"lwp\",\tOPT_mlwp),\n \n     /* string options */\n     IX86_ATTR_STR (\"arch=\",\tIX86_FUNCTION_SPECIFIC_ARCH),\n@@ -20897,7 +20919,7 @@ enum ix86_builtins\n \n   IX86_BUILTIN_CVTUDQ2PS,\n \n-  /* FMA4 instructions.  */\n+  /* FMA4 and XOP instructions.  */\n   IX86_BUILTIN_VFMADDSS,\n   IX86_BUILTIN_VFMADDSD,\n   IX86_BUILTIN_VFMADDPS,\n@@ -21074,6 +21096,20 @@ enum ix86_builtins\n   IX86_BUILTIN_VPCOMFALSEQ,\n   IX86_BUILTIN_VPCOMTRUEQ,\n \n+  /* LWP instructions.  */\n+  IX86_BUILTIN_LLWPCB16,\n+  IX86_BUILTIN_LLWPCB32,\n+  IX86_BUILTIN_LLWPCB64,\n+  IX86_BUILTIN_SLWPCB16,\n+  IX86_BUILTIN_SLWPCB32,\n+  IX86_BUILTIN_SLWPCB64,\n+  IX86_BUILTIN_LWPVAL16,\n+  IX86_BUILTIN_LWPVAL32,\n+  IX86_BUILTIN_LWPVAL64,\n+  IX86_BUILTIN_LWPINS16,\n+  IX86_BUILTIN_LWPINS32,\n+  IX86_BUILTIN_LWPINS64,\n+\n   IX86_BUILTIN_MAX\n };\n \n@@ -21287,7 +21323,13 @@ enum ix86_special_builtin_type\n   VOID_FTYPE_PV8SF_V8SF_V8SF,\n   VOID_FTYPE_PV4DF_V4DF_V4DF,\n   VOID_FTYPE_PV4SF_V4SF_V4SF,\n-  VOID_FTYPE_PV2DF_V2DF_V2DF\n+  VOID_FTYPE_PV2DF_V2DF_V2DF,\n+  VOID_FTYPE_USHORT_UINT_USHORT,\n+  VOID_FTYPE_UINT_UINT_UINT,\n+  VOID_FTYPE_UINT64_UINT_UINT,\n+  UCHAR_FTYPE_USHORT_UINT_USHORT,\n+  UCHAR_FTYPE_UINT_UINT_UINT,\n+  UCHAR_FTYPE_UINT64_UINT_UINT\n };\n \n /* Builtin types */\n@@ -21534,6 +21576,22 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps, \"__builtin_ia32_maskstoreps\", IX86_BUILTIN_MASKSTOREPS, UNKNOWN, (int) VOID_FTYPE_PV4SF_V4SF_V4SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstorepd256, \"__builtin_ia32_maskstorepd256\", IX86_BUILTIN_MASKSTOREPD256, UNKNOWN, (int) VOID_FTYPE_PV4DF_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps256, \"__builtin_ia32_maskstoreps256\", IX86_BUILTIN_MASKSTOREPS256, UNKNOWN, (int) VOID_FTYPE_PV8SF_V8SF_V8SF },\n+\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcbhi1,   \"__builtin_ia32_llwpcb16\",   IX86_BUILTIN_LLWPCB16,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcbsi1,   \"__builtin_ia32_llwpcb32\",   IX86_BUILTIN_LLWPCB32,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcbdi1,   \"__builtin_ia32_llwpcb64\",   IX86_BUILTIN_LLWPCB64,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n+\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcbhi1,   \"__builtin_ia32_slwpcb16\",   IX86_BUILTIN_SLWPCB16,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcbsi1,   \"__builtin_ia32_slwpcb32\",   IX86_BUILTIN_SLWPCB32,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcbdi1,   \"__builtin_ia32_slwpcb64\",   IX86_BUILTIN_SLWPCB64,    UNKNOWN,     (int) VOID_FTYPE_VOID },\n+\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvalhi3,   \"__builtin_ia32_lwpval16\", IX86_BUILTIN_LWPVAL16,  UNKNOWN,     (int) VOID_FTYPE_USHORT_UINT_USHORT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvalsi3,   \"__builtin_ia32_lwpval32\", IX86_BUILTIN_LWPVAL64,  UNKNOWN,     (int) VOID_FTYPE_UINT_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpvaldi3,   \"__builtin_ia32_lwpval64\", IX86_BUILTIN_LWPVAL64,  UNKNOWN,     (int) VOID_FTYPE_UINT64_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinshi3,   \"__builtin_ia32_lwpins16\", IX86_BUILTIN_LWPINS16,  UNKNOWN,     (int) UCHAR_FTYPE_USHORT_UINT_USHORT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinssi3,   \"__builtin_ia32_lwpins32\", IX86_BUILTIN_LWPINS64,  UNKNOWN,     (int) UCHAR_FTYPE_UINT_UINT_UINT },\n+  { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_lwpinsdi3,   \"__builtin_ia32_lwpins64\", IX86_BUILTIN_LWPINS64,  UNKNOWN,     (int) UCHAR_FTYPE_UINT64_UINT_UINT },\n+\n };\n \n /* Builtins with variable number of arguments.  */\n@@ -23192,6 +23250,50 @@ ix86_init_mmx_sse_builtins (void)\n \t\t\t\tinteger_type_node,\n \t\t\t\tNULL_TREE);\n \n+  /* LWP instructions.  */\n+\n+  tree void_ftype_ushort_unsigned_ushort\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tshort_unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tshort_unsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+\n+  tree void_ftype_unsigned_unsigned_unsigned\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+\n+  tree void_ftype_uint64_unsigned_unsigned\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+\n+  tree uchar_ftype_ushort_unsigned_ushort\n+    = build_function_type_list (unsigned_char_type_node,\n+\t\t\t\tshort_unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tshort_unsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+\n+  tree uchar_ftype_unsigned_unsigned_unsigned\n+    = build_function_type_list (unsigned_char_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+\n+  tree uchar_ftype_uint64_unsigned_unsigned\n+    = build_function_type_list (unsigned_char_type_node,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tunsigned_type_node,\n+\t\t\t\tNULL_TREE);\n+\n   tree ftype;\n \n   /* Add all special builtins with variable number of operands.  */\n@@ -23305,6 +23407,25 @@ ix86_init_mmx_sse_builtins (void)\n \tcase VOID_FTYPE_PV2DF_V2DF_V2DF:\n \t  type = void_ftype_pv2df_v2df_v2df;\n \t  break;\n+\tcase VOID_FTYPE_USHORT_UINT_USHORT:\n+\t  type = void_ftype_ushort_unsigned_ushort;\n+\t  break;\n+\tcase VOID_FTYPE_UINT_UINT_UINT:\n+\t  type = void_ftype_unsigned_unsigned_unsigned;\n+\t  break;\n+\tcase VOID_FTYPE_UINT64_UINT_UINT:\n+\t  type = void_ftype_uint64_unsigned_unsigned;\n+\t  break;\n+\tcase UCHAR_FTYPE_USHORT_UINT_USHORT:\n+\t  type = uchar_ftype_ushort_unsigned_ushort;\n+\t  break;\n+\tcase UCHAR_FTYPE_UINT_UINT_UINT:\n+\t  type = uchar_ftype_unsigned_unsigned_unsigned;\n+\t  break;\n+\tcase UCHAR_FTYPE_UINT64_UINT_UINT:\n+\t  type = uchar_ftype_uint64_unsigned_unsigned;\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -25196,6 +25317,16 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       /* Reserve memory operand for target.  */\n       memory = ARRAY_SIZE (args);\n       break;\n+    case VOID_FTYPE_USHORT_UINT_USHORT:\n+    case VOID_FTYPE_UINT_UINT_UINT:\n+    case VOID_FTYPE_UINT64_UINT_UINT:\n+    case UCHAR_FTYPE_USHORT_UINT_USHORT:\n+    case UCHAR_FTYPE_UINT_UINT_UINT:\n+    case UCHAR_FTYPE_UINT64_UINT_UINT:\n+      nargs = 3;\n+      klass = store;\n+      memory = 0;\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "4bc8ef18500ead6552b4123538a44e82cdf31b57", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -56,6 +56,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_SSE4A\tOPTION_ISA_SSE4A\n #define TARGET_FMA4\tOPTION_ISA_FMA4\n #define TARGET_XOP\tOPTION_ISA_XOP\n+#define TARGET_LWP\tOPTION_ISA_LWP\n #define TARGET_ROUND\tOPTION_ISA_ROUND\n #define TARGET_ABM\tOPTION_ISA_ABM\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT"}, {"sha": "c011d9b434707e94f593b6a211717f7f981b59fb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -204,6 +204,10 @@\n    (UNSPEC_XOP_TRUEFALSE\t152)\n    (UNSPEC_XOP_PERMUTE\t\t153)\n    (UNSPEC_FRCZ\t\t\t154)\n+   (UNSPEC_LLWP_INTRINSIC\t155)\n+   (UNSPEC_SLWP_INTRINSIC\t156)\n+   (UNSPECV_LWPVAL_INTRINSIC\t157)\n+   (UNSPECV_LWPINS_INTRINSIC\t158)\n \n    ; For AES support\n    (UNSPEC_AESENC\t\t159)\n@@ -353,7 +357,7 @@\n    fmov,fop,fsgn,fmul,fdiv,fpspc,fcmov,fcmp,fxch,fistp,fisttp,frndint,\n    sselog,sselog1,sseiadd,sseiadd1,sseishft,sseimul,\n    sse,ssemov,sseadd,ssemul,ssecmp,ssecomi,ssecvt,ssecvt1,sseicvt,ssediv,sseins,\n-   ssemuladd,sse4arg,\n+   ssemuladd,sse4arg,lwp,\n    mmx,mmxmov,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"\n   (const_string \"other\"))\n \n@@ -21838,6 +21842,120 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"3\")])\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;;\n+;; LWP instructions\n+;;\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn \"lwp_llwpcbhi1\"\n+  [(unspec [(match_operand:HI 0 \"register_operand\" \"r\")]\n+  \t   UNSPEC_LLWP_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"llwpcb\\t%0\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"lwp_llwpcbsi1\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"r\")]\n+  \t   UNSPEC_LLWP_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"llwpcb\\t%0\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"lwp_llwpcbdi1\"\n+  [(unspec [(match_operand:DI 0 \"register_operand\" \"r\")]\n+  \t   UNSPEC_LLWP_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"llwpcb\\t%0\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"lwp_slwpcbhi1\"\n+  [(unspec [(match_operand:HI 0 \"register_operand\" \"r\")]\n+  \t   UNSPEC_SLWP_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"slwpcb\\t%0\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"lwp_slwpcbsi1\"\n+  [(unspec [(match_operand:SI 0 \"register_operand\" \"r\")]\n+  \t   UNSPEC_SLWP_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"slwpcb\\t%0\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"lwp_slwpcbdi1\"\n+  [(unspec [(match_operand:DI 0 \"register_operand\" \"r\")]\n+  \t   UNSPEC_SLWP_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"slwpcb\\t%0\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"lwp_lwpvalhi3\"\n+  [(unspec_volatile [(match_operand:HI 0 \"register_operand\" \"r\")\n+  \t   \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t   \t     (match_operand:HI 2 \"const_int_operand\" \"\")]\n+  \t   \t    UNSPECV_LWPVAL_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"lwp_lwpvalsi3\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")\n+    \t    \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t    \t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_LWPVAL_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"lwp_lwpvaldi3\"\n+  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")\n+  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_LWPVAL_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"lwp_lwpinshi3\"\n+  [(unspec_volatile [(match_operand:HI 0 \"register_operand\" \"r\")\n+  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:HI 2 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_LWPINS_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"lwp_lwpinssi3\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")\n+  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_LWPINS_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"lwp_lwpinsdi3\"\n+  [(unspec_volatile [(match_operand:DI 0 \"register_operand\" \"r\")\n+  \t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:SI 2 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_LWPINS_INTRINSIC)]\n+  \"TARGET_LWP\"\n+  \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"lwp\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "dd47b7d1dc5fb77cc71eab56ee6c7d61da0196da", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -318,6 +318,10 @@ mxop\n Target Report Mask(ISA_XOP) Var(ix86_isa_flags) VarExists Save\n Support XOP built-in functions and code generation \n \n+mlwp\n+Target Report Mask(ISA_LWP) Var(ix86_isa_flags) VarExists Save\n+Support LWP built-in functions and code generation \n+\n mabm\n Target Report Mask(ISA_ABM) Var(ix86_isa_flags) VarExists Save\n Support code generation of Advanced Bit Manipulation (ABM) instructions."}, {"sha": "e5137ec24f448215d92cc5158271dece75591128", "filename": "gcc/config/i386/lwpintrin.h", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Flwpintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flwpintrin.h?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -0,0 +1,109 @@\n+/* Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+# error \"Never use <lwpintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _LWPINTRIN_H_INCLUDED\n+#define _LWPINTRIN_H_INCLUDED\n+\n+#ifndef __LWP__\n+# error \"LWP instruction set not enabled\"\n+#else\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__llwpcb16 (void *pcbAddress)\n+{\n+  __builtin_ia32_llwpcb16 (pcbAddress);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__llwpcb32 (void *pcbAddress)\n+{\n+  __builtin_ia32_llwpcb32 (pcbAddress);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__llwpcb64 (void *pcbAddress)\n+{\n+  __builtin_ia32_llwpcb64 (pcbAddress);\n+}\n+\n+extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__slwpcb16 (void)\n+{\n+  return __builtin_ia32_slwpcb16 ();\n+}\n+\n+extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__slwpcb32 (void)\n+{\n+  return __builtin_ia32_slwpcb32 ();\n+}\n+\n+extern __inline void * __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__slwpcb64 (void)\n+{\n+  return __builtin_ia32_slwpcb64 ();\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lwpval16 (unsigned short data2, unsigned int data1, unsigned short flags)\n+{\n+  __builtin_ia32_lwpval16 (data2, data1, flags);\n+}\n+/*\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lwpval32 (unsigned int data2, unsigned int data1, unsigned int flags)\n+{\n+  __builtin_ia32_lwpval32 (data2, data1, flags);\n+}\n+\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lwpval64 (unsigned __int64 data2, unsigned int data1, unsigned int flags)\n+{\n+  __builtin_ia32_lwpval64 (data2, data1, flags);\n+}\n+\n+extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lwpins16 (unsigned short data2, unsigned int data1, unsigned short flags)\n+{\n+  return __builtin_ia32_lwpins16 (data2, data1, flags);\n+}\n+\n+extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lwpins32 (unsigned int data2, unsigned int data1, unsigned int flags)\n+{\n+  return __builtin_ia32_lwpins32 (data2, data1, flags);\n+}\n+\n+extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lwpins64 (unsigned __int64 data2, unsigned int data1, unsigned int flags)\n+{\n+  return __builtin_ia32_lwpins64 (data2, data1, flags);\n+}\n+*/\n+#endif /* __LWP__ */\n+\n+#endif /* _LWPINTRIN_H_INCLUDED */"}, {"sha": "465166aba6f8cdfe7069dedbb137297997cf8fea", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -62,6 +62,10 @@\n #include <xopintrin.h>\n #endif\n \n+#ifdef __LWP__\n+#include <lwpintrin.h>\n+#endif\n+\n #if defined (__AES__) || defined (__PCLMUL__)\n #include <wmmintrin.h>\n #endif"}, {"sha": "e09c9ee6685561c39652eeceb425fa4812c3cee9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -3212,6 +3212,11 @@ Enable/disable the generation of the FMA4 instructions.\n @cindex @code{target(\"xop\")} attribute\n Enable/disable the generation of the XOP instructions.\n \n+@item lwp\n+@itemx no-lwp\n+@cindex @code{target(\"lwp\")} attribute\n+Enable/disable the generation of the LWP instructions.\n+\n @item ssse3\n @itemx no-ssse3\n @cindex @code{target(\"ssse3\")} attribute\n@@ -9101,6 +9106,23 @@ v8sf __builtin_ia32_fmsubaddps256 (v8sf, v8sf, v8sf)\n \n @end smallexample\n \n+The following built-in functions are available when @option{-mlwp} is used.\n+\n+@smallexample\n+void __builtin_ia32_llwpcb16 (void *);\n+void __builtin_ia32_llwpcb32 (void *);\n+void __builtin_ia32_llwpcb64 (void *);\n+void * __builtin_ia32_llwpcb16 (void);\n+void * __builtin_ia32_llwpcb32 (void);\n+void * __builtin_ia32_llwpcb64 (void);\n+void __builtin_ia32_lwpval16 (unsigned short, unsigned int, unsigned short)\n+void __builtin_ia32_lwpval32 (unsigned int, unsigned int, unsigned int)\n+void __builtin_ia32_lwpval64 (unsigned __int64, unsigned int, unsigned int)\n+unsigned char __builtin_ia32_lwpins16 (unsigned short, unsigned int, unsigned short)\n+unsigned char __builtin_ia32_lwpins32 (unsigned int, unsigned int, unsigned int)\n+unsigned char __builtin_ia32_lwpins64 (unsigned __int64, unsigned int, unsigned int)\n+@end smallexample\n+\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "0a8911b6a56070d0a1ce082dda29914079fc1ec9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e901069e7501dad4d7de5500d90835e7f6c217d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3e901069e7501dad4d7de5500d90835e7f6c217d", "patch": "@@ -594,7 +594,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul @gol\n--msse4a -m3dnow -mpopcnt -mabm -mfma4 -mxop @gol\n+-msse4a -m3dnow -mpopcnt -mabm -mfma4 -mxop -mlwp @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n@@ -12007,6 +12007,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-fma4\n @itemx -mxop\n @itemx -mno-xop\n+@itemx -mlwp\n+@itemx -mno-lwp\n @itemx -m3dnow\n @itemx -mno-3dnow\n @itemx -mpopcnt\n@@ -12021,7 +12023,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, SSE4A, FMA4, XOP,\n-ABM or 3DNow!@: extended instruction sets.\n+LWP, ABM or 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches."}]}