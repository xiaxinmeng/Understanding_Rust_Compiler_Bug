{"sha": "c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlZjBjOTIzNGMyOWMzMzM5N2I3Njg3YmE1NGMxMjIxZmNiY2I2Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-22T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-22T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "7d2e666dc69015f866ea28852c4ff341a383893d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d2e666dc69015f866ea28852c4ff341a383893d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/comments", "author": null, "committer": null, "parents": [{"sha": "0c0bdcc60cfa0e87b3b9abc1460a7073b199d38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0bdcc60cfa0e87b3b9abc1460a7073b199d38a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0bdcc60cfa0e87b3b9abc1460a7073b199d38a"}], "stats": {"total": 351, "additions": 350, "deletions": 1}, "files": [{"sha": "fb2cecb2c99d53a19681a87160b6bffc08f97a90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,175 @@\n+2021-04-21  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/i386/darwin.h (TARGET_64BIT): Remove definition\n+\tbased on TARGET_ISA_64BIT.\n+\t(TARGET_64BIT_P): Remove definition based on\n+\tTARGET_ISA_64BIT_P().\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c (cpuset_popcount): Remove.\n+\t(init_num_threads): Remove and use hardware_concurrency.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\tPR jit/98615\n+\t* main.c (main): Call toplev::finalize in CHECKING_P mode.\n+\t* ipa-modref.c (ipa_modref_c_finalize): summaries are NULL\n+\twhen incremental LTO linking happens.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c (run_gcc): When -flto=jobserver is used, but the\n+\tmakeserver cannot be detected, then use -flto=N fallback.\n+\n+2021-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): When cross-compiling,\n+\tdefault to yes for aarch64-linux-gnu.\n+\t* configure: Regenerate.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c (cpuset_popcount): Remove.\n+\t(init_num_threads): Remove and use hardware_concurrency.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386.c: Remove superfluous || TARGET_MACHO\n+\twhich remains to be '(... || 0)' and clang complains about it.\n+\t* dwarf2out.c (AT_vms_delta): Declare conditionally.\n+\t(add_AT_vms_delta): Likewise.\n+\t* tree.c (fld_simplified_type): Use rather more common pattern\n+\tfor disabling of something (#if 0).\n+\t(get_tree_code_name): Likewise.\n+\t(verify_type_variant): Likewise.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386-expand.c (decide_alignment): Use newly named\n+\tmacro TARGET_CPU_P.\n+\t* config/i386/i386.c (ix86_decompose_address): Likewise.\n+\t(ix86_address_cost): Likewise.\n+\t(ix86_lea_outperforms): Likewise.\n+\t(ix86_avoid_lea_for_addr): Likewise.\n+\t(ix86_add_stmt_cost): Likewise.\n+\t* config/i386/i386.h (TARGET_*): Remove.\n+\t(TARGET_CPU_P): New macro.\n+\t* config/i386/i386.md: Use newly named macro TARGET_CPU_P.\n+\t* config/i386/x86-tune-sched-atom.c (do_reorder_for_imul): Likewise.\n+\t(swap_top_of_ready_list): Likewise.\n+\t(ix86_atom_sched_reorder): Likewise.\n+\t* config/i386/x86-tune-sched-bd.c (ix86_bd_has_dispatch): Likewise.\n+\t* config/i386/x86-tune-sched.c (ix86_adjust_cost): Likewise.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386-options.c (TARGET_EXPLICIT_NO_SAHF_P):\n+\tDefine.\n+\t(SET_TARGET_NO_SAHF): Likewise.\n+\t(TARGET_EXPLICIT_PREFETCH_SSE_P): Likewise.\n+\t(SET_TARGET_PREFETCH_SSE): Likewise.\n+\t(TARGET_EXPLICIT_NO_TUNE_P): Likewise.\n+\t(SET_TARGET_NO_TUNE): Likewise.\n+\t(TARGET_EXPLICIT_NO_80387_P): Likewise.\n+\t(SET_TARGET_NO_80387): Likewise.\n+\t(DEF_PTA): New.\n+\t* config/i386/i386.h (TARGET_*): Remove.\n+\t* opth-gen.awk: Generate new used macros.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386.h (PTA_*): Remove.\n+\t(enum pta_flag): New.\n+\t(DEF_PTA): Generate PTA_* values from i386-isa.def.\n+\t* config/i386/i386-isa.def: New file.\n+\n+2021-04-21  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/99988\n+\t* config/aarch64/aarch64-bti-insert.c (aarch64_bti_j_insn_p): New.\n+\t(rest_of_insert_bti): Avoid inserting duplicate bti j insns for\n+\tjump table targets.\n+\n+2021-04-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config.gcc: Install mwaitintrin.h for i[34567]86-*-* and\n+\tx86_64-*-* targets.\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_MWAIT_SET):\n+\tNew.\n+\t(OPTION_MASK_ISA2_MWAIT_UNSET): Likewise.\n+\t(ix86_handle_option): Handle -mmwait.\n+\t* config/i386/i386-builtins.c (ix86_init_mmx_sse_builtins):\n+\tReplace OPTION_MASK_ISA_SSE3 with OPTION_MASK_ISA2_MWAIT on\n+\t__builtin_ia32_monitor and __builtin_ia32_mwait.\n+\t* config/i386/i386-options.c (isa2_opts): Add -mmwait.\n+\t(ix86_valid_target_attribute_inner_p): Likewise.\n+\t(ix86_option_override_internal): Enable mwait/monitor\n+\tinstructions for -msse3.\n+\t* config/i386/i386.h (TARGET_MWAIT): New.\n+\t(TARGET_MWAIT_P): Likewise.\n+\t* config/i386/i386.opt: Add -mmwait.\n+\t* config/i386/mwaitintrin.h: New file.\n+\t* config/i386/pmmintrin.h: Include <mwaitintrin.h>.\n+\t* config/i386/sse.md (sse3_mwait): Replace TARGET_SSE3 with\n+\tTARGET_MWAIT.\n+\t(@sse3_monitor_<mode>): Likewise.\n+\t* config/i386/x86gprintrin.h: Include <mwaitintrin.h>.\n+\t* doc/extend.texi: Document mwait target attribute.\n+\t* doc/invoke.texi: Document -mmwait.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386-options.c (DEF_ENUM): Remove it.\n+\t* config/i386/i386-opts.h (DEF_ENUM): Likewise.\n+\t* config/i386/stringop.def (DEF_ENUM): Likewise.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-cfg.c (gimple_verify_flow_info): Use qD instead\n+\tof print_generic_expr.\n+\n+2021-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/100148\n+\t* cprop.c (constprop_register): Use next_nondebug_insn instead of\n+\tNEXT_INSN.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/98815\n+\t* cgraphunit.c (cgraph_node::analyze): Remove duplicate\n+\tfree_dominance_info calls.\n+\n+2021-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (maybe_fold_reference): Remove is_lhs\n+\tparameter (and assume it to be false).\n+\t(fold_gimple_assign): Adjust, remove all callers of\n+\tmaybe_fold_reference calling it with is_lhs true.\n+\t(gimple_fold_call): Likewise.\n+\t(fold_stmt_1): Likewise.\n+\n+2021-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (pedantic_non_lvalue_loc): Remove.\n+\t(fold_binary_loc): Adjust.\n+\t(fold_ternary_loc): Likewise.\n+\n+2021-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/100130\n+\t* varasm.c (get_block_for_decl): Make sure that any use of the\n+\tretain attribute matches the section's retain flag.\n+\t(switch_to_section): Check for retain mismatches even when\n+\tchanging sections, but do not warn if the given decl is the\n+\tsection's named.decl.\n+\t(output_object_block): Pass the first decl in the block (if any)\n+\tto switch_to_section.\n+\n 2021-04-20  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* config/i386/i386-c.c (ix86_target_macros_internal): Define"}, {"sha": "87bf2ffa0dbbe1785049180e94af9325b35d13e6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1 +1 @@\n-20210421\n+20210422"}, {"sha": "89cb3616e0d7bdb550c981a4dced45350aa2d01c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,24 @@\n+2021-04-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96380\n+\t* parser.c (cp_parser_enum_specifier): Don't allow defining\n+\ttypes in enum-base.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* error.c (dump_decl): Use flags in dump_generic_node call.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* error.c (dump_decl): Use flags in dump_generic_node call.\n+\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* error.c (dump_decl): Support anonymous labels.\n+\n 2021-04-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100109"}, {"sha": "de0de2e94cf29e990796574fcb1b5047234d9075", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,27 @@\n+2021-04-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_namelist): Handle depobj + mutexinoutset\n+\tin the depend clause.\n+\t(show_omp_clauses, show_omp_node, show_code_node): Handle depobj.\n+\t* gfortran.h (enum gfc_statement): Add ST_OMP_DEPOBJ.\n+\t(enum gfc_omp_depend_op): Add OMP_DEPEND_UNSET,\n+\tOMP_DEPEND_MUTEXINOUTSET and OMP_DEPEND_DEPOBJ.\n+\t(gfc_omp_clauses): Add destroy, depobj_update and depobj.\n+\t(enum gfc_exec_op): Add EXEC_OMP_DEPOBJ\n+\t* match.h (gfc_match_omp_depobj): Match 'omp depobj'.\n+\t* openmp.c (gfc_match_omp_clauses): Add depobj + mutexinoutset\n+\tto depend clause.\n+\t(gfc_match_omp_depobj, resolve_omp_clauses, gfc_resolve_omp_directive):\n+\tHandle 'omp depobj'.\n+\t* parse.c (decode_omp_directive, next_statement, gfc_ascii_statement):\n+\tLikewise.\n+\t* resolve.c (gfc_resolve_code): Likewise.\n+\t* st.c (gfc_free_statement): Likewise.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Handle depobj + mutexinoutset\n+\tin the depend clause.\n+\t(gfc_trans_omp_depobj, gfc_trans_omp_directive): Handle EXEC_OMP_DEPOBJ.\n+\t* trans.c (trans_code): Likewise.\n+\n 2021-04-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/100110"}, {"sha": "d7e47c13d96f325a3ca222b6d0cae5bc426eb954", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,66 @@\n+2021-04-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gfortran.dg/bind_c_array_params_2.f90: Look for AIX-specific call\n+\tpattern.\n+\n+2021-04-21  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/96380\n+\t* g++.dg/cpp0x/enum_base4.C: New test.\n+\t* g++.dg/cpp0x/enum_base5.C: New test.\n+\n+2021-04-21  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/99988\n+\t* gcc.target/aarch64/pr99988.c: New test.\n+\n+2021-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp1z/constexpr-lambda26.C: Add dg-additional-options\n+\t-fchecking.\n+\t* g++.dg/cpp1y/auto-fn61.C: Likewise.\n+\t* g++.dg/cpp2a/nontype-class39.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-52830.C: Likewise.\n+\t* g++.dg/cpp0x/vt-88982.C: Likewise.\n+\t* c-c++-common/goacc/kernels-decompose-ice-1.c: Add -fchecking to\n+\tdg-additional-options.\n+\t* c-c++-common/goacc/kernels-decompose-ice-2.c: Likewise.\n+\n+2021-04-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/monitor-2.c: New test.\n+\n+2021-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/100176\n+\t* g++.dg/compat/struct-layout-1_generate.c: Add missing return.\n+\t* gcc.dg/compat/struct-layout-1_generate.c: Likewise.\n+\n+2021-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/100148\n+\t* g++.dg/opt/pr100148.C: New test.\n+\n+2021-04-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/depobj-1.f90: New test.\n+\t* gfortran.dg/gomp/depobj-2.f90: New test.\n+\n+2021-04-21  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.dg/vect/pr71264.c: Xfail on IBM Z due to V4QImode support.\n+\n+2021-04-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/100130\n+\t* c-c++-common/attr-retain-10.c: New test.\n+\t* c-c++-common/attr-retain-11.c: Likewise.\n+\n+2021-04-21  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* gcc.dg/vect/bb-slp-39.c: Change number of times the pattern\n+\tmust match for target IBM Z only.\n+\n 2021-04-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100109"}, {"sha": "10ad750d34c0e0187e993218b866a730dbdd240c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,24 @@\n+2021-04-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/depobj-1.f90: Use omp_lib's\n+\tomp_depend_kind instead of defining it as 16.\n+\n+2021-04-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/lib/libgomp.exp (offload_target_to_openacc_device_type):\n+\tNew, based on check_effective_target_offload_target_nvptx.\n+\t(check_effective_target_offload_target_nvptx): Call it.\n+\t(check_effective_target_offload_target_amdgcn): New.\n+\t* testsuite/libgomp.c-c++-common/function-not-offloaded.c:\n+\tRequire target offload_target_nvptx || offload_target_amdgcn.\n+\t* testsuite/libgomp.c-c++-common/variable-not-offloaded.c: Likewise.\n+\t* testsuite/libgomp.c/pr86416-1.c: Likewise.\n+\t* testsuite/libgomp.c/pr86416-2.c: Likewise.\n+\n+2021-04-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/depobj-1.f90: New test.\n+\n 2021-04-19  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c:"}, {"sha": "4f2605c12cf99728d9de17a8748472477d81fa30", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,9 @@\n+2021-04-21  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\tPR demangler/100177\n+\t* rust-demangle.c (demangle_const_char): Properly print the\n+\tcharacter value.\n+\n 2021-03-31  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/88115"}, {"sha": "a588ad2bc97116e1a1b9d12d0a39baad0e1e94f6", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,9 @@\n+2021-04-21  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/core/thread/osthread.d (callWithStackShell): Statically\n+\tgenerate PPC and PPC64 asm implementations, and conditionally remove\n+\tPPC register names on non-Darwin targets.\n+\n 2021-04-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/98584"}, {"sha": "aeef1dc25d3682ad0d2875177a0b92b78a9a5c6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,35 @@\n+2021-04-21  Thomas Rodgers  <rodgert@twrodgers.com>\n+\n+\t* include/bits/semaphore_base.h: Always reload __old in\n+\t__atomic_semaphore::_S_do_try_acquire().\n+\t* testsuite/30_threads/stop_token/stop_callback/destroy.cc:\n+\tre-enable testcase.\n+\n+2021-04-21  Philippe Blain  <levraiphilippeblain@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/99453\n+\t* python/Makefile.am: Install libstdc++*-gdb.py more robustly.\n+\t* python/Makefile.in: Regenerate.\n+\n+2021-04-21  Thomas Rodgers  <rodgert@twrodgers.com>\n+\n+\t* include/bits/semaphore_base.h: Add missing _M_try_acquire()\n+\tmember to __platform_wait.\n+\n+2021-04-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/latch: Replace tab characters in license text.\n+\t* include/std/semaphore: Likewise.\n+\n+2021-04-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/100164\n+\t* acinclude.m4: For POSIX semaphores AC_DEFINE HAVE_POSIX_SEMAPHORE\n+\trather than _GLIBCXX_HAVE_POSIX_SEMAPHORE.\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\n 2021-04-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/30_threads/semaphore/try_acquire_for.cc: Disable"}, {"sha": "a2db24d955613a9464953c8ee3fdba88f03507f9", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ef0c9234c29c33397b7687ba54c1221fcbcb6b/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=c1ef0c9234c29c33397b7687ba54c1221fcbcb6b", "patch": "@@ -1,3 +1,7 @@\n+2021-04-21  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-plugin.c (exec_lto_wrapper): Make a temp variable.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}]}