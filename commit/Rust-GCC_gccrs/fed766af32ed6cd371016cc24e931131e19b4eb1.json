{"sha": "fed766af32ed6cd371016cc24e931131e19b4eb1", "node_id": "C_kwDOANBUbNoAKGZlZDc2NmFmMzJlZDZjZDM3MTAxNmNjMjRlOTMxMTMxZTE5YjRlYjE", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-09T11:59:39Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-10T11:55:41Z"}, "message": "lto: respect jobserver in parallel WPA streaming\n\n\tPR lto/106328\n\ngcc/ChangeLog:\n\n\t* opts-jobserver.h (struct jobserver_info): Add pipefd.\n\t(jobserver_info::connect): New.\n\t(jobserver_info::disconnect): Likewise.\n\t(jobserver_info::get_token): Likewise.\n\t(jobserver_info::return_token): Likewise.\n\t* opts-common.cc: Implement the new functions.\n\ngcc/lto/ChangeLog:\n\n\t* lto.cc (wait_for_child): Decrement nruns once a process\n\tfinishes.\n\t(stream_out_partitions): Use job server if active.\n\t(do_whole_program_analysis): Likewise.", "tree": {"sha": "7c11e7ed5c269fc55818fc137cb01bb51803c08e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c11e7ed5c269fc55818fc137cb01bb51803c08e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed766af32ed6cd371016cc24e931131e19b4eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed766af32ed6cd371016cc24e931131e19b4eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed766af32ed6cd371016cc24e931131e19b4eb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed766af32ed6cd371016cc24e931131e19b4eb1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53e3b2bf16a486c15c20991c6095f7be09012b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53e3b2bf16a486c15c20991c6095f7be09012b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53e3b2bf16a486c15c20991c6095f7be09012b55"}], "stats": {"total": 112, "additions": 98, "deletions": 14}, "files": [{"sha": "c82307f4f7e696bed64adc2787193c7f1bfeb9a4", "filename": "gcc/lto/lto.cc", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed766af32ed6cd371016cc24e931131e19b4eb1/gcc%2Flto%2Flto.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed766af32ed6cd371016cc24e931131e19b4eb1/gcc%2Flto%2Flto.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.cc?ref=fed766af32ed6cd371016cc24e931131e19b4eb1", "patch": "@@ -18,6 +18,7 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+#define INCLUDE_STRING\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -54,11 +55,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"builtins.h\"\n #include \"lto-common.h\"\n+#include \"opts-jobserver.h\"\n \n-\n-/* Number of parallel tasks to run, -1 if we want to use GNU Make jobserver.  */\n+/* Number of parallel tasks to run.  */\n static int lto_parallelism;\n \n+/* Number of active WPA streaming processes.  */\n+static int nruns = 0;\n+\n+/* GNU make's jobserver info.  */\n+static jobserver_info *jinfo = NULL;\n+\n /* Return true when NODE has a clone that is analyzed (i.e. we need\n    to load its body even if the node itself is not needed).  */\n \n@@ -205,6 +212,12 @@ wait_for_child ()\n \t\t     \"streaming subprocess was killed by signal\");\n     }\n   while (!WIFEXITED (status) && !WIFSIGNALED (status));\n+\n+    --nruns;\n+\n+    /* Return token to the jobserver if active.  */\n+    if (jinfo != NULL && jinfo->is_active)\n+      jinfo->return_token ();\n }\n #endif\n \n@@ -228,25 +241,35 @@ stream_out_partitions (char *temp_filename, int blen, int min, int max,\n \t\t       bool ARG_UNUSED (last))\n {\n #ifdef HAVE_WORKING_FORK\n-  static int nruns;\n-\n   if (lto_parallelism <= 1)\n     {\n       stream_out_partitions_1 (temp_filename, blen, min, max);\n       return;\n     }\n \n-  /* Do not run more than LTO_PARALLELISM streamings\n-     FIXME: we ignore limits on jobserver.  */\n   if (lto_parallelism > 0 && nruns >= lto_parallelism)\n-    {\n-      wait_for_child ();\n-      nruns --;\n-    }\n+    wait_for_child ();\n+\n   /* If this is not the last parallel partition, execute new\n      streaming process.  */\n   if (!last)\n     {\n+      if (jinfo != NULL && jinfo->is_active)\n+\twhile (true)\n+\t  {\n+\t    if (jinfo->get_token ())\n+\t      break;\n+\t    if (nruns > 0)\n+\t      wait_for_child ();\n+\t    else\n+\t      {\n+\t\t/* There are no free tokens, lets do the job outselves.  */\n+\t\tstream_out_partitions_1 (temp_filename, blen, min, max);\n+\t\tasm_nodes_output = true;\n+\t\treturn;\n+\t      }\n+\t  }\n+\n       pid_t cpid = fork ();\n \n       if (!cpid)\n@@ -264,10 +287,12 @@ stream_out_partitions (char *temp_filename, int blen, int min, int max,\n   /* Last partition; stream it and wait for all children to die.  */\n   else\n     {\n-      int i;\n       stream_out_partitions_1 (temp_filename, blen, min, max);\n-      for (i = 0; i < nruns; i++)\n+      while (nruns > 0)\n \twait_for_child ();\n+\n+      if (jinfo != NULL && jinfo->is_active)\n+\tjinfo->disconnect ();\n     }\n   asm_nodes_output = true;\n #else\n@@ -460,9 +485,14 @@ do_whole_program_analysis (void)\n \n   lto_parallelism = 1;\n \n-  /* TODO: jobserver communication is not supported, yet.  */\n   if (!strcmp (flag_wpa, \"jobserver\"))\n-    lto_parallelism = param_max_lto_streaming_parallelism;\n+    {\n+      jinfo = new jobserver_info ();\n+      if (jinfo->is_active)\n+\tjinfo->connect ();\n+\n+      lto_parallelism = param_max_lto_streaming_parallelism;\n+    }\n   else\n     {\n       lto_parallelism = atoi (flag_wpa);"}, {"sha": "5d79f174a3896357ce9935efb2767b9dc808ddca", "filename": "gcc/opts-common.cc", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed766af32ed6cd371016cc24e931131e19b4eb1/gcc%2Fopts-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed766af32ed6cd371016cc24e931131e19b4eb1/gcc%2Fopts-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.cc?ref=fed766af32ed6cd371016cc24e931131e19b4eb1", "patch": "@@ -2059,3 +2059,43 @@ jobserver_info::jobserver_info ()\n   if (!error_msg.empty ())\n     error_msg = \"jobserver is not available: \" + error_msg;\n }\n+\n+void\n+jobserver_info::connect ()\n+{\n+  if (!pipe_path.empty ())\n+    pipefd = open (pipe_path.c_str (), O_RDWR);\n+}\n+\n+void\n+jobserver_info::disconnect ()\n+{\n+  if (!pipe_path.empty ())\n+    {\n+      gcc_assert (close (pipefd) == 0);\n+      pipefd = -1;\n+    }\n+}\n+\n+bool\n+jobserver_info::get_token ()\n+{\n+  int fd = pipe_path.empty () ? rfd : pipefd;\n+  char c;\n+  unsigned n = read (fd, &c, 1);\n+  if (n != 1)\n+    {\n+      gcc_assert (errno == EAGAIN);\n+      return false;\n+    }\n+  else\n+    return true;\n+}\n+\n+void\n+jobserver_info::return_token ()\n+{\n+  int fd = pipe_path.empty () ? wfd : pipefd;\n+  char c = 'G';\n+  gcc_assert (write (fd, &c, 1) == 1);\n+}"}, {"sha": "76c1d9b2882165c52eda444979960638e5388a0f", "filename": "gcc/opts-jobserver.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed766af32ed6cd371016cc24e931131e19b4eb1/gcc%2Fopts-jobserver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed766af32ed6cd371016cc24e931131e19b4eb1/gcc%2Fopts-jobserver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-jobserver.h?ref=fed766af32ed6cd371016cc24e931131e19b4eb1", "patch": "@@ -29,6 +29,18 @@ struct jobserver_info\n   /* Default constructor.  */\n   jobserver_info ();\n \n+  /* Connect to the server.  */\n+  void connect ();\n+\n+  /* Disconnect from the server.  */\n+  void disconnect ();\n+\n+  /* Get token from the server.  */\n+  bool get_token ();\n+\n+  /* Return token to the server.  */\n+  void return_token ();\n+\n   /* Error message if there is a problem.  */\n   string error_msg = \"\";\n   /* Skipped MAKEFLAGS where --jobserver-auth is skipped.  */\n@@ -39,6 +51,8 @@ struct jobserver_info\n   int wfd = -1;\n   /* Named pipe path.  */\n   string pipe_path = \"\";\n+  /* Pipe file descriptor.  */\n+  int pipefd = -1;\n   /* Return true if jobserver is active.  */\n   bool is_active = false;\n };"}]}