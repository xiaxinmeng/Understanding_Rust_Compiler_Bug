{"sha": "5031afa79c48e8ce5a13bc3dab94fbc4b0064607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAzMWFmYTc5YzQ4ZThjZTVhMTNiYzNkYWI5NGZiYzRiMDA2NDYwNw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-13T14:56:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-13T14:56:44Z"}, "message": "(record_giv): When computing replaceable, use\nback_branch_in_range_p instead of looking for branches to named\nlabels.\n\nFrom-SVN: r9675", "tree": {"sha": "f35ba9f5475e4d1f0aaaebb1785eb23003f4652c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35ba9f5475e4d1f0aaaebb1785eb23003f4652c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5031afa79c48e8ce5a13bc3dab94fbc4b0064607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5031afa79c48e8ce5a13bc3dab94fbc4b0064607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5031afa79c48e8ce5a13bc3dab94fbc4b0064607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5031afa79c48e8ce5a13bc3dab94fbc4b0064607/comments", "author": null, "committer": null, "parents": [{"sha": "bdaae9a01aee53dd13918136baeb693323356aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaae9a01aee53dd13918136baeb693323356aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdaae9a01aee53dd13918136baeb693323356aa3"}], "stats": {"total": 48, "additions": 9, "deletions": 39}, "files": [{"sha": "f67d6535231a165d88736908fc79bb5181160ba6", "filename": "gcc/loop.c", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5031afa79c48e8ce5a13bc3dab94fbc4b0064607/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5031afa79c48e8ce5a13bc3dab94fbc4b0064607/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=5031afa79c48e8ce5a13bc3dab94fbc4b0064607", "patch": "@@ -4418,46 +4418,16 @@ record_giv (v, insn, src_reg, dest_reg, mult_val, add_val, benefit,\n  \t\t}\n \t    }\n \n-\t  /* Check each insn between the first and last use of the giv,\n-\t     and fail if any of them are branches that jump to a named label\n-\t     outside this range, but still inside the loop.  This catches\n-\t     cases of spaghetti code where the execution order of insns\n-\t     is not linear, and hence the above test fails.  For example,\n-\t     in the following code, j is not replaceable:\n-\t     for (i = 0; i < 100; )\t {\n-\t     L0:\tj = 4*i; goto L1;\n-\t     L2:\tk = j;\t goto L3;\n-\t     L1:\ti++;\t goto L2;\n-\t     L3:\t;\t }\n-\t     printf (\"k = %d\\n\", k); }\n-\t     This test is conservative, but this test succeeds rarely enough\n-\t     that it isn't a problem.  See also check_final_value below.  */\n-\n+\t  /* If there are any backwards branches that go from after the\n+\t     biv update to before it, then this giv is not replaceable.  */\n \t  if (v->replaceable)\n-\t    for (p = insn;\n-\t\t INSN_UID (p) >= max_uid_for_loop\n-\t\t || INSN_LUID (p) < uid_luid[regno_last_uid[REGNO (dest_reg)]];\n-\t\t p = NEXT_INSN (p))\n-\t      {\n-\t\tif (GET_CODE (p) == JUMP_INSN && JUMP_LABEL (p)\n-\t\t    && LABEL_NAME (JUMP_LABEL (p))\n-\t\t    && ((INSN_LUID (JUMP_LABEL (p)) > INSN_LUID (loop_start)\n-\t\t\t && (INSN_LUID (JUMP_LABEL (p))\n-\t\t\t     < uid_luid[regno_first_uid[REGNO (dest_reg)]]))\n-\t\t\t|| (INSN_LUID (JUMP_LABEL (p)) < INSN_LUID (loop_end)\n-\t\t\t    && (INSN_LUID (JUMP_LABEL (p))\n-\t\t\t\t> uid_luid[regno_last_uid[REGNO (dest_reg)]]))))\n-\t\t  {\n-\t\t    v->replaceable = 0;\n-\t\t    v->not_replaceable = 1;\n-\n-\t\t    if (loop_dump_stream)\n-\t\t      fprintf (loop_dump_stream,\n-\t\t\t       \"Found branch outside giv lifetime.\\n\");\n-\n-\t\t    break;\n-\t\t  }\n-\t      }\n+\t    for (b = bl->biv; b; b = b->next_iv)\n+\t      if (back_branch_in_range_p (b->insn, loop_start, loop_end))\n+\t\t{\n+\t\t  v->replaceable = 0;\n+\t\t  v->not_replaceable = 1;\n+\t\t  break;\n+\t\t}\n \t}\n       else\n \t{"}]}