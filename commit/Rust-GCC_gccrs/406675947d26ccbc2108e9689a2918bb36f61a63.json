{"sha": "406675947d26ccbc2108e9689a2918bb36f61a63", "node_id": "C_kwDOANBUbNoAKDQwNjY3NTk0N2QyNmNjYmMyMTA4ZTk2ODlhMjkxOGJiMzZmNjFhNjM", "commit": {"author": {"name": "Kong Lingling", "email": "lingling.kong@intel.com", "date": "2021-09-29T01:48:20Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2022-10-21T02:41:32Z"}, "message": "Support Intel AVX-VNNI-INT8\n\ngcc/ChangeLog\n\n\t* common/config/i386/cpuinfo.h (get_available_features): Detect\n\tavxvnniint8.\n\t* common/config/i386/i386-common.cc\n\t(OPTION_MASK_ISA2_AVXVNNIINT8_SET): New.\n\t(OPTION_MASK_ISA2_AVXVNNIINT8_UNSET): Ditto.\n\t(ix86_handle_option): Handle -mavxvnniint8.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_AVXVNNIINT8.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\tavxvnniint8.\n\t* config.gcc: Add avxvnniint8intrin.h.\n\t* config/i386/avxvnniint8intrin.h: New file.\n\t* config/i386/cpuid.h (bit_AVXVNNIINT8): New.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__AVXVNNIINT8__.\n\t* config/i386/i386-options.cc (isa2_opts): Add -mavxvnniint8.\n\t(ix86_valid_target_attribute_inner_p): Handle avxvnniint8.\n\t* config/i386/i386-isa.def: Add DEF_PTA(AVXVNNIINT8) New..\n\t* config/i386/i386.opt: Add option -mavxvnniint8.\n\t* config/i386/immintrin.h: Include avxvnniint8intrin.h.\n\t* config/i386/sse.md (UNSPEC_VPMADDUBSWACCD\n\tUNSPEC_VPMADDUBSWACCSSD,UNSPEC_VPMADDWDACCD,\n\tUNSPEC_VPMADDWDACCSSD): Rename according to new style.\n\t(vpdp<vpdotprodtype>_<mode>): New define_insn.\n\t* doc/extend.texi: Document avxvnniint8.\n\t* doc/invoke.texi: Document -mavxvnniint8.\n\t* doc/sourcebuild.texi: Document target avxvnniint8.\n\ngcc/testsuite/ChangeLog\n\n\t* g++.dg/other/i386-2.C: Add -mavxvnniint8.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/avx-check.h: Add avxvnniint8 check.\n\t* gcc.target/i386/sse-12.c: Add -mavxvnniint8.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* lib/target-supports.exp\n\t(check_effective_target_avxvnniint8): New.\n\t* gcc.target/i386/avxvnniint8-1.c: Ditto.\n\t* gcc.target/i386/avxvnniint8-vpdpbssd-2.c: Ditto.\n\t* gcc.target/i386/avxvnniint8-vpdpbssds-2.c: Ditto.\n\t* gcc.target/i386/avxvnniint8-vpdpbsud-2.c: Ditto.\n\t* gcc.target/i386/avxvnniint8-vpdpbsuds-2.c: Ditto.\n\t* gcc.target/i386/avxvnniint8-vpdpbuud-2.c: Ditto.\n\t* gcc.target/i386/avxvnniint8-vpdpbuuds-2.c: Ditto.\n\nCo-authored-by: Hongyu Wang <hongyu.wang@intel.com>\nCo-authored-by: Haochen Jiang <haochen.jiang@intel.com>", "tree": {"sha": "232d9247c4900cd20561bddfee16c24183b6e145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/232d9247c4900cd20561bddfee16c24183b6e145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/406675947d26ccbc2108e9689a2918bb36f61a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406675947d26ccbc2108e9689a2918bb36f61a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406675947d26ccbc2108e9689a2918bb36f61a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406675947d26ccbc2108e9689a2918bb36f61a63/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825d0041380378d978dfed6ea313e2ff9d2fce4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/825d0041380378d978dfed6ea313e2ff9d2fce4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/825d0041380378d978dfed6ea313e2ff9d2fce4c"}], "stats": {"total": 792, "additions": 758, "deletions": 34}, "files": [{"sha": "bed88003f8ef2397be5ec37e348d1bcac475d61e", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -795,6 +795,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t    set_feature (FEATURE_AVXVNNI);\n \t  if (eax & bit_AVXIFMA)\n \t    set_feature (FEATURE_AVXIFMA);\n+\t  if (edx & bit_AVXVNNIINT8)\n+\t    set_feature (FEATURE_AVXVNNIINT8);\n \t}\n       if (avx512_usable)\n \t{"}, {"sha": "6a2a7e3d25a0819eb2195f45d273b4ac477936bc", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -108,6 +108,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_TILE_SET OPTION_MASK_ISA2_AMX_TILE\n #define OPTION_MASK_ISA2_AMX_INT8_SET OPTION_MASK_ISA2_AMX_INT8\n #define OPTION_MASK_ISA2_AMX_BF16_SET OPTION_MASK_ISA2_AMX_BF16\n+#define OPTION_MASK_ISA2_AVXVNNIINT8_SET OPTION_MASK_ISA2_AVXVNNIINT8\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -214,7 +215,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX2 | OPTION_MASK_ISA_AVX512F_UNSET)\n #define OPTION_MASK_ISA2_AVX2_UNSET \\\n   (OPTION_MASK_ISA2_AVXIFMA_UNSET | OPTION_MASK_ISA2_AVXVNNI_UNSET \\\n-   | OPTION_MASK_ISA2_AVX512F_UNSET)\n+   | OPTION_MASK_ISA2_AVXVNNIINT8_UNSET | OPTION_MASK_ISA2_AVX512F_UNSET)\n #define OPTION_MASK_ISA_AVX512F_UNSET \\\n   (OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_AVX512CD_UNSET \\\n    | OPTION_MASK_ISA_AVX512PF_UNSET | OPTION_MASK_ISA_AVX512ER_UNSET \\\n@@ -278,6 +279,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_KL_UNSET \\\n   (OPTION_MASK_ISA2_KL | OPTION_MASK_ISA2_WIDEKL_UNSET)\n #define OPTION_MASK_ISA2_WIDEKL_UNSET OPTION_MASK_ISA2_WIDEKL\n+#define OPTION_MASK_ISA2_AVXVNNIINT8_UNSET OPTION_MASK_ISA2_AVXVNNIINT8\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1142,6 +1144,24 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavxvnniint8:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVXVNNIINT8_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |=\n+\t    OPTION_MASK_ISA2_AVXVNNIINT8_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &=\n+\t    ~OPTION_MASK_ISA2_AVXVNNIINT8_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |=\n+\t    OPTION_MASK_ISA2_AVXVNNIINT8_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "9a6b92fab799457233627f11d1bb309d7d32f8c6", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -241,6 +241,7 @@ enum processor_features\n   FEATURE_X86_64_V3,\n   FEATURE_X86_64_V4,\n   FEATURE_AVXIFMA,\n+  FEATURE_AVXVNNIINT8,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "8c1f351056c6457adb50593c4713cba0cd4d2c7c", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -176,4 +176,6 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"x86-64-v3\", FEATURE_X86_64_V3, P_X86_64_V3, NULL)\n   ISA_NAMES_TABLE_ENTRY(\"x86-64-v4\", FEATURE_X86_64_V4, P_X86_64_V4, NULL)\n   ISA_NAMES_TABLE_ENTRY(\"avxifma\", FEATURE_AVXIFMA, P_NONE, \"-mavxifma\")\n+  ISA_NAMES_TABLE_ENTRY(\"avxvnniint8\", FEATURE_AVXVNNIINT8,\n+\t\t\tP_NONE, \"-mavxvnniint8\")\n ISA_NAMES_TABLE_END"}, {"sha": "3950b41690388347aa08d6629164192453183b6f", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -422,7 +422,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n-\t\t       avxifmaintrin.h\"\n+\t\t       avxifmaintrin.h avxvnniint8intrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "362e6f65c2ad9da3ea9cdd730176584e7032c67e", "filename": "gcc/config/i386/avxvnniint8intrin.h", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Favxvnniint8intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Favxvnniint8intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxvnniint8intrin.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avxvnniint8vlintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVXVNNIINT8INTRIN_H_INCLUDED\n+#define _AVXVNNIINT8INTRIN_H_INCLUDED\n+\n+#if !defined(__AVXVNNIINT8__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avxvnniint8\")\n+#define __DISABLE_AVXVNNIINT8__\n+#endif /* __AVXVNNIINT8__ */\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbssd_epi32 (__m128i __W, __m128i __A, __m128i __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vpdpbssd128 ((__v4si) __W, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbssds_epi32 (__m128i __W, __m128i __A, __m128i __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vpdpbssds128 ((__v4si) __W, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbsud_epi32 (__m128i __W, __m128i __A, __m128i __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vpdpbsud128 ((__v4si) __W, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbsuds_epi32 (__m128i __W, __m128i __A, __m128i __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vpdpbsuds128 ((__v4si) __W, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbuud_epi32 (__m128i __W, __m128i __A, __m128i __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vpdpbuud128 ((__v4si) __W, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpbuuds_epi32 (__m128i __W, __m128i __A, __m128i __B)\n+{\n+  return (__m128i)\n+    __builtin_ia32_vpdpbuuds128 ((__v4si) __W, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbssd_epi32 (__m256i __W, __m256i __A, __m256i __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vpdpbssd256 ((__v8si) __W, (__v8si) __A, (__v8si) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbssds_epi32 (__m256i __W, __m256i __A, __m256i __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vpdpbssds256 ((__v8si) __W, (__v8si) __A, (__v8si) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbsud_epi32 (__m256i __W, __m256i __A, __m256i __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vpdpbsud256 ((__v8si) __W, (__v8si) __A, (__v8si) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbsuds_epi32 (__m256i __W, __m256i __A, __m256i __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vpdpbsuds256 ((__v8si) __W, (__v8si) __A, (__v8si) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbuud_epi32 (__m256i __W, __m256i __A, __m256i __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vpdpbuud256 ((__v8si) __W, (__v8si) __A, (__v8si) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpbuuds_epi32 (__m256i __W, __m256i __A, __m256i __B)\n+{\n+  return (__m256i)\n+    __builtin_ia32_vpdpbuuds256 ((__v8si) __W, (__v8si) __A, (__v8si) __B);\n+}\n+\n+#ifdef __DISABLE_AVXVNNIINT8__\n+#undef __DISABLE_AVXVNNIINT8__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVXVNNIINT8__ */\n+\n+#endif /* __AVXVNNIINT8INTRIN_H_INCLUDED */"}, {"sha": "f5fad22149a3d754ebb1fbe57a0cd25a635a4733", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -49,6 +49,7 @@\n #define bit_RDRND\t(1 << 30)\n \n /* %edx */\n+#define bit_AVXVNNIINT8 (1 << 4)\n #define bit_CMPXCHG8B\t(1 << 8)\n #define bit_CMOV\t(1 << 15)\n #define bit_MMX\t\t(1 << 23)"}, {"sha": "e35306e27d003f60c153da5cedee100233dbaf4d", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -2694,6 +2694,20 @@ BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_A\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v4si_mask, \"__builtin_ia32_vpdpwssds_v4si_mask\", IX86_BUILTIN_VPDPWSSDSV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpdpwssds_v4si_maskz, \"__builtin_ia32_vpdpwssds_v4si_maskz\", IX86_BUILTIN_VPDPWSSDSV4SI_MASKZ, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI_UQI)\n \n+/* AVXVNNIINT8 */\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbssd_v8si, \"__builtin_ia32_vpdpbssd256\", IX86_BUILTIN_VPDPBSSDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbssds_v8si, \"__builtin_ia32_vpdpbssds256\", IX86_BUILTIN_VPDPBSSDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbsud_v8si, \"__builtin_ia32_vpdpbsud256\", IX86_BUILTIN_VPDPBSUDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbsuds_v8si, \"__builtin_ia32_vpdpbsuds256\", IX86_BUILTIN_VPDPBSUDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbuud_v8si, \"__builtin_ia32_vpdpbuud256\", IX86_BUILTIN_VPDPBUUDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbuuds_v8si, \"__builtin_ia32_vpdpbuuds256\", IX86_BUILTIN_VPDPBUUDSV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbssd_v4si, \"__builtin_ia32_vpdpbssd128\", IX86_BUILTIN_VPDPBSSDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbssds_v4si, \"__builtin_ia32_vpdpbssds128\", IX86_BUILTIN_VPDPBSSDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbsud_v4si, \"__builtin_ia32_vpdpbsud128\", IX86_BUILTIN_VPDPBSUDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbsuds_v4si, \"__builtin_ia32_vpdpbsuds128\", IX86_BUILTIN_VPDPBSUDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbuud_v4si, \"__builtin_ia32_vpdpbuud128\", IX86_BUILTIN_VPDPBUUDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+BDESC (0, OPTION_MASK_ISA2_AVXVNNIINT8, CODE_FOR_vpdpbuuds_v4si, \"__builtin_ia32_vpdpbuuds128\", IX86_BUILTIN_VPDPBUUDSV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI)\n+\n /* VPCLMULQDQ */\n BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_vpclmulqdq_v2di, \"__builtin_ia32_vpclmulqdq_v2di\", IX86_BUILTIN_VPCLMULQDQ2, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX, 0, CODE_FOR_vpclmulqdq_v4di, \"__builtin_ia32_vpclmulqdq_v4di\", IX86_BUILTIN_VPCLMULQDQ4, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)"}, {"sha": "a9a35c0a18a64b3dcaefaec2f8bfd4481479c864", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -635,6 +635,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVXVNNI__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AVXIFMA)\n     def_or_undef (parse_in, \"__AVXIFMA__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AVXVNNIINT8)\n+    def_or_undef (parse_in, \"__AVXVNNIINT8__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "c95b917c6cefd802e5c6db7645343946e7c344f9", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -110,3 +110,4 @@ DEF_PTA(WIDEKL)\n DEF_PTA(AVXVNNI)\n DEF_PTA(AVX512FP16)\n DEF_PTA(AVXIFMA)\n+DEF_PTA(AVXVNNIINT8)"}, {"sha": "3e6d04433a656a81743ce2ba64357f9a14c023c7", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -227,7 +227,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mwidekl\", \tOPTION_MASK_ISA2_WIDEKL },\n   { \"-mavxvnni\",\tOPTION_MASK_ISA2_AVXVNNI },\n   { \"-mavx512fp16\",\tOPTION_MASK_ISA2_AVX512FP16 },\n-  { \"-mavxifma\",\tOPTION_MASK_ISA2_AVXIFMA }\n+  { \"-mavxifma\",\tOPTION_MASK_ISA2_AVXIFMA },\n+  { \"-mavxvnniint8\",\tOPTION_MASK_ISA2_AVXVNNIINT8 }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1074,6 +1075,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avxvnni\",   OPT_mavxvnni),\n     IX86_ATTR_ISA (\"avx512fp16\", OPT_mavx512fp16),\n     IX86_ATTR_ISA (\"avxifma\", OPT_mavxifma),\n+    IX86_ATTR_ISA (\"avxvnniint8\", OPT_mavxvnniint8),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "53d534f63923663eb6e5d615fc458cb30db9aa4a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -1219,3 +1219,8 @@ mavxifma\n Target Mask(ISA2_AVXIFMA) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n AVXIFMA built-in functions and code generation.\n+\n+mavxvnniint8\n+Target Mask(ISA2_AVXVNNIINT8) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and\n+AVXVNNIINT8 built-in functions and code generation."}, {"sha": "ddea249d09b86da319606ef69acbf924df8c4018", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -46,6 +46,8 @@\n \n #include <avxifmaintrin.h>\n \n+#include <avxvnniint8intrin.h>\n+\n #include <avx2intrin.h>\n \n #include <avx512fintrin.h>"}, {"sha": "014b0b220bd0df2c782a02500505f9723cdc30f8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 51, "deletions": 20, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -166,10 +166,10 @@\n   UNSPEC_VPSHLDV\n \n   ;; For AVX512VNNI support\n-  UNSPEC_VPMADDUBSWACCD\n-  UNSPEC_VPMADDUBSWACCSSD\n-  UNSPEC_VPMADDWDACCD\n-  UNSPEC_VPMADDWDACCSSD\n+  UNSPEC_VPDPBUSD\n+  UNSPEC_VPDPBUSDS\n+  UNSPEC_VPDPWSSD\n+  UNSPEC_VPDPWSSDS\n \n   ;; For VAES support\n   UNSPEC_VAESDEC\n@@ -200,6 +200,13 @@\n   UNSPEC_COMPLEX_FCMUL\n   UNSPEC_COMPLEX_MASK\n \n+  ;; For AVX-VNNI-INT8 support\n+  UNSPEC_VPDPBSSD\n+  UNSPEC_VPDPBSSDS\n+  UNSPEC_VPDPBSUD\n+  UNSPEC_VPDPBSUDS\n+  UNSPEC_VPDPBUUD\n+  UNSPEC_VPDPBUUDS\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -28535,7 +28542,7 @@\n \t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n \t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n \t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPMADDUBSWACCD))]\n+\t  UNSPEC_VPDPBUSD))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpbusd\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr (\"prefix\") (\"evex\"))])\n@@ -28546,7 +28553,7 @@\n \t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n \t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n \t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n-\t  UNSPEC_VPMADDUBSWACCD))]\n+\t  UNSPEC_VPDPBUSD))]\n   \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n   \"@\n   %{vex%} vpdpbusd\\t{%3, %2, %0|%0, %2, %3}\n@@ -28561,7 +28568,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDUBSWACCD)\n+\t    UNSPEC_VPDPBUSD)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28590,7 +28597,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n-\t    ] UNSPEC_VPMADDUBSWACCD)\n+\t    ] UNSPEC_VPDPBUSD)\n \t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28603,7 +28610,7 @@\n \t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n \t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n \t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPMADDUBSWACCSSD))]\n+\t  UNSPEC_VPDPBUSDS))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpbusds\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr (\"prefix\") (\"evex\"))])\n@@ -28614,7 +28621,7 @@\n \t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n \t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n \t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n-\t  UNSPEC_VPMADDUBSWACCSSD))]\n+\t  UNSPEC_VPDPBUSDS))]\n   \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n   \"@\n    %{vex%} vpdpbusds\\t{%3, %2, %0|%0, %2, %3}\n@@ -28629,7 +28636,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDUBSWACCSSD)\n+\t    UNSPEC_VPDPBUSDS)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28658,7 +28665,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDUBSWACCSSD)\n+\t    UNSPEC_VPDPBUSDS)\n \t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28671,7 +28678,7 @@\n \t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n \t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n \t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPMADDWDACCD))]\n+\t  UNSPEC_VPDPWSSD))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpwssd\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr (\"prefix\") (\"evex\"))])\n@@ -28682,7 +28689,7 @@\n \t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n \t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n \t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n-\t  UNSPEC_VPMADDWDACCD))]\n+\t  UNSPEC_VPDPWSSD))]\n   \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n   \"@\n   %{vex%} vpdpwssd\\t{%3, %2, %0|%0, %2, %3}\n@@ -28697,7 +28704,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDWDACCD)\n+\t    UNSPEC_VPDPWSSD)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28726,7 +28733,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDWDACCD)\n+\t    UNSPEC_VPDPWSSD)\n \t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28739,7 +28746,7 @@\n \t  [(match_operand:V16SI 1 \"register_operand\" \"0\")\n \t   (match_operand:V16SI 2 \"register_operand\" \"v\")\n \t   (match_operand:V16SI 3 \"nonimmediate_operand\" \"vm\")]\n-\t  UNSPEC_VPMADDWDACCSSD))]\n+\t  UNSPEC_VPDPWSSDS))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpwssds\\t{%3, %2, %0|%0, %2, %3}\"\n   [(set_attr (\"prefix\") (\"evex\"))])\n@@ -28750,7 +28757,7 @@\n \t  [(match_operand:VI4_AVX2 1 \"register_operand\" \"0,0\")\n \t   (match_operand:VI4_AVX2 2 \"register_operand\" \"x,v\")\n \t   (match_operand:VI4_AVX2 3 \"nonimmediate_operand\" \"xm,vm\")]\n-\t  UNSPEC_VPMADDWDACCSSD))]\n+\t  UNSPEC_VPDPWSSDS))]\n   \"TARGET_AVXVNNI || (TARGET_AVX512VNNI && TARGET_AVX512VL)\"\n   \"@\n   %{vex%} vpdpwssds\\t{%3, %2, %0|%0, %2, %3}\n@@ -28765,7 +28772,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDWDACCSSD)\n+\t    UNSPEC_VPDPWSSDS)\n \t  (match_dup 1)\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -28794,7 +28801,7 @@\n \t    [(match_operand:VI4_AVX512VL 1 \"register_operand\" \"0\")\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n-\t    UNSPEC_VPMADDWDACCSSD)\n+\t    UNSPEC_VPDPWSSDS)\n \t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n@@ -29235,3 +29242,27 @@\n     gcc_unreachable ();\n   DONE;\n })\n+\n+(define_int_iterator VPDOTPROD\n+  [UNSPEC_VPDPBSSD\n+   UNSPEC_VPDPBSSDS\n+   UNSPEC_VPDPBSUD\n+   UNSPEC_VPDPBSUDS\n+   UNSPEC_VPDPBUUD\n+   UNSPEC_VPDPBUUDS])\n+\n+(define_int_attr vpdotprodtype\n+  [(UNSPEC_VPDPBSSD \"bssd\") (UNSPEC_VPDPBSSDS \"bssds\")\n+   (UNSPEC_VPDPBSUD \"bsud\") (UNSPEC_VPDPBSUDS \"bsuds\")\n+   (UNSPEC_VPDPBUUD \"buud\") (UNSPEC_VPDPBUUDS \"buuds\")])\n+\n+(define_insn \"vpdp<vpdotprodtype>_<mode>\"\n+  [(set (match_operand:VI4_AVX 0 \"register_operand\" \"=x\")\n+\t(unspec:VI4_AVX\n+\t  [(match_operand:VI4_AVX 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI4_AVX 2 \"register_operand\" \"x\")\n+\t   (match_operand:VI4_AVX 3 \"nonimmediate_operand\" \"xm\")]\n+\t  VPDOTPROD))]\n+  \"TARGET_AVXVNNIINT8\"\n+  \"vpdp<vpdotprodtype>\\t{%3, %2, %0|%0, %2, %3}\"\n+   [(set_attr \"prefix\" \"vex\")])"}, {"sha": "e2dbc1dbc46866ac02a7ec1b43ca5b0e9757d6be", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -7065,6 +7065,11 @@ Enable/disable the generation of the AVXVNNI instructions.\n @cindex @code{target(\"avxifma\")} function attribute, x86\n Enable/disable the generation of the AVXIFMA instructions.\n \n+@item avxvnniint8\n+@itemx no-avxvnniint8\n+@cindex @code{target(\"avxvnniint8\")} function attribute, x86\n+Enable/disable the generation of the AVXVNNIINT8 instructions.\n+\n @item cld\n @itemx no-cld\n @cindex @code{target(\"cld\")} function attribute, x86"}, {"sha": "4df29179bf8cabbf584fd541ed6cd269d94a7610", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -1436,7 +1436,7 @@ See RS/6000 and PowerPC Options.\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n--mavx512fp16 -mavxifma @gol\n+-mavx512fp16 -mavxifma -mavxvnniint8 @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -32907,6 +32907,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mavxifma\n @opindex mavxifma\n+@need 200\n+@itemx -mavxvnniint8\n+@opindex mavxvnniint8\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -32917,8 +32920,8 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16,\n-AVXIFMA or CLDEMOTE extended instruction sets. Each has a corresponding\n-@option{-mno-} option to disable use of these instructions.\n+AVXIFMA, AVXVNNIINT8 or CLDEMOTE extended instruction sets. Each has a\n+corresponding @option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "e21a1d381e05da1bfccb555068ea1dbeabd9fc79", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -2493,6 +2493,9 @@ Target supports the execution of @code{avx512vp2intersect} instructions.\n @item avxifma\n Target supports the execution of @code{avxifma} instructions.\n \n+@item avxvnniint8\n+Target supports the execution of @code{avxvnniint8} instructions.\n+\n @item amx_tile\n Target supports the execution of @code{amx-tile} instructions.\n "}, {"sha": "ebd01fe47bc6c5cde620e5777b3d528ea3ae118b", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "b66498f1d4c05544bc0a6d92a4d381fa24b89584", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "77507ca2edc8d8cdeb1119e2cce9a1cecd153c25", "filename": "gcc/testsuite/gcc.target/i386/avx-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-check.h?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -25,6 +25,9 @@ main ()\n       && avx_os_support ()\n #ifdef AVXIFMA\n       && __builtin_cpu_supports (\"avxifma\")\n+#endif\n+#ifdef AVXVNNIINT8\n+      && __builtin_cpu_supports (\"avxvnniint8\")\n #endif\n       )\n     {"}, {"sha": "d6942f34d6ed7b31ce13c2f578d58662ee62beb0", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-1.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavxvnniint8 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpdpbssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbssds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbsud\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbsud\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbsuds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbsuds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbuud\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbuud\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbuuds\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpbuuds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y,z;\n+volatile __m128i x_,y_,z_;\n+volatile __mmask8 m;\n+\n+void extern\n+avxvnniint8_test (void)\n+{\n+  x = _mm256_dpbssd_epi32 (x, y, z);\n+  x_ = _mm_dpbssd_epi32 (x_, y_, z_);\n+\n+  x = _mm256_dpbssds_epi32 (x, y, z);\n+  x_ = _mm_dpbssds_epi32 (x_, y_, z_);\n+\n+  x = _mm256_dpbsud_epi32 (x, y, z);\n+  x_ = _mm_dpbsud_epi32 (x_, y_, z_);\n+\n+  x = _mm256_dpbsuds_epi32 (x, y, z);\n+  x_ = _mm_dpbsuds_epi32 (x_, y_, z_);\n+\n+  x = _mm256_dpbuud_epi32 (x, y, z);\n+  x_ = _mm_dpbuud_epi32 (x_, y_, z_);\n+\n+  x = _mm256_dpbuuds_epi32 (x, y, z);\n+  x_ = _mm_dpbuuds_epi32 (x_, y_, z_);\n+}"}, {"sha": "5016de39621bf9b6194360cf41ba11203a8451d5", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-vpdpbssd-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbssd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbssd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbssd-2.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, char *s1, char *s2, int size)\n+{\n+  short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = (short) s1[i] * (short) s2[i];\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    long long test = (long long) dst[i] + tempres[i * 4] + tempres[i * 4 + 1]\n+\t\t    + tempres[i * 4 + 2] + tempres[i * 4 + 3];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_b src2_256;\n+  union256i_b src1_256;\n+  int res_ref_256[8];\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3 * i + sign;\n+      src2_256.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbssd_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_b src2_128;\n+  union128i_b src1_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3 * i * i + sign;\n+      src2_128.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbssd_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "6de5062e9171d0e940202e3f9ea8eef6ea39fd73", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-vpdpbssds-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbssds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbssds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbssds-2.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, char *s1, char *s2, int size)\n+{\n+  short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = (short) s1[i] * (short) s2[i];\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    long long test = (long long) dst[i] + tempres[i * 4] + tempres[i * 4 + 1]\n+\t\t    + tempres[i * 4 + 2] + tempres[i * 4 + 3];\n+    r[i] = test > 0x7FFFFFFF ? 0x7FFFFFFF : test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_b src2_256;\n+  union256i_b src1_256;\n+  int res_ref_256[8];\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3 * i + sign;\n+      src2_256.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbssds_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_b src2_128;\n+  union128i_b src1_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3 * i * i + sign;\n+      src2_128.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbssds_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "6e4ffd1c7be0567fbbd8e9d937be055e8eb38969", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-vpdpbsud-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbsud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbsud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbsud-2.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, char *s1, unsigned char *s2, int size)\n+{\n+  short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = (short) s1[i] * (unsigned short) s2[i];\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    long long test = (long long) dst[i] + tempres[i * 4] + tempres[i * 4 + 1]\n+\t\t    + tempres[i * 4 + 2] + tempres[i * 4 + 3];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_b src1_256;\n+  union256i_ub src2_256;\n+  int res_ref_256[8];\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3 * i + sign;\n+      src2_256.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbsud_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_b src1_128;\n+  union128i_ub src2_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3 * i * i + sign;\n+      src2_128.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbsud_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "ad4b6047ecd299ee71372894ae9ebebbb98cef90", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-vpdpbsuds-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbsuds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbsuds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbsuds-2.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (int *r, int *dst, char *s1, unsigned char *s2, int size)\n+{\n+  short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = (short) s1[i] * (unsigned short) s2[i];\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    long long test = (long long) dst[i] + tempres[i * 4] + tempres[i * 4 + 1]\n+\t\t    + tempres[i * 4 + 2] + tempres[i * 4 + 3];\n+    r[i] = test > 0x7FFFFFFF ? 0x7FFFFFFF : test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_d res_256;\n+  union256i_b src1_256;\n+  union256i_ub src2_256;\n+  int res_ref_256[8];\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3 * i + sign;\n+      src2_256.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbsuds_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_d (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_d res_128;\n+  union128i_b src1_128;\n+  union128i_ub src2_128;\n+  int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3 * i * i + sign;\n+      src2_128.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbsuds_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_d (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "6590915a4599e770021079853179a4a4fca14a2f", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-vpdpbuud-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbuud-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbuud-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbuud-2.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (unsigned int *r, unsigned int *dst, unsigned char *s1, unsigned char *s2, int size)\n+{\n+  unsigned short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = (unsigned short) s1[i] * (unsigned short) s2[i];\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    unsigned int test = (unsigned int) dst[i] + tempres[i * 4] + tempres[i * 4 + 1]\n+\t\t\t+ tempres[i * 4 + 2] + tempres[i * 4 + 3];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_ud res_256;\n+  union256i_ub src2_256;\n+  union256i_ub src1_256;\n+  unsigned int res_ref_256[8];\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3 * i + sign;\n+      src2_256.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbuud_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_ud (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_ud res_128;\n+  union128i_ub src2_128;\n+  union128i_ub src1_128;\n+  unsigned int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3 * i * i + sign;\n+      src2_128.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbuud_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_ud (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "970e4a5d40852da1e0bd8a479fc6a57bb4e7b9a0", "filename": "gcc/testsuite/gcc.target/i386/avxvnniint8-vpdpbuuds-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbuuds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbuuds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favxvnniint8-vpdpbuuds-2.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavxvnniint8\" } */\n+/* { dg-require-effective-target avxvnniint8 } */\n+#define AVXVNNIINT8\n+#ifndef CHECK\n+#define CHECK \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK\n+\n+static void\n+CALC (unsigned int *r, unsigned int *dst, unsigned char *s1, unsigned char *s2, int size)\n+{\n+  unsigned short tempres[32];\n+  for (int i = 0; i < size; i++) {\n+    tempres[i] = (unsigned short) s1[i] * (unsigned short) s2[i];\n+  }\n+  for (int i = 0; i < size / 4; i++) {\n+    unsigned int test = (unsigned int) dst[i] + tempres[i * 4] + tempres[i * 4 + 1]\n+\t\t\t+ tempres[i * 4 + 2] + tempres[i * 4 + 3];\n+    r[i] = test > 0xFFFFFFFF ? 0xFFFFFFFF : test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  union256i_ud res_256;\n+  union256i_ub src2_256;\n+  union256i_ub src1_256;\n+  unsigned int res_ref_256[8];\n+\n+  for (i = 0; i < 32; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_256.a[i] = 10 + 3 * i + sign;\n+      src2_256.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 8; i++)\n+    res_256.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_256, res_256.a, src1_256.a, src2_256.a, 32);\n+  res_256.x = _mm256_dpbuuds_epi32 (res_256.x, src1_256.x, src2_256.x);\n+  if (check_union256i_ud (res_256, res_ref_256))\n+    abort ();\n+\n+  union128i_ud res_128;\n+  union128i_ub src2_128;\n+  union128i_ub src1_128;\n+  unsigned int res_ref_128[4];\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      int sign = i % 2 ? 1 : -1;\n+      src1_128.a[i] = 10 + 3 * i * i + sign;\n+      src2_128.a[i] = sign * 10 * i * i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    res_128.a[i] = 0x7fffffff;\n+\n+  CALC (res_ref_128, res_128.a, src1_128.a, src2_128.a, 16);\n+  res_128.x = _mm_dpbuuds_epi32 (res_128.x, src1_128.x, src2_128.x);\n+  if (check_union128i_ud (res_128, res_ref_128))\n+    abort ();\n+}"}, {"sha": "a681bffe3e7660e634e5080fa9191afdb268e881", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -81,6 +81,7 @@ extern void test_widekl (void)\t\t\t__attribute__((__target__(\"widekl\")));\n extern void test_avxvnni (void)\t\t\t__attribute__((__target__(\"avxvnni\")));\n extern void test_avx512fp16 (void)\t\t__attribute__((__target__(\"avx512fp16\")));\n extern void test_avxifma (void)\t\t\t__attribute__((__target__(\"avxifma\")));\n+extern void test_avxvnniint8 (void)\t\t__attribute__((__target__(\"avxvnniint8\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -163,6 +164,7 @@ extern void test_no_widekl (void)\t\t__attribute__((__target__(\"no-widekl\")));\n extern void test_no_avxvnni (void)\t\t__attribute__((__target__(\"no-avxvnni\")));\n extern void test_no_avx512fp16 (void)\t\t__attribute__((__target__(\"no-avx512fp16\")));\n extern void test_no_avxifma (void)\t\t__attribute__((__target__(\"no-avxifma\")));\n+extern void test_no_avxvnniint8 (void)\t\t__attribute__((__target__(\"no-avxvnniint8\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "ddde2df6657c8179fe3e041cb7b1333a2c10d584", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "2b293216c6f8eb2fd2922440d8c28439be52e4dc", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "78b51048b906a48e5bd236d2c0ba457a80265575", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "cc1c8cfa4be64cf537780a748cb282f78088aed3", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "270f4483491ade5b24c344a3ca3d837ef8a54096", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -843,6 +843,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8\")\n \n #include <x86intrin.h>"}, {"sha": "7824a441bca28157caee56b0ebf042222bdb2561", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406675947d26ccbc2108e9689a2918bb36f61a63/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=406675947d26ccbc2108e9689a2918bb36f61a63", "patch": "@@ -9534,6 +9534,18 @@ proc check_effective_target_avxifma { } {\n     } \"-O0 -mavxifma\" ]\n }\n \n+# Return 1 if avxvnniint8 instructions can be compiled.\n+proc check_effective_target_avxvnniint8 { } {\n+    return [check_no_compiler_messages avxvnniint8 object {\n+\ttypedef int __v8si __attribute__ ((__vector_size__ (32)));\n+\t__v8si\n+\t_mm256_dpbssd_epi32  (__v8si __A, __v8si __B, __v8si __C)\n+        {\n+\t   return __builtin_ia32_vpdpbssd256 (__A, __B, __C);\n+\t}\n+    } \"-O0 -mavxvnniint8\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}