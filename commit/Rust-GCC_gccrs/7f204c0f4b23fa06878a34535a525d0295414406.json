{"sha": "7f204c0f4b23fa06878a34535a525d0295414406", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyMDRjMGY0YjIzZmEwNjg3OGEzNDUzNWE1MjVkMDI5NTQxNDQwNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-08-21T17:03:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-08-21T17:03:15Z"}, "message": "C: use full locations within c_parser_expr_list's vec<location_t>\n\nThe previous patch uncovered a bug in how c_parser_expr_list builds the\nvec<location_t>: it was only using the location of the first token\nwithin each assignment-expression in the expr-list.\n\nThis shows up in e.g. this -Wformat warning, where only part of the\n2nd param is underlined:\n\n   printf(\"hello %i\", (long)0);\n                 ~^   ~\n                 %li\n\nThis patch fixes c_parser_expr_list to use the full range of\neach assignment-expression in the list for the vec<location_t>, so\nthat for the above we print:\n\n   printf(\"hello %i\", (long)0);\n                 ~^   ~~~~~~~\n                 %li\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_expr_list): Use c_expr::get_location ()\n\trather than peeking the location of the first token.\n\t* c-tree.h (c_expr::get_location): New method.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/format/diagnostic-ranges.c (test_mismatching_types):\n\tUpdate expected result to show all of \"(long)0\" being underlined.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(test_multitoken_macro): Update expected underlining.\n\nFrom-SVN: r251239", "tree": {"sha": "dffd9f4456e124fd12725644bce859641cf32996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dffd9f4456e124fd12725644bce859641cf32996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f204c0f4b23fa06878a34535a525d0295414406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f204c0f4b23fa06878a34535a525d0295414406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f204c0f4b23fa06878a34535a525d0295414406", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f204c0f4b23fa06878a34535a525d0295414406/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f687306d7dbbae7ad45e79dafde45f7b97f03c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f687306d7dbbae7ad45e79dafde45f7b97f03c4"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "f58b4023cf49ac74699741eab574a51a9d48ac7e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7f204c0f4b23fa06878a34535a525d0295414406", "patch": "@@ -1,3 +1,9 @@\n+2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_expr_list): Use c_expr::get_location ()\n+\trather than peeking the location of the first token.\n+\t* c-tree.h (c_expr::get_location): New method.\n+\n 2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-typeck.c (build_function_call_vec): Pass arg_loc to call"}, {"sha": "3d15eb7a6de08f10b9b93062e80ece6c348e91d6", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=7f204c0f4b23fa06878a34535a525d0295414406", "patch": "@@ -8912,7 +8912,6 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   vec<tree, va_gc> *ret;\n   vec<tree, va_gc> *orig_types;\n   struct c_expr expr;\n-  location_t loc = c_parser_peek_token (parser)->location;\n   unsigned int idx = 0;\n \n   ret = make_tree_vector ();\n@@ -8925,14 +8924,14 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n     c_parser_check_literal_zero (parser, literal_zero_mask, 0);\n   expr = c_parser_expr_no_commas (parser, NULL);\n   if (convert_p)\n-    expr = convert_lvalue_to_rvalue (loc, expr, true, true);\n+    expr = convert_lvalue_to_rvalue (expr.get_location (), expr, true, true);\n   if (fold_p)\n     expr.value = c_fully_fold (expr.value, false, NULL);\n   ret->quick_push (expr.value);\n   if (orig_types)\n     orig_types->quick_push (expr.original_type);\n   if (locations)\n-    locations->safe_push (loc);\n+    locations->safe_push (expr.get_location ());\n   if (sizeof_arg != NULL\n       && expr.original_code == SIZEOF_EXPR)\n     {\n@@ -8942,19 +8941,19 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n   while (c_parser_next_token_is (parser, CPP_COMMA))\n     {\n       c_parser_consume_token (parser);\n-      loc = c_parser_peek_token (parser)->location;\n       if (literal_zero_mask)\n \tc_parser_check_literal_zero (parser, literal_zero_mask, idx + 1);\n       expr = c_parser_expr_no_commas (parser, NULL);\n       if (convert_p)\n-\texpr = convert_lvalue_to_rvalue (loc, expr, true, true);\n+\texpr = convert_lvalue_to_rvalue (expr.get_location (), expr, true,\n+\t\t\t\t\t true);\n       if (fold_p)\n \texpr.value = c_fully_fold (expr.value, false, NULL);\n       vec_safe_push (ret, expr.value);\n       if (orig_types)\n \tvec_safe_push (orig_types, expr.original_type);\n       if (locations)\n-\tlocations->safe_push (loc);\n+\tlocations->safe_push (expr.get_location ());\n       if (++idx < 3\n \t  && sizeof_arg != NULL\n \t  && expr.original_code == SIZEOF_EXPR)"}, {"sha": "5182cc539ecef1bd02744dcd9a8ed84af42f042d", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=7f204c0f4b23fa06878a34535a525d0295414406", "patch": "@@ -147,6 +147,14 @@ struct c_expr\n   location_t get_start () const { return src_range.m_start; }\n   location_t get_finish () const { return src_range.m_finish; }\n \n+  location_t get_location () const\n+  {\n+    if (CAN_HAVE_LOCATION_P (value))\n+      return EXPR_LOCATION (value);\n+    else\n+      return make_location (get_start (), get_start (), get_finish ());\n+  }\n+\n   /* Set the value to error_mark_node whilst ensuring that src_range\n      is initialized.  */\n   void set_error ()"}, {"sha": "48f041e082830d37c9e732b15695de3b153fa149", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f204c0f4b23fa06878a34535a525d0295414406", "patch": "@@ -1,3 +1,10 @@\n+2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/format/diagnostic-ranges.c (test_mismatching_types):\n+\tUpdate expected result to show all of \"(long)0\" being underlined.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(test_multitoken_macro): Update expected underlining.\n+\n 2017-08-21  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/format/diagnostic-ranges.c: Update expected results"}, {"sha": "e56e1595502f4126672274283ea434b7b5167d6f", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=7f204c0f4b23fa06878a34535a525d0295414406", "patch": "@@ -25,7 +25,7 @@ void test_mismatching_types (const char *msg)\n   printf(\"hello %i\", (long)0);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'long int' \" } */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %i\", (long)0);\n-                 ~^   ~\n+                 ~^   ~~~~~~~\n                  %li\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "bea86afad7659805c6e705fb9264563d1ca997bd", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f204c0f4b23fa06878a34535a525d0295414406/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=7f204c0f4b23fa06878a34535a525d0295414406", "patch": "@@ -250,7 +250,7 @@ test_multitoken_macro (void)\n   __emit_string_literal_range (RANGE, 4, 3, 6);\n /* { dg-begin-multiline-output \"\" }\n  #define RANGE (\"0123456789\")\n-               ^\n+               ^~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (RANGE, 4, 3, 6);"}]}