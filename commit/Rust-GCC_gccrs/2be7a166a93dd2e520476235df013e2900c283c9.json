{"sha": "2be7a166a93dd2e520476235df013e2900c283c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlN2ExNjZhOTNkZDJlNTIwNDc2MjM1ZGYwMTNlMjkwMGMyODNjOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-09-12T13:31:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-12T13:31:20Z"}, "message": "PR libstdc++/70483 make std::experimental::string_view fully constexpr\n\n\tPR libstdc++/70483\n\t* include/experimental/bits/string_view.tcc (basic_string_view::find)\n\t(basic_string_view::rfind, basic_string_view::find_first_of)\n\t(basic_string_view::find_last_of, basic_string_view::find_first_not_of)\n\t(basic_string_view::find_last_not_of): Add constexpr specifier.\n\t* include/experimental/string_view (basic_string_view::remove_prefix)\n\t(basic_string_view::remove_suffix, basic_string_view::swap)\n\t(basic_string_view::compare, basic_string_view::find)\n\t(basic_string_view::rfind, basic_string_view::find_first_of)\n\t(basic_string_view::find_last_of, basic_string_view::find_first_not_of)\n\t(basic_string_view::find_last_not_of, operator==, operator!=)\n\t(operator<, operator>, operator<=, operator>=): Likewise.\n\t* testsuite/experimental/string_view/operations/compare/char/70483.cc:\n\tNew.\n\nFrom-SVN: r252017", "tree": {"sha": "f41c5910e09863c400746a60205e2fd4477ee978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41c5910e09863c400746a60205e2fd4477ee978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be7a166a93dd2e520476235df013e2900c283c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be7a166a93dd2e520476235df013e2900c283c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be7a166a93dd2e520476235df013e2900c283c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be7a166a93dd2e520476235df013e2900c283c9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c43f427972be6aecd3c85b854cdf601feb816316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43f427972be6aecd3c85b854cdf601feb816316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43f427972be6aecd3c85b854cdf601feb816316"}], "stats": {"total": 212, "additions": 149, "deletions": 63}, "files": [{"sha": "5bae0dc7c91dd022430dd37b0ea721d01c4afdef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2be7a166a93dd2e520476235df013e2900c283c9", "patch": "@@ -1,3 +1,20 @@\n+2017-09-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/70483\n+\t* include/experimental/bits/string_view.tcc (basic_string_view::find)\n+\t(basic_string_view::rfind, basic_string_view::find_first_of)\n+\t(basic_string_view::find_last_of, basic_string_view::find_first_not_of)\n+\t(basic_string_view::find_last_not_of): Add constexpr specifier.\n+\t* include/experimental/string_view (basic_string_view::remove_prefix)\n+\t(basic_string_view::remove_suffix, basic_string_view::swap)\n+\t(basic_string_view::compare, basic_string_view::find)\n+\t(basic_string_view::rfind, basic_string_view::find_first_of)\n+\t(basic_string_view::find_last_of, basic_string_view::find_first_not_of)\n+\t(basic_string_view::find_last_not_of, operator==, operator!=)\n+\t(operator<, operator>, operator<=, operator>=): Likewise.\n+\t* testsuite/experimental/string_view/operations/compare/char/70483.cc:\n+\tNew.\n+\n 2017-09-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/70483"}, {"sha": "450a43c7876ef790dfc6171f5c379b5b0de7fd13", "filename": "libstdc++-v3/include/experimental/bits/string_view.tcc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fstring_view.tcc?ref=2be7a166a93dd2e520476235df013e2900c283c9", "patch": "@@ -49,7 +49,7 @@ namespace experimental\n inline namespace fundamentals_v1\n {\n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find(const _CharT* __str, size_type __pos, size_type __n) const noexcept\n     {\n@@ -70,7 +70,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find(_CharT __c, size_type __pos) const noexcept\n     {\n@@ -86,7 +86,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept\n     {\n@@ -106,7 +106,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     rfind(_CharT __c, size_type __pos) const noexcept\n     {\n@@ -123,7 +123,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find_first_of(const _CharT* __str, size_type __pos, size_type __n) const\n     {\n@@ -139,7 +139,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find_last_of(const _CharT* __str, size_type __pos, size_type __n) const\n     {\n@@ -160,7 +160,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find_first_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n     {\n@@ -172,7 +172,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find_first_not_of(_CharT __c, size_type __pos) const noexcept\n     {\n@@ -183,7 +183,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find_last_not_of(const _CharT* __str, size_type __pos, size_type __n) const\n     {\n@@ -204,7 +204,7 @@ inline namespace fundamentals_v1\n     }\n \n   template<typename _CharT, typename _Traits>\n-    typename basic_string_view<_CharT, _Traits>::size_type\n+    constexpr typename basic_string_view<_CharT, _Traits>::size_type\n     basic_string_view<_CharT, _Traits>::\n     find_last_not_of(_CharT __c, size_type __pos) const noexcept\n     {"}, {"sha": "2e8e7cda62da67d97a6639df5727ff99b4682dae", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=2be7a166a93dd2e520476235df013e2900c283c9", "patch": "@@ -219,23 +219,24 @@ inline namespace fundamentals_v1\n \n       // [string.view.modifiers], modifiers:\n \n-      void\n+      constexpr void\n       remove_prefix(size_type __n)\n       {\n \t__glibcxx_assert(this->_M_len >= __n);\n \tthis->_M_str += __n;\n \tthis->_M_len -= __n;\n       }\n \n-      void\n+      constexpr void\n       remove_suffix(size_type __n)\n       { this->_M_len -= __n; }\n \n-      void\n+      constexpr void\n       swap(basic_string_view& __sv) noexcept\n       {\n-\tstd::swap(this->_M_len, __sv._M_len);\n-\tstd::swap(this->_M_str, __sv._M_str);\n+\tauto __tmp = *this;\n+\t*this = __sv;\n+\t__sv = __tmp;\n       }\n \n \n@@ -285,7 +286,7 @@ inline namespace fundamentals_v1\n \t\t\t\t     __pos, this->size()), basic_string_view{});\n       }\n \n-      int\n+      constexpr int\n       compare(basic_string_view __str) const noexcept\n       {\n \tint __ret = traits_type::compare(this->_M_str, __str._M_str,\n@@ -295,122 +296,122 @@ inline namespace fundamentals_v1\n \treturn __ret;\n       }\n \n-      int\n+      constexpr int\n       compare(size_type __pos1, size_type __n1, basic_string_view __str) const\n       { return this->substr(__pos1, __n1).compare(__str); }\n \n-      int\n+      constexpr int\n       compare(size_type __pos1, size_type __n1,\n \t      basic_string_view __str, size_type __pos2, size_type __n2) const\n       { return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2)); }\n \n-      int\n+      constexpr int\n       compare(const _CharT* __str) const noexcept\n       { return this->compare(basic_string_view{__str}); }\n \n-      int\n+      constexpr int\n       compare(size_type __pos1, size_type __n1, const _CharT* __str) const\n       { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }\n \n-      int\n+      constexpr int\n       compare(size_type __pos1, size_type __n1,\n \t      const _CharT* __str, size_type __n2) const\n       {\n \treturn this->substr(__pos1, __n1)\n \t\t   .compare(basic_string_view(__str, __n2));\n       }\n \n-      size_type\n+      constexpr size_type\n       find(basic_string_view __str, size_type __pos = 0) const noexcept\n       { return this->find(__str._M_str, __pos, __str._M_len); }\n \n-      size_type\n+      constexpr size_type\n       find(_CharT __c, size_type __pos=0) const noexcept;\n \n-      size_type\n+      constexpr size_type\n       find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n \n-      size_type\n+      constexpr size_type\n       find(const _CharT* __str, size_type __pos=0) const noexcept\n       { return this->find(__str, __pos, traits_type::length(__str)); }\n \n-      size_type\n+      constexpr size_type\n       rfind(basic_string_view __str, size_type __pos = npos) const noexcept\n       { return this->rfind(__str._M_str, __pos, __str._M_len); }\n \n-      size_type\n+      constexpr size_type\n       rfind(_CharT __c, size_type __pos = npos) const noexcept;\n \n-      size_type\n+      constexpr size_type\n       rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept;\n \n-      size_type\n+      constexpr size_type\n       rfind(const _CharT* __str, size_type __pos = npos) const noexcept\n       { return this->rfind(__str, __pos, traits_type::length(__str)); }\n \n-      size_type\n+      constexpr size_type\n       find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept\n       { return this->find_first_of(__str._M_str, __pos, __str._M_len); }\n \n-      size_type\n+      constexpr size_type\n       find_first_of(_CharT __c, size_type __pos = 0) const noexcept\n       { return this->find(__c, __pos); }\n \n-      size_type\n+      constexpr size_type\n       find_first_of(const _CharT* __str, size_type __pos, size_type __n) const;\n \n-      size_type\n+      constexpr size_type\n       find_first_of(const _CharT* __str, size_type __pos = 0) const noexcept\n       { return this->find_first_of(__str, __pos, traits_type::length(__str)); }\n \n-      size_type\n+      constexpr size_type\n       find_last_of(basic_string_view __str,\n \t\t   size_type __pos = npos) const noexcept\n       { return this->find_last_of(__str._M_str, __pos, __str._M_len); }\n \n-      size_type\n+      constexpr size_type\n       find_last_of(_CharT __c, size_type __pos=npos) const noexcept\n       { return this->rfind(__c, __pos); }\n \n-      size_type\n+      constexpr size_type\n       find_last_of(const _CharT* __str, size_type __pos, size_type __n) const;\n \n-      size_type\n+      constexpr size_type\n       find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept\n       { return this->find_last_of(__str, __pos, traits_type::length(__str)); }\n \n-      size_type\n+      constexpr size_type\n       find_first_not_of(basic_string_view __str,\n \t\t\tsize_type __pos = 0) const noexcept\n       { return this->find_first_not_of(__str._M_str, __pos, __str._M_len); }\n \n-      size_type\n+      constexpr size_type\n       find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;\n \n-      size_type\n+      constexpr size_type\n       find_first_not_of(const _CharT* __str,\n \t\t\tsize_type __pos, size_type __n) const;\n \n-      size_type\n+      constexpr size_type\n       find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept\n       {\n \treturn this->find_first_not_of(__str, __pos,\n \t\t\t\t       traits_type::length(__str));\n       }\n \n-      size_type\n+      constexpr size_type\n       find_last_not_of(basic_string_view __str,\n \t\t       size_type __pos = npos) const noexcept\n       { return this->find_last_not_of(__str._M_str, __pos, __str._M_len); }\n \n-      size_type\n+      constexpr size_type\n       find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;\n \n-      size_type\n+      constexpr size_type\n       find_last_not_of(const _CharT* __str,\n \t\t       size_type __pos, size_type __n) const;\n \n-      size_type\n+      constexpr size_type\n       find_last_not_of(const _CharT* __str,\n \t\t       size_type __pos = npos) const noexcept\n       {\n@@ -446,109 +447,109 @@ inline namespace fundamentals_v1\n   }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator==(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.size() == __y.size() && __x.compare(__y) == 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator!=(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return !(__x == __y); }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator< (basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator< (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) < 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator> (basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator> (__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) > 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator<=(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) <= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator>=(basic_string_view<_CharT, _Traits> __x,\n                __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept\n     { return __x.compare(__y) >= 0; }\n \n   template<typename _CharT, typename _Traits>\n-    inline bool\n+    constexpr bool\n     operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,\n                basic_string_view<_CharT, _Traits> __y) noexcept\n     { return __x.compare(__y) >= 0; }"}, {"sha": "3bfb59c046b2682f7bd8742e0d4040a605747220", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/compare/char/70483.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F70483.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be7a166a93dd2e520476235df013e2900c283c9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F70483.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcompare%2Fchar%2F70483.cc?ref=2be7a166a93dd2e520476235df013e2900c283c9", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+#include <experimental/string_view>\n+\n+struct constexpr_char_traits : std::char_traits<char>\n+{\n+  static constexpr size_t\n+  length(const char* val)\n+  {\n+    size_t res = 0;\n+    for (; val[res] != '\\0'; ++res)\n+      ;\n+    return res;\n+  }\n+\n+  static constexpr int\n+  compare(const char* lhs, const char* rhs, std::size_t count)\n+  {\n+    for (size_t pos = 0; pos < count; ++pos)\n+    {\n+      if (lhs[pos] != rhs[pos])\n+        return lhs[pos] - rhs[pos];\n+    }\n+    return 0;\n+  }\n+\n+  static constexpr const char*\n+  find(const char* p, std::size_t n, char c)\n+  {\n+    for (size_t pos = 0; pos < n; ++pos)\n+      if (p[pos] == c)\n+\treturn p + pos;\n+    return nullptr;\n+  }\n+};\n+\n+using string_view\n+  = std::experimental::basic_string_view<char, constexpr_char_traits>;\n+\n+constexpr\n+string_view get()\n+{\n+    string_view res = \"x::\";\n+    string_view start_pattern = \"x\";\n+    res = res.substr(res.find(start_pattern) + start_pattern.size());\n+    res = res.substr(0, res.find_first_of(\";]\"));\n+    res = res.substr(res.rfind(\"::\"));\n+    return res;\n+}\n+\n+static_assert( get() == get() );"}]}