{"sha": "9758d196f57950ea89baa5cdf6ebd7125b5056e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1OGQxOTZmNTc5NTBlYTg5YmFhNWNkZjZlYmQ3MTI1YjUwNTZlMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-05T08:13:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-05T09:45:43Z"}, "message": "tree-optimization/95539 - fix SLP_TREE_REPRESENTATIVE vs. dr_info\n\nThis fixes a disconnect between the stmt_info used for dr_info\nanalysis and the one in SLP_TREE_REPRESENTATIVE with a temporary\nworkaround.\n\n2020-06-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95539\n\t* tree-vect-data-refs.c\n\t(vect_slp_analyze_and_verify_instance_alignment): Use\n\tSLP_TREE_REPRESENTATIVE for the data-ref check.\n\t* tree-vect-stmts.c (vectorizable_load): Reset stmt_info\n\tback to the first scalar stmt rather than the\n\tSLP_TREE_REPRESENTATIVE to match previous behavior.\n\n\t* gcc.dg/vect/pr95539.c: New testcase.", "tree": {"sha": "5c30c909db4be6df8701ea8a730150cd3af0522e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c30c909db4be6df8701ea8a730150cd3af0522e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9758d196f57950ea89baa5cdf6ebd7125b5056e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9758d196f57950ea89baa5cdf6ebd7125b5056e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9758d196f57950ea89baa5cdf6ebd7125b5056e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9758d196f57950ea89baa5cdf6ebd7125b5056e0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a182ef9ee011935d827ab5c6c9a7cd8e22257d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a182ef9ee011935d827ab5c6c9a7cd8e22257d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a182ef9ee011935d827ab5c6c9a7cd8e22257d8"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "de3b393879e82e8c6798386f4c78b2bee78ba3c9", "filename": "gcc/testsuite/gcc.dg/vect/pr95539.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9758d196f57950ea89baa5cdf6ebd7125b5056e0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr95539.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9758d196f57950ea89baa5cdf6ebd7125b5056e0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr95539.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr95539.c?ref=9758d196f57950ea89baa5cdf6ebd7125b5056e0", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+typedef unsigned short uint16_t;\n+typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__))\n+_mm_set_epi16 (short __q7, short __q6, short __q5, short __q4,\n+\t       short __q3, short __q2, short __q1, short __q0)\n+{\n+  return __extension__ (__m128i)(__v8hi){\n+      __q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7 };\n+}\n+void gcm_HashMult_hw(__m128i *x, const unsigned char *buf, unsigned int count)\n+{\n+  unsigned i;\n+  __m128i bin __attribute__((aligned(16)));\n+  for (i = 0; i < count; i++, buf += 16)\n+    {\n+      bin = _mm_set_epi16(((uint16_t)buf[0] << 8) | buf[1],\n+\t\t\t  ((uint16_t)buf[2] << 8) | buf[3],\n+\t\t\t  ((uint16_t)buf[4] << 8) | buf[5],\n+\t\t\t  ((uint16_t)buf[6] << 8) | buf[7],\n+\t\t\t  ((uint16_t)buf[8] << 8) | buf[9],\n+\t\t\t  ((uint16_t)buf[10] << 8) | buf[11],\n+\t\t\t  ((uint16_t)buf[12] << 8) | buf[13],\n+\t\t\t  ((uint16_t)buf[14] << 8) | buf[15]);\n+      *(x++) = bin;\n+    }\n+}"}, {"sha": "fe543606a52608828058d198c018e5489ce23798", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9758d196f57950ea89baa5cdf6ebd7125b5056e0/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9758d196f57950ea89baa5cdf6ebd7125b5056e0/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9758d196f57950ea89baa5cdf6ebd7125b5056e0", "patch": "@@ -2471,7 +2471,7 @@ vect_slp_analyze_and_verify_instance_alignment (vec_info *vinfo,\n       return false;\n \n   node = SLP_INSTANCE_TREE (instance);\n-  if (STMT_VINFO_DATA_REF (SLP_TREE_SCALAR_STMTS (node)[0])\n+  if (STMT_VINFO_DATA_REF (SLP_TREE_REPRESENTATIVE (node))\n       && ! vect_slp_analyze_and_verify_node_alignment\n \t     (vinfo, SLP_INSTANCE_TREE (instance)))\n     return false;"}, {"sha": "b24b0fe43040c690ecced3fdbb0ed0b678ff0915", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9758d196f57950ea89baa5cdf6ebd7125b5056e0/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9758d196f57950ea89baa5cdf6ebd7125b5056e0/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9758d196f57950ea89baa5cdf6ebd7125b5056e0", "patch": "@@ -8661,6 +8661,20 @@ vectorizable_load (vec_info *vinfo,\n       && ! vec_stmt)\n     return false;\n \n+  if (!STMT_VINFO_DATA_REF (stmt_info))\n+    return false;\n+\n+  /* ???  Alignment analysis for SLP looks at SLP_TREE_SCALAR_STMTS[0]\n+     for unpermuted loads but we get passed SLP_TREE_REPRESENTATIVE\n+     which can be different when reduction chains were re-ordered.\n+     Now that we figured we're a dataref reset stmt_info back to\n+     SLP_TREE_SCALAR_STMTS[0].  When we're SLP only things should be\n+     refactored in a way to maintain the dr_vec_info pointer for the\n+     relevant access explicitely.  */\n+  stmt_vec_info orig_stmt_info = stmt_info;\n+  if (slp_node)\n+    stmt_info = SLP_TREE_SCALAR_STMTS (slp_node)[0];\n+\n   tree mask = NULL_TREE, mask_vectype = NULL_TREE;\n   if (gassign *assign = dyn_cast <gassign *> (stmt_info->stmt))\n     {\n@@ -8703,9 +8717,6 @@ vectorizable_load (vec_info *vinfo,\n \t}\n     }\n \n-  if (!STMT_VINFO_DATA_REF (stmt_info))\n-    return false;\n-\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n \n@@ -8876,7 +8887,7 @@ vectorizable_load (vec_info *vinfo,\n \tcheck_load_store_masking (loop_vinfo, vectype, VLS_LOAD, group_size,\n \t\t\t\t  memory_access_type, &gs_info, mask);\n \n-      STMT_VINFO_TYPE (stmt_info) = load_vec_info_type;\n+      STMT_VINFO_TYPE (orig_stmt_info) = load_vec_info_type;\n       vect_model_load_cost (vinfo, stmt_info, ncopies, vf, memory_access_type,\n \t\t\t    slp_node, cost_vec);\n       return true;"}]}