{"sha": "922e3e33b211d1f01056457b093c8196aff40333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyZTNlMzNiMjExZDFmMDEwNTY0NTdiMDkzYzgxOTZhZmY0MDMzMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-23T07:53:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-23T07:53:16Z"}, "message": "re PR target/36079 (cld instruction is not emitted anymore.)\n\n\tPR target/36079\n\t* configure.ac: Handle --enable-cld.\n\t* configure: Regenerated.\n\t* config.gcc: Add USE_IX86_CLD to tm_defines for x86 targets.\n\t* config/i386/i386.h (struct machine_function): Add needs_cld field.\n\t(ix86_current_function_needs_cld): New define.\n\t* config/i386/i386.md (UNSPEC_CLD): New unspec volatile constant.\n\t(cld): New isns pattern.\n\t(strmov_singleop, rep_mov, strset_singleop, rep_stos, cmpstrnqi_nz_1,\n\tcmpstrnqi_1, strlenqi_1): Set ix86_current_function_needs_cld flag.\n\t* config/i386/i386.opt (mcld): New option.\n\t* config/i386/i386.c (ix86_expand_prologue): Emit cld insn if\n\tTARGET_CLD and ix86_current_function_needs_cld.\n\t(override_options): Use -mcld by default for 32-bit code if\n\tUSE_IX86_CLD.\n\n\t* doc/install.texi (Options specification): Document --enable-cld.\n\t* doc/invoke.texi (Machine Dependent Options)\n        [i386 and x86-64 Options]: Add -mcld option.\n        (Intel 386 and AMD x86-64 Options): Document -mcld option.\n\nFrom-SVN: r135792", "tree": {"sha": "40050495f1a2d014b7c9ed11be27fad5038f05a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40050495f1a2d014b7c9ed11be27fad5038f05a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/922e3e33b211d1f01056457b093c8196aff40333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922e3e33b211d1f01056457b093c8196aff40333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922e3e33b211d1f01056457b093c8196aff40333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922e3e33b211d1f01056457b093c8196aff40333/comments", "author": null, "committer": null, "parents": [{"sha": "71995c2c69bc2484ca571b29cf376acd860c2f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71995c2c69bc2484ca571b29cf376acd860c2f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71995c2c69bc2484ca571b29cf376acd860c2f88"}], "stats": {"total": 156, "additions": 122, "deletions": 34}, "files": [{"sha": "48e9ae28e5c6c2782b0ba6fed5e3931aac2535fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 24, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -1,3 +1,27 @@\n+2008-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/36079\n+\t* configure.ac: Handle --enable-cld.\n+\t* configure: Regenerated.\n+\t* config.gcc: Add USE_IX86_CLD to tm_defines for x86 targets.\n+\t* config/i386/i386.h (struct machine_function): Add needs_cld field.\n+\t(ix86_current_function_needs_cld): New define.\n+\t* config/i386/i386.md (UNSPEC_CLD): New unspec volatile constant.\n+\t(cld): New isns pattern.\n+\t(strmov_singleop, rep_mov, strset_singleop, rep_stos, cmpstrnqi_nz_1,\n+\tcmpstrnqi_1, strlenqi_1): Set ix86_current_function_needs_cld flag.\n+\t* config/i386/i386.opt (mcld): New option.\n+\t* config/i386/i386.c (ix86_expand_prologue): Emit cld insn if\n+\tTARGET_CLD and ix86_current_function_needs_cld.\n+\t(override_options): Use -mcld by default for 32-bit code if\n+\tUSE_IX86_CLD.\n+\n+\t* doc/install.texi (Options specification): Document --enable-cld.\n+\t* doc/invoke.texi (Machine Dependent Options)\n+        [i386 and x86-64 Options]: Add -mcld option.\n+        (Intel 386 and AMD x86-64 Options): Document -mcld option.\n+\n 2008-05-23  Kai Tietz  <kai.tietz@onevison.com>\n \t* config/i386/i386.c (return_in_memory_32): Add ATTRIBUTE_UNUSED.\n \t(return_in_memory_64): Likewise.\n@@ -58,9 +82,8 @@\n \t(vector_alignment_reachable_p): Likewise.\n \t* tree-vect-transform.c (vectorizable_load): Likewise.\n \t* tree-vectorizer.c (vect_supportable_dr_alignment): Likewise.\n-\n-\t* tree-vectorizer.c (get_vectype_for_scalar_type): Pass mode of\n-\tscalar_type to UNITS_PER_SIMD_WORD.\n+\t(get_vectype_for_scalar_type): Pass mode of scalar_type\n+\tto UNITS_PER_SIMD_WORD.\n \n \t* config/arm/arm.h (UNITS_PER_SIMD_WORD): Updated.\n \t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Likewise.\n@@ -206,27 +229,21 @@\n 2008-05-20  David Daney  <ddaney@avtrex.com>\n \n \t* config/mips/mips.md (UNSPEC_SYNC_NEW_OP_12,\n-\tUNSPEC_SYNC_OLD_OP_12,\n-\tUNSPEC_SYNC_EXCHANGE_12): New define_constants.\n-\t(UNSPEC_SYNC_EXCHANGE, UNSPEC_MEMORY_BARRIER,\n-\tUNSPEC_SET_GOT_VERSION,\n+\tUNSPEC_SYNC_OLD_OP_12, UNSPEC_SYNC_EXCHANGE_12): New define_constants.\n+\t(UNSPEC_SYNC_EXCHANGE, UNSPEC_MEMORY_BARRIER, UNSPEC_SET_GOT_VERSION,\n \tUNSPEC_UPDATE_GOT_VERSION): Renumber.\n \t(optab, insn): Add 'plus' and 'minus' to define_code_attr.\n \t(atomic_hiqi_op): New define_code_iterator.\n-\t(sync_compare_and_swap<mode>): Call\n-\tmips_expand_atomic_qihi instead of\n+\t(sync_compare_and_swap<mode>): Call mips_expand_atomic_qihi instead of\n \tmips_expand_compare_and_swap_12.\n \t(compare_and_swap_12): Use MIPS_COMPARE_AND_SWAP_12 instead of\n-\tMIPS_COMPARE_AND_SWAP_12_0.  Pass argument to\n-\tMIPS_COMPARE_AND_SWAP_12.\n+\tMIPS_COMPARE_AND_SWAP_12_0.  Pass argument to MIPS_COMPARE_AND_SWAP_12.\n \t(sync_<optab><mode>, sync_old_<optab><mode>,\n \tsync_new_<optab><mode>, sync_nand<mode>, sync_old_nand<mode>,\n-\tsync_new_nand<mode>): New define_expands for HI and QI mode\n-\toperands.\n+\tsync_new_nand<mode>): New define_expands for HI and QI mode operands.\n \t(sync_<optab>_12, sync_old_<optab>_12, sync_new_<optab>_12,\n \tsync_nand_12, sync_old_nand_12, sync_new_nand_12): New insns.\n-\t(sync_lock_test_and_set<mode>): New define_expand for HI and QI\n-\tmodes.\n+\t(sync_lock_test_and_set<mode>): New define_expand for HI and QI modes.\n \t(test_and_set_12): New insn.\n \t(sync_old_add<mode>, sync_new_add<mode>, sync_old_<optab><mode>,\n \tsync_new_<optab><mode>, sync_old_nand<mode>,\n@@ -284,10 +301,12 @@\n 2008-05-20  Jan Sjodin  <jan.sjodin@amd.com>\n \t    Sebastian Pop  <sebastian.pop@amd.com>\n \n-\t* tree-loop-linear.c (gather_interchange_stats): Look in the access matrix,\n-\tand never look at the tree representation of the memory accesses.\n+\t* tree-loop-linear.c (gather_interchange_stats): Look in the access\n+\tmatrix, and never look at the tree representation of the memory\n+\taccesses.\n \t(linear_transform_loops): Computes parameters and access matrices.\n-\t* tree-data-ref.c (compute_data_dependences_for_loop): Returns false when fails.\n+\t* tree-data-ref.c (compute_data_dependences_for_loop): Returns false\n+\twhen fails.\n \t(access_matrix_get_index_for_parameter): New.\n \t* tree-data-ref.h (struct access_matrix): New.\n \t(AM_LOOP_NEST_NUM, AM_NB_INDUCTION_VARS, AM_PARAMETERS, AM_MATRIX,\n@@ -333,24 +352,23 @@\n \n \tPR tree-optimization/36206\n \t* tree-chrec.h (chrec_fold_op): New.\n-\t* tree-data-ref.c (initialize_matrix_A): Traverse NOP_EXPR, PLUS_EXPR, and\n-\tother trees.\n+\t* tree-data-ref.c (initialize_matrix_A): Traverse NOP_EXPR, PLUS_EXPR,\n+\tand other trees.\n \n 2008-05-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-incpath.c (INO_T_EQ): Do not define on non-inode systems.\n \t(DIRS_EQ): New.\n-\t(remove_duplicates): Do not set inode on non-inode systems.  Use\n-\tDIRS_EQ.\n+\t(remove_duplicates): Do not set inode on non-inode systems.\n+\tUse DIRS_EQ.\n \n 2008-05-20  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config.gcc (tm_file): Update comments about relative pathnames.\n \n 2008-05-20  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-reassoc.c (fini_reassoc): Use the statistics\n-\tinfrastructure.\n+\t* tree-ssa-reassoc.c (fini_reassoc): Use the statistics infrastructure.\n \t* tree-ssa-sccvn.c (process_scc): Likewise.\n \t* tree-ssa-sink.c (execute_sink_code): Likewise.\n \t* tree-ssa-threadupdate.c (thread_through_all_blocks): Likewise."}, {"sha": "efc3c4a84ef797a4c785da00752b27dce14ed8c5", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -397,8 +397,16 @@ then\n fi\n \n case ${target} in\n+i[34567]86-*-*)\n+\tif test $enable_cld = yes; then\n+\t\ttm_defines=\"${tm_defines} USE_IX86_CLD=1\"\n+\tfi\n+\t;;\n x86_64-*-*)\n \ttm_file=\"i386/biarch64.h ${tm_file}\"\n+\tif test $enable_cld = yes; then\n+\t\ttm_defines=\"${tm_defines} USE_IX86_CLD=1\"\n+\tfi\n \t;;\n esac\n "}, {"sha": "0f140c8adf72ff37a86ff0cf29c5c3554aa961bf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -2764,6 +2764,12 @@ override_options (void)\n      can be optimized to ap = __builtin_next_arg (0).  */\n   if (!TARGET_64BIT || TARGET_64BIT_MS_ABI)\n     targetm.expand_builtin_va_start = NULL;\n+\n+#ifdef USE_IX86_CLD\n+  /* Use -mcld by default for 32-bit code if configured with --enable-cld.  */\n+  if (!TARGET_64BIT)\n+    target_flags |= MASK_CLD & ~target_flags_explicit;\n+#endif\n }\n \f\n /* Return true if this goes in large data/bss.  */\n@@ -6597,6 +6603,10 @@ ix86_expand_prologue (void)\n \temit_insn (gen_prologue_use (pic_offset_table_rtx));\n       emit_insn (gen_blockage ());\n     }\n+\n+  /* Emit cld instruction if stringops are used in the function.  */\n+  if (TARGET_CLD && ix86_current_function_needs_cld)\n+    emit_insn (gen_cld ());\n }\n \n /* Emit code to restore saved registers using MOV insns.  First register"}, {"sha": "0b5ca139350b18f0d50c972db36147f7d963c653", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -2432,8 +2432,9 @@ struct machine_function GTY(())\n   int save_varrargs_registers;\n   int accesses_prev_frame;\n   int optimize_mode_switching[MAX_386_ENTITIES];\n-  /* Set by ix86_compute_frame_layout and used by prologue/epilogue expander to\n-     determine the style used.  */\n+  int needs_cld;\n+  /* Set by ix86_compute_frame_layout and used by prologue/epilogue\n+     expander to determine the style used.  */\n   int use_fast_prologue_epilogue;\n   /* Number of saved registers USE_FAST_PROLOGUE_EPILOGUE has been computed\n      for.  */\n@@ -2453,6 +2454,7 @@ struct machine_function GTY(())\n #define ix86_stack_locals (cfun->machine->stack_locals)\n #define ix86_save_varrargs_registers (cfun->machine->save_varrargs_registers)\n #define ix86_optimize_mode_switching (cfun->machine->optimize_mode_switching)\n+#define ix86_current_function_needs_cld (cfun->machine->needs_cld)\n #define ix86_tls_descriptor_calls_expanded_in_cfun \\\n   (cfun->machine->tls_descriptor_call_expanded_p)\n /* Since tls_descriptor_call_expanded is not cleared, even if all TLS"}, {"sha": "8f91de08519a4854a4728d28ddd87d470cb4b9d1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -213,6 +213,7 @@\n    (UNSPECV_XCHG\t\t12)\n    (UNSPECV_LOCK\t\t13)\n    (UNSPECV_PROLOGUE_USE\t14)\n+   (UNSPECV_CLD\t\t\t15)\n   ])\n \n ;; Constants to represent pcomtrue/pcomfalse variants\n@@ -18374,6 +18375,14 @@\n \f\n ;; Block operation instructions\n \n+(define_insn \"cld\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_CLD)]\n+  \"\"\n+  \"cld\"\n+  [(set_attr \"length\" \"1\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"modrm\" \"0\")])\n+\n (define_expand \"movmemsi\"\n   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n@@ -18446,7 +18455,7 @@\n \t      (set (match_operand 2 \"register_operand\" \"\")\n \t\t   (match_operand 5 \"\" \"\"))])]\n   \"TARGET_SINGLE_STRINGOP || optimize_size\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strmovdi_rex_1\"\n   [(set (mem:DI (match_operand:DI 2 \"register_operand\" \"0\"))\n@@ -18563,7 +18572,7 @@\n \t\t   (match_operand 3 \"memory_operand\" \"\"))\n \t      (use (match_dup 4))])]\n   \"\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*rep_movdi_rex64\"\n   [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n@@ -18723,7 +18732,7 @@\n \t      (set (match_operand 0 \"register_operand\" \"\")\n \t\t   (match_operand 3 \"\" \"\"))])]\n   \"TARGET_SINGLE_STRINGOP || optimize_size\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strsetdi_rex_1\"\n   [(set (mem:DI (match_operand:DI 1 \"register_operand\" \"0\"))\n@@ -18817,7 +18826,7 @@\n \t      (use (match_operand 3 \"register_operand\" \"\"))\n \t      (use (match_dup 1))])]\n   \"\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*rep_stosdi_rex64\"\n   [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n@@ -18993,7 +19002,7 @@\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (match_dup 2))])]\n   \"\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*cmpstrnqi_nz_1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -19040,7 +19049,7 @@\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (match_dup 2))])]\n   \"\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*cmpstrnqi_1\"\n   [(set (reg:CC FLAGS_REG)\n@@ -19109,7 +19118,7 @@\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n-  \"\")\n+  \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strlenqi_1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&c\")"}, {"sha": "75c94ba771eceb8b224f5b116316c942a0192731", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -250,6 +250,10 @@ Support SSE5 built-in functions and code generation\n \n ;; Instruction support\n \n+mcld\n+Target Report Mask(CLD)\n+Generate cld instruction in the function prologue.\n+\n mabm\n Target Report RejectNegative Var(x86_abm)\n Support code generation of Advanced Bit Manipulation (ABM) instructions."}, {"sha": "b2ab9a71988810bfadcfa104ed81a8cafa68c033", "filename": "gcc/configure", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -1046,6 +1046,7 @@ Optional Features:\n   --enable-sjlj-exceptions\n                           arrange to use setjmp/longjmp exception handling\n   --enable-secureplt      enable -msecure-plt by default for PowerPC\n+  --enable-cld            enable -mcld by default for 32bit x86\n   --disable-win32-registry\n                           disable lookup of installation paths in the\n                           Registry on Windows hosts\n@@ -13709,6 +13710,14 @@ if test \"${enable_secureplt+set}\" = set; then\n \n fi;\n \n+# Check whether --enable-cld or --disable-cld was given.\n+if test \"${enable_cld+set}\" = set; then\n+  enableval=\"$enable_cld\"\n+\n+else\n+  enable_cld=no\n+fi;\n+\n # Windows32 Registry support for specifying GCC installation paths.\n # Check whether --enable-win32-registry or --disable-win32-registry was given.\n if test \"${enable_win32_registry+set}\" = set; then"}, {"sha": "3ac7ff53d8621391f39ee8bc373d292f49072a55", "filename": "gcc/configure.ac", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -1528,6 +1528,10 @@ AC_ARG_ENABLE(secureplt,\n [  --enable-secureplt      enable -msecure-plt by default for PowerPC],\n [], [])\n \n+AC_ARG_ENABLE(cld,\n+[  --enable-cld            enable -mcld by default for 32bit x86], [],\n+[enable_cld=no])\n+\n # Windows32 Registry support for specifying GCC installation paths.\n AC_ARG_ENABLE(win32-registry,\n [  --disable-win32-registry"}, {"sha": "3d098a49ba8e02d5013e4fcd81b31239c333fc11", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -1214,6 +1214,16 @@ Using the GNU Compiler Collection (GCC)},\n See ``RS/6000 and PowerPC Options'' in the main manual\n @end ifhtml\n \n+@item --enable-cld\n+This option enables @option{-mcld} by default for 32-bit x86 targets.\n+@ifnothtml\n+@xref{i386 and x86-64 Options,, i386 and x86-64 Options, gcc,\n+Using the GNU Compiler Collection (GCC)},\n+@end ifnothtml\n+@ifhtml\n+See ``i386 and x86-64 Options'' in the main manual\n+@end ifhtml\n+\n @item --enable-win32-registry\n @itemx --enable-win32-registry=@var{key}\n @itemx --disable-win32-registry"}, {"sha": "4ef73c1cd1e99ceba3e8407c18ae4b527c088aaf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922e3e33b211d1f01056457b093c8196aff40333/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=922e3e33b211d1f01056457b093c8196aff40333", "patch": "@@ -553,7 +553,7 @@ Objective-C and Objective-C++ Dialects}.\n -masm=@var{dialect}  -mno-fancy-math-387 @gol\n -mno-fp-ret-in-387  -msoft-float @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n--mpreferred-stack-boundary=@var{num} -mcx16 -msahf -mrecip @gol\n+-mpreferred-stack-boundary=@var{num} -mcld -mcx16 -msahf -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 @gol\n -maes -mpclmul @gol\n -msse4a -m3dnow -mpopcnt -mabm -msse5 @gol\n@@ -10814,6 +10814,20 @@ supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n \n+@item -mcld\n+@opindex mcld\n+This option instructs GCC to emit a @code{cld} instruction in the prologue\n+of functions that use string instructions.  String instructions depend on\n+the DF flag to select between autoincrement or autodecrement mode.  While the\n+ABI specifies the DF flag to be cleared on function entry, some operating\n+systems violate this specification by not clearing the DF flag in their\n+exception dispatchers.  The exception handler can be invoked with the DF flag\n+set which leads to wrong direction mode, when string instructions are used.\n+This option can be enabled by default on 32-bit x86 targets by configuring\n+GCC with the @option{--enable-cld} configure option.  Generation of @code{cld}\n+instructions can be suppressed with the @option{-mno-cld} compiler option\n+in this case.\n+\n @item -mcx16\n @opindex mcx16\n This option will enable GCC to use CMPXCHG16B instruction in generated code."}]}