{"sha": "36f1de95a61132f63c0c07ef154abd9f435721ac", "node_id": "C_kwDOANBUbNoAKDM2ZjFkZTk1YTYxMTMyZjYzYzBjMDdlZjE1NGFiZDlmNDM1NzIxYWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-20T08:17:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-20T11:27:24Z"}, "message": "tree-optimization/105312 - fix ISEL VCOND expansion\n\nThe following aligns ISEL VEC_COND_EXPR expansion using VCOND\nwith the optab query done by vector lowering.  Instead of only\nallowing the signed optab to provide EQ/NE compares we allow both\nhere though since there seems to be no documented canonicalization.\n\n2022-04-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105312\n\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Query both\n\tVCOND and VCONDU for EQ and NE.\n\n\t* gcc.target/arm/pr105312.c: New testcase.", "tree": {"sha": "fe13b569b1add4fa1843e7ef2c1c239328da5f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe13b569b1add4fa1843e7ef2c1c239328da5f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f1de95a61132f63c0c07ef154abd9f435721ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f1de95a61132f63c0c07ef154abd9f435721ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f1de95a61132f63c0c07ef154abd9f435721ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f1de95a61132f63c0c07ef154abd9f435721ac/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0707f4280907c395b543464175411f8155817a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0707f4280907c395b543464175411f8155817a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0707f4280907c395b543464175411f8155817a9e"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "a8f7a0d25d0867982ded0cc2b5291b9faf4adc18", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f1de95a61132f63c0c07ef154abd9f435721ac/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f1de95a61132f63c0c07ef154abd9f435721ac/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=36f1de95a61132f63c0c07ef154abd9f435721ac", "patch": "@@ -245,6 +245,14 @@ gimple_expand_vec_cond_expr (struct function *fun, gimple_stmt_iterator *gsi,\n \t\t\tGET_MODE_NUNITS (cmp_op_mode)));\n \n   icode = get_vcond_icode (mode, cmp_op_mode, unsignedp);\n+  /* Some targets do not have vcondeq and only vcond with NE/EQ\n+     but not vcondu, so make sure to also try vcond here as\n+     vcond_icode_p would canonicalize the optab query to.  */\n+  if (icode == CODE_FOR_nothing\n+      && (tcode == NE_EXPR || tcode == EQ_EXPR)\n+      && ((icode = get_vcond_icode (mode, cmp_op_mode, !unsignedp))\n+\t  != CODE_FOR_nothing))\n+    unsignedp = !unsignedp;\n   if (icode == CODE_FOR_nothing)\n     {\n       if (tcode == LT_EXPR"}, {"sha": "a02831bcbcfa40abdd4ef44a923889e399e35e7e", "filename": "gcc/testsuite/gcc.target/arm/pr105312.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f1de95a61132f63c0c07ef154abd9f435721ac/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr105312.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f1de95a61132f63c0c07ef154abd9f435721ac/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr105312.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr105312.c?ref=36f1de95a61132f63c0c07ef154abd9f435721ac", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mcpu=cortex-a15\" } */\n+/* { dg-add-options arm_neon } */\n+\n+typedef float stress_matrix_type_t;\n+typedef unsigned int size_t;\n+static void __attribute__((optimize(\"-O3\"))) stress_matrix_xy_identity(\n+ const size_t n,\n+ stress_matrix_type_t a[restrict n][n],\n+ stress_matrix_type_t b[restrict n][n],\n+ stress_matrix_type_t r[restrict n][n])\n+{\n+ register size_t i;\n+ (void)a;\n+ (void)b;\n+ for (i = 0; i < n; i++) {\n+  register size_t j;\n+  for (j = 0; j < n; j++)\n+   r[i][j] = (i == j) ? 1.0 : 0.0;\n+   return;\n+ }\n+}"}]}