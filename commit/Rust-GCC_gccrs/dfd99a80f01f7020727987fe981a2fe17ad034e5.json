{"sha": "dfd99a80f01f7020727987fe981a2fe17ad034e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZkOTlhODBmMDFmNzAyMDcyNzk4N2ZlOTgxYTJmZTE3YWQwMzRlNQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2006-02-15T09:38:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:38:10Z"}, "message": "exp_ch4.adb (Expand_Allocator_Expression): Pass Allocator => True to Make_Adjust_Call done for a newly-allocated object.\n\n2006-02-13  Thomas Quinot  <quinot@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_Allocator_Expression): Pass Allocator => True to\n\tMake_Adjust_Call done for a newly-allocated object.\n\n\t* exp_ch7.ads, exp_ch7.adb (Expand_Cleanup_Actions): If the statements\n\tin a subprogram are wrapped in a cleanup block, indicate that the\n\tsubprogram contains an inner block with an exception handler.\n\t(Make_Adjust_Call): New Boolean formal Allocator indicating whether the\n\tAdjust call is for a newly-allocated object. In that case we must not\n\tassume that the finalization list chain pointers are correct (since they\n\tcome from a bit-for-bit copy of the original object's pointers) so if\n\tthe attach level would otherwise be zero (no change), we set it to 4\n\tinstead to cause the pointers to be reset to null.\n\n\t* s-finimp.adb (Attach_To_Final_List): New attach level: 4, meaning\n\treset chain pointers to null.\n\nFrom-SVN: r111060", "tree": {"sha": "206359c222e19b3caaae36b5e2fbd40231df7656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206359c222e19b3caaae36b5e2fbd40231df7656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfd99a80f01f7020727987fe981a2fe17ad034e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd99a80f01f7020727987fe981a2fe17ad034e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd99a80f01f7020727987fe981a2fe17ad034e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd99a80f01f7020727987fe981a2fe17ad034e5/comments", "author": null, "committer": null, "parents": [{"sha": "a05e99a2693109e7a2b4fffe853890946cd0320d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05e99a2693109e7a2b4fffe853890946cd0320d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05e99a2693109e7a2b4fffe853890946cd0320d"}], "stats": {"total": 88, "additions": 64, "deletions": 24}, "files": [{"sha": "1a2ccd7097f8a1c19f200d186fcd50e60db68f32", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=dfd99a80f01f7020727987fe981a2fe17ad034e5", "patch": "@@ -494,8 +494,8 @@ package body Exp_Ch4 is\n \n          if Java_VM then\n \n-            --  Suppress the tag assignment when Java_VM because JVM tags\n-            --  are represented implicitly in objects.\n+            --  Suppress the tag assignment when Java_VM because JVM tags are\n+            --  represented implicitly in objects.\n \n             null;\n \n@@ -507,10 +507,10 @@ package body Exp_Ch4 is\n            and then Is_Tagged_Type (Underlying_Type (T))\n          then\n             TagT := Underlying_Type (T);\n-            TagR := Unchecked_Convert_To (Underlying_Type (T),\n-                      Make_Explicit_Dereference (Loc,\n-                        New_Reference_To (Temp, Loc)));\n-\n+            TagR :=\n+              Unchecked_Convert_To (Underlying_Type (T),\n+                Make_Explicit_Dereference (Loc,\n+                  Prefix => New_Reference_To (Temp, Loc)));\n          end if;\n \n          if Present (TagT) then\n@@ -593,11 +593,12 @@ package body Exp_Ch4 is\n \n                       Unchecked_Convert_To (T,\n                         Make_Explicit_Dereference (Loc,\n-                          New_Reference_To (Temp, Loc))),\n+                          Prefix => New_Reference_To (Temp, Loc))),\n \n                       Typ          => T,\n                       Flist_Ref    => Flist,\n-                      With_Attach  => Attach));\n+                      With_Attach  => Attach,\n+                      Allocator    => True));\n                end if;\n             end;\n          end if;\n@@ -3040,8 +3041,7 @@ package body Exp_Ch4 is\n \n    procedure Expand_N_Explicit_Dereference (N : Node_Id) is\n    begin\n-      --  The only processing required is an insertion of an explicit\n-      --  dereference call for the checked storage pool case.\n+      --  Insert explicit dereference call for the checked storage pool case\n \n       Insert_Dereference_Action (Prefix (N));\n    end Expand_N_Explicit_Dereference;\n@@ -4798,11 +4798,11 @@ package body Exp_Ch4 is\n       --  Signed integer cases, done using either Integer or Long_Long_Integer.\n       --  It is not worth having routines for Short_[Short_]Integer, since for\n       --  most machines it would not help, and it would generate more code that\n-      --  might need certification in the HI-E case.\n+      --  might need certification when a certified run time is required.\n \n       --  In the integer cases, we have two routines, one for when overflow\n-      --  checks are required, and one when they are not required, since\n-      --  there is a real gain in ommitting checks on many machines.\n+      --  checks are required, and one when they are not required, since there\n+      --  is a real gain in omitting checks on many machines.\n \n       elsif Rtyp = Base_Type (Standard_Long_Long_Integer)\n         or else (Rtyp = Base_Type (Standard_Long_Integer)\n@@ -8226,6 +8226,14 @@ package body Exp_Ch4 is\n \n            or else Is_Interface (Left_Type)\n          then\n+            --  Issue error if IW_Membership operation not available in a\n+            --  configurable run time setting.\n+\n+            if not RTE_Available (RE_IW_Membership) then\n+               Error_Msg_CRT (\"abstract interface types\", N);\n+               return Empty;\n+            end if;\n+\n             return\n               Make_Function_Call (Loc,\n                  Name => New_Occurrence_Of (RTE (RE_IW_Membership), Loc),"}, {"sha": "2535bb2c70c219da67455af21bf068b6e8b886b6", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=dfd99a80f01f7020727987fe981a2fe17ad034e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1248,6 +1248,12 @@ package body Exp_Ch7 is\n          Set_End_Label (Handled_Statement_Sequence (N), End_Lab);\n          Wrapped := True;\n \n+         --  Comment needed here, see RH for 1.306 ???\n+\n+         if Nkind (N) = N_Subprogram_Body then\n+            Set_Has_Nested_Block_With_Handler (Current_Scope);\n+         end if;\n+\n       --  Otherwise we do not wrap\n \n       else\n@@ -1957,10 +1963,11 @@ package body Exp_Ch7 is\n    -----------------------\n \n    function Make_Adjust_Call\n-     (Ref          : Node_Id;\n-      Typ          : Entity_Id;\n-      Flist_Ref    : Node_Id;\n-      With_Attach  : Node_Id) return List_Id\n+     (Ref         : Node_Id;\n+      Typ         : Entity_Id;\n+      Flist_Ref   : Node_Id;\n+      With_Attach : Node_Id;\n+      Allocator   : Boolean := False) return List_Id\n    is\n       Loc    : constant Source_Ptr := Sloc (Ref);\n       Res    : constant List_Id    := New_List;\n@@ -2018,8 +2025,19 @@ package body Exp_Ch7 is\n          Attach := Make_Integer_Literal (Loc, 0);\n       end if;\n \n+      --  Special case for allocators: need initialization of the chain\n+      --  pointers. For the 0 case, reset them to null.\n+\n+      if Allocator then\n+         pragma Assert (Nkind (Attach) = N_Integer_Literal);\n+\n+         if Intval (Attach) = 0 then\n+            Set_Intval (Attach, Uint_4);\n+         end if;\n+      end if;\n+\n       --  Generate:\n-      --    Deep_Adjust (Flist_Ref, Ref, With_Attach);\n+      --    Deep_Adjust (Flist_Ref, Ref, Attach);\n \n       if Has_Controlled_Component (Utyp)\n         or else Is_Class_Wide_Type (Typ)\n@@ -2158,7 +2176,7 @@ package body Exp_Ch7 is\n                Pid := Corresponding_Concurrent_Type (Param_Type);\n             end if;\n \n-            exit when not Present (Param) or else Present (Pid);\n+            exit when No (Param) or else Present (Pid);\n             Next (Param);\n          end loop;\n "}, {"sha": "02c38063407fe0d3d5e7910caccb437142cd7502", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=dfd99a80f01f7020727987fe981a2fe17ad034e5", "patch": "@@ -108,7 +108,8 @@ package Exp_Ch7 is\n      (Ref         : Node_Id;\n       Typ         : Entity_Id;\n       Flist_Ref   : Node_Id;\n-      With_Attach : Node_Id) return List_Id;\n+      With_Attach : Node_Id;\n+      Allocator   : Boolean := False) return List_Id;\n    --  Ref is an expression (with no-side effect and is not required to\n    --  have been previously analyzed) that references the object to be\n    --  adjusted. Typ is the expected type of Ref, which is a controlled\n@@ -126,6 +127,12 @@ package Exp_Ch7 is\n    --  details are in the body. The objects must be attached when the adjust\n    --  takes place after an initialization expression but not when it takes\n    --  place after a regular assignment.\n+   --\n+   --  If Allocator is True, we are adjusting a newly-created object. The\n+   --  existing chaining pointers should not be left unchanged, because they\n+   --  may come from a bit-for-bit copy of those from an initializing object.\n+   --  So, when this flag is True, if the chaining pointers should otherwise\n+   --  be left unset, instead they are reset to null.\n \n    function Make_Final_Call\n      (Ref         : Node_Id;"}, {"sha": "133c47ca285950abcd3bd3fa496c803f92073037", "filename": "gcc/ada/s-finimp.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fs-finimp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfd99a80f01f7020727987fe981a2fe17ad034e5/gcc%2Fada%2Fs-finimp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.adb?ref=dfd99a80f01f7020727987fe981a2fe17ad034e5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -60,8 +60,8 @@ package body System.Finalization_Implementation is\n      new Unchecked_Conversion (Address, RC_Ptr);\n \n    procedure Raise_Exception_No_Defer\n-     (E       : in Exception_Id;\n-      Message : in String := \"\");\n+     (E       : Exception_Id;\n+      Message : String := \"\");\n    pragma Import (Ada, Raise_Exception_No_Defer,\n      \"ada__exceptions__raise_exception_no_defer\");\n    pragma No_Return (Raise_Exception_No_Defer);\n@@ -214,6 +214,13 @@ package body System.Finalization_Implementation is\n             P.Next := L;\n             L := Obj'Unchecked_Access;\n          end;\n+\n+      --  Make the object completely unattached (case of a library-level,\n+      --  Finalize_Storage_Only object).\n+\n+      elsif Nb_Link = 4 then\n+         Obj.Prev := null;\n+         Obj.Next := null;\n       end if;\n    end Attach_To_Final_List;\n "}]}