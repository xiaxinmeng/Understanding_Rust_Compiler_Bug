{"sha": "c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1ZTg1ZTIzNmY2ODQ4ZGU3OWNhODJjYTVjZjZjY2JjODk3Yzg0Yw==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-06-01T12:47:02Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-06-01T12:47:02Z"}, "message": "[multiple changes]\n\n2004-06-01  Tom Tromey  <tromey@redhat.com>\n\n\t* java/io/ObjectStreamField.java: Cleaned up imports.\n\n2004-06-01  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/ObjectStreamField.java: Style and javadoc cleanup.\n\n2004-06-01  Mark Wielaard  <mark@klomp.org>\n\n\t* java/io/Writer.java (Writer(Object)): Fixed API doc.\n\nFrom-SVN: r82545", "tree": {"sha": "80a9c45de48f9c69ea0b5db7f6a7b1a5f98f6988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a9c45de48f9c69ea0b5db7f6a7b1a5f98f6988"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/comments", "author": null, "committer": null, "parents": [{"sha": "ea0ece094959f7c8f9f180665faee4c57b830b4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0ece094959f7c8f9f180665faee4c57b830b4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0ece094959f7c8f9f180665faee4c57b830b4d"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "b7f6887b18fc6d03243e4666b86aab0b3d34a141", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "patch": "@@ -1,3 +1,15 @@\n+2004-06-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/ObjectStreamField.java: Cleaned up imports.\n+\n+2004-06-01  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/ObjectStreamField.java: Style and javadoc cleanup.\n+      \n+2004-06-01  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/Writer.java (Writer(Object)): Fixed API doc.\n+\n 2004-06-01  Michael Koch  <konqueror@gmx.de>\n \n \t* java/security/Security.java"}, {"sha": "830a349344a00adbc1844efee94b920bb5e9a8d5", "filename": "libjava/java/io/ObjectStreamField.java", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/libjava%2Fjava%2Fio%2FObjectStreamField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/libjava%2Fjava%2Fio%2FObjectStreamField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamField.java?ref=c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "patch": "@@ -1,5 +1,5 @@\n /* ObjectStreamField.java -- Class used to store name and class of fields\n-   Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,9 +38,10 @@\n \n package java.io;\n \n+import gnu.java.lang.reflect.TypeSignature;\n+\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n-import gnu.java.lang.reflect.TypeSignature;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n \n@@ -87,6 +88,7 @@ public ObjectStreamField (String name, Class type)\n    *\n    * @param name Name of the field to export.\n    * @param type Type of the field in the concerned class.\n+   * @param unshared true if field will be unshared, false otherwise.\n    */\n   public ObjectStreamField (String name, Class type, boolean unshared)\n   {\n@@ -238,9 +240,16 @@ public boolean isPrimitive ()\n     return typename.length() == 1;\n   }\n \n-  public int compareTo (Object o)\n+  /**\n+   * Compares this object to the given object.\n+   *\n+   * @param obj the object to compare to.\n+   *\n+   * @return -1, 0 or 1.\n+   */\n+  public int compareTo (Object obj)\n   {\n-    ObjectStreamField f = (ObjectStreamField)o;\n+    ObjectStreamField f = (ObjectStreamField) obj;\n     boolean this_is_primitive = isPrimitive ();\n     boolean f_is_primitive = f.isPrimitive ();\n \n@@ -348,6 +357,11 @@ void checkFieldType() throws InvalidClassException\n \t \" in class \" + field.getDeclaringClass());\n   }\n \n+  /**\n+   * Returns a string representing this object.\n+   *\n+   * @return the string.\n+   */\n   public String toString ()\n   {\n     return \"ObjectStreamField< \" + type + \" \" + name + \" >\";\n@@ -364,7 +378,7 @@ final void setBooleanField(Object obj, boolean val)\n \tthrow new InternalError(x.getMessage());\n       }\n   }\n-  \n+\n   final void setByteField(Object obj, byte val)\n   {\n     try\n@@ -400,7 +414,7 @@ final void setShortField(Object obj, short val)\n \tthrow new InternalError(x.getMessage());\n       }\n   }\n-  \n+\n   final void setIntField(Object obj, int val)\n   {\n     try"}, {"sha": "49b6315231e5d2590bd208ff23049180493ccd7e", "filename": "libjava/java/io/Writer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/libjava%2Fjava%2Fio%2FWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05e85e236f6848de79ca82ca5cf6ccbc897c84c/libjava%2Fjava%2Fio%2FWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriter.java?ref=c05e85e236f6848de79ca82ca5cf6ccbc897c84c", "patch": "@@ -76,7 +76,7 @@ protected Writer()\n    * on the specified <code>Object</code>.\n    *\n    * @param lock The <code>Object</code> to use for synchronizing critical\n-   *             sections. Must be not be null.\n+   *             sections. Must not be null.\n    */\n   protected Writer(Object lock)\n   {"}]}