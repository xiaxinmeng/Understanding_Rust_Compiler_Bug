{"sha": "062c4bb37ac6f2af6753060d8f8db5230bc18b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyYzRiYjM3YWM2ZjJhZjY3NTMwNjBkOGY4ZGI1MjMwYmMxOGI0OQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-02-04T00:59:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-02-04T00:59:21Z"}, "message": "re PR c/29129 ([DR#341] unnamed parameters using [*])\n\n\tPR c/29129\n\t* c-decl.c (grokdeclarator): Mark [*] arrays in field declarators\n\tas having variable size.  Do not give an error for unnamed\n\tparameters with [*] declarators.  Give a warning for type names\n\twith [*] declarators and mark them as variable size.\n\t* c-parser.c (c_parser_sizeof_expression): Do not give an error\n\tfor sizeof applied to [*] type names.\n\ntestsuite:\n\t* c90-arraydecl-1.c: Do not expect error for [*] in abstract\n\tdeclarator.\n\t* vla-6.c: Likewise.  Expect warning not error for [*] lexically\n\tinside function prototype but not part of parameter declarator.\n\t* vla-11.c: New test.\n\nFrom-SVN: r143918", "tree": {"sha": "e3c8d3d5d76924587be86ae6609bd1a94db4b04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c8d3d5d76924587be86ae6609bd1a94db4b04f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062c4bb37ac6f2af6753060d8f8db5230bc18b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062c4bb37ac6f2af6753060d8f8db5230bc18b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062c4bb37ac6f2af6753060d8f8db5230bc18b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062c4bb37ac6f2af6753060d8f8db5230bc18b49/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "244c6ba0d3f7121fa0ee163c028a3ba066945e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244c6ba0d3f7121fa0ee163c028a3ba066945e45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244c6ba0d3f7121fa0ee163c028a3ba066945e45"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "fb586edbc0e1d1a1c594484c18b1f0295c944f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -1,3 +1,13 @@\n+2009-02-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/29129\n+\t* c-decl.c (grokdeclarator): Mark [*] arrays in field declarators\n+\tas having variable size.  Do not give an error for unnamed\n+\tparameters with [*] declarators.  Give a warning for type names\n+\twith [*] declarators and mark them as variable size.\n+\t* c-parser.c (c_parser_sizeof_expression): Do not give an error\n+\tfor sizeof applied to [*] type names.\n+\n 2009-02-03  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/36607"}, {"sha": "35a9c4b826161536d6e60e3304bdd23147ad3fea", "filename": "gcc/c-decl.c", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -4389,7 +4389,14 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      }\n \t    else if (decl_context == FIELD)\n \t      {\n-\t\tif (pedantic && !flag_isoc99 && !in_system_header)\n+\t\tif (array_parm_vla_unspec_p)\n+\t\t  /* Field names can in fact have function prototype\n+\t\t     scope so [*] is disallowed here through making\n+\t\t     the field variably modified, not through being\n+\t\t     something other than a declaration with function\n+\t\t     prototype scope.  */\n+\t\t  size_varies = 1;\n+\t\telse if (pedantic && !flag_isoc99 && !in_system_header)\n \t\t  pedwarn (input_location, OPT_pedantic,\n \t\t\t   \"ISO C90 does not support flexible array members\");\n \n@@ -4401,12 +4408,6 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      {\n \t\tif (array_parm_vla_unspec_p)\n \t\t  {\n-\t\t    if (! orig_name)\n-\t\t      {\n-\t\t\t/* C99 6.7.5.2p4 */\n-\t\t\terror (\"%<[*]%> not allowed in other than a declaration\");\n-\t\t      }\n-\n \t\t    itype = build_range_type (sizetype, size_zero_node, NULL_TREE);\n \t\t    size_varies = 1;\n \t\t  }\n@@ -4415,12 +4416,14 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      {\n \t\tif (array_parm_vla_unspec_p)\n \t\t  {\n-\t\t    /* The error is printed elsewhere.  We use this to\n-\t\t       avoid messing up with incomplete array types of\n-\t\t       the same type, that would otherwise be modified\n-\t\t       below.  */\n+\t\t    /* C99 6.7.5.2p4 */\n+\t\t    warning (0, \"%<[*]%> not in a declaration\");\n+\t\t    /* We use this to avoid messing up with incomplete\n+\t\t       array types of the same type, that would\n+\t\t       otherwise be modified below.  */\n \t\t    itype = build_range_type (sizetype, size_zero_node,\n \t\t\t\t\t      NULL_TREE);\n+\t\t    size_varies = 1;\n \t\t  }\n \t      }\n "}, {"sha": "199a5a72f3f7c130fa64e6c576f2afa800a9851a", "filename": "gcc/c-parser.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -4949,13 +4949,6 @@ c_parser_sizeof_expression (c_parser *parser)\n       /* sizeof ( type-name ).  */\n       skip_evaluation--;\n       in_sizeof--;\n-      if (type_name->declarator->kind == cdk_array\n-\t  && type_name->declarator->u.array.vla_unspec_p)\n-\t{\n-\t  /* C99 6.7.5.2p4 */\n-\t  error_at (expr_loc,\n-\t\t    \"%<[*]%> not allowed in other than a declaration\");\n-\t}\n       return c_expr_sizeof_type (type_name);\n     }\n   else"}, {"sha": "25dedae83a0acf96c1cab12dcb33113307aec0bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -1,3 +1,12 @@\n+2009-02-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/29129\n+\t* c90-arraydecl-1.c: Do not expect error for [*] in abstract\n+\tdeclarator.\n+\t* vla-6.c: Likewise.  Expect warning not error for [*] lexically\n+\tinside function prototype but not part of parameter declarator.\n+\t* vla-11.c: New test.\n+\n 2009-02-03  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/warn/main-4.C: New test."}, {"sha": "2b7eadbf615a97051651f1df8e5deafd5ddf176c", "filename": "gcc/testsuite/gcc.dg/c90-arraydecl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-arraydecl-1.c?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -10,7 +10,7 @@\n \n void foo0 (int a, int b[*]); /* { dg-error \"ISO C90\" \"\\[*\\] not in C90\" } */\n void foo1 (int, int [*]); /* { dg-error \"ISO C90\" \"\\[*\\] not in C90\" } */\n-/* { dg-error \"allowed\" \"\\'\\[*\\]\\' not allowed in other than a declaration\" { target *-*-* } 12 } */\n+\n \n /* Use of static and type qualifiers (not allowed with abstract declarators)\n    is a C99 feature.  */"}, {"sha": "8948e6b77a35dfca419910f69159f5a4c4e685a1", "filename": "gcc/testsuite/gcc.dg/vla-11.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-11.c?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -0,0 +1,13 @@\n+/* Further tests of [*] being rejected other that in declarations, as\n+   per the consensus in DR#341 that the second example there should be\n+   invalid (but warnings because the final wording appears to allow\n+   these cases).  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+void foo11a(int x[sizeof(int *(*)[*])]);\t/* { dg-warning \"not in a declaration\" } */\n+void foo11b(__SIZE_TYPE__ x, int y[(__SIZE_TYPE__)(int (*)[*])x]);\t/* { dg-warning \"not in a declaration\" } */\n+void foo11c(struct s { int (*x)[*]; } *y);\t/* { dg-error \"a member of a structure or union cannot have a variably modified type\" \"variably modified\" } */\n+/* { dg-warning \"'struct s' declared inside parameter list\" \"struct decl\" { target *-*-* } 11 } */\n+/* { dg-warning \"its scope is only this definition or declaration\" \"struct scope\" { target *-*-* } 11 } */"}, {"sha": "a7f5f051561c10e26eadb8de0bf0299df842854d", "filename": "gcc/testsuite/gcc.dg/vla-6.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062c4bb37ac6f2af6753060d8f8db5230bc18b49/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-6.c?ref=062c4bb37ac6f2af6753060d8f8db5230bc18b49", "patch": "@@ -7,9 +7,12 @@ int foo3(int i)[*];\t\t/* { dg-error \"not allowed in other than function prototype\n void foo4(int o[*][4]) { }\t/* { dg-error \"not allowed in other than function prototype scope\" } */\n void foo5(int o[4][*]) { }\t/* { dg-error \"not allowed in other than function prototype scope\" } */\n \n-/* [*] can't be used in a type that's not a declaration */\n-void foo11(int x[sizeof(int (*)[*])]);\t/* { dg-error \"not allowed in other than a declaration\" } */\n-void foo12(int [*]);\t\t/* { dg-error \"not allowed in other than a declaration\" } */\n+/* [*] can't be used in a type that's not a declaration (maybe, the\n+   final wording for DR#341 would allow it although the first\n+   discussed intent would not).  */\n+void foo11(int x[sizeof(int (*)[*])]);\t/* { dg-warning \"not in a declaration\" } */\n+/* This case is allowed per DR#341.  */\n+void foo12(int [*]);\n \n extern int n;\n int B[100];"}]}