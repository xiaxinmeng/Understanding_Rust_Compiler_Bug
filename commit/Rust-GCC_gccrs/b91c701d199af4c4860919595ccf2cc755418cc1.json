{"sha": "b91c701d199af4c4860919595ccf2cc755418cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxYzcwMWQxOTlhZjRjNDg2MDkxOTU5NWNjZjJjYzc1NTQxOGNjMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-05-26T12:58:02Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-05-26T12:58:02Z"}, "message": "NetPermission.java, [...]: New versions from classpath.\n\n2003-05-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/NetPermission.java,\n\tjava/net/NetworkInterface.java,\n\tjava/net/PasswordAuthentication.java,\n\tjava/net/SocketPermission.java:\n\tNew versions from classpath.\n\nFrom-SVN: r67174", "tree": {"sha": "86efa3b8b35f1d1070f09616f4939e1a8d3346ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86efa3b8b35f1d1070f09616f4939e1a8d3346ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b91c701d199af4c4860919595ccf2cc755418cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91c701d199af4c4860919595ccf2cc755418cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91c701d199af4c4860919595ccf2cc755418cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91c701d199af4c4860919595ccf2cc755418cc1/comments", "author": null, "committer": null, "parents": [{"sha": "8729d659a7e6d236c7012e5db5c865102fc3c916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8729d659a7e6d236c7012e5db5c865102fc3c916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8729d659a7e6d236c7012e5db5c865102fc3c916"}], "stats": {"total": 179, "additions": 102, "deletions": 77}, "files": [{"sha": "77da3159ef572dd0ea777a64db2385be0cad250c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b91c701d199af4c4860919595ccf2cc755418cc1", "patch": "@@ -1,3 +1,11 @@\n+2003-05-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/NetPermission.java,\n+\tjava/net/NetworkInterface.java,\n+\tjava/net/PasswordAuthentication.java,\n+\tjava/net/SocketPermission.java:\n+\tNew versions from classpath.\n+\n 2003-05-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/PushbackInputStream.java,"}, {"sha": "6b796be7f04a9e40c834945dfdc8f603e38ba965", "filename": "libjava/java/net/NetPermission.java", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FNetPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FNetPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetPermission.java?ref=b91c701d199af4c4860919595ccf2cc755418cc1", "patch": "@@ -41,9 +41,21 @@\n \n /**\n  * This class is used to model miscellaneous network permissions.  It is\n- * a subclass of BasicPermission.  This means that it models a \"boolean\"\n- * permission.  One that you either have or do not have.  Thus there is\n- * no permitted action list associated with this object. \n+ * a subclass of <code>BasicPermission</code>.  This means that it models a \n+ * \"boolean\" permission.  One that you either have or do not have.  Thus \n+ * there is no permitted action list associated with this object. \n+ *\n+ * The following permission names are defined for this class:\n+ * \n+ * <ul>\n+ * <li>setDefaultAuthenticator - Grants the ability to install a facility\n+ * to collect username and password information when requested by a \n+ * web site or proxy server.\n+ * <li>requestPasswordAuthentication - Grants the ability to ask the\n+ * authentication facility for the user's password.\n+ * <li>specifyStreamHandler - Grants the permission to specify the \n+ * stream handler class used when loading from a URL.\n+ * </ul>\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  */"}, {"sha": "c3eb7108002a577211b18b6eab6ba31bc783cf3f", "filename": "libjava/java/net/NetworkInterface.java", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetworkInterface.java?ref=b91c701d199af4c4860919595ccf2cc755418cc1", "patch": "@@ -41,6 +41,12 @@\n import java.util.Vector;\n \n /**\n+ * This class models a network interface on the host computer.  A network\n+ * interface contains a name (typically associated with a specific\n+ * hardware adapter) and a list of addresses that are bound to it.\n+ * For example, an ethernet interface may be named \"eth0\" and have the\n+ * address 192.168.1.101 assigned to it.\n+ *\n  * @author Michael Koch <konqueror@gmx.de>\n  * @since 1.4\n  */\n@@ -61,7 +67,9 @@ private native static Vector getRealNetworkInterfaces ()\n     throws SocketException;\n \n   /**\n-   *  Returns the name of the network interface\n+   * Returns the name of the network interface\n+   *\n+   * @return The name of the interface.\n    */\n   public String getName ()\n   {\n@@ -73,8 +81,8 @@ public String getName ()\n    *  \n    *  If a @see SecurityManager is available all addresses are checked\n    *  with @see SecurityManager::checkConnect() if they are available.\n-   *  Only InetAddresses are returned where the security manager doesn't\n-   *  thrown an exception.\n+   *  Only <code>InetAddresses</code> are returned where the security manager \n+   *  doesn't throw an exception.\n    *  \n    *  @return An enumeration of all addresses.\n    */\n@@ -106,6 +114,8 @@ public Enumeration getInetAddresses ()\n \n   /**\n    *  Returns the display name of the interface\n+   *\n+   *  @return The display name of the interface\n    */\n   public String getDisplayName ()\n   {\n@@ -168,7 +178,7 @@ public static NetworkInterface getByInetAddress (InetAddress addr)\n   }\n \n   /**\n-   *  Return an Enumeration of all available network interfaces\n+   *  Return an <code>Enumeration</code> of all available network interfaces\n    *\n    *  @exception SocketException If an error occurs\n    */"}, {"sha": "97554e3dde42f4044a5c21de99ed9eeebfd90181", "filename": "libjava/java/net/PasswordAuthentication.java", "status": "modified", "additions": 59, "deletions": 67, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPasswordAuthentication.java?ref=b91c701d199af4c4860919595ccf2cc755418cc1", "patch": "@@ -1,5 +1,5 @@\n /* PasswordAuthentication.java -- Container class for username/password pairs\n-   Copyright (C) 1998,2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,72 +45,64 @@\n   */\n public final class PasswordAuthentication\n {\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * The username \n-  */\n-private String username;\n-\n-/**\n-  * The password\n-  */\n-private char[] password;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Creates a new PasswordAuthentication object from the specified username\n-  * and password.\n-  *\n-  * @param username The username for this object\n-  * @param password The password for this object\n-  */\n-public\n-PasswordAuthentication(String username, char[] password)\n-{\n-  this.username = username;\n-  this.password = password;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * Returns the username associated with this object\n-  *\n-  * @return The username\n-  */\n-public String\n-getUserName()\n-{\n-  return(username);\n-}\n- \n-/*************************************************************************/\n-\n-/**\n-  * Returns the password associated with this object\n-  *\n-  * @return The password\n-  */\n-public char[]\n-getPassword()\n-{\n-  return(password);\n-}\n+  /*\n+   * Instance Variables\n+   */\n+\n+  /**\n+    * The username \n+    */\n+  private String username;\n+\n+  /**\n+    * The password\n+    */\n+  private char[] password;\n+\n+  /*************************************************************************/\n+\n+  /*\n+   * Constructors\n+   */\n+\n+  /**\n+    * Creates a new <code>PasswordAuthentication</code> object from the \n+    * specified username and password.\n+    *\n+    * @param username The username for this object\n+    * @param password The password for this object\n+    */\n+  public PasswordAuthentication(String username, char[] password)\n+  {\n+    this.username = username;\n+    this.password = password;\n+  }\n+\n+  /*************************************************************************/\n+\n+  /*\n+   * Instance Methods\n+   */\n+\n+  /**\n+    * Returns the username associated with this object\n+    *\n+    * @return The username\n+    */\n+  public String getUserName()\n+  {\n+    return(username);\n+  }\n+   \n+  /**\n+    * Returns the password associated with this object\n+    *\n+    * @return The password\n+    */\n+  public char[] getPassword()\n+  {\n+    return(password);\n+  }\n \n } // class PasswordAuthentication\n "}, {"sha": "dea04e2432aae6147c5e8ba5d29c90b076d40add", "filename": "libjava/java/net/SocketPermission.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91c701d199af4c4860919595ccf2cc755418cc1/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=b91c701d199af4c4860919595ccf2cc755418cc1", "patch": "@@ -96,6 +96,9 @@\n  *   Can accept connections from 197.197.20.1\n  * </pre><p>\n  *\n+ * This class also supports IPv6 addresses.  These should be specified\n+ * in either RFC 2732 format or in full uncompressed form.\n+ *\n  * @since 1.2\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n@@ -159,7 +162,7 @@ public boolean equals(Object obj)\n \n   /**\n    * Returns a hash code value for this object.  Overrides the \n-   * Permission.hashCode()\n+   * <code>Permission.hashCode()</code>.\n    *\n    * @return A hash code\n    */\n@@ -233,7 +236,7 @@ public PermissionCollection newPermissionCollection()\n    * Returns true if the permission object passed it is implied by the\n    * this permission.  This will be true if \n    * <p><ul>\n-   * <li>The argument is of type SocketPermission\n+   * <li>The argument is of type <code>SocketPermission</code>\n    * <li>The actions list of the argument are in this object's actions\n    * <li>The port range of the argument is within this objects port range\n    * <li>The hostname is equal to or a subset of this objects hostname\n@@ -247,7 +250,7 @@ public PermissionCollection newPermissionCollection()\n    * wildcards\n    * </ul>\n    *\n-   * @param perm The Permission to check against\n+   * @param perm The <code>Permission</code> to check against\n    *\n    * @return <code>true</code> if the <code>Permission</code> is implied by \n    * this object, <code>false</code> otherwise."}]}