{"sha": "5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ2MGFhOWM5MmRiNDg1ODkyN2Q3YTdjMjExOGU3MWQ3YzkwYWE2ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-04T18:57:53Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-04T18:57:53Z"}, "message": "decl.c (java_init_decl_processing): Create char_type_node as a regular INTEGER_TYPE node.\n\n\n\t* decl.c (java_init_decl_processing): Create char_type_node as a\n\tregular INTEGER_TYPE node.\n\t(push_promoted_type): Preserve TYPE_STRING_FLAG on types.\n\t* typeck.c (convert): No longer check for CHAR_TYPEs but instead\n\ttest for char_type_node and promoted_char_type_node as special\n\tinstances of INTEGER_TYPE tree codes.\n\t(promote_type,build_java_signature): Likewise.\n\t* jcf-write.c (adjust_typed_op): Likewise.\n\t* mangle.c (mangle_type): Likewise.\n\t* parse.y (do_unary_numeric_promotion): No longer handle CHAR_TYPE.\n\t* parse.h (JINTEGRAL_TYPE_P): Likewise.\n\nFrom-SVN: r110592", "tree": {"sha": "c0d1e0f40e8cd4dc49d6721aa72f8082ff6c8750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0d1e0f40e8cd4dc49d6721aa72f8082ff6c8750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/comments", "author": null, "committer": null, "parents": [{"sha": "dd4ebf6ae9d708b231ad929bbe6fa900fb336a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4ebf6ae9d708b231ad929bbe6fa900fb336a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4ebf6ae9d708b231ad929bbe6fa900fb336a02"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "5162d669db379d3c80e8a6fda8a277d727483b1f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -1,3 +1,17 @@\n+2006-02-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* decl.c (java_init_decl_processing): Create char_type_node as a\n+\tregular INTEGER_TYPE node.\n+\t(push_promoted_type): Preserve TYPE_STRING_FLAG on types.\n+\t* typeck.c (convert): No longer check for CHAR_TYPEs but instead\n+\ttest for char_type_node and promoted_char_type_node as special\n+\tinstances of INTEGER_TYPE tree codes.\n+\t(promote_type,build_java_signature): Likewise.\n+\t* jcf-write.c (adjust_typed_op): Likewise.\n+\t* mangle.c (mangle_type): Likewise.\n+\t* parse.y (do_unary_numeric_promotion): No longer handle CHAR_TYPE.\n+\t* parse.h (JINTEGRAL_TYPE_P): Likewise.\n+\n 2006-02-04  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* expr.c (java_stack_swap): Revert gcc_assert patch."}, {"sha": "06da90bff736635409988f269466fa29254c18b7", "filename": "gcc/java/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -538,6 +538,7 @@ push_promoted_type (const char *name, tree actual_type)\n   TYPE_MAX_VALUE (type) = copy_node (in_max);\n   TREE_TYPE (TYPE_MAX_VALUE (type)) = type;\n   TYPE_PRECISION (type) = TYPE_PRECISION (int_type_node);\n+  TYPE_STRING_FLAG (type) = TYPE_STRING_FLAG (actual_type);\n   layout_type (type);\n   pushdecl (build_decl (TYPE_DECL, get_identifier (name), type));\n   return type;\n@@ -738,7 +739,8 @@ java_init_decl_processing (void)\n      initializations of __FUNCTION__ and __PRETTY_FUNCTION__.  */\n   short_array_type_node = build_prim_array_type (short_type_node, 200);\n #endif\n-  char_type_node = make_node (CHAR_TYPE);\n+  char_type_node = make_node (INTEGER_TYPE);\n+  TYPE_STRING_FLAG (char_type_node) = 1;\n   TYPE_PRECISION (char_type_node) = 16;\n   fixup_unsigned_type (char_type_node);\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"char\"), char_type_node));"}, {"sha": "534336190918a883d0f49fe3486f85ee6daba6b4", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -875,9 +875,9 @@ adjust_typed_op (tree type, int max)\n     case RECORD_TYPE:   return 4;\n     case BOOLEAN_TYPE:\n       return TYPE_PRECISION (type) == 32 || max < 5 ? 0 : 5;\n-    case CHAR_TYPE:\n-      return TYPE_PRECISION (type) == 32 || max < 6 ? 0 : 6;\n     case INTEGER_TYPE:\n+      if (type == char_type_node || type == promoted_char_type_node)\n+\treturn TYPE_PRECISION (type) == 32 || max < 6 ? 0 : 6;\n       switch (TYPE_PRECISION (type))\n \t{\n \tcase  8:       return max < 5 ? 0 : 5;"}, {"sha": "a99bfe5b56cfbf0ec7a7a92a7ac1e42ac726d8fb", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -243,9 +243,13 @@ mangle_type (tree type)\n     {\n       char code;\n     case BOOLEAN_TYPE: code = 'b';  goto primitive;\n-    case CHAR_TYPE:    code = 'w';  goto primitive;\n     case VOID_TYPE:    code = 'v';  goto primitive;\n     case INTEGER_TYPE:\n+      if (type == char_type_node || type == promoted_char_type_node)\n+\t{\n+\t  code = 'w';\n+\t  goto primitive;\n+\t}\n       /* Get the original type instead of the arguments promoted type.\n \t Avoid symbol name clashes. Should call a function to do that.\n \t FIXME.  */"}, {"sha": "6b14ffe871e7c0da5d984aaf42791abe593dc048", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -196,8 +196,7 @@ extern void parse_error_context (tree cl, const char *gmsgid, ...) ATTRIBUTE_GCC\n /* Types classification, according to the JLS, section 4.2 */\n #define JFLOAT_TYPE_P(TYPE)      (TYPE && TREE_CODE ((TYPE)) == REAL_TYPE)\n #define JINTEGRAL_TYPE_P(TYPE)   ((TYPE) \t\t\t\t   \\\n-\t\t\t\t  && (TREE_CODE ((TYPE)) == INTEGER_TYPE   \\\n-\t\t\t\t      || TREE_CODE ((TYPE)) == CHAR_TYPE))\n+\t\t\t\t  && (TREE_CODE ((TYPE)) == INTEGER_TYPE))\n #define JNUMERIC_TYPE_P(TYPE)    ((TYPE)\t\t\t\t\\\n \t\t\t\t  && (JFLOAT_TYPE_P ((TYPE))\t\t\\\n \t\t\t\t      || JINTEGRAL_TYPE_P ((TYPE))))"}, {"sha": "4ba158171b0fad1cb2cd5fa1f04eba42e9d8fc7d", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -13331,8 +13331,7 @@ static tree\n do_unary_numeric_promotion (tree arg)\n {\n   tree type = TREE_TYPE (arg);\n-  if ((TREE_CODE (type) == INTEGER_TYPE && TYPE_PRECISION (type) < 32)\n-      || TREE_CODE (type) == CHAR_TYPE)\n+  if (TREE_CODE (type) == INTEGER_TYPE && TYPE_PRECISION (type) < 32)\n     arg = convert (int_type_node, arg);\n   return arg;\n }"}, {"sha": "eac1b53c8d0198c845df0e331e523b2562b1b1e5", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5460aa9c92db4858927d7a7c2118e71d7c90aa6d/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=5460aa9c92db4858927d7a7c2118e71d7c90aa6d", "patch": "@@ -125,10 +125,12 @@ convert (tree type, tree expr)\n     return error_mark_node;\n   if (code == VOID_TYPE)\n     return build1 (CONVERT_EXPR, type, expr);\n-  if (code == BOOLEAN_TYPE || code ==  CHAR_TYPE)\n+  if (code == BOOLEAN_TYPE)\n     return fold_convert (type, expr);\n   if (code == INTEGER_TYPE)\n     {\n+      if (type == char_type_node || type == promoted_char_type_node)\n+\treturn fold_convert (type, expr);\n       if ((really_constant_p (expr)\n \t   || (! flag_unsafe_math_optimizations\n \t       && ! flag_emit_class_files))\n@@ -430,11 +432,9 @@ promote_type (tree type)\n       if (type == boolean_type_node)\n \treturn promoted_boolean_type_node;\n       goto handle_int;\n-    case CHAR_TYPE:\n+    case INTEGER_TYPE:\n       if (type == char_type_node)\n \treturn promoted_char_type_node;\n-      goto handle_int;\n-    case INTEGER_TYPE:\n     handle_int:\n       if (TYPE_PRECISION (type) < TYPE_PRECISION (int_type_node))\n \t{\n@@ -601,9 +601,13 @@ build_java_signature (tree type)\n       switch (TREE_CODE (type))\n \t{\n \tcase BOOLEAN_TYPE: sg[0] = 'Z';  goto native;\n-\tcase CHAR_TYPE:    sg[0] = 'C';  goto native;\n \tcase VOID_TYPE:    sg[0] = 'V';  goto native;\n \tcase INTEGER_TYPE:\n+          if (type == char_type_node || type == promoted_char_type_node)\n+\t    {\n+\t      sg[0] = 'C';\n+\t      goto native;\n+\t    }\n \t  switch (TYPE_PRECISION (type))\n \t    {\n \t    case  8:       sg[0] = 'B';  goto native;"}]}