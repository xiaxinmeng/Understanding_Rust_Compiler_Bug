{"sha": "058514b381c9f8225cfd63731d90006c37a83139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4NTE0YjM4MWM5ZjgyMjVjZmQ2MzczMWQ5MDAwNmMzN2E4MzEzOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2008-08-07T16:29:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2008-08-07T16:29:22Z"}, "message": "configure.ac (HAVE_GAS_CFI_PERSONALITY_DIRECTIVE): New.\n\n        * configure.ac (HAVE_GAS_CFI_PERSONALITY_DIRECTIVE): New.\n        * configure, config.in: Rebuild.\n        * debug.h (dwarf2out_do_cfi_asm): Declare.\n        * c-cppbuiltin.c (c_cpp_builtins): Use it.\n        * dwarf2out.c (dwarf2out_do_cfi_asm): New.\n        (dwarf2out_cfi_label, add_fde_cfi, output_call_frame_info,\n        dwarf2out_begin_prologue, dwarf2out_end_epilogue): Use it.\n\nFrom-SVN: r138846", "tree": {"sha": "6f429f963a824f06c51ad8534931937fd85f61e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f429f963a824f06c51ad8534931937fd85f61e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058514b381c9f8225cfd63731d90006c37a83139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058514b381c9f8225cfd63731d90006c37a83139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058514b381c9f8225cfd63731d90006c37a83139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058514b381c9f8225cfd63731d90006c37a83139/comments", "author": null, "committer": null, "parents": [{"sha": "9940eebdf8c0614c2bcde838ed2ac56ae96e93b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9940eebdf8c0614c2bcde838ed2ac56ae96e93b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9940eebdf8c0614c2bcde838ed2ac56ae96e93b3"}], "stats": {"total": 111, "additions": 102, "deletions": 9}, "files": [{"sha": "3ec7ba792c46b7c3dfed0237b43fee652e70939c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -1,3 +1,13 @@\n+2008-08-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.ac (HAVE_GAS_CFI_PERSONALITY_DIRECTIVE): New.\n+\t* configure, config.in: Rebuild.\n+\t* debug.h (dwarf2out_do_cfi_asm): Declare.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Use it.\n+\t* dwarf2out.c (dwarf2out_do_cfi_asm): New.\n+\t(dwarf2out_cfi_label, add_fde_cfi, output_call_frame_info,\n+\tdwarf2out_begin_prologue, dwarf2out_end_epilogue): Use it.\n+\n 2008-08-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/iwmmxt.md (movv8qi_internal, movv4hi_internal,"}, {"sha": "cbd56b4f793c798f2a36c74d8be699b35ab5bc96", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -693,7 +693,7 @@ c_cpp_builtins (cpp_reader *pfile)\n #endif\n \n #ifdef DWARF2_UNWIND_INFO\n-  if (flag_dwarf2_cfi_asm && dwarf2out_do_frame ())\n+  if (dwarf2out_do_cfi_asm ())\n     cpp_define (pfile, \"__GCC_HAVE_DWARF2_CFI_ASM\");\n #endif\n "}, {"sha": "209da217a8299a410fac7cd49f55214fa8a34c9c", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -827,6 +827,12 @@\n #endif\n \n \n+/* Define 0/1 if your assembler supports .cfi_personality. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_CFI_PERSONALITY_DIRECTIVE\n+#endif\n+\n+\n /* Define if your assembler uses the new HImode fild and fist notation. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_FILDS_FISTS"}, {"sha": "3625898cc9e86382f8e8f596c3385d05f9fd1d87", "filename": "gcc/configure", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -20851,7 +20851,6 @@ fi\n \t.cfi_same_value 1\n \t.cfi_def_cfa 1, 2\n \t.cfi_escape 1, 2, 3, 4, 5\n-\t.cfi_personality 0, symbol\n \t.cfi_endproc' > conftest.s\n     if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n   { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n@@ -20877,6 +20876,47 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+echo \"$as_me:$LINENO: checking assembler for cfi personality directive\" >&5\n+echo $ECHO_N \"checking assembler for cfi personality directive... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_cfi_personality_directive+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_cfi_personality_directive=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 17 \\) \\* 1000 + 0`\n+  then gcc_cv_as_cfi_personality_directive=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo '\t.text\n+\t.cfi_startproc,\n+\t.cfi_personality 0, symbol\n+\t.cfi_endproc' > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_cfi_personality_directive=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_cfi_personality_directive\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_cfi_personality_directive\" >&6\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GAS_CFI_PERSONALITY_DIRECTIVE `if test $gcc_cv_as_cfi_personality_directive = yes;\n+    then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n # GAS versions up to and including 2.11.0 may mis-optimize\n # .eh_frame data.\n echo \"$as_me:$LINENO: checking assembler for eh_frame optimization\" >&5"}, {"sha": "a79107fb65e88cee1a1b79331d065ad7e51ab877", "filename": "gcc/configure.ac", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -2189,11 +2189,21 @@ gcc_GAS_CHECK_FEATURE([cfi directives], gcc_cv_as_cfi_directive,\n \t.cfi_same_value 1\n \t.cfi_def_cfa 1, 2\n \t.cfi_escape 1, 2, 3, 4, 5\n-\t.cfi_personality 0, symbol\n \t.cfi_endproc])\n AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_DIRECTIVE,\n   [`if test $gcc_cv_as_cfi_directive = yes; then echo 1; else echo 0; fi`],\n-[Define 0/1 if your assembler supports CFI directives.])\n+  [Define 0/1 if your assembler supports CFI directives.])\n+\n+gcc_GAS_CHECK_FEATURE([cfi personality directive],\n+  gcc_cv_as_cfi_personality_directive, [elf,2,17,0],,\n+[\t.text\n+\t.cfi_startproc,\n+\t.cfi_personality 0, symbol\n+\t.cfi_endproc])\n+AC_DEFINE_UNQUOTED(HAVE_GAS_CFI_PERSONALITY_DIRECTIVE,\n+  [`if test $gcc_cv_as_cfi_personality_directive = yes;\n+    then echo 1; else echo 0; fi`],\n+  [Define 0/1 if your assembler supports .cfi_personality.])\n \n # GAS versions up to and including 2.11.0 may mis-optimize\n # .eh_frame data."}, {"sha": "6cdf7863a25a753a524bd43e73371475009631a7", "filename": "gcc/debug.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -160,6 +160,7 @@ extern void dwarf2out_frame_finish (void);\n /* Decide whether we want to emit frame unwind information for the current\n    translation unit.  */\n extern int dwarf2out_do_frame (void);\n+extern int dwarf2out_do_cfi_asm (void);\n extern void dwarf2out_switch_text_section (void);\n \n extern void debug_flush_symbol_queue (void);"}, {"sha": "ced629dfda7c7b0a1c382377d2e1f77bba235f92", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058514b381c9f8225cfd63731d90006c37a83139/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=058514b381c9f8225cfd63731d90006c37a83139", "patch": "@@ -130,6 +130,32 @@ dwarf2out_do_frame (void)\n \t  );\n }\n \n+/* Decide whether to emit frame unwind via assembler directives.  */\n+\n+int\n+dwarf2out_do_cfi_asm (void)\n+{\n+  int enc;\n+\n+  if (!flag_dwarf2_cfi_asm || !dwarf2out_do_frame ())\n+    return false;\n+  if (!eh_personality_libfunc)\n+    return true;\n+  if (!HAVE_GAS_CFI_PERSONALITY_DIRECTIVE)\n+    return false;\n+\n+  /* Make sure the personality encoding is one the assembler can support.\n+     In particular, aligned addresses can't be handled.  */\n+  enc = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2,/*global=*/1);\n+  if ((enc & 0x70) != 0 && (enc & 0x70) != DW_EH_PE_pcrel)\n+    return false;\n+  enc = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0,/*global=*/0);\n+  if ((enc & 0x70) != 0 && (enc & 0x70) != DW_EH_PE_pcrel)\n+    return false;\n+\n+  return true;\n+}\n+\n /* The size of the target's pointer type.  */\n #ifndef PTR_SIZE\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n@@ -667,7 +693,7 @@ dwarf2out_cfi_label (void)\n {\n   static char label[20];\n \n-  if (flag_dwarf2_cfi_asm)\n+  if (dwarf2out_do_cfi_asm ())\n     {\n       /* In this case, we will be emitting the asm directive instead of\n \t the label, so just return a placeholder to keep the rest of the\n@@ -691,7 +717,7 @@ add_fde_cfi (const char *label, dw_cfi_ref cfi)\n {\n   dw_cfi_ref *list_head = &cie_cfi_head;\n \n-  if (flag_dwarf2_cfi_asm)\n+  if (dwarf2out_do_cfi_asm ())\n     {\n       if (label)\n \t{\n@@ -2767,7 +2793,7 @@ output_call_frame_info (int for_eh)\n     return;\n \n   /* Nothing to do if the assembler's doing it all.  */\n-  if (flag_dwarf2_cfi_asm)\n+  if (dwarf2out_do_cfi_asm ())\n     return;\n \n   /* If we make FDEs linkonce, we may have to emit an empty label for\n@@ -3187,7 +3213,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n     dwarf2out_source_line (line, file);\n #endif\n \n-  if (flag_dwarf2_cfi_asm)\n+  if (dwarf2out_do_cfi_asm ())\n     {\n       int enc;\n       rtx ref;\n@@ -3242,7 +3268,7 @@ dwarf2out_end_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n   dw_fde_ref fde;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n-  if (flag_dwarf2_cfi_asm)\n+  if (dwarf2out_do_cfi_asm ())\n     fprintf (asm_out_file, \"\\t.cfi_endproc\\n\");\n \n   /* Output a label to mark the endpoint of the code generated for this"}]}