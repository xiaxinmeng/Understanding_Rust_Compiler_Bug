{"sha": "3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIzMGM2MTRlN2Q2N2RlZTBlYjVlMjBiYjZjODhiYmU4MzkzYmIzZQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2014-08-15T02:42:33Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2014-08-15T02:42:33Z"}, "message": "tree-ssa-loop-ivopts.c (ivopts_data): New field name_expansion_cache.\n\n\n\t* tree-ssa-loop-ivopts.c (ivopts_data): New field\n\tname_expansion_cache.\n\t(tree_ssa_iv_optimize_init): Initialize name_expansion_cache.\n\t(tree_ssa_iv_optimize_finalize): Free name_expansion_cache.\n\t(strip_wrap_conserving_type_conversions, expr_equal_p): Delete.\n\t(difference_cannot_overflow_p): New parameter.  Use affine\n\texpansion for equality check.\n\t(iv_elimination_compare_lt): Pass new argument.\n\n\ttestsuite/ChangeLog\n\t* gcc.dg/tree-ssa/ivopts-lt-2.c: New test.\n\nFrom-SVN: r213997", "tree": {"sha": "df8afbff2132f6e4c3177834a99317760f7adbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df8afbff2132f6e4c3177834a99317760f7adbf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/comments", "author": null, "committer": null, "parents": [{"sha": "e33a3cf354873030276965a49eb98e97f88ec90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33a3cf354873030276965a49eb98e97f88ec90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33a3cf354873030276965a49eb98e97f88ec90b"}], "stats": {"total": 123, "additions": 61, "deletions": 62}, "files": [{"sha": "f1b17338e7e6ec33863bf18958d003f285b9d763", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "patch": "@@ -1,3 +1,14 @@\n+2014-08-15  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (ivopts_data): New field\n+\tname_expansion_cache.\n+\t(tree_ssa_iv_optimize_init): Initialize name_expansion_cache.\n+\t(tree_ssa_iv_optimize_finalize): Free name_expansion_cache.\n+\t(strip_wrap_conserving_type_conversions, expr_equal_p): Delete.\n+\t(difference_cannot_overflow_p): New parameter.  Use affine\n+\texpansion for equality check.\n+\t(iv_elimination_compare_lt): Pass new argument.\n+\n 2014-08-14  DJ Delorie  <dj@redhat.com>\n \n \t* config/rl78/rl78-expand.md (umulqihi3): Disable for G10."}, {"sha": "a55214702cb171168f3f896d6008a1f858f756ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "patch": "@@ -1,3 +1,7 @@\n+2014-08-15  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/tree-ssa/ivopts-lt-2.c: New test.\n+\n 2014-08-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR tree-optimization/62091"}, {"sha": "177e0689248cae7d4663ab210e742f1ac93ac5c8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-lt-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt-2.c?ref=3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ivopts\" } */\n+\n+void\n+f1 (int *p, unsigned int i)\n+{\n+  p += i;\n+  do\n+    {\n+      *p = 0;\n+      p += 1;\n+      i++;\n+    }\n+  while (i < 100);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"PHI\" 1 \"ivopts\" } } */\n+/* { dg-final { scan-tree-dump-times \"PHI <p_\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"p_\\[0-9\\]* <\" 1 \"ivopts\" } } */\n+/* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "8f5ecbc30f77bc90b560b92452e9c68795edb420", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 26, "deletions": 62, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=3230c614e7d67dee0eb5e20bb6c88bbe8393bb3e", "patch": "@@ -323,6 +323,9 @@ struct ivopts_data\n   /* A bitmap of important candidates.  */\n   bitmap important_candidates;\n \n+  /* Cache used by tree_to_aff_combination_expand.  */\n+  hash_map<tree, name_expansion *> *name_expansion_cache;\n+\n   /* The maximum invariant id.  */\n   unsigned max_inv_id;\n \n@@ -876,6 +879,7 @@ tree_ssa_iv_optimize_init (struct ivopts_data *data)\n   data->iv_candidates.create (20);\n   data->inv_expr_tab = new hash_table<iv_inv_expr_hasher> (10);\n   data->inv_expr_id = 0;\n+  data->name_expansion_cache = NULL;\n   decl_rtl_to_reset.create (20);\n }\n \n@@ -4462,75 +4466,20 @@ iv_elimination_compare (struct ivopts_data *data, struct iv_use *use)\n   return (exit->flags & EDGE_TRUE_VALUE ? EQ_EXPR : NE_EXPR);\n }\n \n-static tree\n-strip_wrap_conserving_type_conversions (tree exp)\n-{\n-  while (tree_ssa_useless_type_conversion (exp)\n-\t && (nowrap_type_p (TREE_TYPE (exp))\n-\t     == nowrap_type_p (TREE_TYPE (TREE_OPERAND (exp, 0)))))\n-    exp = TREE_OPERAND (exp, 0);\n-  return exp;\n-}\n-\n-/* Walk the SSA form and check whether E == WHAT.  Fairly simplistic, we\n-   check for an exact match.  */\n-\n-static bool\n-expr_equal_p (tree e, tree what)\n-{\n-  gimple stmt;\n-  enum tree_code code;\n-\n-  e = strip_wrap_conserving_type_conversions (e);\n-  what = strip_wrap_conserving_type_conversions (what);\n-\n-  code = TREE_CODE (what);\n-  if (TREE_TYPE (e) != TREE_TYPE (what))\n-    return false;\n-\n-  if (operand_equal_p (e, what, 0))\n-    return true;\n-\n-  if (TREE_CODE (e) != SSA_NAME)\n-    return false;\n-\n-  stmt = SSA_NAME_DEF_STMT (e);\n-  if (gimple_code (stmt) != GIMPLE_ASSIGN\n-      || gimple_assign_rhs_code (stmt) != code)\n-    return false;\n-\n-  switch (get_gimple_rhs_class (code))\n-    {\n-    case GIMPLE_BINARY_RHS:\n-      if (!expr_equal_p (gimple_assign_rhs2 (stmt), TREE_OPERAND (what, 1)))\n-\treturn false;\n-      /* Fallthru.  */\n-\n-    case GIMPLE_UNARY_RHS:\n-    case GIMPLE_SINGLE_RHS:\n-      return expr_equal_p (gimple_assign_rhs1 (stmt), TREE_OPERAND (what, 0));\n-    default:\n-      return false;\n-    }\n-}\n-\n /* Returns true if we can prove that BASE - OFFSET does not overflow.  For now,\n    we only detect the situation that BASE = SOMETHING + OFFSET, where the\n    calculation is performed in non-wrapping type.\n \n    TODO: More generally, we could test for the situation that\n \t BASE = SOMETHING + OFFSET' and OFFSET is between OFFSET' and zero.\n-\t This would require knowing the sign of OFFSET.\n-\n-\t Also, we only look for the first addition in the computation of BASE.\n-\t More complex analysis would be better, but introducing it just for\n-\t this optimization seems like an overkill.  */\n+\t This would require knowing the sign of OFFSET.  */\n \n static bool\n-difference_cannot_overflow_p (tree base, tree offset)\n+difference_cannot_overflow_p (struct ivopts_data *data, tree base, tree offset)\n {\n   enum tree_code code;\n   tree e1, e2;\n+  aff_tree aff_e1, aff_e2, aff_offset;\n \n   if (!nowrap_type_p (TREE_TYPE (base)))\n     return false;\n@@ -4560,13 +4509,27 @@ difference_cannot_overflow_p (tree base, tree offset)\n       e2 = TREE_OPERAND (base, 1);\n     }\n \n-  /* TODO: deeper inspection may be necessary to prove the equality.  */\n+  /* Use affine expansion as deeper inspection to prove the equality.  */\n+  tree_to_aff_combination_expand (e2, TREE_TYPE (e2),\n+\t\t\t\t  &aff_e2, &data->name_expansion_cache);\n+  tree_to_aff_combination_expand (offset, TREE_TYPE (offset),\n+\t\t\t\t  &aff_offset, &data->name_expansion_cache);\n+  aff_combination_scale (&aff_offset, -1);\n   switch (code)\n     {\n     case PLUS_EXPR:\n-      return expr_equal_p (e1, offset) || expr_equal_p (e2, offset);\n+      aff_combination_add (&aff_e2, &aff_offset);\n+      if (aff_combination_zero_p (&aff_e2))\n+\treturn true;\n+\n+      tree_to_aff_combination_expand (e1, TREE_TYPE (e1),\n+\t\t\t\t      &aff_e1, &data->name_expansion_cache);\n+      aff_combination_add (&aff_e1, &aff_offset);\n+      return aff_combination_zero_p (&aff_e1);\n+\n     case POINTER_PLUS_EXPR:\n-      return expr_equal_p (e2, offset);\n+      aff_combination_add (&aff_e2, &aff_offset);\n+      return aff_combination_zero_p (&aff_e2);\n \n     default:\n       return false;\n@@ -4690,7 +4653,7 @@ iv_elimination_compare_lt (struct ivopts_data *data,\n   offset = fold_build2 (MULT_EXPR, TREE_TYPE (cand->iv->step),\n \t\t\tcand->iv->step,\n \t\t\tfold_convert (TREE_TYPE (cand->iv->step), a));\n-  if (!difference_cannot_overflow_p (cand->iv->base, offset))\n+  if (!difference_cannot_overflow_p (data, cand->iv->base, offset))\n     return false;\n \n   /* Determine the new comparison operator.  */\n@@ -6815,6 +6778,7 @@ tree_ssa_iv_optimize_finalize (struct ivopts_data *data)\n   data->iv_candidates.release ();\n   delete data->inv_expr_tab;\n   data->inv_expr_tab = NULL;\n+  free_affine_expand_cache (&data->name_expansion_cache);\n }\n \n /* Returns true if the loop body BODY includes any function calls.  */"}]}