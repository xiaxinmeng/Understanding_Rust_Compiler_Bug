{"sha": "f970c857c9232309c68e39214e0fb65c0cfa615c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk3MGM4NTdjOTIzMjMwOWM2OGUzOTIxNGUwZmI2NWMwY2ZhNjE1Yw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-08-06T04:58:04Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-08-06T04:58:04Z"}, "message": "re PR fortran/28590 (A SEQUENCEd defined type which refers to another defined type generates a spurious complaint about the lack of SEQUENCE attribute in the latter)\n\n2006-08-06  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28590\n\t* parse.c (parse_derived): Remove the test for sequence type\n\tcomponents of a sequence type.\n\t* resolve.c (resolve_fl_derived): Put the test here so that\n\tpointer components are tested.\n\n2006-08-06  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28590\n\t* gfortran.dg/sequence_types_1.f90: New test.\n\nFrom-SVN: r115966", "tree": {"sha": "6f83df7381e246e6366f03d0e9609d8de8f0d748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f83df7381e246e6366f03d0e9609d8de8f0d748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f970c857c9232309c68e39214e0fb65c0cfa615c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f970c857c9232309c68e39214e0fb65c0cfa615c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f970c857c9232309c68e39214e0fb65c0cfa615c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f970c857c9232309c68e39214e0fb65c0cfa615c/comments", "author": null, "committer": null, "parents": [{"sha": "994c1cc04dda157794990bbe71412678e3d7fad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994c1cc04dda157794990bbe71412678e3d7fad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994c1cc04dda157794990bbe71412678e3d7fad8"}], "stats": {"total": 118, "additions": 103, "deletions": 15}, "files": [{"sha": "d5f0cfed9894eaeeff748686e20a2af65c014485", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f970c857c9232309c68e39214e0fb65c0cfa615c", "patch": "@@ -1,3 +1,11 @@\n+2006-08-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28590\n+\t* parse.c (parse_derived): Remove the test for sequence type\n+\tcomponents of a sequence type.\n+\t* resolve.c (resolve_fl_derived): Put the test here so that\n+\tpointer components are tested.\n+\n 2006-08-05  Steven G. Kargl <kargls@comcast.nt>\n \n \tPR fortran/28548"}, {"sha": "0416d2882867bec1b2ef10c96cce738e17cd6da7", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=f970c857c9232309c68e39214e0fb65c0cfa615c", "patch": "@@ -1498,7 +1498,6 @@ parse_derived (void)\n {\n   int compiling_type, seen_private, seen_sequence, seen_component, error_flag;\n   gfc_statement st;\n-  gfc_component *c;\n   gfc_state_data s;\n \n   error_flag = 0;\n@@ -1596,20 +1595,6 @@ parse_derived (void)\n \t}\n     }\n \n-  /* Sanity checks on the structure.  If the structure has the\n-     SEQUENCE attribute, then all component structures must also have\n-     SEQUENCE.  */\n-  if (error_flag == 0 && gfc_current_block ()->attr.sequence)\n-    for (c = gfc_current_block ()->components; c; c = c->next)\n-      {\n-\tif (c->ts.type == BT_DERIVED && c->ts.derived->attr.sequence == 0)\n-\t  {\n-\t    gfc_error\n-\t      (\"Component %s of SEQUENCE type declared at %C does not \"\n-\t       \"have the SEQUENCE attribute\", c->ts.derived->name);\n-\t  }\n-      }\n-\n   pop_state ();\n }\n "}, {"sha": "cb45a2b2a22997f7285c840e472f6d5312bf0597", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f970c857c9232309c68e39214e0fb65c0cfa615c", "patch": "@@ -5392,6 +5392,17 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  return FAILURE;\n \t}\n \n+      if (sym->attr.sequence)\n+\t{\n+\t  if (c->ts.type == BT_DERIVED && c->ts.derived->attr.sequence == 0)\n+\t    {\n+\t      gfc_error (\"Component %s of SEQUENCE type declared at %L does \"\n+\t\t\t \"not have the SEQUENCE attribute\",\n+\t\t\t c->ts.derived->name, &sym->declared_at);\n+\t      return FAILURE;\n+\t    }\n+\t}\n+\n       if (c->pointer || c->as == NULL)\n \tcontinue;\n "}, {"sha": "bdce8cac5de0dd71afa0da5cf6cd9d7ea40a9713", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f970c857c9232309c68e39214e0fb65c0cfa615c", "patch": "@@ -1,3 +1,8 @@\n+2006-08-06  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28590\n+\t* gfortran.dg/sequence_types_1.f90: New test.\n+\n 2006-08-05  Steven G. Kargl <kargls@comcast.nt>\n \n \tPR fortran/28548"}, {"sha": "6c0bb247c8756e183df60cdcffc02c43e4ca1153", "filename": "gcc/testsuite/gfortran.dg/sequence_types_1.f90", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ftestsuite%2Fgfortran.dg%2Fsequence_types_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f970c857c9232309c68e39214e0fb65c0cfa615c/gcc%2Ftestsuite%2Fgfortran.dg%2Fsequence_types_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsequence_types_1.f90?ref=f970c857c9232309c68e39214e0fb65c0cfa615c", "patch": "@@ -0,0 +1,79 @@\n+! { dg-do compile }\n+! Tests the fix for PR28590, in which pointer components of sequence\n+! types would give the error that the component is itself not a\n+! sequence type (4.4.1) if the component was not already defined.\n+!\n+! Contributed by Chris Nelson <ccnelson@itacllc.com>\n+! \n+module data_types\n+  Integer, Parameter :: kindAry    = selected_int_kind(r=8)\n+  Integer, Parameter :: kindInt    = selected_int_kind(r=8)\n+\n+  Integer, Parameter :: kindQ      = selected_real_kind(p=6,r=37)\n+  Integer, Parameter :: kindXYZ    = selected_real_kind(p=13,r=200)\n+  Integer, Parameter :: kindDouble = selected_real_kind(p=13,r=200)\n+\n+  type GroupLoadInfo\n+    sequence\n+    Integer(kindAry)          :: loadMode\n+    Integer(kindAry)          :: normalDir\n+    Real(kindQ)               :: refS, refL, refX, refY, refZ\n+    Real(kindQ)               :: forcex,   forcey,   forcez \n+    Real(kindQ)               :: forcexv,  forceyv,  forcezv \n+    Real(kindQ)               :: momx,     momy,     momz \n+    Real(kindQ)               :: momxv,    momyv,    momzv \n+    Real(kindQ)               :: flmassx,  flmassy,  flmassz \n+    Real(kindQ)               :: flmomtmx, flmomtmy, flmomtmz \n+    Real(kindQ)               :: flheatN\n+  end type GroupLoadInfo\n+\n+  type GroupRigidMotion\n+    sequence\n+    Integer(kindInt)                     :: motiontyp\n+    Real(kindXYZ), dimension(3)          :: xref\n+    Real(kindXYZ), dimension(3)          :: angCurrent\n+    Real(kindXYZ), dimension(3)          :: xdot\n+    Real(kindXYZ), dimension(3)          :: angNew\n+    Real(kindXYZ), dimension(3)          :: angRate\n+    Real(kindDouble)                     :: curTim\n+    Real(kindXYZ)              , pointer :: properties\n+    Type(PrescribedMotionData) , pointer :: PrescribeDat\n+  end type GroupRigidMotion\n+\n+  type PrescribedMotionData\n+    sequence\n+    Integer(kindInt)            :: prescr_typ\n+    Real(kindXYZ), dimension(3) :: xvel\n+    Real(kindXYZ)               :: amplitude\n+    Real(kindXYZ)               :: frequency\n+    Real(kindXYZ)               :: phase\n+    Real(kindXYZ), dimension(3) :: thetadot\n+    Real(kindXYZ), dimension(3) :: thetaddot\n+  end type PrescribedMotionData\n+  \n+  type GroupDeformingMotion\n+    sequence\n+    Integer(kindAry) :: nmodes\n+  end type GroupDeformingMotion\n+  \n+  type GroupLL\n+    sequence\n+    type(GroupLL)             , pointer :: next\n+    type(GroupLL)             , pointer :: parent\n+    character(32)                       :: name\n+    type(GroupDefLL)          , pointer :: entities\n+    type(GroupLoadInfo)       , pointer :: loadInfo\n+    type(GroupRigidMotion)    , pointer :: RigidMotion\n+    type(GroupDeformingMotion), pointer :: DeformingMotion\n+  end type GroupLL\n+  \n+  type GroupDefLL \n+    sequence\n+    type ( GroupDefLL ), pointer            :: next\n+    Integer(kindInt)                        :: zone\n+    Integer(kindInt)                        :: surface\n+    type ( GroupLL ), pointer               :: subGrp\n+    Integer(kindInt)                        :: normalDir\n+    Integer(kindInt), dimension(:), pointer :: subset\n+  end type GroupDefLL\n+end module data_types"}]}