{"sha": "970a9caa49aff82c46a9d9f96410653ac9a588f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwYTljYWE0OWFmZjgyYzQ2YTlkOWY5NjQxMDY1M2FjOWE1ODhmNw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-11-11T21:21:10Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2014-11-11T21:21:10Z"}, "message": "re PR libstdc++/61107 (stl_algo.h: std::__inplace_stable_partition() doesn't process the whole data range)\n\n2014-11-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/61107\n\t* include/bits/stl_algo.h (__inplace_stable_partition): Delete.\n\t(__stable_partition_adaptive): Return __first if range length is 1.\n\t(__stable_partition): Adapt.\n\t* testsuite/util/testsuite_new_operators.h: New.\n\t* testsuite/25_algorithms/stable_sort/1.cc: Test algo in simulated\n\tconstraint memory context.\n\t* testsuite/25_algorithms/inplace_merge/1.cc: Likewise.\n\t* testsuite/25_algorithms/stable_partition/1.cc: Likewise.\n\nFrom-SVN: r217370", "tree": {"sha": "db46a936e28c95c0f77bcb1bc7dd983cf7592d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db46a936e28c95c0f77bcb1bc7dd983cf7592d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/970a9caa49aff82c46a9d9f96410653ac9a588f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970a9caa49aff82c46a9d9f96410653ac9a588f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/970a9caa49aff82c46a9d9f96410653ac9a588f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/970a9caa49aff82c46a9d9f96410653ac9a588f7/comments", "author": null, "committer": null, "parents": [{"sha": "ebf6d33b736d523e0339b8d9447c8dca4706362c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf6d33b736d523e0339b8d9447c8dca4706362c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf6d33b736d523e0339b8d9447c8dca4706362c"}], "stats": {"total": 268, "additions": 189, "deletions": 79}, "files": [{"sha": "b5229f4233c93a0e2a0ba7b40d521c026c187f56", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=970a9caa49aff82c46a9d9f96410653ac9a588f7", "patch": "@@ -1,3 +1,15 @@\n+2014-11-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/61107\n+\t* include/bits/stl_algo.h (__inplace_stable_partition): Delete.\n+\t(__stable_partition_adaptive): Return __first if range length is 1.\n+\t(__stable_partition): Adapt.\n+\t* testsuite/util/testsuite_new_operators.h: New.\n+\t* testsuite/25_algorithms/stable_sort/1.cc: Test algo in simulated\n+\tconstraint memory context.\n+\t* testsuite/25_algorithms/inplace_merge/1.cc: Likewise.\n+\t* testsuite/25_algorithms/stable_partition/1.cc: Likewise.\n+\n 2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR target/63610"}, {"sha": "0ce73c1bbb3fd7d80dd29eb3742ab164fceb5b93", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 37, "deletions": 60, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=970a9caa49aff82c46a9d9f96410653ac9a588f7", "patch": "@@ -1511,34 +1511,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // partition\n \n-  /// This is a helper function...\n-  /// Requires __len != 0 and !__pred(*__first),\n-  /// same as __stable_partition_adaptive.\n-  template<typename _ForwardIterator, typename _Predicate, typename _Distance>\n-    _ForwardIterator\n-    __inplace_stable_partition(_ForwardIterator __first,\n-\t\t\t       _Predicate __pred, _Distance __len)\n-    {\n-      if (__len == 1)\n-\treturn __first;\n-      _ForwardIterator __middle = __first;\n-      std::advance(__middle, __len / 2);\n-      _ForwardIterator __left_split =\n-\tstd::__inplace_stable_partition(__first, __pred, __len / 2);\n-      // Advance past true-predicate values to satisfy this\n-      // function's preconditions.\n-      _Distance __right_len = __len - __len / 2;\n-      _ForwardIterator __right_split =\n-\tstd::__find_if_not_n(__middle, __right_len, __pred);\n-      if (__right_len)\n-\t__right_split = std::__inplace_stable_partition(__middle,\n-\t\t\t\t\t\t\t__pred,\n-\t\t\t\t\t\t\t__right_len);\n-      std::rotate(__left_split, __middle, __right_split);\n-      std::advance(__left_split, std::distance(__middle, __right_split));\n-      return __left_split;\n-    }\n-\n   /// This is a helper function...\n   /// Requires __first != __last and !__pred(__first)\n   /// and __len == distance(__first, __last).\n@@ -1554,10 +1526,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t_Pointer __buffer,\n \t\t\t\t_Distance __buffer_size)\n     {\n+      if (__len == 1)\n+\treturn __first;\n+\n       if (__len <= __buffer_size)\n \t{\n \t  _ForwardIterator __result1 = __first;\n \t  _Pointer __result2 = __buffer;\n+\n \t  // The precondition guarantees that !__pred(__first), so\n \t  // move that element to the buffer before starting the loop.\n \t  // This ensures that we only call __pred once per element.\n@@ -1575,31 +1551,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t*__result2 = _GLIBCXX_MOVE(*__first);\n \t\t++__result2;\n \t      }\n+\n \t  _GLIBCXX_MOVE3(__buffer, __result2, __result1);\n \t  return __result1;\n \t}\n-      else\n-\t{\n-\t  _ForwardIterator __middle = __first;\n-\t  std::advance(__middle, __len / 2);\n-\t  _ForwardIterator __left_split =\n-\t    std::__stable_partition_adaptive(__first, __middle, __pred,\n-\t\t\t\t\t     __len / 2, __buffer,\n-\t\t\t\t\t     __buffer_size);\n-\t  // Advance past true-predicate values to satisfy this\n-\t  // function's preconditions.\n-\t  _Distance __right_len = __len - __len / 2;\n-\t  _ForwardIterator __right_split =\n-\t    std::__find_if_not_n(__middle, __right_len, __pred);\n-\t  if (__right_len)\n-\t    __right_split =\n-\t      std::__stable_partition_adaptive(__right_split, __last, __pred,\n-\t\t\t\t\t       __right_len,\n-\t\t\t\t\t       __buffer, __buffer_size);\n-\t  std::rotate(__left_split, __middle, __right_split);\n-\t  std::advance(__left_split, std::distance(__middle, __right_split));\n-\t  return __left_split;\n-\t}\n+\n+      _ForwardIterator __middle = __first;\n+      std::advance(__middle, __len / 2);\n+      _ForwardIterator __left_split =\n+\tstd::__stable_partition_adaptive(__first, __middle, __pred,\n+\t\t\t\t\t __len / 2, __buffer,\n+\t\t\t\t\t __buffer_size);\n+\n+      // Advance past true-predicate values to satisfy this\n+      // function's preconditions.\n+      _Distance __right_len = __len - __len / 2;\n+      _ForwardIterator __right_split =\n+\tstd::__find_if_not_n(__middle, __right_len, __pred);\n+\n+      if (__right_len)\n+\t__right_split =\n+\t  std::__stable_partition_adaptive(__right_split, __last, __pred,\n+\t\t\t\t\t   __right_len,\n+\t\t\t\t\t   __buffer, __buffer_size);\n+\n+      std::rotate(__left_split, __middle, __right_split);\n+      std::advance(__left_split, std::distance(__middle, __right_split));\n+      return __left_split;\n     }\n \n   template<typename _ForwardIterator, typename _Predicate>\n@@ -1618,16 +1596,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_DistanceType;\n \n       _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);\n-      if (__buf.size() > 0)\n-\treturn\n-\t  std::__stable_partition_adaptive(__first, __last, __pred,\n-\t\t\t\t\t   _DistanceType(__buf.requested_size()),\n-\t\t\t\t\t   __buf.begin(),\n-\t\t\t\t\t   _DistanceType(__buf.size()));\n-      else\n-\treturn\n-\t  std::__inplace_stable_partition(__first, __pred,\n-\t\t\t\t\t  _DistanceType(__buf.requested_size()));\n+      return\n+\tstd::__stable_partition_adaptive(__first, __last, __pred,\n+\t\t\t\t\t _DistanceType(__buf.requested_size()),\n+\t\t\t\t\t __buf.begin(),\n+\t\t\t\t\t _DistanceType(__buf.size()));\n     }\n \n   /**\n@@ -2471,6 +2444,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t     __gnu_cxx::__ops::__val_comp_iter(__comp));\n \t      __len11 = std::distance(__first, __first_cut);\n \t    }\n+\n \t  _BidirectionalIterator __new_middle\n \t    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,\n \t\t\t\t     __len1 - __len11, __len22, __buffer,\n@@ -2496,12 +2470,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__len1 == 0 || __len2 == 0)\n \treturn;\n+\n       if (__len1 + __len2 == 2)\n \t{\n \t  if (__comp(__middle, __first))\n \t    std::iter_swap(__first, __middle);\n \t  return;\n \t}\n+\n       _BidirectionalIterator __first_cut = __first;\n       _BidirectionalIterator __second_cut = __middle;\n       _Distance __len11 = 0;\n@@ -2524,6 +2500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t __gnu_cxx::__ops::__val_comp_iter(__comp));\n \t  __len11 = std::distance(__first, __first_cut);\n \t}\n+\n       std::rotate(__first_cut, __middle, __second_cut);\n       _BidirectionalIterator __new_middle = __first_cut;\n       std::advance(__new_middle, std::distance(__middle, __second_cut));"}, {"sha": "3a017f7e4ad36450f46cb8ab746deb914e463db9", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/1.cc", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc?ref=970a9caa49aff82c46a9d9f96410653ac9a588f7", "patch": "@@ -20,6 +20,7 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n+#include <testsuite_new_operators.h>\n \n using __gnu_test::test_container;\n using __gnu_test::bidirectional_iterator_wrapper;\n@@ -66,17 +67,27 @@ test3()\n {\n   bool test __attribute__((unused)) = true;\n \n-  S s[4];\n+  S s[8];\n   s[0].a = 0;\n   s[1].a = 1;\n-  s[2].a = 0;\n-  s[3].a = 1;\n+  s[2].a = 2;\n+  s[3].a = 3;\n+  s[4].a = 0;\n+  s[5].a = 1;\n+  s[6].a = 2;\n+  s[7].a = 3;\n+\n   s[0].b = 0;\n-  s[1].b = 0;\n-  s[2].b = 1;\n-  s[3].b = 1;\n-  inplace_merge(s, s + 2, s + 4);\n-  VERIFY( s[0].b == 0 && s[1].b == 1 && s[2].b == 0 && s[3].b == 1 );\n+  s[1].b = 1;\n+  s[2].b = 2;\n+  s[3].b = 3;\n+  s[4].b = 4;\n+  s[5].b = 5;\n+  s[6].b = 6;\n+  s[7].b = 7;\n+\n+  inplace_merge(s, s + 4, s + 8);\n+  VERIFY( s[0].b == 0 && s[1].b == 4 && s[2].b == 1 && s[3].b == 5 );\n }\n \n int \n@@ -85,5 +96,15 @@ main()\n   test1();\n   test2();\n   test3();\n+\n+  __gnu_test::set_new_limit(sizeof(S) * 4);\n+  test3();\n+\n+  __gnu_test::set_new_limit(sizeof(S));\n+  test3();\n+\n+  __gnu_test::set_new_limit(0);\n+  test3();\n+\n   return 0;\n }"}, {"sha": "377cc3273c5e50de42c28c25ececa1695f5a4eec", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_partition/1.cc", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_partition%2F1.cc?ref=970a9caa49aff82c46a9d9f96410653ac9a588f7", "patch": "@@ -19,6 +19,7 @@\n \n #include <algorithm>\n #include <functional>\n+#include <testsuite_new_operators.h>\n #include <testsuite_hooks.h>\n \n bool test __attribute__((unused)) = true;\n@@ -27,6 +28,9 @@ const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int B[] = {2, 4, 6, 8, 10, 12, 14, 16, 1, 3, 5, 7, 9, 11, 13, 15, 17};\n const int N = sizeof(A) / sizeof(int);\n \n+// Index of the middle element that should be returned by the algo.\n+const int M = 8;\n+\n struct Pred\n {\n     bool\n@@ -36,20 +40,36 @@ struct Pred\n \n // 25.2.12 stable_partition()\n void\n-test02()\n+test01()\n {\n-    using std::stable_partition;\n+  using std::stable_partition;\n \n-    int s1[N];\n-    std::copy(A, A + N, s1);\n+  int s1[N];\n+  std::copy(A, A + N, s1);\n \n-    stable_partition(s1, s1 + N, Pred());\n-    VERIFY(std::equal(s1, s1 + N, B));\n+  VERIFY( stable_partition(s1, s1 + N, Pred()) == s1 + M );\n+  VERIFY( std::equal(s1, s1 + N, B) );\n }\n \n int\n main()\n {\n-  test02();\n+  test01();\n+\n+  // stable_partition rely on an internal buffer if possible. Try to limit the\n+  // size of this buffer to see if algo is robust.\n+\n+  // Limit to half of the necessary buffer.\n+  __gnu_test::set_new_limit(sizeof(A) / 2);\n+  test01();\n+\n+  // Limit to just 1 element.\n+  __gnu_test::set_new_limit(sizeof(int));\n+  test01();\n+\n+  // Limit to 0\n+  __gnu_test::set_new_limit(0);\n+  test01();\n+\n   return 0;\n }"}, {"sha": "563a1fcca13e79dd12e07e69c46c5e98e64c63fe", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/1.cc", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F1.cc?ref=970a9caa49aff82c46a9d9f96410653ac9a588f7", "patch": "@@ -18,6 +18,7 @@\n // 25.3.1.2 [lib.stable.sort]\n \n #include <algorithm>\n+#include <testsuite_new_operators.h>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n@@ -30,21 +31,22 @@ typedef test_container<int, random_access_iterator_wrapper> Container;\n void \n test1()\n {\n-  int array[]={0};\n+  int array[] = { 0 };\n   Container con(array, array);\n   stable_sort(con.begin(), con.end());\n }\n \n void \n test2()\n {\n-  int array[] = {6, 5, 4, 3, 2, 1, 0};\n+  int array[] = { 6, 5, 4, 3, 2, 1, 0 };\n   Container con(array, array + 7);\n   stable_sort(con.begin(), con.end());\n   VERIFY(array[0] == 0 && array[1] == 1 && array[2] == 2 &&\n \t array[3] == 3 && array[4] == 4 && array[5] == 5 &&\n \t array[6] == 6);\n }\n+\n struct S\n {\n   int i;\n@@ -72,8 +74,7 @@ operator<(const S& s1, const S& s2)\n void \n test3()\n {\n-\n-  S array[] = {-1, -2, 1, 2, -3 ,-5 ,3 , -4, 5, 4};\n+  S array[] = { -1, -2, 1, 2, -3 ,-5 ,3 , -4, 5, 4 };\n   test_container<S, random_access_iterator_wrapper> con(array,array + 10);\n   stable_sort(con.begin(), con.end());\n   for(int i = 0; i < 10; ++i)\n@@ -85,5 +86,15 @@ main()\n {\n   test1();\n   test2();\n+\n+  test3();\n+\n+  __gnu_test::set_new_limit(sizeof(S) * 5);\n+  test3();\n+\n+  __gnu_test::set_new_limit(sizeof(S));\n+  test3();\n+\n+  __gnu_test::set_new_limit(0);\n   test3();\n }"}, {"sha": "f516c1906ec65752e61893c03845594005bb311c", "filename": "libstdc++-v3/testsuite/util/testsuite_new_operators.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/970a9caa49aff82c46a9d9f96410653ac9a588f7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_new_operators.h?ref=970a9caa49aff82c46a9d9f96410653ac9a588f7", "patch": "@@ -0,0 +1,69 @@\n+// -*- C++ -*-\n+// Utility subroutines for the C++ library testsuite. \n+//\n+// Copyright (C) 2000-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+\n+#ifndef _GLIBCXX_TESTSUITE_NEW_OPERATORS_H\n+#define _GLIBCXX_TESTSUITE_NEW_OPERATORS_H\n+\n+#include <new>\n+\n+namespace __gnu_test\n+{\n+  std::size_t&\n+  get_new_limit()\n+  {\n+    static std::size_t limit = 1024 * 1024;\n+    return limit;\n+  }\n+\n+  void\n+  set_new_limit(std::size_t l)\n+  { get_new_limit() = l; }\n+}\n+\n+void* operator new(std::size_t size) throw(std::bad_alloc)\n+{\n+  if (size > __gnu_test::get_new_limit())\n+    throw std::bad_alloc();\n+\n+  void* p = std::malloc(size);\n+  if (!p)\n+    throw std::bad_alloc();\n+\n+  return p;\n+}\n+\n+void* operator new (std::size_t size, const std::nothrow_t&) throw()\n+{\n+  if (size > __gnu_test::get_new_limit())\n+    return 0;\n+\n+  return std::malloc(size);\n+}\n+\n+void operator delete(void* p) throw()\n+{\n+  if (p)\n+    std::free(p);\n+}\n+\n+#endif // _GLIBCXX_TESTSUITE_NEW_OPERATORS_H\n+\n+"}]}