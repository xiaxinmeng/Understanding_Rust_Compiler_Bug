{"sha": "09b822537f65ad55e817f388e9edfb72df481160", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliODIyNTM3ZjY1YWQ1NWU4MTdmMzg4ZTllZGZiNzJkZjQ4MTE2MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@cat.daikokuya.demon.co.uk", "date": "2001-07-29T22:27:20Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-29T22:27:20Z"}, "message": "cpphash.h (struct cpp_reader): Remove import_warning.\n\n\t* cpphash.h (struct cpp_reader): Remove import_warning.\n\t* cpplib.c (skip_rest_of_line): Don't bother turning off\n\tmacro expansion.\n\t(parse_include): Move include handling to...\n\t(do_include_common): ... here.  Move import warning from...\n\t(do_import): ... here.\n\t(do_pragma_poison): Don't do a callback for poison identifiers.\n\t* cpplib.h (struct cpp_callbacks): Don't do poison callbacks.\n\t* cppmain.c (setup_callbacks): Similarly.\n\nFrom-SVN: r44466", "tree": {"sha": "a4545b1be233ce41483a3c3d4d1954f3b6541a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4545b1be233ce41483a3c3d4d1954f3b6541a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09b822537f65ad55e817f388e9edfb72df481160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b822537f65ad55e817f388e9edfb72df481160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09b822537f65ad55e817f388e9edfb72df481160", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09b822537f65ad55e817f388e9edfb72df481160/comments", "author": null, "committer": null, "parents": [{"sha": "833366d6c90ddcb12ec0b7d63b6e57fd3b0f5793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833366d6c90ddcb12ec0b7d63b6e57fd3b0f5793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833366d6c90ddcb12ec0b7d63b6e57fd3b0f5793"}], "stats": {"total": 71, "additions": 32, "deletions": 39}, "files": [{"sha": "74949b3aacc7bdb494b59ddf5e34c1e82adbbbf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b822537f65ad55e817f388e9edfb72df481160/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b822537f65ad55e817f388e9edfb72df481160/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09b822537f65ad55e817f388e9edfb72df481160", "patch": "@@ -1,3 +1,15 @@\n+2001-07-29  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* cpphash.h (struct cpp_reader): Remove import_warning.\n+\t* cpplib.c (skip_rest_of_line): Don't bother turning off\n+\tmacro expansion.\n+\t(parse_include): Move include handling to...\n+\t(do_include_common): ... here.  Move import warning from...\n+\t(do_import): ... here.\n+\t(do_pragma_poison): Don't do a callback for poison identifiers.\n+\t* cpplib.h (struct cpp_callbacks): Don't do poison callbacks.\n+\t* cppmain.c (setup_callbacks): Similarly.\n+\n Sun Jul 29 23:26:50 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* rtlanal.c (parms_set, find_first_parameter_load): Break out from...;"}, {"sha": "82746b5e24cdc88783892cbab0720f7c684c8a79", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=09b822537f65ad55e817f388e9edfb72df481160", "patch": "@@ -333,9 +333,6 @@ struct cpp_reader\n      preprocessor.  */\n   struct spec_nodes spec_nodes;\n \n-  /* We're printed a warning recommending against using #import.  */\n-  unsigned char import_warning;\n-\n   /* Whether to print our version number.  Done this way so\n      we don't get it twice for -v -version.  */\n   unsigned char print_version;"}, {"sha": "cea54f42cc650b8ae9f61d8a9c543061c2c15218", "filename": "gcc/cpplib.c", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=09b822537f65ad55e817f388e9edfb72df481160", "patch": "@@ -194,10 +194,8 @@ skip_rest_of_line (pfile)\n     _cpp_pop_context (pfile);\n \n   /* Sweep up all tokens remaining on the line.  */\n-  pfile->state.prevent_expansion++;\n   while (!pfile->state.next_bol)\n     _cpp_lex_token (pfile, &token);\n-  pfile->state.prevent_expansion--;\n }\n \n /* Ensure there are no stray tokens at the end of a directive.  */\n@@ -565,10 +563,9 @@ parse_include (pfile, header)\n      cpp_reader *pfile;\n      cpp_token *header;\n {\n-  int is_pragma = pfile->directive == &dtable[T_PRAGMA];\n   const unsigned char *dir;\n \n-  if (is_pragma)\n+  if (pfile->directive == &dtable[T_PRAGMA])\n     dir = U\"pragma dependency\";\n   else\n     dir = pfile->directive->name;\n@@ -592,15 +589,6 @@ parse_include (pfile, header)\n       return 1;\n     }\n \n-  if (!is_pragma)\n-    {\n-      check_eol (pfile);\n-      /* Get out of macro context, if we are.  */\n-      skip_rest_of_line (pfile);\n-      if (pfile->cb.include)\n-\t(*pfile->cb.include) (pfile, dir, header);\n-    }\n-\n   return 0;\n }\n \n@@ -612,22 +600,32 @@ do_include_common (pfile, type)\n {\n   cpp_token header;\n \n+  /* For #include_next, if this is the primary source file, warn and\n+     use the normal search logic.  */\n+  if (type == IT_INCLUDE_NEXT && ! pfile->buffer->prev)\n+    {\n+      cpp_warning (pfile, \"#include_next in primary source file\");\n+      type = IT_INCLUDE;\n+    }\n+  else if (type == IT_IMPORT && CPP_OPTION (pfile, warn_import))\n+    {\n+      CPP_OPTION (pfile, warn_import) = 0;\n+      cpp_warning (pfile,\n+\t   \"#import is obsolete, use an #ifndef wrapper in the header file\");\n+    }\n+\n   if (!parse_include (pfile, &header))\n     {\n       /* Prevent #include recursion.  */\n       if (pfile->buffer_stack_depth >= CPP_STACK_MAX)\n \tcpp_fatal (pfile, \"#include nested too deeply\");\n-      else if (pfile->context->prev)\n-\tcpp_ice (pfile, \"attempt to push file buffer with contexts stacked\");\n       else\n \t{\n-\t  /* For #include_next, if this is the primary source file,\n-\t     warn and use the normal search logic.  */\n-\t  if (type == IT_INCLUDE_NEXT && ! pfile->buffer->prev)\n-\t    {\n-\t      cpp_warning (pfile, \"#include_next in primary source file\");\n-\t      type = IT_INCLUDE;\n-\t    }\n+\t  check_eol (pfile);\n+\t  /* Get out of macro context, if we are.  */\n+\t  skip_rest_of_line (pfile);\n+\t  if (pfile->cb.include)\n+\t    (*pfile->cb.include) (pfile, pfile->directive->name, &header);\n \n \t  _cpp_execute_include (pfile, &header, type);\n \t}\n@@ -645,13 +643,6 @@ static void\n do_import (pfile)\n      cpp_reader *pfile;\n {\n-  if (!pfile->import_warning && CPP_OPTION (pfile, warn_import))\n-    {\n-      pfile->import_warning = 1;\n-      cpp_warning (pfile,\n-\t   \"#import is obsolete, use an #ifndef wrapper in the header file\");\n-    }\n-\n   do_include_common (pfile, IT_IMPORT);\n }\n \n@@ -1111,11 +1102,6 @@ do_pragma_poison (pfile)\n       hp->flags |= NODE_POISONED | NODE_DIAGNOSTIC;\n     }\n   pfile->state.poisoned_ok = 0;\n-\n-#if 0\t\t\t\t/* Doesn't quite work yet.  */\n-  if (tok.type == CPP_EOF && pfile->cb.poison)\n-    (*pfile->cb.poison) (pfile);\n-#endif\n }\n \n /* Mark the current header as a system header.  This will suppress"}, {"sha": "58e4af60316047a5d1b1785f2f2bc3dd148737e2", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=09b822537f65ad55e817f388e9edfb72df481160", "patch": "@@ -411,7 +411,6 @@ struct cpp_callbacks\n \t\t\t     const cpp_token *));\n     void (*define) PARAMS ((cpp_reader *, cpp_hashnode *));\n     void (*undef) PARAMS ((cpp_reader *, cpp_hashnode *));\n-    void (*poison) PARAMS ((cpp_reader *));\n     void (*ident) PARAMS ((cpp_reader *, const cpp_string *));\n     void (*def_pragma) PARAMS ((cpp_reader *));\n };"}, {"sha": "8f1982f53892544b82b4b714312ca4ebd0398c51", "filename": "gcc/cppmain.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcppmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09b822537f65ad55e817f388e9edfb72df481160/gcc%2Fcppmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmain.c?ref=09b822537f65ad55e817f388e9edfb72df481160", "patch": "@@ -193,7 +193,6 @@ setup_callbacks ()\n     {\n       cb->define = cb_define;\n       cb->undef  = cb_undef;\n-      cb->poison = cb_def_pragma;\n     }\n }\n "}]}