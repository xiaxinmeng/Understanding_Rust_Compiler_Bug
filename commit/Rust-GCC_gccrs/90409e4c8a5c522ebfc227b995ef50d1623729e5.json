{"sha": "90409e4c8a5c522ebfc227b995ef50d1623729e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0MDllNGM4YTVjNTIyZWJmYzIyN2I5OTVlZjUwZDE2MjM3MjllNQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2009-06-04T17:08:10Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2009-06-04T17:08:10Z"}, "message": "ffitarget.h, [...]: Back out stdcall changes.\n\n2009-06-04  Andrew Haley  <aph@redhat.com>\n\n\t* src/x86/ffitarget.h, src/x86/win32.S, src/x86/ffi.c: Back out\n\tstdcall changes.\n\nFrom-SVN: r148178", "tree": {"sha": "31e8ca5af451d877d9cb1c7732e55c68f97708b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31e8ca5af451d877d9cb1c7732e55c68f97708b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90409e4c8a5c522ebfc227b995ef50d1623729e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90409e4c8a5c522ebfc227b995ef50d1623729e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90409e4c8a5c522ebfc227b995ef50d1623729e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90409e4c8a5c522ebfc227b995ef50d1623729e5/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d46c937c39e0261fc71fac3b97528baf0fbdf491", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46c937c39e0261fc71fac3b97528baf0fbdf491", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46c937c39e0261fc71fac3b97528baf0fbdf491"}], "stats": {"total": 171, "additions": 109, "deletions": 62}, "files": [{"sha": "55879783eb5c9ee695f7d6c94d1707d2b44ce51a", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=90409e4c8a5c522ebfc227b995ef50d1623729e5", "patch": "@@ -1,3 +1,8 @@\n+2009-06-04  Andrew Haley  <aph@redhat.com>\n+\n+\t* src/x86/ffitarget.h, src/x86/win32.S, src/x86/ffi.c: Back out\n+\tstdcall changes.\n+\n 2008-02-26  Anthony Green  <green@redhat.com>\n             Thomas Heller  <theller@ctypes.org>\n "}, {"sha": "2bca56e5ccb078cf281a80d597b6c60a1ca6d5d0", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=90409e4c8a5c522ebfc227b995ef50d1623729e5", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   ffi.c - Copyright (c) 1996, 1998, 1999, 2001, 2007, 2008  Red Hat, Inc.\n+   ffi.c - Copyright (c) 1996, 1998, 1999, 2001, 2007  Red Hat, Inc.\n            Copyright (c) 2002  Ranjit Mathew\n            Copyright (c) 2002  Bo Thorsen\n            Copyright (c) 2002  Roger Sayle\n@@ -236,10 +236,6 @@ unsigned int FFI_HIDDEN ffi_closure_SYSV_inner (ffi_closure *, void **, void *)\n      __attribute__ ((regparm(1)));\n void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)\n      __attribute__ ((regparm(1)));\n-#ifdef X86_WIN32\n-void FFI_HIDDEN ffi_closure_STDCALL (ffi_closure *)\n-     __attribute__ ((regparm(1)));\n-#endif\n \n /* This function is jumped to by the trampoline */\n \n@@ -249,7 +245,7 @@ ffi_closure_SYSV_inner (closure, respp, args)\n      void **respp;\n      void *args;\n {\n-  /* our various things...  */\n+  // our various things...\n   ffi_cif       *cif;\n   void         **arg_area;\n \n@@ -315,26 +311,13 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue, void **avalue,\n ({ unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n    unsigned int  __fun = (unsigned int)(FUN); \\\n    unsigned int  __ctx = (unsigned int)(CTX); \\\n-   unsigned int  __dis = __fun - (__ctx + 10);\t\\\n+   unsigned int  __dis = __fun - (__ctx + FFI_TRAMPOLINE_SIZE); \\\n    *(unsigned char*) &__tramp[0] = 0xb8; \\\n    *(unsigned int*)  &__tramp[1] = __ctx; /* movl __ctx, %eax */ \\\n    *(unsigned char *)  &__tramp[5] = 0xe9; \\\n    *(unsigned int*)  &__tramp[6] = __dis; /* jmp __fun  */ \\\n  })\n \n-#define FFI_INIT_TRAMPOLINE_STDCALL(TRAMP,FUN,CTX,SIZE)  \\\n-({ unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n-   unsigned int  __fun = (unsigned int)(FUN); \\\n-   unsigned int  __ctx = (unsigned int)(CTX); \\\n-   unsigned int  __dis = __fun - (__ctx + 10); \\\n-   unsigned short __size = (unsigned short)(SIZE); \\\n-   *(unsigned char*) &__tramp[0] = 0xb8; \\\n-   *(unsigned int*)  &__tramp[1] = __ctx; /* movl __ctx, %eax */ \\\n-   *(unsigned char *)  &__tramp[5] = 0xe8; \\\n-   *(unsigned int*)  &__tramp[6] = __dis; /* call __fun  */ \\\n-   *(unsigned char *)  &__tramp[10] = 0xc2; \\\n-   *(unsigned short*)  &__tramp[11] = __size; /* ret __size  */ \\\n- })\n \n /* the cif must already be prep'ed */\n \n@@ -345,24 +328,11 @@ ffi_prep_closure_loc (ffi_closure* closure,\n \t\t      void *user_data,\n \t\t      void *codeloc)\n {\n-  if (cif->abi == FFI_SYSV)\n-    {\n-      FFI_INIT_TRAMPOLINE (&closure->tramp[0],\n-                           &ffi_closure_SYSV,\n-                           (void*)codeloc);\n-    }\n-#ifdef X86_WIN32\n-  else if (cif->abi == FFI_STDCALL)\n-    {\n-      FFI_INIT_TRAMPOLINE_STDCALL (&closure->tramp[0],\n-                                   &ffi_closure_STDCALL,\n-                                   (void*)codeloc, cif->bytes);\n-    }\n-#endif\n-  else\n-    {\n-      return FFI_BAD_ABI;\n-    }\n+  FFI_ASSERT (cif->abi == FFI_SYSV);\n+\n+  FFI_INIT_TRAMPOLINE (&closure->tramp[0], \\\n+\t\t       &ffi_closure_SYSV,  \\\n+\t\t       codeloc);\n     \n   closure->cif  = cif;\n   closure->user_data = user_data;\n@@ -384,9 +354,7 @@ ffi_prep_raw_closure_loc (ffi_raw_closure* closure,\n {\n   int i;\n \n-  if (cif->abi != FFI_SYSV) {\n-    return FFI_BAD_ABI;\n-  }\n+  FFI_ASSERT (cif->abi == FFI_SYSV);\n \n   // we currently don't support certain kinds of arguments for raw\n   // closures.  This should be implemented by a separate assembly language"}, {"sha": "25dcc1b9239950ddbb641773badc858652c15af9", "filename": "libffi/src/x86/ffitarget.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2Fsrc%2Fx86%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2Fsrc%2Fx86%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffitarget.h?ref=90409e4c8a5c522ebfc227b995ef50d1623729e5", "patch": "@@ -78,11 +78,7 @@ typedef enum ffi_abi {\n #define FFI_TRAMPOLINE_SIZE 24\n #define FFI_NATIVE_RAW_API 0\n #else\n-#ifdef X86_WIN32\n-#define FFI_TRAMPOLINE_SIZE 13\n-#else\n #define FFI_TRAMPOLINE_SIZE 10\n-#endif\n #define FFI_NATIVE_RAW_API 1\t/* x86 has native raw api support */\n #endif\n "}, {"sha": "a6c9c0da101c5b4e5cc050284ba7b9b77b0ca380", "filename": "libffi/src/x86/win32.S", "status": "modified", "additions": 95, "deletions": 17, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2Fsrc%2Fx86%2Fwin32.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90409e4c8a5c522ebfc227b995ef50d1623729e5/libffi%2Fsrc%2Fx86%2Fwin32.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fwin32.S?ref=90409e4c8a5c522ebfc227b995ef50d1623729e5", "patch": "@@ -264,22 +264,6 @@ sc_epilogue:\n .ffi_call_STDCALL_end:\n .LFE2:\n \n-\t.globl _ffi_closure_STDCALL\n-_ffi_closure_STDCALL:\n-\tpushl\t%ebp\n-\tmovl\t%esp, %ebp\n-\tsubl\t$40, %esp\n-\tleal\t-24(%ebp), %edx\n-\tmovl\t%edx, -12(%ebp)\t/* resp */\n-\tleal\t12(%ebp), %edx  /* account for stub return address on stack */\n-\tmovl\t%edx, 4(%esp)\t/* args */\n-\tleal\t-12(%ebp), %edx\n-\tmovl\t%edx, (%esp)\t/* &resp */\n-\tcall\t_ffi_closure_SYSV_inner\n-\tmovl\t-12(%ebp), %ecx\n-\tjmp     .Lcls_return_result\n-.ffi_closure_STDCALL_end:\n-\n         # This assumes we are using gas.\n         .balign 16\n \t.globl\t_ffi_closure_SYSV\n@@ -299,7 +283,6 @@ _ffi_closure_SYSV:\n \tmovl\t%edx, (%esp)\t/* &resp */\n \tcall\t_ffi_closure_SYSV_inner\n \tmovl\t-12(%ebp), %ecx\n-.Lcls_return_result:\n \tcmpl\t$FFI_TYPE_INT, %eax\n \tje\t.Lcls_retint\n \tcmpl\t$FFI_TYPE_FLOAT, %eax\n@@ -409,6 +392,70 @@ _ffi_closure_raw_SYSV:\n \n #endif /* !FFI_NO_RAW_API */\n \n+        # This assumes we are using gas.\n+\t.balign\t16\n+\t.globl\t_ffi_closure_STDCALL\n+\t.def\t_ffi_closure_STDCALL;\t.scl\t2;\t.type\t32;\t.endef\n+_ffi_closure_STDCALL:\n+.LFB5:\n+\tpushl\t%ebp\n+.LCFI9:\n+\tmovl\t%esp, %ebp\n+.LCFI10:\n+\tsubl\t$40, %esp\n+\tleal\t-24(%ebp), %edx\n+\tmovl\t%edx, -12(%ebp)\t/* resp */\n+\tleal\t12(%ebp), %edx  /* account for stub return address on stack */\n+\tmovl\t%edx, 4(%esp)\t/* args */\n+\tleal\t-12(%ebp), %edx\n+\tmovl\t%edx, (%esp)\t/* &resp */\n+\tcall\t_ffi_closure_SYSV_inner\n+\tmovl\t-12(%ebp), %ecx\n+\t/* It would be nice to just share this code with the\n+\t   duplicate sequence in _ffi_closure_SYSV, if only\n+\t   there were some way to represent that in the EH info.  */\n+\tcmpl\t$FFI_TYPE_INT, %eax\n+\tje\t.Lscls_retint\n+\tcmpl\t$FFI_TYPE_FLOAT, %eax\n+\tje\t.Lscls_retfloat\n+\tcmpl\t$FFI_TYPE_DOUBLE, %eax\n+\tje\t.Lscls_retdouble\n+\tcmpl\t$FFI_TYPE_LONGDOUBLE, %eax\n+\tje\t.Lscls_retldouble\n+\tcmpl\t$FFI_TYPE_SINT64, %eax\n+\tje\t.Lscls_retllong\n+\tcmpl\t$FFI_TYPE_SINT8, %eax\t/* 1-byte struct */\n+\tje\t.Lscls_retstruct1\n+\tcmpl\t$FFI_TYPE_SINT16, %eax\t/* 2-bytes struct */\n+\tje\t.Lscls_retstruct2\n+.Lscls_epilogue:\n+\tmovl\t%ebp, %esp\n+\tpopl\t%ebp\n+\tret\n+.Lscls_retint:\n+\tmovl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+.Lscls_retfloat:\n+\tflds\t(%ecx)\n+\tjmp\t.Lscls_epilogue\n+.Lscls_retdouble:\n+\tfldl\t(%ecx)\n+\tjmp\t.Lscls_epilogue\n+.Lscls_retldouble:\n+\tfldt\t(%ecx)\n+\tjmp\t.Lscls_epilogue\n+.Lscls_retllong:\n+\tmovl\t(%ecx), %eax\n+\tmovl\t4(%ecx), %edx\n+\tjmp\t.Lscls_epilogue\n+.Lscls_retstruct1:\n+\tmovsbl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+.Lscls_retstruct2:\n+\tmovswl\t(%ecx), %eax\n+\tjmp\t.Lscls_epilogue\n+.ffi_closure_STDCALL_end:\n+.LFE5:\n \n \t.section\t.eh_frame,\"w\"\n .Lframe1:\n@@ -571,3 +618,34 @@ _ffi_closure_raw_SYSV:\n .LEFDE4:\n \n #endif /* !FFI_NO_RAW_API */\n+\n+.LSFDE5:\n+\t.long\t.LEFDE5-.LASFDE5\t/* FDE Length */\n+.LASFDE5:\n+\t.long\t.LASFDE5-.Lframe1\t/* FDE CIE offset */\n+#if defined __PIC__ && defined HAVE_AS_X86_PCREL\n+\t.long\t.LFB5-.\t/* FDE initial location */\n+#else\n+\t.long\t.LFB5\n+#endif\n+\t.long\t.LFE5-.LFB5\t/* FDE address range */\n+#ifdef __PIC__\n+\t.byte\t0x0\t/* .uleb128 0x0; Augmentation size */\n+#endif\n+\t/* DW_CFA_xxx CFI instructions go here.  */\n+\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI9-.LFB5\n+\t.byte\t0xe\t/* DW_CFA_def_cfa_offset CFA = r4 + 8 = 8(%esp) */\n+\t.byte\t0x8\t/* .uleb128 0x8 */\n+\t.byte\t0x85\t/* DW_CFA_offset, column 0x5 %ebp at CFA + 2 * -4 */\n+\t.byte\t0x2\t/* .uleb128 0x2 */\n+\n+\t.byte\t0x4\t/* DW_CFA_advance_loc4 */\n+\t.long\t.LCFI10-.LCFI9\n+\t.byte\t0xd\t/* DW_CFA_def_cfa_register CFA = r5 = %ebp */\n+\t.byte\t0x5\t/* .uleb128 0x5 */\n+\n+\t/* End of DW_CFA_xxx CFI instructions.  */\n+\t.align 4\n+.LEFDE5:"}]}