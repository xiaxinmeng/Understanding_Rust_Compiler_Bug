{"sha": "a2957e1d3ededa4abbfc4bca373d23dd810b6783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5NTdlMWQzZWRlZGE0YWJiZmM0YmNhMzczZDIzZGQ4MTBiNjc4Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-31T01:01:15Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-31T01:01:15Z"}, "message": "Makefile.in (OBJS, PROTO_OBJS): Remove getpwd.o.\n\n\t* Makefile.in (OBJS, PROTO_OBJS): Remove getpwd.o.\n\t(getpwd.o): Remove target.\n\n\t* getpwd.c: Delete file.  Its in libiberty now.\n\n\t* dbxout.c (getpwd): Don't prototype.\n\t* dwarf2out.c (getpwd): Likewise\n\t* dwarfout.c (getpwd): Likewise\n\t* final.c (getpwd): Likewise.\n\t* protoize.c (getpwd): Likewise.\n\nFrom-SVN: r28999", "tree": {"sha": "8d509220d6b6c409cf1939316b4b61035650fc6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d509220d6b6c409cf1939316b4b61035650fc6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2957e1d3ededa4abbfc4bca373d23dd810b6783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2957e1d3ededa4abbfc4bca373d23dd810b6783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2957e1d3ededa4abbfc4bca373d23dd810b6783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2957e1d3ededa4abbfc4bca373d23dd810b6783/comments", "author": null, "committer": null, "parents": [{"sha": "1fdf491e50ef88d9bcca2cbe6054b27fd1e701e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fdf491e50ef88d9bcca2cbe6054b27fd1e701e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fdf491e50ef88d9bcca2cbe6054b27fd1e701e5"}], "stats": {"total": 118, "additions": 15, "deletions": 103}, "files": [{"sha": "230e0f1dda5e33250328ee3da78f4e85adcc7f8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -1,3 +1,16 @@\n+Mon Aug 30 20:56:08 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (OBJS, PROTO_OBJS): Remove getpwd.o.\n+\t(getpwd.o): Remove target.\n+\n+\t* getpwd.c: Delete file.  Its in libiberty now.\n+\n+\t* dbxout.c (getpwd): Don't prototype.\n+\t* dwarf2out.c (getpwd): Likewise\n+\t* dwarfout.c (getpwd): Likewise\n+\t* final.c (getpwd): Likewise.\n+\t* protoize.c (getpwd): Likewise.\n+\n Mon Aug 30 20:21:34 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cse.c: (fold_rtx): Cast to HOST_WIDE_INT in left shift."}, {"sha": "92b285371c28bdeb409d819293cc0bfc57af68f3", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -667,7 +667,7 @@ OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \\\n  regclass.o regmove.o local-alloc.o global.o reload.o reload1.o caller-save.o \\\n  insn-peep.o reorg.o haifa-sched.o final.o recog.o reg-stack.o \\\n  insn-opinit.o insn-recog.o insn-extract.o insn-output.o insn-emit.o lcm.o \\\n- profile.o insn-attrtab.o $(out_object_file) getpwd.o $(EXTRA_OBJS) convert.o \\\n+ profile.o insn-attrtab.o $(out_object_file) $(EXTRA_OBJS) convert.o \\\n  mbchar.o dyn-string.o splay-tree.o graph.o sbitmap.o resource.o hash.o lists.o\n \n # GEN files are listed separately, so they can be built before doing parallel\n@@ -1504,7 +1504,6 @@ emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-config.h $(RECOG_H) real.h \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h\n real.o : real.c $(CONFIG_H) system.h $(TREE_H) toplev.h\n-getpwd.o : getpwd.c $(CONFIG_H) system.h\n \n integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    integrate.h insn-flags.h insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n@@ -2007,7 +2006,7 @@ cppinit.o:  cppinit.c $(CONFIG_H) cpplib.h intl.h system.h \\\n \n proto: config.status protoize$(exeext) unprotoize$(exeext) SYSCALLS.c.X\n \n-PROTO_OBJS = getpwd.o intl.o version.o \n+PROTO_OBJS = intl.o version.o \n \n protoize$(exeext): protoize.o $(PROTO_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ protoize.o $(PROTO_OBJS) $(LIBS)"}, {"sha": "85368182b140da8d66dff7d0463387693ebe7cf6", "filename": "gcc/dbxout.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -136,8 +136,6 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif\n \n-char *getpwd ();\n-\n /* Typical USG systems don't have stab.h, and they also have\n    no use for DBX-format debugging info.  */\n "}, {"sha": "2941002486797973715bec0462b2d9147b7c64b9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -2022,8 +2022,6 @@ dwarf2out_frame_finish ()\n /* And now, the support for symbolic debugging information.  */\n #ifdef DWARF2_DEBUGGING_INFO\n \n-extern char *getpwd PROTO((void));\n-\n /* NOTE: In the comments in this file, many references are made to\n    \"Debugging Information Entries\".  This term is abbreviated as `DIE'\n    throughout the remainder of this file.  */"}, {"sha": "4f6c3ea93aa2a94c9229de2fdef1396f7cd772c7", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -50,8 +50,6 @@ extern time_t time PROTO ((time_t *)); /* FIXME: use NEED_DECLARATION_TIME */\n # define assert(e) do { if (! (e)) abort (); } while (0)\n #endif\n \n-extern char *getpwd PROTO((void));\n-\n /* IMPORTANT NOTE: Please see the file README.DWARF for important details\n    regarding the GNU implementation of Dwarf.  */\n "}, {"sha": "58361ab69ff26c214b8edea0de81f2815254a124", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -307,8 +307,6 @@ static void leaf_renumber_regs\tPROTO((rtx));\n #ifdef HAVE_cc0\n static int alter_cond\t\tPROTO((rtx));\n #endif\n-\n-extern char *getpwd ();\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n "}, {"sha": "c3d155e574145274281f1e8492a2b96e5a8796c7", "filename": "gcc/getpwd.c", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdf491e50ef88d9bcca2cbe6054b27fd1e701e5/gcc%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdf491e50ef88d9bcca2cbe6054b27fd1e701e5/gcc%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetpwd.c?ref=1fdf491e50ef88d9bcca2cbe6054b27fd1e701e5", "patch": "@@ -1,90 +0,0 @@\n-/* getpwd.c - get the working directory */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-\n-/* Virtually every UN*X system now in common use (except for pre-4.3-tahoe\n-   BSD systems) now provides getcwd as called for by POSIX.  Allow for\n-   the few exceptions to the general rule here.  */\n-\n-#if !(defined (POSIX) || defined (USG) || defined (VMS)) || defined (HAVE_GETWD)\n-#define getcwd(buf,len) getwd(buf)\n-#ifdef MAXPATHLEN\n-#define GUESSPATHLEN (MAXPATHLEN + 1)\n-#else\n-#define GUESSPATHLEN 100\n-#endif\n-#else /* (defined (USG) || defined (VMS)) */\n-/* We actually use this as a starting point, not a limit.  */\n-#define GUESSPATHLEN 100\n-#endif /* (defined (USG) || defined (VMS)) */\n-\n-#if !(defined (VMS) || (defined(_WIN32) && !defined(__CYGWIN__)))\n-\n-/* Get the working directory.  Use the PWD environment variable if it's\n-   set correctly, since this is faster and gives more uniform answers\n-   to the user.  Yield the working directory if successful; otherwise,\n-   yield 0 and set errno.  */\n-\n-char *\n-getpwd ()\n-{\n-  static char *pwd;\n-  static int failure_errno;\n-\n-  char *p = pwd;\n-  size_t s;\n-  struct stat dotstat, pwdstat;\n-\n-  if (!p && !(errno = failure_errno))\n-    {\n-      if (! ((p = getenv (\"PWD\")) != 0\n-\t     && *p == '/'\n-\t     && stat (p, &pwdstat) == 0\n-\t     && stat (\".\", &dotstat) == 0\n-\t     && dotstat.st_ino == pwdstat.st_ino\n-\t     && dotstat.st_dev == pwdstat.st_dev))\n-\n-\t/* The shortcut didn't work.  Try the slow, ``sure'' way.  */\n-\tfor (s = GUESSPATHLEN;  ! getcwd (p = xmalloc (s), s);  s *= 2)\n-\t  {\n-\t    int e = errno;\n-\t    free (p);\n-#ifdef ERANGE\n-\t    if (e != ERANGE)\n-#endif\n-\t      {\n-\t\terrno = failure_errno = e;\n-\t\tp = 0;\n-\t\tbreak;\n-\t      }\n-\t  }\n-\n-      /* Cache the result.  This assumes that the program does\n-\t not invoke chdir between calls to getpwd.  */\n-      pwd = p;\n-    }\n-  return p;\n-}\n-\n-#else\t/* VMS || _WIN32 && !__CYGWIN__ */\n-\n-#ifndef MAXPATHLEN\n-#define MAXPATHLEN 255\n-#endif\n-\n-char *\n-getpwd ()\n-{\n-  static char *pwd = 0;\n-\n-  if (!pwd)\n-    pwd = getcwd (xmalloc (MAXPATHLEN + 1), MAXPATHLEN + 1\n-#ifdef VMS\n-\t\t  , 0\n-#endif\n-\t\t  );\n-  return pwd;\n-}\n-\n-#endif\t/* VMS || _WIN32 && !__CYGWIN__ */"}, {"sha": "968b17dfafa6294905f05501833cb94b4b7f217a", "filename": "gcc/protoize.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2957e1d3ededa4abbfc4bca373d23dd810b6783/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=a2957e1d3ededa4abbfc4bca373d23dd810b6783", "patch": "@@ -109,8 +109,6 @@ extern char *version_string;\n #define my_open(file, mode, flag)\topen((char *)file, mode, flag)\n #define my_chmod(file, mode)\tchmod((char *)file, mode)\n \n-extern char *getpwd ();\n-\n static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void aux_info_corrupted PARAMS ((void)) ATTRIBUTE_NORETURN;\n static void declare_source_confusing PARAMS ((const char *)) ATTRIBUTE_NORETURN;"}]}