{"sha": "cdef8bc6d1ad756c5b7508168a95351270347b45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RlZjhiYzZkMWFkNzU2YzViNzUwODE2OGE5NTM1MTI3MDM0N2I0NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-27T17:26:17Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-27T17:26:17Z"}, "message": "tree.c (operand_equal_for_phi_arg_p): New.\n\n\t* tree.c (operand_equal_for_phi_arg_p): New.\n\t* tree.h: Add a prototype for operand_equal_for_phi_arg_p.\n\t* tree-cfg.c, tree-ssa-dom.c, tree-ssa-phiopt.c, tree-ssa.c:\n\tReplace operand_equal_p with operand_for_phi_arg_p\n\tappropriately.\n\nFrom-SVN: r91385", "tree": {"sha": "a81bbbb8510ca92a7b1d6e2ce2d7db16c619315c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81bbbb8510ca92a7b1d6e2ce2d7db16c619315c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdef8bc6d1ad756c5b7508168a95351270347b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdef8bc6d1ad756c5b7508168a95351270347b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdef8bc6d1ad756c5b7508168a95351270347b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdef8bc6d1ad756c5b7508168a95351270347b45/comments", "author": null, "committer": null, "parents": [{"sha": "31f16dff98752d15c0f430b8e1e1daa7b682a8f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31f16dff98752d15c0f430b8e1e1daa7b682a8f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31f16dff98752d15c0f430b8e1e1daa7b682a8f0"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "95ae7a726177cb10b812ccd420e221321018b1ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -1,3 +1,11 @@\n+2004-11-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree.c (operand_equal_for_phi_arg_p): New.\n+\t* tree.h: Add a prototype for operand_equal_for_phi_arg_p.\n+\t* tree-cfg.c, tree-ssa-dom.c, tree-ssa-phiopt.c, tree-ssa.c:\n+\tReplace operand_equal_p with operand_for_phi_arg_p\n+\tappropriately.\n+\n 2004-11-27  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR pch/14940"}, {"sha": "37a6920b34cf532466fd72711cad83e5df0481f1", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -2278,7 +2278,7 @@ phi_alternatives_equal (basic_block dest, edge e1, edge e2)\n       val1 = PHI_ARG_DEF (phi, n1);\n       val2 = PHI_ARG_DEF (phi, n2);\n \n-      if (!operand_equal_p (val1, val2, 0))\n+      if (!operand_equal_for_phi_arg_p (val1, val2))\n \treturn false;\n     }\n "}, {"sha": "a2d145922b536289d320a1c89060f156abfb6dea", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -1180,7 +1180,7 @@ record_equivalences_from_phis (basic_block bb)\n \t  if (TREE_CODE (t) == SSA_NAME || is_gimple_min_invariant (t))\n \t    {\n \t      /* Ignore alternatives which are the same as our LHS.  */\n-\t      if (operand_equal_p (lhs, t, 0))\n+\t      if (operand_equal_for_phi_arg_p (lhs, t))\n \t\tcontinue;\n \n \t      /* If we have not processed an alternative yet, then set\n@@ -1190,7 +1190,7 @@ record_equivalences_from_phis (basic_block bb)\n \t      /* If we have processed an alternative (stored in RHS), then\n \t\t see if it is equal to this one.  If it isn't, then stop\n \t\t the search.  */\n-\t      else if (! operand_equal_p (rhs, t, 0))\n+\t      else if (! operand_equal_for_phi_arg_p (rhs, t))\n \t\tbreak;\n \t    }\n \t  else"}, {"sha": "b6cfa7a028c2e5472571c195e5b3d4098f224fbc", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -450,10 +450,10 @@ value_replacement (basic_block bb, tree phi, tree arg0, tree arg1)\n      We now need to verify that the two arguments in the PHI node match\n      the two arguments to the equality comparison.  */\n   \n-  if ((operand_equal_p (arg0, TREE_OPERAND (cond, 0), 0)\n-       && operand_equal_p (arg1, TREE_OPERAND (cond, 1), 0))\n-      || (operand_equal_p (arg1, TREE_OPERAND (cond, 0), 0)\n-\t  && operand_equal_p (arg0, TREE_OPERAND (cond, 1), 0)))\n+  if ((operand_equal_for_phi_arg_p (arg0, TREE_OPERAND (cond, 0))\n+       && operand_equal_for_phi_arg_p (arg1, TREE_OPERAND (cond, 1)))\n+      || (operand_equal_for_phi_arg_p (arg1, TREE_OPERAND (cond, 0))\n+\t  && operand_equal_for_phi_arg_p (arg0, TREE_OPERAND (cond, 1))))\n     {\n       edge e;\n       tree arg;"}, {"sha": "adb6a51fbdf89dfdb1e246b3b8e579ab2327e26d", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -1138,7 +1138,7 @@ check_phi_redundancy (tree phi, tree *eq_to)\n \t}\n \n       if (val\n-\t  && !operand_equal_p (val, def, 0))\n+\t  && !operand_equal_for_phi_arg_p (val, def))\n \treturn;\n \n       val = def;"}, {"sha": "961dfb8ff393f52efc6d966c4abc7c23f356fbfc", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -6150,4 +6150,20 @@ lower_bound_in_type (tree outer, tree inner)\n \t\t       build_int_cst_wide (inner, lo, hi));\n }\n \n+/* Return nonzero if two operands that are suitable for PHI nodes are\n+   necessarily equal.  Specifically, both ARG0 and ARG1 must be either\n+   SSA_NAME or invariant.  Note that this is strictly an optimization.\n+   That is, callers of this function can directly call operand_equal_p\n+   and get the same result, only slower.  */\n+\n+int\n+operand_equal_for_phi_arg_p (tree arg0, tree arg1)\n+{\n+  if (arg0 == arg1)\n+    return 1;\n+  if (TREE_CODE (arg0) == SSA_NAME || TREE_CODE (arg1) == SSA_NAME)\n+    return 0;\n+  return operand_equal_p (arg0, arg1, 0);\n+}\n+\n #include \"gt-tree.h\""}, {"sha": "b9ce3acd965e14052738794207b5ead50a6eaec2", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdef8bc6d1ad756c5b7508168a95351270347b45/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=cdef8bc6d1ad756c5b7508168a95351270347b45", "patch": "@@ -3442,6 +3442,7 @@ extern bool commutative_tree_code (enum tree_code);\n extern tree get_case_label (tree);\n extern tree upper_bound_in_type (tree, tree);\n extern tree lower_bound_in_type (tree, tree);\n+extern int operand_equal_for_phi_arg_p (tree, tree);\n \f\n /* In stmt.c */\n "}]}