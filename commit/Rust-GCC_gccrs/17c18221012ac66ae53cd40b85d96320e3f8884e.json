{"sha": "17c18221012ac66ae53cd40b85d96320e3f8884e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjMTgyMjEwMTJhYzY2YWU1M2NkNDBiODVkOTYzMjBlM2Y4ODg0ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-07-03T18:10:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-07-03T18:10:52Z"}, "message": "re PR c++/65775 (Late-specified return type bypasses return type checks (qualified, function, array))\n\n/cp\n2017-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/65775\n\t* decl.c (grokdeclarator): Move checks on function return type after\n\tthe splice_late_return_type call; if declspecs->locations[ds_type_spec]\n\tis UNKNOWN_LOCATION fall back to input_location.\n\n/testsuite\n2017-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/65775\n\t* g++.dg/cpp0x/trailing14.C: New.\n\nFrom-SVN: r249935", "tree": {"sha": "3d72335ffc4e9f62cf1b92499864e7cb3b306c11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d72335ffc4e9f62cf1b92499864e7cb3b306c11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c18221012ac66ae53cd40b85d96320e3f8884e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c18221012ac66ae53cd40b85d96320e3f8884e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c18221012ac66ae53cd40b85d96320e3f8884e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c18221012ac66ae53cd40b85d96320e3f8884e/comments", "author": null, "committer": null, "parents": [{"sha": "370d975d77562e4f38738cfb7bcb16afa9aeabfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370d975d77562e4f38738cfb7bcb16afa9aeabfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370d975d77562e4f38738cfb7bcb16afa9aeabfb"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "189edcb097588bb024770c76fc67ff7f69df67b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17c18221012ac66ae53cd40b85d96320e3f8884e", "patch": "@@ -1,3 +1,10 @@\n+2017-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/65775\n+\t* decl.c (grokdeclarator): Move checks on function return type after\n+\tthe splice_late_return_type call; if declspecs->locations[ds_type_spec]\n+\tis UNKNOWN_LOCATION fall back to input_location.\n+\n 2017-07-03  David Malcolm  <dmalcolm@redhat.com>\n \n \t* parser.c (enum required_token): Fix spelling of"}, {"sha": "d5b758a89ee87ab9a0a89bfa9d3a130a1d30c4c0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=17c18221012ac66ae53cd40b85d96320e3f8884e", "patch": "@@ -9992,6 +9992,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t\t\t\t      declspecs->locations);\n   if (typespec_loc == UNKNOWN_LOCATION)\n     typespec_loc = declspecs->locations[ds_type_spec];\n+  if (typespec_loc == UNKNOWN_LOCATION)\n+    typespec_loc = input_location;\n \n   /* Look inside a declarator for the name being declared\n      and get it as a string, for an error message.  */\n@@ -10822,33 +10824,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t    tree arg_types;\n \t    int funcdecl_p;\n \n-\t    /* Declaring a function type.\n-\t       Make sure we have a valid type for the function to return.  */\n-\n-\t    if (type_quals != TYPE_UNQUALIFIED)\n-\t      {\n-\t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n-\t\t  {\n-\t\t    warning_at (typespec_loc, OPT_Wignored_qualifiers, \"type \"\n-\t\t\t\t\"qualifiers ignored on function return type\");\n-\t\t  }\n-\t\t/* We now know that the TYPE_QUALS don't apply to the\n-\t\t   decl, but to its return type.  */\n-\t\ttype_quals = TYPE_UNQUALIFIED;\n-\t      }\n-\n-\t    /* Error about some types functions can't return.  */\n-\n-\t    if (TREE_CODE (type) == FUNCTION_TYPE)\n-\t      {\n-\t\terror (\"%qs declared as function returning a function\", name);\n-\t\treturn error_mark_node;\n-\t      }\n-\t    if (TREE_CODE (type) == ARRAY_TYPE)\n-\t      {\n-\t\terror (\"%qs declared as function returning an array\", name);\n-\t\treturn error_mark_node;\n-\t      }\n+\t    /* Declaring a function type.  */\n \n \t    input_location = declspecs->locations[ds_type_spec];\n \t    abstract_virtuals_error (ACU_RETURN, type);\n@@ -10956,7 +10932,35 @@ grokdeclarator (const cp_declarator *declarator,\n \t      return error_mark_node;\n \n \t    if (late_return_type)\n-\t      late_return_type_p = true;\n+\t      {\n+\t\tlate_return_type_p = true;\n+\t\ttype_quals = cp_type_quals (type);\n+\t      }\n+\n+\t    if (type_quals != TYPE_UNQUALIFIED)\n+\t      {\n+\t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n+\t\t  warning_at (typespec_loc, OPT_Wignored_qualifiers, \"type \"\n+\t\t\t      \"qualifiers ignored on function return type\");\n+\t\t/* We now know that the TYPE_QUALS don't apply to the\n+\t\t   decl, but to its return type.  */\n+\t\ttype_quals = TYPE_UNQUALIFIED;\n+\t      }\n+\n+\t    /* Error about some types functions can't return.  */\n+\n+\t    if (TREE_CODE (type) == FUNCTION_TYPE)\n+\t      {\n+\t\terror_at (typespec_loc, \"%qs declared as function returning \"\n+\t\t\t  \"a function\", name);\n+\t\treturn error_mark_node;\n+\t      }\n+\t    if (TREE_CODE (type) == ARRAY_TYPE)\n+\t      {\n+\t\terror_at (typespec_loc, \"%qs declared as function returning \"\n+\t\t\t  \"an array\", name);\n+\t\treturn error_mark_node;\n+\t      }\n \n \t    if (ctype == NULL_TREE\n \t\t&& decl_context == FIELD"}, {"sha": "03f935754643ea67f30383a841b854bbdb21eb92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17c18221012ac66ae53cd40b85d96320e3f8884e", "patch": "@@ -1,3 +1,8 @@\n+2017-07-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/65775\n+\t* g++.dg/cpp0x/trailing14.C: New.\n+\n 2017-07-03  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR testsuite/79866"}, {"sha": "2544d0bab5e93ef96a3bdda3fffcb3e3fc8bee75", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing14.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c18221012ac66ae53cd40b85d96320e3f8884e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing14.C?ref=17c18221012ac66ae53cd40b85d96320e3f8884e", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/65775\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wignored-qualifiers\" }\n+\n+using Qi = int const volatile;\n+Qi q1();           // { dg-warning \"1: type qualifiers ignored\" }\n+auto q2() -> Qi;   // { dg-warning \"1: type qualifiers ignored\" }\n+\n+using Fi = int();\n+Fi f1();           // { dg-error \"1: 'f1' declared as function returning a function\" }\n+auto f2() -> Fi;   // { dg-error \"1: 'f2' declared as function returning a function\" }\n+\n+using Ai = int[5];\n+Ai a1();           // { dg-error \"1: 'a1' declared as function returning an array\" }\n+auto a2() -> Ai;   // { dg-error \"1: 'a2' declared as function returning an array\" }"}]}