{"sha": "d719aff9e49af310c9de0d2b81b9cf5f78202f5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxOWFmZjllNDlhZjMxMGM5ZGUwZDJiODFiOWNmNWY3ODIwMmY1ZA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-02-07T22:12:47Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-02-07T22:12:47Z"}, "message": "extend.texi (Function Attributes [naked]): Copy-edit.\n\n2015-02-07  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi (Function Attributes [naked]): Copy-edit.\n\t(Using Assembly Language with C): Expand introduction.\n\t(Basic Asm): Copy-edit.  Add more information about uses of\n\tbasic asm.\n\t(Extended Asm): Copy-edit.  Document new escape syntax and\n\t%l[label] syntax.\n\t(Global Reg Vars): Copy-edit.\n\t(Local Reg Vars): Likewise.\n\nFrom-SVN: r220506", "tree": {"sha": "8426a4cf12560e318f082f8f15111a0243700b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8426a4cf12560e318f082f8f15111a0243700b3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d719aff9e49af310c9de0d2b81b9cf5f78202f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d719aff9e49af310c9de0d2b81b9cf5f78202f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d719aff9e49af310c9de0d2b81b9cf5f78202f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d719aff9e49af310c9de0d2b81b9cf5f78202f5d/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1060d9404d1ab275b540efe1c7868d08c07a81e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1060d9404d1ab275b540efe1c7868d08c07a81e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1060d9404d1ab275b540efe1c7868d08c07a81e1"}], "stats": {"total": 713, "additions": 391, "deletions": 322}, "files": [{"sha": "465c99945abc813f3cecd6bd1977b5ed51fbec41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d719aff9e49af310c9de0d2b81b9cf5f78202f5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d719aff9e49af310c9de0d2b81b9cf5f78202f5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d719aff9e49af310c9de0d2b81b9cf5f78202f5d", "patch": "@@ -1,3 +1,14 @@\n+2015-02-07  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (Function Attributes [naked]): Copy-edit.\n+\t(Using Assembly Language with C): Expand introduction.\n+\t(Basic Asm): Copy-edit.  Add more information about uses of\n+\tbasic asm.\n+\t(Extended Asm): Copy-edit.  Document new escape syntax and\n+\t%l[label] syntax.\n+\t(Global Reg Vars): Copy-edit.\n+\t(Local Reg Vars): Likewise.\n+\n 2015-02-06  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR debug/2714"}, {"sha": "d5fb4b3c6748df9ca329a2821d1b3466e720c0f5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 380, "deletions": 322, "changes": 702, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d719aff9e49af310c9de0d2b81b9cf5f78202f5d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d719aff9e49af310c9de0d2b81b9cf5f78202f5d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d719aff9e49af310c9de0d2b81b9cf5f78202f5d", "patch": "@@ -3396,10 +3396,10 @@ This attribute is available on the ARM, AVR, MCORE, MSP430, NDS32,\n RL78, RX and SPU ports.  It allows the compiler to construct the\n requisite function declaration, while allowing the body of the\n function to be assembly code. The specified function will not have\n-prologue/epilogue sequences generated by the compiler. Only Basic\n+prologue/epilogue sequences generated by the compiler. Only basic\n @code{asm} statements can safely be included in naked functions\n-(@pxref{Basic Asm}). While using Extended @code{asm} or a mixture of\n-Basic @code{asm} and ``C'' code may appear to work, they cannot be\n+(@pxref{Basic Asm}). While using extended @code{asm} or a mixture of\n+basic @code{asm} and C code may appear to work, they cannot be\n depended upon to work reliably and are not supported.\n \n @item near\n@@ -6382,12 +6382,25 @@ access hardware.\n \n @node Using Assembly Language with C\n @section How to Use Inline Assembly Language in C Code\n-\n-GCC provides various extensions that allow you to embed assembler within \n-C code.\n+@cindex @code{asm} keyword\n+@cindex assembly language in C\n+@cindex inline assembly language\n+@cindex mixing assembly language and C\n+\n+The @code{asm} keyword allows you to embed assembler instructions\n+within C code.  GCC provides two forms of inline @code{asm}\n+statements.  A @dfn{basic @code{asm}} statement is one with no\n+operands (@pxref{Basic Asm}), while an @dfn{extended @code{asm}}\n+statement (@pxref{Extended Asm}) includes one or more operands.  \n+The extended form is preferred for mixing C and assembly language\n+within a function, but to include assembly language at\n+top level you must use basic @code{asm}.\n+\n+You can also use the @code{asm} keyword to override the assembler name\n+for a C symbol, or to place a C variable in a specific register.\n \n @menu\n-* Basic Asm::          Inline assembler with no operands.\n+* Basic Asm::          Inline assembler without operands.\n * Extended Asm::       Inline assembler with operands.\n * Constraints::        Constraints for @code{asm} operands\n * Asm Labels::         Specifying the assembler name to use for a C symbol.\n@@ -6396,92 +6409,105 @@ C code.\n @end menu\n \n @node Basic Asm\n-@subsection Basic Asm --- Assembler Instructions with No Operands\n+@subsection Basic Asm --- Assembler Instructions Without Operands\n @cindex basic @code{asm}\n+@cindex assembly language in C, basic\n \n-The @code{asm} keyword allows you to embed assembler instructions within \n-C code.\n+A basic @code{asm} statement has the following syntax:\n \n @example\n-asm [ volatile ] ( AssemblerInstructions )\n+asm @r{[} volatile @r{]} ( @var{AssemblerInstructions} )\n @end example\n \n-To create headers compatible with ISO C, write @code{__asm__} instead of \n+The @code{asm} keyword is a GNU extension.\n+When writing code that can be compiled with @option{-ansi} and the\n+various @option{-std} options, use @code{__asm__} instead of \n @code{asm} (@pxref{Alternate Keywords}).\n \n-By definition, a Basic @code{asm} statement is one with no operands. \n-@code{asm} statements that contain one or more colons (used to delineate \n-operands) are considered to be Extended (for example, @code{asm(\"int $3\")} \n-is Basic, and @code{asm(\"int $3\" : )} is Extended). @xref{Extended Asm}.\n-\n @subsubheading Qualifiers\n-@emph{volatile}\n-@*\n-This optional qualifier has no effect. All Basic @code{asm} blocks are \n-implicitly volatile.\n+@table @code\n+@item volatile\n+The optional @code{volatile} qualifier has no effect. \n+All basic @code{asm} blocks are implicitly volatile.\n+@end table\n \n @subsubheading Parameters\n-@emph{AssemblerInstructions}\n-@*\n+@table @var\n+\n+@item AssemblerInstructions\n This is a literal string that specifies the assembler code. The string can \n contain any instructions recognized by the assembler, including directives. \n GCC does not parse the assembler instructions themselves and \n does not know what they mean or even whether they are valid assembler input. \n-The compiler copies it verbatim to the assembly language output file, without \n-processing dialects or any of the \"%\" operators that are available with\n-Extended @code{asm}. This results in minor differences between Basic \n-@code{asm} strings and Extended @code{asm} templates. For example, to refer to \n-registers you might use %%eax in Extended @code{asm} and %eax in Basic \n-@code{asm}.\n \n You may place multiple assembler instructions together in a single @code{asm} \n string, separated by the characters normally used in assembly code for the \n system. A combination that works in most places is a newline to break the \n-line, plus a tab character (written as \"\\n\\t\").\n+line, plus a tab character (written as @samp{\\n\\t}).\n Some assemblers allow semicolons as a line separator. However, \n note that some assembler dialects use semicolons to start a comment. \n+@end table\n+\n+@subsubheading Remarks\n+Using extended @code{asm} typically produces smaller, safer, and more\n+efficient code, and in most cases it is a better solution than basic\n+@code{asm}.  However, there are two situations where only basic @code{asm}\n+can be used:\n+\n+@itemize @bullet\n+@item\n+Extended @code{asm} statements have to be inside a C\n+function, so to write inline assembly language at file scope (``top-level''),\n+outside of C functions, you must use basic @code{asm}.\n+You can use this technique to emit assembler directives,\n+define assembly language macros that can be invoked elsewhere in the file,\n+or write entire functions in assembly language.\n+\n+@item\n+Functions declared\n+with the @code{naked} attribute also require basic @code{asm}\n+(@pxref{Function Attributes}).\n+@end itemize\n+\n+Safely accessing C data and calling functions from basic @code{asm} is more \n+complex than it may appear. To access C data, it is better to use extended \n+@code{asm}.\n \n Do not expect a sequence of @code{asm} statements to remain perfectly \n consecutive after compilation. If certain instructions need to remain \n-consecutive in the output, put them in a single multi-instruction asm \n+consecutive in the output, put them in a single multi-instruction @code{asm}\n statement. Note that GCC's optimizers can move @code{asm} statements \n relative to other code, including across jumps.\n \n @code{asm} statements may not perform jumps into other @code{asm} statements. \n GCC does not know about these jumps, and therefore cannot take \n account of them when deciding how to optimize. Jumps from @code{asm} to C \n-labels are only supported in Extended @code{asm}.\n-\n-@subsubheading Remarks\n-Using Extended @code{asm} will typically produce smaller, safer, and more \n-efficient code, and in most cases it is a better solution. When writing \n-inline assembly language outside of C functions, however, you must use Basic \n-@code{asm}. Extended @code{asm} statements have to be inside a C function.\n-Functions declared with the @code{naked} attribute also require Basic \n-@code{asm} (@pxref{Function Attributes}).\n+labels are only supported in extended @code{asm}.\n \n Under certain circumstances, GCC may duplicate (or remove duplicates of) your \n assembly code when optimizing. This can lead to unexpected duplicate \n symbol errors during compilation if your assembly code defines symbols or \n labels.\n \n-Safely accessing C data and calling functions from Basic @code{asm} is more \n-complex than it may appear. To access C data, it is better to use Extended \n-@code{asm}.\n-\n-Since GCC does not parse the AssemblerInstructions, it has no \n+Since GCC does not parse the @var{AssemblerInstructions}, it has no \n visibility of any symbols it references. This may result in GCC discarding \n those symbols as unreferenced.\n \n-Unlike Extended @code{asm}, all Basic @code{asm} blocks are implicitly \n-volatile. @xref{Volatile}.  Similarly, Basic @code{asm} blocks are not treated \n-as though they used a \"memory\" clobber (@pxref{Clobbers}).\n-\n-All Basic @code{asm} blocks use the assembler dialect specified by the \n-@option{-masm} command-line option. Basic @code{asm} provides no\n+The compiler copies the assembler instructions in a basic @code{asm} \n+verbatim to the assembly language output file, without \n+processing dialects or any of the @samp{%} operators that are available with\n+extended @code{asm}. This results in minor differences between basic \n+@code{asm} strings and extended @code{asm} templates. For example, to refer to \n+registers you might use @samp{%eax} in basic @code{asm} and\n+@samp{%%eax} in extended @code{asm}.\n+\n+On targets such as x86 that support multiple assembler dialects,\n+all basic @code{asm} blocks use the assembler dialect specified by the \n+@option{-masm} command-line option (@pxref{x86 Options}).  \n+Basic @code{asm} provides no\n mechanism to provide different assembler strings for different dialects.\n \n-Here is an example of Basic @code{asm} for i386:\n+Here is an example of basic @code{asm} for i386:\n \n @example\n /* Note that this code will not compile with -masm=intel */\n@@ -6490,95 +6516,90 @@ Here is an example of Basic @code{asm} for i386:\n \n @node Extended Asm\n @subsection Extended Asm - Assembler Instructions with C Expression Operands\n-@cindex @code{asm} keyword\n @cindex extended @code{asm}\n-@cindex assembler instructions\n+@cindex assembly language in C, extended\n \n-The @code{asm} keyword allows you to embed assembler instructions within C \n-code. With Extended @code{asm} you can read and write C variables from \n-assembler and perform jumps from assembler code to C labels.\n+With extended @code{asm} you can read and write C variables from \n+assembler and perform jumps from assembler code to C labels.  \n+Extended @code{asm} syntax uses colons (@samp{:}) to delimit\n+the operand parameters after the assembler template:\n \n @example\n-@ifhtml\n-asm [volatile] ( AssemblerTemplate : [OutputOperands] [ : [InputOperands] [ : [Clobbers] ] ] )\n-\n-asm [volatile] goto ( AssemblerTemplate : : [InputOperands] : [Clobbers] : GotoLabels )\n-@end ifhtml\n-@ifnothtml\n-asm [volatile] ( AssemblerTemplate \n-                 : [OutputOperands] \n-                 [ : [InputOperands] \n-                 [ : [Clobbers] ] ])\n-\n-asm [volatile] goto ( AssemblerTemplate \n+asm @r{[}volatile@r{]} ( @var{AssemblerTemplate} \n+                 : @var{OutputOperands} \n+                 @r{[} : @var{InputOperands}\n+                 @r{[} : @var{Clobbers} @r{]} @r{]})\n+\n+asm @r{[}volatile@r{]} goto ( @var{AssemblerTemplate} \n                       : \n-                      : [InputOperands] \n-                      : [Clobbers] \n-                      : GotoLabels)\n-@end ifnothtml\n+                      : @var{InputOperands}\n+                      : @var{Clobbers}\n+                      : @var{GotoLabels})\n @end example\n \n-To create headers compatible with ISO C, write @code{__asm__} instead of \n-@code{asm} and @code{__volatile__} instead of @code{volatile} \n-(@pxref{Alternate Keywords}). There is no alternate for @code{goto}.\n-\n-By definition, Extended @code{asm} is an @code{asm} statement that contains \n-operands. To separate the classes of operands, you use colons. Basic \n-@code{asm} statements contain no colons. (So, for example, \n-@code{asm(\"int $3\")} is Basic @code{asm}, and @code{asm(\"int $3\" : )} is \n-Extended @code{asm}. @pxref{Basic Asm}.)\n+The @code{asm} keyword is a GNU extension.\n+When writing code that can be compiled with @option{-ansi} and the\n+various @option{-std} options, use @code{__asm__} instead of \n+@code{asm} (@pxref{Alternate Keywords}).\n \n @subsubheading Qualifiers\n-@emph{volatile}\n-@*\n-The typical use of Extended @code{asm} statements is to manipulate input \n+@table @code\n+\n+@item volatile\n+The typical use of extended @code{asm} statements is to manipulate input \n values to produce output values. However, your @code{asm} statements may \n also produce side effects. If so, you may need to use the @code{volatile} \n qualifier to disable certain optimizations. @xref{Volatile}.\n \n-@emph{goto}\n-@*\n+@item goto\n This qualifier informs the compiler that the @code{asm} statement may \n-perform a jump to one of the labels listed in the GotoLabels section. \n+perform a jump to one of the labels listed in the @var{GotoLabels}.\n @xref{GotoLabels}.\n+@end table\n \n @subsubheading Parameters\n-@emph{AssemblerTemplate}\n-@*\n-This is a literal string that contains the assembler code. It is a \n+@table @var\n+@item AssemblerTemplate\n+This is a literal string that is the template for the assembler code. It is a \n combination of fixed text and tokens that refer to the input, output, \n and goto parameters. @xref{AssemblerTemplate}.\n \n-@emph{OutputOperands}\n-@*\n+@item OutputOperands\n A comma-separated list of the C variables modified by the instructions in the \n-AssemblerTemplate. @xref{OutputOperands}.\n+@var{AssemblerTemplate}.  An empty list is permitted.  @xref{OutputOperands}.\n \n-@emph{InputOperands}\n-@*\n+@item InputOperands\n A comma-separated list of C expressions read by the instructions in the \n-AssemblerTemplate. @xref{InputOperands}.\n+@var{AssemblerTemplate}.  An empty list is permitted.  @xref{InputOperands}.\n \n-@emph{Clobbers}\n-@*\n+@item Clobbers\n A comma-separated list of registers or other values changed by the \n-AssemblerTemplate, beyond those listed as outputs. @xref{Clobbers}.\n+@var{AssemblerTemplate}, beyond those listed as outputs.\n+An empty list is permitted.  @xref{Clobbers}.\n \n-@emph{GotoLabels}\n-@*\n+@item GotoLabels\n When you are using the @code{goto} form of @code{asm}, this section contains \n-the list of all C labels to which the AssemblerTemplate may jump. \n+the list of all C labels to which the code in the \n+@var{AssemblerTemplate} may jump. \n @xref{GotoLabels}.\n \n+@code{asm} statements may not perform jumps into other @code{asm} statements,\n+only to the listed @var{GotoLabels}.\n+GCC's optimizers do not know about other jumps; therefore they cannot take \n+account of them when deciding how to optimize.\n+@end table\n+\n+The total number of input + output + goto operands is limited to 30.\n+\n @subsubheading Remarks\n The @code{asm} statement allows you to include assembly instructions directly \n within C code. This may help you to maximize performance in time-sensitive \n code or to access assembly instructions that are not readily available to C \n programs.\n \n-Note that Extended @code{asm} statements must be inside a function. Only \n-Basic @code{asm} may be outside functions (@pxref{Basic Asm}).\n-Functions declared with the @code{naked} attribute also require Basic \n+Note that extended @code{asm} statements must be inside a function. Only \n+basic @code{asm} may be outside functions (@pxref{Basic Asm}).\n+Functions declared with the @code{naked} attribute also require basic \n @code{asm} (@pxref{Function Attributes}).\n \n While the uses of @code{asm} are many and varied, it may help to think of an \n@@ -6598,7 +6619,7 @@ asm (\"mov %1, %0\\n\\t\"\n printf(\"%d\\n\", dst);\n @end example\n \n-This code will copy @var{src} to @var{dst} and add 1 to @var{dst}.\n+This code copies @code{src} to @code{dst} and add 1 to @code{dst}.\n \n @anchor{Volatile}\n @subsubsection Volatile\n@@ -6610,13 +6631,12 @@ there is no need for the output variables. Also, the optimizers may move\n code out of loops if they believe that the code will always return the same \n result (i.e. none of its input values change between calls). Using the \n @code{volatile} qualifier disables these optimizations. @code{asm} statements \n-that have no output operands are implicitly volatile.\n-\n-Examples:\n+that have no output operands, including @code{asm goto} statements, \n+are implicitly volatile.\n \n This i386 code demonstrates a case that does not use (or require) the \n @code{volatile} qualifier. If it is performing assertion checking, this code \n-uses @code{asm} to perform the validation. Otherwise, @var{dwRes} is \n+uses @code{asm} to perform the validation. Otherwise, @code{dwRes} is \n unreferenced by any code. As a result, the optimizers can discard the \n @code{asm} statement, which in turn removes the need for the entire \n @code{DoCheck} routine. By omitting the @code{volatile} qualifier when it \n@@ -6639,7 +6659,7 @@ void DoCheck(uint32_t dwSomeValue)\n @end example\n \n The next example shows a case where the optimizers can recognize that the input \n-(@var{dwSomeValue}) never changes during the execution of the function and can \n+(@code{dwSomeValue}) never changes during the execution of the function and can \n therefore move the @code{asm} outside the loop to produce more efficient code. \n Again, using @code{volatile} disables this type of optimization.\n \n@@ -6662,7 +6682,8 @@ void do_print(uint32_t dwSomeValue)\n @end example\n \n The following example demonstrates a case where you need to use the \n-@code{volatile} qualifier. It uses the x86 RDTSC instruction, which reads \n+@code{volatile} qualifier. \n+It uses the x86 @code{rdtsc} instruction, which reads \n the computer's time-stamp counter. Without the @code{volatile} qualifier, \n the optimizers might assume that the @code{asm} block will always return the \n same value and therefore optimize away the second call.\n@@ -6692,15 +6713,15 @@ asm volatile ( \"rdtsc\\n\\t\"    // Returns the time in EDX:EAX.\n printf(\"msr: %llx\\n\", msr);\n @end example\n \n-GCC's optimizers will not treat this code like the non-volatile code in the \n+GCC's optimizers do not treat this code like the non-volatile code in the \n earlier examples. They do not move it out of loops or omit it on the \n assumption that the result from a previous call is still valid.\n \n Note that the compiler can move even volatile @code{asm} instructions relative \n to other code, including across jump instructions. For example, on many \n targets there is a system register that controls the rounding mode of \n floating-point operations. Setting it with a volatile @code{asm}, as in the \n-following PowerPC example, will not work reliably.\n+following PowerPC example, does not work reliably.\n \n @example\n asm volatile(\"mtfsf 255, %0\" : : \"f\" (fpenv));\n@@ -6718,16 +6739,18 @@ sum = x + y;\n \n Under certain circumstances, GCC may duplicate (or remove duplicates of) your \n assembly code when optimizing. This can lead to unexpected duplicate symbol \n-errors during compilation if your asm code defines symbols or labels. Using %= \n+errors during compilation if your asm code defines symbols or labels. \n+Using @samp{%=} \n (@pxref{AssemblerTemplate}) may help resolve this problem.\n \n @anchor{AssemblerTemplate}\n @subsubsection Assembler Template\n @cindex @code{asm} assembler template\n \n-An assembler template is a literal string containing assembler instructions. \n-The compiler will replace any references to inputs, outputs, and goto labels \n-in the template, and then output the resulting string to the assembler. The \n+An assembler template is a literal string containing assembler instructions.\n+The compiler replaces tokens in the template that refer \n+to inputs, outputs, and goto labels,\n+and then outputs the resulting string to the assembler. The \n string can contain any instructions recognized by the assembler, including \n directives. GCC does not parse the assembler instructions \n themselves and does not know what they mean or even whether they are valid \n@@ -6738,7 +6761,8 @@ You may place multiple assembler instructions together in a single @code{asm}\n string, separated by the characters normally used in assembly code for the \n system. A combination that works in most places is a newline to break the \n line, plus a tab character to move to the instruction field (written as \n-\"\\n\\t\"). Some assemblers allow semicolons as a line separator. However, note \n+@samp{\\n\\t}). \n+Some assemblers allow semicolons as a line separator. However, note \n that some assembler dialects use semicolons to start a comment. \n \n Do not expect a sequence of @code{asm} statements to remain perfectly \n@@ -6751,20 +6775,44 @@ by using global symbols directly from the assembler template) may not work as\n expected. Similarly, calling functions directly from an assembler template \n requires a detailed understanding of the target assembler and ABI.\n \n-Since GCC does not parse the AssemblerTemplate, it has no visibility of any \n+Since GCC does not parse the assembler template,\n+it has no visibility of any \n symbols it references. This may result in GCC discarding those symbols as \n unreferenced unless they are also listed as input, output, or goto operands.\n \n-GCC can support multiple assembler dialects (for example, GCC for x86 \n-supports \"att\" and \"intel\" dialects) for inline assembler. In builds that \n-support this capability, the @option{-masm} option controls which dialect \n-GCC uses as its default. The hardware-specific documentation for the \n+@subsubheading Special format strings\n+\n+In addition to the tokens described by the input, output, and goto operands, \n+these tokens have special meanings in the assembler template:\n+\n+@table @samp\n+@item %% \n+Outputs a single @samp{%} into the assembler code.\n+\n+@item %= \n+Outputs a number that is unique to each instance of the @code{asm} \n+statement in the entire compilation. This option is useful when creating local \n+labels and referring to them multiple times in a single template that \n+generates multiple assembler instructions. \n+\n+@item %@{\n+@itemx %|\n+@itemx %@}\n+Outputs @samp{@{}, @samp{|}, and @samp{@}} characters (respectively)\n+into the assembler code.  When unescaped, these characters have special\n+meaning to indicate multiple assembler dialects, as described below.\n+@end table\n+\n+@subsubheading Multiple assembler dialects in @code{asm} templates\n+\n+On targets such as x86, GCC supports multiple assembler dialects.\n+The @option{-masm} option controls which dialect GCC uses as its \n+default for inline assembler. The target-specific documentation for the \n @option{-masm} option contains the list of supported dialects, as well as the \n default dialect if the option is not specified. This information may be \n important to understand, since assembler code that works correctly when \n compiled using one dialect will likely fail if compiled using another.\n-\n-@subsubheading Using braces in @code{asm} templates\n+@xref{x86 Options}.\n \n If your code needs to support multiple assembler dialects (for example, if \n you are writing public headers that need to support a variety of compilation \n@@ -6774,23 +6822,26 @@ options), use constructs of this form:\n @{ dialect0 | dialect1 | dialect2... @}\n @end example\n \n-This construct outputs 'dialect0' when using dialect #0 to compile the code, \n-'dialect1' for dialect #1, etc. If there are fewer alternatives within the \n+This construct outputs @code{dialect0} \n+when using dialect #0 to compile the code, \n+@code{dialect1} for dialect #1, etc. If there are fewer alternatives within the \n braces than the number of dialects the compiler supports, the construct \n outputs nothing.\n \n-For example, if an x86 compiler supports two dialects (att, intel), an \n+For example, if an x86 compiler supports two dialects\n+(@samp{att}, @samp{intel}), an \n assembler template such as this:\n \n @example\n \"bt@{l %[Offset],%[Base] | %[Base],%[Offset]@}; jc %l2\"\n @end example\n \n-would produce the output:\n+@noindent\n+is equivalent to one of\n \n @example\n-For att: \"btl %[Offset],%[Base] ; jc %l2\"\n-For intel: \"bt %[Base],%[Offset]; jc %l2\"\n+\"btl %[Offset],%[Base] ; jc %l2\"   @r{/* att dialect */}\n+\"bt %[Base],%[Offset]; jc %l2\"     @r{/* intel dialect */}\n @end example\n \n Using that same compiler, this code:\n@@ -6799,33 +6850,15 @@ Using that same compiler, this code:\n \"xchg@{l@}\\t@{%%@}ebx, %1\"\n @end example\n \n-would produce \n+@noindent\n+corresponds to either\n \n @example\n-For att: \"xchgl\\t%%ebx, %1\"\n-For intel: \"xchg\\tebx, %1\"\n+\"xchgl\\t%%ebx, %1\"                 @r{/* att dialect */}\n+\"xchg\\tebx, %1\"                    @r{/* intel dialect */}\n @end example\n \n-There is no support for nesting dialect alternatives. Also, there is no \n-``escape'' for an open brace (@{), so do not use open braces in an Extended \n-@code{asm} template other than as a dialect indicator.\n-\n-@subsubheading Other format strings\n-\n-In addition to the tokens described by the input, output, and goto operands, \n-there are a few special cases:\n-\n-@itemize\n-@item\n-\"%%\" outputs a single \"%\" into the assembler code.\n-\n-@item\n-\"%=\" outputs a number that is unique to each instance of the @code{asm} \n-statement in the entire compilation. This option is useful when creating local \n-labels and referring to them multiple times in a single template that \n-generates multiple assembler instructions. \n-\n-@end itemize\n+There is no support for nesting dialect alternatives.\n \n @anchor{OutputOperands}\n @subsubsection Output Operands\n@@ -6834,8 +6867,8 @@ generates multiple assembler instructions.\n An @code{asm} statement has zero or more output operands indicating the names\n of C variables modified by the assembler code.\n \n-In this i386 example, @var{old} (referred to in the template string as \n-@code{%0}) and @var{*Base} (as @code{%1}) are outputs and @var{Offset} \n+In this i386 example, @code{old} (referred to in the template string as \n+@code{%0}) and @code{*Base} (as @code{%1}) are outputs and @code{Offset} \n (@code{%2}) is an input:\n \n @example\n@@ -6850,53 +6883,57 @@ __asm__ (\"btsl %2,%1\\n\\t\" // Turn on zero-based bit #Offset in Base.\n return old;\n @end example\n \n-Operands use this format:\n+Operands are separated by commas.  Each operand has this format:\n \n @example\n-[ [asmSymbolicName] ] \"constraint\" (cvariablename)\n+@r{[} [@var{asmSymbolicName}] @r{]} @var{constraint} (@var{cvariablename})\n @end example\n \n-@emph{asmSymbolicName}\n-@*\n-\n-When not using asmSymbolicNames, use the (zero-based) position of the operand \n-in the list of operands in the assembler template. For example if there are \n-three output operands, use @code{%0} in the template to refer to the first, \n-@code{%1} for the second, and @code{%2} for the third. When using an \n-asmSymbolicName, reference it by enclosing the name in square brackets \n-(i.e. @code{%[Value]}). The scope of the name is the @code{asm} statement \n+@table @var\n+@item asmSymbolicName\n+Specifies a symbolic name for the operand.\n+Reference the name in the assembler template \n+by enclosing it in square brackets \n+(i.e. @samp{%[Value]}). The scope of the name is the @code{asm} statement \n that contains the definition. Any valid C variable name is acceptable, \n including names already defined in the surrounding code. No two operands \n within the same @code{asm} statement can use the same symbolic name.\n \n-@emph{constraint}\n-@*\n-Output constraints must begin with either @code{\"=\"} (a variable overwriting an \n-existing value) or @code{\"+\"} (when reading and writing). When using \n-@code{\"=\"}, do not assume the location will contain the existing value (except \n-when tying the variable to an input; @pxref{InputOperands,,Input Operands}).\n+When not using an @var{asmSymbolicName}, use the (zero-based) position\n+of the operand \n+in the list of operands in the assembler template. For example if there are \n+three output operands, use @samp{%0} in the template to refer to the first, \n+@samp{%1} for the second, and @samp{%2} for the third. \n+\n+@item constraint\n+A string constant specifying constraints on the placement of the operand; \n+@xref{Constraints}, for details.\n+\n+Output constraints must begin with either @samp{=} (a variable overwriting an \n+existing value) or @samp{+} (when reading and writing). When using \n+@samp{=}, do not assume the location contains the existing value\n+on entry to the @code{asm}, except \n+when the operand is tied to an input; @pxref{InputOperands,,Input Operands}.\n \n After the prefix, there must be one or more additional constraints \n (@pxref{Constraints}) that describe where the value resides. Common \n-constraints include @code{\"r\"} for register and @code{\"m\"} for memory. \n-When you list more than one possible location (for example @code{\"=rm\"}), the \n-compiler chooses the most efficient one based on the current context. If you \n-list as many alternates as the @code{asm} statement allows, you will permit \n-the optimizers to produce the best possible code. If you must use a specific\n-register, but your Machine Constraints do not provide sufficient \n-control to select the specific register you want, Local Reg Vars may provide \n-a solution (@pxref{Local Reg Vars}).\n-\n-@emph{cvariablename}\n-@*\n-Specifies the C variable name of the output (enclosed by parentheses). Accepts \n-any (non-constant) variable within scope.\n-\n-Remarks:\n-\n-The total number of input + output + goto operands has a limit of 30. Commas \n-separate the operands. When the compiler selects the registers to use to \n-represent the output operands, it will not use any of the clobbered registers \n+constraints include @samp{r} for register and @samp{m} for memory. \n+When you list more than one possible location (for example, @code{\"=rm\"}),\n+the compiler chooses the most efficient one based on the current context. \n+If you list as many alternates as the @code{asm} statement allows, you permit \n+the optimizers to produce the best possible code. \n+If you must use a specific register, but your Machine Constraints do not\n+provide sufficient control to select the specific register you want, \n+local register variables may provide a solution (@pxref{Local Reg Vars}).\n+\n+@item cvariablename\n+Specifies a C lvalue expression to hold the output, typically a variable name.\n+The enclosing parentheses are a required part of the syntax.\n+\n+@end table\n+\n+When the compiler selects the registers to use to \n+represent the output operands, it does not use any of the clobbered registers \n (@pxref{Clobbers}).\n \n Output operand expressions must be lvalues. The compiler cannot check whether \n@@ -6906,12 +6943,16 @@ example a bit-field), the constraint must allow a register. In that case, GCC\n uses the register as the output of the @code{asm}, and then stores that \n register into the output. \n \n-Unless an output operand has the '@code{&}' constraint modifier \n-(@pxref{Modifiers}), GCC may allocate it in the same register as an unrelated \n-input operand, on the assumption that the assembler code will consume its \n+Operands using the @samp{+} constraint modifier count as two operands \n+(that is, both as input and output) towards the total maximum of 30 operands\n+per @code{asm} statement.\n+\n+Use the @samp{&} constraint modifier (@pxref{Modifiers}) on all output\n+operands that must not overlap an input.  Otherwise, \n+GCC may allocate the output operand in the same register as an unrelated \n+input operand, on the assumption that the assembler code consumes its \n inputs before producing outputs. This assumption may be false if the assembler \n-code actually consists of more than one instruction. In this case, use \n-'@code{&}' on each output operand that must not overlap an input.\n+code actually consists of more than one instruction.\n \n The same problem can occur if one output parameter (@var{a}) allows a register \n constraint and another output parameter (@var{b}) allows a memory constraint.\n@@ -6920,13 +6961,13 @@ registers which @emph{might} be shared by @var{a}, and GCC considers those\n registers to be inputs to the asm. As above, GCC assumes that such input\n registers are consumed before any outputs are written. This assumption may \n result in incorrect behavior if the asm writes to @var{a} before using \n-@var{b}. Combining the `@code{&}' constraint with the register constraint \n-ensures that modifying @var{a} will not affect what address is referenced by \n-@var{b}. Omitting the `@code{&}' constraint means that the location of @var{b} \n-will be undefined if @var{a} is modified before using @var{b}.\n+@var{b}. Combining the @samp{&} modifier with the register constraint on @var{a}\n+ensures that modifying @var{a} does not affect the address referenced by \n+@var{b}. Otherwise, the location of @var{b} \n+is undefined if @var{a} is modified before using @var{b}.\n \n-@code{asm} supports operand modifiers on operands (for example @code{%k2} \n-instead of simply @code{%2}). Typically these qualifiers are hardware \n+@code{asm} supports operand modifiers on operands (for example @samp{%k2} \n+instead of simply @samp{%2}). Typically these qualifiers are hardware \n dependent. The list of supported modifiers for x86 is found at \n @ref{x86Operandmodifiers,x86 Operand modifiers}.\n \n@@ -6935,13 +6976,11 @@ operands, use @code{volatile} for the @code{asm} statement to prevent the\n optimizers from discarding the @code{asm} statement as unneeded \n (see @ref{Volatile}).\n \n-Examples:\n-\n-This code makes no use of the optional asmSymbolicName. Therefore it \n+This code makes no use of the optional @var{asmSymbolicName}. Therefore it \n references the first output operand as @code{%0} (were there a second, it \n would be @code{%1}, etc). The number of the first input operand is one greater \n than that of the last output operand. In this i386 example, that makes \n-@var{Mask} @code{%1}:\n+@code{Mask} referenced as @code{%1}:\n \n @example\n uint32_t Mask = 1234;\n@@ -6953,17 +6992,21 @@ uint32_t Index;\n      : \"cc\");\n @end example\n \n-That code overwrites the variable Index (\"=\"), placing the value in a register \n-(\"r\"). The generic \"r\" constraint instead of a constraint for a specific \n+That code overwrites the variable @code{Index} (@samp{=}),\n+placing the value in a register (@samp{r}).\n+Using the generic @samp{r} constraint instead of a constraint for a specific \n register allows the compiler to pick the register to use, which can result \n in more efficient code. This may not be possible if an assembler instruction \n requires a specific register.\n \n-The following i386 example uses the asmSymbolicName operand. It produces the \n+The following i386 example uses the @var{asmSymbolicName} syntax.\n+It produces the \n same result as the code above, but some may consider it more readable or more \n maintainable since reordering index numbers is not necessary when adding or \n-removing operands. The names aIndex and aMask are only used to emphasize which \n-names get used where. It is acceptable to reuse the names Index and Mask.\n+removing operands. The names @code{aIndex} and @code{aMask}\n+are only used in this example to emphasize which \n+names get used where.\n+It is acceptable to reuse the names @code{Index} and @code{Mask}.\n \n @example\n uint32_t Mask = 1234;\n@@ -6987,61 +7030,68 @@ asm (\"mov %[e], %[d]\"\n    : [e] \"rm\" (*e));\n @end example\n \n-Here, @var{d} may either be in a register or in memory. Since the compiler \n-might already have the current value of the uint32_t pointed to by @var{e} \n+Here, @code{d} may either be in a register or in memory. Since the compiler \n+might already have the current value of the @code{uint32_t} location\n+pointed to by @code{e}\n in a register, you can enable it to choose the best location\n-for @var{d} by specifying both constraints.\n+for @code{d} by specifying both constraints.\n \n @anchor{InputOperands}\n @subsubsection Input Operands\n @cindex @code{asm} input operands\n @cindex @code{asm} expressions\n \n-Input operands make inputs from C variables and expressions available to the \n+Input operands make values from C variables and expressions available to the \n assembly code.\n \n-Specify input operands by using the format:\n+Operands are separated by commas.  Each operand has this format:\n \n @example\n-[ [asmSymbolicName] ] \"constraint\" (cexpression)\n+@r{[} [@var{asmSymbolicName}] @r{]} @var{constraint} (@var{cexpression})\n @end example\n \n-@emph{asmSymbolicName}\n-@*\n-When not using asmSymbolicNames, use the (zero-based) position of the operand \n-in the list of operands, including outputs, in the assembler template. For \n-example, if there are two output parameters and three inputs, @code{%2} refers \n-to the first input, @code{%3} to the second, and @code{%4} to the third.\n-When using an asmSymbolicName, reference it by enclosing the name in square \n-brackets (e.g. @code{%[Value]}). The scope of the name is the @code{asm} \n-statement that contains the definition. Any valid C variable name is \n-acceptable, including names already defined in the surrounding code. No two \n-operands within the same @code{asm} statement can use the same symbolic name.\n-\n-@emph{constraint}\n-@*\n-Input constraints must be a string containing one or more constraints \n-(@pxref{Constraints}). When you give more than one possible constraint \n-(for example, @code{\"irm\"}), the compiler will choose the most efficient \n-method based on the current context. Input constraints may not begin with \n-either \"=\" or \"+\". If you must use a specific register, but your Machine\n-Constraints do not provide sufficient control to select the specific \n-register you want, Local Reg Vars may provide a solution \n-(@pxref{Local Reg Vars}).\n+@table @var\n+@item asmSymbolicName\n+Specifies a symbolic name for the operand.\n+Reference the name in the assembler template \n+by enclosing it in square brackets \n+(i.e. @samp{%[Value]}). The scope of the name is the @code{asm} statement \n+that contains the definition. Any valid C variable name is acceptable, \n+including names already defined in the surrounding code. No two operands \n+within the same @code{asm} statement can use the same symbolic name.\n+\n+When not using an @var{asmSymbolicName}, use the (zero-based) position\n+of the operand \n+in the list of operands in the assembler template. For example if there are\n+two output opeerands and three inputs,\n+use @samp{%2} in the template to refer to the first input operand,\n+@samp{%3} for the second, and @samp{%4} for the third. \n+\n+@item constraint\n+A string constant specifying constraints on the placement of the operand; \n+@xref{Constraints}, for details.\n+\n+Input constraint strings may not begin with either @samp{=} or @samp{+}.\n+When you list more than one possible location (for example, @samp{\"irm\"}), \n+the compiler chooses the most efficient one based on the current context.\n+If you must use a specific register, but your Machine Constraints do not\n+provide sufficient control to select the specific register you want, \n+local register variables may provide a solution (@pxref{Local Reg Vars}).\n \n Input constraints can also be digits (for example, @code{\"0\"}). This indicates \n-that the specified input will be in the same place as the output constraint \n-at the (zero-based) index in the output constraint list. When using \n-asmSymbolicNames for the output operands, you may use these names (enclosed \n-in brackets []) instead of digits.\n+that the specified input must be in the same place as the output constraint \n+at the (zero-based) index in the output constraint list. \n+When using @var{asmSymbolicName} syntax for the output operands,\n+you may use these names (enclosed in brackets @samp{[]}) instead of digits.\n \n-@emph{cexpression}\n-@*\n+@item cexpression\n This is the C variable or expression being passed to the @code{asm} statement \n-as input.\n+as input.  The enclosing parentheses are a required part of the syntax.\n+\n+@end table\n \n When the compiler selects the registers to use to represent the input \n-operands, it will not use any of the clobbered registers (@pxref{Clobbers}).\n+operands, it does not use any of the clobbered registers (@pxref{Clobbers}).\n \n If there are no output operands but there are input operands, place two \n consecutive colons where the output operands would go:\n@@ -7054,32 +7104,27 @@ __asm__ (\"some instructions\"\n \n @strong{Warning:} Do @emph{not} modify the contents of input-only operands \n (except for inputs tied to outputs). The compiler assumes that on exit from \n-the @code{asm} statement these operands will contain the same values as they \n-had before executing the assembler. It is @emph{not} possible to use Clobbers \n+the @code{asm} statement these operands contain the same values as they \n+had before executing the statement. \n+It is @emph{not} possible to use clobbers\n to inform the compiler that the values in these inputs are changing. One \n common work-around is to tie the changing input variable to an output variable \n that never gets used. Note, however, that if the code that follows the \n @code{asm} statement makes no use of any of the output operands, the GCC \n optimizers may discard the @code{asm} statement as unneeded \n (see @ref{Volatile}).\n \n-Remarks:\n-\n-The total number of input + output + goto operands has a limit of 30.\n-\n-@code{asm} supports operand modifiers on operands (for example @code{%k2} \n-instead of simply @code{%2}). Typically these qualifiers are hardware \n+@code{asm} supports operand modifiers on operands (for example @samp{%k2} \n+instead of simply @samp{%2}). Typically these qualifiers are hardware \n dependent. The list of supported modifiers for x86 is found at \n @ref{x86Operandmodifiers,x86 Operand modifiers}.\n \n-Examples:\n-\n In this example using the fictitious @code{combine} instruction, the \n constraint @code{\"0\"} for input operand 1 says that it must occupy the same \n location as output operand 0. Only input operands may use numbers in \n constraints, and they must each refer to an output operand. Only a number (or \n the symbolic assembler name) in the constraint can guarantee that one operand \n-is in the same place as another. The mere fact that @var{foo} is the value of \n+is in the same place as another. The mere fact that @code{foo} is the value of \n both operands is not enough to guarantee that they are in the same place in \n the generated assembler code.\n \n@@ -7102,24 +7147,24 @@ asm (\"cmoveq %1, %2, %[result]\"\n @cindex @code{asm} clobbers\n \n While the compiler is aware of changes to entries listed in the output \n-operands, the assembler code may modify more than just the outputs. For \n+operands, the inline @code{asm} code may modify more than just the outputs. For \n example, calculations may require additional registers, or the processor may \n overwrite a register as a side effect of a particular assembler instruction. \n In order to inform the compiler of these changes, list them in the clobber \n list. Clobber list items are either register names or the special clobbers \n-(listed below). Each clobber list item is enclosed in double quotes and \n-separated by commas.\n+(listed below). Each clobber list item is a string constant \n+enclosed in double quotes and separated by commas.\n \n Clobber descriptions may not in any way overlap with an input or output \n operand. For example, you may not have an operand describing a register class \n with one member when listing that register in the clobber list. Variables \n-declared to live in specific registers (@pxref{Explicit Reg Vars}), and used \n-as @code{asm} input or output operands, must have no part mentioned in the \n+declared to live in specific registers (@pxref{Explicit Reg Vars}) and used \n+as @code{asm} input or output operands must have no part mentioned in the \n clobber description. In particular, there is no way to specify that input \n operands get modified without also specifying them as output operands.\n \n When the compiler selects which registers to use to represent input and output \n-operands, it will not use any of the clobbered registers. As a result, \n+operands, it does not use any of the clobbered registers. As a result, \n clobbered registers are available for any use in the assembler code.\n \n Here is a realistic example for the VAX showing the use of clobbered \n@@ -7134,68 +7179,78 @@ asm volatile (\"movc3 %0, %1, %2\"\n \n Also, there are two special clobber arguments:\n \n-@enumerate\n-@item\n+@table @code\n+@item \"cc\"\n The @code{\"cc\"} clobber indicates that the assembler code modifies the flags \n register. On some machines, GCC represents the condition codes as a specific \n-hardware register; \"cc\" serves to name this register. On other machines, \n-condition code handling is different, and specifying \"cc\" has no effect. But \n-it is valid no matter what the machine.\n-\n-@item\n-The \"memory\" clobber tells the compiler that the assembly code performs memory \n+hardware register; @code{\"cc\"} serves to name this register.\n+On other machines, condition code handling is different, \n+and specifying @code{\"cc\"} has no effect. But \n+it is valid no matter what the target.\n+\n+@item \"memory\"\n+The @code{\"memory\"} clobber tells the compiler that the assembly code\n+performs memory \n reads or writes to items other than those listed in the input and output \n-operands (for example accessing the memory pointed to by one of the input \n+operands (for example, accessing the memory pointed to by one of the input \n parameters). To ensure memory contains correct values, GCC may need to flush \n specific register values to memory before executing the @code{asm}. Further, \n-the compiler will not assume that any values read from memory before an \n-@code{asm} will remain unchanged after that @code{asm}; it will reload them as \n-needed. This effectively forms a read/write memory barrier for the compiler.\n+the compiler does not assume that any values read from memory before an \n+@code{asm} remain unchanged after that @code{asm}; it reloads them as \n+needed.  \n+Using the @code{\"memory\"} clobber effectively forms a read/write\n+memory barrier for the compiler.\n \n Note that this clobber does not prevent the @emph{processor} from doing \n speculative reads past the @code{asm} statement. To prevent that, you need \n processor-specific fence instructions.\n \n Flushing registers to memory has performance implications and may be an issue \n-for time-sensitive code. One trick to avoid this is available if the size of \n+for time-sensitive code.  You can use a trick to avoid this if the size of \n the memory being accessed is known at compile time. For example, if accessing \n ten bytes of a string, use a memory input like: \n \n @code{@{\"m\"( (@{ struct @{ char x[10]; @} *p = (void *)ptr ; *p; @}) )@}}.\n \n-@end enumerate\n+@end table\n \n @anchor{GotoLabels}\n @subsubsection Goto Labels\n @cindex @code{asm} goto labels\n \n-@code{asm goto} allows assembly code to jump to one or more C labels. The \n-GotoLabels section in an @code{asm goto} statement contains a comma-separated \n+@code{asm goto} allows assembly code to jump to one or more C labels.  The\n+@var{GotoLabels} section in an @code{asm goto} statement contains \n+a comma-separated \n list of all C labels to which the assembler code may jump. GCC assumes that \n @code{asm} execution falls through to the next statement (if this is not the \n case, consider using the @code{__builtin_unreachable} intrinsic after the \n @code{asm} statement). Optimization of @code{asm goto} may be improved by \n using the @code{hot} and @code{cold} label attributes (@pxref{Label \n-Attributes}). The total number of input + output + goto operands has \n-a limit of 30.\n+Attributes}).\n \n-An @code{asm goto} statement can not have outputs (which means that the \n-statement is implicitly volatile). This is due to an internal restriction of \n-the compiler: control transfer instructions cannot have outputs. If the \n-assembler code does modify anything, use the \"memory\" clobber to force the \n-optimizers to flush all register values to memory, and reload them if \n-necessary, after the @code{asm} statement.\n+An @code{asm goto} statement cannot have outputs.\n+This is due to an internal restriction of \n+the compiler: control transfer instructions cannot have outputs. \n+If the assembler code does modify anything, use the @code{\"memory\"} clobber \n+to force the \n+optimizers to flush all register values to memory and reload them if \n+necessary after the @code{asm} statement.\n \n-To reference a label, prefix it with @code{%l} (that's a lowercase L) followed \n-by its (zero-based) position in GotoLabels plus the number of input \n-arguments.  For example, if the @code{asm} has three inputs and references two \n-labels, refer to the first label as @code{%l3} and the second as @code{%l4}).\n+Also note that an @code{asm goto} statement is always implicitly\n+considered volatile.\n \n-@code{asm} statements may not perform jumps into other @code{asm} statements. \n-GCC's optimizers do not know about these jumps; therefore they cannot take \n-account of them when deciding how to optimize.\n+To reference a label in the assembler template,\n+prefix it with @samp{%l} (lowercase @samp{L}) followed \n+by its (zero-based) position in @var{GotoLabels} plus the number of input \n+operands.  For example, if the @code{asm} has three inputs and references two \n+labels, refer to the first label as @samp{%l3} and the second as @samp{%l4}).\n+\n+Alternately, you can reference labels using the actual C label name enclosed\n+in brackets.  For example, to reference a label named @code{carry}, you can\n+use @samp{%l[carry]}.  The label must still be listed in the @var{GotoLabels}\n+section when using this approach.\n \n-Example code for i386 might look like:\n+Here is an example of @code{asm goto} for i386:\n \n @example\n asm goto (\n@@ -7212,7 +7267,7 @@ carry:\n return 1;\n @end example\n \n-The following example shows an @code{asm goto} that uses the memory clobber.\n+The following example shows an @code{asm goto} that uses a memory clobber.\n \n @example\n int frob(int x)\n@@ -7230,17 +7285,20 @@ error:\n @end example\n \n @anchor{x86Operandmodifiers}\n-@subsubsection x86 Operand modifiers\n+@subsubsection x86 Operand Modifiers\n \n-Input, output, and goto operands for extended @code{asm} statements can use \n-modifiers to affect the code output to the assembler. For example, the \n-following code uses the \"h\" and \"b\" modifiers for x86:\n+References to input, output, and goto operands in the assembler template\n+of extended @code{asm} statements can use \n+modifiers to affect the way the operands are formatted in \n+the code output to the assembler. For example, the \n+following code uses the @samp{h} and @samp{b} modifiers for x86:\n \n @example\n uint16_t  num;\n asm volatile (\"xchg %h0, %b0\" : \"+a\" (num) );\n @end example\n \n+@noindent\n These modifiers generate this assembler code:\n \n @example\n@@ -7265,7 +7323,7 @@ top:\n @end example\n \n With no modifiers, this is what the output from the operands would be for the \n-att and intel dialects of assembler:\n+@samp{att} and @samp{intel} dialects of assembler:\n \n @multitable {Operand} {masm=att} {OFFSET FLAT:.L2}\n @headitem Operand @tab masm=att @tab masm=intel\n@@ -7327,7 +7385,7 @@ The table below shows the list of supported modifiers and their effects.\n @end multitable\n \n @anchor{x86floatingpointasmoperands}\n-@subsubsection x86 floating-point asm operands\n+@subsubsection x86 Floating-Point @code{asm} Operands\n \n On x86 targets, there are several rules on the usage of stack-like registers\n in the operands of an @code{asm}.  These rules apply only to the operands\n@@ -7369,10 +7427,10 @@ reload may think that it can use the same register for both the input and\n the output.\n \n To prevent this from happening,\n-if any input operand uses the @code{f} constraint, all output register\n-constraints must use the @code{&} early-clobber modifier.\n+if any input operand uses the @samp{f} constraint, all output register\n+constraints must use the @samp{&} early-clobber modifier.\n \n-The example above would be correctly written as:\n+The example above is correctly written as:\n \n @smallexample\n asm (\"foo\" : \"=&t\" (a) : \"f\" (b));\n@@ -7385,7 +7443,7 @@ know which registers the outputs appear in unless you indicate\n this in the constraints.\n \n Output operands must specifically indicate which register an output\n-appears in after an @code{asm}.  @code{=f} is not allowed: the operand\n+appears in after an @code{asm}.  @samp{=f} is not allowed: the operand\n constraints must select a class with a single register.\n \n @item\n@@ -7404,8 +7462,7 @@ unrelated to the inputs and outputs.\n \n @end enumerate\n \n-Here are a couple of reasonable @code{asm}s to want to write.  This\n-@code{asm}\n+This @code{asm}\n takes one input, which is internally popped, and produces two outputs.\n \n @smallexample\n@@ -7529,8 +7586,8 @@ Here @code{a5} is the name of the register that should be used.  Choose a\n register that is normally saved and restored by function calls on your\n machine, so that library routines will not clobber it.\n \n-Naturally the register name is cpu-dependent, so you need to\n-conditionalize your program according to cpu type.  The register\n+Naturally the register name is CPU-dependent, so you need to\n+conditionalize your program according to CPU type.  The register\n @code{a5} is a good choice on a 68000 for a variable of pointer\n type.  On machines with register windows, be sure to choose a ``global''\n register that is not affected magically by the function call mechanism.\n@@ -7628,13 +7685,13 @@ Here @code{a5} is the name of the register that should be used.  Note\n that this is the same syntax used for defining global register\n variables, but for a local variable it appears within a function.\n \n-Naturally the register name is cpu-dependent, but this is not a\n+Naturally the register name is CPU-dependent, but this is not a\n problem, since specific registers are most often useful with explicit\n assembler instructions (@pxref{Extended Asm}).  Both of these things\n generally require that you conditionalize your program according to\n-cpu type.\n+CPU type.\n \n-In addition, operating systems on one type of cpu may differ in how they\n+In addition, operating systems on one type of CPU may differ in how they\n name the registers; then you need additional conditionals.  For\n example, some 68000 operating systems call this register @code{%a5}.\n \n@@ -7644,11 +7701,12 @@ the variable's value is not live.\n \n This option does not guarantee that GCC generates code that has\n this variable in the register you specify at all times.  You may not\n-code an explicit reference to this register in the @emph{assembler\n-instruction template} part of an @code{asm} statement and assume it\n-always refers to this variable.  However, using the variable as an\n-@code{asm} @emph{operand} guarantees that the specified register is used\n-for the operand.\n+code an explicit reference to this register in the assembler\n+instruction template part of an @code{asm} statement and assume it\n+always refers to this variable.\n+However, using the variable as an input or output operand to the @code{asm}\n+guarantees that the specified register is used for that operand.  \n+@xref{Extended Asm}, for more information.\n \n Stores into local register variables may be deleted when they appear to be dead\n according to dataflow analysis.  References to local register variables may"}]}