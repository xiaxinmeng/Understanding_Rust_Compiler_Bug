{"sha": "4c029f40bd39f49cb2748fb685d18e5dc97c90a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMwMjlmNDBiZDM5ZjQ5Y2IyNzQ4ZmI2ODVkMThlNWRjOTdjOTBhNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-04-05T10:12:14Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-04-05T10:12:14Z"}, "message": "re PR target/43920 (Choosing conditional execution over conditional branches for code size in some cases.)\n\n2011-04-05  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/43920\n\t* function.c (emit_use_return_register_into_block): New function.\n\t(thread_prologue_and_epilogue_insns): Use\n\temit_use_return_register_into_block.\n\nFrom-SVN: r171977", "tree": {"sha": "90745af363780920b5090d26d5fc5631ea679e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90745af363780920b5090d26d5fc5631ea679e96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c029f40bd39f49cb2748fb685d18e5dc97c90a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c029f40bd39f49cb2748fb685d18e5dc97c90a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c029f40bd39f49cb2748fb685d18e5dc97c90a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c029f40bd39f49cb2748fb685d18e5dc97c90a6/comments", "author": null, "committer": null, "parents": [{"sha": "2a562b0ab31fe77a48dcaca05d2e6d31c29bbeab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a562b0ab31fe77a48dcaca05d2e6d31c29bbeab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a562b0ab31fe77a48dcaca05d2e6d31c29bbeab"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "15e1b86f40a524d2516d5a90ee53734382f527ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c029f40bd39f49cb2748fb685d18e5dc97c90a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c029f40bd39f49cb2748fb685d18e5dc97c90a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c029f40bd39f49cb2748fb685d18e5dc97c90a6", "patch": "@@ -1,3 +1,10 @@\n+2011-04-05  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/43920\n+\t* function.c (emit_use_return_register_into_block): New function.\n+\t(thread_prologue_and_epilogue_insns): Use\n+\temit_use_return_register_into_block.\n+\n 2011-04-05  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/43920"}, {"sha": "7c500a656bc9c9d555024df8a777d95bfdc41d35", "filename": "gcc/function.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c029f40bd39f49cb2748fb685d18e5dc97c90a6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c029f40bd39f49cb2748fb685d18e5dc97c90a6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4c029f40bd39f49cb2748fb685d18e5dc97c90a6", "patch": "@@ -5262,6 +5262,19 @@ prologue_epilogue_contains (const_rtx insn)\n   return 0;\n }\n \n+/* Insert use of return register before the end of BB.  */\n+\n+static void\n+emit_use_return_register_into_block (basic_block bb)\n+{\n+  rtx seq;\n+  start_sequence ();\n+  use_return_register ();\n+  seq = get_insns ();\n+  end_sequence ();\n+  emit_insn_before (seq, BB_END (bb));\n+}\n+\n #ifdef HAVE_return\n /* Insert gen_return at the end of block BB.  This also means updating\n    block_for_insn appropriately.  */\n@@ -5416,6 +5429,15 @@ thread_prologue_and_epilogue_insns (void)\n \t\t with a simple return instruction.  */\n \t      if (simplejump_p (jump))\n \t\t{\n+\t\t  /* The use of the return register might be present in the exit\n+\t\t     fallthru block.  Either:\n+\t\t     - removing the use is safe, and we should remove the use in\n+\t\t       the exit fallthru block, or\n+\t\t     - removing the use is not safe, and we should add it here.\n+\t\t     For now, we conservatively choose the latter.  Either of the\n+\t\t     2 helps in crossjumping.  */\n+\t\t  emit_use_return_register_into_block (bb);\n+\n \t\t  emit_return_into_block (bb);\n \t\t  delete_insn (jump);\n \t\t}\n@@ -5430,6 +5452,9 @@ thread_prologue_and_epilogue_insns (void)\n \t\t      continue;\n \t\t    }\n \n+\t\t  /* See comment in simple_jump_p case above.  */\n+\t\t  emit_use_return_register_into_block (bb);\n+\n \t\t  /* If this block has only one successor, it both jumps\n \t\t     and falls through to the fallthru block, so we can't\n \t\t     delete the edge.  */"}]}