{"sha": "27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkZGNkNDhjMTA5MWE5YWExMDkwZDI1MDZlMDRhMmI3NWVkMGFlMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-23T03:25:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-23T03:25:47Z"}, "message": "Make deprecated strstream header consistent with new and new.h.\n\n\n2000-11-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tMake deprecated strstream header consistent with new and new.h.\n\t* include/backward/strstream.h: Add. Use using declarations to\n\tscope strstreambuf, istrstream, ostrstream, strstream to global\n\tscope.\n\t* include/backward/strstream: Remove using declarations.\n\t* src/Makefile.am (base_headers): Add strstream.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/backward/new.h (_CPP_BACKWARD_NEW_H): Change macro guard\n\tto be consistent with other headers.\n\nFrom-SVN: r37682", "tree": {"sha": "3a620c973c63913df31c9adaa4de3bd30ab2b94f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a620c973c63913df31c9adaa4de3bd30ab2b94f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3/comments", "author": null, "committer": null, "parents": [{"sha": "ea88c0f77e553d3c7cf34e5ecd3698bc8210c9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea88c0f77e553d3c7cf34e5ecd3698bc8210c9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea88c0f77e553d3c7cf34e5ecd3698bc8210c9ca"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "0a6a129f4ef674aeca71214dc9695a1f718077ff", "filename": "libstdc++-v3/include/backward/strstream", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=27ddcd48c1091a9aa1090d2506e04a2b75ed0ae3", "patch": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright (c) 1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+// WARNING: The classes defined in this header are DEPRECATED.  This\n+// header is defined in section D.7.1 of the C++ standard, and it\n+// MAY BE REMOVED in a future standard revision.  You should use the\n+// header <sstream> instead.\n+\n+#ifndef __SGI_STL_STRSTREAM\n+#define __SGI_STL_STRSTREAM\n+\n+#if defined(__sgi) && !defined(__GNUC__) && !defined(_STANDARD_C_PLUS_PLUS)\n+#error This header file requires the -LANG:std option\n+#endif\n+\n+#include <bits/std_iosfwd.h>\n+#include <bits/std_ios.h>\n+#include <bits/std_istream.h>\n+#include <bits/std_ostream.h>\n+#include <bits/std_string.h>\n+\n+__STL_BEGIN_NAMESPACE\n+\n+//----------------------------------------------------------------------\n+// Class strstreambuf, a streambuf class that manages an array of char.\n+// Note that this class is not a template.\n+\n+class strstreambuf : public basic_streambuf<char, char_traits<char> >\n+{\n+public:                         // Types.\n+  typedef char_traits<char>              _Traits;\n+  typedef basic_streambuf<char, _Traits> _Base;\n+\n+public:                         // Constructor, destructor\n+  explicit strstreambuf(streamsize __initial_capacity = 0);\n+  strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));\n+\n+  strstreambuf(char* __get, streamsize __n, char* __put = 0);\n+  strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0);\n+  strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0);\n+\n+  strstreambuf(const char* __get, streamsize __n);\n+  strstreambuf(const signed char* __get, streamsize __n);\n+  strstreambuf(const unsigned char* __get, streamsize __n);\n+\n+  virtual ~strstreambuf();\n+\n+public:                         // strstreambuf operations.\n+  void freeze(bool = true);\n+  char* str();\n+  int pcount() const;\n+\n+protected:                      // Overridden virtual member functions.\n+  virtual int_type overflow(int_type __c  = _Traits::eof());\n+  virtual int_type pbackfail(int_type __c = _Traits::eof());\n+  virtual int_type underflow();\n+  virtual _Base* setbuf(char* __buf, streamsize __n);\n+  virtual pos_type seekoff(off_type __off, ios_base::seekdir __dir,\n+                           ios_base::openmode __mode\n+                                      = ios_base::in | ios_base::out);\n+  virtual pos_type seekpos(pos_type __pos, ios_base::openmode __mode\n+                                      = ios_base::in | ios_base::out);\n+\n+private:                        // Helper functions.\n+  // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n+  char* _M_alloc(size_t);\n+  void  _M_free(char*);\n+\n+  // Helper function used in constructors.\n+  void _M_setup(char* __get, char* __put, streamsize __n);\n+\n+private:                        // Data members.\n+  void* (*_M_alloc_fun)(size_t);\n+  void  (*_M_free_fun)(void*);\n+\n+  bool _M_dynamic  : 1;\n+  bool _M_frozen   : 1;\n+  bool _M_constant : 1;\n+};\n+\n+//----------------------------------------------------------------------\n+// Class istrstream, an istream that manages a strstreambuf.\n+\n+class istrstream : public basic_istream<char>\n+{\n+public:\n+  explicit istrstream(char*);\n+  explicit istrstream(const char*);\n+  istrstream(char* , streamsize);\n+  istrstream(const char*, streamsize);\n+  virtual ~istrstream();\n+\n+  strstreambuf* rdbuf() const;\n+  char* str();\n+\n+private:\n+  strstreambuf _M_buf;\n+};\n+\n+//----------------------------------------------------------------------\n+// Class ostrstream\n+\n+class ostrstream : public basic_ostream<char>\n+{\n+public:\n+  ostrstream();\n+  ostrstream(char*, int, ios_base::openmode = ios_base::out);\n+  virtual ~ostrstream();\n+\n+  strstreambuf* rdbuf() const;\n+  void freeze(bool = true);\n+  char* str();\n+  int pcount() const;\n+\n+private:\n+  strstreambuf _M_buf;\n+};\n+\n+//----------------------------------------------------------------------\n+// Class strstream\n+\n+class strstream : public basic_iostream<char>\n+{\n+public:\n+  typedef char                        char_type;\n+  typedef char_traits<char>::int_type int_type;\n+  typedef char_traits<char>::pos_type pos_type;\n+  typedef char_traits<char>::off_type off_type;\n+\n+  strstream();\n+  strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);\n+  virtual ~strstream();\n+\n+  strstreambuf* rdbuf() const;\n+  void freeze(bool = true);\n+  int pcount() const;\n+  char* str();\n+\n+private:\n+  strstreambuf _M_buf;\n+};\n+\n+__STL_END_NAMESPACE\n+\n+#endif /* __SGI_STL_STRSTREAM */\n+\n+// Local Variables:\n+// mode:C++\n+// End:\n+\n+"}]}