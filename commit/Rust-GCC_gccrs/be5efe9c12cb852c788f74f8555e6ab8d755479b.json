{"sha": "be5efe9c12cb852c788f74f8555e6ab8d755479b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU1ZWZlOWMxMmNiODUyYzc4OGY3NGY4NTU1ZTZhYjhkNzU1NDc5Yg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-03T08:38:32Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-07T03:27:45Z"}, "message": "Fix ICE of insn does not satisfy its constraints.\n\nevex encoding vpmovzxbx needs both AVX512BW and AVX512VL which means\nconstraint \"Yw\" should be used instead of constraint \"v\".\n\ngcc/ChangeLog:\n\n\tPR target/100885\n\t* config/i386/sse.md (*sse4_1_zero_extendv8qiv8hi2_3): Refine\n\tconstraints.\n\t(<insn>v4siv4di2): Delete constraints for define_expand.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100885\n\t* g++.target/i386/pr100885.C: New test.", "tree": {"sha": "cb264bb95cf555691dd800d18b3995c7bde55499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb264bb95cf555691dd800d18b3995c7bde55499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be5efe9c12cb852c788f74f8555e6ab8d755479b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5efe9c12cb852c788f74f8555e6ab8d755479b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5efe9c12cb852c788f74f8555e6ab8d755479b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5efe9c12cb852c788f74f8555e6ab8d755479b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a90b311f22956addaf4f5f9bdb3592afd45083f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a90b311f22956addaf4f5f9bdb3592afd45083f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a90b311f22956addaf4f5f9bdb3592afd45083f"}], "stats": {"total": 152, "additions": 148, "deletions": 4}, "files": [{"sha": "2a34756be2a2f82228c0343e6a2a269ac04fddc3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5efe9c12cb852c788f74f8555e6ab8d755479b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5efe9c12cb852c788f74f8555e6ab8d755479b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=be5efe9c12cb852c788f74f8555e6ab8d755479b", "patch": "@@ -18115,10 +18115,10 @@\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n (define_insn_and_split \"*sse4_1_zero_extendv8qiv8hi2_3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=Yr,*x,v\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=Yr,*x,Yw\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"vector_operand\" \"YrBm,*xBm,vm\")\n+\t    (match_operand:V16QI 1 \"vector_operand\" \"YrBm,*xBm,Ywm\")\n \t    (match_operand:V16QI 2 \"const0_operand\" \"C,C,C\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n \t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n@@ -18803,9 +18803,9 @@\n })\n \n (define_expand \"<insn>v4siv4di2\"\n-  [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V4DI 0 \"register_operand\")\n \t(any_extend:V4DI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")))]\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\")))]\n   \"TARGET_AVX2\")\n \n (define_insn \"sse4_1_<code>v2siv2di2<mask_name>\""}, {"sha": "08a5bdd02a25a0055e042faa5eeacaafe6fbfa1e", "filename": "gcc/testsuite/g++.target/i386/pr100885.C", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be5efe9c12cb852c788f74f8555e6ab8d755479b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100885.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be5efe9c12cb852c788f74f8555e6ab8d755479b/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100885.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr100885.C?ref=be5efe9c12cb852c788f74f8555e6ab8d755479b", "patch": "@@ -0,0 +1,144 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mavx512vl -mno-avx512bw -O2 -Wno-int-to-pointer-cast -std=c++14\" } */\n+\n+#include<x86intrin.h>\n+typedef unsigned char byte;\n+enum ZoomLevel { ZOOM_LVL_COUNT };\n+struct Colour {\n+  unsigned data;\n+  Colour(int data) : data(data) {}\n+};\n+struct Palette {\n+  Colour palette[6];\n+};\n+enum BlitterMode { BM_COLOUR_REMAP };\n+class Blitter {\n+public:\n+  struct BlitterParams {\n+    int width;\n+    int height;\n+    int left;\n+    int top;\n+    void *dst;\n+  };\n+  virtual void Draw();\n+};\n+class Blitter_32bppAnim : public Blitter {\n+protected:\n+  unsigned short anim_buf;\n+  Palette palette;\n+  int LookupColourInPalette_index;\n+  Colour LookupColourInPalette() {\n+    return palette.palette[LookupColourInPalette_index];\n+  }\n+};\n+__m128i _mm_set_epi64(__m64 __q0) {\n+  __m128i __trans_tmp_5{(long)__q0};\n+  return __trans_tmp_5;\n+}\n+long _mm_storel_epi64___P, Draw_dsts;\n+__m128i _mm_packus_epi16___B, _mm_subs_epu16___B, _mm_hadd_epi16___Y,\n+    Draw_srcABCD, Draw___trans_tmp_10, Draw___trans_tmp_29, Draw___trans_tmp_7,\n+    AlphaBlendTwoPixels___trans_tmp_12, AlphaBlendTwoPixels___trans_tmp_11,\n+    AdjustBrightnessOfTwoPixels_from;\n+int _mm_srli_epi16___B;\n+class Blitter_32bppSSE_Base {\n+public:\n+  enum ReadMode { RM_WITH_MARGIN };\n+  enum BlockType { BT_NONE };\n+  struct SpriteData {\n+    int infos[ZOOM_LVL_COUNT];\n+    byte data;\n+  };\n+};\n+byte *Draw_remap;\n+short Draw_si_0;\n+class Blitter_32bppSSE4_Anim : Blitter_32bppAnim, Blitter_32bppSSE_Base {\n+  template <BlitterMode, ReadMode, BlockType, bool, bool>\n+  void Draw(const BlitterParams *, ZoomLevel);\n+  void Draw();\n+};\n+__m128i AdjustBrightnessOfTwoPixels() {\n+  __m128i __trans_tmp_28, __trans_tmp_27, __trans_tmp_26, __trans_tmp_24,\n+      __trans_tmp_23, __trans_tmp_22, __trans_tmp_21, __trans_tmp_20,\n+      __trans_tmp_19, __trans_tmp_18, __trans_tmp_17, __trans_tmp_16,\n+      __trans_tmp_14 = _mm_srli_epi16(AdjustBrightnessOfTwoPixels_from,\n+\t\t\t\t      _mm_srli_epi16___B),\n+      __trans_tmp_7;\n+  char __trans_tmp_8;\n+  __trans_tmp_7 = __m128i{__trans_tmp_8};\n+  {\n+    __m128i __trans_tmp_7;\n+    char __trans_tmp_8;\n+    __trans_tmp_7 = __m128i{__trans_tmp_8};\n+    __trans_tmp_26 = __trans_tmp_7;\n+  }\n+  __trans_tmp_16 = (__v8hi)__trans_tmp_14 > (__v8hi)__trans_tmp_26;\n+  __trans_tmp_17 = _mm_hadd_epi16(__trans_tmp_16, _mm_hadd_epi16___Y);\n+  __trans_tmp_18 = _mm_hadd_epi16(__trans_tmp_17, _mm_hadd_epi16___Y);\n+  __trans_tmp_19 = _mm_srli_epi16(__trans_tmp_18, _mm_srli_epi16___B);\n+  {\n+    __m128i __trans_tmp_7;\n+    char __trans_tmp_8;\n+    __trans_tmp_7 = __m128i{__trans_tmp_8};\n+    __trans_tmp_27 = __trans_tmp_7;\n+  }\n+  __trans_tmp_20 = _mm_shuffle_epi8(__trans_tmp_19,\n+\t\t\t\t    __trans_tmp_27);\n+  {\n+    __m128i __trans_tmp_7;\n+    char __trans_tmp_8;\n+    __trans_tmp_7 = __m128i{__trans_tmp_8};\n+    __trans_tmp_28 = __trans_tmp_7;\n+  }\n+  __trans_tmp_21 = _mm_subs_epu16(__trans_tmp_28, _mm_subs_epu16___B);\n+  __trans_tmp_22 = __m128i((__v8hu)__trans_tmp_21 * (__v8hu)__trans_tmp_20);\n+  __trans_tmp_23 = __m128i((__v8hu)__trans_tmp_22 + (__v8hu)__trans_tmp_7);\n+  __trans_tmp_24 = _mm_packus_epi16(__trans_tmp_23, _mm_packus_epi16___B);\n+  return __trans_tmp_24;\n+}\n+template <BlitterMode, Blitter_32bppSSE_Base::ReadMode,\n+          Blitter_32bppSSE_Base::BlockType, bool, bool>\n+void Blitter_32bppSSE4_Anim::Draw(const BlitterParams *bp, ZoomLevel zoom) {\n+  __m128i __trans_tmp_30;\n+  Colour *dst_line = (Colour *)bp->dst + bp->left;\n+  unsigned short *anim_line = &anim_buf + bp->top;\n+  int effective_width;\n+  SpriteData *sd = (SpriteData *)bp;\n+  Colour *src_rgba_line = (Colour *)sd->data;\n+  Draw___trans_tmp_29 = Draw___trans_tmp_7;\n+  for (int y = bp->height; y; y--) {\n+    Colour *dst = dst_line;\n+    unsigned short *anim = anim_line;\n+    anim += src_rgba_line[0].data;\n+    dst += src_rgba_line[0].data;\n+    int width_diff = Draw_si_0 - bp->width;\n+    effective_width = width_diff ?: effective_width;\n+    for (int x = effective_width; x; x--) {\n+      int mvX2 = *(unsigned *)sd->infos[zoom], m = byte(mvX2);\n+      __trans_tmp_30 = _mm_set_epi64(*(__m64_u *)dst);\n+      Colour c0 = Draw_dsts, srcm(0), cmap = LookupColourInPalette().data & 40;\n+      c0 = Draw_remap[m] ?: cmap;\n+      c0 = m ? c0 : srcm;\n+      Draw___trans_tmp_10 = __v2di{c0.data};\n+      if (mvX2)\n+        Draw_srcABCD = AdjustBrightnessOfTwoPixels();\n+      if (src_rgba_line)\n+        anim[1] = 0;\n+      __m128i tmp;\n+      __m128i dstAB = _mm_unpacklo_epi8(__trans_tmp_30, tmp);\n+      AlphaBlendTwoPixels___trans_tmp_12 =\n+          __m128i((__v8hu)Draw_srcABCD + (__v8hu)dstAB);\n+      AlphaBlendTwoPixels___trans_tmp_11 = _mm_shuffle_epi8 (AlphaBlendTwoPixels___trans_tmp_12,\n+\t\t\t\t\t\t\t     Draw___trans_tmp_7);\n+      *(__m64_u *)_mm_storel_epi64___P =\n+          (__m64)AlphaBlendTwoPixels___trans_tmp_11[0];\n+    }\n+  }\n+}\n+Blitter::BlitterParams Draw_bp;\n+ZoomLevel Draw_zoom;\n+void Blitter_32bppSSE4_Anim::Draw() {\n+  Draw<BM_COLOUR_REMAP, RM_WITH_MARGIN, BT_NONE, true, false>(&Draw_bp,\n+                                                              Draw_zoom);\n+}"}]}