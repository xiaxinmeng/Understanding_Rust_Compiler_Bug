{"sha": "5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxZmFiNTgxOTI1NmEwYTMwNzc5ZDhkMGMyZmZmYzNlZDJlZTljMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-12T11:38:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-12T11:38:47Z"}, "message": "re PR tree-optimization/52943 (likely wrong code bug caused by predictive commoning)\n\n2012-04-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52943\n\t* tree-chrec.h (chrec_is_positive): Remove.\n\t* tree-scalar-evolution.c (chrec_is_positive): Move ...\n\t* tree-data-ref.c (chrec_is_positive): ... here.  Make static.\n\tReturn false for a constant zero instead of negative.\n\t(analyze_siv_subscript_cst_affine): Handle zero difference\n\tin the initial condition explicitely.\n\n\t* gcc.dg/torture/pr52943.c: New testcase.\n\nFrom-SVN: r186374", "tree": {"sha": "309556804f1e89c251beb3a6c838fd3141487079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/309556804f1e89c251beb3a6c838fd3141487079"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5b332cdb894baa96b7dc83b69140b3106fd5153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b332cdb894baa96b7dc83b69140b3106fd5153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b332cdb894baa96b7dc83b69140b3106fd5153"}], "stats": {"total": 174, "additions": 114, "deletions": 60}, "files": [{"sha": "e6ece42cb58f8ba01419df023134039ecfc17f2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "patch": "@@ -1,3 +1,13 @@\n+2012-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52943\n+\t* tree-chrec.h (chrec_is_positive): Remove.\n+\t* tree-scalar-evolution.c (chrec_is_positive): Move ...\n+\t* tree-data-ref.c (chrec_is_positive): ... here.  Make static.\n+\tReturn false for a constant zero instead of negative.\n+\t(analyze_siv_subscript_cst_affine): Handle zero difference\n+\tin the initial condition explicitely.\n+\n 2012-04-12  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-parloops.c (parallelize_loops): Also consult the upper"}, {"sha": "8ebc0860da039b30e8d1682515c7dca415aa253c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "patch": "@@ -1,3 +1,8 @@\n+2012-04-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52943\n+\t* gcc.dg/torture/pr52943.c: New testcase.\n+\n 2012-04-12  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/50751"}, {"sha": "da35c9d184b8e6e40af7f47e72c434c883262077", "filename": "gcc/testsuite/gcc.dg/torture/pr52943.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52943.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52943.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52943.c?ref=5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+int a[] = { 0, 0, 0, 6 };\n+\n+int b;\n+int\n+main ()\n+{\n+  for (;;)\n+    {\n+      b = 3;\n+      for (; b; b -= 1)\n+\ta[b] = a[3] > 1;\n+      break;\n+    }\n+  if (a[1] != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "836780267524ce59bf3c5988fc905235d8338421", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "patch": "@@ -77,7 +77,6 @@ extern void for_each_scev_op (tree *, bool (*) (tree *, void *), void *);\n /* Observers.  */\n extern bool eq_evolutions_p (const_tree, const_tree);\n extern bool is_multivariate_chrec (const_tree);\n-extern bool chrec_is_positive (tree, bool *);\n extern bool chrec_contains_symbols (const_tree);\n extern bool chrec_contains_symbols_defined_in_loop (const_tree, unsigned);\n extern bool chrec_contains_undetermined (const_tree);"}, {"sha": "1381b535bd3228cc653ea75d37f7c8b4f25a8615", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "patch": "@@ -1718,6 +1718,76 @@ max_stmt_executions_tree (struct loop *loop)\n   return double_int_to_tree (unsigned_type_node, nit);\n }\n \n+/* Determine whether the CHREC is always positive/negative.  If the expression\n+   cannot be statically analyzed, return false, otherwise set the answer into\n+   VALUE.  */\n+\n+static bool\n+chrec_is_positive (tree chrec, bool *value)\n+{\n+  bool value0, value1, value2;\n+  tree end_value, nb_iter;\n+\n+  switch (TREE_CODE (chrec))\n+    {\n+    case POLYNOMIAL_CHREC:\n+      if (!chrec_is_positive (CHREC_LEFT (chrec), &value0)\n+\t  || !chrec_is_positive (CHREC_RIGHT (chrec), &value1))\n+\treturn false;\n+\n+      /* FIXME -- overflows.  */\n+      if (value0 == value1)\n+\t{\n+\t  *value = value0;\n+\t  return true;\n+\t}\n+\n+      /* Otherwise the chrec is under the form: \"{-197, +, 2}_1\",\n+\t and the proof consists in showing that the sign never\n+\t changes during the execution of the loop, from 0 to\n+\t loop->nb_iterations.  */\n+      if (!evolution_function_is_affine_p (chrec))\n+\treturn false;\n+\n+      nb_iter = number_of_latch_executions (get_chrec_loop (chrec));\n+      if (chrec_contains_undetermined (nb_iter))\n+\treturn false;\n+\n+#if 0\n+      /* TODO -- If the test is after the exit, we may decrease the number of\n+\t iterations by one.  */\n+      if (after_exit)\n+\tnb_iter = chrec_fold_minus (type, nb_iter, build_int_cst (type, 1));\n+#endif\n+\n+      end_value = chrec_apply (CHREC_VARIABLE (chrec), chrec, nb_iter);\n+\n+      if (!chrec_is_positive (end_value, &value2))\n+\treturn false;\n+\n+      *value = value0;\n+      return value0 == value1;\n+\n+    case INTEGER_CST:\n+      switch (tree_int_cst_sgn (chrec))\n+\t{\n+\tcase -1:\n+\t  *value = false;\n+\t  break;\n+\tcase 1:\n+\t  *value = true;\n+\t  break;\n+\tdefault:\n+\t  return false;\n+\t}\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n+\n /* Analyze a SIV (Single Index Variable) subscript where CHREC_A is a\n    constant, and CHREC_B is an affine function.  *OVERLAPS_A and\n    *OVERLAPS_B are initialized to the functions that describe the\n@@ -1741,6 +1811,15 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n   chrec_b = chrec_convert (type, chrec_b, NULL);\n   difference = chrec_fold_minus (type, initial_condition (chrec_b), chrec_a);\n \n+  /* Special case overlap in the first iteration.  */\n+  if (integer_zerop (difference))\n+    {\n+      *overlaps_a = conflict_fn (1, affine_fn_cst (integer_zero_node));\n+      *overlaps_b = conflict_fn (1, affine_fn_cst (integer_zero_node));\n+      *last_conflicts = integer_one_node;\n+      return;\n+    }\n+\n   if (!chrec_is_positive (initial_condition (difference), &value0))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "21d1fd0a4a153908eb1941cd2cfc8cad526d289f", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=5f1fab5819256a0a30779d8d0c2fffc3ed2ee9c2", "patch": "@@ -501,65 +501,6 @@ compute_overall_effect_of_inner_loop (struct loop *loop, tree evolution_fn)\n     return chrec_dont_know;\n }\n \n-/* Determine whether the CHREC is always positive/negative.  If the expression\n-   cannot be statically analyzed, return false, otherwise set the answer into\n-   VALUE.  */\n-\n-bool\n-chrec_is_positive (tree chrec, bool *value)\n-{\n-  bool value0, value1, value2;\n-  tree end_value, nb_iter;\n-\n-  switch (TREE_CODE (chrec))\n-    {\n-    case POLYNOMIAL_CHREC:\n-      if (!chrec_is_positive (CHREC_LEFT (chrec), &value0)\n-\t  || !chrec_is_positive (CHREC_RIGHT (chrec), &value1))\n-\treturn false;\n-\n-      /* FIXME -- overflows.  */\n-      if (value0 == value1)\n-\t{\n-\t  *value = value0;\n-\t  return true;\n-\t}\n-\n-      /* Otherwise the chrec is under the form: \"{-197, +, 2}_1\",\n-\t and the proof consists in showing that the sign never\n-\t changes during the execution of the loop, from 0 to\n-\t loop->nb_iterations.  */\n-      if (!evolution_function_is_affine_p (chrec))\n-\treturn false;\n-\n-      nb_iter = number_of_latch_executions (get_chrec_loop (chrec));\n-      if (chrec_contains_undetermined (nb_iter))\n-\treturn false;\n-\n-#if 0\n-      /* TODO -- If the test is after the exit, we may decrease the number of\n-\t iterations by one.  */\n-      if (after_exit)\n-\tnb_iter = chrec_fold_minus (type, nb_iter, build_int_cst (type, 1));\n-#endif\n-\n-      end_value = chrec_apply (CHREC_VARIABLE (chrec), chrec, nb_iter);\n-\n-      if (!chrec_is_positive (end_value, &value2))\n-\treturn false;\n-\n-      *value = value0;\n-      return value0 == value1;\n-\n-    case INTEGER_CST:\n-      *value = (tree_int_cst_sgn (chrec) == 1);\n-      return true;\n-\n-    default:\n-      return false;\n-    }\n-}\n-\n /* Associate CHREC to SCALAR.  */\n \n static void"}]}