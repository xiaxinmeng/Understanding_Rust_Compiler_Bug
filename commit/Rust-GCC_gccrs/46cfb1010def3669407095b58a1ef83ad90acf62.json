{"sha": "46cfb1010def3669407095b58a1ef83ad90acf62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjZmIxMDEwZGVmMzY2OTQwNzA5NWI1OGExZWY4M2FkOTBhY2Y2Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-02-28T13:30:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-28T13:30:04Z"}, "message": "c-decl.c (finish_function): Only warn about missing return statement with -Wreturn-type.\n\n        * c-decl.c (finish_function): Only warn about missing return\n        statement with -Wreturn-type.\n        * cp/decl.c (finish_function): Only warn about missing return\n        statement with -Wreturn-type.\n\nFrom-SVN: r50132", "tree": {"sha": "ad97c2c9c6937f818499e1e71ba0ae8c21869572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad97c2c9c6937f818499e1e71ba0ae8c21869572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46cfb1010def3669407095b58a1ef83ad90acf62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cfb1010def3669407095b58a1ef83ad90acf62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cfb1010def3669407095b58a1ef83ad90acf62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cfb1010def3669407095b58a1ef83ad90acf62/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "022dcc46051ffd0114ac3382cc7e50928f17d995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/022dcc46051ffd0114ac3382cc7e50928f17d995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/022dcc46051ffd0114ac3382cc7e50928f17d995"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "4aa251496f41d3c117bbd17c18c752c9785c5773", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46cfb1010def3669407095b58a1ef83ad90acf62", "patch": "@@ -1,3 +1,8 @@\n+2002-02-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-decl.c (finish_function): Only warn about missing return\n+\tstatement with -Wreturn-type.\n+\n Don Feb 28 11:24:30 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgrtl.c (purge_dead_edges): Fix handling of EH edges."}, {"sha": "f465875a909cf2554a1b1798be9082ae94f2bf0f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=46cfb1010def3669407095b58a1ef83ad90acf62", "patch": "@@ -6809,17 +6809,18 @@ finish_function (nested)\n   finish_stmt_tree (&DECL_SAVED_TREE (fndecl));\n \n   /* Complain if there's just no return statement.  */\n-  if (TREE_CODE (TREE_TYPE (TREE_TYPE (fndecl))) != VOID_TYPE\n+  if (warn_return_type\n+      && TREE_CODE (TREE_TYPE (TREE_TYPE (fndecl))) != VOID_TYPE\n       && !current_function_returns_value && !current_function_returns_null\n       /* Don't complain if we abort.  */\n       && !current_function_returns_abnormally\n       /* Don't warn for main().  */\n       && !MAIN_NAME_P (DECL_NAME (fndecl))\n       /* Or if they didn't actually specify a return type.  */\n       && !C_FUNCTION_IMPLICIT_INT (fndecl)\n-      /* If we have -Wreturn-type, let flow complain.  Unless we're an\n+      /* Normally, with -Wreturn-type, flow will complain.  Unless we're an\n \t inline function, as we might never be compiled separately.  */\n-      && (!warn_return_type || DECL_INLINE (fndecl)))\n+      && DECL_INLINE (fndecl))\n     warning (\"no return statement in function returning non-void\");\n \n   /* Clear out memory we no longer need.  */"}, {"sha": "3ca4e5b3c0a0617903c81d8feeb106ef7ac51264", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46cfb1010def3669407095b58a1ef83ad90acf62", "patch": "@@ -1,3 +1,8 @@\n+2002-02-28  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (finish_function): Only warn about missing return\n+\tstatement with -Wreturn-type.\n+\n 2002-02-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* class.c (build_clone): Update."}, {"sha": "d4ea80df9794f9e5432d9c70ffbcb013da276ccf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=46cfb1010def3669407095b58a1ef83ad90acf62", "patch": "@@ -14224,15 +14224,16 @@ finish_function (flags)\n     DECL_UNINLINABLE (fndecl) = 1;\n \n   /* Complain if there's just no return statement.  */\n-  if (!processing_template_decl\n+  if (warn_return_type\n+      && !processing_template_decl\n       && TREE_CODE (TREE_TYPE (fntype)) != VOID_TYPE\n       && !current_function_returns_value && !current_function_returns_null\n-      && !DECL_NAME (DECL_RESULT (fndecl))\n       /* Don't complain if we abort or throw.  */\n       && !current_function_returns_abnormally\n-      /* If we have -Wreturn-type, let flow complain.  Unless we're an\n+      && !DECL_NAME (DECL_RESULT (fndecl))\n+      /* Normally, with -Wreturn-type, flow will complain.  Unless we're an\n \t inline function, as we might never be compiled separately.  */\n-      && (!warn_return_type || DECL_INLINE (fndecl)))\n+      && DECL_INLINE (fndecl))\n     warning (\"no return statement in function returning non-void\");\n     \n   /* Clear out memory we no longer need.  */"}, {"sha": "2f471fb866f99b5e67ccb2cdc277bde091aefe58", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash25.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cfb1010def3669407095b58a1ef83ad90acf62/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash25.C?ref=46cfb1010def3669407095b58a1ef83ad90acf62", "patch": "@@ -9,7 +9,7 @@ public:\n \n X::x()\n {\t\t\t\t// ERROR - \n-} // WARNING - no return\n+}\n \n X::~x()\n {\t\t\t\t// ERROR - "}]}