{"sha": "a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlMWEwYmY5ZWNkM2UzYzJjYjk4MDcyODhiMjY0MWI5NmFjY2Y4Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-11-26T00:21:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-11-26T00:21:27Z"}, "message": "rtlanal.c (regs_set_between_p): New function.\n\n        * rtlanal.c (regs_set_between_p): New function.\n        * rtl.h (regs_set_between_p): Prototype it.\n        * jump.c (jump_optimize): Use it instead of modified_between_p\n        in the Sep 2 change.\n\nFrom-SVN: r23888", "tree": {"sha": "a8e4b386012b812294eceb6f1f915f256cbe6217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e4b386012b812294eceb6f1f915f256cbe6217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/comments", "author": null, "committer": null, "parents": [{"sha": "8357595779418585b4390bb66be518b32374965a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8357595779418585b4390bb66be518b32374965a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8357595779418585b4390bb66be518b32374965a"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "e1093ca49efbf18e16b1a7f5765ebcbfbbda9f2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "patch": "@@ -1,3 +1,10 @@\n+Thu Nov 26 00:19:19 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtlanal.c (regs_set_between_p): New function.\n+\t* rtl.h (regs_set_between_p): Prototype it.\n+\t* jump.c (jump_optimize): Use it instead of modified_between_p\n+\tin the Sep 2 change.\n+\n Wed Nov 25 23:32:02 1998  Ian Dall  <Ian.Dall@dsto.defence.gov.au>\n \t\t\t  Matthias Pfaller  <leo@dachau.marco.de>\n "}, {"sha": "784e63dab710ab4781d7e5179764f2d014b44b88", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "patch": "@@ -521,7 +521,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t      || ! modified_between_p (SET_SRC (temp4), p, temp2))\n \t\t  /* Verify that registers used by the jump are not clobbered\n \t\t     by the instruction being moved.  */\n-\t\t  && ! modified_between_p (PATTERN (temp), temp2,\n+\t\t  && ! regs_set_between_p (PATTERN (temp), temp2,\n \t\t\t\t\t   NEXT_INSN (temp2)))\n \t\t{\n \t\t  emit_insn_after_with_line_notes (PATTERN (temp2), p, temp2);\n@@ -622,7 +622,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t  && ! modified_between_p (SET_SRC (temp4), insert_after, temp)\n \t\t  /* Verify that registers used by the jump are not clobbered\n \t\t     by the instruction being moved.  */\n-\t\t  && ! modified_between_p (PATTERN (temp), temp3,\n+\t\t  && ! regs_set_between_p (PATTERN (temp), temp3,\n \t\t\t\t\t   NEXT_INSN (temp3))\n \t\t  && invert_jump (temp, JUMP_LABEL (insn)))\n \t\t{"}, {"sha": "1bff7d3d916c2934827f050bc17c6c24c24faba4", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "patch": "@@ -982,6 +982,7 @@ extern int reg_referenced_p\t\tPROTO((rtx, rtx));\n extern int reg_used_between_p\t\tPROTO((rtx, rtx, rtx));\n extern int reg_referenced_between_p\tPROTO((rtx, rtx, rtx));\n extern int reg_set_between_p\t\tPROTO((rtx, rtx, rtx));\n+extern int regs_set_between_p\t\tPROTO((rtx, rtx, rtx));\n extern int modified_between_p\t\tPROTO((rtx, rtx, rtx));\n extern int no_labels_between_p\t\tPROTO((rtx, rtx));\n extern int modified_in_p\t\tPROTO((rtx, rtx));"}, {"sha": "0abe2447165412c0f118b8e25a13baea1be38c75", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=a2e1a0bf9ecd3e3c2cb9807288b2641b96accf8b", "patch": "@@ -499,6 +499,52 @@ reg_set_p (reg, insn)\n   return reg_set_flag;\n }\n \n+/* Similar to reg_set_between_p, but check all registers in X.  Return 0\n+   only if none of them are modified between START and END.  Do not\n+   consider non-registers one way or the other.  */\n+\n+int\n+regs_set_between_p (x, start, end)\n+     rtx x;\n+     rtx start, end;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  char *fmt;\n+  int i, j;\n+\n+  switch (code)\n+    {\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+    case CONST:\n+    case SYMBOL_REF:\n+    case LABEL_REF:\n+    case PC:\n+    case CC0:\n+      return 0;\n+\n+    case REG:\n+      return reg_set_between_p (x, start, end);\n+      \n+    default:\n+      break;\n+    }\n+\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (fmt[i] == 'e' && regs_set_between_p (XEXP (x, i), start, end))\n+\treturn 1;\n+\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t  if (regs_set_between_p (XVECEXP (x, i, j), start, end))\n+\t    return 1;\n+    }\n+\n+  return 0;\n+}\n+\n /* Similar to reg_set_between_p, but check all registers in X.  Return 0\n    only if none of them are modified between START and END.  Return 1 if\n    X contains a MEM; this routine does not perform any memory aliasing.  */"}]}