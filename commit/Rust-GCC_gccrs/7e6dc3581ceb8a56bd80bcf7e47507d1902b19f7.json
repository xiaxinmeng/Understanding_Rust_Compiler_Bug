{"sha": "7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U2ZGMzNTgxY2ViOGE1NmJkODBiY2Y3ZTQ3NTA3ZDE5MDJiMTlmNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2003-07-08T18:01:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2003-07-08T18:01:51Z"}, "message": "re PR target/11420 ([x86_64] gcc generates invalid asm code when \"-O -fPIC\" is used (suffix or operands invalid for `movabs'))\n\n\tPR c/11420\n\t* config/i386/i386.c (ix86_check_movabs): New function.\n\t* config/i386/i386-protos.h (ix86_check_movabs): New prototype.\n\t* config/i386/i386.md (movabs[shqd]i_1_rex64): Kill broken alternative.\n\t(movabs[shqd]i_[12]_rex64): Add ix86_check_movabs check to conditions.\n\n\t* gcc.dg/20030708-1.c: New test.\n\nFrom-SVN: r69092", "tree": {"sha": "b29b20d695a5a68cb53ec2ea5b1d3be86bb4a856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b29b20d695a5a68cb53ec2ea5b1d3be86bb4a856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "318b7749addbaf5c7da1b48c0103fc52114276bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/318b7749addbaf5c7da1b48c0103fc52114276bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/318b7749addbaf5c7da1b48c0103fc52114276bc"}], "stats": {"total": 117, "additions": 81, "deletions": 36}, "files": [{"sha": "6e83cd094cc9f8ae2e181998da3c1d69c93ba2a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "patch": "@@ -1,3 +1,11 @@\n+2003-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/11420\n+\t* config/i386/i386.c (ix86_check_movabs): New function.\n+\t* config/i386/i386-protos.h (ix86_check_movabs): New prototype.\n+\t* config/i386/i386.md (movabs[shqd]i_1_rex64): Kill broken alternative.\n+\t(movabs[shqd]i_[12]_rex64): Add ix86_check_movabs check to conditions.\n+\n 2003-07-08  Chris Demetriou  <cgd@broadcom.com>\n \n \t* Makefile.in (install-po): Cope with empty CATALOGS."}, {"sha": "c3fa99fdfb5ab3c24564c0388544196956e10322", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "patch": "@@ -149,6 +149,7 @@ extern void ix86_split_ashldi (rtx *, rtx);\n extern void ix86_split_ashrdi (rtx *, rtx);\n extern void ix86_split_lshrdi (rtx *, rtx);\n extern rtx ix86_find_base_term (rtx);\n+extern int ix86_check_movabs (rtx, int);\n \n extern rtx assign_386_stack_local (enum machine_mode, int);\n extern int ix86_attr_length_immediate_default (rtx, int);"}, {"sha": "2e13624af1a7438d0681b043642ee25e8bb0da5d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "patch": "@@ -3288,6 +3288,27 @@ x86_64_movabs_operand (rtx op, enum machine_mode mode)\n   return 0;\n }\n \n+/* Return nonzero if OPNUM's MEM should be matched\n+   in movabs* patterns.  */\n+\n+int\n+ix86_check_movabs (rtx insn, int opnum)\n+{\n+  rtx set, mem;\n+\n+  set = PATTERN (insn);\n+  if (GET_CODE (set) == PARALLEL)\n+    set = XVECEXP (set, 0, 0);\n+  if (GET_CODE (set) != SET)\n+    abort ();\n+  mem = XEXP (set, opnum);\n+  while (GET_CODE (mem) == SUBREG)\n+    mem = SUBREG_REG (mem);\n+  if (GET_CODE (mem) != MEM)\n+    abort ();\n+  return (volatile_ok || !MEM_VOLATILE_P (mem));\n+}\n+\n /* Return nonzero if OP is nonmemory operand representable on x86_64.  */\n \n int"}, {"sha": "91e8aefceba78e0bb3fed5b352cf230f2b48fd29", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "patch": "@@ -1262,24 +1262,23 @@\n ;; We fake an second form of instruction to force reload to load address\n ;; into register when rax is not available\n (define_insn \"*movabssi_1_rex64\"\n-  [(set (mem:SI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r,r\"))\n-\t(match_operand:SI 1 \"nonmemory_operand\" \"a,er,i\"))]\n-  \"TARGET_64BIT\"\n+  [(set (mem:SI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r\"))\n+\t(match_operand:SI 1 \"nonmemory_operand\" \"a,er\"))]\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 0)\"\n   \"@\n    movabs{l}\\t{%1, %P0|%P0, %1}\n-   mov{l}\\t{%1, %a0|%a0, %1}\n-   movabs{l}\\t{%1, %a0|%a0, %1}\"\n+   mov{l}\\t{%1, %a0|%a0, %1}\"\n   [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0,*,*\")\n-   (set_attr \"length_address\" \"8,0,0\")\n-   (set_attr \"length_immediate\" \"0,*,*\")\n+   (set_attr \"modrm\" \"0,*\")\n+   (set_attr \"length_address\" \"8,0\")\n+   (set_attr \"length_immediate\" \"0,*\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*movabssi_2_rex64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=a,r\")\n         (mem:SI (match_operand:DI 1 \"x86_64_movabs_operand\" \"i,r\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 1)\"\n   \"@\n    movabs{l}\\t{%P1, %0|%0, %P1}\n    mov{l}\\t{%a1, %0|%0, %a1}\"\n@@ -1382,24 +1381,23 @@\n ;; We fake an second form of instruction to force reload to load address\n ;; into register when rax is not available\n (define_insn \"*movabshi_1_rex64\"\n-  [(set (mem:HI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r,r\"))\n-\t(match_operand:HI 1 \"nonmemory_operand\" \"a,er,i\"))]\n-  \"TARGET_64BIT\"\n+  [(set (mem:HI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r\"))\n+\t(match_operand:HI 1 \"nonmemory_operand\" \"a,er\"))]\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 0)\"\n   \"@\n    movabs{w}\\t{%1, %P0|%P0, %1}\n-   mov{w}\\t{%1, %a0|%a0, %1}\n-   movabs{w}\\t{%1, %a0|%a0, %1}\"\n+   mov{w}\\t{%1, %a0|%a0, %1}\"\n   [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0,*,*\")\n-   (set_attr \"length_address\" \"8,0,0\")\n-   (set_attr \"length_immediate\" \"0,*,*\")\n+   (set_attr \"modrm\" \"0,*\")\n+   (set_attr \"length_address\" \"8,0\")\n+   (set_attr \"length_immediate\" \"0,*\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*movabshi_2_rex64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=a,r\")\n         (mem:HI (match_operand:DI 1 \"x86_64_movabs_operand\" \"i,r\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 1)\"\n   \"@\n    movabs{w}\\t{%P1, %0|%0, %P1}\n    mov{w}\\t{%a1, %0|%0, %a1}\"\n@@ -1701,24 +1699,23 @@\n ;; We fake an second form of instruction to force reload to load address\n ;; into register when rax is not available\n (define_insn \"*movabsqi_1_rex64\"\n-  [(set (mem:QI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r,r\"))\n-\t(match_operand:QI 1 \"nonmemory_operand\" \"a,er,i\"))]\n-  \"TARGET_64BIT\"\n+  [(set (mem:QI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r\"))\n+\t(match_operand:QI 1 \"nonmemory_operand\" \"a,er\"))]\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 0)\"\n   \"@\n    movabs{b}\\t{%1, %P0|%P0, %1}\n-   mov{b}\\t{%1, %a0|%a0, %1}\n-   movabs{b}\\t{%1, %a0|%a0, %1}\"\n+   mov{b}\\t{%1, %a0|%a0, %1}\"\n   [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0,*,*\")\n-   (set_attr \"length_address\" \"8,0,0\")\n-   (set_attr \"length_immediate\" \"0,*,*\")\n+   (set_attr \"modrm\" \"0,*\")\n+   (set_attr \"length_address\" \"8,0\")\n+   (set_attr \"length_immediate\" \"0,*\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*movabsqi_2_rex64\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=a,r\")\n         (mem:QI (match_operand:DI 1 \"x86_64_movabs_operand\" \"i,r\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 1)\"\n   \"@\n    movabs{b}\\t{%P1, %0|%0, %P1}\n    mov{b}\\t{%a1, %0|%0, %a1}\"\n@@ -2080,24 +2077,23 @@\n ;; We fake an second form of instruction to force reload to load address\n ;; into register when rax is not available\n (define_insn \"*movabsdi_1_rex64\"\n-  [(set (mem:DI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r,r\"))\n-\t(match_operand:DI 1 \"nonmemory_operand\" \"a,er,i\"))]\n-  \"TARGET_64BIT\"\n+  [(set (mem:DI (match_operand:DI 0 \"x86_64_movabs_operand\" \"i,r\"))\n+\t(match_operand:DI 1 \"nonmemory_operand\" \"a,er\"))]\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 0)\"\n   \"@\n    movabs{q}\\t{%1, %P0|%P0, %1}\n-   mov{q}\\t{%1, %a0|%a0, %1}\n-   movabs{q}\\t{%1, %a0|%a0, %1}\"\n+   mov{q}\\t{%1, %a0|%a0, %1}\"\n   [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0,*,*\")\n-   (set_attr \"length_address\" \"8,0,0\")\n-   (set_attr \"length_immediate\" \"0,*,*\")\n+   (set_attr \"modrm\" \"0,*\")\n+   (set_attr \"length_address\" \"8,0\")\n+   (set_attr \"length_immediate\" \"0,*\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*movabsdi_2_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=a,r\")\n         (mem:DI (match_operand:DI 1 \"x86_64_movabs_operand\" \"i,r\")))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && ix86_check_movabs (insn, 1)\"\n   \"@\n    movabs{q}\\t{%P1, %0|%0, %P1}\n    mov{q}\\t{%a1, %0|%0, %a1}\""}, {"sha": "5884c7fd56e146e3689fa9e965d1f8d573d957dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "patch": "@@ -1,3 +1,8 @@\n+2003-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/11420\n+\t* gcc.dg/20030708-1.c: New test.\n+\n 2003-07-08  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.dg/compat/sdata-section.h: New file."}, {"sha": "b9786418ed91c5afe7a45651bbcafb6c00daa470", "filename": "gcc/testsuite/gcc.dg/20030708-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Ftestsuite%2Fgcc.dg%2F20030708-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7/gcc%2Ftestsuite%2Fgcc.dg%2F20030708-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030708-1.c?ref=7e6dc3581ceb8a56bd80bcf7e47507d1902b19f7", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/11420 */\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+void (* volatile fn) (void);\n+static void foo (void)\n+{\n+}\n+\n+int main (void)\n+{\n+  fn = foo;\n+  return 0;\n+}"}]}