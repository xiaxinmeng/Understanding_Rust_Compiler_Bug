{"sha": "20769d5eb6854f1dec44744721ec17c52609254d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3NjlkNWViNjg1NGYxZGVjNDQ3NDQ3MjFlYzE3YzUyNjA5MjU0ZA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-08-02T16:20:36Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-08-02T16:20:36Z"}, "message": "Add -ftree-loop-distribute-patterns enabled at -O3.\n\n2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* common.opt (ftree-loop-distribute-patterns): New.\n\t* invoke.texi (-ftree-loop-distribute-patterns): Documented.\n\t* opts.c (decode_options): Enable flag_tree_loop_distribute_patterns\n\tat -O3.\n\t* tree-data-ref.c (stores_zero_from_loop): New.\n\t* tree-data-ref.h (stores_zero_from_loop): Declared.\n\t* tree-loop-distribution.c (tree_loop_distribution): Call\n\tstores_zero_from_loop.\n\t(tree_loop_distribution): Check flag_tree_loop_distribute_patterns.\n\nFrom-SVN: r162822", "tree": {"sha": "167b7b8803b20ddb17ea9f205ec3cd9c4746e278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/167b7b8803b20ddb17ea9f205ec3cd9c4746e278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20769d5eb6854f1dec44744721ec17c52609254d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20769d5eb6854f1dec44744721ec17c52609254d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20769d5eb6854f1dec44744721ec17c52609254d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20769d5eb6854f1dec44744721ec17c52609254d/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef973f3f4b72e19f6e1354f4cbd9f387bbb7e510"}], "stats": {"total": 114, "additions": 100, "deletions": 14}, "files": [{"sha": "ad2b271a5bb43c3c9786fef9a7f22eac0a2a4c46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -1,3 +1,15 @@\n+2010-08-02  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* common.opt (ftree-loop-distribute-patterns): New.\n+\t* invoke.texi (-ftree-loop-distribute-patterns): Documented.\n+\t* opts.c (decode_options): Enable flag_tree_loop_distribute_patterns\n+\tat -O3.\n+\t* tree-data-ref.c (stores_zero_from_loop): New.\n+\t* tree-data-ref.h (stores_zero_from_loop): Declared.\n+\t* tree-loop-distribution.c (tree_loop_distribution): Call\n+\tstores_zero_from_loop.\n+\t(tree_loop_distribution): Check flag_tree_loop_distribute_patterns.\n+\n 2010-08-02  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* postreload.c (reload_cse_simplify_operands): Take attribute enabled"}, {"sha": "0fe09a821096311f6fd79846b77df2bfcc1812c7", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -1333,6 +1333,10 @@ ftree-loop-distribution\n Common Report Var(flag_tree_loop_distribution) Optimization\n Enable loop distribution on trees\n \n+ftree-loop-distribute-patterns\n+Common Report Var(flag_tree_loop_distribute_patterns) Optimization\n+Enable loop distribution for patterns transformed into a library call\n+\n ftree-loop-im\n Common Report Var(flag_tree_loop_im) Init(1) Optimization\n Enable loop invariant motion on trees"}, {"sha": "b54407fe30d49104a07726c3df4713b938c86a1a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -384,7 +384,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-copy-prop @gol\n -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse @gol\n -ftree-forwprop -ftree-fre -ftree-loop-if-convert -ftree-loop-im @gol\n--ftree-phiprop -ftree-loop-distribution @gol\n+-ftree-phiprop -ftree-loop-distribution -ftree-loop-distribute-patterns @gol\n -ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize @gol\n -ftree-parallelize-loops=@var{n} -ftree-pre -ftree-pta -ftree-reassoc @gol\n -ftree-sink -ftree-sra -ftree-switch-conversion @gol\n@@ -6925,6 +6925,29 @@ DO I = 1, N\n ENDDO\n @end smallexample\n \n+@item -ftree-loop-distribute-patterns\n+Perform loop distribution of patterns that can be code generated with\n+calls to a library.  This flag is enabled by default at @option{-O3}.\n+\n+This pass distributes the initialization loops and generates a call to\n+memset zero.  For example, the loop\n+@smallexample\n+DO I = 1, N\n+  A(I) = 0\n+  B(I) = A(I) + I\n+ENDDO\n+@end smallexample\n+is transformed to\n+@smallexample\n+DO I = 1, N\n+   A(I) = 0\n+ENDDO\n+DO I = 1, N\n+   B(I) = A(I) + I\n+ENDDO\n+@end smallexample\n+and the initialization loop is transformed into a call to memset zero.\n+\n @item -ftree-loop-im\n @opindex ftree-loop-im\n Perform loop invariant motion on trees.  This pass moves only invariants that"}, {"sha": "caf4e166b91b2d92066493f303d30eea4e7e8d27", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -819,6 +819,7 @@ decode_options (unsigned int argc, const char **argv,\n \n   /* -O3 optimizations.  */\n   opt3 = (optimize >= 3);\n+  flag_tree_loop_distribute_patterns = opt3;\n   flag_predictive_commoning = opt3;\n   flag_inline_functions = opt3;\n   flag_unswitch_loops = opt3;"}, {"sha": "265635039a65bcdf5af2f1469fb162c8dc7d9d77", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -5038,6 +5038,32 @@ stores_from_loop (struct loop *loop, VEC (gimple, heap) **stmts)\n   free (bbs);\n }\n \n+/* Initialize STMTS with all the statements of LOOP that contain a\n+   store to memory of the form \"A[i] = 0\".  */\n+\n+void\n+stores_zero_from_loop (struct loop *loop, VEC (gimple, heap) **stmts)\n+{\n+  unsigned int i;\n+  basic_block bb;\n+  gimple_stmt_iterator si;\n+  gimple stmt;\n+  tree op;\n+  basic_block *bbs = get_loop_body_in_dom_order (loop);\n+\n+  for (i = 0; i < loop->num_nodes; i++)\n+    for (bb = bbs[i], si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n+      if ((stmt = gsi_stmt (si))\n+\t  && gimple_vdef (stmt)\n+\t  && is_gimple_assign (stmt)\n+\t  && gimple_assign_rhs_code (stmt) == INTEGER_CST\n+\t  && (op = gimple_assign_rhs1 (stmt))\n+\t  && (integer_zerop (op) || real_zerop (op)))\n+\tVEC_safe_push (gimple, heap, *stmts, gsi_stmt (si));\n+\n+  free (bbs);\n+}\n+\n /* For a data reference REF, return the declaration of its base\n    address or NULL_TREE if the base is not determined.  */\n "}, {"sha": "9e18e266dd84da787a2a404ca1171ab994e0cae8", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -564,6 +564,7 @@ index_in_loop_nest (int var, VEC (loop_p, heap) *loop_nest)\n }\n \n void stores_from_loop (struct loop *, VEC (gimple, heap) **);\n+void stores_zero_from_loop (struct loop *, VEC (gimple, heap) **);\n void remove_similar_memory_refs (VEC (gimple, heap) **);\n bool rdg_defs_used_in_other_loops_p (struct graph *, int);\n bool have_similar_memory_accesses (gimple, gimple);"}, {"sha": "59054063cfb5d898be888d7103a90aabdfce3be8", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20769d5eb6854f1dec44744721ec17c52609254d/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=20769d5eb6854f1dec44744721ec17c52609254d", "patch": "@@ -1184,18 +1184,36 @@ tree_loop_distribution (void)\n     {\n       VEC (gimple, heap) *work_list = VEC_alloc (gimple, heap, 3);\n \n-      /* With the following working list, we're asking distribute_loop\n-\t to separate the stores of the loop: when dependences allow,\n-\t it will end on having one store per loop.  */\n-      stores_from_loop (loop, &work_list);\n-\n-      /* A simple heuristic for cache locality is to not split stores\n-\t to the same array.  Without this call, an unrolled loop would\n-\t be split into as many loops as unroll factor, each loop\n-\t storing in the same array.  */\n-      remove_similar_memory_refs (&work_list);\n-\n-      nb_generated_loops = distribute_loop (loop, work_list);\n+      /* If both flag_tree_loop_distribute_patterns and\n+\t flag_tree_loop_distribution are set, then only\n+\t distribute_patterns is executed.  */\n+      if (flag_tree_loop_distribute_patterns)\n+\t{\n+\t  /* With the following working list, we're asking\n+\t     distribute_loop to separate from the rest of the loop the\n+\t     stores of the form \"A[i] = 0\".  */\n+\t  stores_zero_from_loop (loop, &work_list);\n+\n+\t  /* Do nothing if there are no patterns to be distributed.  */\n+\t  if (VEC_length (gimple, work_list) > 0)\n+\t    nb_generated_loops = distribute_loop (loop, work_list);\n+\t}\n+      else if (flag_tree_loop_distribution)\n+\t{\n+\t  /* With the following working list, we're asking\n+\t     distribute_loop to separate the stores of the loop: when\n+\t     dependences allow, it will end on having one store per\n+\t     loop.  */\n+\t  stores_from_loop (loop, &work_list);\n+\n+\t  /* A simple heuristic for cache locality is to not split\n+\t     stores to the same array.  Without this call, an unrolled\n+\t     loop would be split into as many loops as unroll factor,\n+\t     each loop storing in the same array.  */\n+\t  remove_similar_memory_refs (&work_list);\n+\n+\t  nb_generated_loops = distribute_loop (loop, work_list);\n+\t}\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n@@ -1217,7 +1235,8 @@ tree_loop_distribution (void)\n static bool\n gate_tree_loop_distribution (void)\n {\n-  return flag_tree_loop_distribution != 0;\n+  return flag_tree_loop_distribution\n+    || flag_tree_loop_distribute_patterns;\n }\n \n struct gimple_opt_pass pass_loop_distribution ="}]}