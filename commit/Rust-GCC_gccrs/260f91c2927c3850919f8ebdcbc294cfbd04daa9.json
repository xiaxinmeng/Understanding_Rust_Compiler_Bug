{"sha": "260f91c2927c3850919f8ebdcbc294cfbd04daa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwZjkxYzI5MjdjMzg1MDkxOWY4ZWJkY2JjMjk0Y2ZiZDA0ZGFhOQ==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-08-14T17:41:52Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-08-14T17:41:52Z"}, "message": "Insert memory clobbers before the code that pops variable arrays.\n\nThis prevents the scheduler from moving references to the arrays\nbelow the stack pop.\n\nFrom-SVN: r56328", "tree": {"sha": "b89a47d1833a43c5e6808e162a723c626e81adbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b89a47d1833a43c5e6808e162a723c626e81adbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/260f91c2927c3850919f8ebdcbc294cfbd04daa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260f91c2927c3850919f8ebdcbc294cfbd04daa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260f91c2927c3850919f8ebdcbc294cfbd04daa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260f91c2927c3850919f8ebdcbc294cfbd04daa9/comments", "author": null, "committer": null, "parents": [{"sha": "615d009f6d673f288348c4394d36da2fb0dbbcc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/615d009f6d673f288348c4394d36da2fb0dbbcc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/615d009f6d673f288348c4394d36da2fb0dbbcc8"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "bb6158e06bda7782a58d0fcdb5a78d6b29d2cd3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=260f91c2927c3850919f8ebdcbc294cfbd04daa9", "patch": "@@ -1,3 +1,11 @@\n+2002-08-14  Dale Johannesen  <dalej@apple.com>\n+\n+        * explow.c (emit_stack_restore):  Emit memory clobbers\n+\tpreceding the stack pop, to prevent the scheduler from\n+\tmoving refs to variable arrays below this pop.\n+\t* reload1.c (reload):  Preserve these clobbers for sched2.\n+\t* doc/rtl.texi:  Document clobber (mem:BLK (scratch)).\n+\n 2002-08-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-opts.c (c_common_post_options): Correct test."}, {"sha": "8db2e9ccc6fe02d39b40d557f7af34c1e8a4eb7b", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=260f91c2927c3850919f8ebdcbc294cfbd04daa9", "patch": "@@ -2294,7 +2294,8 @@ trouble to describe the values that are stored, but it is essential to\n inform the compiler that the registers will be altered, lest it\n attempt to keep data in them across the string instruction.\n \n-If @var{x} is @code{(mem:BLK (const_int 0))}, it means that all memory\n+If @var{x} is @code{(mem:BLK (const_int 0))} or \n+@code{(mem:BLK (scratch))}, it means that all memory\n locations must be presumed clobbered.  If @var{x} is a @code{parallel},\n it has the same meaning as a @code{parallel} in a @code{set} expression.\n "}, {"sha": "f61d009105a551fe64b39c30a07c4b1f518e15ca", "filename": "gcc/explow.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=260f91c2927c3850919f8ebdcbc294cfbd04daa9", "patch": "@@ -1079,7 +1079,17 @@ emit_stack_restore (save_level, sa, after)\n     }\n \n   if (sa != 0)\n-    sa = validize_mem (sa);\n+    {\n+      sa = validize_mem (sa);\n+      /* These clobbers prevent the scheduler from moving\n+\t references to variable arrays below the code\n+\t that deletes (pops) the arrays. */\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode,\n+\t\t    gen_rtx_MEM (BLKmode, \n+\t\t\tgen_rtx_SCRATCH (VOIDmode))));\n+      emit_insn (gen_rtx_CLOBBER (VOIDmode,\n+\t\t    gen_rtx_MEM (BLKmode, stack_pointer_rtx)));\n+    }\n \n   if (after)\n     {"}, {"sha": "c00426cf42013b1bd20ccdca2569cf547db9b1bc", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260f91c2927c3850919f8ebdcbc294cfbd04daa9/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=260f91c2927c3850919f8ebdcbc294cfbd04daa9", "patch": "@@ -1181,9 +1181,11 @@ reload (first, global)\n   /* Make a pass over all the insns and delete all USEs which we inserted\n      only to tag a REG_EQUAL note on them.  Remove all REG_DEAD and REG_UNUSED\n      notes.  Delete all CLOBBER insns that don't refer to the return value\n-     and simplify (subreg (reg)) operands.  Also remove all REG_RETVAL and\n-     REG_LIBCALL notes since they are no longer useful or accurate.  Strip\n-     and regenerate REG_INC notes that may have been moved around.  */\n+     or to memory (mem:BLK CLOBBERs must be retained to prevent the scheduler\n+     from misarranging variable-array code) and simplify (subreg (reg))\n+     operands.  Also remove all REG_RETVAL and REG_LIBCALL notes since they\n+     are no longer useful or accurate.  Strip and regenerate REG_INC notes\n+     that may have been moved around.  */\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     if (INSN_P (insn))\n@@ -1200,6 +1202,8 @@ reload (first, global)\n \t     && (GET_MODE (insn) == QImode\n \t\t || find_reg_note (insn, REG_EQUAL, NULL_RTX)))\n \t    || (GET_CODE (PATTERN (insn)) == CLOBBER\n+\t\t&& (GET_CODE (XEXP (PATTERN (insn), 0)) != MEM\n+\t\t    || GET_MODE (XEXP (PATTERN (insn), 0)) != BLKmode)\n \t\t&& (GET_CODE (XEXP (PATTERN (insn), 0)) != REG\n \t\t    || ! REG_FUNCTION_VALUE_P (XEXP (PATTERN (insn), 0)))))\n \t  {"}]}