{"sha": "ff48be5c7926b0a806d99a63500e5937601f6865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0OGJlNWM3OTI2YjBhODA2ZDk5YTYzNTAwZTU5Mzc2MDFmNjg2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-05-16T04:48:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-05-16T04:48:52Z"}, "message": "rtti.c (get_tinfo_decl): Don't call comdat_linkage.\n\n        * cp/rtti.c (get_tinfo_decl): Don't call comdat_linkage.\n        Do set DECL_COMDAT.\n        (synthesize_tinfo_var): Take the public decl.\n        (create_real_tinfo_var): Likewise.  Check DECL_COMDAT.\n        (emit_tinfo_decl): Adjust.  Call import_export_decl.\n        * cp/decl2.c (import_export_decl): Simplify tinfo decl handling.\n        * config/mips/mips.c (mips_output_external): Don't do sdata\n        optimization for a variable with DECL_COMDAT set.\n\nFrom-SVN: r53506", "tree": {"sha": "d488aa103427f298f243322a5f33bd64a0eed7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d488aa103427f298f243322a5f33bd64a0eed7b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff48be5c7926b0a806d99a63500e5937601f6865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff48be5c7926b0a806d99a63500e5937601f6865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff48be5c7926b0a806d99a63500e5937601f6865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff48be5c7926b0a806d99a63500e5937601f6865/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57cb4fe5b89460fd505d84bb85303e8c40d20fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb4fe5b89460fd505d84bb85303e8c40d20fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cb4fe5b89460fd505d84bb85303e8c40d20fa7"}], "stats": {"total": 80, "additions": 48, "deletions": 32}, "files": [{"sha": "0e8dd8a87d72836c14fe052c5dd7495090ef2799", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff48be5c7926b0a806d99a63500e5937601f6865", "patch": "@@ -1,3 +1,8 @@\n+2002-05-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* config/mips/mips.c (mips_output_external): Don't do sdata\n+\toptimization for a variable with DECL_COMDAT set.\n+\n 2002-05-15  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/altivec.h: Cleanups for tighter typechecking."}, {"sha": "72f3325092625b536d2ed303198d91fc59fdc9c7", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ff48be5c7926b0a806d99a63500e5937601f6865", "patch": "@@ -6035,6 +6035,7 @@ mips_output_external (file, decl, name)\n \n   if (TARGET_GP_OPT\n       && TREE_CODE (decl) != FUNCTION_DECL\n+      && !DECL_COMDAT (decl)\n       && (len = int_size_in_bytes (TREE_TYPE (decl))) > 0\n       && ((section_name = DECL_SECTION_NAME (decl)) == NULL\n \t  || strcmp (TREE_STRING_POINTER (section_name), \".sbss\") == 0"}, {"sha": "0f5673e9cdc1d8848a7e3269982a3b3866326af2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff48be5c7926b0a806d99a63500e5937601f6865", "patch": "@@ -1,3 +1,12 @@\n+2002-05-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* rtti.c (get_tinfo_decl): Don't call comdat_linkage.\n+\tDo set DECL_COMDAT.\n+\t(synthesize_tinfo_var): Take the public decl.\n+\t(create_real_tinfo_var): Likewise.  Check DECL_COMDAT.\n+\t(emit_tinfo_decl): Adjust.  Call import_export_decl.\n+\t* decl2.c (import_export_decl): Simplify tinfo decl handling.\n+\n 2002-05-14  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cp-tree.h (struct lang_type): Added non_zero_init."}, {"sha": "ee10fff29e3fa871ac6515ecbd7999855adf8147", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ff48be5c7926b0a806d99a63500e5937601f6865", "patch": "@@ -2509,6 +2509,11 @@ import_export_decl (decl)\n     }\n   else if (tinfo_decl_p (decl, 0))\n     {\n+      /* Here, we only decide whether or not the tinfo node should be\n+\t emitted with the vtable.  The decl we're considering isn't\n+\t actually the one which gets emitted; that one is generated in\n+\t create_real_tinfo_var.  */\n+\n       tree ctype = TREE_TYPE (DECL_NAME (decl));\n \n       if (IS_AGGR_TYPE (ctype))\n@@ -2528,20 +2533,14 @@ import_export_decl (decl)\n \t  && same_type_p (ctype, TYPE_MAIN_VARIANT (ctype)))\n \t{\n \t  DECL_NOT_REALLY_EXTERN (decl)\n-\t    = ! (CLASSTYPE_INTERFACE_ONLY (ctype)\n-\t\t || (DECL_DECLARED_INLINE_P (decl) \n-\t\t     && ! flag_implement_inlines\n-\t\t     && !DECL_VINDEX (decl)));\n-\n-\t  /* Always make artificials weak.  */\n-\t  if (flag_weak)\n-\t    comdat_linkage (decl);\n+\t    = ! CLASSTYPE_INTERFACE_ONLY (ctype);\n+\t  DECL_COMDAT (decl) = 0;\n \t}\n-      else if (TYPE_BUILT_IN (ctype) \n-\t       && same_type_p (ctype, TYPE_MAIN_VARIANT (ctype)))\n-\tDECL_NOT_REALLY_EXTERN (decl) = 0;\n       else\n-\tcomdat_linkage (decl);\n+\t{\n+\t  DECL_NOT_REALLY_EXTERN (decl) = 1;\n+\t  DECL_COMDAT (decl) = 1;\n+\t}\n     } \n   else\n     comdat_linkage (decl);"}, {"sha": "8e4e7a196dccd85f76cb3cf784e9f3ab83586cbf", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff48be5c7926b0a806d99a63500e5937601f6865/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=ff48be5c7926b0a806d99a63500e5937601f6865", "patch": "@@ -59,7 +59,7 @@ static tree dfs_class_hint_mark PARAMS ((tree, void *));\n static tree dfs_class_hint_unmark PARAMS ((tree, void *));\n static int class_hint_flags PARAMS((tree));\n static tree class_initializer PARAMS((tree, tree, tree));\n-static tree synthesize_tinfo_var PARAMS((tree, tree));\n+static tree synthesize_tinfo_var PARAMS((tree));\n static tree create_real_tinfo_var PARAMS((tree, tree, tree, tree, int));\n static tree create_pseudo_type_info PARAMS((const char *, int, ...));\n static tree get_vmi_pseudo_type_info PARAMS((int));\n@@ -309,9 +309,8 @@ get_tinfo_decl (type)\n       TREE_STATIC (d) = 1;\n       DECL_EXTERNAL (d) = 1;\n       TREE_PUBLIC (d) = 1;\n-      if (flag_weak || !typeinfo_in_lib_p (type))\n-\tcomdat_linkage (d);\n       SET_DECL_ASSEMBLER_NAME (d, name);\n+      DECL_COMDAT (d) = 1;\n       cp_finish_decl (d, NULL_TREE, NULL_TREE, 0);\n \n       pushdecl_top_level (d);\n@@ -929,19 +928,23 @@ typeinfo_in_lib_p (type)\n }\n \n /* Generate a pseudo_type_info VAR_DECL suitable for the supplied\n-   TARGET_TYPE and given the REAL_NAME. This is the structure expected by\n+   TARGET_TYPE and corresponding to PUBLIC_DECL. This is the structure expected by\n    the runtime, and therefore has additional fields.  If we need not emit a\n    definition (because the runtime must contain it), return NULL_TREE,\n    otherwise return the VAR_DECL.  */\n \n static tree\n-synthesize_tinfo_var (target_type, real_name)\n-     tree target_type;\n-     tree real_name;\n+synthesize_tinfo_var (public_decl)\n+     tree public_decl;\n {\n   tree var_init = NULL_TREE;\n   tree var_type = NULL_TREE;\n   int non_public = 0;\n+  tree target_type = TREE_TYPE (DECL_NAME (public_decl));\n+  my_friendly_assert (target_type != NULL_TREE, 20000120);\n+  \n+  /* Say we've dealt with it.  */\n+  TREE_TYPE (DECL_NAME (public_decl)) = NULL_TREE;\n   \n   switch (TREE_CODE (target_type))\n     {\n@@ -1079,17 +1082,17 @@ synthesize_tinfo_var (target_type, real_name)\n     }\n   \n   return create_real_tinfo_var (target_type,\n-\t\t\t\treal_name, TINFO_PSEUDO_TYPE (var_type),\n+\t\t\t\tpublic_decl, TINFO_PSEUDO_TYPE (var_type),\n                                 var_init, non_public);\n }\n \n /* Create the real typeinfo variable.  NON_PUBLIC indicates that we cannot\n    make this variable public (comdat). */\n \n static tree\n-create_real_tinfo_var (target_type, name, type, init, non_public)\n+create_real_tinfo_var (target_type, public_decl, type, init, non_public)\n      tree target_type;\n-     tree name;\n+     tree public_decl;\n      tree type;\n      tree init;\n      int non_public;\n@@ -1098,6 +1101,7 @@ create_real_tinfo_var (target_type, name, type, init, non_public)\n   tree decl;\n   tree hidden_name;\n   char hidden[30];\n+  tree name = DECL_ASSEMBLER_NAME (public_decl);\n \n   /* We cannot give this the name NAME, as that already is globally\n      bound to the tinfo_decl we originally created for this type in\n@@ -1115,7 +1119,8 @@ create_real_tinfo_var (target_type, name, type, init, non_public)\n   if (!non_public)\n     {\n       TREE_PUBLIC (decl) = 1;\n-      if (flag_weak || !typeinfo_in_lib_p (target_type))\n+      if (flag_weak\n+\t  || (DECL_COMDAT (public_decl) && !typeinfo_in_lib_p (target_type)))\n \tcomdat_linkage (decl);\n     }\n   SET_DECL_ASSEMBLER_NAME (decl, name);\n@@ -1457,19 +1462,16 @@ emit_tinfo_decl (decl_ptr, data)\n      void *data ATTRIBUTE_UNUSED;\n {\n   tree tinfo_decl = *decl_ptr;\n-  tree tinfo_type, decl;\n+  tree decl;\n   \n   my_friendly_assert (TREE_TYPE (tinfo_decl) == tinfo_decl_type, 20000121);\n-  tinfo_type = TREE_TYPE (DECL_NAME (tinfo_decl));\n-  my_friendly_assert (tinfo_type != NULL_TREE, 20000120);\n-  \n-  if (!DECL_NEEDED_P (tinfo_decl))\n+\n+  import_export_decl (tinfo_decl);\n+  if (DECL_REALLY_EXTERN (tinfo_decl) || !DECL_NEEDED_P (tinfo_decl))\n     return 0;\n-  /* Say we've dealt with it.  */\n-  TREE_TYPE (DECL_NAME (tinfo_decl)) = NULL_TREE;\n-  \n+\n   create_tinfo_types ();\n-  decl = synthesize_tinfo_var (tinfo_type, DECL_ASSEMBLER_NAME (tinfo_decl));\n+  decl = synthesize_tinfo_var (tinfo_decl);\n   \n   return decl != 0;\n }"}]}