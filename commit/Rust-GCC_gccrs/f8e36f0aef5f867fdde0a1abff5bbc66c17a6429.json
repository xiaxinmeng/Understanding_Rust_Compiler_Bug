{"sha": "f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlMzZmMGFlZjVmODY3ZmRkZTBhMWFiZmY1YmJjNjZjMTdhNjQyOQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-04T03:43:40Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-04T03:43:40Z"}, "message": "gfortran.texi: Update documentation to catch up with BOZ changes.\n\n2019-09-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\t* gfortran.texi: Update documentation to catch up with BOZ changes.\n\t* invoke.texi: Fix English from previous BOZ changes commit.\n\nFrom-SVN: r275364", "tree": {"sha": "22c8dfdae253bd07516b8d57ab0068feee980374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22c8dfdae253bd07516b8d57ab0068feee980374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/comments", "author": null, "committer": null, "parents": [{"sha": "48259207e6a1b888a0fea37b0fd03cfdbdd16939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48259207e6a1b888a0fea37b0fd03cfdbdd16939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48259207e6a1b888a0fea37b0fd03cfdbdd16939"}], "stats": {"total": 59, "additions": 24, "deletions": 35}, "files": [{"sha": "b866cdf3b9852ff8bf6b7250ef0a446b85440112", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "patch": "@@ -1,3 +1,8 @@\n+2019-09-03  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* gfortran.texi: Update documentation to catch up with BOZ changes.\n+\t* invoke.texi: Fix English from previous BOZ changes commit.\n+\n 2019-09-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/91589"}, {"sha": "02d30e19660e8bd227ea3cbd88883d86902546d7", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 17, "deletions": 33, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "patch": "@@ -1848,39 +1848,23 @@ Besides decimal constants, Fortran also supports binary (@code{b}),\n octal (@code{o}) and hexadecimal (@code{z}) integer constants.  The\n syntax is: @samp{prefix quote digits quote}, were the prefix is\n either @code{b}, @code{o} or @code{z}, quote is either @code{'} or\n-@code{\"} and the digits are for binary @code{0} or @code{1}, for\n-octal between @code{0} and @code{7}, and for hexadecimal between\n-@code{0} and @code{F}.  (Example: @code{b'01011101'}.)\n-\n-Up to Fortran 95, BOZ literals were only allowed to initialize\n-integer variables in DATA statements.  Since Fortran 2003 BOZ literals\n-are also allowed as argument of @code{REAL}, @code{DBLE}, @code{INT}\n-and @code{CMPLX}; the result is the same as if the integer BOZ\n-literal had been converted by @code{TRANSFER} to, respectively,\n-@code{real}, @code{double precision}, @code{integer} or @code{complex}.\n-As GNU Fortran extension the intrinsic procedures @code{FLOAT},\n-@code{DFLOAT}, @code{COMPLEX} and @code{DCMPLX} are treated alike.\n-\n-As an extension, GNU Fortran allows hexadecimal BOZ literal constants to\n-be specified using the @code{X} prefix, in addition to the standard\n-@code{Z} prefix.  The BOZ literal can also be specified by adding a\n-suffix to the string, for example, @code{Z'ABC'} and @code{'ABC'Z} are\n-equivalent.\n-\n-Furthermore, GNU Fortran allows using BOZ literal constants outside\n-DATA statements and the four intrinsic functions allowed by Fortran 2003.\n-In DATA statements, in direct assignments, where the right-hand side\n-only contains a BOZ literal constant, and for old-style initializers of\n-the form @code{integer i /o'0173'/}, the constant is transferred\n-as if @code{TRANSFER} had been used; for @code{COMPLEX} numbers, only\n-the real part is initialized unless @code{CMPLX} is used.  In all other\n-cases, the BOZ literal constant is converted to an @code{INTEGER} value with\n-the largest decimal representation.  This value is then converted\n-numerically to the type and kind of the variable in question.\n-(For instance, @code{real :: r = b'0000001' + 1} initializes @code{r}\n-with @code{2.0}.) As different compilers implement the extension\n-differently, one should be careful when doing bitwise initialization\n-of non-integer variables.\n+@code{\"} and the digits are @code{0} or @code{1} for binary,\n+between @code{0} and @code{7} for octal, and between @code{0} and\n+@code{F} for hexadecimal.  (Example: @code{b'01011101'}.)\n+\n+Up to Fortran 95, BOZ literal constants were only allowed to initialize\n+integer variables in DATA statements.  Since Fortran 2003 BOZ literal\n+constants are also allowed as actual arguments to the @code{REAL},\n+@code{DBLE}, @code{INT} and @code{CMPLX} intrinsic functions.\n+The BOZ literal constant is simply a string of bits, which is padded\n+or truncated as needed, during conversion to a numeric type.  The \n+Fortran standard states that the treatment of the sign bit is processor\n+dependent.  Gfortran interprets the sign bit as a user would expect.\n+\n+As a deprecated extension, GNU Fortran allows hexadecimal BOZ literal\n+constants to be specified using the @code{X} prefix.  The BOZ literal\n+constant can also be specified by adding a suffix to the string, for\n+example, @code{Z'ABC'} and @code{'ABC'X} are equivalent.\n \n @node Real array indices\n @subsection Real array indices"}, {"sha": "ed8cefb0979ca521236e07225e3747bcdaedc72a", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e36f0aef5f867fdde0a1abff5bbc66c17a6429/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=f8e36f0aef5f867fdde0a1abff5bbc66c17a6429", "patch": "@@ -241,10 +241,10 @@ warning.  This option is implied by @option{-std=legacy}.\n \n @item -fallow-invalid-boz\n @opindex @code{allow-invalid-boz}\n-A BOZ literal constant can occur in a limited number of context in\n+A BOZ literal constant can occur in a limited number of contexts in\n standard conforming Fortran.  This option degrades an error condition\n to a warning, and allows a BOZ literal constant to appear where the\n-Fortran standard would otherwise prohibits it.\n+Fortran standard would otherwise prohibit its use.\n \n @item -fd-lines-as-code\n @itemx -fd-lines-as-comments"}]}