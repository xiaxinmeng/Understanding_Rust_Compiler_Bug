{"sha": "92383fee5c764578927b7a3f559c50c28ad395f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzODNmZWU1Yzc2NDU3ODkyN2I3YTNmNTU5YzUwYzI4YWQzOTVmNA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2017-07-10T08:22:47Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2017-07-10T08:22:47Z"}, "message": "Move jump-tables out of .text again.\n\ngcc/\n\tMove jump-tables out of .text again.\n\tPR target/81075\n\t* config/avr/avr.c (ASM_OUTPUT_ADDR_VEC_ELT): Remove function.\n\t(ASM_OUTPUT_ADDR_VEC): New function.\n\t(avr_adjust_insn_length) [JUMP_TABLE_DATA_P]: Return 0.\n\t(avr_final_prescan_insn) [avr_log.insn_addresses]: Dump\n\tINSN_ADDRESSes as asm comment.\n\t* config/avr/avr.h (JUMP_TABLES_IN_TEXT_SECTION): Adjust comment.\n\t(ASM_OUTPUT_ADDR_VEC_ELT): Remove define.\n\t(ASM_OUTPUT_ADDR_VEC): Define to avr_output_addr_vec.\n\t* config/avr/avr.md (*tablejump): Adjust comment.\n\t* config/avr/elf.h (ASM_OUTPUT_BEFORE_CASE_LABEL): Remove.\n\t* config/avr/avr-log.c (avr_log_set_avr_log) <insn_addresses>:\n\tNew detail.\n\t* config/avr/avr-protos.h (avr_output_addr_vec_elt): Remove proto.\n\t(avr_output_addr_vec): New proto.\n\t(avr_log_t) <insn_addresses>: New field.\n\nFrom-SVN: r250091", "tree": {"sha": "432aea6aa3f4a202c5d4b579aa306fdc98f894b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/432aea6aa3f4a202c5d4b579aa306fdc98f894b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92383fee5c764578927b7a3f559c50c28ad395f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92383fee5c764578927b7a3f559c50c28ad395f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92383fee5c764578927b7a3f559c50c28ad395f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92383fee5c764578927b7a3f559c50c28ad395f4/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464306673d9c8e7a818c0eedb9cee839e695752f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/464306673d9c8e7a818c0eedb9cee839e695752f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/464306673d9c8e7a818c0eedb9cee839e695752f"}], "stats": {"total": 131, "additions": 117, "deletions": 14}, "files": [{"sha": "8e71bc79359db92e5453f5ab9a3a7348f68892d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -1,3 +1,24 @@\n+2017-07-10  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tMove jump-tables out of .text again.\n+\n+\tPR target/81075\n+\t* config/avr/avr.c (ASM_OUTPUT_ADDR_VEC_ELT): Remove function.\n+\t(ASM_OUTPUT_ADDR_VEC): New function.\n+\t(avr_adjust_insn_length) [JUMP_TABLE_DATA_P]: Return 0.\n+\t(avr_final_prescan_insn) [avr_log.insn_addresses]: Dump\n+\tINSN_ADDRESSes as asm comment.\n+\t* config/avr/avr.h (JUMP_TABLES_IN_TEXT_SECTION): Adjust comment.\n+\t(ASM_OUTPUT_ADDR_VEC_ELT): Remove define.\n+\t(ASM_OUTPUT_ADDR_VEC): Define to avr_output_addr_vec.\n+\t* config/avr/avr.md (*tablejump): Adjust comment.\n+\t* config/avr/elf.h (ASM_OUTPUT_BEFORE_CASE_LABEL): Remove.\n+\t* config/avr/avr-log.c (avr_log_set_avr_log) <insn_addresses>:\n+\tNew detail.\n+\t* config/avr/avr-protos.h (avr_output_addr_vec_elt): Remove proto.\n+\t(avr_output_addr_vec): New proto.\n+\t(avr_log_t) <insn_addresses>: New field.\n+\n 2017-07-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/81313"}, {"sha": "1cd7b028c06207c50b9b67316ddf58d168ad32e6", "filename": "gcc/config/avr/avr-log.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr-log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr-log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.c?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -302,6 +302,7 @@ avr_log_set_avr_log (void)\n       SET_DUMP_DETAIL (address_cost);\n       SET_DUMP_DETAIL (builtin);\n       SET_DUMP_DETAIL (constraints);\n+      SET_DUMP_DETAIL (insn_addresses);\n       SET_DUMP_DETAIL (legitimate_address_p);\n       SET_DUMP_DETAIL (legitimize_address);\n       SET_DUMP_DETAIL (legitimize_reload_address);"}, {"sha": "56e149832d53ef13565f2120f6910b155f019bbe", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -87,7 +87,7 @@ extern bool avr_emit_movmemhi (rtx*);\n extern int avr_epilogue_uses (int regno);\n extern int avr_starting_frame_offset (void);\n \n-extern void avr_output_addr_vec_elt (FILE *stream, int value);\n+extern void avr_output_addr_vec (rtx_insn*, rtx);\n extern const char *avr_out_sbxx_branch (rtx_insn *insn, rtx operands[]);\n extern const char* avr_out_bitop (rtx, rtx*, int*);\n extern const char* avr_out_plus (rtx, rtx*, int* =NULL, int* =NULL, bool =true);\n@@ -175,6 +175,7 @@ typedef struct\n   unsigned address_cost :1;\n   unsigned builtin :1;\n   unsigned constraints :1;\n+  unsigned insn_addresses :1;\n   unsigned legitimate_address_p :1;\n   unsigned legitimize_address :1;\n   unsigned legitimize_reload_address :1;"}, {"sha": "734ede10d6f47ba8103ca351a08dac0f520f4e2c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 86, "deletions": 5, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -3088,6 +3088,10 @@ avr_final_prescan_insn (rtx_insn *insn, rtx *operand ATTRIBUTE_UNUSED,\n                  rtx_cost (PATTERN (insn), VOIDmode, INSN, 0,\n                            optimize_insn_for_speed_p()));\n     }\n+\n+  if (avr_log.insn_addresses)\n+    fprintf (asm_out_file, \";; ADDR = %d\\n\",\n+             (int) INSN_ADDRESSES (INSN_UID (insn)));\n }\n \n /* Return 0 if undefined, 1 if always true or always false.  */\n@@ -9137,6 +9141,12 @@ avr_adjust_insn_length (rtx_insn *insn, int len)\n   rtx *op = recog_data.operand;\n   enum attr_adjust_len adjust_len;\n \n+  /* As we pretend jump tables in .text, fix branch offsets crossing jump\n+     tables now.  */\n+\n+  if (JUMP_TABLE_DATA_P (insn))\n+    return 0;\n+\n   /* Some complex insns don't need length adjustment and therefore\n      the length need not/must not be adjusted for these insns.\n      It is easier to state this in an insn attribute \"adjust_len\" than\n@@ -12312,17 +12322,88 @@ avr_out_reload_inpsi (rtx *op, rtx clobber_reg, int *len)\n }\n \n \n-/* Worker function for `ASM_OUTPUT_ADDR_VEC_ELT'.  */\n+/* Worker function for `ASM_OUTPUT_ADDR_VEC'.  */\n+/* Emit jump tables out-of-line so that branches crossing the table\n+   get shorter offsets.  If we have JUMP + CALL, then put the tables\n+   in a dedicated non-.text section so that CALLs get better chance to\n+   be relaxed to RCALLs.\n+\n+   We emit the tables by hand because `function_rodata_section' does not\n+   work as expected, cf. PR71151, and we do *NOT* want the table to be\n+   in .rodata, hence setting JUMP_TABLES_IN_TEXT_SECTION = 0 is of limited\n+   use; and setting it to 1 attributes table lengths to branch offsets...\n+   Moreover, fincal.c keeps switching section before each table entry\n+   which we find too fragile as to rely on section caching.  */\n \n void\n-avr_output_addr_vec_elt (FILE *stream, int value)\n+avr_output_addr_vec (rtx_insn *labl, rtx table)\n {\n-  if (AVR_HAVE_JMP_CALL)\n-    fprintf (stream, \"\\t.word gs(.L%d)\\n\", value);\n+  FILE *stream = asm_out_file;\n+\n+  app_disable();\n+\n+  // Switch to appropriate (sub)section.\n+\n+  if (DECL_SECTION_NAME (current_function_decl)\n+      && symtab_node::get (current_function_decl)\n+      && ! symtab_node::get (current_function_decl)->implicit_section)\n+    {\n+      // .subsection will emit the code after the function and in the\n+      // section as chosen by the user.\n+\n+      switch_to_section (current_function_section ());\n+      fprintf (stream, \"\\t.subsection\\t1\\n\");\n+    }\n   else\n-    fprintf (stream, \"\\trjmp .L%d\\n\", value);\n+    {\n+      // Since PR63223 there is no restriction where to put the table; it\n+      // may even reside above 128 KiB.  We put it in a section as high as\n+      // possible and avoid progmem in order not to waste flash <= 64 KiB.\n+\n+      const char *sec_name = \".jumptables.gcc\";\n+\n+      // The table belongs to its host function, therefore use fine\n+      // grained sections so that, if that function is removed by\n+      // --gc-sections, the child table(s) may also be removed.  */\n+\n+      tree asm_name = DECL_ASSEMBLER_NAME (current_function_decl);\n+      const char *fname = IDENTIFIER_POINTER (asm_name);\n+      fname = targetm.strip_name_encoding (fname);\n+      sec_name = ACONCAT ((sec_name, \".\", fname, NULL));\n+\n+      fprintf (stream, \"\\t.section\\t%s,\\\"%s\\\",@progbits\\n\", sec_name,\n+               AVR_HAVE_JMP_CALL ? \"a\" : \"ax\");\n+    }\n+\n+  // Output the label that preceeds the table.\n+\n+  ASM_OUTPUT_ALIGN (stream, 1);\n+  targetm.asm_out.internal_label (stream, \"L\", CODE_LABEL_NUMBER (labl));\n+\n+  // Output the table's content.\n+\n+  int vlen = XVECLEN (table, 0);\n+\n+  for (int idx = 0; idx < vlen; idx++)\n+    {\n+      int value = CODE_LABEL_NUMBER (XEXP (XVECEXP (table, 0, idx), 0));\n+\n+      if (AVR_HAVE_JMP_CALL)\n+        fprintf (stream, \"\\t.word gs(.L%d)\\n\", value);\n+      else\n+        fprintf (stream, \"\\trjmp .L%d\\n\", value);\n+    }\n+\n+  // Switch back to original section.  As we clobbered the section above,\n+  // forget the current section before switching back.\n+\n+  in_section = NULL;\n+  switch_to_section (current_function_section ());\n }\n \n+\n+/* Implement `TARGET_CONDITIONAL_REGISTER_USAGE'.  */\n+\n static void\n avr_conditional_register_usage (void)\n {"}, {"sha": "d5fc345bbeb4f8f641aa0e619f26dbc51bc93b62", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -398,6 +398,10 @@ typedef struct avr_args\n \n #define SUPPORTS_INIT_PRIORITY 0\n \n+/* We pretend jump tables are in text section because otherwise,\n+   final.c will switch to .rodata before jump tables and thereby\n+   triggers __do_copy_data.  As we implement ASM_OUTPUT_ADDR_VEC,\n+   we still have full control over the jump tables themselves.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n #define ASM_COMMENT_START \" ; \"\n@@ -447,8 +451,8 @@ typedef struct avr_args\n   fprintf (STREAM, \"\\tpop\\tr%d\", REGNO);\t\\\n }\n \n-#define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)  \\\n-  avr_output_addr_vec_elt (STREAM, VALUE)\n+#define ASM_OUTPUT_ADDR_VEC(TLABEL, TDATA)      \\\n+  avr_output_addr_vec (TLABEL, TDATA)\n \n #define ASM_OUTPUT_ALIGN(STREAM, POWER)                 \\\n   do {                                                  \\"}, {"sha": "2cdddb25cd093bd7476e7a015267aa40191046d3", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -5185,7 +5185,7 @@\n    (set_attr \"cc\" \"none\")])\n \n ;; table jump\n-;; For entries in jump table see avr_output_addr_vec_elt.\n+;; For entries in jump table see avr_output_addr_vec.\n \n ;; Table made from\n ;;    \"rjmp .L<n>\"   instructions for <= 8K devices"}, {"sha": "e11c04e9d6d3fe37c0e88a6084832a7c3d29491d", "filename": "gcc/config/avr/elf.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92383fee5c764578927b7a3f559c50c28ad395f4/gcc%2Fconfig%2Favr%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Felf.h?ref=92383fee5c764578927b7a3f559c50c28ad395f4", "patch": "@@ -31,11 +31,6 @@\n #undef STRING_LIMIT\n #define STRING_LIMIT ((unsigned) 64)\n \n-/* Output alignment 2**1 for jump tables.  */\n-#undef ASM_OUTPUT_BEFORE_CASE_LABEL\n-#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n-  ASM_OUTPUT_ALIGN (FILE, 1);\n-\n /* Be conservative in crtstuff.c.  */\n #undef INIT_SECTION_ASM_OP\n #undef FINI_SECTION_ASM_OP"}]}