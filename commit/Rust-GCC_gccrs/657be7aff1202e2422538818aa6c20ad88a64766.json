{"sha": "657be7aff1202e2422538818aa6c20ad88a64766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU3YmU3YWZmMTIwMmUyNDIyNTM4ODE4YWE2YzIwYWQ4OGE2NDc2Ng==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-06-11T03:12:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-06-11T03:12:22Z"}, "message": "Makefile.in (libgcc2): Pass MAYBE_USE_COLLECT2 as an argument.\n\n        * Makefile.in (libgcc2): Pass MAYBE_USE_COLLECT2 as an argument.\n        * libgcc2.c (__CTOR_LIST, __DTOR_LIST); Do not provide\n        initializers is some circumstances.\n\nFrom-SVN: r27489", "tree": {"sha": "f0e3f6432b8d16aa10539efd68881ddfbc6b6876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0e3f6432b8d16aa10539efd68881ddfbc6b6876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/657be7aff1202e2422538818aa6c20ad88a64766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657be7aff1202e2422538818aa6c20ad88a64766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657be7aff1202e2422538818aa6c20ad88a64766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657be7aff1202e2422538818aa6c20ad88a64766/comments", "author": null, "committer": null, "parents": [{"sha": "2fdf4c3e97a23e8fb59542568f5536bcf05ac188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdf4c3e97a23e8fb59542568f5536bcf05ac188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdf4c3e97a23e8fb59542568f5536bcf05ac188"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "ce58938bb9eb138620b9b4fb3a0bfc2edc06cf28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657be7aff1202e2422538818aa6c20ad88a64766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657be7aff1202e2422538818aa6c20ad88a64766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=657be7aff1202e2422538818aa6c20ad88a64766", "patch": "@@ -1,5 +1,9 @@\n Fri Jun 11 03:17:51 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* Makefile.in (libgcc2): Pass MAYBE_USE_COLLECT2 as an argument.\n+\t* libgcc2.c (__CTOR_LIST, __DTOR_LIST); Do not provide\n+\tinitializers is some circumstances.\n+\n \t* fixinc/inclhack.def (endif_label): Add additional selector for\n \tmore bogus stuff after #endif statements.\n \t* fixinc/inclhack.sh, fixinc/fixincl.x: Rebuilt."}, {"sha": "3b79e419695d7c6816f9d6a22f6069a5127f4ea8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657be7aff1202e2422538818aa6c20ad88a64766/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657be7aff1202e2422538818aa6c20ad88a64766/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=657be7aff1202e2422538818aa6c20ad88a64766", "patch": "@@ -393,6 +393,9 @@ EXTRA_HEADERS =@extra_headers_list@\n \n # Set this to `collect2' to enable use of collect2.\n USE_COLLECT2 = @will_use_collect2@\n+# If we might be using collect2, then this variable will be set to\n+# -DUSE_COLLECT2.  toplev.c, collect2.c and libgcc2.c all need to\n+# if we may be using collect2.\n MAYBE_USE_COLLECT2 = @maybe_use_collect2@\n # It is convenient for configure to add the assignment at the beginning,\n # so don't override it here.\n@@ -1067,7 +1070,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \tdo \\\n \t  echo $${name}; \\\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n-\t      $(srcdir)/libgcc2.c -o $${name}$(objext); \\\n+\t      $(MAYBE_USE_COLLECT2) $(srcdir)/libgcc2.c -o $${name}$(objext); \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n \t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\"}, {"sha": "6d8fb0b77db7daab7c0f86ad3628b362a627daed", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657be7aff1202e2422538818aa6c20ad88a64766/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657be7aff1202e2422538818aa6c20ad88a64766/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=657be7aff1202e2422538818aa6c20ad88a64766", "patch": "@@ -2903,17 +2903,26 @@ SYMBOL__MAIN ()\n #include \"gbl-ctors.h\"\n \n /* Provide default definitions for the lists of constructors and\n-   destructors, so that we don't get linker errors.  \n-\n-   The old code sometimes put these into the data segment and sometimes\n-   into the bss segment.  Putting these into the data segment should always\n-   work and avoids a little bit of complexity.  */\n+   destructors, so that we don't get linker errors.  These symbols are\n+   intentionally bss symbols, so that gld and/or collect will provide\n+   the right values.  */\n \n /* We declare the lists here with two elements each,\n-   so that they are valid empty lists if no other definition is loaded.  */\n+   so that they are valid empty lists if no other definition is loaded.\n+\n+   If we are using the old \"set\" extensions to have the gnu linker\n+   collect ctors and dtors, then we __CTOR_LIST__ and __DTOR_LIST__\n+   must be in the bss/common section.\n+\n+   Long term no port should use those extensions.  But many still do.  */\n #if !defined(INIT_SECTION_ASM_OP) && !defined(CTOR_LISTS_DEFINED_EXTERNALLY)\n+#if defined (ASM_OUTPUT_CONSTRUCTOR) || defined (USE_COLLECT2)\n func_ptr __CTOR_LIST__[2] = {0, 0};\n func_ptr __DTOR_LIST__[2] = {0, 0};\n+#else\n+func_ptr __CTOR_LIST__[2];\n+func_ptr __DTOR_LIST__[2];\n+#endif\n #endif /* no INIT_SECTION_ASM_OP and not CTOR_LISTS_DEFINED_EXTERNALLY */\n #endif /* L_ctors */\n \f"}]}