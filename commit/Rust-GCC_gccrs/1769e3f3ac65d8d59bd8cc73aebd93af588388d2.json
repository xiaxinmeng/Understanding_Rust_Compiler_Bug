{"sha": "1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2OWUzZjNhYzY1ZDhkNTliZDhjYzczYWViZDkzYWY1ODgzODhkMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:01:40Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:01:40Z"}, "message": "[arm] Rip out DImode addition and subtraction splits.\n\nThe first step towards early splitting of addition and subtraction at\nDImode is to rip out the old patterns that are designed to propagate\nDImode through the RTL optimization passes and the do late splitting.\n\nThis patch does cause some code size regressions, but it should still\nexecute correctly.  We will progressively add back the optimizations\nwe had here in later patches.\n\nA small number of tests in the Arm-specific testsuite do fail as a\nresult of this patch, but that's to be expected, since the\noptimizations they are looking for have just been removed.  I've kept\nthe tests, but XFAILed them for now.\n\nOne small technical change is also done in this patch as part of the\ncleanup: the uaddv<mode>4 expander is changed to use LTU as the branch\ncomparison.  This eliminates the need for CC_Cmode to recognize\nsomewhat bogus equality constraints.\n\ngcc:\n\t* arm.md (adddi3): Only accept register operands.\n\t(arm_adddi3): Convert to simple insn with no split.  Do not accept\n\tconstants.\n\t(adddi_sesidi_di): Delete patern.\n\t(adddi_zesidi_di): Likewise.\n\t(uaddv<mode>4): Use LTU as condition for branch.\n\t(adddi3_compareV): Convert to simple insn with no split.\n\t(addsi3_compareV_upper): Delete pattern.\n\t(adddi3_compareC): Convert to simple insn with no split.  Correct\n\tflags setting expression.\n\t(addsi3_compareC_upper): Delete pattern.\n\t(addsi3_compareC): Correct flags setting expression.\n\t(subdi3_compare1): Convert to simple insn with no split.\n\t(subsi3_carryin_compare): Delete pattern.\n\t(arm_subdi3): Convert to simple insn with no split.\n\t(subdi_zesidi): Delete pattern.\n\t(subdi_di_sesidi): Delete pattern.\n\t(subdi_zesidi_di): Delete pattern.\n\t(subdi_sesidi_di): Delete pattern.\n\t(subdi_zesidi_zesidi): Delete pattern.\n\t(negvdi3): Use s_register_operand.\n\t(negdi2_compare): Convert to simple insn with no split.\n\t(negdi2_insn): Likewise.\n\t(negsi2_carryin_compare): Delete pattern.\n\t(negdi_zero_extendsidi): Delete pattern.\n\t(arm_cmpdi_insn): Convert to simple insn with no split.\n\t(negdi2): Don't call gen_negdi2_neon.\n\t* config/arm/neon.md (adddi3_neon): Delete pattern.\n\t(subdi3_neon): Delete pattern.\n\t(negdi2_neon): Delete pattern.\n\t(splits for negdi2_neon): Delete splits.\n\ntestsuite:\n\t* gcc.target/arm/negdi-3.c: Add XFAILS.\n\t* gcc.target/arm/pr3447-1.c: Likewise.\n\t* gcc.target/arm/pr3447-3.c: Likewise.\n\t* gcc.target/arm/pr3447-4.c: Likewise.\n\nFrom-SVN: r277164", "tree": {"sha": "327fc05d15f06fa3583227035c41734532bc58aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/327fc05d15f06fa3583227035c41734532bc58aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/comments", "author": null, "committer": null, "parents": [{"sha": "b941459c5f0931937fe18cb25bdd608a3933ec20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b941459c5f0931937fe18cb25bdd608a3933ec20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b941459c5f0931937fe18cb25bdd608a3933ec20"}], "stats": {"total": 626, "additions": 97, "deletions": 529}, "files": [{"sha": "05ae1eaa0889b72acff4bec7067f12ab73e02355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -1,3 +1,37 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (adddi3): Only accept register operands.\n+\t(arm_adddi3): Convert to simple insn with no split.  Do not accept\n+\tconstants.\n+\t(adddi_sesidi_di): Delete patern.\n+\t(adddi_zesidi_di): Likewise.\n+\t(uaddv<mode>4): Use LTU as condition for branch.\n+\t(adddi3_compareV): Convert to simple insn with no split.\n+\t(addsi3_compareV_upper): Delete pattern.\n+\t(adddi3_compareC): Convert to simple insn with no split.  Correct\n+\tflags setting expression.\n+\t(addsi3_compareC_upper): Delete pattern.\n+\t(addsi3_compareC): Correct flags setting expression.\n+\t(subdi3_compare1): Convert to simple insn with no split.\n+\t(subsi3_carryin_compare): Delete pattern.\n+\t(arm_subdi3): Convert to simple insn with no split.\n+\t(subdi_zesidi): Delete pattern.\n+\t(subdi_di_sesidi): Delete pattern.\n+\t(subdi_zesidi_di): Delete pattern.\n+\t(subdi_sesidi_di): Delete pattern.\n+\t(subdi_zesidi_zesidi): Delete pattern.\n+\t(negvdi3): Use s_register_operand.\n+\t(negdi2_compare): Convert to simple insn with no split.\n+\t(negdi2_insn): Likewise.\n+\t(negsi2_carryin_compare): Delete pattern.\n+\t(negdi_zero_extendsidi): Delete pattern.\n+\t(arm_cmpdi_insn): Convert to simple insn with no split.\n+\t(negdi2): Don't call gen_negdi2_neon.\n+\t* config/arm/neon.md (adddi3_neon): Delete pattern.\n+\t(subdi3_neon): Delete pattern.\n+\t(negdi2_neon): Delete pattern.\n+\t(splits for negdi2_neon): Delete splits.\n+\n 2019-10-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/92153"}, {"sha": "e8ec426a0f870a0b965622405dbd39655b99290b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -23581,8 +23581,6 @@ maybe_get_arm_condition_code (rtx comparison)\n \t{\n \tcase LTU: return ARM_CS;\n \tcase GEU: return ARM_CC;\n-\tcase NE: return ARM_CS;\n-\tcase EQ: return ARM_CC;\n \tdefault: return ARM_NV;\n \t}\n "}, {"sha": "241ba97c4bacdfcc79df717c7755df09e5ce00dd", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 49, "deletions": 520, "changes": 569, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -437,7 +437,7 @@\n  [(parallel\n    [(set (match_operand:DI           0 \"s_register_operand\")\n \t  (plus:DI (match_operand:DI 1 \"s_register_operand\")\n-\t           (match_operand:DI 2 \"arm_adddi_operand\")))\n+\t           (match_operand:DI 2 \"s_register_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n@@ -446,87 +446,13 @@\n   \"\n )\n \n-(define_insn_and_split \"*arm_adddi3\"\n-  [(set (match_operand:DI          0 \"arm_general_register_operand\" \"=&r,&r,&r,&r,&r\")\n-\t(plus:DI (match_operand:DI 1 \"arm_general_register_operand\" \"%0, 0, r, 0, r\")\n-\t\t (match_operand:DI 2 \"arm_general_adddi_operand\"    \"r,  0, r, Dd, Dd\")))\n+(define_insn \"*arm_adddi3\"\n+  [(set (match_operand:DI 0 \"s_register_operand\"  \"=&r,&r,&r\")\n+\t(plus:DI (match_operand:DI 1 \"s_register_operand\" \" %0,0,r\")\n+\t\t (match_operand:DI 2 \"s_register_operand\" \" r,0,r\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\"\n-  \"TARGET_32BIT\"\n-  [(parallel [(set (reg:CC_C CC_REGNUM)\n-\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t (match_dup 1)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (plus:SI (plus:SI (match_dup 4) (match_dup 5))\n-\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  \"\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[5] = gen_highpart_mode (SImode, DImode, operands[2]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-  }\"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*adddi_sesidi_di\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n-\t(plus:DI (sign_extend:DI\n-\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n-\t\t (match_operand:DI 1 \"s_register_operand\" \"0,r\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"#\"\n-  \"TARGET_32BIT && reload_completed\"\n-  [(parallel [(set (reg:CC_C CC_REGNUM)\n-\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t (match_dup 1)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (plus:SI (plus:SI (ashiftrt:SI (match_dup 2)\n-\t\t\t\t\t\t     (const_int 31))\n-\t\t\t\t\t(match_dup 4))\n-\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  \"\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-  }\"\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*adddi_zesidi_di\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n-\t(plus:DI (zero_extend:DI\n-\t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n-\t\t (match_operand:DI 1 \"s_register_operand\" \"0,r\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"#\"\n-  \"TARGET_32BIT && reload_completed\"\n-  [(parallel [(set (reg:CC_C CC_REGNUM)\n-\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t (match_dup 1)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (plus:SI (plus:SI (match_dup 4) (const_int 0))\n-\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  \"\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-  }\"\n+  \"adds\\\\t%Q0, %Q1, %Q2;adc\\\\t%R0, %R1, %R2\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n@@ -553,7 +479,7 @@\n   \"TARGET_32BIT\"\n {\n   emit_insn (gen_add<mode>3_compareC (operands[0], operands[1], operands[2]));\n-  arm_gen_unlikely_cbranch (NE, CC_Cmode, operands[3]);\n+  arm_gen_unlikely_cbranch (LTU, CC_Cmode, operands[3]);\n \n   DONE;\n })\n@@ -636,44 +562,17 @@\n  ]\n )\n \n-(define_insn_and_split \"adddi3_compareV\"\n+(define_insn \"adddi3_compareV\"\n   [(set (reg:CC_V CC_REGNUM)\n \t(ne:CC_V\n \t  (plus:TI\n-\t    (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t    (sign_extend:TI (match_operand:DI 2 \"register_operand\" \"r\")))\n+\t    (sign_extend:TI (match_operand:DI 1 \"s_register_operand\" \"r\"))\n+\t    (sign_extend:TI (match_operand:DI 2 \"s_register_operand\" \"r\")))\n \t  (sign_extend:TI (plus:DI (match_dup 1) (match_dup 2)))))\n-   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_C CC_REGNUM)\n-\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t (match_dup 1)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (parallel [(set (reg:CC_V CC_REGNUM)\n-\t\t   (ne:CC_V\n-\t\t    (plus:DI (plus:DI\n-\t\t\t      (sign_extend:DI (match_dup 4))\n-\t\t\t      (sign_extend:DI (match_dup 5)))\n-\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n-\t\t    (plus:DI (sign_extend:DI\n-\t\t\t      (plus:SI (match_dup 4) (match_dup 5)))\n-\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n-\t     (set (match_dup 3) (plus:SI (plus:SI\n-\t\t\t\t\t  (match_dup 4) (match_dup 5))\n-\t\t\t\t\t (ltu:SI (reg:CC_C CC_REGNUM)\n-\t\t\t\t\t\t (const_int 0))))])]\n-  \"\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[5] = gen_highpart (SImode, operands[2]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-  }\"\n+  \"adds\\\\t%Q0, %Q1, %Q2;adcs\\\\t%R0, %R1, %R2\"\n  [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n@@ -694,99 +593,27 @@\n    (set_attr \"type\" \"alus_sreg\")]\n )\n \n-(define_insn \"*addsi3_compareV_upper\"\n-  [(set (reg:CC_V CC_REGNUM)\n-\t(ne:CC_V\n-\t  (plus:DI\n-\t   (plus:DI\n-\t    (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t    (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n-\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n-\t  (plus:DI (sign_extend:DI\n-\t\t    (plus:SI (match_dup 1) (match_dup 2)))\n-\t\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI\n-\t (plus:SI (match_dup 1) (match_dup 2))\n-\t (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  \"TARGET_32BIT\"\n-  \"adcs%?\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"adcs_reg\")]\n-)\n-\n-(define_insn_and_split \"adddi3_compareC\"\n+(define_insn \"adddi3_compareC\"\n   [(set (reg:CC_C CC_REGNUM)\n-\t(ne:CC_C\n-\t  (plus:TI\n-\t    (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t    (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"r\")))\n-\t  (zero_extend:TI (plus:DI (match_dup 1) (match_dup 2)))))\n+\t(compare:CC_C\n+\t  (plus:DI\n+\t    (match_operand:DI 1 \"register_operand\" \"r\")\n+\t    (match_operand:DI 2 \"register_operand\" \"r\"))\n+\t  (match_dup 1)))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC_C CC_REGNUM)\n-\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t (match_dup 1)))\n-\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n-   (parallel [(set (reg:CC_C CC_REGNUM)\n-\t\t   (ne:CC_C\n-\t\t    (plus:DI (plus:DI\n-\t\t\t      (zero_extend:DI (match_dup 4))\n-\t\t\t      (zero_extend:DI (match_dup 5)))\n-\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n-\t\t    (plus:DI (zero_extend:DI\n-\t\t\t      (plus:SI (match_dup 4) (match_dup 5)))\n-\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n-\t     (set (match_dup 3) (plus:SI\n-\t\t\t\t (plus:SI (match_dup 4) (match_dup 5))\n-\t\t\t\t (ltu:SI (reg:CC_C CC_REGNUM)\n-\t\t\t\t\t (const_int 0))))])]\n-  \"\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[5] = gen_highpart (SImode, operands[2]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-  }\"\n+  \"adds\\\\t%Q0, %Q1, %Q2;adcs\\\\t%R0, %R1, %R2\"\n  [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n )\n \n-(define_insn \"*addsi3_compareC_upper\"\n-  [(set (reg:CC_C CC_REGNUM)\n-\t(ne:CC_C\n-\t  (plus:DI\n-\t   (plus:DI\n-\t    (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t    (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n-\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n-\t  (plus:DI (zero_extend:DI\n-\t\t    (plus:SI (match_dup 1) (match_dup 2)))\n-\t\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI\n-\t (plus:SI (match_dup 1) (match_dup 2))\n-\t (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n-  \"TARGET_32BIT\"\n-  \"adcs%?\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"adcs_reg\")]\n-)\n-\n (define_insn \"addsi3_compareC\"\n    [(set (reg:CC_C CC_REGNUM)\n-\t (ne:CC_C\n-\t  (plus:DI\n-\t   (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n-\t  (zero_extend:DI\n-\t   (plus:SI (match_dup 1) (match_dup 2)))))\n+\t (compare:CC_C (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t(match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t       (match_dup 1)))\n     (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t (plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n@@ -1094,31 +921,15 @@\n   DONE;\n })\n \n-(define_insn_and_split \"subdi3_compare1\"\n+(define_insn \"subdi3_compare1\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n-\t  (match_operand:DI 1 \"register_operand\" \"r\")\n-\t  (match_operand:DI 2 \"register_operand\" \"r\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t  (match_operand:DI 1 \"s_register_operand\" \"r\")\n+\t  (match_operand:DI 2 \"s_register_operand\" \"r\")))\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n \t(minus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 4) (match_dup 5)))\n-\t     (set (match_dup 3) (minus:SI (minus:SI (match_dup 4) (match_dup 5))\n-\t\t\t       (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))])]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[5] = gen_highpart (SImode, operands[2]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-   }\n+  \"subs\\\\t%Q0, %Q1, %Q2;sbcs\\\\t%R0, %R1, %R2\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n@@ -1175,49 +986,6 @@\n    (set_attr \"type\" \"adc_imm\")]\n )\n \n-(define_insn \"*subsi3_carryin_compare\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"s_register_operand\" \"r\")))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (minus:SI (match_dup 1) (match_dup 2))\n-\t\t  (match_operand:SI 3 \"arm_borrow_operation\" \"\")))]\n-  \"TARGET_32BIT\"\n-  \"sbcs\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"adcs_reg\")]\n-)\n-\n-(define_insn \"*subsi3_carryin_compare_const\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 1 \"reg_or_int_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"const_int_I_operand\" \"I\")))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (plus:SI\n-\t\t   (match_dup 1)\n-\t\t   (match_operand:SI 3 \"arm_neg_immediate_operand\" \"L\"))\n-\t\t  (match_operand:SI 4 \"arm_borrow_operation\" \"\")))]\n-  \"TARGET_32BIT\n-   && (INTVAL (operands[2])\n-       == trunc_int_for_mode (-INTVAL (operands[3]), SImode))\"\n-  \"sbcs\\\\t%0, %1, #%n3\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"adcs_imm\")]\n-)\n-\n-(define_insn \"*subsi3_carryin_compare_const0\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_operand:SI 1 \"reg_or_int_operand\" \"r\")\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (match_dup 1)\n-\t\t  (match_operand:SI 2 \"arm_borrow_operation\" \"\")))]\n-  \"TARGET_32BIT\"\n-  \"sbcs\\\\t%0, %1, #0\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"adcs_imm\")]\n-)\n-\n (define_insn \"*subsi3_carryin_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (minus:SI\n@@ -1286,166 +1054,19 @@\n  [(parallel\n    [(set (match_operand:DI            0 \"s_register_operand\")\n \t  (minus:DI (match_operand:DI 1 \"s_register_operand\")\n-\t            (match_operand:DI 2 \"s_register_operand\")))\n+\t\t    (match_operand:DI 2 \"s_register_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n \")\n \n-(define_insn_and_split \"*arm_subdi3\"\n-  [(set (match_operand:DI           0 \"arm_general_register_operand\" \"=&r,&r,&r\")\n+(define_insn \"*arm_subdi3\"\n+  [(set (match_operand:DI 0 \"arm_general_register_operand\" \"=&r,&r,&r\")\n \t(minus:DI (match_operand:DI 1 \"arm_general_register_operand\" \"0,r,0\")\n \t\t  (match_operand:DI 2 \"arm_general_register_operand\" \"r,0,0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\"  ; \"subs\\\\t%Q0, %Q1, %Q2\\;sbc\\\\t%R0, %R1, %R2\"\n-  \"TARGET_32BIT\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (minus:SI (minus:SI (match_dup 4) (match_dup 5))\n-\t\t\t       (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[5] = gen_highpart (SImode, operands[2]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-   }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*subdi_di_zesidi\"\n-  [(set (match_operand:DI           0 \"s_register_operand\" \"=&r,&r\")\n-\t(minus:DI (match_operand:DI 1 \"s_register_operand\"  \"0,r\")\n-\t\t  (zero_extend:DI\n-\t\t   (match_operand:SI 2 \"s_register_operand\"  \"r,r\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"#\"   ; \"subs\\\\t%Q0, %Q1, %2\\;sbc\\\\t%R0, %R1, #0\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (minus:SI (match_dup 4)\n-\t\t\t\t(ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-   }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*subdi_di_sesidi\"\n-  [(set (match_operand:DI            0 \"s_register_operand\" \"=&r,&r\")\n-\t(minus:DI (match_operand:DI  1 \"s_register_operand\"  \"0,r\")\n-\t\t  (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"s_register_operand\"  \"r,r\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"#\"   ; \"subs\\\\t%Q0, %Q1, %2\\;sbc\\\\t%R0, %R1, %2, asr #31\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (minus:SI (minus:SI (match_dup 4)\n-                                         (ashiftrt:SI (match_dup 2)\n-                                                      (const_int 31)))\n-                                (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*subdi_zesidi_di\"\n-  [(set (match_operand:DI            0 \"s_register_operand\" \"=&r,&r\")\n-\t(minus:DI (zero_extend:DI\n-\t\t   (match_operand:SI 2 \"s_register_operand\"  \"r,r\"))\n-\t\t  (match_operand:DI  1 \"s_register_operand\" \"0,r\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\"\n-  \"#\"   ; \"rsbs\\\\t%Q0, %Q1, %2\\;rsc\\\\t%R0, %R1, #0\"\n-        ; is equivalent to:\n-        ; \"subs\\\\t%Q0, %2, %Q1\\;rsc\\\\t%R0, %R1, #0\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 2) (match_dup 1)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 1)))])\n-   (set (match_dup 3) (minus:SI (minus:SI (const_int 0) (match_dup 4))\n-\t\t\t       (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*subdi_sesidi_di\"\n-  [(set (match_operand:DI            0 \"s_register_operand\" \"=&r,&r\")\n-\t(minus:DI (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"s_register_operand\"   \"r,r\"))\n-\t\t  (match_operand:DI  1 \"s_register_operand\"  \"0,r\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_ARM\"\n-  \"#\"   ; \"rsbs\\\\t%Q0, %Q1, %2\\;rsc\\\\t%R0, %R1, %2, asr #31\"\n-        ; is equivalent to:\n-        ; \"subs\\\\t%Q0, %2, %Q1\\;rsc\\\\t%R0, %R1, %2, asr #31\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 2) (match_dup 1)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 1)))])\n-   (set (match_dup 3) (minus:SI (minus:SI\n-                                (ashiftrt:SI (match_dup 2)\n-                                             (const_int 31))\n-                                (match_dup 4))\n-\t\t\t       (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[4] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]\n-)\n-\n-(define_insn_and_split \"*subdi_zesidi_zesidi\"\n-  [(set (match_operand:DI            0 \"s_register_operand\" \"=r\")\n-\t(minus:DI (zero_extend:DI\n-\t\t   (match_operand:SI 1 \"s_register_operand\"  \"r\"))\n-\t\t  (zero_extend:DI\n-\t\t   (match_operand:SI 2 \"s_register_operand\"  \"r\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"#\"   ; \"subs\\\\t%Q0, %1, %2\\;sbc\\\\t%R0, %1, %1\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n-\t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n-   (set (match_dup 3) (minus:SI (minus:SI (match_dup 1) (match_dup 1))\n-\t\t\t       (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-       operands[3] = gen_highpart (SImode, operands[0]);\n-       operands[0] = gen_lowpart (SImode, operands[0]);\n-  }\n+  \"subs\\\\t%Q0, %Q1, %Q2\\;sbc\\\\t%R0, %R1, %R2\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n@@ -4035,8 +3656,8 @@\n })\n \n (define_expand \"negvdi3\"\n-  [(match_operand:DI 0 \"register_operand\")\n-   (match_operand:DI 1 \"register_operand\")\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n    (match_operand 2 \"\")]\n   \"TARGET_ARM\"\n {\n@@ -4047,34 +3668,19 @@\n })\n \n \n-(define_insn_and_split \"negdi2_compare\"\n+(define_insn \"negdi2_compare\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC\n \t  (const_int 0)\n-\t  (match_operand:DI 1 \"register_operand\" \"0,r\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r,&r\")\n+\t  (match_operand:DI 1 \"register_operand\" \"r,r\")))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r,&r\")\n \t(minus:DI (const_int 0) (match_dup 1)))]\n   \"TARGET_ARM\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (const_int 0) (match_dup 1)))\n-\t      (set (match_dup 0) (minus:SI (const_int 0)\n-\t\t\t\t\t   (match_dup 1)))])\n-   (parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (const_int 0) (match_dup 3)))\n-\t     (set (match_dup 2)\n-\t\t  (minus:SI\n-\t\t   (minus:SI (const_int 0) (match_dup 3))\n-\t\t   (ltu:SI (reg:CC CC_REGNUM)\n-\t\t\t   (const_int 0))))])]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n+  \"@\n+   rsbs\\\\t%Q0, %Q1, #0;rscs\\\\t%R0, %R1, #0\n+   rsbs\\\\t%Q0, %Q1, #0;sbcs\\\\t%R0, %R1, %R1, lsl #1\"\n   [(set_attr \"conds\" \"set\")\n+   (set_attr \"arch\" \"a,t2\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n )\n@@ -4088,45 +3694,20 @@\n )\n \n ;; The constraints here are to prevent a *partial* overlap (where %Q0 == %R1).\n-;; The first alternative allows the common case of a *full* overlap.\n-(define_insn_and_split \"*negdi2_insn\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"=r,&r\")\n-\t(neg:DI (match_operand:DI 1 \"s_register_operand\"  \"0,r\")))\n+(define_insn \"*negdi2_insn\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n+\t(neg:DI (match_operand:DI 1 \"s_register_operand\"  \"r,r\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_32BIT\"\n-  \"#\"\t; rsbs %Q0, %Q1, #0; rsc %R0, %R1, #0\t       (ARM)\n-\t; negs %Q0, %Q1    ; sbc %R0, %R1, %R1, lsl #1 (Thumb-2)\n-  \"TARGET_32BIT\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (const_int 0) (match_dup 1)))\n-\t      (set (match_dup 0) (minus:SI (const_int 0) (match_dup 1)))])\n-   (set (match_dup 2) (minus:SI (minus:SI (const_int 0) (match_dup 3))\n-                                (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    operands[3] = gen_highpart (SImode, operands[1]);\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-  }\n+  \"@\n+   rsbs\\\\t%Q0, %Q1, #0; rsc\\\\t%R0, %R1, #0\n+   negs\\\\t%Q0, %Q1; sbc\\\\t%R0, %R1, %R1, lsl #1\"\n   [(set_attr \"conds\" \"clob\")\n+   (set_attr \"arch\" \"a,t2\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]\n )\n \n-(define_insn \"*negsi2_carryin_compare\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (const_int 0)\n-\t\t    (match_operand:SI 1 \"s_register_operand\" \"r\")))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI (minus:SI (const_int 0)\n-\t\t\t    (match_dup 1))\n-\t\t  (match_operand:SI 2 \"arm_borrow_operation\" \"\")))]\n-  \"TARGET_ARM\"\n-  \"rscs\\\\t%0, %1, #0\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"alus_imm\")]\n-)\n-\n (define_expand \"negsi2\"\n   [(set (match_operand:SI         0 \"s_register_operand\")\n \t(neg:SI (match_operand:SI 1 \"s_register_operand\")))]\n@@ -4249,29 +3830,6 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n-(define_insn_and_split \"*negdi_zero_extendsidi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r,&r\")\n-\t(neg:DI (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"0,r\"))))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_32BIT\"\n-  \"#\" ; \"rsbs\\\\t%Q0, %1, #0\\;sbc\\\\t%R0,%R0,%R0\"\n-      ;; Don't care what register is input to sbc,\n-      ;; since we just need to propagate the carry.\n-  \"&& reload_completed\"\n-  [(parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (const_int 0) (match_dup 1)))\n-\t      (set (match_dup 0) (minus:SI (const_int 0) (match_dup 1)))])\n-   (set (match_dup 2) (minus:SI (minus:SI (match_dup 2) (match_dup 2))\n-\t\t\t\t(ltu:SI (reg:CC CC_REGNUM) (const_int 0))))]\n-  {\n-    operands[2] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-  }\n-  [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multiple\")]   ;; length in thumb is 4\n-)\n-\n ;; abssi2 doesn't really clobber the condition codes if a different register\n ;; is being set.  To keep things simple, assume during rtl manipulations that\n ;; it does, but tell the final scan operator the truth.  Similarly for\n@@ -6824,42 +6382,13 @@\n ;; if-conversion cannot reduce to a conditional compare, so we do\n ;; that directly.\n \n-(define_insn_and_split \"*arm_cmpdi_insn\"\n+(define_insn \"*arm_cmpdi_insn\"\n   [(set (reg:CC_NCV CC_REGNUM)\n \t(compare:CC_NCV (match_operand:DI 0 \"s_register_operand\" \"r\")\n \t\t\t(match_operand:DI 1 \"arm_di_operand\"\t   \"rDi\")))\n    (clobber (match_scratch:SI 2 \"=r\"))]\n   \"TARGET_32BIT\"\n-  \"#\"   ; \"cmp\\\\t%Q0, %Q1\\;sbcs\\\\t%2, %R0, %R1\"\n-  \"&& reload_completed\"\n-  [(set (reg:CC CC_REGNUM)\n-\t(compare:CC (match_dup 0) (match_dup 1)))\n-   (parallel [(set (reg:CC CC_REGNUM)\n-\t\t   (compare:CC (match_dup 3) (match_dup 4)))\n-\t      (set (match_dup 2)\n-\t\t   (minus:SI (match_dup 5)\n-\t\t\t     (ltu:SI (reg:CC CC_REGNUM) (const_int 0))))])]\n-  {\n-    operands[3] = gen_highpart (SImode, operands[0]);\n-    operands[0] = gen_lowpart (SImode, operands[0]);\n-    if (CONST_INT_P (operands[1]))\n-      {\n-\toperands[4] = gen_highpart_mode (SImode, DImode, operands[1]);\n-\tif (operands[4] == const0_rtx)\n-\t  operands[5] = operands[3];\n-\telse\n-\t  operands[5] = gen_rtx_PLUS (SImode, operands[3],\n-\t\t\t\t      gen_int_mode (-UINTVAL (operands[4]),\n-\t\t\t\t\t\t    SImode));\n-      }\n-    else\n-      {\n-        operands[4] = gen_highpart (SImode, operands[1]);\n-        operands[5] = gen_rtx_MINUS (SImode, operands[3], operands[4]);\n-      }\n-    operands[1] = gen_lowpart (SImode, operands[1]);\n-    operands[2] = gen_lowpart (SImode, operands[2]);\n-  }\n+  \"cmp\\\\t%Q0, %Q1\\;sbcs\\\\t%2, %R0, %R1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"type\" \"multiple\")]"}, {"sha": "0c5b6e4180dbdf649fd158181ca6769e3a949be6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -1,3 +1,10 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/negdi-3.c: Add XFAILS.\n+\t* gcc.target/arm/pr3447-1.c: Likewise.\n+\t* gcc.target/arm/pr3447-3.c: Likewise.\n+\t* gcc.target/arm/pr3447-4.c: Likewise.\n+\n 2019-10-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/69455"}, {"sha": "3f6f2d1c2bb640d7a6bbddd41210511dbcdddbcc", "filename": "gcc/testsuite/gcc.target/arm/negdi-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-3.c?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -11,7 +11,7 @@ Expected output:\n         rsbs    r0, r0, #0\n         sbc     r1, r1, r1\n */\n-/* { dg-final { scan-assembler-times \"rsb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"sbc\" 1 } } */\n-/* { dg-final { scan-assembler-times \"mov\" 0 } } */\n-/* { dg-final { scan-assembler-times \"rsc\" 0 } } */\n+/* { dg-final { scan-assembler-times \"rsb\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"sbc\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"mov\" 0 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"rsc\" 0 { xfail *-*-* } } } */"}, {"sha": "0fd98b791feb5d0ef61a25d4ed1cb89c47ea1264", "filename": "gcc/testsuite/gcc.target/arm/pr53447-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-1.c?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O2\" }  */\n /* { dg-require-effective-target arm32 } */\n-/* { dg-final { scan-assembler-not \"mov\" } } */\n+/* { dg-final { scan-assembler-not \"mov\" { xfail *-*-* } } } */\n \n void t0p(long long * p)\n {"}, {"sha": "79d3691ee14cb6dd5a798166378f1615266ead48", "filename": "gcc/testsuite/gcc.target/arm/pr53447-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-3.c?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O2\" }  */\n /* { dg-require-effective-target arm32 } */\n-/* { dg-final { scan-assembler-not \"mov\" } } */\n+/* { dg-final { scan-assembler-not \"mov\" { xfail *-*-* } } } */\n \n \n void t0p(long long * p)"}, {"sha": "bfa20df7ccd4e6df92bece852bb9c09ffd9433ad", "filename": "gcc/testsuite/gcc.target/arm/pr53447-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769e3f3ac65d8d59bd8cc73aebd93af588388d2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr53447-4.c?ref=1769e3f3ac65d8d59bd8cc73aebd93af588388d2", "patch": "@@ -1,6 +1,6 @@\n /* { dg-options \"-O2\" }  */\n /* { dg-require-effective-target arm32 } */\n-/* { dg-final { scan-assembler-not \"mov\" } } */\n+/* { dg-final { scan-assembler-not \"mov\" { xfail *-*-* } } } */\n \n \n void t0p(long long * p)"}]}