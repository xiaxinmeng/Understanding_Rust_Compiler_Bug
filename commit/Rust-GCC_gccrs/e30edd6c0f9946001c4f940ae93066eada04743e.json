{"sha": "e30edd6c0f9946001c4f940ae93066eada04743e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMwZWRkNmMwZjk5NDYwMDFjNGY5NDBhZTkzMDY2ZWFkYTA0NzQzZQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-11-24T19:08:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-11-24T19:08:20Z"}, "message": "caller-save.c: (this_insn_sets): Move into: (save_call_clobbered_regs).\n\n2005-11-24  J\"orn Rennecke <joern.rennecke@st.com>\n\n\t* caller-save.c: (this_insn_sets): Move into:\n\t(save_call_clobbered_regs).\n\t(mark_set_regs): Get this_insn_sets from data.\n\n\t(save_call_clobbered_regs): Take sets of the return value by\n\tsibcalls into account.\n\nFrom-SVN: r107469", "tree": {"sha": "371ae3d4cba6576f6fe08808215f9e3523b57ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/371ae3d4cba6576f6fe08808215f9e3523b57ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e30edd6c0f9946001c4f940ae93066eada04743e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30edd6c0f9946001c4f940ae93066eada04743e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30edd6c0f9946001c4f940ae93066eada04743e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30edd6c0f9946001c4f940ae93066eada04743e/comments", "author": null, "committer": null, "parents": [{"sha": "8a99f6f92fd255690cdc0a1712c7c2f7e1bdcfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a99f6f92fd255690cdc0a1712c7c2f7e1bdcfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a99f6f92fd255690cdc0a1712c7c2f7e1bdcfe8"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "0b15eebef5b1b1a0f0b237bb09a212abdc808c0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30edd6c0f9946001c4f940ae93066eada04743e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30edd6c0f9946001c4f940ae93066eada04743e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e30edd6c0f9946001c4f940ae93066eada04743e", "patch": "@@ -1,3 +1,12 @@\n+2005-11-24  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* caller-save.c: (this_insn_sets): Move into:\n+\t(save_call_clobbered_regs).\n+\t(mark_set_regs): Get this_insn_sets from data.\n+\n+\t(save_call_clobbered_regs): Take sets of the return value by\n+\tsibcalls into account.\n+\n 2005-11-24  J\"orn Rennecke <joern.rennecke@st.com>\n \tPR target/21623:\n "}, {"sha": "ea85044cfec96cfd04762a5f18a16c78b1930f70", "filename": "gcc/caller-save.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30edd6c0f9946001c4f940ae93066eada04743e/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30edd6c0f9946001c4f940ae93066eada04743e/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=e30edd6c0f9946001c4f940ae93066eada04743e", "patch": "@@ -83,10 +83,6 @@ static int n_regs_saved;\n    insn.  */\n static HARD_REG_SET referenced_regs;\n \n-/* Computed in mark_set_regs, holds all registers set by the current\n-   instruction.  */\n-static HARD_REG_SET this_insn_sets;\n-\n \n static void mark_set_regs (rtx, rtx, void *);\n static void mark_referenced_regs (rtx);\n@@ -370,6 +366,10 @@ save_call_clobbered_regs (void)\n   struct insn_chain *chain, *next;\n   enum machine_mode save_mode [FIRST_PSEUDO_REGISTER];\n \n+  /* Computed in mark_set_regs, holds all registers set by the current\n+     instruction.  */\n+  HARD_REG_SET this_insn_sets;\n+\n   CLEAR_HARD_REG_SET (hard_regs_saved);\n   n_regs_saved = 0;\n \n@@ -448,7 +448,12 @@ save_call_clobbered_regs (void)\n \t\t multi-hard-reg pseudo; then the pseudo is considered live\n \t\t during the call, but the subreg that is set isn't.  */\n \t      CLEAR_HARD_REG_SET (this_insn_sets);\n-\t      note_stores (PATTERN (insn), mark_set_regs, NULL);\n+\t      note_stores (PATTERN (insn), mark_set_regs, &this_insn_sets);\n+\t      /* Sibcalls are considered to set the return value,\n+\t\t compare flow.c:propagate_one_insn.  */\n+\t      if (SIBLING_CALL_P (insn) && current_function_return_rtx)\n+\t\tmark_set_regs (current_function_return_rtx, NULL_RTX,\n+\t\t\t       &this_insn_sets);\n \n \t      /* Compute which hard regs must be saved before this call.  */\n \t      AND_COMPL_HARD_REG_SET (hard_regs_to_save, call_fixed_reg_set);\n@@ -484,16 +489,17 @@ save_call_clobbered_regs (void)\n     }\n }\n \n-/* Here from note_stores when an insn stores a value in a register.\n+/* Here from note_stores, or directly from save_call_clobbered_regs, when\n+   an insn stores a value in a register.\n    Set the proper bit or bits in this_insn_sets.  All pseudos that have\n    been assigned hard regs have had their register number changed already,\n    so we can ignore pseudos.  */\n static void\n-mark_set_regs (rtx reg, rtx setter ATTRIBUTE_UNUSED,\n-\t       void *data ATTRIBUTE_UNUSED)\n+mark_set_regs (rtx reg, rtx setter ATTRIBUTE_UNUSED, void *data)\n {\n   int regno, endregno, i;\n   enum machine_mode mode = GET_MODE (reg);\n+  HARD_REG_SET *this_insn_sets = data;\n \n   if (GET_CODE (reg) == SUBREG)\n     {\n@@ -511,7 +517,7 @@ mark_set_regs (rtx reg, rtx setter ATTRIBUTE_UNUSED,\n   endregno = regno + hard_regno_nregs[regno][mode];\n \n   for (i = regno; i < endregno; i++)\n-    SET_HARD_REG_BIT (this_insn_sets, i);\n+    SET_HARD_REG_BIT (*this_insn_sets, i);\n }\n \n /* Here from note_stores when an insn stores a value in a register."}]}