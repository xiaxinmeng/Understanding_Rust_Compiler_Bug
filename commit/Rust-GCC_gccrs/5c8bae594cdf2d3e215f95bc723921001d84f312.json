{"sha": "5c8bae594cdf2d3e215f95bc723921001d84f312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4YmFlNTk0Y2RmMmQzZTIxNWY5NWJjNzIzOTIxMDAxZDg0ZjMxMg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-01-23T20:15:56Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-01-23T20:15:56Z"}, "message": "re PR rtl-optimization/64317 (Ineffective allocation of PIC base register)\n\n2015-01-23  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/64317\n\t* lra-lives.c (make_hard_regno_born): Add parameter.  Don't make\n\tREAL_PIC_OFFSET_TABLE_REGNUM conflicting with pic offset pseudo.\n\t(mark_regno_live, process_bb_lives): Pass new paramater value to\n\tmake_hard_regno_born.\n\n2015-01-23  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/64317\n\t* gcc.target/i386/pr64317.c: New test.\n\nFrom-SVN: r220060", "tree": {"sha": "451cc1f1d8cf2a23371918dfd5368bbda134ce06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/451cc1f1d8cf2a23371918dfd5368bbda134ce06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8bae594cdf2d3e215f95bc723921001d84f312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8bae594cdf2d3e215f95bc723921001d84f312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8bae594cdf2d3e215f95bc723921001d84f312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8bae594cdf2d3e215f95bc723921001d84f312/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c4d60f80aae979c4c317e5274babd404429f4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4d60f80aae979c4c317e5274babd404429f4cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4d60f80aae979c4c317e5274babd404429f4cf"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "57d08a886bf5c3740f27293bd0320d09c86affa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c8bae594cdf2d3e215f95bc723921001d84f312", "patch": "@@ -1,3 +1,11 @@\n+2015-01-23  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/64317\n+\t* lra-lives.c (make_hard_regno_born): Add parameter.  Don't make\n+\tREAL_PIC_OFFSET_TABLE_REGNUM conflicting with pic offset pseudo.\n+\t(mark_regno_live, process_bb_lives): Pass new paramater value to\n+\tmake_hard_regno_born.\n+\n 2015-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/63637"}, {"sha": "9dfffb6f28788b22df01b9922faa8463065bee04", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=5c8bae594cdf2d3e215f95bc723921001d84f312", "patch": "@@ -264,10 +264,12 @@ lra_intersected_live_ranges_p (lra_live_range_t r1, lra_live_range_t r2)\n }\n \n /* The function processing birth of hard register REGNO.  It updates\n-   living hard regs, conflict hard regs for living pseudos, and\n-   START_LIVING.  */\n+   living hard regs, START_LIVING, and conflict hard regs for living\n+   pseudos.  Conflict hard regs for the pic pseudo is not updated if\n+   REGNO is REAL_PIC_OFFSET_TABLE_REGNUM and CHECK_PIC_PSEUDO_P is\n+   true.  */\n static void\n-make_hard_regno_born (int regno)\n+make_hard_regno_born (int regno, bool check_pic_pseudo_p ATTRIBUTE_UNUSED)\n {\n   unsigned int i;\n \n@@ -277,7 +279,13 @@ make_hard_regno_born (int regno)\n   SET_HARD_REG_BIT (hard_regs_live, regno);\n   sparseset_set_bit (start_living, regno);\n   EXECUTE_IF_SET_IN_SPARSESET (pseudos_live, i)\n-    SET_HARD_REG_BIT (lra_reg_info[i].conflict_hard_regs, regno);\n+#ifdef REAL_PIC_OFFSET_TABLE_REGNUM\n+    if (! check_pic_pseudo_p\n+\t|| regno != REAL_PIC_OFFSET_TABLE_REGNUM\n+\t|| pic_offset_table_rtx == NULL\n+\t|| i != REGNO (pic_offset_table_rtx))\n+#endif\n+      SET_HARD_REG_BIT (lra_reg_info[i].conflict_hard_regs, regno);\n }\n \n /* Process the death of hard register REGNO.  This updates\n@@ -352,7 +360,7 @@ mark_regno_live (int regno, machine_mode mode, int point)\n       for (last = regno + hard_regno_nregs[regno][mode];\n \t   regno < last;\n \t   regno++)\n-\tmake_hard_regno_born (regno);\n+\tmake_hard_regno_born (regno, false);\n     }\n   else\n     {\n@@ -833,7 +841,7 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \n       for (reg = curr_static_id->hard_regs; reg != NULL; reg = reg->next)\n \tif (reg->type != OP_IN)\n-\t  make_hard_regno_born (reg->regno);\n+\t  make_hard_regno_born (reg->regno, false);\n \n       sparseset_copy (unused_set, start_living);\n \n@@ -892,12 +900,13 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \n       for (reg = curr_static_id->hard_regs; reg != NULL; reg = reg->next)\n \tif (reg->type == OP_IN)\n-\t  make_hard_regno_born (reg->regno);\n+\t  make_hard_regno_born (reg->regno, false);\n \n       if (curr_id->arg_hard_regs != NULL)\n-\t/* Make argument hard registers live.  */\n+\t/* Make argument hard registers live.  Don't create conflict\n+\t   of used REAL_PIC_OFFSET_TABLE_REGNUM and the pic pseudo.  */\n \tfor (i = 0; (regno = curr_id->arg_hard_regs[i]) >= 0; i++)\n-\t  make_hard_regno_born (regno);\n+\t  make_hard_regno_born (regno, true);\n \n       sparseset_and_compl (dead_set, start_living, start_dying);\n \n@@ -953,7 +962,7 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \n \tif (regno == INVALID_REGNUM)\n \t  break;\n-\tmake_hard_regno_born (regno);\n+\tmake_hard_regno_born (regno, false);\n       }\n #endif\n \n@@ -968,15 +977,15 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n       EXECUTE_IF_SET_IN_SPARSESET (pseudos_live, px)\n \tlra_reg_info[px].no_stack_p = true;\n       for (px = FIRST_STACK_REG; px <= LAST_STACK_REG; px++)\n-\tmake_hard_regno_born (px);\n+\tmake_hard_regno_born (px, false);\n #endif\n       /* No need to record conflicts for call clobbered regs if we\n \t have nonlocal labels around, as we don't ever try to\n \t allocate such regs in this case.  */\n       if (!cfun->has_nonlocal_label && bb_has_abnormal_call_pred (bb))\n \tfor (px = 0; px < FIRST_PSEUDO_REGISTER; px++)\n \t  if (call_used_regs[px])\n-\t    make_hard_regno_born (px);\n+\t    make_hard_regno_born (px, false);\n     }\n \n   bool live_change_p = false;"}, {"sha": "ef497e476357153f81324818dbb251020b83159d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c8bae594cdf2d3e215f95bc723921001d84f312", "patch": "@@ -1,3 +1,8 @@\n+2015-01-23  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/64317\n+\t* gcc.target/i386/pr64317.c: New test.\n+\n 2015-01-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/63637"}, {"sha": "46c3c6f6683cb6339691013e24f5c62df32298b4", "filename": "gcc/testsuite/gcc.target/i386/pr64317.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8bae594cdf2d3e215f95bc723921001d84f312/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64317.c?ref=5c8bae594cdf2d3e215f95bc723921001d84f312", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -fPIE -pie\" } */\n+/* { dg-final { scan-assembler \"addl\\[ \\\\t\\]+\\[$\\]_GLOBAL_OFFSET_TABLE_, %ebx\" } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+c@GOT\\[(\\]%ebx\\[)\\]\" } } */\n+/* { dg-final { scan-assembler-not \"movl\\[ \\\\t\\]+\\[0-9]+\\[(\\]%esp\\[)\\], %ebx\" } } */\n+long c;\n+\n+int bar();\n+\n+int foo (unsigned int iters)\n+{\n+  unsigned int i;\n+  \n+  int res = 0;\n+  static long t1;\n+  \n+  for (i = 0; i < iters; i++)\n+    {\n+      res = bar();\n+      t1 = c + res;\n+    }\n+  \n+  return t1 + res;\n+}"}]}