{"sha": "aeaabe7b3cb0ca9b9426468afb838f3d84126349", "node_id": "C_kwDOANBUbNoAKGFlYWFiZTdiM2NiMGNhOWI5NDI2NDY4YWZiODM4ZjNkODQxMjYzNDk", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-09-29T13:26:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:39Z"}, "message": "[Ada] Improve messages on incorrect state refinement in SPARK\n\ngcc/ada/\n\n\t* sem_ch10.adb (Is_Private_Library_Unit): Move query to\n\tSem_Util for sharing.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Add continuation\n\tmessage.\n\t* sem_prag.adb (Analyze_Part_Of): Call new function\n\tIs_Private_Library_Unit.\n\t(Check_Valid_Library_Unit_Pragma): Specialize error messages on\n\tmisplaced pragmas.\n\t(Analyze_Refined_State_In_Decl_Part): Recognize missing Part_Of\n\ton object in private part.\n\t* sem_util.adb (Check_State_Refinements): Add continuation\n\tmessage.\n\t(Find_Placement_In_State_Space): Fix detection of placement,\n\twhich relied wrongly on queries In_Package_Body/In_Private_Part\n\twhich do not provide the right information here for all cases.\n\t(Is_Private_Library_Unit): Move query here for sharing.\n\t* sem_util.ads (Is_Private_Library_Unit): Move query here for\n\tsharing.", "tree": {"sha": "bddc1a3adf94843aac74de2d5196959d59ca7a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bddc1a3adf94843aac74de2d5196959d59ca7a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeaabe7b3cb0ca9b9426468afb838f3d84126349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeaabe7b3cb0ca9b9426468afb838f3d84126349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeaabe7b3cb0ca9b9426468afb838f3d84126349", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeaabe7b3cb0ca9b9426468afb838f3d84126349/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b4069fb7c00564523f822c7fd94210862eeeae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4069fb7c00564523f822c7fd94210862eeeae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4069fb7c00564523f822c7fd94210862eeeae4"}], "stats": {"total": 252, "additions": 194, "deletions": 58}, "files": [{"sha": "f586461b4a8492205f95e87a9a89ea2ccfd1a8f2", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=aeaabe7b3cb0ca9b9426468afb838f3d84126349", "patch": "@@ -2952,23 +2952,6 @@ package body Sem_Ch10 is\n       Par_Lib    : Entity_Id;\n       Par_Spec   : Node_Id;\n \n-      function Is_Private_Library_Unit (Unit : Entity_Id) return Boolean;\n-      --  Returns true if and only if the library unit is declared with\n-      --  an explicit designation of private.\n-\n-      -----------------------------\n-      -- Is_Private_Library_Unit --\n-      -----------------------------\n-\n-      function Is_Private_Library_Unit (Unit : Entity_Id) return Boolean is\n-         Comp_Unit : constant Node_Id := Parent (Unit_Declaration_Node (Unit));\n-\n-      begin\n-         return Private_Present (Comp_Unit);\n-      end Is_Private_Library_Unit;\n-\n-   --  Start of processing for Check_Private_Child_Unit\n-\n    begin\n       if Nkind (Lib_Unit) in N_Package_Body | N_Subprogram_Body then\n          Curr_Unit := Defining_Entity (Unit (Library_Unit (N)));"}, {"sha": "6e799490c10b5e2d3daaff39c17e66e1ddb78c94", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=aeaabe7b3cb0ca9b9426468afb838f3d84126349", "patch": "@@ -759,6 +759,8 @@ package body Sem_Ch7 is\n                  (\"optional package body (not allowed in Ada 95)??\", N);\n             else\n                Error_Msg_N (\"spec of this package does not allow a body\", N);\n+               Error_Msg_N (\"\\either remove the body or add pragma \"\n+                            & \"Elaborate_Body in the spec\", N);\n             end if;\n          end if;\n       end if;"}, {"sha": "1d5cc2535bdf9e57e45d9e69e59734f26fb11cf5", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 103, "deletions": 26, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=aeaabe7b3cb0ca9b9426468afb838f3d84126349", "patch": "@@ -3453,9 +3453,7 @@ package body Sem_Prag is\n \n                Parent_Unit := Pack_Id;\n                while Present (Parent_Unit) loop\n-                  exit when\n-                    Private_Present\n-                      (Parent (Unit_Declaration_Node (Parent_Unit)));\n+                  exit when Is_Private_Library_Unit (Parent_Unit);\n                   Parent_Unit := Scope (Parent_Unit);\n                end loop;\n \n@@ -3503,17 +3501,80 @@ package body Sem_Prag is\n          --  encapsulating state must be declared in the same package.\n \n          elsif Placement = Private_State_Space then\n-            if Scope (Encap_Id) /= Pack_Id then\n-               SPARK_Msg_NE\n-                 (\"indicator Part_Of must denote an abstract state of \"\n-                  & \"package & (SPARK RM 7.2.6(2))\", Indic, Pack_Id);\n \n-               Error_Msg_Name_1 := Chars (Pack_Id);\n-               SPARK_Msg_NE\n-                 (\"\\& is declared in the private part of package %\",\n-                  Indic, Item_Id);\n-               return;\n-            end if;\n+            --  In the case of the abstract state of a nongeneric private\n+            --  child package, it may be encapsulated in the state of a\n+            --  public descendant of its parent package.\n+\n+            declare\n+               function Is_Public_Descendant\n+                 (Child, Ancestor : Entity_Id)\n+                  return Boolean;\n+               --  Return True if Child is a public descendant of Pack\n+\n+               --------------------------\n+               -- Is_Public_Descendant --\n+               --------------------------\n+\n+               function Is_Public_Descendant\n+                 (Child, Ancestor : Entity_Id)\n+                  return Boolean\n+               is\n+                  P : Entity_Id := Child;\n+               begin\n+                  while Is_Child_Unit (P)\n+                    and then not Is_Private_Library_Unit (P)\n+                  loop\n+                     if Scope (P) = Ancestor then\n+                        return True;\n+                     end if;\n+\n+                     P := Scope (P);\n+                  end loop;\n+\n+                  return False;\n+               end Is_Public_Descendant;\n+\n+               --  Local variables\n+\n+               Immediate_Pack_Id : constant Entity_Id := Scope (Item_Id);\n+\n+               Is_State_Of_Private_Child : constant Boolean :=\n+                 Is_Child_Unit (Immediate_Pack_Id)\n+                   and then not Is_Generic_Unit (Immediate_Pack_Id)\n+                   and then Is_Private_Descendant (Immediate_Pack_Id);\n+\n+               Is_OK_Through_Sibling : Boolean := False;\n+\n+            begin\n+               if Ekind (Item_Id) = E_Abstract_State\n+                 and then Is_State_Of_Private_Child\n+                 and then Is_Public_Descendant (Scope (Encap_Id), Pack_Id)\n+               then\n+                  Is_OK_Through_Sibling := True;\n+               end if;\n+\n+               if Scope (Encap_Id) /= Pack_Id\n+                 and then not Is_OK_Through_Sibling\n+               then\n+                  if Is_State_Of_Private_Child then\n+                     SPARK_Msg_NE\n+                       (\"indicator Part_Of must denote abstract state of & \"\n+                        & \"or of its public descendant \"\n+                        & \"(SPARK RM 7.2.6(3))\", Indic, Pack_Id);\n+                  else\n+                     SPARK_Msg_NE\n+                       (\"indicator Part_Of must denote an abstract state of \"\n+                        & \"package & (SPARK RM 7.2.6(2))\", Indic, Pack_Id);\n+                  end if;\n+\n+                  Error_Msg_Name_1 := Chars (Pack_Id);\n+                  SPARK_Msg_NE\n+                    (\"\\& is declared in the private part of package %\",\n+                     Indic, Item_Id);\n+                  return;\n+               end if;\n+            end;\n \n          --  Items declared in the body state space of a package do not need\n          --  Part_Of indicators as the refinement has already been seen.\n@@ -6612,7 +6673,9 @@ package body Sem_Prag is\n \n             elsif Nkind (Parent_Node) = N_Compilation_Unit_Aux then\n                if Plist /= Pragmas_After (Parent_Node) then\n-                  Pragma_Misplaced;\n+                  Error_Pragma\n+                    (\"pragma% misplaced, must be inside or after the \"\n+                     & \"compilation unit\");\n \n                elsif Arg_Count = 0 then\n                   Error_Pragma\n@@ -6679,26 +6742,36 @@ package body Sem_Prag is\n                   Unit_Node := Unit_Declaration_Node (Current_Scope);\n                   Unit_Kind := Nkind (Unit_Node);\n \n-                  if Nkind (Parent (Unit_Node)) /= N_Compilation_Unit then\n-                     Pragma_Misplaced;\n+                  if Unit_Node = Standard_Package_Node then\n+                     Error_Pragma\n+                       (\"pragma% misplaced, must be inside or after the \"\n+                        & \"compilation unit\");\n+\n+                  elsif Nkind (Parent (Unit_Node)) /= N_Compilation_Unit then\n+                     Error_Pragma\n+                       (\"pragma% misplaced, must be on library unit\");\n \n                   elsif Unit_Kind = N_Subprogram_Body\n                     and then not Acts_As_Spec (Unit_Node)\n                   then\n-                     Pragma_Misplaced;\n+                     Error_Pragma\n+                       (\"pragma% misplaced, must be on the subprogram spec\");\n \n                   elsif Nkind (Parent_Node) = N_Package_Body then\n-                     Pragma_Misplaced;\n+                     Error_Pragma\n+                       (\"pragma% misplaced, must be on the package spec\");\n \n                   elsif Nkind (Parent_Node) = N_Package_Specification\n                     and then Plist = Private_Declarations (Parent_Node)\n                   then\n-                     Pragma_Misplaced;\n+                     Error_Pragma\n+                       (\"pragma% misplaced, must be in the public part\");\n \n                   elsif Nkind (Parent_Node) in N_Generic_Declaration\n                     and then Plist = Generic_Formal_Declarations (Parent_Node)\n                   then\n-                     Pragma_Misplaced;\n+                     Error_Pragma\n+                       (\"pragma% misplaced, must not be in formal part\");\n \n                   elsif Arg_Count > 0 then\n                      Analyze (Get_Pragma_Arg (Arg1));\n@@ -28761,13 +28834,17 @@ package body Sem_Prag is\n                         Placement => Placement,\n                         Pack_Id   => Pack_Id);\n \n-                     --  The constituent is part of the visible state of a\n-                     --  private child package, but lacks a Part_Of indicator.\n+                     --  The constituent is either part of the hidden state of\n+                     --  the package or part of the visible state of a private\n+                     --  child package, but lacks a Part_Of indicator.\n \n-                     if Placement = Visible_State_Space\n-                       and then Is_Child_Unit (Pack_Id)\n-                       and then not Is_Generic_Unit (Pack_Id)\n-                       and then Is_Private_Descendant (Pack_Id)\n+                     if (Placement = Private_State_Space\n+                          and then Pack_Id = Spec_Id)\n+                       or else\n+                         (Placement = Visible_State_Space\n+                           and then Is_Child_Unit (Pack_Id)\n+                           and then not Is_Generic_Unit (Pack_Id)\n+                           and then Is_Private_Descendant (Pack_Id))\n                      then\n                         Error_Msg_Name_1 := Chars (State_Id);\n                         SPARK_Msg_NE"}, {"sha": "bd8c88da8656b26bd26a073c1192fe2bfe8459e0", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 85, "deletions": 15, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=aeaabe7b3cb0ca9b9426468afb838f3d84126349", "patch": "@@ -5246,6 +5246,8 @@ package body Sem_Util is\n                     and then not Has_Non_Null_Refinement (State_Id)\n                   then\n                      Error_Msg_N (\"state & requires refinement\", State_Id);\n+                     Error_Msg_N (\"\\package body should have Refined_State \"\n+                                  & \"for state & with constituents\", State_Id);\n                   end if;\n \n                   Next_Elmt (State_Elmt);\n@@ -9586,35 +9588,88 @@ package body Sem_Util is\n       Placement : out State_Space_Kind;\n       Pack_Id   : out Entity_Id)\n    is\n+      function Inside_Package_Body (Id : Entity_Id) return Boolean;\n+      function Inside_Private_Part (Id : Entity_Id) return Boolean;\n+      --  Return True if Id is declared directly within the package body\n+      --  and the package private parts, respectively. We cannot use\n+      --  In_Private_Part/In_Body_Part flags, as these are only set during the\n+      --  analysis of the package itself, while Find_Placement_In_State_Space\n+      --  can be called on an entity of another package.\n+\n+      ------------------------\n+      -- Inside_Package_Body --\n+      ------------------------\n+\n+      function Inside_Package_Body (Id : Entity_Id) return Boolean is\n+         Spec_Id   : constant Entity_Id := Scope (Id);\n+         Body_Decl : constant Opt_N_Package_Body_Id := Package_Body (Spec_Id);\n+         Decl      : constant Node_Id := Enclosing_Declaration (Id);\n+      begin\n+         if Present (Body_Decl)\n+           and then Is_List_Member (Decl)\n+           and then List_Containing (Decl) = Declarations (Body_Decl)\n+         then\n+            return True;\n+         else\n+            return False;\n+         end if;\n+      end Inside_Package_Body;\n+\n+      -------------------------\n+      -- Inside_Private_Part --\n+      -------------------------\n+\n+      function Inside_Private_Part (Id : Entity_Id) return Boolean is\n+         Spec_Id       : constant Entity_Id := Scope (Id);\n+         Private_Decls : constant List_Id :=\n+           Private_Declarations (Package_Specification (Spec_Id));\n+         Decl          : constant Node_Id := Enclosing_Declaration (Id);\n+      begin\n+         if Is_List_Member (Decl)\n+           and then List_Containing (Decl) = Private_Decls\n+         then\n+            return True;\n+\n+         elsif Ekind (Id) = E_Package\n+           and then Is_Private_Library_Unit (Id)\n+         then\n+            return True;\n+\n+         else\n+            return False;\n+         end if;\n+      end Inside_Private_Part;\n+\n+      --  Local variables\n+\n       Context : Entity_Id;\n \n+   --  Start of processing for Find_Placement_In_State_Space\n+\n    begin\n       --  Assume that the item does not appear in the state space of a package\n \n       Placement := Not_In_Package;\n-      Pack_Id   := Empty;\n \n       --  Climb the scope stack and examine the enclosing context\n \n-      Context := Scope (Item_Id);\n-      while Present (Context) and then Context /= Standard_Standard loop\n-         if Is_Package_Or_Generic_Package (Context) then\n-            Pack_Id := Context;\n+      Context := Item_Id;\n+      Pack_Id := Scope (Context);\n+      while Present (Pack_Id) and then Pack_Id /= Standard_Standard loop\n+         if Is_Package_Or_Generic_Package (Pack_Id) then\n \n-            --  A package body is a cut off point for the traversal as the item\n-            --  cannot be visible to the outside from this point on. Note that\n-            --  this test must be done first as a body is also classified as a\n-            --  private part.\n+            --  A package body is a cut off point for the traversal as the\n+            --  item cannot be visible to the outside from this point on.\n \n-            if In_Package_Body (Context) then\n+            if Inside_Package_Body (Context) then\n                Placement := Body_State_Space;\n                return;\n \n             --  The private part of a package is a cut off point for the\n-            --  traversal as the item cannot be visible to the outside from\n-            --  this point on.\n+            --  traversal as the item cannot be visible to the outside\n+            --  from this point on.\n \n-            elsif In_Private_Part (Context) then\n+            elsif Inside_Private_Part (Context) then\n                Placement := Private_State_Space;\n                return;\n \n@@ -9626,9 +9681,11 @@ package body Sem_Util is\n                Placement := Visible_State_Space;\n \n                --  The visible state space of a child unit acts as the proper\n-               --  placement of an item.\n+               --  placement of an item, unless this is a private child unit.\n \n-               if Is_Child_Unit (Context) then\n+               if Is_Child_Unit (Pack_Id)\n+                 and then not Is_Private_Library_Unit (Pack_Id)\n+               then\n                   return;\n                end if;\n             end if;\n@@ -9638,10 +9695,12 @@ package body Sem_Util is\n \n          else\n             Placement := Not_In_Package;\n+            Pack_Id := Empty;\n             return;\n          end if;\n \n          Context := Scope (Context);\n+         Pack_Id := Scope (Context);\n       end loop;\n    end Find_Placement_In_State_Space;\n \n@@ -20308,6 +20367,17 @@ package body Sem_Util is\n       return False;\n    end Is_Preelaborable_Function;\n \n+   -----------------------------\n+   -- Is_Private_Library_Unit --\n+   -----------------------------\n+\n+   function Is_Private_Library_Unit (Unit : Entity_Id) return Boolean is\n+      Comp_Unit : constant Node_Id := Parent (Unit_Declaration_Node (Unit));\n+   begin\n+      return Nkind (Comp_Unit) = N_Compilation_Unit\n+        and then Private_Present (Comp_Unit);\n+   end Is_Private_Library_Unit;\n+\n    ---------------------------------\n    -- Is_Protected_Self_Reference --\n    ---------------------------------"}, {"sha": "8b74ab6fe683000b2f922f7d9774c81b80e013b9", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeaabe7b3cb0ca9b9426468afb838f3d84126349/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=aeaabe7b3cb0ca9b9426468afb838f3d84126349", "patch": "@@ -2276,6 +2276,10 @@ package Sem_Util is\n    --  Is_Non_Preelaborable_Construct takes into account the syntactic\n    --  and semantic properties of N for a more accurate diagnostic.\n \n+   function Is_Private_Library_Unit (Unit : Entity_Id) return Boolean;\n+   --  Returns True if and only if the library unit is declared with an\n+   --  explicit designation of private.\n+\n    function Is_Protected_Self_Reference (N : Node_Id) return Boolean;\n    --  Return True if node N denotes a protected type name which represents\n    --  the current instance of a protected object according to RM 9.4(21/2)."}]}