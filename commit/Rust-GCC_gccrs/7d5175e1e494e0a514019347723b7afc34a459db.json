{"sha": "7d5175e1e494e0a514019347723b7afc34a459db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q1MTc1ZTFlNDk0ZTBhNTE0MDE5MzQ3NzIzYjdhZmMzNGE0NTlkYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-30T14:26:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-30T14:26:32Z"}, "message": "rs6000.h (FIRST_PSEUDO_REGISTER): Increment.\n\n\t* config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Increment.\n\t(DWARF_FRAME_REGISTERS, DWARF_REG_TO_UNWIND_COLUMN): Adjust, so\n\tthat addition of sfp doesn't change these.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS,\n\tREG_ALLOC_ORDER): Add sfp.\n\t(INT_REGNO_P): Include FRAME_POINTER_REGNUM.\n\t(FRAME_POINTER_REGNUM): Define to 113.\n\t(HARD_FRAME_POINTER_REGNUM): Define to 31.\n\t(REG_CLASS_CONTENTS, REGNO_REG_CLASS): Add sfp.\n\t(STARTING_FRAME_OFFSET): Set to 0 for FRAME_GROWS_DOWNWARD.\n\t(ELIMINABLE_REGS): Never eliminate to\n\tFRAME_POINTER_REGNUM, but HARD_FRAME_POINTER_REGNUM\n\tinstead.  Add eliminations from FRAME_POINTER_REGNUM.\n\t(REGNO_OK_FOR_INDEX_P, REGNO_OK_FOR_BASE_P, INT_REG_OK_FOR_INDEX_P):\n\tInclude FRAME_POINTER_REGNUM.\n\t(REGISTER_NAMES): Add sfp.\n\t* config/rs6000/rs6000.c (rs6000_reg_names): Add sfp.\n\t(alt_reg_names): Likewise.\n\t(rs6000_stack_info): Handle FRAME_GROWS_DOWNWARD.\n\t(rs6000_emit_prologue): Use HARD_FRAME_POINTER_REGNUM\n\tinstead of FRAME_POINTER_REGNUM.\n\t(rs6000_initial_elimination_offset): Never eliminate to\n\tFRAME_POINTER_REGNUM, but HARD_FRAME_POINTER_REGNUM\n\tinstead.  Add elimination offsets from FRAME_POINTER_REGNUM.\n\nFrom-SVN: r101467", "tree": {"sha": "37afad04d438e0aff635d77391d0a679796d09d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37afad04d438e0aff635d77391d0a679796d09d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d5175e1e494e0a514019347723b7afc34a459db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5175e1e494e0a514019347723b7afc34a459db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d5175e1e494e0a514019347723b7afc34a459db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d5175e1e494e0a514019347723b7afc34a459db/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e953553580dd2dc3f8d33aa05cd68f302695e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e953553580dd2dc3f8d33aa05cd68f302695e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e953553580dd2dc3f8d33aa05cd68f302695e7a"}], "stats": {"total": 129, "additions": 98, "deletions": 31}, "files": [{"sha": "de9323b5c76c52278d468475ea41123f38443f86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5175e1e494e0a514019347723b7afc34a459db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5175e1e494e0a514019347723b7afc34a459db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d5175e1e494e0a514019347723b7afc34a459db", "patch": "@@ -1,5 +1,30 @@\n 2005-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/rs6000/rs6000.h (FIRST_PSEUDO_REGISTER): Increment.\n+\t(DWARF_FRAME_REGISTERS, DWARF_REG_TO_UNWIND_COLUMN): Adjust, so\n+\tthat addition of sfp doesn't change these.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTERS,\n+\tREG_ALLOC_ORDER): Add sfp.\n+\t(INT_REGNO_P): Include FRAME_POINTER_REGNUM.\n+\t(FRAME_POINTER_REGNUM): Define to 113.\n+\t(HARD_FRAME_POINTER_REGNUM): Define to 31.\n+\t(REG_CLASS_CONTENTS, REGNO_REG_CLASS): Add sfp.\n+\t(STARTING_FRAME_OFFSET): Set to 0 for FRAME_GROWS_DOWNWARD.\n+\t(ELIMINABLE_REGS): Never eliminate to\n+\tFRAME_POINTER_REGNUM, but HARD_FRAME_POINTER_REGNUM\n+\tinstead.  Add eliminations from FRAME_POINTER_REGNUM.\n+\t(REGNO_OK_FOR_INDEX_P, REGNO_OK_FOR_BASE_P, INT_REG_OK_FOR_INDEX_P):\n+\tInclude FRAME_POINTER_REGNUM.\n+\t(REGISTER_NAMES): Add sfp.\n+\t* config/rs6000/rs6000.c (rs6000_reg_names): Add sfp.\n+\t(alt_reg_names): Likewise.\n+\t(rs6000_stack_info): Handle FRAME_GROWS_DOWNWARD.\n+\t(rs6000_emit_prologue): Use HARD_FRAME_POINTER_REGNUM\n+\tinstead of FRAME_POINTER_REGNUM.\n+\t(rs6000_initial_elimination_offset): Never eliminate to\n+\tFRAME_POINTER_REGNUM, but HARD_FRAME_POINTER_REGNUM\n+\tinstead.  Add elimination offsets from FRAME_POINTER_REGNUM.\n+\n \t* config/rs6000/sysv4.h (RS6000_VARARGS_AREA): Only return non-zero\n \tif DEFAULT_ABI == ABI_V4.\n "}, {"sha": "68cd2b73cdb904a3d8f316ca514cedb1579e5e4f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5175e1e494e0a514019347723b7afc34a459db/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5175e1e494e0a514019347723b7afc34a459db/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7d5175e1e494e0a514019347723b7afc34a459db", "patch": "@@ -767,7 +767,9 @@ char rs6000_reg_names[][8] =\n       \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n       \"vrsave\", \"vscr\",\n       /* SPE registers.  */\n-      \"spe_acc\", \"spefscr\"\n+      \"spe_acc\", \"spefscr\",\n+      /* Soft frame pointer.  */\n+      \"sfp\"\n };\n \n #ifdef TARGET_REGNAMES\n@@ -791,7 +793,9 @@ static const char alt_reg_names[][8] =\n   \"%v24\", \"%v25\", \"%v26\", \"%v27\", \"%v28\", \"%v29\", \"%v30\", \"%v31\",\n   \"vrsave\", \"vscr\",\n   /* SPE registers.  */\n-  \"spe_acc\", \"spefscr\"\n+  \"spe_acc\", \"spefscr\",\n+  /* Soft frame pointer.  */\n+  \"sfp\"\n };\n #endif\n \f\n@@ -12100,6 +12104,13 @@ rs6000_stack_info (void)\n   info_ptr->vars_size    = RS6000_ALIGN (get_frame_size (), 8);\n   info_ptr->parm_size    = RS6000_ALIGN (current_function_outgoing_args_size,\n \t\t\t\t\t TARGET_ALTIVEC ? 16 : 8);\n+  if (FRAME_GROWS_DOWNWARD)\n+    info_ptr->vars_size\n+      += RS6000_ALIGN (info_ptr->fixed_size + info_ptr->varargs_size\n+\t\t       + info_ptr->vars_size + info_ptr->parm_size,\n+\t\t       ABI_STACK_BOUNDARY / BITS_PER_UNIT)\n+\t - (info_ptr->fixed_size + info_ptr->varargs_size\n+\t    + info_ptr->vars_size + info_ptr->parm_size);\n \n   if (TARGET_SPE_ABI && info_ptr->spe_64bit_regs_used != 0)\n     info_ptr->spe_gp_size = 8 * (32 - info_ptr->first_gp_reg_save);\n@@ -13767,7 +13778,7 @@ rs6000_emit_prologue (void)\n   /* Set frame pointer, if needed.  */\n   if (frame_pointer_needed)\n     {\n-      insn = emit_move_insn (gen_rtx_REG (Pmode, FRAME_POINTER_REGNUM),\n+      insn = emit_move_insn (gen_rtx_REG (Pmode, HARD_FRAME_POINTER_REGNUM),\n \t\t\t     sp_reg_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n@@ -18228,9 +18239,21 @@ rs6000_initial_elimination_offset (int from, int to)\n   rs6000_stack_t *info = rs6000_stack_info ();\n   HOST_WIDE_INT offset;\n \n-  if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+  if (from == HARD_FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n     offset = info->push_p ? 0 : -info->total_size;\n-  else if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+  else if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+    {\n+      offset = info->push_p ? 0 : -info->total_size;\n+      if (FRAME_GROWS_DOWNWARD)\n+\toffset += info->fixed_size + info->varargs_size\n+\t\t  + info->vars_size + info->parm_size;\n+    }\n+  else if (from == FRAME_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n+    offset = FRAME_GROWS_DOWNWARD\n+\t     ? info->fixed_size + info->varargs_size\n+\t       + info->vars_size + info->parm_size\n+\t     : 0;\n+  else if (from == ARG_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n     offset = info->total_size;\n   else if (from == ARG_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n     offset = info->push_p ? info->total_size : 0;"}, {"sha": "725e9d3b2d492f7225aa6a01562e1efcf83de704", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 45, "deletions": 26, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d5175e1e494e0a514019347723b7afc34a459db/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d5175e1e494e0a514019347723b7afc34a459db/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=7d5175e1e494e0a514019347723b7afc34a459db", "patch": "@@ -568,15 +568,18 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    We also create a pseudo register for float/int conversions, that will\n    really represent the memory location used.  It is represented here as\n    a register, in order to work around problems in allocating stack storage\n-   in inline functions.  */\n+   in inline functions.\n \n-#define FIRST_PSEUDO_REGISTER 113\n+   Another pseudo (not included in DWARF_FRAME_REGISTERS) is soft frame\n+   pointer, which is eventually eliminated in favor of SP or FP.  */\n+\n+#define FIRST_PSEUDO_REGISTER 114\n \n /* This must be included for pre gcc 3.0 glibc compatibility.  */\n #define PRE_GCC3_DWARF_FRAME_REGISTERS 77\n \n /* Add 32 dwarf columns for synthetic SPE registers.  */\n-#define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER + 32)\n+#define DWARF_FRAME_REGISTERS ((FIRST_PSEUDO_REGISTER - 1) + 32)\n \n /* The SPE has an additional 32 synthetic registers, with DWARF debug\n    info numbering for these registers starting at 1200.  While eh_frame\n@@ -592,7 +595,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    We must map them here to avoid huge unwinder tables mostly consisting\n    of unused space.  */\n #define DWARF_REG_TO_UNWIND_COLUMN(r) \\\n-  ((r) > 1200 ? ((r) - 1200 + FIRST_PSEUDO_REGISTER) : (r))\n+  ((r) > 1200 ? ((r) - 1200 + FIRST_PSEUDO_REGISTER - 1) : (r))\n \n /* Use gcc hard register numbering for eh_frame.  */\n #define DWARF_FRAME_REGNUM(REGNO) (REGNO)\n@@ -617,7 +620,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n-   , 1, 1                                          \\\n+   , 1, 1, 1                                       \\\n }\n \n /* 1 for registers not available across function calls.\n@@ -637,7 +640,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    1, 1\t\t\t\t\t\t   \\\n-   , 1, 1                                          \\\n+   , 1, 1, 1                                       \\\n }\n \n /* Like `CALL_USED_REGISTERS' except this macro doesn't require that\n@@ -656,7 +659,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n    0, 0\t\t\t\t\t\t   \\\n-   , 0, 0                                          \\\n+   , 0, 0, 0                                       \\\n }\n \n #define MQ_REGNO     64\n@@ -708,6 +711,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n \tv31 - v20\t(saved; order given to save least number)\n \tvrsave, vscr\t(fixed)\n \tspe_acc, spefscr (fixed)\n+\tsfp\t\t(fixed)\n */\n \n #if FIXED_R2 == 1\n@@ -739,7 +743,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n    96, 95, 94, 93, 92, 91,\t\t\t\t\t\\\n    108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97,\t\\\n    109, 110,\t\t\t\t\t\t\t\\\n-   111, 112\t\t\t\t\t\t\t\\\n+   111, 112, 113\t\t\t\t\t\t\\\n }\n \n /* True if register is floating-point.  */\n@@ -752,7 +756,8 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define CR_REGNO_NOT_CR0_P(N) ((N) >= 69 && (N) <= 75)\n \n /* True if register is an integer register.  */\n-#define INT_REGNO_P(N) ((N) <= 31 || (N) == ARG_POINTER_REGNUM)\n+#define INT_REGNO_P(N) \\\n+  ((N) <= 31 || (N) == ARG_POINTER_REGNUM || (N) == FRAME_POINTER_REGNUM)\n \n /* SPE SIMD registers are just the GPRs.  */\n #define SPE_SIMD_REGNO_P(N) ((N) <= 31)\n@@ -874,7 +879,10 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define STACK_POINTER_REGNUM 1\n \n /* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM 31\n+#define HARD_FRAME_POINTER_REGNUM 31\n+\n+/* Base register for access to local variables of the function.  */\n+#define FRAME_POINTER_REGNUM 113\n \n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms\n@@ -986,26 +994,26 @@ enum reg_class\n #define REG_CLASS_CONTENTS\t\t\t\t\t\t     \\\n {\t\t\t\t\t\t\t\t\t     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000 }, /* NO_REGS */\t     \\\n-  { 0xfffffffe, 0x00000000, 0x00000008, 0x00000000 }, /* BASE_REGS */\t     \\\n-  { 0xffffffff, 0x00000000, 0x00000008, 0x00000000 }, /* GENERAL_REGS */     \\\n+  { 0xfffffffe, 0x00000000, 0x00000008, 0x00020000 }, /* BASE_REGS */\t     \\\n+  { 0xffffffff, 0x00000000, 0x00000008, 0x00020000 }, /* GENERAL_REGS */     \\\n   { 0x00000000, 0xffffffff, 0x00000000, 0x00000000 }, /* FLOAT_REGS */       \\\n   { 0x00000000, 0x00000000, 0xffffe000, 0x00001fff }, /* ALTIVEC_REGS */     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00002000 }, /* VRSAVE_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00004000 }, /* VSCR_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00008000 }, /* SPE_ACC_REGS */     \\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00010000 }, /* SPEFSCR_REGS */     \\\n-  { 0xffffffff, 0xffffffff, 0x00000008, 0x00000000 }, /* NON_SPECIAL_REGS */ \\\n+  { 0xffffffff, 0xffffffff, 0x00000008, 0x00020000 }, /* NON_SPECIAL_REGS */ \\\n   { 0x00000000, 0x00000000, 0x00000001, 0x00000000 }, /* MQ_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000002, 0x00000000 }, /* LINK_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000004, 0x00000000 }, /* CTR_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000006, 0x00000000 }, /* LINK_OR_CTR_REGS */ \\\n   { 0x00000000, 0x00000000, 0x00000007, 0x00002000 }, /* SPECIAL_REGS */     \\\n-  { 0xffffffff, 0x00000000, 0x0000000f, 0x00002000 }, /* SPEC_OR_GEN_REGS */ \\\n+  { 0xffffffff, 0x00000000, 0x0000000f, 0x00022000 }, /* SPEC_OR_GEN_REGS */ \\\n   { 0x00000000, 0x00000000, 0x00000010, 0x00000000 }, /* CR0_REGS */\t     \\\n   { 0x00000000, 0x00000000, 0x00000ff0, 0x00000000 }, /* CR_REGS */\t     \\\n   { 0xffffffff, 0x00000000, 0x0000efff, 0x00000000 }, /* NON_FLOAT_REGS */   \\\n   { 0x00000000, 0x00000000, 0x00001000, 0x00000000 }, /* XER_REGS */\t     \\\n-  { 0xffffffff, 0xffffffff, 0xffffffff, 0x0001ffff }  /* ALL_REGS */\t     \\\n+  { 0xffffffff, 0xffffffff, 0xffffffff, 0x0003ffff }  /* ALL_REGS */\t     \\\n }\n \n /* The same information, inverted:\n@@ -1026,9 +1034,10 @@ enum reg_class\n   : (REGNO) == ARG_POINTER_REGNUM ? BASE_REGS\t\\\n   : (REGNO) == XER_REGNO ? XER_REGS\t\t\\\n   : (REGNO) == VRSAVE_REGNO ? VRSAVE_REGS\t\\\n-  : (REGNO) == VSCR_REGNO ? VRSAVE_REGS\t\\\n+  : (REGNO) == VSCR_REGNO ? VRSAVE_REGS\t\t\\\n   : (REGNO) == SPE_ACC_REGNO ? SPE_ACC_REGS\t\\\n   : (REGNO) == SPEFSCR_REGNO ? SPEFSCR_REGS\t\\\n+  : (REGNO) == FRAME_POINTER_REGNUM ? BASE_REGS\t\\\n   : NO_REGS)\n \n /* The class value for index registers, and the one for base regs.  */\n@@ -1262,10 +1271,12 @@ extern enum rs6000_abi rs6000_current_abi;\t/* available for use by subtarget */\n    outgoing parameter area.  */\n \n #define STARTING_FRAME_OFFSET\t\t\t\t\t\t\\\n-  (RS6000_ALIGN (current_function_outgoing_args_size,\t\t\t\\\n-\t\t TARGET_ALTIVEC ? 16 : 8)\t\t\t\t\\\n-   + RS6000_VARARGS_AREA\t\t\t\t\t\t\\\n-   + RS6000_SAVE_AREA)\n+  (FRAME_GROWS_DOWNWARD\t\t\t\t\t\t\t\\\n+   ? 0\t\t\t\t\t\t\t\t\t\\\n+   : (RS6000_ALIGN (current_function_outgoing_args_size,\t\t\\\n+\t\t    TARGET_ALTIVEC ? 16 : 8)\t\t\t\t\\\n+      + RS6000_VARARGS_AREA\t\t\t\t\t\t\\\n+      + RS6000_SAVE_AREA))\n \n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'.\n@@ -1603,10 +1614,12 @@ typedef struct rs6000_args\n    of eliminable registers.  The \"from\" register number is given first,\n    followed by \"to\".  Eliminations of the same \"from\" register are listed\n    in order of preference.  */\n-#define ELIMINABLE_REGS\t\t\t\t\\\n-{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n- { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n- { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n+#define ELIMINABLE_REGS\t\t\t\t\t\\\n+{{ HARD_FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n+ { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n  { RS6000_PIC_OFFSET_TABLE_REGNUM, RS6000_PIC_OFFSET_TABLE_REGNUM } }\n \n /* Given FROM and TO register numbers, say whether this elimination is allowed.\n@@ -1646,14 +1659,18 @@ typedef struct rs6000_args\n #define REGNO_OK_FOR_INDEX_P(REGNO)\t\t\t\t\\\n ((REGNO) < FIRST_PSEUDO_REGISTER\t\t\t\t\\\n  ? (REGNO) <= 31 || (REGNO) == 67\t\t\t\t\\\n+   || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\t\\\n  : (reg_renumber[REGNO] >= 0\t\t\t\t\t\\\n-    && (reg_renumber[REGNO] <= 31 || reg_renumber[REGNO] == 67)))\n+    && (reg_renumber[REGNO] <= 31 || reg_renumber[REGNO] == 67\t\\\n+\t|| reg_renumber[REGNO] == FRAME_POINTER_REGNUM)))\n \n #define REGNO_OK_FOR_BASE_P(REGNO)\t\t\t\t\\\n ((REGNO) < FIRST_PSEUDO_REGISTER\t\t\t\t\\\n  ? ((REGNO) > 0 && (REGNO) <= 31) || (REGNO) == 67\t\t\\\n+   || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\t\\\n  : (reg_renumber[REGNO] > 0\t\t\t\t\t\\\n-    && (reg_renumber[REGNO] <= 31 || reg_renumber[REGNO] == 67)))\n+    && (reg_renumber[REGNO] <= 31 || reg_renumber[REGNO] == 67\t\\\n+\t|| reg_renumber[REGNO] == FRAME_POINTER_REGNUM)))\n \f\n /* Maximum number of registers that can appear in a valid memory address.  */\n \n@@ -1710,6 +1727,7 @@ typedef struct rs6000_args\n   ((! (STRICT)\t\t\t\t\t\t\t\\\n     && (REGNO (X) <= 31\t\t\t\t\t\t\\\n \t|| REGNO (X) == ARG_POINTER_REGNUM\t\t\t\\\n+\t|| REGNO (X) == FRAME_POINTER_REGNUM\t\t\t\\\n \t|| REGNO (X) >= FIRST_PSEUDO_REGISTER))\t\t\t\\\n    || ((STRICT) && REGNO_OK_FOR_INDEX_P (REGNO (X))))\n \n@@ -2188,6 +2206,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   &rs6000_reg_names[110][0],\t/* vscr  */\t\t\t\t\\\n   &rs6000_reg_names[111][0],\t/* spe_acc */\t\t\t\t\\\n   &rs6000_reg_names[112][0],\t/* spefscr */\t\t\t\t\\\n+  &rs6000_reg_names[113][0],\t/* sfp  */\t\t\t\t\\\n }\n \n /* Table of additional register names to use in user input.  */"}]}