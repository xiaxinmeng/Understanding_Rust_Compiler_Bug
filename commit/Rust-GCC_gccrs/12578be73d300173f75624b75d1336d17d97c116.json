{"sha": "12578be73d300173f75624b75d1336d17d97c116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1NzhiZTczZDMwMDE3M2Y3NTYyNGI3NWQxMzM2ZDE3ZDk3YzExNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-04-29T16:49:53Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-04-29T16:49:53Z"}, "message": "re PR fortran/48810 ([OOP] TPB rejected because module procedure is private)\n\n2011-04-29  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48810\n        * resolve.c (resolve_typebound_generic_call): Don't check access\n        flags of the specific function.\n\n        PR fortran/48800\n        * resolve.c (resolve_formal_arglist): Don't change AS_DEFERRED\n        to AS_ASSUMED_SHAPE for function results.\n        (resolve_fl_var_and_proc): Print also for function results with\n        AS_DEFERRED an error, if they are not a pointer or allocatable.\n        (resolve_types): Make sure arguments of procedures in interface\n        blocks are resolved.\n\n2011-04-29  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48810\n        * gfortran.dg/typebound_proc_22.f90: New.\n\n        PR fortran/48800\n        * gfortran.dg/interface_36.f90: New.\n\nFrom-SVN: r173175", "tree": {"sha": "9644e56190962060adbebba7e4e07176fe353047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9644e56190962060adbebba7e4e07176fe353047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12578be73d300173f75624b75d1336d17d97c116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12578be73d300173f75624b75d1336d17d97c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12578be73d300173f75624b75d1336d17d97c116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12578be73d300173f75624b75d1336d17d97c116/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "176f076f050ffd64e785c6ed12937879d7b0eda4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176f076f050ffd64e785c6ed12937879d7b0eda4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176f076f050ffd64e785c6ed12937879d7b0eda4"}], "stats": {"total": 110, "additions": 107, "deletions": 3}, "files": [{"sha": "4b84b2052d2e0c0e77ab2c5381a73b384020ed60", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=12578be73d300173f75624b75d1336d17d97c116", "patch": "@@ -1,3 +1,17 @@\n+2011-04-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48810\n+\t* resolve.c (resolve_typebound_generic_call): Don't check access\n+\tflags of the specific function.\n+\n+\tPR fortran/48800\n+\t* resolve.c (resolve_formal_arglist): Don't change AS_DEFERRED\n+\tto AS_ASSUMED_SHAPE for function results.\n+\t(resolve_fl_var_and_proc): Print also for function results with\n+\tAS_DEFERRED an error, if they are not a pointer or allocatable.\n+\t(resolve_types): Make sure arguments of procedures in interface\n+\tblocks are resolved.\n+\n 2011-04-29  Michael Matz  <matz@suse.de>\n \n \t* options.c (options.c): Set warn_maybe_uninitialized."}, {"sha": "a19b10399d6c6cb2cd6ccdde87b5a2197df10f4d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=12578be73d300173f75624b75d1336d17d97c116", "patch": "@@ -315,7 +315,8 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t shape until we know if it has the pointer or allocatable attributes.\n       */\n       if (sym->as && sym->as->rank > 0 && sym->as->type == AS_DEFERRED\n-\t  && !(sym->attr.pointer || sym->attr.allocatable))\n+\t  && !(sym->attr.pointer || sym->attr.allocatable)\n+\t  && sym->attr.flavor != FL_PROCEDURE)\n \t{\n \t  sym->as->type = AS_ASSUMED_SHAPE;\n \t  for (i = 0; i < sym->as->rank; i++)\n@@ -5684,7 +5685,7 @@ resolve_typebound_generic_call (gfc_expr* e, const char **name)\n   /* Make sure that we have the right specific instance for the name.  */\n   derived = get_declared_from_expr (NULL, NULL, e);\n \n-  st = gfc_find_typebound_proc (derived, NULL, genname, false, &e->where);\n+  st = gfc_find_typebound_proc (derived, NULL, genname, true, &e->where);\n   if (st)\n     e->value.compcall.tbp = st->n.tb;\n \n@@ -9918,7 +9919,7 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n   else\n     {\n       if (!mp_flag && !sym->attr.allocatable && !sym->attr.pointer\n-\t  && !sym->attr.dummy && sym->ts.type != BT_CLASS && !sym->assoc)\n+\t  && sym->ts.type != BT_CLASS && !sym->assoc)\n \t{\n \t  gfc_error (\"Array '%s' at %L cannot have a deferred shape\",\n \t\t     sym->name, &sym->declared_at);\n@@ -13533,6 +13534,10 @@ resolve_types (gfc_namespace *ns)\n \n   resolve_contained_functions (ns);\n \n+  if (ns->proc_name && ns->proc_name->attr.flavor == FL_PROCEDURE\n+      && ns->proc_name->attr.if_source == IFSRC_IFBODY)\n+    resolve_formal_arglist (ns->proc_name);\n+\n   gfc_traverse_ns (ns, resolve_bind_c_derived_types);\n \n   for (cl = ns->cl_list; cl; cl = cl->next)"}, {"sha": "85a4461319adcacd5fa7c924777c4ddcc525a0fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12578be73d300173f75624b75d1336d17d97c116", "patch": "@@ -1,3 +1,11 @@\n+2011-04-29  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48810\n+\t* gfortran.dg/typebound_proc_22.f90: New.\n+\n+\tPR fortran/48800\n+\t* gfortran.dg/interface_36.f90: New.\n+\n 2011-04-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/48488"}, {"sha": "503229134abe99d8e8eab4961ee1745037366331", "filename": "gcc/testsuite/gfortran.dg/interface_36.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_36.f90?ref=12578be73d300173f75624b75d1336d17d97c116", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48800\n+!\n+! Contributed by Daniel Carrera\n+!\n+     pure function runge_kutta_step(t, r_, dr, h) result(res)\n+         real, intent(in) :: t, r_(:), h\n+         real, dimension(:), allocatable :: k1, k2, k3, k4, res\n+         integer :: N\n+\n+         interface\n+             pure function dr(t, r_)  ! { dg-error \"cannot have a deferred shape\" }\n+                 real, intent(in) :: t, r_(:)\n+                 real :: dr(:)\n+             end function\n+         end interface\n+\n+         N = size(r_)\n+         allocate(k1(N),k2(N),k3(N),k4(N),res(N))\n+\n+         k1 = dr(t, r_)\n+         k2 = dr(t + h/2, r_ + k1*h/2)\n+         k3 = dr(t + h/2, r_ + k2*h/2)\n+         k4 = dr(t + h  , r_ + k3*h)\n+\n+         res = r_ + (k1 + 2*k2 + 2*k3 + k4) * h/6\n+     end function"}, {"sha": "f7691c5f283d15a44c3dc0943b420473d8339ff2", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_22.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12578be73d300173f75624b75d1336d17d97c116/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_22.f90?ref=12578be73d300173f75624b75d1336d17d97c116", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48810\n+!\n+! Contributed by Andrew Baldwin\n+!\n+      module qtest\n+      type foobar\n+        integer :: x\n+        contains\n+        private\n+        procedure :: gimmex\n+        generic, public :: getx => gimmex\n+      end type foobar\n+      contains\n+        function gimmex(foo)\n+          class (foobar) :: foo\n+          integer :: gimmex\n+          gimmex = foo%x\n+        end function gimmex\n+      end module qtest\n+\n+      module qtestPriv\n+      type foobarPriv\n+        integer :: x\n+        contains\n+        private\n+        procedure :: gimmexPriv\n+        generic, private :: getxPriv => gimmexPriv\n+      end type foobarPriv\n+      contains\n+        function gimmexPriv(foo)\n+          class (foobarPriv) :: foo\n+          integer :: gimmex\n+          gimmex = foo%x\n+        end function gimmexPriv\n+      end module qtestPriv\n+\n+      program quicktest\n+      use qtest\n+      use qtestPriv\n+      type (foobar) :: foo\n+      type (foobarPriv) :: fooPriv\n+      integer :: bar\n+      bar = foo%getx()  ! OK\n+      bar = fooPriv%getxPriv() ! { dg-error \" is PRIVATE \" }\n+      end program quicktest\n+\n+! { dg-final { cleanup-modules \"qtest qtestpriv\" } }"}]}