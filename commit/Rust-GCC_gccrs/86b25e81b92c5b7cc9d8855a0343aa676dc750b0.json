{"sha": "86b25e81b92c5b7cc9d8855a0343aa676dc750b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZiMjVlODFiOTJjNWI3Y2M5ZDg4NTVhMDM0M2FhNjc2ZGM3NTBiMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T06:27:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T06:27:12Z"}, "message": "(allocate_dynamic_stack_space) [MUST_ALIGN]:\n\nAlways add to size, always round up to STACK_BOUNDARY,\nalways round the address.\n\nFrom-SVN: r2320", "tree": {"sha": "99a602daff56c34a482cc75afc7e72acfbf03553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a602daff56c34a482cc75afc7e72acfbf03553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86b25e81b92c5b7cc9d8855a0343aa676dc750b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b25e81b92c5b7cc9d8855a0343aa676dc750b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b25e81b92c5b7cc9d8855a0343aa676dc750b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b25e81b92c5b7cc9d8855a0343aa676dc750b0/comments", "author": null, "committer": null, "parents": [{"sha": "8c24a2ce8cb330111e87779990c5ff118675f22c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c24a2ce8cb330111e87779990c5ff118675f22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c24a2ce8cb330111e87779990c5ff118675f22c"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "0bc635bada846d2226218567a8767932c75b7155", "filename": "gcc/explow.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86b25e81b92c5b7cc9d8855a0343aa676dc750b0/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86b25e81b92c5b7cc9d8855a0343aa676dc750b0/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=86b25e81b92c5b7cc9d8855a0343aa676dc750b0", "patch": "@@ -865,7 +865,10 @@ allocate_dynamic_stack_space (size, target, known_align)\n \n #ifdef MUST_ALIGN\n \n-#if !defined (STACK_DYNAMIC_OFFSET) && !defined (STACK_POINTER_OFFSET)\n+#if 0 /* It turns out we must always make extra space, if MUST_ALIGN\n+\t because we must always round the address up at the end,\n+\t because we don't know whether the dynamic offset\n+\t will mess up the desired alignment.  */\n   /* If we have to round the address up regardless of known_align,\n      make extra space regardless, also.  */\n   if (known_align % BIGGEST_ALIGNMENT != 0)\n@@ -912,8 +915,9 @@ allocate_dynamic_stack_space (size, target, known_align)\n      momentarily mis-aligning the stack.  */\n \n #ifdef STACK_BOUNDARY\n-#ifndef SETJMP_VIA_SAVE_AREA /* If we added a variable amount to SIZE,\n-\t\t\t\twe can no longer assume it is aligned.  */\n+  /* If we added a variable amount to SIZE,\n+     we can no longer assume it is aligned.  */\n+#if !defined (SETJMP_VIA_SAVE_AREA) && !defined (MUST_ALIGN)\n   if (known_align % STACK_BOUNDARY != 0)\n #endif\n     size = round_push (size);\n@@ -957,9 +961,9 @@ allocate_dynamic_stack_space (size, target, known_align)\n #endif\n \n #ifdef MUST_ALIGN\n-  /* If virtual_stack_dynamic_rtx might not share the alignment of\n-     the stack pointer register, we must always realign the stack address.  */\n-#if !defined (STACK_DYNAMIC_OFFSET) && !defined (STACK_POINTER_OFFSET)\n+#if 0  /* Even if we know the stack pointer has enough alignment,\n+\t  there's no way to tell whether virtual_stack_dynamic_rtx shares that\n+\t  alignment, so we still need to round the address up.  */\n   if (known_align % BIGGEST_ALIGNMENT != 0)\n #endif\n     {"}]}