{"sha": "ac3d02e247208eff86d084d9f7517adc74f9751c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzZDAyZTI0NzIwOGVmZjg2ZDA4NGQ5Zjc1MTdhZGM3NGY5NzUxYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-05-13T12:57:50Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-05-13T12:57:50Z"}, "message": "nvptx.c (write_fn_proto): Handle BUILT_IN_ATOMIC_COMPARE_EXCHANGE_n oddity.\n\n\tgcc/\n\t* config/nvptx/nvptx.c (write_fn_proto): Handle\n\tBUILT_IN_ATOMIC_COMPARE_EXCHANGE_n oddity.\n\n\tgcc/testsuite/\n\t* gcc.dg/atomic-noinline-aux.c: Include stddef.h. Fix\n\t__atomic_is_lock_free declaration.\n\nFrom-SVN: r236209", "tree": {"sha": "535c973833914e9b842a1784d581fbca1094544e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535c973833914e9b842a1784d581fbca1094544e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac3d02e247208eff86d084d9f7517adc74f9751c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3d02e247208eff86d084d9f7517adc74f9751c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3d02e247208eff86d084d9f7517adc74f9751c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3d02e247208eff86d084d9f7517adc74f9751c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7549163c15796e33369661ea90cc6a6900d13fc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7549163c15796e33369661ea90cc6a6900d13fc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7549163c15796e33369661ea90cc6a6900d13fc2"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "005b7010f5b528d937f46adad631bb72618c2a5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac3d02e247208eff86d084d9f7517adc74f9751c", "patch": "@@ -1,3 +1,8 @@\n+2016-05-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (write_fn_proto): Handle\n+\tBUILT_IN_ATOMIC_COMPARE_EXCHANGE_n oddity.\n+\n 2016-05-13  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c (create_new_ivs): Use HOST_WIDE_INT_PRINT_DEC"}, {"sha": "1631dae8fd9788594c08918b00f925c607cef660", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=ac3d02e247208eff86d084d9f7517adc74f9751c", "patch": "@@ -751,6 +751,26 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n   tree fntype = TREE_TYPE (decl);\n   tree result_type = TREE_TYPE (fntype);\n \n+  /* atomic_compare_exchange_$n builtins have an exceptional calling\n+     convention.  */\n+  int not_atomic_weak_arg = -1;\n+  if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+    switch (DECL_FUNCTION_CODE (decl))\n+      {\n+      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1:\n+      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2:\n+      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4:\n+      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8:\n+      case BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16:\n+\t/* These atomics skip the 'weak' parm in an actual library\n+\t   call.  We must skip it in the prototype too.  */\n+\tnot_atomic_weak_arg = 3;\n+\tbreak;\n+\n+      default:\n+\tbreak;\n+      }\n+\n   /* Declare the result.  */\n   bool return_in_mem = write_return_type (s, true, result_type);\n \n@@ -775,11 +795,14 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n       prototyped = false;\n     }\n \n-  for (; args; args = TREE_CHAIN (args))\n+  for (; args; args = TREE_CHAIN (args), not_atomic_weak_arg--)\n     {\n       tree type = prototyped ? TREE_VALUE (args) : TREE_TYPE (args);\n-\n-      argno = write_arg_type (s, -1, argno, type, prototyped);\n+      \n+      if (not_atomic_weak_arg)\n+\targno = write_arg_type (s, -1, argno, type, prototyped);\n+      else\n+\tgcc_assert (type == boolean_type_node);\n     }\n \n   if (stdarg_p (fntype))"}, {"sha": "3e971cd7d907931990d653718f60d20ea5e822cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac3d02e247208eff86d084d9f7517adc74f9751c", "patch": "@@ -1,3 +1,8 @@\n+2016-05-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.dg/atomic-noinline-aux.c: Include stddef.h. Fix\n+\t__atomic_is_lock_free declaration.\n+\n 2016-05-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/42587"}, {"sha": "f0e3387b980b12d0d083fc4f3296e9ffa6e9ca2a", "filename": "gcc/testsuite/gcc.dg/atomic-noinline-aux.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3d02e247208eff86d084d9f7517adc74f9751c/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c?ref=ac3d02e247208eff86d084d9f7517adc74f9751c", "patch": "@@ -7,6 +7,7 @@\n    the exact entry points the test file will require.  All these routines\n    simply set the first parameter to 1, and the caller will test for that.  */\n \n+#include <stddef.h>\n #include <stdlib.h>\n #include <stdbool.h>\n #include <string.h>\n@@ -64,7 +65,7 @@ __atomic_fetch_nand_1 (unsigned char *p, unsigned char v, int i)\n   return ret;\n }\n \n-bool __atomic_is_lock_free (int i, void *p)\n+bool __atomic_is_lock_free (size_t i, void *p)\n {\n   *(short *)p = 1;\n   return true;"}]}