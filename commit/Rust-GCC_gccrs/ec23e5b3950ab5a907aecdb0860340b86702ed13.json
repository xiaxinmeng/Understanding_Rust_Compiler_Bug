{"sha": "ec23e5b3950ab5a907aecdb0860340b86702ed13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMyM2U1YjM5NTBhYjVhOTA3YWVjZGIwODYwMzQwYjg2NzAyZWQxMw==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2015-09-10T18:24:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-10T18:24:28Z"}, "message": "compiler: Report errors from very large types.\n\n    \n    The gcc backend throws an internal error when trying to get the size\n    of a type which is larger than the amount of address space on the\n    machine.  This patch catches this error and reports it in a user\n    friendly way.\n    \n    Fixes golang/go#11554.\n    \n    Reviewed-on: https://go-review.googlesource.com/13684\n\n\t* go-gcc.cc (Gcc_backend::type_size): Return -1 for\n\tunrepresentable size.\n\nFrom-SVN: r227656", "tree": {"sha": "c3d6323633f32f5fef3f497f47e7bb3718941bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3d6323633f32f5fef3f497f47e7bb3718941bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec23e5b3950ab5a907aecdb0860340b86702ed13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23e5b3950ab5a907aecdb0860340b86702ed13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23e5b3950ab5a907aecdb0860340b86702ed13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23e5b3950ab5a907aecdb0860340b86702ed13/comments", "author": null, "committer": null, "parents": [{"sha": "8b661145105bf5d8d7be3f2e57b51c8b8d2c27b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b661145105bf5d8d7be3f2e57b51c8b8d2c27b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b661145105bf5d8d7be3f2e57b51c8b8d2c27b7"}], "stats": {"total": 100, "additions": 81, "deletions": 19}, "files": [{"sha": "2fa56ab0ac0591e0440e8c9ff1c33f4b0eb530ff", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=ec23e5b3950ab5a907aecdb0860340b86702ed13", "patch": "@@ -1,3 +1,8 @@\n+2015-09-10  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::type_size): Return -1 for\n+\tunrepresentable size.\n+\n 2015-08-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/67284"}, {"sha": "131434407610cb0bb876a72472641cfe458da221", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=ec23e5b3950ab5a907aecdb0860340b86702ed13", "patch": "@@ -1099,7 +1099,8 @@ Gcc_backend::type_size(Btype* btype)\n   gcc_assert(tree_fits_uhwi_p (t));\n   unsigned HOST_WIDE_INT val_wide = TREE_INT_CST_LOW(t);\n   int64_t ret = static_cast<int64_t>(val_wide);\n-  gcc_assert(ret >= 0 && static_cast<unsigned HOST_WIDE_INT>(ret) == val_wide);\n+  if (ret < 0 || static_cast<unsigned HOST_WIDE_INT>(ret) != val_wide)\n+    return -1;\n   return ret;\n }\n "}, {"sha": "ddf4637a775781c22a5216b55bfa491ef7af6350", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ec23e5b3950ab5a907aecdb0860340b86702ed13", "patch": "@@ -1,4 +1,4 @@\n-913b47c957ea91db2f724491d88cb20e8f9be8c7\n+7ba569544420d1de0eb607707ced6d23f8865186\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "dc37cf0b01ecc6bdd41580d375d92592f3e2596e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=ec23e5b3950ab5a907aecdb0860340b86702ed13", "patch": "@@ -3626,8 +3626,13 @@ Unary_expression::do_flatten(Gogo* gogo, Named_object*,\n       Type* ptype = this->expr_->type()->points_to();\n       if (!ptype->is_void_type())\n         {\n-          Btype* pbtype = ptype->get_backend(gogo);\n-          int64_t s = gogo->backend()->type_size(pbtype);\n+          int64_t s;\n+          bool ok = ptype->backend_type_size(gogo, &s);\n+          if (!ok)\n+            {\n+              go_assert(saw_errors());\n+              return Expression::make_error(this->location());\n+            }\n           if (s >= 4096 || this->issue_nil_check_)\n             {\n               Temporary_statement* temp =\n@@ -4131,7 +4136,13 @@ Unary_expression::do_get_backend(Translate_context* context)\n         Btype* pbtype = ptype->get_backend(gogo);\n         if (!ptype->is_void_type())\n \t  {\n-            int64_t s = gogo->backend()->type_size(pbtype);\n+            int64_t s;\n+            bool ok = ptype->backend_type_size(gogo, &s);\n+            if (!ok)\n+              {\n+                go_assert(saw_errors());\n+                return gogo->backend()->error_expression();\n+              }\n \t    if (s >= 4096 || this->issue_nil_check_)\n \t      {\n                 go_assert(this->expr_->is_variable());\n@@ -8339,8 +8350,14 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n             Expression::make_conditional(cond, arg1_len, arg2_len, location);\n \n \tType* element_type = at->element_type();\n-\tBtype* element_btype = element_type->get_backend(gogo);\n-\tint64_t element_size = gogo->backend()->type_size(element_btype);\n+\tint64_t element_size;\n+        bool ok = element_type->backend_type_size(gogo, &element_size);\n+        if (!ok)\n+          {\n+            go_assert(saw_errors());\n+            return gogo->backend()->error_expression();\n+          }\n+\n \tExpression* size_expr = Expression::make_integer_int64(element_size,\n \t\t\t\t\t\t\t       length->type(),\n \t\t\t\t\t\t\t       location);\n@@ -8381,8 +8398,12 @@ Builtin_call_expression::do_get_backend(Translate_context* context)\n \t  {\n \t    arg2_val = at->get_value_pointer(gogo, arg2);\n \t    arg2_len = at->get_length(gogo, arg2);\n-\t    Btype* element_btype = element_type->get_backend(gogo);\n-\t    size = gogo->backend()->type_size(element_btype);\n+            bool ok = element_type->backend_type_size(gogo, &size);\n+            if (!ok)\n+              {\n+                go_assert(saw_errors());\n+                return gogo->backend()->error_expression();\n+              }\n \t  }\n         Expression* element_size =\n \t  Expression::make_integer_int64(size, NULL, location);\n@@ -11539,14 +11560,20 @@ Allocation_expression::do_get_backend(Translate_context* context)\n   Gogo* gogo = context->gogo();\n   Location loc = this->location();\n \n-  Btype* btype = this->type_->get_backend(gogo);\n   if (this->allocate_on_stack_)\n     {\n-      int64_t size = gogo->backend()->type_size(btype);\n+      int64_t size;\n+      bool ok = this->type_->backend_type_size(gogo, &size);\n+      if (!ok)\n+        {\n+          go_assert(saw_errors());\n+          return gogo->backend()->error_expression();\n+        }\n       return gogo->backend()->stack_allocation_expression(size, loc);\n     }\n \n-  Bexpression* space = \n+  Btype* btype = this->type_->get_backend(gogo);\n+  Bexpression* space =\n     gogo->allocate_memory(this->type_, loc)->get_backend(context);\n   Btype* pbtype = gogo->backend()->pointer_type(btype);\n   return gogo->backend()->convert_expression(pbtype, space, loc);\n@@ -13731,23 +13758,28 @@ Type_info_expression::do_type()\n Bexpression*\n Type_info_expression::do_get_backend(Translate_context* context)\n {\n-  Btype* btype = this->type_->get_backend(context->gogo());\n   Gogo* gogo = context->gogo();\n+  bool ok = true;\n   int64_t val;\n   switch (this->type_info_)\n     {\n     case TYPE_INFO_SIZE:\n-      val = gogo->backend()->type_size(btype);\n+      ok = this->type_->backend_type_size(gogo, &val);\n       break;\n     case TYPE_INFO_ALIGNMENT:\n-      val = gogo->backend()->type_alignment(btype);\n+      ok = this->type_->backend_type_align(gogo, &val);\n       break;\n     case TYPE_INFO_FIELD_ALIGNMENT:\n-      val = gogo->backend()->type_field_alignment(btype);\n+      ok = this->type_->backend_type_field_align(gogo, &val);\n       break;\n     default:\n       go_unreachable();\n     }\n+  if (!ok)\n+    {\n+      go_assert(saw_errors());\n+      return gogo->backend()->error_expression();\n+    }\n   Expression* e = Expression::make_integer_int64(val, this->type(),\n \t\t\t\t\t\t this->location());\n   return e->get_backend(context);"}, {"sha": "dcc6bc829c62f6ec692fac9fd9cd356c6cf587b2", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec23e5b3950ab5a907aecdb0860340b86702ed13/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=ec23e5b3950ab5a907aecdb0860340b86702ed13", "patch": "@@ -2524,6 +2524,20 @@ Type::backend_type_size(Gogo* gogo, int64_t *psize)\n     return false;\n   Btype* bt = this->get_backend_placeholder(gogo);\n   *psize = gogo->backend()->type_size(bt);\n+  if (*psize == -1)\n+    {\n+      if (this->named_type() != NULL)\n+        error_at(this->named_type()->location(),\n+                 \"type %s larger than address space\",\n+                 Gogo::message_name(this->named_type()->name()).c_str());\n+      else\n+        error(\"type %s larger than address space\",\n+              this->reflection(gogo).c_str());\n+\n+      // Make this an error type to avoid knock-on errors.\n+      this->classification_ = TYPE_ERROR;\n+      return false;\n+    }\n   return true;\n }\n \n@@ -6400,8 +6414,12 @@ Array_type::slice_gc_symbol(Gogo* gogo, Expression_list** vals,\n \n   // Differentiate between slices with zero-length and non-zero-length values.\n   Type* element_type = this->element_type();\n-  Btype* ebtype = element_type->get_backend(gogo);\n-  int64_t element_size = gogo->backend()->type_size(ebtype);\n+  int64_t element_size;\n+  bool ok = element_type->backend_type_size(gogo, &element_size);\n+  if (!ok) {\n+    go_assert(saw_errors());\n+    element_size = 4;\n+  }\n \n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n   unsigned long opval = element_size == 0 ? GC_APTR : GC_SLICE;\n@@ -6432,7 +6450,13 @@ Array_type::array_gc_symbol(Gogo* gogo, Expression_list** vals,\n \n   Btype* pbtype = gogo->backend()->pointer_type(gogo->backend()->void_type());\n   int64_t pwidth = gogo->backend()->type_size(pbtype);\n-  int64_t iwidth = gogo->backend()->type_size(this->get_backend(gogo));\n+  int64_t iwidth;\n+  bool ok = this->backend_type_size(gogo, &iwidth);\n+  if (!ok)\n+    {\n+      go_assert(saw_errors());\n+      iwidth = 4;\n+    }\n \n   Type* element_type = this->element_type();\n   if (bound < 1 || !element_type->has_pointer())"}]}