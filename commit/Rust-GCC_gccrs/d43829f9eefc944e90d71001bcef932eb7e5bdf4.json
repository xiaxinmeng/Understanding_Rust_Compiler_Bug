{"sha": "d43829f9eefc944e90d71001bcef932eb7e5bdf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzODI5ZjllZWZjOTQ0ZTkwZDcxMDAxYmNlZjkzMmViN2U1YmRmNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-09T00:27:16Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-09T00:27:16Z"}, "message": "cp-tree.h (cp_tree_index): Add CPTI_BASE_CTOR_IDENTIFIER...\n\n\t* cp-tree.h (cp_tree_index): Add CPTI_BASE_CTOR_IDENTIFIER,\n\tCPTI_BASE_DTOR_IDENTIFIER, and CPTI_DELETING_DTOR_IDENTIFIER.\n\t(base_ctor_identifier): New macro.\n\t(base_dtor_identifier): Likewise.\n\t(deleting_dtor_identifier): Likewise.\n\t* decl.c: Don't include obstack.h.\n\t(obstack_chunk_alloc): Don't define.\n\t(obstack_chunk_free): Likewise.\n\t(struct predefined_identifier): New type.\n\t(initialize_predefined_identifiers): New function.\n\t(init_decl_processing): Use it.\n\t(debug_temp_inits): Remove.\n\t(start_method): Don't call preserve_data.\n\t(hack_incomplete_structures): Update comment.\n\t* init.c (init_init_processing): Don't initialize\n\tnelts_identifier.\n\t(build_offset_rf): Remove dead code.\n\t(build_delete): Use CLASSTYPE_N_BASECLASSES.\n\t* search.c (init_search_processing): Don't initialize\n\tvptr_identifier.\n\nFrom-SVN: r33031", "tree": {"sha": "2c6258570a12ae5cac084d9255f62ecb2cb6797e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c6258570a12ae5cac084d9255f62ecb2cb6797e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d43829f9eefc944e90d71001bcef932eb7e5bdf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43829f9eefc944e90d71001bcef932eb7e5bdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43829f9eefc944e90d71001bcef932eb7e5bdf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43829f9eefc944e90d71001bcef932eb7e5bdf4/comments", "author": null, "committer": null, "parents": [{"sha": "729a7089845f57ffa7067612f8d5b059149eeae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729a7089845f57ffa7067612f8d5b059149eeae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729a7089845f57ffa7067612f8d5b059149eeae6"}], "stats": {"total": 133, "additions": 88, "deletions": 45}, "files": [{"sha": "4b56953960d7998107183ad1eb210e25a08b93d8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d43829f9eefc944e90d71001bcef932eb7e5bdf4", "patch": "@@ -1,3 +1,26 @@\n+2000-04-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (cp_tree_index): Add CPTI_BASE_CTOR_IDENTIFIER,\n+\tCPTI_BASE_DTOR_IDENTIFIER, and CPTI_DELETING_DTOR_IDENTIFIER.\n+\t(base_ctor_identifier): New macro.\n+\t(base_dtor_identifier): Likewise.\n+\t(deleting_dtor_identifier): Likewise.\n+\t* decl.c: Don't include obstack.h.\n+\t(obstack_chunk_alloc): Don't define.\n+\t(obstack_chunk_free): Likewise.\n+\t(struct predefined_identifier): New type.\n+\t(initialize_predefined_identifiers): New function.\n+\t(init_decl_processing): Use it.\n+\t(debug_temp_inits): Remove.\n+\t(start_method): Don't call preserve_data.\n+\t(hack_incomplete_structures): Update comment.\n+\t* init.c (init_init_processing): Don't initialize\n+\tnelts_identifier.\n+\t(build_offset_rf): Remove dead code.\n+\t(build_delete): Use CLASSTYPE_N_BASECLASSES.\n+\t* search.c (init_search_processing): Don't initialize\n+\tvptr_identifier.\n+\t\n 2000-04-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* typeck.c (build_binary_op): Call `tree_expr_nonnegative_p' to elide"}, {"sha": "83863a509d8370fe95dcba2f1ccaee187f81eb45", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d43829f9eefc944e90d71001bcef932eb7e5bdf4", "patch": "@@ -560,9 +560,12 @@ enum cp_tree_index\n     CPTI_ACCESS_PRIVATE_VIRTUAL,\n \n     CPTI_CTOR_IDENTIFIER,\n+    CPTI_BASE_CTOR_IDENTIFIER,\n+    CPTI_DTOR_IDENTIFIER,\n+    CPTI_BASE_DTOR_IDENTIFIER,\n+    CPTI_DELETING_DTOR_IDENTIFIER,\n     CPTI_DELTA2_IDENTIFIER,\n     CPTI_DELTA_IDENTIFIER,\n-    CPTI_DTOR_IDENTIFIER,\n     CPTI_IN_CHARGE_IDENTIFIER,\n     CPTI_INDEX_IDENTIFIER,\n     CPTI_NELTS_IDENTIFIER,\n@@ -652,10 +655,21 @@ extern tree cp_global_trees[CPTI_MAX];\n /* We cache these tree nodes so as to call get_identifier less\n    frequently.  */\n \n+/* The name of a constructor that constructors virtual base classes.  */\n #define ctor_identifier                 cp_global_trees[CPTI_CTOR_IDENTIFIER]\n+/* The name of a constructor that does not construct virtual base classes.  */\n+#define base_ctor_identifier            cp_global_trees[CPTI_BASE_CTOR_IDENTIFIER]\n+/* The name of a destructor that destroys virtual base classes.  */\n+#define dtor_identifier                 cp_global_trees[CPTI_DTOR_IDENTIFIER]\n+/* The name of a destructor that does not destroy virtual base\n+   classes.  */\n+#define base_dtor_identifier            cp_global_trees[CPTI_BASE_DTOR_IDENTIFIER]\n+/* The name of a destructor that destroys virtual base classes, and\n+   then deletes the entire object.  */\n+#define deleting_dtor_identifier        cp_global_trees[CPTI_DELETING_DTOR_IDENTIFIER]\n+\n #define delta2_identifier               cp_global_trees[CPTI_DELTA2_IDENTIFIER]\n #define delta_identifier                cp_global_trees[CPTI_DELTA_IDENTIFIER]\n-#define dtor_identifier                 cp_global_trees[CPTI_DTOR_IDENTIFIER]\n #define in_charge_identifier            cp_global_trees[CPTI_IN_CHARGE_IDENTIFIER]\n #define index_identifier                cp_global_trees[CPTI_INDEX_IDENTIFIER]\n #define nelts_identifier                cp_global_trees[CPTI_NELTS_IDENTIFIER]"}, {"sha": "c9d1d961f8706eb02906cc0ebe303efe4d9a6a3a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d43829f9eefc944e90d71001bcef932eb7e5bdf4", "patch": "@@ -37,7 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"decl.h\"\n #include \"lex.h\"\n #include <signal.h>\n-#include \"obstack.h\"\n #include \"defaults.h\"\n #include \"output.h\"\n #include \"except.h\"\n@@ -46,11 +45,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"ggc.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n-extern struct obstack permanent_obstack;\n-\n extern int current_class_depth;\n \n extern tree static_ctors, static_dtors;\n@@ -183,6 +177,7 @@ static tree get_dso_handle_node PARAMS ((void));\n static tree start_cleanup_fn PARAMS ((void));\n static void end_cleanup_fn PARAMS ((void));\n static tree cp_make_fname_decl PARAMS ((tree, const char *, int));\n+static void initialize_predefined_identifiers PARAMS ((void));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PARAMS ((void));\n@@ -6041,6 +6036,50 @@ record_unknown_type (type, name)\n   TYPE_MODE (type) = TYPE_MODE (void_type_node);\n }\n \n+/* An string for which we should create an IDENTIFIER_NODE at\n+   startup.  */\n+\n+typedef struct predefined_identifier\n+{\n+  /* The name of the identifier.  */\n+  const char *name;\n+  /* The place where the IDENTIFIER_NODE should be stored.  */\n+  tree *node;\n+} predefined_identifier;\n+\n+/* Create all the predefined identifiers.  */\n+\n+static void\n+initialize_predefined_identifiers () \n+{\n+  struct predefined_identifier *pid;\n+\n+  /* A table of identifiers to create at startup.  */\n+  static predefined_identifier predefined_identifiers[] = {\n+    { \"C++\", &lang_name_cplusplus },\n+    { \"C\", &lang_name_c },\n+    { \"Java\", &lang_name_java },\n+    { CTOR_NAME, &ctor_identifier },\n+    { \"__base_ctor\", &base_ctor_identifier },\n+    { DTOR_NAME, &dtor_identifier },\n+    { \"__base_dtor\", &base_dtor_identifier },\n+    { \"__deleting_dtor\", &deleting_dtor_identifier },\n+    { VTABLE_DELTA2_NAME, &delta2_identifier },\n+    { VTABLE_DELTA_NAME, &delta_identifier },\n+    { IN_CHARGE_NAME, &in_charge_identifier },\n+    { VTABLE_INDEX_NAME, &index_identifier },\n+    { \"nelts\", &nelts_identifier },\n+    { THIS_NAME, &this_identifier },\n+    { VTABLE_PFN_NAME, &pfn_identifier },\n+    { \"__pfn_or_delta2\", &pfn_or_delta2_identifier },\n+    { \"_vptr\", &vptr_identifier },\n+    { NULL, NULL }\n+  };\n+\n+  for (pid = predefined_identifiers; pid->name; ++pid)\n+    *pid->node = get_identifier (pid->name);\n+}\n+\n /* Create the predefined scalar types of C,\n    and some nodes representing standard constants (0, 1, (void *)0).\n    Initialize the global binding level.\n@@ -6058,10 +6097,8 @@ init_decl_processing ()\n   if (flag_new_abi && !flag_vtable_thunks)\n     fatal (\"the new ABI requires vtable thunks\");\n \n-  /* Have to make these distinct before we try using them.  */\n-  lang_name_cplusplus = get_identifier (\"C++\");\n-  lang_name_c = get_identifier (\"C\");\n-  lang_name_java = get_identifier (\"Java\");\n+  /* Create all the identifiers we need.  */\n+  initialize_predefined_identifiers ();\n \n   /* Let the back-end now how to save and restore language-specific\n      per-function globals.  */\n@@ -6133,16 +6170,6 @@ init_decl_processing ()\n   NAMESPACE_LEVEL (global_namespace) = global_binding_level;\n   declare_namespace_level ();\n \n-  this_identifier = get_identifier (THIS_NAME);\n-  in_charge_identifier = get_identifier (IN_CHARGE_NAME);\n-  ctor_identifier = get_identifier (CTOR_NAME);\n-  dtor_identifier = get_identifier (DTOR_NAME);\n-  pfn_identifier = get_identifier (VTABLE_PFN_NAME);\n-  index_identifier = get_identifier (VTABLE_INDEX_NAME);\n-  delta_identifier = get_identifier (VTABLE_DELTA_NAME);\n-  delta2_identifier = get_identifier (VTABLE_DELTA2_NAME);\n-  pfn_or_delta2_identifier = get_identifier (\"__pfn_or_delta2\");\n-\n   /* Define `int' and `char' first so that dbx will output them first.  */\n   record_builtin_type (RID_INT, NULL_PTR, integer_type_node);\n   record_builtin_type (RID_CHAR, \"char\", char_type_node);\n@@ -6895,10 +6922,6 @@ groktypename (typename)\n    do go through here.  Structure field declarations are done by\n    grokfield and not through here.  */\n \n-/* Set this to zero to debug not using the temporary obstack\n-   to parse initializers.  */\n-int debug_temp_inits = 1;\n-\n tree\n start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n      tree declarator, declspecs;\n@@ -14308,12 +14331,6 @@ start_method (declspecs, declarator, attrlist)\n   if (processing_template_decl && !DECL_TEMPLATE_SPECIALIZATION (fndecl))\n     fndecl = push_template_decl (fndecl);\n \n-  /* We read in the parameters on the maybepermanent_obstack,\n-     but we won't be getting back to them until after we\n-     may have clobbered them.  So the call to preserve_data\n-     will keep them safe.  */\n-  preserve_data ();\n-\n   if (! DECL_FRIEND_P (fndecl))\n     {\n       if (TREE_CHAIN (fndecl))\n@@ -14477,10 +14494,7 @@ hack_incomplete_structures (type)\n }\n \n /* If DECL is of a type which needs a cleanup, build that cleanup here.\n-   See build_delete for information about AUTO_DELETE.\n-\n-   Don't build these on the momentary obstack; they must live\n-   the life of the binding contour.  */\n+   See build_delete for information about AUTO_DELETE.  */\n \n static tree\n maybe_build_cleanup_1 (decl, auto_delete)"}, {"sha": "a437a522927eeaf3ef3c487a711613780f8b9c91", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d43829f9eefc944e90d71001bcef932eb7e5bdf4", "patch": "@@ -66,7 +66,6 @@ void init_init_processing ()\n   /* Define the structure that holds header information for\n      arrays allocated via operator new.  */\n   BI_header_type = make_aggr_type (RECORD_TYPE);\n-  nelts_identifier = get_identifier (\"nelts\");\n   fields[0] = build_lang_decl (FIELD_DECL, nelts_identifier, sizetype);\n \n   /* Use the biggest alignment supported by the target to prevent operator\n@@ -1595,12 +1594,6 @@ build_offset_ref (type, name)\n \t\t  type, TREE_OPERAND (name, 0));\n       name = dtor_identifier;\n     }\n-#if 0\n-  /* I think this is wrong, but the draft is unclear.  --jason 6/15/98 */\n-  else if (name == constructor_name_full (type)\n-\t   || name == constructor_name (type))\n-    name = ctor_identifier;\n-#endif\n \n   if (!COMPLETE_TYPE_P (complete_type (type))\n       && !TYPE_BEING_DEFINED (type))\n@@ -3184,7 +3177,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n     {\n       /* We only get here from finish_function for a destructor.  */\n       tree binfos = BINFO_BASETYPES (TYPE_BINFO (type));\n-      int i, n_baseclasses = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n+      int i, n_baseclasses = CLASSTYPE_N_BASECLASSES (type);\n       tree base_binfo = n_baseclasses > 0 ? TREE_VEC_ELT (binfos, 0) : NULL_TREE;\n       tree exprstmt = NULL_TREE;\n       tree parent_auto_delete = auto_delete;"}, {"sha": "fda652d5ca2d0bb09f98820d408ebc202ed19121", "filename": "gcc/cp/search.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43829f9eefc944e90d71001bcef932eb7e5bdf4/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d43829f9eefc944e90d71001bcef932eb7e5bdf4", "patch": "@@ -3393,7 +3393,6 @@ void\n init_search_processing ()\n {\n   gcc_obstack_init (&search_obstack);\n-  vptr_identifier = get_identifier (\"_vptr\");\n }\n \n void"}]}