{"sha": "79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllN2IxZmUzMjkwZjM1MWYxNzhkYWZlZTRiM2RmNGVjZTYxYmE5Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-10T17:40:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-10T17:40:28Z"}, "message": "re PR c++/85662 (\"error: non-constant condition for static assertion\" from __builtin_offsetof in C++)\n\n\tPR c++/85662\n\t* c-common.h (fold_offsetof_1): Removed.\n\t(fold_offsetof): Add TYPE argument defaulted to size_type_node and\n\tCTX argument defaulted to ERROR_MARK.\n\t* c-common.c (fold_offsetof_1): Renamed to ...\n\t(fold_offsetof): ... this.  Remove wrapper function.  Add TYPE\n\targument, convert the pointer constant to TYPE and use size_binop\n\twith PLUS_EXPR instead of fold_build_pointer_plus if type is not\n\ta pointer type.  Adjust recursive calls.\n\n\t* c-fold.c (c_fully_fold_internal): Use fold_offsetof rather than\n\tfold_offsetof_1, pass TREE_TYPE (expr) as TYPE to it and drop the\n\tfold_convert_loc.\n\t* c-typeck.c (build_unary_op): Use fold_offsetof rather than\n\tfold_offsetof_1, pass argtype as TYPE to it and drop the\n\tfold_convert_loc.\n\n\t* cp-gimplify.c (cp_fold): Use fold_offsetof rather than\n\tfold_offsetof_1, pass TREE_TYPE (x) as TYPE to it and drop the\n\tfold_convert.\n\n\t* g++.dg/ext/offsetof2.C: New test.\n\nFrom-SVN: r260119", "tree": {"sha": "d48f413c93e9cc59329413239736490ef5c5f916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d48f413c93e9cc59329413239736490ef5c5f916"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7b7749d9f2c68ca4f9cda52b21ef690aef009bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b7749d9f2c68ca4f9cda52b21ef690aef009bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b7749d9f2c68ca4f9cda52b21ef690aef009bd"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "052b22265881435922436fff79e493b9840bd5f6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -1,3 +1,15 @@\n+2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85662\n+\t* c-common.h (fold_offsetof_1): Removed.\n+\t(fold_offsetof): Add TYPE argument defaulted to size_type_node and\n+\tCTX argument defaulted to ERROR_MARK.\n+\t* c-common.c (fold_offsetof_1): Renamed to ...\n+\t(fold_offsetof): ... this.  Remove wrapper function.  Add TYPE\n+\targument, convert the pointer constant to TYPE and use size_binop\n+\twith PLUS_EXPR instead of fold_build_pointer_plus if type is not\n+\ta pointer type.  Adjust recursive calls.\n+\n 2018-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c++/85400"}, {"sha": "e8bb3eb23f8feef703306c919c14a4652df60c8a", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -6168,10 +6168,11 @@ c_common_to_target_charset (HOST_WIDE_INT c)\n \n /* Fold an offsetof-like expression.  EXPR is a nested sequence of component\n    references with an INDIRECT_REF of a constant at the bottom; much like the\n-   traditional rendering of offsetof as a macro.  Return the folded result.  */\n+   traditional rendering of offsetof as a macro.  TYPE is the desired type of\n+   the whole expression.  Return the folded result.  */\n \n tree\n-fold_offsetof_1 (tree expr, enum tree_code ctx)\n+fold_offsetof (tree expr, tree type, enum tree_code ctx)\n {\n   tree base, off, t;\n   tree_code code = TREE_CODE (expr);\n@@ -6196,10 +6197,10 @@ fold_offsetof_1 (tree expr, enum tree_code ctx)\n \t  error (\"cannot apply %<offsetof%> to a non constant address\");\n \t  return error_mark_node;\n \t}\n-      return TREE_OPERAND (expr, 0);\n+      return convert (type, TREE_OPERAND (expr, 0));\n \n     case COMPONENT_REF:\n-      base = fold_offsetof_1 (TREE_OPERAND (expr, 0), code);\n+      base = fold_offsetof (TREE_OPERAND (expr, 0), type, code);\n       if (base == error_mark_node)\n \treturn base;\n \n@@ -6216,7 +6217,7 @@ fold_offsetof_1 (tree expr, enum tree_code ctx)\n       break;\n \n     case ARRAY_REF:\n-      base = fold_offsetof_1 (TREE_OPERAND (expr, 0), code);\n+      base = fold_offsetof (TREE_OPERAND (expr, 0), type, code);\n       if (base == error_mark_node)\n \treturn base;\n \n@@ -6273,23 +6274,16 @@ fold_offsetof_1 (tree expr, enum tree_code ctx)\n       /* Handle static members of volatile structs.  */\n       t = TREE_OPERAND (expr, 1);\n       gcc_checking_assert (VAR_P (get_base_address (t)));\n-      return fold_offsetof_1 (t);\n+      return fold_offsetof (t, type);\n \n     default:\n       gcc_unreachable ();\n     }\n \n+  if (!POINTER_TYPE_P (type))\n+    return size_binop (PLUS_EXPR, base, convert (type, off));\n   return fold_build_pointer_plus (base, off);\n }\n-\n-/* Likewise, but convert it to the return type of offsetof.  */\n-\n-tree\n-fold_offsetof (tree expr)\n-{\n-  return convert (size_type_node, fold_offsetof_1 (expr));\n-}\n-\n \f\n /* *PTYPE is an incomplete array.  Complete it with a domain based on\n    INITIAL_VALUE.  If INITIAL_VALUE is not present, use 1 if DO_DEFAULT"}, {"sha": "f2c66628e53316ca12885cbd32cdec84e5ca162e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -1033,8 +1033,8 @@ extern bool c_dump_tree (void *, tree);\n \n extern void verify_sequence_points (tree);\n \n-extern tree fold_offsetof_1 (tree, tree_code ctx = ERROR_MARK);\n-extern tree fold_offsetof (tree);\n+extern tree fold_offsetof (tree, tree = size_type_node,\n+\t\t\t   tree_code ctx = ERROR_MARK);\n \n extern int complete_array_type (tree *, tree, bool);\n "}, {"sha": "a8e21284deb03ee8745355df6d3bcef5e686b270", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -1,3 +1,13 @@\n+2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85662\n+\t* c-fold.c (c_fully_fold_internal): Use fold_offsetof rather than\n+\tfold_offsetof_1, pass TREE_TYPE (expr) as TYPE to it and drop the\n+\tfold_convert_loc.\n+\t* c-typeck.c (build_unary_op): Use fold_offsetof rather than\n+\tfold_offsetof_1, pass argtype as TYPE to it and drop the\n+\tfold_convert_loc.\n+\n 2018-05-02  David Pagan  <dave.pagan@oracle.com>\n \n \tPR c/30552"}, {"sha": "d276e635a28d4cb75d410456d0543c4f43760e3e", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -473,7 +473,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  && (op1 = get_base_address (op0)) != NULL_TREE\n \t  && INDIRECT_REF_P (op1)\n \t  && TREE_CONSTANT (TREE_OPERAND (op1, 0)))\n-\tret = fold_convert_loc (loc, TREE_TYPE (expr), fold_offsetof_1 (op0));\n+\tret = fold_offsetof (op0, TREE_TYPE (expr));\n       else if (op0 != orig_op0 || in_init)\n \tret = in_init\n \t  ? fold_build1_initializer_loc (loc, code, TREE_TYPE (expr), op0)"}, {"sha": "45a4529ed520b20ec61cbc6496bf60fccb952c76", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -4676,7 +4676,7 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n       if (val && INDIRECT_REF_P (val)\n           && TREE_CONSTANT (TREE_OPERAND (val, 0)))\n \t{\n-\t  ret = fold_convert_loc (location, argtype, fold_offsetof_1 (arg));\n+\t  ret = fold_offsetof (arg, argtype);\n \t  goto return_build_unary_op;\n \t}\n "}, {"sha": "e21afc7e09a83d14a32b0028c054a91dad68e4c4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -1,3 +1,10 @@\n+2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85662\n+\t* cp-gimplify.c (cp_fold): Use fold_offsetof rather than\n+\tfold_offsetof_1, pass TREE_TYPE (x) as TYPE to it and drop the\n+\tfold_convert.\n+\n 2018-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR c++/85400"}, {"sha": "84882f8dbb74d17409dc0d87bd0cf5436bebfe49", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -2232,7 +2232,7 @@ cp_fold (tree x)\n \t      val = TREE_OPERAND (val, 0);\n \t      STRIP_NOPS (val);\n \t      if (TREE_CODE (val) == INTEGER_CST)\n-\t\treturn fold_convert (TREE_TYPE (x), fold_offsetof_1 (op0));\n+\t\treturn fold_offsetof (op0, TREE_TYPE (x));\n \t    }\n \t}\n       goto finish_unary;"}, {"sha": "89f64404b3f5abd3d4982174398dd22106dc87d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -1,3 +1,8 @@\n+2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/85662\n+\t* g++.dg/ext/offsetof2.C: New test.\n+\n 2018-05-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/68846"}, {"sha": "647cf8d0b77c5dd38c90c38464db387986f987c7", "filename": "gcc/testsuite/g++.dg/ext/offsetof2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Foffsetof2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e7b1fe3290f351f178dafee4b3df4ece61ba9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Foffsetof2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Foffsetof2.C?ref=79e7b1fe3290f351f178dafee4b3df4ece61ba9c", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/85662\n+// { dg-do compile { target c++11 } }\n+\n+struct S { unsigned long x[31]; };\n+struct T { bool b; S f; };\n+static_assert (__builtin_offsetof (T, f.x[31 - 1]) == __builtin_offsetof (T, f.x[30]), \"\");"}]}