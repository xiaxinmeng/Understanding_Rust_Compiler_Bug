{"sha": "b125dc1e1bb5932a2de833e07bbdc2395097a868", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyNWRjMWUxYmI1OTMyYTJkZTgzM2UwN2JiZGMyMzk1MDk3YTg2OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-11-04T19:23:44Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-11-04T19:23:44Z"}, "message": "re PR fortran/64933 (ASSOCIATE on a character variable does not allow substring expressions)\n\n2016-04-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/64933\n\t* primary.c (gfc_match_varspec): If selector expression is\n\tunambiguously an array, make sure that the associate name\n\tis an array and has an array spec. Modify the original\n\tcondition for doing this to exclude character types.\n\n2016-04-19  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/64933\n\t* gfortran.dg/associate_23.f90: New test.\n\nFrom-SVN: r241860", "tree": {"sha": "c25b7ef2b8fc5fc8d013468b90130d1b2405d8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c25b7ef2b8fc5fc8d013468b90130d1b2405d8a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b125dc1e1bb5932a2de833e07bbdc2395097a868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b125dc1e1bb5932a2de833e07bbdc2395097a868", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b125dc1e1bb5932a2de833e07bbdc2395097a868", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b125dc1e1bb5932a2de833e07bbdc2395097a868/comments", "author": null, "committer": null, "parents": [{"sha": "5f4cebba260db0f1b1edf45152be3bad2ed779a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f4cebba260db0f1b1edf45152be3bad2ed779a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f4cebba260db0f1b1edf45152be3bad2ed779a8"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "f6b739c84eb2b50b18743ae10711ab8fecd68523", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b125dc1e1bb5932a2de833e07bbdc2395097a868", "patch": "@@ -1,3 +1,11 @@\n+2016-04-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64933\n+\t* primary.c (gfc_match_varspec): If selector expression is\n+\tunambiguously an array, make sure that the associate name\n+\tis an array and has an array spec. Modify the original\n+\tcondition for doing this to exclude character types.\n+\n 2016-11-03  Fritz Reese <fritzoreese@gmail.com>\n \n \t* gfortran.texi: Document."}, {"sha": "50d7072b67097d295d616f73e2cae7f81ba8e9e9", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=b125dc1e1bb5932a2de833e07bbdc2395097a868", "patch": "@@ -1931,15 +1931,36 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n     }\n \n   /* For associate names, we may not yet know whether they are arrays or not.\n-     Thus if we have one and parentheses follow, we have to assume that it\n-     actually is one for now.  The final decision will be made at\n-     resolution time, of course.  */\n-  if (sym->assoc && gfc_peek_ascii_char () == '('\n-      && !(sym->assoc->dangling && sym->assoc->st\n+     If the selector expression is unambiguously an array; eg. a full array\n+     or an array section, then the associate name must be an array and we can\n+     fix it now. Otherwise, if parentheses follow and it is not a character\n+     type, we have to assume that it actually is one for now.  The final\n+     decision will be made at resolution, of course.  */\n+  if (sym->assoc\n+      && gfc_peek_ascii_char () == '('\n+      && sym->ts.type != BT_CLASS\n+      && !sym->attr.dimension)\n+    {\n+      if ((!sym->assoc->dangling\n+\t   && sym->assoc->target\n+\t   && sym->assoc->target->ref\n+\t   && sym->assoc->target->ref->type == REF_ARRAY\n+\t   && (sym->assoc->target->ref->u.ar.type == AR_FULL\n+\t       || sym->assoc->target->ref->u.ar.type == AR_SECTION))\n+\t  ||\n+\t   (!(sym->assoc->dangling || sym->ts.type == BT_CHARACTER)\n+\t    && sym->assoc->st\n \t   && sym->assoc->st->n.sym\n-\t   && sym->assoc->st->n.sym->attr.dimension == 0)\n-      && sym->ts.type != BT_CLASS)\n+\t    && sym->assoc->st->n.sym->attr.dimension == 0))\n+\t{\n     sym->attr.dimension = 1;\n+\t  if (sym->as == NULL && sym->assoc\n+\t      && sym->assoc->st\n+\t      && sym->assoc->st->n.sym\n+\t      && sym->assoc->st->n.sym->as)\n+\t    sym->as = gfc_copy_array_spec (sym->assoc->st->n.sym->as);\n+\t}\n+    }\n \n   if ((equiv_flag && gfc_peek_ascii_char () == '(')\n       || gfc_peek_ascii_char () == '[' || sym->attr.codimension"}, {"sha": "3babf14777b021954986da4724588a6794207020", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b125dc1e1bb5932a2de833e07bbdc2395097a868", "patch": "@@ -1,3 +1,8 @@\n+2016-04-19  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/64933\n+\t* gfortran.dg/associate_23.f90: New test.\n+\n 2016-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/77834"}, {"sha": "b4d58ffd2b7bc29a8e272901de7e3025578c78aa", "filename": "gcc/testsuite/gfortran.dg/associate_23.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b125dc1e1bb5932a2de833e07bbdc2395097a868/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_23.f90?ref=b125dc1e1bb5932a2de833e07bbdc2395097a868", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! Tests the fix for PR64933\n+!\n+! Contributed by Olivier Marsden  <olivier.marsden@ecmwf.int>\n+!\n+program test_this\n+  implicit none\n+  character(len = 15) :: char_var, char_var_dim (3)\n+  character(len = 80) :: buffer\n+\n+! Original failing case reported in PR\n+  ASSOCIATE(should_work=>char_var)\n+    should_work = \"test succesful\"\n+    write (buffer, *) should_work(5:14)\n+  END ASSOCIATE\n+\n+  if (trim (buffer) .ne. \"  succesful\") call abort\n+\n+! Found to be failing during debugging\n+  ASSOCIATE(should_work=>char_var_dim)\n+    should_work = [\"test SUCCESFUL\", \"test_SUCCESFUL\", \"test.SUCCESFUL\"]\n+    write (buffer, *) should_work(:)(5:14)\n+  END ASSOCIATE\n+\n+  if (trim (buffer) .ne. \"  SUCCESFUL_SUCCESFUL.SUCCESFUL\") call abort\n+\n+! Found to be failing during debugging\n+  ASSOCIATE(should_work=>char_var_dim(1:2))\n+    should_work = [\"test SUCCESFUL\", \"test_SUCCESFUL\", \"test.SUCCESFUL\"]\n+    write (buffer, *) should_work(:)(5:14)\n+  END ASSOCIATE\n+\n+  if (trim (buffer) .ne. \"  SUCCESFUL_SUCCESFUL\") call abort\n+\n+end program"}]}