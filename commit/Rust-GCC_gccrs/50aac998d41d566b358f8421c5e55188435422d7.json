{"sha": "50aac998d41d566b358f8421c5e55188435422d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhYWM5OThkNDFkNTY2YjM1OGY4NDIxYzVlNTUxODg0MzU0MjJkNw==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2003-03-07T22:06:16Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2003-03-07T22:06:16Z"}, "message": "df.h (enum df_ref_flags.DF_REF_STRIPPED): New.\n\n        * df.h (enum df_ref_flags.DF_REF_STRIPPED): New.\n        (DF_FOR_REGALLOC): New.\n        * df.c (df_ref_record): Set DF_REF_STRIPPED.\n        (read_modify_subreg_p): Simplify.\n        (df_def_record_1, df_uses_record): Set DF_REF_MODE_CHANGE more often.\n        Use DF_FOR_REGALLOC.\n        * ra.h (struct web): New member subreg_stripped.\n        (invalid_mode_change_regs): Declare.\n        * ra.c (invalid_mode_change_regs): New.\n        (init_ra): Initialize it.\n        * ra-build.c (init_one_web_common, remember_web_was_spilled): Use it.\n        Use CANNOT_CHANGE_MODE_CLASS as ifdef guard.\n        (reinit_one_web, parts_to_web_1): Deal with subreg_stripped.\n        * ra-colorize.c (colorize_one_web): Use invalid_mode_change_regs.\n        Use CANNOT_CHANGE_MODE_CLASS as ifdef guard.\n\nFrom-SVN: r63952", "tree": {"sha": "dc3dd5799fdb6c6f8502860ceee126f8a01cd83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3dd5799fdb6c6f8502860ceee126f8a01cd83b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50aac998d41d566b358f8421c5e55188435422d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50aac998d41d566b358f8421c5e55188435422d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50aac998d41d566b358f8421c5e55188435422d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50aac998d41d566b358f8421c5e55188435422d7/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa6e8ed33a18a6185f852b6d07a2168638c7cf39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6e8ed33a18a6185f852b6d07a2168638c7cf39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6e8ed33a18a6185f852b6d07a2168638c7cf39"}], "stats": {"total": 119, "additions": 79, "deletions": 40}, "files": [{"sha": "1debc6929a16991e6de322d717cd5d49e3f707bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -1,3 +1,21 @@\n+2003-03-07  Michael Matz  <matz@suse.de>\n+\n+\t* df.h (enum df_ref_flags.DF_REF_STRIPPED): New.\n+\t(DF_FOR_REGALLOC): New.\n+\t* df.c (df_ref_record): Set DF_REF_STRIPPED.\n+\t(read_modify_subreg_p): Simplify.\n+\t(df_def_record_1, df_uses_record): Set DF_REF_MODE_CHANGE more often.\n+\tUse DF_FOR_REGALLOC.\n+\t* ra.h (struct web): New member subreg_stripped.\n+\t(invalid_mode_change_regs): Declare.\n+\t* ra.c (invalid_mode_change_regs): New.\n+\t(init_ra): Initialize it.\n+\t* ra-build.c (init_one_web_common, remember_web_was_spilled): Use it.\n+\tUse CANNOT_CHANGE_MODE_CLASS as ifdef guard.\n+\t(reinit_one_web, parts_to_web_1): Deal with subreg_stripped.\n+\t* ra-colorize.c (colorize_one_web): Use invalid_mode_change_regs.\n+\tUse CANNOT_CHANGE_MODE_CLASS as ifdef guard.\n+\n 2003-03-07  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (addsf3, adddf3, subsf3, subdf3, mulsf3, muldf3, negsf2)"}, {"sha": "740f2ccad1c336ebd07ea7d26c40b02ababc3b5c", "filename": "gcc/df.c", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -849,6 +849,7 @@ df_ref_record (df, reg, loc, insn, ref_type, ref_flags)\n     {\n       loc = &SUBREG_REG (reg);\n       reg = *loc;\n+      ref_flags |= DF_REF_STRIPPED;\n     }\n \n   regno = REGNO (GET_CODE (reg) == SUBREG ? SUBREG_REG (reg) : reg);\n@@ -893,13 +894,8 @@ read_modify_subreg_p (x)\n     return false;\n   isize = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n   osize = GET_MODE_SIZE (GET_MODE (x));\n-  if (isize <= osize)\n-    return true;\n-  if (isize <= UNITS_PER_WORD)\n-    return false;\n-  if (osize > UNITS_PER_WORD)\n-    return false;\n-  return true;\n+  /* Paradoxical subreg writes don't leave a trace of the old content.  */\n+  return (isize > osize && isize > UNITS_PER_WORD);\n }\n \n \n@@ -927,9 +923,7 @@ df_def_record_1 (df, x, bb, insn)\n     }\n \n #ifdef CLASS_CANNOT_CHANGE_MODE\n-  if (GET_CODE (dst) == SUBREG\n-      && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (dst)),\n-\t\t\t\t     GET_MODE (dst)))\n+  if (GET_CODE (dst) == SUBREG)\n     flags |= DF_REF_MODE_CHANGE;\n #endif\n \n@@ -938,7 +932,8 @@ df_def_record_1 (df, x, bb, insn)\n   while (GET_CODE (dst) == STRICT_LOW_PART\n \t || GET_CODE (dst) == ZERO_EXTRACT\n \t || GET_CODE (dst) == SIGN_EXTRACT\n-\t || read_modify_subreg_p (dst))\n+\t || ((df->flags & DF_FOR_REGALLOC) == 0\n+             && read_modify_subreg_p (dst)))\n     {\n       /* Strict low part always contains SUBREG, but we do not want to make\n \t it appear outside, as whole register is always considered.  */\n@@ -948,9 +943,7 @@ df_def_record_1 (df, x, bb, insn)\n \t  dst = *loc;\n \t}\n #ifdef CLASS_CANNOT_CHANGE_MODE\n-      if (GET_CODE (dst) == SUBREG\n-\t  && CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (SUBREG_REG (dst)),\n-\t\t\t\t         GET_MODE (dst)))\n+      if (GET_CODE (dst) == SUBREG)\n         flags |= DF_REF_MODE_CHANGE;\n #endif\n       loc = &XEXP (dst, 0);\n@@ -1050,9 +1043,7 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t  return;\n \t}\n #ifdef CLASS_CANNOT_CHANGE_MODE\n-      if (CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (x),\n-\t\t\t\t      GET_MODE (SUBREG_REG (x))))\n-        flags |= DF_REF_MODE_CHANGE;\n+      flags |= DF_REF_MODE_CHANGE;\n #endif\n \n       /* ... Fall through ...  */\n@@ -1072,13 +1063,12 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t  {\n \t    enum df_ref_flags use_flags;\n \t    case SUBREG:\n-\t      if (read_modify_subreg_p (dst))\n+\t      if ((df->flags & DF_FOR_REGALLOC) == 0\n+                  && read_modify_subreg_p (dst))\n \t\t{\n \t\t  use_flags = DF_REF_READ_WRITE;\n #ifdef CLASS_CANNOT_CHANGE_MODE\n-\t\t  if (CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n-\t\t\t\t\t\t  GET_MODE (SUBREG_REG (dst))))\n-\t\t    use_flags |= DF_REF_MODE_CHANGE;\n+\t\t  use_flags |= DF_REF_MODE_CHANGE;\n #endif\n \t\t  df_uses_record (df, &SUBREG_REG (dst), DF_REF_REG_USE, bb,\n \t\t\t\t  insn, use_flags);\n@@ -1102,9 +1092,7 @@ df_uses_record (df, loc, ref_type, bb, insn, flags)\n \t\tabort ();\n \t      use_flags = DF_REF_READ_WRITE;\n #ifdef CLASS_CANNOT_CHANGE_MODE\n-\t      if (CLASS_CANNOT_CHANGE_MODE_P (GET_MODE (dst),\n-\t\t\t\t\t      GET_MODE (SUBREG_REG (dst))))\n-\t\tuse_flags |= DF_REF_MODE_CHANGE;\n+\t      use_flags |= DF_REF_MODE_CHANGE;\n #endif\n \t      df_uses_record (df, &SUBREG_REG (dst), DF_REF_REG_USE, bb,\n \t\t\t     insn, use_flags);"}, {"sha": "a294843c6cb7a3c09b0d91f87e75ee59f50c89aa", "filename": "gcc/df.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define DF_ALL\t       255\n #define DF_HARD_REGS  1024\t/* Mark hard registers.  */\n #define DF_EQUIV_NOTES 2048\t/* Mark uses present in EQUIV/EQUAL notes.  */\n+#define DF_FOR_REGALLOC 4096    /* If called for the register allocator.  */\n \n enum df_ref_type {DF_REF_REG_DEF, DF_REF_REG_USE, DF_REF_REG_MEM_LOAD,\n \t\t  DF_REF_REG_MEM_STORE};\n@@ -52,13 +53,17 @@ enum df_ref_flags\n     DF_REF_READ_WRITE = 1,\n     \n     /* This flag is set on register references inside a subreg on\n-       machines which have CLASS_CANNOT_CHANGE_MODE and where the mode\n-       change of that subreg expression is invalid for this class.\n+       machines which have CANNOT_CHANGE_MODE_CLASS.\n        Note, that this flag can also be set on df_refs representing\n        the REG itself (i.e., one might not see the subreg anyore).\n        Also note, that this flag is set also for hardreg refs, i.e.,\n        you must check yourself if it's a pseudo.  */\n-    DF_REF_MODE_CHANGE = 2\n+    DF_REF_MODE_CHANGE = 2,\n+\n+    /* This flag is set, if we stripped the subreg from the reference.\n+       In this case we must make conservative guesses, at what the\n+       outer mode was.  */\n+    DF_REF_STRIPPED = 4\n   };\n \n "}, {"sha": "37ca30c79948bad36fe04ef95c7373f89e3922fe", "filename": "gcc/ra-build.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -1305,10 +1305,9 @@ init_one_web_common (web, reg)\n       AND_COMPL_HARD_REG_SET (web->usable_regs, never_use_colors);\n       prune_hardregs_for_mode (&web->usable_regs,\n \t\t\t       PSEUDO_REGNO_MODE (web->regno));\n-#ifdef CLASS_CANNOT_CHANGE_MODE\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n       if (web->mode_changed)\n-        AND_COMPL_HARD_REG_SET (web->usable_regs, reg_class_contents[\n-\t\t\t          (int) CLASS_CANNOT_CHANGE_MODE]);\n+        AND_COMPL_HARD_REG_SET (web->usable_regs, invalid_mode_change_regs);\n #endif\n       web->num_freedom = hard_regs_count (web->usable_regs);\n       web->num_freedom -= web->add_hardregs;\n@@ -1351,6 +1350,7 @@ reinit_one_web (web, reg)\n   web->artificial = 0;\n   web->live_over_abnormal = 0;\n   web->mode_changed = 0;\n+  web->subreg_stripped = 0;\n   web->move_related = 0;\n   web->in_load = 0;\n   web->target_of_spilled_move = 0;\n@@ -1912,6 +1912,9 @@ parts_to_webs_1 (df, copy_webs, all_refs)\n \t  if ((DF_REF_FLAGS (ref) & DF_REF_MODE_CHANGE) != 0\n \t      && web->regno >= FIRST_PSEUDO_REGISTER)\n \t    web->mode_changed = 1;\n+\t  if ((DF_REF_FLAGS (ref) & DF_REF_STRIPPED) != 0\n+\t      && web->regno >= FIRST_PSEUDO_REGISTER)\n+\t    web->subreg_stripped = 1;\n \t  if (i >= def_id\n \t      && TEST_BIT (live_over_abnormal, ref_id))\n \t    web->live_over_abnormal = 1;\n@@ -1961,6 +1964,9 @@ parts_to_webs_1 (df, copy_webs, all_refs)\n       if ((DF_REF_FLAGS (ref) & DF_REF_MODE_CHANGE) != 0\n \t  && web->regno >= FIRST_PSEUDO_REGISTER)\n \tweb->mode_changed = 1;\n+      if ((DF_REF_FLAGS (ref) & DF_REF_STRIPPED) != 0\n+\t  && web->regno >= FIRST_PSEUDO_REGISTER)\n+\tweb->subreg_stripped = 1;\n \n       /* Setup def2web, or use2web, and increment num_defs or num_uses.  */\n       if (i < def_id)\n@@ -2364,10 +2370,9 @@ remember_web_was_spilled (web)\n \t\t       reg_class_contents[(int) GENERAL_REGS]);\n   AND_COMPL_HARD_REG_SET (web->usable_regs, never_use_colors);\n   prune_hardregs_for_mode (&web->usable_regs, PSEUDO_REGNO_MODE (web->regno));\n-#ifdef CLASS_CANNOT_CHANGE_MODE\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n   if (web->mode_changed)\n-    AND_COMPL_HARD_REG_SET (web->usable_regs, reg_class_contents[\n-\t\t\t      (int) CLASS_CANNOT_CHANGE_MODE]);\n+    AND_COMPL_HARD_REG_SET (web->usable_regs, invalid_mode_change_regs);\n #endif\n   web->num_freedom = hard_regs_count (web->usable_regs);\n   if (!web->num_freedom)"}, {"sha": "6c514df1c4ee84cdcf113099c0a1fba7d05729e9", "filename": "gcc/ra-colorize.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra-colorize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra-colorize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-colorize.c?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -1370,10 +1370,9 @@ colorize_one_web (web, hard)\n       else\n \tCOPY_HARD_REG_SET (colors,\n \t\t\t   usable_regs[reg_preferred_class (web->regno)]);\n-#ifdef CLASS_CANNOT_CHANGE_MODE\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n       if (web->mode_changed)\n-        AND_COMPL_HARD_REG_SET (colors, reg_class_contents[\n-\t\t\t          (int) CLASS_CANNOT_CHANGE_MODE]);\n+        AND_COMPL_HARD_REG_SET (colors, invalid_mode_change_regs);\n #endif\n       COPY_HARD_REG_SET (call_clobbered, colors);\n       AND_HARD_REG_SET (call_clobbered, call_used_reg_set);\n@@ -1404,10 +1403,9 @@ colorize_one_web (web, hard)\n \t  else\n \t    IOR_HARD_REG_SET (colors, usable_regs\n \t\t\t      [reg_alternate_class (web->regno)]);\n-#ifdef CLASS_CANNOT_CHANGE_MODE\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n \t  if (web->mode_changed)\n-\t    AND_COMPL_HARD_REG_SET (colors, reg_class_contents[\n-\t\t\t\t      (int) CLASS_CANNOT_CHANGE_MODE]);\n+\t    AND_COMPL_HARD_REG_SET (colors, invalid_mode_change_regs);\n #endif\n \t  COPY_HARD_REG_SET (call_clobbered, colors);\n \t  AND_HARD_REG_SET (call_clobbered, call_used_reg_set);"}, {"sha": "45f22ced3bb3293e6eab178d05101dbeb19510b0", "filename": "gcc/ra.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.c?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -148,6 +148,7 @@ HARD_REG_SET never_use_colors;\n HARD_REG_SET usable_regs[N_REG_CLASSES];\n unsigned int num_free_regs[N_REG_CLASSES];\n HARD_REG_SET hardregs_for_mode[NUM_MACHINE_MODES];\n+HARD_REG_SET invalid_mode_change_regs;\n unsigned char byte2bitcount[256];\n \n unsigned int debug_new_regalloc = -1;\n@@ -555,6 +556,23 @@ init_ra ()\n       COPY_HARD_REG_SET (hardregs_for_mode[i], rs);\n     }\n \n+  CLEAR_HARD_REG_SET (invalid_mode_change_regs);\n+#ifdef CANNOT_CHANGE_MODE_CLASS\n+  if (0)\n+  for (i = 0; i < NUM_MACHINE_MODES; i++)\n+    {\n+      enum machine_mode from = (enum machine_mode) i;\n+      enum machine_mode to;\n+      for (to = VOIDmode; to < MAX_MACHINE_MODE; ++to)\n+\t{\n+\t  int r;\n+\t  for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n+\t    if (REG_CANNOT_CHANGE_MODE_P (from, to, r))\n+\t      SET_HARD_REG_BIT (invalid_mode_change_regs, r);\n+\t}\n+    }\n+#endif\n+\n   for (an_unusable_color = 0; an_unusable_color < FIRST_PSEUDO_REGISTER;\n        an_unusable_color++)\n     if (TEST_HARD_REG_BIT (never_use_colors, an_unusable_color))\n@@ -755,7 +773,7 @@ reg_alloc ()\n \t chains per insn, and per regno.  In later passes only update\n          that info from the new and modified insns.  */\n       df_analyse (df, (ra_pass == 1) ? 0 : (bitmap) -1,\n-\t\t  DF_HARD_REGS | DF_RD_CHAIN | DF_RU_CHAIN);\n+\t\t  DF_HARD_REGS | DF_RD_CHAIN | DF_RU_CHAIN | DF_FOR_REGALLOC);\n \n       if ((debug_new_regalloc & DUMP_DF) != 0)\n \t{"}, {"sha": "f324d362ad3bbd1e44078e76695f193bd394d4f1", "filename": "gcc/ra.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50aac998d41d566b358f8421c5e55188435422d7/gcc%2Fra.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.h?ref=50aac998d41d566b358f8421c5e55188435422d7", "patch": "@@ -168,6 +168,11 @@ struct web\n      was illegal for hardregs in CLASS_CANNOT_CHANGE_MODE.  */\n   unsigned int mode_changed:1;\n \n+  /* Nonzero if some references of this web, where in subreg context,\n+     but the actual subreg is already stripped (i.e. we don't know the\n+     outer mode of the actual reference).  */\n+  unsigned int subreg_stripped:1;\n+\n   /* Nonzero, when this web stems from the last pass of the allocator,\n      and all info is still valid (i.e. it wasn't spilled).  */\n   unsigned int old_web:1;\n@@ -497,6 +502,8 @@ extern unsigned int num_free_regs[N_REG_CLASSES];\n    represent the possible resources which could be taken away be a value\n    in mode M.  */\n extern HARD_REG_SET hardregs_for_mode[NUM_MACHINE_MODES];\n+/* The set of hardregs, for which _any_ mode change is invalid.  */\n+extern HARD_REG_SET invalid_mode_change_regs;\n /* For 0 <= I <= 255, the number of bits set in I.  Used to calculate\n    the number of set bits in a HARD_REG_SET.  */\n extern unsigned char byte2bitcount[256];"}]}