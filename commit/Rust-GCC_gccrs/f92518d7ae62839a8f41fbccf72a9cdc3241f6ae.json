{"sha": "f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyNTE4ZDdhZTYyODM5YThmNDFmYmNjZjcyYTljZGMzMjQxZjZhZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-07-03T19:37:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-07-03T19:37:45Z"}, "message": "Makefile.in (libgcc.mvars): Add LIBGCC_SYNC and LIBGCC_SYNC_CFLAGS.\n\ngcc/\n\t* Makefile.in (libgcc.mvars): Add LIBGCC_SYNC and LIBGCC_SYNC_CFLAGS.\n\t* libgcc-std.ver (GCC_4.4.0): New version, inherited from GCC_4.3.0.\n\tAdd synchronization functions.\n\t* config/sync.c: New file.\n\t* config/mips/t-libgcc-mips16 (LIBGCC_SYNC): Define.\n\t(LIBGCC_SYNC_CFLAGS): Likewise.\n\nlibgcc/\n\t* Makefile.in: Add support for __sync_* libgcc functions.\n\nFrom-SVN: r137431", "tree": {"sha": "7d48228cbb9088d528c307ebedf07fc11c96c8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d48228cbb9088d528c307ebedf07fc11c96c8e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0aede1456bb37d1414e4c5cd60b2a29025c36ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aede1456bb37d1414e4c5cd60b2a29025c36ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0aede1456bb37d1414e4c5cd60b2a29025c36ec"}], "stats": {"total": 336, "additions": 336, "deletions": 0}, "files": [{"sha": "917031f8a8a3a96bd0689d24057c5e739d18d052", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -1,3 +1,12 @@\n+2008-07-03  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (libgcc.mvars): Add LIBGCC_SYNC and LIBGCC_SYNC_CFLAGS.\n+\t* libgcc-std.ver (GCC_4.4.0): New version, inherited from GCC_4.3.0.\n+\tAdd synchronization functions.\n+\t* config/sync.c: New file.\n+\t* config/mips/t-libgcc-mips16 (LIBGCC_SYNC): Define.\n+\t(LIBGCC_SYNC_CFLAGS): Likewise.\n+\n 2008-07-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/36710"}, {"sha": "ef0336607dac163e68abb6c8aa100cb65e3d75ad", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -1664,6 +1664,8 @@ libgcc.mvars: config.status Makefile $(LIB2ADD) $(LIB2ADD_ST) specs \\\n \techo SHLIB_MAPFILES = '$(call srcdirify,$(SHLIB_MAPFILES))' >> tmp-libgcc.mvars\n \techo SHLIB_NM_FLAGS = '$(SHLIB_NM_FLAGS)' >> tmp-libgcc.mvars\n \techo LIBGCC2_CFLAGS = '$(LIBGCC2_CFLAGS)' >> tmp-libgcc.mvars\n+\techo LIBGCC_SYNC = '$(LIBGCC_SYNC)' >> tmp-libgcc.mvars\n+\techo LIBGCC_SYNC_CFLAGS = '$(LIBGCC_SYNC_CFLAGS)' >> tmp-libgcc.mvars\n \techo CRTSTUFF_CFLAGS = '$(CRTSTUFF_CFLAGS)' >> tmp-libgcc.mvars\n \techo CRTSTUFF_T_CFLAGS = '$(CRTSTUFF_T_CFLAGS)' >> tmp-libgcc.mvars\n \techo CRTSTUFF_T_CFLAGS_S = '$(CRTSTUFF_T_CFLAGS_S)' >> tmp-libgcc.mvars"}, {"sha": "d37b6eef539c4d0e3de0eba6a57f9c23abcc783c", "filename": "gcc/config/mips/t-libgcc-mips16", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2Fconfig%2Fmips%2Ft-libgcc-mips16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2Fconfig%2Fmips%2Ft-libgcc-mips16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-libgcc-mips16?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -19,3 +19,6 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16stubsc9 _m16stubsc10 \\\n \t_m16stubdc0 _m16stubdc1 _m16stubdc2 _m16stubdc5 _m16stubdc6 \\\n \t_m16stubdc9 _m16stubdc10\n+\n+LIBGCC_SYNC = yes\n+LIBGCC_SYNC_CFLAGS = -mno-mips16"}, {"sha": "ec60ef0a1a405519b6d53b9a721798e4866be20d", "filename": "gcc/config/sync.c", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2Fconfig%2Fsync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2Fconfig%2Fsync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsync.c?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -0,0 +1,185 @@\n+/* Out-of-line libgcc versions of __sync_* builtins.  */\n+/* Copyright (C) 2008  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* This file is used by targets whose makefiles define LIBGCC_SYNC\n+   to \"yes\".  It is compiled with LIBGCC_SYNC_CFLAGS and provides\n+   out-of-line versions of all relevant __sync_* primitives.\n+\n+   These routines are intended for targets like MIPS that have two\n+   ISA encodings (the \"normal\" ISA and the MIPS16 ISA).  The normal\n+   ISA provides full synchronization capabilities but the MIPS16 ISA\n+   has no encoding for them.  MIPS16 code must therefore call external\n+   non-MIPS16 implementations of the __sync_* routines.\n+\n+   The file is compiled once for each routine.  The following __foo\n+   routines are selected by defining a macro called L<foo>:\n+\n+       __sync_synchronize\n+\n+   The following __foo_N routines are selected by defining FN=foo\n+   and SIZE=N:\n+\n+       __sync_fetch_and_add_N\n+       __sync_fetch_and_sub_N\n+       __sync_fetch_and_or_N\n+       __sync_fetch_and_and_N\n+       __sync_fetch_and_xor_N\n+       __sync_fetch_and_nand_N\n+       __sync_add_and_fetch_N\n+       __sync_sub_and_fetch_N\n+       __sync_or_and_fetch_N\n+       __sync_and_and_fetch_N\n+       __sync_xor_and_fetch_N\n+       __sync_nand_and_fetch_N\n+       __sync_bool_compare_and_swap_N\n+       __sync_val_compare_and_swap_N\n+       __sync_lock_test_and_set_N\n+\n+   SIZE can be 1, 2, 4, 8 or 16.  __foo_N is omitted if the target does\n+   not provide __sync_compare_and_swap_N.\n+\n+   Note that __sync_lock_release does not fall back on external\n+   __sync_lock_release_N functions.  The default implementation\n+   of __sync_lock_release is a call to __sync_synchronize followed\n+   by a store of zero, so we don't need separate library functions\n+   for it.  */\n+\n+#if defined FN\n+\n+/* Define macros for each __sync_* function type.  Each macro defines a\n+   local function called <NAME>_<UNITS> that acts like __<NAME>_<UNITS>.\n+   TYPE is a type that has UNITS bytes.  */\n+\n+#define DEFINE_V_PV(NAME, UNITS, TYPE)\t\t\t\t\t\\\n+  static TYPE\t\t\t\t\t\t\t\t\\\n+  NAME##_##UNITS (TYPE *ptr, TYPE value)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __##NAME (ptr, value);\t\t\t\t\t\\\n+  }\n+\n+#define DEFINE_V_PVV(NAME, UNITS, TYPE)\t\t\t\t\\\n+  static TYPE\t\t\t\t\t\t\t\t\\\n+  NAME##_##UNITS (TYPE *ptr, TYPE value1, TYPE value2)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __##NAME (ptr, value1, value2);\t\t\t\t\\\n+  }\n+\n+#define DEFINE_BOOL_PVV(NAME, UNITS, TYPE)\t\t\t\t\\\n+  static _Bool\t\t\t\t\t\t\t\t\\\n+  NAME##_##UNITS (TYPE *ptr, TYPE value1, TYPE value2)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return __##NAME (ptr, value1, value2);\t\t\t\t\\\n+  }\n+\n+/* Map function names to the appropriate DEFINE_* macro.  */\n+\n+#define local_sync_fetch_and_add DEFINE_V_PV\n+#define local_sync_fetch_and_sub DEFINE_V_PV\n+#define local_sync_fetch_and_or DEFINE_V_PV\n+#define local_sync_fetch_and_and DEFINE_V_PV\n+#define local_sync_fetch_and_xor DEFINE_V_PV\n+#define local_sync_fetch_and_nand DEFINE_V_PV\n+\n+#define local_sync_add_and_fetch DEFINE_V_PV\n+#define local_sync_sub_and_fetch DEFINE_V_PV\n+#define local_sync_or_and_fetch DEFINE_V_PV\n+#define local_sync_and_and_fetch DEFINE_V_PV\n+#define local_sync_xor_and_fetch DEFINE_V_PV\n+#define local_sync_nand_and_fetch DEFINE_V_PV\n+\n+#define local_sync_bool_compare_and_swap DEFINE_BOOL_PVV\n+#define local_sync_val_compare_and_swap DEFINE_V_PVV\n+\n+#define local_sync_lock_test_and_set DEFINE_V_PV\n+\n+/* Define the function __<NAME>_<UNITS>, given that TYPE is a type with\n+   UNITS bytes.  */\n+#define DEFINE1(NAME, UNITS, TYPE) \\\n+  static int unused[sizeof (TYPE) == UNITS ? 1 : -1]\t\\\n+    __attribute__((unused));\t\t\t\t\\\n+  local_##NAME (NAME, UNITS, TYPE);\t\t\t\\\n+  typeof (NAME##_##UNITS) __##NAME##_##UNITS\t\t\\\n+    __attribute__((alias (#NAME \"_\" #UNITS)));\n+\n+/* As above, but performing macro expansion on the arguments.  */\n+#define DEFINE(NAME, UNITS, TYPE) DEFINE1 (NAME, UNITS, TYPE)\n+\n+/* Find an appropriate type TYPE for SIZE and invoke DEFINE (FN, SIZE, TYPE).\n+\n+   The types chosen here may be incorrect for some targets.\n+   For example, targets with 16-byte atomicity support might not\n+   support OImode.  We would need some kind of target-specific\n+   override if that becomes a problem.  */\n+\n+#if SIZE == 1 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1\n+\n+typedef unsigned int UQItype __attribute__((mode (QI)));\n+DEFINE (FN, 1, UQItype)\n+\n+#elif SIZE == 2 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2\n+\n+typedef unsigned int UHItype __attribute__((mode (HI)));\n+DEFINE (FN, 2, UHItype)\n+\n+#elif SIZE == 4 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\n+\n+typedef unsigned int USItype __attribute__((mode (SI)));\n+DEFINE (FN, 4, USItype)\n+\n+#elif SIZE == 8 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8\n+\n+typedef unsigned int UDItype __attribute__((mode (DI)));\n+DEFINE (FN, 8, UDItype)\n+\n+#elif SIZE == 16 && __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\n+\n+typedef unsigned int UOItype __attribute__((mode (OI)));\n+DEFINE (FN, 8, UOItype)\n+\n+#endif\n+\n+#elif __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 \\\n+      || __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 \\\n+      || __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 \\\n+      || __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 \\\n+      || __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\n+\n+#if defined Lsync_synchronize\n+\n+static void\n+sync_synchronize (void)\n+{\n+  __sync_synchronize ();\n+}\n+typeof (sync_synchronize) __sync_synchronize \\\n+  __attribute__((alias (\"sync_synchronize\")));\n+\n+#endif\n+\n+#endif"}, {"sha": "b19871d1b0b4c711654e0c9548e202fd1f99925d", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -1804,3 +1804,88 @@ GCC_4.3.0 {\n %inherit GCC_4.4.0 GCC_4.3.0\n GCC_4.4.0 {\n }\n+\n+%inherit GCC_4.4.0 GCC_4.3.0\n+GCC_4.4.0 {\n+  __sync_fetch_and_add_1\n+  __sync_fetch_and_sub_1\n+  __sync_fetch_and_or_1\n+  __sync_fetch_and_and_1\n+  __sync_fetch_and_xor_1\n+  __sync_fetch_and_nand_1\n+  __sync_add_and_fetch_1\n+  __sync_sub_and_fetch_1\n+  __sync_or_and_fetch_1\n+  __sync_and_and_fetch_1\n+  __sync_xor_and_fetch_1\n+  __sync_nand_and_fetch_1\n+  __sync_bool_compare_and_swap_1\n+  __sync_val_compare_and_swap_1\n+  __sync_lock_test_and_set_1\n+\n+  __sync_fetch_and_add_2\n+  __sync_fetch_and_sub_2\n+  __sync_fetch_and_or_2\n+  __sync_fetch_and_and_2\n+  __sync_fetch_and_xor_2\n+  __sync_fetch_and_nand_2\n+  __sync_add_and_fetch_2\n+  __sync_sub_and_fetch_2\n+  __sync_or_and_fetch_2\n+  __sync_and_and_fetch_2\n+  __sync_xor_and_fetch_2\n+  __sync_nand_and_fetch_2\n+  __sync_bool_compare_and_swap_2\n+  __sync_val_compare_and_swap_2\n+  __sync_lock_test_and_set_2\n+\n+  __sync_fetch_and_add_4\n+  __sync_fetch_and_sub_4\n+  __sync_fetch_and_or_4\n+  __sync_fetch_and_and_4\n+  __sync_fetch_and_xor_4\n+  __sync_fetch_and_nand_4\n+  __sync_add_and_fetch_4\n+  __sync_sub_and_fetch_4\n+  __sync_or_and_fetch_4\n+  __sync_and_and_fetch_4\n+  __sync_xor_and_fetch_4\n+  __sync_nand_and_fetch_4\n+  __sync_bool_compare_and_swap_4\n+  __sync_val_compare_and_swap_4\n+  __sync_lock_test_and_set_4\n+\n+  __sync_fetch_and_add_8\n+  __sync_fetch_and_sub_8\n+  __sync_fetch_and_or_8\n+  __sync_fetch_and_and_8\n+  __sync_fetch_and_xor_8\n+  __sync_fetch_and_nand_8\n+  __sync_add_and_fetch_8\n+  __sync_sub_and_fetch_8\n+  __sync_or_and_fetch_8\n+  __sync_and_and_fetch_8\n+  __sync_xor_and_fetch_8\n+  __sync_nand_and_fetch_8\n+  __sync_bool_compare_and_swap_8\n+  __sync_val_compare_and_swap_8\n+  __sync_lock_test_and_set_8\n+\n+  __sync_fetch_and_add_16\n+  __sync_fetch_and_sub_16\n+  __sync_fetch_and_or_16\n+  __sync_fetch_and_and_16\n+  __sync_fetch_and_xor_16\n+  __sync_fetch_and_nand_16\n+  __sync_add_and_fetch_16\n+  __sync_sub_and_fetch_16\n+  __sync_or_and_fetch_16\n+  __sync_and_and_fetch_16\n+  __sync_xor_and_fetch_16\n+  __sync_nand_and_fetch_16\n+  __sync_bool_compare_and_swap_16\n+  __sync_val_compare_and_swap_16\n+  __sync_lock_test_and_set_16\n+\n+  __sync_synchronize\n+}"}, {"sha": "47f304ff9b03d3b8823ee7c15921c6cf89e81e83", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -1,3 +1,7 @@\n+2008-07-03  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in: Add support for __sync_* libgcc functions.\n+\n 2008-07-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* shared-object.mk ($(base)_s$(objext)): Remove -DSHARED."}, {"sha": "5718a5018307219bcaaba2a88aa50b1f7ba79252", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92518d7ae62839a8f41fbccf72a9cdc3241f6ae/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=f92518d7ae62839a8f41fbccf72a9cdc3241f6ae", "patch": "@@ -577,6 +577,54 @@ endif\n \n endif\n \n+ifeq ($(LIBGCC_SYNC),yes)\n+libgcc-sync-size-funcs := $(foreach op, add sub or and xor nand, \\\n+\t\t\t    sync_fetch_and_$(op) \\\n+\t\t\t    sync_$(op)_and_fetch) \\\n+\t\t\t  sync_bool_compare_and_swap \\\n+\t\t\t  sync_val_compare_and_swap \\\n+\t\t\t  sync_lock_test_and_set\n+\n+libgcc-sync-size-funcs := $(foreach prefix, $(libgcc-sync-size-funcs), \\\n+\t\t\t    $(foreach suffix, 1 2 4 8 16, \\\n+\t\t\t      $(prefix)_$(suffix)))\n+\n+libgcc-sync-size-funcs-o = $(patsubst %,%$(objext),$(libgcc-sync-size-funcs))\n+$(libgcc-sync-size-funcs-o): %$(objext): $(gcc_srcdir)/config/sync.c\n+\t$(gcc_compile) $(LIBGCC_SYNC_CFLAGS) \\\n+\t  -DFN=`echo \"$*\" | sed 's/_[^_]*$$//'` \\\n+\t  -DSIZE=`echo \"$*\" | sed 's/.*_//'` \\\n+\t  -c $(gcc_srcdir)/config/sync.c $(vis_hide)\n+libgcc-objects += $(libgcc-sync-size-funcs-o)\n+\n+libgcc-sync-funcs := sync_synchronize\n+\n+libgcc-sync-funcs-o = $(patsubst %,%$(objext),$(libgcc-sync-funcs))\n+$(libgcc-sync-funcs-o): %$(objext): $(gcc_srcdir)/config/sync.c\n+\t$(gcc_compile) $(LIBGCC_SYNC_CFLAGS) \\\n+\t  -DL$* \\\n+\t  -c $(gcc_srcdir)/config/sync.c $(vis_hide)\n+libgcc-objects += $(libgcc-sync-funcs-o)\n+\n+ifeq ($(enable_shared),yes)\n+libgcc-sync-size-funcs-s-o = $(patsubst %,%_s$(objext), \\\n+\t\t\t       $(libgcc-sync-size-funcs))\n+$(libgcc-sync-size-funcs-s-o): %_s$(objext): $(gcc_srcdir)/config/sync.c\n+\t$(gcc_s_compile) $(LIBGCC_SYNC_CFLAGS) \\\n+\t  -DFN=`echo \"$*\" | sed 's/_[^_]*$$//'` \\\n+\t  -DSIZE=`echo \"$*\" | sed 's/.*_//'` \\\n+\t  -c $(gcc_srcdir)/config/sync.c\n+libgcc-s-objects += $(libgcc-sync-size-funcs-s-o)\n+\n+libgcc-sync-funcs-s-o = $(patsubst %,%_s$(objext),$(libgcc-sync-funcs))\n+$(libgcc-sync-funcs-s-o): %_s$(objext): $(gcc_srcdir)/config/sync.c\n+\t$(gcc_s_compile) $(LIBGCC_SYNC_CFLAGS) \\\n+\t  -DL$*\t\\\n+\t  -c $(gcc_srcdir)/config/sync.c\n+libgcc-s-objects += $(libgcc-sync-funcs-s-o)\n+endif\n+endif\n+\n # Build fixed-point support.\n ifeq ($(fixed_point),yes)\n "}]}