{"sha": "8990ddcdbc634df731387515e0f17b8b825b6300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5MGRkY2RiYzYzNGRmNzMxMzg3NTE1ZTBmMTdiOGI4MjViNjMwMA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:58:02Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:58:02Z"}, "message": "[arm] Eliminate TARGET_FPU_NAME\n\nRather than assuming a specific fpu name has been selected, we work\nout the FPU from the ISA properties.  This is necessary since once we\nhave default FPUs selected by the processor, there will be no explicit\nentry in the table of fpus to refer to.\n\nThis also fixes a bug with the code I added recently to permit new\naliases for existing FPU names: the new names cannot be passed to the\nassembler since it does not recognize them.  By mapping the ISA\nfeatures back to the canonical names we avoid having to teach the\nassembler about the new names.\n\n\t* arm.h (TARGET_FPU_NAME): Delete.\n\t* arm.c (arm_identify_fpu_from_isa): New function.\n\t(arm_declare_function_name): Use it to get the name for the FPU.\n\nFrom-SVN: r243711", "tree": {"sha": "1c4898f81f44c5ad890f25ce8d91b6c0c98a6328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4898f81f44c5ad890f25ce8d91b6c0c98a6328"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8990ddcdbc634df731387515e0f17b8b825b6300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8990ddcdbc634df731387515e0f17b8b825b6300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8990ddcdbc634df731387515e0f17b8b825b6300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8990ddcdbc634df731387515e0f17b8b825b6300/comments", "author": null, "committer": null, "parents": [{"sha": "851966d6a7e711755b6a96f06f166054d6e877ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851966d6a7e711755b6a96f06f166054d6e877ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851966d6a7e711755b6a96f06f166054d6e877ef"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "4ccd46e3b4599bc4be23d1fc130b6c743cfc0dd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8990ddcdbc634df731387515e0f17b8b825b6300/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8990ddcdbc634df731387515e0f17b8b825b6300/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8990ddcdbc634df731387515e0f17b8b825b6300", "patch": "@@ -1,3 +1,9 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.h (TARGET_FPU_NAME): Delete.\n+\t* arm.c (arm_identify_fpu_from_isa): New function.\n+\t(arm_declare_function_name): Use it to get the name for the FPU.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-protos.h: Include sbitmap.h"}, {"sha": "df7a3eac98f7da663606dad271e4790a2980ca1e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8990ddcdbc634df731387515e0f17b8b825b6300/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8990ddcdbc634df731387515e0f17b8b825b6300/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8990ddcdbc634df731387515e0f17b8b825b6300", "patch": "@@ -3256,7 +3256,7 @@ arm_configure_build_target (struct arm_build_target *target,\n   gcc_assert (arm_selected_cpu);\n \n   arm_selected_fpu = &all_fpus[opts->x_arm_fpu_index];\n-  auto_sbitmap fpu_bits(isa_num_bits);\n+  auto_sbitmap fpu_bits (isa_num_bits);\n \n   arm_initialize_isa (fpu_bits, arm_selected_fpu->isa_bits);\n   bitmap_and_compl (target->isa, target->isa, isa_all_fpubits);\n@@ -30433,6 +30433,26 @@ arm_valid_target_attribute_p (tree fndecl, tree ARG_UNUSED (name),\n   return ret;\n }\n \n+/* Match an ISA feature bitmap to a named FPU.  We always use the\n+   first entry that exactly matches the feature set, so that we\n+   effectively canonicalize the FPU name for the assembler.  */\n+static const char*\n+arm_identify_fpu_from_isa (sbitmap isa)\n+{\n+  auto_sbitmap fpubits (isa_num_bits);\n+  auto_sbitmap cand_fpubits (isa_num_bits);\n+\n+  bitmap_and (fpubits, isa, isa_all_fpubits);\n+  for (unsigned int i = 0; i < ARRAY_SIZE (all_fpus); i++)\n+    {\n+      arm_initialize_isa (cand_fpubits, all_fpus[i].isa_bits);\n+      if (bitmap_equal_p (fpubits, cand_fpubits))\n+\treturn all_fpus[i].name;\n+    }\n+  /* We must find an entry, or things have gone wrong.  */\n+  gcc_unreachable ();\n+}\n+\n void\n arm_declare_function_name (FILE *stream, const char *name, tree decl)\n {\n@@ -30454,7 +30474,9 @@ arm_declare_function_name (FILE *stream, const char *name, tree decl)\n     fprintf (stream, \"\\t.arm\\n\");\n \n   asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\",\n-\t       TARGET_SOFT_FLOAT ? \"softvfp\" : TARGET_FPU_NAME);\n+\t       (TARGET_SOFT_FLOAT\n+\t\t? \"softvfp\"\n+\t\t: arm_identify_fpu_from_isa (arm_active_target.isa)));\n \n   if (TARGET_POKE_FUNCTION_NAME)\n     arm_poke_function_name (stream, (const char *) name);"}, {"sha": "980bb743de44fa5aa6fa722a376c03d7a630b4bd", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8990ddcdbc634df731387515e0f17b8b825b6300/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8990ddcdbc634df731387515e0f17b8b825b6300/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8990ddcdbc634df731387515e0f17b8b825b6300", "patch": "@@ -369,7 +369,6 @@ extern const struct arm_fpu_desc\n \n /* Accessors.  */\n \n-#define TARGET_FPU_NAME     (all_fpus[arm_fpu_index].name)\n #define TARGET_FPU_FEATURES (all_fpus[arm_fpu_index].features)\n \n /* Which floating point hardware to schedule for.  */"}]}