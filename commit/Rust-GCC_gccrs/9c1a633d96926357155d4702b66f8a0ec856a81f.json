{"sha": "9c1a633d96926357155d4702b66f8a0ec856a81f", "node_id": "C_kwDOANBUbNoAKDljMWE2MzNkOTY5MjYzNTcxNTVkNDcwMmI2NmY4YTBlYzg1NmE4MWY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-01T12:27:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-01T12:27:32Z"}, "message": "ubsan: Move INT_MIN / -1 instrumentation from -fsanitize=integer-divide-by-zero to -fsanitize=signed-integer-overflow [PR102515]\n\nAs noted by Richi, in clang INT_MIN / -1 is instrumented under\n-fsanitize=signed-integer-overflow rather than\n-fsanitize=integer-divide-by-zero as we did and doing it in the former\nmakes more sense, as it is overflow during division rather than division\nby zero.\nI've verified on godbolt that clang behaved that way since 3.2-ish times or\nso when sanitizers were added.\nFurthermore, we've been using\n-f{,no-}sanitize-recover=integer-divide-by-zero to decide on the float\n-fsanitize=float-divide-by-zero instrumentation _abort suffix.\nThe case where INT_MIN / -1 is instrumented by one sanitizer and\nx / 0 by another one when both are enabled is slightly harder if\nthe -f{,no-}sanitize-recover={integer-divide-by-zero,signed-integer-overflow}\nflags differ, then we need to emit both __ubsan_handle_divrem_overflow\nand __ubsan_handle_divrem_overflow_abort calls guarded by their respective\nchecks rather than one guarded by check1 || check2.\n\n2021-10-01  Jakub Jelinek  <jakub@redhat.com>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR sanitizer/102515\ngcc/\n\t* doc/invoke.texi (-fsanitize=integer-divide-by-zero): Remove\n\tINT_MIN / -1 division detection from here ...\n\t(-fsanitize=signed-integer-overflow): ... and add it here.\ngcc/c-family/\n\t* c-ubsan.c (ubsan_instrument_division): Check the right\n\tflag_sanitize_recover bit, depending on which sanitization\n\tis done.  Sanitize INT_MIN / -1 under SANITIZE_SI_OVERFLOW\n\trather than SANITIZE_DIVIDE.  If both SANITIZE_SI_OVERFLOW\n\tand SANITIZE_DIVIDE is enabled, neither check is known\n\tto be false and flag_sanitize_recover bits for those two\n\taren't the same, emit both __ubsan_handle_divrem_overflow\n\tand __ubsan_handle_divrem_overflow_abort calls.\ngcc/c/\n\t* c-typeck.c (build_binary_op): Call ubsan_instrument_division\n\tfor division even for SANITIZE_SI_OVERFLOW.\ngcc/cp/\n\t* typeck.c (cp_build_binary_op): Call ubsan_instrument_division\n\tfor division even for SANITIZE_SI_OVERFLOW.\ngcc/testsuite/\n\t* c-c++-common/ubsan/div-by-zero-3.c: Use\n\t-fsanitize=signed-integer-overflow instead of\n\t-fsanitize=integer-divide-by-zero.\n\t* c-c++-common/ubsan/div-by-zero-5.c: Likewise.\n\t* c-c++-common/ubsan/div-by-zero-4.c: Likewise.  Add\n\t-fsanitize-undefined-trap-on-error.\n\t* c-c++-common/ubsan/float-div-by-zero-2.c: New test.\n\t* c-c++-common/ubsan/overflow-div-1.c: New test.\n\t* c-c++-common/ubsan/overflow-div-2.c: New test.\n\t* c-c++-common/ubsan/overflow-div-3.c: New test.", "tree": {"sha": "afb3047a365ca5ae004bdcf0875dace7c9d6b5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afb3047a365ca5ae004bdcf0875dace7c9d6b5f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1a633d96926357155d4702b66f8a0ec856a81f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1a633d96926357155d4702b66f8a0ec856a81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1a633d96926357155d4702b66f8a0ec856a81f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1a633d96926357155d4702b66f8a0ec856a81f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c6a8b8013febce5154ed3db8b5a446ca8e1aebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6a8b8013febce5154ed3db8b5a446ca8e1aebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6a8b8013febce5154ed3db8b5a446ca8e1aebf"}], "stats": {"total": 192, "additions": 174, "deletions": 18}, "files": [{"sha": "a4509c68c16d4e22259a8a20d2b267082c732421", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -39,8 +39,9 @@ along with GCC; see the file COPYING3.  If not see\n tree\n ubsan_instrument_division (location_t loc, tree op0, tree op1)\n {\n-  tree t, tt;\n+  tree t, tt, x = NULL_TREE;\n   tree type = TREE_TYPE (op0);\n+  enum sanitize_code flag = SANITIZE_DIVIDE;\n \n   /* At this point both operands should have the same type,\n      because they are already converted to RESULT_TYPE.\n@@ -58,24 +59,42 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n \t\t     op1, build_int_cst (type, 0));\n   else if (TREE_CODE (type) == REAL_TYPE\n \t   && sanitize_flags_p (SANITIZE_FLOAT_DIVIDE))\n-    t = fold_build2 (EQ_EXPR, boolean_type_node,\n-\t\t     op1, build_real (type, dconst0));\n+    {\n+      t = fold_build2 (EQ_EXPR, boolean_type_node,\n+\t\t       op1, build_real (type, dconst0));\n+      flag = SANITIZE_FLOAT_DIVIDE;\n+    }\n   else\n-    return NULL_TREE;\n+    t = NULL_TREE;\n \n   /* We check INT_MIN / -1 only for signed types.  */\n   if (TREE_CODE (type) == INTEGER_TYPE\n-      && sanitize_flags_p (SANITIZE_DIVIDE)\n+      && sanitize_flags_p (SANITIZE_SI_OVERFLOW)\n       && !TYPE_UNSIGNED (type))\n     {\n-      tree x;\n       tt = fold_build2 (EQ_EXPR, boolean_type_node, unshare_expr (op1),\n \t\t\tbuild_int_cst (type, -1));\n       x = fold_build2 (EQ_EXPR, boolean_type_node, op0,\n \t\t       TYPE_MIN_VALUE (type));\n       x = fold_build2 (TRUTH_AND_EXPR, boolean_type_node, x, tt);\n-      t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, x);\n+      if (t == NULL_TREE || integer_zerop (t))\n+\t{\n+\t  t = x;\n+\t  x = NULL_TREE;\n+\t  flag = SANITIZE_SI_OVERFLOW;\n+\t}\n+      else if (flag_sanitize_undefined_trap_on_error\n+\t       || (((flag_sanitize_recover & SANITIZE_DIVIDE) == 0)\n+\t\t   == ((flag_sanitize_recover & SANITIZE_SI_OVERFLOW) == 0)))\n+\t{\n+\t  t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, x);\n+\t  x = NULL_TREE;\n+\t}\n+      else if (integer_zerop (x))\n+\tx = NULL_TREE;\n     }\n+  else if (t == NULL_TREE)\n+    return NULL_TREE;\n \n   /* If the condition was folded to 0, no need to instrument\n      this expression.  */\n@@ -95,16 +114,28 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n \t\t\t\t     NULL_TREE);\n       data = build_fold_addr_expr_loc (loc, data);\n       enum built_in_function bcode\n-\t= (flag_sanitize_recover & SANITIZE_DIVIDE)\n+\t= (flag_sanitize_recover & flag)\n \t  ? BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW\n \t  : BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT;\n       tt = builtin_decl_explicit (bcode);\n       op0 = unshare_expr (op0);\n       op1 = unshare_expr (op1);\n       tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n \t\t\t\tubsan_encode_value (op1));\n+      if (x)\n+\t{\n+\t  bcode = (flag_sanitize_recover & SANITIZE_SI_OVERFLOW)\n+\t\t  ? BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW\n+\t\t  : BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT;\n+\t  tree xt = builtin_decl_explicit (bcode);\n+\t  op0 = unshare_expr (op0);\n+\t  op1 = unshare_expr (op1);\n+\t  xt = build_call_expr_loc (loc, xt, 3, data, ubsan_encode_value (op0),\n+\t\t\t\t    ubsan_encode_value (op1));\n+\t  x = fold_build3 (COND_EXPR, void_type_node, x, xt, void_node);\n+\t}\n     }\n-  t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_node);\n+  t = fold_build3 (COND_EXPR, void_type_node, t, tt, x ? x : void_node);\n \n   return t;\n }"}, {"sha": "c74f876e6674f5bb225b2a136affa433ff2421a7", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -12733,7 +12733,9 @@ build_binary_op (location_t location, enum tree_code code,\n     }\n \n   if (sanitize_flags_p ((SANITIZE_SHIFT\n-\t\t\t | SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n+\t\t\t | SANITIZE_DIVIDE\n+\t\t\t | SANITIZE_FLOAT_DIVIDE\n+\t\t\t | SANITIZE_SI_OVERFLOW))\n       && current_function_decl != NULL_TREE\n       && (doing_div_or_mod || doing_shift)\n       && !require_constant_value)\n@@ -12744,7 +12746,8 @@ build_binary_op (location_t location, enum tree_code code,\n       op0 = c_fully_fold (op0, false, NULL);\n       op1 = c_fully_fold (op1, false, NULL);\n       if (doing_div_or_mod && (sanitize_flags_p ((SANITIZE_DIVIDE\n-\t\t\t\t\t\t  | SANITIZE_FLOAT_DIVIDE))))\n+\t\t\t\t\t\t  | SANITIZE_FLOAT_DIVIDE\n+\t\t\t\t\t\t  | SANITIZE_SI_OVERFLOW))))\n \tinstrument_expr = ubsan_instrument_division (location, op0, op1);\n       else if (doing_shift && sanitize_flags_p (SANITIZE_SHIFT))\n \tinstrument_expr = ubsan_instrument_shift (location, code, op0, op1);"}, {"sha": "cd130f16a66b001fe4dd339b0f3da7a1219e9d9f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -6038,7 +6038,9 @@ cp_build_binary_op (const op_location_t &location,\n     }\n \n   if (sanitize_flags_p ((SANITIZE_SHIFT\n-\t\t\t | SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n+\t\t\t | SANITIZE_DIVIDE\n+\t\t\t | SANITIZE_FLOAT_DIVIDE\n+\t\t\t | SANITIZE_SI_OVERFLOW))\n       && current_function_decl != NULL_TREE\n       && !processing_template_decl\n       && (doing_div_or_mod || doing_shift))\n@@ -6050,7 +6052,9 @@ cp_build_binary_op (const op_location_t &location,\n       op1 = fold_non_dependent_expr (op1, complain);\n       tree instrument_expr1 = NULL_TREE;\n       if (doing_div_or_mod\n-\t  && sanitize_flags_p (SANITIZE_DIVIDE | SANITIZE_FLOAT_DIVIDE))\n+\t  && sanitize_flags_p (SANITIZE_DIVIDE\n+\t\t\t       | SANITIZE_FLOAT_DIVIDE\n+\t\t\t       | SANITIZE_SI_OVERFLOW))\n \t{\n \t  /* For diagnostics we want to use the promoted types without\n \t     shorten_binary_op.  So convert the arguments to the"}, {"sha": "5f39b208049bbfdcc06e75d291a8dcfe2155f624", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -15229,7 +15229,7 @@ ISO C90 and C99, etc.\n \n @item -fsanitize=integer-divide-by-zero\n @opindex fsanitize=integer-divide-by-zero\n-Detect integer division by zero as well as @code{INT_MIN / -1} division.\n+Detect integer division by zero.\n \n @item -fsanitize=unreachable\n @opindex fsanitize=unreachable\n@@ -15261,7 +15261,8 @@ returning a value.  This option works in C++ only.\n @opindex fsanitize=signed-integer-overflow\n This option enables signed integer overflow checking.  We check that\n the result of @code{+}, @code{*}, and both unary and binary @code{-}\n-does not overflow in the signed arithmetics.  Note, integer promotion\n+does not overflow in the signed arithmetics.  This also detects\n+@code{INT_MIN / -1} signed division.  Note, integer promotion\n rules must be taken into account.  That is, the following is not an\n overflow:\n @smallexample"}, {"sha": "1d51e3573e76505b8d45d73a53ca5bed5c664fdd", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-3.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-overflow\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-overflow\" } */\n \n #include <limits.h>\n "}, {"sha": "ef431c93e4e2f4c842f7ca6e4a7e53d81573730a", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-4.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-overflow\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fsanitize-undefined-trap-on-error -Wno-overflow\" } */\n \n #define INT_MIN (-__INT_MAX__ - 1)\n "}, {"sha": "853a3dc50035e9947005f8683cd08e1f39677065", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-5.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fsanitize=integer-divide-by-zero\" } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n \n void\n foo (void)"}, {"sha": "61d050ae23be70a98595965dbd646bb4b707ce84", "filename": "gcc/testsuite/c-c++-common/ubsan/float-div-by-zero-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-div-by-zero-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-div-by-zero-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-div-by-zero-2.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=float-divide-by-zero -fno-sanitize-recover=float-divide-by-zero -fsanitize-recover=integer-divide-by-zero\" } */\n+\n+int\n+main (void)\n+{\n+  volatile float a = 1.3f;\n+  volatile double b = 0.0;\n+  volatile int c = 4;\n+  volatile float res;\n+\n+  res = a / b;\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"division by zero\" } */"}, {"sha": "d781660f4ff03ad4909974dd769cbc6a233315f1", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-div-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-1.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -fno-sanitize-recover=undefined,float-divide-by-zero -Wno-overflow\" } */\n+\n+#include <limits.h>\n+\n+int\n+main (void)\n+{\n+  volatile int min = INT_MIN;\n+  volatile int zero = 0;\n+\n+  INT_MIN / -1;\n+  min / -1;\n+  min / (10 * zero - (2 - 1));\n+\n+  return 0;\n+}"}, {"sha": "dfef1b0145e3d7fc0b906dfd700d29803abe4620", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-div-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-2.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target *-*-linux* *-*-gnu* } } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=integer-divide-by-zero\" } */\n+\n+#include <limits.h>\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+int cnt;\n+\n+__attribute__((noipa)) int\n+foo (int x, int y)\n+{\n+  return x / y;\n+}\n+\n+void\n+handler (int i)\n+{\n+  if (cnt++ != 0)\n+    exit (0);\n+  volatile int b = foo (5, 0);\n+  exit (0);\n+}\n+\n+int\n+main (void)\n+{\n+  struct sigaction s;\n+  sigemptyset (&s.sa_mask);\n+  s.sa_handler = handler;\n+  s.sa_flags = 0;\n+  sigaction (SIGFPE, &s, NULL);\n+  volatile int a = foo (INT_MIN, -1);\n+  cnt++;\n+  volatile int b = foo (5, 0);\n+  return 0;\n+}\n+\n+/* { dg-output \"division of -2147483648 by -1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\\[^\\n\\r]*\" } */"}, {"sha": "479dffb03044a68eefefe6a55a126d522337ec81", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-div-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1a633d96926357155d4702b66f8a0ec856a81f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-div-3.c?ref=9c1a633d96926357155d4702b66f8a0ec856a81f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target *-*-linux* *-*-gnu* } } */\n+/* { dg-shouldfail \"ubsan\" } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=signed-integer-overflow\" } */\n+\n+#include <limits.h>\n+#include <signal.h>\n+#include <stdlib.h>\n+\n+int cnt;\n+\n+__attribute__((noipa)) int\n+foo (int x, int y)\n+{\n+  return x / y;\n+}\n+\n+void\n+handler (int i)\n+{\n+  if (cnt++ != 0)\n+    exit (0);\n+  volatile int b = foo (INT_MIN, -1);\n+  exit (0);\n+}\n+\n+int\n+main (void)\n+{\n+  struct sigaction s;\n+  sigemptyset (&s.sa_mask);\n+  s.sa_handler = handler;\n+  s.sa_flags = 0;\n+  sigaction (SIGFPE, &s, NULL);\n+  volatile int a = foo (42, 0);\n+  cnt++;\n+  volatile int b = foo (INT_MIN, -1);\n+  return 0;\n+}\n+\n+/* { dg-output \"division by zero\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division of -2147483648 by -1 cannot be represented in type 'int'\" } */"}]}