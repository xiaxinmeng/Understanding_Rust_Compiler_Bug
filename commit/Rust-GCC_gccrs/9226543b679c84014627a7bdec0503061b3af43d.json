{"sha": "9226543b679c84014627a7bdec0503061b3af43d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyNjU0M2I2NzljODQwMTQ2MjdhN2JkZWMwNTAzMDYxYjNhZjQzZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2006-09-10T19:28:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2006-09-10T19:28:48Z"}, "message": "re PR target/29006 (Incorrect zeroing of unaligned 64-bit fields on MIPS targets)\n\ngcc/\n\tPR target/29006\n\t* config/mips/mips-protos.h (mips_mem_fits_mode_p): Declare.\n\t* config/mips/mips.c (mips_expand_unaligned_store): Use the mode\n\treturned by mode_for_size, rather than the mode of src itself,\n\tto choose between 32-bit and 64-bit patterns.\n\t(mips_mem_fits_mode_p): New function.\n\t* config/mips/mips.md (mov_<load>l, mov_<load>r): Use it to check\n\tthat the size of the source matches the size of the destination.\n\t(mov_<store>l, mov_<store>r): Likewise.\n\ngcc/testsuite/\n\tPR target/29006\n\t* gcc.c-torture/execute/pr29006.c: New test.\n\nFrom-SVN: r116822", "tree": {"sha": "b9dc496a59b71728c2401746553b841ebcbcaa38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9dc496a59b71728c2401746553b841ebcbcaa38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9226543b679c84014627a7bdec0503061b3af43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9226543b679c84014627a7bdec0503061b3af43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9226543b679c84014627a7bdec0503061b3af43d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9226543b679c84014627a7bdec0503061b3af43d/comments", "author": null, "committer": null, "parents": [{"sha": "ca6f2eefa4d61ec714e0d63d39e9120ad1e72e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6f2eefa4d61ec714e0d63d39e9120ad1e72e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6f2eefa4d61ec714e0d63d39e9120ad1e72e66"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "a389b503ffa92a32db5597aa486a66b9da4a044a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9226543b679c84014627a7bdec0503061b3af43d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9226543b679c84014627a7bdec0503061b3af43d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9226543b679c84014627a7bdec0503061b3af43d", "patch": "@@ -1,3 +1,15 @@\n+2006-09-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/29006\n+\t* config/mips/mips-protos.h (mips_mem_fits_mode_p): Declare.\n+\t* config/mips/mips.c (mips_expand_unaligned_store): Use the mode\n+\treturned by mode_for_size, rather than the mode of src itself,\n+\tto choose between 32-bit and 64-bit patterns.\n+\t(mips_mem_fits_mode_p): New function.\n+\t* config/mips/mips.md (mov_<load>l, mov_<load>r): Use it to check\n+\tthat the size of the source matches the size of the destination.\n+\t(mov_<store>l, mov_<store>r): Likewise.\n+\n 2006-09-10  Eric Christopher  <echristo@apple.com>\n \n \t* config/darwin.c (machopic_select_rtx_section): Add CONST_VECTOR"}, {"sha": "da1ccea80cbc9e2b06140a9b5e8ce654911610b4", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=9226543b679c84014627a7bdec0503061b3af43d", "patch": "@@ -189,6 +189,7 @@ extern void mips_va_start (tree, rtx);\n \n extern bool mips_expand_unaligned_load (rtx, rtx, unsigned int, int);\n extern bool mips_expand_unaligned_store (rtx, rtx, unsigned int, int);\n+extern bool mips_mem_fits_mode_p (enum machine_mode mode, rtx x);\n extern void override_options (void);\n extern void mips_conditional_register_usage (void);\n extern void mips_order_regs_for_local_alloc (void);"}, {"sha": "91e90e0918ed243c5325fe4ae8c6f46a02cf4d78", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9226543b679c84014627a7bdec0503061b3af43d", "patch": "@@ -4541,13 +4541,15 @@ bool\n mips_expand_unaligned_store (rtx dest, rtx src, unsigned int width, int bitpos)\n {\n   rtx left, right;\n+  enum machine_mode mode;\n \n   if (!mips_get_unaligned_mem (&dest, width, bitpos, &left, &right))\n     return false;\n \n-  src = gen_lowpart (mode_for_size (width, MODE_INT, 0), src);\n+  mode = mode_for_size (width, MODE_INT, 0);\n+  src = gen_lowpart (mode, src);\n \n-  if (GET_MODE (src) == DImode)\n+  if (mode == DImode)\n     {\n       emit_insn (gen_mov_sdl (dest, src, left));\n       emit_insn (gen_mov_sdr (copy_rtx (dest), copy_rtx (src), right));\n@@ -4560,6 +4562,20 @@ mips_expand_unaligned_store (rtx dest, rtx src, unsigned int width, int bitpos)\n   return true;\n }\n \n+/* Return true if X is a MEM with the same size as MODE.  */\n+\n+bool\n+mips_mem_fits_mode_p (enum machine_mode mode, rtx x)\n+{\n+  rtx size;\n+\n+  if (!MEM_P (x))\n+    return false;\n+\n+  size = MEM_SIZE (x);\n+  return size && INTVAL (size) == GET_MODE_SIZE (mode);\n+}\n+\n /* Return true if (zero_extract OP SIZE POSITION) can be used as the\n    source of an \"ext\" instruction or the destination of an \"ins\"\n    instruction.  OP must be a register operand and the following"}, {"sha": "a9b9add0dcffddc2f94b3a1c6f69ac4434c09339", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=9226543b679c84014627a7bdec0503061b3af43d", "patch": "@@ -2970,7 +2970,7 @@\n \t(unspec:GPR [(match_operand:BLK 1 \"memory_operand\" \"m\")\n \t\t     (match_operand:QI 2 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_LOAD_LEFT))]\n-  \"!TARGET_MIPS16\"\n+  \"!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])\"\n   \"<load>l\\t%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2981,7 +2981,7 @@\n \t\t     (match_operand:QI 2 \"memory_operand\" \"m\")\n \t\t     (match_operand:GPR 3 \"register_operand\" \"0\")]\n \t\t    UNSPEC_LOAD_RIGHT))]\n-  \"!TARGET_MIPS16\"\n+  \"!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[1])\"\n   \"<load>r\\t%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -2991,7 +2991,7 @@\n \t(unspec:BLK [(match_operand:GPR 1 \"reg_or_0_operand\" \"dJ\")\n \t\t     (match_operand:QI 2 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_STORE_LEFT))]\n-  \"!TARGET_MIPS16\"\n+  \"!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[0])\"\n   \"<store>l\\t%z1,%2\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -3002,7 +3002,7 @@\n \t\t     (match_operand:QI 2 \"memory_operand\" \"m\")\n \t\t     (match_dup 0)]\n \t\t    UNSPEC_STORE_RIGHT))]\n-  \"!TARGET_MIPS16\"\n+  \"!TARGET_MIPS16 && mips_mem_fits_mode_p (<MODE>mode, operands[0])\"\n   \"<store>r\\t%z1,%2\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "ce2c223a640a83e866a85e6b32d83990646d254e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9226543b679c84014627a7bdec0503061b3af43d", "patch": "@@ -1,3 +1,8 @@\n+2006-09-10  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR target/29006\n+\t* gcc.c-torture/execute/pr29006.c: New test.\n+\n 2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR libfortran/28947"}, {"sha": "4d1f1388465de74b75016f629c70aef188aadc4c", "filename": "gcc/testsuite/gcc.c-torture/execute/pr29006.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29006.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9226543b679c84014627a7bdec0503061b3af43d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29006.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr29006.c?ref=9226543b679c84014627a7bdec0503061b3af43d", "patch": "@@ -0,0 +1,3 @@\n+struct __attribute__((__packed__)) s { char c; unsigned long long x; };\n+void __attribute__((__noinline__)) foo (struct s *s) { s->x = 0; }\n+int main (void) { struct s s = { 1, ~0ULL }; foo (&s); return s.x != 0; }"}]}