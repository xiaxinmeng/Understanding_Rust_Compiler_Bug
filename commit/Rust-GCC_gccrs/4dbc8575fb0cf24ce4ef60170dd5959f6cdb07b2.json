{"sha": "4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRiYzg1NzVmYjBjZjI0Y2U0ZWY2MDE3MGRkNTk1OWY2Y2RiMDdiMg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-03-01T21:39:38Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-03-01T21:39:38Z"}, "message": "parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Note that auto is either a storage class or a simple type specifier...\n\n2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Note\n\tthat auto is either a storage class or a simple type specifier,\n\tdepending on the dialect.\n\t(cp_parser_decl_specifier_seq): Complain about `auto' as a storage\n\tspecifier in C++98 mode, error in C++0x mode (since we don't\n\tsupport auto as a type specifier, yet).\n\t(cp_parser_storage_class_specifier_opt): Don't treat `auto' as a\n\tstorage specifier in C++0x mode.\n\t(cp_parser_simple_type_specifier): Parse `auto' as a\n\tsimple-type-specifier, but error because we don't support it yet.\n\n2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* g++.dg/cpp0x/auto1.C: New.\n\nFrom-SVN: r132806", "tree": {"sha": "6a8f0774ae411ae2428c3b6f1f86ec5bf290af46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a8f0774ae411ae2428c3b6f1f86ec5bf290af46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fafcb222d8dd6983553dcae1fde5584a37f14ef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafcb222d8dd6983553dcae1fde5584a37f14ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafcb222d8dd6983553dcae1fde5584a37f14ef1"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "6f612621e28a4b9ef6e92f94fbec2bba43478a49", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "patch": "@@ -1,3 +1,16 @@\n+2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* parser.c (cp_lexer_next_token_is_decl_specifier_keyword): Note\n+\tthat auto is either a storage class or a simple type specifier,\n+\tdepending on the dialect.\n+\t(cp_parser_decl_specifier_seq): Complain about `auto' as a storage\n+\tspecifier in C++98 mode, error in C++0x mode (since we don't\n+\tsupport auto as a type specifier, yet).\n+\t(cp_parser_storage_class_specifier_opt): Don't treat `auto' as a\n+\tstorage specifier in C++0x mode.\n+\t(cp_parser_simple_type_specifier): Parse `auto' as a\n+\tsimple-type-specifier, but error because we don't support it yet.\n+\n 2008-02-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* parser.c (cp_parser_nonclass_name): New."}, {"sha": "817a0628987e9c8a91697039b4de67cd612ee4e8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "patch": "@@ -539,8 +539,10 @@ cp_lexer_next_token_is_decl_specifier_keyword (cp_lexer *lexer)\n   token = cp_lexer_peek_token (lexer);\n   switch (token->keyword) \n     {\n-      /* Storage classes.  */\n+      /* auto specifier: storage-class-specifier in C++,\n+         simple-type-specifier in C++0x.  */\n     case RID_AUTO:\n+      /* Storage classes.  */\n     case RID_REGISTER:\n     case RID_STATIC:\n     case RID_EXTERN:\n@@ -8134,13 +8136,33 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t     GNU Extension:\n \t       thread  */\n \tcase RID_AUTO:\n+          /* Consume the token.  */\n+          cp_lexer_consume_token (parser->lexer);\n+\n+          if (cxx_dialect == cxx98) \n+            {\n+              /* Complain about `auto' as a storage specifier, if\n+                 we're complaining about C++0x compatibility.  */\n+              warning \n+                (OPT_Wc__0x_compat, \n+                 \"%<auto%> will change meaning in C++0x; please remove it\");\n+\n+              /* Set the storage class anyway.  */\n+              cp_parser_set_storage_class (parser, decl_specs, RID_AUTO);\n+            }\n+          else \n+            /* We do not yet support the use of `auto' as a\n+               type-specifier.  */\n+            error (\"C++0x %<auto%> specifier not supported\");\n+          break;\n+\n \tcase RID_REGISTER:\n \tcase RID_STATIC:\n \tcase RID_EXTERN:\n \tcase RID_MUTABLE:\n \t  /* Consume the token.  */\n \t  cp_lexer_consume_token (parser->lexer);\n-\t  cp_parser_set_storage_class (parser, decl_specs, token->keyword);\n+          cp_parser_set_storage_class (parser, decl_specs, token->keyword);\n \t  break;\n \tcase RID_THREAD:\n \t  /* Consume the token.  */\n@@ -8266,6 +8288,10 @@ cp_parser_storage_class_specifier_opt (cp_parser* parser)\n   switch (cp_lexer_peek_token (parser->lexer)->keyword)\n     {\n     case RID_AUTO:\n+      if (cxx_dialect != cxx98)\n+        return NULL_TREE;\n+      /* Fall through for C++98.  */\n+\n     case RID_REGISTER:\n     case RID_STATIC:\n     case RID_EXTERN:\n@@ -10705,6 +10731,7 @@ cp_parser_type_specifier (cp_parser* parser,\n    C++0x Extension:\n \n    simple-type-specifier:\n+     auto\n      decltype ( expression )   \n \n    GNU Extension:\n@@ -10775,6 +10802,17 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n     case RID_VOID:\n       type = void_type_node;\n       break;\n+      \n+    case RID_AUTO:\n+      if (cxx_dialect != cxx98)\n+        {\n+          /* Consume the token.  */\n+          cp_lexer_consume_token (parser->lexer);\n+          /* We do not yet support the use of `auto' as a\n+             type-specifier.  */\n+          error (\"C++0x %<auto%> specifier not supported\");\n+        }\n+      break;\n \n     case RID_DECLTYPE:\n       /* Parse the `decltype' type.  */"}, {"sha": "05b49db777c7fd2cbd8e14fb3a845d5ea5675b3b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "patch": "@@ -1,3 +1,7 @@\n+2008-03-01  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* g++.dg/cpp0x/auto1.C: New.\n+\n 2008-03-01  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/34770"}, {"sha": "9e274b62239feed70efbf5149204703931079d48", "filename": "gcc/testsuite/g++.dg/cpp0x/auto1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto1.C?ref=4dbc8575fb0cf24ce4ef60170dd5959f6cdb07b2", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++98 -Wc++0x-compat\" }\n+\n+// Test warning for use of auto in C++98 mode with C++0x\n+// compatibility warnings\n+void f()\n+{\n+  auto int x = 5; // { dg-warning \"will change meaning\" }\n+}"}]}