{"sha": "9199da4b59c34cbcf2cea912b39400d7e90525d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE5OWRhNGI1OWMzNGNiY2YyY2VhOTEyYjM5NDAwZDdlOTA1MjVkNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-04T08:36:32Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-04T08:38:04Z"}, "message": "Document missing params.\n\ncontrib/ChangeLog:\n\n\t* check-params-in-docs.py: use flake8 and add some\n\ttweaks to ignore aarch64 params.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Add missing params.", "tree": {"sha": "7c0bdd1c27fe022b9ac1fa783742455962051240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0bdd1c27fe022b9ac1fa783742455962051240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9199da4b59c34cbcf2cea912b39400d7e90525d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9199da4b59c34cbcf2cea912b39400d7e90525d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9199da4b59c34cbcf2cea912b39400d7e90525d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9199da4b59c34cbcf2cea912b39400d7e90525d6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9715663f7db7ac57121c9a60dd0078787e274f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9715663f7db7ac57121c9a60dd0078787e274f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9715663f7db7ac57121c9a60dd0078787e274f66"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "440549f5fd89dcbd67493d6319292898ec7f80b4", "filename": "contrib/check-params-in-docs.py", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199da4b59c34cbcf2cea912b39400d7e90525d6/contrib%2Fcheck-params-in-docs.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199da4b59c34cbcf2cea912b39400d7e90525d6/contrib%2Fcheck-params-in-docs.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fcheck-params-in-docs.py?ref=9199da4b59c34cbcf2cea912b39400d7e90525d6", "patch": "@@ -23,6 +23,7 @@\n #\n \n import argparse\n+import sys\n from itertools import dropwhile, takewhile\n \n \n@@ -42,7 +43,7 @@ def get_param_tuple(line):\n \n args = parser.parse_args()\n \n-ignored = set(['logical-op-non-short-circuit'])\n+ignored = {'logical-op-non-short-circuit'}\n params = {}\n \n for line in open(args.params_output).readlines():\n@@ -58,15 +59,21 @@ def get_param_tuple(line):\n \n token = '@item '\n texi = [x[len(token):] for x in texi if x.startswith(token)]\n+# skip digits\n+texi = [x for x in texi if not x[0].isdigit()]\n+# skip aarch64 params\n+texi = [x for x in texi if not x.startswith('aarch64')]\n sorted_texi = sorted(texi)\n \n texi_set = set(texi) - ignored\n params_set = set(params.keys()) - ignored\n \n+success = True\n extra = texi_set - params_set\n if len(extra):\n     print('Extra:')\n     print(extra)\n+    success = False\n \n missing = params_set - texi_set\n if len(missing):\n@@ -75,6 +82,9 @@ def get_param_tuple(line):\n         print('@item ' + m)\n         print(params[m])\n         print()\n+    success = False\n \n if texi != sorted_texi:\n     print('WARNING: not sorted alphabetically!')\n+\n+sys.exit(0 if success else 1)"}, {"sha": "38c4d6a865aaa525c178d16998abaa7eead08f47", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9199da4b59c34cbcf2cea912b39400d7e90525d6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9199da4b59c34cbcf2cea912b39400d7e90525d6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9199da4b59c34cbcf2cea912b39400d7e90525d6", "patch": "@@ -13041,6 +13041,9 @@ growth limit is needed to avoid exponential explosion of code size.  Thus for\n smaller units, the size is increased to @option{--param large-unit-insns}\n before applying @option{--param inline-unit-growth}.\n \n+@item lazy-modules\n+Maximum number of concurrently open C++ module files when lazy loading.\n+\n @item inline-unit-growth\n Specifies maximal overall growth of the compilation unit caused by inlining.\n For example, parameter value 20 limits unit growth to 1.2 times the original\n@@ -13052,6 +13055,9 @@ Specifies maximal overall growth of the compilation unit caused by\n interprocedural constant propagation.  For example, parameter value 10 limits\n unit growth to 1.1 times the original size.\n \n+@item ipa-cp-large-unit-insns\n+The size of translation unit that IPA-CP pass considers large.\n+\n @item large-stack-frame\n The limit specifying large stack frames.  While inlining the algorithm is trying\n to not grow past this limit too much.\n@@ -13106,19 +13112,19 @@ Deeper chains are still handled by late inlining.\n Probability (in percent) that C++ inline function with comdat visibility\n are shared across multiple compilation units.\n \n-@item ipa-modref-max-bases\n-@item ipa-modref-max-refs\n-@item ipa-modref-max-accesses\n+@item modref-max-bases\n+@item modref-max-refs\n+@item modref-max-accesses\n Specifies the maximal number of base pointers, referneces and accesses stored\n for a single function by mod/ref analysis.\n \n-@item ipa-modref-max-tests\n+@item modref-max-tests\n Specifies the maxmal number of tests alias oracle can perform to disambiguate\n memory locations using the mod/ref information.  This parameter ought to be\n-bigger than @option{--param ipa-modref-max-bases} and @option{--param\n-ipa-modref-max-refs}.\n+bigger than @option{--param modref-max-bases} and @option{--param\n+modref-max-refs}.\n \n-@item ipa-modref-max-depth\n+@item modref-max-depth\n Specifies the maximum depth of DFS walk used by modref escape analysis.\n Setting to 0 disables the analysis completely.\n \n@@ -13966,6 +13972,12 @@ If the size of a local variable in bytes is smaller or equal to this\n number, directly poison (or unpoison) shadow memory instead of using\n run-time callbacks.\n \n+@item tsan-distinguish-volatile\n+Emit special instrumentation for accesses to volatiles.\n+\n+@item tsan-instrument-func-entry-exit\n+Emit instrumentation calls to __tsan_func_entry() and __tsan_func_exit().\n+\n @item max-fsm-thread-path-insns\n Maximum number of instructions to copy when duplicating blocks on a\n finite state automaton jump thread path.\n@@ -14005,6 +14017,9 @@ we may be able to devirtualize speculatively.\n The maximum number of assertions to add along the default edge of a switch\n statement during VRP.\n \n+@item evrp-mode\n+Specifies the mode Early VRP should operate in.\n+\n @item unroll-jam-min-percent\n The minimum percentage of memory references that must be optimized\n away for the unroll-and-jam transformation to be considered profitable.\n@@ -14169,15 +14184,26 @@ Maximum number of VALUEs handled during a single find_base_term call.\n The maximum number of exploded nodes per program point within\n the analyzer, before terminating analysis of that point.\n \n+@item analyzer-max-constraints\n+The maximum number of constraints per state.\n+\n @item analyzer-min-snodes-for-call-summary\n The minimum number of supernodes within a function for the\n analyzer to consider summarizing its effects at call sites.\n \n+@item analyzer-max-enodes-for-full-dump\n+The maximum depth of exploded nodes that should appear in a dot dump\n+before switching to a less verbose format.\n+\n @item analyzer-max-recursion-depth\n The maximum number of times a callsite can appear in a call stack\n within the analyzer, before terminating analysis of a call that would\n recurse deeper.\n \n+@item analyzer-max-svalue-depth\n+The maximum depth of a symbolic value, before approximating\n+the value as unknown.\n+\n @item gimple-fe-computed-hot-bb-threshold\n The number of executions of a basic block which is considered hot.\n The parameter is used only in GIMPLE FE."}]}