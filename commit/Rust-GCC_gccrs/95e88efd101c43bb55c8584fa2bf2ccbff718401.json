{"sha": "95e88efd101c43bb55c8584fa2bf2ccbff718401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlODhlZmQxMDFjNDNiYjU1Yzg1ODRmYTJiZjJjY2JmZjcxODQwMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-06-27T01:21:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-06-27T01:21:13Z"}, "message": "fwprop.c (try_fwprop_subst): Use validate_unshare_change.\n\n\n\t* fwprop.c (try_fwprop_subst): Use validate_unshare_change.\n\t* postreload.c (reload_cse_simplify_set): Instead of copying the rtx\n\tearly use validate_unshare_change.\n\t(reload_combine): Likewise.\n\t* recog.c (change_t): New field unshare.\n\t(validate_change_1): Rename from validate_change; add argument unshare.\n\t(validate_change): Turn into wrapper of validate_change_1; update\n\tprototype for bools.\n\t(validate_unshare_change): New.\n\t(confirm_change_group): Unshare changes if asked for; avoid unnecesary\n\tcalls of df_insn_rescan.\n\t* recog.h (validate_change): Replace ints by bools.\n\t(validate_unshare_change): Declare.\n\nFrom-SVN: r126050", "tree": {"sha": "d59653c3a0aa3705788cc27ac0fac2f506d86c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d59653c3a0aa3705788cc27ac0fac2f506d86c38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e88efd101c43bb55c8584fa2bf2ccbff718401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e88efd101c43bb55c8584fa2bf2ccbff718401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e88efd101c43bb55c8584fa2bf2ccbff718401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e88efd101c43bb55c8584fa2bf2ccbff718401/comments", "author": null, "committer": null, "parents": [{"sha": "a652517c6f573d8069375cc4793e85eb250ba3b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a652517c6f573d8069375cc4793e85eb250ba3b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a652517c6f573d8069375cc4793e85eb250ba3b2"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "321298c46f5ba9a7f986520310177452a0604d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95e88efd101c43bb55c8584fa2bf2ccbff718401", "patch": "@@ -1,3 +1,19 @@\n+2007-06-26  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fwprop.c (try_fwprop_subst): Use validate_unshare_change.\n+\t* postreload.c (reload_cse_simplify_set): Instead of copying the rtx\n+\tearly use validate_unshare_change.\n+\t(reload_combine): Likewise.\n+\t* recog.c (change_t): New field unshare.\n+\t(validate_change_1): Rename from validate_change; add argument unshare.\n+\t(validate_change): Turn into wrapper of validate_change_1; update\n+\tprototype for bools.\n+\t(validate_unshare_change): New.\n+\t(confirm_change_group): Unshare changes if asked for; avoid unnecesary\n+\tcalls of df_insn_rescan.\n+\t* recog.h (validate_change): Replace ints by bools.\n+\t(validate_unshare_change): Declare.\n+\n 2007-06-26  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n         * tree.def (VEC_WIDEN_MULT_LO_EXPR): Corrected string name."}, {"sha": "3722811737e6a42d7ef304baffdbfcb4d540fe08", "filename": "gcc/fwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=95e88efd101c43bb55c8584fa2bf2ccbff718401", "patch": "@@ -686,7 +686,7 @@ try_fwprop_subst (struct df_ref *use, rtx *loc, rtx new, rtx def_insn, bool set_\n       fprintf (dump_file, \"\\n\");\n     }\n \n-  if (validate_change (insn, loc, new, false))\n+  if (validate_unshare_change (insn, loc, new, false))\n     {\n       num_changes++;\n       if (dump_file)"}, {"sha": "16dec228b517ffa7140d704f6446c57aac3d5e08", "filename": "gcc/postreload.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=95e88efd101c43bb55c8584fa2bf2ccbff718401", "patch": "@@ -345,7 +345,7 @@ reload_cse_simplify_set (rtx set, rtx insn)\n \t    }\n #endif\n \n-\t  validate_change (insn, &SET_SRC (set), copy_rtx (this_rtx), 1);\n+\t  validate_unshare_change (insn, &SET_SRC (set), this_rtx, 1);\n \t  old_cost = this_cost, did_change = 1;\n \t}\n     }\n@@ -881,11 +881,11 @@ reload_combine (void)\n \t\t with REG_SUM.  */\n \t      for (i = reg_state[regno].use_index;\n \t\t   i < RELOAD_COMBINE_MAX_USES; i++)\n-\t\tvalidate_change (reg_state[regno].reg_use[i].insn,\n-\t\t\t\t reg_state[regno].reg_use[i].usep,\n-\t\t\t\t /* Each change must have its own\n-\t\t\t\t    replacement.  */\n-\t\t\t\t copy_rtx (reg_sum), 1);\n+\t\tvalidate_unshare_change (reg_state[regno].reg_use[i].insn,\n+\t\t\t\t \t reg_state[regno].reg_use[i].usep,\n+\t\t\t\t \t /* Each change must have its own\n+\t\t\t\t    \t    replacement.  */\n+\t\t\t\t \t reg_sum, 1);\n \n \t      if (apply_change_group ())\n \t\t{"}, {"sha": "497188d0676e7c3a3e75b357b94d5325685130a3", "filename": "gcc/recog.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=95e88efd101c43bb55c8584fa2bf2ccbff718401", "patch": "@@ -166,6 +166,7 @@ typedef struct change_t\n   int old_code;\n   rtx *loc;\n   rtx old;\n+  bool unshare;\n } change_t;\n \n static change_t *changes;\n@@ -191,8 +192,8 @@ static int num_changes = 0;\n    is not valid for the machine, suppress the change and return zero.\n    Otherwise, perform the change and return 1.  */\n \n-int\n-validate_change (rtx object, rtx *loc, rtx new, int in_group)\n+static bool\n+validate_change_1 (rtx object, rtx *loc, rtx new, bool in_group, bool unshare)\n {\n   rtx old = *loc;\n \n@@ -219,6 +220,7 @@ validate_change (rtx object, rtx *loc, rtx new, int in_group)\n   changes[num_changes].object = object;\n   changes[num_changes].loc = loc;\n   changes[num_changes].old = old;\n+  changes[num_changes].unshare = unshare;\n \n   if (object && !MEM_P (object))\n     {\n@@ -239,6 +241,25 @@ validate_change (rtx object, rtx *loc, rtx new, int in_group)\n     return apply_change_group ();\n }\n \n+/* Wrapper for validate_change_1 without the UNSHARE argument defaulting\n+   UNSHARE to false.  */\n+\n+bool\n+validate_change (rtx object, rtx *loc, rtx new, bool in_group)\n+{\n+  return validate_change_1 (object, loc, new, in_group, false);\n+}\n+\n+/* Wrapper for validate_change_1 without the UNSHARE argument defaulting\n+   UNSHARE to true.  */\n+\n+bool\n+validate_unshare_change (rtx object, rtx *loc, rtx new, bool in_group)\n+{\n+  return validate_change_1 (object, loc, new, in_group, true);\n+}\n+\n+\n /* Keep X canonicalized if some changes have made it non-canonical; only\n    modifies the operands of X, not (for example) its code.  Simplifications\n    are not the job of this routine.\n@@ -414,14 +435,27 @@ void\n confirm_change_group (void)\n {\n   int i;\n+  rtx last_object = NULL;\n \n   for (i = 0; i < num_changes; i++)\n     {\n       rtx object = changes[i].object;\n-      if (object && INSN_P (object))\n-\tdf_insn_rescan (object);\n+\n+      if (changes[i].unshare)\n+\t*changes[i].loc = copy_rtx (*changes[i].loc);\n+\n+      /* Avoid unnecesary rescaning when multiple changes to same instruction\n+         are made.  */\n+      if (object)\n+\t{\n+\t  if (object != last_object && last_object && INSN_P (last_object))\n+\t    df_insn_rescan (last_object);\n+\t  last_object = object;\n+\t}\n     }\n \n+  if (last_object && INSN_P (last_object))\n+    df_insn_rescan (last_object);\n   num_changes = 0;\n }\n "}, {"sha": "f1b993a9313f3ba851b8509eddb2881b19ebd8b8", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e88efd101c43bb55c8584fa2bf2ccbff718401/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=95e88efd101c43bb55c8584fa2bf2ccbff718401", "patch": "@@ -73,7 +73,8 @@ extern void init_recog (void);\n extern void init_recog_no_volatile (void);\n extern int check_asm_operands (rtx);\n extern int asm_operand_ok (rtx, const char *);\n-extern int validate_change (rtx, rtx *, rtx, int);\n+extern bool validate_change (rtx, rtx *, rtx, bool);\n+extern bool validate_unshare_change (rtx, rtx *, rtx, bool);\n extern bool canonicalize_change_group (rtx insn, rtx x);\n extern int insn_invalid_p (rtx);\n extern int verify_changes (int);"}]}