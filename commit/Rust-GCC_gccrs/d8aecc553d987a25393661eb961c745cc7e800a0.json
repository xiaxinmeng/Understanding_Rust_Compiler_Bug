{"sha": "d8aecc553d987a25393661eb961c745cc7e800a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhZWNjNTUzZDk4N2EyNTM5MzY2MWViOTYxYzc0NWNjN2U4MDBhMA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2016-05-11T18:13:11Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2016-05-11T18:13:11Z"}, "message": "genautomata.c cleanup\n\n\t* genattr.c (main): Change 'rtx' to 'rtx_insn *' in prototypes of\n\t'insn_latency', 'maximal_insn_latency', 'min_insn_conflict_delay'.\n\t* genautomata.c (output_internal_insn_code_evaluation): Simplify.\n\tMove handling of non-insn arguments inline into the sole user:\n\t(output_trans_func): ...here.\n\t(output_min_insn_conflict_delay_func): Change 'rtx' to 'rtx_insn *'\n\tin emitted function prototype.\n\t(output_internal_insn_latency_func): Ditto.  Simplify.\n\t(output_internal_maximal_insn_latency_func): Ditto.  Delete\n\talways-unused argument.\n\t(output_insn_latency_func): Ditto.\n\t(output_maximal_insn_latency_func): Ditto.\n\nFrom-SVN: r236132", "tree": {"sha": "16719a965ca2a8098098a4fd42af67497853a270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16719a965ca2a8098098a4fd42af67497853a270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8aecc553d987a25393661eb961c745cc7e800a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8aecc553d987a25393661eb961c745cc7e800a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8aecc553d987a25393661eb961c745cc7e800a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8aecc553d987a25393661eb961c745cc7e800a0/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c74f63ff5d8af9b0c994302b944f3a8dd25d1de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c74f63ff5d8af9b0c994302b944f3a8dd25d1de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c74f63ff5d8af9b0c994302b944f3a8dd25d1de"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "be9cf29f9fd02ab3944d08aafe1c5e6f9f545a4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aecc553d987a25393661eb961c745cc7e800a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aecc553d987a25393661eb961c745cc7e800a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8aecc553d987a25393661eb961c745cc7e800a0", "patch": "@@ -1,3 +1,18 @@\n+2016-05-11  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* genattr.c (main): Change 'rtx' to 'rtx_insn *' in prototypes of\n+\t'insn_latency', 'maximal_insn_latency', 'min_insn_conflict_delay'.\n+\t* genautomata.c (output_internal_insn_code_evaluation): Simplify.\n+\tMove handling of non-insn arguments inline into the sole user:\n+\t(output_trans_func): ...here.\n+\t(output_min_insn_conflict_delay_func): Change 'rtx' to 'rtx_insn *'\n+\tin emitted function prototype.\n+\t(output_internal_insn_latency_func): Ditto.  Simplify.\n+\t(output_internal_maximal_insn_latency_func): Ditto.  Delete\n+\talways-unused argument.\n+\t(output_insn_latency_func): Ditto.\n+\t(output_maximal_insn_latency_func): Ditto.\n+\n 2016-05-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71055"}, {"sha": "77380e7f26bdc555db1b48e336b119b6e4413c7b", "filename": "gcc/genattr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aecc553d987a25393661eb961c745cc7e800a0/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aecc553d987a25393661eb961c745cc7e800a0/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=d8aecc553d987a25393661eb961c745cc7e800a0", "patch": "@@ -240,11 +240,11 @@ main (int argc, const char **argv)\n       printf (\"/* Insn latency time on data consumed by the 2nd insn.\\n\");\n       printf (\"   Use the function if bypass_p returns nonzero for\\n\");\n       printf (\"   the 1st insn. */\\n\");\n-      printf (\"extern int insn_latency (rtx, rtx);\\n\\n\");\n+      printf (\"extern int insn_latency (rtx_insn *, rtx_insn *);\\n\\n\");\n       printf (\"/* Maximal insn latency time possible of all bypasses for this insn.\\n\");\n       printf (\"   Use the function if bypass_p returns nonzero for\\n\");\n       printf (\"   the 1st insn. */\\n\");\n-      printf (\"extern int maximal_insn_latency (rtx);\\n\\n\");\n+      printf (\"extern int maximal_insn_latency (rtx_insn *);\\n\\n\");\n       printf (\"\\n#if AUTOMATON_ALTS\\n\");\n       printf (\"/* The following function returns number of alternative\\n\");\n       printf (\"   reservations of given insn.  It may be used for better\\n\");\n@@ -290,8 +290,8 @@ main (int argc, const char **argv)\n       printf (\"    state_transition should return negative value for\\n\");\n       printf (\"    the insn and the state).  Data dependencies between\\n\");\n       printf (\"    the insns are ignored by the function.  */\\n\");\n-      printf\n-\t(\"extern int min_insn_conflict_delay (state_t, rtx, rtx);\\n\");\n+      printf (\"extern int \"\n+              \"min_insn_conflict_delay (state_t, rtx_insn *, rtx_insn *);\\n\");\n       printf (\"/* The following function outputs reservations for given\\n\");\n       printf (\"   insn as they are described in the corresponding\\n\");\n       printf (\"   define_insn_reservation.  */\\n\");"}, {"sha": "92c8b5c390fe97a1a3696d01356a7a056f9b831a", "filename": "gcc/genautomata.c", "status": "modified", "additions": 39, "deletions": 64, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8aecc553d987a25393661eb961c745cc7e800a0/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8aecc553d987a25393661eb961c745cc7e800a0/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=d8aecc553d987a25393661eb961c745cc7e800a0", "patch": "@@ -8113,14 +8113,10 @@ output_internal_trans_func (void)\n \n /* Output code\n \n-  if (insn != 0)\n-    {\n-      insn_code = dfa_insn_code (insn);\n-      if (insn_code > DFA__ADVANCE_CYCLE)\n-        return code;\n-    }\n-  else\n-    insn_code = DFA__ADVANCE_CYCLE;\n+  gcc_checking_assert (insn != 0);\n+  insn_code = dfa_insn_code (insn);\n+  if (insn_code >= DFA__ADVANCE_CYCLE)\n+    return code;\n \n   where insn denotes INSN_NAME, insn_code denotes INSN_CODE_NAME, and\n   code denotes CODE.  */\n@@ -8129,21 +8125,12 @@ output_internal_insn_code_evaluation (const char *insn_name,\n \t\t\t\t      const char *insn_code_name,\n \t\t\t\t      int code)\n {\n-  fprintf (output_file, \"\\n  if (%s == 0)\\n\", insn_name);\n-  fprintf (output_file, \"    %s = %s;\\n\\n\",\n-\t   insn_code_name, ADVANCE_CYCLE_VALUE_NAME);\n-  if (collapse_flag)\n-    {\n-      fprintf (output_file, \"\\n  else if (%s == const0_rtx)\\n\", insn_name);\n-      fprintf (output_file, \"    %s = %s;\\n\\n\",\n-\t       insn_code_name, COLLAPSE_NDFA_VALUE_NAME);\n-    }\n-  fprintf (output_file, \"\\n  else\\n    {\\n\");\n-  fprintf (output_file,\n-\t   \"      %s = %s (as_a <rtx_insn *> (%s));\\n\",\n-\t   insn_code_name, DFA_INSN_CODE_FUNC_NAME, insn_name);\n-  fprintf (output_file, \"      if (%s > %s)\\n        return %d;\\n    }\\n\",\n-\t   insn_code_name, ADVANCE_CYCLE_VALUE_NAME, code);\n+  fprintf (output_file, \"  gcc_checking_assert (%s != 0);\\n\"\n+           \"  %s = %s (%s);\\n\"\n+           \"  if (%s >= %s)\\n    return %d;\\n\",\n+           insn_name,\n+           insn_code_name, DFA_INSN_CODE_FUNC_NAME, insn_name,\n+           insn_code_name, ADVANCE_CYCLE_VALUE_NAME, code);\n }\n \n \n@@ -8204,8 +8191,22 @@ output_trans_func (void)\n \t   TRANSITION_FUNC_NAME, STATE_TYPE_NAME, STATE_NAME,\n \t   INSN_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s;\\n\", INTERNAL_INSN_CODE_NAME);\n-  output_internal_insn_code_evaluation (INSN_PARAMETER_NAME,\n-\t\t\t\t\tINTERNAL_INSN_CODE_NAME, -1);\n+  fprintf (output_file, \"\\n  if (%s == 0)\\n\", INSN_PARAMETER_NAME);\n+  fprintf (output_file, \"    %s = %s;\\n\",\n+\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n+  if (collapse_flag)\n+    {\n+      fprintf (output_file, \"  else if (%s == const0_rtx)\\n\",\n+\t       INSN_PARAMETER_NAME);\n+      fprintf (output_file, \"    %s = %s;\\n\",\n+\t       INTERNAL_INSN_CODE_NAME, COLLAPSE_NDFA_VALUE_NAME);\n+    }\n+  fprintf (output_file, \"  else\\n    {\\n\");\n+  fprintf (output_file, \"      %s = %s (as_a <rtx_insn *> (%s));\\n\",\n+\t   INTERNAL_INSN_CODE_NAME, DFA_INSN_CODE_FUNC_NAME,\n+\t   INSN_PARAMETER_NAME);\n+  fprintf (output_file, \"      if (%s > %s)\\n        return -1;\\n    }\\n\",\n+\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n   fprintf (output_file, \"  return %s (%s, (struct %s *) %s);\\n}\\n\\n\",\n \t   INTERNAL_TRANSITION_FUNC_NAME, INTERNAL_INSN_CODE_NAME, CHIP_NAME, STATE_NAME);\n }\n@@ -8297,7 +8298,7 @@ static void\n output_min_insn_conflict_delay_func (void)\n {\n   fprintf (output_file,\n-\t   \"int\\n%s (%s %s, rtx %s, rtx %s)\\n\",\n+\t   \"int\\n%s (%s %s, rtx_insn *%s, rtx_insn *%s)\\n\",\n \t   MIN_INSN_CONFLICT_DELAY_FUNC_NAME, STATE_TYPE_NAME,\n \t   STATE_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  struct %s %s;\\n  int %s, %s, transition;\\n\",\n@@ -8366,10 +8367,12 @@ output_internal_insn_latency_func (void)\n   decl_t decl;\n   struct bypass_decl *bypass;\n \n-  fprintf (output_file, \"static int\\n%s (int %s ATTRIBUTE_UNUSED,\\n\\tint %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED)\\n\",\n-\t   INTERNAL_INSN_LATENCY_FUNC_NAME, INTERNAL_INSN_CODE_NAME,\n-\t   INTERNAL_INSN2_CODE_NAME, \"insn_or_const0\",\n-\t   \"insn2_or_const0\");\n+  fprintf (output_file, \"static int\\n\"\n+\t   \"%s (int %s ATTRIBUTE_UNUSED, int %s ATTRIBUTE_UNUSED,\\n\"\n+\t   \"\\trtx_insn *%s ATTRIBUTE_UNUSED, rtx_insn *%s ATTRIBUTE_UNUSED)\\n\",\n+\t   INTERNAL_INSN_LATENCY_FUNC_NAME,\n+\t   INTERNAL_INSN_CODE_NAME, INTERNAL_INSN2_CODE_NAME,\n+\t   INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n\");\n \n   if (DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num == 0)\n@@ -8378,32 +8381,6 @@ output_internal_insn_latency_func (void)\n       return;\n     }\n \n-  fprintf (output_file, \"  if (%s >= %s || %s >= %s)\\n    return 0;\\n\",\n-\t   INTERNAL_INSN_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME,\n-\t   INTERNAL_INSN2_CODE_NAME, ADVANCE_CYCLE_VALUE_NAME);\n-\n-  /* We've now rejected the case that\n-       INTERNAL_INSN_CODE_NAME >= ADVANCE_CYCLE_VALUE_NAME\n-     i.e. that\n-       insn_code >= DFA__ADVANCE_CYCLE,\n-     and similarly for insn2_code.  */\n-  fprintf (output_file,\n-\t   \"  /* Within output_internal_insn_code_evaluation, the generated\\n\"\n-\t   \"     code sets \\\"code\\\" to NDFA__COLLAPSE for const0_rtx, and\\n\"\n-\t   \"     NDFA__COLLAPSE > DFA__ADVANCE_CYCLE.  Hence we can't be\\n\"\n-\t   \"     dealing with const0_rtx instances at this point.  */\\n\");\n-  if (collapse_flag)\n-    fprintf (output_file,\n-\t     \"  gcc_assert (NDFA__COLLAPSE > DFA__ADVANCE_CYCLE);\\n\");\n-  fprintf (output_file,\n-\t   (\"  gcc_assert (insn_or_const0 != const0_rtx);\\n\"\n-\t    \"  rtx_insn *%s ATTRIBUTE_UNUSED = safe_as_a <rtx_insn *> (insn_or_const0);\\n\"),\n-\t   INSN_PARAMETER_NAME);\n-  fprintf (output_file,\n-\t   (\"  gcc_assert (insn2_or_const0 != const0_rtx);\\n\"\n-\t    \"  rtx_insn *%s ATTRIBUTE_UNUSED = safe_as_a <rtx_insn *> (insn2_or_const0);\\n\"),\n-\t   INSN2_PARAMETER_NAME);\n-\n   fprintf (output_file, \"  switch (%s)\\n    {\\n\", INTERNAL_INSN_CODE_NAME);\n   for (i = 0; i < description->decls_num; i++)\n     if (description->decls[i]->mode == dm_insn_reserv\n@@ -8466,9 +8443,8 @@ output_internal_maximal_insn_latency_func (void)\n   int i;\n   int max;\n \n-  fprintf (output_file, \"static int\\n%s (int %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED)\\n\",\n-\t   \"internal_maximal_insn_latency\", INTERNAL_INSN_CODE_NAME,\n-\t   INSN_PARAMETER_NAME);\n+  fprintf (output_file, \"static int\\n%s (int %s ATTRIBUTE_UNUSED)\\n\",\n+\t   \"internal_maximal_insn_latency\", INTERNAL_INSN_CODE_NAME);\n   fprintf (output_file, \"{\\n\");\n \n   if (DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num == 0)\n@@ -8505,7 +8481,7 @@ output_internal_maximal_insn_latency_func (void)\n static void\n output_insn_latency_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (rtx %s, rtx %s)\\n\",\n+  fprintf (output_file, \"int\\n%s (rtx_insn *%s, rtx_insn *%s)\\n\",\n \t   INSN_LATENCY_FUNC_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s, %s;\\n\",\n \t   INTERNAL_INSN_CODE_NAME, INTERNAL_INSN2_CODE_NAME);\n@@ -8523,15 +8499,14 @@ output_insn_latency_func (void)\n static void\n output_maximal_insn_latency_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (rtx %s)\\n\",\n+  fprintf (output_file, \"int\\n%s (rtx_insn *%s)\\n\",\n \t   \"maximal_insn_latency\", INSN_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s;\\n\",\n \t   INTERNAL_INSN_CODE_NAME);\n   output_internal_insn_code_evaluation (INSN_PARAMETER_NAME,\n \t\t\t\t\tINTERNAL_INSN_CODE_NAME, 0);\n-  fprintf (output_file, \"  return %s (%s, %s);\\n}\\n\\n\",\n-\t   \"internal_maximal_insn_latency\",\n-\t   INTERNAL_INSN_CODE_NAME, INSN_PARAMETER_NAME);\n+  fprintf (output_file, \"  return %s (%s);\\n}\\n\\n\",\n+\t   \"internal_maximal_insn_latency\", INTERNAL_INSN_CODE_NAME);\n }\n \n /* The function outputs PHR interface function `print_reservation'.  */"}]}