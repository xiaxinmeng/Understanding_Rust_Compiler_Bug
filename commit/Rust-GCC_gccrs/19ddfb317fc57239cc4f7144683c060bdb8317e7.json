{"sha": "19ddfb317fc57239cc4f7144683c060bdb8317e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlkZGZiMzE3ZmM1NzIzOWNjNGY3MTQ0NjgzYzA2MGJkYjgzMTdlNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-05-24T13:13:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-08T14:55:55Z"}, "message": "[Ada] Fix warnings in C runtime files on Windows\n\ngcc/ada/\n\n\t* adaint.h (__gnat_expect_portable_execvp): Fix prototype.\n\t(__gnat_expect_poll): Likewise.\n\t* expect.c [_WIN32]: Include adaint.h file.\n\t(__gnat_waitpid): Remove useless variable.\n\t(__gnat_expect_portable_execvp): Add ATTRIBUTE_UNUSED on parameter.\n\t* raise-gcc.c [SEH] (__gnat_personality_v0): Add ATTRIBUTE_UNUSED.\n\t* socket.c [_WIN32] (__gnat_getservbyport): Add ATTRIBUTE_UNUSED on\n\ta couple of parameters.\n\t(__gnat_gethostbyname): Likewise.\n\t(__gnat_gethostbyaddr): Likewise.\n\t(__gnat_getservbyname): Likewise.\n\t(__gnat_last_socket_in_set): Use variables local to loops.\n\t(__gnat_socket_ioctl): Cast 3rd parameter to proper type if _WIN32.\n\t(__gnat_inet_pton): Cast 2nd parameter to proper type if _WIN32.\n\t* sysdep.c (__gnat_localtime_tzoff): Remove superfluous test.\n\t* terminals.c [_WIN32]: Include io.h file.\n\t(is_gui_app): Remove useless variables and fix unsigned comparison.\n\t(nt_spawnve): Add ATTRIBUTE_UNUSED on first parameter.  Initialize a\n\tlocal variable and remove others that are useless.  Add missing cast\n\t(__gnat_setup_child_communication): Remove useless variable and call\n\tUse proper formatting string in call to sprintf.\n\t(__gnat_setup_parent_communication): Cast to proper type.\n\t(find_child_console): Fix prototype and remove useless variable.\n\t(find_process_handle): Likewise.\n\t(_gnat_interrupt_process): Move to after __gnat_interrupt_pid.\n\t(__gnat_reset_tty): Add ATTRIBUTE_UNUSED on parameter, remove return\n\t(__gnat_setup_winsize): Add ATTRIBUTE_UNUSED on all parameters.", "tree": {"sha": "3ee7d0ab5d2b0af4c7996ead0c6fb9be185b1df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee7d0ab5d2b0af4c7996ead0c6fb9be185b1df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ddfb317fc57239cc4f7144683c060bdb8317e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ddfb317fc57239cc4f7144683c060bdb8317e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ddfb317fc57239cc4f7144683c060bdb8317e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ddfb317fc57239cc4f7144683c060bdb8317e7/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8102b350742f09e8c122f3d3ee3f9f2ce4abd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8102b350742f09e8c122f3d3ee3f9f2ce4abd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e8102b350742f09e8c122f3d3ee3f9f2ce4abd4"}], "stats": {"total": 139, "additions": 64, "deletions": 75}, "files": [{"sha": "4f42f6c658dd93f604d23fa70f58fcf47e04b193", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=19ddfb317fc57239cc4f7144683c060bdb8317e7", "patch": "@@ -282,9 +282,10 @@ extern char  *mktemp\t\t\t\t   (char *);\n extern void   __gnat_set_exit_status\t\t   (int);\n \n extern int    __gnat_expect_fork\t\t   (void);\n-extern void   __gnat_expect_portable_execvp\t   (char *, char *[]);\n+extern void   __gnat_expect_portable_execvp\t   (int *, char *, char *[]);\n extern int    __gnat_pipe\t\t\t   (int *);\n-extern int    __gnat_expect_poll\t\t   (int *, int, int, int *);\n+extern int    __gnat_expect_poll\t\t   (int *, int, int, int *,\n+\t\t\t\t\t\t    int *);\n extern void   __gnat_set_binary_mode\t\t   (int);\n extern void   __gnat_set_text_mode\t\t   (int);\n extern void   __gnat_set_mode\t\t\t   (int,int);"}, {"sha": "718886d96bdbede71d8026a0a43340045662fd4f", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=19ddfb317fc57239cc4f7144683c060bdb8317e7", "patch": "@@ -78,18 +78,18 @@\n #include <process.h>\n #include <signal.h>\n #include <io.h>\n+#include \"adaint.h\"\n #include \"mingw32.h\"\n \n int\n __gnat_waitpid (int pid)\n {\n   HANDLE h = OpenProcess (PROCESS_ALL_ACCESS, FALSE, pid);\n   DWORD exitcode = 1;\n-  DWORD res;\n \n   if (h != NULL)\n     {\n-      res = WaitForSingleObject (h, INFINITE);\n+      (void) WaitForSingleObject (h, INFINITE);\n       GetExitCodeProcess (h, &exitcode);\n       CloseHandle (h);\n     }\n@@ -105,7 +105,8 @@ __gnat_expect_fork (void)\n }\n \n void\n-__gnat_expect_portable_execvp (int *pid, char *cmd, char *argv[])\n+__gnat_expect_portable_execvp (int *pid, char *cmd ATTRIBUTE_UNUSED,\n+                               char *argv[])\n {\n   *pid = __gnat_portable_no_block_spawn (argv);\n }"}, {"sha": "1446bfaaeb728cdad83aa9889d139ab9020dc07d", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=19ddfb317fc57239cc4f7144683c060bdb8317e7", "patch": "@@ -1611,7 +1611,7 @@ __gnat_personality_seh0 (PEXCEPTION_RECORD ms_exc, void *this_frame,\n \n /* Define __gnat_personality_v0 for convenience */\n \n-PERSONALITY_STORAGE _Unwind_Reason_Code\n+PERSONALITY_STORAGE ATTRIBUTE_UNUSED _Unwind_Reason_Code\n __gnat_personality_v0 (version_arg_t version_arg,\n \t\t       phases_arg_t phases_arg,\n \t\t       _Unwind_Exception_Class uw_exception_class,"}, {"sha": "96baebfc25a358af79031387e2cb0e555b42df21", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=19ddfb317fc57239cc4f7144683c060bdb8317e7", "patch": "@@ -333,8 +333,8 @@ __gnat_getservbyport (int port, const char *proto,\n }\n #else\n int\n-__gnat_gethostbyname (const char *name,\n-  struct hostent *ret, char *buf, size_t buflen,\n+__gnat_gethostbyname (const char *name, struct hostent *ret,\n+  char *buf ATTRIBUTE_UNUSED, size_t buflen ATTRIBUTE_UNUSED,\n   int *h_errnop)\n {\n   struct hostent *rh;\n@@ -349,8 +349,8 @@ __gnat_gethostbyname (const char *name,\n }\n \n int\n-__gnat_gethostbyaddr (const char *addr, int len, int type,\n-  struct hostent *ret, char *buf, size_t buflen,\n+__gnat_gethostbyaddr (const char *addr, int len, int type, struct hostent *ret,\n+  char *buf ATTRIBUTE_UNUSED, size_t buflen ATTRIBUTE_UNUSED,\n   int *h_errnop)\n {\n   struct hostent *rh;\n@@ -365,8 +365,8 @@ __gnat_gethostbyaddr (const char *addr, int len, int type,\n }\n \n int\n-__gnat_getservbyname (const char *name, const char *proto,\n-  struct servent *ret, char *buf, size_t buflen)\n+__gnat_getservbyname (const char *name, const char *proto, struct servent *ret,\n+  char *buf ATTRIBUTE_UNUSED, size_t buflen ATTRIBUTE_UNUSED)\n {\n   struct servent *rh;\n   rh = getservbyname (name, proto);\n@@ -377,8 +377,8 @@ __gnat_getservbyname (const char *name, const char *proto,\n }\n \n int\n-__gnat_getservbyport (int port, const char *proto,\n-  struct servent *ret, char *buf, size_t buflen)\n+__gnat_getservbyport (int port, const char *proto, struct servent *ret,\n+  char *buf ATTRIBUTE_UNUSED, size_t buflen ATTRIBUTE_UNUSED)\n {\n   struct servent *rh;\n   rh = getservbyport (port, proto);\n@@ -397,19 +397,18 @@ __gnat_getservbyport (int port, const char *proto,\n void\n __gnat_last_socket_in_set (fd_set *set, int *last)\n {\n-  int s;\n   int l;\n   l = -1;\n \n #ifdef _WIN32\n   /* More efficient method for NT. */\n-  for (s = 0; s < set->fd_count; s++)\n+  for (unsigned int s = 0; s < set->fd_count; s++)\n     if ((int) set->fd_array[s] > l)\n       l = set->fd_array[s];\n \n #else\n \n-  for (s = *last; s != -1; s--)\n+  for (int s = *last; s != -1; s--)\n     if (FD_ISSET (s, set))\n       {\n \tl = s;\n@@ -517,7 +516,7 @@ __gnat_get_h_errno (void) {\n int\n __gnat_socket_ioctl (int fd, IOCTL_Req_T req, int *arg) {\n #if defined (_WIN32)\n-  return ioctlsocket (fd, req, arg);\n+  return ioctlsocket (fd, req, (unsigned long *)arg);\n #elif defined (__APPLE__)\n   /*\n    * On Darwin, req is an unsigned long, and we want to convert without sign\n@@ -553,7 +552,8 @@ __gnat_inet_pton (int af, const char *src, void *dst) {\n   int rc;\n \n   ss.ss_family = af;\n-  rc = WSAStringToAddressA (src, af, NULL, (struct sockaddr *)&ss, &sslen);\n+  rc = WSAStringToAddressA ((char *)src, af, NULL, (struct sockaddr *)&ss,\n+                            &sslen);\n   if (rc == 0) {\n     switch (af) {\n       case AF_INET:"}, {"sha": "51ffbd5545e7cbf61fedbff15ee5c813dc44ed09", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=19ddfb317fc57239cc4f7144683c060bdb8317e7", "patch": "@@ -703,7 +703,7 @@ __gnat_localtime_tzoff (const time_t *timer, const int *is_historic, long *off)\n        to get timezone settings that depend on the year. We cannot use them as\n        we still support Windows XP and Windows 2003.  */\n \n-    status = (tzi_status >= 0 && tzi_status <= 2)\n+    status = tzi_status <= 2\n       && FileTimeToSystemTime (&utc_time.ft_time, &utc_sys_time)\n       && SystemTimeToTzSpecificLocalTime (&tzi, &utc_sys_time, &local_sys_time)\n       && SystemTimeToFileTime (&local_sys_time, &local_time.ft_time);"}, {"sha": "81388a7771b8c99eb730c96c07755cc4794927c9", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 42, "deletions": 55, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ddfb317fc57239cc4f7144683c060bdb8317e7/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=19ddfb317fc57239cc4f7144683c060bdb8317e7", "patch": "@@ -153,6 +153,7 @@ __gnat_setup_winsize (void *desc ATTRIBUTE_UNUSED,\n \n #include <windows.h>\n #include <winternl.h>\n+#include <io.h>\n \n #define MAXPATHLEN 1024\n \n@@ -194,9 +195,6 @@ is_gui_app (char *exe)\n {\n   HANDLE hImage;\n \n-  DWORD  bytes;\n-  DWORD  iSection;\n-  DWORD  SectionOffset;\n   DWORD  CoffHeaderOffset;\n   DWORD  MoreDosHeader[16];\n   CHAR   *file;\n@@ -207,7 +205,6 @@ is_gui_app (char *exe)\n   IMAGE_DOS_HEADER      image_dos_header;\n   IMAGE_FILE_HEADER     image_file_header;\n   IMAGE_OPTIONAL_HEADER image_optional_header;\n-  IMAGE_SECTION_HEADER  image_section_header;\n \n   /*\n    *  Open the reference file.\n@@ -264,7 +261,7 @@ is_gui_app (char *exe)\n    */\n   CoffHeaderOffset = AbsoluteSeek(hImage, image_dos_header.e_lfanew) +\n                      sizeof(ULONG);\n-  if (CoffHeaderOffset < 0) {\n+  if (CoffHeaderOffset == (DWORD) -1) {\n     CloseHandle (hImage);\n     return -1;\n   }\n@@ -278,9 +275,6 @@ is_gui_app (char *exe)\n       return -1;\n     }\n \n-  SectionOffset = CoffHeaderOffset + IMAGE_SIZEOF_FILE_HEADER +\n-    IMAGE_SIZEOF_NT_OPTIONAL_HEADER;\n-\n   ReadBytes(hImage, &image_file_header, IMAGE_SIZEOF_FILE_HEADER);\n \n   /*\n@@ -351,18 +345,18 @@ ReadBytes (HANDLE hFile, LPVOID buffer, DWORD size)\n }\n \n static int\n-nt_spawnve (char *exe, char **argv, char *env, struct TTY_Process *process)\n+nt_spawnve (char *exe ATTRIBUTE_UNUSED, char **argv, char *env,\n+            struct TTY_Process *process)\n {\n   STARTUPINFO start;\n   SECURITY_ATTRIBUTES sec_attrs;\n   SECURITY_DESCRIPTOR sec_desc;\n   DWORD flags;\n-  char dir[ MAXPATHLEN ];\n   int pid;\n   int is_gui, use_cmd;\n   char *cmdline, *parg, **targ;\n   int do_quoting = 0;\n-  char escape_char;\n+  char escape_char = 0;\n   int arglen;\n \n   /* we have to do some conjuring here to put argv and envp into the\n@@ -483,12 +477,8 @@ nt_spawnve (char *exe, char **argv, char *env, struct TTY_Process *process)\n       if (need_quotes)\n \t{\n \t  int escape_char_run = 0;\n-\t  char * first;\n-\t  char * last;\n \n \t  p = *targ;\n-\t  first = p;\n-\t  last = p + strlen (p) - 1;\n \t  *parg++ = '\"';\n \t  for ( ; *p; p++)\n \t    {\n@@ -572,8 +562,8 @@ nt_spawnve (char *exe, char **argv, char *env, struct TTY_Process *process)\n \t\t      flags, env, NULL, &start, &process->procinfo))\n     goto EH_Fail;\n \n-  pid = (int) process->procinfo.hProcess;\n-  process->pid=pid;\n+  pid = (int) (intptr_t) process->procinfo.hProcess;\n+  process->pid = pid;\n \n   return pid;\n \n@@ -635,7 +625,6 @@ __gnat_setup_child_communication\n    int Use_Pipes)\n {\n   int cpid;\n-  HANDLE parent;\n   SECURITY_ATTRIBUTES sec_attrs;\n   char slavePath [MAX_PATH];\n   char **nargv;\n@@ -644,8 +633,6 @@ __gnat_setup_child_communication\n   char pipeNameIn[100];\n   HANDLE hSlaveInDrv = NULL; /* Handle to communicate with slave driver */\n \n-  parent = GetCurrentProcess ();\n-\n   /* Set inheritance for the pipe handles */\n   sec_attrs.nLength = sizeof (SECURITY_ATTRIBUTES);\n   sec_attrs.bInheritHandle = TRUE;\n@@ -674,7 +661,7 @@ __gnat_setup_child_communication\n     /* We create a named pipe for Input, as we handle input by sending special\n        commands to the explaunch process, that uses it to feed the actual input\n        of the process */\n-    sprintf(pipeNameIn, \"%sIn%08x_%08x\", EXP_PIPE_BASENAME,\n+    sprintf(pipeNameIn, \"%sIn%08lx_%08x\", EXP_PIPE_BASENAME,\n \t    GetCurrentProcessId(), pipeNameId);\n     pipeNameId++;\n \n@@ -765,8 +752,8 @@ __gnat_setup_parent_communication\n    int* err,\n    int* pid)\n {\n-  *in = _open_osfhandle ((long) process->w_infd, 0);\n-  *out = _open_osfhandle ((long) process->w_outfd, 0);\n+  *in = _open_osfhandle ((intptr_t) process->w_infd, 0);\n+  *out = _open_osfhandle ((intptr_t) process->w_outfd, 0);\n   /* child's stderr is always redirected to outfd */\n   *err = *out;\n   *pid = process->pid;\n@@ -811,13 +798,13 @@ cache_system_info (void)\n     os_subtype = OS_NT;\n }\n \n-static BOOL CALLBACK\n-find_child_console (HWND hwnd, child_process * cp)\n+static WINBOOL CALLBACK\n+find_child_console (HWND hwnd, LPARAM param)\n {\n-  DWORD thread_id;\n+  child_process *cp = (child_process *) param;\n   DWORD process_id;\n \n-  thread_id = GetWindowThreadProcessId (hwnd, &process_id);\n+  (void) GetWindowThreadProcessId (hwnd, &process_id);\n   if (process_id == cp->procinfo->dwProcessId)\n     {\n       char window_class[32];\n@@ -836,27 +823,6 @@ find_child_console (HWND hwnd, child_process * cp)\n   return TRUE;\n }\n \n-int\n-__gnat_interrupt_process (struct TTY_Process* p)\n-{\n-  char buf[2];\n-  DWORD written;\n-  BOOL bret;\n-\n-  if (p->usePipe == TRUE) {\n-    bret = FALSE;\n-  } else {\n-    buf[0] = EXP_SLAVE_KILL;\n-    buf[1] = EXP_KILL_CTRL_C;\n-    bret = WriteFile (p->w_infd, buf, 2, &written, NULL);\n-  }\n-\n-  if (bret == FALSE) {\n-    return __gnat_interrupt_pid (p->procinfo.dwProcessId);\n-  }\n-  return 0;\n-}\n-\n int\n __gnat_interrupt_pid (int pid)\n {\n@@ -943,6 +909,27 @@ __gnat_interrupt_pid (int pid)\n   return rc;\n }\n \n+int\n+__gnat_interrupt_process (struct TTY_Process* p)\n+{\n+  char buf[2];\n+  DWORD written;\n+  BOOL bret;\n+\n+  if (p->usePipe == TRUE) {\n+    bret = FALSE;\n+  } else {\n+    buf[0] = EXP_SLAVE_KILL;\n+    buf[1] = EXP_KILL_CTRL_C;\n+    bret = WriteFile (p->w_infd, buf, 2, &written, NULL);\n+  }\n+\n+  if (bret == FALSE) {\n+    return __gnat_interrupt_pid (p->procinfo.dwProcessId);\n+  }\n+  return 0;\n+}\n+\n /* kill a process, as this implementation use CreateProcess on Win32 we need\n    to use Win32 TerminateProcess API */\n int\n@@ -974,13 +961,13 @@ typedef struct {\n   HANDLE hwnd;\n } pid_struct;\n \n-static BOOL CALLBACK\n-find_process_handle (HWND hwnd, pid_struct * ps)\n+static WINBOOL CALLBACK\n+find_process_handle (HWND hwnd, LPARAM param)\n {\n-  DWORD thread_id;\n+  pid_struct *ps = (pid_struct *) param;\n   DWORD process_id;\n \n-  thread_id = GetWindowThreadProcessId (hwnd, &process_id);\n+  (void) GetWindowThreadProcessId (hwnd, &process_id);\n   if (process_id == ps->dwProcessId)\n     {\n       ps->hwnd = hwnd;\n@@ -1085,9 +1072,8 @@ __gnat_new_tty (void)\n }\n \n void\n-__gnat_reset_tty (TTY_Handle* t)\n+__gnat_reset_tty (TTY_Handle* t ATTRIBUTE_UNUSED)\n {\n-  return;\n }\n \n void\n@@ -1097,7 +1083,8 @@ __gnat_close_tty (TTY_Handle* t)\n }\n \n void\n-__gnat_setup_winsize (void *desc, int rows, int columns)\n+__gnat_setup_winsize (void *desc ATTRIBUTE_UNUSED,\n+  int rows ATTRIBUTE_UNUSED, int columns ATTRIBUTE_UNUSED)\n {\n }\n "}]}