{"sha": "22703ccc3fb15defc154d8a4bd665ddf76efbd08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI3MDNjY2MzZmIxNWRlZmMxNTRkOGE0YmQ2NjVkZGY3NmVmYmQwOA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-11-18T11:04:53Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-11-18T11:04:53Z"}, "message": "Makefile.in (c-parse.o, c-common.o): Update dependencies.\n\n\t* Makefile.in (c-parse.o, c-common.o): Update dependencies.\n\t* c-common.c: Include diagnostic.h.\n\t(c_common_finish): New.\n\t* c-common.h (c_common_finish): New.\n\t* c-lang.c (LANG_HOOKS_FINISH): Override.\n\t* c-parse.in: Don't include diagnostic.h.\n\t(finish_parse): Remove.\n\t* langhooks.h: Update comments.\n\t* toplev.c (lang_dependent_init): New prototype.\n\t(finalize): New.\n\t(compile_file): Split cleanup code out to finalize.\n\t(lang_dependent_init): Stop if lang_hooks.init fails.\n\t(toplev_main): Update.\n\t* tree.h (finish_parse): Remove.\n\nada:\t* misc.c (gnat_decode_option, gnat_init_options): Make definitions\n\tstatic too.\n\t(gnat_init): Don't return NULL.\n\t(finish_parse): Remove.\ncp:\t* lex.c (cxx_finish): Call c_common_finish.\n\t(finish_parse): Remove.\nf:\t* com.c (finish_parse): Remove.\n\t(ffe_finish): Move body of finish_parse.\njava:\t* lang.c (finish_parse): Rename to java_finish.\n\t(LANG_HOOKS_FINISH, java_finish): New.\nobjc:\t* objc-act.c (LANG_HOOKS_FINISH): Override.\n\nFrom-SVN: r47141", "tree": {"sha": "2092e937365d4aa4305ac9206c9b38c72a6f6d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2092e937365d4aa4305ac9206c9b38c72a6f6d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22703ccc3fb15defc154d8a4bd665ddf76efbd08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22703ccc3fb15defc154d8a4bd665ddf76efbd08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22703ccc3fb15defc154d8a4bd665ddf76efbd08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22703ccc3fb15defc154d8a4bd665ddf76efbd08/comments", "author": null, "committer": null, "parents": [{"sha": "6ad8427bba9b3fc18363b5667b43e0afd9421bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad8427bba9b3fc18363b5667b43e0afd9421bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad8427bba9b3fc18363b5667b43e0afd9421bc2"}], "stats": {"total": 250, "additions": 149, "deletions": 101}, "files": [{"sha": "f7ff9539db89862f9890ff61655ce89e6832c514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -1,3 +1,22 @@\n+2001-11-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (c-parse.o, c-common.o): Update dependencies.\n+\t* c-common.c: Include diagnostic.h.\n+\t(c_common_finish): New.\n+\t* c-common.h (c_common_finish): New.\n+\t* c-lang.c (LANG_HOOKS_FINISH): Override.\n+\t* c-parse.in: Don't include diagnostic.h.\n+\t(finish_parse): Remove.\n+\t* langhooks.h: Update comments.\n+\t* toplev.c (lang_dependent_init): New prototype.\n+\t(finalize): New.\n+\t(compile_file): Split cleanup code out to finalize.\n+\t(lang_dependent_init): Stop if lang_hooks.init fails.\n+\t(toplev_main): Update.\n+\t* tree.h (finish_parse): Remove.\n+objc:\n+\t* objc-act.c (LANG_HOOKS_FINISH): Override.\n+\n Sat Nov 17 23:30:44 2001  Douglas B. Rupp  <rupp@gnat.com>\n \n \t* config/alpha/t-vms (LIB2FUNCS_EXTRA): Add vms_tramp.asm."}, {"sha": "0bd159ce95becfc7898396d7b3cade254a03539d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -1,3 +1,10 @@\n+2001-11-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* misc.c (gnat_decode_option, gnat_init_options): Make definitions\n+\tstatic too.\n+\t(gnat_init): Don't return NULL.\n+\t(finish_parse): Remove.\n+\n 2001-11-17  Laurent Guerby  <guerby@acm.org>\n \n \t* Make-lang.in (GNATLIBFLAGS): Add -W -Wall."}, {"sha": "16e3e8ce24d58fea5ee4571158b6974ee27cd495", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *                             $Revision: 1.11 $\n+ *                             $Revision: 1.12 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001 Free Software Foundation, Inc.          *\n  *                                                                          *\n@@ -192,7 +192,7 @@ yyparse ()\n    it cannot decode. This routine returns 1 if it is successful, otherwise\n    it returns 0. */\n \n-int\n+static int\n gnat_decode_option (argc, argv)\n      int argc ATTRIBUTE_UNUSED;\n      char **argv;\n@@ -251,7 +251,7 @@ gnat_decode_option (argc, argv)\n \n /* Initialize for option processing.  */\n \n-void\n+static void\n gnat_init_options ()\n {\n   /* Initialize gnat_argv with save_argv size */\n@@ -394,6 +394,9 @@ gnat_init (filename)\n   dwarf2out_set_demangle_name_func (convert_ada_name_to_qualified_name);\n #endif\n \n+  if (filename == 0)\n+    filename = \"\";\n+\n   return filename;\n }\n \n@@ -879,11 +882,6 @@ insert_code_for (gnat_node)\n     }\n }\n \n-void\n-finish_parse ()\n-{\n-}\n-\n #if 0\n \n /* Return the alignment for GNAT_TYPE.  */"}, {"sha": "dde1af3b892f93ffe4b36af92e67be04b71d70d6", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -30,6 +30,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"expr.h\"\n #include \"c-common.h\"\n+#include \"diagnostic.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n #include \"c-lex.h\"\n@@ -3889,6 +3890,17 @@ c_common_lang_init (filename)\n   return filename;\n }\n \n+/* Common finish hook for the C, ObjC and C++ front ends.  */\n+void\n+c_common_finish ()\n+{\n+  cpp_finish (parse_in);\n+\n+  /* For performance, avoid tearing down cpplib's internal structures.\n+     Call cpp_errors () instead of cpp_destroy ().  */\n+  errorcount += cpp_errors (parse_in);\n+}\n+\n static void\n c_init_attributes ()\n {"}, {"sha": "7ccaef7ee8f83215ff3cabd38473d8e8f31c105c", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -543,6 +543,7 @@ extern void disable_builtin_function\t\tPARAMS ((const char *));\n extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n \n extern const char *c_common_lang_init\t\tPARAMS ((const char *));\n+extern void c_common_finish\t\t\tPARAMS ((void));\n extern HOST_WIDE_INT c_common_get_alias_set\tPARAMS ((tree));\n extern bool c_promoting_integer_type_p\t\tPARAMS ((tree));\n extern int self_promoting_args_p\t\tPARAMS ((tree));"}, {"sha": "5a82c59ecdb4db61a5184ba2487f7dc07a73c17a", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -54,6 +54,8 @@ static int c_cannot_inline_tree_fn PARAMS ((tree *));\n #define LANG_HOOKS_NAME \"GNU C\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT c_init\n+#undef LANG_HOOKS_FINISH\n+#define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_init_options\n #undef LANG_HOOKS_DECODE_OPTION"}, {"sha": "6e797511e7d0ae8f0c10da147f0abfa0ec168e33", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -50,7 +50,6 @@ end ifc\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n-#include \"diagnostic.h\"  \n   \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n@@ -3530,14 +3529,6 @@ init_reswords ()\n     }\n }\n \n-void\n-finish_parse ()\n-{\n-  cpp_finish (parse_in);\n-  /* Call to cpp_destroy () omitted for performance reasons.  */\n-  errorcount += cpp_errors (parse_in);\n-}\n-\n #define NAME(type) cpp_type2name (type)\n \n static void"}, {"sha": "06691eb681e1c7865116e8f408c0d0f4e43695c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -1,3 +1,8 @@\n+2001-11-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* lex.c (cxx_finish): Call c_common_finish.\n+\t(finish_parse): Remove.\n+\n 2001-11-17  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \t* decl.c (create_array_type_for_decl): Check if NAME is NULL_TREE"}, {"sha": "c093fc1f0f7ec69ad366592f5b7d0927b4d59a49", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -265,7 +265,8 @@ void\n cxx_finish ()\n {\n   if (flag_gnu_xref)\n-    GNU_xref_end (errorcount+sorrycount);\n+    GNU_xref_end (errorcount + sorrycount);\n+  c_common_finish ();\n }\n \n static int *\n@@ -740,14 +741,6 @@ cxx_init (filename)\n \n   return filename;\n }\n-\n-void\n-finish_parse ()\n-{\n-  cpp_finish (parse_in);\n-  /* Call to cpp_destroy () omitted for performance reasons.  */\n-  errorcount += cpp_errors (parse_in);\n-}\n \f\n inline void\n yyprint (file, yychar, yylval)"}, {"sha": "38b3623e531c925d4805ab65fe40e761b0181807", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -1,3 +1,8 @@\n+Sun Nov 18 11:13:04 2001  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (finish_parse): Remove.\n+\t(ffe_finish): Move body of finish_parse.\n+\n Thu Nov 15 10:06:38 2001  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (ffecom_init_decl_processing): Renamed from"}, {"sha": "2cf19d487378474e0b7ae188187f2b1877141db2", "filename": "gcc/f/com.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -14189,12 +14189,6 @@ ffecom_init_decl_processing ()\n   ffe_init_0 ();\n }\n \n-void\n-finish_parse ()\n-{\n-  fclose (finput);\n-}\n-\n /* Delete the node BLOCK from the current binding level.\n    This is used for the block inside a stmt expr ({...})\n    so that the block can be reinserted where appropriate.  */\n@@ -14303,6 +14297,8 @@ ffe_finish ()\n \n   if (ffe_is_ffedebug ())\n     malloc_pool_display (malloc_pool_image ());\n+\n+  fclose (finput);\n }\n \n static void"}, {"sha": "d97977d5b7966ceab8da6982b4f7416a2bbfb410", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -1,3 +1,8 @@\n+2001-11-18  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* lang.c (finish_parse): Rename to java_finish.\n+\t(LANG_HOOKS_FINISH, java_finish): New.\n+\n 2001-11-15  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* decl.c (init_decl_processing): Rename java_init_decl_processing."}, {"sha": "979b261c30b10431bd61fa941920495af2742637", "filename": "gcc/java/lang.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -49,6 +49,7 @@ struct string_option\n };\n \n static const char *java_init PARAMS ((const char *));\n+static void java_finish PARAMS ((void));\n static void java_init_options PARAMS ((void));\n static int java_decode_option PARAMS ((int, char **));\n static void put_decl_string PARAMS ((const char *, int));\n@@ -199,6 +200,8 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_NAME \"GNU Java\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT java_init\n+#undef LANG_HOOKS_FINISH\n+#define LANG_HOOKS_FINISH java_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS java_init_options\n #undef LANG_HOOKS_DECODE_OPTION\n@@ -508,8 +511,8 @@ java_init (filename)\n   return filename;\n }\n \n-void\n-finish_parse ()\n+static void\n+java_finish ()\n {\n   jcf_dependency_write ();\n }"}, {"sha": "0402940a398ac589d34a9a566d2a492a49fc9991", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -61,7 +61,10 @@ struct lang_hooks\n \n   /* Called after options parsing, to initialize the front end.  The\n      main input filename is passed, which may be NULL; the front end\n-     should return the original filename (e.g. foo.i -> foo.c).  */\n+     should return the original filename (e.g. foo.i -> foo.c).\n+     Return NULL to indicate a serious error of some sort; in that\n+     case no compilation is performed, and the finish hook is called\n+     immediately.  */\n   const char * (*init) PARAMS ((const char *));\n \n   /* Called last, as a finalizer.  */"}, {"sha": "c98b61f02ab0a062cadcf85dd8cd9464486bd6de", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -456,6 +456,8 @@ static int print_struct_values = 0;\n #define LANG_HOOKS_NAME \"GNU Objective-C\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT objc_init\n+#undef LANG_HOOKS_FINISH\n+#define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS objc_init_options\n #undef LANG_HOOKS_DECODE_OPTION"}, {"sha": "a3bdba671017202ed106345714439e981a8fed15", "filename": "gcc/toplev.c", "status": "modified", "additions": 72, "deletions": 64, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -165,8 +165,9 @@ static void general_init PARAMS ((char *));\n static void parse_options_and_default_flags PARAMS ((int, char **));\n static void process_options PARAMS ((void));\n static void lang_independent_init PARAMS ((void));\n-static void lang_dependent_init PARAMS ((const char *));\n+static int lang_dependent_init PARAMS ((const char *));\n static void init_asm_output PARAMS ((const char *));\n+static void finalize PARAMS ((void));\n \n static void set_target_switch PARAMS ((const char *));\n static const char *decl_name PARAMS ((tree, int));\n@@ -2168,7 +2169,7 @@ compile_file ()\n   timevar_pop (TV_PARSE);\n \n   if (flag_syntax_only)\n-    goto finish_syntax;\n+    return;\n \n   globals = getdecls ();\n \n@@ -2250,65 +2251,13 @@ compile_file ()\n \t     IDENT_ASM_OP, version_string);\n #endif\n \n-  /* Language-specific end of compilation actions.  */\n- finish_syntax:\n-  (*lang_hooks.finish) ();\n-\n-  /* Close the dump files.  */\n-\n-  if (flag_gen_aux_info)\n-    {\n-      fclose (aux_info_file);\n-      if (errorcount)\n-\tunlink (aux_info_file_name);\n-    }\n-\n   if (optimize > 0 && open_dump_file (DFI_combine, NULL))\n     {\n       timevar_push (TV_DUMP);\n       dump_combine_total_stats (rtl_dump_file);\n       close_dump_file (DFI_combine, NULL, NULL_RTX);\n       timevar_pop (TV_DUMP);\n     }\n-\n-  /* Close non-debugging input and output files.  Take special care to note\n-     whether fclose returns an error, since the pages might still be on the\n-     buffer chain while the file is open.  */\n-\n-  finish_parse ();\n-\n-  if (ferror (asm_out_file) != 0)\n-    fatal_io_error (\"error writing to %s\", asm_file_name);\n-  if (fclose (asm_out_file) != 0)\n-    fatal_io_error (\"error closing %s\", asm_file_name);\n-\n-  /* Do whatever is necessary to finish printing the graphs.  */\n-  if (graph_dump_format != no_graph)\n-    {\n-      int i;\n-\n-      for (i = 0; i < (int) DFI_MAX; ++i)\n-\tif (dump_file[i].initialized && dump_file[i].graph_dump_p)\n-\t  {\n-\t    char seq[16];\n-\t    char *suffix;\n-\n-\t    sprintf (seq, \".%02d.\", i);\n-\t    suffix = concat (seq, dump_file[i].extension, NULL);\n-\t    finish_graph_dump_file (dump_base_name, suffix);\n-\t    free (suffix);\n-\t  }\n-    }\n-\n-  if (mem_report)\n-    {\n-      ggc_print_statistics ();\n-      stringpool_statistics ();\n-      dump_tree_statistics ();\n-    }\n-\n-  /* Free up memory for the benefit of leak detectors.  */\n-  free_reg_info ();\n }\n \f\n /* This is called from various places for FUNCTION_DECL, VAR_DECL,\n@@ -5112,8 +5061,8 @@ lang_independent_init ()\n   expand_dummy_function_end ();\n }\n \f\n-/* Language-dependent initialization.  */\n-static void\n+/* Language-dependent initialization.  Returns non-zero on success.  */\n+static int\n lang_dependent_init (name)\n      const char *name;\n {\n@@ -5125,10 +5074,11 @@ lang_dependent_init (name)\n      not done yet.  This routine must return the original filename\n      (e.g. foo.i -> foo.c) so can correctly initialize debug output.  */\n   name = (*lang_hooks.init) (name);\n+  if (name == NULL)\n+    return 0;\n \n-  if (name)\n-    name = ggc_strdup (name);\n-\n+  /* Is this duplication necessary?  */\n+  name = ggc_strdup (name);\n   main_input_filename = input_filename = name;\n   init_asm_output (name);\n \n@@ -5154,6 +5104,65 @@ lang_dependent_init (name)\n   (*debug_hooks->init) (name);\n \n   timevar_pop (TV_SYMOUT);\n+\n+  return 1;\n+}\n+\f\n+/* Clean up: close opened files, etc.  */\n+\n+static void\n+finalize ()\n+{\n+  /* Close the dump files.  */\n+  if (flag_gen_aux_info)\n+    {\n+      fclose (aux_info_file);\n+      if (errorcount)\n+\tunlink (aux_info_file_name);\n+    }\n+\n+  /* Close non-debugging input and output files.  Take special care to note\n+     whether fclose returns an error, since the pages might still be on the\n+     buffer chain while the file is open.  */\n+\n+  if (asm_out_file)\n+    {\n+      if (ferror (asm_out_file) != 0)\n+\tfatal_io_error (\"error writing to %s\", asm_file_name);\n+      if (fclose (asm_out_file) != 0)\n+\tfatal_io_error (\"error closing %s\", asm_file_name);\n+    }\n+\n+  /* Do whatever is necessary to finish printing the graphs.  */\n+  if (graph_dump_format != no_graph)\n+    {\n+      int i;\n+\n+      for (i = 0; i < (int) DFI_MAX; ++i)\n+\tif (dump_file[i].initialized && dump_file[i].graph_dump_p)\n+\t  {\n+\t    char seq[16];\n+\t    char *suffix;\n+\n+\t    sprintf (seq, \".%02d.\", i);\n+\t    suffix = concat (seq, dump_file[i].extension, NULL);\n+\t    finish_graph_dump_file (dump_base_name, suffix);\n+\t    free (suffix);\n+\t  }\n+    }\n+\n+  if (mem_report)\n+    {\n+      ggc_print_statistics ();\n+      stringpool_statistics ();\n+      dump_tree_statistics ();\n+    }\n+\n+  /* Free up memory for the benefit of leak detectors.  */\n+  free_reg_info ();\n+\n+  /* Language-specific end of compilation actions.  */\n+  (*lang_hooks.finish) ();\n }\n \f\n /* Entry point of cc1, cc1plus, jc1, f771, etc.\n@@ -5179,8 +5188,6 @@ toplev_main (argc, argv)\n   if (exit_after_options)\n     return (SUCCESS_EXIT_CODE);\n \n-  /* Start timing total execution time.  */\n-\n   /* The bulk of command line switch processing.  */\n   process_options ();\n \n@@ -5193,10 +5200,11 @@ toplev_main (argc, argv)\n      hashes etc.  */\n   lang_independent_init ();\n \n-  /* Language-dependent initialization.  */\n-  lang_dependent_init (filename);\n+  /* Language-dependent initialization.  Returns true on success.  */\n+  if (lang_dependent_init (filename))\n+    compile_file ();\n \n-  compile_file ();\n+  finalize ();\n \n   /* Stop timing and print the times.  */\n   timevar_stop (TV_TOTAL);"}, {"sha": "98ba6e59792173b52716d88b39c7cd3a2162bd77", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22703ccc3fb15defc154d8a4bd665ddf76efbd08/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=22703ccc3fb15defc154d8a4bd665ddf76efbd08", "patch": "@@ -2647,8 +2647,6 @@ extern const char *(*decl_printable_name)\tPARAMS ((tree, int));\n \n extern void (*incomplete_decl_finalize_hook)\tPARAMS ((tree));\n \n-extern void finish_parse\t\t\tPARAMS ((void));\n-\n /* Declare a predefined function.  Return the declaration.  This function is\n    provided by each language frontend.  */\n extern tree builtin_function\t\t\tPARAMS ((const char *, tree, int,"}]}