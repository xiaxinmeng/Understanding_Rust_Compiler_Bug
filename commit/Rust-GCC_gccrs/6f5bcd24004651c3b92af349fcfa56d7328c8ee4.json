{"sha": "6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1YmNkMjQwMDQ2NTFjM2I5MmFmMzQ5ZmNmYTU2ZDczMjhjOGVlNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-06T19:48:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-06T19:48:22Z"}, "message": "re PR c++/70847 (exponential time in cp_fold for chained virtual function calls)\n\n\tPR c++/70847\n\tPR c++/71330\n\tPR c++/71393\n\t* cp-gimplify.c (cp_fold_r): Set *walk_subtrees = 0 and return NULL\n\tright after cp_fold call if cp_fold has returned the same stmt\n\talready in some earlier cp_fold_r call.\n\t(cp_fold_function): Add pset automatic variable, pass its address\n\tto cp_walk_tree.\n\n\t* g++.dg/opt/pr70847.C: New test.\n\t* g++.dg/ubsan/pr70847.C: New test.\n\t* g++.dg/ubsan/pr71393.C: New test.\n\nCo-Authored-By: Patrick Palka <ppalka@gcc.gnu.org>\n\nFrom-SVN: r237151", "tree": {"sha": "0138cff9c5f695765b4a47c8f04722a3d3d06fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0138cff9c5f695765b4a47c8f04722a3d3d06fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "158beb4ab3f6adace5f3c328cba3470eb1cc6357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158beb4ab3f6adace5f3c328cba3470eb1cc6357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158beb4ab3f6adace5f3c328cba3470eb1cc6357"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "86dddd210d7074c16026ae34414d932bf3ce58a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "patch": "@@ -1,3 +1,15 @@\n+2016-06-06  Jakub Jelinek  <jakub@redhat.com>\n+\t    Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70847\n+\tPR c++/71330\n+\tPR c++/71393\n+\t* cp-gimplify.c (cp_fold_r): Set *walk_subtrees = 0 and return NULL\n+\tright after cp_fold call if cp_fold has returned the same stmt\n+\talready in some earlier cp_fold_r call.\n+\t(cp_fold_function): Add pset automatic variable, pass its address\n+\tto cp_walk_tree.\n+\n 2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/70202"}, {"sha": "dcb0fa6215be684115be345f806477aa3c5c862b", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "patch": "@@ -940,6 +940,17 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data)\n \n   *stmt_p = stmt = cp_fold (*stmt_p);\n \n+  if (((hash_set<tree> *) data)->add (stmt))\n+    {\n+      /* Don't walk subtrees of stmts we've already walked once, otherwise\n+\t we can have exponential complexity with e.g. lots of nested\n+\t SAVE_EXPRs or TARGET_EXPRs.  cp_fold uses a cache and will return\n+\t always the same tree, which the first time cp_fold_r has been\n+\t called on it had the subtrees walked.  */\n+      *walk_subtrees = 0;\n+      return NULL;\n+    }\n+\n   code = TREE_CODE (stmt);\n   if (code == OMP_FOR || code == OMP_SIMD || code == OMP_DISTRIBUTE\n       || code == OMP_TASKLOOP || code == CILK_FOR || code == CILK_SIMD\n@@ -997,7 +1008,8 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data)\n void\n cp_fold_function (tree fndecl)\n {\n-  cp_walk_tree (&DECL_SAVED_TREE (fndecl), cp_fold_r, NULL, NULL);\n+  hash_set<tree> pset;\n+  cp_walk_tree (&DECL_SAVED_TREE (fndecl), cp_fold_r, &pset, NULL);\n }\n \n /* Perform any pre-gimplification lowering of C++ front end trees to"}, {"sha": "29f5150e02309b769be4e8df59b2405142de0f60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "patch": "@@ -1,3 +1,13 @@\n+2016-06-06  Jakub Jelinek  <jakub@redhat.com>\n+\t    Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/70847\n+\tPR c++/71330\n+\tPR c++/71393\n+\t* g++.dg/opt/pr70847.C: New test.\n+\t* g++.dg/ubsan/pr70847.C: New test.\n+\t* g++.dg/ubsan/pr71393.C: New test.\n+\n 2016-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71259"}, {"sha": "2b5435317cbc771aec7a321f247841348c97fe11", "filename": "gcc/testsuite/g++.dg/opt/pr70847.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70847.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70847.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr70847.C?ref=6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/70847\n+// { dg-do compile }\n+\n+struct D { virtual D& f(); };\n+\n+void\n+g()\n+{\n+  D d;\n+  d.f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f();\n+}"}, {"sha": "2b5435317cbc771aec7a321f247841348c97fe11", "filename": "gcc/testsuite/g++.dg/ubsan/pr70847.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70847.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70847.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr70847.C?ref=6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/70847\n+// { dg-do compile }\n+\n+struct D { virtual D& f(); };\n+\n+void\n+g()\n+{\n+  D d;\n+  d.f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f().f();\n+}"}, {"sha": "6011e3a8de0a27e143bea3b8e636092fd615be5d", "filename": "gcc/testsuite/g++.dg/ubsan/pr71393.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr71393.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5bcd24004651c3b92af349fcfa56d7328c8ee4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr71393.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr71393.C?ref=6f5bcd24004651c3b92af349fcfa56d7328c8ee4", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/71393\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=undefined\" }\n+\n+struct B { B &operator << (long); };\n+struct A { A (); long a, b, c, d, e, f; };\n+\n+A::A ()\n+{\n+  B q;\n+  q << 0 << a << 0 << b << 0 << (b / a) << 0 << c << 0 << (c / a) << 0\n+    << d << 0 << (d / a) << 0 << e << 0 << (e / a) << 0 << f << 0\n+    << (f / a) << 0;\n+}"}]}