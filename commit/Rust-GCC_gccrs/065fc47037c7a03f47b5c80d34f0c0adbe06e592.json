{"sha": "065fc47037c7a03f47b5c80d34f0c0adbe06e592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1ZmM0NzAzN2M3YTAzZjQ3YjVjODBkMzRmMGMwYWRiZTA2ZTU5Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-04-18T12:34:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-04-18T12:34:41Z"}, "message": "index.html ([5.5]): Adjust to mention function objects and reference_wrapper; minor tweaks.\n\n2006-04-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* docs/html/faq/index.html ([5.5]): Adjust to mention function\n\tobjects and reference_wrapper; minor tweaks.\n\t* docs/html/faq/index.txt: Regenerate.\n\nFrom-SVN: r113031", "tree": {"sha": "e60b7fd98c295211173d51a476f1901ad01231d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e60b7fd98c295211173d51a476f1901ad01231d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/065fc47037c7a03f47b5c80d34f0c0adbe06e592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065fc47037c7a03f47b5c80d34f0c0adbe06e592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/065fc47037c7a03f47b5c80d34f0c0adbe06e592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065fc47037c7a03f47b5c80d34f0c0adbe06e592/comments", "author": null, "committer": null, "parents": [{"sha": "6370682af493743331f75d3d5baddff3ffbe1234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6370682af493743331f75d3d5baddff3ffbe1234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6370682af493743331f75d3d5baddff3ffbe1234"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "2539000811ffdb1ba51a1af0cf5fa1338c61abb8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065fc47037c7a03f47b5c80d34f0c0adbe06e592/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065fc47037c7a03f47b5c80d34f0c0adbe06e592/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=065fc47037c7a03f47b5c80d34f0c0adbe06e592", "patch": "@@ -1,3 +1,9 @@\n+2006-04-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* docs/html/faq/index.html ([5.5]): Adjust to mention function\n+\tobjects and reference_wrapper; minor tweaks.\n+\t* docs/html/faq/index.txt: Regenerate.\n+\n 2006-04-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/6702 (again)"}, {"sha": "c0ed178bb0bac190e5a0a1691bd679f0770a3fdb", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065fc47037c7a03f47b5c80d34f0c0adbe06e592/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065fc47037c7a03f47b5c80d34f0c0adbe06e592/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=065fc47037c7a03f47b5c80d34f0c0adbe06e592", "patch": "@@ -994,12 +994,9 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n       <p>Briefly, the features of TR1 and the current status are:\n       </p>\n \n-      <p><strong>Unordered containers - Complete -</strong>\n-         The unordered_set, unordered_map, unordered_multiset, and\n-\t unordered_multimap containers are hashed versions of the map, set,\n-\t multimap, and multiset containers respectively.  These classes are\n-\t suitable replacements for the SGI STL hash_map and hash_set\n-\t extensions.\n+      <p><strong>Reference_wrapper - Complete -</strong>\n+         Useful to pass references to functions that take their parameters\n+         by value.\n       </p>\n \n       <p><strong>Reference-counted smart pointers - Complete -</strong>\n@@ -1008,6 +1005,13 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n \t pointer is destroyed the pointer is freed.\n       </p>\n \n+      <p><strong>Function objects - Complete -</strong>\n+         Function return types (i.e, result_of), the functions template\n+\t mem_fn (a generalization of mem_fun and mem_fun_red), function\n+\t object binders (e.g, bind, a generalization of bind1st and bind2nd),\n+\t and polymorhpic function wrappers (e.g, class template function).\n+      </p>\n+\n       <p><strong>Type traits - Complete -</strong>\n          The type_traits class gives templates the ability to probe\n \t information about the input type and enable type-dependent logic\n@@ -1019,20 +1023,23 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n \t semantics.\n       </p>\n \n+      <p><strong>Unordered containers - Complete -</strong>\n+         The unordered_set, unordered_map, unordered_multiset, and\n+\t unordered_multimap containers are hashed versions of the map, set,\n+\t multimap, and multiset containers respectively.  These classes are\n+\t suitable replacements for the SGI STL hash_map and hash_set\n+\t extensions.\n+      </p>\n+\n       <p><strong>Tuples - Complete -</strong>\n          The tuple class implements small heterogeneous arrays.  This is an\n \t enhanced pair.  In fact, the standard pair is enhanced with a tuple\n \t interface.\n       </p>\n \n-      <p><strong>A regular expression engine</strong>\n-         This library provides for regular expression objects with traversal\n-\t of text with return of subexpressions.\n-      </p>\n-\n-      <p><strong>A random number engine</strong>\n-         This library contains randow number generators with several different\n-\t choices of distribution.\n+      <p><strong>C99 compatibility - Under construction - </strong>\n+         There are many features designed to minimize the divergence of the C\n+\t and the C++ languages.\n       </p>\n \n       <p><strong>Special functions - Under construction - </strong>\n@@ -1043,9 +1050,14 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n \t zeta function all for your computing pleasure.\n       </p>\n \n-      <p><strong>C99 compatibility - Under construction - </strong>\n-         There are many features designed to minimize the divergence of the C\n-\t and the C++ languages.\n+      <p><strong>A regular expression engine</strong>\n+         This library provides for regular expression objects with traversal\n+\t of text with return of subexpressions.\n+      </p>\n+\n+      <p><strong>A random number engine</strong>\n+         This library contains randow number generators with several different\n+\t choices of distribution.\n       </p>\n \n <hr />"}, {"sha": "a9df04e7ec8a7dd8762d74358722a629826a9e57", "filename": "libstdc++-v3/docs/html/faq/index.txt", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065fc47037c7a03f47b5c80d34f0c0adbe06e592/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065fc47037c7a03f47b5c80d34f0c0adbe06e592/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.txt?ref=065fc47037c7a03f47b5c80d34f0c0adbe06e592", "patch": "@@ -818,17 +818,20 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n \n    Briefly, the features of TR1 and the current status are:\n \n-   Unordered containers - Complete - The unordered_set, unordered_map,\n-   unordered_multiset, and unordered_multimap containers are hashed\n-   versions of the map, set, multimap, and multiset containers\n-   respectively. These classes are suitable replacements for the SGI STL\n-   hash_map and hash_set extensions.\n+   Reference_wrapper - Complete - Useful to pass references to functions\n+   that take their parameters by value.\n \n    Reference-counted smart pointers - Complete - The shared_ptr and\n    weak_ptr allow several object to know about a pointer and whether it\n    is valid. When the last reference to the pointer is destroyed the\n    pointer is freed.\n \n+   Function objects - Complete - Function return types (i.e, result_of),\n+   the functions template mem_fn (a generalization of mem_fun and\n+   mem_fun_red), function object binders (e.g, bind, a generalization of\n+   bind1st and bind2nd), and polymorhpic function wrappers (e.g, class\n+   template function).\n+\n    Type traits - Complete - The type_traits class gives templates the\n    ability to probe information about the input type and enable\n    type-dependent logic to be performed without the need of template\n@@ -837,16 +840,18 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    Fixed-size arrays - Complete - The array class implements small\n    fixed-sized arrays with container semantics.\n \n+   Unordered containers - Complete - The unordered_set, unordered_map,\n+   unordered_multiset, and unordered_multimap containers are hashed\n+   versions of the map, set, multimap, and multiset containers\n+   respectively. These classes are suitable replacements for the SGI STL\n+   hash_map and hash_set extensions.\n+\n    Tuples - Complete - The tuple class implements small heterogeneous\n    arrays. This is an enhanced pair. In fact, the standard pair is\n    enhanced with a tuple interface.\n \n-   A regular expression engine This library provides for regular\n-   expression objects with traversal of text with return of\n-   subexpressions.\n-\n-   A random number engine This library contains randow number generators\n-   with several different choices of distribution.\n+   C99 compatibility - Under construction - There are many features\n+   designed to minimize the divergence of the C and the C++ languages.\n \n    Special functions - Under construction - Twenty-three mathematical\n    functions familiar to physicists and engineers are included:\n@@ -855,8 +860,12 @@ http://clisp.cons.org/~haible/gccinclude-glibc-2.2-compat.diff\n    integrals, exponential integrals and the Riemann zeta function all for\n    your computing pleasure.\n \n-   C99 compatibility - Under construction - There are many features\n-   designed to minimize the divergence of the C and the C++ languages.\n+   A regular expression engine This library provides for regular\n+   expression objects with traversal of text with return of\n+   subexpressions.\n+\n+   A random number engine This library contains randow number generators\n+   with several different choices of distribution.\n      _________________________________________________________________\n \n 5.6 Is libstdc++-v3 thread-safe?"}]}