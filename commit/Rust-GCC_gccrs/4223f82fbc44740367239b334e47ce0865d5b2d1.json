{"sha": "4223f82fbc44740367239b334e47ce0865d5b2d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyM2Y4MmZiYzQ0NzQwMzY3MjM5YjMzNGU0N2NlMDg2NWQ1YjJkMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-23T16:27:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-23T16:27:27Z"}, "message": "re PR c++/9847 (ICE on :?-operator with double class definition in  expand_expr)\n\n\tPR c++/9847\n\t* cp-tree.h (duplicate_tag_error): Remove.\n\t* class.c (duplicate_tag_error): Remove.\n\t* semantics.c (begin_class_definition): Return immediately for a\n\tduplicate class definition.\n\n\tPR c++/10451\n\t* decl.c (grokdeclarator): Correct logic for \"mutable\" errors.\n\nFrom-SVN: r65998", "tree": {"sha": "3585e830e2712fafae77083109435c9269fafcab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3585e830e2712fafae77083109435c9269fafcab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4223f82fbc44740367239b334e47ce0865d5b2d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4223f82fbc44740367239b334e47ce0865d5b2d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4223f82fbc44740367239b334e47ce0865d5b2d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4223f82fbc44740367239b334e47ce0865d5b2d1/comments", "author": null, "committer": null, "parents": [{"sha": "f0ddce84f92b55f2b64195ee71ae9a70ae115395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ddce84f92b55f2b64195ee71ae9a70ae115395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ddce84f92b55f2b64195ee71ae9a70ae115395"}], "stats": {"total": 125, "additions": 50, "deletions": 75}, "files": [{"sha": "723f67a30c9ede4c1210b8e81eda6a8731126386", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -1,3 +1,14 @@\n+2003-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9847\n+\t* cp-tree.h (duplicate_tag_error): Remove.\n+\t* class.c (duplicate_tag_error): Remove.\n+\t* semantics.c (begin_class_definition): Return immediately for a\n+\tduplicate class definition.\n+\n+\tPR c++/10451\n+\t* decl.c (grokdeclarator): Correct logic for \"mutable\" errors.\n+\n 2003-04-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10446"}, {"sha": "405e571a63f972802c4d0242a5c7ee1678991010", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -1924,78 +1924,6 @@ finish_struct_methods (tree t)\n \t   method_name_cmp);\n }\n \n-/* Emit error when a duplicate definition of a type is seen.  Patch up.  */\n-\n-void\n-duplicate_tag_error (tree t)\n-{\n-  error (\"redefinition of `%#T'\", t);\n-  cp_error_at (\"previous definition of `%#T'\", t);\n-\n-  /* Pretend we haven't defined this type.  */\n-\n-  /* All of the component_decl's were TREE_CHAINed together in the parser.\n-     finish_struct_methods walks these chains and assembles all methods with\n-     the same base name into DECL_CHAINs. Now we don't need the parser chains\n-     anymore, so we unravel them.  */\n-\n-  /* This used to be in finish_struct, but it turns out that the\n-     TREE_CHAIN is used by dbxout_type_methods and perhaps some other\n-     things...  */\n-  if (CLASSTYPE_METHOD_VEC (t)) \n-    {\n-      tree method_vec = CLASSTYPE_METHOD_VEC (t);\n-      int i, len  = TREE_VEC_LENGTH (method_vec);\n-      for (i = 0; i < len; i++)\n-\t{\n-\t  tree unchain = TREE_VEC_ELT (method_vec, i);\n-\t  while (unchain != NULL_TREE) \n-\t    {\n-\t      TREE_CHAIN (OVL_CURRENT (unchain)) = NULL_TREE;\n-\t      unchain = OVL_NEXT (unchain);\n-\t    }\n-\t}\n-    }\n-\n-  if (TYPE_LANG_SPECIFIC (t))\n-    {\n-      tree binfo = TYPE_BINFO (t);\n-      int interface_only = CLASSTYPE_INTERFACE_ONLY (t);\n-      int interface_unknown = CLASSTYPE_INTERFACE_UNKNOWN (t);\n-      tree template_info = CLASSTYPE_TEMPLATE_INFO (t);\n-      int use_template = CLASSTYPE_USE_TEMPLATE (t);\n-\n-      memset ((char *) TYPE_LANG_SPECIFIC (t), 0, sizeof (struct lang_type));\n-      BINFO_BASETYPES(binfo) = NULL_TREE;\n-\n-      TYPE_LANG_SPECIFIC (t)->u.h.is_lang_type_class = 1;\n-      TYPE_BINFO (t) = binfo;\n-      CLASSTYPE_INTERFACE_ONLY (t) = interface_only;\n-      SET_CLASSTYPE_INTERFACE_UNKNOWN_X (t, interface_unknown);\n-      TYPE_REDEFINED (t) = 1;\n-      CLASSTYPE_TEMPLATE_INFO (t) = template_info;\n-      CLASSTYPE_USE_TEMPLATE (t) = use_template;\n-      CLASSTYPE_DECL_LIST (t) = NULL_TREE;\n-    }\n-  TYPE_SIZE (t) = NULL_TREE;\n-  TYPE_MODE (t) = VOIDmode;\n-  TYPE_FIELDS (t) = NULL_TREE;\n-  TYPE_METHODS (t) = NULL_TREE;\n-  TYPE_VFIELD (t) = NULL_TREE;\n-  TYPE_CONTEXT (t) = NULL_TREE;\n-  \n-  /* Clear TYPE_LANG_FLAGS -- those in TYPE_LANG_SPECIFIC are cleared above.  */\n-  TYPE_LANG_FLAG_0 (t) = 0;\n-  TYPE_LANG_FLAG_1 (t) = 0;\n-  TYPE_LANG_FLAG_2 (t) = 0;\n-  TYPE_LANG_FLAG_3 (t) = 0;\n-  TYPE_LANG_FLAG_4 (t) = 0;\n-  TYPE_LANG_FLAG_5 (t) = 0;\n-  TYPE_LANG_FLAG_6 (t) = 0;\n-  /* But not this one.  */\n-  SET_IS_AGGR_TYPE (t, 1);\n-}\n-\n /* Make BINFO's vtable have N entries, including RTTI entries,\n    vbase and vcall offsets, etc.  Set its type and call the backend\n    to lay it out.  */"}, {"sha": "24913624c2e37de7d4d066bdab8bda25c1e758d0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -3540,7 +3540,6 @@ extern void resort_type_method_vec\n extern void add_method\t\t\t\t(tree, tree, int);\n extern int currently_open_class\t\t\t(tree);\n extern tree currently_open_derived_class\t(tree);\n-extern void duplicate_tag_error\t\t\t(tree);\n extern tree finish_struct\t\t\t(tree, tree);\n extern void finish_struct_1\t\t\t(tree);\n extern int resolves_to_fixed_type_p\t\t(tree, int *);"}, {"sha": "181dd6fc4a6f5c2218d3732bfa34170b9e10e163", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -11044,7 +11044,7 @@ grokdeclarator (tree declarator,\n \n   if (RIDBIT_SETP (RID_MUTABLE, specbits))\n     {\n-      if (current_class_name == NULL_TREE || decl_context == PARM || friendp)\n+      if (decl_context != FIELD || friendp)\n         {\n \t  error (\"non-member `%s' cannot be declared `mutable'\", name);\n           RIDBIT_RESET (RID_MUTABLE, specbits);"}, {"sha": "cdb24f6e91017696af0ea08b0c5f9f89e53d1a92", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -1797,7 +1797,11 @@ begin_class_definition (t)\n   /* If this type was already complete, and we see another definition,\n      that's an error.  */\n   if (COMPLETE_TYPE_P (t))\n-    duplicate_tag_error (t);\n+    {\n+      error (\"redefinition of `%#T'\", t);\n+      cp_error_at (\"previous definition of `%#T'\", t);\n+      return error_mark_node;\n+    }\n \n   /* Update the location of the decl.  */\n   DECL_SOURCE_FILE (TYPE_NAME (t)) = input_filename;"}, {"sha": "2fc733dedcb1b4aec062bc57a643a4a326d19e01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -1,3 +1,11 @@\n+2003-04-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/10451\n+\t* g++.dg/parse/crash4.C: New test.\n+\t\n+\tPR c++/9847\n+\t* g++.dg/parse/crash5.C: New test.\n+\n 2003-04-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10446"}, {"sha": "a24f0dd003c1e5296c74004dffecbe2560c765e2", "filename": "gcc/testsuite/g++.dg/parse/crash4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash4.C?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -0,0 +1,12 @@\n+struct Bar\n+ {\n+     typedef int type;\n+ };\n+ \n+ struct Foo\n+ {\n+     void func(void)\n+     {\n+       mutable Bar::type x; // { dg-error \"\" }\n+     }\n+ };"}, {"sha": "3a4185b7e6c1c5e82d6d023f5f910820473df739", "filename": "gcc/testsuite/g++.dg/parse/crash5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4223f82fbc44740367239b334e47ce0865d5b2d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash5.C?ref=4223f82fbc44740367239b334e47ce0865d5b2d1", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-w\" }\n+\n+class QString { // { dg-error \"\" }\n+  QString (const QString & a); // { dg-error \"\" }\n+};\n+\n+class QString { }; // { dg-error \"\" }\n+\n+const QString q () {\n+  QString z; // { dg-error \"\" }\n+  int x;\n+  return x ? QString () : QString (); // { dg-error \"\" }\n+}"}]}