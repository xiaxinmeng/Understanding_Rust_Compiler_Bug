{"sha": "4adbd5dd3cf5801e622fcfff3149a27940d34089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFkYmQ1ZGQzY2Y1ODAxZTYyMmZjZmZmMzE0OWEyNzk0MGQzNDA4OQ==", "commit": {"author": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2010-04-12T23:58:18Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2010-04-12T23:58:18Z"}, "message": "gcc.c (cc1_options): Handle -iplugindir before processing the cc1 spec.\n\ngcc/\n\n2010-04-13  Matthias Klose  <doko@ubuntu.com>\n\n\t* gcc.c (cc1_options): Handle -iplugindir before processing\n\tthe cc1 spec. Only add -iplugindir once.\n\t(cpp_unique_options): Add -iplugindir option if -fplugin* options\n\tfound.\n\t* common.opt (iplugindir): Remove `Separate' property, initialize.\n\t* plugin.c (default_plugin_dir_name): Error with missing -iplugindir\n\toption.\n\t* Makefile.in (check-%, check-parallel-%): Create plugin dir.\n\t(distclean): Remove plugin dir.\n\n2010-04-13  Basile Starynkevitch  <basile@starynkevitch.net>\n\n\t* doc/plugins.texi (Loading Plugins): Document short\n\t-fplugin=foo option.\n\t(Plugin API): Mention default_plugin_dir_name function.\n\n\t* gcc.c (find_file_spec_function): Add new declaration.\n\t(static_spec_func): Use it for \"find-file\".\n\t(find_file_spec_function): Add new function.\n\t(cc1_options): Add -iplugindir option if -fplugin* options found.\n\n\t* gcc-plugin.h (default_plugin_dir_name): Added new declaration.\n\n\t* plugin.c (add_new_plugin): Updated comment, and handle short\n\tplugin name.\n\t(default_plugin_dir_name): Added new function.\n\n\t* common.opt (iplugindir): New option to set the plugin\n\tdirectory.\n\ngcc/testsuite/\n\n2010-04-13  Matthias Klose  <doko@ubuntu.com>\n\n\t* gcc.dg/plugindir1.c: New testcase.\n\t* gcc.dg/plugindir2.c: New testcase.\n\t* gcc.dg/plugindir3.c: New testcase.\n\t* gcc.dg/plugindir4.c: New testcase.\n\nFrom-SVN: r158247", "tree": {"sha": "03b93cac03234238b2a22c3947bc8bcd44f3d7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b93cac03234238b2a22c3947bc8bcd44f3d7fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4adbd5dd3cf5801e622fcfff3149a27940d34089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adbd5dd3cf5801e622fcfff3149a27940d34089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adbd5dd3cf5801e622fcfff3149a27940d34089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adbd5dd3cf5801e622fcfff3149a27940d34089/comments", "author": null, "committer": null, "parents": [{"sha": "e0db9cc648242cbbea38cc3c559663acb501aee8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0db9cc648242cbbea38cc3c559663acb501aee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0db9cc648242cbbea38cc3c559663acb501aee8"}], "stats": {"total": 157, "additions": 149, "deletions": 8}, "files": [{"sha": "3e197ab5ecd4548c5f7f60ef038c3de3f1d72cac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -1,3 +1,36 @@\n+2010-04-13  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* gcc.c (cc1_options): Handle -iplugindir before processing\n+\tthe cc1 spec. Only add -iplugindir once.\n+\t(cpp_unique_options): Add -iplugindir option if -fplugin* options\n+\tfound.\n+\t* common.opt (iplugindir): Remove `Separate' property, initialize.\n+\t* plugin.c (default_plugin_dir_name): Error with missing -iplugindir\n+\toption.\n+\t* Makefile.in (check-%, check-parallel-%): Create plugin dir.\n+\t(distclean): Remove plugin dir.\n+\t* doc/invoke.texi: Document -iplugindir.\n+\n+2010-04-13  Basile Starynkevitch  <basile@starynkevitch.net>\n+\n+\t* doc/plugins.texi (Loading Plugins): Document short\n+\t-fplugin=foo option.\n+\t(Plugin API): Mention default_plugin_dir_name function.\n+\n+\t* gcc.c (find_file_spec_function): Add new declaration.\n+\t(static_spec_func): Use it for \"find-file\".\n+\t(find_file_spec_function): Add new function.\n+\t(cc1_options): Add -iplugindir option if -fplugin* options found.\n+\n+\t* gcc-plugin.h (default_plugin_dir_name): Added new declaration.\n+\n+\t* plugin.c (add_new_plugin): Updated comment, and handle short\n+\tplugin name.\n+\t(default_plugin_dir_name): Added new function.\n+\n+\t* common.opt (iplugindir): New option to set the plugin\n+\tdirectory.\n+\n 2010-04-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (any_rotate): New code iterator."}, {"sha": "3fada585d950b5fb4d93acbfc74562cf294716ce", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -4233,7 +4233,7 @@ distclean: clean lang.distclean\n \t-rm -f gcov.pod\n # Delete po/*.gmo only if we are not building in the source directory.\n \t-if [ ! -f po/exgettext ]; then rm -f po/*.gmo; fi\n-\t-rmdir ada cp f java objc intl po testsuite 2>/dev/null\n+\t-rmdir ada cp f java objc intl po testsuite plugin 2>/dev/null\n \n # Get rid of every file that's generated from some other file, except for `configure'.\n # Most of these files ARE PRESENT in the GCC distribution.\n@@ -4690,6 +4690,7 @@ $(TESTSUITEDIR)/site.exp: site.exp\n \n # This is only used for check-% targets that aren't parallelized.\n $(filter-out $(lang_checks_parallelized),$(lang_checks)): check-% : site.exp\n+\t-test -d plugin || mkdir plugin\n \t-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)\n \ttest -d $(TESTSUITEDIR)/$* || mkdir $(TESTSUITEDIR)/$*\n \t-(rootme=`${PWD_COMMAND}`; export rootme; \\\n@@ -4777,6 +4778,7 @@ $(patsubst %,%-subtargets,$(lang_checks_parallelized)): check-%-subtargets:\n # Otherwise check-$lang isn't parallelized and runtest is invoked just with\n # the $(RUNTESTFLAGS) arguments.\n check-parallel-% : site.exp\n+\t-test -d plugin || mkdir plugin\n \t-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)\n \ttest -d $(TESTSUITEDIR)/$(check_p_subdir) || mkdir $(TESTSUITEDIR)/$(check_p_subdir)\n \t-(rootme=`${PWD_COMMAND}`; export rootme; \\"}, {"sha": "6e9e6965f2220ca38e7966d7be1ed036b0251a3c", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -1539,6 +1539,10 @@ gxcoff+\n Common JoinedOrMissing Negative(gcoff)\n Generate debug information in extended XCOFF format\n \n+iplugindir=\n+Common Joined Var(plugindir_string) Init(0)\n+-iplugindir=<dir>\tSet <dir> to be the default plugin directory\n+\n o\n Common Joined Separate\n -o <file>\tPlace output into <file>"}, {"sha": "1c52a3a54648e0eb61ec2172cab0f1f409a85413", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -425,8 +425,9 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Directory Options\n @xref{Directory Options,,Options for Directory Search}.\n-@gccoptlist{-B@var{prefix}  -I@var{dir}  -iquote@var{dir}  -L@var{dir}\n--specs=@var{file}  -I- --sysroot=@var{dir}}\n+@gccoptlist{-B@var{prefix} -I@var{dir} -iplugindir=@var{dir}}\n+-iquote@var{dir} -L@var{dir} -specs=@var{file} -I-\n+--sysroot=@var{dir}\n \n @item Machine Dependent Options\n @xref{Submodel Options,,Hardware Models and Configurations}.\n@@ -8892,6 +8893,12 @@ the ordering for the include_next directive are not inadvertently changed.\n If you really need to change the search order for system directories,\n use the @option{-nostdinc} and/or @option{-isystem} options.\n \n+@item -iplugindir=@var{dir}\n+Set the directory to search for plugins which are passed\n+by @option{-fplugin=@var{name}} instead of\n+@option{-fplugin=@var{path}/@var{name}.so}.  This option is not meant\n+to be used by the user, but only passed by the driver.\n+\n @item -iquote@var{dir}\n @opindex iquote\n Add the directory @var{dir} to the head of the list of directories to"}, {"sha": "77000fee646f7bc2243bfc38685463dbdf405ee6", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -22,6 +22,11 @@ The plugin arguments are parsed by GCC and passed to respective\n plugins as key-value pairs. Multiple plugins can be invoked by\n specifying multiple @option{-fplugin} arguments.\n \n+A plugin can be simply given by its short name (no dots or\n+slashes). When simply passing @option{-fplugin=NAME}, the plugin is\n+loaded from the @file{plugin} directory, so @option{-fplugin=NAME} is\n+the same as @option{-fplugin=`gcc -print-file-name=plugin`/NAME.so},\n+using backquote shell syntax to query the @file{plugin} directory.\n \n @section Plugin API\n \n@@ -407,6 +412,9 @@ On most systems, you can query this @code{plugin} directory by\n invoking @command{gcc -print-file-name=plugin} (replace if needed\n @command{gcc} with the appropriate program path).\n \n+Inside plugins, this @code{plugin} directory name can be queried by\n+calling @code{default_plugin_dir_name ()}.\n+\n The following GNU Makefile excerpt shows how to build a simple plugin:\n \n @smallexample"}, {"sha": "948c4397570c65a51bfda95ff97fb186aba62603", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -141,4 +141,10 @@ extern void register_callback (const char *plugin_name,\n \n extern int unregister_callback (const char *plugin_name, int event);\n \n+\n+/* Retrieve the plugin directory name, as returned by the\n+   -fprint-file-name=plugin argument to the gcc program, which is the\n+   -iplugindir program argument to cc1.  */\n+extern const char* default_plugin_dir_name (void);\n+\n #endif /* GCC_PLUGIN_H */"}, {"sha": "d2190533796fae58263454c54e246633c4adeb91", "filename": "gcc/gcc.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -403,6 +403,7 @@ static const char *if_exists_else_spec_function (int, const char **);\n static const char *replace_outfile_spec_function (int, const char **);\n static const char *version_compare_spec_function (int, const char **);\n static const char *include_spec_function (int, const char **);\n+static const char *find_file_spec_function (int, const char **);\n static const char *print_asm_header_spec_function (int, const char **);\n static const char *compare_debug_dump_opt_spec_function (int, const char **);\n static const char *compare_debug_self_opt_spec_function (int, const char **);\n@@ -872,6 +873,7 @@ static const char *cpp_unique_options =\n  %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\\n  %{!E:%{!M:%{!MM:%{!MT:%{!MQ:%{MD|MMD:%{o*:-MQ %*}}}}}}}\\\n  %{remap} %{g3|ggdb3|gstabs3|gcoff3|gxcoff3|gvms3:-dD}\\\n+ %{!iplugindir*:%{fplugin*:-iplugindir=%:find-file(plugin)}}\\\n  %{H} %C %{D*&U*&A*} %{i*} %Z %i\\\n  %{fmudflap:-D_MUDFLAP -include mf-runtime.h}\\\n  %{fmudflapth:-D_MUDFLAP -D_MUDFLAPTH -include mf-runtime.h}\\\n@@ -894,6 +896,7 @@ static const char *cpp_debug_options = \"%{d*}\";\n /* NB: This is shared amongst all front-ends, except for Ada.  */\n static const char *cc1_options =\n \"%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+ %{!iplugindir*:%{fplugin*:-iplugindir=%:find-file(plugin)}}\\\n  %1 %{!Q:-quiet} %{!dumpbase:-dumpbase %B} %{d*} %{m*} %{a*}\\\n  %{fcompare-debug-second:%:compare-debug-auxbase-opt(%b)} \\\n  %{!fcompare-debug-second:%{c|S:%{o*:-auxbase-strip %*}%{!o*:-auxbase %b}}}%{!c:%{!S:-auxbase %b}} \\\n@@ -1726,6 +1729,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"replace-outfile\",\t\treplace_outfile_spec_function },\n   { \"version-compare\",\t\tversion_compare_spec_function },\n   { \"include\",\t\t\tinclude_spec_function },\n+  { \"find-file\",\t\tfind_file_spec_function },\n   { \"print-asm-header\",\t\tprint_asm_header_spec_function },\n   { \"compare-debug-dump-opt\",\tcompare_debug_dump_opt_spec_function },\n   { \"compare-debug-self-opt\",\tcompare_debug_self_opt_spec_function },\n@@ -8710,6 +8714,22 @@ include_spec_function (int argc, const char **argv)\n   return NULL;\n }\n \n+/* %:find-file spec function.  This function replace its argument by\n+    the file found thru find_file, that is the -print-file-name gcc\n+    program option. */\n+static const char *\n+find_file_spec_function (int argc, const char**argv)\n+{\n+  const char *file;\n+\n+  if (argc != 1)\n+    abort ();\n+\n+  file = find_file (argv[0]);\n+  return file;\n+}\n+\n+\n /* %:print-asm-header spec function.  Print a banner to say that the\n    following output is from the assembler.  */\n "}, {"sha": "9e1b5f4ada157b0544095b77939e6e1c29fd85f8", "filename": "gcc/plugin.c", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -1,5 +1,5 @@\n /* Support for GCC plugin mechanism.\n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -124,16 +124,41 @@ get_plugin_base_name (const char *full_name)\n }\n \n \n-/* Create a plugin_name_args object for the give plugin and insert it to\n-   the hash table. This function is called when -fplugin=/path/to/NAME.so\n-   option is processed.  */\n+/* Create a plugin_name_args object for the given plugin and insert it\n+   to the hash table. This function is called when\n+   -fplugin=/path/to/NAME.so or -fplugin=NAME option is processed.  */\n \n void\n add_new_plugin (const char* plugin_name)\n {\n   struct plugin_name_args *plugin;\n   void **slot;\n-  char *base_name = get_plugin_base_name (plugin_name);\n+  char *base_name;\n+  bool name_is_short;\n+  const char *pc;\n+\n+  /* Replace short names by their full path when relevant.  */\n+  name_is_short  = !IS_ABSOLUTE_PATH (plugin_name);\n+  for (pc = plugin_name; name_is_short && *pc; pc++)\n+    if (*pc == '.' || IS_DIR_SEPARATOR (*pc))\n+      name_is_short = false;\n+\n+  if (name_is_short)\n+    {\n+      base_name = CONST_CAST (char*, plugin_name);\n+      /* FIXME: the \".so\" suffix is currently builtin, since plugins\n+\t only work on ELF host systems like e.g. Linux or Solaris.\n+\t When plugins shall be available on non ELF systems such as\n+\t Windows or MacOS, this code has to be greatly improved.  */\n+      plugin_name = concat (default_plugin_dir_name (), \"/\",\n+\t\t\t    plugin_name, \".so\", NULL);\n+      if (access (plugin_name, R_OK))\n+\tfatal_error\n+\t  (\"inacessible plugin file %s expanded from short plugin name %s: %m\",\n+\t   plugin_name, base_name);\n+    }\n+  else\n+    base_name = get_plugin_base_name (plugin_name);\n \n   /* If this is the first -fplugin= option we encounter, create\n      'plugin_name_args_tab' hash table.  */\n@@ -809,6 +834,7 @@ plugin_default_version_check (struct plugin_gcc_version *gcc_version,\n   return true;\n }\n \n+\n /* Return the current value of event_last, so that plugins which provide\n    additional functionality for events for the benefit of high-level plugins\n    know how many valid entries plugin_event_name holds.  */\n@@ -818,3 +844,15 @@ get_event_last (void)\n {\n   return event_last;\n }\n+\n+\n+/* Retrieve the default plugin directory.  The gcc driver should have passed\n+   it as -iplugindir <dir> to the cc1 program, and it is queriable thru the\n+   -print-file-name=plugin option to gcc.  */\n+const char*\n+default_plugin_dir_name (void)\n+{\n+  if (!plugindir_string)\n+    fatal_error (\"-iplugindir <dir> option not passed from the gcc driver\");\n+  return plugindir_string;\n+}"}, {"sha": "d267f5caa5ff289209c1d38c1447bae594cc2de4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -1,3 +1,10 @@\n+2010-04-13  Matthias Klose  <doko@ubuntu.com>\n+\n+\t* gcc.dg/plugindir1.c: New testcase.\n+\t* gcc.dg/plugindir2.c: New testcase.\n+\t* gcc.dg/plugindir3.c: New testcase.\n+\t* gcc.dg/plugindir4.c: New testcase.\n+\n 2010-04-12  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/rotate-2.c: New test."}, {"sha": "a973ec0c54cf2c2d3fa2198f075a5375ad71987f", "filename": "gcc/testsuite/gcc.dg/plugindir1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir1.c?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-c -fplugin=foo\" } */\n+\n+/* { dg-prune-output \".*inacessible plugin file.*foo\\.so expanded from short plugin name.*\" } */"}, {"sha": "58c1505501a9fcaa2eb9701816bae8e23475bd77", "filename": "gcc/testsuite/gcc.dg/plugindir2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir2.c?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -c -fplugin=foo\" } */\n+\n+/* { dg-prune-output \".*inacessible plugin file.*foo\\.so expanded from short plugin name.*\" } */"}, {"sha": "41037534a260cd46ff8355c4a03036e62525580c", "filename": "gcc/testsuite/gcc.dg/plugindir3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir3.c?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-fplugin=foo\" } */\n+\n+/* { dg-prune-output \".*inacessible plugin file.*foo\\.so expanded from short plugin name.*\" } */"}, {"sha": "27b2f24aaf9f20b5da855f1b30d66a871b5aad68", "filename": "gcc/testsuite/gcc.dg/plugindir4.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4adbd5dd3cf5801e622fcfff3149a27940d34089/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugindir4.c?ref=4adbd5dd3cf5801e622fcfff3149a27940d34089", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-iplugindir=my-plugindir -fplugin=foo\" } */\n+\n+/* { dg-prune-output \".*inacessible plugin file.*my-plugindir/foo\\.so expanded from short plugin name.*\" } */"}]}