{"sha": "3c55d60f405e4429cbcd2cf5c27c048ac226b502", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1NWQ2MGY0MDVlNDQyOWNiY2QyY2Y1YzI3YzA0OGFjMjI2YjUwMg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-19T10:17:31Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-19T10:17:31Z"}, "message": "[nvptx] Use MAX, MIN, ROUND_UP macros\n\nUse MAX, MIN, and ROUND_UP macros to simplify code.\n\nBuild and reg-tested on x86_64 with nvptx accelerator.\n\n2018-12-19  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.c (nvptx_gen_shared_bcast, shared_prop_gen)\n\t(nvptx_goacc_expand_accel_var): Use MAX and ROUND_UP.\n\t(nvptx_assemble_value, nvptx_output_skip): Use MIN.\n\t(nvptx_shared_propagate, nvptx_single, nvptx_expand_shared_addr): Use\n\tMAX.\n\nFrom-SVN: r267261", "tree": {"sha": "abce9c890f806b979599388730df401168b90e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abce9c890f806b979599388730df401168b90e71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c55d60f405e4429cbcd2cf5c27c048ac226b502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c55d60f405e4429cbcd2cf5c27c048ac226b502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c55d60f405e4429cbcd2cf5c27c048ac226b502", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c55d60f405e4429cbcd2cf5c27c048ac226b502/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0b3b5c4af07ba34991c4f253496725a760104c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b3b5c4af07ba34991c4f253496725a760104c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b3b5c4af07ba34991c4f253496725a760104c2"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b850704c288fcbb575708adeb182c54f08a5fabc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c55d60f405e4429cbcd2cf5c27c048ac226b502/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c55d60f405e4429cbcd2cf5c27c048ac226b502/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c55d60f405e4429cbcd2cf5c27c048ac226b502", "patch": "@@ -1,3 +1,11 @@\n+2018-12-19  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (nvptx_gen_shared_bcast, shared_prop_gen)\n+\t(nvptx_goacc_expand_accel_var): Use MAX and ROUND_UP.\n+\t(nvptx_assemble_value, nvptx_output_skip): Use MIN.\n+\t(nvptx_shared_propagate, nvptx_single, nvptx_expand_shared_addr): Use\n+\tMAX.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.c (nvptx_gen_wcast): Rename as"}, {"sha": "2a2d638e6d72e2af745ed460cb2abcb7417998f9", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c55d60f405e4429cbcd2cf5c27c048ac226b502/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c55d60f405e4429cbcd2cf5c27c048ac226b502/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=3c55d60f405e4429cbcd2cf5c27c048ac226b502", "patch": "@@ -1810,9 +1810,8 @@ nvptx_gen_shared_bcast (rtx reg, propagate_mask pm, unsigned rep,\n \t  {\n \t    unsigned align = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;\n \n-\t    if (align > oacc_bcast_align)\n-\t      oacc_bcast_align = align;\n-\t    data->offset = (data->offset + align - 1) & ~(align - 1);\n+\t    oacc_bcast_align = MAX (oacc_bcast_align, align);\n+\t    data->offset = ROUND_UP (data->offset, align);\n \t    addr = data->base;\n \t    gcc_assert (data->base != NULL);\n \t    if (data->offset)\n@@ -1934,8 +1933,7 @@ nvptx_assemble_value (unsigned HOST_WIDE_INT val, unsigned size)\n     {\n       val >>= part * BITS_PER_UNIT;\n       part = init_frag.size - init_frag.offset;\n-      if (part > size)\n-\tpart = size;\n+      part = MIN (part, size);\n \n       unsigned HOST_WIDE_INT partial\n \t= val << (init_frag.offset * BITS_PER_UNIT);\n@@ -1998,8 +1996,7 @@ nvptx_output_skip (FILE *, unsigned HOST_WIDE_INT size)\n   if (init_frag.offset)\n     {\n       unsigned part = init_frag.size - init_frag.offset;\n-      if (part > size)\n-\tpart = (unsigned) size;\n+      part = MIN (part, (unsigned)size);\n       size -= part;\n       nvptx_assemble_value (0, part);\n     }\n@@ -3927,9 +3924,8 @@ shared_prop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_,\n       /* Starting a loop, initialize pointer.    */\n       unsigned align = GET_MODE_ALIGNMENT (GET_MODE (reg)) / BITS_PER_UNIT;\n \n-      if (align > oacc_bcast_align)\n-\toacc_bcast_align = align;\n-      data->offset = (data->offset + align - 1) & ~(align - 1);\n+      oacc_bcast_align = MAX (oacc_bcast_align, align);\n+      data->offset = ROUND_UP (data->offset, align);\n \n       data->ptr = gen_reg_rtx (Pmode);\n \n@@ -3970,8 +3966,7 @@ nvptx_shared_propagate (bool pre_p, bool is_call, basic_block block,\n       rtx init = gen_rtx_SET (data.base, oacc_bcast_sym);\n       emit_insn_after (init, insn);\n \n-      if (oacc_bcast_size < data.offset)\n-\toacc_bcast_size = data.offset;\n+      oacc_bcast_size = MAX (oacc_bcast_size, data.offset);\n     }\n   return empty;\n }\n@@ -4346,8 +4341,7 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \t  data.base = oacc_bcast_sym;\n \t  data.ptr = 0;\n \n-\t  if (oacc_bcast_size < GET_MODE_SIZE (SImode))\n-\t    oacc_bcast_size = GET_MODE_SIZE (SImode);\n+\t  oacc_bcast_size = MAX (oacc_bcast_size, GET_MODE_SIZE (SImode));\n \n \t  data.offset = 0;\n \t  emit_insn_before (nvptx_gen_shared_bcast (pvar, PM_read, 0, &data,\n@@ -5044,13 +5038,11 @@ nvptx_expand_shared_addr (tree exp, rtx target,\n     return target;\n \n   unsigned align = TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 2));\n-  if (align > worker_red_align)\n-    worker_red_align = align;\n+  worker_red_align = MAX (worker_red_align, align);\n \n   unsigned offset = TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 0));\n   unsigned size = TREE_INT_CST_LOW (CALL_EXPR_ARG (exp, 1));\n-  if (size + offset > worker_red_size)\n-    worker_red_size = size + offset;\n+  worker_red_size = MAX (worker_red_size, size + offset);\n \n   rtx addr = worker_red_sym;\n   if (offset)"}]}