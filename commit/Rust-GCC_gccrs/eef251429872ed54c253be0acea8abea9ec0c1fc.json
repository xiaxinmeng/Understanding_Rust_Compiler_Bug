{"sha": "eef251429872ed54c253be0acea8abea9ec0c1fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVmMjUxNDI5ODcyZWQ1NGMyNTNiZTBhY2VhOGFiZWE5ZWMwYzFmYw==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-10-31T23:39:29Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-10-31T23:39:29Z"}, "message": "Restore old AT_frame_base code for targets that don't use dwarf2 unwind info.\n\nPartial fix.\nPR debug/24444\n* dwarf2out.c (convert_cfa_to_loc_list): Put inside DWARF2_UNWIND_INFO\nifdef.  Put ifdefs around call in gen_subprogram_die.\n(compute_frame_pointer_to_cfa_displacement): Likewise.\n(gen_subprogram_die): Restore old code for when DWARF2_UNWIND_INFO is\nnot defined.\n\nFrom-SVN: r106299", "tree": {"sha": "1750a8260ed0fb478184d26706f4e513e5695b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1750a8260ed0fb478184d26706f4e513e5695b5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eef251429872ed54c253be0acea8abea9ec0c1fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef251429872ed54c253be0acea8abea9ec0c1fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eef251429872ed54c253be0acea8abea9ec0c1fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eef251429872ed54c253be0acea8abea9ec0c1fc/comments", "author": null, "committer": null, "parents": [{"sha": "e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f9a909f1b40be029ac2285fac82d8ab13e3c20"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "21e1a207fdac645b73db9f3a62dbef2ae0454ba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef251429872ed54c253be0acea8abea9ec0c1fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef251429872ed54c253be0acea8abea9ec0c1fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eef251429872ed54c253be0acea8abea9ec0c1fc", "patch": "@@ -1,5 +1,12 @@\n-2005-10-25  James E. Wilson  <wilson@specifix.com>\n-\n+2005-10-31  James E. Wilson  <wilson@specifix.com>\n+\n+\tPR debug/24444\n+\t* dwarf2out.c (convert_cfa_to_loc_list): Put inside DWARF2_UNWIND_INFO\n+\tifdef.  Put ifdefs around call in gen_subprogram_die.\n+\t(compute_frame_pointer_to_cfa_displacement): Likewise.\n+\t(gen_subprogram_die): Restore old code for when DWARF2_UNWIND_INFO is\n+\tnot defined.\n+\t\n \tPR rtl-optimization/17356\n \t*  cfgrtl.c (purge_dead_edges): Undo last change.  In EDGE_EH code,\n \tadd check for CALL_INSN if EDGE_ABRNOMAL_CALL true."}, {"sha": "d780914fe1ea1c2b4dbd3a9b9561590c03b960ab", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eef251429872ed54c253be0acea8abea9ec0c1fc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eef251429872ed54c253be0acea8abea9ec0c1fc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=eef251429872ed54c253be0acea8abea9ec0c1fc", "patch": "@@ -10290,6 +10290,7 @@ tree_add_const_value_attribute (dw_die_ref var_die, tree decl)\n     add_const_value_attribute (var_die, rtl);\n }\n \n+#ifdef DWARF2_UNWIND_INFO\n /* Convert the CFI instructions for the current function into a location\n    list.  This is used for DW_AT_frame_base when we targeting a dwarf2\n    consumer that does not support the dwarf3 DW_OP_call_frame_cfa.  */\n@@ -10381,6 +10382,7 @@ compute_frame_pointer_to_cfa_displacement (void)\n \n   frame_pointer_cfa_offset = -offset;\n }\n+#endif\n \n /* Generate a DW_AT_name attribute given some string value to be included as\n    the value of the attribute.  */\n@@ -11606,6 +11608,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       add_AT_fde_ref (subr_die, DW_AT_MIPS_fde, current_funcdef_fde);\n #endif\n \n+#ifdef DWARF2_UNWIND_INFO\n       /* We define the \"frame base\" as the function's CFA.  This is more\n \t convenient for several reasons: (1) It's stable across the prologue\n \t and epilogue, which makes it better than just a frame pointer,\n@@ -11632,6 +11635,17 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t debugger about.  We'll need to adjust all frame_base references\n \t by this displacement.  */\n       compute_frame_pointer_to_cfa_displacement ();\n+#else\n+      /* For targets which support DWARF2, but not DWARF2 call-frame info,\n+\t we just use the stack pointer or frame pointer.  */\n+      /* ??? Should investigate getting better info via callbacks, or else\n+\t by interpreting the IA-64 unwind info.  */\n+      {\n+\trtx fp_reg\n+\t  = frame_pointer_needed ? hard_frame_pointer_rtx : stack_pointer_rtx;\n+\tadd_AT_loc (subr_die, DW_AT_frame_base, reg_loc_descriptor (fp_reg));\n+      }\n+#endif\n \n       if (cfun->static_chain_decl)\n \tadd_AT_location_description (subr_die, DW_AT_static_link,"}]}