{"sha": "c1d781707eb611d65aa4e1275f246debba557a3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFkNzgxNzA3ZWI2MTFkNjVhYTRlMTI3NWYyNDZkZWJiYTU1N2EzZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-15T12:27:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-15T12:27:21Z"}, "message": "[C++ PATCH] clone_function_decl breakup\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg01083.html\nThis patch, from the modules branch, breaks out function cloning from the\nmethod vector updating. We have a new function, build_clones,\nwhich does the building, returning a count of the number of clones\n(2 or 3). clone_function_decl separately adds them to the method\nvector, if they should be added. I suppose this could have used\nFOR_EVERY_CLONE, but I went with the counting scheme.\n\n\t* class.c (build_clones): Break out of clone_function_decl.  Just\n\tbuild the clones.\n\t(clone_function_decl): Call build_clones, then maybe add them to\n\tthe method vector.\n\nFrom-SVN: r276998", "tree": {"sha": "1a2e93191e1711f0cc9b458b772fdc4a8160d619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2e93191e1711f0cc9b458b772fdc4a8160d619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1d781707eb611d65aa4e1275f246debba557a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d781707eb611d65aa4e1275f246debba557a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1d781707eb611d65aa4e1275f246debba557a3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1d781707eb611d65aa4e1275f246debba557a3d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0a9a3fc22d4d4a38c1d6a31669c926734308745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a9a3fc22d4d4a38c1d6a31669c926734308745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a9a3fc22d4d4a38c1d6a31669c926734308745"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "ecaf312639bf0ce0a3d2e140a5a5bd2c36c3e60e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d781707eb611d65aa4e1275f246debba557a3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d781707eb611d65aa4e1275f246debba557a3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1d781707eb611d65aa4e1275f246debba557a3d", "patch": "@@ -1,5 +1,10 @@\n 2019-10-15  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (build_clones): Break out of clone_function_decl.  Just\n+\tbuild the clones.\n+\t(clone_function_decl): Call build_clones, then maybe add them to\n+\tthe method vector.\n+\n \t* class.c (build_clone): Refactor to clarify recursiveness.\n \n 2019-10-14  Jason Merrill  <jason@redhat.com>"}, {"sha": "a66c25b65be9f7f61fe899f587b1a1095d3628a7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1d781707eb611d65aa4e1275f246debba557a3d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1d781707eb611d65aa4e1275f246debba557a3d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=c1d781707eb611d65aa4e1275f246debba557a3d", "patch": "@@ -4699,30 +4699,21 @@ build_clone (tree fn, tree name)\n   return clone;\n }\n \n-/* Produce declarations for all appropriate clones of FN.  If\n-   UPDATE_METHODS is true, the clones are added to the\n-   CLASSTYPE_MEMBER_VEC.  */\n+/* Build the clones of FN, return the number of clones built.  These\n+   will be inserted onto DECL_CHAIN of FN.  */\n \n-void\n-clone_function_decl (tree fn, bool update_methods)\n+unsigned\n+build_clones (tree fn)\n {\n-  tree clone;\n-\n-  /* Avoid inappropriate cloning.  */\n-  if (DECL_CHAIN (fn)\n-      && DECL_CLONED_FUNCTION_P (DECL_CHAIN (fn)))\n-    return;\n+  unsigned count = 0;\n \n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn))\n     {\n       /* For each constructor, we need two variants: an in-charge version\n \t and a not-in-charge version.  */\n-      clone = build_clone (fn, complete_ctor_identifier);\n-      if (update_methods)\n-\tadd_method (DECL_CONTEXT (clone), clone, false);\n-      clone = build_clone (fn, base_ctor_identifier);\n-      if (update_methods)\n-\tadd_method (DECL_CONTEXT (clone), clone, false);\n+      build_clone (fn, complete_ctor_identifier);\n+      build_clone (fn, base_ctor_identifier);\n+      count += 2;\n     }\n   else\n     {\n@@ -4739,20 +4730,40 @@ clone_function_decl (tree fn, bool update_methods)\n \t destructor.  */\n       if (DECL_VIRTUAL_P (fn))\n \t{\n-\t  clone = build_clone (fn, deleting_dtor_identifier);\n-\t  if (update_methods)\n-\t    add_method (DECL_CONTEXT (clone), clone, false);\n+\t  build_clone (fn, deleting_dtor_identifier);\n+\t  count++;\n \t}\n-      clone = build_clone (fn, complete_dtor_identifier);\n-      if (update_methods)\n-\tadd_method (DECL_CONTEXT (clone), clone, false);\n-      clone = build_clone (fn, base_dtor_identifier);\n-      if (update_methods)\n-\tadd_method (DECL_CONTEXT (clone), clone, false);\n+      build_clone (fn, complete_dtor_identifier);\n+      build_clone (fn, base_dtor_identifier);\n+      count += 2;\n     }\n \n+  return count;\n+}\n+\n+/* Produce declarations for all appropriate clones of FN.  If\n+   UPDATE_METHODS is true, the clones are added to the\n+   CLASSTYPE_MEMBER_VEC.  */\n+\n+void\n+clone_function_decl (tree fn, bool update_methods)\n+{\n+  /* Avoid inappropriate cloning.  */\n+  if (DECL_CHAIN (fn)\n+      && DECL_CLONED_FUNCTION_P (DECL_CHAIN (fn)))\n+    return;\n+\n+  unsigned count = build_clones (fn);\n+\n   /* Note that this is an abstract function that is never emitted.  */\n   DECL_ABSTRACT_P (fn) = true;\n+\n+  if (update_methods)\n+    for (tree clone = fn; count--;)\n+      {\n+\tclone = DECL_CHAIN (clone);\n+\tadd_method (DECL_CONTEXT (clone), clone, false);\n+      }\n }\n \n /* DECL is an in charge constructor, which is being defined. This will"}]}