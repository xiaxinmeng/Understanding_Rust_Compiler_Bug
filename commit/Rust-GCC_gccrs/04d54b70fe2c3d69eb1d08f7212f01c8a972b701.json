{"sha": "04d54b70fe2c3d69eb1d08f7212f01c8a972b701", "node_id": "C_kwDOANBUbNoAKDA0ZDU0YjcwZmUyYzNkNjllYjFkMDhmNzIxMmYwMWM4YTk3MmI3MDE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-29T17:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-29T19:11:44Z"}, "message": "c++: fix triviality of class with unsatisfied op=\n\ncxx20_pair is trivially copyable because it has a trivial copy constructor\nand only a deleted copy assignment operator; the non-triviality of the\nunsatisfied copy assignment overload is not considered.\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (check_methods): Call constraints_satisfied_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/cond-triv3.C: New test.", "tree": {"sha": "ae7b9c097ebe383eceab5fbb65090ec52a0d66af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7b9c097ebe383eceab5fbb65090ec52a0d66af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d54b70fe2c3d69eb1d08f7212f01c8a972b701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d54b70fe2c3d69eb1d08f7212f01c8a972b701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d54b70fe2c3d69eb1d08f7212f01c8a972b701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d54b70fe2c3d69eb1d08f7212f01c8a972b701/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13337ea9a1ccffc7d73a8ff87f5f186fd4d0d51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13337ea9a1ccffc7d73a8ff87f5f186fd4d0d51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13337ea9a1ccffc7d73a8ff87f5f186fd4d0d51c"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "aebcb53739e5320174b03eb9495cb340cc122c9f", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d54b70fe2c3d69eb1d08f7212f01c8a972b701/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d54b70fe2c3d69eb1d08f7212f01c8a972b701/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=04d54b70fe2c3d69eb1d08f7212f01c8a972b701", "patch": "@@ -4795,8 +4795,9 @@ check_methods (tree t)\n \n   /* Check whether the eligible special member functions (P0848) are\n      user-provided.  add_method arranged that the CLASSTYPE_MEMBER_VEC only\n-     has the eligible ones; TYPE_FIELDS also contains ineligible overloads,\n-     which is why this needs to be separate from the loop above.  */\n+     has the eligible ones, unless none are eligible; TYPE_FIELDS also contains\n+     ineligible overloads, which is why this needs to be separate from the loop\n+     above.  */\n \n   if (tree dtor = CLASSTYPE_DESTRUCTOR (t))\n     {\n@@ -4819,6 +4820,10 @@ check_methods (tree t)\n     {\n       if (!user_provided_p (fn))\n \t/* Might be trivial.  */;\n+      else if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t/* Templates are never special members.  */;\n+      else if (!constraints_satisfied_p (fn))\n+\t/* Not eligible.  */;\n       else if (copy_fn_p (fn))\n \tTYPE_HAS_COMPLEX_COPY_CTOR (t) = true;\n       else if (move_fn_p (fn))\n@@ -4829,6 +4834,10 @@ check_methods (tree t)\n     {\n       if (!user_provided_p (fn))\n \t/* Might be trivial.  */;\n+      else if (TREE_CODE (fn) == TEMPLATE_DECL)\n+\t/* Templates are never special members.  */;\n+      else if (!constraints_satisfied_p (fn))\n+\t/* Not eligible.  */;\n       else if (copy_fn_p (fn))\n \tTYPE_HAS_COMPLEX_COPY_ASSIGN (t) = true;\n       else if (move_fn_p (fn))"}, {"sha": "d0711cf2607caf0a86f4c1fef573e3f202b7b20b", "filename": "gcc/testsuite/g++.dg/cpp2a/cond-triv3.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d54b70fe2c3d69eb1d08f7212f01c8a972b701/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcond-triv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d54b70fe2c3d69eb1d08f7212f01c8a972b701/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcond-triv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcond-triv3.C?ref=04d54b70fe2c3d69eb1d08f7212f01c8a972b701", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+struct X\n+{\n+    T first{};\n+\n+    X& operator=(const X&) = delete;\n+    X& operator=(const X&) requires requires (T& t) { t = t; } { return *this; }\n+};\n+\n+// C++20 std::pair<const int, int>:\n+using cxx20_pair = X<const int>;\n+static_assert( __is_trivially_constructible(cxx20_pair, const cxx20_pair&), \"\" );\n+static_assert( !__is_assignable(cxx20_pair&, const cxx20_pair&), \"\" );\n+static_assert( __is_trivially_copyable(cxx20_pair), \"\" );\n+\n+template<bool, typename, typename F> struct conditional { using type = F; };\n+template<typename T, typename F> struct conditional<true, T, F> { using type = T; };\n+\n+struct base\n+{\n+    base() = default;\n+    ~base() = default;\n+    base(const base&) = default;\n+    base& operator=(const base&) = delete;\n+};\n+\n+struct nope;\n+\n+template<class T>\n+struct Y : base\n+{\n+    T first{};\n+\n+    Y& operator=(typename conditional<__is_assignable(T&, const T&), const Y&, const nope&>::type)\n+    { return *this; }\n+};\n+\n+// C++17 std::pair<const int, int>:\n+using cxx17_pair = Y<const int>;\n+static_assert( __is_trivially_constructible(cxx17_pair, const cxx17_pair&), \"\" );\n+static_assert( ! __is_assignable(cxx17_pair&, const cxx17_pair&), \"\" );\n+static_assert( __is_trivially_copyable(cxx17_pair), \"???\" );"}]}