{"sha": "1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJkNTE5NmM5YjFhMGNkNzI4MGFkYWRkNmQ3ODhmODFhODJjYTAyMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-21T06:40:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-21T06:40:49Z"}, "message": "Pass a vec_info to get_mask_type_for_scalar_type\n\n2019-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (get_mask_type_for_scalar_type): Take a vec_info.\n\t* tree-vect-stmts.c (get_mask_type_for_scalar_type): Likewise.\n\t(vect_check_load_store_mask): Update call accordingly.\n\t(vect_get_mask_type_for_stmt): Likewise.\n\t* tree-vect-patterns.c (check_bool_pattern): Likewise.\n\t(search_type_for_mask_1, vect_recog_mask_conversion_pattern): Likewise.\n\t(vect_convert_mask_for_vectype): Likewise.\n\nFrom-SVN: r277226", "tree": {"sha": "48322b56cd2e416fb1a56e8b08f1b5e849e95925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48322b56cd2e416fb1a56e8b08f1b5e849e95925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcab2a0d1d4b2c0b4bba6f5e3834ec0678a2a5c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcab2a0d1d4b2c0b4bba6f5e3834ec0678a2a5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcab2a0d1d4b2c0b4bba6f5e3834ec0678a2a5c8"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "bbb4710c99bb3fc34f2e20b8598e10661d996087", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "patch": "@@ -1,3 +1,13 @@\n+2019-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (get_mask_type_for_scalar_type): Take a vec_info.\n+\t* tree-vect-stmts.c (get_mask_type_for_scalar_type): Likewise.\n+\t(vect_check_load_store_mask): Update call accordingly.\n+\t(vect_get_mask_type_for_stmt): Likewise.\n+\t* tree-vect-patterns.c (check_bool_pattern): Likewise.\n+\t(search_type_for_mask_1, vect_recog_mask_conversion_pattern): Likewise.\n+\t(vect_convert_mask_for_vectype): Likewise.\n+\n 2019-10-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c (vect_supportable_direct_optab_p): Take"}, {"sha": "1be4cc0a371b4099579c1f7e46dc4a1f032b1c7a", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "patch": "@@ -3616,7 +3616,8 @@ check_bool_pattern (tree var, vec_info *vinfo, hash_set<gimple *> &stmts)\n \t  if (comp_vectype == NULL_TREE)\n \t    return false;\n \n-\t  tree mask_type = get_mask_type_for_scalar_type (TREE_TYPE (rhs1));\n+\t  tree mask_type = get_mask_type_for_scalar_type (vinfo,\n+\t\t\t\t\t\t\t  TREE_TYPE (rhs1));\n \t  if (mask_type\n \t      && expand_vec_cmp_expr_p (comp_vectype, mask_type, rhs_code))\n \t    return false;\n@@ -3943,7 +3944,7 @@ search_type_for_mask_1 (tree var, vec_info *vinfo,\n \t      break;\n \t    }\n \n-\t  mask_type = get_mask_type_for_scalar_type (TREE_TYPE (rhs1));\n+\t  mask_type = get_mask_type_for_scalar_type (vinfo, TREE_TYPE (rhs1));\n \t  if (!mask_type\n \t      || !expand_vec_cmp_expr_p (comp_vectype, mask_type, rhs_code))\n \t    {\n@@ -4275,7 +4276,7 @@ vect_recog_mask_conversion_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n       tree mask_arg_type = search_type_for_mask (mask_arg, vinfo);\n       if (!mask_arg_type)\n \treturn NULL;\n-      vectype2 = get_mask_type_for_scalar_type (mask_arg_type);\n+      vectype2 = get_mask_type_for_scalar_type (vinfo, mask_arg_type);\n \n       if (!vectype1 || !vectype2\n \t  || known_eq (TYPE_VECTOR_SUBPARTS (vectype1),\n@@ -4352,7 +4353,7 @@ vect_recog_mask_conversion_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n       else\n \treturn NULL;\n \n-      vectype2 = get_mask_type_for_scalar_type (rhs1_type);\n+      vectype2 = get_mask_type_for_scalar_type (vinfo, rhs1_type);\n \n       if (!vectype1 || !vectype2)\n \treturn NULL;\n@@ -4442,14 +4443,14 @@ vect_recog_mask_conversion_pattern (stmt_vec_info stmt_vinfo, tree *type_out)\n \n   if (TYPE_PRECISION (rhs1_type) < TYPE_PRECISION (rhs2_type))\n     {\n-      vectype1 = get_mask_type_for_scalar_type (rhs1_type);\n+      vectype1 = get_mask_type_for_scalar_type (vinfo, rhs1_type);\n       if (!vectype1)\n \treturn NULL;\n       rhs2 = build_mask_conversion (rhs2, vectype1, stmt_vinfo);\n     }\n   else\n     {\n-      vectype1 = get_mask_type_for_scalar_type (rhs2_type);\n+      vectype1 = get_mask_type_for_scalar_type (vinfo, rhs2_type);\n       if (!vectype1)\n \treturn NULL;\n       rhs1 = build_mask_conversion (rhs1, vectype1, stmt_vinfo);\n@@ -4520,7 +4521,7 @@ vect_convert_mask_for_vectype (tree mask, tree vectype,\n   tree mask_type = search_type_for_mask (mask, vinfo);\n   if (mask_type)\n     {\n-      tree mask_vectype = get_mask_type_for_scalar_type (mask_type);\n+      tree mask_vectype = get_mask_type_for_scalar_type (vinfo, mask_type);\n       if (mask_vectype\n \t  && maybe_ne (TYPE_VECTOR_SUBPARTS (vectype),\n \t\t       TYPE_VECTOR_SUBPARTS (mask_vectype)))"}, {"sha": "d371820684691984d2567b390e222dd0856168c8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "patch": "@@ -2558,6 +2558,7 @@ vect_check_load_store_mask (stmt_vec_info stmt_info, tree mask,\n \t\t\t    vect_def_type *mask_dt_out,\n \t\t\t    tree *mask_vectype_out)\n {\n+  vec_info *vinfo = stmt_info->vinfo;\n   if (!VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (mask)))\n     {\n       if (dump_enabled_p ())\n@@ -2586,7 +2587,7 @@ vect_check_load_store_mask (stmt_vec_info stmt_info, tree mask,\n \n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   if (!mask_vectype)\n-    mask_vectype = get_mask_type_for_scalar_type (TREE_TYPE (vectype));\n+    mask_vectype = get_mask_type_for_scalar_type (vinfo, TREE_TYPE (vectype));\n \n   if (!mask_vectype || !VECTOR_BOOLEAN_TYPE_P (mask_vectype))\n     {\n@@ -11156,7 +11157,7 @@ get_vectype_for_scalar_type (tree scalar_type)\n    of vectors of specified SCALAR_TYPE as supported by target.  */\n \n tree\n-get_mask_type_for_scalar_type (tree scalar_type)\n+get_mask_type_for_scalar_type (vec_info *, tree scalar_type)\n {\n   tree vectype = get_vectype_for_scalar_type (scalar_type);\n \n@@ -11986,6 +11987,7 @@ vect_get_vector_types_for_stmt (stmt_vec_info stmt_info,\n opt_tree\n vect_get_mask_type_for_stmt (stmt_vec_info stmt_info)\n {\n+  vec_info *vinfo = stmt_info->vinfo;\n   gimple *stmt = stmt_info->stmt;\n   tree mask_type = NULL;\n   tree vectype, scalar_type;\n@@ -11995,7 +11997,7 @@ vect_get_mask_type_for_stmt (stmt_vec_info stmt_info)\n       && !VECT_SCALAR_BOOLEAN_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n     {\n       scalar_type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-      mask_type = get_mask_type_for_scalar_type (scalar_type);\n+      mask_type = get_mask_type_for_scalar_type (vinfo, scalar_type);\n \n       if (!mask_type)\n \treturn opt_tree::failure_at (stmt,"}, {"sha": "2dd9ea3d9e29a91b0f63208d3db15ebe64b073e7", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bd5196c9b1a0cd7280adadd6d788f81a82ca023/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=1bd5196c9b1a0cd7280adadd6d788f81a82ca023", "patch": "@@ -1591,7 +1591,7 @@ extern bool vect_can_advance_ivs_p (loop_vec_info);\n extern poly_uint64 current_vector_size;\n extern tree get_vectype_for_scalar_type (tree);\n extern tree get_vectype_for_scalar_type_and_size (tree, poly_uint64);\n-extern tree get_mask_type_for_scalar_type (tree);\n+extern tree get_mask_type_for_scalar_type (vec_info *, tree);\n extern tree get_same_sized_vectype (tree, tree);\n extern bool vect_get_loop_mask_type (loop_vec_info);\n extern bool vect_is_simple_use (tree, vec_info *, enum vect_def_type *,"}]}