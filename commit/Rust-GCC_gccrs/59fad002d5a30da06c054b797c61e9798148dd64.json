{"sha": "59fad002d5a30da06c054b797c61e9798148dd64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmYWQwMDJkNWEzMGRhMDZjMDU0Yjc5N2M2MWU5Nzk4MTQ4ZGQ2NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:23:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T13:23:39Z"}, "message": "[multiple changes]\n\n2013-04-11  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb, sem_res.adb, sem_attr.adb: Minor reformatting.\n\n2013-04-11  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.adb, atree.ads (Node31): New function.\n\t(Set_Node31): New procedure.\n\n2013-04-11  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.ads: Minor typo correction.\n\n2013-04-11  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ad[sb] (Thunk_Entity/Set_Thunk_Entity): New attribute.\n\nFrom-SVN: r197792", "tree": {"sha": "679f0ea8228adb0e349f20c09b30aeddd244dc7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/679f0ea8228adb0e349f20c09b30aeddd244dc7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59fad002d5a30da06c054b797c61e9798148dd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fad002d5a30da06c054b797c61e9798148dd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59fad002d5a30da06c054b797c61e9798148dd64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fad002d5a30da06c054b797c61e9798148dd64/comments", "author": null, "committer": null, "parents": [{"sha": "289a994bb9f60f3516e8662218d79d3049b95659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/289a994bb9f60f3516e8662218d79d3049b95659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/289a994bb9f60f3516e8662218d79d3049b95659"}], "stats": {"total": 98, "additions": 78, "deletions": 20}, "files": [{"sha": "3e584e9a6f16ceed03963f33df577218007f3800", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -1,3 +1,20 @@\n+2013-04-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb, sem_res.adb, sem_attr.adb: Minor reformatting.\n+\n+2013-04-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.adb, atree.ads (Node31): New function.\n+\t(Set_Node31): New procedure.\n+\n+2013-04-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads: Minor typo correction.\n+\n+2013-04-11  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ad[sb] (Thunk_Entity/Set_Thunk_Entity): New attribute.\n+\n 2013-04-11  Robert Dewar  <dewar@adacore.com>\n \n \t* back_end.adb (Register_Back_End_Types): Moved to Get_Targ"}, {"sha": "40a27a1fb74bf30235ecc23a8fe2798c88aa79a3", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2526,6 +2526,12 @@ package body Atree is\n          return Node_Id (Nodes.Table (N + 5).Field6);\n       end Node30;\n \n+      function Node31 (N : Node_Id) return Node_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Node_Id (Nodes.Table (N + 5).Field7);\n+      end Node31;\n+\n       function List1 (N : Node_Id) return List_Id is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -5231,6 +5237,12 @@ package body Atree is\n          Nodes.Table (N + 5).Field6 := Union_Id (Val);\n       end Set_Node30;\n \n+      procedure Set_Node31 (N : Node_Id; Val : Node_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 5).Field7 := Union_Id (Val);\n+      end Set_Node31;\n+\n       procedure Set_List1 (N : Node_Id; Val : List_Id) is\n       begin\n          pragma Assert (N <= Nodes.Last);"}, {"sha": "07e8e512a57ebb554f77336f2223df21d0517d30", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1171,6 +1171,9 @@ package Atree is\n       function Node30 (N : Node_Id) return Node_Id;\n       pragma Inline (Node30);\n \n+      function Node31 (N : Node_Id) return Node_Id;\n+      pragma Inline (Node31);\n+\n       function List1 (N : Node_Id) return List_Id;\n       pragma Inline (List1);\n \n@@ -2453,6 +2456,9 @@ package Atree is\n       procedure Set_Node30 (N : Node_Id; Val : Node_Id);\n       pragma Inline (Set_Node30);\n \n+      procedure Set_Node31 (N : Node_Id; Val : Node_Id);\n+      pragma Inline (Set_Node31);\n+\n       procedure Set_List1 (N : Node_Id; Val : List_Id);\n       pragma Inline (Set_List1);\n "}, {"sha": "3d88294006cbbc479948cd4726d8c9bf2eff69bb", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -245,7 +245,7 @@ package body Einfo is\n    --    Corresponding_Equality          Node30\n    --    Static_Initialization           Node30\n \n-   --    (unused)                        Node31\n+   --    Thunk_Entity                    Node31\n \n    --    (unused)                        Node32\n \n@@ -2907,6 +2907,13 @@ package body Einfo is\n       return Node25 (Id);\n    end Task_Body_Procedure;\n \n+   function Thunk_Entity (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+                      and then Is_Thunk (Id));\n+      return Node31 (Id);\n+   end Thunk_Entity;\n+\n    function Treat_As_Volatile (Id : E) return B is\n    begin\n       return Flag41 (Id);\n@@ -5539,6 +5546,13 @@ package body Einfo is\n       Set_Node25 (Id, V);\n    end Set_Task_Body_Procedure;\n \n+   procedure Set_Thunk_Entity (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure)\n+                       and then Is_Thunk (Id));\n+      Set_Node31 (Id, V);\n+   end Set_Thunk_Entity;\n+\n    procedure Set_Treat_As_Volatile (Id : E; V : B := True) is\n    begin\n       Set_Flag41 (Id, V);\n@@ -8959,7 +8973,8 @@ package body Einfo is\n               E_Variable                                   =>\n             Write_Str (\"Related_Type\");\n \n-         when E_Procedure                                  =>\n+         when E_Procedure                                  |\n+              E_Function                                   =>\n             Write_Str (\"Wrapped_Entity\");\n \n          when others                                       =>\n@@ -9033,6 +9048,10 @@ package body Einfo is\n    procedure Write_Field31_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+         when E_Procedure                                  |\n+              E_Function                                   =>\n+            Write_Str (\"Thunk_Entity\");\n+\n          when others                                       =>\n             Write_Str (\"Field31??\");\n       end case;"}, {"sha": "70646f37442686893b5f1085eee85efdf874e3af", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -3853,6 +3853,10 @@ package Einfo is\n --       The last sentence is odd??? Why not have Task_Body_Procedure go to the\n --       Underlying_Type of the Root_Type???\n \n+--    Thunk_Entity (Node31)\n+--       Defined in functions and procedures which have been classified as\n+--       Is_Thunk. Set to the target entity called by the thunk.\n+\n --    Treat_As_Volatile (Flag41)\n --       Defined in all type entities, and also in constants, components and\n --       variables. Set if this entity is to be treated as volatile for code\n@@ -5358,6 +5362,7 @@ package Einfo is\n    --    Extra_Formals                       (Node28)\n    --    Subprograms_For_Type                (Node29)\n    --    Corresponding_Equality              (Node30)   (implicit /= only)\n+   --    Thunk_Entity                        (Node31)   (thunk case only)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Elaboration_Entity_Required         (Flag174)\n    --    Default_Expressions_Processed       (Flag108)\n@@ -5628,6 +5633,7 @@ package Einfo is\n    --    Wrapped_Entity                      (Node27)   (non-generic case only)\n    --    Extra_Formals                       (Node28)\n    --    Static_Initialization               (Node30)   (init_proc only)\n+   --    Thunk_Entity                        (Node31)   (thunk case only)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Delay_Cleanups                      (Flag114)\n    --    Discard_Names                       (Flag88)\n@@ -6502,6 +6508,7 @@ package Einfo is\n    function Suppress_Style_Checks               (Id : E) return B;\n    function Suppress_Value_Tracking_On_Call     (Id : E) return B;\n    function Task_Body_Procedure                 (Id : E) return N;\n+   function Thunk_Entity                        (Id : E) return E;\n    function Treat_As_Volatile                   (Id : E) return B;\n    function Underlying_Full_View                (Id : E) return E;\n    function Underlying_Record_View              (Id : E) return E;\n@@ -7112,6 +7119,7 @@ package Einfo is\n    procedure Set_Suppress_Style_Checks           (Id : E; V : B := True);\n    procedure Set_Suppress_Value_Tracking_On_Call (Id : E; V : B := True);\n    procedure Set_Task_Body_Procedure             (Id : E; V : N);\n+   procedure Set_Thunk_Entity                    (Id : E; V : E);\n    procedure Set_Treat_As_Volatile               (Id : E; V : B := True);\n    procedure Set_Underlying_Full_View            (Id : E; V : E);\n    procedure Set_Underlying_Record_View          (Id : E; V : E);\n@@ -7850,6 +7858,7 @@ package Einfo is\n    pragma Inline (Suppress_Style_Checks);\n    pragma Inline (Suppress_Value_Tracking_On_Call);\n    pragma Inline (Task_Body_Procedure);\n+   pragma Inline (Thunk_Entity);\n    pragma Inline (Treat_As_Volatile);\n    pragma Inline (Underlying_Full_View);\n    pragma Inline (Underlying_Record_View);\n@@ -8261,6 +8270,7 @@ package Einfo is\n    pragma Inline (Set_Suppress_Style_Checks);\n    pragma Inline (Set_Suppress_Value_Tracking_On_Call);\n    pragma Inline (Set_Task_Body_Procedure);\n+   pragma Inline (Set_Thunk_Entity);\n    pragma Inline (Set_Treat_As_Volatile);\n    pragma Inline (Set_Underlying_Full_View);\n    pragma Inline (Set_Underlying_Record_View);"}, {"sha": "f53c3e032cd2520e938cfe94959b0f8616bb5ec8", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -222,7 +222,7 @@ package Errout is\n    --      A second ^ may occur in the message, in which case it is replaced\n    --      by the decimal conversion of the Uint value in Error_Msg_Uint_2.\n \n-   --    Insertion character > (Right bracket, run time name)\n+   --    Insertion character > (Greater Than, run time name)\n    --      The character > is replaced by a string of the form (name) if\n    --      Targparm scanned out a Run_Time_Name (see package Targparm for\n    --      details). The name is enclosed in parentheses and output in mixed"}, {"sha": "a55a32ccd7b3b878abf86bfa8ffb51a1a1d1a415", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -1069,9 +1069,7 @@ package body Exp_Attr is\n \n                         begin\n                            Subp := Current_Scope;\n-                           while Ekind (Subp) = E_Loop\n-                             or else Ekind (Subp) = E_Block\n-                           loop\n+                           while Ekind_In (Subp, E_Loop, E_Block) loop\n                               Subp := Scope (Subp);\n                            end loop;\n \n@@ -1095,8 +1093,8 @@ package body Exp_Attr is\n                                 Unchecked_Convert_To (Typ,\n                                   Make_Attribute_Reference (Loc,\n                                     Attribute_Name => Name_Unrestricted_Access,\n-                                    Prefix =>\n-                                       New_Occurrence_Of (Formal, Loc))));\n+                                    Prefix         =>\n+                                      New_Occurrence_Of (Formal, Loc))));\n                               Analyze_And_Resolve (N);\n                            end if;\n                         end;"}, {"sha": "4b1845ae93092d37d68caf8a4b52d71202f887c7", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -10051,19 +10051,15 @@ package body Sem_Attr is\n          --  then this is only legal within a task or protected record.\n \n          when others =>\n-            if not Is_Entity_Name (P)\n-              or else not Is_Type (Entity (P))\n-            then\n+            if not Is_Entity_Name (P) or else not Is_Type (Entity (P)) then\n                Resolve (P);\n             end if;\n \n             --  If the attribute reference itself is a type name ('Base,\n             --  'Class) then this is only legal within a task or protected\n             --  record. What is this all about ???\n \n-            if Is_Entity_Name (N)\n-              and then Is_Type (Entity (N))\n-            then\n+            if Is_Entity_Name (N) and then Is_Type (Entity (N)) then\n                if Is_Concurrent_Type (Entity (N))\n                  and then In_Open_Scopes (Entity (P))\n                then"}, {"sha": "804f3b819971031a5a598c7c971be69f78a2012d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fad002d5a30da06c054b797c61e9798148dd64/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=59fad002d5a30da06c054b797c61e9798148dd64", "patch": "@@ -6859,13 +6859,13 @@ package body Sem_Res is\n          S   : Entity_Id;\n \n       begin\n-         if Ekind (Etype (R)) =  E_Allocator_Type\n-           or else Ekind (Etype (R)) = E_Access_Attribute_Type\n+         if Ekind_In (Etype (R), E_Allocator_Type,\n+                                 E_Access_Attribute_Type)\n          then\n             Acc := Designated_Type (Etype (R));\n \n-         elsif Ekind (Etype (L)) =  E_Allocator_Type\n-           or else Ekind (Etype (L)) = E_Access_Attribute_Type\n+         elsif Ekind_In (Etype (L), E_Allocator_Type,\n+                                    E_Access_Attribute_Type)\n          then\n             Acc := Designated_Type (Etype (L));\n          else"}]}