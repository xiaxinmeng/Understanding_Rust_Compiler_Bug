{"sha": "978ec4825c2e5cb0ec03d857ea038440d566ff42", "node_id": "C_kwDOANBUbNoAKDk3OGVjNDgyNWMyZTVjYjBlYzAzZDg1N2VhMDM4NDQwZDU2NmZmNDI", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-07-19T10:30:58Z"}, "committer": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-10-26T03:21:07Z"}, "message": "rs6000: cannot_force_const_mem for HIGH code rtx[PR106460]\n\nAs the issue in PR106460, a rtx 'high:DI (symbol_ref:DI (\"var_48\")' is tried\nto store into constant pool and ICE occur.  But actually, this rtx represents\npartial incomplete address and can not be put into a .rodata section.\n\nThis patch updates rs6000_cannot_force_const_mem to return true for rtx(s) with\nHIGH code, because these rtx(s) indicate part of address and are not ok for\nconstant pool.\n\nBelow are some examples:\n(high:DI (const:DI (plus:DI (symbol_ref:DI (\"xx\") (const_int 12 [0xc])))))\n(high:DI (symbol_ref:DI (\"var_1\")..)))\n\n\tPR target/106460\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_cannot_force_const_mem): Return true\n\tfor HIGH code rtx.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr106460.c: New test.", "tree": {"sha": "59772bbaf428a6674f12a45c33f503211b17972f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59772bbaf428a6674f12a45c33f503211b17972f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/978ec4825c2e5cb0ec03d857ea038440d566ff42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/978ec4825c2e5cb0ec03d857ea038440d566ff42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/978ec4825c2e5cb0ec03d857ea038440d566ff42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/978ec4825c2e5cb0ec03d857ea038440d566ff42/comments", "author": null, "committer": null, "parents": [{"sha": "0cd11d301013af50a3fae0694c909952e94e20d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd11d301013af50a3fae0694c909952e94e20d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd11d301013af50a3fae0694c909952e94e20d5"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "a85d7630b41d1734fac7ebf07677ddf086db4abc", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/978ec4825c2e5cb0ec03d857ea038440d566ff42/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/978ec4825c2e5cb0ec03d857ea038440d566ff42/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=978ec4825c2e5cb0ec03d857ea038440d566ff42", "patch": "@@ -9759,8 +9759,11 @@ rs6000_init_stack_protect_guard (void)\n static bool\n rs6000_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n {\n-  if (GET_CODE (x) == HIGH\n-      && GET_CODE (XEXP (x, 0)) == UNSPEC)\n+  /* If GET_CODE (x) is HIGH, the 'X' represets the high part of a symbol_ref.\n+     It can not be put into a constant pool.  e.g.\n+     (high:DI (unspec:DI [(symbol_ref/u:DI (\"*.LC0\")..)\n+     (high:DI (symbol_ref:DI (\"var\")..)).  */\n+  if (GET_CODE (x) == HIGH)\n     return true;\n \n   /* A TLS symbol in the TOC cannot contain a sum.  */"}, {"sha": "aae4b015bbaa176e4a7fac23bcad27922a89f3c6", "filename": "gcc/testsuite/gcc.target/powerpc/pr106460.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/978ec4825c2e5cb0ec03d857ea038440d566ff42/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106460.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/978ec4825c2e5cb0ec03d857ea038440d566ff42/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106460.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr106460.c?ref=978ec4825c2e5cb0ec03d857ea038440d566ff42", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O1 -mdejagnu-cpu=power10\" } */\n+\n+/* (high:DI (symbol_ref:DI (\"var_48\")..))) should not cause ICE. */\n+extern short var_48;\n+void\n+foo (double *r)\n+{\n+  if (var_48)\n+    *r = 1234.5678;\n+}\n+"}]}