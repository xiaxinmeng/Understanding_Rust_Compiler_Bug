{"sha": "45dbce1b85868aadf37df34a68120cc329730427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkYmNlMWI4NTg2OGFhZGYzN2RmMzRhNjgxMjBjYzMyOTczMDQyNw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-03-25T11:47:13Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-03-25T11:47:13Z"}, "message": "re PR target/4828 (can't install gcc for h8300-hms target)\n\n\tPR bootstrap/4828\n\tRevert:\n\t2011-03-24  Nathan Froyd  <froydnj@codesourcery.com>\n\n\t* function.c (instantiate_virtual_regs): Use FOR_EACH_BB and\n\tFOR_BB_INSNS_SAFE to iterate through insns.  Re-indent.\n\t(pass_instantiate_virtual_regs): Require PROP_cfglayout.\n\t* passes.c (init_optimization_passes): Move\n\tpass_instantiate_virtual_regs after pass_into_cfg_layout_mode.\n\nFrom-SVN: r171447", "tree": {"sha": "97ed60b2eeb9bb68da40515d6c201ad4f9b71a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ed60b2eeb9bb68da40515d6c201ad4f9b71a4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45dbce1b85868aadf37df34a68120cc329730427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dbce1b85868aadf37df34a68120cc329730427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45dbce1b85868aadf37df34a68120cc329730427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45dbce1b85868aadf37df34a68120cc329730427/comments", "author": null, "committer": null, "parents": [{"sha": "8d4c5ac696eadb3304f4ffb0bf7d204a5251573e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4c5ac696eadb3304f4ffb0bf7d204a5251573e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4c5ac696eadb3304f4ffb0bf7d204a5251573e"}], "stats": {"total": 73, "additions": 39, "deletions": 34}, "files": [{"sha": "78a7e01e1871ccb63f3146d7664a9030b53e1552", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dbce1b85868aadf37df34a68120cc329730427/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dbce1b85868aadf37df34a68120cc329730427/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45dbce1b85868aadf37df34a68120cc329730427", "patch": "@@ -1,3 +1,15 @@\n+2011-03-25  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR bootstrap/4828\n+\tRevert:\n+\t2011-03-24  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* function.c (instantiate_virtual_regs): Use FOR_EACH_BB and\n+\tFOR_BB_INSNS_SAFE to iterate through insns.  Re-indent.\n+\t(pass_instantiate_virtual_regs): Require PROP_cfglayout.\n+\t* passes.c (init_optimization_passes): Move\n+\tpass_instantiate_virtual_regs after pass_into_cfg_layout_mode.\n+\n 2011-03-25  Kai Tietz  <ktietz@redhat.com>\n \n \t* c-typeck.c (comptypes_internal): Replace target"}, {"sha": "a1ea482acad636a6dbc4ab96e565d33772be141f", "filename": "gcc/function.c", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dbce1b85868aadf37df34a68120cc329730427/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dbce1b85868aadf37df34a68120cc329730427/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=45dbce1b85868aadf37df34a68120cc329730427", "patch": "@@ -1883,7 +1883,7 @@ instantiate_decls (tree fndecl)\n static unsigned int\n instantiate_virtual_regs (void)\n {\n-  basic_block bb;\n+  rtx insn;\n \n   /* Compute the offsets to use for this function.  */\n   in_arg_offset = FIRST_PARM_OFFSET (current_function_decl);\n@@ -1901,40 +1901,33 @@ instantiate_virtual_regs (void)\n \n   /* Scan through all the insns, instantiating every virtual register still\n      present.  */\n-  FOR_EACH_BB (bb)\n-    {\n-      rtx insn, curr;\n-\n-      FOR_BB_INSNS_SAFE (bb, insn, curr)\n-\t{\n-\t  if (INSN_P (insn))\n-\t    {\n-\t      /* These patterns in the instruction stream can never be recognized.\n-\t\t Fortunately, they shouldn't contain virtual registers either.  */\n-\t      if (GET_CODE (PATTERN (insn)) == USE\n-\t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n-\t\tcontinue;\n-\t      else if (DEBUG_INSN_P (insn))\n-\t\tfor_each_rtx (&INSN_VAR_LOCATION (insn),\n-\t\t\t      instantiate_virtual_regs_in_rtx, NULL);\n-\t      else\n-\t\tinstantiate_virtual_regs_in_insn (insn);\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn))\n+      {\n+\t/* These patterns in the instruction stream can never be recognized.\n+\t   Fortunately, they shouldn't contain virtual registers either.  */\n+\tif (GET_CODE (PATTERN (insn)) == USE\n+\t    || GET_CODE (PATTERN (insn)) == CLOBBER\n+\t    || GET_CODE (PATTERN (insn)) == ADDR_VEC\n+\t    || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n+\t    || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n+\t  continue;\n+\telse if (DEBUG_INSN_P (insn))\n+\t  for_each_rtx (&INSN_VAR_LOCATION (insn),\n+\t\t\tinstantiate_virtual_regs_in_rtx, NULL);\n+\telse\n+\t  instantiate_virtual_regs_in_insn (insn);\n \n-\t      if (INSN_DELETED_P (insn))\n-\t\tcontinue;\n+\tif (INSN_DELETED_P (insn))\n+\t  continue;\n \n-\t      for_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);\n+\tfor_each_rtx (&REG_NOTES (insn), instantiate_virtual_regs_in_rtx, NULL);\n \n-\t      /* Instantiate any virtual registers in CALL_INSN_FUNCTION_USAGE.  */\n-\t      if (CALL_P (insn))\n-\t\tfor_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),\n-\t\t\t      instantiate_virtual_regs_in_rtx, NULL);\n-\t    }\n-\t}\n-    }\n+\t/* Instantiate any virtual registers in CALL_INSN_FUNCTION_USAGE.  */\n+\tif (CALL_P (insn))\n+\t  for_each_rtx (&CALL_INSN_FUNCTION_USAGE (insn),\n+\t\t\tinstantiate_virtual_regs_in_rtx, NULL);\n+      }\n \n   /* Instantiate the virtual registers in the DECLs for debugging purposes.  */\n   instantiate_decls (current_function_decl);\n@@ -1970,7 +1963,7 @@ struct rtl_opt_pass pass_instantiate_virtual_regs =\n   NULL,                                 /* next */\n   0,                                    /* static_pass_number */\n   TV_NONE,                              /* tv_id */\n-  PROP_cfglayout,                       /* properties_required */\n+  0,                                    /* properties_required */\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */"}, {"sha": "42a323981f778c98272ec6680414cfe2814003d6", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45dbce1b85868aadf37df34a68120cc329730427/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45dbce1b85868aadf37df34a68120cc329730427/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=45dbce1b85868aadf37df34a68120cc329730427", "patch": "@@ -956,8 +956,8 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_rtl_eh);\n       NEXT_PASS (pass_initial_value_sets);\n       NEXT_PASS (pass_unshare_all_rtl);\n-      NEXT_PASS (pass_into_cfg_layout_mode);\n       NEXT_PASS (pass_instantiate_virtual_regs);\n+      NEXT_PASS (pass_into_cfg_layout_mode);\n       NEXT_PASS (pass_jump2);\n       NEXT_PASS (pass_lower_subreg);\n       NEXT_PASS (pass_df_initialize_opt);"}]}