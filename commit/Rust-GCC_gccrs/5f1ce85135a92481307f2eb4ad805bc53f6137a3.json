{"sha": "5f1ce85135a92481307f2eb4ad805bc53f6137a3", "node_id": "C_kwDOANBUbNoAKDVmMWNlODUxMzVhOTI0ODEzMDdmMmViNGFkODA1YmM1M2Y2MTM3YTM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-17T13:50:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-17T19:50:31Z"}, "message": "libstdc++: Add attributes to <system_error> and related\n\nAdd the const attribute to std::future_category() and\nstd::iostream_category(), to match the existing attributes on\nstd::generic_category() and std::system_category().\n\nAlso add [[nodiscard]] to those functions and to the comparison\noperators for std::error_code and std::error_condition, and to\nstd::make_error_code and std::make_error_condition overloads.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ios_base.h (io_category): Add const and nodiscard\n\tattributes.\n\t(make_error_code, make_error_condition): Add nodiscard.\n\t* include/std/future (future_category): Add const and nodiscard.\n\t(make_error_code, make_error_condition): Add nodiscard.\n\t* include/std/system_error (generic_category system_category):\n\tAdd nodiscard. Replace _GLIBCXX_CONST with C++11 attribute.\n\t(error_code::value, error_code::category, error_code::operator bool)\n\t(error_condition::value, error_condition::category)\n\t(error_condition::operator bool, make_error_code)\n\t(make_error_condition, operator==, operator!=, operator<=>): Add\n\tnodiscard.", "tree": {"sha": "c070bc7f3a74a72ca6f4f423f4e61643bbdd33c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c070bc7f3a74a72ca6f4f423f4e61643bbdd33c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f1ce85135a92481307f2eb4ad805bc53f6137a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1ce85135a92481307f2eb4ad805bc53f6137a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1ce85135a92481307f2eb4ad805bc53f6137a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1ce85135a92481307f2eb4ad805bc53f6137a3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9852156dd2fedec130f6d8eb669579ef6237946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9852156dd2fedec130f6d8eb669579ef6237946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9852156dd2fedec130f6d8eb669579ef6237946"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "e34097171a5d61d8d2b39edd830ffa4bfe311826", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1ce85135a92481307f2eb4ad805bc53f6137a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1ce85135a92481307f2eb4ad805bc53f6137a3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=5f1ce85135a92481307f2eb4ad805bc53f6137a3", "patch": "@@ -205,12 +205,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template <> struct is_error_code_enum<io_errc> : public true_type { };\n \n-  const error_category& iostream_category() noexcept;\n+  [[__nodiscard__, __gnu__::__const__]]\n+  const error_category&\n+  iostream_category() noexcept;\n \n+  [[__nodiscard__]]\n   inline error_code\n   make_error_code(io_errc __e) noexcept\n   { return error_code(static_cast<int>(__e), iostream_category()); }\n \n+  [[__nodiscard__]]\n   inline error_condition\n   make_error_condition(io_errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), iostream_category()); }"}, {"sha": "a925d03d19ccf65bcdc8a33db7fecd3f52c8e68b", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1ce85135a92481307f2eb4ad805bc53f6137a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1ce85135a92481307f2eb4ad805bc53f6137a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=5f1ce85135a92481307f2eb4ad805bc53f6137a3", "patch": "@@ -82,15 +82,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_error_code_enum<future_errc> : public true_type { };\n \n   /// Points to a statically-allocated object derived from error_category.\n+  [[__nodiscard__, __gnu__::__const__]]\n   const error_category&\n   future_category() noexcept;\n \n   /// Overload of make_error_code for `future_errc`.\n+  [[__nodiscard__]]\n   inline error_code\n   make_error_code(future_errc __errc) noexcept\n   { return error_code(static_cast<int>(__errc), future_category()); }\n \n   /// Overload of make_error_condition for `future_errc`.\n+  [[__nodiscard__]]\n   inline error_condition\n   make_error_condition(future_errc __errc) noexcept\n   { return error_condition(static_cast<int>(__errc), future_category()); }"}, {"sha": "87cf720f6e396b1ced58021da4532ec75090eae1", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f1ce85135a92481307f2eb4ad805bc53f6137a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f1ce85135a92481307f2eb4ad805bc53f6137a3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=5f1ce85135a92481307f2eb4ad805bc53f6137a3", "patch": "@@ -153,12 +153,14 @@ _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(_V2)\n     equivalent(const error_code& __code, int __i) const noexcept;\n \n     /// An error_category only compares equal to itself.\n+    [[__nodiscard__]]\n     bool\n     operator==(const error_category& __other) const noexcept\n     { return this == &__other; }\n \n     /// Ordered comparison that defines a total order for error categories.\n #if __cpp_lib_three_way_comparison\n+    [[nodiscard]]\n     strong_ordering\n     operator<=>(const error_category& __rhs) const noexcept\n     { return std::compare_three_way()(this, &__rhs); }\n@@ -176,10 +178,14 @@ _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(_V2)\n   // DR 890.\n \n   /// Error category for `errno` error codes.\n-  _GLIBCXX_CONST const error_category& generic_category() noexcept;\n+  [[__nodiscard__, __gnu__::__const__]]\n+  const error_category&\n+  generic_category() noexcept;\n \n   /// Error category for other error codes defined by the OS.\n-  _GLIBCXX_CONST const error_category& system_category() noexcept;\n+  [[__nodiscard__, __gnu__::__const__]]\n+  const error_category&\n+  system_category() noexcept;\n \n   /// @}\n \n@@ -241,10 +247,12 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       { return *this = make_error_code(__e); }\n \n     /// The error value.\n+    [[__nodiscard__]]\n     int\n     value() const noexcept { return _M_value; }\n \n     /// The error category that this error belongs to.\n+    [[__nodiscard__]]\n     const error_category&\n     category() const noexcept { return *_M_cat; }\n \n@@ -259,6 +267,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     { return category().message(value()); }\n \n     /// Test whether `value()` is non-zero.\n+    [[__nodiscard__]]\n     explicit operator bool() const noexcept\n     { return _M_value != 0; }\n \n@@ -278,6 +287,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @relates error_code\n    * @since C++11\n    */\n+  [[__nodiscard__]]\n   inline error_code\n   make_error_code(errc __e) noexcept\n   { return error_code(static_cast<int>(__e), generic_category()); }\n@@ -291,6 +301,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @since C++11\n    */\n #if __cpp_lib_three_way_comparison\n+  [[nodiscard]]\n   inline strong_ordering\n   operator<=>(const error_code& __lhs, const error_code& __rhs) noexcept\n   {\n@@ -371,10 +382,12 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     // C++11 19.5.3.4 observers\n \n     /// The error value.\n+    [[__nodiscard__]]\n     int\n     value() const noexcept { return _M_value; }\n \n     /// The error category that this error belongs to.\n+    [[__nodiscard__]]\n     const error_category&\n     category() const noexcept { return *_M_cat; }\n \n@@ -385,6 +398,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     { return category().message(value()); }\n \n     /// Test whether `value()` is non-zero.\n+    [[__nodiscard__]]\n     explicit operator bool() const noexcept\n     { return _M_value != 0; }\n \n@@ -404,6 +418,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @relates error_condition\n    * @since C++11\n    */\n+  [[__nodiscard__]]\n   inline error_condition\n   make_error_condition(errc __e) noexcept\n   { return error_condition(static_cast<int>(__e), generic_category()); }\n@@ -417,6 +432,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @relates error_condition\n    * @since C++11\n    */\n+  [[__nodiscard__]]\n   inline bool\n   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n   {\n@@ -432,6 +448,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @relates error_condition\n    * @since C++11\n    */\n+  [[__nodiscard__]]\n   inline bool\n   operator==(const error_code& __lhs, const error_condition& __rhs) noexcept\n   {\n@@ -446,6 +463,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @relates error_condition\n    * @since C++11\n    */\n+  [[__nodiscard__]]\n   inline bool\n   operator==(const error_condition& __lhs,\n \t     const error_condition& __rhs) noexcept\n@@ -463,6 +481,7 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    * @since C++11\n    */\n #if __cpp_lib_three_way_comparison\n+  [[nodiscard]]\n   inline strong_ordering\n   operator<=>(const error_condition& __lhs,\n \t      const error_condition& __rhs) noexcept"}]}