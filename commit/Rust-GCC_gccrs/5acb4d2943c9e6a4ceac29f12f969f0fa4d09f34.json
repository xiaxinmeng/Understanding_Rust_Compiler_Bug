{"sha": "5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjYjRkMjk0M2M5ZTZhNGNlYWMyOWYxMmY5NjlmMGZhNGQwOWYzNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:45:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:45:54Z"}, "message": "[multiple changes]\n\n2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sigtramp.h: Fix minor inaccuracy.\n\n2014-02-25  Ben Brosgol  <brosgol@adacore.com>\n\n\t* gnat_ugn.texi: Added description of kill command.\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi (Address_Clauses): Add a section discussing the\n\tproblem of address clauses causing unexpected initialization,\n\tincluding the effect of Initialize_Scalars.\n\nFrom-SVN: r208144", "tree": {"sha": "01a0df925ef00a4b2b3cf09639bcea155292d0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01a0df925ef00a4b2b3cf09639bcea155292d0c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/comments", "author": null, "committer": null, "parents": [{"sha": "80c2c20282aae97e232df885461b828d5d6573b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c2c20282aae97e232df885461b828d5d6573b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c2c20282aae97e232df885461b828d5d6573b0"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "2cedac3d86db6d984031d57c6327ef4043139cba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "patch": "@@ -1,3 +1,17 @@\n+2014-02-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sigtramp.h: Fix minor inaccuracy.\n+\n+2014-02-25  Ben Brosgol  <brosgol@adacore.com>\n+\n+\t* gnat_ugn.texi: Added description of kill command.\n+\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi (Address_Clauses): Add a section discussing the\n+\tproblem of address clauses causing unexpected initialization,\n+\tincluding the effect of Initialize_Scalars.\n+\n 2014-02-25  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.adb: Various changes for better msgs for anonmous access"}, {"sha": "a3f1217b9814b9a0ac85746b73fa3075ba75563d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "patch": "@@ -6684,6 +6684,11 @@ is expected when a value of this type is read from the stream. Note that the\n value written always includes the bounds, even for Unbounded_String'Write,\n since Unbounded_String is not an array type.\n \n+Note that the @code{Stream_Convert} pragma is not effective in the case of\n+a derived type of a non-limited tagged type. If such a type is specified then\n+the pragma is silently ignored, and the default implementation of the stream\n+attributes is used instead.\n+\n @node Pragma Style_Checks\n @unnumberedsec Pragma Style_Checks\n @findex Style_Checks\n@@ -15557,6 +15562,103 @@ in the above example) in this case. This means that the overlay\n works \"as expected\", in that a modification to one of the variables\n will affect the value of the other.\n \n+Note that when address clause overlays are used in this way, there is an\n+issue of unintentional initialization, as shown by this example:\n+\n+@smallexample @c ada\n+package Overwrite_Record is\n+   type R is record\n+      A : Character := 'C';\n+      B : Character := 'A';\n+   end record;\n+   X : Short_Integer := 3;\n+   Y : R;\n+   for Y'Address use X'Address;\n+       |\n+>>> warning: default initialization of \"Y\" may\n+    modify \"X\", use pragma Import for \"Y\" to\n+    suppress initialization (RM B.1(24))\n+\n+end Overwrite_Record;\n+@end smallexample\n+\n+@noindent\n+Here the default initialization of @code{Y} will clobber the value\n+of @code{X}, which justifies the warning. The warning notes that\n+this effect can be eliminated by adding a @code{pragma Import}\n+which suppresses the initialization:\n+\n+@smallexample @c ada\n+package Overwrite_Record is\n+   type R is record\n+      A : Character := 'C';\n+      B : Character := 'A';\n+   end record;\n+   X : Short_Integer := 3;\n+   Y : R;\n+   for Y'Address use X'Address;\n+   pragma Import (Ada, Y);\n+end Overwrite_Record;\n+@end smallexample\n+\n+@noindent\n+Note that the use of @code{pragma Initialize_Scalars} may cause variables to\n+be initialized when they would not otherwise have been in the absence\n+of the use of this pragma. This may cause an overlay to have this\n+unintended clobbering effect. The compiler avoids this for scalar\n+types, but not for composite objects (where in general the effect\n+of @code{Initialize_Scalars} is part of the initialization routine\n+for the composite object:\n+\n+@smallexample @c ada\n+pragma Initialize_Scalars;\n+with Ada.Text_IO;  use Ada.Text_IO;\n+procedure Overwrite_Array is\n+   type Arr is array (1 .. 5) of Integer;\n+   X : Arr := (others => 1);\n+   A : Arr;\n+   for A'Address use X'Address;\n+       |\n+>>> warning: default initialization of \"A\" may\n+    modify \"X\", use pragma Import for \"A\" to\n+    suppress initialization (RM B.1(24))\n+\n+begin\n+   if X /= Arr'(others => 1) then\n+      Put_Line (\"X was clobbered\");\n+   else\n+      Put_Line (\"X was not clobbered\");\n+   end if;\n+end Overwrite_Array;\n+@end smallexample\n+\n+@noindent\n+The above program generates the warning as shown, and at execution\n+time, prints @code{X was clobbered}. If the @code{pragma Import} is\n+added as suggested:\n+\n+@smallexample @c ada\n+pragma Initialize_Scalars;\n+with Ada.Text_IO;  use Ada.Text_IO;\n+procedure Overwrite_Array is\n+   type Arr is array (1 .. 5) of Integer;\n+   X : Arr := (others => 1);\n+   A : Arr;\n+   for A'Address use X'Address;\n+   pragma Import (Ada, A);\n+begin\n+   if X /= Arr'(others => 1) then\n+      Put_Line (\"X was clobbered\");\n+   else\n+      Put_Line (\"X was not clobbered\");\n+   end if;\n+end Overwrite_Array;\n+@end smallexample\n+\n+@noindent\n+then the program compiles without the waraning and when run will generate\n+the output @code{X was not clobbered}.\n+\n @node Effect of Convention on Representation\n @section Effect of Convention on Representation\n @cindex Convention, effect on representation"}, {"sha": "b484665eab495f6286e3b3cb425b9dc4c757281b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "patch": "@@ -21299,6 +21299,20 @@ examined to the frame of its callee (the reverse of the previous command),\n Inspect the frame with the given number. The value 0 denotes the frame\n of the current breakpoint, that is to say the top of the call stack.\n \n+@item kill\n+Kills the child process in which the program is running under GDB.\n+This may be useful for several purposes:\n+@itemize @bullet\n+@item\n+It allows you to recompile and relink your program, since on many systems\n+you cannot regenerate an executable file while it is running in a process.\n+@item\n+You can run your program outside the debugger, on systems that do not\n+permit executing a program outside GDB while breakpoints are set\n+within GDB.\n+@item\n+It allows you to debug a core dump rather than a running process.\n+@end itemize\n @end table\n \n @noindent"}, {"sha": "cf5f4707ee340c679aed62f1dc286d46720499d5", "filename": "gcc/ada/sigtramp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2Fsigtramp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34/gcc%2Fada%2Fsigtramp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsigtramp.h?ref=5acb4d2943c9e6a4ceac29f12f969f0fa4d09f34", "patch": "@@ -66,7 +66,7 @@ extern \"C\" {\n      The unwinder will unwind frames 0, 1 and 2 as usual. But the CFI of frame\n      3 is set up as if the caller of frame 3 was frame 6 so, when frame 3 is\n      unwound, the unwinder ends up in frame 6 directly. It's possible to do so\n-     since the kernel has saved the context of frame 3 and passed it on to\n+     since the kernel has saved the context of frame 6 and passed it on to\n      __gnat_sigtramp.  */\n \n #ifdef __cplusplus"}]}