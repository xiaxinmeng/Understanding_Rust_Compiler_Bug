{"sha": "284943b0226b75d81e80cc2713cf0e0044a2d21f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0OTQzYjAyMjZiNzVkODFlODBjYzI3MTNjZjBlMDA0NGEyZDIxZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-18T18:14:06Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-06-18T18:14:06Z"}, "message": "re PR fortran/53526 ([Coarray] (lib) Properly handle MOVE_ALLOC for coarrays)\n\n2012-06-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53526\n        * check.c (gfc_check_move_alloc): Reject coindexed actual\n        * arguments\n        and those with different corank.\n\n2012-06-18  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/53526\n        * gfortran.dg/coarray_27.f90: New.\n\nFrom-SVN: r188747", "tree": {"sha": "70a2210b90100fcc6896589b6e07b93e1d3d663a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70a2210b90100fcc6896589b6e07b93e1d3d663a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/284943b0226b75d81e80cc2713cf0e0044a2d21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284943b0226b75d81e80cc2713cf0e0044a2d21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284943b0226b75d81e80cc2713cf0e0044a2d21f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284943b0226b75d81e80cc2713cf0e0044a2d21f/comments", "author": null, "committer": null, "parents": [{"sha": "469523083f94ac0729753a9bcdb9fffa038ee02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469523083f94ac0729753a9bcdb9fffa038ee02a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469523083f94ac0729753a9bcdb9fffa038ee02a"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "6469d676d394d363523b569e023e52a6ab8e6135", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=284943b0226b75d81e80cc2713cf0e0044a2d21f", "patch": "@@ -1,3 +1,9 @@\n+2012-06-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53526\n+\t* check.c (gfc_check_move_alloc): Reject coindexed actual arguments\n+\tand those with different corank.\n+\n 2012-06-17  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53691"}, {"sha": "7d505d5e9d9d478b12983efc91ea65cbbaa59a3a", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=284943b0226b75d81e80cc2713cf0e0044a2d21f", "patch": "@@ -1,5 +1,6 @@\n /* Check functions\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n@@ -2728,17 +2729,29 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n     return FAILURE;\n   if (allocatable_check (from, 0) == FAILURE)\n     return FAILURE;\n+  if (gfc_is_coindexed (from))\n+    {\n+      gfc_error (\"The FROM argument to MOVE_ALLOC at %L shall not be \"\n+\t\t \"coindexed\", &from->where);\n+      return FAILURE;\n+    }\n \n   if (variable_check (to, 1, false) == FAILURE)\n     return FAILURE;\n   if (allocatable_check (to, 1) == FAILURE)\n     return FAILURE;\n+  if (gfc_is_coindexed (to))\n+    {\n+      gfc_error (\"The TO argument to MOVE_ALLOC at %L shall not be \"\n+\t\t \"coindexed\", &to->where);\n+      return FAILURE;\n+    }\n \n   if (from->ts.type == BT_CLASS && to->ts.type == BT_DERIVED)\n     {\n       gfc_error (\"The TO arguments in MOVE_ALLOC at %L must be \"\n \t\t \"polymorphic if FROM is polymorphic\",\n-\t\t &from->where);\n+\t\t &to->where);\n       return FAILURE;\n     }\n \n@@ -2747,20 +2760,26 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n \n   if (to->rank != from->rank)\n     {\n-      gfc_error (\"the '%s' and '%s' arguments of '%s' intrinsic at %L must \"\n-\t\t \"have the same rank %d/%d\", gfc_current_intrinsic_arg[0]->name,\n-\t\t gfc_current_intrinsic_arg[1]->name, gfc_current_intrinsic,\n-\t\t &to->where,  from->rank, to->rank);\n+      gfc_error (\"The FROM and TO arguments of the MOVE_ALLOC intrinsic at %L \"\n+\t\t \"must have the same rank %d/%d\", &to->where,  from->rank,\n+\t\t to->rank);\n+      return FAILURE;\n+    }\n+\n+  /* IR F08/0040; cf. 12-006A.  */\n+  if (gfc_get_corank (to) != gfc_get_corank (from))\n+    {\n+      gfc_error (\"The FROM and TO arguments of the MOVE_ALLOC intrinsic at %L \"\n+\t\t \"must have the same corank %d/%d\", &to->where,\n+\t\t gfc_get_corank (from), gfc_get_corank (to));\n       return FAILURE;\n     }\n \n   if (to->ts.kind != from->ts.kind)\n     {\n-      gfc_error (\"the '%s' and '%s' arguments of '%s' intrinsic at %L must \"\n-\t\t \"be of the same kind %d/%d\",\n-\t\t gfc_current_intrinsic_arg[0]->name,\n-\t\t gfc_current_intrinsic_arg[1]->name, gfc_current_intrinsic,\n-\t\t &to->where, from->ts.kind, to->ts.kind);\n+      gfc_error (\"The FROM and TO arguments of the MOVE_ALLOC intrinsic at %L\"\n+\t\t \" must be of the same kind %d/%d\", &to->where, from->ts.kind,\n+\t\t to->ts.kind);\n       return FAILURE;\n     }\n "}, {"sha": "c1b129ab51b6495afd76d8b63e90afc87376989e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=284943b0226b75d81e80cc2713cf0e0044a2d21f", "patch": "@@ -1,7 +1,12 @@\n+2012-06-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/53526\n+\t* gfortran.dg/coarray_27.f90: New.\n+\n 2012-06-18  Joey Ye <Joey.Ye@arm.com>\n-            Greta Yorsh  <Greta.Yorsh@arm.com>\n+\t    Greta Yorsh  <Greta.Yorsh@arm.com>\n \n-        * gcc.target/arm/epilog-1.c: New test.\n+\t* gcc.target/arm/epilog-1.c: New test.\n \n 2012-06-18  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "de9cfad8df59a8c3ee2e26828af6c6c7dd372ccf", "filename": "gcc/testsuite/gfortran.dg/coarray_27.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284943b0226b75d81e80cc2713cf0e0044a2d21f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_27.f90?ref=284943b0226b75d81e80cc2713cf0e0044a2d21f", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Coarray/coindex checks for MOVE_ALLOC\n+!\n+integer, allocatable :: a(:), b(:)[:,:], c(:)[:,:]\n+\n+type t\n+  integer, allocatable :: d(:)\n+end type t\n+type(t) :: x[*]\n+class(t), allocatable :: y[:], z[:], u\n+\n+\n+call move_alloc (A, b) ! { dg-error \"must have the same corank\" }\n+call move_alloc (c, A) ! { dg-error \"must have the same corank\" }\n+call move_alloc (b, c) ! OK - same corank\n+\n+call move_alloc (u, y) ! { dg-error \"must have the same corank\" }\n+call move_alloc (z, u) ! { dg-error \"must have the same corank\" }\n+call move_alloc (y, z) ! OK - same corank\n+\n+\n+call move_alloc (x%d, a)  ! OK\n+call move_alloc (a, x%d)  ! OK\n+call move_alloc (x[1]%d, a) ! { dg-error \"The FROM argument to MOVE_ALLOC at .1. shall not be coindexed\" }\n+call move_alloc (a, x[1]%d) ! { dg-error \"The TO argument to MOVE_ALLOC at .1. shall not be coindexed\" }\n+\n+call move_alloc (y%d, a)  ! OK\n+call move_alloc (a, y%d)  ! OK\n+call move_alloc (y[1]%d, a) ! { dg-error \"The FROM argument to MOVE_ALLOC at .1. shall not be coindexed\" }\n+call move_alloc (a, y[1]%d) ! { dg-error \"The TO argument to MOVE_ALLOC at .1. shall not be coindexed\" }\n+\n+end"}]}