{"sha": "938d968ed373057812cd43a9b420399fb65f6c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM4ZDk2OGVkMzczMDU3ODEyY2Q0M2E5YjQyMDM5OWZiNjVmNmMwYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-22T23:15:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-22T23:15:30Z"}, "message": "alias.c: Fix comment formatting.\n\n\t* alias.c: Fix comment formatting.\n\t* c-common.c: Likewise.\n\t* c-decl.c: Likewise.\n\t* c-opts.c: Likewise.\n\t* combine.c: Likewise.\n\t* cpplib.c: Likewise.\n\t* diagnostic.c: Likewise.\n\t* dojump.c: Likewise.\n\t* final.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gcc.c: Likewise.\n\t* gcse.c: Likewise.\n\t* ggc-page.c: Likewise.\n\t* jump.c: Likewise.\n\t* loop.c: Likewise.\n\t* mips-tfile.c: Likewise.\n\t* recog.c: Likewise.\n\t* regclass.c: Likewise.\n\t* regmove.c: Likewise.\n\t* tree.c: Likewise.\n\t* tree.h: Likewise.\n\nFrom-SVN: r69689", "tree": {"sha": "218203f16ff3e11b33a888e58c0921f40c76b2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/218203f16ff3e11b33a888e58c0921f40c76b2e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/938d968ed373057812cd43a9b420399fb65f6c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938d968ed373057812cd43a9b420399fb65f6c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938d968ed373057812cd43a9b420399fb65f6c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938d968ed373057812cd43a9b420399fb65f6c0b/comments", "author": null, "committer": null, "parents": [{"sha": "b3147029a5847526b07b9d4823e3beec3c315402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3147029a5847526b07b9d4823e3beec3c315402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3147029a5847526b07b9d4823e3beec3c315402"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "15ca3e520b0497f53d2e1c7ff85ba7cf768353ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -1,3 +1,27 @@\n+2003-07-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* alias.c: Fix comment formatting.\n+\t* c-common.c: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* combine.c: Likewise.\n+\t* cpplib.c: Likewise.\n+\t* diagnostic.c: Likewise.\n+\t* dojump.c: Likewise.\n+\t* final.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gcc.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* ggc-page.c: Likewise.\n+\t* jump.c: Likewise.\n+\t* loop.c: Likewise.\n+\t* mips-tfile.c: Likewise.\n+\t* recog.c: Likewise.\n+\t* regclass.c: Likewise.\n+\t* regmove.c: Likewise.\n+\t* tree.c: Likewise.\n+\t* tree.h: Likewise.\n+\n 2003-07-22  Per Bothner  <pbothner@apple.com>\n \n \t* line-map.c (add_line_map):  Handle invalid LEAVE request."}, {"sha": "32531365882b723cc9640055d6136695e427c431", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -1326,7 +1326,7 @@ find_base_term (rtx x)\n       x = XEXP (x, 0);\n       if (GET_CODE (x) != PLUS && GET_CODE (x) != MINUS)\n \treturn 0;\n-      /* fall through */\n+      /* Fall through.  */\n     case LO_SUM:\n     case PLUS:\n     case MINUS:"}, {"sha": "b33856f5be1f352e39186ca82e972f033ab62623", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -2649,7 +2649,7 @@ c_common_truthvalue_conversion (tree expr)\n       if (TREE_CODE (TREE_TYPE (expr)) == REFERENCE_TYPE\n \t  || TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == REFERENCE_TYPE)\n \tbreak;\n-      /* fall through...  */\n+      /* Fall through....  */\n     case NOP_EXPR:\n       /* If this is widening the argument, we can ignore it.  */\n       if (TYPE_PRECISION (TREE_TYPE (expr))\n@@ -2668,7 +2668,7 @@ c_common_truthvalue_conversion (tree expr)\n \t be false.  */\n       if (HONOR_INFINITIES (TYPE_MODE (TREE_TYPE (TREE_OPERAND (expr, 0)))))\n \tbreak;\n-      /* fall through...  */\n+      /* Fall through....  */\n     case BIT_XOR_EXPR:\n       /* This and MINUS_EXPR can be changed into a comparison of the\n \t two objects.  */"}, {"sha": "cb032eaff55ae1f562f8c1cdf7db13a3ed6e07aa", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -5164,11 +5164,11 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n           {\n             field_array[len++] = x;\n           \n-            /* if there is anonymous struct or union break out of the loop */\n+            /* If there is anonymous struct or union, break out of the loop.  */\n             if (DECL_NAME (x) == NULL)\n               break;\n           }\n-        /* found no anonymous struct/union add the TYPE_LANG_SPECIFIC. */\n+        /* Found no anonymous struct/union.  Add the TYPE_LANG_SPECIFIC.  */\n         if (x == NULL)\n           {\n             TYPE_LANG_SPECIFIC (t) = space;"}, {"sha": "a6dd9f0a5c84196c801f307ec9eff57f627f5e4e", "filename": "gcc/c-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -717,7 +717,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_ffreestanding:\n       value = !value;\n-      /* Fall through...  */\n+      /* Fall through....  */\n     case OPT_fhosted:\n       flag_hosted = value;\n       flag_no_builtin = !value;\n@@ -966,7 +966,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \t is not overridden.  */\n     case OPT_pedantic_errors:\n       cpp_opts->pedantic_errors = 1;\n-      /* fall through */\n+      /* Fall through.  */\n     case OPT_pedantic:\n       cpp_opts->pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;"}, {"sha": "de7ace43a2b1ec87f4570463b9ff112a1b3a9ab0", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -3057,7 +3057,7 @@ find_split_point (rtx *loc, rtx insn)\n \t  break;\n \n \tcase NE:\n-\t  /* if STORE_FLAG_VALUE is -1, this is (NE X 0) and only one bit of X\n+\t  /* If STORE_FLAG_VALUE is -1, this is (NE X 0) and only one bit of X\n \t     is known to be on, this can be converted into a NEG of a shift.  */\n \t  if (STORE_FLAG_VALUE == -1 && XEXP (SET_SRC (x), 1) == const0_rtx\n \t      && GET_MODE (SET_SRC (x)) == GET_MODE (XEXP (SET_SRC (x), 0))"}, {"sha": "94fb57aeaea38745e726c1285877ab0fba48c592", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -556,7 +556,7 @@ undefine_macros (cpp_reader *pfile, cpp_hashnode *h,\n       if (CPP_OPTION (pfile, warn_unused_macros))\n         _cpp_warn_if_unused_macro (pfile, h, NULL);\n \n-      /* and fall through...  */\n+      /* And fall through....  */\n     case NT_ASSERTION:\n       _cpp_free_definition (h);\n       break;"}, {"sha": "cae8046d8e9dfa0c09b7a4ba77cbcb06e56be86f", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -833,7 +833,7 @@ diagnostic_count_diagnostic (diagnostic_context *context,\n       if (context->internal_error)\n \t(*context->internal_error) (diagnostic->message.format_spec,\n \t\t\t\t    diagnostic->message.args_ptr);\n-      /* fall through */\n+      /* Fall through.  */\n \n     case DK_FATAL: case DK_SORRY:\n     case DK_ANACHRONISM: case DK_NOTE:\n@@ -857,7 +857,7 @@ diagnostic_count_diagnostic (diagnostic_context *context,\n           context->warnings_are_errors_message = false;\n         }\n \n-      /* and fall through */\n+      /* And fall through.  */\n     case DK_ERROR:\n       ++diagnostic_kind_count (context, DK_ERROR);\n       break;"}, {"sha": "c213cd0e967eb23c13537a90ea449211b9ecdc7d", "filename": "gcc/dojump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -551,7 +551,7 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n             }\n         }\n     }\n-      /* fall through and generate the normal code.  */\n+      /* Fall through and generate the normal code.  */\n \n     default:\n     normal:"}, {"sha": "a89520ba14140709cef0d3283308ff81250074db", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -1570,7 +1570,7 @@ final (rtx first, FILE *file, int optimize, int prescan)\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n-      if (INSN_UID (insn) > max_uid)       /* find largest UID */\n+      if (INSN_UID (insn) > max_uid)       /* Find largest UID.  */\n \tmax_uid = INSN_UID (insn);\n       if (GET_CODE (insn) == NOTE && NOTE_LINE_NUMBER (insn) > 0)\n \tline_note_exists[NOTE_LINE_NUMBER (insn)] = 1;"}, {"sha": "fd9cb3d5cfb59a1a32cbad14c5a697fcf3fa8232", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -712,7 +712,7 @@ div_and_round_double (enum tree_code code, int uns,\n   decode (quo, lquo, hquo);\n \n  finish_up:\n-  /* if result is negative, make it so.  */\n+  /* If result is negative, make it so.  */\n   if (quo_neg)\n     neg_double (*lquo, *hquo, lquo, hquo);\n \n@@ -2209,7 +2209,7 @@ eval_subst (tree arg, tree old0, tree new0, tree old1, tree new1)\n \tdefault:\n \t  break;\n \t}\n-      /* fall through - ??? */\n+      /* Fall through - ???  */\n \n     case '<':\n       {"}, {"sha": "c04fbffc8dd6ffc0fea1e19c7cdd4cb11e31e13e", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -5172,7 +5172,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t/* Backslash: treat next character as ordinary.  */\n \tc = *p++;\n \n-\t/* fall through */\n+\t/* Fall through.  */\n       default:\n \t/* Ordinary character: put it into the current argument.  */\n \tobstack_1grow (&obstack, c);"}, {"sha": "7be71d9da377068f209a37df5f0acd8c058bb88b", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -2121,7 +2121,7 @@ gcse_constant_p (rtx x)\n \n \n   /* Consider a COMPARE of the same registers is a constant\n-    if they are not floating point registers. */\n+    if they are not floating point registers.  */\n   if (GET_CODE(x) == COMPARE\n       && GET_CODE (XEXP (x, 0)) == REG\n       && GET_CODE (XEXP (x, 1)) == REG"}, {"sha": "62964d61182f9e9d76d807152878abc166d97bb2", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -410,7 +410,7 @@ static struct globals\n \n     /* Total allocations and overhead for sizes less than 32, 64 and 128.\n        These sizes are interesting because they are typical cache line\n-       sizes. */\n+       sizes.  */\n    \n     unsigned long long total_allocated_under32;\n     unsigned long long total_overhead_under32;\n@@ -421,7 +421,7 @@ static struct globals\n     unsigned long long total_allocated_under128;\n     unsigned long long total_overhead_under128;\n   \n-    /* The overhead for each of the allocation orders. */\n+    /* The overhead for each of the allocation orders.  */\n     unsigned long long total_overhead_per_order[NUM_ORDERS];\n   } stats;\n #endif"}, {"sha": "d2b53f8cf4b1ddc4db20de129b40eff9d875382c", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -2345,7 +2345,7 @@ rtx_renumbered_equal_p (rtx x, rtx y)\n \tcase 'u':\n \t  if (XEXP (x, i) != XEXP (y, i))\n \t    return 0;\n-\t  /* fall through.  */\n+\t  /* Fall through.  */\n \tcase '0':\n \t  break;\n "}, {"sha": "c4d2779a18c5129fe9082eec85d0ecb39bce5a8e", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -2254,7 +2254,7 @@ move_movables (struct loop *loop, struct loop_movables *movables,\n \t\t\t and prevent further processing of it.  */\n \t\t      m1->done = 1;\n \n-\t\t      /* if library call, delete all insns.  */\n+\t\t      /* If library call, delete all insns.  */\n \t\t      if ((temp = find_reg_note (m1->insn, REG_RETVAL,\n \t\t\t\t\t\t NULL_RTX)))\n \t\t\tdelete_insn_chain (XEXP (temp, 0), m1->insn);"}, {"sha": "5c8b8f8738b58850136956597db7d5ec300a846a", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -4743,7 +4743,7 @@ main (int argc, char **argv)\n \telse\n \t  rename_output = 1;\n \n-\t/* fall through to 'i' case.  */\n+\t/* Fall through to 'i' case.  */\n \n       case 'i':\n \tif (obj_in_name == (char *) 0)"}, {"sha": "7e75f34da837774e0dd41a7ce83fa5e631b8a5c1", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -333,7 +333,7 @@ apply_change_group (void)\n     {\n       rtx object = changes[i].object;\n \n-      /* if there is no object to test or if it is the same as the one we\n+      /* If there is no object to test or if it is the same as the one we\n          already tested, ignore it.  */\n       if (object == 0 || object == last_validated)\n \tcontinue;"}, {"sha": "ec636d777aa9f4e9c702e2616c05e3c935340c09", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -340,7 +340,7 @@ init_reg_sets_1 (void)\n \t      continue;\n \n \t    subclass1:\n-\t      /* keep the largest subclass */\t\t/* SPEE 900308 */\n+\t      /* Keep the largest subclass.  */\t\t/* SPEE 900308 */\n \t      GO_IF_HARD_REG_SUBSET (reg_class_contents[k],\n \t\t\t\t     reg_class_contents[(int) reg_class_subunion[i][j]],\n \t\t\t\t     subclass2);\n@@ -2156,7 +2156,7 @@ allocate_reg_info (size_t num_regs, int new_p, int renumber_p)\n     {\n       size_t old_allocated = regno_allocated;\n \n-      regno_allocated = num_regs + (num_regs / 20);\t/* add some slop space */\n+      regno_allocated = num_regs + (num_regs / 20);\t/* Add some slop space.  */\n       size_renumber = regno_allocated * sizeof (short);\n \n       if (!reg_n_info)\n@@ -2171,7 +2171,7 @@ allocate_reg_info (size_t num_regs, int new_p, int renumber_p)\n \t{\n \t  VARRAY_GROW (reg_n_info, regno_allocated);\n \n-\t  if (new_p)\t\t/* if we're zapping everything, no need to realloc */\n+\t  if (new_p)\t\t/* If we're zapping everything, no need to realloc.  */\n \t    {\n \t      free ((char *) renumber);\n \t      free ((char *) reg_pref);"}, {"sha": "550694a02019ebc08205eab4ed08ab13862d45d4", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -2064,7 +2064,7 @@ stable_and_no_regs_but_for_p (rtx x, rtx src, rtx dst)\n       if (code == MEM\n \t  && ! stable_and_no_regs_but_for_p (XEXP (x, 0), src, dst))\n \treturn 0;\n-      /* fall through */\n+      /* Fall through.  */\n     default:\n       return ! rtx_unstable_p (x);\n     }"}, {"sha": "4a633969e21c0fd57aefa14c2616b4a464e7589a", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -55,7 +55,7 @@ extern int _obstack_allocated_p (struct obstack *h, void *obj);\n int tree_node_counts[(int) all_kinds];\n int tree_node_sizes[(int) all_kinds];\n \n-/* Keep in sync with tree.h:enum tree_node_kind. */\n+/* Keep in sync with tree.h:enum tree_node_kind.  */\n static const char * const tree_node_kind_names[] = {\n   \"decls\",\n   \"types\","}, {"sha": "22cbfdb4af055a311f1f5b3f8444b2dce686763a", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/938d968ed373057812cd43a9b420399fb65f6c0b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=938d968ed373057812cd43a9b420399fb65f6c0b", "patch": "@@ -3021,7 +3021,7 @@ extern void fancy_abort (const char *, int, const char *)\n #define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n \n /* Enum and arrays used for tree allocation stats. \n-   Keep in sync with tree.c:tree_node_kind_names. */\n+   Keep in sync with tree.c:tree_node_kind_names.  */\n typedef enum\n {\n   d_kind,"}]}