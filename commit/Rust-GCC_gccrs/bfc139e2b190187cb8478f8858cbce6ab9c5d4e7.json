{"sha": "bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjMTM5ZTJiMTkwMTg3Y2I4NDc4Zjg4NThjYmNlNmFiOWM1ZDRlNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T20:18:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T20:21:31Z"}, "message": "c++: Expose constexpr hash table\n\nThis patch exposes the constexpr hash table so that the modules\nmachinery can save and load constexpr bodies.  While there I noticed\nthat we could do a little constification of the hasher and comparator\nfunctions.  Also combine the saving machinery to a single function\nreturning void -- nothing ever looked at its return value.\n\n\tgcc/cp/\n\t* cp-tree.h (struct constexpr_fundef): Moved from constexpr.c.\n\t(maybe_save_constexpr_fundef): Declare.\n\t(register_constexpr_fundef): Take constexpr_fundef object, return\n\tvoid.\n\t* decl.c (mabe_save_function_definition): Delete, functionality\n\tmoved to maybe_save_constexpr_fundef.\n\t(emit_coro_helper, finish_function): Adjust.\n\t* constexpr.c (struct constexpr_fundef): Moved to cp-tree.h.\n\t(constexpr_fundef_hasher::equal): Constify.\n\t(constexpr_fundef_hasher::hash): Constify.\n\t(retrieve_constexpr_fundef): Make non-static.\n\t(maybe_save_constexpr_fundef): Break out checking and duplication\n\tfrom ...\n\t(register_constexpr_fundef): ... here.  Just register the constexpr.", "tree": {"sha": "b7d9f708e52aa5409981b0af670c2aa0e1f605b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d9f708e52aa5409981b0af670c2aa0e1f605b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0862d007b564eca8c9a48fca0e689dd3f90db828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0862d007b564eca8c9a48fca0e689dd3f90db828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0862d007b564eca8c9a48fca0e689dd3f90db828"}], "stats": {"total": 120, "additions": 59, "deletions": 61}, "files": [{"sha": "625410327b8a4fbaf26b086d74ec1dff40699fb3", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 45, "deletions": 44, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "patch": "@@ -133,19 +133,10 @@ ensure_literal_type_for_constexpr_object (tree decl)\n   return decl;\n }\n \n-/* Representation of entries in the constexpr function definition table.  */\n-\n-struct GTY((for_user)) constexpr_fundef {\n-  tree decl;\n-  tree body;\n-  tree parms;\n-  tree result;\n-};\n-\n struct constexpr_fundef_hasher : ggc_ptr_hash<constexpr_fundef>\n {\n-  static hashval_t hash (constexpr_fundef *);\n-  static bool equal (constexpr_fundef *, constexpr_fundef *);\n+  static hashval_t hash (const constexpr_fundef *);\n+  static bool equal (const constexpr_fundef *, const constexpr_fundef *);\n };\n \n /* This table holds all constexpr function definitions seen in\n@@ -158,7 +149,8 @@ static GTY (()) hash_table<constexpr_fundef_hasher> *constexpr_fundef_table;\n    same constexpr function.  */\n \n inline bool\n-constexpr_fundef_hasher::equal (constexpr_fundef *lhs, constexpr_fundef *rhs)\n+constexpr_fundef_hasher::equal (const constexpr_fundef *lhs,\n+\t\t\t\tconst constexpr_fundef *rhs)\n {\n   return lhs->decl == rhs->decl;\n }\n@@ -167,20 +159,20 @@ constexpr_fundef_hasher::equal (constexpr_fundef *lhs, constexpr_fundef *rhs)\n    Return a hash value for the entry pointed to by Q.  */\n \n inline hashval_t\n-constexpr_fundef_hasher::hash (constexpr_fundef *fundef)\n+constexpr_fundef_hasher::hash (const constexpr_fundef *fundef)\n {\n   return DECL_UID (fundef->decl);\n }\n \n /* Return a previously saved definition of function FUN.   */\n \n-static constexpr_fundef *\n+constexpr_fundef *\n retrieve_constexpr_fundef (tree fun)\n {\n   if (constexpr_fundef_table == NULL)\n     return NULL;\n \n-  constexpr_fundef fundef = { fun, NULL, NULL, NULL };\n+  constexpr_fundef fundef = { fun, NULL_TREE, NULL_TREE, NULL_TREE };\n   return constexpr_fundef_table->find (&fundef);\n }\n \n@@ -669,7 +661,7 @@ get_function_named_in_call (tree t)\n   return fun;\n }\n \n-/* Subroutine of register_constexpr_fundef.  BODY is the body of a function\n+/* Subroutine of check_constexpr_fundef.  BODY is the body of a function\n    declared to be constexpr, or a sub-statement thereof.  Returns the\n    return value if suitable, error_mark_node for a statement not allowed in\n    a constexpr function, or NULL_TREE if no return value was found.  */\n@@ -738,7 +730,7 @@ constexpr_fn_retval (tree body)\n     }\n }\n \n-/* Subroutine of register_constexpr_fundef.  BODY is the DECL_SAVED_TREE of\n+/* Subroutine of check_constexpr_fundef.  BODY is the DECL_SAVED_TREE of\n    FUN; do the necessary transformations to turn it into a single expression\n    that we can store in the hash table.  */\n \n@@ -868,27 +860,28 @@ cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n }\n \n /* We are processing the definition of the constexpr function FUN.\n-   Check that its BODY fulfills the propriate requirements and\n-   enter it in the constexpr function definition table.\n-   For constructor BODY is actually the TREE_LIST of the\n-   member-initializer list.  */\n+   Check that its body fulfills the apropriate requirements and\n+   enter it in the constexpr function definition table.  */\n \n-tree\n-register_constexpr_fundef (tree fun, tree body)\n+void\n+maybe_save_constexpr_fundef (tree fun)\n {\n-  constexpr_fundef entry;\n-  constexpr_fundef **slot;\n+  if (processing_template_decl\n+      || !DECL_DECLARED_CONSTEXPR_P (fun)\n+      || cp_function_chain->invalid_constexpr\n+      || DECL_CLONED_FUNCTION_P (fun))\n+    return;\n \n   if (!is_valid_constexpr_fn (fun, !DECL_GENERATED_P (fun)))\n-    return NULL;\n+    return;\n \n-  tree massaged = massage_constexpr_body (fun, body);\n+  tree massaged = massage_constexpr_body (fun, DECL_SAVED_TREE (fun));\n   if (massaged == NULL_TREE || massaged == error_mark_node)\n     {\n       if (!DECL_CONSTRUCTOR_P (fun))\n \terror (\"body of %<constexpr%> function %qD not a return-statement\",\n \t       fun);\n-      return NULL;\n+      return;\n     }\n \n   bool potential = potential_rvalue_constant_expression (massaged);\n@@ -901,39 +894,47 @@ register_constexpr_fundef (tree fun, tree body)\n     potential = false;\n \n   if (!potential && !DECL_GENERATED_P (fun))\n-    return NULL;\n-\n-  /* Create the constexpr function table if necessary.  */\n-  if (constexpr_fundef_table == NULL)\n-    constexpr_fundef_table\n-      = hash_table<constexpr_fundef_hasher>::create_ggc (101);\n+    return;\n \n-  entry.decl = fun;\n-  tree saved_fn = current_function_decl;\n+  constexpr_fundef entry = {fun, NULL_TREE, NULL_TREE, NULL_TREE};\n   bool clear_ctx = false;\n-  current_function_decl = fun;\n   if (DECL_RESULT (fun) && DECL_CONTEXT (DECL_RESULT (fun)) == NULL_TREE)\n     {\n       clear_ctx = true;\n       DECL_CONTEXT (DECL_RESULT (fun)) = fun;\n     }\n-  entry.body = copy_fn (fun, entry.parms, entry.result);\n+  tree saved_fn = current_function_decl;\n+  current_function_decl = fun;\n+  entry.body = copy_fn (entry.decl, entry.parms, entry.result);\n   current_function_decl = saved_fn;\n-  slot = constexpr_fundef_table->find_slot (&entry, INSERT);\n   if (clear_ctx)\n-    DECL_CONTEXT (DECL_RESULT (fun)) = NULL_TREE;\n-\n+    DECL_CONTEXT (DECL_RESULT (entry.decl)) = NULL_TREE;\n   if (!potential)\n     /* For a template instantiation, we want to remember the pre-generic body\n        for explain_invalid_constexpr_fn, but do tell cxx_eval_call_expression\n        that it doesn't need to bother trying to expand the function.  */\n     entry.result = error_mark_node;\n \n+  register_constexpr_fundef (entry);\n+}\n+\n+/* BODY is a validated and massaged definition of a constexpr\n+   function.  Register it in the hash table.  */\n+\n+void\n+register_constexpr_fundef (const constexpr_fundef &value)\n+{\n+  /* Create the constexpr function table if necessary.  */\n+  if (constexpr_fundef_table == NULL)\n+    constexpr_fundef_table\n+      = hash_table<constexpr_fundef_hasher>::create_ggc (101);\n+\n+  constexpr_fundef **slot = constexpr_fundef_table->find_slot\n+    (const_cast<constexpr_fundef *> (&value), INSERT);\n+\n   gcc_assert (*slot == NULL);\n   *slot = ggc_alloc<constexpr_fundef> ();\n-  **slot = entry;\n-\n-  return fun;\n+  **slot = value;\n }\n \n /* FUN is a non-constexpr function called in a context that requires a"}, {"sha": "0c4b74a8895012440c89f69defebaa8e7e0980f3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "patch": "@@ -7895,9 +7895,20 @@ extern void vtv_recover_class_info              (void);\n extern void vtv_build_vtable_verify_fndecl      (void);\n \n /* In constexpr.c */\n+/* Representation of entries in the constexpr function definition table.  */\n+\n+struct GTY((for_user)) constexpr_fundef {\n+  tree decl;\n+  tree body;\n+  tree parms;\n+  tree result;\n+};\n+\n extern void fini_constexpr\t\t\t(void);\n extern bool literal_type_p                      (tree);\n-extern tree register_constexpr_fundef           (tree, tree);\n+extern void maybe_save_constexpr_fundef\t\t(tree);\n+extern void register_constexpr_fundef\t\t(const constexpr_fundef &);\n+extern constexpr_fundef *retrieve_constexpr_fundef\t(tree);\n extern bool is_valid_constexpr_fn\t\t(tree, bool);\n extern bool check_constexpr_ctor_body           (tree, tree, bool);\n extern tree constexpr_fn_retval\t\t(tree);"}, {"sha": "1c6dcdb74db202f613305172f9c723b3a9429e78", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc139e2b190187cb8478f8858cbce6ab9c5d4e7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bfc139e2b190187cb8478f8858cbce6ab9c5d4e7", "patch": "@@ -16872,20 +16872,6 @@ record_key_method_defined (tree fndecl)\n     }\n }\n \n-/* Subroutine of finish_function.\n-   Save the body of constexpr functions for possible\n-   future compile time evaluation.  */\n-\n-static void\n-maybe_save_function_definition (tree fun)\n-{\n-  if (!processing_template_decl\n-      && DECL_DECLARED_CONSTEXPR_P (fun)\n-      && !cp_function_chain->invalid_constexpr\n-      && !DECL_CLONED_FUNCTION_P (fun))\n-    register_constexpr_fundef (fun, DECL_SAVED_TREE (fun));\n-}\n-\n /* Attempt to add a fix-it hint to RICHLOC suggesting the insertion\n    of \"return *this;\" immediately before its location, using FNDECL's\n    first statement (if any) to give the indentation, if appropriate.  */\n@@ -16919,7 +16905,7 @@ emit_coro_helper (tree helper)\n   allocate_struct_function (helper, false);\n   cfun->language = ggc_cleared_alloc<language_function> ();\n   poplevel (1, 0, 1);\n-  maybe_save_function_definition (helper);\n+  maybe_save_constexpr_fundef (helper);\n   /* We must start each function with a clear fold cache.  */\n   clear_fold_cache ();\n   cp_fold_function (helper);\n@@ -17153,7 +17139,7 @@ finish_function (bool inline_p)\n \n   /* Save constexpr function body before it gets munged by\n      the NRV transformation.   */\n-  maybe_save_function_definition (fndecl);\n+  maybe_save_constexpr_fundef (fndecl);\n \n   /* Invoke the pre-genericize plugin before we start munging things.  */\n   if (!processing_template_decl)"}]}