{"sha": "c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA1ZDA4ZjZmYWRmYTc4YjBhYWQ4ZjhmZmE1YTg1MDRiNDRhOTQ2Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-12T08:34:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-12T08:34:11Z"}, "message": "sse.md (pinsr_evex_isa): New mode attr.\n\n\t* config/i386/sse.md (pinsr_evex_isa): New mode attr.\n\t(<sse2p4_1>_pinsr<ssemodesuffix>): Add 2 alternatives with\n\tv constraints instead of x and <pinsr_evex_isa> isa attribute.\n\n\t* gcc.target/i386/avx512bw-vpinsr-1.c: New test.\n\t* gcc.target/i386/avx512dq-vpinsr-1.c: New test.\n\t* gcc.target/i386/avx512vl-vpinsr-1.c: New test.\n\nFrom-SVN: r236165", "tree": {"sha": "0b567f21689f3c7b18ed227f4b857c2e20e1e666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b567f21689f3c7b18ed227f4b857c2e20e1e666"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc27ffae1b62831da78acb0362ed0dcabb1f3f1c"}], "stats": {"total": 153, "additions": 148, "deletions": 5}, "files": [{"sha": "4dbae25dfe9815b1dc292e4026a6de54a8b50ee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "patch": "@@ -1,5 +1,9 @@\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (pinsr_evex_isa): New mode attr.\n+\t(<sse2p4_1>_pinsr<ssemodesuffix>): Add 2 alternatives with\n+\tv constraints instead of x and <pinsr_evex_isa> isa attribute.\n+\n \tPR target/71019\n \t* config/i386/sse.md (<sse2_avx2>_packssdw<mask_name>,\n \t<sse4_1_avx2>_packusdw<mask_name>): Make sure EVEX encoded insn"}, {"sha": "82562baa98d68ba8ed19046c4e6c2e4186ec7e17", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "patch": "@@ -12036,13 +12036,17 @@\n   [(V16QI \"sse4_1\") (V8HI \"sse2\")\n    (V4SI \"sse4_1\") (V2DI \"sse4_1\")])\n \n+(define_mode_attr pinsr_evex_isa\n+  [(V16QI \"avx512bw\") (V8HI \"avx512bw\")\n+   (V4SI \"avx512dq\") (V2DI \"avx512dq\")])\n+\n ;; sse4_1_pinsrd must come before sse2_loadld since it is preferred.\n (define_insn \"<sse2p4_1>_pinsr<ssemodesuffix>\"\n-  [(set (match_operand:PINSR_MODE 0 \"register_operand\" \"=x,x,x,x\")\n+  [(set (match_operand:PINSR_MODE 0 \"register_operand\" \"=x,x,x,x,v,v\")\n \t(vec_merge:PINSR_MODE\n \t  (vec_duplicate:PINSR_MODE\n-\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m,r,m\"))\n-\t  (match_operand:PINSR_MODE 1 \"register_operand\" \"0,0,x,x\")\n+\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m,r,m,r,m\"))\n+\t  (match_operand:PINSR_MODE 1 \"register_operand\" \"0,0,x,x,v,v\")\n \t  (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_SSE2\n    && ((unsigned) exact_log2 (INTVAL (operands[3]))\n@@ -12059,16 +12063,18 @@\n     case 1:\n       return \"pinsr<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\";\n     case 2:\n+    case 4:\n       if (GET_MODE_SIZE (<ssescalarmode>mode) < GET_MODE_SIZE (SImode))\n \treturn \"vpinsr<ssemodesuffix>\\t{%3, %k2, %1, %0|%0, %1, %k2, %3}\";\n       /* FALLTHRU */\n     case 3:\n+    case 5:\n       return \"vpinsr<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"noavx,noavx,avx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx,<pinsr_evex_isa>,<pinsr_evex_isa>\")\n    (set_attr \"type\" \"sselog\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n@@ -12089,7 +12095,7 @@\n        (const_string \"*\")\n        (const_string \"1\")))\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,orig,vex,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex,vex,evex,evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"<extract_type>_vinsert<shuffletype><extract_suf>_mask\""}, {"sha": "d893b58a590b630f7e43e7388fc6b5b88394b7c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "patch": "@@ -1,5 +1,9 @@\n 2016-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/avx512bw-vpinsr-1.c: New test.\n+\t* gcc.target/i386/avx512dq-vpinsr-1.c: New test.\n+\t* gcc.target/i386/avx512vl-vpinsr-1.c: New test.\n+\n \tPR target/71019\n \t* gcc.target/i386/avx512vl-pack-1.c: New test.\n \t* gcc.target/i386/avx512vl-pack-2.c: New test."}, {"sha": "ff66dd4fd3367f827d4d49d2eafe0d978bef543e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpinsr-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpinsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpinsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpinsr-1.c?ref=c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw\" } */\n+\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+\n+v16qi\n+f1 (v16qi a, char b)\n+{\n+  register v16qi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v16qi d = c;\n+  ((char *) &d)[3] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler \"vpinsrb\\[^\\n\\r]*xmm16\" } } */\n+\n+v8hi\n+f2 (v8hi a, short b)\n+{\n+  register v8hi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v8hi d = c;\n+  ((short *) &d)[3] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler \"vpinsrw\\[^\\n\\r]*xmm16\" } } */"}, {"sha": "427b4e73a165e4efbcdb66eac6bfbf4562e8218a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vpinsr-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpinsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpinsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vpinsr-1.c?ref=c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512dq\" } */\n+\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size (16)));\n+\n+v4si\n+f1 (v4si a, int b)\n+{\n+  register v4si c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v4si d = c;\n+  ((int *) &d)[3] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler \"vpinsrd\\[^\\n\\r]*xmm16\" } } */\n+\n+v2di\n+f2 (v2di a, long long b)\n+{\n+  register v2di c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v2di d = c;\n+  ((long long *) &d)[1] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler \"vpinsrq\\[^\\n\\r]*xmm16\" } } */"}, {"sha": "9cfab9bf542503a4f10b5e8ad089517a751d7d33", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpinsr-1.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpinsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpinsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpinsr-1.c?ref=c05d08f6fadfa78b0aad8f8ffa5a8504b44a9467", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512bw -mno-avx512dq\" } */\n+\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size (16)));\n+\n+v16qi\n+f1 (v16qi a, char b)\n+{\n+  register v16qi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v16qi d = c;\n+  ((char *) &d)[3] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpinsrb\\[^\\n\\r]*xmm16\" } } */\n+\n+v8hi\n+f2 (v8hi a, short b)\n+{\n+  register v8hi c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v8hi d = c;\n+  ((short *) &d)[3] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpinsrw\\[^\\n\\r]*xmm16\" } } */\n+\n+v4si\n+f3 (v4si a, int b)\n+{\n+  register v4si c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v4si d = c;\n+  ((int *) &d)[3] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpinsrd\\[^\\n\\r]*xmm16\" } } */\n+\n+v2di\n+f4 (v2di a, char b)\n+{\n+  register v2di c __asm (\"xmm16\") = a;\n+  asm volatile (\"\" : \"+v\" (c));\n+  v2di d = c;\n+  ((long long *) &d)[1] = b;\n+  c = d;\n+  asm volatile (\"\" : \"+v\" (c));\n+  return c;\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpinsrq\\[^\\n\\r]*xmm16\" } } */"}]}