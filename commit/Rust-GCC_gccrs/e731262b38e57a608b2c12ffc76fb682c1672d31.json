{"sha": "e731262b38e57a608b2c12ffc76fb682c1672d31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczMTI2MmIzOGU1N2E2MDhiMmMxMmZmYzc2ZmI2ODJjMTY3MmQzMQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2012-11-16T16:32:02Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2012-11-16T16:32:02Z"}, "message": "re PR rtl-optimization/55330 (ICE: Maximum number of LRA constraint passes is achieved (15) on gfortran.dg/actual_array_constructor_1.f90)\n\n2012-11-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55330\n\t* lra-constraints.c (MAX_INHERITANCE_PASSES): New macro.\n\t(lra_inheritance, lra_undo_inheritance): Use it to limit number of\n\tthe passes.\n\n2012-11-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/55330\n\t* gfortran.dg/pr55330.f90: New test.\n\nFrom-SVN: r193567", "tree": {"sha": "a2aecfec468c72eb968845c9b6c5a3fc82698f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2aecfec468c72eb968845c9b6c5a3fc82698f1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e731262b38e57a608b2c12ffc76fb682c1672d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e731262b38e57a608b2c12ffc76fb682c1672d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e731262b38e57a608b2c12ffc76fb682c1672d31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e731262b38e57a608b2c12ffc76fb682c1672d31/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce1a1562859498a73f74bcc3f008e6a1357ba13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1a1562859498a73f74bcc3f008e6a1357ba13a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1a1562859498a73f74bcc3f008e6a1357ba13a"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "0f149c4eb68ba2acfc02d5221b9fa89d3ce622c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e731262b38e57a608b2c12ffc76fb682c1672d31", "patch": "@@ -1,3 +1,10 @@\n+2012-11-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55330\n+\t* lra-constraints.c (MAX_INHERITANCE_PASSES): New macro.\n+\t(lra_inheritance, lra_undo_inheritance): Use it to limit number of\n+\tthe passes.\n+\n 2012-11-16  Matthias Klose  <doko@ubuntu.com>\n \n \t* config/pa/t-linux: New file; define MULTIARCH_DIRNAME."}, {"sha": "6f19c183eae82c5ad991c2a4713716449cbcd760", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=e731262b38e57a608b2c12ffc76fb682c1672d31", "patch": "@@ -4633,6 +4633,21 @@ inherit_in_ebb (rtx head, rtx tail)\n   return change_p;\n }\n \n+/* The maximal number of inheritance/split passes in LRA.  It should\n+   be more 1 in order to perform caller saves transformations and much\n+   less MAX_CONSTRAINT_ITERATION_NUMBER to prevent LRA to do as many\n+   as permitted constraint passes in some complicated cases.  The\n+   first inheritance/split pass has a biggest impact on generated code\n+   quality.  Each subsequent affects generated code in less degree.\n+   For example, the 3rd pass does not change generated SPEC2000 code\n+   at all on x86-64.  */\n+#define MAX_INHERITANCE_PASSES 2\n+\n+#if MAX_INHERITANCE_PASSES <= 0 \\\n+    || MAX_INHERITANCE_PASSES >= MAX_CONSTRAINT_ITERATION_NUMBER - 8\n+#error wrong MAX_INHERITANCE_PASSES value\n+#endif\n+\n /* This value affects EBB forming.  If probability of edge from EBB to\n    a BB is not greater than the following value, we don't add the BB\n    to EBB.  */\n@@ -4649,8 +4664,10 @@ lra_inheritance (void)\n   basic_block bb, start_bb;\n   edge e;\n \n-  timevar_push (TV_LRA_INHERITANCE);\n   lra_inheritance_iter++;\n+  if (lra_inheritance_iter > MAX_INHERITANCE_PASSES)\n+    return;\n+  timevar_push (TV_LRA_INHERITANCE);\n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file, \"\\n********** Inheritance #%d: **********\\n\\n\",\n \t     lra_inheritance_iter);\n@@ -4920,6 +4937,8 @@ lra_undo_inheritance (void)\n   bool change_p;\n \n   lra_undo_inheritance_iter++;\n+  if (lra_undo_inheritance_iter > MAX_INHERITANCE_PASSES)\n+    return false;\n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file,\n \t     \"\\n********** Undoing inheritance #%d: **********\\n\\n\","}, {"sha": "d93adcc3497775a8ad206a34a6c87048ca5675ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e731262b38e57a608b2c12ffc76fb682c1672d31", "patch": "@@ -1,3 +1,8 @@\n+2012-11-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/55330\n+\t* gfortran.dg/pr55330.f90: New test.\n+\n 2012-11-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/gcc-dg.exp (cleanup-saved-temps): Add .mii to suffixes."}, {"sha": "2e05a27729ae71339bca95001c208f00345f443f", "filename": "gcc/testsuite/gfortran.dg/pr55330.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr55330.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e731262b38e57a608b2c12ffc76fb682c1672d31/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr55330.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr55330.f90?ref=e731262b38e57a608b2c12ffc76fb682c1672d31", "patch": "@@ -0,0 +1,73 @@\n+! PR rtl-optimization/55330\n+! { dg-do compile }\n+! { dg-options \"-O -fPIC -fno-dse -fno-guess-branch-probability\" }\n+\n+module global\n+  public    p, line\n+  interface p\n+    module procedure p\n+  end interface\n+  character(128) :: line = 'abcdefghijklmnopqrstuvwxyz'\n+contains\n+  subroutine p()\n+    character(128) :: word\n+    word = line\n+    call redirect_((/word/))\n+  end subroutine\n+  subroutine redirect_ (ch)\n+    character(*) :: ch(:)\n+    if (ch(1) /= line) call abort ()\n+  end subroutine redirect_\n+end module global\n+\n+module my_module\n+  implicit none\n+  type point\n+    real :: x\n+  end type point\n+  type(point), pointer, public :: stdin => NULL()\n+contains\n+  subroutine my_p(w)\n+    character(128) :: w\n+    call r(stdin,(/w/))\n+  end subroutine my_p\n+  subroutine r(ptr, io)\n+    use global\n+    type(point), pointer :: ptr\n+    character(128) :: io(:)\n+    if (associated (ptr)) call abort ()\n+    if (io(1) .ne. line) call abort ()\n+  end subroutine r\n+end module my_module\n+\n+program main\n+  use global\n+  use my_module\n+\n+  integer :: i(6) = (/1,6,3,4,5,2/)\n+  character (6) :: a = 'hello ', t\n+  character(len=1) :: s(6) = (/'g','g','d','d','a','o'/)\n+  equivalence (s, t)\n+\n+  call option_stopwatch_s (a)\n+  call p ()\n+  call my_p (line)\n+\n+  s = s(i)\n+  call option_stopwatch_a ((/a,'hola! ', t/))\n+\n+contains\n+\n+  subroutine option_stopwatch_s(a)\n+    character (*), intent(in) :: a\n+    character (len=len(a)) :: b\n+\n+    b = 'hola! '\n+    call option_stopwatch_a((/a, b, 'goddag'/))\n+  end subroutine option_stopwatch_s \n+  subroutine option_stopwatch_a (a)\n+    character (*) :: a(:)\n+    if (any (a .ne. (/'hello ','hola! ','goddag'/))) call abort ()\n+  end subroutine option_stopwatch_a\n+\n+end program main"}]}