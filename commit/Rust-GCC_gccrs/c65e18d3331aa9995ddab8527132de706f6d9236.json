{"sha": "c65e18d3331aa9995ddab8527132de706f6d9236", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1ZTE4ZDMzMzFhYTk5OTVkZGFiODUyNzEzMmRlNzA2ZjZkOTIzNg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2017-12-14T18:59:24Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2017-12-14T18:59:24Z"}, "message": "invoke.texi: Document -Wcast-function-type.\n\ngcc:\n2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * doc/invoke.texi: Document -Wcast-function-type.\n        * recog.h (stored_funcptr): Change signature.\n        * tree-dump.c (dump_node): Avoid warning.\n        * typed-splay-tree.h (typed_splay_tree): Avoid warning.\n\nlibcpp:\n2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * internal.h (maybe_print_line): Change signature.\n\nc-family:\n2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c.opt (Wcast-function-type): New warning option.\n        * c-lex.c (get_fileinfo): Avoid warning.\n        * c-ppoutput.c (scan_translation_unit_directives_only): Remove cast.\n\nc:\n2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-typeck.c (c_safe_arg_type_equiv_p,\n        c_safe_function_type_cast_p): New function.\n        (build_c_cast): Implement -Wcast-function-type.\n\ncp:\n2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * decl2.c (start_static_storage_duration_function): Avoid warning.\n        * typeck.c (cxx_safe_arg_type_equiv_p,\n        cxx_safe_function_type_cast_p): New function.\n        (build_reinterpret_cast_1): Implement -Wcast-function-type.\n\ntestsuite:\n2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-c++-common/Wcast-function-type.c: New test.\n        * g++.dg/Wcast-function-type.C: New test.\n\nFrom-SVN: r255661", "tree": {"sha": "c07ca2eb9958d996e27a70559a3a4e136ba98e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c07ca2eb9958d996e27a70559a3a4e136ba98e58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c65e18d3331aa9995ddab8527132de706f6d9236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65e18d3331aa9995ddab8527132de706f6d9236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65e18d3331aa9995ddab8527132de706f6d9236", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65e18d3331aa9995ddab8527132de706f6d9236/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d0e85af87d9e7fe3bd68d1647b7c47ad299f011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0e85af87d9e7fe3bd68d1647b7c47ad299f011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d0e85af87d9e7fe3bd68d1647b7c47ad299f011"}], "stats": {"total": 272, "additions": 258, "deletions": 14}, "files": [{"sha": "d57e06b0f0e7fb6a0045f261f8b44e83e69c2035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1,3 +1,10 @@\n+2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* doc/invoke.texi: Document -Wcast-function-type.\n+\t* recog.h (stored_funcptr): Change signature.\n+\t* tree-dump.c (dump_node): Avoid warning.\n+\t* typed-splay-tree.h (typed_splay_tree): Avoid warning.\n+\n 2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle_end/79538"}, {"sha": "9f87d008382c60574408a5493e238fbb337b0f0b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1,3 +1,9 @@\n+2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c.opt (Wcast-function-type): New warning option.\n+\t* c-lex.c (get_fileinfo): Avoid warning.\n+\t* c-ppoutput.c (scan_translation_unit_directives_only): Remove cast.\n+\n 2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle_end/79538 "}, {"sha": "d45dc4b68402127b8b59e099c6039b26cfbec2e8", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -101,9 +101,11 @@ get_fileinfo (const char *name)\n   struct c_fileinfo *fi;\n \n   if (!file_info_tree)\n-    file_info_tree = splay_tree_new ((splay_tree_compare_fn) strcmp,\n+    file_info_tree = splay_tree_new ((splay_tree_compare_fn)\n+\t\t\t\t     (void (*) (void)) strcmp,\n \t\t\t\t     0,\n-\t\t\t\t     (splay_tree_delete_value_fn) free);\n+\t\t\t\t     (splay_tree_delete_value_fn)\n+\t\t\t\t     (void (*) (void)) free);\n \n   n = splay_tree_lookup (file_info_tree, (splay_tree_key) name);\n   if (n)"}, {"sha": "32176ed122e1c9c542bdcd15b3a7b39bbacaafc4", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -299,7 +299,7 @@ scan_translation_unit_directives_only (cpp_reader *pfile)\n   struct _cpp_dir_only_callbacks cb;\n \n   cb.print_lines = print_lines_directives_only;\n-  cb.maybe_print_line = (void (*) (source_location)) maybe_print_line;\n+  cb.maybe_print_line = maybe_print_line;\n \n   _cpp_preprocess_dir_only (pfile, &cb);\n }"}, {"sha": "31b50ee56c9aa9b61d6db702019dbd77a0bd60c9", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -384,6 +384,10 @@ Wc++17-compat\n C++ ObjC++ Var(warn_cxx17_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.\n \n+Wcast-function-type\n+C ObjC C++ ObjC++ Var(warn_cast_function_type) Warning EnabledBy(Wextra)\n+Warn about casts between incompatible function types.\n+\n Wcast-qual\n C ObjC C++ ObjC++ Var(warn_cast_qual) Warning\n Warn about casts which discard qualifiers."}, {"sha": "d486018e3a2b00701de96ded8fe42609e2988018", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1,3 +1,9 @@\n+2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-typeck.c (c_safe_arg_type_equiv_p,\n+\tc_safe_function_type_cast_p): New function.\n+\t(build_c_cast): Implement -Wcast-function-type.\n+\n 2017-12-14  Richard Biener  <rguenther@suse.de>\n \n \tPR c/83415"}, {"sha": "541fb61ef08b035606ddd7b191b58736b7158ac3", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -5472,6 +5472,59 @@ handle_warn_cast_qual (location_t loc, tree type, tree otype)\n   while (TREE_CODE (in_type) == POINTER_TYPE);\n }\n \n+/* Heuristic check if two parameter types can be considered ABI-equivalent.  */\n+\n+static bool\n+c_safe_arg_type_equiv_p (tree t1, tree t2)\n+{\n+  t1 = TYPE_MAIN_VARIANT (t1);\n+  t2 = TYPE_MAIN_VARIANT (t2);\n+\n+  if (TREE_CODE (t1) == POINTER_TYPE\n+      && TREE_CODE (t2) == POINTER_TYPE)\n+    return true;\n+\n+  /* The signedness of the parameter matters only when an integral\n+     type smaller than int is promoted to int, otherwise only the\n+     precision of the parameter matters.\n+     This check should make sure that the callee does not see\n+     undefined values in argument registers.  */\n+  if (INTEGRAL_TYPE_P (t1)\n+      && INTEGRAL_TYPE_P (t2)\n+      && TYPE_PRECISION (t1) == TYPE_PRECISION (t2)\n+      && (TYPE_UNSIGNED (t1) == TYPE_UNSIGNED (t2)\n+\t  || !targetm.calls.promote_prototypes (NULL_TREE)\n+\t  || TYPE_PRECISION (t1) >= TYPE_PRECISION (integer_type_node)))\n+    return true;\n+\n+  return comptypes (t1, t2);\n+}\n+\n+/* Check if a type cast between two function types can be considered safe.  */\n+\n+static bool\n+c_safe_function_type_cast_p (tree t1, tree t2)\n+{\n+  if (TREE_TYPE (t1) == void_type_node &&\n+      TYPE_ARG_TYPES (t1) == void_list_node)\n+    return true;\n+\n+  if (TREE_TYPE (t2) == void_type_node &&\n+      TYPE_ARG_TYPES (t2) == void_list_node)\n+    return true;\n+\n+  if (!c_safe_arg_type_equiv_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n+    return false;\n+\n+  for (t1 = TYPE_ARG_TYPES (t1), t2 = TYPE_ARG_TYPES (t2);\n+       t1 && t2;\n+       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+    if (!c_safe_arg_type_equiv_p (TREE_VALUE (t1), TREE_VALUE (t2)))\n+      return false;\n+\n+  return true;\n+}\n+\n /* Build an expression representing a cast to type TYPE of expression EXPR.\n    LOC is the location of the cast-- typically the open paren of the cast.  */\n \n@@ -5665,6 +5718,16 @@ build_c_cast (location_t loc, tree type, tree expr)\n \tpedwarn (loc, OPT_Wpedantic, \"ISO C forbids \"\n \t\t \"conversion of object pointer to function pointer type\");\n \n+      if (TREE_CODE (type) == POINTER_TYPE\n+\t  && TREE_CODE (otype) == POINTER_TYPE\n+\t  && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE\n+\t  && TREE_CODE (TREE_TYPE (otype)) == FUNCTION_TYPE\n+\t  && !c_safe_function_type_cast_p (TREE_TYPE (type),\n+\t\t\t\t\t   TREE_TYPE (otype)))\n+\twarning_at (loc, OPT_Wcast_function_type,\n+\t\t    \"cast between incompatible function types\"\n+\t\t    \" from %qT to %qT\", otype, type);\n+\n       ovalue = value;\n       value = convert (type, value);\n "}, {"sha": "d7a1dde686f0a0ff050cb1e87a44c6c1ce4946f0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1,3 +1,10 @@\n+2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* decl2.c (start_static_storage_duration_function): Avoid warning.\n+\t* typeck.c (cxx_safe_arg_type_equiv_p,\n+\tcxx_safe_function_type_cast_p): New function.\n+\t(build_reinterpret_cast_1): Implement -Wcast-function-type.\n+\n 2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79650"}, {"sha": "89a940ac3309aad13a67753136711ed2bc8147b5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -3558,7 +3558,8 @@ start_static_storage_duration_function (unsigned count)\n       priority_info_map = splay_tree_new (splay_tree_compare_ints,\n \t\t\t\t\t  /*delete_key_fn=*/0,\n \t\t\t\t\t  /*delete_value_fn=*/\n-\t\t\t\t\t  (splay_tree_delete_value_fn) &free);\n+\t\t\t\t\t  (splay_tree_delete_value_fn)\n+\t\t\t\t\t  (void (*) (void)) free);\n \n       /* We always need to generate functions for the\n \t DEFAULT_INIT_PRIORITY so enter it now.  That way when we walk"}, {"sha": "390aa1580bd1f01b95943d7cf0693c560d16b9fd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 74, "deletions": 3, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1173,6 +1173,59 @@ comp_template_parms_position (tree t1, tree t2)\n   return true;\n }\n \n+/* Heuristic check if two parameter types can be considered ABI-equivalent.  */\n+\n+static bool\n+cxx_safe_arg_type_equiv_p (tree t1, tree t2)\n+{\n+  t1 = TYPE_MAIN_VARIANT (t1);\n+  t2 = TYPE_MAIN_VARIANT (t2);\n+\n+  if (TREE_CODE (t1) == POINTER_TYPE\n+      && TREE_CODE (t2) == POINTER_TYPE)\n+    return true;\n+\n+  /* The signedness of the parameter matters only when an integral\n+     type smaller than int is promoted to int, otherwise only the\n+     precision of the parameter matters.\n+     This check should make sure that the callee does not see\n+     undefined values in argument registers.  */\n+  if (INTEGRAL_TYPE_P (t1)\n+      && INTEGRAL_TYPE_P (t2)\n+      && TYPE_PRECISION (t1) == TYPE_PRECISION (t2)\n+      && (TYPE_UNSIGNED (t1) == TYPE_UNSIGNED (t2)\n+\t  || !targetm.calls.promote_prototypes (NULL_TREE)\n+\t  || TYPE_PRECISION (t1) >= TYPE_PRECISION (integer_type_node)))\n+    return true;\n+\n+  return same_type_p (t1, t2);\n+}\n+\n+/* Check if a type cast between two function types can be considered safe.  */\n+\n+static bool\n+cxx_safe_function_type_cast_p (tree t1, tree t2)\n+{\n+  if (TREE_TYPE (t1) == void_type_node &&\n+      TYPE_ARG_TYPES (t1) == void_list_node)\n+    return true;\n+\n+  if (TREE_TYPE (t2) == void_type_node &&\n+      TYPE_ARG_TYPES (t2) == void_list_node)\n+    return true;\n+\n+  if (!cxx_safe_arg_type_equiv_p (TREE_TYPE (t1), TREE_TYPE (t2)))\n+    return false;\n+\n+  for (t1 = TYPE_ARG_TYPES (t1), t2 = TYPE_ARG_TYPES (t2);\n+       t1 && t2;\n+       t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+    if (!cxx_safe_arg_type_equiv_p (TREE_VALUE (t1), TREE_VALUE (t2)))\n+      return false;\n+\n+  return true;\n+}\n+\n /* Subroutine in comptypes.  */\n \n static bool\n@@ -7326,9 +7379,27 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t   && same_type_p (type, intype))\n     /* DR 799 */\n     return rvalue (expr);\n-  else if ((TYPE_PTRFN_P (type) && TYPE_PTRFN_P (intype))\n-\t   || (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype)))\n-    return build_nop (type, expr);\n+  else if (TYPE_PTRFN_P (type) && TYPE_PTRFN_P (intype))\n+    {\n+      if ((complain & tf_warning)\n+\t  && !cxx_safe_function_type_cast_p (TREE_TYPE (type),\n+\t\t\t\t\t     TREE_TYPE (intype)))\n+\twarning (OPT_Wcast_function_type,\n+\t\t \"cast between incompatible function types\"\n+\t\t \" from %qH to %qI\", intype, type);\n+      return build_nop (type, expr);\n+    }\n+  else if (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype))\n+    {\n+      if ((complain & tf_warning)\n+\t  && !cxx_safe_function_type_cast_p\n+\t\t(TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE_RAW (type)),\n+\t\t TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE_RAW (intype))))\n+\twarning (OPT_Wcast_function_type,\n+\t\t \"cast between incompatible pointer to member types\"\n+\t\t \" from %qH to %qI\", intype, type);\n+      return build_nop (type, expr);\n+    }\n   else if ((TYPE_PTRDATAMEM_P (type) && TYPE_PTRDATAMEM_P (intype))\n \t   || (TYPE_PTROBV_P (type) && TYPE_PTROBV_P (intype)))\n     {"}, {"sha": "001bbeae5770bbee314193c6d33c4b21c3fc2602", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -267,7 +267,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-builtin-declaration-mismatch @gol\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n -Wc++-compat  -Wc++11-compat  -Wc++14-compat  @gol\n--Wcast-align  -Wcast-align=strict  -Wcast-qual  @gol\n+-Wcast-align  -Wcast-align=strict  -Wcast-function-type  -Wcast-qual  @gol\n -Wchar-subscripts  -Wchkp  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wclobbered  -Wcomment  -Wconditionally-supported @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wdangling-else  -Wdate-time @gol\n@@ -3904,6 +3904,7 @@ This enables some extra warning flags that are not enabled by\n name is still supported, but the newer name is more descriptive.)\n \n @gccoptlist{-Wclobbered  @gol\n+-Wcast-function-type  @gol\n -Wempty-body  @gol\n -Wignored-qualifiers @gol\n -Wimplicit-fallthrough=3 @gol\n@@ -6041,6 +6042,21 @@ Warn whenever a pointer is cast such that the required alignment of the\n target is increased.  For example, warn if a @code{char *} is cast to\n an @code{int *} regardless of the target machine.\n \n+@item -Wcast-function-type\n+@opindex Wcast-function-type\n+@opindex Wno-cast-function-type\n+Warn when a function pointer is cast to an incompatible function pointer.\n+In a cast involving function types with a variable argument list only\n+the types of initial arguments that are provided are considered.\n+Any parameter of pointer-type matches any other pointer-type.  Any benign\n+differences in integral types are ignored, like @code{int} vs. @code{long}\n+on ILP32 targets.  Likewise type qualifiers are ignored.  The function\n+type @code{void (*) (void)} is special and matches everything, which can\n+be used to suppress this warning.\n+In a cast involving pointer to member types this warning warns whenever\n+the type cast is changing the pointer to member type.\n+This warning is enabled by @option{-Wextra}.\n+\n @item -Wwrite-strings\n @opindex Wwrite-strings\n @opindex Wno-write-strings"}, {"sha": "2ce979932a27e6f854f67c66dea4a92c873c2bf9", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -294,7 +294,7 @@ struct insn_gen_fn\n   typedef rtx_insn * (*f15) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n   typedef rtx_insn * (*f16) (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);\n \n-  typedef f0 stored_funcptr;\n+  typedef void (*stored_funcptr) (void);\n \n   rtx_insn * operator () (void) const { return ((f0)func) (); }\n   rtx_insn * operator () (rtx a0) const { return ((f1)func) (a0); }"}, {"sha": "f39da0bde0327810dd8fc176a8fe32e506c592a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1,3 +1,8 @@\n+2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-c++-common/Wcast-function-type.c: New test.\n+\t* g++.dg/Wcast-function-type.C: New test.\n+\n 2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle_end/79538"}, {"sha": "81105762ef73cfd0ff17bd80b271bb9d54c1a598", "filename": "gcc/testsuite/c-c++-common/Wcast-function-type.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-function-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-function-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-function-type.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wcast-function-type\" } */\n+\n+int f(long);\n+\n+typedef int (f1)(long);\n+typedef int (f2)(void*);\n+#ifdef __cplusplus\n+typedef int (f3)(...);\n+typedef void (f4)(...);\n+#else\n+typedef int (f3)();\n+typedef void (f4)();\n+#endif\n+typedef void (f5)(void);\n+\n+f1 *a;\n+f2 *b;\n+f3 *c;\n+f4 *d;\n+f5 *e;\n+\n+void\n+foo (void)\n+{\n+  a = (f1 *) f; /* { dg-bogus   \"incompatible function types\" } */\n+  b = (f2 *) f; /* { dg-warning \"incompatible function types\" } */\n+  c = (f3 *) f; /* { dg-bogus   \"incompatible function types\" } */\n+  d = (f4 *) f; /* { dg-warning \"incompatible function types\" } */\n+  e = (f5 *) f; /* { dg-bogus   \"incompatible function types\" } */\n+}"}, {"sha": "c649405179151729abe56530a0491016032df8e4", "filename": "gcc/testsuite/g++.dg/Wcast-function-type.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWcast-function-type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWcast-function-type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWcast-function-type.C?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wcast-function-type\" } */\n+\n+struct S\n+{\n+  void foo (int*);\n+  void bar (int);\n+};\n+\n+typedef void (S::*MF)(int);\n+\n+void\n+foo (void)\n+{\n+  MF p1 = (MF)&S::foo; /* { dg-warning \"pointer to member\" } */\n+  MF p2 = (MF)&S::bar; /* { dg-bogus   \"pointer to member\" } */\n+}"}, {"sha": "74813303a526013f482b966b5b2352582421bfce", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -736,7 +736,8 @@ dump_node (const_tree t, dump_flags_t flags, FILE *stream)\n   di.flags = flags;\n   di.node = t;\n   di.nodes = splay_tree_new (splay_tree_compare_pointers, 0,\n-\t\t\t     (splay_tree_delete_value_fn) &free);\n+\t\t\t     (splay_tree_delete_value_fn)\n+\t\t\t     (void (*) (void)) free);\n \n   /* Queue up the first node.  */\n   queue (&di, t, DUMP_NONE);"}, {"sha": "032ae4fd9d63b32fe761025004243abc52fe987b", "filename": "gcc/typed-splay-tree.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftyped-splay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/gcc%2Ftyped-splay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftyped-splay-tree.h?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -75,9 +75,12 @@ inline typed_splay_tree<KEY_TYPE, VALUE_TYPE>::\n \t\t    delete_key_fn delete_key_fn,\n \t\t    delete_value_fn delete_value_fn)\n {\n-  m_inner = splay_tree_new ((splay_tree_compare_fn)compare_fn,\n-\t\t\t    (splay_tree_delete_key_fn)delete_key_fn,\n-\t\t\t    (splay_tree_delete_value_fn)delete_value_fn);\n+  m_inner = splay_tree_new ((splay_tree_compare_fn)\n+\t\t\t    (void (*) (void)) compare_fn,\n+\t\t\t    (splay_tree_delete_key_fn)\n+\t\t\t    (void (*) (void)) delete_key_fn,\n+\t\t\t    (splay_tree_delete_value_fn)\n+\t\t\t    (void (*) (void)) delete_value_fn);\n }\n \n /* Destructor for typed_splay_tree <K, V>.  */"}, {"sha": "5a41cf4b5f510c2508ebb2445e4add282c5cf6a3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -1,3 +1,7 @@\n+2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* internal.h (maybe_print_line): Change signature.\n+\t\n 2017-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79228"}, {"sha": "ee47a53c33e969238641d985729bb58dd3260a6d", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c65e18d3331aa9995ddab8527132de706f6d9236/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c65e18d3331aa9995ddab8527132de706f6d9236/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=c65e18d3331aa9995ddab8527132de706f6d9236", "patch": "@@ -709,7 +709,7 @@ struct _cpp_dir_only_callbacks\n {\n   /* Called to print a block of lines. */\n   void (*print_lines) (int, const void *, size_t);\n-  void (*maybe_print_line) (source_location);\n+  bool (*maybe_print_line) (source_location);\n };\n \n extern void _cpp_preprocess_dir_only (cpp_reader *,"}]}