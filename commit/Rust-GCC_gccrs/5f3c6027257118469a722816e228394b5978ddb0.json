{"sha": "5f3c6027257118469a722816e228394b5978ddb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzYzYwMjcyNTcxMTg0NjlhNzIyODE2ZTIyODM5NGI1OTc4ZGRiMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-30T16:45:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-30T16:52:21Z"}, "message": "c++: duplicate const static members [PR 99283]\n\nThis is the bug that keeps on giving.  Reducing it has been successful\nat hitting other defects. In this case, some more specialization hash\ntable fun, plus an issue with reading in a definition of a duplicated\ndeclaration.  At least I discovered a null context check is no longer\nneeded.\n\n\tPR c++/99283\n\tgcc/cp/\n\t* module.cc (dumper::operator): Make less brittle.\n\t(trees_out::core_bools): VAR_DECLs always have a context.\n\t(trees_out::key_mergeable): Use same_type_p for asserting.\n\t(trees_in::read_var_def): Propagate\n\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99283-5.h: New.\n\t* g++.dg/modules/pr99283-5_a.H: New.\n\t* g++.dg/modules/pr99283-5_b.H: New.\n\t* g++.dg/modules/pr99283-5_c.C: New.", "tree": {"sha": "6e9fcebdfa65a81124a5bff9b307812dd79f419b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9fcebdfa65a81124a5bff9b307812dd79f419b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f3c6027257118469a722816e228394b5978ddb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3c6027257118469a722816e228394b5978ddb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3c6027257118469a722816e228394b5978ddb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3c6027257118469a722816e228394b5978ddb0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "953624089be3f51c2ebacba65be8521bf6ae8430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953624089be3f51c2ebacba65be8521bf6ae8430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953624089be3f51c2ebacba65be8521bf6ae8430"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "fab6b573d249f6c47e3f2ae1c6d0be48b02044c8", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=5f3c6027257118469a722816e228394b5978ddb0", "patch": "@@ -4325,8 +4325,8 @@ dumper::operator () (const char *format, ...)\n \tcase 'N': /* Name.  */\n \t  {\n \t    tree t = va_arg (args, tree);\n-\t    if (t && TREE_CODE (t) == OVERLOAD)\n-\t      t = OVL_FIRST (t);\n+\t    while (t && TREE_CODE (t) == OVERLOAD)\n+\t      t = OVL_FUNCTION (t);\n \t    fputc ('\\'', dumps->stream);\n \t    dumps->nested_name (t);\n \t    fputc ('\\'', dumps->stream);\n@@ -5206,8 +5206,7 @@ trees_out::core_bools (tree t)\n       else if (code == VAR_DECL)\n \t{\n \t  /* This is DECL_INITIALIZED_P.  */\n-\t  if (DECL_CONTEXT (t)\n-\t      && TREE_CODE (DECL_CONTEXT (t)) != FUNCTION_DECL)\n+\t  if (TREE_CODE (DECL_CONTEXT (t)) != FUNCTION_DECL)\n \t    /* We'll set this when reading the definition.  */\n \t    flag_1 = false;\n \t}\n@@ -10331,8 +10330,8 @@ trees_out::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \t      if (mk & MK_tmpl_alias_mask)\n \t\t/* It should be in both tables.  */\n \t\tgcc_checking_assert\n-\t\t  (match_mergeable_specialization (false, entry)\n-\t\t   == TREE_TYPE (existing));\n+\t\t  (same_type_p (match_mergeable_specialization (false, entry),\n+\t\t\t\tTREE_TYPE (existing)));\n \t      if (mk & MK_tmpl_tmpl_mask)\n \t\texisting = DECL_TI_TEMPLATE (existing);\n \t    }\n@@ -10345,7 +10344,10 @@ trees_out::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n \t    }\n \n \t  /* The walkabout should have found ourselves.  */\n-\t  gcc_checking_assert (existing == decl);\n+\t  gcc_checking_assert (TREE_CODE (decl) == TYPE_DECL\n+\t\t\t       ? same_type_p (TREE_TYPE (decl),\n+\t\t\t\t\t      TREE_TYPE (existing))\n+\t\t\t       : existing == decl);\n \t}\n     }\n   else if (mk != MK_unique)\n@@ -11513,7 +11515,11 @@ trees_in::read_var_def (tree decl, tree maybe_template)\n       if (DECL_EXTERNAL (decl))\n \tDECL_NOT_REALLY_EXTERN (decl) = true;\n       if (VAR_P (decl))\n-\tDECL_INITIALIZED_P (decl) = true;\n+\t{\n+\t  DECL_INITIALIZED_P (decl) = true;\n+\t  if (maybe_dup && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (maybe_dup))\n+\t    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = true;\n+\t}\n       DECL_INITIAL (decl) = init;\n       if (!dyn_init)\n \t;"}, {"sha": "3c3421f2d1c090b5c5516ad6e247578d3cb08aef", "filename": "gcc/testsuite/g++.dg/modules/pr99283-5.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5.h?ref=5f3c6027257118469a722816e228394b5978ddb0", "patch": "@@ -0,0 +1,9 @@\n+template<typename _Value>\n+struct __traits\n+{\n+  static const int __digits = 8;\n+  static const _Value __min = 0;\n+};\n+\n+template<typename _Value>\n+const _Value __traits<_Value>::__min;"}, {"sha": "6406dfe810224437f3bce4cc8a51835d0bb6783d", "filename": "gcc/testsuite/g++.dg/modules/pr99283-5_a.H", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_a.H?ref=5f3c6027257118469a722816e228394b5978ddb0", "patch": "@@ -0,0 +1,14 @@\n+// PR 99283 part 5\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+#include \"pr99283-5.h\"\n+\n+template<typename _Value>\n+const int __traits<_Value>::__digits;\n+\n+template<typename _Tp>\n+void Foo ()\n+{\n+  __traits<unsigned>::__digits;\n+}"}, {"sha": "3f4237e2e4f9095d347d8afe4883cfa5f76092ab", "filename": "gcc/testsuite/g++.dg/modules/pr99283-5_b.H", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_b.H?ref=5f3c6027257118469a722816e228394b5978ddb0", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options {-fmodule-header -fno-module-lazy} }\n+// { dg-module-cmi {} }\n+\n+#include \"pr99283-5.h\"\n+\n+template<typename _Tp>\n+void Bar ()\n+{\n+  __traits<unsigned>::__min;\n+}\n+\n+import  \"pr99283-5_a.H\";"}, {"sha": "cc7e795c8293f73b75194ca1a7c423c6b504462e", "filename": "gcc/testsuite/g++.dg/modules/pr99283-5_c.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3c6027257118469a722816e228394b5978ddb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-5_c.C?ref=5f3c6027257118469a722816e228394b5978ddb0", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options {-fmodules-ts -fno-module-lazy} }\n+\n+import  \"pr99283-5_b.H\";\n+\n+static_assert(!__traits<unsigned>::__min);"}]}