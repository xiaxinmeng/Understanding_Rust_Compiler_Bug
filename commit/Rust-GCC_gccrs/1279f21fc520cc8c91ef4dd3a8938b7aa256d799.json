{"sha": "1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3OWYyMWZjNTIwY2M4YzkxZWY0ZGQzYTg5MzhiN2FhMjU2ZDc5OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:56:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:56:04Z"}, "message": "cmd/go: gccgo: consistent results, fix vendoring\n    \n    Pass the -fdebug-prefix-map and -gno-record-gcc-switches compiler\n    options to gccgo to generate consistent results.\n    \n    Fix the vendoring code to look for /vendor/, not just /vendor, to\n    avoid being confused by something like vendor/vendor.org.\n    \n    Tested by the cmd/go tests in a followup CL.\n    \n    Reviewed-on: https://go-review.googlesource.com/45695\n\nFrom-SVN: r249198", "tree": {"sha": "57115a7915e8d1273fd8cd145fdd7b7a7422b2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57115a7915e8d1273fd8cd145fdd7b7a7422b2b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1279f21fc520cc8c91ef4dd3a8938b7aa256d799/comments", "author": null, "committer": null, "parents": [{"sha": "8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba20d7eb85ac1703d97c9a6660f055788a7a7a6"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "f1055bcb17d4f23baf98566b19fb5f406b02e460", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1279f21fc520cc8c91ef4dd3a8938b7aa256d799/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1279f21fc520cc8c91ef4dd3a8938b7aa256d799/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "patch": "@@ -1,4 +1,4 @@\n-6b08348d905bf84a91b8d693ee01b30e8bf18ccf\n+bc785455a35bfa7d4b0a66781c7c3ef08a24a845\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "7e98379675f94ca9c12343348d4b8c6e275c4560", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1279f21fc520cc8c91ef4dd3a8938b7aa256d799/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1279f21fc520cc8c91ef4dd3a8938b7aa256d799/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "patch": "@@ -2692,6 +2692,8 @@ func (tools gccgoToolchain) gc(b *builder, p *Package, archive, obj string, asmh\n \tofile = obj + out\n \tgcargs := []string{\"-g\"}\n \tgcargs = append(gcargs, b.gccArchArgs()...)\n+\tgcargs = append(gcargs, \"-fdebug-prefix-map=\"+b.work+\"=/tmp/go-build\")\n+\tgcargs = append(gcargs, \"-gno-record-gcc-switches\")\n \tif pkgpath := gccgoPkgpath(p); pkgpath != \"\" {\n \t\tgcargs = append(gcargs, \"-fgo-pkgpath=\"+pkgpath)\n \t}\n@@ -2707,14 +2709,14 @@ func (tools gccgoToolchain) gc(b *builder, p *Package, archive, obj string, asmh\n \n \tfor _, path := range p.Imports {\n \t\t// If this is a new vendor path, add it to the list of importArgs\n-\t\tif i := strings.LastIndex(path, \"/vendor\"); i >= 0 {\n+\t\tif i := strings.LastIndex(path, \"/vendor/\"); i >= 0 {\n \t\t\tfor _, dir := range savedirs {\n \t\t\t\t// Check if the vendor path is already included in dir\n-\t\t\t\tif strings.HasSuffix(dir, path[:i+len(\"/vendor\")]) {\n+\t\t\t\tif strings.HasSuffix(dir, path[:i+len(\"/vendor/\")]) {\n \t\t\t\t\tcontinue\n \t\t\t\t}\n \t\t\t\t// Make sure this vendor path is not already in the list for importArgs\n-\t\t\t\tvendorPath := dir + \"/\" + path[:i+len(\"/vendor\")]\n+\t\t\t\tvendorPath := dir + \"/\" + path[:i+len(\"/vendor/\")]\n \t\t\t\tfor _, imp := range importArgs {\n \t\t\t\t\tif imp == \"-I\" {\n \t\t\t\t\t\tcontinue\n@@ -2788,7 +2790,12 @@ func (gccgoToolchain) pack(b *builder, p *Package, objDir, afile string, ofiles\n \tfor _, f := range ofiles {\n \t\tabsOfiles = append(absOfiles, mkAbs(objDir, f))\n \t}\n-\treturn b.run(p.Dir, p.ImportPath, nil, \"ar\", \"rc\", mkAbs(objDir, afile), absOfiles)\n+\tabsAfile := mkAbs(objDir, afile)\n+\t// Try with D modifier first, then without if that fails.\n+\tif b.run(p.Dir, p.ImportPath, nil, \"ar\", \"rcD\", absAfile, absOfiles) != nil {\n+\t\treturn b.run(p.Dir, p.ImportPath, nil, \"ar\", \"rc\", absAfile, absOfiles)\n+\t}\n+\treturn nil\n }\n \n func (tools gccgoToolchain) link(b *builder, root *action, out string, allactions []*action, mainpkg string, ofiles []string, buildmode, desc string) error {\n@@ -3080,6 +3087,12 @@ func (tools gccgoToolchain) cc(b *builder, p *Package, objdir, ofile, cfile stri\n \t\tdefs = append(defs, \"-fsplit-stack\")\n \t}\n \tdefs = tools.maybePIC(defs)\n+\tif b.gccSupportsFlag(\"-fdebug-prefix-map=a=b\") {\n+\t\tdefs = append(defs, \"-fdebug-prefix-map=\"+b.work+\"=/tmp/go-build\")\n+\t}\n+\tif b.gccSupportsFlag(\"-gno-record-gcc-switches\") {\n+\t\tdefs = append(defs, \"-gno-record-gcc-switches\")\n+\t}\n \treturn b.run(p.Dir, p.ImportPath, nil, envList(\"CC\", defaultCC), \"-Wall\", \"-g\",\n \t\t\"-I\", objdir, \"-I\", inc, \"-o\", ofile, defs, \"-c\", cfile)\n }"}]}