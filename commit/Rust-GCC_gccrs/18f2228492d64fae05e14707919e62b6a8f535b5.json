{"sha": "18f2228492d64fae05e14707919e62b6a8f535b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmMjIyODQ5MmQ2NGZhZTA1ZTE0NzA3OTE5ZTYyYjZhOGY1MzViNQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2006-10-31T17:47:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:47:20Z"}, "message": "adaint.c (__gnat_get_libraries_from_registry): Call explicitly the ASCII version of the registry API.\n\n2006-10-31  Pascal Obry  <obry@adacore.com>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\t    Vincent Celier  <celier@adacore.com>\n\n\t* adaint.c (__gnat_get_libraries_from_registry): Call explicitly the\n\tASCII version of the registry API. This is needed as the GNAT runtime\n\tis now UNICODE by default.\n\tInclude version.h.\n\t(get_gcc_version): Do not hardcode the return value.\n\t(__gnat_file_time_name): On Windows properly set the default returned\n\tvalue to -1 which corresponds to Invalid_Time.\n\t(__gnat_fopen): New routine. A simple wrapper on all plateforms\n\t except on Windows where it does conversion for unicode support.\n\t(__gnat_freopen): Idem.\n\t(__gnat_locate_exec_on_path): If environment variable PATH does not\n\texist, return a NULL pointer\n\n\t* adaint.h: (__gnat_fopen): Declare.\n\t(__gnat_freopen): Likewise.\n\n\t* mingw32.h (_tfreopen): Define this macro here for older MingW\n\tversion.\n\tActivate the unicode support on platforms using a MingW runtime\n\tversion 3.9 or newer.\n\n\t* s-crtl.ads (fopen): Is now an import to the wrapper __gnat_freopen.\n\tThis is needed for proper unicode support on Windows.\n\t(freopen): Idem.\n\nFrom-SVN: r118240", "tree": {"sha": "55ea2708d17acf16323af0332d2a2f211874f3cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ea2708d17acf16323af0332d2a2f211874f3cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18f2228492d64fae05e14707919e62b6a8f535b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f2228492d64fae05e14707919e62b6a8f535b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f2228492d64fae05e14707919e62b6a8f535b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f2228492d64fae05e14707919e62b6a8f535b5/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1fa78e300ffbcc515c6d644d664f8a58c6f23c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fa78e300ffbcc515c6d644d664f8a58c6f23c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fa78e300ffbcc515c6d644d664f8a58c6f23c3"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "8705a93830df3a47c6ded7d47c4e59b3f572103d", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=18f2228492d64fae05e14707919e62b6a8f535b5", "patch": "@@ -73,6 +73,7 @@\n #else\n #include \"config.h\"\n #include \"system.h\"\n+#include \"version.h\"\n #endif\n \n #ifdef __MINGW32__\n@@ -610,6 +611,37 @@ __gnat_get_debuggable_suffix_ptr (int *len, const char **value)\n   return;\n }\n \n+FILE *\n+__gnat_fopen (char *path, char *mode)\n+{\n+#if defined (_WIN32) && ! defined (__vxworks) && ! defined (CROSS_COMPILE)\n+  TCHAR wpath[GNAT_MAX_PATH_LEN];\n+  TCHAR wmode[10];\n+\n+  S2WS (wpath, path, GNAT_MAX_PATH_LEN);\n+  S2WS (wmode, mode, 10);\n+  return _tfopen (wpath, wmode);\n+#else\n+  return fopen (path, mode);\n+#endif\n+}\n+\n+\n+FILE *\n+__gnat_freopen (char *path, char *mode, FILE *stream)\n+{\n+#if defined (_WIN32) && ! defined (__vxworks) && ! defined (CROSS_COMPILE)\n+  TCHAR wpath[GNAT_MAX_PATH_LEN];\n+  TCHAR wmode[10];\n+\n+  S2WS (wpath, path, GNAT_MAX_PATH_LEN);\n+  S2WS (wmode, mode, 10);\n+  return _tfreopen (wpath, wmode, stream);\n+#else\n+  return freopen (path, mode, stream);\n+#endif\n+}\n+\n int\n __gnat_open_read (char *path, int fmode)\n {\n@@ -1023,7 +1055,7 @@ __gnat_file_time_name (char *name)\n   return (OS_Time)ret;\n \n #elif defined (_WIN32)\n-  time_t ret = 0;\n+  time_t ret = -1;\n   TCHAR wname[GNAT_MAX_PATH_LEN];\n \n   S2WS (wname, name, GNAT_MAX_PATH_LEN);\n@@ -1398,8 +1430,8 @@ __gnat_get_libraries_from_registry (void)\n   for (index = 0; res == ERROR_SUCCESS; index++)\n     {\n       value_size = name_size = 256;\n-      res = RegEnumValue (reg_key, index, (TCHAR*)name, &name_size, 0,\n-                          &type, (LPBYTE)value, &value_size);\n+      res = RegEnumValueA (reg_key, index, (TCHAR*)name, &name_size, 0,\n+                           &type, (LPBYTE)value, &value_size);\n \n       if (res == ERROR_SUCCESS && type == REG_SZ)\n         {\n@@ -2123,6 +2155,7 @@ __gnat_locate_exec_on_path (char *exec_name)\n #else\n   char *path_val = getenv (\"PATH\");\n #endif\n+  if (path_val == NULL) return NULL;\n   apath_val = alloca (strlen (path_val) + 1);\n   strcpy (apath_val, path_val);\n   return __gnat_locate_exec (exec_name, apath_val);\n@@ -2675,11 +2708,15 @@ __gnat_lseek (int fd, long offset, int whence)\n   return (int) lseek (fd, offset, whence);\n }\n \n-/* This function returns the version of GCC being used.  Here it's GCC 3.  */\n+/* This function returns the major version number of GCC being used.  */\n int\n get_gcc_version (void)\n {\n-  return 3;\n+#ifdef IN_RTS\n+  return __GNUC__;\n+#else\n+  return (int) (version_string[0] - '0');\n+#endif\n }\n \n int"}, {"sha": "3dbc9a44531e4dc5324e48ea4519e75deb9140dc", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=18f2228492d64fae05e14707919e62b6a8f535b5", "patch": "@@ -66,6 +66,8 @@ extern int    __gnat_open_new_temp\t\t   (char *, int);\n extern int    __gnat_mkdir\t\t\t   (char *);\n extern int    __gnat_stat\t\t\t   (char *,\n \t\t\t\t\t\t    struct stat *);\n+extern FILE  *__gnat_fopen\t\t\t   (char *, char *);\n+extern FILE  *__gnat_freopen\t\t\t   (char *, char *, FILE *);\n extern int    __gnat_open_read                     (char *, int);\n extern int    __gnat_open_rw                       (char *, int);\n extern int    __gnat_open_create                   (char *, int);"}, {"sha": "1f5a7115a4469c1201cadd6eaef6fbf507893127", "filename": "gcc/ada/mingw32.h", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmingw32.h?ref=18f2228492d64fae05e14707919e62b6a8f535b5", "patch": "@@ -31,15 +31,30 @@\n  ****************************************************************************/\n \n /*  This file provides some macros used for the MINGW32 platform. The main\n-    goal is to be able to build GNAT with a standard MINGW32 C header set */\n+    goal is to be able to build GNAT with a standard MINGW32 C header\n+    set. This files contains also the circuitry for the unicode support.   */\n \n #ifndef _MINGW32_H\n #define _MINGW32_H\n \n+/* The unicode support is activated by default starting with the 3.9 MingW\n+   version. It is not possible to use it with previous version due to a bug\n+   in the MingW runtime.  */\n \n+#if ((__MINGW32_MAJOR_VERSION == 3 \\\n+\t\t   && __MINGW32_MINOR_VERSION >= 9) \\\n+     || (__MINGW32_MAJOR_VERSION >= 4))\n+#define GNAT_UNICODE_SUPPORT\n \n-/* Uncomment to activate the GNAT Unicode support. */\n-/*#define GNAT_UNICODE_SUPPORT */\n+#else\n+\n+/*  Older MingW versions have no defintion for _tfreopen, add it here to have a\n+    proper build without unicode support.  */\n+#ifndef _tfreopen\n+#define _tfreopen   freopen\n+#endif\n+\n+#endif\n \n #ifdef GNAT_UNICODE_SUPPORT\n #define _UNICODE /* For C runtime */\n@@ -50,7 +65,7 @@\n \n /* After including this file it is possible to use the character t as prefix\n    to routines. If GNAT_UNICODE_SUPPORT is defined then the unicode enabled\n-   versions will be used. */\n+   versions will be used.  */\n \n /* Copy to/from wide-string, if GNAT_UNICODE_SUPPORT activated this will do\n    the proper translations using the UTF-8 encoding.  */\n@@ -71,7 +86,7 @@\n    version instead of the previous enhanced version to ease building GNAT on\n    Windows platforms. By using STD_MINGW or OLD_MINGW it is possible to build\n    GNAT using both MingW include files (Old MingW + ACT changes and standard\n-   MingW starting with version 1.3. */\n+   MingW starting with version 1.3.  */\n #define STD_MINGW ((__MINGW32_MAJOR_VERSION == 1 \\\n \t\t   && __MINGW32_MINOR_VERSION >= 3) \\\n      || (__MINGW32_MAJOR_VERSION >= 2))"}, {"sha": "53977768c5dcfe82316a8337c8a306433f8b2011", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2228492d64fae05e14707919e62b6a8f535b5/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=18f2228492d64fae05e14707919e62b6a8f535b5", "patch": "@@ -85,7 +85,7 @@ package System.CRTL is\n    pragma Import (C, fgets, \"fgets\");\n \n    function fopen (filename : chars; Mode : chars) return FILEs;\n-   pragma Import (C, fopen, \"fopen\");\n+   pragma Import (C, fopen, \"__gnat_fopen\");\n \n    function fputc (C : int; stream : FILEs) return int;\n    pragma Import (C, fputc, \"fputc\");\n@@ -101,7 +101,7 @@ package System.CRTL is\n       mode     : chars;\n       stream   : FILEs)\n       return     FILEs;\n-   pragma Import (C, freopen, \"freopen\");\n+   pragma Import (C, freopen, \"__gnat_freopen\");\n \n    function fseek\n      (stream : FILEs;"}]}