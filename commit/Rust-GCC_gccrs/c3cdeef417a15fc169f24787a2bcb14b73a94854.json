{"sha": "c3cdeef417a15fc169f24787a2bcb14b73a94854", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNjZGVlZjQxN2ExNWZjMTY5ZjI0Nzg3YTJiY2IxNGI3M2E5NDg1NA==", "commit": {"author": {"name": "Joel Brobecker", "email": "brobecker@gnat.com", "date": "2003-04-21T20:39:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T20:39:04Z"}, "message": "dwarf2out.c (is_ada, [...]): New functions.\n\n\t* dwarf2out.c (is_ada, is_ada_subrange_type): New functions.\n\t(subrange_type_die): Likewise.\n\t(modified_type_die): Emit a subrange_type DIE for Ada subrange types.\n\t(is_c_family, is_cxx, is_java, is_fortran): Return bool and clean up.\n\nFrom-SVN: r65898", "tree": {"sha": "0880234af21725ea14a72f3514cb9d0365bc7497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0880234af21725ea14a72f3514cb9d0365bc7497"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3cdeef417a15fc169f24787a2bcb14b73a94854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cdeef417a15fc169f24787a2bcb14b73a94854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3cdeef417a15fc169f24787a2bcb14b73a94854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3cdeef417a15fc169f24787a2bcb14b73a94854/comments", "author": null, "committer": null, "parents": [{"sha": "ca29da43014c4d9b8622d345f674c03719764273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca29da43014c4d9b8622d345f674c03719764273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca29da43014c4d9b8622d345f674c03719764273"}], "stats": {"total": 100, "additions": 87, "deletions": 13}, "files": [{"sha": "c5d792eb779324061f630d41851ec13bf24faf0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cdeef417a15fc169f24787a2bcb14b73a94854/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cdeef417a15fc169f24787a2bcb14b73a94854/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3cdeef417a15fc169f24787a2bcb14b73a94854", "patch": "@@ -1,3 +1,10 @@\n+2003-04-21  Joel Brobecker  <brobecker@gnat.com>\n+\n+\t* dwarf2out.c (is_ada, is_ada_subrange_type): New functions.\n+\t(subrange_type_die): Likewise.\n+\t(modified_type_die): Emit a subrange_type DIE for Ada subrange types.\n+\t(is_c_family, is_cxx, is_java, is_fortran): Return bool and clean up.\n+\n 2003-04-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n         Break out coverage routines to new file."}, {"sha": "0b1e25bbec7420706403ee2bb486add875a5ebcd", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 80, "deletions": 13, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3cdeef417a15fc169f24787a2bcb14b73a94854/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3cdeef417a15fc169f24787a2bcb14b73a94854/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c3cdeef417a15fc169f24787a2bcb14b73a94854", "patch": "@@ -3688,10 +3688,11 @@ static unsigned get_AT_unsigned\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute));\n static inline dw_die_ref get_AT_ref \tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute));\n-static int is_c_family\t\t\tPARAMS ((void));\n-static int is_cxx\t\t\tPARAMS ((void));\n-static int is_java\t\t\tPARAMS ((void));\n-static int is_fortran\t\t\tPARAMS ((void));\n+static bool is_c_family\t\t\tPARAMS ((void));\n+static bool is_cxx\t\t\tPARAMS ((void));\n+static bool is_java\t\t\tPARAMS ((void));\n+static bool is_fortran\t\t\tPARAMS ((void));\n+static bool is_ada\t\t\tPARAMS ((void));\n static void remove_AT\t\t\tPARAMS ((dw_die_ref,\n \t\t\t\t\t\t enum dwarf_attribute));\n static inline void free_die\t\tPARAMS ((dw_die_ref));\n@@ -3766,6 +3767,8 @@ static void output_file_names           PARAMS ((void));\n static dw_die_ref base_type_die\t\tPARAMS ((tree));\n static tree root_type\t\t\tPARAMS ((tree));\n static int is_base_type\t\t\tPARAMS ((tree));\n+static bool is_ada_subrange_type        PARAMS ((tree));\n+static dw_die_ref subrange_type_die     PARAMS ((tree));\n static dw_die_ref modified_type_die\tPARAMS ((tree, int, int, dw_die_ref));\n static int type_is_enum\t\t\tPARAMS ((tree));\n static unsigned int reg_number\t\tPARAMS ((rtx));\n@@ -5090,36 +5093,54 @@ get_AT_ref (die, attr_kind)\n   return a ? AT_ref (a) : NULL;\n }\n \n-static inline int\n+/* Return TRUE if the language is C or C++.  */\n+\n+static inline bool\n is_c_family ()\n {\n-  unsigned lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n+  unsigned int lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n \n   return (lang == DW_LANG_C || lang == DW_LANG_C89\n \t  || lang == DW_LANG_C_plus_plus);\n }\n \n-static inline int\n+/* Return TRUE if the language is C++.  */\n+\n+static inline bool\n is_cxx ()\n {\n   return (get_AT_unsigned (comp_unit_die, DW_AT_language)\n \t  == DW_LANG_C_plus_plus);\n }\n \n-static inline int\n+/* Return TRUE if the language is Fortran.  */\n+\n+static inline bool\n is_fortran ()\n {\n-  unsigned lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n+  unsigned int lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n \n-  return (lang == DW_LANG_Fortran77 || lang == DW_LANG_Fortran90);\n+  return lang == DW_LANG_Fortran77 || lang == DW_LANG_Fortran90;\n }\n \n-static inline int\n+/* Return TRUE if the language is Java.  */\n+\n+static inline bool\n is_java ()\n {\n-  unsigned lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n+  unsigned int lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n \n-  return (lang == DW_LANG_Java);\n+  return lang == DW_LANG_Java;\n+}\n+\n+/* Return TRUE if the language is Ada.  */\n+\n+static inline bool\n+is_ada ()\n+{\n+  unsigned int lang = get_AT_unsigned (comp_unit_die, DW_AT_language);\n+  \n+  return lang == DW_LANG_Ada95 || lang == DW_LANG_Ada83;\n }\n \n /* Free up the memory used by A.  */\n@@ -8028,6 +8049,50 @@ simple_type_size_in_bits (type)\n     return TYPE_ALIGN (type);\n }\n \n+/* Return true if the debug information for the given type should be\n+   emitted as a subrange type.  */\n+\n+static inline bool\n+is_ada_subrange_type (type)\n+    tree type;\n+{\n+  /* We do this for INTEGER_TYPEs that have names, parent types, and when\n+     we are compiling Ada code.  */\n+  return (TREE_CODE (type) == INTEGER_TYPE\n+\t  && TYPE_NAME (type) != 0 && TREE_TYPE (type) != 0\n+\t  && TREE_CODE (TREE_TYPE (type)) == INTEGER_TYPE\n+\t  && TREE_UNSIGNED (TREE_TYPE (type)) && is_ada ());\n+}\n+\n+/*  Given a pointer to a tree node for a subrange type, return a pointer\n+    to a DIE that describes the given type.  */\n+\n+static dw_die_ref\n+subrange_type_die (type)\n+    tree type;\n+{\n+  dw_die_ref subtype_die;\n+  dw_die_ref subrange_die;\n+  tree name = TYPE_NAME (type);\n+  \n+  subtype_die = base_type_die (TREE_TYPE (type));\n+\n+  if (TREE_CODE (name) == TYPE_DECL)\n+    name = DECL_NAME (name);\n+\n+  subrange_die = new_die (DW_TAG_subrange_type, comp_unit_die, type);\n+  add_name_attribute (subrange_die, IDENTIFIER_POINTER (name));\n+  if (TYPE_MIN_VALUE (type) != NULL)\n+    add_bound_info (subrange_die, DW_AT_lower_bound,\n+                    TYPE_MIN_VALUE (type));\n+  if (TYPE_MAX_VALUE (type) != NULL)\n+    add_bound_info (subrange_die, DW_AT_upper_bound,\n+                    TYPE_MAX_VALUE (type));\n+  add_AT_die_ref (subrange_die, DW_AT_type, subtype_die);\n+\n+  return subrange_die;\n+}\n+\n /* Given a pointer to an arbitrary ..._TYPE tree node, return a debugging\n    entry that chains various modifiers in front of the given type.  */\n \n@@ -8122,6 +8187,8 @@ modified_type_die (type, is_const_type, is_volatile_type, context_die)\n #endif\n \t  item_type = TREE_TYPE (type);\n \t}\n+      else if (is_ada_subrange_type (type))\n+        mod_type_die = subrange_type_die (type);\n       else if (is_base_type (type))\n \tmod_type_die = base_type_die (type);\n       else"}]}