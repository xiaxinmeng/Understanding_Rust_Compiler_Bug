{"sha": "12463f1ecbcb30b39b8212454a6e598645123305", "node_id": "C_kwDOANBUbNoAKDEyNDYzZjFlY2JjYjMwYjM5YjgyMTI0NTRhNmU1OTg2NDUxMjMzMDU", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-03-01T22:13:17Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-03-02T18:23:27Z"}, "message": "Fortran: error recovery after invalid assumed type declaration\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/104573\n\t* resolve.cc (resolve_structure_cons): Avoid NULL pointer\n\tdereference when there is no valid component.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/104573\n\t* gfortran.dg/assumed_type_14.f90: New test.", "tree": {"sha": "bf2f0be010efb094ae4ecd45078c6414d7c64c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf2f0be010efb094ae4ecd45078c6414d7c64c14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12463f1ecbcb30b39b8212454a6e598645123305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12463f1ecbcb30b39b8212454a6e598645123305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12463f1ecbcb30b39b8212454a6e598645123305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12463f1ecbcb30b39b8212454a6e598645123305/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38c1731193fe12d951f3010880406505507d90c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c1731193fe12d951f3010880406505507d90c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c1731193fe12d951f3010880406505507d90c1"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "0afa5d3346af203dd42c2de4af5c3fa71f61d875", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12463f1ecbcb30b39b8212454a6e598645123305/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12463f1ecbcb30b39b8212454a6e598645123305/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=12463f1ecbcb30b39b8212454a6e598645123305", "patch": "@@ -1288,15 +1288,19 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t}\n     }\n \n-  cons = gfc_constructor_first (expr->value.constructor);\n-\n   /* A constructor may have references if it is the result of substituting a\n      parameter variable.  In this case we just pull out the component we\n      want.  */\n   if (expr->ref)\n     comp = expr->ref->u.c.sym->components;\n-  else\n+  else if ((expr->ts.type == BT_DERIVED || expr->ts.type == BT_CLASS\n+\t    || expr->ts.type == BT_UNION)\n+\t   && expr->ts.u.derived)\n     comp = expr->ts.u.derived->components;\n+  else\n+    return false;\n+\n+  cons = gfc_constructor_first (expr->value.constructor);\n \n   for (; comp && cons; comp = comp->next, cons = gfc_constructor_next (cons))\n     {"}, {"sha": "112cde34b27b9248b1d7b6e2cb343612618d6dce", "filename": "gcc/testsuite/gfortran.dg/assumed_type_14.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12463f1ecbcb30b39b8212454a6e598645123305/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12463f1ecbcb30b39b8212454a6e598645123305/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_14.f90?ref=12463f1ecbcb30b39b8212454a6e598645123305", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! PR fortran/104573 - ICE in resolve_structure_cons\n+! Contributed by G.Steinmetz\n+! Contributed by M.Morin\n+\n+program p\n+  type t\n+  end type\n+  type(*), parameter :: x = t() ! { dg-error \"Assumed type of variable\" }\n+  print *, x\n+end\n+\n+subroutine s\n+  type t\n+     integer :: a\n+  end type\n+  character(3), parameter :: x = t(2) ! { dg-error \"Cannot convert\" }\n+  character(3), parameter :: y = x    ! { dg-error \"Unclassifiable statement\" }\n+  print *, y\n+end\n+\n+! { dg-prune-output \"Cannot convert\" }"}]}