{"sha": "f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBhYjZiZjI5YzlhZTVkY2JhMzk1Nzk1OGNlNmUyYWUxZDA2OWIwZg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-07-11T22:34:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-07-11T22:34:58Z"}, "message": "re PR c++/7224 (g++ 3.x does not tecognize unused ambiguous inline member functions)\n\n\tPR c++/7224\n\t* class.c (add_method): Simplify.\n\n\tPR c++/7224\n\t* g++.dg/overload/error1.C: New test.\n\nFrom-SVN: r55409", "tree": {"sha": "90f277ecbe5b38cb2556b27b25b668755cb1360e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f277ecbe5b38cb2556b27b25b668755cb1360e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/comments", "author": null, "committer": null, "parents": [{"sha": "c5386123677295d63cc927c7534a38ca746caba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5386123677295d63cc927c7534a38ca746caba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5386123677295d63cc927c7534a38ca746caba8"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "38de1a298e586c3023f62659b8aac5e0d461b5ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "patch": "@@ -1,3 +1,8 @@\n+2002-07-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7224\n+\t* class.c (add_method): Simplify.\n+\n 2002-07-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/7279"}, {"sha": "5222665f7bdf1c1d027ba8e1761dc385314f0e57", "filename": "gcc/cp/class.c", "status": "modified", "additions": 44, "deletions": 56, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "patch": "@@ -966,69 +966,57 @@ add_method (type, method, error_p)\n \t   fns = OVL_NEXT (fns))\n \t{\n \t  tree fn = OVL_CURRENT (fns);\n-\t\t \n+\t  tree parms1;\n+\t  tree parms2;\n+\t  bool same = 1;\n+\n \t  if (TREE_CODE (fn) != TREE_CODE (method))\n \t    continue;\n \n-\t  if (TREE_CODE (method) != TEMPLATE_DECL)\n+\t  /* [over.load] Member function declarations with the\n+\t     same name and the same parameter types cannot be\n+\t     overloaded if any of them is a static member\n+\t     function declaration.\n+\n+\t     [namespace.udecl] When a using-declaration brings names\n+\t     from a base class into a derived class scope, member\n+\t     functions in the derived class override and/or hide member\n+\t     functions with the same name and parameter types in a base\n+\t     class (rather than conflicting).  */\n+\t  parms1 = TYPE_ARG_TYPES (TREE_TYPE (fn));\n+\t  parms2 = TYPE_ARG_TYPES (TREE_TYPE (method));\n+\n+\t  /* Compare the quals on the 'this' parm.  Don't compare\n+\t     the whole types, as used functions are treated as\n+\t     coming from the using class in overload resolution.  */\n+\t  if (! DECL_STATIC_FUNCTION_P (fn)\n+\t      && ! DECL_STATIC_FUNCTION_P (method)\n+\t      && (TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms1)))\n+\t\t  != TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms2)))))\n+\t    same = 0;\n+\t  if (! DECL_STATIC_FUNCTION_P (fn))\n+\t    parms1 = TREE_CHAIN (parms1);\n+\t  if (! DECL_STATIC_FUNCTION_P (method))\n+\t    parms2 = TREE_CHAIN (parms2);\n+\n+\t  if (same && compparms (parms1, parms2))\n \t    {\n-\t      /* [over.load] Member function declarations with the\n-\t\t same name and the same parameter types cannot be\n-\t\t overloaded if any of them is a static member\n-\t\t function declaration.\n-\n-\t         [namespace.udecl] When a using-declaration brings names\n-\t\t from a base class into a derived class scope, member\n-\t\t functions in the derived class override and/or hide member\n-\t\t functions with the same name and parameter types in a base\n-\t\t class (rather than conflicting).  */\n-\t      if ((DECL_STATIC_FUNCTION_P (fn)\n-\t\t   != DECL_STATIC_FUNCTION_P (method))\n-\t\t  || using)\n+\t      if (using && DECL_CONTEXT (fn) == type)\n+\t\t/* Defer to the local function.  */\n+\t\treturn;\n+\t      else\n \t\t{\n-\t\t  tree parms1 = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-\t\t  tree parms2 = TYPE_ARG_TYPES (TREE_TYPE (method));\n-\t\t  int same = 1;\n-\n-\t\t  /* Compare the quals on the 'this' parm.  Don't compare\n-\t\t     the whole types, as used functions are treated as\n-\t\t     coming from the using class in overload resolution.  */\n-\t\t  if (using\n-\t\t      && ! DECL_STATIC_FUNCTION_P (fn)\n-\t\t      && ! DECL_STATIC_FUNCTION_P (method)\n-\t\t      && (TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms1)))\n-\t\t\t  != TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms2)))))\n-\t\t    same = 0;\n-\t\t  if (! DECL_STATIC_FUNCTION_P (fn))\n-\t\t    parms1 = TREE_CHAIN (parms1);\n-\t\t  if (! DECL_STATIC_FUNCTION_P (method))\n-\t\t    parms2 = TREE_CHAIN (parms2);\n-\n-\t\t  if (same && compparms (parms1, parms2))\n-\t\t    {\n-\t\t      if (using && DECL_CONTEXT (fn) == type)\n-\t\t\t/* Defer to the local function.  */\n-\t\t\treturn;\n-\t\t      else\n-\t\t\terror (\"`%#D' and `%#D' cannot be overloaded\",\n-\t\t\t\t  fn, method);\n-\t\t    }\n+\t\t  cp_error_at (\"`%#D' and `%#D' cannot be overloaded\",\n+\t\t\t       method, fn, method);\n+\n+\t\t  /* We don't call duplicate_decls here to merge\n+\t\t     the declarations because that will confuse\n+\t\t     things if the methods have inline\n+\t\t     definitions.  In particular, we will crash\n+\t\t     while processing the definitions.  */\n+\t\t  return;\n \t\t}\n \t    }\n-\n-\t  if (!decls_match (fn, method))\n-\t    continue;\n-\n-\t  /* There has already been a declaration of this method\n-\t     or member template.  */\n-\t  cp_error_at (\"`%D' has already been declared in `%T'\", \n-\t\t       method, type);\n-\n-\t  /* We don't call duplicate_decls here to merge the\n-\t     declarations because that will confuse things if the\n-\t     methods have inline definitions.  In particular, we\n-\t     will crash while processing the definitions.  */\n-\t  return;\n \t}\n     }\n "}, {"sha": "13605c9e619cb7486d0692782bff689140c46598", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "patch": "@@ -1,3 +1,8 @@\n+2002-07-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7224\n+\t* g++.dg/overload/error1.C: New test.\n+\t\n 2002-07-11  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* gcc.misc-tests/linkage.exp: Handle mips-sgi-irix6*o32"}, {"sha": "fcaa445201e5d8581e737b882e6d3fdad16f6260", "filename": "gcc/testsuite/g++.dg/overload/error1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Ferror1.C?ref=f0ab6bf29c9ae5dcba3957958ce6e2ae1d069b0f", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+\n+struct S\n+{\n+  void f () {}\n+  int f () { return 0; } // { dg-error \"\" \"\" }\n+};"}]}