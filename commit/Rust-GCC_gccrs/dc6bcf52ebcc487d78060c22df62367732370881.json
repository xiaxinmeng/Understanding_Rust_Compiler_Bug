{"sha": "dc6bcf52ebcc487d78060c22df62367732370881", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2YmNmNTJlYmNjNDg3ZDc4MDYwYzIyZGY2MjM2NzczMjM3MDg4MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-06-30T08:26:57Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-30T08:26:57Z"}, "message": "lex.c (search_line_sse42): New main loop using asm flag outputs.\n\n\t* lex.c (search_line_sse42) [__GCC_ASM_FLAG_OUTPUTS__]: New main\n\tloop using asm flag outputs.\n\nFrom-SVN: r225160", "tree": {"sha": "3e649d9c12df346a13be8355f1c9a4a10b867abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e649d9c12df346a13be8355f1c9a4a10b867abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6bcf52ebcc487d78060c22df62367732370881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6bcf52ebcc487d78060c22df62367732370881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6bcf52ebcc487d78060c22df62367732370881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6bcf52ebcc487d78060c22df62367732370881/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e6a6f0d6e48c84fa704f11e94ee8db207afd01e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6a6f0d6e48c84fa704f11e94ee8db207afd01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e6a6f0d6e48c84fa704f11e94ee8db207afd01e"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "c7ac1e3aec021da7bbc247baa44c67fbd5f92815", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6bcf52ebcc487d78060c22df62367732370881/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6bcf52ebcc487d78060c22df62367732370881/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=dc6bcf52ebcc487d78060c22df62367732370881", "patch": "@@ -1,3 +1,8 @@\n+2015-06-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* lex.c (search_line_sse42) [__GCC_ASM_FLAG_OUTPUTS__]: New main\n+\tloop using asm flag outputs.\n+\n 2015-06-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/66415"}, {"sha": "5758e580c2ba09729a0e5874c838691c44ee6102", "filename": "libcpp/lex.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6bcf52ebcc487d78060c22df62367732370881/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6bcf52ebcc487d78060c22df62367732370881/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=dc6bcf52ebcc487d78060c22df62367732370881", "patch": "@@ -450,15 +450,33 @@ search_line_sse42 (const uchar *s, const uchar *end)\n       s = (const uchar *)((si + 16) & -16);\n     }\n \n-  /* Main loop, processing 16 bytes at a time.  By doing the whole loop\n-     in inline assembly, we can make proper use of the flags set.  */\n-  __asm (      \"sub $16, %1\\n\"\n-\t\"\t.balign 16\\n\"\n+  /* Main loop, processing 16 bytes at a time.  */\n+#ifdef __GCC_ASM_FLAG_OUTPUTS__\n+  while (1)\n+    {\n+      char f;\n+\n+      /* By using inline assembly instead of the builtin,\n+\t we can use the result, as well as the flags set.  */\n+      __asm (\"%vpcmpestri\\t$0, %2, %3\"\n+\t     : \"=c\"(index), \"=@ccc\"(f)\n+\t     : \"m\"(*s), \"x\"(search), \"a\"(4), \"d\"(16));\n+      if (f)\n+\tbreak;\n+      \n+      s += 16;\n+    }\n+#else\n+  s -= 16;\n+  /* By doing the whole loop in inline assembly,\n+     we can make proper use of the flags set.  */\n+  __asm (      \".balign 16\\n\"\n \t\"0:\tadd $16, %1\\n\"\n-\t\"\t%vpcmpestri $0, (%1), %2\\n\"\n+\t\"\t%vpcmpestri\\t$0, (%1), %2\\n\"\n \t\"\tjnc 0b\"\n \t: \"=&c\"(index), \"+r\"(s)\n \t: \"x\"(search), \"a\"(4), \"d\"(16));\n+#endif\n \n  found:\n   return s + index;"}]}