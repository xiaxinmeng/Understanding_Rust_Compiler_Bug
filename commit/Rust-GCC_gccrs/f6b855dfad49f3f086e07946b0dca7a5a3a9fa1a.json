{"sha": "f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiODU1ZGZhZDQ5ZjNmMDg2ZTA3OTQ2YjBkY2E3YTVhM2E5ZmExYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-05-26T06:04:16Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-05-26T06:04:16Z"}, "message": "gfortran.h (GFC_MPC_RND_MODE): New.\n\n\t* gfortran.h (GFC_MPC_RND_MODE): New.\n\t* simplify.c (call_mpc_func): New helper function.\n\t(gfc_simplify_cos, gfc_simplify_exp, gfc_simplify_log,\n\tgfc_simplify_sin, gfc_simplify_sqrt): Add MPC support.\n\nFrom-SVN: r147860", "tree": {"sha": "f4a3503e989e32fa35289f0cf5fa472564895bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a3503e989e32fa35289f0cf5fa472564895bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/comments", "author": null, "committer": null, "parents": [{"sha": "a30d7997f3d31c0785032a6db5bd77de37237bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30d7997f3d31c0785032a6db5bd77de37237bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30d7997f3d31c0785032a6db5bd77de37237bba"}], "stats": {"total": 75, "additions": 67, "deletions": 8}, "files": [{"sha": "9530de9abc51a468d29aa0602c571388d03ce4c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "patch": "@@ -1,3 +1,10 @@\n+2009-05-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gfortran.h (GFC_MPC_RND_MODE): New.\n+\t* simplify.c (call_mpc_func): New helper function.\n+\t(gfc_simplify_cos, gfc_simplify_exp, gfc_simplify_log,\n+\tgfc_simplify_sin, gfc_simplify_sqrt): Add MPC support.\n+\n 2009-05-25  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40176"}, {"sha": "82f07ef005220c826394543b4b5d652b893b9311", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "patch": "@@ -1556,6 +1556,7 @@ gfc_intrinsic_sym;\n #include <gmp.h>\n #include <mpfr.h>\n #define GFC_RND_MODE GMP_RNDN\n+#define GFC_MPC_RND_MODE MPC_RNDNN\n \n typedef struct gfc_expr\n {"}, {"sha": "4dd114b532f649730e29d1998f585570b9bf64b7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=f6b855dfad49f3f086e07946b0dca7a5a3a9fa1a", "patch": "@@ -210,6 +210,24 @@ convert_mpz_to_signed (mpz_t x, int bitsize)\n     }\n }\n \n+/* Helper function to convert to/from mpfr_t & mpc_t and call the\n+   supplied mpc function on the respective values.  */\n+\n+#ifdef HAVE_mpc\n+static void\n+call_mpc_func (mpfr_ptr result_re, mpfr_ptr result_im,\n+\t       mpfr_srcptr input_re, mpfr_srcptr input_im,\n+\t       int (*func)(mpc_ptr, mpc_srcptr, mpc_rnd_t))\n+{\n+  mpc_t c;\n+  mpc_init2 (c, mpfr_get_default_prec());\n+  mpc_set_fr_fr (c, input_re, input_im, GFC_MPC_RND_MODE);\n+  func (c, c, GFC_MPC_RND_MODE);\n+  mpfr_set (result_re, MPC_RE (c), GFC_RND_MODE);\n+  mpfr_set (result_im, MPC_IM (c), GFC_RND_MODE);\n+  mpc_clear (c);\n+}\n+#endif\n \n /********************** Simplification functions *****************************/\n \n@@ -985,7 +1003,6 @@ gfc_expr *\n gfc_simplify_cos (gfc_expr *x)\n {\n   gfc_expr *result;\n-  mpfr_t xp, xq;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -999,6 +1016,12 @@ gfc_simplify_cos (gfc_expr *x)\n       break;\n     case BT_COMPLEX:\n       gfc_set_model_kind (x->ts.kind);\n+#ifdef HAVE_mpc\n+      call_mpc_func (result->value.complex.r, result->value.complex.i,\n+\t\t     x->value.complex.r, x->value.complex.i, mpc_cos);\n+#else\n+    {\n+      mpfr_t xp, xq;\n       mpfr_init (xp);\n       mpfr_init (xq);\n \n@@ -1012,6 +1035,8 @@ gfc_simplify_cos (gfc_expr *x)\n       mpfr_neg (result->value.complex.i, xp, GFC_RND_MODE );\n \n       mpfr_clears (xp, xq, NULL);\n+    }\n+#endif\n       break;\n     default:\n       gfc_internal_error (\"in gfc_simplify_cos(): Bad type\");\n@@ -1370,7 +1395,6 @@ gfc_expr *\n gfc_simplify_exp (gfc_expr *x)\n {\n   gfc_expr *result;\n-  mpfr_t xp, xq;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -1385,6 +1409,12 @@ gfc_simplify_exp (gfc_expr *x)\n \n     case BT_COMPLEX:\n       gfc_set_model_kind (x->ts.kind);\n+#ifdef HAVE_mpc\n+      call_mpc_func (result->value.complex.r, result->value.complex.i,\n+\t\t     x->value.complex.r, x->value.complex.i, mpc_exp);\n+#else\n+    {\n+      mpfr_t xp, xq;\n       mpfr_init (xp);\n       mpfr_init (xq);\n       mpfr_exp (xq, x->value.complex.r, GFC_RND_MODE);\n@@ -1393,6 +1423,8 @@ gfc_simplify_exp (gfc_expr *x)\n       mpfr_sin (xp, x->value.complex.i, GFC_RND_MODE);\n       mpfr_mul (result->value.complex.i, xq, xp, GFC_RND_MODE);\n       mpfr_clears (xp, xq, NULL);\n+    }\n+#endif\n       break;\n \n     default:\n@@ -2688,7 +2720,6 @@ gfc_expr *\n gfc_simplify_log (gfc_expr *x)\n {\n   gfc_expr *result;\n-  mpfr_t xr, xi;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -2721,6 +2752,12 @@ gfc_simplify_log (gfc_expr *x)\n \t}\n \n       gfc_set_model_kind (x->ts.kind);\n+#ifdef HAVE_mpc\n+      call_mpc_func (result->value.complex.r, result->value.complex.i,\n+\t\t     x->value.complex.r, x->value.complex.i, mpc_log);\n+#else\n+    {\n+      mpfr_t xr, xi;\n       mpfr_init (xr);\n       mpfr_init (xi);\n \n@@ -2734,7 +2771,8 @@ gfc_simplify_log (gfc_expr *x)\n       mpfr_log (result->value.complex.r, xr, GFC_RND_MODE);\n \n       mpfr_clears (xr, xi, NULL);\n-\n+    }\n+#endif\n       break;\n \n     default:\n@@ -4314,7 +4352,6 @@ gfc_expr *\n gfc_simplify_sin (gfc_expr *x)\n {\n   gfc_expr *result;\n-  mpfr_t xp, xq;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -4329,6 +4366,12 @@ gfc_simplify_sin (gfc_expr *x)\n \n     case BT_COMPLEX:\n       gfc_set_model (x->value.real);\n+#ifdef HAVE_mpc\n+      call_mpc_func (result->value.complex.r, result->value.complex.i,\n+\t\t     x->value.complex.r, x->value.complex.i, mpc_sin);\n+#else\n+    {\n+      mpfr_t xp, xq;\n       mpfr_init (xp);\n       mpfr_init (xq);\n \n@@ -4341,6 +4384,8 @@ gfc_simplify_sin (gfc_expr *x)\n       mpfr_mul (result->value.complex.i, xp, xq, GFC_RND_MODE);\n \n       mpfr_clears (xp, xq, NULL);\n+    }\n+#endif\n       break;\n \n     default:\n@@ -4425,7 +4470,6 @@ gfc_expr *\n gfc_simplify_sqrt (gfc_expr *e)\n {\n   gfc_expr *result;\n-  mpfr_t ac, ad, s, t, w;\n \n   if (e->expr_type != EXPR_CONSTANT)\n     return NULL;\n@@ -4442,10 +4486,16 @@ gfc_simplify_sqrt (gfc_expr *e)\n       break;\n \n     case BT_COMPLEX:\n+      gfc_set_model (e->value.real);\n+#ifdef HAVE_mpc\n+      call_mpc_func (result->value.complex.r, result->value.complex.i,\n+\t\t     e->value.complex.r, e->value.complex.i, mpc_sqrt);\n+#else\n+    {\n       /* Formula taken from Numerical Recipes to avoid over- and\n \t underflow.  */\n \n-      gfc_set_model (e->value.real);\n+      mpfr_t ac, ad, s, t, w;\n       mpfr_init (ac);\n       mpfr_init (ad);\n       mpfr_init (s);\n@@ -4517,7 +4567,8 @@ gfc_simplify_sqrt (gfc_expr *e)\n \t\t\t    &e->where);\n \n       mpfr_clears (s, t, ac, ad, w, NULL);\n-\n+    }\n+#endif\n       break;\n \n     default:"}]}