{"sha": "1f9e358abba5d658b66dab5eb6c665613224c035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5ZTM1OGFiYmE1ZDY1OGI2NmRhYjVlYjZjNjY1NjEzMjI0YzAzNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-09-16T23:59:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-09-16T23:59:34Z"}, "message": "type_traits (aligned_storage): Implement in the neat and general way.\n\n2007-09-16  Paolo Carlini  <pcarlini@suse.de>\n\t    Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* include/tr1_impl/type_traits (aligned_storage): Implement\n\tin the neat and general way.\n\nCo-Authored-By: Douglas Gregor <doug.gregor@gmail.com>\n\nFrom-SVN: r128532", "tree": {"sha": "cf810fa83f07a378b35e00b82570a36089279cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf810fa83f07a378b35e00b82570a36089279cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9e358abba5d658b66dab5eb6c665613224c035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e358abba5d658b66dab5eb6c665613224c035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9e358abba5d658b66dab5eb6c665613224c035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9e358abba5d658b66dab5eb6c665613224c035/comments", "author": null, "committer": null, "parents": [{"sha": "57711cd1b32defc3c3d95be529039b30133c70e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57711cd1b32defc3c3d95be529039b30133c70e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57711cd1b32defc3c3d95be529039b30133c70e1"}], "stats": {"total": 76, "additions": 10, "deletions": 66}, "files": [{"sha": "ec140d4db6df36ab3f5858488cbbf8c5aa385d67", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e358abba5d658b66dab5eb6c665613224c035/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e358abba5d658b66dab5eb6c665613224c035/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f9e358abba5d658b66dab5eb6c665613224c035", "patch": "@@ -1,3 +1,9 @@\n+2007-09-16  Paolo Carlini  <pcarlini@suse.de>\n+\t    Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* include/tr1_impl/type_traits (aligned_storage): Implement\n+\tin the neat and general way.\n+\n 2007-09-14  Benjamin Kosnik  <bkoz@redhat.com>\n         \n \t* include/parallel/base.h (__gnu_parallel::less<Tp>): Add partial"}, {"sha": "4a31e8b00b3355883f273e8460f63d232c53e176", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 4, "deletions": 66, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9e358abba5d658b66dab5eb6c665613224c035/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9e358abba5d658b66dab5eb6c665613224c035/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=1f9e358abba5d658b66dab5eb6c665613224c035", "patch": "@@ -375,75 +375,13 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     { typedef typename remove_reference<_Tp>::type*     type; };\n \n   /// @brief  other transformations [4.8].\n-  \n-  // Due to c++/19163 and c++/17743, for the time being we cannot use\n-  // the correct, neat implementation :-(\n-  // \n-  // template<std::size_t _Len, std::size_t _Align>\n-  //   struct aligned_storage\n-  //   { typedef char type[_Len] __attribute__((__aligned__(_Align))); }\n-  //\n-  // Temporary workaround, useful for Align up to 32:\n-  template<std::size_t, std::size_t>\n-    struct aligned_storage { };\n-\n-  template<std::size_t _Len>\n-    struct aligned_storage<_Len, 1>\n-    {\n-      union type\n-      {\n-\tunsigned char __data[_Len];\n-\tchar __align __attribute__((__aligned__(1)));\n-      };\n-    };\n-\n-  template<std::size_t _Len>\n-    struct aligned_storage<_Len, 2>\n-    {\n-      union type\n-      {\n-\tunsigned char __data[_Len];\n-\tchar __align __attribute__((__aligned__(2)));\n-      };\n-    };\n-\n-  template<std::size_t _Len>\n-    struct aligned_storage<_Len, 4>\n-    {\n-      union type\n-      {\n-\tunsigned char __data[_Len];\n-\tchar __align __attribute__((__aligned__(4)));\n-      };\n-    };\n-\n-  template<std::size_t _Len>\n-    struct aligned_storage<_Len, 8>\n-    {\n-      union type\n-      {\n-\tunsigned char __data[_Len];\n-\tchar __align __attribute__((__aligned__(8)));\n-      };\n-    };\n-\n-  template<std::size_t _Len>\n-    struct aligned_storage<_Len, 16>\n-    {\n-      union type\n-      {\n-\tunsigned char __data[_Len];\n-\tchar __align __attribute__((__aligned__(16)));\n-      };\n-    };\n-  \n-  template<std::size_t _Len>\n-    struct aligned_storage<_Len, 32>\n-    {\n+  template<std::size_t _Len, std::size_t _Align>\n+    struct aligned_storage\n+    { \n       union type\n       {\n \tunsigned char __data[_Len];\n-\tchar __align __attribute__((__aligned__(32)));\n+\tstruct __attribute__((__aligned__((_Align)))) { } __aligner; \n       };\n     };\n "}]}