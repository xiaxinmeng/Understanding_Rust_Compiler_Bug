{"sha": "dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwMzlmYzllNmNjMmJmOTIxNGNiMGZmODdhMDdkMDM0NjgyOWE1OQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2003-07-21T21:24:27Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2003-07-21T21:24:27Z"}, "message": "compat.exp: Handle dg-options per source file.\n\n\t* lib/compat.exp: Handle dg-options per source file.\n\t* g++.dg/compat/abi/bitfield1_x.C: Specify dg-options.\n\t* g++.dg/compat/abi/bitfield1_y.C: Ditto.\n\t* g++.dg/compat/abi/bitfield2_x.C: Ditto.\n\t* g++.dg/compat/abi/bitfield2_y.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-10_x.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-10_y.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-21_x.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-21_y.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-22_x.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-22_y.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-4_x.C: Ditto.\n\t* g++.dg/compat/abi/vbase8-4_y.C: Ditto.\n\t* g++.dg/compat/break/bitfield7_x.C: Ditto.\n\t* g++.dg/compat/break/bitfield7_y.C: Ditto.\n\nFrom-SVN: r69649", "tree": {"sha": "67c08346367763841fe6430445e149d68dd34559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c08346367763841fe6430445e149d68dd34559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/comments", "author": null, "committer": null, "parents": [{"sha": "8d973a83191104c5d91784b18746c6ecc1ec93e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d973a83191104c5d91784b18746c6ecc1ec93e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d973a83191104c5d91784b18746c6ecc1ec93e4"}], "stats": {"total": 154, "additions": 121, "deletions": 33}, "files": [{"sha": "ec60181091938a9ef3039093afcde05f4c45bf82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,21 @@\n+2003-07-21  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* lib/compat.exp: Handle dg-options per source file.\n+\t* g++.dg/compat/abi/bitfield1_x.C: Specify dg-options.\n+\t* g++.dg/compat/abi/bitfield1_y.C: Ditto.\n+\t* g++.dg/compat/abi/bitfield2_x.C: Ditto.\n+\t* g++.dg/compat/abi/bitfield2_y.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-10_x.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-10_y.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-21_x.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-21_y.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-22_x.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-22_y.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-4_x.C: Ditto.\n+\t* g++.dg/compat/abi/vbase8-4_y.C: Ditto.\n+\t* g++.dg/compat/break/bitfield7_x.C: Ditto.\n+\t* g++.dg/compat/break/bitfield7_y.C: Ditto.\n+\n 2003-07-21  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/10320"}, {"sha": "e081c4bc94309535f322bfd59d092b4bcc464808", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+\n #include \"bitfield1.h\"\n \n extern void bitfield1_y (A& a);"}, {"sha": "10581dab0a4ccb59f978b595f1e69f738f7383ff", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield1_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield1_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-ansi -pedantic-errors -funsigned-bitfields\" }\n+\n extern \"C\" void abort (void);\n \n #include \"bitfield1.h\""}, {"sha": "47b448dda267c36c24a37c12128f76cbe58f0845", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+\n #include \"bitfield1.h\"\n \n extern void bitfield1_y (A& a);"}, {"sha": "55edab5cbfe63e855f02a1602985cfeb0d079831", "filename": "gcc/testsuite/g++.dg/compat/abi/bitfield2_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fbitfield2_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-ansi -pedantic-errors -fsigned-bitfields\" }\n+\n extern \"C\" void abort (void);\n \n #include \"bitfield1.h\""}, {"sha": "c56d080eb78e4693a27f72be0f4cb2350019e90f", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-10_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n #include \"vbase8-10.h\"\n \n extern void check_C0 (C0&, int);"}, {"sha": "5364ed6b7788e153b5f2f196e56582c04d633b9b", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-10_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-10_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n extern \"C\" void abort (void);\n \n #include \"vbase8-10.h\""}, {"sha": "818eade038865cc8fc5f3aa2edce4de70dd30738", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-21_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n #include \"vbase8-21.h\"\n \n extern void check_C0 (C0&, int);"}, {"sha": "5126139351583fd45795a94f407e489bbea1b999", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-21_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-21_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n extern \"C\" void abort (void);\n \n #include \"vbase8-21.h\""}, {"sha": "49f021adffab97b989b1d47cc0475ade3ca48b76", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-22_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n #include \"vbase8-22.h\"\n \n extern void check_C0 (C0&, int);"}, {"sha": "49ab04a87880a0cd79ac13b521e631cd2659a696", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-22_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-22_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n extern \"C\" void abort (void);\n \n #include \"vbase8-22.h\""}, {"sha": "db60cc6ee0aed76dd48af7b2427547c5ce07ec18", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-4_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n #include \"vbase8-4.h\"\n \n extern void check_C0 (C0&, int);"}, {"sha": "24d5046c90dd9c53e364f2bc4176ad3fbe306097", "filename": "gcc/testsuite/g++.dg/compat/abi/vbase8-4_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fvbase8-4_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options -w }\n+\n extern \"C\" void abort (void);\n \n #include \"vbase8-4.h\""}, {"sha": "9b2a622a5ea623c37940aa1798b762cfcb566341", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield7_x.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_x.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-w\" }\n+\n #include \"bitfield7.h\"\n \n extern void bitfield7_y (U*);"}, {"sha": "afa5446ae8922f08d3ce082023a6b0d7308ecc46", "filename": "gcc/testsuite/g++.dg/compat/break/bitfield7_y.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fbreak%2Fbitfield7_y.C?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -1,3 +1,5 @@\n+// { dg-options \"-w\" }\n+\n extern \"C\" void abort (void);\n \n #include \"bitfield7.h\""}, {"sha": "2926d0be680b8ade0ca4afece27f1141e97036c1", "filename": "gcc/testsuite/lib/compat.exp", "status": "modified", "additions": 75, "deletions": 33, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd039fc9e6cc2bf9214cb0ff87a07d0346829a59/gcc%2Ftestsuite%2Flib%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcompat.exp?ref=dd039fc9e6cc2bf9214cb0ff87a07d0346829a59", "patch": "@@ -49,18 +49,25 @@ if ![info exists COMPAT_OPTIONS] {\n \n set option_list $COMPAT_OPTIONS\n \n+load_lib dg.exp\n+\n #\n # compat-obj -- compile to an object file\n #\n # SOURCE is the source file\n # DEST is the object file\n-# OPTIONS is the list of compiler options\n+# OPTALL is the list of compiler options to use with all tests\n+# OPTFILE is the list of compiler options to use with this file\n # OPTSTR is the options to print with test messages\n #\n-proc compat-obj { source dest options optstr } {\n+proc compat-obj { source dest optall optfile optstr } {\n     global testcase\n     global tool\n \n+    # Set up the options for compiling this file.\n+    set options \"\"\n+    lappend options \"additional_flags=$optfile $optall\"\n+\n     set comp_output [${tool}_target_compile \"$source\" \"$dest\" object $options]\n     ${tool}_check_compile \"$testcase $dest compile\" $optstr $dest $comp_output\n }\n@@ -70,10 +77,11 @@ proc compat-obj { source dest options optstr } {\n # TESTNAME is the mixture of object files to link\n # OBJLIST is the list of object files to link\n # DEST is the name of the executable\n-# OPTIONS is a list of compiler and linker options to use\n+# OPTALL is a list of compiler and linker options to use for all tests\n+# OPTFILE is a list of compiler and linker options to use for this test\n # OPTSTR is the list of options to list in messages\n #\n-proc compat-run { testname objlist dest options optstr } {\n+proc compat-run { testname objlist dest optall optfile optstr } {\n     global testcase\n     global tool\n \n@@ -86,6 +94,10 @@ proc compat-run { testname objlist dest options optstr } {\n \t}\n     }\n \n+    # Set up the options for linking this test.\n+    set options \"\"\n+    lappend options \"additional_flags=$optfile $optall\"\n+\n     # Link the objects into an executable.\n     set comp_output [${tool}_target_compile \"$objlist\" $dest executable \\\n \t\t     \"$options\"]\n@@ -107,6 +119,48 @@ proc compat-run { testname objlist dest options optstr } {\n     $status \"$testcase $testname execute $optstr\"\n }\n \n+#\n+# compat-flags -- get special tool flags to use for a source file\n+#\n+# SRC is the full patchname of the source file.\n+# The result is a list of options to use.\n+#\n+# This code is copied from proc dg-test in dg.exp from DejaGNU.\n+#\n+proc compat-get-options { src } {\n+    # Define our own special function `unknown` so we catch spelling errors.\n+    # But first rename the existing one so we can restore it afterwards.\n+    catch {rename dg-save-unknown \"\"}\n+    rename unknown dg-save-unknown\n+    proc unknown { args } {\n+\treturn -code error \"unknown dg option: $args\"\n+    }\n+\n+    # dg-options sets a variable called dg-extra-tool-flags.\n+    set dg-extra-tool-flags \"\"\n+    set tmp [dg-get-options $src]\n+    foreach op $tmp {\n+\tset cmd [lindex $op 0]\n+\tif ![string compare \"dg-options\" $cmd] {\n+\t    set status [catch \"$op\" errmsg]\n+\t    if { $status != 0 } {\n+\t\tperror \"src: $errmsg for \\\"$op\\\"\\n\"\n+\t\tunresolved \"$src: $errmsg for \\\"$op\\\"\"\n+\t\treturn\n+\t    }\n+\t} else {\n+\t    # Ignore unrecognized dg- commands, but warn about them.\n+\t    warning \"compat.exp does not support $cmd\"\n+\t}\n+    }\n+\n+    # Restore normal error handling.\n+    rename unknown \"\"\n+    rename dg-save-unknown unknown\n+\n+    return ${dg-extra-tool-flags}\n+}\n+\n #\n # compat-execute -- compile with compatible compilers\n #\n@@ -123,27 +177,19 @@ proc compat-execute { src1 sid use_alt } {\n     global testcase\n     global gluefile\n \n-    # Use the dg-options mechanism to specify extra flags for this test.\n-    # FIXME: This does not handle other uses of dg-options, and it only\n-    # processes the first one.\n-    set extra_tool_flags \"\"\n-    set tmp [grep $src1 \"{\\[ \\t\\]\\*dg-options.*\\[ \\t\\]\\+}\"]\n-    if ![string match \"\" $tmp] {\n-\tset tmp0 [lindex $tmp 0]\n-\t# Extract the compiler options.\n-\tregexp \"dg-options\\[ \\t\\]\\+(.*)\\[ \\t\\]\\+\\}\" \\\n-\t       $tmp0 all args\n-\t# Sometime the options are in quotes, sometimes not.\n-\tregsub -all \"\\\"\" $args \"\" args\n-\tset extra_tool_flags $args\n-    }\n-\n     # Set up the names of the other source files.\n     regsub \"_main.*\" $src1 \"\" base\n     regsub \".*/\" $base \"\" base\n     regsub \"_main\" $src1 \"_x\" src2\n     regsub \"_main\" $src1 \"_y\" src3\n \n+    # Use the dg-options mechanism to specify extra flags for this test. \n+    # The extra flags in each file are used to compile that file, and the\n+    # extra flags in *_main.* are also used for linking.\n+    set extra_flags_1 [compat-get-options $src1]\n+    set extra_flags_2 [compat-get-options $src2]\n+    set extra_flags_3 [compat-get-options $src3]\n+\n     # Define the names of the object files.\n     regsub \"sid\" \"sid_main_tst.o\" $sid obj1\n     regsub \"sid\" \"sid_x_tst.o\" $sid obj2_tst\n@@ -180,11 +226,6 @@ proc compat-execute { src1 sid use_alt } {\n \t}\n \tverbose \"Testing $testcase, $optstr\" 1\n \n-\tset tst_options \"\"\n-\tset alt_options \"\"\n-\tlappend tst_options \"additional_flags=$extra_tool_flags $tst_option\"\n-\tlappend alt_options \"additional_flags=$extra_tool_flags $alt_option\"\n-\n \t# There's a unique name for each executable we generate, based on\n \t# the set of options and how the pieces of the tests are compiled.\n \tset execname1 \"${execbase}-${count}1\"\n@@ -202,28 +243,29 @@ proc compat-execute { src1 sid use_alt } {\n \t# later.  Skip this if we don't have an alternate compiler.\n \tif { $use_alt != 0 } then {\n \t    compat-use-alt-compiler\n-\t    compat-obj \"$src2\" \"$obj2_alt\" $alt_options $optstr\n-\t    compat-obj \"$src3\" \"$obj3_alt\" $alt_options $optstr\n+\t    compat-obj \"$src2\" \"$obj2_alt\" $alt_option $extra_flags_2 $optstr\n+\t    compat-obj \"$src3\" \"$obj3_alt\" $alt_option $extra_flags_3 $optstr\n \t}\n \n \t# Compile pieces with the compiler under test.\n \tcompat-use-tst-compiler\n-\tcompat-obj \"$src1\" \"$obj1\" $tst_options $optstr\n-\tcompat-obj \"$src2\" \"$obj2_tst\" $tst_options $optstr\n-\tcompat-obj \"$src3\" \"$obj3_tst\" $tst_options $optstr\n+\tcompat-obj \"$src1\" \"$obj1\" $tst_option $extra_flags_1 $optstr\n+\tcompat-obj \"$src2\" \"$obj2_tst\" $tst_option $extra_flags_2 $optstr\n+\tcompat-obj \"$src3\" \"$obj3_tst\" $tst_option $extra_flags_3 $optstr\n \n \t# Link (using the compiler under test), run, and clean up tests.\n \tcompat-run \"${obj2_tst}-${obj3_tst}\" \\\n-\t    \"$obj1 $obj2_tst $obj3_tst\" $execname1 $tst_options $optstr\n+\t    \"$obj1 $obj2_tst $obj3_tst\" $execname1 \\\n+\t    $tst_option $extra_flags_1 $optstr\n \n \t# If we've got an alternate compiler try some combinations.\n \tif { $use_alt != 0 } then {\n \t    compat-run \"${obj2_tst}-${obj3_alt}\" \"$obj1 $obj2_tst $obj3_alt\" \\\n-\t\t       $execname2 $tst_options $optstr\n+\t\t       $execname2 $tst_option $extra_flags_1 $optstr\n \t    compat-run \"${obj2_alt}-${obj3_tst}\" \"$obj1 $obj2_alt $obj3_tst\" \\\n-\t\t       $execname3 $tst_options $optstr\n+\t\t       $execname3 $tst_option $extra_flags_1 $optstr\n \t    compat-run \"${obj2_alt}-${obj3_alt}\" \"$obj1 $obj2_alt $obj3_alt\" \\\n-\t\t       $execname4 $tst_options $optstr\n+\t\t       $execname4 $tst_option $extra_flags_1 $optstr\n \t}\n \n \t# Clean up object files."}]}