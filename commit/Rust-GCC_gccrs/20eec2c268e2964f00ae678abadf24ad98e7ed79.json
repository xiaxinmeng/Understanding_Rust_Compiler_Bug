{"sha": "20eec2c268e2964f00ae678abadf24ad98e7ed79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBlZWMyYzI2OGUyOTY0ZjAwYWU2NzhhYmFkZjI0YWQ5OGU3ZWQ3OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-02T23:19:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-02T23:19:20Z"}, "message": "(default_compilers): Add missing comma between strings, so that traditional compilers can compile gcc.c.\n\n(default_compilers): Add missing comma between strings, so\nthat traditional compilers can compile gcc.c.\n(main): Don't pass strcpy or strlen a NULL pointer if some of the\nspec strings in default_compilers are NULL.\n(validate_all_switches): Don't dereference a NULL pointer if some of\nthe spec strings in defalut_compilers are NULL.\n\nFrom-SVN: r2039", "tree": {"sha": "ffa4ad5b7761f794a4183b8a959559bdf2bed689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa4ad5b7761f794a4183b8a959559bdf2bed689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20eec2c268e2964f00ae678abadf24ad98e7ed79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20eec2c268e2964f00ae678abadf24ad98e7ed79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20eec2c268e2964f00ae678abadf24ad98e7ed79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20eec2c268e2964f00ae678abadf24ad98e7ed79/comments", "author": null, "committer": null, "parents": [{"sha": "c515799cd1dcb0df1462738acce002dd6f9f0099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c515799cd1dcb0df1462738acce002dd6f9f0099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c515799cd1dcb0df1462738acce002dd6f9f0099"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "6977414ea02c70d71fdaf744b3b56323d855893f", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20eec2c268e2964f00ae678abadf24ad98e7ed79/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20eec2c268e2964f00ae678abadf24ad98e7ed79/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=20eec2c268e2964f00ae678abadf24ad98e7ed79", "patch": "@@ -464,7 +464,7 @@ static struct compiler default_compilers[] =\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\"\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n@@ -500,7 +500,7 @@ static struct compiler default_compilers[] =\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional} %{trigraphs}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\"\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.i} %1 %2\\\n \t\t   %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} %{traditional}\\\n@@ -545,7 +545,7 @@ static struct compiler default_compilers[] =\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.s}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\"\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.s}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:%{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n                     %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n \t\t    %{!pipe:%g.s} %A\\n }}}}\"},\n@@ -3371,13 +3371,13 @@ main (argc, argv)\n \t    input_suffix = \"\";\n \n \t  len = 0;\n-\t  for (i = 0; i < sizeof cp->spec / sizeof cp->spec[0]; i++)\n+\t  for (i = 0; i < sizeof cp->spec / sizeof cp->spec[0] && cp->spec[i]; i++)\n \t    len += strlen (cp->spec[i]);\n \n \t  p = (char *) xmalloc (len + 1);\n \n \t  len = 0;\n-\t  for (i = 0; i < sizeof cp->spec / sizeof cp->spec[0]; i++)\n+\t  for (i = 0; i < sizeof cp->spec / sizeof cp->spec[0] && cp->spec[i]; i++)\n \t    {\n \t      strcpy (p + len, cp->spec[i]);\n \t      len += strlen (cp->spec[i]);\n@@ -3705,7 +3705,7 @@ validate_all_switches ()\n   for (comp = compilers; comp->spec[0]; comp++)\n     {\n       int i;\n-      for (i = 0; i < sizeof comp->spec / sizeof comp->spec[0]; i++)\n+      for (i = 0; i < sizeof comp->spec / sizeof comp->spec[0] && comp->spec[i]; i++)\n \t{\n \t  p = comp->spec[i];\n \t  while (c = *p++)"}]}