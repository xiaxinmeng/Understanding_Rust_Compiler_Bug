{"sha": "dd1eab0a024b5777a1f05e8321047f7034228a18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQxZWFiMGEwMjRiNTc3N2ExZjA1ZTgzMjEwNDdmNzAzNDIyOGExOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-10T12:15:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-07-10T12:15:06Z"}, "message": "eliminate_regs_in_insn): Handle special case of assignment from hard frame...\n\neliminate_regs_in_insn): Handle special case of assignment from hard\nframe pointer to frame pointer (for nonlocal goto).\n\nFrom-SVN: r7696", "tree": {"sha": "304bc4f7271b01aa3dc11a058b411e3147577ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/304bc4f7271b01aa3dc11a058b411e3147577ff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd1eab0a024b5777a1f05e8321047f7034228a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1eab0a024b5777a1f05e8321047f7034228a18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1eab0a024b5777a1f05e8321047f7034228a18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1eab0a024b5777a1f05e8321047f7034228a18/comments", "author": null, "committer": null, "parents": [{"sha": "e74a2201543b8a835687acc396b169c5eda62fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e74a2201543b8a835687acc396b169c5eda62fa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e74a2201543b8a835687acc396b169c5eda62fa6"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "e46d76421a8a2218095f5375a65063e228f2fa35", "filename": "gcc/reload1.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd1eab0a024b5777a1f05e8321047f7034228a18/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd1eab0a024b5777a1f05e8321047f7034228a18/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=dd1eab0a024b5777a1f05e8321047f7034228a18", "patch": "@@ -3144,6 +3144,50 @@ eliminate_regs_in_insn (insn, replace)\n       for (ep = reg_eliminate; ep < &reg_eliminate[NUM_ELIMINABLE_REGS]; ep++)\n \tif (ep->from_rtx == SET_DEST (old_set) && ep->can_eliminate)\n \t  {\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+\t    /* If this is setting the frame pointer register to the\n+\t       hardware frame pointer register and this is an elimination\n+\t       that will be done (tested above), this insn is really\n+\t       adjusting the frame pointer downward to compensate for\n+\t       the adjustment done before a nonlocal goto.  */\n+\t    if (ep->from == FRAME_POINTER_REGNUM\n+\t\t&& ep->to == HARD_FRAME_POINTER_REGNUM)\n+\t      {\n+\t\trtx src = SET_SRC (old_set);\n+\t\tint offset, ok = 0;\n+\n+\t\tif (src == ep->to_rtx)\n+\t\t  offset = 0, ok = 1;\n+\t\telse if (GET_CODE (src) == PLUS\n+\t\t\t && GET_CODE (XEXP (src, 0)) == CONST_INT)\n+\t\t  offset = INTVAL (XEXP (src, 0)), ok = 1;\n+\n+\t\tif (ok)\n+\t\t  {\n+\t\t    if (replace)\n+\t\t      {\n+\t\t\trtx src\n+\t\t\t  = plus_constant (ep->to_rtx, offset - ep->offset);\n+\n+\t\t\t/* First see if this insn remains valid when we\n+\t\t\t   make the change.  If not, keep the INSN_CODE\n+\t\t\t   the same and let reload fit it up.  */\n+\t\t\tvalidate_change (insn, &SET_SRC (old_set), src, 1);\n+\t\t\tvalidate_change (insn, &SET_DEST (old_set),\n+\t\t\t\t\t ep->to_rtx, 1);\n+\t\t\tif (! apply_change_group ())\n+\t\t\t  {\n+\t\t\t    SET_SRC (old_set) = src;\n+\t\t\t    SET_DEST (old_set) = ep->to_rtx;\n+\t\t\t  }\n+\t\t      }\n+\n+\t\t    val = 1;\n+\t\t    goto done;\n+\t\t  }\n+\t      }\n+#endif\n+\n \t    /* In this case this insn isn't serving a useful purpose.  We\n \t       will delete it in reload_as_needed once we know that this\n \t       elimination is, in fact, being done."}]}