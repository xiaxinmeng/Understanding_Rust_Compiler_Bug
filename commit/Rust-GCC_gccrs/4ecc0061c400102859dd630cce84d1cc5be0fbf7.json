{"sha": "4ecc0061c400102859dd630cce84d1cc5be0fbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVjYzAwNjFjNDAwMTAyODU5ZGQ2MzBjY2U4NGQxY2M1YmUwZmJmNw==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-05-30T09:33:08Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-09-11T10:18:59Z"}, "message": "libgccjit: Add new gcc_jit_global_set_initializer entry point\n\ngcc/jit/ChangeLog\n\n2020-08-01  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_14): New ABI tag.\n\t* docs/topics/expressions.rst (gcc_jit_global_set_initializer):\n\tDocument new entry point in section 'Global variables'.\n\t* jit-playback.c (global_new_decl, global_finalize_lvalue): New\n\tmethod.\n\t(playback::context::new_global): Make use of global_new_decl,\n\tglobal_finalize_lvalue.\n\t(load_blob_in_ctor): New template function in use by the\n\tfollowing.\n\t(playback::context::new_global_initialized): New method.\n\t* jit-playback.h (class context): Decl 'new_global_initialized',\n\t'global_new_decl', 'global_finalize_lvalue'.\n\t(lvalue::set_initializer): Add implementation.\n\t* jit-recording.c (recording::memento_of_get_pointer::get_size)\n\t(recording::memento_of_get_type::get_size): Add implementation.\n\t(recording::global::write_initializer_reproducer): New function in\n\tuse by 'recording::global::write_reproducer'.\n\t(recording::global::replay_into)\n\t(recording::global::write_to_dump)\n\t(recording::global::write_reproducer): Handle\n\tinitialized case.\n\t* jit-recording.h (class type): Decl 'get_size' and\n\t'num_elements'.\n\t* libgccjit++.h (class lvalue): Declare new 'set_initializer'\n\tmethod.\n\t(class lvalue): Decl 'is_global' and 'set_initializer'.\n\t(class global) Decl 'write_initializer_reproducer'. Add\n\t'm_initializer', 'm_initializer_num_bytes' fields.  Implement\n\t'set_initializer'. Add a destructor to free 'm_initializer'.\n\t* libgccjit.c (gcc_jit_global_set_initializer): New function.\n\t* libgccjit.h (gcc_jit_global_set_initializer): New function\n\tdeclaration.\n\t* libgccjit.map (LIBGCCJIT_ABI_14): New ABI tag.\n\ngcc/testsuite/ChangeLog\n\n2020-08-01  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* jit.dg/all-non-failing-tests.h: Add test-blob.c.\n\t* jit.dg/test-global-set-initializer.c: New testcase.", "tree": {"sha": "7d5e9b91b960800e48074ba848e723990048acaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5e9b91b960800e48074ba848e723990048acaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ecc0061c400102859dd630cce84d1cc5be0fbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ecc0061c400102859dd630cce84d1cc5be0fbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ecc0061c400102859dd630cce84d1cc5be0fbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ecc0061c400102859dd630cce84d1cc5be0fbf7/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15545563128f0240192c263522d4a36b7f86250f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15545563128f0240192c263522d4a36b7f86250f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15545563128f0240192c263522d4a36b7f86250f"}], "stats": {"total": 489, "additions": 476, "deletions": 13}, "files": [{"sha": "6bfa101ed718db78012b374e25e100c263d726a5", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -219,3 +219,10 @@ entrypoints:\n   * :func:`gcc_jit_version_minor`\n \n   * :func:`gcc_jit_version_patchlevel`\n+\n+.. _LIBGCCJIT_ABI_14:\n+\n+``LIBGCCJIT_ABI_14``\n+--------------------\n+``LIBGCCJIT_ABI_14`` covers the addition of\n+:func:`gcc_jit_global_set_initializer`"}, {"sha": "b76446410ded0b07338150c47daaca0fc1a8467d", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -582,6 +582,27 @@ Global variables\n       referring to it.  Analogous to using an \"extern\" global from a\n       header file.\n \n+.. function:: gcc_jit_lvalue *\\\n+              gcc_jit_global_set_initializer (gcc_jit_lvalue *global,\\\n+                                              const void *blob,\\\n+                                              size_t num_bytes)\n+\n+   Set an initializer for ``global`` using the memory content pointed\n+   by ``blob`` for ``num_bytes``.  ``global`` must be an array of an\n+   integral type.  Return the global itself.\n+\n+   The parameter ``blob`` must be non-NULL. The call copies the memory\n+   pointed by ``blob`` for ``num_bytes`` bytes, so it is valid to pass\n+   in a pointer to an on-stack buffer.  The content will be stored in\n+   the compilation unit and used as initialization value of the array.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_14`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_global_set_initializer\n+\n Working with pointers, structs and unions\n -----------------------------------------\n "}, {"sha": "4fac64dcab7e6502bd3fd570e5808174eb62f952", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 101, "deletions": 6, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -510,14 +510,14 @@ new_function (location *loc,\n   return func;\n }\n \n-/* Construct a playback::lvalue instance (wrapping a tree).  */\n+/* In use by new_global and new_global_initialized.  */\n \n-playback::lvalue *\n+tree\n playback::context::\n-new_global (location *loc,\n-\t    enum gcc_jit_global_kind kind,\n-\t    type *type,\n-\t    const char *name)\n+global_new_decl (location *loc,\n+\t\t enum gcc_jit_global_kind kind,\n+\t\t type *type,\n+\t\t const char *name)\n {\n   gcc_assert (type);\n   gcc_assert (name);\n@@ -547,6 +547,15 @@ new_global (location *loc,\n   if (loc)\n     set_tree_location (inner, loc);\n \n+  return inner;\n+}\n+\n+/* In use by new_global and new_global_initialized.  */\n+\n+playback::lvalue *\n+playback::context::\n+global_finalize_lvalue (tree inner)\n+{\n   varpool_node::get_create (inner);\n \n   varpool_node::finalize_decl (inner);\n@@ -556,6 +565,92 @@ new_global (location *loc,\n   return new lvalue (this, inner);\n }\n \n+/* Construct a playback::lvalue instance (wrapping a tree).  */\n+\n+playback::lvalue *\n+playback::context::\n+new_global (location *loc,\n+\t    enum gcc_jit_global_kind kind,\n+\t    type *type,\n+\t    const char *name)\n+{\n+  tree inner = global_new_decl (loc, kind, type, name);\n+\n+  return global_finalize_lvalue (inner);\n+}\n+\n+/* Fill 'constructor_elements' with the memory content of\n+   'initializer'.  Each element of the initializer is of the size of\n+   type T.  In use by new_global_initialized.*/\n+\n+template<typename T>\n+static void\n+load_blob_in_ctor (vec<constructor_elt, va_gc> *&constructor_elements,\n+\t\t   size_t num_elem,\n+\t\t   const void *initializer)\n+{\n+  /* Loosely based on 'output_init_element' c-typeck.c:9691.  */\n+  const T *p = (const T *)initializer;\n+  tree node = make_unsigned_type (BITS_PER_UNIT * sizeof (T));\n+  for (size_t i = 0; i < num_elem; i++)\n+    {\n+      constructor_elt celt =\n+\t{ build_int_cst (long_unsigned_type_node, i),\n+\t  build_int_cst (node, p[i]) };\n+      vec_safe_push (constructor_elements, celt);\n+    }\n+}\n+\n+/* Construct an initialized playback::lvalue instance (wrapping a\n+   tree).  */\n+\n+playback::lvalue *\n+playback::context::\n+new_global_initialized (location *loc,\n+\t\t\tenum gcc_jit_global_kind kind,\n+\t\t\ttype *type,\n+                        size_t element_size,\n+\t\t\tsize_t initializer_num_elem,\n+\t\t\tconst void *initializer,\n+\t\t\tconst char *name)\n+{\n+  tree inner = global_new_decl (loc, kind, type, name);\n+\n+  vec<constructor_elt, va_gc> *constructor_elements = NULL;\n+\n+  switch (element_size)\n+    {\n+    case 1:\n+      load_blob_in_ctor<uint8_t> (constructor_elements, initializer_num_elem,\n+\t\t\t\t  initializer);\n+      break;\n+    case 2:\n+      load_blob_in_ctor<uint16_t> (constructor_elements, initializer_num_elem,\n+\t\t\t\t   initializer);\n+      break;\n+    case 4:\n+      load_blob_in_ctor<uint32_t> (constructor_elements, initializer_num_elem,\n+\t\t\t\t   initializer);\n+      break;\n+    case 8:\n+      load_blob_in_ctor<uint64_t> (constructor_elements, initializer_num_elem,\n+\t\t\t\t   initializer);\n+      break;\n+    default:\n+      /* This function is serving on sizes returned by 'get_size',\n+\t these are all covered by the previous cases.  */\n+      gcc_unreachable ();\n+    }\n+  /* Compare with 'pop_init_level' c-typeck.c:8780.  */\n+  tree ctor = build_constructor (type->as_tree (), constructor_elements);\n+  constructor_elements = NULL;\n+\n+  /* Compare with 'store_init_value' c-typeck.c:7555.  */\n+  DECL_INITIAL (inner) = ctor;\n+\n+  return global_finalize_lvalue (inner);\n+}\n+\n /* Implementation of the various\n       gcc::jit::playback::context::new_rvalue_from_const <HOST_TYPE>\n    methods."}, {"sha": "50b69753bb420ed087836dc7f5d0c798ad2b0369", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -111,6 +111,15 @@ class context : public log_user\n \t      type *type,\n \t      const char *name);\n \n+  lvalue *\n+  new_global_initialized (location *loc,\n+                          enum gcc_jit_global_kind kind,\n+                          type *type,\n+                          size_t element_size,\n+                          size_t initializer_num_elem,\n+                          const void *initializer,\n+                          const char *name);\n+\n   template <typename HOST_TYPE>\n   rvalue *\n   new_rvalue_from_const (type *type,\n@@ -266,6 +275,14 @@ class context : public log_user\n   const char * get_path_s_file () const;\n   const char * get_path_so_file () const;\n \n+  tree\n+  global_new_decl (location *loc,\n+                   enum gcc_jit_global_kind kind,\n+                   type *type,\n+                   const char *name);\n+  lvalue *\n+  global_finalize_lvalue (tree inner);\n+\n private:\n \n   /* Functions for implementing \"compile\".  */"}, {"sha": "3cbeba0f3714b97d2c50559c508b526bfcfeca12", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 138, "deletions": 5, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -2175,6 +2175,61 @@ recording::type::access_as_type (reproducer &r)\n   return r.get_identifier (this);\n }\n \n+/* Override of default implementation of\n+   recording::type::get_size.\n+\n+   Return the size in bytes.  This is in use for global\n+   initialization.  */\n+\n+size_t\n+recording::memento_of_get_type::get_size ()\n+{\n+  int size;\n+  switch (m_kind)\n+    {\n+    case GCC_JIT_TYPE_VOID:\n+      return 0;\n+    case GCC_JIT_TYPE_BOOL:\n+    case GCC_JIT_TYPE_CHAR:\n+    case GCC_JIT_TYPE_SIGNED_CHAR:\n+    case GCC_JIT_TYPE_UNSIGNED_CHAR:\n+      return 1;\n+    case GCC_JIT_TYPE_SHORT:\n+    case GCC_JIT_TYPE_UNSIGNED_SHORT:\n+      size = SHORT_TYPE_SIZE;\n+      break;\n+    case GCC_JIT_TYPE_INT:\n+    case GCC_JIT_TYPE_UNSIGNED_INT:\n+      size = INT_TYPE_SIZE;\n+      break;\n+    case GCC_JIT_TYPE_LONG:\n+    case GCC_JIT_TYPE_UNSIGNED_LONG:\n+      size = LONG_TYPE_SIZE;\n+      break;\n+    case GCC_JIT_TYPE_LONG_LONG:\n+    case GCC_JIT_TYPE_UNSIGNED_LONG_LONG:\n+      size = LONG_LONG_TYPE_SIZE;\n+      break;\n+    case GCC_JIT_TYPE_FLOAT:\n+      size = FLOAT_TYPE_SIZE;\n+      break;\n+    case GCC_JIT_TYPE_DOUBLE:\n+      size = DOUBLE_TYPE_SIZE;\n+      break;\n+    case GCC_JIT_TYPE_LONG_DOUBLE:\n+      size = LONG_DOUBLE_TYPE_SIZE;\n+      break;\n+    default:\n+      /* As this function is called by\n+\t 'gcc_jit_global_set_initializer' and\n+\t 'recording::global::write_reproducer' possible types are only\n+\t integrals and are covered by the previous cases.  */\n+      gcc_unreachable ();\n+    }\n+\n+  return size / BITS_PER_UNIT;\n+}\n+\n /* Implementation of pure virtual hook recording::type::dereference for\n    recording::memento_of_get_type.  */\n \n@@ -2482,6 +2537,15 @@ recording::memento_of_get_type::write_reproducer (reproducer &r)\n \n /* The implementation of class gcc::jit::recording::memento_of_get_pointer.  */\n \n+/* Override of default implementation of\n+   recording::type::get_size for get_pointer.  */\n+\n+size_t\n+recording::memento_of_get_pointer::get_size ()\n+{\n+  return POINTER_SIZE / BITS_PER_UNIT;\n+}\n+\n /* Override of default implementation of\n    recording::type::accepts_writes_from for get_pointer.\n \n@@ -4393,10 +4457,20 @@ recording::block::dump_edges_to_dot (pretty_printer *pp)\n void\n recording::global::replay_into (replayer *r)\n {\n-  set_playback_obj (r->new_global (playback_location (r, m_loc),\n-\t\t\t\t   m_kind,\n-\t\t\t\t   m_type->playback_type (),\n-\t\t\t\t   playback_string (m_name)));\n+  set_playback_obj (\n+    m_initializer\n+    ? r->new_global_initialized (playback_location (r, m_loc),\n+\t\t\t\t m_kind,\n+\t\t\t\t m_type->playback_type (),\n+\t\t\t\t m_type->dereference ()->get_size (),\n+\t\t\t\t m_initializer_num_bytes\n+\t\t\t\t / m_type->dereference ()->get_size (),\n+\t\t\t\t m_initializer,\n+\t\t\t\t playback_string (m_name))\n+    : r->new_global (playback_location (r, m_loc),\n+\t\t     m_kind,\n+\t\t     m_type->playback_type (),\n+\t\t     playback_string (m_name)));\n }\n \n /* Override the default implementation of\n@@ -4440,9 +4514,26 @@ recording::global::write_to_dump (dump &d)\n       d.write (\"extern \");\n       break;\n     }\n-  d.write (\"%s %s;\\n\",\n+\n+  d.write (\"%s %s\",\n \t   m_type->get_debug_string (),\n \t   get_debug_string ());\n+\n+  if (!m_initializer)\n+    {\n+      d.write (\";\\n\");\n+      return;\n+    }\n+\n+  d.write (\"=\\n  { \");\n+  const unsigned char *p = (const unsigned char *)m_initializer;\n+  for (size_t i = 0; i < m_initializer_num_bytes; i++)\n+    {\n+      d.write (\"0x%x, \", p[i]);\n+      if (i && !(i % 64))\n+\td.write (\"\\n    \");\n+    }\n+  d.write (\"};\\n\");\n }\n \n /* A table of enum gcc_jit_global_kind values expressed in string\n@@ -4454,6 +4545,27 @@ static const char * const global_kind_reproducer_strings[] = {\n   \"GCC_JIT_GLOBAL_IMPORTED\"\n };\n \n+template <typename T>\n+void\n+recording::global::write_initializer_reproducer (const char *id, reproducer &r)\n+{\n+  const char *init_id = r.make_tmp_identifier (\"init_for\", this);\n+  r.write (\"  %s %s[] =\\n    {\",\n+\t   m_type->dereference ()->get_debug_string (),\n+\t   init_id);\n+\n+  const T *p = (const T *)m_initializer;\n+  for (size_t i = 0; i < m_initializer_num_bytes / sizeof (T); i++)\n+    {\n+      r.write (\"%\" PRIu64 \", \", (uint64_t)p[i]);\n+      if (i && !(i % 64))\n+\tr.write (\"\\n    \");\n+    }\n+  r.write (\"};\\n\");\n+  r.write (\"  gcc_jit_global_set_initializer (%s, %s, sizeof (%s));\\n\",\n+\t   id, init_id, init_id);\n+}\n+\n /* Implementation of recording::memento::write_reproducer for globals. */\n \n void\n@@ -4472,6 +4584,27 @@ recording::global::write_reproducer (reproducer &r)\n     global_kind_reproducer_strings[m_kind],\n     r.get_identifier_as_type (get_type ()),\n     m_name->get_debug_string ());\n+\n+  if (m_initializer)\n+    switch (m_type->dereference ()->get_size ())\n+      {\n+      case 1:\n+\twrite_initializer_reproducer<uint8_t> (id, r);\n+\tbreak;\n+      case 2:\n+\twrite_initializer_reproducer<uint16_t> (id, r);\n+\tbreak;\n+      case 4:\n+\twrite_initializer_reproducer<uint32_t> (id, r);\n+\tbreak;\n+      case 8:\n+\twrite_initializer_reproducer<uint64_t> (id, r);\n+\tbreak;\n+      default:\n+\t/* This function is serving on sizes returned by 'get_size',\n+\t   these are all covered by the previous cases.  */\n+\tgcc_unreachable ();\n+      }\n }\n \n /* The implementation of the various const-handling classes:"}, {"sha": "30e37aff387d2c1a3f8cf0333a367d4f51a3ab49", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -502,6 +502,12 @@ class type : public memento\n      This will return NULL if it's not valid to dereference this type.\n      The caller is responsible for setting an error.  */\n   virtual type *dereference () = 0;\n+  /* Get the type size in bytes.\n+\n+     This is implemented only for memento_of_get_type and\n+     memento_of_get_pointer as it is used for initializing globals of\n+     these types.  */\n+  virtual size_t get_size () { gcc_unreachable (); }\n \n   /* Dynamic casts.  */\n   virtual function_type *dyn_cast_function_type () { return NULL; }\n@@ -569,6 +575,8 @@ class memento_of_get_type : public type\n \n   type *dereference () FINAL OVERRIDE;\n \n+  size_t get_size () FINAL OVERRIDE;\n+\n   bool accepts_writes_from (type *rtype) FINAL OVERRIDE\n   {\n     if (m_kind == GCC_JIT_TYPE_VOID_PTR)\n@@ -610,6 +618,8 @@ class memento_of_get_pointer : public type\n \n   type *dereference () FINAL OVERRIDE { return m_other_type; }\n \n+  size_t get_size () FINAL OVERRIDE;\n+\n   bool accepts_writes_from (type *rtype) FINAL OVERRIDE;\n \n   void replay_into (replayer *r) FINAL OVERRIDE;\n@@ -755,6 +765,7 @@ class array_type : public type\n   bool is_bool () const FINAL OVERRIDE { return false; }\n   type *is_pointer () FINAL OVERRIDE { return NULL; }\n   type *is_array () FINAL OVERRIDE { return m_element_type; }\n+  int num_elements () { return m_num_elements; }\n \n   void replay_into (replayer *) FINAL OVERRIDE;\n \n@@ -1107,6 +1118,7 @@ class lvalue : public rvalue\n \n   const char *access_as_rvalue (reproducer &r) OVERRIDE;\n   virtual const char *access_as_lvalue (reproducer &r);\n+  virtual bool is_global () const { return false; }\n };\n \n class param : public lvalue\n@@ -1327,16 +1339,38 @@ class global : public lvalue\n   : lvalue (ctxt, loc, type),\n     m_kind (kind),\n     m_name (name)\n-  {}\n+  {\n+    m_initializer = NULL;\n+    m_initializer_num_bytes = 0;\n+  }\n+  ~global ()\n+  {\n+    free (m_initializer);\n+  }\n \n   void replay_into (replayer *) FINAL OVERRIDE;\n \n   void visit_children (rvalue_visitor *) FINAL OVERRIDE {}\n \n   void write_to_dump (dump &d) FINAL OVERRIDE;\n \n+  bool is_global () const FINAL OVERRIDE { return true; }\n+\n+  void\n+  set_initializer (const void *initializer,\n+                   size_t num_bytes)\n+  {\n+    if (m_initializer)\n+      free (m_initializer);\n+    m_initializer = xmalloc (num_bytes);\n+    memcpy (m_initializer, initializer, num_bytes);\n+    m_initializer_num_bytes = num_bytes;\n+  }\n+\n private:\n   string * make_debug_string () FINAL OVERRIDE { return m_name; }\n+  template <typename T>\n+  void write_initializer_reproducer (const char *id, reproducer &r);\n   void write_reproducer (reproducer &r) FINAL OVERRIDE;\n   enum precedence get_precedence () const FINAL OVERRIDE\n   {\n@@ -1346,6 +1380,8 @@ class global : public lvalue\n private:\n   enum gcc_jit_global_kind m_kind;\n   string *m_name;\n+  void *m_initializer;\n+  size_t m_initializer_num_bytes;\n };\n \n template <typename HOST_TYPE>"}, {"sha": "1b9ef1a5db98becf4a079a5422fec2cb11d4c2ff", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -488,6 +488,7 @@ namespace gccjit\n \t\t\t location loc = location ());\n \n     rvalue get_address (location loc = location ());\n+    lvalue set_initializer (const void *blob, size_t num_bytes);\n   };\n \n   class param : public lvalue\n@@ -1737,6 +1738,15 @@ lvalue::get_address (location loc)\n \t\t\t\t\t     loc.get_inner_location ()));\n }\n \n+inline lvalue\n+lvalue::set_initializer (const void *blob, size_t num_bytes)\n+{\n+  gcc_jit_global_set_initializer (get_inner_lvalue (),\n+                                  blob,\n+                                  num_bytes);\n+  return *this;\n+}\n+\n // class param : public lvalue\n inline param::param () : lvalue () {}\n inline param::param (gcc_jit_param *inner)"}, {"sha": "a00aefc71087f9c34c2b6048d24372657952f079", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -1117,6 +1117,45 @@ gcc_jit_context_new_global (gcc_jit_context *ctxt,\n   return (gcc_jit_lvalue *)ctxt->new_global (loc, kind, type, name);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::global::set_initializer method, in\n+   jit-recording.c.  */\n+\n+extern gcc_jit_lvalue *\n+gcc_jit_global_set_initializer (gcc_jit_lvalue *global,\n+\t\t\t\tconst void *blob,\n+\t\t\t\tsize_t num_bytes)\n+{\n+  RETURN_NULL_IF_FAIL (global, NULL, NULL, \"NULL global\");\n+  RETURN_NULL_IF_FAIL (blob, NULL, NULL, \"NULL blob\");\n+  RETURN_NULL_IF_FAIL_PRINTF1 (global->is_global (), NULL, NULL,\n+\t\t\t       \"lvalue \\\"%s\\\" not a global\",\n+\t\t\t       global->get_debug_string ());\n+\n+  gcc::jit::recording::type *lval_type = global->get_type ();\n+  RETURN_NULL_IF_FAIL_PRINTF1 (lval_type->is_array (), NULL, NULL,\n+\t\t\t       \"global \\\"%s\\\" is not an array\",\n+\t\t\t       global->get_debug_string ());\n+  RETURN_NULL_IF_FAIL_PRINTF1 (lval_type->dereference ()->is_int (), NULL, NULL,\n+\t\t\t       \"global \\\"%s\\\" is not an array of integral type\",\n+\t\t\t       global->get_debug_string ());\n+  size_t lvalue_size =\n+    lval_type->dereference ()->get_size ()\n+    * static_cast <gcc::jit::recording::array_type *> (lval_type)->num_elements ();\n+  RETURN_NULL_IF_FAIL_PRINTF3 (\n+    lvalue_size == num_bytes, NULL, NULL,\n+    \"mismatching sizes:\"\n+    \" global \\\"%s\\\" has size %zu whereas initializer has size %zu\",\n+    global->get_debug_string (), lvalue_size, num_bytes);\n+\n+  reinterpret_cast <gcc::jit::recording::global *> (global)\n+    ->set_initializer (blob, num_bytes);\n+\n+  return global;\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, this calls the trivial"}, {"sha": "7134841bb0761863eda5076b31c0f39a9f02de93", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -788,6 +788,21 @@ gcc_jit_context_new_global (gcc_jit_context *ctxt,\n \t\t\t    gcc_jit_type *type,\n \t\t\t    const char *name);\n \n+#define LIBGCCJIT_HAVE_gcc_jit_global_set_initializer\n+\n+/* Set an initial value for a global, which must be an array of\n+   integral type.  Return the global itself.\n+\n+   This API entrypoint was added in LIBGCCJIT_ABI_14; you can test for its\n+   presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_global_set_initializer\n+*/\n+\n+extern gcc_jit_lvalue *\n+gcc_jit_global_set_initializer (gcc_jit_lvalue *global,\n+\t\t\t\tconst void *blob,\n+\t\t\t\tsize_t num_bytes);\n+\n /* Upcasting.  */\n extern gcc_jit_object *\n gcc_jit_lvalue_as_object (gcc_jit_lvalue *lvalue);"}, {"sha": "a6e67e781a4b0a582d7d9adbb986541c83b04538", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -186,4 +186,9 @@ LIBGCCJIT_ABI_13 {\n     gcc_jit_version_major;\n     gcc_jit_version_minor;\n     gcc_jit_version_patchlevel;\n-} LIBGCCJIT_ABI_12;\n\\ No newline at end of file\n+} LIBGCCJIT_ABI_12;\n+\n+LIBGCCJIT_ABI_14 {\n+  global:\n+    gcc_jit_global_set_initializer;\n+} LIBGCCJIT_ABI_13;"}, {"sha": "4202eb7798b7021c31f3f94b808a3aeeb53ec5e8", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -174,6 +174,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-global-set-initializer.c */\n+#define create_code create_code_global_set_initializer\n+#define verify_code verify_code_global_set_initializer\n+#include \"test-global-set-initializer.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-hello-world.c */\n #define create_code create_code_hello_world\n #define verify_code verify_code_hello_world"}, {"sha": "d38aba7d73f5bafa378cd836fc75c0527b7f2dc8", "filename": "gcc/testsuite/jit.dg/test-global-set-initializer.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Ftestsuite%2Fjit.dg%2Ftest-global-set-initializer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ecc0061c400102859dd630cce84d1cc5be0fbf7/gcc%2Ftestsuite%2Fjit.dg%2Ftest-global-set-initializer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-global-set-initializer.c?ref=4ecc0061c400102859dd630cce84d1cc5be0fbf7", "patch": "@@ -0,0 +1,78 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+#define BIG_BLOB_SIZE (1 << 12) /* 4KB.  */\n+\n+static signed char test_blob1[] = { 0xc, 0xa, 0xf, 0xf, 0xe };\n+static unsigned test_blob2[] = { 0x3, 0x2, 0x1, 0x0, 0x1, 0x2, 0x3 };\n+static unsigned char test_blob3[BIG_BLOB_SIZE];\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     signed char bin_blob1[] = { 0xc, 0xa, 0xf, 0xf, 0xe };\n+     unsigned bin_blob2[] = { 0x3, 0x2, 0x1, 0x0, 0x1, 0x2, 0x3 };\n+     unsigned char bin_blob3[4096]...\n+  */\n+  gcc_jit_type *unsigned_char_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UNSIGNED_CHAR);\n+  gcc_jit_type *signed_char_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_SIGNED_CHAR);\n+  gcc_jit_type *unsigned_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_UNSIGNED_INT);\n+\n+  gcc_jit_lvalue *glob =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED,\n+      gcc_jit_context_new_array_type (ctxt, NULL, signed_char_type,\n+\t\t\t\t      sizeof (test_blob1)),\n+      \"bin_blob1\");\n+  gcc_jit_global_set_initializer (glob, test_blob1, sizeof (test_blob1));\n+\n+  glob =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED,\n+      gcc_jit_context_new_array_type (\n+\tctxt, NULL, unsigned_type,\n+\tsizeof (test_blob2) / sizeof (*test_blob2)),\n+      \"bin_blob2\");\n+  gcc_jit_global_set_initializer (glob, test_blob2,\n+\t\t\t\t  sizeof (test_blob2));\n+\n+  for (size_t i = 0; i < BIG_BLOB_SIZE; i++)\n+    test_blob3[i] = i * i + i;\n+  glob =\n+    gcc_jit_context_new_global (\n+      ctxt, NULL, GCC_JIT_GLOBAL_EXPORTED,\n+      gcc_jit_context_new_array_type (ctxt, NULL, unsigned_char_type,\n+\t\t\t\t      sizeof (test_blob3)),\n+      \"bin_blob3\");\n+  gcc_jit_global_set_initializer (glob, test_blob3, sizeof (test_blob3));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_NON_NULL (result);\n+  void *glob = gcc_jit_result_get_global (result, \"bin_blob1\");\n+  CHECK_NON_NULL (glob);\n+  CHECK_VALUE (memcmp (test_blob1, glob, sizeof (test_blob1)), 0);\n+\n+  glob = gcc_jit_result_get_global (result, \"bin_blob2\");\n+  CHECK_NON_NULL (glob);\n+  CHECK_VALUE (memcmp (test_blob2, glob,\n+\t\t       sizeof (test_blob2)), 0);\n+\n+  glob = gcc_jit_result_get_global (result, \"bin_blob3\");\n+  CHECK_NON_NULL (glob);\n+  CHECK_VALUE (memcmp (test_blob3, glob, sizeof (test_blob3)), 0);\n+\n+}"}]}