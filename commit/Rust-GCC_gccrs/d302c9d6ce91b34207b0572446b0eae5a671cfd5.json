{"sha": "d302c9d6ce91b34207b0572446b0eae5a671cfd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMwMmM5ZDZjZTkxYjM0MjA3YjA1NzI0NDZiMGVhZTVhNjcxY2ZkNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-22T20:21:35Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-22T20:21:35Z"}, "message": "common.opt: Add -finline-limit.\n\n\t* common.opt: Add -finline-limit.\n\t* opts.c (common_handle_options): Handle it.\n\t* opts.sh: Temporary kludge for -finline-limit.\n\t* toplev.c (decode_f_option, independent_decode_option): Die.\n\t(parse_options_and_default_flags): No independent_decode_option.\n\nFrom-SVN: r68348", "tree": {"sha": "4843b7e9c3d4f090f620260883d5ea7c06a635d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4843b7e9c3d4f090f620260883d5ea7c06a635d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d302c9d6ce91b34207b0572446b0eae5a671cfd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d302c9d6ce91b34207b0572446b0eae5a671cfd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d302c9d6ce91b34207b0572446b0eae5a671cfd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d302c9d6ce91b34207b0572446b0eae5a671cfd5/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b170b55624f9a4543692f1681bacb1d9da0ea88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b170b55624f9a4543692f1681bacb1d9da0ea88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b170b55624f9a4543692f1681bacb1d9da0ea88"}], "stats": {"total": 89, "additions": 31, "deletions": 58}, "files": [{"sha": "d44f6ec2960adc98a419df7a7c991629f114304c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d302c9d6ce91b34207b0572446b0eae5a671cfd5", "patch": "@@ -1,3 +1,11 @@\n+2003-06-22  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* common.opt: Add -finline-limit.\n+\t* opts.c (common_handle_options): Handle it.\n+\t* opts.sh: Temporary kludge for -finline-limit.\n+\t* toplev.c (decode_f_option, independent_decode_option): Die.\n+\t(parse_options_and_default_flags): No independent_decode_option.\n+\n 2003-06-22  Andreas Jaeger  <aj@suse.de>\n \n \t* calls.c (emit_call_1): Readd lost ATTRIBUTE_UNUSED."}, {"sha": "cca70d65a0eab3375380756784f2ace692ace80a", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=d302c9d6ce91b34207b0572446b0eae5a671cfd5", "patch": "@@ -307,6 +307,12 @@ Common\n finline-functions\n Common\n \n+finline-limit-\n+Common RejectNegative Joined UInteger\n+\n+finline-limit=\n+Common RejectNegative Joined UInteger\n+\n finstrument-functions\n Common\n "}, {"sha": "2712346149f09f1833ab6b6c343bbf059f94d3c7", "filename": "gcc/opts.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=d302c9d6ce91b34207b0572446b0eae5a671cfd5", "patch": "@@ -734,6 +734,21 @@ common_handle_option (size_t scode, const char *arg,\n       flag_inline_functions = value;\n       break;\n \n+    case OPT_finline_limit_:\n+    case OPT_finline_limit_eq:\n+      set_param_value (\"max-inline-insns\", value);\n+      set_param_value (\"max-inline-insns-single\", value / 2);\n+      set_param_value (\"max-inline-insns-auto\", value / 2);\n+      set_param_value (\"max-inline-insns-rtl\", value);\n+      if (value / 4 < MIN_INLINE_INSNS)\n+\t{\n+\t  if (value / 4 > 10)\n+\t    set_param_value (\"min-inline-insns\", value / 4);\n+\t  else\n+\t    set_param_value (\"min-inline-insns\", 10);\n+\t}\n+      break;\n+\n     case OPT_finstrument_functions:\n       flag_instrument_function_entry_exit = value;\n       break;"}, {"sha": "2bedcfc9e005c70859e02bb9744d5bef9717635d", "filename": "gcc/opts.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=d302c9d6ce91b34207b0572446b0eae5a671cfd5", "patch": "@@ -114,6 +114,8 @@ ${AWK} '\n \n \t    len = length (opts[i]);\n \t    enum = \"OPT_\" opts[i]\n+\t    if (opts[i] == \"finline-limit=\")\n+\t\tenum = enum \"eq\"\n \t    gsub (\"[^A-Za-z0-9]\", \"_\", enum)\n \n \t    # If this switch takes joined arguments, back-chain all"}, {"sha": "33c027417caf9aadf9c0f4d0130e4fb7d1d99ad5", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d302c9d6ce91b34207b0572446b0eae5a671cfd5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d302c9d6ce91b34207b0572446b0eae5a671cfd5", "patch": "@@ -117,9 +117,6 @@ static void crash_signal (int) ATTRIBUTE_NORETURN;\n static void setup_core_dumping (void);\n static void compile_file (void);\n \n-static int decode_f_option (const char *);\n-static unsigned int independent_decode_option (char **);\n-\n static int print_single_switch (FILE *, int, int, const char *,\n \t\t\t\tconst char *, const char *,\n \t\t\t\tconst char *, const char *);\n@@ -4149,39 +4146,6 @@ decode_d_option (const char *arg)\n       }\n }\n \n-/* Parse a -f... command line switch.  ARG is the value after the -f.\n-   It is safe to access 'ARG - 2' to generate the full switch name.\n-   Return the number of strings consumed.  */\n-\n-static int\n-decode_f_option (const char *arg)\n-{\n-  const char *option_value;\n-\n-  if ((option_value = skip_leading_substring (arg, \"inline-limit-\"))\n-\t   || (option_value = skip_leading_substring (arg, \"inline-limit=\")))\n-    {\n-      int val =\n-\tread_integral_parameter (option_value, arg - 2,\n-\t\t\t\t MAX_INLINE_INSNS);\n-      set_param_value (\"max-inline-insns\", val);\n-      set_param_value (\"max-inline-insns-single\", val/2);\n-      set_param_value (\"max-inline-insns-auto\", val/2);\n-      set_param_value (\"max-inline-insns-rtl\", val);\n-      if (val/4 < MIN_INLINE_INSNS)\n-\t{\n-\t  if (val/4 > 10)\n-\t    set_param_value (\"min-inline-insns\", val/4);\n-\t  else\n-\t    set_param_value (\"min-inline-insns\", 10);\n-\t}\n-    }\n-  else\n-    return 0;\n-\n-  return 1;\n-}\n-\n /* Indexed by enum debug_info_type.  */\n const char *const debug_type_names[] =\n {\n@@ -4306,25 +4270,6 @@ ignoring option `%s' due to invalid debug level specification\",\n     warning (\"`-g%s': unknown or unsupported -g option\", arg);\n }\n \n-/* Decode the first argument in the argv as a language-independent option.\n-   Return the number of strings consumed.  */\n-\n-static unsigned int\n-independent_decode_option (char **argv)\n-{\n-  char *arg = argv[0];\n-\n-  if (arg[0] != '-' || arg[1] == 0)\n-    return 1;\n-\n-  arg++;\n-\n-  if (*arg == 'f')\n-    return decode_f_option (arg + 1);\n-\n-  return 0;\n-}\n-\n /* Decode -m switches.  */\n /* Decode the switch -mNAME.  */\n \n@@ -4783,9 +4728,6 @@ parse_options_and_default_flags (int argc, char **argv)\n       /* Give the language a chance to decode the option for itself.  */\n       processed = handle_option (argc - i, argv + i, lang_mask);\n \n-      if (!processed)\n-\tprocessed = independent_decode_option (argv + i);\n-\n       if (processed)\n \ti += processed;\n       else"}]}