{"sha": "7f42b6d7188f58cdb6450487d4c0037c831350bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0MmI2ZDcxODhmNThjZGI2NDUwNDg3ZDRjMDAzN2M4MzEzNTBiYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-06-16T18:27:15Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-06-16T18:27:15Z"}, "message": "tree.h (STMT_CHECK): New macro.\n\n\t* tree.h (STMT_CHECK): New macro.\n\tAlso upper-case argument names on all checking macros and\n\tfix some whitespace problems; assume CODE argument does not\n\thave side-effects.\n\nFrom-SVN: r68028", "tree": {"sha": "b7e01c5cdf80a99add474ec689fefdd890594672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e01c5cdf80a99add474ec689fefdd890594672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f42b6d7188f58cdb6450487d4c0037c831350bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f42b6d7188f58cdb6450487d4c0037c831350bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f42b6d7188f58cdb6450487d4c0037c831350bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f42b6d7188f58cdb6450487d4c0037c831350bc/comments", "author": null, "committer": null, "parents": [{"sha": "2a0621b9495e51d093141dc35e2e176d608df79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0621b9495e51d093141dc35e2e176d608df79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0621b9495e51d093141dc35e2e176d608df79f"}], "stats": {"total": 98, "additions": 51, "deletions": 47}, "files": [{"sha": "a9c5782205b41204241fd2283985347b9842b811", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f42b6d7188f58cdb6450487d4c0037c831350bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f42b6d7188f58cdb6450487d4c0037c831350bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f42b6d7188f58cdb6450487d4c0037c831350bc", "patch": "@@ -1,3 +1,10 @@\n+2003-06-16  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* tree.h (STMT_CHECK): New macro.\n+\tAlso upper-case argument names on all checking macros and\n+\tfix some whitespace problems; assume CODE argument does not\n+\thave side-effects.\n+\n 2003-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* scan.h: Convert to ISO C."}, {"sha": "42b64b1011af5f01bb4a9b60a77bfbb0a7df2c07", "filename": "gcc/tree.h", "status": "modified", "additions": 44, "deletions": 47, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f42b6d7188f58cdb6450487d4c0037c831350bc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f42b6d7188f58cdb6450487d4c0037c831350bc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7f42b6d7188f58cdb6450487d4c0037c831350bc", "patch": "@@ -274,31 +274,31 @@ struct tree_common GTY(())\n    is accessed incorrectly. The macros abort with a fatal error.  */\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n-#define TREE_CHECK(t, code) __extension__\t\t\t\t\\\n-({  const tree __t = (t);\t\t\t\t\t\t\\\n-    if (TREE_CODE(__t) != (code))\t\t\t\t\t\\\n-      tree_check_failed (__t, code, __FILE__, __LINE__, __FUNCTION__);\t\\\n+#define TREE_CHECK(T, CODE) __extension__\t\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != (CODE))\t\t\t\t\t\\\n+      tree_check_failed (__t, (CODE), __FILE__, __LINE__, __FUNCTION__); \\\n     __t; })\n-#define TREE_CLASS_CHECK(t, class) __extension__\t\t\t\\\n-({  const tree __t = (t);\t\t\t\t\t\t\\\n-    if (TREE_CODE_CLASS(TREE_CODE(__t)) != (class))\t\t\t\\\n-      tree_class_check_failed (__t, class, __FILE__, __LINE__,\t\t\\\n+\n+#define TREE_CLASS_CHECK(T, CLASS) __extension__\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    if (TREE_CODE_CLASS (TREE_CODE(__t)) != (CLASS))\t\t\t\\\n+      tree_class_check_failed (__t, (CLASS), __FILE__, __LINE__,\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n /* These checks have to be special cased.  */\n-#define EXPR_CHECK(t) __extension__\t\t\t\t\t\\\n-({  const tree __t = (t);\t\t\t\t\t\t\\\n-    char const __c = TREE_CODE_CLASS(TREE_CODE(__t));\t\t\t\\\n-    if (__c != 'r' && __c != 's' && __c != '<'\t\t\t\t\\\n-\t&& __c != '1' && __c != '2' && __c != 'e')\t\t\t\\\n+#define EXPR_CHECK(T) __extension__\t\t\t\t\t\\\n+({  const tree __t = (T);\t\t\t\t\t\t\\\n+    char const __c = TREE_CODE_CLASS (TREE_CODE (__t));\t\t\t\\\n+    if (!IS_EXPR_CODE_CLASS (__c) && __c != 'r' && __c != 's')\t\t\\\n       tree_class_check_failed (__t, 'e', __FILE__, __LINE__,\t\t\\\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n-#define TREE_VEC_ELT_CHECK(t, i) __extension__\t\t\t\t\\\n-(*({const tree __t = t;\t\t\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n+#define TREE_VEC_ELT_CHECK(T, I) __extension__\t\t\t\t\\\n+(*({const tree __t = (T);\t\t\t\t\t\t\\\n+    const int __i = (I);\t\t\t\t\t\t\\\n     if (TREE_CODE (__t) != TREE_VEC)\t\t\t\t\t\\\n       tree_check_failed (__t, TREE_VEC,\t\t\t\t\t\\\n \t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n@@ -308,36 +308,32 @@ struct tree_common GTY(())\n     &__t->vec.a[__i]; }))\n \n /* Special checks for TREE_OPERANDs.  */\n-#define TREE_OPERAND_CHECK(t, i) __extension__\t\t\t\t\\\n-(*({const tree __t = EXPR_CHECK(t);\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n+#define TREE_OPERAND_CHECK(T, I) __extension__\t\t\t\t\\\n+(*({const tree __t = EXPR_CHECK(T);\t\t\t\t\t\\\n+    const int __i = (I);\t\t\t\t\t\t\\\n     if (__i < 0 || __i >= TREE_CODE_LENGTH (TREE_CODE (__t)))\t\t\\\n       tree_operand_check_failed (__i, TREE_CODE (__t),\t\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->exp.operands[__i]; }))\n \n-#define TREE_OPERAND_CHECK_CODE(t, code, i) __extension__\t\t\\\n-(*({const tree __t = t;\t\t\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n-    const enum tree_code __code = code;\t\t\t\t\t\\\n-    if (TREE_CODE (__t) != __code)\t\t\t\t\t\\\n-      tree_check_failed (__t, __code,\t\t\t\t\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n-    if (__i < 0 || __i >= TREE_CODE_LENGTH (__code))\t\t\t\\\n-      tree_operand_check_failed (__i, __code,\t\t\t\t\\\n+#define TREE_OPERAND_CHECK_CODE(T, CODE, I) __extension__\t\t\\\n+(*({const tree __t = (T);\t\t\t\t\t\t\\\n+    const int __i = (I);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != CODE)\t\t\t\t\t\\\n+      tree_check_failed (__t, CODE, __FILE__, __LINE__, __FUNCTION__);\t\\\n+    if (__i < 0 || __i >= TREE_CODE_LENGTH (CODE))\t\t\t\\\n+      tree_operand_check_failed (__i, (CODE),\t\t\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->exp.operands[__i]; }))\n \n-#define TREE_RTL_OPERAND_CHECK(t, code, i) __extension__\t\t\\\n+#define TREE_RTL_OPERAND_CHECK(T, CODE, I) __extension__\t\t\\\n (*(rtx *)\t\t\t\t\t\t\t\t\\\n- ({const tree __t = t;\t\t\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n-    const enum tree_code __code = code;\t\t\t\t\t\\\n-    if (TREE_CODE (__t) != __code)\t\t\t\t\t\\\n-      tree_check_failed (__t, __code,\t\t\t\t\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n-    if (__i < 0 || __i >= TREE_CODE_LENGTH (__code))\t\t\t\\\n-      tree_operand_check_failed (__i, __code,\t\t\t\t\\\n+ ({const tree __t = (T);\t\t\t\t\t\t\\\n+    const int __i = (I);\t\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != (CODE))\t\t\t\t\t\\\n+      tree_check_failed (__t, (CODE), __FILE__, __LINE__, __FUNCTION__); \\\n+    if (__i < 0 || __i >= TREE_CODE_LENGTH ((CODE)))\t\t\t\\\n+      tree_operand_check_failed (__i, (CODE),\t\t\t\t\\\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->exp.operands[__i]; }))\n \n@@ -357,21 +353,22 @@ extern void tree_operand_check_failed PARAMS ((int, enum tree_code,\n     \n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n \n-#define TREE_CHECK(t, code)\t\t(t)\n-#define TREE_CLASS_CHECK(t, code)\t(t)\n-#define EXPR_CHECK(t)\t\t\t(t)\n-#define TREE_VEC_ELT_CHECK(t, i)\t((t)->vec.a[i])\n-#define TREE_OPERAND_CHECK(t, i)\t((t)->exp.operands[i])\n-#define TREE_OPERAND_CHECK_CODE(t, code, i) ((t)->exp.operands[i])\n-#define TREE_RTL_OPERAND_CHECK(t, code, i)  (*(rtx *) &((t)->exp.operands[i]))\n+#define TREE_CHECK(T, CODE)\t\t(T)\n+#define TREE_CLASS_CHECK(T, CODE)\t(T)\n+#define EXPR_CHECK(T)\t\t\t(T)\n+#define TREE_VEC_ELT_CHECK(T, I)\t((T)->vec.a[I])\n+#define TREE_OPERAND_CHECK(T, I)\t((T)->exp.operands[I])\n+#define TREE_OPERAND_CHECK_CODE(T, CODE, I) ((T)->exp.operands[I])\n+#define TREE_RTL_OPERAND_CHECK(T, CODE, I)  (*(rtx *) &((T)->exp.operands[I]))\n \n #endif\n \n #include \"tree-check.h\"\n \n-#define TYPE_CHECK(tree)\tTREE_CLASS_CHECK  (tree, 't')\n-#define DECL_CHECK(tree)\tTREE_CLASS_CHECK  (tree, 'd')\n-#define CST_CHECK(tree)\t\tTREE_CLASS_CHECK  (tree, 'c')\n+#define TYPE_CHECK(T)\t\tTREE_CLASS_CHECK (T, 't')\n+#define DECL_CHECK(T)\t\tTREE_CLASS_CHECK (T, 'd')\n+#define CST_CHECK(T)\t\tTREE_CLASS_CHECK (T, 'c')\n+#define STMT_CHECK(T)\t\tTREE_CLASS_CHECK (T, 's')\n \n /* In all nodes that are expressions, this is the data type of the expression.\n    In POINTER_TYPE nodes, this is the type that the pointer points to."}]}