{"sha": "4051959be99ddba084673788892d3e26bac13621", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1MTk1OWJlOTlkZGJhMDg0NjczNzg4ODkyZDNlMjZiYWMxMzYyMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-06T22:30:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-06T22:30:16Z"}, "message": "c-parse.in (struct_head, [...]): New nonterminals.\n\n        * c-parse.in (struct_head, union_head, enum_head): New nonterminals.\n        (structsp): Use them.  Update files generated from c-parse.in.\n        * extend.texi (Type Attributes): Document it.\n\nFrom-SVN: r20971", "tree": {"sha": "b23cba12307f8fdf4a2b138f5bc2d68ad6a9bfd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23cba12307f8fdf4a2b138f5bc2d68ad6a9bfd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4051959be99ddba084673788892d3e26bac13621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4051959be99ddba084673788892d3e26bac13621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4051959be99ddba084673788892d3e26bac13621", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4051959be99ddba084673788892d3e26bac13621/comments", "author": null, "committer": null, "parents": [{"sha": "48d4389d553730d881343dcba8aa8ac5518ab8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d4389d553730d881343dcba8aa8ac5518ab8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d4389d553730d881343dcba8aa8ac5518ab8df"}], "stats": {"total": 6472, "additions": 3309, "deletions": 3163}, "files": [{"sha": "872e982ed1cdea9d5f9a1730a6b9505be256aac3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4051959be99ddba084673788892d3e26bac13621", "patch": "@@ -1,5 +1,9 @@\n Mon Jul  6 22:50:48 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* c-parse.in (struct_head, union_head, enum_head): New nonterminals.\n+\t(structsp): Use them.  Update files generated from c-parse.in.\n+\t* extend.texi (Type Attributes): Document it.\n+\n \t* c-decl.c: Add warn_multichar.\n \t(c_decode_option): Handle -Wno-multichar.\n \t* c-lex.c (yylex): Check it."}, {"sha": "842d252631225e572ac2eafac2115a405c7bd4e3", "filename": "gcc/c-parse.c", "status": "modified", "additions": 1221, "deletions": 1196, "changes": 2417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=4051959be99ddba084673788892d3e26bac13621"}, {"sha": "16500c5fe35dbe76c72c1b17abc672d4801f2d77", "filename": "gcc/c-parse.in", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=4051959be99ddba084673788892d3e26bac13621", "patch": "@@ -197,6 +197,7 @@ end ifc\n %type <ttype> structsp component_decl_list component_decl_list2\n %type <ttype> component_decl components component_declarator\n %type <ttype> enumlist enumerator\n+%type <ttype> struct_head union_head enum_head\n %type <ttype> typename absdcl absdcl1 type_quals\n %type <ttype> xexpr parms parm identifiers\n \n@@ -1440,42 +1441,63 @@ notype_declarator:\n \t| IDENTIFIER\n \t;\n \n+struct_head:\n+\t  STRUCT\n+\t\t{ $$ = NULL_TREE; }\n+\t| STRUCT attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n+union_head:\n+\t  UNION\n+\t\t{ $$ = NULL_TREE; }\n+\t| UNION attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n+enum_head:\n+\t  ENUM\n+\t\t{ $$ = NULL_TREE; }\n+\t| ENUM attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n structsp:\n-\t  STRUCT identifier '{'\n+\t  struct_head identifier '{'\n \t\t{ $$ = start_struct (RECORD_TYPE, $2);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t}\n \t  component_decl_list '}' maybe_attribute \n-\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n-\t| STRUCT '{' component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }\n+\t| struct_head '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n-\t\t\t\t      $3, $5);\n+\t\t\t\t      $3, chainon ($1, $5));\n \t\t}\n-\t| STRUCT identifier\n+\t| struct_head identifier\n \t\t{ $$ = xref_tag (RECORD_TYPE, $2); }\n-\t| UNION identifier '{'\n+\t| union_head identifier '{'\n \t\t{ $$ = start_struct (UNION_TYPE, $2); }\n \t  component_decl_list '}' maybe_attribute\n-\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n-\t| UNION '{' component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }\n+\t| union_head '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n-\t\t\t\t      $3, $5);\n+\t\t\t\t      $3, chainon ($1, $5));\n \t\t}\n-\t| UNION identifier\n+\t| union_head identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n-\t| ENUM identifier '{'\n+\t| enum_head identifier '{'\n \t\t{ $<itype>3 = suspend_momentary ();\n \t\t  $$ = start_enum ($2); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5), $8);\n+\t\t{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));\n \t\t  resume_momentary ($<itype>3); }\n-\t| ENUM '{'\n+\t| enum_head '{'\n \t\t{ $<itype>2 = suspend_momentary ();\n \t\t  $$ = start_enum (NULL_TREE); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4), $7);\n+\t\t{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));\n \t\t  resume_momentary ($<itype>2); }\n-\t| ENUM identifier\n+\t| enum_head identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n \t;\n "}, {"sha": "ab0d7d16b9d0d8da6130cee0c735ef006539baad", "filename": "gcc/c-parse.y", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=4051959be99ddba084673788892d3e26bac13621", "patch": "@@ -185,6 +185,7 @@ char *language_string = \"GNU C\";\n %type <ttype> structsp component_decl_list component_decl_list2\n %type <ttype> component_decl components component_declarator\n %type <ttype> enumlist enumerator\n+%type <ttype> struct_head union_head enum_head\n %type <ttype> typename absdcl absdcl1 type_quals\n %type <ttype> xexpr parms parm identifiers\n \n@@ -1269,42 +1270,63 @@ notype_declarator:\n \t| IDENTIFIER\n \t;\n \n+struct_head:\n+\t  STRUCT\n+\t\t{ $$ = NULL_TREE; }\n+\t| STRUCT attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n+union_head:\n+\t  UNION\n+\t\t{ $$ = NULL_TREE; }\n+\t| UNION attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n+enum_head:\n+\t  ENUM\n+\t\t{ $$ = NULL_TREE; }\n+\t| ENUM attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n structsp:\n-\t  STRUCT identifier '{'\n+\t  struct_head identifier '{'\n \t\t{ $$ = start_struct (RECORD_TYPE, $2);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t}\n \t  component_decl_list '}' maybe_attribute \n-\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n-\t| STRUCT '{' component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }\n+\t| struct_head '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n-\t\t\t\t      $3, $5);\n+\t\t\t\t      $3, chainon ($1, $5));\n \t\t}\n-\t| STRUCT identifier\n+\t| struct_head identifier\n \t\t{ $$ = xref_tag (RECORD_TYPE, $2); }\n-\t| UNION identifier '{'\n+\t| union_head identifier '{'\n \t\t{ $$ = start_struct (UNION_TYPE, $2); }\n \t  component_decl_list '}' maybe_attribute\n-\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n-\t| UNION '{' component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }\n+\t| union_head '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n-\t\t\t\t      $3, $5);\n+\t\t\t\t      $3, chainon ($1, $5));\n \t\t}\n-\t| UNION identifier\n+\t| union_head identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n-\t| ENUM identifier '{'\n+\t| enum_head identifier '{'\n \t\t{ $<itype>3 = suspend_momentary ();\n \t\t  $$ = start_enum ($2); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5), $8);\n+\t\t{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));\n \t\t  resume_momentary ($<itype>3); }\n-\t| ENUM '{'\n+\t| enum_head '{'\n \t\t{ $<itype>2 = suspend_momentary ();\n \t\t  $$ = start_enum (NULL_TREE); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4), $7);\n+\t\t{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));\n \t\t  resume_momentary ($<itype>2); }\n-\t| ENUM identifier\n+\t| enum_head identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n \t;\n "}, {"sha": "5cf1b24f2efdf64129a7d0fbf16e090c9192f52a", "filename": "gcc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=4051959be99ddba084673788892d3e26bac13621", "patch": "@@ -2015,6 +2015,9 @@ closing curly brace of a complete enum, struct or union type\n @emph{definition} and the @code{packed} attribute only past the closing\n brace of a definition.\n \n+You may also specify attributes between the enum, struct or union\n+tag and the name of the type rather than after the closing brace.\n+\n @table @code\n @cindex @code{aligned} attribute\n @item aligned (@var{alignment})"}, {"sha": "81daef3b8f793e05ef4ecb1efb194417b6e832db", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 1970, "deletions": 1922, "changes": 3892, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=4051959be99ddba084673788892d3e26bac13621"}, {"sha": "bc98ff23489e065414aca119e5bcea8a204b240c", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4051959be99ddba084673788892d3e26bac13621/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4051959be99ddba084673788892d3e26bac13621/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=4051959be99ddba084673788892d3e26bac13621", "patch": "@@ -163,6 +163,7 @@ char *language_string = \"GNU Obj-C\";\n %type <ttype> structsp component_decl_list component_decl_list2\n %type <ttype> component_decl components component_declarator\n %type <ttype> enumlist enumerator\n+%type <ttype> struct_head union_head enum_head\n %type <ttype> typename absdcl absdcl1 type_quals\n %type <ttype> xexpr parms parm identifiers\n \n@@ -1367,42 +1368,63 @@ notype_declarator:\n \t| IDENTIFIER\n \t;\n \n+struct_head:\n+\t  STRUCT\n+\t\t{ $$ = NULL_TREE; }\n+\t| STRUCT attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n+union_head:\n+\t  UNION\n+\t\t{ $$ = NULL_TREE; }\n+\t| UNION attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n+enum_head:\n+\t  ENUM\n+\t\t{ $$ = NULL_TREE; }\n+\t| ENUM attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n structsp:\n-\t  STRUCT identifier '{'\n+\t  struct_head identifier '{'\n \t\t{ $$ = start_struct (RECORD_TYPE, $2);\n \t\t  /* Start scope of tag before parsing components.  */\n \t\t}\n \t  component_decl_list '}' maybe_attribute \n-\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n-\t| STRUCT '{' component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }\n+\t| struct_head '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),\n-\t\t\t\t      $3, $5);\n+\t\t\t\t      $3, chainon ($1, $5));\n \t\t}\n-\t| STRUCT identifier\n+\t| struct_head identifier\n \t\t{ $$ = xref_tag (RECORD_TYPE, $2); }\n-\t| UNION identifier '{'\n+\t| union_head identifier '{'\n \t\t{ $$ = start_struct (UNION_TYPE, $2); }\n \t  component_decl_list '}' maybe_attribute\n-\t\t{ $$ = finish_struct ($<ttype>4, $5, $7); }\n-\t| UNION '{' component_decl_list '}' maybe_attribute\n+\t\t{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }\n+\t| union_head '{' component_decl_list '}' maybe_attribute\n \t\t{ $$ = finish_struct (start_struct (UNION_TYPE, NULL_TREE),\n-\t\t\t\t      $3, $5);\n+\t\t\t\t      $3, chainon ($1, $5));\n \t\t}\n-\t| UNION identifier\n+\t| union_head identifier\n \t\t{ $$ = xref_tag (UNION_TYPE, $2); }\n-\t| ENUM identifier '{'\n+\t| enum_head identifier '{'\n \t\t{ $<itype>3 = suspend_momentary ();\n \t\t  $$ = start_enum ($2); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$ = finish_enum ($<ttype>4, nreverse ($5), $8);\n+\t\t{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));\n \t\t  resume_momentary ($<itype>3); }\n-\t| ENUM '{'\n+\t| enum_head '{'\n \t\t{ $<itype>2 = suspend_momentary ();\n \t\t  $$ = start_enum (NULL_TREE); }\n \t  enumlist maybecomma_warn '}' maybe_attribute\n-\t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4), $7);\n+\t\t{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));\n \t\t  resume_momentary ($<itype>2); }\n-\t| ENUM identifier\n+\t| enum_head identifier\n \t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n \t;\n "}]}