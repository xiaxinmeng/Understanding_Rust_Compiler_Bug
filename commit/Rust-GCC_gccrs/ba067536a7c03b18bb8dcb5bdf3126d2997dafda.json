{"sha": "ba067536a7c03b18bb8dcb5bdf3126d2997dafda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwNjc1MzZhN2MwM2IxOGJiOGRjYjViZGYzMTI2ZDI5OTdkYWZkYQ==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-11-14T11:18:21Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-11-14T11:18:21Z"}, "message": "[RS6000] Remove vec_shl and (hopefully) fix vec_shr\n\n\t* config/rs6000/vector.md (vec_shl_<mode>): Remove.\n\t(vec_shr_<mode>): Reverse shift if BYTES_BIG_ENDIAN.\n\nFrom-SVN: r217552", "tree": {"sha": "7fbb9f6107ef0d703aea46a134e9f95630ea4e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fbb9f6107ef0d703aea46a134e9f95630ea4e94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba067536a7c03b18bb8dcb5bdf3126d2997dafda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba067536a7c03b18bb8dcb5bdf3126d2997dafda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba067536a7c03b18bb8dcb5bdf3126d2997dafda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba067536a7c03b18bb8dcb5bdf3126d2997dafda/comments", "author": null, "committer": null, "parents": [{"sha": "ebaea9baf55808fed2b41462fe6038b4512d9fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaea9baf55808fed2b41462fe6038b4512d9fde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebaea9baf55808fed2b41462fe6038b4512d9fde"}], "stats": {"total": 53, "additions": 9, "deletions": 44}, "files": [{"sha": "5e4a6686dd6387d38753f551a09c02d7979f8e5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba067536a7c03b18bb8dcb5bdf3126d2997dafda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba067536a7c03b18bb8dcb5bdf3126d2997dafda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba067536a7c03b18bb8dcb5bdf3126d2997dafda", "patch": "@@ -1,3 +1,8 @@\n+2014-11-14  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/rs6000/vector.md (vec_shl_<mode>): Remove.\n+\t(vec_shr_<mode>): Reverse shift if BYTES_BIG_ENDIAN.\n+\n 2014-11-14  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* optabs.c (shift_amt_for_vec_perm_mask): Remove code conditional on"}, {"sha": "04f453877da6502b08723e1b536554855fc6e2de", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba067536a7c03b18bb8dcb5bdf3126d2997dafda/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba067536a7c03b18bb8dcb5bdf3126d2997dafda/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=ba067536a7c03b18bb8dcb5bdf3126d2997dafda", "patch": "@@ -960,53 +960,11 @@\n  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_ALLOW_MOVMISALIGN\"\n  \"\")\n \n-\f\n-;; Vector shift left in bits.  Currently supported ony for shift\n-;; amounts that can be expressed as byte shifts (divisible by 8).\n-;; General shift amounts can be supported using vslo + vsl. We're\n-;; not expecting to see these yet (the vectorizer currently\n-;; generates only shifts divisible by byte_size).\n-(define_expand \"vec_shl_<mode>\"\n-  [(match_operand:VEC_L 0 \"vlogical_operand\" \"\")\n-   (match_operand:VEC_L 1 \"vlogical_operand\" \"\")\n-   (match_operand:QI 2 \"reg_or_short_operand\" \"\")]\n-  \"TARGET_ALTIVEC\"\n-  \"\n-{\n-  rtx bitshift = operands[2];\n-  rtx shift;\n-  rtx insn;\n-  HOST_WIDE_INT bitshift_val;\n-  HOST_WIDE_INT byteshift_val;\n-\n-  if (! CONSTANT_P (bitshift))\n-    FAIL;\n-  bitshift_val = INTVAL (bitshift);\n-  if (bitshift_val & 0x7)\n-    FAIL;\n-  byteshift_val = bitshift_val >> 3;\n-  if (TARGET_VSX && (byteshift_val & 0x3) == 0)\n-    {\n-      shift = gen_rtx_CONST_INT (QImode, byteshift_val >> 2);\n-      insn = gen_vsx_xxsldwi_<mode> (operands[0], operands[1], operands[1],\n-\t\t\t\t     shift);\n-    }\n-  else\n-    {\n-      shift = gen_rtx_CONST_INT (QImode, byteshift_val);\n-      insn = gen_altivec_vsldoi_<mode> (operands[0], operands[1], operands[1],\n-\t\t\t\t\tshift);\n-    }\n-\n-  emit_insn (insn);\n-  DONE;\n-}\")\n-\n ;; Vector shift right in bits. Currently supported ony for shift\n ;; amounts that can be expressed as byte shifts (divisible by 8).\n ;; General shift amounts can be supported using vsro + vsr. We're\n ;; not expecting to see these yet (the vectorizer currently\n-;; generates only shifts divisible by byte_size).\n+;; generates only shifts by a whole number of vector elements).\n (define_expand \"vec_shr_<mode>\"\n   [(match_operand:VEC_L 0 \"vlogical_operand\" \"\")\n    (match_operand:VEC_L 1 \"vlogical_operand\" \"\")\n@@ -1025,7 +983,9 @@\n   bitshift_val = INTVAL (bitshift);\n   if (bitshift_val & 0x7)\n     FAIL;\n-  byteshift_val = 16 - (bitshift_val >> 3);\n+  byteshift_val = (bitshift_val >> 3);\n+  if (!BYTES_BIG_ENDIAN)\n+    byteshift_val = 16 - byteshift_val;\n   if (TARGET_VSX && (byteshift_val & 0x3) == 0)\n     {\n       shift = gen_rtx_CONST_INT (QImode, byteshift_val >> 2);"}]}