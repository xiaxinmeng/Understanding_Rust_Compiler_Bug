{"sha": "4169b895e85cd78da39ec821149672567ed6f609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2OWI4OTVlODVjZDc4ZGEzOWVjODIxMTQ5NjcyNTY3ZWQ2ZjYwOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T10:52:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T10:52:24Z"}, "message": "[multiple changes]\n\n2012-05-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exextr.adb: Add comment.\n\n2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting (remove long dead code).\n\n2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* aspects.adb, aspects.ads: Add aspects for Convention, Export,\n\tExternal_Name, Import, and Link_Name.\n\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): if the\n\tpragma comes from an aspect specification, the entity is the\n\tfirst argument.\n\t* sem_prag.adb (Analyze_Pragma, cases Pragma_Export and\n\tPragma_Import): if the pragma comes from an aspect specification,\n\tthe entity is the first argument, and the second has the value\n\tTrue by default.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): generate pragam\n\tfor aspect Convention. Add placeholders for Link_Name and\n\tExternal_Name.\n\nFrom-SVN: r187523", "tree": {"sha": "04c1eb149f086e71e621f985ba45cbbf1470156a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c1eb149f086e71e621f985ba45cbbf1470156a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4169b895e85cd78da39ec821149672567ed6f609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4169b895e85cd78da39ec821149672567ed6f609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4169b895e85cd78da39ec821149672567ed6f609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4169b895e85cd78da39ec821149672567ed6f609/comments", "author": null, "committer": null, "parents": [{"sha": "d1ede5f4d099faee41e60f7709a027ab2b7ac306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ede5f4d099faee41e60f7709a027ab2b7ac306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ede5f4d099faee41e60f7709a027ab2b7ac306"}], "stats": {"total": 211, "additions": 127, "deletions": 84}, "files": [{"sha": "7ad79d34c16463cc812e7ba64491d0bc528d9ce2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -1,3 +1,26 @@\n+2012-05-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exextr.adb: Add comment.\n+\n+2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting (remove long dead code).\n+\n+2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* aspects.adb, aspects.ads: Add aspects for Convention, Export,\n+\tExternal_Name, Import, and Link_Name.\n+\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): if the\n+\tpragma comes from an aspect specification, the entity is the\n+\tfirst argument.\n+\t* sem_prag.adb (Analyze_Pragma, cases Pragma_Export and\n+\tPragma_Import): if the pragma comes from an aspect specification,\n+\tthe entity is the first argument, and the second has the value\n+\tTrue by default.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): generate pragam\n+\tfor aspect Convention. Add placeholders for Link_Name and\n+\tExternal_Name.\n+\n 2012-05-15  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Asynchronous_Select): Extract the statements"}, {"sha": "d8f4072e402903cfa1d955786ba5384a796799f2", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -162,14 +162,14 @@ package body Exception_Traces is\n    -----------------------------------\n \n    procedure Unhandled_Exception_Terminate is\n-\n-      --  Comments needed on why we do things this way ??? (see RH)\n-\n       Excep : Exception_Occurrence;\n       --  This occurrence will be used to display a message after finalization.\n       --  It is necessary to save a copy here, or else the designated value\n       --  could be overwritten if an exception is raised during finalization\n-      --  (even if that exception is caught).\n+      --  (even if that exception is caught). The occurrence is saved on the\n+      --  stack to avoid dynamic allocation (if this exception is due to lack\n+      --  of space in the heap, we therefore avoid a second failure). We assume\n+      --  that there is enough room on the stack however.\n \n    begin\n       Save_Occurrence (Excep, Get_Current_Excep.all.all);"}, {"sha": "6605b7185ca50360421cef44215a9a753b90f29e", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -252,6 +252,7 @@ package body Aspects is\n     Aspect_Component_Size               => Aspect_Component_Size,\n     Aspect_Constant_Indexing            => Aspect_Constant_Indexing,\n     Aspect_Contract_Case                => Aspect_Contract_Case,\n+    Aspect_Convention                   => Aspect_Convention,\n     Aspect_CPU                          => Aspect_CPU,\n     Aspect_Default_Component_Value      => Aspect_Default_Component_Value,\n     Aspect_Default_Iterator             => Aspect_Default_Iterator,\n@@ -262,9 +263,12 @@ package body Aspects is\n     Aspect_Dispatching_Domain           => Aspect_Dispatching_Domain,\n     Aspect_Dynamic_Predicate            => Aspect_Predicate,\n     Aspect_Elaborate_Body               => Aspect_Elaborate_Body,\n+    Aspect_Export                       => Aspect_Export,\n+    Aspect_External_Name                => Aspect_External_Name,\n     Aspect_External_Tag                 => Aspect_External_Tag,\n     Aspect_Favor_Top_Level              => Aspect_Favor_Top_Level,\n     Aspect_Implicit_Dereference         => Aspect_Implicit_Dereference,\n+    Aspect_Import                       => Aspect_Import,\n     Aspect_Independent                  => Aspect_Independent,\n     Aspect_Independent_Components       => Aspect_Independent_Components,\n     Aspect_Inline                       => Aspect_Inline,\n@@ -274,6 +278,7 @@ package body Aspects is\n     Aspect_Interrupt_Priority           => Aspect_Interrupt_Priority,\n     Aspect_Invariant                    => Aspect_Invariant,\n     Aspect_Iterator_Element             => Aspect_Iterator_Element,\n+    Aspect_Link_Name                    => Aspect_Link_Name,\n     Aspect_Lock_Free                    => Aspect_Lock_Free,\n     Aspect_Machine_Radix                => Aspect_Machine_Radix,\n     Aspect_No_Return                    => Aspect_No_Return,"}, {"sha": "330f72a7ef670dcfb461735614922cfacd1472cc", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -51,6 +51,7 @@ package Aspects is\n       Aspect_Component_Size,\n       Aspect_Constant_Indexing,\n       Aspect_Contract_Case,                 -- GNAT\n+      Aspect_Convention,\n       Aspect_CPU,\n       Aspect_Default_Component_Value,\n       Aspect_Default_Iterator,\n@@ -59,12 +60,14 @@ package Aspects is\n       Aspect_Dimension_System,              -- GNAT\n       Aspect_Dispatching_Domain,\n       Aspect_Dynamic_Predicate,\n+      Aspect_External_Name,\n       Aspect_External_Tag,\n       Aspect_Implicit_Dereference,\n       Aspect_Input,\n       Aspect_Interrupt_Priority,\n       Aspect_Invariant,\n       Aspect_Iterator_Element,\n+      Aspect_Link_Name,\n       Aspect_Machine_Radix,\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Output,\n@@ -121,9 +124,11 @@ package Aspects is\n       Aspect_Atomic,\n       Aspect_Atomic_Components,\n       Aspect_Discard_Names,\n+      Aspect_Export,\n       Aspect_Favor_Top_Level,               -- GNAT\n       Aspect_Independent,\n       Aspect_Independent_Components,\n+      Aspect_Import,\n       Aspect_Inline,\n       Aspect_Inline_Always,                 -- GNAT\n       Aspect_Interrupt_Handler,\n@@ -269,6 +274,7 @@ package Aspects is\n                         Aspect_Component_Size          => Expression,\n                         Aspect_Constant_Indexing       => Name,\n                         Aspect_Contract_Case           => Expression,\n+                        Aspect_Convention              => Name,\n                         Aspect_CPU                     => Expression,\n                         Aspect_Default_Component_Value => Expression,\n                         Aspect_Default_Iterator        => Name,\n@@ -277,12 +283,14 @@ package Aspects is\n                         Aspect_Dimension_System        => Expression,\n                         Aspect_Dispatching_Domain      => Expression,\n                         Aspect_Dynamic_Predicate       => Expression,\n+                        Aspect_External_Name           => Expression,\n                         Aspect_External_Tag            => Expression,\n                         Aspect_Implicit_Dereference    => Name,\n                         Aspect_Input                   => Name,\n                         Aspect_Interrupt_Priority      => Expression,\n                         Aspect_Invariant               => Expression,\n                         Aspect_Iterator_Element        => Name,\n+                        Aspect_Link_Name               => Expression,\n                         Aspect_Machine_Radix           => Expression,\n                         Aspect_Object_Size             => Expression,\n                         Aspect_Output                  => Name,\n@@ -336,6 +344,7 @@ package Aspects is\n      Aspect_Component_Size               => Name_Component_Size,\n      Aspect_Constant_Indexing            => Name_Constant_Indexing,\n      Aspect_Contract_Case                => Name_Contract_Case,\n+     Aspect_Convention                   => Name_Convention,\n      Aspect_CPU                          => Name_CPU,\n      Aspect_Default_Iterator             => Name_Default_Iterator,\n      Aspect_Default_Value                => Name_Default_Value,\n@@ -346,9 +355,12 @@ package Aspects is\n      Aspect_Dispatching_Domain           => Name_Dispatching_Domain,\n      Aspect_Dynamic_Predicate            => Name_Dynamic_Predicate,\n      Aspect_Elaborate_Body               => Name_Elaborate_Body,\n+     Aspect_External_Name                => Name_External_Name,\n      Aspect_External_Tag                 => Name_External_Tag,\n+     Aspect_Export                       => Name_Export,\n      Aspect_Favor_Top_Level              => Name_Favor_Top_Level,\n      Aspect_Implicit_Dereference         => Name_Implicit_Dereference,\n+     Aspect_Import                       => Name_Import,\n      Aspect_Independent                  => Name_Independent,\n      Aspect_Independent_Components       => Name_Independent_Components,\n      Aspect_Inline                       => Name_Inline,\n@@ -358,6 +370,7 @@ package Aspects is\n      Aspect_Interrupt_Priority           => Name_Interrupt_Priority,\n      Aspect_Invariant                    => Name_Invariant,\n      Aspect_Iterator_Element             => Name_Iterator_Element,\n+     Aspect_Link_Name                    => Name_Link_Name,\n      Aspect_Lock_Free                    => Name_Lock_Free,\n      Aspect_Machine_Radix                => Name_Machine_Radix,\n      Aspect_No_Return                    => Name_No_Return,"}, {"sha": "d283a6e397ee764fdfe25feaa17e844344b9bef2", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -527,10 +527,18 @@ package body Exp_Prag is\n    --  seen (i.e. this elaboration cannot be deferred to the freeze point).\n \n    procedure Expand_Pragma_Import_Or_Interface (N : Node_Id) is\n-      Def_Id    : constant Entity_Id := Entity (Arg2 (N));\n+      Def_Id    : Entity_Id;\n       Init_Call : Node_Id;\n \n    begin\n+      --  If the pragma comes from an aspect, the entity is its first argument.\n+\n+      if Present (Corresponding_Aspect (N)) then\n+         Def_Id := Entity (Arg1 (N));\n+      else\n+         Def_Id := Entity (Arg2 (N));\n+      end if;\n+\n       if Ekind (Def_Id) = E_Variable then\n \n          --  Find generated initialization call for object, if any"}, {"sha": "fbbde85349222ef9618fb3d5840d88ffc6a95038", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -1168,6 +1168,14 @@ package body Sem_Ch13 is\n                --  the second argument is a local name referring to the entity,\n                --  and the first argument is the aspect definition expression.\n \n+               when Aspect_Convention =>\n+                  Aitem :=\n+                    Make_Pragma (Loc,\n+                      Pragma_Argument_Associations =>\n+                        New_List (Relocate_Node (Expr), Ent),\n+                      Pragma_Identifier            =>\n+                        Make_Identifier (Sloc (Id), Chars (Id)));\n+\n                when Aspect_Warnings =>\n \n                   --  Construct the pragma\n@@ -1562,6 +1570,13 @@ package body Sem_Ch13 is\n                   Analyze_Aspect_Dimension_System (N, Id, Expr);\n                   goto Continue;\n \n+               --  Placeholders for new aspects without corresponding pragmas\n+\n+               when Aspect_External_Name =>\n+                  null;\n+\n+               when Aspect_Link_Name =>\n+                  null;\n             end case;\n \n             --  If a delay is required, we delay the freeze (not much point in\n@@ -6199,6 +6214,9 @@ package body Sem_Ch13 is\n          when Aspect_Attach_Handler =>\n             T := RTE (RE_Interrupt_ID);\n \n+         when Aspect_Convention =>\n+            null;\n+\n          --  Default_Value is resolved with the type entity in question\n \n          when Aspect_Default_Value =>\n@@ -6226,6 +6244,12 @@ package body Sem_Ch13 is\n          when Aspect_External_Tag =>\n             T := Standard_String;\n \n+         when Aspect_External_Name =>\n+            T := Standard_String;\n+\n+         when Aspect_Link_Name =>\n+            T := Standard_String;\n+\n          when Aspect_Priority | Aspect_Interrupt_Priority =>\n             T := Standard_Integer;\n "}, {"sha": "e6f3c4c7c9bf203738564978de3f517d4592a605", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -3592,80 +3592,6 @@ package body Sem_Ch3 is\n          else\n             Validate_Controlled_Object (Id);\n          end if;\n-\n-         --  Generate a warning when an initialization causes an obvious ABE\n-         --  violation. If the init expression is a simple aggregate there\n-         --  shouldn't be any initialize/adjust call generated. This will be\n-         --  true as soon as aggregates are built in place when possible.\n-\n-         --  ??? at the moment we do not generate warnings for temporaries\n-         --  created for those aggregates although Program_Error might be\n-         --  generated if compiled with -gnato.\n-\n-         if Is_Controlled (Etype (Id))\n-            and then Comes_From_Source (Id)\n-         then\n-            declare\n-               BT : constant Entity_Id := Base_Type (Etype (Id));\n-\n-               Implicit_Call : Entity_Id;\n-               pragma Warnings (Off, Implicit_Call);\n-               --  ??? what is this for (never referenced!)\n-\n-               function Is_Aggr (N : Node_Id) return Boolean;\n-               --  Check that N is an aggregate\n-\n-               -------------\n-               -- Is_Aggr --\n-               -------------\n-\n-               function Is_Aggr (N : Node_Id) return Boolean is\n-               begin\n-                  case Nkind (Original_Node (N)) is\n-                     when N_Aggregate | N_Extension_Aggregate =>\n-                        return True;\n-\n-                     when N_Qualified_Expression |\n-                          N_Type_Conversion      |\n-                          N_Unchecked_Type_Conversion =>\n-                        return Is_Aggr (Expression (Original_Node (N)));\n-\n-                     when others =>\n-                        return False;\n-                  end case;\n-               end Is_Aggr;\n-\n-            begin\n-               --  If no underlying type, we already are in an error situation.\n-               --  Do not try to add a warning since we do not have access to\n-               --  prim-op list.\n-\n-               if No (Underlying_Type (BT)) then\n-                  Implicit_Call := Empty;\n-\n-               --  A generic type does not have usable primitive operators.\n-               --  Initialization calls are built for instances.\n-\n-               elsif Is_Generic_Type (BT) then\n-                  Implicit_Call := Empty;\n-\n-               --  If the init expression is not an aggregate, an adjust call\n-               --  will be generated\n-\n-               elsif Present (E) and then not Is_Aggr (E) then\n-                  Implicit_Call := Find_Prim_Op (BT, Name_Adjust);\n-\n-               --  If no init expression and we are not in the deferred\n-               --  constant case, an Initialize call will be generated\n-\n-               elsif No (E) and then not Constant_Present (N) then\n-                  Implicit_Call := Find_Prim_Op (BT, Name_Initialize);\n-\n-               else\n-                  Implicit_Call := Empty;\n-               end if;\n-            end;\n-         end if;\n       end if;\n \n       if Has_Task (Etype (Id)) then"}, {"sha": "28bb57456eb3568e8e874e62c898125d40204884", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4169b895e85cd78da39ec821149672567ed6f609/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4169b895e85cd78da39ec821149672567ed6f609", "patch": "@@ -8633,7 +8633,30 @@ package body Sem_Prag is\n                 Name_Entity,\n                 Name_External_Name,\n                 Name_Link_Name));\n-            Check_At_Least_N_Arguments (2);\n+\n+            if Present (Corresponding_Aspect (N)) then\n+\n+               --  If the pragma comes from an Aspect, there is a single entity\n+               --  parameter and an optional booean value with default true.\n+               --  The convention must be provided by a separate aspect.\n+\n+               Check_At_Least_N_Arguments (1);\n+               Check_At_Most_N_Arguments  (2);\n+               Def_Id := Entity (Arg1);\n+\n+               if No (Arg2) then\n+\n+                  --  If the aspect has a default True value, set corresponding\n+                  --  flag on the entity.\n+\n+                  Set_Is_Exported (Def_Id);\n+               end if;\n+               return;\n+\n+            else\n+               Check_At_Least_N_Arguments (2);\n+            end if;\n+\n             Check_At_Most_N_Arguments  (4);\n             Process_Convention (C, Def_Id);\n \n@@ -9566,9 +9589,30 @@ package body Sem_Prag is\n                 Name_Entity,\n                 Name_External_Name,\n                 Name_Link_Name));\n-            Check_At_Least_N_Arguments (2);\n-            Check_At_Most_N_Arguments  (4);\n-            Process_Import_Or_Interface;\n+\n+            if Present (Corresponding_Aspect (N)) then\n+\n+               --  If the pragma comes from an Aspect, there is a single entity\n+               --  parameter and an optional booean value with default true.\n+               --  The convention must be provided by a separate aspect.\n+\n+               Check_At_Least_N_Arguments (1);\n+               Check_At_Most_N_Arguments  (2);\n+\n+               if No (Arg2) then\n+\n+                  --  If the aspect has a default True value, set corresponding\n+                  --  flag on the entity.\n+\n+                  Set_Is_Imported (Entity (Arg1));\n+               end if;\n+               return;\n+\n+            else\n+               Check_At_Least_N_Arguments (2);\n+               Check_At_Most_N_Arguments  (4);\n+               Process_Import_Or_Interface;\n+            end if;\n \n          ----------------------\n          -- Import_Exception --"}]}