{"sha": "37b204de605563e7932e26099d28ea8c86cb1935", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMjA0ZGU2MDU1NjNlNzkzMmUyNjA5OWQyOGVhOGM4NmNiMTkzNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-30T16:07:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-30T16:07:43Z"}, "message": "Implement LWG 2192 and LWG 2294 for std::abs\n\n\t* doc/xml/manual/intro.xml: Document LWG 2192 changes.\n\t* doc/html/*: Regenerate.\n\t* include/Makefile.am: Add bits/std_abs.h.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/std_abs.h: New header defining all required overloads\n\tof std::abs in one place (LWG 2294).\n\t* include/c_global/cmath (abs(double), abs(float), abs(long double)):\n\tMove to bits/std_abs.h.\n\t(abs<_Tp>(_Tp)): Remove.\n\t* include/c_global/cstdlib (abs(long), abs(long long), abs(__int<N>)):\n\tMove to bits/std_abs.h.\n\t* testsuite/26_numerics/headers/cmath/dr2192.cc: New test.\n\t* testsuite/26_numerics/headers/cmath/dr2192_neg.cc: New test.\n\t* testsuite/26_numerics/headers/cstdlib/dr2192.cc: New test.\n\t* testsuite/26_numerics/headers/cstdlib/dr2192_neg.cc: New test.\n\nFrom-SVN: r240660", "tree": {"sha": "29df99f537873568071d47efb29f027765fef0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29df99f537873568071d47efb29f027765fef0c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b204de605563e7932e26099d28ea8c86cb1935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b204de605563e7932e26099d28ea8c86cb1935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b204de605563e7932e26099d28ea8c86cb1935", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b204de605563e7932e26099d28ea8c86cb1935/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0401cf78c555ef38d2d2fba94ebffeaef7c6bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0401cf78c555ef38d2d2fba94ebffeaef7c6bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0401cf78c555ef38d2d2fba94ebffeaef7c6bc9"}], "stats": {"total": 320, "additions": 269, "deletions": 51}, "files": [{"sha": "f73e62e4789d5f7bbeeea25bb227aea6b7f60f1b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -1,5 +1,21 @@\n 2016-09-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/intro.xml: Document LWG 2192 changes.\n+\t* doc/html/*: Regenerate.\n+\t* include/Makefile.am: Add bits/std_abs.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/std_abs.h: New header defining all required overloads\n+\tof std::abs in one place (LWG 2294).\n+\t* include/c_global/cmath (abs(double), abs(float), abs(long double)):\n+\tMove to bits/std_abs.h.\n+\t(abs<_Tp>(_Tp)): Remove.\n+\t* include/c_global/cstdlib (abs(long), abs(long long), abs(__int<N>)):\n+\tMove to bits/std_abs.h.\n+\t* testsuite/26_numerics/headers/cmath/dr2192.cc: New test.\n+\t* testsuite/26_numerics/headers/cmath/dr2192_neg.cc: New test.\n+\t* testsuite/26_numerics/headers/cstdlib/dr2192.cc: New test.\n+\t* testsuite/26_numerics/headers/cstdlib/dr2192_neg.cc: New test.\n+\n \tPR libstdc++/77801\n \t* include/experimental/numeric: Include <numeric>.\n \t(__abs): Define."}, {"sha": "8469c6efa4aaa7a759fef163410ecad5de2e3a80", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -411,6 +411,10 @@\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n+\t<span class=\"emphasis\"><em>Validity and return type of <code class=\"code\">std::abs(0u)</code> is unclear</em></span>\n+    </span></dt><dd><p>Move all declarations to a common header and remove the\n+    generic <code class=\"code\">abs</code> which accepted unsigned arguments.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n \t<span class=\"emphasis\"><em>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</em></span>\n     </span></dt><dd><p>Use the referenceable type concept."}, {"sha": "47478513666c05a9be17635e4e5c97ebf7e499a7", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -940,6 +940,13 @@ requirements of the license of GCC.\n     <listitem><para>Add <code>emplace</code> and <code>emplace_back</code> member functions.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2192\">2192</link>:\n+\t<emphasis>Validity and return type of <code>std::abs(0u)</code> is unclear</emphasis>\n+    </term>\n+    <listitem><para>Move all declarations to a common header and remove the\n+    generic <code>abs</code> which accepted unsigned arguments.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2196\">2196</link>:\n \t<emphasis>Specification of <code>is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</emphasis>\n     </term>"}, {"sha": "4e63fbb438bf0ae333c4d93eb40e55b6798f1cb1", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -159,6 +159,7 @@ bits_headers = \\\n \t${bits_srcdir}/shared_ptr_base.h \\\n \t${bits_srcdir}/slice_array.h \\\n \t${bits_srcdir}/sstream.tcc \\\n+\t${bits_srcdir}/std_abs.h \\\n \t${bits_srcdir}/std_mutex.h \\\n \t${bits_srcdir}/stl_algo.h \\\n \t${bits_srcdir}/stl_algobase.h \\"}, {"sha": "8b788b551c417b5b21aff48ba3827356d8a068cc", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -450,6 +450,7 @@ bits_headers = \\\n \t${bits_srcdir}/shared_ptr_base.h \\\n \t${bits_srcdir}/slice_array.h \\\n \t${bits_srcdir}/sstream.tcc \\\n+\t${bits_srcdir}/std_abs.h \\\n \t${bits_srcdir}/std_mutex.h \\\n \t${bits_srcdir}/stl_algo.h \\\n \t${bits_srcdir}/stl_algobase.h \\"}, {"sha": "ab0f980a3a630cdcc5fa57db1ff410723144b6a6", "filename": "libstdc++-v3/include/bits/std_abs.h", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_abs.h?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -0,0 +1,107 @@\n+// -*- C++ -*- C library enhancements header.\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/bits/std_abs.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{cmath, cstdlib}\n+ */\n+\n+#ifndef _GLIBCXX_BITS_STD_ABS_H\n+#define _GLIBCXX_BITS_STD_ABS_H\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+\n+#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n+#include_next <stdlib.h>\n+#ifdef __CORRECT_ISO_CPP_MATH_H_PROTO\n+# include_next <math.h>\n+#endif\n+#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n+\n+#undef abs\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  using ::abs;\n+\n+#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n+  inline long\n+  abs(long __i) { return __builtin_labs(__i); }\n+#endif\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  inline long long\n+  abs(long long __x) { return __builtin_llabs (__x); }\n+#endif\n+\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// 2192. Validity and return type of std::abs(0u) is unclear\n+// 2294. <cstdlib> should declare abs(double)\n+\n+#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n+  inline _GLIBCXX_CONSTEXPR double\n+  abs(double __x)\n+  { return __builtin_fabs(__x); }\n+\n+  inline _GLIBCXX_CONSTEXPR float\n+  abs(float __x)\n+  { return __builtin_fabsf(__x); }\n+\n+  inline _GLIBCXX_CONSTEXPR long double\n+  abs(long double __x)\n+  { return __builtin_fabsl(__x); }\n+#endif\n+\n+#if defined(__GLIBCXX_TYPE_INT_N_0)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0\n+  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_1)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1\n+  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_2)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2\n+  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+  inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3\n+  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }\n+#endif\n+\n+#if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)\n+  inline _GLIBCXX_CONSTEXPR\n+  __float128\n+  abs(__float128 __x)\n+  { return __x < 0 ? -__x : __x; }\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif // _GLIBCXX_BITS_STD_ABS_H"}, {"sha": "24ce811adf29c8118794e7edee7ec7e627c9d3d3", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -44,12 +44,12 @@\n #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n #include_next <math.h>\n #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n+#include <bits/std_abs.h>\n \n #ifndef _GLIBCXX_CMATH\n #define _GLIBCXX_CMATH 1\n \n // Get rid of those macros defined in <math.h> in lieu of real functions.\n-#undef abs\n #undef div\n #undef acos\n #undef asin\n@@ -80,29 +80,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n-  inline _GLIBCXX_CONSTEXPR double\n-  abs(double __x)\n-  { return __builtin_fabs(__x); }\n-#endif\n-\n-#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO\n-  inline _GLIBCXX_CONSTEXPR float\n-  abs(float __x)\n-  { return __builtin_fabsf(__x); }\n-\n-  inline _GLIBCXX_CONSTEXPR long double\n-  abs(long double __x)\n-  { return __builtin_fabsl(__x); }\n-#endif\n-\n-  template<typename _Tp>\n-    inline _GLIBCXX_CONSTEXPR\n-    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n-                                    double>::__type\n-    abs(_Tp __x)\n-    { return __builtin_fabs(__x); }\n-\n   using ::acos;\n \n #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO"}, {"sha": "15733dfb75bbfd08b5c9631e7d45ae2ef36166ba", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -74,10 +74,10 @@ namespace std\n #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n #include_next <stdlib.h>\n #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS\n+#include <bits/std_abs.h>\n \n // Get rid of those macros defined in <stdlib.h> in lieu of real functions.\n #undef abort\n-#undef abs\n #undef atexit\n #if __cplusplus >= 201103L\n # ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT\n@@ -125,7 +125,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   using ::ldiv_t;\n \n   using ::abort;\n-  using ::abs;\n   using ::atexit;\n #if __cplusplus >= 201103L\n # ifdef _GLIBCXX_HAVE_AT_QUICK_EXIT\n@@ -168,35 +167,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // _GLIBCXX_USE_WCHAR_T\n \n #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO\n-  inline long\n-  abs(long __i) { return __builtin_labs(__i); }\n-\n   inline ldiv_t\n   div(long __i, long __j) { return ldiv(__i, __j); }\n #endif\n \n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  inline long long\n-  abs(long long __x) { return __builtin_llabs (__x); }\n-#endif\n-\n-#if defined(__GLIBCXX_TYPE_INT_N_0)\n-  inline __GLIBCXX_TYPE_INT_N_0\n-  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }\n-#endif\n-#if defined(__GLIBCXX_TYPE_INT_N_1)\n-  inline __GLIBCXX_TYPE_INT_N_1\n-  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }\n-#endif\n-#if defined(__GLIBCXX_TYPE_INT_N_2)\n-  inline __GLIBCXX_TYPE_INT_N_2\n-  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }\n-#endif\n-#if defined(__GLIBCXX_TYPE_INT_N_3)\n-  inline __GLIBCXX_TYPE_INT_N_3\n-  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }\n-#endif\n-\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "b8d13cdfd7051f88c3a5f6bb3daa5df15ab64928", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/dr2192.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr2192.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr2192.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr2192.cc?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// NB: Don't include any other headers in this file.\n+// LWG 2192 requires <cmath> to declare overloads for integral types.\n+#include <cmath>\n+\n+template<typename, typename> struct is_same { enum { value = 0 }; };\n+template<typename T> struct is_same<T, T> { enum { value = 1 }; };\n+\n+template<typename T, typename U = T>\n+  constexpr bool check(T val) {\n+    return is_same<decltype(std::abs(val)), U>::value;\n+  }\n+\n+// Unsigned arguments that promote to int are valid:\n+static_assert( check<short, int>(1), \"abs((short)1) returns int\" );\n+static_assert( check<unsigned short, int>(1),\n+              \"abs((unsigned short)1) returns int\" );\n+\n+static_assert( check(1),        \"abs(1) returns int\" );\n+static_assert( check(1l),       \"abs(1l) returns long\" );\n+static_assert( check(1ll),      \"abs(1ll) returns long long\" );"}, {"sha": "bda980a0eda0048d982f1cf327a6a8ff473ae83d", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/dr2192_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr2192_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr2192_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fdr2192_neg.cc?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// NB: Don't include any other headers in this file.\n+// LWG 2192 requires abs to be ill-formed for unsigned arguments.\n+#include <cmath>\n+\n+void test()\n+{\n+  std::abs(0u);                 // { dg-error \"ambiguous\" }\n+  std::abs(0lu);                // { dg-error \"ambiguous\" }\n+  std::abs(0llu);               // { dg-error \"ambiguous\" }\n+}"}, {"sha": "312e907728c7b8f9dee6a5638a17843b628fa2f3", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/dr2192.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fdr2192.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fdr2192.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fdr2192.cc?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// NB: Don't include any other headers in this file.\n+// LWG 2192 requires <cstdlib> to declare overloads for floating point types.\n+#include <cstdlib>\n+\n+template<typename, typename> struct is_same { enum { value = 0 }; };\n+template<typename T> struct is_same<T, T> { enum { value = 1 }; };\n+\n+template<typename T>\n+  constexpr bool check(T val) {\n+    return is_same<decltype(std::abs(val)), T>::value;\n+  }\n+\n+static_assert( check(1.f), \"abs(1.f) returns float\" );\n+static_assert( check(1.),  \"abs(1.) returns double\" );\n+static_assert( check(1.l), \"abs(1.l) returns long double\" );"}, {"sha": "9f0046f93ca25448f409c380a3c3254eeaa3a8df", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/dr2192_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fdr2192_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b204de605563e7932e26099d28ea8c86cb1935/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fdr2192_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Fdr2192_neg.cc?ref=37b204de605563e7932e26099d28ea8c86cb1935", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// NB: Don't include any other headers in this file.\n+// LWG 2192 requires abs to be ill-formed for unsigned arguments.\n+#include <cstdlib>\n+\n+void test()\n+{\n+  std::abs(0u);                 // { dg-error \"ambiguous\" }\n+  std::abs(0lu);                // { dg-error \"ambiguous\" }\n+  std::abs(0llu);               // { dg-error \"ambiguous\" }\n+}"}]}