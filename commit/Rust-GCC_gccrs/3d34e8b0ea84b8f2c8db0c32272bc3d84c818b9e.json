{"sha": "3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzNGU4YjBlYTg0YjhmMmM4ZGIwYzMyMjcyYmMzZDg0YzgxOGI5ZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:11:41Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:11:41Z"}, "message": "i386: Emulate MMX pshufw with SSE\n\nEmulate MMX pshufw with SSE.  Only SSE register source operand is allowed.\n\n\tPR target/89021\n\t* config/i386/mmx.md (mmx_pshufw): Also check TARGET_MMX and\n\tTARGET_MMX_WITH_SSE.\n\t(mmx_pshufw_1): Add SSE emulation.\n\t(*vec_dupv4hi): Changed to define_insn_and_split and also allow\n\tTARGET_MMX_WITH_SSE to support SSE emulation.\n\nFrom-SVN: r271226", "tree": {"sha": "962bd63a4daa324e2953d395aca1b31adc661386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/962bd63a4daa324e2953d395aca1b31adc661386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74e299b9299a03ddf44cfa7f0660c908c3257dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e299b9299a03ddf44cfa7f0660c908c3257dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e299b9299a03ddf44cfa7f0660c908c3257dfc"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "97a0965ed16b09bf87a57d3a49167bf205c7bd2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e", "patch": "@@ -1,3 +1,12 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/mmx.md (mmx_pshufw): Also check TARGET_MMX and\n+\tTARGET_MMX_WITH_SSE.\n+\t(mmx_pshufw_1): Add SSE emulation.\n+\t(*vec_dupv4hi): Changed to define_insn_and_split and also allow\n+\tTARGET_MMX_WITH_SSE to support SSE emulation.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "c19ee07648eb46df0e40781fdc7596cee5aeea91", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 65, "deletions": 16, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=3d34e8b0ea84b8f2c8db0c32272bc3d84c818b9e", "patch": "@@ -1348,9 +1348,10 @@\n \n (define_expand \"mmx_pshufw\"\n   [(match_operand:V4HI 0 \"register_operand\")\n-   (match_operand:V4HI 1 \"nonimmediate_operand\")\n+   (match_operand:V4HI 1 \"register_mmxmem_operand\")\n    (match_operand:SI 2 \"const_int_operand\")]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && (TARGET_SSE || TARGET_3DNOW_A)\"\n {\n   int mask = INTVAL (operands[2]);\n   emit_insn (gen_mmx_pshufw_1 (operands[0], operands[1],\n@@ -1362,14 +1363,15 @@\n })\n \n (define_insn \"mmx_pshufw_1\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,Yv\")\n         (vec_select:V4HI\n-          (match_operand:V4HI 1 \"nonimmediate_operand\" \"ym\")\n+          (match_operand:V4HI 1 \"register_mmxmem_operand\" \"ym,Yv\")\n           (parallel [(match_operand 2 \"const_0_to_3_operand\")\n                      (match_operand 3 \"const_0_to_3_operand\")\n                      (match_operand 4 \"const_0_to_3_operand\")\n                      (match_operand 5 \"const_0_to_3_operand\")])))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && (TARGET_SSE || TARGET_3DNOW_A)\"\n {\n   int mask = 0;\n   mask |= INTVAL (operands[2]) << 0;\n@@ -1378,11 +1380,20 @@\n   mask |= INTVAL (operands[5]) << 6;\n   operands[2] = GEN_INT (mask);\n \n-  return \"pshufw\\t{%2, %1, %0|%0, %1, %2}\";\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"pshufw\\t{%2, %1, %0|%0, %1, %2}\";\n+    case 1:\n+      return \"%vpshuflw\\t{%2, %1, %0|%0, %1, %2}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n-  [(set_attr \"type\" \"mmxcvt\")\n+  [(set_attr \"mmx_isa\" \"native,x64\")\n+   (set_attr \"type\" \"mmxcvt,sselog\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"DI,TI\")])\n \n (define_insn \"mmx_pswapdv2si2\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n@@ -1395,16 +1406,54 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*vec_dupv4hi\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n+(define_insn_and_split \"*vec_dupv4hi\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=y,Yv,Yw\")\n \t(vec_duplicate:V4HI\n \t  (truncate:HI\n-\t    (match_operand:SI 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"pshufw\\t{$0, %0, %0|%0, %0, 0}\"\n-  [(set_attr \"type\" \"mmxcvt\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"DI\")])\n+\t    (match_operand:SI 1 \"register_operand\" \"0,Yv,r\"))))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && (TARGET_SSE || TARGET_3DNOW_A)\"\n+  \"@\n+   pshufw\\t{$0, %0, %0|%0, %0, 0}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op;\n+  operands[0] = lowpart_subreg (V8HImode, operands[0],\n+\t\t\t\tGET_MODE (operands[0]));\n+  if (TARGET_AVX2)\n+    {\n+      operands[1] = lowpart_subreg (HImode, operands[1],\n+\t\t\t\t    GET_MODE (operands[1]));\n+      op = gen_rtx_VEC_DUPLICATE (V8HImode, operands[1]);\n+    }\n+  else\n+    {\n+      operands[1] = lowpart_subreg (V8HImode, operands[1],\n+\t\t\t\t    GET_MODE (operands[1]));\n+      rtx mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t\t   gen_rtvec (8,\n+\t\t\t\t\t      GEN_INT (0),\n+\t\t\t\t\t      GEN_INT (0),\n+\t\t\t\t\t      GEN_INT (0),\n+\t\t\t\t\t      GEN_INT (0),\n+\t\t\t\t\t      GEN_INT (4),\n+\t\t\t\t\t      GEN_INT (5),\n+\t\t\t\t\t      GEN_INT (6),\n+\t\t\t\t\t      GEN_INT (7)));\n+\n+      op = gen_rtx_VEC_SELECT (V8HImode, operands[1], mask);\n+    }\n+  rtx insn = gen_rtx_SET (operands[0], op);\n+  emit_insn (insn);\n+  DONE;\n+}\n+  [(set_attr \"mmx_isa\" \"native,x64,x64_avx\")\n+   (set_attr \"type\" \"mmxcvt,sselog1,ssemov\")\n+   (set_attr \"length_immediate\" \"1,1,0\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_insn_and_split \"*vec_dupv2si\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y,x,Yv,Yw\")"}]}