{"sha": "92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlODM4ZTI4MTlkZThiYzdhM2Q0YWFiNzBlMGExZWNiOWJiMWEzZg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-05-04T08:20:31Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-05-04T08:20:31Z"}, "message": "ggc-zone.c (ggc_alloc_zone_1): Add MEM_STAT_DECL parameter.\n\n2004-05-04  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* ggc-zone.c (ggc_alloc_zone_1): Add MEM_STAT_DECL parameter.\n\tCollect overhead information.\n\t(ggc_alloc_stat): New name of ggc_alloc.  Add MEM_STAT_DECL\n\tparameter and pass it through.\n\t(ggc_alloc_typed_stat): New name of ggc_alloc_typed.  Add\n\tMEM_STAT_DECL parameter and pass it through.\n\t(ggc_alloc_zone_stat): New name of ggc_alloc_zone.  Add\n\tMEM_STAT_DECL parameter and pass it through.\n\nFrom-SVN: r81472", "tree": {"sha": "0de2c9001cb8689ec404886f86d65c050e0adc95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0de2c9001cb8689ec404886f86d65c050e0adc95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53c87e49edac5a6eae92c129205ec095ffc70bb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c87e49edac5a6eae92c129205ec095ffc70bb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c87e49edac5a6eae92c129205ec095ffc70bb4"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "66d5ac4ee0776e25fbd85794615cfbaca778b842", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f", "patch": "@@ -1,3 +1,14 @@\n+2004-05-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* ggc-zone.c (ggc_alloc_zone_1): Add MEM_STAT_DECL parameter.\n+\tCollect overhead information.\n+\t(ggc_alloc_stat): New name of ggc_alloc.  Add MEM_STAT_DECL\n+\tparameter and pass it through.\n+\t(ggc_alloc_typed_stat): New name of ggc_alloc_typed.  Add\n+\tMEM_STAT_DECL parameter and pass it through.\n+\t(ggc_alloc_zone_stat): New name of ggc_alloc_zone.  Add\n+\tMEM_STAT_DECL parameter and pass it through.\n+\n 2004-05-03  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000-protos.h: Protoize rs6000_hard_regno_nregs."}, {"sha": "da58116fabba410ef0d57519777addedb4d798bf", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=92e838e2819de8bc7a3d4aab70e0a1ecb9bb1a3f", "patch": "@@ -327,7 +327,7 @@ static void free_chunk (struct alloc_chunk *, size_t, struct alloc_zone *);\n static void free_page (struct page_entry *);\n static void release_pages (struct alloc_zone *);\n static void sweep_pages (struct alloc_zone *);\n-static void * ggc_alloc_zone_1 (size_t, struct alloc_zone *, short);\n+static void * ggc_alloc_zone_1 (size_t, struct alloc_zone *, short MEM_STAT_DECL);\n static bool ggc_collect_1 (struct alloc_zone *, bool);\n static void check_cookies (void);\n \n@@ -569,7 +569,8 @@ free_chunk (struct alloc_chunk *chunk, size_t size, struct alloc_zone *zone)\n /* Allocate a chunk of memory of SIZE bytes.  */\n \n static void *\n-ggc_alloc_zone_1 (size_t size, struct alloc_zone *zone, short type)\n+ggc_alloc_zone_1 (size_t size, struct alloc_zone *zone, short type\n+\t\t  MEM_STAT_DECL)\n {\n   size_t bin = 0;\n   size_t lsize = 0;\n@@ -659,7 +660,12 @@ ggc_alloc_zone_1 (size_t size, struct alloc_zone *zone, short type)\n       lchunk->size = lsize;\n       lchunk->large = 0;\n       free_chunk (lchunk, lsize, zone);\n+      lsize = 0;\n     }\n+#ifdef GATHER_STATISTICS\n+  ggc_record_overhead (size, lsize PASS_MEM_STAT);\n+#endif\n+\n   /* Calculate the object's address.  */\n  found:\n #ifdef COOKIE_CHECKING\n@@ -701,38 +707,39 @@ ggc_alloc_zone_1 (size_t size, struct alloc_zone *zone, short type)\n    for that type.  */\n \n void *\n-ggc_alloc_typed (enum gt_types_enum gte, size_t size)\n+ggc_alloc_typed_stat (enum gt_types_enum gte, size_t size\n+\t\t      MEM_STAT_DECL)\n {\n   switch (gte)\n     {\n     case gt_ggc_e_14lang_tree_node:\n-      return ggc_alloc_zone_1 (size, tree_zone, gte);\n+      return ggc_alloc_zone_1 (size, tree_zone, gte PASS_MEM_STAT);\n \n     case gt_ggc_e_7rtx_def:\n-      return ggc_alloc_zone_1 (size, rtl_zone, gte);\n+      return ggc_alloc_zone_1 (size, rtl_zone, gte PASS_MEM_STAT);\n \n     case gt_ggc_e_9rtvec_def:\n-      return ggc_alloc_zone_1 (size, rtl_zone, gte);\n+      return ggc_alloc_zone_1 (size, rtl_zone, gte PASS_MEM_STAT);\n \n     default:\n-      return ggc_alloc_zone_1 (size, &main_zone, gte);\n+      return ggc_alloc_zone_1 (size, &main_zone, gte PASS_MEM_STAT);\n     }\n }\n \n /* Normal ggc_alloc simply allocates into the main zone.  */\n \n void *\n-ggc_alloc (size_t size)\n+ggc_alloc_stat (size_t size MEM_STAT_DECL)\n {\n-  return ggc_alloc_zone_1 (size, &main_zone, -1);\n+  return ggc_alloc_zone_1 (size, &main_zone, -1 PASS_MEM_STAT);\n }\n \n /* Zone allocation allocates into the specified zone.  */\n \n void *\n-ggc_alloc_zone (size_t size, struct alloc_zone *zone)\n+ggc_alloc_zone_stat (size_t size, struct alloc_zone *zone MEM_STAT_DECL)\n {\n-  return ggc_alloc_zone_1 (size, zone, -1);\n+  return ggc_alloc_zone_1 (size, zone, -1 PASS_MEM_STAT);\n }\n \n /* Poison the chunk.  */"}]}