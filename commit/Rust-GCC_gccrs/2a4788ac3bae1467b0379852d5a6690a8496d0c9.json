{"sha": "2a4788ac3bae1467b0379852d5a6690a8496d0c9", "node_id": "C_kwDOANBUbNoAKDJhNDc4OGFjM2JhZTE0NjdiMDM3OTg1MmQ1YTY2OTBhODQ5NmQwYzk", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:50Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:50Z"}, "message": "aarch64: Rename AARCH64_ISA architecture-level macros\n\nAll AARCH64_ISA_* architecture-level macros except AARCH64_ISA_V8_R\nare for the A profile: they cause __ARM_ARCH_PROFILE to be set to\n'A' and they are associated with architecture names like armv8.4-a.\n\nIt's convenient for later patches if we make this explicit\nby adding an \"A\" to the name.  Also, rather than add an underscore\n(as for V8_R) it's more convenient to add the profile directly\nto the number, like we already do in the ARCH_IDENT field of the\naarch64-arches.def entries.\n\ngcc/\n\t* config/aarch64/aarch64.h (AARCH64_ISA_V8_2, AARCH64_ISA_V8_3)\n\t(AARCH64_ISA_V8_4, AARCH64_ISA_V8_5, AARCH64_ISA_V8_6)\n\t(AARCH64_ISA_V9, AARCH64_ISA_V9_1, AARCH64_ISA_V9_2)\n\t(AARCH64_ISA_V9_3): Add \"A\" to the end of the name.\n\t(AARCH64_ISA_V8_R): Rename to AARCH64_ISA_V8R.\n\t(TARGET_ARMV8_3, TARGET_JSCVT, TARGET_FRINT, TARGET_MEMTAG): Update\n\taccordingly.\n\t* common/config/aarch64/aarch64-common.cc\n\t(aarch64_get_extension_string_for_isa_flags): Likewise.\n\t* config/aarch64/aarch64-c.cc\n\t(aarch64_define_unconditional_macros): Likewise.", "tree": {"sha": "265178129a66d22d1f393fb89353eb2ba5c32135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/265178129a66d22d1f393fb89353eb2ba5c32135"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a4788ac3bae1467b0379852d5a6690a8496d0c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4788ac3bae1467b0379852d5a6690a8496d0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4788ac3bae1467b0379852d5a6690a8496d0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4788ac3bae1467b0379852d5a6690a8496d0c9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e1fa054970a30844eb94d726b4954dcb8b9063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e1fa054970a30844eb94d726b4954dcb8b9063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e1fa054970a30844eb94d726b4954dcb8b9063"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "893b7dfb476637e4d07b76639b18883d3b0c71a6", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4788ac3bae1467b0379852d5a6690a8496d0c9/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4788ac3bae1467b0379852d5a6690a8496d0c9/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=2a4788ac3bae1467b0379852d5a6690a8496d0c9", "patch": "@@ -429,7 +429,7 @@ aarch64_get_extension_string_for_isa_flags (uint64_t isa_flags,\n \n       Note that assemblers with Armv8-R AArch64 support should not have this\n       issue, so we don't need this fix when targeting Armv8-R.  */\n-  if ((isa_flags & AARCH64_ISA_CRC) && !AARCH64_ISA_V8_R)\n+  if ((isa_flags & AARCH64_ISA_CRC) && !AARCH64_ISA_V8R)\n     isa_flag_bits |= AARCH64_ISA_CRC;\n \n   /* Pass Two:"}, {"sha": "e066ca5f43cc1a801c3b9dc3f78eeddad3ebed83", "filename": "gcc/config/aarch64/aarch64-c.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4788ac3bae1467b0379852d5a6690a8496d0c9/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4788ac3bae1467b0379852d5a6690a8496d0c9/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.cc?ref=2a4788ac3bae1467b0379852d5a6690a8496d0c9", "patch": "@@ -64,7 +64,7 @@ aarch64_define_unconditional_macros (cpp_reader *pfile)\n   builtin_define (\"__ARM_ARCH_8A\");\n \n   builtin_define_with_int_value (\"__ARM_ARCH_PROFILE\",\n-      AARCH64_ISA_V8_R ? 'R' : 'A');\n+      AARCH64_ISA_V8R ? 'R' : 'A');\n   builtin_define (\"__ARM_FEATURE_CLZ\");\n   builtin_define (\"__ARM_FEATURE_IDIV\");\n   builtin_define (\"__ARM_FEATURE_UNALIGNED\");\n@@ -82,7 +82,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n {\n   aarch64_def_or_undef (flag_unsafe_math_optimizations, \"__ARM_FP_FAST\", pfile);\n \n-  builtin_define_with_int_value (\"__ARM_ARCH\", AARCH64_ISA_V9 ? 9 : 8);\n+  builtin_define_with_int_value (\"__ARM_ARCH\", AARCH64_ISA_V9A ? 9 : 8);\n \n   builtin_define_with_int_value (\"__ARM_SIZEOF_MINIMAL_ENUM\",\n \t\t\t\t flag_short_enums ? 1 : 4);"}, {"sha": "138cab4181afe752ff468428a63446b3dd0dee34", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a4788ac3bae1467b0379852d5a6690a8496d0c9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a4788ac3bae1467b0379852d5a6690a8496d0c9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=2a4788ac3bae1467b0379852d5a6690a8496d0c9", "patch": "@@ -297,39 +297,39 @@\n #define AARCH64_ISA_SIMD           (aarch64_isa_flags & AARCH64_FL_SIMD)\n #define AARCH64_ISA_LSE\t\t   (aarch64_isa_flags & AARCH64_FL_LSE)\n #define AARCH64_ISA_RDMA\t   (aarch64_isa_flags & AARCH64_FL_RDMA)\n-#define AARCH64_ISA_V8_2\t   (aarch64_isa_flags & AARCH64_FL_V8_2)\n+#define AARCH64_ISA_V8_2A\t   (aarch64_isa_flags & AARCH64_FL_V8_2)\n #define AARCH64_ISA_F16\t\t   (aarch64_isa_flags & AARCH64_FL_F16)\n #define AARCH64_ISA_SVE            (aarch64_isa_flags & AARCH64_FL_SVE)\n #define AARCH64_ISA_SVE2\t   (aarch64_isa_flags & AARCH64_FL_SVE2)\n #define AARCH64_ISA_SVE2_AES\t   (aarch64_isa_flags & AARCH64_FL_SVE2_AES)\n #define AARCH64_ISA_SVE2_BITPERM  (aarch64_isa_flags & AARCH64_FL_SVE2_BITPERM)\n #define AARCH64_ISA_SVE2_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SVE2_SHA3)\n #define AARCH64_ISA_SVE2_SM4\t   (aarch64_isa_flags & AARCH64_FL_SVE2_SM4)\n-#define AARCH64_ISA_V8_3\t   (aarch64_isa_flags & AARCH64_FL_V8_3)\n+#define AARCH64_ISA_V8_3A\t   (aarch64_isa_flags & AARCH64_FL_V8_3)\n #define AARCH64_ISA_DOTPROD\t   (aarch64_isa_flags & AARCH64_FL_DOTPROD)\n #define AARCH64_ISA_AES\t           (aarch64_isa_flags & AARCH64_FL_AES)\n #define AARCH64_ISA_SHA2\t   (aarch64_isa_flags & AARCH64_FL_SHA2)\n-#define AARCH64_ISA_V8_4\t   (aarch64_isa_flags & AARCH64_FL_V8_4)\n+#define AARCH64_ISA_V8_4A\t   (aarch64_isa_flags & AARCH64_FL_V8_4)\n #define AARCH64_ISA_SM4\t           (aarch64_isa_flags & AARCH64_FL_SM4)\n #define AARCH64_ISA_SHA3\t   (aarch64_isa_flags & AARCH64_FL_SHA3)\n #define AARCH64_ISA_F16FML\t   (aarch64_isa_flags & AARCH64_FL_F16FML)\n #define AARCH64_ISA_RCPC8_4\t   (aarch64_isa_flags & AARCH64_FL_RCPC8_4)\n #define AARCH64_ISA_RNG\t\t   (aarch64_isa_flags & AARCH64_FL_RNG)\n-#define AARCH64_ISA_V8_5\t   (aarch64_isa_flags & AARCH64_FL_V8_5)\n+#define AARCH64_ISA_V8_5A\t   (aarch64_isa_flags & AARCH64_FL_V8_5)\n #define AARCH64_ISA_TME\t\t   (aarch64_isa_flags & AARCH64_FL_TME)\n #define AARCH64_ISA_MEMTAG\t   (aarch64_isa_flags & AARCH64_FL_MEMTAG)\n-#define AARCH64_ISA_V8_6\t   (aarch64_isa_flags & AARCH64_FL_V8_6)\n+#define AARCH64_ISA_V8_6A\t   (aarch64_isa_flags & AARCH64_FL_V8_6)\n #define AARCH64_ISA_I8MM\t   (aarch64_isa_flags & AARCH64_FL_I8MM)\n #define AARCH64_ISA_F32MM\t   (aarch64_isa_flags & AARCH64_FL_F32MM)\n #define AARCH64_ISA_F64MM\t   (aarch64_isa_flags & AARCH64_FL_F64MM)\n #define AARCH64_ISA_BF16\t   (aarch64_isa_flags & AARCH64_FL_BF16)\n #define AARCH64_ISA_SB\t\t   (aarch64_isa_flags & AARCH64_FL_SB)\n-#define AARCH64_ISA_V8_R\t   (aarch64_isa_flags & AARCH64_FL_V8_R)\n+#define AARCH64_ISA_V8R\t\t   (aarch64_isa_flags & AARCH64_FL_V8_R)\n #define AARCH64_ISA_PAUTH\t   (aarch64_isa_flags & AARCH64_FL_PAUTH)\n-#define AARCH64_ISA_V9\t\t   (aarch64_isa_flags & AARCH64_FL_V9)\n-#define AARCH64_ISA_V9_1           (aarch64_isa_flags & AARCH64_FL_V9_1)\n-#define AARCH64_ISA_V9_2           (aarch64_isa_flags & AARCH64_FL_V9_2)\n-#define AARCH64_ISA_V9_3           (aarch64_isa_flags & AARCH64_FL_V9_3)\n+#define AARCH64_ISA_V9A\t\t   (aarch64_isa_flags & AARCH64_FL_V9)\n+#define AARCH64_ISA_V9_1A          (aarch64_isa_flags & AARCH64_FL_V9_1)\n+#define AARCH64_ISA_V9_2A          (aarch64_isa_flags & AARCH64_FL_V9_2)\n+#define AARCH64_ISA_V9_3A          (aarch64_isa_flags & AARCH64_FL_V9_3)\n #define AARCH64_ISA_MOPS\t   (aarch64_isa_flags & AARCH64_FL_MOPS)\n #define AARCH64_ISA_LS64\t   (aarch64_isa_flags & AARCH64_FL_LS64)\n \n@@ -383,16 +383,16 @@\n #define TARGET_SVE2_SM4 (TARGET_SVE2 && AARCH64_ISA_SVE2_SM4)\n \n /* ARMv8.3-A features.  */\n-#define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3)\n+#define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3A)\n \n /* Javascript conversion instruction from Armv8.3-a.  */\n-#define TARGET_JSCVT\t(TARGET_FLOAT && AARCH64_ISA_V8_3)\n+#define TARGET_JSCVT\t(TARGET_FLOAT && AARCH64_ISA_V8_3A)\n \n /* Armv8.3-a Complex number extension to AdvSIMD extensions.  */\n #define TARGET_COMPLEX (TARGET_SIMD && TARGET_ARMV8_3)\n \n /* Floating-point rounding instructions from Armv8.5-a.  */\n-#define TARGET_FRINT (AARCH64_ISA_V8_5 && TARGET_FLOAT)\n+#define TARGET_FRINT (AARCH64_ISA_V8_5A && TARGET_FLOAT)\n \n /* TME instructions are enabled.  */\n #define TARGET_TME (AARCH64_ISA_TME)\n@@ -401,7 +401,7 @@\n #define TARGET_RNG (AARCH64_ISA_RNG)\n \n /* Memory Tagging instructions optional to Armv8.5 enabled through +memtag.  */\n-#define TARGET_MEMTAG (AARCH64_ISA_V8_5 && AARCH64_ISA_MEMTAG)\n+#define TARGET_MEMTAG (AARCH64_ISA_V8_5A && AARCH64_ISA_MEMTAG)\n \n /* I8MM instructions are enabled through +i8mm.  */\n #define TARGET_I8MM (AARCH64_ISA_I8MM)"}]}