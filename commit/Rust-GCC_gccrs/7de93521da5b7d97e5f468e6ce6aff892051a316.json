{"sha": "7de93521da5b7d97e5f468e6ce6aff892051a316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlOTM1MjFkYTViN2Q5N2U1ZjQ2OGU2Y2U2YWZmODkyMDUxYTMxNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-05-08T22:17:34Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1997-05-08T22:17:34Z"}, "message": "(ASM_OUTPUT_LONG_DOUBLE): Delete call to arm_increase_location.\n\n(ASM_OUTPUT_LONG_DOUBLE): Delete call to\narm_increase_location.\n(ASM_OUTPUT_{DOUBLE,FLOAT,INT,SHORT,CHAR,BYTE,ASCII,SKIP}): Likewise.\n(ASM_OUTPUT_ALIGN): Delete all code refering to arm_text_location.\n\nFrom-SVN: r14055", "tree": {"sha": "35cc015193657666f7304b02985990dd58cb4e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35cc015193657666f7304b02985990dd58cb4e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7de93521da5b7d97e5f468e6ce6aff892051a316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de93521da5b7d97e5f468e6ce6aff892051a316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de93521da5b7d97e5f468e6ce6aff892051a316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de93521da5b7d97e5f468e6ce6aff892051a316/comments", "author": null, "committer": null, "parents": [{"sha": "da91c3abc6d49c67a1b9b8fbcf21146a6d1c771d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da91c3abc6d49c67a1b9b8fbcf21146a6d1c771d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da91c3abc6d49c67a1b9b8fbcf21146a6d1c771d"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "32e76db3857457bdcfe28e768c1c6c0a0327db9e", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de93521da5b7d97e5f468e6ce6aff892051a316/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de93521da5b7d97e5f468e6ce6aff892051a316/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=7de93521da5b7d97e5f468e6ce6aff892051a316", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for ARM with a.out\n-   Copyright (C) 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1997 Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rearnsha@armltd.co.uk).\n    \n This file is part of GNU CC.\n@@ -154,7 +154,6 @@ do {\t\t\t\t\t\\\n #define ASM_OUTPUT_LONG_DOUBLE(STREAM,VALUE)\t\t\t\t\\\n do { char dstr[30];\t\t\t\t\t\t\t\\\n      long l[3];\t\t\t\t\t\t\t\t\\\n-     arm_increase_location (12);\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n      fprintf (STREAM, \"\\t.long 0x%lx,0x%lx,0x%lx\\t%s long double %s\\n\", \\\n@@ -165,7 +164,6 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(STREAM, VALUE)  \t\t\t\t\\\n do { char dstr[30];\t\t\t\t\t\t\t\\\n      long l[2];\t\t\t\t\t\t\t\t\\\n-     arm_increase_location (8);\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n      REAL_VALUE_TO_DECIMAL (VALUE, \"%.14g\", dstr);\t\t\t\\\n      fprintf (STREAM, \"\\t.long 0x%lx, 0x%lx\\t%s double %s\\n\", l[0],\t\\\n@@ -175,58 +173,49 @@ do { char dstr[30];\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_FLOAT(STREAM, VALUE)\t\t\t\t\t\\\n do { char dstr[30];\t\t\t\t\t\t\t\\\n      long l;\t\t\t\t\t\t\t\t\\\n-     arm_increase_location (4);\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\t\\\n      REAL_VALUE_TO_DECIMAL (VALUE, \"%.7g\", dstr);\t\t\t\\\n      fprintf (STREAM, \"\\t.word 0x%lx\\t%s float %s\\n\", l,\t\t\\\n \t      ASM_COMMENT_START, dstr);\t\t\t\t\t\\\n    } while (0);\n \n-#define ASM_OUTPUT_INT(STREAM, EXP)\t\\\n-  (fprintf (STREAM, \"\\t.word\\t\"),\t\\\n-   output_addr_const (STREAM, (EXP)),\t\\\n-   arm_increase_location (4),\t\t\\\n-   fputc ('\\n', STREAM))\n+#define ASM_OUTPUT_INT(STREAM, EXP)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    fprintf (STREAM, \"\\t.word\\t\");\t\t\\\n+    OUTPUT_INT_ADDR_CONST (STREAM, (EXP));\t\\\n+    fputc ('\\n', STREAM);\t\t\t\\\n+  }\n \n #define ASM_OUTPUT_SHORT(STREAM, EXP)  \\\n   (fprintf (STREAM, \"\\t.short\\t\"),     \\\n    output_addr_const (STREAM, (EXP)),  \\\n-   arm_increase_location (2),          \\\n    fputc ('\\n', STREAM))\n \n #define ASM_OUTPUT_CHAR(STREAM, EXP)  \\\n   (fprintf (STREAM, \"\\t.byte\\t\"),      \\\n    output_addr_const (STREAM, (EXP)),  \\\n-   arm_increase_location (1),          \\\n    fputc ('\\n', STREAM))\n \n #define ASM_OUTPUT_BYTE(STREAM, VALUE)  \\\n-  (fprintf (STREAM, \"\\t.byte\\t%d\\n\", VALUE),  \\\n-   arm_increase_location (1))\n+  fprintf (STREAM, \"\\t.byte\\t%d\\n\", VALUE)\n \n #define ASM_OUTPUT_ASCII(STREAM, PTR, LEN)  \\\n   output_ascii_pseudo_op ((STREAM), (unsigned char *)(PTR), (LEN))\n \n /* Output a gap.  In fact we fill it with nulls.  */\n #define ASM_OUTPUT_SKIP(STREAM, NBYTES)  \\\n-  (arm_increase_location (NBYTES),              \\\n-   fprintf (STREAM, \"\\t.space\\t%d\\n\", NBYTES))\n+   fprintf (STREAM, \"\\t.space\\t%d\\n\", NBYTES)\n \n /* Align output to a power of two.  Horrible /bin/as.  */\n #define ASM_OUTPUT_ALIGN(STREAM, POWER)  \\\n   do                                                           \\\n     {                                                          \\\n       register int amount = 1 << (POWER);                      \\\n-      extern int arm_text_location;\t\t\t       \\\n                                                                \\\n       if (amount == 2)                                         \\\n \tfprintf (STREAM, \"\\t.even\\n\");                         \\\n       else if (amount != 1)                                    \\\n \tfprintf (STREAM, \"\\t.align\\t%d\\n\", amount - 4);        \\\n-                                                               \\\n-      if (in_text_section ())                                  \\\n-\tarm_text_location = ((arm_text_location + amount - 1)  \\\n-\t\t\t     & ~(amount - 1));                 \\\n     } while (0)\n \n /* Output a common block */"}]}