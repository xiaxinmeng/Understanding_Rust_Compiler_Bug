{"sha": "30145da59844b186d0285958b92131e3ab0c2ab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxNDVkYTU5ODQ0YjE4NmQwMjg1OTU4YjkyMTMxZTNhYjBjMmFiMg==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2010-05-25T18:10:01Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2010-05-25T18:10:01Z"}, "message": "re PR fortran/30668 (-fwhole-file should catch function of wrong type)\n\ngcc/fortran/:\n2010-05-25  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/30668\n\tPR fortran/31346\n\tPR fortran/34260\n\t* resolve.c (resolve_global_procedure): Add check for global\n\tprocedures with implicit interfaces and assumed-shape or optional\n\tdummy arguments. Verify that function return type, kind and string\n\tlengths match.\n\ngcc/testsuite/:\n2010-05-25  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/30668\n\tPR fortran/31346\n\tPR fortran/34260\n\t* gfortran.dg/pr40999.f: Fix function type.\n\t* gfortran.dg/whole_file_5.f90: Likewise.\n\t* gfortran.dg/whole_file_6.f90: Likewise.\n\t* gfortran.dg/whole_file_16.f90: New.\n\t* gfortran.dg/whole_file_17.f90: New.\n\t* gfortran.dg/whole_file_18.f90: New.\n\nFrom-SVN: r159838", "tree": {"sha": "ba6e9bd813631092d6a65f9134c4f0098be391b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6e9bd813631092d6a65f9134c4f0098be391b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30145da59844b186d0285958b92131e3ab0c2ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30145da59844b186d0285958b92131e3ab0c2ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30145da59844b186d0285958b92131e3ab0c2ab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30145da59844b186d0285958b92131e3ab0c2ab2/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f80e2b00c9d0959904eada19c78bde57daf70c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80e2b00c9d0959904eada19c78bde57daf70c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80e2b00c9d0959904eada19c78bde57daf70c35"}], "stats": {"total": 143, "additions": 133, "deletions": 10}, "files": [{"sha": "a28bb25f817895dbebeccb38db7ade301911e254", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -1,3 +1,13 @@\n+2010-05-25  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/30668\n+\tPR fortran/31346\n+\tPR fortran/34260\n+\t* resolve.c (resolve_global_procedure): Add check for global\n+\tprocedures with implicit interfaces and assumed-shape or optional\n+\tdummy arguments. Verify that function return type, kind and string\n+\tlengths match.\n+\n 2010-05-21  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.h: Do not include system.h."}, {"sha": "f2c24409cc81f22ac0524a30d5d574a686d1ec53", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -1864,26 +1864,77 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \tgfc_error (\"The reference to function '%s' at %L either needs an \"\n \t\t   \"explicit INTERFACE or the rank is incorrect\", sym->name,\n \t\t   where);\n-     \n+\n       /* Non-assumed length character functions.  */\n       if (sym->attr.function && sym->ts.type == BT_CHARACTER\n \t  && gsym->ns->proc_name->ts.u.cl->length != NULL)\n \t{\n \t  gfc_charlen *cl = sym->ts.u.cl;\n \n \t  if (!sym->attr.entry_master && sym->attr.if_source == IFSRC_UNKNOWN\n-              && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n+\t      && cl && cl->length && cl->length->expr_type != EXPR_CONSTANT)\n \t    {\n-              gfc_error (\"Nonconstant character-length function '%s' at %L \"\n+\t      gfc_error (\"Nonconstant character-length function '%s' at %L \"\n \t\t\t \"must have an explicit interface\", sym->name,\n \t\t\t &sym->declared_at);\n \t    }\n \t}\n \n+      /* Differences in constant character lengths.  */\n+      if (sym->attr.function && sym->ts.type == BT_CHARACTER)\n+\t{\n+\t  long int l1 = 0, l2 = 0;\n+\t  gfc_charlen *cl1 = sym->ts.u.cl;\n+\t  gfc_charlen *cl2 = gsym->ns->proc_name->ts.u.cl;\n+\n+\t  if (cl1 != NULL\n+\t      && cl1->length != NULL\n+\t      && cl1->length->expr_type == EXPR_CONSTANT)\n+\t    l1 = mpz_get_si (cl1->length->value.integer);\n+\n+  \t  if (cl2 != NULL\n+\t      && cl2->length != NULL\n+\t      && cl2->length->expr_type == EXPR_CONSTANT)\n+\t    l2 = mpz_get_si (cl2->length->value.integer);\n+\n+\t  if (l1 && l2 && l1 != l2)\n+\t    gfc_error (\"Character length mismatch in return type of \"\n+\t\t       \"function '%s' at %L (%ld/%ld)\", sym->name,\n+\t\t       &sym->declared_at, l1, l2);\n+\t}\n+\n+     /* Type mismatch of function return type and expected type.  */\n+     if (sym->attr.function\n+\t && !gfc_compare_types (&sym->ts, &gsym->ns->proc_name->ts))\n+\tgfc_error (\"Return type mismatch of function '%s' at %L (%s/%s)\",\n+\t\t   sym->name, &sym->declared_at, gfc_typename (&sym->ts),\n+\t\t   gfc_typename (&gsym->ns->proc_name->ts));\n+\n+      /* Assumed shape arrays as dummy arguments.  */\n+      if (gsym->ns->proc_name->formal)\n+\t{\n+\t  gfc_formal_arglist *arg = gsym->ns->proc_name->formal;\n+\t  for ( ; arg; arg = arg->next)\n+\t    if (arg->sym && arg->sym->as\n+\t        && arg->sym->as->type == AS_ASSUMED_SHAPE)\n+\t      {\n+\t\tgfc_error (\"Procedure '%s' at %L with assumed-shape dummy \"\n+\t\t\t   \"'%s' argument must have an explicit interface\",\n+\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n+\t\tbreak;\n+\t      }\n+\t    else if (arg->sym && arg->sym->attr.optional)\n+\t      {\n+\t\tgfc_error (\"Procedure '%s' at %L with optional dummy argument \"\n+\t\t\t   \"'%s' must have an explicit interface\",\n+\t\t\t   sym->name, &sym->declared_at, arg->sym->name);\n+\t\tbreak;\n+\t      }\n+\t}\n+\n       if (gfc_option.flag_whole_file == 1\n-\t    || ((gfc_option.warn_std & GFC_STD_LEGACY)\n-\t\t  &&\n-\t       !(gfc_option.warn_std & GFC_STD_GNU)))\n+\t  || ((gfc_option.warn_std & GFC_STD_LEGACY)\n+\t      && !(gfc_option.warn_std & GFC_STD_GNU)))\n \tgfc_errors_to_warnings (1);\n \n       gfc_procedure_use (gsym->ns->proc_name, actual, where);"}, {"sha": "08d1136281bbc5c9d3f73ebfd38bd7b43156002c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -1,3 +1,15 @@\n+2010-05-25  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/30668\n+\tPR fortran/31346\n+\tPR fortran/34260\n+\t* gfortran.dg/pr40999.f: Fix function type.\n+\t* gfortran.dg/whole_file_5.f90: Likewise.\n+\t* gfortran.dg/whole_file_6.f90: Likewise.\n+\t* gfortran.dg/whole_file_16.f90: New.\n+\t* gfortran.dg/whole_file_17.f90: New.\n+\t* gfortran.dg/whole_file_18.f90: New.\n+\n 2010-05-25  Jack Howarth <howarth@bromo.med.uc.edu>\n \t    Iain Sandoe  <iains@gcc.gnu.org>\n "}, {"sha": "b6fa85ad5b188f62e08927590d2360fcbfcf78d3", "filename": "gcc/testsuite/gfortran.dg/pr40999.f", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -2,6 +2,7 @@\n ! { dg-options \"-O3 -fwhole-file\" }\n \n       SUBROUTINE ZLARFG( ALPHA )\n+        COMPLEX*16 ZLADIV\n         ALPHA = ZLADIV( DCMPLX( 1.0D+0 ) )\n       END\n       COMPLEX*16 FUNCTION ZLADIV( X )"}, {"sha": "2a17d0b1dcb348539fe6bbd2a58966188308de6a", "filename": "gcc/testsuite/gfortran.dg/whole_file_16.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_16.f90?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-fwhole-file\" }\n+!\n+! PR fortran/31346\n+!\n+program main\n+  real, dimension(2) :: a\n+  call foo(a)                ! { dg-error \"must have an explicit interface\" }\n+end program main\n+\n+subroutine foo(a)\n+  real, dimension(:) :: a\n+end subroutine foo"}, {"sha": "deaddf95ae632218c4fbc457dbc111e9de34934c", "filename": "gcc/testsuite/gfortran.dg/whole_file_17.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_17.f90?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-fwhole-file\" }\n+!\n+! PR fortran/30668\n+!\n+\n+integer(8) function two()\n+  two = 2\n+end function two\n+\n+CHARACTER(len=8) function string()\n+  string = \"gfortran\"\n+end function string\n+\n+\n+program xx\n+  INTEGER :: a\n+  CHARACTER(len=4) :: s, string   ! { dg-error \"Character length mismatch\" }\n+\n+  a = two()                       ! { dg-error \"Return type mismatch\" }\n+  s = string()\n+end program xx"}, {"sha": "dbff185921699c55fffbf1cf65dfce1b2136de7b", "filename": "gcc/testsuite/gfortran.dg/whole_file_18.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_18.f90?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do \"compile\" }\n+! { dg-options \"-fwhole-file -Wno-unused-dummy-argument\" }\n+!\n+! PR fortran/34260\n+!\n+      PROGRAM MAIN\n+      REAL A\n+      CALL SUB(A)             ! { dg-error \"must have an explicit interface\" }\n+      END PROGRAM\n+\n+      SUBROUTINE SUB(A,I)\n+      REAL :: A\n+      INTEGER, OPTIONAL :: I\n+      END SUBROUTINE"}, {"sha": "0ba8ffe21401d2747ea042e87e271708772ca431", "filename": "gcc/testsuite/gfortran.dg/whole_file_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_5.f90?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -11,9 +11,9 @@ INTEGER FUNCTION f()\n END FUNCTION\n \n PROGRAM main\n-  INTEGER :: a\n+  INTEGER :: a, f\n   a = f()\n-  print *, a\n+  print *, a, f()\n END PROGRAM\n \n ! { dg-final { scan-tree-dump-times \"= f \\\\(\\\\)\" 0 \"optimized\" } }"}, {"sha": "266c289f541219dce74b6fedbe1beb8cf8e2001e", "filename": "gcc/testsuite/gfortran.dg/whole_file_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30145da59844b186d0285958b92131e3ab0c2ab2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_6.f90?ref=30145da59844b186d0285958b92131e3ab0c2ab2", "patch": "@@ -7,13 +7,13 @@\n !\n \n PROGRAM main\n-  INTEGER :: a(3)\n+  INTEGER :: a(3), f\n   a = f()\n   print *, a\n END PROGRAM\n \n INTEGER FUNCTION f()\n-  f = 42.0\n+  f = 42\n END FUNCTION\n \n ! { dg-final { scan-tree-dump-times \"= f \\\\(\\\\)\" 0 \"optimized\" } }"}]}