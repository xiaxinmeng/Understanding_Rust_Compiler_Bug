{"sha": "f44d2277117c668c073ffde7732977699a221ceb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0ZDIyNzcxMTdjNjY4YzA3M2ZmZGU3NzMyOTc3Njk5YTIyMWNlYg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T21:28:26Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T21:28:26Z"}, "message": "trans-array.h (gfc_trans_create_temp_array): Replace info argument with ss argument.\n\n\t* trans-array.h (gfc_trans_create_temp_array): Replace info argument\n\twith ss argument.\n\t* trans-array.c (gfc_trans_create_temp_array): Ditto. Get info from ss.\n\t(gfc_trans_array_constructor, gfc_conv_loop_setup): Update call to\n\tgfc_trans_create_temp_array.\n\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Ditto.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Ditto.\n\nFrom-SVN: r180859", "tree": {"sha": "97fce364c6958438d4ec9bd82dbc376758edf3d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97fce364c6958438d4ec9bd82dbc376758edf3d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44d2277117c668c073ffde7732977699a221ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44d2277117c668c073ffde7732977699a221ceb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44d2277117c668c073ffde7732977699a221ceb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44d2277117c668c073ffde7732977699a221ceb/comments", "author": null, "committer": null, "parents": [{"sha": "14bf3267a653e835acc208a30142cf6b2f9e2a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bf3267a653e835acc208a30142cf6b2f9e2a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bf3267a653e835acc208a30142cf6b2f9e2a09"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "dec4134d3891677d8c1532324a74549fc8ef3b4b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f44d2277117c668c073ffde7732977699a221ceb", "patch": "@@ -1,3 +1,14 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.h (gfc_trans_create_temp_array): Replace info argument\n+\twith ss argument.\n+\t* trans-array.c (gfc_trans_create_temp_array): Ditto. Get info from ss.\n+\t(gfc_trans_array_constructor, gfc_conv_loop_setup): Update call to\n+\tgfc_trans_create_temp_array.\n+\t* trans-expr.c (gfc_conv_procedure_call): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Ditto.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Ditto.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_trans_array_bound_check): Use ss argument"}, {"sha": "0e7c1c14c77c59a1ff159b392a0d01d29cbea2ae", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=f44d2277117c668c073ffde7732977699a221ceb", "patch": "@@ -838,10 +838,11 @@ get_array_ref_dim (gfc_ss_info *info, int loop_dim)\n \n tree\n gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n-\t\t\t     gfc_loopinfo * loop, gfc_ss_info * info,\n+\t\t\t     gfc_loopinfo * loop, gfc_ss * ss,\n \t\t\t     tree eltype, tree initial, bool dynamic,\n \t\t\t     bool dealloc, bool callee_alloc, locus * where)\n {\n+  gfc_ss_info *info;\n   tree from[GFC_MAX_DIMENSIONS], to[GFC_MAX_DIMENSIONS];\n   tree type;\n   tree desc;\n@@ -855,6 +856,8 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   memset (from, 0, sizeof (from));\n   memset (to, 0, sizeof (to));\n \n+  info = &ss->data.info;\n+\n   gcc_assert (info->dimen > 0);\n   gcc_assert (loop->dimen == info->dimen);\n \n@@ -2038,7 +2041,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n   if (TREE_CODE (loop->to[0]) == VAR_DECL)\n     dynamic = true;\n \n-  gfc_trans_create_temp_array (&loop->pre, &loop->post, loop, &ss->data.info,\n+  gfc_trans_create_temp_array (&loop->pre, &loop->post, loop, ss,\n \t\t\t       type, NULL_TREE, dynamic, true, false, where);\n \n   desc = ss->data.info.descriptor;\n@@ -4061,7 +4064,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n \tloop->temp_ss->data.info.dim[n] = n;\n \n       gfc_trans_create_temp_array (&loop->pre, &loop->post, loop,\n-\t\t\t\t   &loop->temp_ss->data.info, tmp, NULL_TREE,\n+\t\t\t\t   loop->temp_ss, tmp, NULL_TREE,\n \t\t\t\t   false, true, false, where);\n     }\n "}, {"sha": "57805b6ac5cfb0dd06cdd029c2fcc2f0989ebfc7", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=f44d2277117c668c073ffde7732977699a221ceb", "patch": "@@ -32,7 +32,7 @@ void gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping *,\n \n /* Generate code to create a temporary array.  */\n tree gfc_trans_create_temp_array (stmtblock_t *, stmtblock_t *, gfc_loopinfo *,\n-\t\t\t\t  gfc_ss_info *, tree, tree, bool, bool, bool,\n+\t\t\t\t  gfc_ss *, tree, tree, bool, bool, bool,\n \t\t\t\t  locus *);\n \n /* Generate function entry code for allocation of compiler allocated array"}, {"sha": "b2c1739bdfc39c8795023f7da147f1b28e12c74f", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f44d2277117c668c073ffde7732977699a221ceb", "patch": "@@ -3602,8 +3602,9 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     returns a pointer, the temporary will be a shallow copy and\n \t     mustn't be deallocated.  */\n \t  callee_alloc = comp->attr.allocatable || comp->attr.pointer;\n-\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, info, tmp,\n-\t\t\t\t       NULL_TREE, false, !comp->attr.pointer,\n+\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, se->ss,\n+\t\t\t\t       tmp, NULL_TREE, false,\n+\t\t\t\t       !comp->attr.pointer,\n \t\t\t\t       callee_alloc, &se->ss->expr->where);\n \n \t  /* Pass the temporary as the first argument.  */\n@@ -3637,8 +3638,9 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     returns a pointer, the temporary will be a shallow copy and\n \t     mustn't be deallocated.  */\n \t  callee_alloc = sym->attr.allocatable || sym->attr.pointer;\n-\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, info, tmp,\n-\t\t\t\t       NULL_TREE, false, !sym->attr.pointer,\n+\t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, se->ss,\n+\t\t\t\t       tmp, NULL_TREE, false,\n+\t\t\t\t       !sym->attr.pointer,\n \t\t\t\t       callee_alloc, &se->ss->expr->where);\n \n \t  /* Pass the temporary as the first argument.  */"}, {"sha": "95161f8bdd0ff340469ad136ef5a42b82b651431", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=f44d2277117c668c073ffde7732977699a221ceb", "patch": "@@ -5502,7 +5502,7 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n   /* Build a destination descriptor, using the pointer, source, as the\n      data field.  */\n   gfc_trans_create_temp_array (&se->pre, &se->post, se->loop,\n-\t\t\t       info, mold_type, NULL_TREE, false, true, false,\n+\t\t\t       se->ss, mold_type, NULL_TREE, false, true, false,\n \t\t\t       &expr->where);\n \n   /* Cast the pointer to the result.  */"}, {"sha": "c7ae36005d21aa8ee22bfc2b4ec7aa1267cd75a3", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44d2277117c668c073ffde7732977699a221ceb/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=f44d2277117c668c073ffde7732977699a221ceb", "patch": "@@ -310,7 +310,7 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  data = gfc_create_var (pvoid_type_node, NULL);\n \t  gfc_init_block (&temp_post);\n \t  tmp = gfc_trans_create_temp_array (&se->pre, &temp_post,\n-\t\t\t\t\t     &tmp_loop, info, temptype,\n+\t\t\t\t\t     &tmp_loop, ss, temptype,\n \t\t\t\t\t     initial,\n \t\t\t\t\t     false, true, false,\n \t\t\t\t\t     &arg->expr->where);"}]}