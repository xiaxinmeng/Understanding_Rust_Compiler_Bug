{"sha": "4c19aa690451fbd5d84ce1534a903163e67182e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxOWFhNjkwNDUxZmJkNWQ4NGNlMTUzNGE5MDMxNjNlNjcxODJlMw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-08-13T08:06:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:06:29Z"}, "message": "[Ada] Add ability to list compiler switches with gnatcmd\n\nThis patch adds a new switch (--help-ada) to gnatcmd for displaying all\nthe availible build flags as well as fixing some minor differences in\noutput between implicit and explicit help for gnatcmd (e.g. \"gnat\" vs\n\"gnat --help\").\n\n$ gnat\nGNAT Pro 20.0w (19940713)\nCopyright 1996-2019, Free Software Foundation, Inc.\n\nTo list Ada build switches use --help-ada\n\nList of available commands\n\ngnat bind               gnatbind\ngnat chop               gnatchop\ngnat clean              gnatclean\ngnat compile            gnatmake -f -u -c\ngnat check              gnatcheck\ngnat elim               gnatelim\ngnat find               gnatfind\ngnat krunch             gnatkr\ngnat link               gnatlink\ngnat list               gnatls\ngnat make               gnatmake\ngnat metric             gnatmetric\ngnat name               gnatname\ngnat preprocess         gnatprep\ngnat pretty             gnatpp\ngnat stack              gnatstack\ngnat stub               gnatstub\ngnat test               gnattest\ngnat xref               gnatxref\n\nReport bugs to report@adacore.com\n\n$ gnat --help\nGNAT Pro 20.0w (19940713)\nCopyright 1996-2019, Free Software Foundation, Inc.\n\nTo list Ada build switches use --help-ada\n\nList of available commands\n\ngnat bind               gnatbind\ngnat chop               gnatchop\ngnat clean              gnatclean\ngnat compile            gnatmake -f -u -c\ngnat check              gnatcheck\ngnat elim               gnatelim\ngnat find               gnatfind\ngnat krunch             gnatkr\ngnat link               gnatlink\ngnat list               gnatls\ngnat make               gnatmake\ngnat metric             gnatmetric\ngnat name               gnatname\ngnat preprocess         gnatprep\ngnat pretty             gnatpp\ngnat stack              gnatstack\ngnat stub               gnatstub\ngnat test               gnattest\ngnat xref               gnatxref\n\nReport bugs to report@adacore.com\n\n$ gnat --help-ada\nUsage: gnat switches sfile\n\n  sfile     Source file name\n\n  -g            Generate debugging information\n  -Idir         Specify source files search path\n  -I-           Do not look for sources in current directory\n  -O[0123]      Control the optimization level\n\n  -gnata    Assertions enabled. Pragma Assert/Debug to be activated\n  -gnatA    Avoid processing gnat.adc, if present file will be ignored\n  -gnatb    Generate brief messages to stderr even if verbose mode set\n  -gnatB    Assume no bad (invalid) values except in 'Valid attribute\n  -gnatc    Check syntax and semantics only (no code generation)\n  -gnatC    Generate CodePeer intermediate format (no code generation)\n  -gnatd?   Compiler debug option ? ([.]a-z,A-Z,0-9), see debug.adb\n  -gnatD    Debug expanded generated code (max line length = 72)\n  -gnatDnn  Debug expanded generated code (max line length = nn)\n  -gnateA   Aliasing checks on subprogram parameters\n  -gnatec=? Specify configuration pragmas file, e.g. -gnatec=/x/f.adc\n  -gnateC   Generate CodePeer messages (ignored without -gnatcC)\n  -gnated   Disable synchronization of atomic variables\n  -gnateD?  Define or redefine preprocessing symbol, e.g. -gnateDsym=val\n  -gnateE   Generate extra information in exception messages\n  -gnatef   Full source path in brief error messages\n  -gnateF   Check overflow on predefined Float types\n  -gnateG   Generate preprocessed source\n  -gnateinn Set maximum number of instantiations to nn\n  -gnateInn Index in multi-unit source, e.g. -gnateI2\n  -gnatel   Turn on info messages on generated Elaborate[_All] pragmas\n  -gnateL   Turn off info messages on generated Elaborate[_All] pragmas\n  -gnatem=? Specify mapping file, e.g. -gnatem=mapping\n  -gnatep=? Specify preprocessing data file, e.g. -gnatep=prep.data\n  -gnateP   Pure/Prelaborate errors generate warnings rather than errors\n  -gnateS   Generate SCO (Source Coverage Obligation) information\n  -gnatet=? Write target dependent information file ?, e.g. gnatet=tdf\n  -gnateT=? Read target dependent information file ?, e.g. gnateT=tdf\n  -gnateu   Ignore unrecognized style/validity/warning switches\n  -gnateV   Validity checks on subprogram parameters\n  -gnateY   Ignore all Style_Checks pragmas in source\n  -gnatE    Dynamic elaboration checking mode enabled\n  -gnatf    Full errors. Verbose details, all undefined references\n  -gnatF    Force all import/export external names to all uppercase\n  -gnatg    GNAT implementation mode (used for compiling GNAT units)\n  -gnatG    Output generated expanded code (max line length = 72)\n  -gnatGnn  Output generated expanded code (max line length = nn)\n  -gnath    Output this usage (help) information\n  -gnatH    Legacy elaboration checking mode enabled\n  -gnati?   Identifier char set (?=1/2/3/4/5/8/9/p/f/n/w)\n  -gnatI    Ignore all representation clauses\n  -gnatjnn  Format error and warning messages to fit nn character lines\n  -gnatJ    Relaxed elaboration checking mode enabled\n  -gnatk    Limit file names to nn characters (k = krunch)\n  -gnatl    Output full source listing with embedded error messages\n  -gnatl=f  Output full source listing to specified file\n  -gnatL    List corresponding source text in -gnatG or -gnatD output\n  -gnatmnn  Limit number of detected errors/warnings to nn (1-999999)\n  -gnatn[?] Enable pragma Inline across units (?=1/2 for moderate/full)\n  -gnato0   Disable overflow checking\n  -gnato    Enable overflow checking in STRICT (-gnato1) mode (default)\n  -gnato?   Enable overflow checks in STRICT/MINIMIZED/ELIMINATED (1/2/3) mode\n  -gnato??  Set mode for general/assertion expressions separately\n  -gnatp    Suppress all checks\n  -gnatP    Generate periodic calls to System.Polling.Poll\n  -gnatq    Don't quit, try semantics, even if parse errors\n  -gnatQ    Don't quit, write ali/tree file even if compile errors\n  -gnatr    Treat pragma Restrictions as Restriction_Warnings\n  -gnatR?   List rep info (?=0/1/2/3/4/e/m for none/types/all/sym/cg/ext/mech)\n  -gnatR?j  List rep info in the JSON data interchange format\n  -gnatR?s  List rep info to file.rep instead of standard output\n  -gnats    Syntax check only\n  -gnatS    Print listing of package Standard\n  -gnatt    Tree output file to be generated\n  -gnatTnn  All compiler tables start at nn times usual starting size\n  -gnatu    List units for this compilation\n  -gnatU    Enable unique tag for error messages\n  -gnatv    Verbose mode. Full error output with source lines to stdout\n  -gnatVxx  Enable selected validity checking mode, xx = list of parameters:\n        a    turn on all validity checking options\n        c    turn on checking for copies\n        C    turn off checking for copies\n        d    turn on default (RM) checking\n        D    turn off default (RM) checking\n        e    turn on checking for elementary components\n        E    turn off checking for elementary components\n        f    turn on checking for floating-point\n        F    turn off checking for floating-point\n        i    turn on checking for in params\n        I    turn off checking for in params\n        m    turn on checking for in out params\n        M    turn off checking for in out params\n        n    turn off all validity checks (including RM)\n        o    turn on checking for operators/attributes\n        O    turn off checking for operators/attributes\n        p    turn on checking for parameters\n        P    turn off checking for parameters\n        r    turn on checking for returns\n        R    turn off checking for returns\n        s    turn on checking for subscripts\n        S    turn off checking for subscripts\n        t    turn on checking for tests\n        T    turn off checking for tests\n  -gnatwxx  Enable selected warning modes, xx = list of parameters:\n        *    indicates default setting\n        +    indicates warning flag included in -gnatwa\n        a    turn on all info/warnings marked below with +\n        A    turn off all optional info/warnings\n        .a*+ turn on warnings for failing assertion\n        .A   turn off warnings for failing assertion\n        _a*+ turn on warnings for anonymous allocators\n        _A   turn off warnings for anonymous allocators\n        b+   turn on warnings for bad fixed value (not multiple of small)\n        B*   turn off warnings for bad fixed value (not multiple of small)\n        .b*+ turn on warnings for biased representation\n        .B   turn off warnings for biased representation\n        c+   turn on warnings for constant conditional\n        C*   turn off warnings for constant conditional\n        .c+  turn on warnings for unrepped components\n        .C*  turn off warnings for unrepped components\n        d    turn on warnings for implicit dereference\n        D*   turn off warnings for implicit dereference\n        .d   turn on tagging of warnings with -gnatw switch\n        .D*  turn off tagging of warnings with -gnatw switch\n        e    treat all warnings (but not info) as errors\n        .e   turn on every optional info/warning (no exceptions)\n        E    treat all run-time warnings as errors\n        f+   turn on warnings for unreferenced formal\n        F*   turn off warnings for unreferenced formal\n        .f   turn on warnings for suspicious Subp'Access\n        .F*  turn off warnings for suspicious Subp'Access\n        g*+  turn on warnings for unrecognized pragma\n        G    turn off warnings for unrecognized pragma\n        .g   turn on GNAT warnings\n        h    turn on warnings for hiding declarations\n        H*   turn off warnings for hiding declarations\n        .h   turn on warnings for holes in records\n        .H*  turn off warnings for holes in records\n        i*+  turn on warnings for implementation unit\n        I    turn off warnings for implementation unit\n        .i*+ turn on warnings for overlapping actuals\n        .I   turn off warnings for overlapping actuals\n        j+   turn on warnings for obsolescent (annex J) feature\n        J*   turn off warnings for obsolescent (annex J) feature\n        .j+  turn on warnings for late dispatching primitives\n        .J*  turn off warnings for late dispatching primitives\n        k+   turn on warnings on constant variable\n        K*   turn off warnings on constant variable\n        .k   turn on warnings for standard redefinition\n        .K*  turn off warnings for standard redefinition\n        l    turn on warnings for elaboration problems\n        L*   turn off warnings for elaboration problems\n        .l   turn on info messages for inherited aspects\n        .L*  turn off info messages for inherited aspects\n        m+   turn on warnings for variable assigned but not read\n        M*   turn off warnings for variable assigned but not read\n        .m*+ turn on warnings for suspicious modulus value\n        .M   turn off warnings for suspicious modulus value\n        n*   normal warning mode (cancels -gnatws/-gnatwe)\n        .n   turn on info messages for atomic synchronization\n        .N*  turn off info messages for atomic synchronization\n        o*   turn on warnings for address clause overlay\n        O    turn off warnings for address clause overlay\n        .o   turn on warnings for out parameters assigned but not read\n        .O*  turn off warnings for out parameters assigned but not read\n        p+   turn on warnings for ineffective pragma Inline in frontend\n        P*   turn off warnings for ineffective pragma Inline in frontend\n        .p+  turn on warnings for suspicious parameter order\n        .P*  turn off warnings for suspicious parameter order\n        q*+  turn on warnings for questionable missing parenthesis\n        Q    turn off warnings for questionable missing parenthesis\n        .q+  turn on warnings for questionable layout of record types\n        .Q*  turn off warnings for questionable layout of record types\n        r+   turn on warnings for redundant construct\n        R*   turn off warnings for redundant construct\n        .r+  turn on warnings for object renaming function\n        .R*  turn off warnings for object renaming function\n        s    suppress all info/warnings\n        .s   turn on warnings for overridden size clause\n        .S*  turn off warnings for overridden size clause\n        t    turn on warnings for tracking deleted code\n        T*   turn off warnings for tracking deleted code\n        .t*+ turn on warnings for suspicious contract\n        .T   turn off warnings for suspicious contract\n        u+   turn on warnings for unused entity\n        U*   turn off warnings for unused entity\n        .u   turn on warnings for unordered enumeration\n        .U*  turn off warnings for unordered enumeration\n        v*+  turn on warnings for unassigned variable\n        V    turn off warnings for unassigned variable\n        .v*+ turn on info messages for reverse bit order\n        .V   turn off info messages for reverse bit order\n        w*+  turn on warnings for wrong low bound assumption\n        W    turn off warnings for wrong low bound assumption\n        .w   turn on warnings on pragma Warnings Off\n        .W*  turn off warnings on pragma Warnings Off\n        x*+  turn on warnings for export/import\n        X    turn off warnings for export/import\n        .x+  turn on warnings for non-local exception\n        .X*  turn off warnings for non-local exception\n        y*+  turn on warnings for Ada compatibility issues\n        Y    turn off warnings for Ada compatibility issues\n        .y   turn on info messages for why pkg body needed\n        .Y*  turn off info messages for why pkg body needed\n        z*+  turn on warnings for suspicious unchecked conversion\n        Z    turn off warnings for suspicious unchecked conversion\n        .z*+ turn on warnings for record size not a multiple of alignment\n        .Z   turn off warnings for record size not a multiple of alignment\n  -gnatW?   Wide character encoding method (?=h/u/s/e/8/b)\n  -gnatx    Suppress output of cross-reference information\n  -gnatX    Language extensions permitted\n  -gnaty    Enable default style checks (same as -gnaty3abcefhiklmnprst)\n  -gnatyxx  Enable selected style checks xx = list of parameters:\n        1-9  check indentation\n        a    check attribute casing\n        A    check array attribute indexes\n        b    check no blanks at end of lines\n        B    check no use of AND/OR for boolean expressions\n        c    check comment format (two spaces)\n        C    check comment format (one space)\n        d    check no DOS line terminators\n        e    check end/exit labels present\n        f    check no form feeds/vertical tabs in source\n        g    check standard GNAT style rules, same as ydISux\n        h    check no horizontal tabs in source\n        i    check if-then layout\n        I    check mode in\n        k    check casing rules for keywords\n        l    check reference manual layout\n        Lnn  check max nest level < nn\n        m    check line length <= 79 characters\n        Mnn  check line length <= nn characters\n        n    check casing of package Standard identifiers\n        N    turn off all checks\n        o    check subprogram bodies in alphabetical order\n        O    check overriding indicators\n        p    check pragma casing\n        r    check casing for identifier references\n        s    check separate subprogram specs present\n        S    check separate lines after THEN or ELSE\n        t    check token separation rules\n        u    check no unnecessary blank lines\n        x    check extra parentheses around conditionals\n        y    turn on default style checks\n        -    subtract (turn off) subsequent checks\n        +    add (turn on) subsequent checks\n  -gnatyN   Cancel all previously set style checks\n  -gnatzc   Distribution stub generation for caller stubs\n  -gnatzr   Distribution stub generation for receiver stubs\n  -gnat83   Ada 83 mode\n  -gnat95   Ada 95 mode\n  -gnat2005 Ada 2005 mode\n  -gnat2012 Ada 2012 mode (default)\n  -gnat-p   Cancel effect of previous -gnatp switch\n\n2019-08-13  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* gnatcmd.adb (GNATCmd): Add constant for new compiler switch\n\t--help-ada, and include usage subprogram. Add line to usage help\n\texplaining the new flag.\n\t(GNATCmd_Usage): Rename from locally declared Usage so as not to\n\tconfuse with the newly imported version. Add new argument case\n\tfor --help-ada and add bug report email to implicit display of\n\thelp without the --help flag so as to unify output between the\n\ttwo cases.\n\nFrom-SVN: r274334", "tree": {"sha": "f54400ed7e8994254835a0f2784f70fa77315911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f54400ed7e8994254835a0f2784f70fa77315911"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c19aa690451fbd5d84ce1534a903163e67182e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19aa690451fbd5d84ce1534a903163e67182e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c19aa690451fbd5d84ce1534a903163e67182e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19aa690451fbd5d84ce1534a903163e67182e3/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0401824f74645adcd008045190e0d86ae3ce8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0401824f74645adcd008045190e0d86ae3ce8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0401824f74645adcd008045190e0d86ae3ce8e0"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "1cc1ef2850d6ecfdd55119029cb726b893f5504e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19aa690451fbd5d84ce1534a903163e67182e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19aa690451fbd5d84ce1534a903163e67182e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c19aa690451fbd5d84ce1534a903163e67182e3", "patch": "@@ -1,3 +1,14 @@\n+2019-08-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnatcmd.adb (GNATCmd): Add constant for new compiler switch\n+\t--help-ada, and include usage subprogram. Add line to usage help\n+\texplaining the new flag.\n+\t(GNATCmd_Usage): Rename from locally declared Usage so as not to\n+\tconfuse with the newly imported version. Add new argument case\n+\tfor --help-ada and add bug report email to implicit display of\n+\thelp without the --help flag so as to unify output between the\n+\ttwo cases.\n+\n 2019-08-13  Dmitriy Anisimkov  <anisimko@adacore.com>\n \n \t* libgnat/g-comlin.adb (Getopt): Quote unrecognized switch in"}, {"sha": "f83b0f2db68f3a5de66ab80aa3d64af8923366b7", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19aa690451fbd5d84ce1534a903163e67182e3/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19aa690451fbd5d84ce1534a903163e67182e3/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=4c19aa690451fbd5d84ce1534a903163e67182e3", "patch": "@@ -30,6 +30,7 @@ with Osint;    use Osint;\n with Output;   use Output;\n with Switch;   use Switch;\n with Table;\n+with Usage;\n \n with Ada.Characters.Handling; use Ada.Characters.Handling;\n with Ada.Command_Line;        use Ada.Command_Line;\n@@ -43,6 +44,9 @@ procedure GNATCmd is\n    Gprname  : constant String := \"gprname\";\n    Gprls    : constant String := \"gprls\";\n \n+   Ada_Help_Switch : constant String := \"--help-ada\";\n+   --  Flag to display available build switches\n+\n    Error_Exit : exception;\n    --  Raise this exception if error detected\n \n@@ -229,7 +233,7 @@ procedure GNATCmd is\n    procedure Output_Version;\n    --  Output the version of this program\n \n-   procedure Usage;\n+   procedure GNATCmd_Usage;\n    --  Display usage\n \n    --------------------\n@@ -244,14 +248,16 @@ procedure GNATCmd is\n                 & \", Free Software Foundation, Inc.\");\n    end Output_Version;\n \n-   -----------\n-   -- Usage --\n-   -----------\n+   -------------------\n+   -- GNATCmd_Usage --\n+   -------------------\n \n-   procedure Usage is\n+   procedure GNATCmd_Usage is\n    begin\n       Output_Version;\n       New_Line;\n+      Put_Line (\"To list Ada build switches use \" & Ada_Help_Switch);\n+      New_Line;\n       Put_Line (\"List of available commands\");\n       New_Line;\n \n@@ -276,9 +282,10 @@ procedure GNATCmd is\n       end loop;\n \n       New_Line;\n-   end Usage;\n+   end GNATCmd_Usage;\n \n-   procedure Check_Version_And_Help is new Check_Version_And_Help_G (Usage);\n+   procedure Check_Version_And_Help\n+     is new Check_Version_And_Help_G (GNATCmd_Usage);\n \n --  Start of processing for GNATCmd\n \n@@ -351,6 +358,12 @@ begin\n             Keep_Temporary_Files := True;\n             Command_Arg := Command_Arg + 1;\n \n+         elsif Command_Arg <= Argument_Count\n+           and then Argument (Command_Arg) = Ada_Help_Switch\n+         then\n+            Usage;\n+            Exit_Program (E_Success);\n+\n          else\n             exit;\n          end if;\n@@ -359,7 +372,12 @@ begin\n       --  If there is no command, just output the usage\n \n       if Command_Arg > Argument_Count then\n-         Usage;\n+         GNATCmd_Usage;\n+\n+         --  Add the following so that output is consistent with or without the\n+         --  --help flag.\n+         Write_Eol;\n+         Write_Line (\"Report bugs to report@adacore.com\");\n          return;\n       end if;\n \n@@ -379,7 +397,7 @@ begin\n \n          exception\n             when Constraint_Error =>\n-               Usage;\n+               GNATCmd_Usage;\n                Fail (\"unknown command: \" & Argument (Command_Arg));\n          end;\n    end;"}]}