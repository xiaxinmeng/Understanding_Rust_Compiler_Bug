{"sha": "7e7ca3a1bd935133caa153c9c58c884641604959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3Y2EzYTFiZDkzNTEzM2NhYTE1M2M5YzU4Yzg4NDY0MTYwNDk1OQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-06-19T18:54:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-06-19T18:54:44Z"}, "message": "Fix hpux loop unrolling bug reported by Tim Prince.\n\n\t* loop.h (struct induction): Clarify comment for unrolled field.\n\t* unroll.c (find_splittable_givs): Move set of unrolled field\n\tafter address validity check.\n\nFrom-SVN: r20598", "tree": {"sha": "87e0bca439aa9c3eede052c05bebd84e9756863d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87e0bca439aa9c3eede052c05bebd84e9756863d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7ca3a1bd935133caa153c9c58c884641604959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7ca3a1bd935133caa153c9c58c884641604959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7ca3a1bd935133caa153c9c58c884641604959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7ca3a1bd935133caa153c9c58c884641604959/comments", "author": null, "committer": null, "parents": [{"sha": "643a7267dfd1aae8deee17a411747a3699ec2691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643a7267dfd1aae8deee17a411747a3699ec2691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643a7267dfd1aae8deee17a411747a3699ec2691"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "73465c726d2e9680fa1830661ce2ea7ff29a9246", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ca3a1bd935133caa153c9c58c884641604959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ca3a1bd935133caa153c9c58c884641604959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e7ca3a1bd935133caa153c9c58c884641604959", "patch": "@@ -1,3 +1,9 @@\n+1998-06-19  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* loop.h (struct induction): Clarify comment for unrolled field.\n+\t* unroll.c (find_splittable_givs): Move set of unrolled field\n+\tafter address validity check.\n+\n Fri Jun 19 18:38:04 1998  Michael Meissner  <meissner@cygnus.com>\n \n \t* config/fp-bit.c (INLINE): Only define if not already defined."}, {"sha": "25c16f0d89b8dbd0e74c13a84a41c6de6bfb4d4b", "filename": "gcc/loop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ca3a1bd935133caa153c9c58c884641604959/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ca3a1bd935133caa153c9c58c884641604959/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=7e7ca3a1bd935133caa153c9c58c884641604959", "patch": "@@ -92,8 +92,8 @@ struct induction\n \t\t\t\t   would probably lose. */\n   unsigned auto_inc_opt : 1;\t/* 1 if this giv had its increment output next\n \t\t\t\t   to it to try to form an auto-inc address. */\n-  unsigned unrolled : 1;\t/* 1 if new register has been allocated in\n-\t\t\t\t   unrolled loop.  */\n+  unsigned unrolled : 1;\t/* 1 if new register has been allocated and\n+\t\t\t\t   initialized in unrolled loop.  */\n   unsigned shared : 1;\n   int lifetime;\t\t\t/* Length of life of this giv */\n   int times_used;\t\t/* # times this giv is used. */"}, {"sha": "e3c43ff9e463665439685c7465084e307033306b", "filename": "gcc/unroll.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7ca3a1bd935133caa153c9c58c884641604959/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7ca3a1bd935133caa153c9c58c884641604959/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=7e7ca3a1bd935133caa153c9c58c884641604959", "patch": "@@ -2907,7 +2907,6 @@ find_splittable_givs (bl, unroll_type, loop_start, loop_end, increment,\n \n \t\t  rtx tem = gen_reg_rtx (v->mode);\n \t\t  record_base_value (REGNO (tem), v->add_val, 0);\n-\t\t  v->unrolled = 1;\n \n \t\t  /* If the address giv has a constant in its new_reg value,\n \t\t     then this constant can be pulled out and put in value,\n@@ -2960,6 +2959,10 @@ find_splittable_givs (bl, unroll_type, loop_start, loop_end, increment,\n \t\t      continue;\n \t\t    }\n \t\t  \n+\t\t  /* We set this after the address check, to guarantee that\n+\t\t     the register will be initialized.  */\n+\t\t  v->unrolled = 1;\n+\n \t\t  /* To initialize the new register, just move the value of\n \t\t     new_reg into it.  This is not guaranteed to give a valid\n \t\t     instruction on machines with complex addressing modes."}]}