{"sha": "cd67343703ef4fa61de837f4690eba70d2760825", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2NzM0MzcwM2VmNGZhNjFkZTgzN2Y0NjkwZWJhNzBkMjc2MDgyNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-18T16:29:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-05-19T19:43:07Z"}, "message": "c++: ICE with <=> fallback [PR100367]\n\nHere, when genericizing lexicographical_compare_three_way, we haven't yet\nwalked the operands, so (a == a) still sees ADDR_EXPR <a>, but this is after\nwe've changed the type of a to REFERENCE_TYPE.  When we try to fold (a == a)\nby constexpr evaluation, the constexpr code doesn't understand trying to\ntake the address of a reference, and we end up crashing.\n\nFixed by avoiding constexpr evaluation in genericize_spaceship, by using\nfold_build2 instead of build_new_op on scalar operands.  Class operands\nshould have been expanded during parsing.\n\n\tPR c++/100367\n\tPR c++/96299\n\ngcc/cp/ChangeLog:\n\n\t* method.c (genericize_spaceship): Use fold_build2 for scalar\n\toperands.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/spaceship-fallback1.C: New test.", "tree": {"sha": "b704f95df735f0fe15d70ea5e9ff4e529b7ea5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b704f95df735f0fe15d70ea5e9ff4e529b7ea5f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd67343703ef4fa61de837f4690eba70d2760825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd67343703ef4fa61de837f4690eba70d2760825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd67343703ef4fa61de837f4690eba70d2760825", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd67343703ef4fa61de837f4690eba70d2760825/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b50282b0dcf79d3141979e466465a23d1816166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b50282b0dcf79d3141979e466465a23d1816166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b50282b0dcf79d3141979e466465a23d1816166"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "dd745237f221bf12f5bccce020e60acb70b16e8e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67343703ef4fa61de837f4690eba70d2760825/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67343703ef4fa61de837f4690eba70d2760825/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=cd67343703ef4fa61de837f4690eba70d2760825", "patch": "@@ -1087,7 +1087,8 @@ genericize_spaceship (location_t loc, tree type, tree op0, tree op1)\n   gcc_checking_assert (tag < cc_last);\n \n   tree r;\n-  if (SCALAR_TYPE_P (TREE_TYPE (op0)))\n+  bool scalar = SCALAR_TYPE_P (TREE_TYPE (op0));\n+  if (scalar)\n     {\n       op0 = save_expr (op0);\n       op1 = save_expr (op1);\n@@ -1097,26 +1098,53 @@ genericize_spaceship (location_t loc, tree type, tree op0, tree op1)\n \n   int flags = LOOKUP_NORMAL;\n   tsubst_flags_t complain = tf_none;\n+  tree comp;\n \n   if (tag == cc_partial_ordering)\n     {\n       /* op0 == op1 ? equivalent : op0 < op1 ? less :\n \t op1 < op0 ? greater : unordered */\n       tree uo = lookup_comparison_result (tag, type, 3);\n-      tree comp = build_new_op (loc, LT_EXPR, flags, op1, op0, complain);\n-      r = build_conditional_expr (loc, comp, gt, uo, complain);\n+      if (scalar)\n+\t{\n+\t  /* For scalars use the low level operations; using build_new_op causes\n+\t     trouble with constexpr eval in the middle of genericize (100367).  */\n+\t  comp = fold_build2 (LT_EXPR, boolean_type_node, op1, op0);\n+\t  r = fold_build3 (COND_EXPR, type, comp, gt, uo);\n+\t}\n+      else\n+\t{\n+\t  comp = build_new_op (loc, LT_EXPR, flags, op1, op0, complain);\n+\t  r = build_conditional_expr (loc, comp, gt, uo, complain);\n+\t}\n     }\n   else\n     /* op0 == op1 ? equal : op0 < op1 ? less : greater */\n     r = gt;\n \n   tree lt = lookup_comparison_result (tag, type, 2);\n-  tree comp = build_new_op (loc, LT_EXPR, flags, op0, op1, complain);\n-  r = build_conditional_expr (loc, comp, lt, r, complain);\n+  if (scalar)\n+    {\n+      comp = fold_build2 (LT_EXPR, boolean_type_node, op0, op1);\n+      r = fold_build3 (COND_EXPR, type, comp, lt, r);\n+    }\n+  else\n+    {\n+      comp = build_new_op (loc, LT_EXPR, flags, op0, op1, complain);\n+      r = build_conditional_expr (loc, comp, lt, r, complain);\n+    }\n \n   tree eq = lookup_comparison_result (tag, type, 0);\n-  comp = build_new_op (loc, EQ_EXPR, flags, op0, op1, complain);\n-  r = build_conditional_expr (loc, comp, eq, r, complain);\n+  if (scalar)\n+    {\n+      comp = fold_build2 (EQ_EXPR, boolean_type_node, op0, op1);\n+      r = fold_build3 (COND_EXPR, type, comp, eq, r);\n+    }\n+  else\n+    {\n+      comp = build_new_op (loc, EQ_EXPR, flags, op0, op1, complain);\n+      r = build_conditional_expr (loc, comp, eq, r, complain);\n+    }\n \n   return r;\n }"}, {"sha": "5ce49490fe5af39342399deab7851f05217de700", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-fallback1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd67343703ef4fa61de837f4690eba70d2760825/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-fallback1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd67343703ef4fa61de837f4690eba70d2760825/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-fallback1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-fallback1.C?ref=cd67343703ef4fa61de837f4690eba70d2760825", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/100367\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+struct iter {\n+  bool current;\n+  iter(iter &);\n+};\n+\n+constexpr bool operator==(const iter &, const iter &y) {\n+  return y.current;\n+}\n+\n+void lexicographical_compare_three_way(iter a) {\n+  (a == a) <=> true;\n+}"}]}