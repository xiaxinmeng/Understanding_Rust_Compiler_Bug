{"sha": "3f1176568bb51d0d953470763a715ec12dcbfea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxMTc2NTY4YmI1MWQwZDk1MzQ3MDc2M2E3MTVlYzEyZGNiZmVhNg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-02-24T21:47:26Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-02-24T21:47:26Z"}, "message": "ChangeLog.5: Fix log message typo(s).\n\n\t* ChangeLog.5: Fix log message typo(s).\n\t* ChangeLog.7: Likewise.\n\t* ChangeLog.tree-ssa: Likewise.\n\t* cfgexpand.c: Fix comment typo(s).\n\t* conflict.c: Likewise.\n\t* defaults.h: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* gcse.c: Likewise.\n\t* ggc-page.c: Likewise.\n\t* tree-eh.c: Likewise.\n\t* tree-ssa-dom.c: Likewise.\n\nFrom-SVN: r95516", "tree": {"sha": "42ae786e6a9fe0fcb904dc11ee9e36ca7e2eb8a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ae786e6a9fe0fcb904dc11ee9e36ca7e2eb8a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1176568bb51d0d953470763a715ec12dcbfea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1176568bb51d0d953470763a715ec12dcbfea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1176568bb51d0d953470763a715ec12dcbfea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1176568bb51d0d953470763a715ec12dcbfea6/comments", "author": null, "committer": null, "parents": [{"sha": "df8a7c49f1a2f11300ac0405bb50bce188d64e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8a7c49f1a2f11300ac0405bb50bce188d64e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8a7c49f1a2f11300ac0405bb50bce188d64e0e"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "6f81778ec68ccc863d9fb51199f1089e4b718e08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -1,3 +1,17 @@\n+2005-02-24  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* ChangeLog.5: Fix log message typo(s).\n+\t* ChangeLog.7: Likewise.\n+\t* ChangeLog.tree-ssa: Likewise.\n+\t* cfgexpand.c: Fix comment typo(s).\n+\t* conflict.c: Likewise.\n+\t* defaults.h: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* ggc-page.c: Likewise.\n+\t* tree-eh.c: Likewise.\n+\t* tree-ssa-dom.c: Likewise.\n+\n 2005-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/19019"}, {"sha": "c5f3b54200ffaae98928a2d9d8df31d981c3996a", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -3405,8 +3405,8 @@ Fri May 18 15:39:16 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \twhat a basic block is, and what the various fields are used for.\n \t* flow.c (calculate_globlal_regs_live): Add documentation about\n \thow the algorithm works, and how we know that it will terminate.\n-\tCheck that the the inductive assumption that guarantees\n-\ttermination actually holds.\n+\tCheck that the inductive assumption that guarantees termination\n+\tactually holds.\n \t(mark_used_regs): Treat conditionally set registers as used.\n \t(debug_regset): Add comment.\n \t* rtl.texi (cond_exec): Add documentation."}, {"sha": "022212bfa87805047bdba6c94b335eb155978e9b", "filename": "gcc/ChangeLog.7", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog.7", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog.7", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.7?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -1717,7 +1717,7 @@ Tue Jun 11 21:53:37 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \tlast insn created by the splitter.\n \n \t* caller-save.c (init_caller_save): Move creation of SAVEINSN\n-\tand RESTINSN into into the scope of the sequence.\n+\tand RESTINSN into the scope of the sequence.\n \n \t* mips.c (mips_expand_prologue): Use emit_jump_insn for trivial\n \tRETURN insns."}, {"sha": "4f22a6e77c83eb9feb842a4302249bfe4d8f2ea3", "filename": "gcc/ChangeLog.tree-ssa", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog.tree-ssa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2FChangeLog.tree-ssa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.tree-ssa?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -3420,7 +3420,7 @@\n \n \t* tree-alias-common.c (find_func_aliases): Do not call\n \tintra_function_call for languages assuring no aliasing between\n-\targuments (by themselves) and and global memory.\n+\targuments (by themselves) and global memory.\n \n 2003-12-21  Jan Hubicka  <jh@suse.cz>\n \n@@ -7693,7 +7693,7 @@\n \t(finalize): Free allocations.\n \t(cfg_blocks_empty): New. Is cfg_blocks queue list.\n \t(cfg_blocks_add): New. Add a basic block to cfg_blocks list.\n-\t(cfg_blocks_pop): New. Get a a basic_block form the list.\n+\t(cfg_blocks_pop): New. Get a basic_block from the list.\n \n 2003-09-18  Richard Henderson  <rth@redhat.com>\n \n@@ -9565,7 +9565,7 @@\n \t(optimize_stmt): Don't abort if a statement makes more than one\n \tdefinition.\n \tCheck for MODIFY_EXPR statements directly, instead of relying on\n-\tthe the presence of a single definition.\n+\tthe presence of a single definition.\n \t* tree-ssa-pre.c (tree_perform_ssapre): Call dump_function_to_file\n \tinstead of dump_function.\n \t* tree-ssa.c (rewrite_into_ssa): Likewise.\n@@ -15291,7 +15291,7 @@\n \t* tree-ssa-dce (tree_ssa_eliminate_dead_code): Initialize prev to\n \tNULL_TREE.\n \tDon't close dump_file until end of function.\n-\tDump the the tree after DCE for -fdump-tree-dce.\n+\tDump the tree after DCE for -fdump-tree-dce.\n \n 2002-10-08  Richard Henderson  <rth@redhat.com>\n \t    Jason Merrill  <jason@redhat.com>"}, {"sha": "d429c69661e3b37e1755e887feac1557f819e70e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -1138,7 +1138,7 @@ expand_gimple_basic_block (basic_block bb, FILE * dump_file)\n \n   do_pending_stack_adjust ();\n \n-  /* Find the the block tail.  The last insn is the block is the insn\n+  /* Find the block tail.  The last insn in the block is the insn\n      before a barrier and/or table jump insn.  */\n   last = get_last_insn ();\n   if (BARRIER_P (last))"}, {"sha": "eff057e3fa48b0f7312337920237cbcf4cf6f2b2", "filename": "gcc/conflict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -208,7 +208,7 @@ conflict_graph_add (conflict_graph graph, int reg1, int reg2)\n   arc->smaller = smaller;\n   arc->larger = larger;\n \n-  /* Link the conflict into into two lists, one for each reg.  */\n+  /* Link the conflict into two lists, one for each reg.  */\n   arc->smaller_next = graph->neighbor_heads[smaller];\n   graph->neighbor_heads[smaller] = arc;\n   arc->larger_next = graph->neighbor_heads[larger];"}, {"sha": "28a0d83adb62fcb4d17f88b54be98ca1ac2dfa23", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -755,7 +755,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #define REGISTER_MOVE_COST(m, x, y) 2\n #endif\n \n-/* Determine whether the the entire c99 runtime\n+/* Determine whether the entire c99 runtime\n    is present in the runtime library.  */\n #ifndef TARGET_C99_FUNCTIONS\n #define TARGET_C99_FUNCTIONS 0"}, {"sha": "76661ba6d8b78d19341ed23935f4bff39ca9b965", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -4117,7 +4117,7 @@ static char ranges_section_label[2 * MAX_ARTIFICIAL_LABEL_BYTES];\n #endif\n \f\n /* We allow a language front-end to designate a function that is to be\n-   called to \"demangle\" any name before it it put into a DIE.  */\n+   called to \"demangle\" any name before it is put into a DIE.  */\n \n static const char *(*demangle_name_func) (const char *);\n "}, {"sha": "456a857259f012491dc48a2ff876489631697c8b", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -4130,7 +4130,7 @@ pre_edge_insert (struct edge_list *edge_list, struct expr **index_map)\n \t\t    if (! occr->deleted_p)\n \t\t      continue;\n \n-\t\t    /* Insert this expression on this edge if if it would\n+\t\t    /* Insert this expression on this edge if it would\n \t\t       reach the deleted occurrence in BB.  */\n \t\t    if (!TEST_BIT (inserted[e], j))\n \t\t      {\n@@ -5846,7 +5846,7 @@ find_loads (rtx x, rtx store_pattern, int after)\n \n /* Check if INSN kills the store pattern X (is aliased with it).\n    AFTER is true if we are checking the case when store X occurs\n-   after the insn.  Return true if it it does.  */\n+   after the insn.  Return true if it does.  */\n \n static bool\n store_killed_in_insn (rtx x, rtx x_regs, rtx insn, int after)"}, {"sha": "dd879fa55cbf1d53fd0072b66107462f705a1720", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -2218,8 +2218,7 @@ ggc_pch_write_object (struct ggc_pch_data *d ATTRIBUTE_UNUSED,\n       /* To speed small writes, we use a nulled-out array that's larger\n          than most padding requests as the source for our null bytes.  This\n          permits us to do the padding with fwrite() rather than fseek(), and\n-         limits the chance the the OS may try to flush any outstanding\n-         writes.  */\n+         limits the chance the OS may try to flush any outstanding writes.  */\n       if (padding <= sizeof(emptyBytes))\n         {\n           if (fwrite (emptyBytes, 1, padding, f) != padding)"}, {"sha": "f19c851fb74a163e596c00cecdc9bffa37e54d02", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -755,7 +755,7 @@ lower_try_finally_fallthru_label (struct leh_tf_state *tf)\n    alternative considered below.  For the nonce, we always choose the first\n    option.\n \n-   THIS_STATE may be null if if this is a try-cleanup, not a try-finally.  */\n+   THIS_STATE may be null if this is a try-cleanup, not a try-finally.  */\n \n static void\n honor_protect_cleanup_actions (struct leh_state *outer_state,"}, {"sha": "59d51c0e8a33efa2a81ff3cbc25cf68dff0ab3bd", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1176568bb51d0d953470763a715ec12dcbfea6/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=3f1176568bb51d0d953470763a715ec12dcbfea6", "patch": "@@ -181,7 +181,7 @@ static struct opt_stats_d opt_stats;\n    of the form SSA_NAME COND CONST we create a new vrp_element to record\n    how the condition affects the possible values SSA_NAME may have.\n \n-   Each record contains the condition tested (COND), and the the range of\n+   Each record contains the condition tested (COND), and the range of\n    values the variable may legitimately have if COND is true.  Note the\n    range of values may be a smaller range than COND specifies if we have\n    recorded other ranges for this variable.  Each record also contains the\n@@ -1398,7 +1398,7 @@ record_cond (tree cond, tree value)\n \n /* Build a new conditional using NEW_CODE, OP0 and OP1 and store\n    the new conditional into *p, then store a boolean_true_node\n-   into the the *(p + 1).  */\n+   into *(p + 1).  */\n    \n static void\n build_and_record_new_cond (enum tree_code new_code, tree op0, tree op1, tree *p)"}]}