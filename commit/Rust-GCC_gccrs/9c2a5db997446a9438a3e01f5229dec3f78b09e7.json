{"sha": "9c2a5db997446a9438a3e01f5229dec3f78b09e7", "node_id": "C_kwDOANBUbNoAKDljMmE1ZGI5OTc0NDZhOTQzOGEzZTAxZjUyMjlkZWMzZjc4YjA5ZTc", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-04-12T17:10:55Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-04-13T18:12:04Z"}, "message": "Ensure PHI equivalencies do not dominate the argument edge.\n\nWhen we create an equivalency between a PHI definition and an argument,\nensure the definition does not dominate the incoming argument edge.\n\n\tPR tree-optimization/108139\n\tPR tree-optimization/109462\n\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Remove\n\tequivalency check for PHI nodes.\n\t* gimple-range-fold.cc (fold_using_range::range_of_phi): Ensure def\n\tdoes not dominate single-arg equivalency edges.", "tree": {"sha": "9cc090d2104f2033d75fbcc21db9e3314a337e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cc090d2104f2033d75fbcc21db9e3314a337e89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c2a5db997446a9438a3e01f5229dec3f78b09e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c2a5db997446a9438a3e01f5229dec3f78b09e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c2a5db997446a9438a3e01f5229dec3f78b09e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c2a5db997446a9438a3e01f5229dec3f78b09e7/comments", "author": null, "committer": null, "parents": [{"sha": "52bb22bb5e1f951c73b5cd43b0b3a423f67e5e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52bb22bb5e1f951c73b5cd43b0b3a423f67e5e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52bb22bb5e1f951c73b5cd43b0b3a423f67e5e7a"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "2314478d55849d7ae973a4bc65e26edfe565ac28", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c2a5db997446a9438a3e01f5229dec3f78b09e7/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c2a5db997446a9438a3e01f5229dec3f78b09e7/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=9c2a5db997446a9438a3e01f5229dec3f78b09e7", "patch": "@@ -1220,7 +1220,7 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n       // See if any equivalences can refine it.\n       // PR 109462, like 108139 below, a one way equivalence introduced\n       // by a PHI node can also be through the definition side.  Disallow it.\n-      if (m_oracle && !is_a<gphi *> (SSA_NAME_DEF_STMT (name)))\n+      if (m_oracle)\n \t{\n \t  tree equiv_name;\n \t  relation_kind rel;\n@@ -1237,13 +1237,6 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \t      if (!m_gori.has_edge_range_p (equiv_name))\n \t\tcontinue;\n \n-\t      // PR 108139. It is hazardous to assume an equivalence with\n-\t      // a PHI is the same value.  The PHI may be an equivalence\n-\t      // via UNDEFINED arguments which is really a one way equivalence.\n-\t      // PHIDEF == name, but name may not be == PHIDEF.\n-\t      if (is_a<gphi *> (SSA_NAME_DEF_STMT (equiv_name)))\n-\t\tcontinue;\n-\n \t      // Check if the equiv definition dominates this block\n \t      if (equiv_bb == bb ||\n \t\t  (equiv_bb && !dominated_by_p (CDI_DOMINATORS, bb, equiv_bb)))"}, {"sha": "429734f954a7588917426120190ca1b5b7009a79", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c2a5db997446a9438a3e01f5229dec3f78b09e7/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c2a5db997446a9438a3e01f5229dec3f78b09e7/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=9c2a5db997446a9438a3e01f5229dec3f78b09e7", "patch": "@@ -795,9 +795,28 @@ fold_using_range::range_of_phi (vrange &r, gphi *phi, fur_source &src)\n     // If the PHI boils down to a single effective argument, look at it.\n     if (single_arg)\n       {\n-\t// Symbolic arguments are equivalences.\n+\t// Symbolic arguments can be equivalences.\n \tif (gimple_range_ssa_p (single_arg))\n-\t  src.register_relation (phi, VREL_EQ, phi_def, single_arg);\n+\t  {\n+\t    // Only allow the equivalence if the PHI definition does not\n+\t    // dominate any incoming edge for SINGLE_ARG.\n+\t    // See PR 108139 and 109462.\n+\t    basic_block bb = gimple_bb (phi);\n+\t    if (!dom_info_available_p (CDI_DOMINATORS))\n+\t      single_arg = NULL;\n+\t    else\n+\t      for (x = 0; x < gimple_phi_num_args (phi); x++)\n+\t\tif (gimple_phi_arg_def (phi, x) == single_arg\n+\t\t    && dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t\tgimple_phi_arg_edge (phi, x)->src,\n+\t\t\t\t\tbb))\n+\t\t  {\n+\t\t    single_arg = NULL;\n+\t\t    break;\n+\t\t  }\n+\t    if (single_arg)\n+\t      src.register_relation (phi, VREL_EQ, phi_def, single_arg);\n+\t  }\n \telse if (src.get_operand (arg_range, single_arg)\n \t\t && arg_range.singleton_p ())\n \t  {"}]}