{"sha": "cc825d987a56fc3bc62aaad9147358a18c0cf932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4MjVkOTg3YTU2ZmMzYmM2MmFhYWQ5MTQ3MzU4YTE4YzBjZjkzMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-01T01:14:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-01T01:14:46Z"}, "message": "Disable -mpreferred-stack-boundary options for Windows.\n\nFrom-SVN: r166120", "tree": {"sha": "5114e62d7ccd9ac86dd1b17c2532d80ce971832b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5114e62d7ccd9ac86dd1b17c2532d80ce971832b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc825d987a56fc3bc62aaad9147358a18c0cf932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc825d987a56fc3bc62aaad9147358a18c0cf932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc825d987a56fc3bc62aaad9147358a18c0cf932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc825d987a56fc3bc62aaad9147358a18c0cf932/comments", "author": null, "committer": null, "parents": [{"sha": "f81c97740380165364d4af23c706f010c74e2609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81c97740380165364d4af23c706f010c74e2609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81c97740380165364d4af23c706f010c74e2609"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "900173928da9abdab1519dfe7998a80ad576440d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc825d987a56fc3bc62aaad9147358a18c0cf932", "patch": "@@ -1,3 +1,12 @@\n+2010-10-31  Richard Henderson  <rth@redhat.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_automatic_stack_alignment): True for\n+\tx86 but not windows.\n+\t* g++.dg/torture/stackalign/stackalign.exp: Use it to protect\n+\tuse of the preferred-stack-boundary arguments.\n+\t* gcc.dg/torture/stackalign/stackalign.exp: Likewise.\n+\n 2010-10-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/46142"}, {"sha": "e68337d273d0161fd3e70a757a87595179568bf3", "filename": "gcc/testsuite/g++.dg/torture/stackalign/stackalign.exp", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstackalign.exp?ref=cc825d987a56fc3bc62aaad9147358a18c0cf932", "patch": "@@ -18,19 +18,15 @@\n # This harness is for tests that should be run at all optimisation levels.\n \n load_lib g++-dg.exp\n-\n-# Only run on targets which support automatic stack alignment.\n-if { ![check_effective_target_automatic_stack_alignment] } then {\n-    return\n-}\n-\n+dg-init\n set additional_flags \"\"\n-if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+\n+# If automatic stack alignment is supported, force it on.\n+if { [check_effective_target_automatic_stack_alignment] } then {\n     lappend additional_flags \"-mstackrealign\"\n     lappend additional_flags \"-mpreferred-stack-boundary=5\"\n }\n \n-dg-init\n gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.C]] $additional_flags\n if { [check_effective_target_fpic] } then {\n     lappend additional_flags \"-fpic\""}, {"sha": "83c623919d9da73edfe3ea0aac75df983c9d2121", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/stackalign.exp", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstackalign.exp?ref=cc825d987a56fc3bc62aaad9147358a18c0cf932", "patch": "@@ -19,15 +19,12 @@\n \n load_lib gcc-dg.exp\n \n-# Only run on targets which support automatic stack alignment.\n-if { ![check_effective_target_automatic_stack_alignment] } then {\n-    return\n-}\n-\n set additional_flags \"\"\n-if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+if { [check_effective_target_automatic_stack_alignment] } then {\n     lappend additional_flags \"-mstackrealign\"\n     lappend additional_flags \"-mpreferred-stack-boundary=5\"\n+}\n+if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n     lappend additional_flags \"-mno-mmx\"\n }\n \n@@ -40,7 +37,7 @@ if { [check_effective_target_fpic] } then {\n     gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $pic_additional_flags\n }\n \n-if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+if { [check_effective_target_automatic_stack_alignment] } then {\n     lappend additional_flags \"-mforce-drap\"\n     gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $additional_flags\n     if { [check_effective_target_fpic] } then {"}, {"sha": "87b234d69ab275f5013162b658efbac70c94ddef", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc825d987a56fc3bc62aaad9147358a18c0cf932/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=cc825d987a56fc3bc62aaad9147358a18c0cf932", "patch": "@@ -3551,8 +3551,15 @@ proc check_effective_target_4byte_wchar_t { } {\n # Return 1 if the target supports automatic stack alignment.\n \n proc check_effective_target_automatic_stack_alignment  { } {\n-    # Not \"stack alignment\" per se, but proper stack alignment of decls.\n-    return 1;\n+    # Ordinarily x86 supports automatic stack alignment ...\n+    if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+        if { [istarget *-*-mingw*] || [istarget *-*-cygwin*] } {\n+\t    # ... except Win64 SEH doesn't.  Succeed for Win32 though.\n+\t    return [check_effective_target_ilp32];\n+\t}\n+\treturn 1;\n+    }\n+    return 0;\n }\n \n # Return 1 if avx instructions can be compiled."}]}