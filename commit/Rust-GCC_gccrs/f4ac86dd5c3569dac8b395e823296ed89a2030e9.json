{"sha": "f4ac86dd5c3569dac8b395e823296ed89a2030e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhYzg2ZGQ1YzM1NjlkYWM4YjM5NWU4MjMyOTZlZDg5YTIwMzBlOQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-05T11:46:16Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-12-05T11:46:16Z"}, "message": "[multiple changes]\n\n2017-12-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* opt.ads (Expand_Nonbinary_Modular_Ops): New flag.\n\t* exp_ch4.adb (Expand_Nonbinary_Modular_Op): Use\n\tExpand_Nonbinary_Modular_Ops instead of Modify_Tree_For_C, so that\n\tother back-ends can also benefit from the front-end expansion. Remove\n\ttest for Modify_Tree_For_C in all callers to better share code.\n\t* gnat1drv.adb (Adjust_Global_Switches): Set\n\tExpand_Nonbinary_Modular_Ops when generating C code.\n\n2017-12-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Formal_Container_Loop): Ensure that the loop\n\tparameter becomes invisible after analyzing the loop, which has been\n\trewritten as a while-loop.\n\n2017-12-05  Doug Rupp  <rupp@adacore.com>\n\n\t* vxaddr2line.adb: Revise and enhance for new ports, remove dead ports,\n\tand update for 64bit ports.\n\nFrom-SVN: r255410", "tree": {"sha": "57d352202f49c7f2af29b144069b0623b04af894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57d352202f49c7f2af29b144069b0623b04af894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ac86dd5c3569dac8b395e823296ed89a2030e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ac86dd5c3569dac8b395e823296ed89a2030e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ac86dd5c3569dac8b395e823296ed89a2030e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ac86dd5c3569dac8b395e823296ed89a2030e9/comments", "author": null, "committer": null, "parents": [{"sha": "16d92641c44532b83fc9ff6009ada3a769a15731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d92641c44532b83fc9ff6009ada3a769a15731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d92641c44532b83fc9ff6009ada3a769a15731"}], "stats": {"total": 181, "additions": 94, "deletions": 87}, "files": [{"sha": "2da67a1af24726ed2ab6c4d9bc6d15dc2dd7051c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4ac86dd5c3569dac8b395e823296ed89a2030e9", "patch": "@@ -1,3 +1,24 @@\n+2017-12-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* opt.ads (Expand_Nonbinary_Modular_Ops): New flag.\n+\t* exp_ch4.adb (Expand_Nonbinary_Modular_Op): Use\n+\tExpand_Nonbinary_Modular_Ops instead of Modify_Tree_For_C, so that\n+\tother back-ends can also benefit from the front-end expansion. Remove\n+\ttest for Modify_Tree_For_C in all callers to better share code.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Set\n+\tExpand_Nonbinary_Modular_Ops when generating C code.\n+\n+2017-12-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Formal_Container_Loop): Ensure that the loop\n+\tparameter becomes invisible after analyzing the loop, which has been\n+\trewritten as a while-loop.\n+\n+2017-12-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* vxaddr2line.adb: Revise and enhance for new ports, remove dead ports,\n+\tand update for 64bit ports.\n+\n 2017-12-05  Bob Duff  <duff@adacore.com>\n \n \t* exp_ch6.adb (Build_In_Place_Formal): Search for the formal by suffix"}, {"sha": "aac0c5cced90d7c438362c46650fc6a7a9fbe791", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f4ac86dd5c3569dac8b395e823296ed89a2030e9", "patch": "@@ -4172,10 +4172,10 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_Nonbinary_Modular_Op\n \n    begin\n-      --  No action needed if we are not generating C code for a nonbinary\n-      --  modular operand.\n+      --  No action needed if front-end expansion is not required or if we\n+      --  have a binary modular operand.\n \n-      if not Modify_Tree_For_C\n+      if not Expand_Nonbinary_Modular_Ops\n         or else not Non_Binary_Modulus (Typ)\n       then\n          return;\n@@ -6899,12 +6899,7 @@ package body Exp_Ch4 is\n \n       Check_Float_Op_Overflow (N);\n \n-      --  When generating C code, convert nonbinary modular additions into code\n-      --  that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_Add;\n \n    ---------------------\n@@ -6930,12 +6925,7 @@ package body Exp_Ch4 is\n          Expand_Intrinsic_Call (N, Entity (N));\n       end if;\n \n-      --  When generating C code, convert nonbinary modular operators into code\n-      --  that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_And;\n \n    ------------------------\n@@ -7178,12 +7168,7 @@ package body Exp_Ch4 is\n \n       Check_Float_Op_Overflow (N);\n \n-      --  When generating C code, convert nonbinary modular divisions into code\n-      --  that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_Divide;\n \n    --------------------\n@@ -8687,12 +8672,7 @@ package body Exp_Ch4 is\n          Analyze_And_Resolve (N, Typ);\n       end if;\n \n-      --  When generating C code, convert nonbinary modular minus into code\n-      --  that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_Minus;\n \n    ---------------------\n@@ -9170,12 +9150,7 @@ package body Exp_Ch4 is\n \n       Check_Float_Op_Overflow (N);\n \n-      --  When generating C code, convert nonbinary modular multiplications\n-      --  into code that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_Multiply;\n \n    --------------------\n@@ -9487,12 +9462,7 @@ package body Exp_Ch4 is\n          Expand_Intrinsic_Call (N, Entity (N));\n       end if;\n \n-      --  When generating C code, convert nonbinary modular operators into code\n-      --  that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_Or;\n \n    ----------------------\n@@ -9926,12 +9896,7 @@ package body Exp_Ch4 is\n \n       Check_Float_Op_Overflow (N);\n \n-      --  When generating C code, convert nonbinary modular subtractions into\n-      --  code that relies on the front-end expansion of operator Mod.\n-\n-      if Modify_Tree_For_C then\n-         Expand_Nonbinary_Modular_Op (N);\n-      end if;\n+      Expand_Nonbinary_Modular_Op (N);\n    end Expand_N_Op_Subtract;\n \n    ---------------------\n@@ -9955,7 +9920,6 @@ package body Exp_Ch4 is\n \n       elsif Is_Intrinsic_Subprogram (Entity (N)) then\n          Expand_Intrinsic_Call (N, Entity (N));\n-\n       end if;\n    end Expand_N_Op_Xor;\n "}, {"sha": "4b2b5dc69d001c806aa28cba89d0eaa5f942228b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=f4ac86dd5c3569dac8b395e823296ed89a2030e9", "patch": "@@ -3135,6 +3135,7 @@ package body Exp_Ch5 is\n \n       Advance   : Node_Id;\n       Init_Decl : Node_Id;\n+      Init_Name : Entity_Id;\n       New_Loop  : Node_Id;\n \n    begin\n@@ -3169,7 +3170,8 @@ package body Exp_Ch5 is\n       --  the loop.\n \n       Analyze (Init_Decl);\n-      Set_Ekind (Defining_Identifier (Init_Decl), E_Loop_Parameter);\n+      Init_Name := Defining_Identifier (Init_Decl);\n+      Set_Ekind (Init_Name, E_Loop_Parameter);\n \n       --  The cursor was marked as a loop parameter to prevent user assignments\n       --  to it, however this renders the advancement step illegal as it is not\n@@ -3182,9 +3184,11 @@ package body Exp_Ch5 is\n       --  Because we have to analyze the initial declaration of the loop\n       --  parameter multiple times its scope is incorrectly set at this point\n       --  to the one surrounding the block statement - so set the scope\n-      --  manually to be the actual block statement.\n+      --  manually to be the actual block statement, and indicate that it is\n+      --  not visible after the block has been analyzed.\n \n-      Set_Scope (Defining_Identifier (Init_Decl), Entity (Identifier (N)));\n+      Set_Scope (Init_Name, Entity (Identifier (N)));\n+      Set_Is_Immediately_Visible (Init_Name, False);\n    end Expand_Formal_Container_Loop;\n \n    ------------------------------------------"}, {"sha": "18b09b23d33c8c0aa5bf0423df143d105343d616", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=f4ac86dd5c3569dac8b395e823296ed89a2030e9", "patch": "@@ -167,6 +167,7 @@ procedure Gnat1drv is\n          Modify_Tree_For_C := True;\n          Unnest_Subprogram_Mode := True;\n          Minimize_Expression_With_Actions := True;\n+         Expand_Nonbinary_Modular_Ops := True;\n \n          --  Set operating mode to Generate_Code to benefit from full front-end\n          --  expansion (e.g. generics)."}, {"sha": "b642b22ae56a607f8a17390e8eb1da8090708837", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f4ac86dd5c3569dac8b395e823296ed89a2030e9", "patch": "@@ -640,6 +640,10 @@ package Opt is\n    --  Set to True to store tracebacks in exception occurrences and enable\n    --  symbolic tracebacks (-Es).\n \n+   Expand_Nonbinary_Modular_Ops : Boolean := False;\n+   --  Set to True to convert nonbinary modular additions into code\n+   --  that relies on the front-end expansion of operator Mod.\n+\n    Extensions_Allowed : Boolean := False;\n    --  GNAT\n    --  Set to True by switch -gnatX if GNAT specific language extensions"}, {"sha": "7014b19be980aaba14a4b6c833f80f901bb52c1e", "filename": "gcc/ada/vxaddr2line.adb", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fvxaddr2line.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ac86dd5c3569dac8b395e823296ed89a2030e9/gcc%2Fada%2Fvxaddr2line.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxaddr2line.adb?ref=f4ac86dd5c3569dac8b395e823296ed89a2030e9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2014, AdaCore                     --\n+--                     Copyright (C) 2002-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -74,7 +74,7 @@ with GNAT.Regpat;               use GNAT.Regpat;\n \n procedure VxAddr2Line is\n \n-   package Unsigned_32_IO is new Modular_IO (Unsigned_32);\n+   package Unsigned_64_IO is new Modular_IO (Unsigned_64);\n    --  Instantiate Modular_IO to have Put\n \n    Ref_Symbol : constant String := \"adainit\";\n@@ -83,17 +83,20 @@ procedure VxAddr2Line is\n \n    --  All supported architectures\n    type Architecture is\n-     (DEC_ALPHA,\n+     (LINUX_AARCH64,\n+      LINUX_ARM,\n       LINUX_E500V2,\n       LINUX_I586,\n       LINUX_POWERPC,\n+      LINUX_POWERPC64,\n+      LINUX_X86_64,\n+      WINDOWS_AARCH64,\n+      WINDOWS_ARM,\n       WINDOWS_E500V2,\n       WINDOWS_I586,\n-      WINDOWS_M68K,\n       WINDOWS_POWERPC,\n-      SOLARIS_E500V2,\n-      SOLARIS_I586,\n-      SOLARIS_POWERPC);\n+      WINDOWS_POWERPC64,\n+      WINDOWS_X86_64);\n \n    type Arch_Record is record\n       Addr2line_Binary : String_Access;\n@@ -110,7 +113,7 @@ procedure VxAddr2Line is\n       --  which will avoid computational overflows. Typically only useful when\n       --  64bit addresses are provided.\n \n-      Bt_Offset_From_Call : Unsigned_32;\n+      Bt_Offset_From_Call : Unsigned_64;\n       --  Offset from a backtrace address to the address of the corresponding\n       --  call instruction. This should always be 0, except on platforms where\n       --  the backtrace addresses actually correspond to return and not call\n@@ -119,11 +122,16 @@ procedure VxAddr2Line is\n \n    --  Configuration for each of the architectures\n    Arch_List : array (Architecture'Range) of Arch_Record :=\n-     (DEC_ALPHA =>\n+     (LINUX_AARCH64 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 8,\n-         Bt_Offset_From_Call => 0),\n+         Addr_Digits_To_Skip => 0,\n+         Bt_Offset_From_Call => -2),\n+      LINUX_ARM =>\n+        (Addr2line_Binary    => null,\n+         Nm_Binary           => null,\n+         Addr_Digits_To_Skip => 0,\n+         Bt_Offset_From_Call => -2),\n       LINUX_E500V2 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n@@ -139,21 +147,26 @@ procedure VxAddr2Line is\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n          Bt_Offset_From_Call => -4),\n-      SOLARIS_E500V2 =>\n+      LINUX_POWERPC64 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n          Bt_Offset_From_Call => -4),\n-      SOLARIS_I586 =>\n+      LINUX_X86_64 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n          Bt_Offset_From_Call => -2),\n-      SOLARIS_POWERPC =>\n+      WINDOWS_AARCH64 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n+         Bt_Offset_From_Call => -2),\n+      WINDOWS_ARM =>\n+        (Addr2line_Binary    => null,\n+         Nm_Binary           => null,\n+         Addr_Digits_To_Skip => 0,\n+         Bt_Offset_From_Call => -2),\n       WINDOWS_E500V2 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n@@ -164,16 +177,21 @@ procedure VxAddr2Line is\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n          Bt_Offset_From_Call => -2),\n-      WINDOWS_M68K =>\n+      WINDOWS_POWERPC =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n          Bt_Offset_From_Call => -4),\n-      WINDOWS_POWERPC =>\n+      WINDOWS_POWERPC64 =>\n+        (Addr2line_Binary    => null,\n+         Nm_Binary           => null,\n+         Addr_Digits_To_Skip => 0,\n+         Bt_Offset_From_Call => -4),\n+      WINDOWS_X86_64 =>\n         (Addr2line_Binary    => null,\n          Nm_Binary           => null,\n          Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4)\n+         Bt_Offset_From_Call => -2)\n      );\n \n    --  Current architecture\n@@ -193,14 +211,14 @@ procedure VxAddr2Line is\n    procedure Usage;\n    --  Displays the short help message and then terminates the program\n \n-   function Get_Reference_Offset return Unsigned_32;\n+   function Get_Reference_Offset return Unsigned_64;\n    --  Computes the static offset of the reference symbol by calling nm\n \n-   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_32;\n+   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_64;\n    --  Threats the argument number Arg as a C-style hexadecimal literal\n    --  and returns its integer value\n \n-   function Hex_Image (Value : Unsigned_32) return String_Access;\n+   function Hex_Image (Value : Unsigned_64) return String_Access;\n    --  Returns access to a string that contains hexadecimal image of Value\n \n    --  Separate functions that provide build-time customization:\n@@ -228,16 +246,11 @@ procedure VxAddr2Line is\n          return;\n       end if;\n \n-      if Proc = \"alpha\" then\n-         Cur_Arch := DEC_ALPHA;\n+      --  Let's detect a Linux or Windows host.\n+      if Directory_Separator = '/' then\n+         Cur_Arch := Architecture'Value (\"linux_\" & Proc);\n       else\n-         --  Let's detect the host.\n-         --  ??? A naive implementation that can't distinguish between Unixes\n-         if Directory_Separator = '/' then\n-            Cur_Arch := Architecture'Value (\"solaris_\" & Proc);\n-         else\n-            Cur_Arch := Architecture'Value (\"windows_\" & Proc);\n-         end if;\n+         Cur_Arch := Architecture'Value (\"windows_\" & Proc);\n       end if;\n \n       if Arch_List (Cur_Arch).Addr2line_Binary = null then\n@@ -271,7 +284,7 @@ procedure VxAddr2Line is\n    -- Get_Reference_Offset --\n    --------------------------\n \n-   function Get_Reference_Offset return Unsigned_32 is\n+   function Get_Reference_Offset return Unsigned_64 is\n       Nm_Cmd  : constant String_Access :=\n                   Locate_Exec_On_Path (Arch_List (Cur_Arch).Nm_Binary.all);\n \n@@ -306,11 +319,11 @@ procedure VxAddr2Line is\n       declare\n          Match_String : constant String := Expect_Out_Match (Pd);\n          Matches      : Match_Array (0 .. 1);\n-         Value        : Unsigned_32;\n+         Value        : Unsigned_64;\n \n       begin\n          Match (Reference, Match_String, Matches);\n-         Value := Unsigned_32'Value\n+         Value := Unsigned_64'Value\n            (\"16#\"\n             & Match_String (Matches (1).First .. Matches (1).Last) & \"#\");\n \n@@ -346,7 +359,7 @@ procedure VxAddr2Line is\n    -- Get_Value_From_Hex_Arg --\n    ----------------------------\n \n-   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_32 is\n+   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_64 is\n       Cur_Arg : constant String := Argument (Arg);\n       Offset  : Natural;\n \n@@ -365,7 +378,7 @@ procedure VxAddr2Line is\n \n       --  Convert to value\n \n-      return Unsigned_32'Value\n+      return Unsigned_64'Value\n         (\"16#\" & Cur_Arg (Offset .. Cur_Arg'Last) & \"#\");\n \n    exception\n@@ -379,12 +392,12 @@ procedure VxAddr2Line is\n    -- Hex_Image --\n    ---------------\n \n-   function Hex_Image (Value : Unsigned_32) return String_Access is\n+   function Hex_Image (Value : Unsigned_64) return String_Access is\n       Result    : String (1 .. 20);\n       Start_Pos : Natural;\n \n    begin\n-      Unsigned_32_IO.Put (Result, Value, 16);\n+      Unsigned_64_IO.Put (Result, Value, 16);\n       Start_Pos := Index (Result, \"16#\") + 3;\n       return new String'(Result (Start_Pos .. Result'Last - 1));\n    end Hex_Image;\n@@ -402,7 +415,7 @@ procedure VxAddr2Line is\n       OS_Exit (1);\n    end Usage;\n \n-   Ref_Static_Offset, Ref_Runtime_Address, Bt_Address : Unsigned_32;\n+   Ref_Static_Offset, Ref_Runtime_Address, Bt_Address : Unsigned_64;\n \n    Addr2line_Cmd : String_Access;\n "}]}