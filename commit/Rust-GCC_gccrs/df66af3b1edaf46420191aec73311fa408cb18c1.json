{"sha": "df66af3b1edaf46420191aec73311fa408cb18c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY2NmFmM2IxZWRhZjQ2NDIwMTkxYWVjNzMzMTFmYTQwOGNiMThjMQ==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2017-09-04T15:48:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-04T15:48:47Z"}, "message": "PR libstdc++/79162 implement LWG 2946 and LWG 2758\n\n2017-09-04  Daniel Kruegler  <daniel.kruegler@gmail.com>\n\n\tPR libstdc++/79162\n\tImplement LWG 2946, LWG 2758's resolution missed further corrections\n\t* include/bits/basic_string.h (basic_string::compare): Add missing\n\trequired noexcept specifications.\n\t(basic_string): Introduce internal _S_to_string_view and __sv_wrapper\n\tfor implicit string_view conversion.\n\t(basic_string::basic_string): Fix explicit string_view conversion by\n\timplicit conversion using _S_to_string_view and __sv_wrapper.\n\t(basic_string): Introduce internal basic_string(__sv_wrapper, Alloc)\n\tconstructor.\n\t(basic_string): Fix operator=(T) template by operator=(const T&)\n\ttemplate for uncopyable types (PR 79162).\n\t(basic_string::operator+=, basic_string::append, basic_string::assign)\n\t(basic_string::insert, basic_string::replace, basic_string::find)\n\t(basic_string::rfind, basic_string::find_first_of)\n\t(basic_string::find_last_of, basic_string::find_first_not_of)\n\t(basic_string::find_last_not_of, basic_string::compare): Replace\n\t__sv_type argument by template const T& (LWG 2946) and correct\n\tdocumentation describing __sv_type argument.\n\t(basic_string::find, basic_string::rfind, basic_string::find_first_of)\n\t(basic_string::find_last_of, basic_string::find_first_not_of)\n\t(basic_string::find_last_not_of, basic_string::compare): Replace\n\tunconditional noexcept specification by conditional noexcept\n\tspecification to partially balance the removal of noexcept by LWG 2946.\n\t* testsuite/21_strings/basic_string/79162.cc: New.\n\t* testsuite/21_strings/basic_string/lwg2946.cc: New.\n\nFrom-SVN: r251664", "tree": {"sha": "f9e27687bc1d62ee185bcfacc0f8b7c21f0a90fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9e27687bc1d62ee185bcfacc0f8b7c21f0a90fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df66af3b1edaf46420191aec73311fa408cb18c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df66af3b1edaf46420191aec73311fa408cb18c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df66af3b1edaf46420191aec73311fa408cb18c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df66af3b1edaf46420191aec73311fa408cb18c1/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9afacf39bb97e46cb0377cb500ef23ec66971be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9afacf39bb97e46cb0377cb500ef23ec66971be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9afacf39bb97e46cb0377cb500ef23ec66971be6"}], "stats": {"total": 654, "additions": 473, "deletions": 181}, "files": [{"sha": "c79888c6be5e60064c7c4fb819fd2194eca3a9f8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=df66af3b1edaf46420191aec73311fa408cb18c1", "patch": "@@ -1,3 +1,32 @@\n+2017-09-04  Daniel Kruegler  <daniel.kruegler@gmail.com>\n+\n+\tPR libstdc++/79162\n+\tImplement LWG 2946, LWG 2758's resolution missed further corrections\n+\t* include/bits/basic_string.h (basic_string::compare): Add missing\n+\trequired noexcept specifications.\n+\t(basic_string): Introduce internal _S_to_string_view and __sv_wrapper\n+\tfor implicit string_view conversion.\n+\t(basic_string::basic_string): Fix explicit string_view conversion by\n+\timplicit conversion using _S_to_string_view and __sv_wrapper.\n+\t(basic_string): Introduce internal basic_string(__sv_wrapper, Alloc)\n+\tconstructor.\n+\t(basic_string): Fix operator=(T) template by operator=(const T&)\n+\ttemplate for uncopyable types (PR 79162).\n+\t(basic_string::operator+=, basic_string::append, basic_string::assign)\n+\t(basic_string::insert, basic_string::replace, basic_string::find)\n+\t(basic_string::rfind, basic_string::find_first_of)\n+\t(basic_string::find_last_of, basic_string::find_first_not_of)\n+\t(basic_string::find_last_not_of, basic_string::compare): Replace\n+\t__sv_type argument by template const T& (LWG 2946) and correct\n+\tdocumentation describing __sv_type argument.\n+\t(basic_string::find, basic_string::rfind, basic_string::find_first_of)\n+\t(basic_string::find_last_of, basic_string::find_first_not_of)\n+\t(basic_string::find_last_not_of, basic_string::compare): Replace\n+\tunconditional noexcept specification by conditional noexcept\n+\tspecification to partially balance the removal of noexcept by LWG 2946.\n+\t* testsuite/21_strings/basic_string/79162.cc: New.\n+\t* testsuite/21_strings/basic_string/lwg2946.cc: New.\n+\n 2017-08-31  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/82039"}, {"sha": "0ef139b2c2b19ceca5dfabf3ca1ab00628853ca4", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 366, "deletions": 181, "changes": 547, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=df66af3b1edaf46420191aec73311fa408cb18c1", "patch": "@@ -117,6 +117,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  __and_<is_convertible<const _Tp&, __sv_type>,\n \t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\n \t  _Res>;\n+\n+      // Allows an implicit conversion to __sv_type.\n+      static __sv_type\n+      _S_to_string_view(__sv_type __svt) noexcept\n+      { return __svt; }\n+\n+      // Wraps a string_view by explicit conversion and thus\n+      // allows to add an internal constructor that does not\n+      // participate in overload resolution when a string_view\n+      // is provided.\n+      struct __sv_wrapper\n+      {\n+\texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\n+\t__sv_type _M_sv;\n+      };\n #endif\n \n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n@@ -593,24 +608,35 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Construct string from a substring of a string_view.\n-       *  @param  __t   Source string view.\n+       *  @param  __t   Source object convertible to string view.\n        *  @param  __pos The index of the first character to copy from __t.\n        *  @param  __n   The number of characters to copy from __t.\n        *  @param  __a   Allocator to use.\n        */\n       template<typename _Tp, typename = _If_sv<_Tp, void>>\n \tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n \t\t     const _Alloc& __a = _Alloc())\n-\t: basic_string(__sv_type(__t).substr(__pos, __n), __a) { }\n+\t: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }\n \n       /**\n        *  @brief  Construct string from a string_view.\n-       *  @param  __sv  Source string view.\n+       *  @param  __t  Source object convertible to string view.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n+      template<typename _Tp, typename = _If_sv<_Tp, void>>\n+\texplicit\n+\tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n+\t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }\n+\n+      /**\n+       *  @brief  Only internally used: Construct string from a string view\n+       *          wrapper.\n+       *  @param  __svw  string view wrapper.\n+       *  @param  __a  Allocator to use.\n+       */\n       explicit\n-      basic_string(__sv_type __sv, const _Alloc& __a = _Alloc())\n-      : basic_string(__sv.data(), __sv.size(), __a) { }\n+      basic_string(__sv_wrapper __svw, const _Alloc& __a)\n+      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n #endif // C++17\n \n       /**\n@@ -756,19 +782,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Set value to string constructed from a string_view.\n-       *  @param  __sv  A string_view.\n+       *  @param  __svt  An object convertible to string_view.\n        */\n-      template<typename _Tp>\n-\t_If_sv<_Tp, basic_string&>\n-\toperator=(_Tp __sv)\n-\t{ return this->assign(__sv); }\n+     template<typename _Tp>\n+       _If_sv<_Tp, basic_string&>\n+       operator=(const _Tp& __svt)\n+       { return this->assign(__svt); }\n \n       /**\n        *  @brief  Convert to a string_view.\n        *  @return A string_view.\n        */\n       operator __sv_type() const noexcept\n-      {\treturn __sv_type(data(), size()); }\n+      { return __sv_type(data(), size()); }\n #endif // C++17\n \n       // Iterators:\n@@ -1157,12 +1183,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Append a string_view.\n-       *  @param __sv  The string_view to be appended.\n+       *  @param __svt  An object convertible to string_view to be appended.\n        *  @return  Reference to this string.\n        */\n-      basic_string&\n-      operator+=(__sv_type __sv)\n-      {\treturn this->append(__sv); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\toperator+=(const _Tp& __svt)\n+\t{ return this->append(__svt); }\n #endif // C++17\n \n       /**\n@@ -1265,22 +1292,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Append a string_view.\n-       *  @param __sv  The string_view to be appended.\n+       *  @param __svt  An object convertible to string_view to be appended.\n        *  @return  Reference to this string.\n        */\n-      basic_string&\n-      append(__sv_type __sv)\n-      { return this->append(__sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+        _If_sv<_Tp, basic_string&>\n+        append(const _Tp& __svt)\n+        {\n+          __sv_type __sv = __svt;\n+          return this->append(__sv.data(), __sv.size());\n+        }\n \n       /**\n        *  @brief  Append a range of characters from a string_view.\n-       *  @param __sv  The string_view to be appended from.\n+       *  @param __svt  An object convertible to string_view to be appended from.\n        *  @param __pos The position in the string_view to append from.\n        *  @param __n   The number of characters to append from the string_view.\n        *  @return  Reference to this string.\n        */\n-      template <typename _Tp>\n-\t_If_sv<_Tp, basic_string&>\n+      template<typename _Tp>\n+        _If_sv<_Tp, basic_string&>\n \tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n@@ -1433,21 +1464,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Set value from a string_view.\n-       *  @param __sv  The source string_view.\n+       *  @param __svt  The source object convertible to string_view.\n        *  @return  Reference to this string.\n        */\n-      basic_string&\n-      assign(__sv_type __sv)\n-      {\treturn this->assign(__sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tassign(const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->assign(__sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Set value from a range of characters in a string_view.\n-       *  @param __sv  The source string_view.\n+       *  @param __svt  The source object convertible to string_view.\n        *  @param __pos  The position in the string_view to assign from.\n        *  @param __n  The number of characters to assign.\n        *  @return  Reference to this string.\n        */\n-      template <typename _Tp>\n+      template<typename _Tp>\n \t_If_sv<_Tp, basic_string&>\n \tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n@@ -1692,23 +1727,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Insert a string_view.\n        *  @param __pos  Iterator referencing position in string to insert at.\n-       *  @param __sv   The string_view to insert.\n+       *  @param __svt  The object convertible to string_view to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string&\n-      insert(size_type __pos, __sv_type __sv)\n-      {\treturn this->insert(__pos, __sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tinsert(size_type __pos, const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->insert(__pos, __sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Insert a string_view.\n        *  @param __pos  Iterator referencing position in string to insert at.\n-       *  @param __sv   The string_view to insert from.\n+       *  @param __svt  The object convertible to string_view to insert from.\n        *  @param __pos  Iterator referencing position in string_view to insert\n        *  from.\n        *  @param __n    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      template <typename _Tp>\n+      template<typename _Tp>\n \t_If_sv<_Tp, basic_string&>\n \tinsert(size_type __pos1, const _Tp& __svt,\n \t       size_type __pos2, size_type __n = npos)\n@@ -2120,23 +2159,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Replace range of characters with string_view.\n        *  @param __pos  The position to replace at.\n        *  @param __n    The number of characters to replace.\n-       *  @param __sv  The string_view to insert.\n+       *  @param __svt  The object convertible to string_view to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string&\n-      replace(size_type __pos, size_type __n, __sv_type __sv)\n-      {\treturn this->replace(__pos, __n, __sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(size_type __pos, size_type __n, const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__pos, __n, __sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Replace range of characters with string_view.\n        *  @param __pos1  The position to replace at.\n        *  @param __n1    The number of characters to replace.\n-       *  @param __sv    The string_view to insert from.\n+       *  @param __svt   The object convertible to string_view to insert from.\n        *  @param __pos2  The position in the string_view to insert from.\n        *  @param __n2    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      template <typename _Tp>\n+      template<typename _Tp>\n \t_If_sv<_Tp, basic_string&>\n \treplace(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos)\n@@ -2153,12 +2196,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n           to replace at.\n        *  @param __i2    An iterator referencing the end position\n           for the replace.\n-       *  @param __sv    The string_view to insert from.\n+       *  @param __svt   The object convertible to string_view to insert from.\n        *  @return  Reference to this string.\n       */\n-      basic_string&\n-      replace(const_iterator __i1, const_iterator __i2, __sv_type __sv)\n-      {\treturn this->replace(__i1 - begin(), __i2 - __i1, __sv); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__i1 - begin(), __i2 - __i1, __sv);\n+\t}\n #endif // C++17\n \n     private:\n@@ -2288,13 +2335,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find position of a string_view.\n-       *  @param __sv  The string_view to locate.\n+       *  @param __svt  The object convertible to string_view to locate.\n        *  @param __pos  Index of character to search from (default 0).\n        *  @return  Index of start of first occurrence.\n       */\n-      size_type\n-      find(__sv_type __sv, size_type __pos = 0) const noexcept\n-      {\treturn this->find(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind(const _Tp& __svt, size_type __pos = 0) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -2345,13 +2397,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find last position of a string_view.\n-       *  @param __sv   The string_view to locate.\n+       *  @param __svt  The object convertible to string_view to locate.\n        *  @param __pos  Index of character to search back from (default end).\n        *  @return  Index of start of last occurrence.\n       */\n-      size_type\n-      rfind(__sv_type __sv, size_type __pos = npos) const noexcept\n-      {\treturn this->rfind(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\trfind(const _Tp& __svt, size_type __pos = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->rfind(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -2419,13 +2476,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find position of a character of a string_view.\n-       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to locate.\n        *  @param __pos  Index of character to search from (default 0).\n        *  @return  Index of first occurrence.\n       */\n-      size_type\n-      find_first_of(__sv_type __sv, size_type __pos = 0) const noexcept\n-      {\treturn this->find_first_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_first_of(const _Tp& __svt, size_type __pos = 0) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_first_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -2497,13 +2560,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find last position of a character of string.\n-       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to locate.\n        *  @param __pos  Index of character to search back from (default end).\n        *  @return  Index of last occurrence.\n       */\n-      size_type\n-      find_last_of(__sv_type __sv, size_type __pos = npos) const noexcept\n-      {\treturn this->find_last_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_last_of(const _Tp& __svt, size_type __pos = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_last_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -2574,13 +2643,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find position of a character not in a string_view.\n-       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __svt  A object convertible to string_view containing\n+       *                characters to avoid.\n        *  @param __pos  Index of character to search from (default 0).\n        *  @return  Index of first occurrence.\n        */\n-      size_type\n-      find_first_not_of(__sv_type __sv, size_type __pos = 0) const noexcept\n-      {\treturn this->find_first_not_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_first_not_of(const _Tp& __svt, size_type __pos = 0) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_first_not_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -2650,13 +2725,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find last position of a character not in a string_view.\n-       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to avoid.\n        *  @param __pos  Index of character to search back from (default end).\n        *  @return  Index of last occurrence.\n        */\n-      size_type\n-      find_last_not_of(__sv_type __sv, size_type __pos = npos) const noexcept\n-      {\treturn this->find_last_not_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_last_not_of(const _Tp& __svt, size_type __pos = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_last_not_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -2754,46 +2835,57 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Compare to a string_view.\n-       *  @param __sv  A string_view to compare against.\n+       *  @param __svt An object convertible to string_view to compare against.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      int\n-      compare(__sv_type __sv) const\n-      {\n-\tconst size_type __size = this->size();\n-\tconst size_type __osize = __sv.size();\n-\tconst size_type __len = std::min(__size, __osize);\n-\n-\tint __r = traits_type::compare(_M_data(), __sv.data(), __len);\n-\tif (!__r)\n-\t  __r = _S_compare(__size, __osize);\n-\treturn __r;\n-      }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, int>\n+\tcompare(const _Tp& __svt) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  const size_type __size = this->size();\n+\t  const size_type __osize = __sv.size();\n+\t  const size_type __len = std::min(__size, __osize);\n+\n+\t  int __r = traits_type::compare(_M_data(), __sv.data(), __len);\n+\t  if (!__r)\n+\t    __r = _S_compare(__size, __osize);\n+\t  return __r;\n+\t}\n \n       /**\n        *  @brief  Compare to a string_view.\n        *  @param __pos  A position in the string to start comparing from.\n        *  @param __n  The number of characters to compare.\n-       *  @param __sv   A string_view to compare against.\n+       *  @param __svt  An object convertible to string_view to compare\n+       *                against.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      int\n-      compare(size_type __pos, size_type __n, __sv_type __sv) const\n-      { return __sv_type(*this).substr(__pos, __n).compare(__sv); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, int>\n+\tcompare(size_type __pos, size_type __n, const _Tp& __svt) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return __sv_type(*this).substr(__pos, __n).compare(__sv);\n+\t}\n \n       /**\n        *  @brief  Compare to a string_view.\n        *  @param __pos1  A position in the string to start comparing from.\n        *  @param __n1  The number of characters to compare.\n-       *  @param __sv   A string_view to compare against.\n+       *  @param __svt  An object convertible to string_view to compare\n+       *                against.\n        *  @param __pos2  A position in the string_view to start comparing from.\n        *  @param __n2  The number of characters to compare.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      template <typename _Tp>\n+      template<typename _Tp>\n \t_If_sv<_Tp, int>\n \tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n \t{\n \t  __sv_type __sv = __svt;\n \t  return __sv_type(*this)\n@@ -3348,6 +3440,21 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \t  __and_<is_convertible<const _Tp&, __sv_type>,\n \t\t __not_<is_convertible<const _Tp&, const _CharT*>>>::value,\n \t  _Res>;\n+\n+      // Allows an implicit conversion to __sv_type.\n+      static __sv_type\n+      _S_to_string_view(__sv_type __svt) noexcept\n+      { return __svt; }\n+\n+      // Wraps a string_view by explicit conversion and thus\n+      // allows to add an internal constructor that does not\n+      // participate in overload resolution when a string_view\n+      // is provided.\n+      struct __sv_wrapper\n+      {\n+\texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\n+\t__sv_type _M_sv;\n+      };\n #endif\n \n     public:\n@@ -3474,24 +3581,35 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Construct string from a substring of a string_view.\n-       *  @param  __t   Source string view.\n+       *  @param  __t   Source object convertible to string view.\n        *  @param  __pos The index of the first character to copy from __t.\n        *  @param  __n   The number of characters to copy from __t.\n        *  @param  __a   Allocator to use.\n        */\n       template<typename _Tp, typename = _If_sv<_Tp, void>>\n \tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n \t\t     const _Alloc& __a = _Alloc())\n-\t: basic_string(__sv_type(__t).substr(__pos, __n), __a) { }\n+\t: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }\n \n       /**\n        *  @brief  Construct string from a string_view.\n-       *  @param  __sv  Source string view.\n+       *  @param  __t  Source object convertible to string view.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n+      template<typename _Tp, typename = _If_sv<_Tp, void>>\n+\texplicit\n+\tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n+\t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }\n+\n+      /**\n+       *  @brief  Only internally used: Construct string from a string view\n+       *          wrapper.\n+       *  @param  __svw  string view wrapper.\n+       *  @param  __a  Allocator to use.\n+       */\n       explicit\n-      basic_string(__sv_type __sv, const _Alloc& __a = _Alloc())\n-      : basic_string(__sv.data(), __sv.size(), __a) { }\n+      basic_string(__sv_wrapper __svw, const _Alloc& __a)\n+      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n #endif // C++17\n \n       /**\n@@ -3562,12 +3680,12 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Set value to string constructed from a string_view.\n-       *  @param  __sv  A string_view.\n+       *  @param  __svt An object convertible to  string_view.\n        */\n       template<typename _Tp>\n \t_If_sv<_Tp, basic_string&>\n-\toperator=(_Tp __sv)\n-\t{ return this->assign(__sv); }\n+\toperator=(const _Tp& __svt)\n+\t{ return this->assign(__svt); }\n \n       /**\n        *  @brief  Convert to a string_view.\n@@ -3984,12 +4102,13 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Append a string_view.\n-       *  @param __sv  The string_view to be appended.\n+       *  @param __svt The object convertible to string_view to be appended.\n        *  @return  Reference to this string.\n        */\n-      basic_string&\n-      operator+=(__sv_type __sv)\n-      { return this->append(__sv); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\toperator+=(const _Tp& __svt)\n+\t{ return this->append(__svt); }\n #endif // C++17\n \n       /**\n@@ -4075,22 +4194,27 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Append a string_view.\n-       *  @param __sv  The string_view to be appended.\n+       *  @param __svt The object convertible to string_view to be appended.\n        *  @return  Reference to this string.\n        */\n-      basic_string&\n-      append(__sv_type __sv)\n-      { return this->append(__sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tappend(const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->append(__sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Append a range of characters from a string_view.\n-       *  @param __sv  The string_view to be appended from.\n+       *  @param __svt The object convertible to string_view to be appended\n+       *               from.\n        *  @param __pos The position in the string_view to append from.\n        *  @param __n   The number of characters to append from the string_view.\n        *  @return  Reference to this string.\n        */\n-      template <typename _Tp>\n-\t_If_sv<_Tp, basic_string&>\n+      template<typename _Tp>\n+        _If_sv<_Tp, basic_string&>\n \tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n@@ -4228,23 +4352,27 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Set value from a string_view.\n-       *  @param __sv  The source string_view.\n+       *  @param __svt The source object convertible to string_view.\n        *  @return  Reference to this string.\n        */\n-      basic_string&\n-      assign(__sv_type __sv)\n-      { return this->assign(__sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tassign(const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->assign(__sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Set value from a range of characters in a string_view.\n-       *  @param __sv  The source string_view.\n+       *  @param __svt  The source object convertible to string_view.\n        *  @param __pos  The position in the string_view to assign from.\n        *  @param __n  The number of characters to assign.\n        *  @return  Reference to this string.\n        */\n-      template <typename _Tp>\n-\t_If_sv<_Tp, basic_string&>\n-\tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n+      template<typename _Tp>\n+        _If_sv<_Tp, basic_string&>\n+        assign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n \t  return assign(__sv.data()\n@@ -4432,25 +4560,29 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       /**\n        *  @brief  Insert a string_view.\n        *  @param __pos  Iterator referencing position in string to insert at.\n-       *  @param __sv   The string_view to insert.\n+       *  @param __svt  The object convertible to string_view to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string&\n-      insert(size_type __pos, __sv_type __sv)\n-      { return this->insert(__pos, __sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\tinsert(size_type __pos, const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->insert(__pos, __sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Insert a string_view.\n        *  @param __pos  Iterator referencing position in string to insert at.\n-       *  @param __sv   The string_view to insert from.\n+       *  @param __svt  The object convertible to string_view to insert from.\n        *  @param __pos  Iterator referencing position in string_view to insert\n        *  from.\n        *  @param __n    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      template <typename _Tp>\n-\t_If_sv<_Tp, basic_string&>\n-\tinsert(size_type __pos1, const _Tp& __svt,\n+      template<typename _Tp>\n+        _If_sv<_Tp, basic_string&>\n+        insert(size_type __pos1, const _Tp& __svt,\n \t       size_type __pos2, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n@@ -4793,7 +4925,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n \t\t\t     __k1.base(), __k2 - __k1);\n       }\n-      \n+\n #if __cplusplus >= 201103L\n       /**\n        *  @brief  Replace range of characters with initializer_list.\n@@ -4819,31 +4951,35 @@ _GLIBCXX_END_NAMESPACE_CXX11\n        *  @brief  Replace range of characters with string_view.\n        *  @param __pos  The position to replace at.\n        *  @param __n    The number of characters to replace.\n-       *  @param __sv  The string_view to insert.\n+       *  @param __svt  The object convertible to string_view to insert.\n        *  @return  Reference to this string.\n       */\n-      basic_string&\n-      replace(size_type __pos, size_type __n, __sv_type __sv)\n-      { return this->replace(__pos, __n, __sv.data(), __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(size_type __pos, size_type __n, const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__pos, __n, __sv.data(), __sv.size());\n+\t}\n \n       /**\n        *  @brief  Replace range of characters with string_view.\n        *  @param __pos1  The position to replace at.\n        *  @param __n1    The number of characters to replace.\n-       *  @param __sv    The string_view to insert from.\n+       *  @param __svt   The object convertible to string_view to insert from.\n        *  @param __pos2  The position in the string_view to insert from.\n        *  @param __n2    The number of characters to insert.\n        *  @return  Reference to this string.\n       */\n-      template <typename _Tp>\n-\t_If_sv<_Tp, basic_string&>\n-\treplace(size_type __pos1, size_type __n1, const _Tp& __svt,\n+      template<typename _Tp>\n+        _If_sv<_Tp, basic_string&>\n+        replace(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos)\n \t{\n \t  __sv_type __sv = __svt;\n-\t  return this->replace(__pos1, __n1, __sv.data()\n-\t\t\t       + __sv._M_check(__pos2, \"basic_string::replace\"),\n-\t\t\t       __sv._M_limit(__pos2, __n2));\n+\t  return this->replace(__pos1, __n1,\n+\t      __sv.data() + __sv._M_check(__pos2, \"basic_string::replace\"),\n+\t      __sv._M_limit(__pos2, __n2));\n \t}\n \n       /**\n@@ -4852,12 +4988,16 @@ _GLIBCXX_END_NAMESPACE_CXX11\n           to replace at.\n        *  @param __i2    An iterator referencing the end position\n           for the replace.\n-       *  @param __sv    The string_view to insert from.\n+       *  @param __svt   The object convertible to string_view to insert from.\n        *  @return  Reference to this string.\n       */\n-      basic_string&\n-      replace(const_iterator __i1, const_iterator __i2, __sv_type __sv)\n-      { return this->replace(__i1 - begin(), __i2 - __i1, __sv); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->replace(__i1 - begin(), __i2 - __i1, __sv);\n+\t}\n #endif // C++17\n \n     private:\n@@ -5062,13 +5202,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find position of a string_view.\n-       *  @param __sv  The string_view to locate.\n+       *  @param __svt  The object convertible to string_view to locate.\n        *  @param __pos  Index of character to search from (default 0).\n        *  @return  Index of start of first occurrence.\n       */\n-      size_type\n-      find(__sv_type __sv, size_type __pos = 0) const noexcept\n-      { return this->find(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind(const _Tp& __svt, size_type __pos = 0) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -5135,13 +5280,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find last position of a string_view.\n-       *  @param __sv   The string_view to locate.\n+       *  @param __svt  The object convertible to string_view to locate.\n        *  @param __pos  Index of character to search back from (default end).\n        *  @return  Index of start of last occurrence.\n       */\n-      size_type\n-      rfind(__sv_type __sv, size_type __pos = npos) const noexcept\n-      { return this->rfind(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\trfind(const _Tp& __svt, size_type __pos = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->rfind(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -5213,13 +5363,19 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find position of a character of a string_view.\n-       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to locate.\n        *  @param __pos  Index of character to search from (default 0).\n        *  @return  Index of first occurrence.\n       */\n-      size_type\n-      find_first_of(__sv_type __sv, size_type __pos = 0) const noexcept\n-      { return this->find_first_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_first_of(const _Tp& __svt, size_type __pos = 0) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_first_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -5291,13 +5447,19 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find last position of a character of string.\n-       *  @param __sv   A string_view containing characters to locate.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to locate.\n        *  @param __pos  Index of character to search back from (default end).\n        *  @return  Index of last occurrence.\n       */\n-      size_type\n-      find_last_of(__sv_type __sv, size_type __pos = npos) const noexcept\n-      { return this->find_last_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_last_of(const _Tp& __svt, size_type __pos = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_last_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -5366,13 +5528,19 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find position of a character not in a string_view.\n-       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to avoid.\n        *  @param __pos  Index of character to search from (default 0).\n        *  @return  Index of first occurrence.\n        */\n-      size_type\n-      find_first_not_of(__sv_type __sv, size_type __pos = 0) const noexcept\n-      { return this->find_first_not_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_first_not_of(const _Tp& __svt, size_type __pos = 0) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_first_not_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -5442,13 +5610,19 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Find last position of a character not in a string_view.\n-       *  @param __sv   A string_view containing characters to avoid.\n+       *  @param __svt  An object convertible to string_view containing\n+       *                characters to avoid.\n        *  @param __pos  Index of character to search back from (default end).\n        *  @return  Index of last occurrence.\n        */\n-      size_type\n-      find_last_not_of(__sv_type __sv, size_type __pos = npos) const noexcept\n-      { return this->find_last_not_of(__sv.data(), __pos, __sv.size()); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, size_type>\n+\tfind_last_not_of(const _Tp& __svt, size_type __pos = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return this->find_last_not_of(__sv.data(), __pos, __sv.size());\n+\t}\n #endif // C++17\n \n       /**\n@@ -5498,46 +5672,57 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if __cplusplus > 201402L\n       /**\n        *  @brief  Compare to a string_view.\n-       *  @param __sv  A string_view to compare against.\n+       *  @param __svt An object convertible to string_view to compare against.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      int\n-      compare(__sv_type __sv) const\n-      {\n-\tconst size_type __size = this->size();\n-\tconst size_type __osize = __sv.size();\n-\tconst size_type __len = std::min(__size, __osize);\n-\n-\tint __r = traits_type::compare(_M_data(), __sv.data(), __len);\n-\tif (!__r)\n-\t  __r = _S_compare(__size, __osize);\n-\treturn __r;\n-      }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, int>\n+\tcompare(const _Tp& __svt) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t   __sv_type __sv = __svt;\n+\t  const size_type __size = this->size();\n+\t  const size_type __osize = __sv.size();\n+\t  const size_type __len = std::min(__size, __osize);\n+\n+\t  int __r = traits_type::compare(_M_data(), __sv.data(), __len);\n+\t  if (!__r)\n+\t    __r = _S_compare(__size, __osize);\n+\t  return __r;\n+\t}\n \n       /**\n        *  @brief  Compare to a string_view.\n        *  @param __pos  A position in the string to start comparing from.\n        *  @param __n  The number of characters to compare.\n-       *  @param __sv   A string_view to compare against.\n+       *  @param __svt  An object convertible to string_view to compare\n+       *                against.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      int\n-      compare(size_type __pos, size_type __n, __sv_type __sv) const\n-      { return __sv_type(*this).substr(__pos, __n).compare(__sv); }\n+      template<typename _Tp>\n+\t_If_sv<_Tp, int>\n+\tcompare(size_type __pos, size_type __n, const _Tp& __svt) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n+\t{\n+\t  __sv_type __sv = __svt;\n+\t  return __sv_type(*this).substr(__pos, __n).compare(__sv);\n+\t}\n \n       /**\n        *  @brief  Compare to a string_view.\n        *  @param __pos1  A position in the string to start comparing from.\n        *  @param __n1  The number of characters to compare.\n-       *  @param __sv   A string_view to compare against.\n+       *  @param __svt   An object convertible to string_view to compare\n+       *                 against.\n        *  @param __pos2  A position in the string_view to start comparing from.\n        *  @param __n2  The number of characters to compare.\n        *  @return  Integer < 0, 0, or > 0.\n        */\n-      template <typename _Tp>\n+      template<typename _Tp>\n \t_If_sv<_Tp, int>\n \tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos) const\n+\tnoexcept(is_same<_Tp, __sv_type>::value)\n \t{\n \t  __sv_type __sv = __svt;\n \t  return __sv_type(*this)"}, {"sha": "42a046f9e54076ff2ed253a0e1092e0d668e21c4", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/79162.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F79162.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F79162.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F79162.cc?ref=df66af3b1edaf46420191aec73311fa408cb18c1", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+template <class DataType>\n+class opt : public DataType\n+{\n+  opt(const opt &) = delete;\n+  opt &operator=(const opt &) = delete;\n+public:\n+  opt() {}\n+};\n+\n+int main()\n+{\n+  opt<std::string> PGOTestProfileFile;\n+  std::string ProfileFileName;\n+  ProfileFileName = PGOTestProfileFile;\n+}"}, {"sha": "74d5a5c89a778b8e12074a13d56c56c8d50f87e7", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/lwg2946.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2946.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df66af3b1edaf46420191aec73311fa408cb18c1/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2946.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Flwg2946.cc?ref=df66af3b1edaf46420191aec73311fa408cb18c1", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+\n+int main()\n+{\n+  std::string s({\"abc\", 1});\n+  s = {\"abc\", 1};\n+  s += {\"abc\", 1};\n+  s.append({\"abc\", 1});\n+  s.assign({\"abc\", 1});\n+  s.insert(0, {\"abc\", 1});\n+  s.replace(0, 1, {\"abc\", 1});\n+  s.replace(s.cbegin(), s.cbegin(), {\"abc\", 1});\n+  s.find({\"abc\", 1});\n+  s.rfind({\"abc\", 1});\n+  s.find_first_of({\"abc\", 1});\n+  s.find_last_of({\"abc\", 1});\n+  s.find_first_not_of({\"abc\", 1});\n+  s.find_last_not_of({\"abc\", 1});\n+  s.compare({\"abc\", 1});\n+  s.compare(0, 1, {\"abc\", 1});\n+}"}]}