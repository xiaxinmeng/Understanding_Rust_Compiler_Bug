{"sha": "e2f0f5f70455606bf951e22457184e6bf18d580f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJmMGY1ZjcwNDU1NjA2YmY5NTFlMjI0NTcxODRlNmJmMThkNTgwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-02-07T02:11:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-07T02:11:27Z"}, "message": "re PR target/60077 (gcc.target/i386/pr35767-5.c FAILs)\n\n\n\tPR target/60077\n\t* expr.c (emit_move_resolve_push): Export; be bit more selective\n\ton when to clear alias set.\n\t* expr.h (emit_move_resolve_push): Declare.\n\t* function.h (struct function): Add tail_call_marked.\n\t* tree-tailcall.c (optimize_tail_call): Set tail_call_marked.\n\t* config/i386/i386-protos.h (ix86_expand_push): Remove.\n\t* config/i386/i386.md (TImode move expander): De not call\n\tix86_expand_push.\n\t(FP push expanders): Preserve memory attributes.\n\t* config/i386/sse.md (push<mode>1): Remove.\n\t* config/i386/i386.c (ix86_expand_vector_move): Handle push\n\toperation.\n\t(ix86_expand_push): Remove.\n\t* config/i386/mmx.md (push<mode>1): Remove.\n\nFrom-SVN: r207587", "tree": {"sha": "1b375a4749d5db755163291df7cd94b2113f649e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b375a4749d5db755163291df7cd94b2113f649e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2f0f5f70455606bf951e22457184e6bf18d580f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f0f5f70455606bf951e22457184e6bf18d580f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f0f5f70455606bf951e22457184e6bf18d580f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f0f5f70455606bf951e22457184e6bf18d580f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44afe5e47bfc9397159fb0de15ff394960063661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44afe5e47bfc9397159fb0de15ff394960063661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44afe5e47bfc9397159fb0de15ff394960063661"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "3a389639d05fd829849bfc4543a35966991c586c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -1,3 +1,21 @@\n+2014-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/60077\n+\t* expr.c (emit_move_resolve_push): Export; be bit more selective\n+\ton when to clear alias set.\n+\t* expr.h (emit_move_resolve_push): Declare.\n+\t* function.h (struct function): Add tail_call_marked.\n+\t* tree-tailcall.c (optimize_tail_call): Set tail_call_marked.\n+\t* config/i386/i386-protos.h (ix86_expand_push): Remove.\n+\t* config/i386/i386.md (TImode move expander): De not call\n+\tix86_expand_push.\n+\t(FP push expanders): Preserve memory attributes.\n+\t* config/i386/sse.md (push<mode>1): Remove.\n+\t* config/i386/i386.c (ix86_expand_vector_move): Handle push\n+\toperation.\n+\t(ix86_expand_push): Remove.\n+\t* config/i386/mmx.md (push<mode>1): Remove.\n+\n 2014-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/60030"}, {"sha": "3493904864f8f8c97b5d095aa542edf7c7f43c34", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -84,7 +84,6 @@ extern void ix86_expand_clear (rtx);\n extern void ix86_expand_move (enum machine_mode, rtx[]);\n extern void ix86_expand_vector_move (enum machine_mode, rtx[]);\n extern void ix86_expand_vector_move_misalign (enum machine_mode, rtx[]);\n-extern void ix86_expand_push (enum machine_mode, rtx);\n extern rtx ix86_fixup_binary_operands (enum rtx_code,\n \t\t\t\t       enum machine_mode, rtx[]);\n extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,"}, {"sha": "18f5d57e39cfda064c9aa16a6c4ec62505668aa3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -16828,6 +16828,9 @@ ix86_expand_vector_move (enum machine_mode mode, rtx operands[])\n   rtx op0 = operands[0], op1 = operands[1];\n   unsigned int align = GET_MODE_ALIGNMENT (mode);\n \n+  if (push_operand (op0, VOIDmode))\n+    op0 = emit_move_resolve_push (mode, op0);\n+\n   /* Force constants other than zero into memory.  We do not know how\n      the instructions used to build constants modify the upper 64 bits\n      of the register, once we have that information we may be able\n@@ -17255,30 +17258,6 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n     gcc_unreachable ();\n }\n \n-/* Expand a push in MODE.  This is some mode for which we do not support\n-   proper push instructions, at least from the registers that we expect\n-   the value to live in.  */\n-\n-void\n-ix86_expand_push (enum machine_mode mode, rtx x)\n-{\n-  rtx tmp;\n-\n-  tmp = expand_simple_binop (Pmode, PLUS, stack_pointer_rtx,\n-\t\t\t     GEN_INT (-GET_MODE_SIZE (mode)),\n-\t\t\t     stack_pointer_rtx, 1, OPTAB_DIRECT);\n-  if (tmp != stack_pointer_rtx)\n-    emit_move_insn (stack_pointer_rtx, tmp);\n-\n-  tmp = gen_rtx_MEM (mode, stack_pointer_rtx);\n-\n-  /* When we push an operand onto stack, it has to be aligned at least\n-     at the function argument boundary.  However since we don't have\n-     the argument type, we can't determine the actual argument\n-     boundary.  */\n-  emit_move_insn (tmp, x);\n-}\n-\n /* Helper function of ix86_fixup_binary_operands to canonicalize\n    operand order.  Returns true if the operands should be swapped.  */\n "}, {"sha": "05fc00a66fc77cc792a8066e916f2a2cca8371f6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -1821,8 +1821,6 @@\n {\n   if (TARGET_64BIT)\n     ix86_expand_move (TImode, operands);\n-  else if (push_operand (operands[0], TImode))\n-    ix86_expand_push (TImode, operands[1]);\n   else\n     ix86_expand_vector_move (TImode, operands);\n   DONE;\n@@ -2682,7 +2680,11 @@\n \t(match_operand:TF 1 \"sse_reg_operand\"))]\n   \"TARGET_SSE && reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -16)))\n-   (set (mem:TF (reg:P SP_REG)) (match_dup 1))])\n+   (set (match_dup 0) (match_dup 1))]\n+{\n+  /* Preserve memory attributes. */\n+  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n+})\n \n (define_insn \"*pushxf\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n@@ -2708,8 +2710,12 @@\n \t(match_operand:XF 1 \"fp_register_operand\"))]\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n-   (set (mem:XF (reg:P SP_REG)) (match_dup 1))]\n-  \"operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\")\n+   (set (match_dup 0) (match_dup 1))]\n+{\n+  operands[2] = GEN_INT (-GET_MODE_SIZE (XFmode));\n+  /* Preserve memory attributes. */\n+  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n+})\n \n (define_insn \"*pushdf\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<\")\n@@ -2730,7 +2736,11 @@\n \t(match_operand:DF 1 \"any_fp_register_operand\"))]\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -8)))\n-   (set (mem:DF (reg:P SP_REG)) (match_dup 1))])\n+   (set (match_dup 0) (match_dup 1))]\n+{\n+  /* Preserve memory attributes. */\n+  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n+})\n \n (define_insn \"*pushsf_rex64\"\n   [(set (match_operand:SF 0 \"push_operand\" \"=X,X,X\")\n@@ -2764,7 +2774,7 @@\n \t(match_operand:SF 1 \"any_fp_register_operand\"))]\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n-   (set (mem:SF (reg:P SP_REG)) (match_dup 1))]\n+   (set (match_dup 0) (match_dup 1))]\n {\n   rtx op = XEXP (operands[0], 0);\n   if (GET_CODE (op) == PRE_DEC)\n@@ -2778,6 +2788,8 @@\n       gcc_assert (CONST_INT_P (op));\n     }\n   operands[2] = op;\n+  /* Preserve memory attributes. */\n+  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n })\n \n (define_split"}, {"sha": "214acde23c4692d405d447234ad70974e482b96a", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -213,14 +213,6 @@\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n-(define_expand \"push<mode>1\"\n-  [(match_operand:MMXMODE 0 \"register_operand\")]\n-  \"TARGET_MMX\"\n-{\n-  ix86_expand_push (<MODE>mode, operands[0]);\n-  DONE;\n-})\n-\n (define_expand \"movmisalign<mode>\"\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\")\n \t(match_operand:MMXMODE 1 \"nonimmediate_operand\"))]"}, {"sha": "345b6e087af021e16f3729fe3f3f8ce5a76abb62", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -913,14 +913,6 @@\n   operands[2] = CONST0_RTX (DFmode);\n })\n \n-(define_expand \"push<mode>1\"\n-  [(match_operand:VMOVE 0 \"register_operand\")]\n-  \"TARGET_SSE\"\n-{\n-  ix86_expand_push (<MODE>mode, operands[0]);\n-  DONE;\n-})\n-\n (define_expand \"movmisalign<mode>\"\n   [(set (match_operand:VMOVE 0 \"nonimmediate_operand\")\n \t(match_operand:VMOVE 1 \"nonimmediate_operand\"))]"}, {"sha": "c1f67f4e4a04d2a1b4f6e784714d30200b091d6a", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -3221,7 +3221,7 @@ emit_move_via_integer (enum machine_mode mode, rtx x, rtx y, bool force)\n /* A subroutine of emit_move_insn_1.  X is a push_operand in MODE.\n    Return an equivalent MEM that does not use an auto-increment.  */\n \n-static rtx\n+rtx\n emit_move_resolve_push (enum machine_mode mode, rtx x)\n {\n   enum rtx_code code = GET_CODE (XEXP (x, 0));\n@@ -4070,7 +4070,7 @@ emit_single_push_insn_1 (enum machine_mode mode, rtx x, tree type)\n     {\n       set_mem_attributes (dest, type, 1);\n \n-      if (flag_optimize_sibling_calls)\n+      if (cfun->tail_call_marked)\n \t/* Function incoming arguments may overlap with sibling call\n \t   outgoing arguments and we cannot allow reordering of reads\n \t   from function arguments with stores to outgoing arguments"}, {"sha": "5111f06e8560af52b17f813f018341b799c7bb74", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -413,6 +413,7 @@ extern rtx emit_move_insn_1 (rtx, rtx);\n \n extern rtx emit_move_complex_push (enum machine_mode, rtx, rtx);\n extern rtx emit_move_complex_parts (rtx, rtx);\n+extern rtx emit_move_resolve_push (enum machine_mode, rtx);\n \n /* Push a block of length SIZE (perhaps variable)\n    and return an rtx to address the beginning of the block.  */"}, {"sha": "38a0fc4688d9c036afef6fb7c7edcb0e0007e177", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -667,6 +667,9 @@ struct GTY(()) function {\n   /* Nonzero if the current function contains any loops with\n      nonzero value in loop->simduid.  */\n   unsigned int has_simduid_loops : 1;\n+\n+  /* Set when the tail call has been identified.  */\n+  unsigned int tail_call_marked : 1;\n };\n \n /* Add the decl D to the local_decls list of FUN.  */"}, {"sha": "3488c2fc2c22984fd37c9631b8392c69d2d3239c", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f0f5f70455606bf951e22457184e6bf18d580f/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=e2f0f5f70455606bf951e22457184e6bf18d580f", "patch": "@@ -909,6 +909,7 @@ optimize_tail_call (struct tailcall *t, bool opt_tailcalls)\n       gimple stmt = gsi_stmt (t->call_gsi);\n \n       gimple_call_set_tail (stmt, true);\n+      cfun->tail_call_marked = true;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n         {\n \t  fprintf (dump_file, \"Found tail call \");"}]}