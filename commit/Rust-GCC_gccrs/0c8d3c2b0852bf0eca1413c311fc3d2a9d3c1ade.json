{"sha": "0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4ZDNjMmIwODUyYmYwZWNhMTQxM2MzMTFmYzNkMmE5ZDNjMWFkZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-18T17:42:12Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-18T17:42:12Z"}, "message": "re PR target/30652 (SSE expansion is missing for isinf() and other fpclassify functions)\n\n\tPR target/30652\n\n\t* builtins.c (expand_builtin_interclass_mathfn): Allow for missing\n\toptabs infrastructure.  Provide generic implementation for\n\tFINITE/ISFINITE.\n\t(expand_builtin): Handle FINITE/ISFINITE.\n\t(fold_builtin_classify): Make ISFINITE canonical instead of FINITE.\n\t(fold_builtin_1): Likewise.\n\n\t* builtins.def (BUILT_IN_ISFINITE): New.\n\n\t* doc/extend.texi: Document isfinite.\n\ntestsuite:\n\t* gcc.dg/pr28796-1.c: Add more cases.\n\t* gcc.dg/pr28796-2.c: Likewise.\n\nFrom-SVN: r126725", "tree": {"sha": "25f7979650149bcd55f9e00ab15c292b6ca66e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f7979650149bcd55f9e00ab15c292b6ca66e36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/comments", "author": null, "committer": null, "parents": [{"sha": "7faa1bbb5d0206cc83f20c1145f612f7754fdcf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faa1bbb5d0206cc83f20c1145f612f7754fdcf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7faa1bbb5d0206cc83f20c1145f612f7754fdcf3"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "3bd353f19b52862602b8194769b283e8d6ce1e5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -1,3 +1,18 @@\n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR target/30652\n+\n+\t* builtins.c (expand_builtin_interclass_mathfn): Allow for missing\n+\toptabs infrastructure.  Provide generic implementation for\n+\tFINITE/ISFINITE.\n+\t(expand_builtin): Handle FINITE/ISFINITE.\n+\t(fold_builtin_classify): Make ISFINITE canonical instead of FINITE.\n+\t(fold_builtin_1): Likewise.\n+\n+\t* builtins.def (BUILT_IN_ISFINITE): New.\n+\n+\t* doc/extend.texi: Document isfinite.\n+\n 2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR target/30652"}, {"sha": "b96cfb24da1e76b7ef7fc4a0977339c324353c19", "filename": "gcc/builtins.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -2211,8 +2211,8 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n static rtx\n expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n {\n-  optab builtin_optab;\n-  enum insn_code icode;\n+  optab builtin_optab = 0;\n+  enum insn_code icode = CODE_FOR_nothing;\n   rtx op0;\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n@@ -2230,6 +2230,10 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n       errno_set = true; builtin_optab = ilogb_optab; break;\n     CASE_FLT_FN (BUILT_IN_ISINF):\n       builtin_optab = isinf_optab; break;\n+    case BUILT_IN_ISFINITE:\n+    CASE_FLT_FN (BUILT_IN_FINITE):\n+      /* These builtins have no optabs (yet).  */\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -2241,7 +2245,8 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n   /* Optab mode depends on the mode of the input argument.  */\n   mode = TYPE_MODE (TREE_TYPE (arg));\n \n-  icode = builtin_optab->handlers[(int) mode].insn_code;\n+  if (builtin_optab)\n+    icode = builtin_optab->handlers[(int) mode].insn_code;\n  \n   /* Before working hard, check whether the instruction is available.  */\n   if (icode != CODE_FOR_nothing)\n@@ -2295,6 +2300,22 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n \t\t\t\t  build_real (type, r));\n \treturn expand_expr (result, target, VOIDmode, EXPAND_NORMAL);\n       }\n+    CASE_FLT_FN (BUILT_IN_FINITE):\n+    case BUILT_IN_ISFINITE:\n+      {\n+\t/* isfinite(x) -> islessequal(fabs(x),DBL_MAX).  */\n+\ttree const isle_fn = built_in_decls[BUILT_IN_ISLESSEQUAL];\n+\ttree const type = TREE_TYPE (arg);\n+\tREAL_VALUE_TYPE r;\n+\tchar buf[128];\n+\n+\tget_max_float (REAL_MODE_FORMAT (mode), buf, sizeof (buf));\n+\treal_from_string (&r, buf);\n+\tresult = build_call_expr (isle_fn, 2,\n+\t\t\t\t  fold_build1 (ABS_EXPR, type, arg),\n+\t\t\t\t  build_real (type, r));\n+\treturn expand_expr (result, target, VOIDmode, EXPAND_NORMAL);\n+      }\n     default:\n       break;\n     }\n@@ -6150,6 +6171,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n     CASE_FLT_FN (BUILT_IN_ISINF):\n+    CASE_FLT_FN (BUILT_IN_FINITE):\n+    case BUILT_IN_ISFINITE:\n       target = expand_builtin_interclass_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;\n@@ -9569,7 +9592,7 @@ fold_builtin_classify (tree fndecl, tree arg, int builtin_index)\n \n       return NULL_TREE;\n \n-    case BUILT_IN_FINITE:\n+    case BUILT_IN_ISFINITE:\n       if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg)))\n \t  && !HONOR_INFINITIES (TYPE_MODE (TREE_TYPE (arg))))\n \treturn omit_one_operand (type, integer_one_node, arg);\n@@ -9972,7 +9995,8 @@ fold_builtin_1 (tree fndecl, tree arg0, bool ignore)\n     case BUILT_IN_FINITED32:\n     case BUILT_IN_FINITED64:\n     case BUILT_IN_FINITED128:\n-      return fold_builtin_classify (fndecl, arg0, BUILT_IN_FINITE);\n+    case BUILT_IN_ISFINITE:\n+      return fold_builtin_classify (fndecl, arg0, BUILT_IN_ISFINITE);\n \n     CASE_FLT_FN (BUILT_IN_ISINF):\n     case BUILT_IN_ISINFD32:"}, {"sha": "8f5f4f24cb830bfb0f43157b81a1800b7c9bda8a", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -654,6 +654,7 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITEL, \"finitel\", BT_FN_INT_LONGDOUBLE, ATTR_\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED32, \"finited32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED64, \"finited64\", BT_FN_INT_DFLOAT64, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FINITED128, \"finited128\", BT_FN_INT_DFLOAT128, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_ISFINITE, \"isfinite\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_C99_C90RES_BUILTIN (BUILT_IN_ISINF, \"isinf\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFF, \"isinff\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_ISINFL, \"isinfl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "c974d5206cc2d2537d576806aa59057e1e5dd302", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -5437,6 +5437,7 @@ should be called and the @var{flag} argument passed to it.\n @node Other Builtins\n @section Other built-in functions provided by GCC\n @cindex built-in functions\n+@findex __builtin_isfinite\n @findex __builtin_isgreater\n @findex __builtin_isgreaterequal\n @findex __builtin_isless\n@@ -5965,6 +5966,8 @@ the same names as the standard macros ( @code{isgreater},\n @code{islessgreater}, and @code{isunordered}) , with @code{__builtin_}\n prefixed.  We intend for a library implementor to be able to simply\n @code{#define} each standard macro to its built-in equivalent.\n+In the same fashion, GCC provides an @code{isfinite} built-in used\n+with @code{__builtin_} prefixed.\n \n @deftypefn {Built-in Function} int __builtin_types_compatible_p (@var{type1}, @var{type2})\n "}, {"sha": "64a5d01f4d0ab6abc462d5e15956aa6d1e6df9d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -3,6 +3,11 @@\n \t* gcc.dg/pr28796-1.c: Add more cases.\n \t* gcc.dg/pr28796-2.c: Likewise.\n \n+2007-07-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/pr28796-1.c: Add more cases.\n+\t* gcc.dg/pr28796-2.c: Likewise.\n+\n 2007-07-17  Janus Weil  <jaydub66@gmail.com>\n \n \tPR fortran/32535"}, {"sha": "077118a298878441e812410f3a6bf3707fb1d839", "filename": "gcc/testsuite/gcc.dg/pr28796-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-1.c?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -38,6 +38,20 @@ int main()\n   if (__builtin_finitel (ld) != 1)\n     link_error ();\n \n+  if (__builtin_isinf (f) != 0)\n+    link_error ();\n+  if (__builtin_isinf (d) != 0)\n+    link_error ();\n+  if (__builtin_isinf (ld) != 0)\n+    link_error ();\n+\n+  if (__builtin_isfinite (f) != 1)\n+    link_error ();\n+  if (__builtin_isfinite (d) != 1)\n+    link_error ();\n+  if (__builtin_isfinite (ld) != 1)\n+    link_error ();\n+\n   if (f != f)\n     link_error ();\n   if (d != d)"}, {"sha": "6f929a81fd6cd0de0093be57a50cbb6d1cfeee46", "filename": "gcc/testsuite/gcc.dg/pr28796-2.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c?ref=0c8d3c2b0852bf0eca1413c311fc3d2a9d3c1ade", "patch": "@@ -43,10 +43,23 @@ foo_1 (float f, double d, long double ld,\n   if (__builtin_isinfl (ld) != res_isinf)\n     abort ();\n \n+  if (__builtin_isfinite (f) != res_isfin)\n+    abort ();\n+  if (__builtin_isfinite (d) != res_isfin)\n+    abort ();\n+  if (__builtin_isfinite (ld) != res_isfin)\n+    abort ();\n+\n+  if (__builtin_finitef (f) != res_isfin)\n+    abort ();\n   if (__builtin_finite (f) != res_isfin)\n     abort ();\n   if (__builtin_finite (d) != res_isfin)\n     abort ();\n+  if (__builtin_finitel (d) != res_isfin)\n+    abort ();\n+  if (__builtin_finitel (ld) != res_isfin)\n+    abort ();\n }\n \n void __attribute__ ((__noinline__))"}]}