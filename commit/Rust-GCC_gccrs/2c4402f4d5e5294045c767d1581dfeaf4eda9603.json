{"sha": "2c4402f4d5e5294045c767d1581dfeaf4eda9603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0NDAyZjRkNWU1Mjk0MDQ1Yzc2N2QxNTgxZGZlYWY0ZWRhOTYwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-24T19:35:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-24T19:35:07Z"}, "message": "mips.md (cmpsi, cmpdi): Redefine using :GPR.\n\n\t* config/mips/mips.md (cmpsi, cmpdi): Redefine using :GPR.\n\t(*branch_zero[sd]i): Renamed from branch_zero{,_di}.  Redefine\n\tusing :GPR.\n\t(*branch_zero[sd]i_inverted): Likewise branch_zero{,_di}_inverted.\n\t(*branch_equality[sd]i): Likewise branch_equality{,_di}.\n\t(*branch_equality[sd]i_inverted): Likewise\n\tbranch_equality{,_di}_inverted.\n\t(*branch_equality[sd]i_mips16): Name formerly unnamed patterns.\n\tRedefine using :GPR.\n\nFrom-SVN: r86507", "tree": {"sha": "9a220dcc0fc7771028281e2be42fc8c784e3f3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a220dcc0fc7771028281e2be42fc8c784e3f3ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c4402f4d5e5294045c767d1581dfeaf4eda9603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4402f4d5e5294045c767d1581dfeaf4eda9603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4402f4d5e5294045c767d1581dfeaf4eda9603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4402f4d5e5294045c767d1581dfeaf4eda9603/comments", "author": null, "committer": null, "parents": [{"sha": "45ede75e36a7bdb9c3e182f7439a233dc058d268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45ede75e36a7bdb9c3e182f7439a233dc058d268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45ede75e36a7bdb9c3e182f7439a233dc058d268"}], "stats": {"total": 220, "additions": 56, "deletions": 164}, "files": [{"sha": "ea3ff9c8a6dee0d28cd00d0fdb40c8b299e8fbd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4402f4d5e5294045c767d1581dfeaf4eda9603/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4402f4d5e5294045c767d1581dfeaf4eda9603/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c4402f4d5e5294045c767d1581dfeaf4eda9603", "patch": "@@ -1,3 +1,15 @@\n+2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (cmpsi, cmpdi): Redefine using :GPR.\n+\t(*branch_zero[sd]i): Renamed from branch_zero{,_di}.  Redefine\n+\tusing :GPR.\n+\t(*branch_zero[sd]i_inverted): Likewise branch_zero{,_di}_inverted.\n+\t(*branch_equality[sd]i): Likewise branch_equality{,_di}.\n+\t(*branch_equality[sd]i_inverted): Likewise\n+\tbranch_equality{,_di}_inverted.\n+\t(*branch_equality[sd]i_mips16): Name formerly unnamed patterns.\n+\tRedefine using :GPR.\n+\n 2004-08-24  Zack Weinberg  <zack@codesourcery.com>\n \n \t* rtl.def: Reorganize, placing all codes used only in machine"}, {"sha": "0cf81fd57417beaf9c9ce2ab1b2d8e2a49ebd5ec", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 44, "deletions": 164, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c4402f4d5e5294045c767d1581dfeaf4eda9603/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c4402f4d5e5294045c767d1581dfeaf4eda9603/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2c4402f4d5e5294045c767d1581dfeaf4eda9603", "patch": "@@ -4789,28 +4789,17 @@ beq\\t%2,%.,1b\\;\\\n ;;\tIf needed, an appropriate temporary is created to hold the\n ;;\tof the integer compare.\n \n-(define_expand \"cmpsi\"\n+(define_expand \"cmp<mode>\"\n   [(set (cc0)\n-\t(compare:CC (match_operand:SI 0 \"register_operand\")\n-\t\t    (match_operand:SI 1 \"nonmemory_operand\")))]\n+\t(compare:CC (match_operand:GPR 0 \"register_operand\")\n+\t\t    (match_operand:GPR 1 \"nonmemory_operand\")))]\n   \"\"\n {\n   cmp_operands[0] = operands[0];\n   cmp_operands[1] = operands[1];\n   DONE;\n })\n \n-(define_expand \"cmpdi\"\n-  [(set (cc0)\n-\t(compare:CC (match_operand:DI 0 \"register_operand\")\n-\t\t    (match_operand:DI 1 \"nonmemory_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  cmp_operands[0] = operands[0];\n-  cmp_operands[1] = operands[1];\n-  DONE;\n-})\n-\n (define_expand \"cmpdf\"\n   [(set (cc0)\n \t(compare:CC (match_operand:DF 0 \"register_operand\")\n@@ -4884,54 +4873,14 @@ beq\\t%2,%.,1b\\;\\\n \n ;; Conditional branches on comparisons with zero.\n \n-(define_insn \"branch_zero\"\n-  [(set (pc)\n-\t(if_then_else\n-         (match_operator:SI 0 \"comparison_operator\"\n-\t\t\t    [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t\t\t     (const_int 0)])\n-        (label_ref (match_operand 1 \"\" \"\"))\n-        (pc)))]\n-  \"!TARGET_MIPS16\"\n-{\n-  return mips_output_conditional_branch (insn,\n-\t\t\t\t\t operands,\n-\t\t\t\t\t /*two_operands_p=*/0,\n-\t\t\t\t\t /*float_p=*/0,\n-\t\t\t\t\t /*inverted_p=*/0,\n-\t\t\t\t\t get_attr_length (insn));\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_insn \"branch_zero_inverted\"\n-  [(set (pc)\n-\t(if_then_else\n-         (match_operator:SI 0 \"comparison_operator\"\n-\t\t            [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t\t\t     (const_int 0)])\n-        (pc)\n-        (label_ref (match_operand 1 \"\" \"\"))))]\n-  \"!TARGET_MIPS16\"\n-{\n-  return mips_output_conditional_branch (insn,\n-\t\t\t\t\t operands,\n-\t\t\t\t\t /*two_operands_p=*/0,\n-\t\t\t\t\t /*float_p=*/0,\n-\t\t\t\t\t /*inverted_p=*/1,\n-\t\t\t\t\t get_attr_length (insn));\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_insn \"branch_zero_di\"\n+(define_insn \"*branch_zero<mode>\"\n   [(set (pc)\n \t(if_then_else\n-         (match_operator:DI 0 \"comparison_operator\"\n-\t\t            [(match_operand:DI 2 \"register_operand\" \"d\")\n-\t\t\t     (const_int 0)])\n-        (label_ref (match_operand 1 \"\" \"\"))\n-        (pc)))]\n+\t (match_operator:GPR 0 \"comparison_operator\"\n+\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t      (const_int 0)])\n+\t (label_ref (match_operand 1 \"\" \"\"))\n+\t (pc)))]\n   \"!TARGET_MIPS16\"\n {\n   return mips_output_conditional_branch (insn,\n@@ -4941,17 +4890,17 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t\t\t /*inverted_p=*/0,\n \t\t\t\t\t get_attr_length (insn));\n }\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n \n-(define_insn \"branch_zero_di_inverted\"\n+(define_insn \"*branch_zero<mode>_inverted\"\n   [(set (pc)\n \t(if_then_else\n-         (match_operator:DI 0 \"comparison_operator\"\n-\t\t\t    [(match_operand:DI 2 \"register_operand\" \"d\")\n-\t\t\t     (const_int 0)])\n-        (pc)\n-        (label_ref (match_operand 1 \"\" \"\"))))]\n+\t (match_operator:GPR 0 \"comparison_operator\"\n+\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t      (const_int 0)])\n+\t (pc)\n+\t (label_ref (match_operand 1 \"\" \"\"))))]\n   \"!TARGET_MIPS16\"\n {\n   return mips_output_conditional_branch (insn,\n@@ -4961,19 +4910,19 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t\t\t /*inverted_p=*/1,\n \t\t\t\t\t get_attr_length (insn));\n }\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n \n ;; Conditional branch on equality comparison.\n \n-(define_insn \"branch_equality\"\n+(define_insn \"*branch_equality<mode>\"\n   [(set (pc)\n \t(if_then_else\n-         (match_operator:SI 0 \"equality_operator\"\n-\t\t   \t    [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")])\n-         (label_ref (match_operand 1 \"\" \"\"))\n-         (pc)))]\n+\t (match_operator:GPR 0 \"equality_operator\"\n+\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t      (match_operand:GPR 3 \"register_operand\" \"d\")])\n+\t (label_ref (match_operand 1 \"\" \"\"))\n+\t (pc)))]\n   \"!TARGET_MIPS16\"\n {\n   return mips_output_conditional_branch (insn,\n@@ -4983,57 +4932,17 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t\t\t /*inverted_p=*/0,\n \t\t\t\t\t get_attr_length (insn));\n }\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n \n-(define_insn \"branch_equality_di\"\n+(define_insn \"*branch_equality<mode>_inverted\"\n   [(set (pc)\n \t(if_then_else\n-         (match_operator:DI 0 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 2 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:DI 3 \"register_operand\" \"d\")])\n-        (label_ref (match_operand 1 \"\" \"\"))\n-        (pc)))]\n-  \"!TARGET_MIPS16\"\n-{\n-  return mips_output_conditional_branch (insn,\n-\t\t\t\t\t operands,\n-\t\t\t\t\t /*two_operands_p=*/1,\n-\t\t\t\t\t /*float_p=*/0,\n-\t\t\t\t\t /*inverted_p=*/0,\n-\t\t\t\t\t get_attr_length (insn));\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_insn \"branch_equality_inverted\"\n-  [(set (pc)\n-\t(if_then_else\n-         (match_operator:SI 0 \"equality_operator\"\n-\t\t   \t    [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")])\n-         (pc)\n-         (label_ref (match_operand 1 \"\" \"\"))))]\n-  \"!TARGET_MIPS16\"\n-{\n-  return mips_output_conditional_branch (insn,\n-\t\t\t\t\t operands,\n-\t\t\t\t\t /*two_operands_p=*/1,\n-\t\t\t\t\t /*float_p=*/0,\n-\t\t\t\t\t /*inverted_p=*/1,\n-\t\t\t\t\t get_attr_length (insn));\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n-\n-(define_insn \"branch_equality_di_inverted\"\n-  [(set (pc)\n-\t(if_then_else\n-         (match_operator:DI 0 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 2 \"register_operand\" \"d\")\n-\t\t\t     (match_operand:DI 3 \"register_operand\" \"d\")])\n-        (pc)\n-        (label_ref (match_operand 1 \"\" \"\"))))]\n+\t (match_operator:GPR 0 \"equality_operator\"\n+\t\t\t     [(match_operand:GPR 2 \"register_operand\" \"d\")\n+\t\t\t      (match_operand:GPR 3 \"register_operand\" \"d\")])\n+\t (pc)\n+\t (label_ref (match_operand 1 \"\" \"\"))))]\n   \"!TARGET_MIPS16\"\n {\n   return mips_output_conditional_branch (insn,\n@@ -5043,19 +4952,19 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t\t\t /*inverted_p=*/1,\n \t\t\t\t\t get_attr_length (insn));\n }\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")])\n \n ;; MIPS16 branches\n \n-(define_insn \"\"\n+(define_insn \"*branch_equality<mode>_mips16\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator:SI 0 \"equality_operator\"\n-\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d,t\")\n-\t\t\t     (const_int 0)])\n-\t(match_operand 2 \"pc_or_label_operand\" \"\")\n-\t(match_operand 3 \"pc_or_label_operand\" \"\")))]\n+\t (match_operator:GPR 0 \"equality_operator\"\n+\t\t\t     [(match_operand:GPR 1 \"register_operand\" \"d,t\")\n+\t\t\t      (const_int 0)])\n+\t (match_operand 2 \"pc_or_label_operand\" \"\")\n+\t (match_operand 3 \"pc_or_label_operand\" \"\")))]\n   \"TARGET_MIPS16\"\n {\n   if (operands[2] != pc_rtx)\n@@ -5073,38 +4982,9 @@ beq\\t%2,%.,1b\\;\\\n \treturn \"bt%N0z\\t%3\";\n     }\n }\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"8\")])\n-\n-(define_insn \"\"\n-  [(set (pc)\n-\t(if_then_else\n-\t (match_operator:DI 0 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 1 \"register_operand\" \"d,t\")\n-\t\t\t     (const_int 0)])\n-\t(match_operand 2 \"pc_or_label_operand\" \"\")\n-\t(match_operand 3 \"pc_or_label_operand\" \"\")))]\n-  \"TARGET_MIPS16\"\n-{\n-  if (operands[2] != pc_rtx)\n-    {\n-      if (which_alternative == 0)\n-\treturn \"b%C0z\\t%1,%2\";\n-      else\n-\treturn \"bt%C0z\\t%2\";\n-    }\n-  else\n-    {\n-      if (which_alternative == 0)\n-\treturn \"b%N0z\\t%1,%3\";\n-      else\n-\treturn \"bt%N0z\\t%3\";\n-    }\n-}\n-  [(set_attr \"type\"\t\"branch\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"8\")])\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"mode\" \"none\")\n+   (set_attr \"length\" \"8\")])\n \n (define_expand \"b<code>\"\n   [(set (pc)"}]}