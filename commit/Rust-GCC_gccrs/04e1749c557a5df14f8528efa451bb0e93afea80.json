{"sha": "04e1749c557a5df14f8528efa451bb0e93afea80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlMTc0OWM1NTdhNWRmMTRmODUyOGVmYTQ1MWJiMGU5M2FmZWE4MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-08-19T13:59:13Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-08-19T13:59:13Z"}, "message": "PR c++/91264 - detect modifying const objects in constexpr.\n\n\t* constexpr.c (modifying_const_object_error): New function.\n\t(cxx_eval_call_expression): Set TREE_READONLY on a CONSTRUCTOR of\n\ta const-qualified object after it's been fully constructed.\n\t(modifying_const_object_p): New function.\n\t(cxx_eval_store_expression): Detect modifying a const object\n\tduring constant expression evaluation.\n\t(cxx_eval_increment_expression): Use a better location when building\n\tup the store.\n\t(cxx_eval_constant_expression) <case DECL_EXPR>: Mark a constant\n\tobject's constructor TREE_READONLY.\n\n\t* g++.dg/cpp1y/constexpr-tracking-const1.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const2.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const3.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const4.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const5.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const6.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const7.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const8.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const9.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const10.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const11.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const12.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const13.C: New test.\n\t* g++.dg/cpp1y/constexpr-tracking-const14.C: New test.\n\nFrom-SVN: r274671", "tree": {"sha": "d3254c67f6ed344600c62297817d2c44b595a9e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3254c67f6ed344600c62297817d2c44b595a9e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04e1749c557a5df14f8528efa451bb0e93afea80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e1749c557a5df14f8528efa451bb0e93afea80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e1749c557a5df14f8528efa451bb0e93afea80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e1749c557a5df14f8528efa451bb0e93afea80/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a9ea4fff4554d9dc0966e8f2598a01602df03cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9ea4fff4554d9dc0966e8f2598a01602df03cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9ea4fff4554d9dc0966e8f2598a01602df03cf"}], "stats": {"total": 527, "additions": 526, "deletions": 1}, "files": [{"sha": "c40bc9c15b961282bbda444c39aa13b393c250af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -1,3 +1,17 @@\n+2019-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91264 - detect modifying const objects in constexpr.\n+\t* constexpr.c (modifying_const_object_error): New function.\n+\t(cxx_eval_call_expression): Set TREE_READONLY on a CONSTRUCTOR of\n+\ta const-qualified object after it's been fully constructed.\n+\t(modifying_const_object_p): New function.\n+\t(cxx_eval_store_expression): Detect modifying a const object\n+\tduring constant expression evaluation.\n+\t(cxx_eval_increment_expression): Use a better location when building\n+\tup the store.\n+\t(cxx_eval_constant_expression) <case DECL_EXPR>: Mark a constant\n+\tobject's constructor TREE_READONLY.\n+\n 2019-08-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90393 - ICE with thow in ?:"}, {"sha": "dbd0dc3b445adafbb01e253932efbbaf9cbaab14", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 139, "deletions": 1, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -1575,6 +1575,19 @@ clear_no_implicit_zero (tree ctor)\n     }\n }\n \n+/* Complain about a const object OBJ being modified in a constant expression.\n+   EXPR is the MODIFY_EXPR expression performing the modification.  */\n+\n+static void\n+modifying_const_object_error (tree expr, tree obj)\n+{\n+  location_t loc = cp_expr_loc_or_input_loc (expr);\n+  auto_diagnostic_group d;\n+  error_at (loc, \"modifying a const object %qE is not allowed in \"\n+\t    \"a constant expression\", TREE_OPERAND (expr, 0));\n+  inform (location_of (obj), \"originally declared %<const%> here\");\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Evaluate the call expression tree T in the context of OLD_CALL expression\n    evaluation.  */\n@@ -1775,6 +1788,19 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \n   depth_ok = push_cx_call_context (t);\n \n+  /* Remember the object we are constructing.  */\n+  tree new_obj = NULL_TREE;\n+  if (DECL_CONSTRUCTOR_P (fun))\n+    {\n+      /* In a constructor, it should be the first `this' argument.\n+\t At this point it has already been evaluated in the call\n+\t to cxx_bind_parameters_in_call.  */\n+      new_obj = TREE_VEC_ELT (new_call.bindings, 0);\n+      STRIP_NOPS (new_obj);\n+      if (TREE_CODE (new_obj) == ADDR_EXPR)\n+\tnew_obj = TREE_OPERAND (new_obj, 0);\n+    }\n+\n   tree result = NULL_TREE;\n \n   constexpr_call *entry = NULL;\n@@ -1910,6 +1936,23 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t}\n \t    }\n \n+\t  /* At this point, the object's constructor will have run, so\n+\t     the object is no longer under construction, and its possible\n+\t     'const' semantics now apply.  Make a note of this fact by\n+\t     marking the CONSTRUCTOR TREE_READONLY.  */\n+\t  if (new_obj\n+\t      && CLASS_TYPE_P (TREE_TYPE (new_obj))\n+\t      && CP_TYPE_CONST_P (TREE_TYPE (new_obj)))\n+\t    {\n+\t      /* Subobjects might not be stored in ctx->values but we can\n+\t\t get its CONSTRUCTOR by evaluating *this.  */\n+\t      tree e = cxx_eval_constant_expression (ctx, new_obj,\n+\t\t\t\t\t\t     /*lval*/false,\n+\t\t\t\t\t\t     non_constant_p,\n+\t\t\t\t\t\t     overflow_p);\n+\t      TREE_READONLY (e) = true;\n+\t    }\n+\n \t  /* Forget the saved values of the callee's SAVE_EXPRs.  */\n \t  unsigned int i;\n \t  tree save_expr;\n@@ -3724,6 +3767,26 @@ maybe_simplify_trivial_copy (tree &target, tree &init)\n     }\n }\n \n+/* Return true if we are modifying something that is const during constant\n+   expression evaluation.  CODE is the code of the statement, OBJ is the\n+   object in question, MUTABLE_P is true if one of the subobjects were\n+   declared mutable.  */\n+\n+static bool\n+modifying_const_object_p (tree_code code, tree obj, bool mutable_p)\n+{\n+  /* If this is initialization, there's no problem.  */\n+  if (code != MODIFY_EXPR)\n+    return false;\n+\n+  /* [basic.type.qualifier] \"A const object is an object of type\n+     const T or a non-mutable subobject of a const object.\"  */\n+  if (mutable_p)\n+    return false;\n+\n+  return (TREE_READONLY (obj) || CP_TYPE_CONST_P (TREE_TYPE (obj)));\n+}\n+\n /* Evaluate an INIT_EXPR or MODIFY_EXPR.  */\n \n static tree\n@@ -3773,6 +3836,9 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n   /* Find the underlying variable.  */\n   releasing_vec refs;\n   tree object = NULL_TREE;\n+  /* If we're modifying a const object, save it.  */\n+  tree const_object_being_modified = NULL_TREE;\n+  bool mutable_p = false;\n   for (tree probe = target; object == NULL_TREE; )\n     {\n       switch (TREE_CODE (probe))\n@@ -3783,6 +3849,12 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t  {\n \t    tree ob = TREE_OPERAND (probe, 0);\n \t    tree elt = TREE_OPERAND (probe, 1);\n+\t    if (DECL_P (elt) && DECL_MUTABLE_P (elt))\n+\t      mutable_p = true;\n+\t    if (evaluated\n+\t\t&& modifying_const_object_p (TREE_CODE (t), probe, mutable_p)\n+\t\t&& const_object_being_modified == NULL_TREE)\n+\t      const_object_being_modified = probe;\n \t    if (TREE_CODE (probe) == ARRAY_REF)\n \t      {\n \t\telt = eval_and_check_array_index (ctx, probe, false,\n@@ -3811,6 +3883,10 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t}\n     }\n \n+  if (modifying_const_object_p (TREE_CODE (t), object, mutable_p)\n+      && const_object_being_modified == NULL_TREE)\n+    const_object_being_modified = object;\n+\n   /* And then find/build up our initializer for the path to the subobject\n      we're initializing.  */\n   tree *valp;\n@@ -3950,6 +4026,62 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       valp = &cep->value;\n     }\n \n+  /* Detect modifying a constant object in constexpr evaluation.\n+     We have found a const object that is being modified.  Figure out\n+     if we need to issue an error.  Consider\n+\n+     struct A {\n+       int n;\n+       constexpr A() : n(1) { n = 2; } // #1\n+     };\n+     struct B {\n+       const A a;\n+       constexpr B() { a.n = 3; } // #2\n+     };\n+    constexpr B b{};\n+\n+    #1 is OK, since we're modifying an object under construction, but\n+    #2 is wrong, since \"a\" is const and has been fully constructed.\n+    To track it, we use the TREE_READONLY bit in the object's CONSTRUCTOR\n+    which means that the object is read-only.  For the example above, the\n+    *ctors stack at the point of #2 will look like:\n+\n+      ctors[0] = {.a={.n=2}}  TREE_READONLY = 0\n+      ctors[1] = {.n=2}       TREE_READONLY = 1\n+\n+    and we're modifying \"b.a\", so we search the stack and see if the\n+    constructor for \"b.a\" has already run.  */\n+  if (const_object_being_modified)\n+    {\n+      bool fail = false;\n+      if (!CLASS_TYPE_P (TREE_TYPE (const_object_being_modified)))\n+\tfail = true;\n+      else\n+\t{\n+\t  /* [class.ctor]p5 \"A constructor can be invoked for a const,\n+\t     volatile, or const volatile object.  const and volatile\n+\t     semantics are not applied on an object under construction.\n+\t     They come into effect when the constructor for the most\n+\t     derived object ends.\"  */\n+\t  tree elt;\n+\t  unsigned int i;\n+\t  FOR_EACH_VEC_ELT (*ctors, i, elt)\n+\t    if (same_type_ignoring_top_level_qualifiers_p\n+\t\t(TREE_TYPE (const_object_being_modified), TREE_TYPE (elt)))\n+\t      {\n+\t\tfail = TREE_READONLY (elt);\n+\t\tbreak;\n+\t      }\n+\t}\n+      if (fail)\n+\t{\n+\t  if (!ctx->quiet)\n+\t    modifying_const_object_error (t, const_object_being_modified);\n+\t  *non_constant_p = true;\n+\t  return t;\n+\t}\n+    }\n+\n   if (!preeval)\n     {\n       /* Create a new CONSTRUCTOR in case evaluation of the initializer\n@@ -4063,7 +4195,8 @@ cxx_eval_increment_expression (const constexpr_ctx *ctx, tree t,\n     VERIFY_CONSTANT (mod);\n \n   /* Storing the modified value.  */\n-  tree store = build2 (MODIFY_EXPR, type, op, mod);\n+  tree store = build2_loc (cp_expr_loc_or_loc (t, input_location),\n+\t\t\t   MODIFY_EXPR, type, op, mod);\n   cxx_eval_constant_expression (ctx, store,\n \t\t\t\ttrue, non_constant_p, overflow_p);\n   ggc_free (store);\n@@ -4650,6 +4783,11 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t\t non_constant_p, overflow_p);\n \t    /* Don't share a CONSTRUCTOR that might be changed.  */\n \t    init = unshare_constructor (init);\n+\t    /* Remember that a constant object's constructor has already\n+\t       run.  */\n+\t    if (CLASS_TYPE_P (TREE_TYPE (r))\n+\t\t&& CP_TYPE_CONST_P (TREE_TYPE (r)))\n+\t      TREE_READONLY (init) = true;\n \t    ctx->values->put (r, init);\n \t  }\n \telse if (ctx == &new_ctx)"}, {"sha": "ad514b11b8aa0c0c78e0b4f409f054d593d18e19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -1,3 +1,21 @@\n+2019-08-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/91264 - detect modifying const objects in constexpr.\n+\t* g++.dg/cpp1y/constexpr-tracking-const1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const2.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const3.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const4.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const5.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const6.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const7.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const8.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const9.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const10.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const11.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const12.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const13.C: New test.\n+\t* g++.dg/cpp1y/constexpr-tracking-const14.C: New test.\n+\n 2019-08-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/elab8.adb, gnat.dg/elab8_gen.adb,"}, {"sha": "e081a5356595a0241a460f2f5a8018a9dfef2f5f", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const1.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const1.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,72 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+constexpr void\n+mod (int &r)\n+{\n+  r = 99; // { dg-error \"modifying a const object\" }\n+}\n+\n+constexpr int\n+fn1 ()\n+{\n+  const int i = 0; // { dg-message \"originally declared\" }\n+  mod (const_cast<int &>(i)); // { dg-message \"in .constexpr. expansion of \" }\n+  return i;\n+}\n+\n+constexpr int i1 = fn1 (); // { dg-message \"in .constexpr. expansion of \" }\n+\n+constexpr int\n+fn2 ()\n+{\n+  const int i = 5; // { dg-message \"originally declared\" }\n+  const_cast<int &>(i) = 10; // { dg-error \"modifying a const object\" }\n+  return i;\n+}\n+\n+constexpr int i2 = fn2 (); // { dg-message \"in .constexpr. expansion of \" }\n+\n+constexpr int\n+fn3 ()\n+{\n+  const int i = 5; // { dg-message \"originally declared\" }\n+  ++const_cast<int &>(i); // { dg-error \"modifying a const object\" }\n+  return i;\n+}\n+\n+constexpr int i3 = fn3 (); // { dg-message \"in .constexpr. expansion of \" }\n+\n+constexpr int\n+fn4 ()\n+{\n+  const int i = 5; // { dg-message \"originally declared\" }\n+  const_cast<int &>(i)--; // { dg-error \"modifying a const object\" }\n+  return i;\n+}\n+\n+constexpr int i4 = fn4 (); // { dg-message \"in .constexpr. expansion of \" }\n+\n+constexpr int\n+fn5 ()\n+{\n+  const int i = 5; // { dg-message \"originally declared\" }\n+  const_cast<int &>(i) += 2; // { dg-error \"modifying a const object\" }\n+  return i;\n+}\n+\n+constexpr int i5 = fn5 (); // { dg-message \"in .constexpr. expansion of \" }\n+\n+constexpr int\n+fn6 ()\n+{\n+  // This is OK.\n+  int i = 3;\n+  const int *cip = &i;\n+  int *ip = const_cast<int *>(cip);\n+  *ip = 4;\n+  return i;\n+}\n+\n+constexpr int i6 = fn6 ();\n+static_assert(i6 == 4, \"\");"}, {"sha": "53acb37beb85a56cae91710f3cd373a29b9113eb", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const10.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct B {\n+  B() = default;\n+  int i;\n+};\n+\n+constexpr B bar()\n+{\n+    constexpr B b = B(); // { dg-message \"originally declared\" }\n+    B *p = const_cast<B*>(&b);\n+\n+    p->i = 11; // { dg-error \"modifying a const object\" }\n+\n+   return *p;\n+}\n+\n+void foo()\n+{  \n+   constexpr B y = bar(); // { dg-message \"in .constexpr. expansion of\" }\n+}"}, {"sha": "2b351cd013af6ab688ed75a8480288ec641d16a0", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const11.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const11.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct S {\n+    int a = 1;\n+    int * ptr = &a;\n+};\n+\n+constexpr bool f() {\n+    auto const s = S{}; // { dg-message \"originally declared\" }\n+    *s.ptr = 2; // { dg-error \"modifying a const object\" }\n+    return s.a == 2;\n+}\n+\n+static_assert(f(), \"\"); // { dg-error \"non-constant condition\" }\n+// { dg-message \"in 'constexpr' expansion of\" \"\" { target *-*-* } .-1 }"}, {"sha": "d83e2794f7f5c2e4837e0fc54eab0946cc9aaa70", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const12.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const12.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  const int n;\n+  int m;\n+  constexpr A() : n(1), m(2) { }\n+};\n+struct B {\n+  A a;\n+  constexpr B() {\n+    int *p = &a.m;\n+    *p = 3;\n+  }\n+};\n+constexpr B b;\n+static_assert(b.a.m == 3, \"\");"}, {"sha": "bc7faa3c2500d5fdec7a3027b23e72d4f76245ff", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const13.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const13.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  mutable int i;\n+  constexpr A() : i(0) { }\n+};\n+struct B {\n+  A a;\n+  constexpr B() : a{} { }\n+};\n+\n+constexpr void\n+g ()\n+{\n+  const B b;\n+  b.a.i = 42;\n+}\n+\n+static_assert((g(), 1), \"\");"}, {"sha": "45c4fcf50be7a740dbdcb833e61f9e116061f7ac", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const14.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const14.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct F {\n+  const int f;\n+  constexpr F() : f(9) { }\n+};\n+\n+struct C {\n+  int n;\n+  const F f;\n+  constexpr C() : n(1) { n = 66; }\n+};\n+\n+struct A {\n+  int r;\n+  const C c;\n+  constexpr A() : r(11) { r = 14; const_cast<C &>(c).n = 42; } // { dg-error \"modifying a const object\" }\n+};\n+\n+struct D {\n+  const A a;\n+  constexpr D() { } // { dg-message \"in .constexpr. expansion of\" }\n+};\n+\n+struct E {\n+  const D d;\n+  constexpr E() { } // { dg-message \"in .constexpr. expansion of\" }\n+};\n+\n+struct B {\n+  const E e;\n+  constexpr B(bool) { } // { dg-message \"in .constexpr. expansion of\" }\n+};\n+\n+constexpr B b(false); // { dg-message \"in .constexpr. expansion of\" }\n+// { dg-message \"originally declared\" \"\" { target *-*-* } .-1 }\n+static_assert(b.e.d.a.c.n == 2, \"\"); // { dg-error \"non-constant condition\" }"}, {"sha": "9803309cacef089a310a078b53ae4d70b908917c", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const2.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct X {\n+  int j;\n+  constexpr X() : j(0) { }\n+};\n+\n+struct Y {\n+  X x;\n+  constexpr Y() : x{} { }\n+};\n+\n+constexpr void\n+g ()\n+{\n+  const Y y; // { dg-message \"originally declared\" }\n+  Y *p = const_cast<Y *>(&y);\n+  p->x.j = 99; // { dg-error \"modifying a const object\" }\n+}\n+\n+static_assert((g() , 1), \"\"); // { dg-error \"non-constant condition\" }\n+// { dg-message \"in 'constexpr' expansion of\" \"\" { target *-*-* } .-1 }"}, {"sha": "6853775c1e239971c5688d39fd8ecf1a958c7c72", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const3.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  int n;\n+  constexpr A() : n(1) { n = 2; }\n+};\n+\n+struct B {\n+  const A a;\n+  constexpr B(bool b) {\n+    if (b)\n+      const_cast<A &>(a).n = 3; // { dg-error \"modifying a const object\" }\n+    }\n+};\n+\n+constexpr B b(false);\n+static_assert(b.a.n == 2, \"\");\n+\n+constexpr B b2(true); // { dg-message \"in .constexpr. expansion of \" }\n+// { dg-message \"originally declared\" \"\" { target *-*-* } .-1 } \n+static_assert((b2.a.n, 1), \"\");"}, {"sha": "8263a7cc5053d851a9197199d901677b2d457e33", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const4.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  const int n;\n+  constexpr A() : n(1) { }\n+};\n+struct B {\n+  A a;\n+  constexpr B() {\n+    int *p = const_cast<int *>(&a.n);\n+    *p = 3; // { dg-error \"modifying a const object\" }\n+  }\n+};\n+constexpr B b; // { dg-message \"in .constexpr. expansion of \" }\n+// { dg-message \"originally declared\" \"\" { target *-*-* } .-1 }\n+static_assert((b.a.n, 1), \"\");"}, {"sha": "bea54fb4fdeb9f9d30e5ad02c87b52f08d878068", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const5.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  mutable int n;\n+  constexpr A() : n(1) { n = 2; }\n+};\n+\n+struct B {\n+  const A a;\n+  constexpr B() {\n+    const_cast<A &>(a).n = 3;\n+  }\n+};\n+\n+constexpr B b{};\n+static_assert((b.a.n, 1), \"\");"}, {"sha": "54d83b17d39bf2c60a19a694be3a95bf0346c255", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const6.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const6.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct X {\n+  mutable int j;\n+  constexpr X() : j(0) { }\n+};\n+\n+struct Y {\n+  X x;\n+  constexpr Y() : x{} { }\n+};\n+\n+constexpr void\n+g ()\n+{\n+  const Y y;\n+  Y *p = const_cast<Y *>(&y);\n+  p->x.j = 99;\n+}\n+\n+static_assert((g(), 1), \"\");"}, {"sha": "922e8ff126f7d0c83d993e2a819e2bab9c9eb749", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const7.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const7.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct D { int n; };\n+\n+struct C { const D d; };\n+\n+struct A {\n+  C c;\n+  constexpr A() : c{} { }\n+};\n+\n+struct B {\n+  A a;\n+  constexpr B() {\n+    int &r = const_cast<int &>(a.c.d.n);\n+    r = 3; // { dg-error \"modifying a const object\" }\n+  }\n+};\n+\n+constexpr B b{}; // { dg-message \"in .constexpr. expansion of \" }\n+// { dg-message \"originally declared\" \"\" { target *-*-* } .-1 }\n+static_assert((b.a.c.d.n, 1), \"\");"}, {"sha": "2b3fe793f830416564ab29997dec80e9a4ad9310", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const8.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const8.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct B {\n+  int i;\n+  double d;\n+};\n+\n+constexpr B bar()\n+{\n+    constexpr B b = {10,10.10}; // { dg-message \"originally declared\" }\n+    B *p = const_cast<B*>(&b);\n+\n+    p->i = 11; // { dg-error \"modifying a const object\" }\n+    p->d = 11.11;\n+\n+   return *p;\n+}\n+\n+void foo()\n+{  \n+   constexpr B y = bar(); // { dg-message \"in .constexpr. expansion of\" }\n+}"}, {"sha": "0edec4d05cf12627b8d1e185bafeec7c314ad3f7", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-tracking-const9.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e1749c557a5df14f8528efa451bb0e93afea80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-tracking-const9.C?ref=04e1749c557a5df14f8528efa451bb0e93afea80", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/91264\n+// { dg-do compile { target c++14 } }\n+\n+struct B {\n+  int i;\n+  double d;\n+};\n+\n+constexpr B bar()\n+{\n+    constexpr B b{}; // { dg-message \"originally declared\" }\n+    B *p = const_cast<B*>(&b);\n+\n+    p->i = 11; // { dg-error \"modifying a const object\" }\n+    p->d = 11.11;\n+\n+   return *p;\n+}\n+\n+void foo()\n+{  \n+   constexpr B y = bar(); // { dg-message \"in .constexpr. expansion of\" }\n+}"}]}