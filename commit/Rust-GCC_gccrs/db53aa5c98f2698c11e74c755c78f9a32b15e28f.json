{"sha": "db53aa5c98f2698c11e74c755c78f9a32b15e28f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1M2FhNWM5OGYyNjk4YzExZTc0Yzc1NWM3OGY5YTMyYjE1ZTI4Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-06-29T08:22:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-06-29T08:22:35Z"}, "message": "utils.c (unchecked_convert): Tweak comment.\n\n\t* gcc-interface/utils.c (unchecked_convert): Tweak comment.  Only skip\n\tdereferences when padding to have the same size on both sides.  Do it\n\tfor destination types with self-referential size too.\n\nFrom-SVN: r272821", "tree": {"sha": "9fa157dfece1dea4149623e45254449fb946a2d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fa157dfece1dea4149623e45254449fb946a2d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db53aa5c98f2698c11e74c755c78f9a32b15e28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db53aa5c98f2698c11e74c755c78f9a32b15e28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db53aa5c98f2698c11e74c755c78f9a32b15e28f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db53aa5c98f2698c11e74c755c78f9a32b15e28f/comments", "author": null, "committer": null, "parents": [{"sha": "8623afc48b8125bf7c98f28d913def7f401570ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8623afc48b8125bf7c98f28d913def7f401570ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8623afc48b8125bf7c98f28d913def7f401570ca"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "4db9b2882127568b51093cbdd46bb25713209623", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db53aa5c98f2698c11e74c755c78f9a32b15e28f", "patch": "@@ -1,3 +1,9 @@\n+2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (unchecked_convert): Tweak comment.  Only skip\n+\tdereferences when padding to have the same size on both sides.  Do it\n+\tfor destination types with self-referential size too.\n+\n 2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: If the"}, {"sha": "c6942fe7761a72de2e22b4e00f03a5be27b97e48", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=db53aa5c98f2698c11e74c755c78f9a32b15e28f", "patch": "@@ -5265,8 +5265,8 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n   if (etype == type)\n     return expr;\n \n-  /* If both types are integral just do a normal conversion.\n-     Likewise for a conversion to an unconstrained array.  */\n+  /* If both types are integral or regular pointer, then just do a normal\n+     conversion.  Likewise for a conversion to an unconstrained array.  */\n   if (((INTEGRAL_TYPE_P (type)\n \t|| (POINTER_TYPE_P (type) && !TYPE_IS_THIN_POINTER_P (type))\n \t|| (code == RECORD_TYPE && TYPE_JUSTIFIED_MODULAR_P (type)))\n@@ -5397,14 +5397,16 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n      we need to pad to have the same size on both sides.\n \n      ??? We cannot do it unconditionally because unchecked conversions are\n-     used liberally by the front-end to implement polymorphism, e.g. in:\n+     used liberally by the front-end to implement interface thunks:\n \n+       type ada__tags__addr_ptr is access system.address;\n        S191s : constant ada__tags__addr_ptr := ada__tags__addr_ptr!(S190s);\n        return p___size__4 (p__object!(S191s.all));\n \n-     so we skip all expressions that are references.  */\n-  else if (!REFERENCE_CLASS_P (expr)\n+     so we need to skip dereferences.  */\n+  else if (!INDIRECT_REF_P (expr)\n \t   && !AGGREGATE_TYPE_P (etype)\n+\t   && ecode != UNCONSTRAINED_ARRAY_TYPE\n \t   && TREE_CONSTANT (TYPE_SIZE (type))\n \t   && (c = tree_int_cst_compare (TYPE_SIZE (etype), TYPE_SIZE (type))))\n     {\n@@ -5424,6 +5426,31 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t}\n     }\n \n+  /* Likewise if we are converting from a scalar type to a type with self-\n+     referential size.  We use the max size to do the padding in this case.  */\n+  else if (!INDIRECT_REF_P (expr)\n+\t   && !AGGREGATE_TYPE_P (etype)\n+\t   && ecode != UNCONSTRAINED_ARRAY_TYPE\n+\t   && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (type)))\n+    {\n+      tree new_size = max_size (TYPE_SIZE (type), true);\n+      c = tree_int_cst_compare (TYPE_SIZE (etype), new_size);\n+      if (c < 0)\n+\t{\n+\t  expr = convert (maybe_pad_type (etype, new_size, 0, Empty,\n+\t\t\t\t\t  false, false, false, true),\n+\t\t\t  expr);\n+\t  expr = unchecked_convert (type, expr, notrunc_p);\n+\t}\n+      else\n+\t{\n+\t  tree rec_type = maybe_pad_type (type, TYPE_SIZE (etype), 0, Empty,\n+\t\t\t\t\t  false, false, false, true);\n+\t  expr = unchecked_convert (rec_type, expr, notrunc_p);\n+\t  expr = build_component_ref (expr, TYPE_FIELDS (rec_type), false);\n+\t}\n+    }\n+\n   /* We have a special case when we are converting between two unconstrained\n      array types.  In that case, take the address, convert the fat pointer\n      types, and dereference.  */"}, {"sha": "aacf71c05ff7cde85d228f8c5ceabcf2ac405f0c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db53aa5c98f2698c11e74c755c78f9a32b15e28f", "patch": "@@ -1,3 +1,8 @@\n+2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/unchecked_convert1.ads: New test.\n+\t* gnat.dg/specs/unchecked_convert2.ads: Likewise.\n+\n 2019-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/size_clause3.ads: Adjust error message."}, {"sha": "53429cd38ff81217a3d6fb66b5589b099e4cd751", "filename": "gcc/testsuite/gnat.dg/specs/unchecked_convert1.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_convert1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_convert1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_convert1.ads?ref=db53aa5c98f2698c11e74c755c78f9a32b15e28f", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+with Ada.Unchecked_Conversion;\n+with System;\n+\n+package Unchecked_Convert1 is\n+\n+  type Rec (D : Boolean := False) is record\n+    case D is\n+      when True => I : Integer;\n+      when False => null;\n+    end case;\n+  end record;\n+\n+  function To_Rec is new Ada.Unchecked_Conversion (System.Address, Rec);\n+\n+  function F (A : System.Address) return Rec is (To_Rec (A));\n+\n+end Unchecked_Convert1;"}, {"sha": "8b04fc195414ce84cb56864c28c9ff1e5f076803", "filename": "gcc/testsuite/gnat.dg/specs/unchecked_convert2.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_convert2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db53aa5c98f2698c11e74c755c78f9a32b15e28f/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_convert2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Funchecked_convert2.ads?ref=db53aa5c98f2698c11e74c755c78f9a32b15e28f", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+with Ada.Unchecked_Conversion;\n+\n+package Unchecked_Convert2 is\n+\n+  type Address is access String;\n+  for Address'Size use Standard'Address_Size;\n+\n+  type Rec is record\n+    A : Address;\n+  end record;\n+\n+  function To_Integer is new Ada.Unchecked_Conversion (Address, Integer);\n+\n+  function F (R : Rec) return Integer is (To_Integer (R.A));\n+\n+end Unchecked_Convert2;"}]}