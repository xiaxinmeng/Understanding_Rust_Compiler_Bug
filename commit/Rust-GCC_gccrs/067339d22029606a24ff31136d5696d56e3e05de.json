{"sha": "067339d22029606a24ff31136d5696d56e3e05de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3MzM5ZDIyMDI5NjA2YTI0ZmYzMTEzNmQ1Njk2ZDU2ZTNlMDVkZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2015-11-03T00:31:18Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2015-11-03T00:31:18Z"}, "message": "ifcombine: factor out inner block viability test\n\nBail out early if the inner block has side effects or is otherwise not\neligible for ifcombine.\n\nfor  gcc/ChangeLog\n\n\t* tree-ssa-ifcombine.c (tree_ssa_ifcombine_bb_1): Factor out\n\tbb_no_side_effects_p tests...\n\t(tree_ssa_ifcombine_bb): ... here.\n\nFrom-SVN: r229691", "tree": {"sha": "62dc97fa8c6c93ca0eeac3251e4d590a1f3c167f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62dc97fa8c6c93ca0eeac3251e4d590a1f3c167f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/067339d22029606a24ff31136d5696d56e3e05de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067339d22029606a24ff31136d5696d56e3e05de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/067339d22029606a24ff31136d5696d56e3e05de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/067339d22029606a24ff31136d5696d56e3e05de/comments", "author": null, "committer": null, "parents": [{"sha": "828ca3d835ac006cbcb2e5b480c6429cc8a75bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828ca3d835ac006cbcb2e5b480c6429cc8a75bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828ca3d835ac006cbcb2e5b480c6429cc8a75bdd"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "63297775ec24898b8263302fd5676645aad9a496", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/067339d22029606a24ff31136d5696d56e3e05de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/067339d22029606a24ff31136d5696d56e3e05de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=067339d22029606a24ff31136d5696d56e3e05de", "patch": "@@ -1,5 +1,9 @@\n 2015-11-02  Alexandre Oliva <aoliva@redhat.com>\n \n+\t* tree-ssa-ifcombine.c (tree_ssa_ifcombine_bb_1): Factor out\n+\tbb_no_side_effects_p tests...\n+\t(tree_ssa_ifcombine_bb): ... here.\n+\n \tPR tree-optimization/68083\n \t* tree-ssa-ifcombine.c: Include tree-ssa.h.\n \t(bb_no_side_effects_p): Test for undefined uses too."}, {"sha": "2a2e38788d76dd94e63b8180557e0d3cc5389756", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/067339d22029606a24ff31136d5696d56e3e05de/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/067339d22029606a24ff31136d5696d56e3e05de/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=067339d22029606a24ff31136d5696d56e3e05de", "patch": "@@ -576,8 +576,7 @@ tree_ssa_ifcombine_bb_1 (basic_block inner_cond_bb, basic_block outer_cond_bb,\n      the inner cond_bb having no side-effects.  */\n   if (phi_pred_bb != else_bb\n       && recognize_if_then_else (outer_cond_bb, &inner_cond_bb, &else_bb)\n-      && same_phi_args_p (outer_cond_bb, phi_pred_bb, else_bb)\n-      && bb_no_side_effects_p (inner_cond_bb))\n+      && same_phi_args_p (outer_cond_bb, phi_pred_bb, else_bb))\n     {\n       /* We have\n \t   <outer_cond_bb>\n@@ -595,8 +594,7 @@ tree_ssa_ifcombine_bb_1 (basic_block inner_cond_bb, basic_block outer_cond_bb,\n   /* And a version where the outer condition is negated.  */\n   if (phi_pred_bb != else_bb\n       && recognize_if_then_else (outer_cond_bb, &else_bb, &inner_cond_bb)\n-      && same_phi_args_p (outer_cond_bb, phi_pred_bb, else_bb)\n-      && bb_no_side_effects_p (inner_cond_bb))\n+      && same_phi_args_p (outer_cond_bb, phi_pred_bb, else_bb))\n     {\n       /* We have\n \t   <outer_cond_bb>\n@@ -617,8 +615,7 @@ tree_ssa_ifcombine_bb_1 (basic_block inner_cond_bb, basic_block outer_cond_bb,\n      having no side-effects.  */\n   if (phi_pred_bb != then_bb\n       && recognize_if_then_else (outer_cond_bb, &then_bb, &inner_cond_bb)\n-      && same_phi_args_p (outer_cond_bb, phi_pred_bb, then_bb)\n-      && bb_no_side_effects_p (inner_cond_bb))\n+      && same_phi_args_p (outer_cond_bb, phi_pred_bb, then_bb))\n     {\n       /* We have\n \t   <outer_cond_bb>\n@@ -635,8 +632,7 @@ tree_ssa_ifcombine_bb_1 (basic_block inner_cond_bb, basic_block outer_cond_bb,\n   /* And a version where the outer condition is negated.  */\n   if (phi_pred_bb != then_bb\n       && recognize_if_then_else (outer_cond_bb, &inner_cond_bb, &then_bb)\n-      && same_phi_args_p (outer_cond_bb, phi_pred_bb, then_bb)\n-      && bb_no_side_effects_p (inner_cond_bb))\n+      && same_phi_args_p (outer_cond_bb, phi_pred_bb, then_bb))\n     {\n       /* We have\n \t   <outer_cond_bb>\n@@ -673,7 +669,8 @@ tree_ssa_ifcombine_bb (basic_block inner_cond_bb)\n        if (a && b)\n \t ;\n      This requires a single predecessor of the inner cond_bb.  */\n-  if (single_pred_p (inner_cond_bb))\n+  if (single_pred_p (inner_cond_bb)\n+      && bb_no_side_effects_p (inner_cond_bb))\n     {\n       basic_block outer_cond_bb = single_pred (inner_cond_bb);\n "}]}