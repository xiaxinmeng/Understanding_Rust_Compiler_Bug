{"sha": "46cb04410da4ba4fa10070a0eec7a037ff6152a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjYjA0NDEwZGE0YmE0ZmExMDA3MGEwZWVjN2EwMzdmZjYxNTJhNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-08-01T10:57:03Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-08-01T10:57:03Z"}, "message": "invoke.texi (l1-cache-size): Update documentation.\n\n\t* doc/invoke.texi (l1-cache-size): Update documentation.\n\t(l2-cache-size): Document.\n\t* params.h (L2_CACHE_SIZE): New macro.\n\t* tree-ssa-loop-prefetch.c (L1_CACHE_SIZE_BYTES): Reflect\n\tthat L1_CACHE_SIZE is in kB now.\n\t(L2_CACHE_SIZE_BYTES): New macro.\n\t(tree_ssa_prefetch_arrays): Show size in kB.\n\t* config/i386/i386.h (struct processor_costs): Add l1_cache_size\n\tand l2_cache_size fields.\n\t* config/i386/driver-i386.c (describe_cache): Detect cache size\n\tin kB.\n\t* config/i386/i386.c (size_cost, i386_cost, i486_cost,pentium_cost,\n\tpentiumpro_cost, geode_cost, k6_cost, athlon_cost, k8_cost,\n\tamdfam10_cost, pentium4_cost, nocona_cost, core2_cost,\n\tgeneric64_cost, generic32_cost): Add l1_cache_size and l2_cache_size.\n\t(override_options): Set l1-cache-size and l2-cache-size to default\n\tvalues if not specified otherwise.\n\t* params.def (PARAM_L1_CACHE_SIZE): Change to set in kB.\n\t(PARAM_L2_CACHE_SIZE): New.\n\nFrom-SVN: r127117", "tree": {"sha": "369e177f440720774bed96e048c8818f953265a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/369e177f440720774bed96e048c8818f953265a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46cb04410da4ba4fa10070a0eec7a037ff6152a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cb04410da4ba4fa10070a0eec7a037ff6152a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cb04410da4ba4fa10070a0eec7a037ff6152a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cb04410da4ba4fa10070a0eec7a037ff6152a7/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea339ea4d9c3e04ae17da6bf389617eb0251e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea339ea4d9c3e04ae17da6bf389617eb0251e57"}], "stats": {"total": 97, "additions": 84, "deletions": 13}, "files": [{"sha": "178b736c9f76199bfe87f65c7ce928ab1d88b926", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -1,3 +1,25 @@\n+2007-08-01  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\t* doc/invoke.texi (l1-cache-size): Update documentation.\n+\t(l2-cache-size): Document.\n+\t* params.h (L2_CACHE_SIZE): New macro.\n+\t* tree-ssa-loop-prefetch.c (L1_CACHE_SIZE_BYTES): Reflect\n+\tthat L1_CACHE_SIZE is in kB now.\n+\t(L2_CACHE_SIZE_BYTES): New macro.\n+\t(tree_ssa_prefetch_arrays): Show size in kB.\n+\t* config/i386/i386.h (struct processor_costs): Add l1_cache_size\n+\tand l2_cache_size fields.\n+\t* config/i386/driver-i386.c (describe_cache): Detect cache size\n+\tin kB.\n+\t* config/i386/i386.c (size_cost, i386_cost, i486_cost,pentium_cost,\n+\tpentiumpro_cost, geode_cost, k6_cost, athlon_cost, k8_cost,\n+\tamdfam10_cost, pentium4_cost, nocona_cost, core2_cost,\n+\tgeneric64_cost, generic32_cost): Add l1_cache_size and l2_cache_size.\n+\t(override_options): Set l1-cache-size and l2-cache-size to default\n+\tvalues if not specified otherwise.\n+\t* params.def (PARAM_L1_CACHE_SIZE): Change to set in kB.\n+\t(PARAM_L2_CACHE_SIZE): New.\n+\n 2007-08-01  Nigel Stephens  <nigel@mips.com>\n \t    David Ung  <davidu@mips.com>\n \t    Thiemo Seufer  <ths@mips.com>"}, {"sha": "1dbc783beaaf37d0e4ac509a7696573238a75991", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -56,14 +56,11 @@ describe_cache (unsigned l1_sizekb, unsigned l1_line,\n \t\tunsigned l1_assoc ATTRIBUTE_UNUSED)\n {\n   char size[1000], line[1000];\n-  unsigned size_in_lines;\n \n   /* At the moment, gcc middle-end does not use the information about the\n      associativity of the cache.  */\n \n-  size_in_lines = (l1_sizekb * 1024) / l1_line;\n-\n-  sprintf (size, \"--param l1-cache-size=%u\", size_in_lines);\n+  sprintf (size, \"--param l1-cache-size=%u\", l1_sizekb);\n   sprintf (line, \"--param l1-cache-line-size=%u\", l1_line);\n \n   return concat (size, \" \", line, \" \", NULL);"}, {"sha": "cf8b5e7f22638bcee5c2c2b4b4605596266df5ed", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -113,6 +113,8 @@ struct processor_costs size_cost = {\t/* costs for tuning for size */\n   {3, 3, 3},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  0,\t\t\t\t\t/* size of l1 cache  */\n+  0,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n   0,\t\t\t\t\t/* number of parallel prefetches */\n   2,\t\t\t\t\t/* Branch cost */\n@@ -171,6 +173,8 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   {4, 8, 16},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  0,\t\t\t\t\t/* size of l1 cache  */\n+  0,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n   0,\t\t\t\t\t/* number of parallel prefetches */\n   1,\t\t\t\t\t/* Branch cost */\n@@ -228,6 +232,10 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   {4, 8, 16},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  4,\t\t\t\t\t/* size of l1 cache.  486 has 8kB cache\n+\t\t\t\t\t   shared for code and data, so 4kB is\n+\t\t\t\t\t   not really precise.  */\n+  4,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n   0,\t\t\t\t\t/* number of parallel prefetches */\n   1,\t\t\t\t\t/* Branch cost */\n@@ -285,6 +293,8 @@ struct processor_costs pentium_cost = {\n   {4, 8, 16},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  8,\t\t\t\t\t/* size of l1 cache.  */\n+  8,\t\t\t\t\t/* size of l2 cache  */\n   0,\t\t\t\t\t/* size of prefetch block */\n   0,\t\t\t\t\t/* number of parallel prefetches */\n   2,\t\t\t\t\t/* Branch cost */\n@@ -342,6 +352,8 @@ struct processor_costs pentiumpro_cost = {\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n+  8,\t\t\t\t\t/* size of l1 cache.  */\n+  256,\t\t\t\t\t/* size of l2 cache  */\n   32,\t\t\t\t\t/* size of prefetch block */\n   6,\t\t\t\t\t/* number of parallel prefetches */\n   2,\t\t\t\t\t/* Branch cost */\n@@ -407,6 +419,8 @@ struct processor_costs geode_cost = {\n   {1, 1, 1},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   1,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of l1 cache.  */\n+  128,\t\t\t\t\t/* size of l2 cache.  */\n   32,\t\t\t\t\t/* size of prefetch block */\n   1,\t\t\t\t\t/* number of parallel prefetches */\n   1,\t\t\t\t\t/* Branch cost */\n@@ -464,6 +478,11 @@ struct processor_costs k6_cost = {\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   6,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  32,\t\t\t\t\t/* size of l2 cache.  Some models\n+\t\t\t\t\t   have integrated l2 cache, but\n+\t\t\t\t\t   optimizing for k6 is not important\n+\t\t\t\t\t   enough to worry about that.  */\n   32,\t\t\t\t\t/* size of prefetch block */\n   1,\t\t\t\t\t/* number of parallel prefetches */\n   1,\t\t\t\t\t/* Branch cost */\n@@ -521,6 +540,8 @@ struct processor_costs athlon_cost = {\n   {4, 4, 5},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of l1 cache.  */\n+  256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   6,\t\t\t\t\t/* number of parallel prefetches */\n   5,\t\t\t\t\t/* Branch cost */\n@@ -581,6 +602,8 @@ struct processor_costs k8_cost = {\n   {4, 4, 5},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  64,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   /* New AMD processors never drop prefetches; if they cannot be performed\n      immediately, they are queued.  We set number of simultaneous prefetches\n@@ -654,6 +677,8 @@ struct processor_costs amdfam10_cost = {\n                                                                 1/1  1/1\n \t\t\t\t\t    MOVD reg32, xmmreg \tDouble\tFADD 3\n                                                                 1/1  1/1 */\n+  64,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   /* New AMD processors never drop prefetches; if they cannot be performed\n      immediately, they are queued.  We set number of simultaneous prefetches\n@@ -721,6 +746,8 @@ struct processor_costs pentium4_cost = {\n   {2, 2, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   10,\t\t\t\t\t/* MMX or SSE register to integer */\n+  8,\t\t\t\t\t/* size of l1 cache.  */\n+  256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   6,\t\t\t\t\t/* number of parallel prefetches */\n   2,\t\t\t\t\t/* Branch cost */\n@@ -779,6 +806,8 @@ struct processor_costs nocona_cost = {\n   {12, 12, 12},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   8,\t\t\t\t\t/* MMX or SSE register to integer */\n+  8,\t\t\t\t\t/* size of l1 cache.  */\n+  1024,\t\t\t\t\t/* size of l2 cache.  */\n   128,\t\t\t\t\t/* size of prefetch block */\n   8,\t\t\t\t\t/* number of parallel prefetches */\n   1,\t\t\t\t\t/* Branch cost */\n@@ -838,6 +867,8 @@ struct processor_costs core2_cost = {\n   {4, 4, 4},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   2,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  2048,\t\t\t\t\t/* size of l2 cache.  */\n   128,\t\t\t\t\t/* size of prefetch block */\n   8,\t\t\t\t\t/* number of parallel prefetches */\n   3,\t\t\t\t\t/* Branch cost */\n@@ -903,6 +934,8 @@ struct processor_costs generic64_cost = {\n   {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   6,\t\t\t\t\t/* number of parallel prefetches */\n   /* Benchmarks shows large regressions on K8 sixtrack benchmark when this value\n@@ -963,6 +996,8 @@ struct processor_costs generic32_cost = {\n   {8, 8, 8},\t\t\t\t/* cost of storing SSE registers\n \t\t\t\t\t   in SImode, DImode and TImode */\n   5,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  256,\t\t\t\t\t/* size of l2 cache.  */\n   64,\t\t\t\t\t/* size of prefetch block */\n   6,\t\t\t\t\t/* number of parallel prefetches */\n   3,\t\t\t\t\t/* Branch cost */\n@@ -2419,6 +2454,10 @@ override_options (void)\n \t\t     ix86_cost->simultaneous_prefetches);\n   if (!PARAM_SET_P (PARAM_L1_CACHE_LINE_SIZE))\n     set_param_value (\"l1-cache-line-size\", ix86_cost->prefetch_block);\n+  if (!PARAM_SET_P (PARAM_L1_CACHE_SIZE))\n+    set_param_value (\"l1-cache-size\", ix86_cost->l1_cache_size);\n+  if (!PARAM_SET_P (PARAM_L2_CACHE_SIZE))\n+    set_param_value (\"l2-cache-size\", ix86_cost->l2_cache_size);\n }\n \f\n /* Return true if this goes in large data/bss.  */"}, {"sha": "54601299c1072c12fd14d38dc2016c0a19bb003d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -124,6 +124,8 @@ struct processor_costs {\n \t\t\t\t   in SImode, DImode and TImode*/\n   const int mmxsse_to_integer;\t/* cost of moving mmxsse register to\n \t\t\t\t   integer and vice versa.  */\n+  const int l1_cache_size;\t/* size of l1 cache, in kilobytes.  */\n+  const int l2_cache_size;\t/* size of l2 cache, in kilobytes.  */\n   const int prefetch_block;\t/* bytes moved to cache for prefetch.  */\n   const int simultaneous_prefetches; /* number of parallel prefetch\n \t\t\t\t   operations.  */"}, {"sha": "d5974ee195f70c716509104438cc6676f5225097", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -6958,7 +6958,10 @@ Maximum number of prefetches that can run at the same time.\n The size of cache line in L1 cache, in bytes.\n \n @item l1-cache-size\n-The number of cache lines in L1 cache.\n+The size of L1 cache, in kilobytes.\n+\n+@item l2-cache-size\n+The size of L2 cache, in kilobytes.\n \n @item use-canonical-types\n Whether the compiler should use the ``canonical'' type system.  By"}, {"sha": "32216764473376c1d59644ed44cc0a9605648495", "filename": "gcc/params.def", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -656,12 +656,12 @@ DEFPARAM (PARAM_SIMULTANEOUS_PREFETCHES,\n \t  \"The number of prefetches that can run at the same time\",\n \t  3, 0, 0)\n \n-/* The size of L1 cache in number of cache lines.  */\n+/* The size of L1 cache in kB.  */\n \n DEFPARAM (PARAM_L1_CACHE_SIZE,\n \t  \"l1-cache-size\",\n \t  \"The size of L1 cache\",\n-\t  1024, 0, 0)\n+\t  64, 0, 0)\n \n /* The size of L1 cache line in bytes.  */\n \n@@ -670,6 +670,13 @@ DEFPARAM (PARAM_L1_CACHE_LINE_SIZE,\n \t  \"The size of L1 cache line\",\n \t  32, 0, 0)\n \n+/* The size of L2 cache in kB.  */\n+\n+DEFPARAM (PARAM_L2_CACHE_SIZE,\n+\t  \"l2-cache-size\",\n+\t  \"The size of L2 cache\",\n+\t  512, 0, 0)\n+\n /* Whether we should use canonical types rather than deep \"structural\"\n    type checking.  Setting this value to 1 (the default) improves\n    compilation performance in the C++ and Objective-C++ front end;"}, {"sha": "71e6b21ef711194da60214dbe722cd260bdb6087", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -165,6 +165,8 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_L1_CACHE_SIZE)\n #define L1_CACHE_LINE_SIZE \\\n   PARAM_VALUE (PARAM_L1_CACHE_LINE_SIZE)\n+#define L2_CACHE_SIZE \\\n+  PARAM_VALUE (PARAM_L2_CACHE_SIZE)\n #define USE_CANONICAL_TYPES \\\n   PARAM_VALUE (PARAM_USE_CANONICAL_TYPES)\n #endif /* ! GCC_PARAMS_H */"}, {"sha": "28cd3223c9cbab4db2dce472e95e5b045b558886", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46cb04410da4ba4fa10070a0eec7a037ff6152a7/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=46cb04410da4ba4fa10070a0eec7a037ff6152a7", "patch": "@@ -166,9 +166,8 @@ along with GCC; see the file COPYING3.  If not see\n #define HAVE_prefetch 0\n #endif\n \n-#define L1_CACHE_SIZE_BYTES ((unsigned) (L1_CACHE_SIZE * L1_CACHE_LINE_SIZE))\n-/* TODO:  Add parameter to specify L2 cache size.  */\n-#define L2_CACHE_SIZE_BYTES (8 * L1_CACHE_SIZE_BYTES)\n+#define L1_CACHE_SIZE_BYTES ((unsigned) (L1_CACHE_SIZE * 1024))\n+#define L2_CACHE_SIZE_BYTES ((unsigned) (L2_CACHE_SIZE * 1024))\n \n /* We consider a memory access nontemporal if it is not reused sooner than\n    after L2_CACHE_SIZE_BYTES of memory are accessed.  However, we ignore\n@@ -1549,10 +1548,10 @@ tree_ssa_prefetch_arrays (void)\n \t       SIMULTANEOUS_PREFETCHES);\n       fprintf (dump_file, \"    prefetch latency: %d\\n\", PREFETCH_LATENCY);\n       fprintf (dump_file, \"    prefetch block size: %d\\n\", PREFETCH_BLOCK);\n-      fprintf (dump_file, \"    L1 cache size: %d lines, %d bytes\\n\",\n-\t       L1_CACHE_SIZE, L1_CACHE_SIZE_BYTES);\n+      fprintf (dump_file, \"    L1 cache size: %d lines, %d kB\\n\",\n+\t       L1_CACHE_SIZE_BYTES / L1_CACHE_LINE_SIZE, L1_CACHE_SIZE);\n       fprintf (dump_file, \"    L1 cache line size: %d\\n\", L1_CACHE_LINE_SIZE);\n-      fprintf (dump_file, \"    L2 cache size: %d bytes\\n\", L2_CACHE_SIZE_BYTES);\n+      fprintf (dump_file, \"    L2 cache size: %d kB\\n\", L2_CACHE_SIZE);\n       fprintf (dump_file, \"\\n\");\n     }\n "}]}