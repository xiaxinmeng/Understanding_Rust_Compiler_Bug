{"sha": "dcca1b0510693e6e8c1fac3fef2cde2362772720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjYTFiMDUxMDY5M2U2ZThjMWZhYzNmZWYyY2RlMjM2Mjc3MjcyMA==", "commit": {"author": {"name": "Kazu Kirata", "email": "kazu@gcc.gnu.org", "date": "2015-12-13T13:06:12Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-12-13T13:06:12Z"}, "message": "[PATCH][PR target/19201] Peephole to improve clearing items in structure for m68k\n\n[PATCH][PR target/19201] Peephole to improve clearing items in structure for m68k\n\t* config/m68k/m68k.md (load feeding clear byte): New peephole2.\n\n\t* gcc.target/m68k/pr19201.c: New test.\n\nFrom-SVN: r231597", "tree": {"sha": "9fe989bae6ce5fb7f6edba2a3b9efe5708b71518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fe989bae6ce5fb7f6edba2a3b9efe5708b71518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcca1b0510693e6e8c1fac3fef2cde2362772720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcca1b0510693e6e8c1fac3fef2cde2362772720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcca1b0510693e6e8c1fac3fef2cde2362772720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcca1b0510693e6e8c1fac3fef2cde2362772720/comments", "author": null, "committer": null, "parents": [{"sha": "d686d8067a3d4ff451a6e55959feb56984f3d8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d686d8067a3d4ff451a6e55959feb56984f3d8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d686d8067a3d4ff451a6e55959feb56984f3d8be"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "730c79f118f764bb19b524ef1f00d49051845016", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcca1b0510693e6e8c1fac3fef2cde2362772720", "patch": "@@ -1,3 +1,7 @@\n+2015-12-13  Kazu Kirata  <kazu@gcc.gnu.org>\n+\n+\t* config/m68k/m68k.md (load feeding clear byte): New peephole2.\n+\n 2015-12-13  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (find_func_clobbers): Handle sizes and kinds"}, {"sha": "444515aea682d149bd84eadad3a1a089a1186b39", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=dcca1b0510693e6e8c1fac3fef2cde2362772720", "patch": "@@ -7601,3 +7601,36 @@\n \n (include \"cf.md\")\n (include \"sync.md\")\n+\n+;; Convert\n+;;\n+;; \tmove.l 4(%a0),%a0\n+;; \tclr.b (%a0,%a1.l)\n+;;\n+;; into\n+;;\n+;; \tadd.l 4(%a0),%a1\n+;; \tclr.b (%a1)\n+;;\n+;; The latter is smaller.  It is faster on all models except m68060.\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"\"))))\n+   (set (mem:QI (plus:SI (match_operand:SI 3 \"register_operand\" \"\")\n+\t\t\t (match_operand:SI 4 \"register_operand\" \"\")))\n+\t(const_int 0))]\n+  \"(optimize_size || !TUNE_68060)\n+   && (operands[0] == operands[3] || operands[0] == operands[4])\n+   && ADDRESS_REG_P (operands[1])\n+   && ADDRESS_REG_P ((operands[0] == operands[3]) ? operands[4] : operands[3])\n+   && peep2_reg_dead_p (2, operands[3])\n+   && peep2_reg_dead_p (2, operands[4])\"\n+  [(set (match_dup 5)\n+\t(plus:SI (match_dup 5)\n+\t\t (mem:SI (plus:SI (match_dup 1)\n+\t\t\t\t  (match_dup 2)))))\n+   (set (mem:QI (match_dup 5))\n+\t(const_int 0))]\n+  \"operands[5] = (operands[0] == operands[3]) ? operands[4] : operands[3];\")"}, {"sha": "3f0862e3abe8e5bc9d1ca14c069e11502efc46d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcca1b0510693e6e8c1fac3fef2cde2362772720", "patch": "@@ -1,5 +1,7 @@\n 2015-12-13  Jeff Law  <law@redhat.com>\n \n+\t* gcc.target/m68k/pr19201.c: New test.\n+\n \t* gcc.target/m68k/pr63347.c: Remove #include <stdlib> add -w to\n \tcommand line options.\n \t* gcc.target/m68k/20090709-1.c: Adjust expected output."}, {"sha": "dd81857f3f3accb7362e379ef494183fe186c515", "filename": "gcc/testsuite/gcc.target/m68k/pr19201.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr19201.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcca1b0510693e6e8c1fac3fef2cde2362772720/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr19201.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr19201.c?ref=dcca1b0510693e6e8c1fac3fef2cde2362772720", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-w -O2 -fomit-frame-pointer\" } */\n+/* { dg-final { scan-assembler-not \"%a.,%\\[ad\\]..l\" } } */\n+\n+struct X { \n+  char *a; \n+  /* other members */ \n+  int b; \n+}; \n+ \n+void f (struct X *x) \n+{ \n+  x->a[x->b] = 0; \n+}"}]}