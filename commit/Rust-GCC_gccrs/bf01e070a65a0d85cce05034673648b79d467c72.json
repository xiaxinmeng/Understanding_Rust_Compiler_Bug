{"sha": "bf01e070a65a0d85cce05034673648b79d467c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwMWUwNzBhNjVhMGQ4NWNjZTA1MDM0NjczNjQ4Yjc5ZDQ2N2M3Mg==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2016-07-25T11:55:45Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2016-07-25T11:55:45Z"}, "message": "Fix tests for targets with sizeof(int) != 32.\n\ngcc/testsuite/\n\n\t* gcc.dg/torture/pr69352.c (foo): Cast to intptr_t instead of long.\n\t* gcc.dg/torture/pr69771.c: Require int32plus.\n\t* gcc.dg/torture/pr71866.c (inb): Add cast to intptr_t.\n\nFrom-SVN: r238708", "tree": {"sha": "326b03a840b7f7338dfe4d31d50dfc5bee2f1c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326b03a840b7f7338dfe4d31d50dfc5bee2f1c60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf01e070a65a0d85cce05034673648b79d467c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf01e070a65a0d85cce05034673648b79d467c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf01e070a65a0d85cce05034673648b79d467c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf01e070a65a0d85cce05034673648b79d467c72/comments", "author": null, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c9ea62d6d07e20d23b0ff6ea5211a573b0b9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c9ea62d6d07e20d23b0ff6ea5211a573b0b9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c9ea62d6d07e20d23b0ff6ea5211a573b0b9c0"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "b8076b8eb34f7392a29abf1dff162c8a2ff7235e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf01e070a65a0d85cce05034673648b79d467c72", "patch": "@@ -1,3 +1,9 @@\n+2016-07-25  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* gcc.dg/torture/pr69352.c (foo): Cast to intptr_t instead of long.\n+\t* gcc.dg/torture/pr69771.c: Require int32plus.\n+\t* gcc.dg/torture/pr71866.c (inb): Add cast to intptr_t.\n+\n 2016-07-25  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/torture/pr71987.c: New test."}, {"sha": "12f7f91c2e6a760c333372dd44495542de338267", "filename": "gcc/testsuite/gcc.dg/torture/pr69352.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69352.c?ref=bf01e070a65a0d85cce05034673648b79d467c72", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n \n+#include <stdint.h>\n+\n int a[10][14], b, c, d, e, f, g, h, i;\n void bar (void);\n int\n@@ -13,7 +15,7 @@ foo (int x)\n   else\n     m = 13;\n   if (a[x][m])\n-    l = (long) foo;\n+    l = (intptr_t) foo;\n   a[x][i] = l;\n   while (c)\n     {"}, {"sha": "d03cbba668fbdff75d2f190ec1629ef4502b404c", "filename": "gcc/testsuite/gcc.dg/torture/pr69771.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69771.c?ref=bf01e070a65a0d85cce05034673648b79d467c72", "patch": "@@ -1,5 +1,6 @@\n /* PR rtl-optimization/69771 */\n /* { dg-do compile } */\n+/* { dg-require-effective-target int32plus } */\n \n unsigned char a = 5, c;\n unsigned short b = 0;"}, {"sha": "4d71e09f22a456ab6134f90efe78d9697a962c38", "filename": "gcc/testsuite/gcc.dg/torture/pr71866.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf01e070a65a0d85cce05034673648b79d467c72/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71866.c?ref=bf01e070a65a0d85cce05034673648b79d467c72", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-additional-options \"-ftree-pre -fcode-hoisting\" } */\n \n+#include <stdint.h>\n typedef unsigned char u8;\n extern unsigned long pci_io_base;\n u8 in_8 (const volatile void *);\n@@ -25,7 +26,7 @@ u8 readb (const volatile void * addr)\n static inline\n u8 inb (unsigned long port)\n {\n-  return readb((volatile void *)pci_io_base + port);\n+  return readb((volatile void *)(intptr_t)pci_io_base + port);\n }\n static inline\n void outb (u8 val, unsigned long port)"}]}