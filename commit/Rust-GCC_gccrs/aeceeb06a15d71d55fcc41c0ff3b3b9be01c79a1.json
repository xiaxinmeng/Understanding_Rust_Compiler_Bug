{"sha": "aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjZWViMDZhMTVkNzFkNTVmY2M0MWMwZmYzYjNiOWJlMDFjNzlhMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-01-18T08:17:06Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-01-18T08:17:06Z"}, "message": "cfgcleanup.c (cleanup_cfg): Detect cfglayout mode and set the CLEANUP_CFGLAYOUT flag when in cfglayout mode.\n\n\t* cfgcleanup.c (cleanup_cfg): Detect cfglayout mode and set\n\tthe CLEANUP_CFGLAYOUT flag when in cfglayout mode.\n\n\t* Makefile.c (GTFILES): Add cfglayout.h.\n\t* gengtype.c (open_base_files): Likewise.\n\t* cfglayout.c (cfg_layout_function_footer,\n\tcfg_layout_function_header) Reindent to make gengtype happy.\n\t* cfglayout.h (cfg_layout_function_footer,\n\tcfg_layout_function_header): Add GTY(()) marker.\n\n\t* ifcvt.c (noce_try_sign_mask): Make sure INSN_B is non-null.\n\nFrom-SVN: r120893", "tree": {"sha": "454922e216b8e55458271a4dd8cad1c5803279a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454922e216b8e55458271a4dd8cad1c5803279a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/comments", "author": null, "committer": null, "parents": [{"sha": "0eb5e2b93d6816f51c3d61ca837853c9364fbb6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb5e2b93d6816f51c3d61ca837853c9364fbb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb5e2b93d6816f51c3d61ca837853c9364fbb6f"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "caaf93290d23ce857e04d21751154d8cebb43ac3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -1,3 +1,17 @@\n+18-01-2007  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cfgcleanup.c (cleanup_cfg): Detect cfglayout mode and set\n+\tthe CLEANUP_CFGLAYOUT flag when in cfglayout mode.\n+\n+\t* Makefile.c (GTFILES): Add cfglayout.h.\n+\t* gengtype.c (open_base_files): Likewise.\n+\t* cfglayout.c (cfg_layout_function_footer,\n+\tcfg_layout_function_header) Reindent to make gengtype happy.\n+\t* cfglayout.h (cfg_layout_function_footer,\n+\tcfg_layout_function_header): Add GTY(()) marker.\n+\n+\t* ifcvt.c (noce_try_sign_mask): Make sure INSN_B is non-null.\n+\n 2007-01-18  Ben Elliston  <bje@au.ibm.com>\n \n \t* genautomata.c (write_automata): Include xstrerror output in the"}, {"sha": "f27214241abdbb4a190bc044a199348d73e50f54", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -2805,7 +2805,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/function.c $(srcdir)/except.h \\\n   $(srcdir)/gcse.c $(srcdir)/integrate.c $(srcdir)/lists.c $(srcdir)/optabs.c \\\n   $(srcdir)/profile.c $(srcdir)/regclass.c \\\n-  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c \\\n+  $(srcdir)/reg-stack.c $(srcdir)/cfglayout.c $(srcdir)/cfglayout.h \\\n   $(srcdir)/sdbout.c $(srcdir)/stor-layout.c \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(srcdir)/tree-mudflap.c $(srcdir)/tree-flow.h \\"}, {"sha": "7f2abf1c117c28249a6e6cbf7d28900e3a55d730", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -2220,6 +2220,12 @@ cleanup_cfg (int mode)\n {\n   bool changed = false;\n \n+  /* Set the cfglayout mode flag here.  We could update all the callers\n+     but that is just inconvenient, especially given that we eventually\n+     want to have cfglayout mode as the default.  */\n+  if (current_ir_type () == IR_RTL_CFGLAYOUT)\n+    mode |= CLEANUP_CFGLAYOUT;\n+\n   timevar_push (TV_CLEANUP_CFG);\n   if (delete_unreachable_blocks ())\n     {"}, {"sha": "eacfd996224aa965cc01826f0a4ac4a00f1e02cc", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -40,7 +40,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"vecprim.h\"\n \n /* Holds the interesting trailing notes for the function.  */\n-rtx cfg_layout_function_footer, cfg_layout_function_header;\n+rtx cfg_layout_function_footer;\n+rtx cfg_layout_function_header;\n \n static rtx skip_insns_after_block (basic_block);\n static void record_effective_endpoints (void);"}, {"sha": "e2c00ad2ab38de9a99f531aba6c14aae213a11b4", "filename": "gcc/cfglayout.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fcfglayout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fcfglayout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.h?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -23,7 +23,8 @@\n \n #include \"basic-block.h\"\n \n-extern rtx cfg_layout_function_footer;\n+extern GTY(()) rtx cfg_layout_function_footer;\n+extern GTY(()) rtx cfg_layout_function_header;\n \n extern void cfg_layout_initialize (unsigned int);\n extern void cfg_layout_finalize (void);"}, {"sha": "1413d6fb4387b70c661590f8ec53b3c149eec343", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -1107,7 +1107,7 @@ open_base_files (void)\n       \"hard-reg-set.h\", \"basic-block.h\", \"cselib.h\", \"insn-addr.h\",\n       \"optabs.h\", \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n       \"tree-flow.h\", \"reload.h\", \"cpp-id-data.h\", \"tree-chrec.h\",\n-      \"except.h\", \"output.h\", NULL\n+      \"cfglayout.h\", \"except.h\", \"output.h\", NULL\n     };\n     const char *const *ifp;\n     outf_p gtype_desc_c;"}, {"sha": "99228a8fa7e39e7fb2bbd36a3c575ce2a4a26955", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=aeceeb06a15d71d55fcc41c0ff3b3b9be01c79a1", "patch": "@@ -1866,6 +1866,7 @@ noce_try_sign_mask (struct noce_if_info *if_info)\n   rtx cond, t, m, c, seq;\n   enum machine_mode mode;\n   enum rtx_code code;\n+  bool b_unconditional;\n \n   if (no_new_pseudos)\n     return FALSE;\n@@ -1899,9 +1900,12 @@ noce_try_sign_mask (struct noce_if_info *if_info)\n \n   /* This is only profitable if T is cheap, or T is unconditionally\n      executed/evaluated in the original insn sequence.  The latter\n-     happens if INSN_B was taken from TEST_BB.  */\n+     happens if INSN_B was taken from TEST_BB, or if there was no\n+     INSN_B which can happen for e.g. conditional stores to memory.  */\n+  b_unconditional = (if_info->insn_b == NULL_RTX\n+\t\t     || BLOCK_FOR_INSN (if_info->insn_b) == if_info->test_bb);\n   if (rtx_cost (t, SET) >= COSTS_N_INSNS (2)\n-      && (BLOCK_FOR_INSN (if_info->insn_b) != if_info->test_bb\n+      && (!b_unconditional\n           || t != if_info->b))\n     return FALSE;\n "}]}