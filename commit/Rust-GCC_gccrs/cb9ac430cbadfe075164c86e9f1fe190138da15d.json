{"sha": "cb9ac430cbadfe075164c86e9f1fe190138da15d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5YWM0MzBjYmFkZmUwNzUxNjRjODZlOWYxZmUxOTAxMzhkYTE1ZA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-06-07T10:06:29Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-06-07T10:06:29Z"}, "message": "aarch64.c (aarch64_rtx_costs): Make sdiv more expensive than udiv.\n\n2017-06-07  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Make sdiv more expensive than udiv.\n\tRemove floating point cases from mod.\n\nFrom-SVN: r248953", "tree": {"sha": "f8e452b5601df1b8cd2a0216f7fd13699821ab75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8e452b5601df1b8cd2a0216f7fd13699821ab75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb9ac430cbadfe075164c86e9f1fe190138da15d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9ac430cbadfe075164c86e9f1fe190138da15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9ac430cbadfe075164c86e9f1fe190138da15d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9ac430cbadfe075164c86e9f1fe190138da15d/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e059725b244388bc318ff5fb4a4aeb4cca86abfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e059725b244388bc318ff5fb4a4aeb4cca86abfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e059725b244388bc318ff5fb4a4aeb4cca86abfd"}], "stats": {"total": 61, "additions": 53, "deletions": 8}, "files": [{"sha": "3b204f828ed6a12572f61090379aa88e9bef3748", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb9ac430cbadfe075164c86e9f1fe190138da15d", "patch": "@@ -1,3 +1,8 @@\n+2017-06-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Make sdiv more expensive than udiv.\n+\tRemove floating point cases from mod.\n+\n 2017-06-07  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/arm/aarch-cost-tables.h (cortexa53_extra_cost): Increase idiv cost."}, {"sha": "bce490ff555c83c875e06d3db30441a1d97a0ed3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cb9ac430cbadfe075164c86e9f1fe190138da15d", "patch": "@@ -7544,17 +7544,13 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n     case UMOD:\n       if (speed)\n \t{\n+\t  /* Slighly prefer UMOD over SMOD.  */\n \t  if (VECTOR_MODE_P (mode))\n \t    *cost += extra_cost->vect.alu;\n \t  else if (GET_MODE_CLASS (mode) == MODE_INT)\n \t    *cost += (extra_cost->mult[mode == DImode].add\n-\t\t      + extra_cost->mult[mode == DImode].idiv);\n-\t  else if (mode == DFmode)\n-\t    *cost += (extra_cost->fp[1].mult\n-\t\t      + extra_cost->fp[1].div);\n-\t  else if (mode == SFmode)\n-\t    *cost += (extra_cost->fp[0].mult\n-\t\t      + extra_cost->fp[0].div);\n+\t\t      + extra_cost->mult[mode == DImode].idiv\n+\t\t      + (code == MOD ? 1 : 0));\n \t}\n       return false;  /* All arguments need to be in registers.  */\n \n@@ -7568,7 +7564,9 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t  else if (GET_MODE_CLASS (mode) == MODE_INT)\n \t    /* There is no integer SQRT, so only DIV and UDIV can get\n \t       here.  */\n-\t    *cost += extra_cost->mult[mode == DImode].idiv;\n+\t    *cost += (extra_cost->mult[mode == DImode].idiv\n+\t\t     /* Slighly prefer UDIV over SDIV.  */\n+\t\t     + (code == DIV ? 1 : 0));\n \t  else\n \t    *cost += extra_cost->fp[mode == DFmode].div;\n \t}"}, {"sha": "bd6bd76e5511a7bccd8072446ed5284f8c767563", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb9ac430cbadfe075164c86e9f1fe190138da15d", "patch": "@@ -1,3 +1,7 @@\n+2017-06-07  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/sdiv_costs_1.c: New.\n+\n 2017-06-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80928"}, {"sha": "24d7f7df2089398288bdf67a489eb71d733a4450", "filename": "gcc/testsuite/gcc.target/aarch64/sdiv_costs_1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsdiv_costs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9ac430cbadfe075164c86e9f1fe190138da15d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsdiv_costs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsdiv_costs_1.c?ref=cb9ac430cbadfe075164c86e9f1fe190138da15d", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+/* Both sdiv and udiv can be used here, so prefer udiv.  */\n+int f1 (unsigned char *p)\n+{\n+  return 100 / p[1];\n+}\n+\n+int f2 (unsigned char *p, unsigned short x)\n+{\n+  return x / p[0];\n+}\n+\n+int f3 (unsigned char *p, int x)\n+{\n+  x &= 0x7fffffff;\n+  return x / p[0];\n+}\n+\n+int f5 (unsigned char *p, unsigned short x)\n+{\n+  return x % p[0];\n+}\n+\n+/* This should only generate signed divisions.  */\n+int f4 (unsigned char *p)\n+{\n+  return -100 / p[1];\n+}\n+\n+int f6 (unsigned char *p, short x)\n+{\n+  return x % p[0];\n+}\n+\n+/* { dg-final { scan-assembler-times \"udiv\\tw\\[0-9\\]+, w\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"sdiv\\tw\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */"}]}