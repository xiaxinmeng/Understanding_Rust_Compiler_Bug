{"sha": "54c1bf7801758caf2ff54917e79a8c239643061c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjMWJmNzgwMTc1OGNhZjJmZjU0OTE3ZTc5YThjMjM5NjQzMDYxYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-04T21:27:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-04T21:27:36Z"}, "message": "Makefile.am (std_headers): Remove cXXX from list.\n\n\n2002-01-04  Benjamin  Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am (std_headers): Remove cXXX from list.\n\t(c_base_srcdir): No bits subdirectory.\n\t(c_base_builddir): Same.\n\t(c_base_headers): Adjust names, add ciso646.\n\t(bits_headers): Remove std_xxx.h headers.\n\t* include/Makefile.in: Regenerate.\n\n\t* include/ext/iterator: Adjust includes.\n\t* include/ext/ropeimpl.h: Same.\n\t* include/ext/stl_hash_fun.h: Same.\n\t* include/ext/algorithm: Same.\n\n\t* include/backward/bvector.h: Adjust includes.\n\t* include/backward/vector.h: Same.\n\t* include/backward/strstream: Same.\n\t* include/backward/streambuf.h: Same.\n\t* include/backward/stack.h: Same.\n\t* include/backward/set.h: Same.\n\t* include/backward/queue.h: Same.\n\t* include/backward/multiset.h: Same.\n\t* include/backward/multimap.h: Same.\n\t* include/backward/map.h: Same.\n\t* include/backward/list.h: Same.\n\t* include/backward/iterator.h: Same.\n\t* include/backward/iostream.h: Same.\n\t* include/backward/iomanip.h: Same.\n\t* include/backward/fstream.h: Same.\n\t* include/backward/deque.h: Same.\n\t* include/backward/complex.h: Same.\n\n\t* include/bits/std_algorithm.h: Move to...\n\t* include/std/algorithm: ...here.\n\t* include/bits/std_iosfwd.h, std_locale.h, std_stack.h,\n\tstd_bitset.h, std_ios.h, std_map.h, std_stdexcept.h,\n\tstd_complex.h, std_iostream.h, std_memory.h, std_streambuf.h,\n\tstd_deque.h, std_istream.h, std_numeric.h, std_string.h,\n\tstd_fstream.h, std_ostream.h, std_utility.h, std_iterator.h,\n\tstd_queue.h, std_valarray.h, std_functional.h, std_limits.h,\n\tstd_set.h, std_vector.h, std_iomanip.h, std_list.h, std_sstream.h:\n\tSame.\n\n\t* include/c_std/bits/std_cassert.h: Move to...\n\t* include/c_std/cassert: Here.\n\t* include/c_std/std_cctype.h, std_cerrno.h, std_cfloat.h,\n\tstd_climits.h, std_clocale.h, std_cmath.h, std_csetjmp.h,\n\tstd_csignal.h, std_cstdarg.h, std_cstddef.h, std_cstdio.h,\n\tstd_cstdlib.h, std_cstring.h, std_ctime.h, std_cwchar.h,\n\tstd_cwctype.h: Same.\n\t* include/c_std/cmath: Adjust cmath.tcc include.\n\t* include/c_std/cstdlib: Adjust includes.\n\t* include/c_std/cwchar: Same.\n\t* include/c_std/ctime: Same.\n\t* include/c_std/cstring: Same.\n\t* include/c_std/cstdio: Same.\n\t* include/c_std/bits: Remove directory.\n\n\t* include/c/bits/std_cassert.h: Move to...\n\t* include/c/cassert: Here.\n\t* include/c/std_cctype.h, std_cerrno.h, std_cfloat.h,\n\tstd_climits.h, std_clocale.h, std_cmath.h, std_csetjmp.h,\n\tstd_csignal.h, std_cstdarg.h, std_cstddef.h, std_cstdio.h,\n\tstd_cstdlib.h, std_cstring.h, std_ctime.h, std_cwchar.h,\n\tstd_cwctype.h: Same.\n\t* include/c/bits: Remove directory.\n\n\t* include/std/cwctype: Remove.\n\t* include/std/cwchar: Remove.\n\t* include/std/ctime: Remove.\n\t* include/std/cstring: Remove.\n\t* include/std/cstdlib: Remove.\n\t* include/std/cstdio: Remove.\n\t* include/std/cstddef: Remove.\n\t* include/std/cstdarg: Remove.\n\t* include/std/csignal: Remove.\n\t* include/std/csetjmp: Remove.\n\t* include/std/cmath: Remove.\n\t* include/std/clocale: Remove.\n\t* include/std/climits: Remove.\n\t* include/std/ciso646: Remove.\n\t* include/std/cfloat: Remove.\n\t* include/std/cerrno: Remove.\n\t* include/std/cctype: Remove.\n\t* include/std/cassert: Remove.\n\n\t* include/bits/fpos.h: Adjust includes, removing <bits/std_xxx.h>\n\tfiles and subsituting <.xxx>\n\t* include/bits/valarray_array.h: Same.\n\t* include/bits/stl_uninitialized.h: Same.\n\t* include/bits/stl_alloc.h: Same.\n\t* include/bits/stl_algobase.h: Same.\n\t* include/bits/sstream.tcc: Same.\n\t* include/bits/pthread_allocimpl.h: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/localefwd.h: Same.\n\t* include/bits/locale_facets.tcc: Same.\n\t* include/bits/locale_facets.h: Same.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/char_traits.h: Same.\n\t* include/bits/boost_concept_check.h: Same.\n\t* include/bits/basic_file.h: Same.\n\t* include/std/bitset: Same.\n\t* include/std/complex: Same.\n\t* include/std/fstream: Same.\n\t* include/std/functional: Same.\n\t* include/std/ios: Same.\n\t* include/std/iostream: Same.\n\t* include/std/ostream: Same.\n\t* include/std/sstream: Same.\n\t* include/std/streambuf: Same.\n\t* include/std/string: Same.\n\t* include/std/iterator: Same.\n\t* include/std/valarray: Same.\n\n\t* src/ios.cc: Adjust includes.\n\t* src/valarray-inst.cc: Same.\n\t* src/string-inst.cc: Same.\n\t* src/stl-inst.cc: Same.\n\t* src/stdexcept.cc: Same.\n\t* src/misc-inst.cc: Same.\n\t* src/localename.cc: Same.\n\t* src/locale-inst.cc: Same.\n\t* src/locale.cc: Same.\n\t* src/limits.cc: Same.\n\t* src/concept-inst.cc: Same.\n\t* src/complex_io.cc: Same.\n\t* src/codecvt.cc: Same.\n\t* src/bitset.cc: Same.\n\t* src/cmath.cc: Same.\n\nFrom-SVN: r48544", "tree": {"sha": "f9b7a5cf7ab77ab1aa83870039157784eb5398b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b7a5cf7ab77ab1aa83870039157784eb5398b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c1bf7801758caf2ff54917e79a8c239643061c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c1bf7801758caf2ff54917e79a8c239643061c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c1bf7801758caf2ff54917e79a8c239643061c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c1bf7801758caf2ff54917e79a8c239643061c/comments", "author": null, "committer": null, "parents": [{"sha": "48180d6890b349f441109459b1575ef819e7651e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48180d6890b349f441109459b1575ef819e7651e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48180d6890b349f441109459b1575ef819e7651e"}], "stats": {"total": 17484, "additions": 7893, "deletions": 9591}, "files": [{"sha": "5dbf8df76b7fa3c3ec409fbdf9bcafe5105e668a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 132, "deletions": 1, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,3 +1,134 @@\n+2002-01-04  Benjamin  Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am (std_headers): Remove cXXX from list.\n+\t(c_base_srcdir): No bits subdirectory.\n+\t(c_base_builddir): Same.\n+\t(c_base_headers): Adjust names, add ciso646.\n+\t(bits_headers): Remove std_xxx.h headers.\n+\t* include/Makefile.in: Regenerate.\n+\t\n+\t* include/ext/iterator: Adjust includes.\n+\t* include/ext/ropeimpl.h: Same.\n+\t* include/ext/stl_hash_fun.h: Same.\n+\t* include/ext/algorithm: Same.\n+\t\n+\t* include/backward/bvector.h: Adjust includes.\n+\t* include/backward/vector.h: Same.\n+\t* include/backward/strstream: Same.\n+\t* include/backward/streambuf.h: Same.\n+\t* include/backward/stack.h: Same.\n+\t* include/backward/set.h: Same.\n+\t* include/backward/queue.h: Same.\n+\t* include/backward/multiset.h: Same.\n+\t* include/backward/multimap.h: Same.\n+\t* include/backward/map.h: Same.\n+\t* include/backward/list.h: Same.\n+\t* include/backward/iterator.h: Same.\n+\t* include/backward/iostream.h: Same.\n+\t* include/backward/iomanip.h: Same.\n+\t* include/backward/fstream.h: Same.\n+\t* include/backward/deque.h: Same.\n+\t* include/backward/complex.h: Same.\n+\n+\t* include/bits/std_algorithm.h: Move to...\n+\t* include/std/algorithm: ...here.\n+\t* include/bits/std_iosfwd.h, std_locale.h, std_stack.h,\n+\tstd_bitset.h, std_ios.h, std_map.h, std_stdexcept.h,\n+\tstd_complex.h, std_iostream.h, std_memory.h, std_streambuf.h,\n+\tstd_deque.h, std_istream.h, std_numeric.h, std_string.h,\n+\tstd_fstream.h, std_ostream.h, std_utility.h, std_iterator.h,\n+\tstd_queue.h, std_valarray.h, std_functional.h, std_limits.h,\n+\tstd_set.h, std_vector.h, std_iomanip.h, std_list.h, std_sstream.h:\n+\tSame.\n+\t\n+\t* include/c_std/bits/std_cassert.h: Move to...\n+\t* include/c_std/cassert: Here.\n+\t* include/c_std/std_cctype.h, std_cerrno.h, std_cfloat.h,\n+\tstd_climits.h, std_clocale.h, std_cmath.h, std_csetjmp.h,\n+\tstd_csignal.h, std_cstdarg.h, std_cstddef.h, std_cstdio.h,\n+\tstd_cstdlib.h, std_cstring.h, std_ctime.h, std_cwchar.h,\n+\tstd_cwctype.h: Same.\n+\t* include/c_std/cmath: Adjust cmath.tcc include.\n+\t* include/c_std/cstdlib: Adjust includes.\n+\t* include/c_std/cwchar: Same.\n+\t* include/c_std/ctime: Same.\n+\t* include/c_std/cstring: Same.\n+\t* include/c_std/cstdio: Same.\n+\t* include/c_std/bits: Remove directory.\n+\t\n+\t* include/c/bits/std_cassert.h: Move to...\n+\t* include/c/cassert: Here.\n+\t* include/c/std_cctype.h, std_cerrno.h, std_cfloat.h,\n+\tstd_climits.h, std_clocale.h, std_cmath.h, std_csetjmp.h,\n+\tstd_csignal.h, std_cstdarg.h, std_cstddef.h, std_cstdio.h,\n+\tstd_cstdlib.h, std_cstring.h, std_ctime.h, std_cwchar.h,\n+\tstd_cwctype.h: Same.\n+\t* include/c/bits: Remove directory.\n+\t\n+\t* include/std/cwctype: Remove.\n+\t* include/std/cwchar: Remove.\n+\t* include/std/ctime: Remove.\n+\t* include/std/cstring: Remove.\n+\t* include/std/cstdlib: Remove.\n+\t* include/std/cstdio: Remove.\n+\t* include/std/cstddef: Remove.\n+\t* include/std/cstdarg: Remove.\n+\t* include/std/csignal: Remove.\n+\t* include/std/csetjmp: Remove.\n+\t* include/std/cmath: Remove.\n+\t* include/std/clocale: Remove.\n+\t* include/std/climits: Remove.\n+\t* include/std/ciso646: Remove.\n+\t* include/std/cfloat: Remove.\n+\t* include/std/cerrno: Remove.\n+\t* include/std/cctype: Remove.\n+\t* include/std/cassert: Remove.\n+\n+\t* include/bits/fpos.h: Adjust includes, removing <bits/std_xxx.h>\n+\tfiles and subsituting <.xxx>\n+\t* include/bits/valarray_array.h: Same.\n+\t* include/bits/stl_uninitialized.h: Same.\n+\t* include/bits/stl_alloc.h: Same.\n+\t* include/bits/stl_algobase.h: Same.\n+\t* include/bits/sstream.tcc: Same.\n+\t* include/bits/pthread_allocimpl.h: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/localefwd.h: Same.\n+\t* include/bits/locale_facets.tcc: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/char_traits.h: Same.\n+\t* include/bits/boost_concept_check.h: Same.\n+\t* include/bits/basic_file.h: Same.\n+\t* include/std/bitset: Same.\n+\t* include/std/complex: Same.\n+\t* include/std/fstream: Same.\n+\t* include/std/functional: Same.\n+\t* include/std/ios: Same.\n+\t* include/std/iostream: Same.\n+\t* include/std/ostream: Same.\n+\t* include/std/sstream: Same.\n+\t* include/std/streambuf: Same.\n+\t* include/std/string: Same.\n+\t* include/std/iterator: Same.\n+\t* include/std/valarray: Same.\n+\n+\t* src/ios.cc: Adjust includes.\n+\t* src/valarray-inst.cc: Same.\n+\t* src/string-inst.cc: Same.\n+\t* src/stl-inst.cc: Same.\n+\t* src/stdexcept.cc: Same.\n+\t* src/misc-inst.cc: Same.\n+\t* src/localename.cc: Same.\n+\t* src/locale-inst.cc: Same.\n+\t* src/locale.cc: Same.\n+\t* src/limits.cc: Same.\n+\t* src/concept-inst.cc: Same.\n+\t* src/complex_io.cc: Same.\n+\t* src/codecvt.cc: Same.\n+\t* src/bitset.cc: Same.\n+\t* src/cmath.cc: Same.\n+\n 2002-01-04  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/bits/stl_tree.h (rb_tree):  Move to...\n@@ -30,7 +161,7 @@\n \t* include/backward/function.h:  Include <ext/functional>, tweak.\n         * include/ext/ropeimpl.h:  Include <ext/numeric>.\n \n-Thu Jan  3 11:05:41 2002  Jeffrey A Law  (law@redhat.com)\n+2002-01-03  Jeffrey A Law  <law@redhat.com>\n \n         * config/os/hpux/bits/os_defines.h: Prefix __strtoll and\n         __strtoull declarations with __extension__."}, {"sha": "d07776b3da992ea4c11ed69af0c020498e896d34", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -18520,7 +18520,7 @@ else\n fi\n rm -f conftest*\n \n-  for ac_hdr in unistd.h\n+  for ac_hdr in stdlib.h unistd.h sys/stat.h sys/types.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -18652,11 +18652,24 @@ else\n #include <fcntl.h>\n #include <sys/mman.h>\n \n+#if HAVE_SYS_TYPES_H\n+# include <sys/types.h>\n+#endif\n+\n+#if HAVE_STDLIB_H\n+# include <stdlib.h>\n+#endif\n+\n+#if HAVE_SYS_STAT_H\n+# include <sys/stat.h>\n+#endif\n+\n+#if HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+\n /* This mess was copied from the GNU getpagesize.h.  */\n #ifndef HAVE_GETPAGESIZE\n-# ifdef HAVE_UNISTD_H\n-#  include <unistd.h>\n-# endif\n \n /* Assume that all systems that can run configure have sys/param.h.  */\n # ifndef HAVE_SYS_PARAM_H\n@@ -18764,7 +18777,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:18768: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:18781: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -18795,17 +18808,17 @@ fi\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:18799: checking for $ac_hdr\" >&5\n+echo \"configure:18812: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 18804 \"configure\"\n+#line 18817 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:18809: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:18822: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -18838,7 +18851,7 @@ done\n     # Can't do these in a loop, else the resulting syntax is wrong.\n     \n   cat > conftest.$ac_ext <<EOF\n-#line 18842 \"configure\"\n+#line 18855 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -18847,7 +18860,7 @@ int main() {\n  int f = RLIMIT_DATA ; \n ; return 0; }\n EOF\n-if { (eval echo configure:18851: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18864: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -18864,7 +18877,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 18868 \"configure\"\n+#line 18881 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -18873,7 +18886,7 @@ int main() {\n  int f = RLIMIT_RSS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:18877: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18890: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -18890,7 +18903,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 18894 \"configure\"\n+#line 18907 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -18899,7 +18912,7 @@ int main() {\n  int f = RLIMIT_VMEM ; \n ; return 0; }\n EOF\n-if { (eval echo configure:18903: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18916: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -18916,7 +18929,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 18920 \"configure\"\n+#line 18933 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n                   #include <unistd.h>\n@@ -18925,7 +18938,7 @@ int main() {\n  int f = RLIMIT_AS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:18929: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18942: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -18947,7 +18960,7 @@ EOF\n else\n   \n       cat > conftest.$ac_ext <<EOF\n-#line 18951 \"configure\"\n+#line 18964 \"configure\"\n #include \"confdefs.h\"\n #include <sys/resource.h>\n \t\t      #include <unistd.h>\n@@ -18956,7 +18969,7 @@ int main() {\n  struct rlimit r; setrlimit(0, &r);\n ; return 0; }\n EOF\n-if { (eval echo configure:18960: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:18973: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_setrlimit=yes\n else\n@@ -18972,7 +18985,7 @@ fi\n   fi\n \n   echo $ac_n \"checking for testsuite memory limit support\"\"... $ac_c\" 1>&6\n-echo \"configure:18976: checking for testsuite memory limit support\" >&5\n+echo \"configure:18989: checking for testsuite memory limit support\" >&5\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n     ac_mem_limits=yes\n     cat >> confdefs.h <<\\EOF\n@@ -19074,13 +19087,13 @@ glibcpp_toolexeclibdir=no\n glibcpp_prefixdir=${prefix}\n \n echo $ac_n \"checking for interface version number\"\"... $ac_c\" 1>&6\n-echo \"configure:19078: checking for interface version number\" >&5\n+echo \"configure:19091: checking for interface version number\" >&5\n libstdcxx_interface=$INTERFACE\n echo \"$ac_t\"\"$libstdcxx_interface\" 1>&6\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:19084: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:19097: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -19104,7 +19117,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:19108: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:19121: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -19151,7 +19164,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:19155: checking for install location\" >&5\n+echo \"configure:19168: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n "}, {"sha": "eff88d03c7e96aac40c46a1532d6d883952f59fb", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 21, "deletions": 67, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -64,35 +64,6 @@ bits_headers = \\\n \t${bits_srcdir}/slice.h \\\n \t${bits_srcdir}/slice_array.h \\\n \t${bits_srcdir}/sstream.tcc \\\n-\t${bits_srcdir}/std_algorithm.h \\\n-\t${bits_srcdir}/std_bitset.h \\\n-\t${bits_srcdir}/std_complex.h \\\n-\t${bits_srcdir}/std_deque.h \\\n-\t${bits_srcdir}/std_fstream.h \\\n-\t${bits_srcdir}/std_functional.h \\\n-\t${bits_srcdir}/std_iomanip.h \\\n-\t${bits_srcdir}/std_ios.h \\\n-\t${bits_srcdir}/std_iosfwd.h \\\n-\t${bits_srcdir}/std_iostream.h \\\n-\t${bits_srcdir}/std_istream.h \\\n-\t${bits_srcdir}/std_iterator.h \\\n-\t${bits_srcdir}/std_limits.h \\\n-\t${bits_srcdir}/std_list.h \\\n-\t${bits_srcdir}/std_locale.h \\\n-\t${bits_srcdir}/std_map.h \\\n-\t${bits_srcdir}/std_memory.h \\\n-\t${bits_srcdir}/std_numeric.h \\\n-\t${bits_srcdir}/std_ostream.h \\\n-\t${bits_srcdir}/std_queue.h \\\n-\t${bits_srcdir}/std_set.h \\\n-\t${bits_srcdir}/std_sstream.h \\\n-\t${bits_srcdir}/std_stack.h \\\n-\t${bits_srcdir}/std_stdexcept.h \\\n-\t${bits_srcdir}/std_streambuf.h \\\n-\t${bits_srcdir}/std_string.h \\\n-\t${bits_srcdir}/std_utility.h \\\n-\t${bits_srcdir}/std_valarray.h \\\n-\t${bits_srcdir}/std_vector.h \\\n \t${bits_srcdir}/stl_algo.h \\\n \t${bits_srcdir}/stl_algobase.h \\\n \t${bits_srcdir}/stl_alloc.h \\\n@@ -188,26 +159,27 @@ ext_headers = \\\n \t${ext_srcdir}/stl_rope.h\n \n # This is the common subset of files that all three \"C\" header models use.\n-c_base_srcdir = @C_INCLUDE_DIR@/bits\n-c_base_builddir = ./bits\n+c_base_srcdir = @C_INCLUDE_DIR@/\n+c_base_builddir = ./\n c_base_headers = \\\n-\t${c_base_srcdir}/std_cassert.h \\\n-\t${c_base_srcdir}/std_cctype.h \\\n-\t${c_base_srcdir}/std_cerrno.h \\\n-\t${c_base_srcdir}/std_cfloat.h \\\n-\t${c_base_srcdir}/std_climits.h \\\n-\t${c_base_srcdir}/std_clocale.h \\\n-\t${c_base_srcdir}/std_cmath.h \\\n-\t${c_base_srcdir}/std_csetjmp.h \\\n-\t${c_base_srcdir}/std_csignal.h \\\n-\t${c_base_srcdir}/std_cstdarg.h \\\n-\t${c_base_srcdir}/std_cstddef.h \\\n-\t${c_base_srcdir}/std_cstdio.h \\\n-\t${c_base_srcdir}/std_cstdlib.h \\\n-\t${c_base_srcdir}/std_cstring.h \\\n-\t${c_base_srcdir}/std_ctime.h \\\n-\t${c_base_srcdir}/std_cwchar.h \\\n-\t${c_base_srcdir}/std_cwctype.h \\\n+\t${c_base_srcdir}/cassert \\\n+\t${c_base_srcdir}/cctype \\\n+\t${c_base_srcdir}/cerrno \\\n+\t${c_base_srcdir}/cfloat \\\n+\t${c_base_srcdir}/ciso646 \\\n+\t${c_base_srcdir}/climits \\\n+\t${c_base_srcdir}/clocale \\\n+\t${c_base_srcdir}/cmath \\\n+\t${c_base_srcdir}/csetjmp \\\n+\t${c_base_srcdir}/csignal \\\n+\t${c_base_srcdir}/cstdarg \\\n+\t${c_base_srcdir}/cstddef \\\n+\t${c_base_srcdir}/cstdio \\\n+\t${c_base_srcdir}/cstdlib \\\n+\t${c_base_srcdir}/cstring \\\n+\t${c_base_srcdir}/ctime \\\n+\t${c_base_srcdir}/cwchar \\\n+\t${c_base_srcdir}/cwctype \\\n \t${c_base_srcdir}/cmath.tcc \n \n std_srcdir = ${glibcpp_srcdir}/include/std\n@@ -241,25 +213,7 @@ std_headers = \\\n \t${std_srcdir}/string \\\n \t${std_srcdir}/utility \\\n \t${std_srcdir}/valarray \\\n-\t${std_srcdir}/vector \\\n-\t${std_srcdir}/cassert \\\n-\t${std_srcdir}/cctype \\\n-\t${std_srcdir}/cerrno \\\n-\t${std_srcdir}/cfloat \\\n-\t${std_srcdir}/climits \\\n-\t${std_srcdir}/clocale \\\n-\t${std_srcdir}/ciso646 \\\n-\t${std_srcdir}/cmath \\\n-\t${std_srcdir}/csetjmp \\\n-\t${std_srcdir}/csignal \\\n-\t${std_srcdir}/cstdarg \\\n-\t${std_srcdir}/cstddef \\\n-\t${std_srcdir}/cstdio \\\n-\t${std_srcdir}/cstdlib \\\n-\t${std_srcdir}/cstring \\\n-\t${std_srcdir}/ctime \\\n-\t${std_srcdir}/cwchar \\\n-\t${std_srcdir}/cwctype\n+\t${std_srcdir}/vector \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits"}, {"sha": "ab7981cc4140c882543c866211a5839b0dd7707c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 113, "deletions": 155, "changes": 268, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,7 +1,6 @@\n-# Makefile.in generated automatically by automake 1.5 from Makefile.am.\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n-# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n-# Free Software Foundation, Inc.\n+# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -11,7 +10,6 @@\n # even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n # PARTICULAR PURPOSE.\n \n-@SET_MAKE@\n \n SHELL = @SHELL@\n \n@@ -33,9 +31,13 @@ infodir = @infodir@\n mandir = @mandir@\n includedir = @includedir@\n oldincludedir = /usr/include\n+\n+DESTDIR =\n+\n pkgdatadir = $(datadir)/@PACKAGE@\n pkglibdir = $(libdir)/@PACKAGE@\n pkgincludedir = $(includedir)/@PACKAGE@\n+\n top_builddir = ..\n \n ACLOCAL = @ACLOCAL@\n@@ -44,11 +46,11 @@ AUTOMAKE = @AUTOMAKE@\n AUTOHEADER = @AUTOHEADER@\n \n INSTALL = @INSTALL@\n-INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)\n INSTALL_DATA = @INSTALL_DATA@\n INSTALL_SCRIPT = @INSTALL_SCRIPT@\n-INSTALL_HEADER = $(INSTALL_DATA)\n transform = @program_transform_name@\n+\n NORMAL_INSTALL = :\n PRE_INSTALL = :\n POST_INSTALL = :\n@@ -82,6 +84,7 @@ C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DATADIRNAME = @DATADIRNAME@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n+EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n@@ -105,6 +108,7 @@ LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n MKINSTALLDIRS = @MKINSTALLDIRS@\n MSGFMT = @MSGFMT@\n OBJDUMP = @OBJDUMP@\n@@ -142,23 +146,16 @@ libtool_VERSION = @libtool_VERSION@\n release_VERSION = @release_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n \n-# Cross compiler and multilib support.\n-CXX = @glibcpp_CXX@\n-glibcpp_builddir = @glibcpp_builddir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n-\n-# Target includes for threads\n-glibcpp_thread_h = @glibcpp_thread_h@\n-\n-# One big happy istallation:  just copy everything from the build to the\n-# install tree (except for the build stamps).\n-gxx_include_dir = @gxx_include_dir@\n-\n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n+# Cross compiler and multilib support.\n+CXX = @glibcpp_CXX@\n+glibcpp_srcdir = @glibcpp_srcdir@\n+glibcpp_builddir = @glibcpp_builddir@\n+\n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n bits_headers = \\\n@@ -192,35 +189,6 @@ bits_headers = \\\n \t${bits_srcdir}/slice.h \\\n \t${bits_srcdir}/slice_array.h \\\n \t${bits_srcdir}/sstream.tcc \\\n-\t${bits_srcdir}/std_algorithm.h \\\n-\t${bits_srcdir}/std_bitset.h \\\n-\t${bits_srcdir}/std_complex.h \\\n-\t${bits_srcdir}/std_deque.h \\\n-\t${bits_srcdir}/std_fstream.h \\\n-\t${bits_srcdir}/std_functional.h \\\n-\t${bits_srcdir}/std_iomanip.h \\\n-\t${bits_srcdir}/std_ios.h \\\n-\t${bits_srcdir}/std_iosfwd.h \\\n-\t${bits_srcdir}/std_iostream.h \\\n-\t${bits_srcdir}/std_istream.h \\\n-\t${bits_srcdir}/std_iterator.h \\\n-\t${bits_srcdir}/std_limits.h \\\n-\t${bits_srcdir}/std_list.h \\\n-\t${bits_srcdir}/std_locale.h \\\n-\t${bits_srcdir}/std_map.h \\\n-\t${bits_srcdir}/std_memory.h \\\n-\t${bits_srcdir}/std_numeric.h \\\n-\t${bits_srcdir}/std_ostream.h \\\n-\t${bits_srcdir}/std_queue.h \\\n-\t${bits_srcdir}/std_set.h \\\n-\t${bits_srcdir}/std_sstream.h \\\n-\t${bits_srcdir}/std_stack.h \\\n-\t${bits_srcdir}/std_stdexcept.h \\\n-\t${bits_srcdir}/std_streambuf.h \\\n-\t${bits_srcdir}/std_string.h \\\n-\t${bits_srcdir}/std_utility.h \\\n-\t${bits_srcdir}/std_valarray.h \\\n-\t${bits_srcdir}/std_vector.h \\\n \t${bits_srcdir}/stl_algo.h \\\n \t${bits_srcdir}/stl_algobase.h \\\n \t${bits_srcdir}/stl_alloc.h \\\n@@ -319,26 +287,27 @@ ext_headers = \\\n \n \n # This is the common subset of files that all three \"C\" header models use.\n-c_base_srcdir = @C_INCLUDE_DIR@/bits\n-c_base_builddir = ./bits\n+c_base_srcdir = @C_INCLUDE_DIR@/\n+c_base_builddir = ./\n c_base_headers = \\\n-\t${c_base_srcdir}/std_cassert.h \\\n-\t${c_base_srcdir}/std_cctype.h \\\n-\t${c_base_srcdir}/std_cerrno.h \\\n-\t${c_base_srcdir}/std_cfloat.h \\\n-\t${c_base_srcdir}/std_climits.h \\\n-\t${c_base_srcdir}/std_clocale.h \\\n-\t${c_base_srcdir}/std_cmath.h \\\n-\t${c_base_srcdir}/std_csetjmp.h \\\n-\t${c_base_srcdir}/std_csignal.h \\\n-\t${c_base_srcdir}/std_cstdarg.h \\\n-\t${c_base_srcdir}/std_cstddef.h \\\n-\t${c_base_srcdir}/std_cstdio.h \\\n-\t${c_base_srcdir}/std_cstdlib.h \\\n-\t${c_base_srcdir}/std_cstring.h \\\n-\t${c_base_srcdir}/std_ctime.h \\\n-\t${c_base_srcdir}/std_cwchar.h \\\n-\t${c_base_srcdir}/std_cwctype.h \\\n+\t${c_base_srcdir}/cassert \\\n+\t${c_base_srcdir}/cctype \\\n+\t${c_base_srcdir}/cerrno \\\n+\t${c_base_srcdir}/cfloat \\\n+\t${c_base_srcdir}/ciso646 \\\n+\t${c_base_srcdir}/climits \\\n+\t${c_base_srcdir}/clocale \\\n+\t${c_base_srcdir}/cmath \\\n+\t${c_base_srcdir}/csetjmp \\\n+\t${c_base_srcdir}/csignal \\\n+\t${c_base_srcdir}/cstdarg \\\n+\t${c_base_srcdir}/cstddef \\\n+\t${c_base_srcdir}/cstdio \\\n+\t${c_base_srcdir}/cstdlib \\\n+\t${c_base_srcdir}/cstring \\\n+\t${c_base_srcdir}/ctime \\\n+\t${c_base_srcdir}/cwchar \\\n+\t${c_base_srcdir}/cwctype \\\n \t${c_base_srcdir}/cmath.tcc \n \n \n@@ -373,25 +342,7 @@ std_headers = \\\n \t${std_srcdir}/string \\\n \t${std_srcdir}/utility \\\n \t${std_srcdir}/valarray \\\n-\t${std_srcdir}/vector \\\n-\t${std_srcdir}/cassert \\\n-\t${std_srcdir}/cctype \\\n-\t${std_srcdir}/cerrno \\\n-\t${std_srcdir}/cfloat \\\n-\t${std_srcdir}/climits \\\n-\t${std_srcdir}/clocale \\\n-\t${std_srcdir}/ciso646 \\\n-\t${std_srcdir}/cmath \\\n-\t${std_srcdir}/csetjmp \\\n-\t${std_srcdir}/csignal \\\n-\t${std_srcdir}/cstdarg \\\n-\t${std_srcdir}/cstddef \\\n-\t${std_srcdir}/cstdio \\\n-\t${std_srcdir}/cstdlib \\\n-\t${std_srcdir}/cstring \\\n-\t${std_srcdir}/ctime \\\n-\t${std_srcdir}/cwchar \\\n-\t${std_srcdir}/cwctype\n+\t${std_srcdir}/vector \n \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n@@ -417,108 +368,114 @@ thread_headers = \\\n allstamps = stamp-std stamp-bits stamp-c_base stamp-backward stamp-ext \\\n \tstamp-target stamp-thread \n \n+\n+# Target includes for threads\n+glibcpp_thread_h = @glibcpp_thread_h@\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]\n-subdir = include\n-CONFIG_HEADER = $(top_builddir)/config.h\n-CONFIG_CLEAN_FILES =\n-depcomp =\n-DIST_SOURCES =\n-all: all-am\n \n-.SUFFIXES:\n+# One big happy istallation:  just copy everything from the build to the\n+# install tree (except for the build stamps).\n+gxx_include_dir = @gxx_include_dir@\n+CONFIG_HEADER = ../config.h\n+CONFIG_CLEAN_FILES = \n+DIST_COMMON =  Makefile.am Makefile.in\n \n-mostlyclean-libtool:\n-\t-rm -f *.lo\n \n-clean-libtool:\n-\t-rm -rf .libs _libs\n+DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n+\n+TAR = gtar\n+GZIP_ENV = --best\n+all: all-redirect\n+.SUFFIXES:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n+\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus include/Makefile\n+\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+\tcd $(top_builddir) \\\n+\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n-distclean-libtool:\n-\t-rm -f libtool\n-$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)\n-\tcd $(top_srcdir) && \\\n-\t  $(AUTOMAKE) --cygnus  include/Makefile\n-Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status\n-\tcd $(top_builddir) && \\\n-\t  CONFIG_HEADERS= CONFIG_LINKS= \\\n-\t  CONFIG_FILES=$(subdir)/$@ $(SHELL) ./config.status\n-uninstall-info-am:\n tags: TAGS\n TAGS:\n \n-check-am:\n-check: check-am\n-all-am: Makefile all-local\n \n-installdirs:\n+distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n \n-install: install-am\n+subdir = include\n+\n+distdir: $(DISTFILES)\n+\t@for file in $(DISTFILES); do \\\n+\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  if test -d $$d/$$file; then \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file || :; \\\n+\t  fi; \\\n+\tdone\n+info-am:\n+info: info-am\n+dvi-am:\n+dvi: dvi-am\n+check-am:\n+check: check-am\n+installcheck-am:\n+installcheck: installcheck-am\n+install-info-am: \n+install-info: install-info-am\n+install-exec-am:\n install-exec: install-exec-am\n+\n+install-data-am: install-data-local\n install-data: install-data-am\n-uninstall: uninstall-am\n \n install-am: all-am\n \t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n-\n-installcheck: installcheck-am\n+install: install-am\n+uninstall-am:\n+uninstall: uninstall-am\n+all-am: Makefile all-local\n+all-redirect: all-am\n install-strip:\n-\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n-\t  `test -z '$(STRIP)' || \\\n-\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+\t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n+installdirs:\n+\n+\n mostlyclean-generic:\n \n clean-generic:\n \n distclean-generic:\n-\t-rm -f Makefile $(CONFIG_CLEAN_FILES) stamp-h stamp-h[0-9]*\n+\t-rm -f Makefile $(CONFIG_CLEAN_FILES)\n+\t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-\t@echo \"This command is intended for maintainers to use\"\n-\t@echo \"it deletes files that may require special tools to rebuild.\"\n-clean: clean-am\n-\n-clean-am: clean-generic clean-libtool mostlyclean-am\n-\n-distclean: distclean-am\n-\n-distclean-am: clean-am distclean-generic distclean-libtool\n+mostlyclean-am:  mostlyclean-generic\n \n-dvi: dvi-am\n-\n-dvi-am:\n-\n-info: info-am\n-\n-info-am:\n+mostlyclean: mostlyclean-am\n \n-install-data-am: install-data-local\n+clean-am:  clean-generic mostlyclean-am\n \n-install-exec-am:\n+clean: clean-am\n \n-install-info:\n+distclean-am:  distclean-generic clean-am\n+\t-rm -f libtool\n \n-install-man:\n+distclean: distclean-am\n \n-installcheck-am:\n+maintainer-clean-am:  maintainer-clean-generic distclean-am\n+\t@echo \"This command is intended for maintainers to use;\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n \n maintainer-clean: maintainer-clean-am\n \n-maintainer-clean-am: distclean-am maintainer-clean-generic\n-\n-mostlyclean: mostlyclean-am\n-\n-mostlyclean-am: mostlyclean-generic mostlyclean-libtool\n-\n-uninstall-am:\n-\n-.PHONY: all all-am all-local check check-am clean clean-generic \\\n-\tclean-libtool distclean distclean-generic distclean-libtool dvi \\\n-\tdvi-am info info-am install install-am install-data \\\n-\tinstall-data-am install-data-local install-exec install-exec-am \\\n-\tinstall-info install-info-am install-man install-strip \\\n-\tinstallcheck installcheck-am installdirs maintainer-clean \\\n-\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n-\tmostlyclean-libtool uninstall uninstall-am uninstall-info-am\n+.PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n+installcheck-am installcheck install-info-am install-info \\\n+install-exec-am install-exec install-data-local install-data-am \\\n+install-data install-am install uninstall-am uninstall all-local \\\n+all-redirect all-am all installdirs mostlyclean-generic \\\n+distclean-generic clean-generic maintainer-clean-generic clean \\\n+mostlyclean distclean maintainer-clean\n \n \n # Here are the rules for building the headers\n@@ -625,6 +582,7 @@ install-data-local:\n \n # By adding these files here, automake will remove them for 'make clean'\n #CLEANFILES = ${allstamps}\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "b114052933af172e4e9d08b3c0c0207b20c618d8", "filename": "libstdc++-v3/include/backward/bvector.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -58,7 +58,7 @@\n \n \n #include \"backward_warning.h\"\n-#include <bits/std_vector.h>\n+#include <vector>\n \n using std::bit_vector;\n \n@@ -67,5 +67,3 @@ using std::bit_vector;\n // Local Variables:\n // mode:C++\n // End:\n-\n-"}, {"sha": "0e721744a6b7671cbab936a13a468250838966d4", "filename": "libstdc++-v3/include/backward/complex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,7 +29,7 @@\n #define _CPP_BACKWARD_COMPLEX_H 1\n \n #include \"backward_warning.h\"\n-#include <bits/std_complex.h>\n+#include <complex>\n \n using std::complex;\n typedef complex<float> \t\tfloat_complex;"}, {"sha": "983ae07bac7fd56dc2732dddfe619e800ac44ed3", "filename": "libstdc++-v3/include/backward/deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -59,7 +59,7 @@\n #include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"alloc.h\"\n-#include <bits/std_deque.h>\n+#include <deque>\n \n using std::deque;\n "}, {"sha": "44461f464dda7273c03ea11c61eda5f75a1a5b4f", "filename": "libstdc++-v3/include/backward/fstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,7 +29,7 @@\n #define _CPP_BACKWARD_FSTREAM_H 1\n \n #include \"backward_warning.h\"\n-#include <bits/std_fstream.h>\n+#include <fstream>\n \n using std::filebuf;\n using std::ifstream;"}, {"sha": "53286cda4940441c3b4dbf5de671085960eb85ac", "filename": "libstdc++-v3/include/backward/iomanip.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -30,7 +30,7 @@\n \n #include \"backward_warning.h\"\n #include \"iostream.h\"\n-#include <bits/std_iomanip.h>\n+#include <iomanip>\n \n // These are from <ios> as per [27.4].\n using std::boolalpha;"}, {"sha": "5346d9d22e87a607f180e4dc6cd92896134be165", "filename": "libstdc++-v3/include/backward/iostream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,7 +29,7 @@\n #define _CPP_BACKWARD_IOSTREAM_H 1\n \n #include \"backward_warning.h\"\n-#include <bits/std_iostream.h>\n+#include <iostream>\n \n using std::iostream;\n using std::ostream;"}, {"sha": "179f457d324dc37fd82b292a9b70b7aff5a1648e", "filename": "libstdc++-v3/include/backward/iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -31,7 +31,7 @@\n #include \"function.h\"\n #include <stddef.h>\n #include \"iostream.h\"\n-#include <bits/std_iterator.h>\n+#include <iterator>\n \n #include <bits/stl_construct.h>\n #include <bits/stl_raw_storage_iter.h>"}, {"sha": "350a92a09912685efd9aa1f40677736008608786", "filename": "libstdc++-v3/include/backward/list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -59,7 +59,7 @@\n #include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"alloc.h\"\n-#include <bits/std_list.h>\n+#include <list>\n \n using std::list;\n "}, {"sha": "00f606d7e3245dface9f568260e29ec3061a49d2", "filename": "libstdc++-v3/include/backward/map.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -58,7 +58,7 @@\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n-#include <bits/std_map.h>\n+#include <map>\n \n using std::map;\n "}, {"sha": "b9cdc848360ca3aa14b22785e43a51ee65c7845f", "filename": "libstdc++-v3/include/backward/multimap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -58,7 +58,7 @@\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n-#include <bits/std_map.h>\n+#include <map>\n \n using std::multimap;\n "}, {"sha": "8aa7fd34157efe489cf494a4b49a13c7fdfb02af", "filename": "libstdc++-v3/include/backward/multiset.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -58,7 +58,7 @@\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n-#include <bits/std_set.h>\n+#include <set>\n \n using std::multiset;\n "}, {"sha": "1d3b29c36b5ab38c5cea704a432d8cded12ac891", "filename": "libstdc++-v3/include/backward/queue.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,7 +29,7 @@\n #define _CPP_BACKWARD_QUEUE_H 1\n \n #include \"backward_warning.h\"\n-#include <bits/std_queue.h>\n+#include <queue>\n \n using std::queue;\n using std::priority_queue;"}, {"sha": "c18925544952648dfab66947c555f992db34eb5e", "filename": "libstdc++-v3/include/backward/set.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -58,7 +58,7 @@\n \n #include \"backward_warning.h\"\n #include \"tree.h\"\n-#include <bits/std_set.h>\n+#include <set>\n \n using std::set;\n "}, {"sha": "6f60293663080bb2cffb444d223e456ca244c7fc", "filename": "libstdc++-v3/include/backward/stack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -61,7 +61,7 @@\n #include \"deque.h\"\n #include \"heap.h\"\n #include \"queue.h\"\n-#include <bits/std_stack.h>\n+#include <stack>\n \n using std::stack;\n "}, {"sha": "aef863ff1336bec3da7d69f32b3f1e8cb44f2fcf", "filename": "libstdc++-v3/include/backward/streambuf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,7 +29,7 @@\n #define _CPP_BACKWARD_STREAMBUF_H 1\n \n #include \"backward_warning.h\"\n-#include <bits/std_streambuf.h>\n+#include <streambuf>\n \n using std::streambuf;\n "}, {"sha": "28308e3dfeebec68afb70f8214b565179b312172", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -49,11 +49,11 @@\n #define __SGI_STL_STRSTREAM\n \n #include \"backward_warning.h\"\n-#include <bits/std_iosfwd.h>\n-#include <bits/std_ios.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_string.h>\n+#include <iosfwd>\n+#include <ios>\n+#include <istream>\n+#include <ostream>\n+#include <string>\n \n namespace std\n {"}, {"sha": "77880686f0d9361c45ec413c28acfa74b9dda841", "filename": "libstdc++-v3/include/backward/vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -59,7 +59,7 @@\n #include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"alloc.h\"  \n-#include <bits/std_vector.h>\n+#include <vector>\n \n using std::vector;\n "}, {"sha": "51dde5bc4c3c8414d315668c3de3be957ae2ffaf", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -42,7 +42,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <bits/std_ios.h>\n+#include <ios>\n \n namespace std \n {"}, {"sha": "29ca61baef72c224c09a16a195328b1aa74d46b2", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -17,7 +17,7 @@\n #define _GLIBCPP_BOOST_CONCEPT_CHECK 1\n \n #pragma GCC system_header\n-#include <bits/std_cstddef.h>                // for ptrdiff_t, used next\n+#include <cstddef>                // for ptrdiff_t, used next\n #include <bits/stl_iterator_base_types.h>    // for traits and tags\n #include <utility>                           // for pair<>\n "}, {"sha": "7d14838ab2687e917f572d6b02e862f6c77f484d", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -41,7 +41,7 @@\n \n #pragma GCC system_header\n \n-#include <bits/std_cstring.h> \t// For memmove, memset, memchr\n+#include <cstring> \t// For memmove, memset, memchr\n #include <bits/fpos.h> \t\t// For streampos\n \n namespace std "}, {"sha": "3cb3e4b51a2614d0ee9efb572179097a793e992e", "filename": "libstdc++-v3/include/bits/fpos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffpos.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -42,7 +42,7 @@\n #pragma GCC system_header\n \n #include <bits/c++io.h>\n-#include <bits/std_cwchar.h> \t// For mbstate_t.\n+#include <cwchar> \t// For mbstate_t.\n \n namespace std\n {\n@@ -121,6 +121,3 @@ namespace std\n }  // namespace std\n \n #endif \n-\n-\n-"}, {"sha": "4bc8da1c899c79f1e027077aaa2197d9f990b126", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,8 +29,8 @@\n // ISO C++ 14882: 27.6.2  Output streams\n //\n \n-#include <bits/std_locale.h>\n-#include <bits/std_ostream.h> // for flush()\n+#include <locale>\n+#include <ostream> // For flush()\n \n namespace std \n {"}, {"sha": "824b03a18cae51adaa0018d910a4aa6fa23dd988", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -41,11 +41,11 @@\n \n #pragma GCC system_header\n \n-#include <bits/std_ctime.h>\t// For struct tm\n-#include <bits/std_ios.h>\t// For ios_base\n+#include <ctime>\t// For struct tm\n #ifdef _GLIBCPP_USE_WCHAR_T\n-# include <bits/std_cwctype.h>\t// For wctype_t\n+# include <cwctype>\t// For wctype_t\n #endif \n+#include <ios>\t// For ios_base\n \n namespace std\n {"}, {"sha": "2731640029f563b29e93cd2f7ad61bdaeea84862", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -32,16 +32,16 @@\n #ifndef _CPP_BITS_LOCFACETS_TCC\n #define _CPP_BITS_LOCFACETS_TCC 1\n \n-#include <bits/std_cerrno.h>\n-#include <bits/std_clocale.h>   // For localeconv\n-#include <bits/std_cstdlib.h>   // For strof, strtold\n-#include <bits/std_cmath.h>     // For ceil\n-#include <bits/std_limits.h>    // For numeric_limits\n-#include <bits/std_memory.h>    // For auto_ptr\n+#include <cerrno>\n+#include <clocale>   // For localeconv\n+#include <cstdlib>   // For strof, strtold\n+#include <cmath>     // For ceil\n+#include <cctype>    // For isspace\n+#include <limits>    // For numeric_limits\n+#include <memory>    // For auto_ptr\n #include <bits/streambuf_iterator.h>     // For streambuf_iterators\n-#include <bits/std_cctype.h>    // For isspace\n #include <typeinfo> \t\t// For bad_cast\n-#include <bits/std_vector.h>\t\n+#include <vector>\t\n \n namespace std\n {"}, {"sha": "558ccabe2dea0d1eef36476cafd219085a26792a", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -43,9 +43,9 @@\n \n #include <bits/c++config.h>\n #include <bits/c++locale.h>     // Defines __c_locale, config-specific includes\n-#include <bits/std_climits.h>\t// For CHAR_BIT\n-#include <bits/std_string.h> \t// For string\n-#include <bits/std_cctype.h>\t// For isspace, etc.\n+#include <climits>\t// For CHAR_BIT\n+#include <cctype>\t// For isspace, etc.\n+#include <string> \t// For string\n #include <bits/functexcept.h>\n \n namespace std"}, {"sha": "698029ce5c1c544b88255a08fb9feb3b28c66b76", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -29,7 +29,7 @@\n // ISO C++ 14882: 27.6.2  Output streams\n //\n \n-#include <bits/std_locale.h>\n+#include <locale>\n \n namespace std \n {"}, {"sha": "050b2060fc459ce65a30a5a2d17b6c17c533f0cd", "filename": "libstdc++-v3/include/bits/pthread_allocimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -62,7 +62,7 @@\n // consequences.\n \n #include <bits/c++config.h>\n-#include <bits/std_cerrno.h>\n+#include <cerrno>\n #include <bits/stl_alloc.h>\n #ifndef __RESTRICT\n #  define __RESTRICT"}, {"sha": "4198ea80fa4e8e1e1edb178005c15687afcbcf68", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -34,7 +34,7 @@\n #ifndef _CPP_BITS_SSTREAM_TCC\n #define _CPP_BITS_SSTREAM_TCC\t1\n \n-#include <bits/std_sstream.h>\n+#include <sstream>\n \n namespace std\n {"}, {"sha": "746eb47541b415b6a9c7769e560a3961524438ab", "filename": "libstdc++-v3/include/bits/std_algorithm.h", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_algorithm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_algorithm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_algorithm.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,76 +0,0 @@\n-// <algorithm> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_algorithm.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_ALGORITHM\n-#define _CPP_ALGORITHM 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_tempbuf.h>\n-#include <bits/stl_algo.h>\n-\n-#endif /* _CPP_ALGORITHM */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "67647ced72c6a380aa5291bb6a03e4bc2fd17a9f", "filename": "libstdc++-v3/include/bits/std_bitset.h", "status": "removed", "additions": 0, "deletions": 814, "changes": 814, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,814 +0,0 @@\n-// <bitset> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- * Copyright (c) 1998\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */ \n-\n-/** @file std_bitset.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef __GLIBCPP_BITSET\n-#define __GLIBCPP_BITSET\n-\n-#pragma GCC system_header\n-\n-// A bitset of size N has N % (sizeof(unsigned long) * CHAR_BIT) unused \n-// bits.  (They are the high- order bits in the highest word.)  It is\n-// a class invariant of class bitset<> that those unused bits are\n-// always zero.\n-\n-// Most of the actual code isn't contained in bitset<> itself, but in the \n-// base class _Base_bitset.  The base class works with whole words, not with\n-// individual bits.  This allows us to specialize _Base_bitset for the\n-// important special case where the bitset is only a single word.\n-\n-\n-#include <bits/std_cstddef.h>     // for size_t\n-#include <bits/std_cstring.h>     // for memset\n-#include <bits/std_string.h>\n-#include <bits/std_stdexcept.h>\n-#include <bits/functexcept.h>   // for invalid_argument, out_of_range, \n-\t\t\t         // overflow_error\n-#include <bits/std_ostream.h>     // for ostream (operator<<)\n-#include <bits/std_istream.h>     // for istream (operator>>)\n-\n-#define _GLIBCPP_BITSET_BITS_PER_WORD (CHAR_BIT*sizeof(unsigned long))\n-#define __BITSET_WORDS(__n) \\\n- ((__n) < 1 ? 1 : ((__n) + _GLIBCPP_BITSET_BITS_PER_WORD - 1)/_GLIBCPP_BITSET_BITS_PER_WORD)\n-\n-namespace std\n-{\n-\n-// structure to aid in counting bits\n-template<bool __dummy> \n-struct _Bit_count {\n-  static unsigned char _S_bit_count[256];\n-};\n-\n-// Mapping from 8 bit unsigned integers to the index of the first one\n-// bit:\n-template<bool __dummy> \n-struct _First_one {\n-  static unsigned char _S_first_one[256];\n-};\n-\n-//\n-// Base class: general case.\n-//\n-\n-template<size_t _Nw>\n-struct _Base_bitset {\n-  typedef unsigned long _WordT;\n-\n-  _WordT _M_w[_Nw];                // 0 is the least significant word.\n-\n-  _Base_bitset( void ) { _M_do_reset(); }\n-  _Base_bitset(unsigned long __val) {\n-    _M_do_reset();\n-    _M_w[0] = __val;\n-  }\n-\n-  static size_t _S_whichword( size_t __pos )\n-    { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n-  static size_t _S_whichbyte( size_t __pos )\n-    { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n-  static size_t _S_whichbit( size_t __pos )\n-    { return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n-  static _WordT _S_maskbit( size_t __pos )\n-    { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n-\n-  _WordT& _M_getword(size_t __pos)       { return _M_w[_S_whichword(__pos)]; }\n-  _WordT  _M_getword(size_t __pos) const { return _M_w[_S_whichword(__pos)]; }\n-\n-  _WordT& _M_hiword()       { return _M_w[_Nw - 1]; }\n-  _WordT  _M_hiword() const { return _M_w[_Nw - 1]; }\n-\n-  void _M_do_and(const _Base_bitset<_Nw>& __x) {\n-    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-      _M_w[__i] &= __x._M_w[__i];\n-    }\n-  }\n-\n-  void _M_do_or(const _Base_bitset<_Nw>& __x) {\n-    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-      _M_w[__i] |= __x._M_w[__i];\n-    }\n-  }\n-\n-  void _M_do_xor(const _Base_bitset<_Nw>& __x) {\n-    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-      _M_w[__i] ^= __x._M_w[__i];\n-    }\n-  }\n-\n-  void _M_do_left_shift(size_t __shift);\n-  void _M_do_right_shift(size_t __shift);\n-\n-  void _M_do_flip() {\n-    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-      _M_w[__i] = ~_M_w[__i];\n-    }\n-  }\n-\n-  void _M_do_set() {\n-    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-      _M_w[__i] = ~static_cast<_WordT>(0);\n-    }\n-  }\n-\n-  void _M_do_reset() { memset(_M_w, 0, _Nw * sizeof(_WordT)); }\n-\n-  bool _M_is_equal(const _Base_bitset<_Nw>& __x) const {\n-    for (size_t __i = 0; __i < _Nw; ++__i) {\n-      if (_M_w[__i] != __x._M_w[__i])\n-        return false;\n-    }\n-    return true;\n-  }\n-\n-  bool _M_is_any() const {\n-    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-      if ( _M_w[__i] != static_cast<_WordT>(0) )\n-        return true;\n-    }\n-    return false;\n-  }\n-\n-  size_t _M_do_count() const {\n-    size_t __result = 0;\n-    const unsigned char* __byte_ptr = (const unsigned char*)_M_w;\n-    const unsigned char* __end_ptr = (const unsigned char*)(_M_w+_Nw);\n-\n-    while ( __byte_ptr < __end_ptr ) {\n-      __result += _Bit_count<true>::_S_bit_count[*__byte_ptr];\n-      __byte_ptr++;\n-    }\n-    return __result;\n-  }\n-\n-  unsigned long _M_do_to_ulong() const; \n-\n-  // find first \"on\" bit\n-  size_t _M_do_find_first(size_t __not_found) const;\n-\n-  // find the next \"on\" bit that follows \"prev\"\n-  size_t _M_do_find_next(size_t __prev, size_t __not_found) const;\n-};\n-\n-//\n-// Definitions of non-inline functions from _Base_bitset.\n-// \n-\n-template<size_t _Nw>\n-void _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) \n-{\n-  if (__shift != 0) {\n-    const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n-    const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n-\n-    if (__offset == 0)\n-      for (size_t __n = _Nw - 1; __n >= __wshift; --__n)\n-        _M_w[__n] = _M_w[__n - __wshift];\n-\n-    else {\n-      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n-      for (size_t __n = _Nw - 1; __n > __wshift; --__n)\n-        _M_w[__n] = (_M_w[__n - __wshift] << __offset) | \n-                    (_M_w[__n - __wshift - 1] >> __sub_offset);\n-      _M_w[__wshift] = _M_w[0] << __offset;\n-    }\n-\n-    fill(_M_w + 0, _M_w + __wshift, static_cast<_WordT>(0));\n-  }\n-}\n-\n-template<size_t _Nw>\n-void _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) \n-{\n-  if (__shift != 0) {\n-    const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n-    const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n-    const size_t __limit = _Nw - __wshift - 1;\n-\n-    if (__offset == 0)\n-      for (size_t __n = 0; __n <= __limit; ++__n)\n-        _M_w[__n] = _M_w[__n + __wshift];\n-\n-    else {\n-      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n-      for (size_t __n = 0; __n < __limit; ++__n)\n-        _M_w[__n] = (_M_w[__n + __wshift] >> __offset) |\n-                    (_M_w[__n + __wshift + 1] << __sub_offset);\n-      _M_w[__limit] = _M_w[_Nw-1] >> __offset;\n-    }\n-\n-    fill(_M_w + __limit + 1, _M_w + _Nw, static_cast<_WordT>(0));\n-  }\n-}\n-\n-template<size_t _Nw>\n-unsigned long _Base_bitset<_Nw>::_M_do_to_ulong() const\n-{\n-  for (size_t __i = 1; __i < _Nw; ++__i) \n-    if (_M_w[__i]) \n-      __throw_overflow_error(\"bitset\");\n-  \n-  return _M_w[0];\n-}\n-\n-template<size_t _Nw>\n-size_t _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const \n-{\n-  for ( size_t __i = 0; __i < _Nw; __i++ ) {\n-    _WordT __thisword = _M_w[__i];\n-    if ( __thisword != static_cast<_WordT>(0) ) {\n-      // find byte within word\n-      for ( size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n-        unsigned char __this_byte\n-          = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-        if ( __this_byte )\n-          return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n-            _First_one<true>::_S_first_one[__this_byte];\n-\n-        __thisword >>= CHAR_BIT;\n-      }\n-    }\n-  }\n-  // not found, so return an indication of failure.\n-  return __not_found;\n-}\n-\n-template<size_t _Nw>\n-size_t\n-_Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const\n-{\n-  // make bound inclusive\n-  ++__prev;\n-\n-  // check out of bounds\n-  if ( __prev >= _Nw * _GLIBCPP_BITSET_BITS_PER_WORD )\n-    return __not_found;\n-\n-    // search first word\n-  size_t __i = _S_whichword(__prev);\n-  _WordT __thisword = _M_w[__i];\n-\n-    // mask off bits below bound\n-  __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);\n-\n-  if ( __thisword != static_cast<_WordT>(0) ) {\n-    // find byte within word\n-    // get first byte into place\n-    __thisword >>= _S_whichbyte(__prev) * CHAR_BIT;\n-    for ( size_t __j = _S_whichbyte(__prev); __j < sizeof(_WordT); __j++ ) {\n-      unsigned char __this_byte\n-        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-      if ( __this_byte )\n-        return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n-          _First_one<true>::_S_first_one[__this_byte];\n-\n-      __thisword >>= CHAR_BIT;\n-    }\n-  }\n-\n-  // check subsequent words\n-  __i++;\n-  for ( ; __i < _Nw; __i++ ) {\n-    __thisword = _M_w[__i];\n-    if ( __thisword != static_cast<_WordT>(0) ) {\n-      // find byte within word\n-      for ( size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n-        unsigned char __this_byte\n-          = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n-        if ( __this_byte )\n-          return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n-            _First_one<true>::_S_first_one[__this_byte];\n-\n-        __thisword >>= CHAR_BIT;\n-      }\n-    }\n-  }\n-\n-  // not found, so return an indication of failure.\n-  return __not_found;\n-} // end _M_do_find_next\n-\n-\n-// ------------------------------------------------------------\n-\n-//\n-// Base class: specialization for a single word.\n-//\n-\n-template<> struct _Base_bitset<1> {\n-  typedef unsigned long _WordT;\n-  _WordT _M_w;\n-\n-  _Base_bitset( void ) : _M_w(0) {}\n-  _Base_bitset(unsigned long __val) : _M_w(__val) {}\n-\n-  static size_t _S_whichword( size_t __pos )\n-    { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n-  static size_t _S_whichbyte( size_t __pos )\n-    { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n-  static size_t _S_whichbit( size_t __pos )\n-    {  return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n-  static _WordT _S_maskbit( size_t __pos )\n-    { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n-\n-  _WordT& _M_getword(size_t)       { return _M_w; }\n-  _WordT  _M_getword(size_t) const { return _M_w; }\n-\n-  _WordT& _M_hiword()       { return _M_w; }\n-  _WordT  _M_hiword() const { return _M_w; }\n-\n-  void _M_do_and(const _Base_bitset<1>& __x) { _M_w &= __x._M_w; }\n-  void _M_do_or(const _Base_bitset<1>& __x)  { _M_w |= __x._M_w; }\n-  void _M_do_xor(const _Base_bitset<1>& __x) { _M_w ^= __x._M_w; }\n-  void _M_do_left_shift(size_t __shift)     { _M_w <<= __shift; }\n-  void _M_do_right_shift(size_t __shift)    { _M_w >>= __shift; }\n-  void _M_do_flip()                       { _M_w = ~_M_w; }\n-  void _M_do_set()                        { _M_w = ~static_cast<_WordT>(0); }\n-  void _M_do_reset()                      { _M_w = 0; }\n-\n-  bool _M_is_equal(const _Base_bitset<1>& __x) const\n-    { return _M_w == __x._M_w; }\n-  bool _M_is_any() const\n-    { return _M_w != 0; }\n-\n-  size_t _M_do_count() const {\n-    size_t __result = 0;\n-    const unsigned char* __byte_ptr = (const unsigned char*)&_M_w;\n-    const unsigned char* __end_ptr\n-      = ((const unsigned char*)&_M_w)+sizeof(_M_w);\n-    while ( __byte_ptr < __end_ptr ) {\n-      __result += _Bit_count<true>::_S_bit_count[*__byte_ptr];\n-      __byte_ptr++;\n-    }\n-    return __result;\n-  }\n-\n-  unsigned long _M_do_to_ulong() const { return _M_w; }\n-\n-  size_t _M_do_find_first(size_t __not_found) const;\n-\n-  // find the next \"on\" bit that follows \"prev\"\n-  size_t _M_do_find_next(size_t __prev, size_t __not_found) const; \n-\n-};\n-\n-\n-// ------------------------------------------------------------\n-// Helper class to zero out the unused high-order bits in the highest word.\n-\n-template <size_t _Extrabits> struct _Sanitize {\n-  static void _M_do_sanitize(unsigned long& __val)\n-    { __val &= ~((~static_cast<unsigned long>(0)) << _Extrabits); }\n-};\n-\n-template<> struct _Sanitize<0> {\n-  static void _M_do_sanitize(unsigned long) {}\n-};\n-\n-\n-\n-// ------------------------------------------------------------\n-// Class bitset.\n-//   _Nb may be any nonzero number of type size_t.\n-\n-template<size_t _Nb>\n-class bitset : private _Base_bitset<__BITSET_WORDS(_Nb)>\n-{\n-private:\n-  typedef _Base_bitset<__BITSET_WORDS(_Nb)> _Base;\n-  typedef unsigned long _WordT;\n-\n-private:\n-  void _M_do_sanitize() {\n-    _Sanitize<_Nb%_GLIBCPP_BITSET_BITS_PER_WORD>::_M_do_sanitize(this->_M_hiword());\n-  }\n-\n-public:\n-\n-  // bit reference:\n-  class reference;\n-  friend class reference;\n-\n-  class reference {\n-    friend class bitset;\n-\n-    _WordT *_M_wp;\n-    size_t _M_bpos;\n-\n-    // left undefined\n-    reference();\n-\n-  public:\n-    reference( bitset& __b, size_t __pos ) {\n-      _M_wp = &__b._M_getword(__pos);\n-      _M_bpos = _Base::_S_whichbit(__pos);\n-    }\n-\n-    ~reference() {}\n-\n-    // for b[i] = __x;\n-    reference& operator=(bool __x) {\n-      if ( __x )\n-        *_M_wp |= _Base::_S_maskbit(_M_bpos);\n-      else\n-        *_M_wp &= ~_Base::_S_maskbit(_M_bpos);\n-\n-      return *this;\n-    }\n-\n-    // for b[i] = b[__j];\n-    reference& operator=(const reference& __j) {\n-      if ( (*(__j._M_wp) & _Base::_S_maskbit(__j._M_bpos)) )\n-        *_M_wp |= _Base::_S_maskbit(_M_bpos);\n-      else\n-        *_M_wp &= ~_Base::_S_maskbit(_M_bpos);\n-\n-      return *this;\n-    }\n-\n-    // flips the bit\n-    bool operator~() const\n-      { return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) == 0; }\n-\n-    // for __x = b[i];\n-    operator bool() const\n-      { return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }\n-\n-    // for b[i].flip();\n-    reference& flip() {\n-      *_M_wp ^= _Base::_S_maskbit(_M_bpos);\n-      return *this;\n-    }\n-  };\n-\n-  // 23.3.5.1 constructors:\n-  bitset() {}\n-  bitset(unsigned long __val) : _Base_bitset<__BITSET_WORDS(_Nb)>(__val) \n-    { _M_do_sanitize(); }\n-\n-  template<class _CharT, class _Traits, class _Alloc>\n-  explicit bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n-                  size_t __pos = 0)\n-    : _Base() \n-  {\n-    if (__pos > __s.size()) \n-      __throw_out_of_range(\"bitset\");\n-    _M_copy_from_string(__s, __pos,\n-                        basic_string<_CharT, _Traits, _Alloc>::npos);\n-  }\n-  template<class _CharT, class _Traits, class _Alloc>\n-  bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n-         size_t __pos,\n-         size_t __n)\n-    : _Base() \n-  {\n-    if (__pos > __s.size()) \n-      __throw_out_of_range(\"bitset\");\n-    _M_copy_from_string(__s, __pos, __n);\n-  }\n-\n-  // 23.3.5.2 bitset operations:\n-  bitset<_Nb>& operator&=(const bitset<_Nb>& __rhs) {\n-    this->_M_do_and(__rhs);\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& operator|=(const bitset<_Nb>& __rhs) {\n-    this->_M_do_or(__rhs);\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& operator^=(const bitset<_Nb>& __rhs) {\n-    this->_M_do_xor(__rhs);\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& operator<<=(size_t __pos) {\n-    this->_M_do_left_shift(__pos);\n-    this->_M_do_sanitize();\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& operator>>=(size_t __pos) {\n-    this->_M_do_right_shift(__pos);\n-    this->_M_do_sanitize();\n-    return *this;\n-  }\n-\n-  //\n-  // Extension:\n-  // Versions of single-bit set, reset, flip, test with no range checking.\n-  //\n-\n-  bitset<_Nb>& _Unchecked_set(size_t __pos) {\n-    this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& _Unchecked_set(size_t __pos, int __val) {\n-    if (__val)\n-      this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n-    else\n-      this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);\n-\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& _Unchecked_reset(size_t __pos) {\n-    this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& _Unchecked_flip(size_t __pos) {\n-    this->_M_getword(__pos) ^= _Base::_S_maskbit(__pos);\n-    return *this;\n-  }\n-\n-  bool _Unchecked_test(size_t __pos) const {\n-    return (this->_M_getword(__pos) & _Base::_S_maskbit(__pos))\n-      != static_cast<_WordT>(0);\n-  }\n-\n-  // Set, reset, and flip.\n-\n-  bitset<_Nb>& set() {\n-    this->_M_do_set();\n-    this->_M_do_sanitize();\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& set(size_t __pos, bool __val = true) {\n-    if (__pos >= _Nb)\n-      __throw_out_of_range(\"bitset\");\n-\n-    return _Unchecked_set(__pos, __val);\n-  }\n-\n-  bitset<_Nb>& reset() {\n-    this->_M_do_reset();\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& reset(size_t __pos) {\n-    if (__pos >= _Nb)\n-      __throw_out_of_range(\"bitset\");\n-\n-    return _Unchecked_reset(__pos);\n-  }\n-\n-  bitset<_Nb>& flip() {\n-    this->_M_do_flip();\n-    this->_M_do_sanitize();\n-    return *this;\n-  }\n-\n-  bitset<_Nb>& flip(size_t __pos) {\n-    if (__pos >= _Nb)\n-      __throw_out_of_range(\"bitset\");\n-\n-    return _Unchecked_flip(__pos);\n-  }\n-\n-  bitset<_Nb> operator~() const { \n-    return bitset<_Nb>(*this).flip();\n-  }\n-\n-  // element access:\n-  //for b[i];\n-  // _GLIBCPP_RESOLVE_LIB_DEFECTS Note that this implementation already\n-  // resolves DR 11 (items 1 and 2), but does not do the range-checking\n-  // required by that DR's resolution.  -pme\n-  reference operator[](size_t __pos) { return reference(*this,__pos); }\n-  bool operator[](size_t __pos) const { return _Unchecked_test(__pos); }\n-\n-  unsigned long to_ulong() const { return this->_M_do_to_ulong(); }\n-\n-  template <class _CharT, class _Traits, class _Alloc>\n-  basic_string<_CharT, _Traits, _Alloc> to_string() const {\n-    basic_string<_CharT, _Traits, _Alloc> __result;\n-    _M_copy_to_string(__result);\n-    return __result;\n-  }\n-\n-  // Helper functions for string operations.\n-  template<class _CharT, class _Traits, class _Alloc>\n-  void _M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,\n-                          size_t,\n-                          size_t);\n-\n-  template<class _CharT, class _Traits, class _Alloc>\n-  void _M_copy_to_string(basic_string<_CharT,_Traits,_Alloc>&) const;\n-\n-  size_t count() const { return this->_M_do_count(); }\n-\n-  size_t size() const { return _Nb; }\n-\n-  bool operator==(const bitset<_Nb>& __rhs) const {\n-    return this->_M_is_equal(__rhs);\n-  }\n-  bool operator!=(const bitset<_Nb>& __rhs) const {\n-    return !this->_M_is_equal(__rhs);\n-  }\n-\n-  bool test(size_t __pos) const {\n-    if (__pos >= _Nb)\n-      __throw_out_of_range(\"bitset\");\n-\n-    return _Unchecked_test(__pos);\n-  }\n-\n-  bool any() const { return this->_M_is_any(); }\n-  bool none() const { return !this->_M_is_any(); }\n-\n-  bitset<_Nb> operator<<(size_t __pos) const\n-    { return bitset<_Nb>(*this) <<= __pos; }\n-  bitset<_Nb> operator>>(size_t __pos) const\n-    { return bitset<_Nb>(*this) >>= __pos; }\n-\n-  //\n-  // EXTENSIONS: bit-find operations.  These operations are\n-  // experimental, and are subject to change or removal in future\n-  // versions.\n-  // \n-\n-  // find the index of the first \"on\" bit\n-  size_t _Find_first() const \n-    { return this->_M_do_find_first(_Nb); }\n-\n-  // find the index of the next \"on\" bit after prev\n-  size_t _Find_next( size_t __prev ) const \n-    { return this->_M_do_find_next(__prev, _Nb); }\n-\n-};\n-\n-//\n-// Definitions of non-inline member functions.\n-//\n-\n-template <size_t _Nb>\n-template<class _CharT, class _Traits, class _Alloc>\n-void bitset<_Nb>\n-  ::_M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,\n-                        size_t __pos,\n-                        size_t __n)\n-{\n-  reset();\n-  const size_t __nbits = min(_Nb, min(__n, __s.size() - __pos));\n-  for (size_t __i = 0; __i < __nbits; ++__i) {\n-    switch(__s[__pos + __nbits - __i - 1]) {\n-    case '0':\n-      break;\n-    case '1':\n-      set(__i);\n-      break;\n-    default:\n-      __throw_invalid_argument(\"bitset\");\n-    }\n-  }\n-}\n-\n-template <size_t _Nb>\n-template <class _CharT, class _Traits, class _Alloc>\n-void bitset<_Nb>\n-  ::_M_copy_to_string(basic_string<_CharT, _Traits, _Alloc>& __s) const\n-{\n-  __s.assign(_Nb, '0');\n-  \n-  for (size_t __i = 0; __i < _Nb; ++__i) \n-    if (_Unchecked_test(__i))\n-      __s[_Nb - 1 - __i] = '1';\n-}\n-\n-// ------------------------------------------------------------\n-\n-//\n-// 23.3.5.3 bitset operations:\n-//\n-\n-template <size_t _Nb>\n-inline bitset<_Nb> operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {\n-  bitset<_Nb> __result(__x);\n-  __result &= __y;\n-  return __result;\n-}\n-\n-\n-template <size_t _Nb>\n-inline bitset<_Nb> operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {\n-  bitset<_Nb> __result(__x);\n-  __result |= __y;\n-  return __result;\n-}\n-\n-template <size_t _Nb>\n-inline bitset<_Nb> operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {\n-  bitset<_Nb> __result(__x);\n-  __result ^= __y;\n-  return __result;\n-}\n-\n-template <class _CharT, class _Traits, size_t _Nb>\n-basic_istream<_CharT, _Traits>&\n-operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)\n-{\n-  typedef typename _Traits::char_type char_type;\n-  basic_string<_CharT, _Traits> __tmp;\n-  __tmp.reserve(_Nb);\n-\n-  // Skip whitespace\n-  typename basic_istream<_CharT, _Traits>::sentry __sentry(__is);\n-  if (__sentry) {\n-    basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();\n-    for (size_t __i = 0; __i < _Nb; ++__i) {\n-      static typename _Traits::int_type __eof = _Traits::eof();\n-\n-      typename _Traits::int_type __c1 = __buf->sbumpc();\n-      if (_Traits::eq_int_type(__c1, __eof)) {\n-        __is.setstate(ios_base::eofbit);\n-        break;\n-      }\n-      else {\n-        char_type __c2 = _Traits::to_char_type(__c1);\n-        char_type __c  = __is.narrow(__c2, '*');\n-\n-        if (__c == '0' || __c == '1')\n-          __tmp.push_back(__c);\n-        else if (_Traits::eq_int_type(__buf->sputbackc(__c2), __eof)) {\n-          __is.setstate(ios_base::failbit);\n-          break;\n-        }\n-      }\n-    }\n-\n-    if (__tmp.empty())\n-      __is.setstate(ios_base::failbit);\n-    else\n-      __x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n-  }\n-\n-  return __is;\n-}\n-\n-template <class _CharT, class _Traits, size_t _Nb>\n-basic_ostream<_CharT, _Traits>&\n-operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Nb>& __x)\n-{\n-  basic_string<_CharT, _Traits> __tmp;\n-  __x._M_copy_to_string(__tmp);\n-  return __os << __tmp;\n-}\n-\n-} // namespace std\n-\n-#undef __BITSET_WORDS\n-\n-#endif /* __GLIBCPP_BITSET */\n-\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-"}, {"sha": "d07a6b791df9e62afb9a11d104671af7e7803007", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "removed", "additions": 0, "deletions": 1058, "changes": 1058, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,1058 +0,0 @@\n-// The template and inlines for the -*- C++ -*- complex number classes.\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 26.2  Complex Numbers\n-// Note: this is not a conforming implementation.\n-// Initially implemented by Ulrich Drepper <drepper@cygnus.com>\n-// Improved by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>\n-//\n-\n-/** @file std_complex.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_COMPLEX\n-#define _CPP_COMPLEX\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/cpp_type_traits.h>\n-#include <bits/std_cmath.h>\n-#include <bits/std_sstream.h>\n-\n-namespace std\n-{\n-  // Forward declarations\n-  template<typename _Tp> class complex;\n-  template<> class complex<float>;\n-  template<> class complex<double>;\n-  template<> class complex<long double>;\n-\n-  template<typename _Tp> _Tp abs(const complex<_Tp>&);\n-  template<typename _Tp> _Tp arg(const complex<_Tp>&);\n-  template<typename _Tp> _Tp norm(const complex<_Tp>&);\n-\n-  template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);\n-\n-  // Transcendentals:\n-  template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> cosh(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> exp(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);\n-  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);\n-  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, \n-\t\t\t\t\t   const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> sin(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> sinh(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> sqrt(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);\n-  template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);\n-    \n-    \n-  // 26.2.2  Primary template class complex\n-  template<typename _Tp>\n-    class complex\n-    {\n-    public:\n-      typedef _Tp value_type;\n-      \n-      complex(const _Tp& = _Tp(), const _Tp & = _Tp());\n-\n-      // Let's the compiler synthetize the copy constructor   \n-      // complex (const complex<_Tp>&);\n-      template<typename _Up>\n-        complex(const complex<_Up>&);\n-        \n-      _Tp real() const;\n-      _Tp imag() const;\n-\n-      complex<_Tp>& operator=(const _Tp&);\n-      complex<_Tp>& operator+=(const _Tp&);\n-      complex<_Tp>& operator-=(const _Tp&);\n-      complex<_Tp>& operator*=(const _Tp&);\n-      complex<_Tp>& operator/=(const _Tp&);\n-\n-      // Let's the compiler synthetize the\n-      // copy and assignment operator\n-      // complex<_Tp>& operator= (const complex<_Tp>&);\n-      template<typename _Up>\n-        complex<_Tp>& operator=(const complex<_Up>&);\n-      template<typename _Up>\n-        complex<_Tp>& operator+=(const complex<_Up>&);\n-      template<typename _Up>\n-        complex<_Tp>& operator-=(const complex<_Up>&);\n-      template<typename _Up>\n-        complex<_Tp>& operator*=(const complex<_Up>&);\n-      template<typename _Up>\n-        complex<_Tp>& operator/=(const complex<_Up>&);\n-\n-    private:\n-      _Tp _M_real, _M_imag;\n-    };\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    complex<_Tp>::real() const { return _M_real; }\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    complex<_Tp>::imag() const { return _M_imag; }\n-\n-  template<typename _Tp>\n-    inline \n-    complex<_Tp>::complex(const _Tp& __r, const _Tp& __i)\n-    : _M_real(__r), _M_imag(__i) { }\n-\n-  template<typename _Tp>\n-    template<typename _Up>\n-    inline \n-    complex<_Tp>::complex(const complex<_Up>& __z)\n-    : _M_real(__z.real()), _M_imag(__z.imag()) { }\n-        \n-  template<typename _Tp>\n-    complex<_Tp>&\n-    complex<_Tp>::operator=(const _Tp& __t)\n-    {\n-     _M_real = __t;\n-     _M_imag = _Tp();\n-     return *this;\n-    } \n-\n-  // 26.2.5/1\n-  template<typename _Tp>\n-    inline complex<_Tp>&\n-    complex<_Tp>::operator+=(const _Tp& __t)\n-    {\n-      _M_real += __t;\n-      return *this;\n-    }\n-\n-  // 26.2.5/3\n-  template<typename _Tp>\n-    inline complex<_Tp>&\n-    complex<_Tp>::operator-=(const _Tp& __t)\n-    {\n-      _M_real -= __t;\n-      return *this;\n-    }\n-\n-  // 26.2.5/5\n-  template<typename _Tp>\n-    complex<_Tp>&\n-    complex<_Tp>::operator*=(const _Tp& __t)\n-    {\n-      _M_real *= __t;\n-      _M_imag *= __t;\n-      return *this;\n-    }\n-\n-  // 26.2.5/7\n-  template<typename _Tp>\n-    complex<_Tp>&\n-    complex<_Tp>::operator/=(const _Tp& __t)\n-    {\n-      _M_real /= __t;\n-      _M_imag /= __t;\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    template<typename _Up>\n-    complex<_Tp>&\n-    complex<_Tp>::operator=(const complex<_Up>& __z)\n-    {\n-      _M_real = __z.real();\n-      _M_imag = __z.imag();\n-      return *this;\n-    }\n-\n-  // 26.2.5/9\n-  template<typename _Tp>\n-    template<typename _Up>\n-    complex<_Tp>&\n-    complex<_Tp>::operator+=(const complex<_Up>& __z)\n-    {\n-      _M_real += __z.real();\n-      _M_imag += __z.imag();\n-      return *this;\n-    }\n-\n-  // 26.2.5/11\n-  template<typename _Tp>\n-    template<typename _Up>\n-    complex<_Tp>&\n-    complex<_Tp>::operator-=(const complex<_Up>& __z)\n-    {\n-      _M_real -= __z.real();\n-      _M_imag -= __z.imag();\n-      return *this;\n-    }\n-\n-  // 26.2.5/13\n-  // XXX: This is a grammar school implementation.\n-  template<typename _Tp>\n-    template<typename _Up>\n-    complex<_Tp>&\n-    complex<_Tp>::operator*=(const complex<_Up>& __z)\n-    {\n-      const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();\n-      _M_imag = _M_real * __z.imag() + _M_imag * __z.real();\n-      _M_real = __r;\n-      return *this;\n-    }\n-\n-  // 26.2.5/15\n-  // XXX: This is a grammar school implementation.\n-  template<typename _Tp>\n-    template<typename _Up>\n-    complex<_Tp>&\n-    complex<_Tp>::operator/=(const complex<_Up>& __z)\n-    {\n-      const _Tp __r =  _M_real * __z.real() + _M_imag * __z.imag();\n-      const _Tp __n = norm(__z);\n-      _M_imag = (_M_imag * __z.real() - _M_real * __z.imag()) / __n;\n-      _M_real = __r / __n;\n-      return *this;\n-    }\n-    \n-  // Operators:\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) += __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator+(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) += __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator+(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__y) += __x; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) -= __y; }\n-    \n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator-(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) -= __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator-(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) -= __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) *= __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator*(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) *= __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator*(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__y) *= __x; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) /= __y; }\n-    \n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator/(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) /= __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator/(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) /= __y; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator+(const complex<_Tp>& __x)\n-    { return __x; }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    operator-(const complex<_Tp>& __x)\n-    {  return complex<_Tp>(-__x.real(), -__x.imag()); }\n-\n-  template<typename _Tp>\n-    inline bool\n-    operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return __x.real() == __y.real() && __x.imag() == __y.imag(); }\n-\n-  template<typename _Tp>\n-    inline bool\n-    operator==(const complex<_Tp>& __x, const _Tp& __y)\n-    { return __x.real() == __y && __x.imag() == _Tp(); }\n-\n-  template<typename _Tp>\n-    inline bool\n-    operator==(const _Tp& __x, const complex<_Tp>& __y)\n-    { return __x == __y.real() && _Tp() == __y.imag(); }\n-\n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return __x.real() != __y.real() || __x.imag() != __y.imag(); }\n-\n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const complex<_Tp>& __x, const _Tp& __y)\n-    { return __x.real() != __y || __x.imag() != _Tp(); }\n-\n-  template<typename _Tp>\n-    inline bool\n-    operator!=(const _Tp& __x, const complex<_Tp>& __y)\n-    { return __x != __y.real() || _Tp() != __y.imag(); }\n-\n-  template<typename _Tp, typename _CharT, class _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)\n-    {\n-      _Tp __re_x, __im_x;\n-      _CharT __ch;\n-      __is >> __ch;\n-      if (__ch == '(') \n-\t{\n-\t  __is >> __re_x >> __ch;\n-\t  if (__ch == ',') \n-\t    {\n-\t      __is >> __im_x >> __ch;\n-\t      if (__ch == ')') \n-\t\t__x = complex<_Tp>(__re_x, __im_x);\n-\t      else\n-\t\t__is.setstate(ios_base::failbit);\n-\t    }\n-\t  else if (__ch == ')') \n-\t    __x = complex<_Tp>(__re_x, _Tp(0));\n-\t  else\n-\t    __is.setstate(ios_base::failbit);\n-\t}\n-      else \n-\t{\n-\t  __is.putback(__ch);\n-\t  __is >> __re_x;\n-\t  __x = complex<_Tp>(__re_x, _Tp(0));\n-\t}\n-      return __is;\n-    }\n-\n-  template<typename _Tp, typename _CharT, class _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)\n-    {\n-      basic_ostringstream<_CharT, _Traits> __s;\n-      __s.flags(__os.flags());\n-      __s.imbue(__os.getloc());\n-      __s.precision(__os.precision());\n-      __s << '(' << __x.real() << \",\" << __x.imag() << ')';\n-      return __os << __s.str();\n-    }\n-\n-  // Values\n-  template<typename _Tp>\n-    inline _Tp\n-    real(const complex<_Tp>& __z)\n-    { return __z.real(); }\n-    \n-  template<typename _Tp>\n-    inline _Tp\n-    imag(const complex<_Tp>& __z)\n-    { return __z.imag(); }\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    abs(const complex<_Tp>& __z)\n-    {\n-      _Tp __x = __z.real();\n-      _Tp __y = __z.imag();\n-      const _Tp __s = max(abs(__x), abs(__y));\n-      if (__s == _Tp())  // well ...\n-        return __s;\n-      __x /= __s; \n-      __y /= __s;\n-      return __s * sqrt(__x * __x + __y * __y);\n-    }\n-\n-  template<typename _Tp>\n-    inline _Tp\n-    arg(const complex<_Tp>& __z)\n-    { return atan2(__z.imag(), __z.real()); }\n-\n-  // 26.2.7/5: norm(__z) returns the squared magintude of __z.\n-  //     As defined, norm() is -not- a norm is the common mathematical\n-  //     sens used in numerics.  The helper class _Norm_helper<> tries to\n-  //     distinguish between builtin floating point and the rest, so as\n-  //     to deliver an answer as close as possible to the real value.\n-  template<bool>\n-    struct _Norm_helper\n-    {\n-      template<typename _Tp>\n-        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n-        {\n-          const _Tp __x = __z.real();\n-          const _Tp __y = __z.imag();\n-          return __x * __x + __y * __y;\n-        }\n-    };\n-\n-  template<>\n-    struct _Norm_helper<true>\n-    {\n-      template<typename _Tp>\n-        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n-        {\n-          _Tp __res = abs(__z);\n-          return __res * __res;\n-        }\n-    };\n-  \n-  template<typename _Tp>\n-    inline _Tp\n-    norm(const complex<_Tp>& __z)\n-    {\n-      return _Norm_helper<__is_floating<_Tp>::_M_type>::_S_do_it(__z);\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    polar(const _Tp& __rho, const _Tp& __theta)\n-    { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    conj(const complex<_Tp>& __z)\n-    { return complex<_Tp>(__z.real(), -__z.imag()); }\n-  \n-  // Transcendentals\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    cos(const complex<_Tp>& __z)\n-    {\n-      const _Tp __x = __z.real();\n-      const _Tp __y = __z.imag();\n-      return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    cosh(const complex<_Tp>& __z)\n-    {\n-      const _Tp __x = __z.real();\n-      const _Tp __y = __z.imag();\n-      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    exp(const complex<_Tp>& __z)\n-    { return polar(exp(__z.real()), __z.imag()); }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    log(const complex<_Tp>& __z)\n-    { return complex<_Tp>(log(abs(__z)), arg(__z)); }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    log10(const complex<_Tp>& __z)\n-    { return log(__z) / log(_Tp(10.0)); }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    sin(const complex<_Tp>& __z)\n-    {\n-      const _Tp __x = __z.real();\n-      const _Tp __y = __z.imag();\n-      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y)); \n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    sinh(const complex<_Tp>& __z)\n-    {\n-      const _Tp __x = __z.real();\n-      const _Tp  __y = __z.imag();\n-      return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n-    }\n-\n-  template<typename _Tp>\n-    complex<_Tp>\n-    sqrt(const complex<_Tp>& __z)\n-    {\n-      _Tp __x = __z.real();\n-      _Tp __y = __z.imag();\n-\n-      if (__x == _Tp())\n-        {\n-          _Tp __t = sqrt(abs(__y) / 2);\n-          return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);\n-        }\n-      else\n-        {\n-          _Tp __t = sqrt(2 * (abs(__z) + abs(__x)));\n-          _Tp __u = __t / 2;\n-          return __x > _Tp()\n-            ? complex<_Tp>(__u, __y / __t)\n-            : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);\n-        }\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    tan(const complex<_Tp>& __z)\n-    {\n-      return sin(__z) / cos(__z);\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    tanh(const complex<_Tp>& __z)\n-    {\n-      return sinh(__z) / cosh(__z);\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    pow(const complex<_Tp>& __z, int __n)\n-    {\n-      return __pow_helper(__z, __n);\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    pow(const complex<_Tp>& __x, const _Tp& __y)\n-    {\n-      return exp(__y * log(__x));\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    {\n-      return exp(__y * log(__x));\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<_Tp>\n-    pow(const _Tp& __x, const complex<_Tp>& __y)\n-    {\n-      return exp(__y * log(__x));\n-    }\n-\n-  // 26.2.3  complex specializations\n-  // complex<float> specialization\n-  template<> class complex<float>\n-  {\n-  public:\n-    typedef float value_type;\n-    \n-    complex(float = 0.0f, float = 0.0f);\n-#ifdef _GLIBCPP_BUGGY_COMPLEX\n-    complex(const complex& __z) : _M_value(__z._M_value) { }\n-#endif\n-    explicit complex(const complex<double>&);\n-    explicit complex(const complex<long double>&);\n-\n-    float real() const;\n-    float imag() const;\n-\n-    complex<float>& operator=(float);\n-    complex<float>& operator+=(float);\n-    complex<float>& operator-=(float);\n-    complex<float>& operator*=(float);\n-    complex<float>& operator/=(float);\n-        \n-    // Let's the compiler synthetize the copy and assignment\n-    // operator.  It always does a pretty good job.\n-    // complex& operator= (const complex&);\n-    template<typename _Tp>\n-      complex<float>&operator=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<float>& operator+=(const complex<_Tp>&);\n-    template<class _Tp>\n-      complex<float>& operator-=(const complex<_Tp>&);\n-    template<class _Tp>\n-      complex<float>& operator*=(const complex<_Tp>&);\n-    template<class _Tp>\n-      complex<float>&operator/=(const complex<_Tp>&);\n-\n-  private:\n-    typedef __complex__ float _ComplexT;\n-    _ComplexT _M_value;\n-\n-    complex(_ComplexT __z) : _M_value(__z) { }\n-        \n-    friend class complex<double>;\n-    friend class complex<long double>;\n-  };\n-\n-  inline float\n-  complex<float>::real() const\n-  { return __real__ _M_value; }\n-\n-  inline float\n-  complex<float>::imag() const\n-  { return __imag__ _M_value; }\n-\n-  inline\n-  complex<float>::complex(float r, float i)\n-  {\n-    __real__ _M_value = r;\n-    __imag__ _M_value = i;\n-  }\n-\n-  inline complex<float>&\n-  complex<float>::operator=(float __f)\n-  {\n-    __real__ _M_value = __f;\n-    __imag__ _M_value = 0.0f;\n-    return *this;\n-  }\n-\n-  inline complex<float>&\n-  complex<float>::operator+=(float __f)\n-  {\n-    __real__ _M_value += __f;\n-    return *this;\n-  }\n-\n-  inline complex<float>&\n-  complex<float>::operator-=(float __f)\n-  {\n-    __real__ _M_value -= __f;\n-    return *this;\n-  }\n-\n-  inline complex<float>&\n-  complex<float>::operator*=(float __f)\n-  {\n-    _M_value *= __f;\n-    return *this;\n-  }\n-\n-  inline complex<float>&\n-  complex<float>::operator/=(float __f)\n-  {\n-    _M_value /= __f;\n-    return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline complex<float>&\n-  complex<float>::operator=(const complex<_Tp>& __z)\n-  {\n-    __real__ _M_value = __z.real();\n-    __imag__ _M_value = __z.imag();\n-    return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline complex<float>&\n-  complex<float>::operator+=(const complex<_Tp>& __z)\n-  {\n-    __real__ _M_value += __z.real();\n-    __imag__ _M_value += __z.imag();\n-    return *this;\n-  }\n-    \n-  template<typename _Tp>\n-    inline complex<float>&\n-    complex<float>::operator-=(const complex<_Tp>& __z)\n-    {\n-     __real__ _M_value -= __z.real();\n-     __imag__ _M_value -= __z.imag();\n-     return *this;\n-    } \n-\n-  template<typename _Tp>\n-    inline complex<float>&\n-    complex<float>::operator*=(const complex<_Tp>& __z)\n-    {\n-      _ComplexT __t;\n-      __real__ __t = __z.real();\n-      __imag__ __t = __z.imag();\n-      _M_value *= __t;\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<float>&\n-    complex<float>::operator/=(const complex<_Tp>& __z)\n-    {\n-      _ComplexT __t;\n-      __real__ __t = __z.real();\n-      __imag__ __t = __z.imag();\n-      _M_value /= __t;\n-      return *this;\n-    }\n-\n-  // 26.2.3  complex specializations\n-  // complex<double> specialization\n-  template<> class complex<double>\n-  {\n-  public:\n-    typedef double value_type;\n-\n-    complex(double  =0.0, double =0.0);\n-#ifdef _GLIBCPP_BUGGY_COMPLEX\n-    complex(const complex& __z) : _M_value(__z._M_value) { }\n-#endif\n-    complex(const complex<float>&);\n-    explicit complex(const complex<long double>&);\n-        \n-    double real() const;\n-    double imag() const;\n-        \n-    complex<double>& operator=(double);\n-    complex<double>& operator+=(double);\n-    complex<double>& operator-=(double);\n-    complex<double>& operator*=(double);\n-    complex<double>& operator/=(double);\n-\n-    // The compiler will synthetize this, efficiently.\n-    // complex& operator= (const complex&);\n-    template<typename _Tp>\n-      complex<double>& operator=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<double>& operator+=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<double>& operator-=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<double>& operator*=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<double>& operator/=(const complex<_Tp>&);\n-\n-  private:\n-    typedef __complex__ double _ComplexT;\n-    _ComplexT _M_value;\n-\n-    complex(_ComplexT __z) : _M_value(__z) { }\n-        \n-    friend class complex<float>;\n-    friend class complex<long double>;\n-  };\n-\n-  inline double\n-  complex<double>::real() const\n-  { return __real__ _M_value; }\n-\n-  inline double\n-  complex<double>::imag() const\n-  { return __imag__ _M_value; }\n-\n-  inline\n-  complex<double>::complex(double __r, double __i)\n-  {\n-    __real__ _M_value = __r;\n-    __imag__ _M_value = __i;\n-  }\n-\n-  inline complex<double>&\n-  complex<double>::operator=(double __d)\n-  {\n-    __real__ _M_value = __d;\n-    __imag__ _M_value = 0.0;\n-    return *this;\n-  }\n-\n-  inline complex<double>&\n-  complex<double>::operator+=(double __d)\n-  {\n-    __real__ _M_value += __d;\n-    return *this;\n-  }\n-\n-  inline complex<double>&\n-  complex<double>::operator-=(double __d)\n-  {\n-    __real__ _M_value -= __d;\n-    return *this;\n-  }\n-\n-  inline complex<double>&\n-  complex<double>::operator*=(double __d)\n-  {\n-    _M_value *= __d;\n-    return *this;\n-  }\n-\n-  inline complex<double>&\n-  complex<double>::operator/=(double __d)\n-  {\n-    _M_value /= __d;\n-    return *this;\n-  }\n-\n-  template<typename _Tp>\n-    inline complex<double>&\n-    complex<double>::operator=(const complex<_Tp>& __z)\n-    {\n-      __real__ _M_value = __z.real();\n-      __imag__ _M_value = __z.imag();\n-      return *this;\n-    }\n-    \n-  template<typename _Tp>\n-    inline complex<double>&\n-    complex<double>::operator+=(const complex<_Tp>& __z)\n-    {\n-      __real__ _M_value += __z.real();\n-      __imag__ _M_value += __z.imag();\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<double>&\n-    complex<double>::operator-=(const complex<_Tp>& __z)\n-    {\n-      __real__ _M_value -= __z.real();\n-      __imag__ _M_value -= __z.imag();\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<double>&\n-    complex<double>::operator*=(const complex<_Tp>& __z)\n-    {\n-      _ComplexT __t;\n-      __real__ __t = __z.real();\n-      __imag__ __t = __z.imag();\n-      _M_value *= __t;\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<double>&\n-    complex<double>::operator/=(const complex<_Tp>& __z)\n-    {\n-      _ComplexT __t;\n-      __real__ __t = __z.real();\n-      __imag__ __t = __z.imag();\n-      _M_value /= __t;\n-      return *this;\n-    }\n-\n-  // 26.2.3  complex specializations\n-  // complex<long double> specialization\n-  template<> class complex<long double>\n-  {\n-  public:\n-    typedef long double value_type;\n-\n-    complex(long double = 0.0L, long double = 0.0L);\n-#ifdef _GLIBCPP_BUGGY_COMPLEX\n-    complex(const complex& __z) : _M_value(__z._M_value) { }\n-#endif\n-    complex(const complex<float>&);\n-    complex(const complex<double>&);\n-\n-    long double real() const;\n-    long double imag() const;\n-\n-    complex<long double>& operator= (long double);\n-    complex<long double>& operator+= (long double);\n-    complex<long double>& operator-= (long double);\n-    complex<long double>& operator*= (long double);\n-    complex<long double>& operator/= (long double);\n-\n-    // The compiler knows how to do this efficiently\n-    // complex& operator= (const complex&);\n-    template<typename _Tp>\n-      complex<long double>& operator=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<long double>& operator+=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<long double>& operator-=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<long double>& operator*=(const complex<_Tp>&);\n-    template<typename _Tp>\n-      complex<long double>& operator/=(const complex<_Tp>&);\n-\n-  private:\n-    typedef __complex__ long double _ComplexT;\n-    _ComplexT _M_value;\n-\n-    complex(_ComplexT __z) : _M_value(__z) { }\n-\n-    friend class complex<float>;\n-    friend class complex<double>;\n-  };\n-\n-  inline\n-  complex<long double>::complex(long double __r, long double __i)\n-  {\n-    __real__ _M_value = __r;\n-    __imag__ _M_value = __i;\n-  }\n-\n-  inline long double\n-  complex<long double>::real() const\n-  { return __real__ _M_value; }\n-\n-  inline long double\n-  complex<long double>::imag() const\n-  { return __imag__ _M_value; }\n-\n-  inline complex<long double>&   \n-  complex<long double>::operator=(long double __r)\n-  {\n-    __real__ _M_value = __r;\n-    __imag__ _M_value = 0.0L;\n-    return *this;\n-  }\n-\n-  inline complex<long double>&\n-  complex<long double>::operator+=(long double __r)\n-  {\n-    __real__ _M_value += __r;\n-    return *this;\n-  }\n-\n-  inline complex<long double>&\n-  complex<long double>::operator-=(long double __r)\n-  {\n-    __real__ _M_value -= __r;\n-    return *this;\n-  }\n-\n-  inline complex<long double>&\n-  complex<long double>::operator*=(long double __r)\n-  {\n-    _M_value *= __r;\n-    return *this;\n-  }\n-\n-  inline complex<long double>&\n-  complex<long double>::operator/=(long double __r)\n-  {\n-    _M_value /= __r;\n-    return *this;\n-  }\n-\n-  template<typename _Tp>\n-    inline complex<long double>&\n-    complex<long double>::operator=(const complex<_Tp>& __z)\n-    {\n-      __real__ _M_value = __z.real();\n-      __imag__ _M_value = __z.imag();\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<long double>&\n-    complex<long double>::operator+=(const complex<_Tp>& __z)\n-    {\n-      __real__ _M_value += __z.real();\n-      __imag__ _M_value += __z.imag();\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<long double>&\n-    complex<long double>::operator-=(const complex<_Tp>& __z)\n-    {\n-      __real__ _M_value -= __z.real();\n-      __imag__ _M_value -= __z.imag();\n-      return *this;\n-    }\n-    \n-  template<typename _Tp>\n-    inline complex<long double>&\n-    complex<long double>::operator*=(const complex<_Tp>& __z)\n-    {\n-      _ComplexT __t;\n-      __real__ __t = __z.real();\n-      __imag__ __t = __z.imag();\n-      _M_value *= __t;\n-      return *this;\n-    }\n-\n-  template<typename _Tp>\n-    inline complex<long double>&\n-    complex<long double>::operator/=(const complex<_Tp>& __z)\n-    {\n-      _ComplexT __t;\n-      __real__ __t = __z.real();\n-      __imag__ __t = __z.imag();\n-      _M_value /= __t;\n-      return *this;\n-    }\n-\n-  // These bits have to be at the end of this file, so that the\n-  // specializations have all been defined.\n-  // ??? No, they have to be there because of compiler limitation at\n-  // inlining.  It suffices that class specializations be defined.\n-  inline\n-  complex<float>::complex(const complex<double>& __z)\n-  : _M_value(_ComplexT(__z._M_value)) { }\n-\n-  inline\n-  complex<float>::complex(const complex<long double>& __z)\n-  : _M_value(_ComplexT(__z._M_value)) { }\n-\n-  inline\n-  complex<double>::complex(const complex<float>& __z) \n-  : _M_value(_ComplexT(__z._M_value)) { }\n-\n-  inline\n-  complex<double>::complex(const complex<long double>& __z)\n-  {\n-    __real__ _M_value = __z.real();\n-    __imag__ _M_value = __z.imag();\n-  }\n-\n-  inline\n-  complex<long double>::complex(const complex<float>& __z)\n-  : _M_value(_ComplexT(__z._M_value)) { }\n-\n-  inline\n-  complex<long double>::complex(const complex<double>& __z)\n-  : _M_value(_ComplexT(__z._M_value)) { }\n-} // namespace std\n-\n-#endif\t/* _CPP_COMPLEX */"}, {"sha": "394eef3b8457859d522297e579fd066acb4f5f60", "filename": "libstdc++-v3/include/bits/std_deque.h", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,77 +0,0 @@\n-// <deque> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_deque.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_DEQUE\n-#define _CPP_DEQUE 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/functexcept.h>\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_deque.h>\n-\n-#endif /* _CPP_DEQUE */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "1a651b725e39338f38e7c64ca6f74e773c597f06", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "removed", "additions": 0, "deletions": 434, "changes": 434, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,434 +0,0 @@\n-// File based streams -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.8  File-based streams\n-//\n-\n-/** @file std_fstream.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_FSTREAM\n-#define _CPP_FSTREAM\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/basic_file.h>\n-#include <bits/std_locale.h>\t// For codecvt\n-#include <bits/gthr.h>\n-\n-namespace std \n-{\n-  template<typename _CharT, typename _Traits>\n-    class basic_filebuf : public basic_streambuf<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT                     \t        char_type;\n-      typedef _Traits                    \t        traits_type;\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-      \n-      // Non-standard Types:\n-      typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n-      typedef basic_filebuf<char_type, traits_type>     __filebuf_type;\n-      typedef __basic_file<char_type>\t\t        __file_type;\n-      typedef typename traits_type::state_type          __state_type;\n-      typedef codecvt<char_type, char, __state_type>    __codecvt_type;\n-      typedef typename __codecvt_type::result \t        __res_type;\n-      typedef ctype<char_type>                          __ctype_type;\n-\n-      friend class ios_base; // For sync_with_stdio.\n-\n-    private:\n-      // Data Members:\n-      // External buffer.\n-      __file_type* \t\t_M_file;\n-\n-      // Current and beginning state type for codecvt.\n-      __state_type\t\t_M_state_cur;\n-      __state_type \t\t_M_state_beg; \t\n-\n-      // MT lock inherited from libio or other low-level io library.\n-      __c_lock          \t_M_lock;\n-\n-      // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer..\n-      bool\t\t\t_M_buf_allocated;\n-\n-      // XXX Needed? \n-      bool\t\t\t_M_last_overflowed;  \n-  \n-    public:\n-      // Constructors/destructor:\n-      basic_filebuf();\n-\n-      // Non-standard ctor:\n-      basic_filebuf(__c_file_type* __f, ios_base::openmode __mode, \n-\t\t    int_type __s = static_cast<int_type>(BUFSIZ));\n- \n-      // Non-standard member:\n-      int\n-      fd();\n-\n-      virtual \n-      ~basic_filebuf() \n-      { \n-\tthis->close();\n-\t_M_last_overflowed = false;\n-      }\n-\n-      // Members:\n-      bool \n-      is_open(void) const { return _M_file ? _M_file->is_open() : false; }\n-    \n-      __filebuf_type* \n-      open(const char* __s, ios_base::openmode __mode);\n-    \n-      __filebuf_type* \n-      close(void);\n-\n-    protected:\n-      void \n-      _M_allocate_internal_buffer();\n-\n-      void \n-      _M_destroy_internal_buffer();\n-\n-      void \n-      _M_allocate_pback_buffer();\n-\n-      // Create __file_type object and initialize it properly.\n-      void\n-      _M_allocate_file();\n-\n-      // Overridden virtual functions:\n-      virtual streamsize \n-      showmanyc(void);\n-   \n-      // Stroustrup, 1998, p. 628 \n-      // underflow() and uflow() functions are called to get the next\n-      // charater from the real input source when the buffer is empty.\n-      // Buffered input uses underflow()\n-      virtual int_type \n-      underflow(void);\n-\n-      virtual int_type \n-      pbackfail(int_type __c = _Traits::eof());\n-\n-      // NB: For what the standard expects of the overflow function,\n-      // see _M_really_overflow(), below. Because basic_streambuf's\n-      // sputc/sputn call overflow directly, and the complications of\n-      // this implementation's setting of the initial pointers all\n-      // equal to _M_buf when initializing, it seems essential to have\n-      // this in actuality be a helper function that checks for the\n-      // eccentricities of this implementation, and then call\n-      // overflow() if indeed the buffer is full.\n-      virtual int_type \n-      overflow(int_type __c = _Traits::eof());\n-\n-      // Stroustrup, 1998, p 648\n-      // The overflow() function is called to transfer characters to the\n-      // real output destination when the buffer is full. A call to\n-      // overflow(c) outputs the contents of the buffer plus the\n-      // character c.\n-      // 27.5.2.4.5 \n-      // Consume some sequence of the characters in the pending sequence.\n-      int_type \n-      _M_really_overflow(int_type __c = _Traits::eof());\n-    \n-      virtual __streambuf_type* \n-      setbuf(char_type* __s, streamsize __n);\n-    \n-      virtual pos_type \n-      seekoff(off_type __off, ios_base::seekdir __way,\n-\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n-\n-      virtual pos_type \n-      seekpos(pos_type __pos,\n-\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n-\n-      virtual int \n-      sync(void)\n-      {\n-\tbool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n-\tif (__testput)\n-\t  {\n-            // Make sure that libio resyncs its idea of the file position\n-            // with the external file.\n-            _M_file->sync();\n-\n-\t    // Need to restore current position. This interpreted as\n-\t    // the position of the external byte sequence (_M_file)\n-\t    // plus the offset in the current internal buffer\n-\t    // (_M_out_beg - _M_out_cur)\n-\t    streamoff __cur = _M_file->seekoff(0, ios_base::cur);\n-\t    off_type __off = _M_out_cur - _M_out_beg;\n-\t    _M_really_overflow();\n-\t    _M_file->seekpos(__cur + __off);\n-\t  }\n-\t_M_last_overflowed = false;\t\n-\treturn 0;\n-      }\n-      \n-      virtual void \n-      imbue(const locale& __loc);\n-\n-      virtual streamsize \n-      xsgetn(char_type* __s, streamsize __n)\n-      {\n-\tstreamsize __ret = 0;\n-\t// Clear out pback buffer before going on to the real deal...\n-\tif (_M_pback_init)\n-\t  {\n-\t    while (__ret < __n && _M_in_cur < _M_in_end)\n-\t      {\n-\t\t*__s = *_M_in_cur;\n-\t\t++__ret;\n-\t\t++__s;\n-\t\t++_M_in_cur;\n-\t      }\n-\t    _M_pback_destroy();\n-\t  }\n-\tif (__ret < __n)\n-\t  __ret += __streambuf_type::xsgetn(__s, __n - __ret);\n-\treturn __ret;\n-      }\n- \n-      virtual streamsize \n-      xsputn(const char_type* __s, streamsize __n)\n-      {\n-\t_M_pback_destroy();\n-\treturn __streambuf_type::xsputn(__s, __n);\n-      }\n-       \n-      void\n-      _M_output_unshift();\n-    };\n-\n-\n-  // 27.8.1.5  Template class basic_ifstream\n-  template<typename _CharT, typename _Traits>\n-    class basic_ifstream : public basic_istream<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard types:\n-      typedef basic_filebuf<char_type, traits_type> \t__filebuf_type;\n-      typedef basic_istream<char_type, traits_type>\t__istream_type;\n-    \n-    private:\n-      __filebuf_type\t_M_filebuf;\n-\n-    public:\n-     // Constructors/Destructors:\n-      basic_ifstream()\n-      : __istream_type(NULL), _M_filebuf()\n-      { this->init(&_M_filebuf); }\n-\n-      explicit \n-      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)\n-      : __istream_type(NULL), _M_filebuf()\n-      { \n-\tthis->init(&_M_filebuf); \n-\tthis->open(__s, __mode); \n-      }\n-    \n-      ~basic_ifstream()\n-      { }\n-\n-      // Members:\n-      __filebuf_type* \n-      rdbuf() const \n-      { return const_cast<__filebuf_type*>(&_M_filebuf); }\n-\n-      bool \n-      is_open(void) { return _M_filebuf.is_open(); }\n-\n-      void \n-      open(const char* __s, ios_base::openmode __mode = ios_base::in)\n-      { \n-\tif (_M_filebuf.open(__s, __mode | ios_base::in) == NULL)\n-\t  this->setstate(ios_base::failbit); \n-      }\n-\n-      void \n-      close(void)\n-      { \n-\tif (!_M_filebuf.close())\n-\t  this->setstate(ios_base::failbit);\t\n-      }\n-    };\n-\n-  \n-  // 27.8.1.8  Template class basic_ofstream\n-  template<typename _CharT, typename _Traits>\n-    class basic_ofstream : public basic_ostream<_CharT,_Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard types:\n-      typedef basic_filebuf<char_type, traits_type> \t__filebuf_type;\n-      typedef basic_ostream<char_type, traits_type>\t__ostream_type;\n-      \n-    private:\n-      __filebuf_type\t_M_filebuf;\n-\n-    public:\n-      // Constructors:\n-      basic_ofstream()\n-      : __ostream_type(NULL), _M_filebuf()\n-      { this->init(&_M_filebuf); }\n-      \n-      explicit \n-      basic_ofstream(const char* __s, \n-\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n-      : __ostream_type(NULL), _M_filebuf()\n-      { \n-\tthis->init(&_M_filebuf); \n-\tthis->open(__s, __mode); \n-      }\n-\n-      ~basic_ofstream()\n-      { }\n-\n-      // Members:\n-      __filebuf_type* \n-      rdbuf(void) const\n-      { return const_cast<__filebuf_type*>(&_M_filebuf); }\n- \n-      bool \n-      is_open(void) { return _M_filebuf.is_open(); }\n-\n-      void \n-      open(const char* __s, \n-\t   ios_base::openmode __mode = ios_base::out | ios_base::trunc)\n-      { \n-\tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n-\t  this->setstate(ios_base::failbit); \n-      }\n-\n-      void \n-      close(void)\n-      { \n-\tif (!_M_filebuf.close())\n-\t  setstate(ios_base::failbit); \n-      }\n-    };\n-\n-\n-  // 27.8.1.11  Template class basic_fstream\n-  template<typename _CharT, typename _Traits>\n-    class basic_fstream : public basic_iostream<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard types:\n-      typedef basic_filebuf<char_type, traits_type> \t__filebuf_type;\n-      typedef basic_ios<char_type, traits_type>\t\t__ios_type;\n-      typedef basic_iostream<char_type, traits_type>\t__iostream_type;\n-\n-    private:\n-      __filebuf_type\t_M_filebuf;\n-      \n-    public:\n-      // Constructors/destructor:\n-      basic_fstream()\n-      : __iostream_type(NULL), _M_filebuf()\n-      { this->init(&_M_filebuf); }\n-\n-      explicit \n-      basic_fstream(const char* __s,\n-\t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __iostream_type(NULL), _M_filebuf()\n-      { \n-\tthis->init(&_M_filebuf); \n-\tthis->open(__s, __mode); \n-      }\n- \n-      ~basic_fstream()\n-      { }\n-    \n-      // Members:\n-      __filebuf_type* \n-      rdbuf(void) const \n-      { return const_cast<__filebuf_type*>(&_M_filebuf); }\n-\n-      bool \n-      is_open(void) { return _M_filebuf.is_open(); }\n-\n-      void \n-      open(const char* __s, \n-\t   ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      { \n-\tif (!_M_filebuf.open(__s, __mode))\n-\t  setstate(ios_base::failbit); \n-      }\n-\n-      void \n-      close(void)\n-      { \n-\tif (!_M_filebuf.close())\n-\t  setstate(ios_base::failbit); \n-      }\n-    };\n-} // namespace std\n-\n-\n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n-# define export\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n-# include <bits/fstream.tcc>\n-#endif\n-#endif\n-\n-#endif\t\n-"}, {"sha": "82863cc3e3c9ddb574d663c1fa62c9efe1fc7a63", "filename": "libstdc++-v3/include/bits/std_functional.h", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,62 +0,0 @@\n-// <functional> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- * Copyright (c) 1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- */\n-\n-/** @file std_functional.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_FUNCTIONAL\n-#define _CPP_FUNCTIONAL 1\n-\n-#pragma GCC system_header\n-#include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n-#include <bits/stl_function.h>\n-\n-#endif /* _CPP_FUNCTIONAL */\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-"}, {"sha": "ac83db39a63c2db83017793d6151d07d4c97c72e", "filename": "libstdc++-v3/include/bits/std_iomanip.h", "status": "removed", "additions": 0, "deletions": 221, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iomanip.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,221 +0,0 @@\n-// Standard stream manipulators -*- C++ -*-\n-\n-// Copyright (C) 1997-1999, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.6.3  Standard manipulators\n-//\n-\n-/** @file std_iomanip.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_IOMANIP\n-#define _CPP_IOMANIP 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_functional.h>\n-\n-namespace std\n-{\n-\n-  struct _Resetiosflags { ios_base::fmtflags _M_mask; };\n-\n-  inline _Resetiosflags \n-  resetiosflags(ios_base::fmtflags __mask)\n-  { \n-    _Resetiosflags __x; \n-    __x._M_mask = __mask; \n-    return __x; \n-  }\n-\n-  template <class _CharT, class _Traits>\n-    basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Resetiosflags __f)\n-    { \n-      __is.setf(ios_base::fmtflags(0), __f._M_mask); \n-      return __is; \n-    }\n-\n-  template <class _CharT, class _Traits>\n-    basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Resetiosflags __f)\n-    { \n-      __os.setf(ios_base::fmtflags(0), __f._M_mask); \n-      return __os; \n-    }\n-\n-\n-  struct _Setiosflags { ios_base::fmtflags _M_mask; };\n-\n-  inline _Setiosflags \n-  setiosflags(ios_base::fmtflags __mask)\n-  { \n-    _Setiosflags __x; \n-    __x._M_mask = __mask; \n-    return __x; \n-  }\n-\n-  template <class _CharT, class _Traits>\n-    basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setiosflags __f)\n-    { \n-      __is.setf(__f._M_mask); \n-      return __is; \n-    }\n-\n-  template <class _CharT, class _Traits>\n-    basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setiosflags __f)\n-    { \n-      __os.setf(__f._M_mask); \n-      return __os; \n-    }\n-\n-\n-  struct _Setbase { int _M_base; };\n-\n-  inline _Setbase \n-  setbase(int __base)\n-  { \n-    _Setbase __x; \n-    __x._M_base = __base; \n-    return __x; \n-  }\n-\n-  template <class _CharT, class _Traits>\n-    basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setbase __f)\n-    {\n-      __is.setf(__f._M_base ==  8 ? ios_base::oct : \n-\t      __f._M_base == 10 ? ios_base::dec : \n-\t      __f._M_base == 16 ? ios_base::hex : \n-\t      ios_base::fmtflags(0), ios_base::basefield);\n-      return __is; \n-    }\n-  \n-  template <class _CharT, class _Traits>\n-    basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setbase __f)\n-    {\n-      __os.setf(__f._M_base ==  8 ? ios_base::oct : \n-\t\t__f._M_base == 10 ? ios_base::dec : \n-\t\t__f._M_base == 16 ? ios_base::hex : \n-\t\tios_base::fmtflags(0), ios_base::basefield);\n-      return __os; \n-    }\n-  \n-\n-  template<class _CharT> \n-    struct _Setfill { _CharT _M_c; };\n-\n-  template<class _CharT> \n-    _Setfill<_CharT> \n-    setfill(_CharT __c)\n-    { \n-      _Setfill<_CharT> __x; \n-      __x._M_c = __c; \n-      return __x; \n-    }\n-\n-  template <class _CharT, class _Traits>\n-    basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setfill<_CharT> __f)\n-    { \n-      __is.fill(__f._M_c); \n-      return __is; \n-    }\n-\n-  template <class _CharT, class _Traits>\n-    basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setfill<_CharT> __f)\n-    { \n-      __os.fill(__f._M_c); \n-      return __os; \n-    }\n-\n-\n-  struct _Setprecision { int _M_n; };\n-\n-  inline _Setprecision \n-  setprecision(int __n)\n-  { \n-    _Setprecision __x; \n-    __x._M_n = __n; \n-    return __x; \n-  }\n-\n-  template <class _CharT, class _Traits>\n-    basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setprecision __f)\n-    { \n-      __is.precision(__f._M_n); \n-      return __is; \n-    }\n-\n-  template <class _CharT, class _Traits>\n-    basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setprecision __f)\n-    { \n-      __os.precision(__f._M_n); \n-      return __os; \n-    }\n-\n-\n-  struct _Setw { int _M_n; };\n-\n-  inline _Setw \n-  setw(int __n)\n-  { \n-    _Setw __x; \n-    __x._M_n = __n; \n-    return __x; \n-  }\n-\n-  template <class _CharT, class _Traits>\n-    basic_istream<_CharT,_Traits>& \n-    operator>>(basic_istream<_CharT,_Traits>& __is, _Setw __f)\n-    { \n-      __is.width(__f._M_n); \n-      return __is; \n-    }\n-\n-  template <class _CharT, class _Traits>\n-    basic_ostream<_CharT,_Traits>& \n-    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setw __f)\n-    { \n-      __os.width(__f._M_n); \n-      return __os; \n-    }\n-} // namespace std\n-\n-#endif\t"}, {"sha": "dfd041f811f7a89204cbd3ccce8decc60ec3c257", "filename": "libstdc++-v3/include/bits/std_ios.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,54 +0,0 @@\n-// Iostreams base classes -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.4  Iostreams base classes\n-//\n-\n-/** @file std_ios.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_IOS\n-#define _CPP_IOS\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/std_iosfwd.h>\n-#include <exception> \t\t// For ios_base::failure\n-#include <bits/char_traits.h> \t// For char_traits, streamoff, streamsize, fpos\n-#include <bits/std_cstdio.h> \t// For SEEK_SET, SEEK_CUR, SEEK_END\n-#include <bits/localefwd.h>\t// For class locale\n-#include <bits/ios_base.h>\t// For ios_base declarations.\n-#include <bits/std_streambuf.h> \n-#include <bits/basic_ios.h>\n-\n-#endif\t/* _CPP_IOS */\n-"}, {"sha": "93c30b3fbf41450f02e202b14a369ff4ec8f9cf8", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,136 +0,0 @@\n-// Forwarding declarations -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.2  Forward declarations\n-//\n-\n-/** @file std_iosfwd.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_IOSFWD\n-#define _CPP_IOSFWD 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/stringfwd.h> // For string forward declarations.\n-#include <bits/fpos.h>\n-#include <bits/functexcept.h>\n-\n-namespace std \n-{\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_ios;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_streambuf;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_istream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_ostream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_iostream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n-\t    typename _Alloc = allocator<_CharT> >\n-    class basic_stringbuf;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n-\t   typename _Alloc = allocator<_CharT> >\n-    class basic_istringstream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n-\t   typename _Alloc = allocator<_CharT> >\n-    class basic_ostringstream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n-\t   typename _Alloc = allocator<_CharT> >\n-    class basic_stringstream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_filebuf;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_ifstream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_ofstream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class basic_fstream;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class istreambuf_iterator;\n-\n-  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n-    class ostreambuf_iterator;\n-\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-  // Not included.   (??? Apparently no LWG number?)\n-  class ios_base; \n-#endif\n-\n-  typedef basic_ios<char> \t\tios;\n-  typedef basic_streambuf<char> \tstreambuf;\n-  typedef basic_istream<char> \t\tistream;\n-  typedef basic_ostream<char> \t\tostream;\n-  typedef basic_iostream<char> \t\tiostream;\n-  typedef basic_stringbuf<char> \tstringbuf;\n-  typedef basic_istringstream<char> \tistringstream;\n-  typedef basic_ostringstream<char> \tostringstream;\n-  typedef basic_stringstream<char> \tstringstream;\n-  typedef basic_filebuf<char> \t\tfilebuf;\n-  typedef basic_ifstream<char> \t\tifstream;\n-  typedef basic_ofstream<char> \t\tofstream;\n-  typedef basic_fstream<char> \t\tfstream;\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  typedef basic_ios<wchar_t> \t\twios;\n-  typedef basic_streambuf<wchar_t> \twstreambuf;\n-  typedef basic_istream<wchar_t> \twistream;\n-  typedef basic_ostream<wchar_t> \twostream;\n-  typedef basic_iostream<wchar_t> \twiostream;\n-  typedef basic_stringbuf<wchar_t> \twstringbuf;\n-  typedef basic_istringstream<wchar_t> \twistringstream;\n-  typedef basic_ostringstream<wchar_t> \twostringstream;\n-  typedef basic_stringstream<wchar_t> \twstringstream;\n-  typedef basic_filebuf<wchar_t> \twfilebuf;\n-  typedef basic_ifstream<wchar_t> \twifstream;\n-  typedef basic_ofstream<wchar_t> \twofstream;\n-  typedef basic_fstream<wchar_t> \twfstream;\n-#endif\n-} // namespace std\n-\n-#endif"}, {"sha": "32893fa55cc4cf5273ed946d2e4551c88ea064bc", "filename": "libstdc++-v3/include/bits/std_iostream.h", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,65 +0,0 @@\n-// Standard iostream objects -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.3  Standard iostream objects\n-//\n-\n-/** @file std_iostream.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_IOSTREAM\n-#define _CPP_IOSTREAM\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_istream.h>\n-\n-namespace std \n-{\n-  extern istream cin;\n-  extern ostream cout;\n-  extern ostream cerr;\n-  extern ostream clog;\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  extern wistream wcin;\n-  extern wostream wcout;\n-  extern wostream wcerr;\n-  extern wostream wclog;\n-#endif\n-\n-  // For construction of filebuffers for cout, cin, cerr, clog et. al.\n-  static ios_base::Init __ioinit;\n-} // namespace std\n-\n-#endif"}, {"sha": "4afbbc0528da726f19a0a0206f5c60b5d3a1fa69", "filename": "libstdc++-v3/include/bits/std_istream.h", "status": "removed", "additions": 0, "deletions": 299, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,299 +0,0 @@\n-// Input streams -*- C++ -*-\n-\n-// Copyright (C) 1997-1999, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.6.1  Input streams\n-//\n-\n-/** @file std_istream.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_ISTREAM\n-#define _CPP_ISTREAM\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/std_ios.h>\n-#include <bits/std_limits.h> // For numeric_limits\n-\n-namespace std\n-{\n-  // 27.6.1.1 Template class basic_istream\n-  template<typename _CharT, typename _Traits>\n-    class basic_istream : virtual public basic_ios<_CharT, _Traits>\n-    {\n-    public:\n-      // Types (inherited from basic_ios (27.4.4)):\n-      typedef _CharT                     \t\tchar_type;\n-      typedef typename _Traits::int_type \t\tint_type;\n-      typedef typename _Traits::pos_type \t\tpos_type;\n-      typedef typename _Traits::off_type \t\toff_type;\n-      typedef _Traits                    \t\ttraits_type;\n-      \n-      // Non-standard Types:\n-      typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n-      typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n-      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef istreambuf_iterator<_CharT, _Traits>\t__istreambuf_iter;\n-      typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n-      typedef ctype<_CharT>           \t\t\t__ctype_type;\n-\n-    protected:\n-      // Data Members:\n-      streamsize \t\t_M_gcount;\n-\n-    public:\n-      // 27.6.1.1.1 Constructor/destructor:\n-      explicit \n-      basic_istream(__streambuf_type* __sb)\n-      { \n-\tthis->init(__sb);\n-\t_M_gcount = streamsize(0);\n-      }\n-\n-      virtual \n-      ~basic_istream() \n-      { _M_gcount = streamsize(0); }\n-\n-      // 27.6.1.1.2 Prefix/suffix:\n-      class sentry;\n-      friend class sentry;\n-\n-      // 27.6.1.2 Formatted input:\n-      // 27.6.1.2.3 basic_istream::operator>>\n-      __istream_type&\n-      operator>>(__istream_type& (*__pf)(__istream_type&));\n-\n-      __istream_type&\n-      operator>>(__ios_type& (*__pf)(__ios_type&));\n-\n-      __istream_type&\n-      operator>>(ios_base& (*__pf)(ios_base&));\n-      \n-      // 27.6.1.2.2 Arithmetic Extractors\n-      __istream_type& \n-      operator>>(bool& __n);\n-      \n-      __istream_type& \n-      operator>>(short& __n);\n-      \n-      __istream_type& \n-      operator>>(unsigned short& __n);\n-\n-      __istream_type& \n-      operator>>(int& __n);\n-      \n-      __istream_type& \n-      operator>>(unsigned int& __n);\n-\n-      __istream_type& \n-      operator>>(long& __n);\n-      \n-      __istream_type& \n-      operator>>(unsigned long& __n);\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-      __istream_type& \n-      operator>>(long long& __n);\n-\n-      __istream_type& \n-      operator>>(unsigned long long& __n);\n-#endif\n-\n-      __istream_type& \n-      operator>>(float& __f);\n-\n-      __istream_type& \n-      operator>>(double& __f);\n-\n-      __istream_type& \n-      operator>>(long double& __f);\n-\n-      __istream_type& \n-      operator>>(void*& __p);\n-\n-      __istream_type& \n-      operator>>(__streambuf_type* __sb);\n-      \n-      // 27.6.1.3 Unformatted input:\n-      inline streamsize \n-      gcount(void) const \n-      { return _M_gcount; }\n-      \n-      int_type \n-      get(void);\n-\n-      __istream_type& \n-      get(char_type& __c);\n-\n-      __istream_type& \n-      get(char_type* __s, streamsize __n, char_type __delim);\n-\n-      inline __istream_type& \n-      get(char_type* __s, streamsize __n)\n-      { return this->get(__s, __n, this->widen('\\n')); }\n-\n-      __istream_type&\n-      get(__streambuf_type& __sb, char_type __delim);\n-\n-      inline __istream_type&\n-      get(__streambuf_type& __sb)\n-      { return this->get(__sb, this->widen('\\n')); }\n-\n-      __istream_type& \n-      getline(char_type* __s, streamsize __n, char_type __delim);\n-\n-      inline __istream_type& \n-      getline(char_type* __s, streamsize __n)\n-      { return this->getline(__s, __n, this->widen('\\n')); }\n-\n-      __istream_type& \n-      ignore(streamsize __n = 1, int_type __delim = traits_type::eof());\n-      \n-      int_type \n-      peek(void);\n-      \n-      __istream_type& \n-      read(char_type* __s, streamsize __n);\n-\n-      streamsize \n-      readsome(char_type* __s, streamsize __n);\n-      \n-      __istream_type& \n-      putback(char_type __c);\n-\n-      __istream_type& \n-      unget(void);\n-\n-      int \n-      sync(void);\n-\n-      pos_type \n-      tellg(void);\n-\n-      __istream_type& \n-      seekg(pos_type);\n-\n-      __istream_type& \n-      seekg(off_type, ios_base::seekdir);\n-\n-    private:\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Not defined.  (Side effect of DR 50.)\n-      __istream_type& \n-      operator=(const __istream_type&);\n-\n-      basic_istream(const __istream_type&);\n-#endif\n-    };\n-  \n-  template<typename _CharT, typename _Traits>\n-    class basic_istream<_CharT, _Traits>::sentry\n-    {\n-    public:\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-      typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n-      typedef basic_istream<_CharT, _Traits> \t\t__istream_type;\n-      typedef typename __istream_type::__ctype_type \t__ctype_type;\n-      typedef typename _Traits::int_type\t\t__int_type;\n-\n-      explicit \n-      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);\n-\n-      operator bool() { return _M_ok; }\n-\n-    private:\n-      bool _M_ok;\n-    };\n-\n-  // 27.6.1.2.3 Character extraction templates\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);\n-\n-  template<class _Traits>\n-    basic_istream<char, _Traits>&\n-    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n-    { return (__in >> reinterpret_cast<char&>(__c)); }\n-\n-  template<class _Traits>\n-    basic_istream<char, _Traits>&\n-    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n-    { return (__in >> reinterpret_cast<char&>(__c)); }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);\n-  \n-  template<class _Traits>\n-    basic_istream<char,_Traits>&\n-    operator>>(basic_istream<char,_Traits>& __in, unsigned char* __s)\n-    { return (__in >> reinterpret_cast<char*>(__s)); }\n-\n-  template<class _Traits>\n-    basic_istream<char,_Traits>&\n-    operator>>(basic_istream<char,_Traits>& __in, signed char* __s)\n-    { return (__in >> reinterpret_cast<char*>(__s)); }\n-\n-  // 27.6.1.5 Template class basic_iostream\n-  template<typename _CharT, typename _Traits>\n-    class basic_iostream\n-    : public basic_istream<_CharT, _Traits>,\n-      public basic_ostream<_CharT, _Traits>\n-    {\n-    public:\n-      // Non-standard Types:\n-      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef basic_ostream<_CharT, _Traits>\t\t__ostream_type;\n-\n-      explicit \n-      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)\n-      : __istream_type(__sb), __ostream_type(__sb)\n-      { }\n-\n-      virtual \n-      ~basic_iostream() { }\n-    };\n-\n-  // 27.6.1.4 Standard basic_istream manipulators\n-  template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT, _Traits>& \n-    ws(basic_istream<_CharT, _Traits>& __is);\n-} // namespace std\n-\n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n-# define export\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n-# include <bits/istream.tcc>\n-#endif\n-#endif\n-\n-#endif\t/* _CPP_ISTREAM */"}, {"sha": "3e3541c60893b89b0cb6ad21ace1cf6556e06908", "filename": "libstdc++-v3/include/bits/std_iterator.h", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,79 +0,0 @@\n-// <iterator> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_iterator.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_ITERATOR\n-#define _CPP_ITERATOR 1\n-\n-#pragma GCC system_header\n-#include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n-#include <bits/stl_iterator_base_types.h>\n-#include <bits/stl_iterator_base_funcs.h>\n-#include <bits/stl_iterator.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_istream.h>\n-#include <bits/stream_iterator.h>\n-#include <bits/streambuf_iterator.h>\n-\n-#endif /* _CPP_ITERATOR */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "7a6463625aed66020e330c2ba0bd85e969df172b", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "removed", "additions": 0, "deletions": 2017, "changes": 2017, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,2017 +0,0 @@\n-// The template and inlines for the -*- C++ -*- numeric_limits classes.\n-\n-// Copyright (C) 1999-2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Note: this is not a conforming implementation.\n-// Written by Gabriel Dos Reis <gdr@codesourcery.com>\n-\n-//\n-// ISO 14882:1998\n-// 18.2.1\n-//\n-\n-/** @file std_limits.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_NUMERIC_LIMITS\n-#define _CPP_NUMERIC_LIMITS 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/cpu_limits.h>\n-#include <bits/c++config.h>\n-\n-//\n-// The numeric_limits<> traits document implementation-defined aspects\n-// of fundamental arithmetic data types (integers and floating points).\n-// From Standard C++ point of view, there are 13 such types:\n-//   * integers\n-//         bool\t\t\t\t\t\t        (1)\n-//         char, signed char, unsigned char\t\t\t(3)\n-//         short, unsigned short\t\t\t\t(2)\n-//         int, unsigned\t\t\t\t\t(2)\n-//         long, unsigned long\t\t\t\t\t(2)\n-//\n-//   * floating points\n-//         float\t\t\t\t\t\t(1)\n-//         double\t\t\t\t\t\t(1)\n-//         long double\t\t\t\t\t\t(1)\n-//\n-// GNU C++ undertstands (where supported by the host C-library) \n-//   * integer\n-//         long long, unsigned long long\t\t\t(2)\n-//\n-// which brings us to 15 fundamental arithmetic data types in GNU C++.\n-//\n-// \n-// Since a numeric_limits<> is a bit tricky to get right, we rely on\n-// an interface composed of macros which should be defined in config/os\n-// or config/cpu when they differ from the generic (read arbitrary)\n-// definitions given here.\n-//\n-\n-// These values can be overridden in the target configuration file.\n-// The default values are appropriate for many 32-bit targets.\n-\n-#ifndef __glibcpp_char_bits\n-#define __glibcpp_char_bits 8\n-#endif\n-#ifdef __CHAR_UNSIGNED__\n-#define __glibcpp_plain_char_is_signed false\n-#else\n-#define __glibcpp_plain_char_is_signed true\n-#endif\n-#ifndef __glibcpp_short_bits\n-#define __glibcpp_short_bits 16\n-#endif\n-#ifndef __glibcpp_int_bits\n-#define __glibcpp_int_bits 32\n-#endif\n-#ifndef __glibcpp_long_bits\n-#define __glibcpp_long_bits 32\n-#endif\n-#ifndef __glibcpp_wchar_t_bits\n-#define __glibcpp_wchar_t_bits 32\n-#endif\n-#ifndef __glibcpp_wchar_t_is_signed\n-#define __glibcpp_wchar_t_is_signed true\n-#endif\n-#ifndef __glibcpp_long_long_bits\n-#define __glibcpp_long_long_bits 64\n-#endif\n-#ifndef __glibcpp_float_bits\n-#define __glibcpp_float_bits 32\n-#endif\n-#ifndef __glibcpp_double_bits\n-#define __glibcpp_double_bits 64\n-#endif\n-#ifndef __glibcpp_long_double_bits\n-#define __glibcpp_long_double_bits 128\n-#endif\n-\n-#ifndef __glibcpp_char_traps\n-#define __glibcpp_char_traps true\n-#endif\n-#ifndef __glibcpp_short_traps\n-#define __glibcpp_short_traps true\n-#endif\n-#ifndef __glibcpp_int_traps\n-#define __glibcpp_int_traps true\n-#endif\n-#ifndef __glibcpp_long_traps\n-#define __glibcpp_long_traps true\n-#endif\n-#ifndef __glibcpp_wchar_t_traps\n-#define __glibcpp_wchar_t_traps true\n-#endif\n-#ifndef __glibcpp_long_long_traps\n-#define __glibcpp_long_long_traps true\n-#endif\n-\n-// You should not need to define any macros below this point, unless\n-// you have a machine with non-standard bit-widths.\n-\n-// These values are the minimums and maximums for standard data types\n-// of common widths.\n-\n-#define __glibcpp_s8_max 127\n-#define __glibcpp_s8_min (-__glibcpp_s8_max - 1)\n-#define __glibcpp_s8_digits 7\n-#define __glibcpp_s8_digits10 2\n-#define __glibcpp_u8_min 0U\n-#define __glibcpp_u8_max (__glibcpp_s8_max * 2 + 1)\n-#define __glibcpp_u8_digits 8\n-#define __glibcpp_u8_digits10 2\n-#define __glibcpp_s16_max 32767\n-#define __glibcpp_s16_min (-__glibcpp_s16_max - 1)\n-#define __glibcpp_s16_digits 15\n-#define __glibcpp_s16_digits10 4\n-#define __glibcpp_u16_min 0U\n-#define __glibcpp_u16_max (__glibcpp_s16_max * 2 + 1)\n-#define __glibcpp_u16_digits 16\n-#define __glibcpp_u16_digits10 4\n-#define __glibcpp_s32_max 2147483647L\n-#define __glibcpp_s32_min (-__glibcpp_s32_max - 1)\n-#define __glibcpp_s32_digits 31\n-#define __glibcpp_s32_digits10 9\n-#define __glibcpp_u32_min 0UL\n-#define __glibcpp_u32_max (__glibcpp_s32_max * 2U + 1)\n-#define __glibcpp_u32_digits 32\n-#define __glibcpp_u32_digits10 9\n-#define __glibcpp_s64_max 9223372036854775807LL\n-#define __glibcpp_s64_min (-__glibcpp_s64_max - 1)\n-#define __glibcpp_s64_digits 63\n-#define __glibcpp_s64_digits10 18\n-#define __glibcpp_u64_min 0ULL\n-#define __glibcpp_u64_max (__glibcpp_s64_max * 2ULL + 1)\n-#define __glibcpp_u64_digits 64\n-#define __glibcpp_u64_digits10 19\n-\n-#define __glibcpp_f32_min 1.17549435e-38F\n-#define __glibcpp_f32_max 3.40282347e+38F\n-#define __glibcpp_f32_digits 24\n-#define __glibcpp_f32_digits10 6\n-#define __glibcpp_f32_radix 2\n-#define __glibcpp_f32_epsilon 1.19209290e-07F\n-#define __glibcpp_f32_round_error 1.0F\n-#define __glibcpp_f32_min_exponent -125\n-#define __glibcpp_f32_min_exponent10 -37\n-#define __glibcpp_f32_max_exponent 128\n-#define __glibcpp_f32_max_exponent10 38\n-#define __glibcpp_f64_min 2.2250738585072014e-308\n-#define __glibcpp_f64_max 1.7976931348623157e+308\n-#define __glibcpp_f64_digits 53\n-#define __glibcpp_f64_digits10 15\n-#define __glibcpp_f64_radix 2\n-#define __glibcpp_f64_epsilon 2.2204460492503131e-16\n-#define __glibcpp_f64_round_error 1.0\n-#define __glibcpp_f64_min_exponent -1021\n-#define __glibcpp_f64_min_exponent10 -307\n-#define __glibcpp_f64_max_exponent 1024\n-#define __glibcpp_f64_max_exponent10 308\n-#define __glibcpp_f80_min 3.36210314311209350626e-4932L\n-#define __glibcpp_f80_max 1.18973149535723176502e+4932L\n-#define __glibcpp_f80_digits 64\n-#define __glibcpp_f80_digits10 18\n-#define __glibcpp_f80_radix 2\n-#define __glibcpp_f80_epsilon 1.08420217248550443401e-19L\n-#define __glibcpp_f80_round_error 1.0L\n-#define __glibcpp_f80_min_exponent -16381\n-#define __glibcpp_f80_min_exponent10 -4931\n-#define __glibcpp_f80_max_exponent 16384\n-#define __glibcpp_f80_max_exponent10 4932\n-#define __glibcpp_f96_min 1.68105157155604675313e-4932L\n-#define __glibcpp_f96_max 1.18973149535723176502e+4932L\n-#define __glibcpp_f96_digits 64\n-#define __glibcpp_f96_digits10 18\n-#define __glibcpp_f96_radix 2\n-#define __glibcpp_f96_epsilon 1.08420217248550443401e-19L\n-#define __glibcpp_f96_round_error 1.0L\n-#define __glibcpp_f96_min_exponent -16382\n-#define __glibcpp_f96_min_exponent10 -4931\n-#define __glibcpp_f96_max_exponent 16384\n-#define __glibcpp_f96_max_exponent10 4932\n-#define __glibcpp_f128_min 3.362103143112093506262677817321752603E-4932L\n-#define __glibcpp_f128_max 1.189731495357231765085759326628007016E+4932L\n-#define __glibcpp_f128_digits 113\n-#define __glibcpp_f128_digits10 33\n-#define __glibcpp_f128_radix 2\n-#define __glibcpp_f128_epsilon 1.925929944387235853055977942584927319E-34L\n-#define __glibcpp_f128_round_error 1.0L\n-#define __glibcpp_f128_min_exponent -16381\n-#define __glibcpp_f128_min_exponent10 -4931\n-#define __glibcpp_f128_max_exponent 16384\n-#define __glibcpp_f128_max_exponent10 4932\n-\n-// bool-specific hooks:\n-//     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps\n-\n-// This is actually CHAR_BITS because the new ABI says a bool\n-// is one (1) byte wide.\n-\n-#ifndef __glibcpp_bool_digits\n-#define __glibcpp_bool_digits __glibcpp_char_bits\n-#endif\n-\n-// char.\n-\n-#define __glibcpp_plain_char_traps true\n-#define __glibcpp_signed_char_traps true\n-#define __glibcpp_unsigned_char_traps true\n-#ifndef __glibcpp_char_is_modulo\n-#define __glibcpp_char_is_modulo true\n-#endif\n-#ifndef __glibcpp_signed_char_is_modulo\n-#define __glibcpp_signed_char_is_modulo true\n-#endif\n-#if __glibcpp_char_bits == 8\n-#define __glibcpp_signed_char_min __glibcpp_s8_min\n-#define __glibcpp_signed_char_max __glibcpp_s8_max\n-#define __glibcpp_signed_char_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_char_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_char_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_char_bits == 16\n-#define __glibcpp_signed_char_min __glibcpp_s16_min\n-#define __glibcpp_signed_char_max __glibcpp_s16_max\n-#define __glibcpp_signed_char_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_char_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_char_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_char_bits == 32\n-#define __glibcpp_signed_char_min (signed char)__glibcpp_s32_min\n-#define __glibcpp_signed_char_max (signed char)__glibcpp_s32_max\n-#define __glibcpp_signed_char_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u32_min\n-#define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u32_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_char_bits == 64\n-#define __glibcpp_signed_char_min (signed char)__glibcpp_s64_min\n-#define __glibcpp_signed_char_max (signed char)__glibcpp_s64_max\n-#define __glibcpp_signed_char_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_char_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u64_min\n-#define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u64_max\n-#define __glibcpp_unsigned_char_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_char_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-#if __glibcpp_plain_char_is_signed\n-#define __glibcpp_char_min (char)__glibcpp_signed_char_min\n-#define __glibcpp_char_max (char)__glibcpp_signed_char_max\n-#define __glibcpp_char_digits __glibcpp_signed_char_digits\n-#define __glibcpp_char_digits10 __glibcpp_signed_char_digits\n-#else\n-#define __glibcpp_char_min (char)__glibcpp_unsigned_char_min\n-#define __glibcpp_char_max (char)__glibcpp_unsigned_char_max\n-#define __glibcpp_char_digits __glibcpp_unsigned_char_digits\n-#define __glibcpp_char_digits10 __glibcpp_unsigned_char_digits\n-#endif\n-\n-// short\n-\n-#define __glibcpp_signed_short_traps true\n-#define __glibcpp_unsigned_short_traps true\n-#ifndef __glibcpp_signed_short_is_modulo\n-#define __glibcpp_signed_short_is_modulo true\n-#endif\n-#if __glibcpp_short_bits == 8\n-#define __glibcpp_signed_short_min __glibcpp_s8_min\n-#define __glibcpp_signed_short_max __glibcpp_s8_max\n-#define __glibcpp_signed_short_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_short_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_short_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_short_bits == 16\n-#define __glibcpp_signed_short_min __glibcpp_s16_min\n-#define __glibcpp_signed_short_max __glibcpp_s16_max\n-#define __glibcpp_signed_short_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_short_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_short_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_short_bits == 32\n-#define __glibcpp_signed_short_min (short)__glibcpp_s32_min\n-#define __glibcpp_signed_short_max (short)__glibcpp_s32_max\n-#define __glibcpp_signed_short_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u32_min\n-#define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u32_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_short_bits == 64\n-#define __glibcpp_signed_short_min (short)__glibcpp_s64_min\n-#define __glibcpp_signed_short_max (short)__glibcpp_s64_max\n-#define __glibcpp_signed_short_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_short_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u64_min\n-#define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u64_max\n-#define __glibcpp_unsigned_short_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_short_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// int\n-\n-#define __glibcpp_signed_int_traps true\n-#define __glibcpp_unsigned_int_traps true\n-#ifndef __glibcpp_signed_int_is_modulo\n-#define __glibcpp_signed_int_is_modulo true\n-#endif\n-#if __glibcpp_int_bits == 8\n-#define __glibcpp_signed_int_min __glibcpp_s8_min\n-#define __glibcpp_signed_int_max __glibcpp_s8_max\n-#define __glibcpp_signed_int_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_int_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_int_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_int_bits == 16\n-#define __glibcpp_signed_int_min __glibcpp_s16_min\n-#define __glibcpp_signed_int_max __glibcpp_s16_max\n-#define __glibcpp_signed_int_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_int_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_int_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_int_bits == 32\n-#define __glibcpp_signed_int_min (int)__glibcpp_s32_min\n-#define __glibcpp_signed_int_max (int)__glibcpp_s32_max\n-#define __glibcpp_signed_int_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u32_min\n-#define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u32_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_int_bits == 64\n-#define __glibcpp_signed_int_min (int)__glibcpp_s64_min\n-#define __glibcpp_signed_int_max (int)__glibcpp_s64_max\n-#define __glibcpp_signed_int_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_int_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u64_min\n-#define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u64_max\n-#define __glibcpp_unsigned_int_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_int_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// long\n-\n-#define __glibcpp_signed_long_traps true\n-#define __glibcpp_unsigned_long_traps true\n-#ifndef __glibcpp_signed_long_is_modulo\n-#define __glibcpp_signed_long_is_modulo true\n-#endif\n-#if __glibcpp_long_bits == 8\n-#define __glibcpp_signed_long_min __glibcpp_s8_min\n-#define __glibcpp_signed_long_max __glibcpp_s8_max\n-#define __glibcpp_signed_long_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_long_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_long_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_long_bits == 16\n-#define __glibcpp_signed_long_min __glibcpp_s16_min\n-#define __glibcpp_signed_long_max __glibcpp_s16_max\n-#define __glibcpp_signed_long_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_long_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_long_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_long_bits == 32\n-#define __glibcpp_signed_long_min __glibcpp_s32_min\n-#define __glibcpp_signed_long_max __glibcpp_s32_max\n-#define __glibcpp_signed_long_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_long_min __glibcpp_u32_min\n-#define __glibcpp_unsigned_long_max __glibcpp_u32_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_long_bits == 64\n-#define __glibcpp_signed_long_min (long)__glibcpp_s64_min\n-#define __glibcpp_signed_long_max (long)__glibcpp_s64_max\n-#define __glibcpp_signed_long_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_long_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_unsigned_long_min (unsigned long)__glibcpp_u64_min\n-#define __glibcpp_unsigned_long_max (unsigned long)__glibcpp_u64_max\n-#define __glibcpp_unsigned_long_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_long_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// long long\n-\n-#define __glibcpp_signed_long_long_traps true\n-#define __glibcpp_signed_long_long_traps true\n-#ifndef __glibcpp_signed_long_long_is_modulo\n-#define __glibcpp_signed_long_long_is_modulo true\n-#endif\n-#if __glibcpp_long_long_bits == 8\n-#define __glibcpp_signed_long_long_min __glibcpp_s8_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s8_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s8_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s8_digits10\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u8_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u8_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u8_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_long_long_bits == 16\n-#define __glibcpp_signed_long_long_min __glibcpp_s16_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s16_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s16_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s16_digits10\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u16_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u16_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u16_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_long_long_bits == 32\n-#define __glibcpp_signed_long_long_min __glibcpp_s32_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s32_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s32_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s32_digits10\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u32_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u32_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u32_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_long_long_bits == 64\n-#define __glibcpp_signed_long_long_min __glibcpp_s64_min\n-#define __glibcpp_signed_long_long_max __glibcpp_s64_max\n-#define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n-#define __glibcpp_signed_long_long_digits10 __glibcpp_s64_digits10\n-#define __glibcpp_signed_long_long_traps true\n-#define __glibcpp_unsigned_long_long_min __glibcpp_u64_min\n-#define __glibcpp_unsigned_long_long_max __glibcpp_u64_max\n-#define __glibcpp_unsigned_long_long_digits __glibcpp_u64_digits\n-#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u64_digits10\n-#define __glibcpp_unsigned_long_long_traps true\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// wchar_t\n-\n-#define __glibcpp_wchar_t_traps true\n-#ifndef __glibcpp_wchar_t_is_modulo\n-#define __glibcpp_wchar_t_is_modulo true\n-#endif\n-#if __glibcpp_wchar_t_is_signed\n-#if __glibcpp_wchar_t_bits == 8\n-#define __glibcpp_wchar_t_min __glibcpp_s8_min\n-#define __glibcpp_wchar_t_max __glibcpp_s8_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s8_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s8_digits10\n-#elif __glibcpp_wchar_t_bits == 16\n-#define __glibcpp_wchar_t_min __glibcpp_s16_min\n-#define __glibcpp_wchar_t_max __glibcpp_s16_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s16_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s16_digits10\n-#elif __glibcpp_wchar_t_bits == 32\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s32_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s32_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s32_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s32_digits10\n-#elif __glibcpp_wchar_t_bits == 64\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s64_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s64_max\n-#define __glibcpp_wchar_t_digits __glibcpp_s64_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_s64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-#else\n-#if __glibcpp_wchar_t_bits == 8\n-#define __glibcpp_wchar_t_min __glibcpp_u8_min\n-#define __glibcpp_wchar_t_max __glibcpp_u8_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u8_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u8_digits10\n-#elif __glibcpp_wchar_t_bits == 16\n-#define __glibcpp_wchar_t_min __glibcpp_u16_min\n-#define __glibcpp_wchar_t_max __glibcpp_u16_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u16_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u16_digits10\n-#elif __glibcpp_wchar_t_bits == 32\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u32_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u32_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u32_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u32_digits10\n-#elif __glibcpp_wchar_t_bits == 64\n-#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u64_min\n-#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u64_max\n-#define __glibcpp_wchar_t_digits __glibcpp_u64_digits\n-#define __glibcpp_wchar_t_digits10 __glibcpp_u64_digits10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-#endif\n-\n-// float\n-//\n-\n-#if __glibcpp_float_bits == 32\n-#define __glibcpp_float_min __glibcpp_f32_min\n-#define __glibcpp_float_max __glibcpp_f32_max\n-#define __glibcpp_float_digits __glibcpp_f32_digits\n-#define __glibcpp_float_digits10 __glibcpp_f32_digits10\n-#define __glibcpp_float_radix __glibcpp_f32_radix\n-#define __glibcpp_float_epsilon __glibcpp_f32_epsilon\n-#define __glibcpp_float_round_error __glibcpp_f32_round_error\n-#define __glibcpp_float_min_exponent __glibcpp_f32_min_exponent\n-#define __glibcpp_float_min_exponent10 __glibcpp_f32_min_exponent10\n-#define __glibcpp_float_max_exponent __glibcpp_f32_max_exponent\n-#define __glibcpp_float_max_exponent10 __glibcpp_f32_max_exponent10\n-#elif __glibcpp_float_bits == 64\n-#define __glibcpp_float_min __glibcpp_f64_min\n-#define __glibcpp_float_max __glibcpp_f64_max\n-#define __glibcpp_float_digits __glibcpp_f64_digits\n-#define __glibcpp_float_digits10 __glibcpp_f64_digits10\n-#define __glibcpp_float_radix __glibcpp_f64_radix\n-#define __glibcpp_float_epsilon __glibcpp_f64_epsilon\n-#define __glibcpp_float_round_error __glibcpp_f64_round_error\n-#define __glibcpp_float_min_exponent __glibcpp_f64_min_exponent\n-#define __glibcpp_float_min_exponent10 __glibcpp_f64_min_exponent10\n-#define __glibcpp_float_max_exponent __glibcpp_f64_max_exponent\n-#define __glibcpp_float_max_exponent10 __glibcpp_f64_max_exponent10\n-#elif __glibcpp_float_bits == 80\n-#define __glibcpp_float_min __glibcpp_f80_min\n-#define __glibcpp_float_max __glibcpp_f80_max\n-#define __glibcpp_float_digits __glibcpp_f80_digits\n-#define __glibcpp_float_digits10 __glibcpp_f80_digits10\n-#define __glibcpp_float_radix __glibcpp_f80_radix\n-#define __glibcpp_float_epsilon __glibcpp_f80_epsilon\n-#define __glibcpp_float_round_error __glibcpp_f80_round_error\n-#define __glibcpp_float_min_exponent __glibcpp_f80_min_exponent\n-#define __glibcpp_float_min_exponent10 __glibcpp_f80_min_exponent10\n-#define __glibcpp_float_max_exponent __glibcpp_f80_max_exponent\n-#define __glibcpp_float_max_exponent10 __glibcpp_f80_max_exponent10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// FIXME: These are just stubs and inkorrect\n-\n-#ifndef __glibcpp_float_has_infinity\n-#define __glibcpp_float_has_infinity false\n-#endif\n-\n-#ifndef __glibcpp_float_has_quiet_NaM\n-#define __glibcpp_float_has_quiet_NaN false\n-#endif\n-\n-#ifndef __glibcpp_float_has_signaling_NaN\n-#define __glibcpp_float_has_signaling_NaN false\n-#endif\n-\n-#ifndef __glibcpp_float_has_denorm\n-#define __glibcpp_float_has_denorm denorm_absent\n-#endif\n-\n-#ifndef __glibcpp_float_has_denorm_loss\n-#define __glibcpp_float_has_denorm_loss false\n-#endif\n-\n-#ifndef __glibcpp_float_infinity\n-#define __glibcpp_float_infinity 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_quiet_NaN\n-#define __glibcpp_float_quiet_NaN 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_signaling_NaN\n-#define __glibcpp_float_signaling_NaN 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_denorm_min\n-#define __glibcpp_float_denorm_min 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_is_iec559\n-#define __glibcpp_float_is_iec559 false\n-#endif\n-\n-#ifndef __glibcpp_float_is_bounded\n-#define __glibcpp_float_is_bounded true\n-#endif\n-\n-#ifndef __glibcpp_float_is_modulo\n-#define __glibcpp_float_is_modulo false\n-#endif\n-\n-#ifndef __glibcpp_float_traps\n-#define __glibcpp_float_traps false\n-#endif\n-\n-#ifndef __glibcpp_float_tinyness_before\n-#define __glibcpp_float_tinyness_before false\n-#endif\n-\n-#ifndef __glibcpp_float_round_style\n-#define __glibcpp_float_round_style round_toward_zero\n-#endif\n-\n-// double\n-\n-#if __glibcpp_double_bits == 32\n-#define __glibcpp_double_min __glibcpp_f32_min\n-#define __glibcpp_double_max __glibcpp_f32_max\n-#define __glibcpp_double_digits __glibcpp_f32_digits\n-#define __glibcpp_double_digits10 __glibcpp_f32_digits10\n-#define __glibcpp_double_radix __glibcpp_f32_radix\n-#define __glibcpp_double_epsilon __glibcpp_f32_epsilon\n-#define __glibcpp_double_round_error __glibcpp_f32_round_error\n-#define __glibcpp_double_min_exponent __glibcpp_f32_min_exponent\n-#define __glibcpp_double_min_exponent10 __glibcpp_f32_min_exponent10\n-#define __glibcpp_double_max_exponent __glibcpp_f32_max_exponent\n-#define __glibcpp_double_max_exponent10 __glibcpp_f32_max_exponent10\n-#elif __glibcpp_double_bits == 64\n-#define __glibcpp_double_min __glibcpp_f64_min\n-#define __glibcpp_double_max __glibcpp_f64_max\n-#define __glibcpp_double_digits __glibcpp_f64_digits\n-#define __glibcpp_double_digits10 __glibcpp_f64_digits10\n-#define __glibcpp_double_radix __glibcpp_f64_radix\n-#define __glibcpp_double_epsilon __glibcpp_f64_epsilon\n-#define __glibcpp_double_round_error __glibcpp_f64_round_error\n-#define __glibcpp_double_min_exponent __glibcpp_f64_min_exponent\n-#define __glibcpp_double_min_exponent10 __glibcpp_f64_min_exponent10\n-#define __glibcpp_double_max_exponent __glibcpp_f64_max_exponent\n-#define __glibcpp_double_max_exponent10 __glibcpp_f64_max_exponent10\n-#elif __glibcpp_double_bits == 80\n-#define __glibcpp_double_min __glibcpp_f80_min\n-#define __glibcpp_double_max __glibcpp_f80_max\n-#define __glibcpp_double_digits __glibcpp_f80_digits\n-#define __glibcpp_double_digits10 __glibcpp_f80_digits10\n-#define __glibcpp_double_radix __glibcpp_f80_radix\n-#define __glibcpp_double_epsilon __glibcpp_f80_epsilon\n-#define __glibcpp_double_round_error __glibcpp_f80_round_error\n-#define __glibcpp_double_min_exponent __glibcpp_f80_min_exponent\n-#define __glibcpp_double_min_exponent10 __glibcpp_f80_min_exponent10\n-#define __glibcpp_double_max_exponent __glibcpp_f80_max_exponent\n-#define __glibcpp_double_max_exponent10 __glibcpp_f80_max_exponent10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// FIXME: These are just stubs and inkorrect\n-\n-#ifndef __glibcpp_double_has_infinity\n-#define __glibcpp_double_has_infinity false\n-#endif\n-\n-#ifndef __glibcpp_double_has_quiet_NaM\n-#define __glibcpp_double_has_quiet_NaN false\n-#endif\n-\n-#ifndef __glibcpp_double_has_signaling_NaN\n-#define __glibcpp_double_has_signaling_NaN false\n-#endif\n-\n-#ifndef __glibcpp_double_has_denorm\n-#define __glibcpp_double_has_denorm denorm_absent\n-#endif\n-\n-#ifndef __glibcpp_double_has_denorm_loss\n-#define __glibcpp_double_has_denorm_loss false\n-#endif\n-\n-#ifndef __glibcpp_double_infinity\n-#define __glibcpp_double_infinity 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_quiet_NaN\n-#define __glibcpp_double_quiet_NaN 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_signaling_NaN\n-#define __glibcpp_double_signaling_NaN 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_denorm_min\n-#define __glibcpp_double_denorm_min 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_is_iec559\n-#define __glibcpp_double_is_iec559 false\n-#endif\n-\n-#ifndef __glibcpp_double_is_bounded\n-#define __glibcpp_double_is_bounded true\n-#endif\n-\n-#ifndef __glibcpp_double_is_modulo\n-#define __glibcpp_double_is_modulo false\n-#endif\n-\n-#ifndef __glibcpp_double_traps\n-#define __glibcpp_double_traps false\n-#endif\n-\n-#ifndef __glibcpp_double_tinyness_before\n-#define __glibcpp_double_tinyness_before false\n-#endif\n-\n-#ifndef __glibcpp_double_round_style\n-#define __glibcpp_double_round_style round_toward_zero\n-#endif\n-\n-// long double\n-\n-#if __glibcpp_long_double_bits == 32\n-#define __glibcpp_long_double_min __glibcpp_f32_min\n-#define __glibcpp_long_double_max __glibcpp_f32_max\n-#define __glibcpp_long_double_digits __glibcpp_f32_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f32_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f32_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f32_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f32_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f32_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f32_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f32_max_exponent10\n-#elif __glibcpp_long_double_bits == 64\n-#define __glibcpp_long_double_min __glibcpp_f64_min\n-#define __glibcpp_long_double_max __glibcpp_f64_max\n-#define __glibcpp_long_double_digits __glibcpp_f64_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f64_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f64_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f64_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f64_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f64_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f64_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f64_max_exponent10\n-#elif __glibcpp_long_double_bits == 80\n-#define __glibcpp_long_double_min __glibcpp_f80_min\n-#define __glibcpp_long_double_max __glibcpp_f80_max\n-#define __glibcpp_long_double_digits __glibcpp_f80_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f80_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f80_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f80_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f80_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n-#elif __glibcpp_long_double_bits == 96\n-#define __glibcpp_long_double_min __glibcpp_f96_min\n-#define __glibcpp_long_double_max __glibcpp_f96_max\n-#define __glibcpp_long_double_digits __glibcpp_f96_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f96_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f96_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f96_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f96_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n-#elif __glibcpp_long_double_bits == 128\n-#define __glibcpp_long_double_min __glibcpp_f128_min\n-#define __glibcpp_long_double_max __glibcpp_f128_max\n-#define __glibcpp_long_double_digits __glibcpp_f128_digits\n-#define __glibcpp_long_double_digits10 __glibcpp_f128_digits10\n-#define __glibcpp_long_double_radix __glibcpp_f128_radix\n-#define __glibcpp_long_double_epsilon __glibcpp_f128_epsilon\n-#define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n-#define __glibcpp_long_double_min_exponent __glibcpp_f128_min_exponent\n-#define __glibcpp_long_double_min_exponent10 __glibcpp_f128_min_exponent10\n-#define __glibcpp_long_double_max_exponent __glibcpp_f128_max_exponent\n-#define __glibcpp_long_double_max_exponent10 __glibcpp_f128_max_exponent10\n-#else\n-// You must define these macros in the configuration file.\n-#endif\n-\n-// FIXME: These are just stubs and inkorrect\n-\n-#ifndef __glibcpp_long_double_has_infinity\n-#define __glibcpp_long_double_has_infinity false\n-#endif\n-\n-#ifndef __glibcpp_long_double_has_quiet_NaN\n-#define __glibcpp_long_double_has_quiet_NaN false\n-#endif\n-\n-#ifndef __glibcpp_long_double_has_signaling_NaN\n-#define __glibcpp_long_double_has_signaling_NaN false\n-#endif\n-\n-#ifndef __glibcpp_long_double_has_denorm\n-#define __glibcpp_long_double_has_denorm denorm_absent\n-#endif\n-\n-#ifndef __glibcpp_long_double_has_denorm_loss\n-#define __glibcpp_long_double_has_denorm_loss false\n-#endif\n-\n-#ifndef __glibcpp_long_double_infinity\n-#define __glibcpp_long_double_infinity 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_quiet_NaN\n-#define __glibcpp_long_double_quiet_NaN 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_signaling_NaN\n-#define __glibcpp_long_double_signaling_NaN 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_denorm_min\n-#define __glibcpp_long_double_denorm_min 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_is_iec559\n-#define __glibcpp_long_double_is_iec559 false\n-#endif\n-\n-#ifndef __glibcpp_long_double_is_bounded\n-#define __glibcpp_long_double_is_bounded true\n-#endif\n-\n-#ifndef __glibcpp_long_double_is_modulo\n-#define __glibcpp_long_double_is_modulo false\n-#endif\n-\n-#ifndef __glibcpp_long_double_traps\n-#define __glibcpp_long_double_traps false\n-#endif\n-\n-#ifndef __glibcpp_long_double_tinyness_before\n-#define __glibcpp_long_double_tinyness_before false\n-#endif\n-\n-#ifndef __glibcpp_long_double_round_style\n-#define __glibcpp_long_double_round_style round_toward_zero\n-#endif\n-\n-\n-namespace std\n-{\n-  enum float_round_style \n-  {\n-    round_indeterminate       = -1,\n-    round_toward_zero         = 0,\n-    round_to_nearest          = 1,\n-    round_toward_infinity     = 2,\n-    round_toward_neg_infinity = 3\n-  };\n-\n-  enum float_denorm_style \n-  {\n-    denorm_indeterminate = -1,\n-    denorm_absent        = 0,\n-    denorm_present       = 1\n-  };\n-\n-  //\n-  // The primary class traits\n-  //\n-  template<typename _Tp> \n-    struct numeric_limits \n-    {\n-      static const bool is_specialized = false;\n-\n-      static _Tp min() throw() { return static_cast<_Tp>(0); }\n-      static _Tp max() throw() { return static_cast<_Tp>(0); }\n-\n-      static const int digits = 0;\n-      static const int digits10 = 0;\n-      static const bool is_signed = false;\n-      static const bool is_integer = false;\n-      static const bool is_exact = false;\n-      static const int radix = 0;\n-\n-      static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n-      static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n-      static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n-      static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n-      static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = false;\n-      static const bool is_modulo = false;\n-\n-      static const bool traps = false;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_specialized;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::digits;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::digits10;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_signed;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_integer;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_exact;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::radix;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::min_exponent;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::min_exponent10;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::max_exponent;\n-\n-  template<typename _Tp> \n-    const int\n-    numeric_limits<_Tp>::max_exponent10;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_infinity;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_quiet_NaN;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_signaling_NaN;\n-\n-  template<typename _Tp> \n-    const float_denorm_style\n-    numeric_limits<_Tp>::has_denorm;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::has_denorm_loss;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_iec559;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_bounded;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::is_modulo;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::traps;\n-\n-  template<typename _Tp> \n-    const bool\n-    numeric_limits<_Tp>::tinyness_before;\n-\n-  template<typename _Tp> \n-    const float_round_style\n-    numeric_limits<_Tp>::round_style;\n-\n-  // Now there follow 15 explicit specializations.  Yes, 15.  Make sure\n-  // you get the count right.\n-  \n-  template<>\n-    struct numeric_limits<bool>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static bool min() throw()\n-      { return false; }\n-\n-      static bool max() throw()\n-      { return true; }\n-\n-      static const int digits = __glibcpp_bool_digits;\n-      static const int digits10 = 0;\n-      static const bool is_signed = false;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static bool epsilon() throw()\n-      { return false; }\n-      static bool round_error() throw()\n-      { return false; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static bool infinity() throw()\n-      { return false; }\n-      static bool quiet_NaN() throw()\n-      { return false; }\n-      static bool signaling_NaN() throw()\n-      { return false; }\n-      static bool denorm_min() throw()\n-      { return false; }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = true;\n-\n-      // It is not clear what it means for a boolean type to trap.\n-      // This is a DR on the LWG issue list.  Here, I use integer\n-      // promotion semantics.\n-      static const bool traps = __glibcpp_signed_int_traps\n-               || __glibcpp_signed_long_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_bool_digits  \n-  \n-  template<>\n-    struct numeric_limits<char>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static char min() throw()\n-      { return __glibcpp_char_min; }\n-      static char max() throw()\n-      { return __glibcpp_char_max; }\n-\n-      static const int digits = __glibcpp_char_digits;\n-      static const int digits10 = __glibcpp_char_digits10;\n-      static const bool is_signed = __glibcpp_plain_char_is_signed;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static char epsilon() throw()\n-      { return char(); }\n-      static char round_error() throw()\n-      { return char(); }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static char infinity() throw()\n-      { return char(); }\n-      static char quiet_NaN() throw()\n-      { return char(); }\n-      static char signaling_NaN() throw()\n-      { return char(); }\n-      static char denorm_min() throw()\n-      { return static_cast<char>(0); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_char_is_modulo;\n-\n-      static const bool traps = __glibcpp_char_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_char_min\n-#undef __glibcpp_char_max  \n-#undef __glibcpp_char_digits\n-#undef __glibcpp_char_digits10\n-#undef __glibcpp_char_is_signed\n-#undef __glibcpp_char_is_modulo\n-#undef __glibcpp_char_traps\n-\n-\n-\n-  template<>\n-    struct numeric_limits<signed char>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static signed char min() throw()\n-      { return __glibcpp_signed_char_min; }\n-      static signed char max() throw()\n-      { return __glibcpp_signed_char_max; }\n-\n-      static const int digits = __glibcpp_signed_char_digits;\n-      static const int digits10 = __glibcpp_signed_char_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static signed char epsilon() throw()\n-      { return 0; }\n-      static signed char round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static signed char infinity() throw()\n-      { return static_cast<signed char>(0); }\n-      static signed char quiet_NaN() throw()\n-      { return static_cast<signed char>(0); }\n-      static signed char signaling_NaN() throw()\n-      { return static_cast<signed char>(0); }\n-      static signed char denorm_min() throw()\n-      { return static_cast<signed char>(0); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_char_is_modulo;\n-\n-      static const bool traps = __glibcpp_signed_char_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_signed_char_min\n-#undef __glibcpp_signed_char_max\n-#undef __glibcpp_signed_char_digits\n-#undef __glibcpp_signed_char_digits10\n-#undef __glibcpp_signed_char_is_modulo  \n-#undef __glibcpp_signed_char_traps  \n-\n-  template<>\n-    struct numeric_limits<unsigned char>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static unsigned char min() throw()\n-      { return 0; }\n-      static unsigned char max() throw()\n-      { return __glibcpp_unsigned_char_max; }\n-\n-      static const int digits = __glibcpp_unsigned_char_digits;\n-      static const int digits10 = __glibcpp_unsigned_char_digits10;\n-      static const bool is_signed = false;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static unsigned char epsilon() throw()\n-      { return 0; }\n-      static unsigned char round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static unsigned char infinity() throw()\n-      { return static_cast<unsigned char>(0); }\n-      static unsigned char quiet_NaN() throw()\n-      { return static_cast<unsigned char>(0); }\n-      static unsigned char signaling_NaN() throw()\n-      { return static_cast<unsigned char>(0); }\n-      static unsigned char denorm_min() throw()\n-      { return static_cast<unsigned char>(0); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = true;\n-\n-      static const bool traps = __glibcpp_unsigned_char_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_unsigned_char_max\n-#undef __glibcpp_unsigned_char_digits\n-#undef __glibcpp_unsigned_char_digits10\n-#undef __glibcpp_unsigned_char_traps  \n-\n-  template<>\n-    struct numeric_limits<wchar_t>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static wchar_t min() throw()\n-      { return __glibcpp_wchar_t_min; }\n-      static wchar_t max() throw()\n-      { return __glibcpp_wchar_t_max; }\n-\n-      static const int digits = __glibcpp_wchar_t_digits;\n-      static const int digits10 = __glibcpp_wchar_t_digits10;\n-      static const bool is_signed = __glibcpp_wchar_t_is_signed;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static wchar_t epsilon() throw()\n-      { return 0; }\n-      static wchar_t round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static wchar_t infinity() throw()\n-      { return wchar_t(); }\n-      static wchar_t quiet_NaN() throw()\n-      { return wchar_t(); }\n-      static wchar_t signaling_NaN() throw()\n-      { return wchar_t(); }\n-      static wchar_t denorm_min() throw()\n-      { return wchar_t(); }\n-\n-      static const bool is_iec559 = false;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_wchar_t_is_modulo;\n-\n-      static const bool traps = __glibcpp_wchar_t_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_wchar_t_min\n-#undef __glibcpp_wchar_t_max\n-#undef __glibcpp_wchar_t_digits\n-#undef __glibcpp_wchar_t_digits10  \n-#undef __glibcpp_wchar_t_is_signed\n-#undef __glibcpp_wchar_t_is_modulo\n-#undef __glibcpp_wchar_t_traps  \n-  \n-  template<>\n-    struct numeric_limits<short>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static short min() throw()\n-      { return __glibcpp_signed_short_min; }\n-      static short max() throw()\n-      { return __glibcpp_signed_short_max; }\n-\n-      static const int digits = __glibcpp_signed_short_digits;\n-      static const int digits10 = __glibcpp_signed_short_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static short epsilon() throw()\n-      { return 0; }\n-      static short round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static short infinity() throw()\n-      { return short(); }\n-      static short quiet_NaN() throw()\n-      { return short(); }\n-      static short signaling_NaN() throw()\n-      { return short(); }\n-      static short denorm_min() throw()\n-      { return short(); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_short_is_modulo;\n-\n-      static const bool traps = __glibcpp_signed_short_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_signed_short_min\n-#undef __glibcpp_signed_short_max\n-#undef __glibcpp_signed_short_digits\n-#undef __glibcpp_signed_short_digits10\n-#undef __glibcpp_signed_short_is_modulo\n-#undef __glibcpp_signed_short_traps  \n-  \n-  template<>\n-    struct numeric_limits<unsigned short>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static unsigned short min() throw()\n-      { return 0; }\n-      static unsigned short max() throw()\n-      { return __glibcpp_unsigned_short_max; }\n-\n-      static const int digits = __glibcpp_unsigned_short_digits;\n-      static const int digits10 = __glibcpp_unsigned_short_digits10;\n-      static const bool is_signed = false;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static unsigned short epsilon() throw()\n-      { return 0; }\n-      static unsigned short round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static unsigned short infinity() throw()\n-      { return static_cast<unsigned short>(0); }\n-      static unsigned short quiet_NaN() throw()\n-      { return static_cast<unsigned short>(0); }\n-      static unsigned short signaling_NaN() throw()\n-      { return static_cast<unsigned short>(0); }\n-      static unsigned short denorm_min() throw()\n-      { return static_cast<unsigned short>(0); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = true;\n-\n-      static const bool traps = __glibcpp_unsigned_short_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_unsigned_short_max\n-#undef __glibcpp_unsigned_short_digits\n-#undef __glibcpp_unsigned_short_digits10\n-#undef __glibcpp_unsigned_short_traps  \n-  \n-  template<>\n-    struct numeric_limits<int>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static int min() throw()\n-      { return __glibcpp_signed_int_min; }\n-      static int max() throw()\n-      { return __glibcpp_signed_int_max; }\n-\n-      static const int digits = __glibcpp_signed_int_digits;\n-      static const int digits10 = __glibcpp_signed_int_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static int epsilon() throw()\n-      { return 0; }\n-      static int round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static int infinity() throw()\n-      { return static_cast<int>(0); }\n-      static int quiet_NaN() throw()\n-      { return static_cast<int>(0); }\n-      static int signaling_NaN() throw()\n-      { return static_cast<int>(0); }\n-      static int denorm_min() throw()\n-      { return static_cast<int>(0); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_int_is_modulo;\n-\n-      static const bool traps = __glibcpp_signed_int_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_signed_int_min\n-#undef __glibcpp_signed_int_max\n-#undef __glibcpp_signed_int_digits\n-#undef __glibcpp_signed_int_digits10\n-#undef __glibcpp_signed_int_is_modulo\n-#undef __glibcpp_signed_int_traps  \n-  \n-  template<>\n-    struct numeric_limits<unsigned int>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static unsigned int min() throw()\n-      { return 0; }\n-          static unsigned int max() throw()\n-      { return __glibcpp_unsigned_int_max; }\n-\n-      static const int digits = __glibcpp_unsigned_int_digits;\n-      static const int digits10 = __glibcpp_unsigned_int_digits10;\n-      static const bool is_signed = false;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static unsigned int epsilon() throw()\n-      { return 0; }\n-      static unsigned int round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static unsigned int infinity() throw()\n-      { return static_cast<unsigned int>(0); }\n-      static unsigned int quiet_NaN() throw()\n-      { return static_cast<unsigned int>(0); }\n-      static unsigned int signaling_NaN() throw()\n-      { return static_cast<unsigned int>(0); }\n-      static unsigned int denorm_min() throw()\n-      { return static_cast<unsigned int>(0); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = true;\n-\n-      static const bool traps = __glibcpp_unsigned_int_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_unsigned_int_max\n-#undef __glibcpp_unsigned_int_digits\n-#undef __glibcpp_unsigned_int_digits10\n-#undef __glibcpp_unsigned_int_traps  \n-\n-  template<>\n-    struct numeric_limits<long>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static long min() throw()\n-      { return __glibcpp_signed_long_min; }\n-      static long max() throw()\n-      { return __glibcpp_signed_long_max; }\n-\n-      static const int digits = __glibcpp_signed_long_digits;\n-      static const int digits10 = __glibcpp_signed_long_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static long epsilon() throw()\n-      { return 0; }\n-      static long round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static long infinity() throw()\n-      { return static_cast<long>(0); }\n-      static long quiet_NaN() throw()\n-      { return static_cast<long>(0); }\n-      static long signaling_NaN() throw()\n-      { return static_cast<long>(0); }\n-      static long denorm_min() throw()\n-      { return static_cast<long>(0); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_long_is_modulo;\n-\n-      static const bool traps = __glibcpp_signed_long_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_signed_long_min\n-#undef __glibcpp_signed_long_max\n-#undef __glibcpp_signed_long_digits\n-#undef __glibcpp_signed_long_digits10\n-#undef __glibcpp_signed_long_is_modulo\n-#undef __glibcpp_signed_long_traps  \n-  \n-  template<>\n-    struct numeric_limits<unsigned long>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static unsigned long min() throw()\n-      { return 0; }\n-      static unsigned long max() throw()\n-      { return __glibcpp_unsigned_long_max; }\n-\n-      static const int digits = __glibcpp_unsigned_long_digits;\n-      static const int digits10 = __glibcpp_unsigned_long_digits10;\n-      static const bool is_signed = false;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static unsigned long epsilon() throw()\n-      { return 0; }\n-      static unsigned long round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static unsigned long infinity() throw()\n-      { return static_cast<unsigned long>(0); }\n-      static unsigned long quiet_NaN() throw()\n-      { return static_cast<unsigned long>(0); }\n-      static unsigned long signaling_NaN() throw()\n-      { return static_cast<unsigned long>(0); }\n-      static unsigned long denorm_min() throw()\n-      { return static_cast<unsigned long>(0); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = true;\n-\n-      static const bool traps = __glibcpp_unsigned_long_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_unsigned_long_max\n-#undef __glibcpp_unsigned_long_digits\n-#undef __glibcpp_unsigned_long_digits10\n-#undef __glibcpp_unsigned_long_traps  \n-\n-  template<>\n-    struct numeric_limits<long long>\n-    {\n-      static const bool is_specialized = true;\n-      \n-      static long long min() throw()\n-      { return __glibcpp_signed_long_long_min; }\n-      static long long max() throw()\n-      { return __glibcpp_signed_long_long_max; }\n-      \n-      static const int digits = __glibcpp_signed_long_long_digits;\n-      static const int digits10 = __glibcpp_signed_long_long_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static long long epsilon() throw()\n-      { return 0; }\n-      static long long round_error() throw()\n-      { return 0; }\n-      \n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-      \n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-      \n-      static long long infinity() throw()\n-      { return static_cast<long long>(0); }\n-      static long long quiet_NaN() throw()\n-      { return static_cast<long long>(0); }\n-      static long long signaling_NaN() throw()\n-      { return static_cast<long long>(0); }\n-      static long long denorm_min() throw()\n-      { return static_cast<long long>(0); }\n-      \n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = __glibcpp_signed_long_long_is_modulo;\n-\n-      static const bool traps = __glibcpp_signed_long_long_traps;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_signed_long_long_min\n-#undef __glibcpp_signed_long_long_max\n-#undef __glibcpp_signed_long_long_digits\n-#undef __glibcpp_signed_long_long_digits10\n-#undef __glibcpp_signed_long_long_is_modulo\n-#undef __glibcpp_signed_long_long_traps  \n-  \n-  template<>\n-    struct numeric_limits<unsigned long long>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static unsigned long long min() throw()\n-      { return 0; }\n-      static unsigned long long max() throw()\n-      { return __glibcpp_unsigned_long_long_max; }\n-\n-      static const int digits = __glibcpp_unsigned_long_long_digits;\n-      static const int digits10 = __glibcpp_unsigned_long_long_digits10;\n-      static const bool is_signed = false;\n-      static const bool is_integer = true;\n-      static const bool is_exact = true;\n-      static const int radix = 2;\n-      static unsigned long long epsilon() throw()\n-      { return 0; }\n-      static unsigned long long round_error() throw()\n-      { return 0; }\n-\n-      static const int min_exponent = 0;\n-      static const int min_exponent10 = 0;\n-      static const int max_exponent = 0;\n-      static const int max_exponent10 = 0;\n-\n-      static const bool has_infinity = false;\n-      static const bool has_quiet_NaN = false;\n-      static const bool has_signaling_NaN = false;\n-      static const float_denorm_style has_denorm = denorm_absent;\n-      static const bool has_denorm_loss = false;\n-\n-      static unsigned long long infinity() throw()\n-      { return static_cast<unsigned long long>(0); }\n-      static unsigned long long quiet_NaN() throw()\n-      { return static_cast<unsigned long long>(0); }\n-      static unsigned long long signaling_NaN() throw()\n-      { return static_cast<unsigned long long>(0); }\n-      static unsigned long long denorm_min() throw()\n-      { return static_cast<unsigned long long>(0); }\n-\n-      static const bool is_iec559 = true;\n-      static const bool is_bounded = true;\n-      static const bool is_modulo = true;\n-\n-      static const bool traps = true;\n-      static const bool tinyness_before = false;\n-      static const float_round_style round_style = round_toward_zero;\n-    };\n-\n-#undef __glibcpp_unsigned_long_long_max\n-#undef __glibcpp_unsigned_long_long_digits\n-#undef __glibcpp_unsigned_long_long_digits10\n-#undef __glibcpp_unsigned_long_long_traps  \n-\n-  template<>\n-    struct numeric_limits<float>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static float min() throw()\n-      { return __glibcpp_float_min; }\n-      static float max() throw()\n-      { return __glibcpp_float_max; }\n-\n-      static const int digits = __glibcpp_float_digits;\n-      static const int digits10 = __glibcpp_float_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = false;\n-      static const bool is_exact = false;\n-      static const int radix = __glibcpp_float_radix;\n-      static float epsilon() throw()\n-      { return __glibcpp_float_epsilon; }\n-      static float round_error() throw()\n-      { return __glibcpp_float_round_error; }\n-\n-      static const int min_exponent = __glibcpp_float_min_exponent;\n-      static const int min_exponent10 = __glibcpp_float_min_exponent10;\n-      static const int max_exponent = __glibcpp_float_max_exponent;\n-      static const int max_exponent10 = __glibcpp_float_max_exponent10;\n-\n-      static const bool has_infinity = __glibcpp_float_has_infinity;\n-      static const bool has_quiet_NaN = __glibcpp_float_has_quiet_NaN;\n-      static const bool has_signaling_NaN = __glibcpp_float_has_signaling_NaN;\n-      static const float_denorm_style has_denorm = __glibcpp_float_has_denorm;\n-      static const bool has_denorm_loss = __glibcpp_float_has_denorm_loss;\n-\n-      static float infinity() throw()\n-      { return __glibcpp_float_infinity; }\n-      static float quiet_NaN() throw()\n-      { return __glibcpp_float_quiet_NaN; }\n-      static float signaling_NaN() throw()\n-      { return __glibcpp_float_signaling_NaN; }\n-      static float denorm_min() throw()\n-      { return __glibcpp_float_denorm_min; }\n-\n-      static const bool is_iec559 = __glibcpp_float_is_iec559;\n-      static const bool is_bounded = __glibcpp_float_is_bounded;\n-      static const bool is_modulo = __glibcpp_float_is_modulo;\n-\n-      static const bool traps = __glibcpp_float_traps;\n-      static const bool tinyness_before = __glibcpp_float_tinyness_before;\n-      static const float_round_style round_style = __glibcpp_float_round_style;\n-    };\n-\n-#undef __glibcpp_float_min\n-#undef __glibcpp_float_max\n-#undef __glibcpp_float_digits\n-#undef __glibcpp_float_digits10\n-#undef __glibcpp_float_radix\n-#undef __glibcpp_float_round_error\n-#undef __glibcpp_float_min_exponent\n-#undef __glibcpp_float_min_exponent10\n-#undef __glibcpp_float_max_exponent\n-#undef __glibcpp_float_max_exponent10\n-#undef __glibcpp_float_has_infinity\n-#undef __glibcpp_float_has_quiet_NaN\n-#undef __glibcpp_float_has_signaling_NaN\n-#undef __glibcpp_float_has_denorm\n-#undef __glibcpp_float_has_denorm_loss\n-#undef __glibcpp_float_infinity\n-#undef __glibcpp_float_quiet_NaN\n-#undef __glibcpp_float_signaling_NaN\n-#undef __glibcpp_float_denorm_min\n-#undef __glibcpp_float_is_iec559\n-#undef __glibcpp_float_is_bounded\n-#undef __glibcpp_float_is_modulo\n-#undef __glibcpp_float_traps\n-#undef __glibcpp_float_tinyness_before\n-#undef __glibcpp_float_round_style  \n-\n-  template<>\n-    struct numeric_limits<double>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static double min() throw()\n-      { return __glibcpp_double_min; }\n-      static double max() throw()\n-      { return __glibcpp_double_max; }\n-\n-      static const int digits = __glibcpp_double_digits;\n-      static const int digits10 = __glibcpp_double_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = false;\n-      static const bool is_exact = false;\n-      static const int radix = __glibcpp_double_radix;\n-      static double epsilon() throw()\n-      { return __glibcpp_double_epsilon; }\n-      static double round_error() throw()\n-      { return __glibcpp_double_round_error; }\n-\n-      static const int min_exponent = __glibcpp_double_min_exponent;\n-      static const int min_exponent10 = __glibcpp_double_min_exponent10;\n-      static const int max_exponent = __glibcpp_double_max_exponent;\n-      static const int max_exponent10 = __glibcpp_double_max_exponent10;\n-\n-      static const bool has_infinity = __glibcpp_double_has_infinity;\n-      static const bool has_quiet_NaN = __glibcpp_double_has_quiet_NaN;\n-      static const bool has_signaling_NaN = __glibcpp_double_has_signaling_NaN;\n-      static const float_denorm_style has_denorm =\n-              __glibcpp_double_has_denorm;\n-      static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n-\n-      static double infinity() throw()\n-      { return __glibcpp_double_infinity; }\n-      static double quiet_NaN() throw()\n-      { return __glibcpp_double_quiet_NaN; }\n-      static double signaling_NaN() throw()\n-      { return __glibcpp_double_signaling_NaN; }\n-      static double denorm_min() throw()\n-      { return __glibcpp_double_denorm_min; }\n-\n-      static const bool is_iec559 = __glibcpp_double_is_iec559;\n-      static const bool is_bounded = __glibcpp_double_is_bounded;\n-      static const bool is_modulo = __glibcpp_double_is_modulo;\n-\n-      static const bool traps = __glibcpp_double_traps;\n-      static const bool tinyness_before = __glibcpp_double_tinyness_before;\n-      static const float_round_style round_style =\n-              __glibcpp_double_round_style;\n-    };\n-\n-#undef __glibcpp_double_min\n-#undef __glibcpp_double_max\n-#undef __glibcpp_double_digits\n-#undef __glibcpp_double_digits10\n-#undef __glibcpp_double_radix\n-#undef __glibcpp_double_round_error\n-#undef __glibcpp_double_min_exponent\n-#undef __glibcpp_double_min_exponent10\n-#undef __glibcpp_double_max_exponent\n-#undef __glibcpp_double_max_exponent10\n-#undef __glibcpp_double_has_infinity\n-#undef __glibcpp_double_has_quiet_NaN\n-#undef __glibcpp_double_has_signaling_NaN\n-#undef __glibcpp_double_has_denorm\n-#undef __glibcpp_double_has_denorm_loss\n-#undef __glibcpp_double_infinity\n-#undef __glibcpp_double_quiet_NaN\n-#undef __glibcpp_double_signaling_NaN\n-#undef __glibcpp_double_denorm_min\n-#undef __glibcpp_double_is_iec559\n-#undef __glibcpp_double_is_bounded\n-#undef __glibcpp_double_is_modulo\n-#undef __glibcpp_double_traps\n-#undef __glibcpp_double_tinyness_before\n-#undef __glibcpp_double_round_style  \n-  \n-  \n-  template<>\n-    struct numeric_limits<long double>\n-    {\n-      static const bool is_specialized = true;\n-\n-      static long double min() throw()\n-      { return __glibcpp_long_double_min; }\n-      static long double max() throw()\n-      { return __glibcpp_long_double_max; }\n-\n-      static const int digits = __glibcpp_long_double_digits;\n-      static const int digits10 = __glibcpp_long_double_digits10;\n-      static const bool is_signed = true;\n-      static const bool is_integer = false;\n-      static const bool is_exact = false;\n-      static const int radix = __glibcpp_long_double_radix;\n-      static long double epsilon() throw()\n-      { return __glibcpp_long_double_epsilon; }\n-      static long double round_error() throw()\n-      { return __glibcpp_long_double_round_error; }\n-\n-      static const int min_exponent = __glibcpp_long_double_min_exponent;\n-      static const int min_exponent10 = __glibcpp_long_double_min_exponent10;\n-      static const int max_exponent = __glibcpp_long_double_max_exponent;\n-      static const int max_exponent10 = __glibcpp_long_double_max_exponent10;\n-\n-      static const bool has_infinity = __glibcpp_long_double_has_infinity;\n-      static const bool has_quiet_NaN = __glibcpp_long_double_has_quiet_NaN;\n-      static const bool has_signaling_NaN =\n-                __glibcpp_long_double_has_signaling_NaN;\n-      static const float_denorm_style has_denorm =\n-                __glibcpp_long_double_has_denorm;\n-      static const bool has_denorm_loss =\n-                __glibcpp_long_double_has_denorm_loss;\n-\n-      static long double infinity() throw()\n-      { return __glibcpp_long_double_infinity; }\n-      static long double quiet_NaN() throw()\n-      { return __glibcpp_long_double_quiet_NaN; }\n-      static long double signaling_NaN() throw()\n-      { return __glibcpp_long_double_signaling_NaN; }\n-      static long double denorm_min() throw()\n-      { return __glibcpp_long_double_denorm_min; }\n-\n-      static const bool is_iec559 = __glibcpp_long_double_is_iec559;\n-      static const bool is_bounded = __glibcpp_long_double_is_bounded;\n-      static const bool is_modulo = __glibcpp_long_double_is_modulo;\n-\n-      static const bool traps = __glibcpp_long_double_traps; \n-      static const bool tinyness_before = __glibcpp_long_double_tinyness_before;\n-      static const float_round_style round_style = \n-        __glibcpp_long_double_round_style;\n-    };\n-\n-#undef __glibcpp_long_double_min\n-#undef __glibcpp_long_double_max\n-#undef __glibcpp_long_double_digits\n-#undef __glibcpp_long_double_digits10\n-#undef __glibcpp_long_double_radix\n-#undef __glibcpp_long_double_round_error\n-#undef __glibcpp_long_double_min_exponent\n-#undef __glibcpp_long_double_min_exponent10\n-#undef __glibcpp_long_double_max_exponent\n-#undef __glibcpp_long_double_max_exponent10\n-#undef __glibcpp_long_double_has_infinity\n-#undef __glibcpp_long_double_has_quiet_NaN\n-#undef __glibcpp_long_double_has_signaling_NaN\n-#undef __glibcpp_long_double_has_denorm\n-#undef __glibcpp_long_double_has_denorm_loss\n-#undef __glibcpp_long_double_infinity\n-#undef __glibcpp_long_double_quiet_NaN\n-#undef __glibcpp_long_double_signaling_NaN\n-#undef __glibcpp_long_double_denorm_min\n-#undef __glibcpp_long_double_is_iec559\n-#undef __glibcpp_long_double_is_bounded\n-#undef __glibcpp_long_double_is_modulo\n-#undef __glibcpp_long_double_traps\n-#undef __glibcpp_long_double_tinyness_before\n-#undef __glibcpp_long_double_round_style  \n-  \n-} // namespace std\n-\n-#endif // _CPP_NUMERIC_LIMITS"}, {"sha": "683e0a7e66dbbcdc0d7d1184017294f549cb3959", "filename": "libstdc++-v3/include/bits/std_list.h", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_list.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,77 +0,0 @@\n-// <list> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_list.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_LIST\n-#define _CPP_LIST 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/functexcept.h>\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_list.h>\n-\n-#endif /* _CPP_LIST */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "82089d015397c75eef08204ce96173effa03da2b", "filename": "libstdc++-v3/include/bits/std_locale.h", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,52 +0,0 @@\n-// Locale support -*- C++ -*-\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 22.1  Locales\n-//\n-\n-/** @file std_locale.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_LOCALE\n-#define _CPP_LOCALE\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/localefwd.h>\n-#include <bits/locale_facets.h>\n-#include <bits/locale_facets.tcc>\n-\n-#endif\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "0dd38bfafd383ada5eea289337928a29ca7aacab", "filename": "libstdc++-v3/include/bits/std_map.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,74 +0,0 @@\n-// <map> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_map.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_MAP\n-#define _CPP_MAP 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/stl_tree.h>\n-#include <bits/stl_map.h>\n-#include <bits/stl_multimap.h>\n-\n-#endif /* _CPP_MAP */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "c9a2e59e48e1469f09ccef1fd79c699e854861aa", "filename": "libstdc++-v3/include/bits/std_memory.h", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,149 +0,0 @@\n-// <memory> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- * Copyright (c) 1997-1999\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- */\n-\n-/** @file std_memory.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_MEMORY\n-#define _CPP_MEMORY 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_iterator_base_types.h> //for iterator_traits\n-#include <bits/stl_tempbuf.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_raw_storage_iter.h>\n-\n-namespace std\n-{\n-\n- template<class _Tp1> struct auto_ptr_ref {\n-   _Tp1* _M_ptr;\n-   auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}\n-};\n-\n-/**\n- *  A simple smart pointer providing strict ownership semantics.  (More later.)\n-*/\n-template <class _Tp> class auto_ptr {\n-private:\n-  _Tp* _M_ptr;\n-\n-public:\n-  typedef _Tp element_type;\n-\n-  explicit auto_ptr(_Tp* __p = 0) throw() : _M_ptr(__p) {}\n-  auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) {}\n-\n-  template <class _Tp1> auto_ptr(auto_ptr<_Tp1>& __a) throw()\n-    : _M_ptr(__a.release()) {}\n-\n-  auto_ptr& operator=(auto_ptr& __a) throw() {\n-    reset(__a.release());\n-    return *this;\n-  }\n-\n-  template <class _Tp1>\n-  auto_ptr& operator=(auto_ptr<_Tp1>& __a) throw() {\n-    reset(__a.release());\n-    return *this;\n-  }\n-  \n-  // Note: The C++ standard says there is supposed to be an empty throw\n-  // specification here, but omitting it is standard conforming.  Its \n-  // presence can be detected only if _Tp::~_Tp() throws, but (17.4.3.6/2)\n-  // this is prohibited.\n-  ~auto_ptr() { delete _M_ptr; }\n- \n-  _Tp& operator*() const throw() {\n-    return *_M_ptr;\n-  }\n-  _Tp* operator->() const throw() {\n-    return _M_ptr;\n-  }\n-  _Tp* get() const throw() {\n-    return _M_ptr;\n-  }\n-  _Tp* release() throw() {\n-    _Tp* __tmp = _M_ptr;\n-    _M_ptr = 0;\n-    return __tmp;\n-  }\n-  void reset(_Tp* __p = 0) throw() {\n-    if (__p != _M_ptr) {\n-      delete _M_ptr;\n-      _M_ptr = __p;\n-    }    \n-  }\n-\n-public:\n-  auto_ptr(auto_ptr_ref<_Tp> __ref) throw()\n-    : _M_ptr(__ref._M_ptr) {}\n-\n-  auto_ptr& operator=(auto_ptr_ref<_Tp> __ref) throw() {\n-    if (__ref._M_ptr != this->get()) {\n-      delete _M_ptr;\n-      _M_ptr = __ref._M_ptr;\n-    }\n-    return *this;\n-  }\n-\n-  template <class _Tp1> operator auto_ptr_ref<_Tp1>() throw() \n-    { return auto_ptr_ref<_Tp>(this->release()); }\n-  template <class _Tp1> operator auto_ptr<_Tp1>() throw()\n-    { return auto_ptr<_Tp1>(this->release()); }\n-};\n-\n-} // namespace std\n-\n-#endif /* _CPP_MEMORY */\n-\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "097c9c35b4b7b6383862e819e993691f47727667", "filename": "libstdc++-v3/include/bits/std_numeric.h", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,75 +0,0 @@\n-// <numeric> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_numeric.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_NUMERIC\n-#define _CPP_NUMERIC 1\n-\n-#pragma GCC system_header\n-#include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n-#include <bits/std_iterator.h>\n-#include <bits/stl_function.h>\n-#include <bits/stl_numeric.h>\n-\n-#endif /* _CPP_NUMERIC */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "c1c79db7fb05e6a61a1f543791b60f3c16820ac3", "filename": "libstdc++-v3/include/bits/std_ostream.h", "status": "removed", "additions": 0, "deletions": 288, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,288 +0,0 @@\n-// Output streams -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.6.2  Output streams\n-//\n-\n-/** @file std_ostream.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_OSTREAM\n-#define _CPP_OSTREAM\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/std_ios.h>\n-\n-namespace std\n-{\n-  // 27.6.2.1 Template class basic_ostream\n-  template<typename _CharT, typename _Traits>\n-    class basic_ostream : virtual public basic_ios<_CharT, _Traits>\n-    {\n-    public:\n-\n-      // Types (inherited from basic_ios (27.4.4)):\n-      typedef _CharT                     \t\tchar_type;\n-      typedef typename _Traits::int_type \t\tint_type;\n-      typedef typename _Traits::pos_type \t\tpos_type;\n-      typedef typename _Traits::off_type \t\toff_type;\n-      typedef _Traits                    \t\ttraits_type;\n-      \n-      // Non-standard Types:\n-      typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n-      typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n-      typedef basic_ostream<_CharT, _Traits>\t\t__ostream_type;\n-      typedef ostreambuf_iterator<_CharT, _Traits>\t__ostreambuf_iter;\n-      typedef num_put<_CharT, __ostreambuf_iter>        __numput_type;\n-      typedef ctype<_CharT>           \t\t\t__ctype_type;\n-\n-      // 27.6.2.2 Constructor/destructor:\n-      explicit \n-      basic_ostream(__streambuf_type* __sb)\n-      { this->init(__sb); }\n-\n-      virtual \n-      ~basic_ostream() { }\n-\n-      // 27.6.2.3 Prefix/suffix:\n-      class sentry;\n-      friend class sentry;\n-      \n-      // 27.6.2.5 Formatted output:\n-      // 27.6.2.5.3  basic_ostream::operator<<\n-      __ostream_type&\n-      operator<<(__ostream_type& (*__pf)(__ostream_type&));\n-      \n-      __ostream_type&\n-      operator<<(__ios_type& (*__pf)(__ios_type&));\n-      \n-      __ostream_type&\n-      operator<<(ios_base& (*__pf) (ios_base&));\n-\n-      // 27.6.2.5.2 Arithmetic Inserters\n-      __ostream_type& \n-      operator<<(long __n);\n-      \n-      __ostream_type& \n-      operator<<(unsigned long __n);\n-\n-      __ostream_type& \n-      operator<<(bool __n);\n-\n-      __ostream_type& \n-      operator<<(short __n)\n-      { \n-\tios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\tif (__fmt & ios_base::oct || __fmt & ios_base::hex)\n-\t  return this->operator<<(static_cast<unsigned long>\n-\t\t\t\t  (static_cast<unsigned short>(__n)));\n-\telse\n-\t  return this->operator<<(static_cast<long>(__n));\n-      }\n-\n-      __ostream_type& \n-      operator<<(unsigned short __n)\n-      { return this->operator<<(static_cast<unsigned long>(__n)); }\n-\n-      __ostream_type& \n-      operator<<(int __n)\n-      { \n-\tios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n-\tif (__fmt & ios_base::oct || __fmt & ios_base::hex)\n-\t  return this->operator<<(static_cast<unsigned long>\n-\t\t\t\t  (static_cast<unsigned int>(__n)));\n-\telse\n-\t  return this->operator<<(static_cast<long>(__n));\n-      }\n-\n-      __ostream_type& \n-      operator<<(unsigned int __n)\n-      { return this->operator<<(static_cast<unsigned long>(__n)); }\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-      __ostream_type& \n-      operator<<(long long __n);\n-\n-      __ostream_type& \n-      operator<<(unsigned long long __n);\n-#endif\n-\n-      __ostream_type& \n-      operator<<(double __f);\n-\n-      __ostream_type& \n-      operator<<(float __f)\n-      { return this->operator<<(static_cast<double>(__f)); }\n-\n-      __ostream_type& \n-      operator<<(long double __f);\n-\n-      __ostream_type& \n-      operator<<(const void* __p);\n-\n-      __ostream_type& \n-      operator<<(__streambuf_type* __sb);\n-\n-      // Unformatted output:\n-      __ostream_type& \n-      put(char_type __c);\n-\n-      __ostream_type& \n-      write(const char_type* __s, streamsize __n);\n-\n-      __ostream_type& \n-      flush();\n-\n-      // Seeks:\n-      pos_type \n-      tellp();\n-\n-      __ostream_type& \n-      seekp(pos_type);\n-\n-      __ostream_type& \n-      seekp(off_type, ios_base::seekdir);\n-\n-    private:\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-      // Not defined.  (Side effect of DR 50.)\n-      __ostream_type& \n-      operator=(const __ostream_type&);\n-\n-      basic_ostream(const __ostream_type&);\n-#endif\n-    };\n-\n-  // 27.6.2.3  Class basic_ostream::sentry\n-  template <typename _CharT, typename _Traits>\n-    class basic_ostream<_CharT, _Traits>::sentry\n-    {\n-      // Data Members:\n-      bool \t\t\t\t_M_ok;\n-      basic_ostream<_CharT,_Traits>& \t_M_os;\n-      \n-    public:\n-      explicit\n-      sentry(basic_ostream<_CharT,_Traits>& __os);\n-\n-      ~sentry()\n-      {\n-\t// XXX MT\n-\tif (_M_os.flags() & ios_base::unitbuf && !uncaught_exception())\n-\t  {\n-\t    // Can't call flush directly or else will get into recursive lock.\n-\t    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)\n-\t      _M_os.setstate(ios_base::badbit);\n-\t  }\n-      }\n-\n-      operator bool() \n-      { return _M_ok; }\n-    };\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c);\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)\n-    { return (__out << __out.widen(__c)); }\n-\n-  // Specialization\n-  template <class _Traits> \n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, char __c);\n-\n-  // Signed and unsigned\n-  template<class _Traits>\n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)\n-    { return (__out << static_cast<char>(__c)); }\n-  \n-  template<class _Traits>\n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)\n-    { return (__out << static_cast<char>(__c)); }\n-  \n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s);\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits> &\n-    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);\n-\n-  // Partial specializationss\n-  template<class _Traits>\n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, const char* __s);\n- \n-  // Signed and unsigned\n-  template<class _Traits>\n-    basic_ostream<char, _Traits>&\n-    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)\n-    { return (__out << reinterpret_cast<const char*>(__s)); }\n-\n-  template<class _Traits>\n-    basic_ostream<char, _Traits> &\n-    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)\n-    { return (__out << reinterpret_cast<const char*>(__s)); }\n-\n-  // 27.6.2.7 Standard basic_ostream manipulators\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n-    endl(basic_ostream<_CharT, _Traits>& __os)\n-    { return flush(__os.put(__os.widen('\\n'))); }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n-    ends(basic_ostream<_CharT, _Traits>& __os)\n-    { return __os.put(_CharT()); }\n-  \n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n-    flush(basic_ostream<_CharT, _Traits>& __os)\n-    { return __os.flush(); }\n-\n-} // namespace std\n-\n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n-# define export\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n-# include <bits/ostream.tcc>\n-#endif\n-#endif\n-\n-#endif\t/* _CPP_OSTREAM */\n-"}, {"sha": "ecf7f4c135d9e54df1ef9dabc0746b8594ab660f", "filename": "libstdc++-v3/include/bits/std_queue.h", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,81 +0,0 @@\n-// <queue> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_queue.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_QUEUE\n-#define _CPP_QUEUE 1\n-\n-#pragma GCC system_header\n-#include <bits/c++config.h>\n-#include <bits/functexcept.h>\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_vector.h>\n-#include <bits/stl_heap.h>\n-#include <bits/stl_deque.h>\n-#include <bits/stl_function.h>\n-#include <bits/stl_queue.h>\n-\n-#endif /* _CPP_QUEUE */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "dab8e71af5b760e4ded94308bdcf0171d6c1e399", "filename": "libstdc++-v3/include/bits/std_set.h", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,74 +0,0 @@\n-// <set> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_set.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_SET\n-#define _CPP_SET 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/stl_tree.h>\n-#include <bits/stl_set.h>\n-#include <bits/stl_multiset.h>\n-\n-#endif /* _CPP_SET */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "d36070a8abe7fed70d35c0f82644607039e9b343", "filename": "libstdc++-v3/include/bits/std_sstream.h", "status": "removed", "additions": 0, "deletions": 372, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,372 +0,0 @@\n-// String based streams -*- C++ -*-\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.7  String-based streams\n-//\n-\n-/** @file std_sstream.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_SSTREAM\n-#define _CPP_SSTREAM\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-\n-namespace std\n-{\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n-      typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard Types:\n-      typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n-      typedef basic_string<char_type, _Traits, _Alloc> \t__string_type;\n-      typedef typename __string_type::size_type\t\t__size_type;\n-\n-    private:\n-      // Data Members:\n-      __string_type \t\t_M_string;\n-      \n-    public:\n-      // Constructors:\n-      explicit \n-      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_string()\n-      { _M_stringbuf_init(__mode); }\n-\n-      explicit \n-      basic_stringbuf(const __string_type& __str,\n-\t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      : __streambuf_type(), _M_string(__str.data(), __str.size())\n-      { _M_stringbuf_init(__mode); }\n-\n-      // Get and set:\n-      __string_type \n-      str() const \n-      {\n-\tif (_M_mode & ios_base::out)\n-\t  {\n-\t    // This is the deal: _M_string.size() is a value that\n-\t    // represents the size of the initial string that makes\n-\t    // _M_string, and may not be the correct size of the\n-\t    // current stringbuf internal buffer.\n-\t    __size_type __len = _M_string.size();\n-\t    if (_M_out_cur > _M_out_beg)\n-\t      __len = max(__size_type(_M_out_end - _M_out_beg), __len);\n-\t    return __string_type(_M_out_beg, _M_out_beg + __len);\n-\t  }\n-\telse\n-\t  return _M_string;\n-      }\n-\n-      void \n-      str(const __string_type& __s)\n-      {\n-\t_M_string = __s;\n-\t_M_stringbuf_init(_M_mode);\n-      }\n-\n-    protected:\n-      // Common initialization code for both ctors goes here.\n-      void\n-      _M_stringbuf_init(ios_base::openmode __mode)\n-      {\n-\t// _M_buf_size is a convenient alias for \"what the streambuf\n-\t// thinks the allocated size of the string really is.\" This is\n-\t// necessary as ostringstreams are implemented with the\n-\t// streambufs having control of the allocation and\n-\t// re-allocation of the internal string object, _M_string.\n-\t_M_buf_size = _M_string.size();\n-\n-\t// NB: Start ostringstream buffers at 512 bytes. This is an\n-\t// experimental value (pronounced \"arbitrary\" in some of the\n-\t// hipper english-speaking countries), and can be changed to\n-\t// suite particular needs.\n-\t_M_buf_size_opt = 512;\n-\t_M_mode = __mode;\n-\tif (_M_mode & ios_base::ate)\n-\t  _M_really_sync(0, _M_buf_size); \n-\telse  \n-\t  _M_really_sync(0, 0);\n-      }\n-\n-      // Overridden virtual functions:\n-      virtual int_type \n-      underflow()\n-      {\n-\tif (_M_in_cur && _M_in_cur < _M_in_end)\n-\t  return traits_type::to_int_type(*gptr());\n-\telse\n-\t  return traits_type::eof();\n-      }\n-\n-      virtual int_type \n-      pbackfail(int_type __c = traits_type::eof());\n-\n-      virtual int_type \n-      overflow(int_type __c = traits_type::eof());\n-\n-      virtual __streambuf_type* \n-      setbuf(char_type* __s, streamsize __n)\n-      { \n-\tif (__s && __n) \n-\t  {\n-\t    _M_string = __string_type(__s, __n);\n-\t    _M_really_sync(0, 0);\n-\t  }\n-\treturn this; \n-      } \n-\n-      virtual pos_type \n-      seekoff(off_type __off, ios_base::seekdir __way,\n-\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n-\n-      virtual pos_type \n-      seekpos(pos_type __sp, \n-\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n-\n-      // Internal function for correctly updating the internal buffer\n-      // for a particular _M_string, due to initialization or\n-      // re-sizing of an existing _M_string.\n-      // Assumes: contents of _M_string and internal buffer match exactly.\n-      // __i == _M_in_cur - _M_in_beg      \n-      // __o == _M_out_cur - _M_out_beg\n-      virtual int \n-      _M_really_sync(__size_type __i, __size_type __o)\n-      {\n-\tchar_type* __base = const_cast<char_type*>(_M_string.data());\n-\tbool __testin = _M_mode & ios_base::in;\n-\tbool __testout = _M_mode & ios_base::out;\n-\t__size_type __len = _M_string.size();\n-\n-\t_M_buf = __base;\n-\tif (__testin)\n-\t    this->setg(__base, __base + __i, __base + __len);\n-\tif (__testout)\n-\t  {\n-\t    this->setp(__base, __base + __len);\n-\t    _M_out_cur += __o;\n-\t  }\n-\treturn 0;\n-      }\n-    };\n-\n-\n-  // 27.7.2  Template class basic_istringstream\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    class basic_istringstream : public basic_istream<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n-      typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard types:\n-      typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n-      typedef basic_stringbuf<_CharT, _Traits, _Alloc> \t__stringbuf_type;\n-      typedef basic_istream<char_type, traits_type>\t__istream_type;\n-\n-    private:\n-      __stringbuf_type\t_M_stringbuf;\n-\n-    public:\n-      // Constructors:\n-      explicit \n-      basic_istringstream(ios_base::openmode __mode = ios_base::in)\n-      : __istream_type(NULL), _M_stringbuf(__mode | ios_base::in)\n-      { this->init(&_M_stringbuf); }\n-\n-      explicit \n-      basic_istringstream(const __string_type& __str,\n-\t\t\t  ios_base::openmode __mode = ios_base::in)\n-      : __istream_type(NULL), _M_stringbuf(__str, __mode | ios_base::in)\n-      { this->init(&_M_stringbuf); }\n-\n-      ~basic_istringstream()\n-      { }\n-\n-      // Members:\n-      __stringbuf_type* \n-      rdbuf() const\n-      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n-\n-      __string_type\n-      str() const\n-      { return _M_stringbuf.str(); }\n-  \n-      void \n-      str(const __string_type& __s)\n-      { _M_stringbuf.str(__s); }\n-    };\n-\n-\n-  // 27.7.3  Template class basic_ostringstream\n-  template <typename _CharT, typename _Traits, typename _Alloc>\n-    class basic_ostringstream : public basic_ostream<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n-      typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard types:\n-      typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n-      typedef basic_stringbuf<_CharT, _Traits, _Alloc> \t__stringbuf_type;\n-      typedef basic_ostream<char_type, traits_type>\t__ostream_type;\n-\n-    private:\n-      __stringbuf_type\t_M_stringbuf;\n-\n-    public:\n-     // Constructors/destructor:\n-      explicit \n-      basic_ostringstream(ios_base::openmode __mode = ios_base::out)\n-      : __ostream_type(NULL), _M_stringbuf(__mode | ios_base::out)\n-      { this->init(&_M_stringbuf); }\n-\n-      explicit \n-      basic_ostringstream(const __string_type& __str,\n-\t\t\t  ios_base::openmode __mode = ios_base::out)\n-      : __ostream_type(NULL), _M_stringbuf(__str, __mode | ios_base::out)\n-      { this->init(&_M_stringbuf); }\n-\n-      ~basic_ostringstream()\n-      { }\n-\n-      // Members:\n-      __stringbuf_type* \n-      rdbuf() const\n-      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n-\n-      __string_type\n-      str() const\n-      { return _M_stringbuf.str(); }\n- \n-      void \n-      str(const __string_type& __s)\n-      { _M_stringbuf.str(__s); }\n-    };\n-  \n-  \n-  // 27.7.4  Template class basic_stringstream\n-  template <typename _CharT, typename _Traits, typename _Alloc>\n-    class basic_stringstream : public basic_iostream<_CharT, _Traits>\n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n-      typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard Types:\n-      typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n-      typedef basic_stringbuf<_CharT, _Traits, _Alloc> \t__stringbuf_type;\n-      typedef basic_iostream<char_type, traits_type>\t__iostream_type;\n-\n-    private:\n-      __stringbuf_type\t_M_stringbuf;\n-\n-    public:\n-      // Constructors/destructors\n-      explicit \n-      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)\n-      : __iostream_type(NULL), _M_stringbuf(__m)\n-      { this->init(&_M_stringbuf); }\n-\n-      explicit \n-      basic_stringstream(const __string_type& __str,\n-\t\t\t ios_base::openmode __m = ios_base::out | ios_base::in)\n-      : __iostream_type(NULL), _M_stringbuf(__str, __m)\n-      { this->init(&_M_stringbuf); }\n-\n-      ~basic_stringstream()\n-      { }\n-\n-      // Members:\n-      __stringbuf_type* \n-      rdbuf() const\n-      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n-\n-      __string_type\n-      str() const\n-      { return _M_stringbuf.str(); }\n-\n-      void \n-      str(const __string_type& __s)\n-      { _M_stringbuf.str(__s); }\n-    };\n-} // namespace std\n-\n-\n-\n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n-# define export\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n-# include <bits/sstream.tcc>\n-#endif\n-#endif\n-\n-#endif\t// _CPP_SSTREAM"}, {"sha": "166f428bf85566313dbef8e27d8151ff5ccfea44", "filename": "libstdc++-v3/include/bits/std_stack.h", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stack.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,77 +0,0 @@\n-// <stack> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_stack.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_STACK\n-#define _CPP_STACK 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_deque.h>\n-#include <bits/stl_stack.h>\n-\n-#endif /* _CPP_STACK */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "66bac5011be1da336b4616ec69e746efd0e3229f", "filename": "libstdc++-v3/include/bits/std_stdexcept.h", "status": "removed", "additions": 0, "deletions": 150, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,150 +0,0 @@\n-// Standard exception classes  -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 19.1  Exception classes\n-//\n-\n-/** @file std_stdexcept.h\n- *  The Standard C++ library provides classes to be used to report certain\n- *  errors (17.4.4.8) in C++ programs.  In the error model reflected in these\n- *  classes, errors are divided into two broad categories: logic errors and\n- *  runtime errors.\n- */\n-\n-#ifndef _CPP_STDEXCEPT\n-#define _CPP_STDEXCEPT \t  1\n-\n-#pragma GCC system_header\n-\n-#include <exception>\n-#include <string>\n-\n-namespace std \n-{\n-  /** Logic errors represent problems in the internal logic of a program;\n-   *  in theory, these are preventable, and even detectable before the\n-   *  program runs (e.g., violations of class invariants).\n-   *  @brief One of two subclasses of exception.\n-   */\n-  class logic_error : public exception \n-  {\n-    string _M_msg;\n-\n-  public:\n-    /** Takes a character string describing the error.  */\n-    explicit \n-    logic_error(const string&  __arg);\n-\n-    virtual \n-    ~logic_error() throw();\n-\n-    /** Returns a C-style character string describing the general cause of\n-     *  the current error (the same string passed to the ctor).  */\n-    virtual const char* \n-    what() const throw();\n-  };\n-\n-  /** Thrown by the library, or by you, to report domain errors (domain in\n-   *  the mathmatical sense).  */\n-  class domain_error : public logic_error \n-  {\n-  public:\n-    explicit domain_error(const string&  __arg);\n-  };\n-\n-  /** Thrown to report invalid arguments to functions.  */\n-  class invalid_argument : public logic_error \n-  {\n-  public:\n-    explicit invalid_argument(const string&  __arg);\n-  };\n-\n-  /** Thrown when an object is constructed that would exceed its maximum\n-   *  permitted size (e.g., a basic_string instance).  */\n-  class length_error : public logic_error \n-  {\n-  public:\n-    explicit length_error(const string&  __arg);\n-  };\n-\n-  /** This represents an argument whose value is not within the expected\n-   *  range (e.g., boundary checks in basic_string).  */\n-  class out_of_range : public logic_error \n-  {\n-  public:\n-    explicit out_of_range(const string&  __arg);\n-  };\n-\n-  /** Runtime errors represent problems outside the scope of a program;\n-   *  they cannot be easily predicted and can generally only be caught as\n-   *  the program executes.\n-   *  @brief One of two subclasses of exception.\n-   */\n-  class runtime_error : public exception \n-  {\n-    string _M_msg;\n-\n-  public:\n-    /** Takes a character string describing the error.  */\n-    explicit \n-    runtime_error(const string&  __arg);\n-\n-    virtual \n-    ~runtime_error() throw();\n-\n-    /** Returns a C-style character string describing the general cause of\n-     *  the current error (the same string passed to the ctor).  */\n-    virtual const char* \n-    what() const throw();\n-  };\n-\n-  /** Thrown to indicate range errors in internal computations.  */\n-  class range_error : public runtime_error \n-  {\n-  public:\n-    explicit range_error(const string&  __arg);\n-  };\n-\n-  /** Thrown to indicate arithmetic overflow.  */\n-  class overflow_error : public runtime_error \n-  {\n-  public:\n-    explicit overflow_error(const string&  __arg);\n-  };\n-\n-  /** Thrown to indicate arithmetic underflow.  */\n-  class underflow_error : public runtime_error \n-  {\n-  public:\n-    explicit underflow_error(const string&  __arg);\n-  };\n-} // namespace std\n-\n-#endif // _CPP_STDEXCEPT"}, {"sha": "8ef20ff4cfb4f1948ecd0c50ead10bbfe47017cc", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "removed", "additions": 0, "deletions": 540, "changes": 540, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,540 +0,0 @@\n-// Stream buffer classes -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.5  Stream buffers\n-//\n-\n-/** @file std_streambuf.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_STREAMBUF\n-#define _CPP_STREAMBUF\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/std_iosfwd.h>\n-#include <bits/std_cstdio.h> \t// For SEEK_SET, SEEK_CUR, SEEK_END\n-#include <bits/localefwd.h>\n-#include <bits/ios_base.h>\n-\n-namespace std\n-{\n-  template<typename _CharT, typename _Traits>\n-    streamsize\n-    __copy_streambufs(basic_ios<_CharT, _Traits>& _ios,\n-\t\t      basic_streambuf<_CharT, _Traits>* __sbin,\n-\t\t      basic_streambuf<_CharT, _Traits>* __sbout);\n-  \n-  // 27.5.2 Template class basic_streambuf<_CharT, _Traits>\n-  template<typename _CharT, typename _Traits>\n-    class basic_streambuf \n-    {\n-    public:\n-      // Types:\n-      typedef _CharT \t\t\t\t\tchar_type;\n-      typedef _Traits \t\t\t\t\ttraits_type;\n-      typedef typename traits_type::int_type \t\tint_type;\n-      typedef typename traits_type::pos_type \t\tpos_type;\n-      typedef typename traits_type::off_type \t\toff_type;\n-\n-      // Non-standard Types:\n-      typedef ctype<char_type>           \t\t__ctype_type;\n-      typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n-      \n-      friend class basic_ios<char_type, traits_type>;\n-      friend class basic_istream<char_type, traits_type>;\n-      friend class basic_ostream<char_type, traits_type>;\n-      friend class istreambuf_iterator<char_type, traits_type>;\n-      friend class ostreambuf_iterator<char_type, traits_type>;\n-\n-      friend streamsize\n-      __copy_streambufs<>(basic_ios<char_type, traits_type>& __ios,\n-\t\t\t  __streambuf_type* __sbin,__streambuf_type* __sbout);\n-      \n-    protected:\n-\n-      // Pointer to the beginning of internally-allocated\n-      // space. Filebuf manually allocates/deallocates this, whereas\n-      // stringstreams attempt to use the built-in intelligence of the\n-      // string class. If you are managing memory, set this. If not,\n-      // leave it NULL.\n-      char_type*\t\t_M_buf; \t\n-\n-      // Actual size of allocated internal buffer, in bytes.\n-      int_type\t\t\t_M_buf_size;\n-\n-      // Optimal or preferred size of internal buffer, in bytes.\n-      int_type\t\t\t_M_buf_size_opt;\n-\n-      // True iff _M_in_* and _M_out_* buffers should always point to\n-      // the same place.  True for fstreams, false for sstreams.\n-      bool \t\t\t_M_buf_unified;\t\n-\n-      // This is based on _IO_FILE, just reordered to be more\n-      // consistent, and is intended to be the most minimal abstraction\n-      // for an internal buffer.\n-      // get == input == read\n-      // put == output == write\n-      char_type* \t\t_M_in_beg;  \t// Start of get area. \n-      char_type* \t\t_M_in_cur;\t// Current read area. \n-      char_type* \t\t_M_in_end;\t// End of get area. \n-      char_type* \t\t_M_out_beg; \t// Start of put area. \n-      char_type* \t\t_M_out_cur;  \t// Current put area. \n-      char_type* \t\t_M_out_end;  \t// End of put area. \n-\n-      // Place to stash in || out || in | out settings for current streambuf.\n-      ios_base::openmode \t_M_mode;\t\n-\n-      // Current locale setting.\n-      locale \t\t\t_M_buf_locale;\t\n-\n-      // True iff locale is initialized.\n-      bool \t\t\t_M_buf_locale_init;\n-\n-      // Necessary bits for putback buffer management. Only used in\n-      // the basic_filebuf class, as necessary for the standard\n-      // requirements. The only basic_streambuf member function that\n-      // needs access to these data members is in_avail...\n-      // NB: pbacks of over one character are not currently supported.\n-      int_type    \t\t_M_pback_size; \n-      char_type*\t\t_M_pback; \n-      char_type*\t\t_M_pback_cur_save;\n-      char_type*\t\t_M_pback_end_save;\n-      bool\t\t\t_M_pback_init; \n-\n-      // Initializes pback buffers, and moves normal buffers to safety.\n-      // Assumptions:\n-      // _M_in_cur has already been moved back\n-      void\n-      _M_pback_create()\n-      {\n-\tif (!_M_pback_init)\n-\t  {\n-\t    int_type __dist = _M_in_end - _M_in_cur;\n-\t    int_type __len = min(_M_pback_size, __dist);\n-\t    traits_type::copy(_M_pback, _M_in_cur, __len);\n-\t    _M_pback_cur_save = _M_in_cur;\n-\t    _M_pback_end_save = _M_in_end;\n-\t    this->setg(_M_pback, _M_pback, _M_pback + __len);\n-\t    _M_pback_init = true;\n-\t  }\n-      }\n-\n-      // Deactivates pback buffer contents, and restores normal buffer.\n-      // Assumptions:\n-      // The pback buffer has only moved forward.\n-      void\n-      _M_pback_destroy()\n-      {\n-\tif (_M_pback_init)\n-\t  {\n-\t    // Length _M_in_cur moved in the pback buffer.\n-\t    int_type __off_cur = _M_in_cur - _M_pback;\n-\t    \n-\t    // For in | out buffers, the end can be pushed back...\n-\t    int_type __off_end = 0;\n-\t    int_type __pback_len = _M_in_end - _M_pback;\n-\t    int_type __save_len = _M_pback_end_save - _M_buf;\n-\t    if (__pback_len > __save_len)\n-\t      __off_end = __pback_len - __save_len;\n-\n-\t    this->setg(_M_buf, _M_pback_cur_save + __off_cur, \n-\t\t       _M_pback_end_save + __off_end);\n-\t    _M_pback_cur_save = NULL;\n-\t    _M_pback_end_save = NULL;\n-\t    _M_pback_init = false;\n-\t  }\n-      }\n-\n-      // Correctly sets the _M_in_cur pointer, and bumps the\n-      // _M_out_cur pointer as well if necessary.\n-      void \n-      _M_in_cur_move(off_type __n) // argument needs to be +-\n-      {\n-\tbool __testout = _M_out_cur;\n-\t_M_in_cur += __n;\n-\tif (__testout && _M_buf_unified)\n-\t  _M_out_cur += __n;\n-      }\n-\n-      // Correctly sets the _M_out_cur pointer, and bumps the\n-      // appropriate _M_*_end pointers as well. Necessary for the\n-      // un-tied stringbufs, in in|out mode.\n-      // Invariant:\n-      // __n + _M_out_[cur, end] <= _M_buf + _M_buf_size\n-      // Assuming all _M_*_[beg, cur, end] pointers are operating on\n-      // the same range:\n-      // _M_buf <= _M_*_ <= _M_buf + _M_buf_size\n-      void \n-      _M_out_cur_move(off_type __n) // argument needs to be +-\n-      {\n-\tbool __testin = _M_in_cur;\n-\n-\t_M_out_cur += __n;\n-\tif (__testin && _M_buf_unified)\n-\t  _M_in_cur += __n;\n-\tif (_M_out_cur > _M_out_end)\n-\t  {\n-\t    _M_out_end = _M_out_cur;\n-\t    // NB: in | out buffers drag the _M_in_end pointer along...\n-\t    if (__testin)\n-\t      _M_in_end += __n;\n-\t  }\n-      }\n-\n-      // Return the size of the output buffer.  This depends on the\n-      // buffer in use: allocated buffers have a stored size in\n-      // _M_buf_size and setbuf() buffers don't.\n-      off_type\n-      _M_out_buf_size()\n-      {\n-\toff_type __ret = 0;\n-\tif (_M_out_cur)\n-\t  {\n-\t    // Using allocated buffer.\n-\t    if (_M_out_beg == _M_buf)\n-\t      __ret = _M_out_beg + _M_buf_size - _M_out_cur;\n-\t    // Using non-allocated buffer.\n-\t    else\n-\t      __ret = _M_out_end - _M_out_cur;\n-\t  }\n-\treturn __ret;\n-      }\n-\n-      // These three functions are used to clarify internal buffer\n-      // maintenance. After an overflow, or after a seekoff call that\n-      // started at beg or end, or possibly when the stream becomes\n-      // unbuffered, and a myrid other obscure corner cases, the\n-      // internal buffer does not truly reflect the contents of the\n-      // external buffer. At this point, for whatever reason, it is in\n-      // an indeterminate state.\n-      void\n-      _M_set_indeterminate(void)\n-      {\n-\tif (_M_mode & ios_base::in)\n-\t  this->setg(_M_buf, _M_buf, _M_buf);\n-\tif (_M_mode & ios_base::out)\n-\t  this->setp(_M_buf, _M_buf);\n-      }\n-\n-      void\n-      _M_set_determinate(off_type __off)\n-      {\n-\tbool __testin = _M_mode & ios_base::in;\n-\tbool __testout = _M_mode & ios_base::out;\n-\tif (__testin)\n-\t  this->setg(_M_buf, _M_buf, _M_buf + __off);\n-\tif (__testout)\n-\t  this->setp(_M_buf, _M_buf + __off);\n-      }\n-\n-      bool\n-      _M_is_indeterminate(void)\n-      { \n-\tbool __ret = false;\n-\t// Don't return true if unbuffered.\n-\tif (_M_buf)\n-\t  {\n-\t    if (_M_mode & ios_base::in)\n-\t      __ret = _M_in_beg == _M_in_cur && _M_in_cur == _M_in_end;\n-\t    if (_M_mode & ios_base::out)\n-\t      __ret = _M_out_beg == _M_out_cur && _M_out_cur == _M_out_end;\n-\t  }\n-\treturn __ret;\n-      }\n-\n-  public:\n-      virtual \n-      ~basic_streambuf() \n-      {\n-\t_M_buf_unified = false;\n-\t_M_buf_size = 0;\n-\t_M_buf_size_opt = 0;\n-\t_M_mode = ios_base::openmode(0);\n-\t_M_buf_locale_init = false;\n-      }\n-\n-      // Locales:\n-      locale \n-      pubimbue(const locale &__loc)\n-      {\n-\tlocale __tmp(this->getloc());\n-\tthis->imbue(__loc);\n-\treturn __tmp;\n-      }\n-\n-      locale   \n-      getloc() const\n-      {\n-\tif (_M_buf_locale_init)\n-\t  return _M_buf_locale; \n-\telse \n-\t  return locale();\n-      } \n-\n-      // Buffer and positioning:\n-      __streambuf_type* \n-      pubsetbuf(char_type* __s, streamsize __n) \n-      { return this->setbuf(__s, __n); }\n-\n-      pos_type \n-      pubseekoff(off_type __off, ios_base::seekdir __way, \n-\t\t ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      { return this->seekoff(__off, __way, __mode); }\n-\n-      pos_type \n-      pubseekpos(pos_type __sp,\n-\t\t ios_base::openmode __mode = ios_base::in | ios_base::out)\n-      { return this->seekpos(__sp, __mode); }\n-\n-      int \n-      pubsync() { return this->sync(); }\n-\n-      // Get and put areas:\n-      // Get area:\n-      streamsize \n-      in_avail() \n-      { \n-\tstreamsize __ret;\n-\tif (_M_in_cur && _M_in_cur < _M_in_end)\n-\t  {\n-\t    if (_M_pback_init)\n-\t      {\n-\t\tint_type __save_len =  _M_pback_end_save - _M_pback_cur_save;\n-\t\tint_type __pback_len = _M_in_cur - _M_pback;\n-\t\t__ret = __save_len - __pback_len;\n-\t      }\n-\t    else\n-\t      __ret = this->egptr() - this->gptr();\n-\t  }\n-\telse\n-\t  __ret = this->showmanyc();\n-\treturn __ret;\n-      }\n-\n-      int_type \n-      snextc()\n-      {\n-\tint_type __eof = traits_type::eof();\n-\treturn (this->sbumpc() == __eof ? __eof : this->sgetc()); \n-      }\n-\n-      int_type \n-      sbumpc();\n-\n-      int_type \n-      sgetc()\n-      {\n-\tint_type __ret;\n-\tif (_M_in_cur && _M_in_cur < _M_in_end)\n-\t  __ret = traits_type::to_int_type(*(this->gptr()));\n-\telse \n-\t  __ret = this->underflow();\n-\treturn __ret;\n-      }\n-\n-      streamsize \n-      sgetn(char_type* __s, streamsize __n)\n-      { return this->xsgetn(__s, __n); }\n-\n-      // Putback:\n-      int_type \n-      sputbackc(char_type __c);\n-\n-      int_type \n-      sungetc();\n-\n-      // Put area:\n-      int_type \n-      sputc(char_type __c);\n-\n-      streamsize \n-      sputn(const char_type* __s, streamsize __n)\n-      { return this->xsputn(__s, __n); }\n-\n-    protected:\n-      basic_streambuf()\n-      : _M_buf(NULL), _M_buf_size(0), \n-      _M_buf_size_opt(static_cast<int_type>(BUFSIZ)), _M_buf_unified(false), \n-      _M_in_beg(0), _M_in_cur(0), _M_in_end(0), _M_out_beg(0), _M_out_cur(0), \n-      _M_out_end(0), _M_mode(ios_base::openmode(0)), _M_buf_locale(locale()), \n-      _M_buf_locale_init(false), _M_pback_size(1), _M_pback(NULL), \n-      _M_pback_cur_save(NULL), _M_pback_end_save(NULL), _M_pback_init(false)\n-      { }\n-\n-      // Get area:\n-      char_type* \n-      eback() const { return _M_in_beg; }\n-\n-      char_type* \n-      gptr()  const { return _M_in_cur;  }\n-\n-      char_type* \n-      egptr() const { return _M_in_end; }\n-\n-      void \n-      gbump(int __n) { _M_in_cur += __n; }\n-\n-      void \n-      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)\n-      {\n-\t_M_in_beg = __gbeg;\n-\t_M_in_cur = __gnext;\n-\t_M_in_end = __gend;\n-\tif (!(_M_mode & ios_base::in) && __gbeg && __gnext && __gend)\n-\t  _M_mode = _M_mode | ios_base::in;\n-      }\n-\n-      // Put area:\n-      char_type* \n-      pbase() const { return _M_out_beg; }\n-\n-      char_type* \n-      pptr() const { return _M_out_cur; }\n-\n-      char_type* \n-      epptr() const { return _M_out_end; }\n-\n-      void \n-      pbump(int __n) { _M_out_cur += __n; }\n-\n-      void \n-      setp(char_type* __pbeg, char_type* __pend)\n-      { \n-\t_M_out_beg = _M_out_cur = __pbeg; \n-\t_M_out_end = __pend; \n-\tif (!(_M_mode & ios_base::out) && __pbeg && __pend)\n-\t  _M_mode = _M_mode | ios_base::out;\n-      }\n-\n-      // Virtual functions:\n-      // Locales:\n-      virtual void \n-      imbue(const locale& __loc) \n-      { \n-\t_M_buf_locale_init = true;\n-\tif (_M_buf_locale != __loc)\n-\t  _M_buf_locale = __loc;\n-      }\n-\n-      // Buffer management and positioning:\n-      virtual basic_streambuf<char_type,_Traits>* \n-      setbuf(char_type*, streamsize)\n-      {\treturn this; }\n-      \n-      virtual pos_type \n-      seekoff(off_type, ios_base::seekdir,\n-\t      ios_base::openmode /*__mode*/ = ios_base::in | ios_base::out)\n-      { return pos_type(off_type(-1)); } \n-\n-      virtual pos_type \n-      seekpos(pos_type, \n-\t      ios_base::openmode /*__mode*/ = ios_base::in | ios_base::out)\n-      { return pos_type(off_type(-1)); } \n-\n-      virtual int \n-      sync() { return 0; }\n-\n-      // Get area:\n-      virtual streamsize \n-      showmanyc() { return 0; }\n-\n-      virtual streamsize \n-      xsgetn(char_type* __s, streamsize __n);\n-\n-      virtual int_type \n-      underflow()\n-      { return traits_type::eof(); }\n-\n-      virtual int_type \n-      uflow() \n-      {\n-\tint_type __ret = traits_type::eof();\n-\tbool __testeof = this->underflow() == __ret;\n-\tbool __testpending = _M_in_cur && _M_in_cur < _M_in_end;\n-\tif (!__testeof && __testpending)\n-\t  {\n-\t    __ret = traits_type::to_int_type(*_M_in_cur);\n-\t    ++_M_in_cur;\n-\t    if (_M_buf_unified && _M_mode & ios_base::out)\n-\t      ++_M_out_cur;\n-\t  }\n-\treturn __ret;    \n-      }\n-\n-      // Putback:\n-      virtual int_type \n-      pbackfail(int_type /* __c */  = traits_type::eof())\n-      { return traits_type::eof(); }\n-\n-      // Put area:\n-      virtual streamsize \n-      xsputn(const char_type* __s, streamsize __n);\n-\n-      virtual int_type \n-      overflow(int_type /* __c */ = traits_type::eof())\n-      { return traits_type::eof(); }\n-\n-#ifdef _GLIBCPP_DEPRECATED\n-    public:\n-      void \n-      stossc() \n-      {\n-\tif (_M_in_cur < _M_in_end) \n-\t  ++_M_in_cur;\n-\telse \n-\t  this->uflow();\n-      }\n-#endif\n-\n-#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n-    // Side effect of DR 50.\n-    private:\n-      basic_streambuf(const __streambuf_type&);\n-\n-      __streambuf_type& \n-      operator=(const __streambuf_type&);\n-#endif\n-    };\n-\n-} // namespace std\n-\n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n-# define export\n-#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n-#include <bits/streambuf.tcc>\n-#endif\n-#endif\n-\n-#endif\t/* _CPP_STREAMBUF */\n-"}, {"sha": "d93fa202d237f20fb047997bd47d69f81a81f6d4", "filename": "libstdc++-v3/include/bits/std_string.h", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,60 +0,0 @@\n-// Components for manipulating sequences of characters -*- C++ -*-\n-\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 21  Strings library\n-//\n-\n-/** @file std_string.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_STRING\n-#define _CPP_STRING\t1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/stringfwd.h>\n-#include <bits/char_traits.h>\n-#include <bits/std_memory.h> \t// For allocator.\n-#include <bits/type_traits.h>\n-#include <bits/std_iosfwd.h> \t// For operators >>, <<, and getline decls.\n-#include <bits/stl_iterator.h>\n-#include <bits/stl_function.h>  // For less\n-#include <bits/basic_string.h>\n-\n-#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n-# include <bits/std_algorithm.h> // for find_if\n-# include <bits/basic_string.tcc> \n-#endif\n-\n-#endif /* _CPP_STRING */\n-"}, {"sha": "5917c833818159d07fcd640839a05389a54f0185", "filename": "libstdc++-v3/include/bits/std_utility.h", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,73 +0,0 @@\n-// <utility> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996,1997\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_utility.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_UTILITY\n-#define _CPP_UTILITY 1\n-\n-#pragma GCC system_header\n-#include <bits/c++config.h>\n-#include <bits/stl_relops.h>\n-#include <bits/stl_pair.h>\n-\n-#endif /* _CPP_UTILITY */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "5f4c112f8e989da5c90c70151594b5511833dce0", "filename": "libstdc++-v3/include/bits/std_valarray.h", "status": "removed", "additions": 0, "deletions": 742, "changes": 742, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,742 +0,0 @@\n-// The template and inlines for the -*- C++ -*- valarray class.\n-\n-// Copyright (C) 1997-1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n-\n-/** @file std_valarray.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_VALARRAY\n-#define _CPP_VALARRAY 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n-#include <bits/std_cmath.h>\n-#include <bits/std_cstdlib.h>\n-#include <bits/std_numeric.h>\n-#include <bits/std_functional.h>\n-#include <bits/std_algorithm.h>\n-\n-namespace std\n-{\n-    template<class _Clos, typename _Tp> class _Expr;\n-\n-    template<typename _Tp1, typename _Tp2> class _ValArray;    \n-\n-    template<template<class> class _Oper,\n-        template<class, class> class _Meta, class _Dom> struct _UnClos;\n-\n-    template<template<class> class _Oper,\n-        template<class, class> class _Meta1,\n-        template<class, class> class _Meta2,\n-        class _Dom1, class _Dom2> class _BinClos;\n-\n-    template<template<class, class> class _Meta, class _Dom> class _SClos;\n-\n-    template<template<class, class> class _Meta, class _Dom> class _GClos;\n-    \n-    template<template<class, class> class _Meta, class _Dom> class _IClos;\n-    \n-    template<template<class, class> class _Meta, class _Dom> class _ValFunClos;\n-\n-    template<template<class, class> class _Meta, class _Dom> class _RefFunClos;\n-\n-    template<class _Tp> struct _Unary_plus;\n-    template<class _Tp> struct _Bitwise_and;\n-    template<class _Tp> struct _Bitwise_or;\n-    template<class _Tp> struct _Bitwise_xor;  \n-    template<class _Tp> struct _Bitwise_not;\n-    template<class _Tp> struct _Shift_left;\n-    template<class _Tp> struct _Shift_right;\n-  \n-    template<class _Tp> class valarray;   // An array of type _Tp\n-    class slice;                          // BLAS-like slice out of an array\n-    template<class _Tp> class slice_array;\n-    class gslice;                         // generalized slice out of an array\n-    template<class _Tp> class gslice_array;\n-    template<class _Tp> class mask_array;     // masked array\n-    template<class _Tp> class indirect_array; // indirected array\n-\n-} // namespace std\n-\n-#include <bits/valarray_array.h>\n-#include <bits/valarray_meta.h>\n-  \n-namespace std\n-{\n-  template<class _Tp> class valarray\n-  {\n-  public:\n-      typedef _Tp value_type;\n-\n-      // _lib.valarray.cons_ construct/destroy:\n-      valarray();\n-      explicit valarray(size_t);\n-      valarray(const _Tp&, size_t);\n-      valarray(const _Tp* __restrict__, size_t);\n-      valarray(const valarray&);\n-      valarray(const slice_array<_Tp>&);\n-      valarray(const gslice_array<_Tp>&);\n-      valarray(const mask_array<_Tp>&);\n-      valarray(const indirect_array<_Tp>&);\n-      template<class _Dom>\n-      valarray(const _Expr<_Dom,_Tp>& __e);\n-     ~valarray();\n-\n-      // _lib.valarray.assign_ assignment:\n-      valarray<_Tp>& operator=(const valarray<_Tp>&);\n-      valarray<_Tp>& operator=(const _Tp&);\n-      valarray<_Tp>& operator=(const slice_array<_Tp>&);\n-      valarray<_Tp>& operator=(const gslice_array<_Tp>&);\n-      valarray<_Tp>& operator=(const mask_array<_Tp>&);\n-      valarray<_Tp>& operator=(const indirect_array<_Tp>&);\n-\n-      template<class _Dom> valarray<_Tp>&\n-      \toperator= (const _Expr<_Dom,_Tp>&);\n-\n-      // _lib.valarray.access_ element access:\n-      // XXX: LWG to be resolved.\n-      const _Tp&                 operator[](size_t) const;\n-      _Tp&                operator[](size_t);\t\t\n-      // _lib.valarray.sub_ subset operations:\n-      _Expr<_SClos<_ValArray,_Tp>, _Tp> operator[](slice) const;\n-      slice_array<_Tp>    operator[](slice);\n-      _Expr<_GClos<_ValArray,_Tp>, _Tp> operator[](const gslice&) const;\n-      gslice_array<_Tp>   operator[](const gslice&);\n-      valarray<_Tp>     \t operator[](const valarray<bool>&) const;\n-      mask_array<_Tp>     operator[](const valarray<bool>&);\n-      _Expr<_IClos<_ValArray, _Tp>, _Tp>\n-      \toperator[](const valarray<size_t>&) const;\n-      indirect_array<_Tp> operator[](const valarray<size_t>&);\n-\n-      // _lib.valarray.unary_ unary operators:\n-      _Expr<_UnClos<_Unary_plus,_ValArray,_Tp>,_Tp>  operator+ () const;\n-      _Expr<_UnClos<negate,_ValArray,_Tp>,_Tp> operator- () const;\n-      _Expr<_UnClos<_Bitwise_not,_ValArray,_Tp>,_Tp> operator~ () const;\n-      _Expr<_UnClos<logical_not,_ValArray,_Tp>,bool> operator! () const;\n-      \n-      // _lib.valarray.cassign_ computed assignment:\n-      valarray<_Tp>& operator*= (const _Tp&);\n-      valarray<_Tp>& operator/= (const _Tp&);\n-      valarray<_Tp>& operator%= (const _Tp&);\n-      valarray<_Tp>& operator+= (const _Tp&);\n-      valarray<_Tp>& operator-= (const _Tp&);\n-      valarray<_Tp>& operator^= (const _Tp&);\n-      valarray<_Tp>& operator&= (const _Tp&);\n-      valarray<_Tp>& operator|= (const _Tp&);\n-      valarray<_Tp>& operator<<=(const _Tp&);\n-      valarray<_Tp>& operator>>=(const _Tp&);\n-      valarray<_Tp>& operator*= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator/= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator%= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator+= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator-= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator^= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator|= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator&= (const valarray<_Tp>&);\n-      valarray<_Tp>& operator<<=(const valarray<_Tp>&);\n-      valarray<_Tp>& operator>>=(const valarray<_Tp>&);\n-\n-      template<class _Dom>\n-        valarray<_Tp>& operator*= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator/= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator%= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator+= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator-= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator^= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator|= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator&= (const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator<<=(const _Expr<_Dom,_Tp>&);\n-      template<class _Dom>\n-        valarray<_Tp>& operator>>=(const _Expr<_Dom,_Tp>&);\n-\n-      \n-      // _lib.valarray.members_ member functions:\n-      size_t size() const;\n-      _Tp    sum() const;\t\n-      _Tp    min() const;\t\n-      _Tp    max() const;\t\n-\n-//           // FIXME: Extension\n-//       _Tp    product () const;\n-\n-      valarray<_Tp> shift (int) const;\n-      valarray<_Tp> cshift(int) const;\n-      _Expr<_ValFunClos<_ValArray,_Tp>,_Tp> apply(_Tp func(_Tp)) const;\n-      _Expr<_RefFunClos<_ValArray,_Tp>,_Tp> apply(_Tp func(const _Tp&)) const;\n-      void resize(size_t __size, _Tp __c = _Tp());\n-\n-  private:\n-      size_t _M_size;\n-      _Tp* __restrict__ _M_data;\n-\n-      friend class _Array<_Tp>;\n-  };\n-\n-\n-  template<typename _Tp> struct _Unary_plus : unary_function<_Tp,_Tp> {\n-      _Tp operator() (const _Tp& __t) const { return __t; }\n-  };\n-\n-  template<typename _Tp> struct _Bitwise_and : binary_function<_Tp,_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x & __y; }\n-  };\n-\n-  template<typename _Tp> struct _Bitwise_or : binary_function<_Tp,_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x | __y; }\n-  };\n-\n-  template<typename _Tp> struct _Bitwise_xor : binary_function<_Tp,_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x ^ __y; }\n-  };\n-  \n-  template<typename _Tp> struct _Bitwise_not : unary_function<_Tp,_Tp> {\n-      _Tp operator() (_Tp __t) const { return ~__t; }\n-  };\n-\n-  template<typename _Tp> struct _Shift_left : unary_function<_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x << __y; }\n-  };\n-\n-  template<typename _Tp> struct _Shift_right : unary_function<_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x >> __y; }\n-  };\n-\n-  \n-  template<typename _Tp>\n-  inline const _Tp&\n-  valarray<_Tp>::operator[] (size_t __i) const\n-  { return _M_data[__i]; }\n-\n-  template<typename _Tp>\n-  inline _Tp&\n-  valarray<_Tp>::operator[] (size_t __i)\n-  { return _M_data[__i]; }\n-\n-} // std::\n-      \n-#include <bits/slice.h>\n-#include <bits/slice_array.h>\n-#include <bits/gslice.h>\n-#include <bits/gslice_array.h>\n-#include <bits/mask_array.h>\n-#include <bits/indirect_array.h>\n-\n-namespace std\n-{\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray () : _M_size (0), _M_data (0) {}\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (size_t __n) \n-      : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n-  { __valarray_default_construct(_M_data, _M_data + __n); }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const _Tp& __t, size_t __n)\n-    : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n-  { __valarray_fill_construct (_M_data, _M_data + __n, __t); }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const _Tp* __restrict__ __p, size_t __n)\n-    : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n-  { __valarray_copy_construct (__p, __p + __n, _M_data); }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const valarray<_Tp>& __v)\n-    : _M_size(__v._M_size), _M_data(__valarray_get_storage<_Tp>(__v._M_size))\n-  { __valarray_copy_construct (__v._M_data, __v._M_data + _M_size, _M_data); }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const slice_array<_Tp>& __sa)\n-    : _M_size(__sa._M_sz), _M_data(__valarray_get_storage<_Tp>(__sa._M_sz))\n-  {\n-    __valarray_copy\n-      (__sa._M_array, __sa._M_sz, __sa._M_stride, _Array<_Tp>(_M_data));\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const gslice_array<_Tp>& __ga)\n-    : _M_size(__ga._M_index.size()),\n-      _M_data(__valarray_get_storage<_Tp>(_M_size))\n-  {\n-    __valarray_copy\n-      (__ga._M_array, _Array<size_t>(__ga._M_index),\n-       _Array<_Tp>(_M_data), _M_size);\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const mask_array<_Tp>& __ma)\n-    : _M_size(__ma._M_sz), _M_data(__valarray_get_storage<_Tp>(__ma._M_sz))\n-  {\n-    __valarray_copy\n-      (__ma._M_array, __ma._M_mask, _Array<_Tp>(_M_data), _M_size);\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::valarray (const indirect_array<_Tp>& __ia)\n-    : _M_size(__ia._M_sz), _M_data(__valarray_get_storage<_Tp>(__ia._M_sz))\n-  {\n-    __valarray_copy\n-      (__ia._M_array, __ia._M_index, _Array<_Tp>(_M_data), _M_size);\n-  }\n-\n-  template<typename _Tp> template<class _Dom>\n-  inline valarray<_Tp>::valarray (const _Expr<_Dom, _Tp>& __e)\n-    : _M_size(__e.size ()), _M_data(__valarray_get_storage<_Tp>(_M_size))\n-  { __valarray_copy (__e, _M_size, _Array<_Tp>(_M_data)); }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>::~valarray ()\n-  {\n-      __valarray_destroy_elements(_M_data, _M_data + _M_size);\n-      __valarray_release_memory(_M_data);\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const valarray<_Tp>& __v)\n-  {\n-      __valarray_copy(__v._M_data, _M_size, _M_data);\n-      return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const _Tp& __t)\n-  {\n-      __valarray_fill (_M_data, _M_size, __t);\n-      return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const slice_array<_Tp>& __sa)\n-  {\n-      __valarray_copy (__sa._M_array, __sa._M_sz,\n-              __sa._M_stride, _Array<_Tp>(_M_data));\n-      return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const gslice_array<_Tp>& __ga)\n-  {\n-      __valarray_copy (__ga._M_array, _Array<size_t>(__ga._M_index),\n-              _Array<_Tp>(_M_data), _M_size);\n-      return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const mask_array<_Tp>& __ma)\n-  {\n-      __valarray_copy (__ma._M_array, __ma._M_mask,\n-              _Array<_Tp>(_M_data), _M_size);\n-      return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const indirect_array<_Tp>& __ia)\n-  {\n-      __valarray_copy (__ia._M_array, __ia._M_index,\n-               _Array<_Tp>(_M_data), _M_size);\n-      return *this;\n-  }\n-\n-  template<typename _Tp> template<class _Dom>\n-  inline valarray<_Tp>&\n-  valarray<_Tp>::operator= (const _Expr<_Dom, _Tp>& __e)\n-  {\n-      __valarray_copy (__e, _M_size, _Array<_Tp>(_M_data));\n-      return *this;\n-  }\n-\n-  template<typename _Tp>\n-  inline _Expr<_SClos<_ValArray,_Tp>, _Tp>\n-  valarray<_Tp>::operator[] (slice __s) const\n-  {\n-      typedef _SClos<_ValArray,_Tp> _Closure;\n-      return _Expr<_Closure, _Tp> (_Closure (_Array<_Tp>(_M_data), __s));\n-  }\n-\n-  template<typename _Tp>\n-  inline slice_array<_Tp>\n-  valarray<_Tp>::operator[] (slice __s)\n-  {\n-      return slice_array<_Tp> (_Array<_Tp>(_M_data), __s);\n-  }\n-\n-  template<typename _Tp>\n-  inline _Expr<_GClos<_ValArray,_Tp>, _Tp>\n-  valarray<_Tp>::operator[] (const gslice& __gs) const\n-  {\n-      typedef _GClos<_ValArray,_Tp> _Closure;\n-      return _Expr<_Closure, _Tp>\n-          (_Closure (_Array<_Tp>(_M_data), __gs._M_index->_M_index));\n-  }\n-\n-  template<typename _Tp>\n-  inline gslice_array<_Tp>\n-  valarray<_Tp>::operator[] (const gslice& __gs)\n-  {\n-      return gslice_array<_Tp>\n-          (_Array<_Tp>(_M_data), __gs._M_index->_M_index);\n-  }\n-\n-  template<typename _Tp>\n-  inline valarray<_Tp>\n-  valarray<_Tp>::operator[] (const valarray<bool>& __m) const\n-  {\n-      size_t __s (0);\n-      size_t __e (__m.size ());\n-      for (size_t __i=0; __i<__e; ++__i)\n-          if (__m[__i]) ++__s;\n-      return valarray<_Tp> (mask_array<_Tp> (_Array<_Tp>(_M_data), __s,\n-                                         _Array<bool> (__m)));\n-  }\n-\n-  template<typename _Tp>\n-  inline mask_array<_Tp>\n-  valarray<_Tp>::operator[] (const valarray<bool>& __m)\n-  {\n-      size_t __s (0);\n-      size_t __e (__m.size ());\n-      for (size_t __i=0; __i<__e; ++__i)\n-          if (__m[__i]) ++__s;\n-      return mask_array<_Tp> (_Array<_Tp>(_M_data), __s, _Array<bool> (__m));\n-  }\n-\n-  template<typename _Tp>\n-  inline _Expr<_IClos<_ValArray,_Tp>, _Tp>\n-  valarray<_Tp>::operator[] (const valarray<size_t>& __i) const\n-  {\n-      typedef _IClos<_ValArray,_Tp> _Closure;\n-      return _Expr<_Closure, _Tp> (_Closure (*this, __i));\n-  }\n-\n-  template<typename _Tp>\n-  inline indirect_array<_Tp>\n-  valarray<_Tp>::operator[] (const valarray<size_t>& __i)\n-  {\n-      return indirect_array<_Tp> (_Array<_Tp>(_M_data), __i.size(),\n-                                _Array<size_t> (__i));\n-  }\n-\n-  template<class _Tp>\n-  inline size_t valarray<_Tp>::size () const { return _M_size; }\n-\n-  template<class _Tp>\n-  inline _Tp\n-  valarray<_Tp>::sum () const\n-  {\n-      return __valarray_sum(_M_data, _M_data + _M_size);\n-  }\n-\n-//   template<typename _Tp>\n-//   inline _Tp\n-//   valarray<_Tp>::product () const\n-//   {\n-//       return __valarray_product(_M_data, _M_data + _M_size);\n-//   }\n-\n-  template <class _Tp>\n-     inline valarray<_Tp>\n-     valarray<_Tp>::shift(int __n) const\n-     {\n-       _Tp* const __a = static_cast<_Tp*>\n-         (__builtin_alloca(sizeof(_Tp) * _M_size));\n-       if (__n == 0)                          // no shift\n-         __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n-       else if (__n > 0)         // __n > 0: shift left\n-         {                 \n-           if (size_t(__n) > _M_size)\n-             __valarray_default_construct(__a, __a + __n);\n-           else\n-             {\n-               __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n-               __valarray_default_construct(__a+_M_size-__n, __a + _M_size);\n-             }\n-         }\n-       else                        // __n < 0: shift right\n-         {                          \n-           __valarray_copy_construct (_M_data, _M_data+_M_size+__n, __a-__n);\n-           __valarray_default_construct(__a, __a - __n);\n-         }\n-       return valarray<_Tp> (__a, _M_size);\n-     }\n-\n-  template <class _Tp>\n-     inline valarray<_Tp>\n-     valarray<_Tp>::cshift (int __n) const\n-     {\n-       _Tp* const __a = static_cast<_Tp*>\n-         (__builtin_alloca (sizeof(_Tp) * _M_size));\n-       if (__n == 0)               // no cshift\n-         __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n-       else if (__n > 0)           // cshift left\n-         {               \n-           __valarray_copy_construct(_M_data, _M_data+__n, __a+_M_size-__n);\n-           __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n-         }\n-       else                        // cshift right\n-         {                       \n-           __valarray_copy_construct\n-             (_M_data + _M_size+__n, _M_data + _M_size, __a);\n-           __valarray_copy_construct\n-             (_M_data, _M_data + _M_size+__n, __a - __n);\n-         }\n-       return valarray<_Tp>(__a, _M_size);\n-     }\n-\n-  template <class _Tp>\n-  inline void\n-  valarray<_Tp>::resize (size_t __n, _Tp __c)\n-  {\n-    // This complication is so to make valarray<valarray<T> > work\n-    // even though it is not required by the standard.  Nobody should\n-    // be saying valarray<valarray<T> > anyway.  See the specs.\n-    __valarray_destroy_elements(_M_data, _M_data + _M_size);\n-    if (_M_size != __n)\n-      {\n-        __valarray_release_memory(_M_data);\n-        _M_size = __n;\n-        _M_data = __valarray_get_storage<_Tp>(__n);\n-      }\n-    __valarray_fill_construct(_M_data, _M_data + __n, __c);\n-  }\n-    \n-  template<typename _Tp>\n-  inline _Tp\n-  valarray<_Tp>::min() const\n-  {\n-      return *min_element (_M_data, _M_data+_M_size);\n-  }\n-\n-  template<typename _Tp>\n-  inline _Tp\n-  valarray<_Tp>::max() const\n-  {\n-      return *max_element (_M_data, _M_data+_M_size);\n-  }\n-  \n-  template<class _Tp>\n-  inline _Expr<_ValFunClos<_ValArray,_Tp>,_Tp>\n-  valarray<_Tp>::apply (_Tp func (_Tp)) const\n-  {\n-      typedef _ValFunClos<_ValArray,_Tp> _Closure;\n-      return _Expr<_Closure,_Tp> (_Closure (*this, func));\n-  }\n-\n-  template<class _Tp>\n-  inline _Expr<_RefFunClos<_ValArray,_Tp>,_Tp>\n-  valarray<_Tp>::apply (_Tp func (const _Tp &)) const\n-  {\n-      typedef _RefFunClos<_ValArray,_Tp> _Closure;\n-      return _Expr<_Closure,_Tp> (_Closure (*this, func));\n-  }\n-\n-#define _DEFINE_VALARRAY_UNARY_OPERATOR(_Op, _Name)                     \\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_UnClos<_Name,_ValArray,_Tp>, _Tp>               \t\\\n-  valarray<_Tp>::operator _Op() const\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _UnClos<_Name,_ValArray,_Tp> _Closure;\t                \\\n-      return _Expr<_Closure, _Tp> (_Closure (*this));\t\t\t\\\n-  }\n-\n-    _DEFINE_VALARRAY_UNARY_OPERATOR(+, _Unary_plus)\n-    _DEFINE_VALARRAY_UNARY_OPERATOR(-, negate)\n-    _DEFINE_VALARRAY_UNARY_OPERATOR(~, _Bitwise_not)\n-\n-#undef _DEFINE_VALARRAY_UNARY_OPERATOR\n-  \n-  template<typename _Tp>\n-  inline _Expr<_UnClos<logical_not,_ValArray,_Tp>, bool>\n-  valarray<_Tp>::operator!() const\n-  {\n-      typedef _UnClos<logical_not,_ValArray,_Tp> _Closure;\n-      return _Expr<_Closure, bool> (_Closure (*this));\n-  }\n-\n-#define _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(_Op, _Name)               \\\n-  template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator _Op##= (const _Tp &__t)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, __t);\t\\\n-      return *this;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator _Op##= (const valarray<_Tp> &__v)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, \t\t\\\n-                               _Array<_Tp>(__v._M_data));\t\t\\\n-      return *this;\t\t\t\t\t\t\t\\\n-  }\n-\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(+, plus)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(-, minus)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(*, multiplies)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(/, divides)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(%, modulus)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(^, xor)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(&, and)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(|, or)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(<<, shift_left)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(>>, shift_right)\n-\n-#undef _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT\n-\n-\n-} // std::\n-  \n-\n-namespace std\n-{\n-\n-#define _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(_Op, _Name)          \\\n-  template<class _Tp> template<class _Dom>\t\t\t\t\\\n-  inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      _Array_augmented_##_Name (_Array<_Tp>(_M_data), __e, _M_size);\t\\\n-      return *this;\t\t\t\t\t\t\t\\\n-  }\n-\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(+, plus)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(-, minus)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(*, multiplies)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(/, divides)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(%, modulus)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(^, xor)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(&, and)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(|, or)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(<<, shift_left)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, shift_right)\n-\n-#undef _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT\n-    \n-\n-#define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>, _Tp>        \\\n-  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, _Tp> (_Closure (__v, __w));\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,_Tp>         \\\n-  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;\t\\\n-      return _Expr<_Closure, _Tp> (_Closure (__v, __t));\t        \\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,_Tp>         \\\n-  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, _Tp> (_Closure (__t, __v));        \t\\\n-  }\n-\n-_DEFINE_BINARY_OPERATOR(+, plus)\n-_DEFINE_BINARY_OPERATOR(-, minus)\n-_DEFINE_BINARY_OPERATOR(*, multiplies)\n-_DEFINE_BINARY_OPERATOR(/, divides)\n-_DEFINE_BINARY_OPERATOR(%, modulus)\n-_DEFINE_BINARY_OPERATOR(^, _Bitwise_xor)\n-_DEFINE_BINARY_OPERATOR(&, _Bitwise_and)\n-_DEFINE_BINARY_OPERATOR(|, _Bitwise_or)\n-_DEFINE_BINARY_OPERATOR(<<, _Shift_left)\n-_DEFINE_BINARY_OPERATOR(>>, _Shift_right)\n-\n-#undef _DEFINE_BINARY_OPERATOR\n-\n-#define _DEFINE_LOGICAL_OPERATOR(_Op, _Name)\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, bool> (_Closure (__v, __w));               \\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,bool>        \\\n-  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, bool> (_Closure (__v, __t));       \t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, bool> (_Closure (__t, __v));\t        \\\n-  }\n-\n-_DEFINE_LOGICAL_OPERATOR(&&, logical_and)\n-_DEFINE_LOGICAL_OPERATOR(||, logical_or)\n-_DEFINE_LOGICAL_OPERATOR(==, equal_to)\n-_DEFINE_LOGICAL_OPERATOR(!=, not_equal_to)\n-_DEFINE_LOGICAL_OPERATOR(<, less)\n-_DEFINE_LOGICAL_OPERATOR(>, greater)\n-_DEFINE_LOGICAL_OPERATOR(<=, less_equal)\n-_DEFINE_LOGICAL_OPERATOR(>=, greater_equal)\n-\n-#undef _DEFINE_LOGICAL_OPERATOR\n-\n-} // namespace std\n-\n-#endif // _CPP_VALARRAY\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "995daec7249f483616f073f61a3226d6f7f7dabf", "filename": "libstdc++-v3/include/bits/std_vector.h", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,78 +0,0 @@\n-// <vector> -*- C++ -*-\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- *\n- * Copyright (c) 1996\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-/** @file std_vector.h\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-#ifndef _CPP_VECTOR\n-#define _CPP_VECTOR 1\n-\n-#pragma GCC system_header\n-\n-#include <bits/functexcept.h>\n-#include <bits/stl_algobase.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_vector.h>\n-#include <bits/stl_bvector.h> \n-\n-#endif /* _CPP_VECTOR */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "6e488eae355f2b41579c0310b76fd8c878033b7a", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n // Bits and pieces used in algorithms -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,23 +62,21 @@\n #define __GLIBCPP_INTERNAL_ALGOBASE_H\n \n #include <bits/c++config.h>\n+#include <cstring>\n+#include <climits>\n+#include <cstdlib>\n+#include <cstddef>\n+#include <new>\n+#include <iosfwd>\n #include <bits/stl_pair.h>\n #include <bits/type_traits.h>\n-#include <bits/std_cstring.h>\n-#include <bits/std_climits.h>\n-#include <bits/std_cstdlib.h>\n-#include <bits/std_cstddef.h>\n-#include <new>\n-\n-#include <bits/std_iosfwd.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_iterator.h>\n #include <bits/concept_check.h>\n \n namespace std\n {\n-\n   // swap and iter_swap\n \n   /**"}, {"sha": "66d2ef66529d133fdae0bee2a83d3c9bd57759e8", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -78,12 +78,11 @@\n  *  or online at http://gcc.gnu.org/onlinedocs/libstdc++/ext/howto.html#3\n */\n \n-\n-#include <bits/functexcept.h>   // for __throw_bad_alloc\n-#include <bits/std_cstddef.h>\n-#include <bits/std_cstdlib.h>\n-#include <bits/std_cstring.h>\n-#include <bits/std_cassert.h>\n+#include <cstddef>\n+#include <cstdlib>\n+#include <cstring>\n+#include <cassert>\n+#include <bits/functexcept.h>   // For __throw_bad_alloc\n #include <bits/stl_threads.h>\n \n namespace std"}, {"sha": "866b20bf37e7a6d42fe1d0b6885594b258a2648c", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -61,7 +61,7 @@\n #ifndef _CPP_BITS_STL_UNINITIALIZED_H\n #define _CPP_BITS_STL_UNINITIALIZED_H 1\n \n-#include <bits/std_cstring.h>\n+#include <cstring>\n \n namespace std\n {"}, {"sha": "5b425e4be6eaf1a99864b465f0917f5908801c25", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -41,8 +41,8 @@\n \n #include <bits/c++config.h>\n #include <bits/cpp_type_traits.h>\n-#include <bits/std_cstdlib.h>\n-#include <bits/std_cstring.h>\n+#include <cstdlib>\n+#include <cstring>\n #include <new>\n \n namespace std"}, {"sha": "32928380ba377e429ae8903af7113d8125e1f97b", "filename": "libstdc++-v3/include/c/cassert", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcassert", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcassert", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcassert?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cassert.h"}, {"sha": "5a423a08b8f22be5d4a1607e121860ca9f8dd5f2", "filename": "libstdc++-v3/include/c/cctype", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcctype?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cctype.h"}, {"sha": "23a0060a884c0dc76246318354aed68a15f7aa31", "filename": "libstdc++-v3/include/c/cerrno", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcerrno", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcerrno", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcerrno?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cerrno.h"}, {"sha": "744699709e557eafcca0e0b963a06f01283dfa44", "filename": "libstdc++-v3/include/c/cfloat", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcfloat?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cfloat.h"}, {"sha": "c9f49fb6fc391355cc65ec18cf74e3a21e96f3f7", "filename": "libstdc++-v3/include/c/ciso646", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fciso646", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fciso646", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fciso646?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/std/ciso646"}, {"sha": "05795a6adb60cf8de484e9013dff1170dd2130fc", "filename": "libstdc++-v3/include/c/climits", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fclimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fclimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fclimits?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_climits.h"}, {"sha": "69ea1f6912c1c2ab7de984f4061b8e83323fbad9", "filename": "libstdc++-v3/include/c/clocale", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fclocale?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_clocale.h"}, {"sha": "2625eac91fb162d1a2dd0e20cddf393f45fcd7b5", "filename": "libstdc++-v3/include/c/cmath", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcmath?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cmath.h"}, {"sha": "45e3da5d69377af60c0f565181c86aaa5231db42", "filename": "libstdc++-v3/include/c/csetjmp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcsetjmp?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_csetjmp.h"}, {"sha": "da585dd0ae1761b04988943db019faba73fbb42f", "filename": "libstdc++-v3/include/c/csignal", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcsignal?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_csignal.h"}, {"sha": "5d2a2d88c54f83599dea1fecf3169868eea4a2ab", "filename": "libstdc++-v3/include/c/cstdarg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdarg?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cstdarg.h"}, {"sha": "456f6ca9db190cd131bb93dc30449d9c439a1e39", "filename": "libstdc++-v3/include/c/cstddef", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstddef?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cstddef.h"}, {"sha": "b7b29703d1fac9dde4da399e865c76e6a65c5efe", "filename": "libstdc++-v3/include/c/cstdio", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdio?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cstdio.h"}, {"sha": "75402e4aad0362bbccdfddc0089467c9800ececb", "filename": "libstdc++-v3/include/c/cstdlib", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstdlib?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cstdlib.h"}, {"sha": "6a176559ce4120dbc225a06f52065f39f092dffd", "filename": "libstdc++-v3/include/c/cstring", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcstring?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cstring.h"}, {"sha": "bf53c50347c26aa21da7fba71391f4538d105b03", "filename": "libstdc++-v3/include/c/ctime", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fctime?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_ctime.h"}, {"sha": "713f4445773575a92a66cd3c6cb20b31977633fa", "filename": "libstdc++-v3/include/c/cwchar", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwchar?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cwchar.h"}, {"sha": "6f8a7c8f28bb053e1bd1dd289b208b257bd0dab1", "filename": "libstdc++-v3/include/c/cwctype", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc%2Fcwctype?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c/bits/std_cwctype.h"}, {"sha": "b0e1f13f10aff88eb772dbe39991d2f087a0eaa9", "filename": "libstdc++-v3/include/c_std/cassert", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcassert", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcassert", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcassert?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cassert.h"}, {"sha": "189f4f5384e7d129ed68c73495d98a44ffac7561", "filename": "libstdc++-v3/include/c_std/cctype", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcctype?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cctype.h"}, {"sha": "7f1cdf66565564b377e9efad72418192fe5c5d26", "filename": "libstdc++-v3/include/c_std/cerrno", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcerrno", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcerrno", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcerrno?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cerrno.h"}, {"sha": "80f5ea5c4ab1609fd4748b652e9d9981a66205c4", "filename": "libstdc++-v3/include/c_std/cfloat", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcfloat?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cfloat.h"}, {"sha": "c9f49fb6fc391355cc65ec18cf74e3a21e96f3f7", "filename": "libstdc++-v3/include/c_std/ciso646", "status": "renamed", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fciso646", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fciso646", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fciso646?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -27,15 +27,12 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file ctime\n+/** @file ciso646\n  *  This is a Standard C++ Library file.  You should @c #include this file\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  *\n- *  This is the C++ version of the Standard C Library header @c time.h,\n+ *  This is the C++ version of the Standard C Library header @c iso646.h,\n  *  and its contents are (mostly) the same as that header, but are all\n  *  contained in the namespace @c std.\n  */\n \n-#ifndef _CPP_CTIME\n-#include <bits/std_ctime.h>\n-#endif", "previous_filename": "libstdc++-v3/include/std/ctime"}, {"sha": "48f6acf4d86af9b52daac7177f4d9bdda9e7e53d", "filename": "libstdc++-v3/include/c_std/climits", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclimits?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_climits.h"}, {"sha": "02eb8fcc90cf7311209f6c904d411db8f5b86f3e", "filename": "libstdc++-v3/include/c_std/clocale", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fclocale?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_clocale.h"}, {"sha": "79644cec8fe1f40c84d57e5457aef043d7f9214f", "filename": "libstdc++-v3/include/c_std/cmath", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -647,7 +647,7 @@ namespace std\n   \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n #  define export\n-#  include <bits/cmath.tcc>\n+#  include <cmath.tcc>\n #endif\n \n #endif", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cmath.h"}, {"sha": "9b86bbb9da6f340cecbada837fd773c3d1cd1b73", "filename": "libstdc++-v3/include/c_std/cmath.tcc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcmath.tcc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/cmath.tcc"}, {"sha": "5db98e7b97eae12006fde5c00edb510ba8c9d9f1", "filename": "libstdc++-v3/include/c_std/csetjmp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsetjmp?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_csetjmp.h"}, {"sha": "818e7bbbc9cf6c1538472b7f81c7d98f09168fb1", "filename": "libstdc++-v3/include/c_std/csignal", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcsignal?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_csignal.h"}, {"sha": "58faa3b9876d594d67d06cc982ba8d7501ceec0e", "filename": "libstdc++-v3/include/c_std/cstdarg", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdarg?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cstdarg.h"}, {"sha": "deb2db4448c4b85ee76b07bddd7673c5fb1f8800", "filename": "libstdc++-v3/include/c_std/cstddef", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstddef?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cstddef.h"}, {"sha": "a6c78d221d511f406d9df13f757a12844845adeb", "filename": "libstdc++-v3/include/c_std/cstdio", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdio?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -35,7 +35,7 @@\n #define _CPP_CSTDIO 1\n \n #include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n+#include <cstddef>\n \n #pragma GCC system_header\n #include <stdio.h>", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cstdio.h"}, {"sha": "73176dbedbb412f64b4142a16bd43f5fc27e7f1c", "filename": "libstdc++-v3/include/c_std/cstdlib", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstdlib?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -35,7 +35,7 @@\n #define _CPP_CSTDLIB 1\n \n #include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n+#include <cstddef>\n \n #pragma GCC system_header\n #include <stdlib.h>", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h"}, {"sha": "9708c89899066b7ebb7d810d8769e2c45998d58f", "filename": "libstdc++-v3/include/c_std/cstring", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcstring?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -34,7 +34,7 @@\n #ifndef _CPP_CSTRING\n #define _CPP_CSTRING 1\n \n-#include <bits/std_cstddef.h>\n+#include <cstddef>\n \n #pragma GCC system_header\n #include <string.h>", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cstring.h"}, {"sha": "c5c108b686fb197e40231bd06f431f97ddb30629", "filename": "libstdc++-v3/include/c_std/ctime", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fctime?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -34,7 +34,7 @@\n #ifndef _CPP_CTIME\n #define _CPP_CTIME 1\n \n-#include <bits/std_cstddef.h>\n+#include <cstddef>\n \n #pragma GCC system_header\n #include <time.h>", "previous_filename": "libstdc++-v3/include/c_std/bits/std_ctime.h"}, {"sha": "8e69d518509032eccc6e78bf8ec274b12f74e1b2", "filename": "libstdc++-v3/include/c_std/cwchar", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwchar?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -35,8 +35,8 @@\n #define _CPP_CWCHAR 1\n \n #include <bits/c++config.h>\n-#include <bits/std_cstddef.h>\n-#include <bits/std_ctime.h>\n+#include <cstddef>\n+#include <ctime>\n \n #if _GLIBCPP_HAVE_WCHAR_H\n #pragma GCC system_header", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h"}, {"sha": "39ae076766315d4bd397b213c3a7bb124aca51e0", "filename": "libstdc++-v3/include/c_std/cwctype", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fcwctype?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "previous_filename": "libstdc++-v3/include/c_std/bits/std_cwctype.h"}, {"sha": "5b7fbff3a17a29c96c9d21e26eb1ed7b78a335e4", "filename": "libstdc++-v3/include/ext/algorithm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falgorithm?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -57,7 +57,7 @@\n #define _EXT_ALGORITHM\n \n #pragma GCC system_header\n-#include <bits/std_algorithm.h>\n+#include <algorithm>\n \n namespace __gnu_cxx\n {"}, {"sha": "cee35583d363118dc650519979023a7b597f6de7", "filename": "libstdc++-v3/include/ext/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ffunctional?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -57,7 +57,7 @@\n #define _EXT_FUNCTIONAL\n \n #pragma GCC system_header\n-#include <bits/std_functional.h>\n+#include <functional>\n \n namespace __gnu_cxx\n {"}, {"sha": "c7acdda44c9cc0d4c6ec0af794226fbc0feeb8df", "filename": "libstdc++-v3/include/ext/iterator", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fiterator?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -63,7 +63,7 @@\n \n #pragma GCC system_header\n #include <bits/concept_check.h>\n-#include <bits/std_iterator.h>\n+#include <iterator>\n \n namespace __gnu_cxx\n {"}, {"sha": "73fa42783c953501dcd762f72d8b96c4596ab363", "filename": "libstdc++-v3/include/ext/memory", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmemory?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -57,7 +57,7 @@\n #define _EXT_MEMORY\n \n #pragma GCC system_header\n-#include <bits/std_memory.h>\n+#include <memory>\n \n namespace __gnu_cxx\n {"}, {"sha": "5b33a893b80b6a6a8833b2282cf871dde1e49f72", "filename": "libstdc++-v3/include/ext/numeric", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -58,7 +58,7 @@\n \n #pragma GCC system_header\n #include <bits/concept_check.h>\n-#include <bits/std_numeric.h>\n+#include <numeric>\n \n #include <ext/functional> // For identity_element\n "}, {"sha": "19618efc00c7588de39a67465bec381702171df5", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -45,8 +45,8 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#include <bits/std_cstdio.h>     \n-#include <bits/std_iostream.h>\n+#include <cstdio>     \n+#include <iostream>\n #include <bits/functexcept.h>\n \n #include <ext/algorithm> // For copy_n and lexicographical_compare_3way"}, {"sha": "c251ed31b9a99d0293107d79047683a39725b6e8", "filename": "libstdc++-v3/include/ext/stl_hash_fun.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -61,7 +61,7 @@\n #ifndef _CPP_BITS_STL_HASH_FUN_H\n #define _CPP_BITS_STL_HASH_FUN_H 1\n \n-#include <bits/std_cstddef.h>\n+#include <cstddef>\n \n namespace __gnu_cxx\n {"}, {"sha": "746eb47541b415b6a9c7769e560a3961524438ab", "filename": "libstdc++-v3/include/std/algorithm", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <algorithm> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,50 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file algorithm\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_algorithm.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_ALGORITHM\n-#include <bits/std_algorithm.h>\n-#endif\n+#define _CPP_ALGORITHM 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_tempbuf.h>\n+#include <bits/stl_algo.h>\n+\n+#endif /* _CPP_ALGORITHM */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "d9119e17b36e6307b558597b2f6ddb559d4317fc", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 784, "deletions": 7, "changes": 791, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <bitset> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,788 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file bitset\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ * Copyright (c) 1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */ \n+\n+/** @file std_bitset.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITSET\n-#include <bits/std_bitset.h>\n-#endif\n+#ifndef __GLIBCPP_BITSET\n+#define __GLIBCPP_BITSET\n+\n+#pragma GCC system_header\n+\n+// A bitset of size N has N % (sizeof(unsigned long) * CHAR_BIT) unused \n+// bits.  (They are the high- order bits in the highest word.)  It is\n+// a class invariant of class bitset<> that those unused bits are\n+// always zero.\n+\n+// Most of the actual code isn't contained in bitset<> itself, but in the \n+// base class _Base_bitset.  The base class works with whole words, not with\n+// individual bits.  This allows us to specialize _Base_bitset for the\n+// important special case where the bitset is only a single word.\n+\n+\n+#include <cstddef>     // for size_t\n+#include <cstring>     // for memset\n+#include <string>\n+#include <stdexcept>\n+#include <bits/functexcept.h>   // for invalid_argument, out_of_range, \n+\t\t\t         // overflow_error\n+#include <ostream>     // for ostream (operator<<)\n+#include <istream>     // for istream (operator>>)\n+\n+#define _GLIBCPP_BITSET_BITS_PER_WORD (CHAR_BIT*sizeof(unsigned long))\n+#define __BITSET_WORDS(__n) \\\n+ ((__n) < 1 ? 1 : ((__n) + _GLIBCPP_BITSET_BITS_PER_WORD - 1)/_GLIBCPP_BITSET_BITS_PER_WORD)\n+\n+namespace std\n+{\n+\n+// structure to aid in counting bits\n+template<bool __dummy> \n+struct _Bit_count {\n+  static unsigned char _S_bit_count[256];\n+};\n+\n+// Mapping from 8 bit unsigned integers to the index of the first one\n+// bit:\n+template<bool __dummy> \n+struct _First_one {\n+  static unsigned char _S_first_one[256];\n+};\n+\n+//\n+// Base class: general case.\n+//\n+\n+template<size_t _Nw>\n+struct _Base_bitset {\n+  typedef unsigned long _WordT;\n+\n+  _WordT _M_w[_Nw];                // 0 is the least significant word.\n+\n+  _Base_bitset( void ) { _M_do_reset(); }\n+  _Base_bitset(unsigned long __val) {\n+    _M_do_reset();\n+    _M_w[0] = __val;\n+  }\n+\n+  static size_t _S_whichword( size_t __pos )\n+    { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n+  static size_t _S_whichbyte( size_t __pos )\n+    { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n+  static size_t _S_whichbit( size_t __pos )\n+    { return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n+  static _WordT _S_maskbit( size_t __pos )\n+    { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n+\n+  _WordT& _M_getword(size_t __pos)       { return _M_w[_S_whichword(__pos)]; }\n+  _WordT  _M_getword(size_t __pos) const { return _M_w[_S_whichword(__pos)]; }\n+\n+  _WordT& _M_hiword()       { return _M_w[_Nw - 1]; }\n+  _WordT  _M_hiword() const { return _M_w[_Nw - 1]; }\n+\n+  void _M_do_and(const _Base_bitset<_Nw>& __x) {\n+    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+      _M_w[__i] &= __x._M_w[__i];\n+    }\n+  }\n+\n+  void _M_do_or(const _Base_bitset<_Nw>& __x) {\n+    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+      _M_w[__i] |= __x._M_w[__i];\n+    }\n+  }\n+\n+  void _M_do_xor(const _Base_bitset<_Nw>& __x) {\n+    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+      _M_w[__i] ^= __x._M_w[__i];\n+    }\n+  }\n+\n+  void _M_do_left_shift(size_t __shift);\n+  void _M_do_right_shift(size_t __shift);\n+\n+  void _M_do_flip() {\n+    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+      _M_w[__i] = ~_M_w[__i];\n+    }\n+  }\n+\n+  void _M_do_set() {\n+    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+      _M_w[__i] = ~static_cast<_WordT>(0);\n+    }\n+  }\n+\n+  void _M_do_reset() { memset(_M_w, 0, _Nw * sizeof(_WordT)); }\n+\n+  bool _M_is_equal(const _Base_bitset<_Nw>& __x) const {\n+    for (size_t __i = 0; __i < _Nw; ++__i) {\n+      if (_M_w[__i] != __x._M_w[__i])\n+        return false;\n+    }\n+    return true;\n+  }\n+\n+  bool _M_is_any() const {\n+    for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+      if ( _M_w[__i] != static_cast<_WordT>(0) )\n+        return true;\n+    }\n+    return false;\n+  }\n+\n+  size_t _M_do_count() const {\n+    size_t __result = 0;\n+    const unsigned char* __byte_ptr = (const unsigned char*)_M_w;\n+    const unsigned char* __end_ptr = (const unsigned char*)(_M_w+_Nw);\n+\n+    while ( __byte_ptr < __end_ptr ) {\n+      __result += _Bit_count<true>::_S_bit_count[*__byte_ptr];\n+      __byte_ptr++;\n+    }\n+    return __result;\n+  }\n+\n+  unsigned long _M_do_to_ulong() const; \n+\n+  // find first \"on\" bit\n+  size_t _M_do_find_first(size_t __not_found) const;\n+\n+  // find the next \"on\" bit that follows \"prev\"\n+  size_t _M_do_find_next(size_t __prev, size_t __not_found) const;\n+};\n+\n+//\n+// Definitions of non-inline functions from _Base_bitset.\n+// \n+\n+template<size_t _Nw>\n+void _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) \n+{\n+  if (__shift != 0) {\n+    const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n+    const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n+\n+    if (__offset == 0)\n+      for (size_t __n = _Nw - 1; __n >= __wshift; --__n)\n+        _M_w[__n] = _M_w[__n - __wshift];\n+\n+    else {\n+      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n+      for (size_t __n = _Nw - 1; __n > __wshift; --__n)\n+        _M_w[__n] = (_M_w[__n - __wshift] << __offset) | \n+                    (_M_w[__n - __wshift - 1] >> __sub_offset);\n+      _M_w[__wshift] = _M_w[0] << __offset;\n+    }\n+\n+    fill(_M_w + 0, _M_w + __wshift, static_cast<_WordT>(0));\n+  }\n+}\n+\n+template<size_t _Nw>\n+void _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) \n+{\n+  if (__shift != 0) {\n+    const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n+    const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n+    const size_t __limit = _Nw - __wshift - 1;\n+\n+    if (__offset == 0)\n+      for (size_t __n = 0; __n <= __limit; ++__n)\n+        _M_w[__n] = _M_w[__n + __wshift];\n+\n+    else {\n+      const size_t __sub_offset = _GLIBCPP_BITSET_BITS_PER_WORD - __offset;\n+      for (size_t __n = 0; __n < __limit; ++__n)\n+        _M_w[__n] = (_M_w[__n + __wshift] >> __offset) |\n+                    (_M_w[__n + __wshift + 1] << __sub_offset);\n+      _M_w[__limit] = _M_w[_Nw-1] >> __offset;\n+    }\n+\n+    fill(_M_w + __limit + 1, _M_w + _Nw, static_cast<_WordT>(0));\n+  }\n+}\n+\n+template<size_t _Nw>\n+unsigned long _Base_bitset<_Nw>::_M_do_to_ulong() const\n+{\n+  for (size_t __i = 1; __i < _Nw; ++__i) \n+    if (_M_w[__i]) \n+      __throw_overflow_error(\"bitset\");\n+  \n+  return _M_w[0];\n+}\n+\n+template<size_t _Nw>\n+size_t _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const \n+{\n+  for ( size_t __i = 0; __i < _Nw; __i++ ) {\n+    _WordT __thisword = _M_w[__i];\n+    if ( __thisword != static_cast<_WordT>(0) ) {\n+      // find byte within word\n+      for ( size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n+        unsigned char __this_byte\n+          = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n+        if ( __this_byte )\n+          return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n+            _First_one<true>::_S_first_one[__this_byte];\n+\n+        __thisword >>= CHAR_BIT;\n+      }\n+    }\n+  }\n+  // not found, so return an indication of failure.\n+  return __not_found;\n+}\n+\n+template<size_t _Nw>\n+size_t\n+_Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const\n+{\n+  // make bound inclusive\n+  ++__prev;\n+\n+  // check out of bounds\n+  if ( __prev >= _Nw * _GLIBCPP_BITSET_BITS_PER_WORD )\n+    return __not_found;\n+\n+    // search first word\n+  size_t __i = _S_whichword(__prev);\n+  _WordT __thisword = _M_w[__i];\n+\n+    // mask off bits below bound\n+  __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);\n+\n+  if ( __thisword != static_cast<_WordT>(0) ) {\n+    // find byte within word\n+    // get first byte into place\n+    __thisword >>= _S_whichbyte(__prev) * CHAR_BIT;\n+    for ( size_t __j = _S_whichbyte(__prev); __j < sizeof(_WordT); __j++ ) {\n+      unsigned char __this_byte\n+        = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n+      if ( __this_byte )\n+        return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n+          _First_one<true>::_S_first_one[__this_byte];\n+\n+      __thisword >>= CHAR_BIT;\n+    }\n+  }\n+\n+  // check subsequent words\n+  __i++;\n+  for ( ; __i < _Nw; __i++ ) {\n+    __thisword = _M_w[__i];\n+    if ( __thisword != static_cast<_WordT>(0) ) {\n+      // find byte within word\n+      for ( size_t __j = 0; __j < sizeof(_WordT); __j++ ) {\n+        unsigned char __this_byte\n+          = static_cast<unsigned char>(__thisword & (~(unsigned char)0));\n+        if ( __this_byte )\n+          return __i*_GLIBCPP_BITSET_BITS_PER_WORD + __j*CHAR_BIT +\n+            _First_one<true>::_S_first_one[__this_byte];\n+\n+        __thisword >>= CHAR_BIT;\n+      }\n+    }\n+  }\n+\n+  // not found, so return an indication of failure.\n+  return __not_found;\n+} // end _M_do_find_next\n+\n+\n+// ------------------------------------------------------------\n+\n+//\n+// Base class: specialization for a single word.\n+//\n+\n+template<> struct _Base_bitset<1> {\n+  typedef unsigned long _WordT;\n+  _WordT _M_w;\n+\n+  _Base_bitset( void ) : _M_w(0) {}\n+  _Base_bitset(unsigned long __val) : _M_w(__val) {}\n+\n+  static size_t _S_whichword( size_t __pos )\n+    { return __pos / _GLIBCPP_BITSET_BITS_PER_WORD; }\n+  static size_t _S_whichbyte( size_t __pos )\n+    { return (__pos % _GLIBCPP_BITSET_BITS_PER_WORD) / CHAR_BIT; }\n+  static size_t _S_whichbit( size_t __pos )\n+    {  return __pos % _GLIBCPP_BITSET_BITS_PER_WORD; }\n+  static _WordT _S_maskbit( size_t __pos )\n+    { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n+\n+  _WordT& _M_getword(size_t)       { return _M_w; }\n+  _WordT  _M_getword(size_t) const { return _M_w; }\n+\n+  _WordT& _M_hiword()       { return _M_w; }\n+  _WordT  _M_hiword() const { return _M_w; }\n+\n+  void _M_do_and(const _Base_bitset<1>& __x) { _M_w &= __x._M_w; }\n+  void _M_do_or(const _Base_bitset<1>& __x)  { _M_w |= __x._M_w; }\n+  void _M_do_xor(const _Base_bitset<1>& __x) { _M_w ^= __x._M_w; }\n+  void _M_do_left_shift(size_t __shift)     { _M_w <<= __shift; }\n+  void _M_do_right_shift(size_t __shift)    { _M_w >>= __shift; }\n+  void _M_do_flip()                       { _M_w = ~_M_w; }\n+  void _M_do_set()                        { _M_w = ~static_cast<_WordT>(0); }\n+  void _M_do_reset()                      { _M_w = 0; }\n+\n+  bool _M_is_equal(const _Base_bitset<1>& __x) const\n+    { return _M_w == __x._M_w; }\n+  bool _M_is_any() const\n+    { return _M_w != 0; }\n+\n+  size_t _M_do_count() const {\n+    size_t __result = 0;\n+    const unsigned char* __byte_ptr = (const unsigned char*)&_M_w;\n+    const unsigned char* __end_ptr\n+      = ((const unsigned char*)&_M_w)+sizeof(_M_w);\n+    while ( __byte_ptr < __end_ptr ) {\n+      __result += _Bit_count<true>::_S_bit_count[*__byte_ptr];\n+      __byte_ptr++;\n+    }\n+    return __result;\n+  }\n+\n+  unsigned long _M_do_to_ulong() const { return _M_w; }\n+\n+  size_t _M_do_find_first(size_t __not_found) const;\n+\n+  // find the next \"on\" bit that follows \"prev\"\n+  size_t _M_do_find_next(size_t __prev, size_t __not_found) const; \n+\n+};\n+\n+\n+// ------------------------------------------------------------\n+// Helper class to zero out the unused high-order bits in the highest word.\n+\n+template <size_t _Extrabits> struct _Sanitize {\n+  static void _M_do_sanitize(unsigned long& __val)\n+    { __val &= ~((~static_cast<unsigned long>(0)) << _Extrabits); }\n+};\n+\n+template<> struct _Sanitize<0> {\n+  static void _M_do_sanitize(unsigned long) {}\n+};\n+\n+\n+\n+// ------------------------------------------------------------\n+// Class bitset.\n+//   _Nb may be any nonzero number of type size_t.\n+\n+template<size_t _Nb>\n+class bitset : private _Base_bitset<__BITSET_WORDS(_Nb)>\n+{\n+private:\n+  typedef _Base_bitset<__BITSET_WORDS(_Nb)> _Base;\n+  typedef unsigned long _WordT;\n+\n+private:\n+  void _M_do_sanitize() {\n+    _Sanitize<_Nb%_GLIBCPP_BITSET_BITS_PER_WORD>::_M_do_sanitize(this->_M_hiword());\n+  }\n+\n+public:\n+\n+  // bit reference:\n+  class reference;\n+  friend class reference;\n+\n+  class reference {\n+    friend class bitset;\n+\n+    _WordT *_M_wp;\n+    size_t _M_bpos;\n+\n+    // left undefined\n+    reference();\n+\n+  public:\n+    reference( bitset& __b, size_t __pos ) {\n+      _M_wp = &__b._M_getword(__pos);\n+      _M_bpos = _Base::_S_whichbit(__pos);\n+    }\n+\n+    ~reference() {}\n+\n+    // for b[i] = __x;\n+    reference& operator=(bool __x) {\n+      if ( __x )\n+        *_M_wp |= _Base::_S_maskbit(_M_bpos);\n+      else\n+        *_M_wp &= ~_Base::_S_maskbit(_M_bpos);\n+\n+      return *this;\n+    }\n+\n+    // for b[i] = b[__j];\n+    reference& operator=(const reference& __j) {\n+      if ( (*(__j._M_wp) & _Base::_S_maskbit(__j._M_bpos)) )\n+        *_M_wp |= _Base::_S_maskbit(_M_bpos);\n+      else\n+        *_M_wp &= ~_Base::_S_maskbit(_M_bpos);\n+\n+      return *this;\n+    }\n+\n+    // flips the bit\n+    bool operator~() const\n+      { return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) == 0; }\n+\n+    // for __x = b[i];\n+    operator bool() const\n+      { return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }\n+\n+    // for b[i].flip();\n+    reference& flip() {\n+      *_M_wp ^= _Base::_S_maskbit(_M_bpos);\n+      return *this;\n+    }\n+  };\n+\n+  // 23.3.5.1 constructors:\n+  bitset() {}\n+  bitset(unsigned long __val) : _Base_bitset<__BITSET_WORDS(_Nb)>(__val) \n+    { _M_do_sanitize(); }\n+\n+  template<class _CharT, class _Traits, class _Alloc>\n+  explicit bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n+                  size_t __pos = 0)\n+    : _Base() \n+  {\n+    if (__pos > __s.size()) \n+      __throw_out_of_range(\"bitset\");\n+    _M_copy_from_string(__s, __pos,\n+                        basic_string<_CharT, _Traits, _Alloc>::npos);\n+  }\n+  template<class _CharT, class _Traits, class _Alloc>\n+  bitset(const basic_string<_CharT, _Traits, _Alloc>& __s,\n+         size_t __pos,\n+         size_t __n)\n+    : _Base() \n+  {\n+    if (__pos > __s.size()) \n+      __throw_out_of_range(\"bitset\");\n+    _M_copy_from_string(__s, __pos, __n);\n+  }\n+\n+  // 23.3.5.2 bitset operations:\n+  bitset<_Nb>& operator&=(const bitset<_Nb>& __rhs) {\n+    this->_M_do_and(__rhs);\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& operator|=(const bitset<_Nb>& __rhs) {\n+    this->_M_do_or(__rhs);\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& operator^=(const bitset<_Nb>& __rhs) {\n+    this->_M_do_xor(__rhs);\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& operator<<=(size_t __pos) {\n+    this->_M_do_left_shift(__pos);\n+    this->_M_do_sanitize();\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& operator>>=(size_t __pos) {\n+    this->_M_do_right_shift(__pos);\n+    this->_M_do_sanitize();\n+    return *this;\n+  }\n+\n+  //\n+  // Extension:\n+  // Versions of single-bit set, reset, flip, test with no range checking.\n+  //\n+\n+  bitset<_Nb>& _Unchecked_set(size_t __pos) {\n+    this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& _Unchecked_set(size_t __pos, int __val) {\n+    if (__val)\n+      this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n+    else\n+      this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);\n+\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& _Unchecked_reset(size_t __pos) {\n+    this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& _Unchecked_flip(size_t __pos) {\n+    this->_M_getword(__pos) ^= _Base::_S_maskbit(__pos);\n+    return *this;\n+  }\n+\n+  bool _Unchecked_test(size_t __pos) const {\n+    return (this->_M_getword(__pos) & _Base::_S_maskbit(__pos))\n+      != static_cast<_WordT>(0);\n+  }\n+\n+  // Set, reset, and flip.\n+\n+  bitset<_Nb>& set() {\n+    this->_M_do_set();\n+    this->_M_do_sanitize();\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& set(size_t __pos, bool __val = true) {\n+    if (__pos >= _Nb)\n+      __throw_out_of_range(\"bitset\");\n+\n+    return _Unchecked_set(__pos, __val);\n+  }\n+\n+  bitset<_Nb>& reset() {\n+    this->_M_do_reset();\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& reset(size_t __pos) {\n+    if (__pos >= _Nb)\n+      __throw_out_of_range(\"bitset\");\n+\n+    return _Unchecked_reset(__pos);\n+  }\n+\n+  bitset<_Nb>& flip() {\n+    this->_M_do_flip();\n+    this->_M_do_sanitize();\n+    return *this;\n+  }\n+\n+  bitset<_Nb>& flip(size_t __pos) {\n+    if (__pos >= _Nb)\n+      __throw_out_of_range(\"bitset\");\n+\n+    return _Unchecked_flip(__pos);\n+  }\n+\n+  bitset<_Nb> operator~() const { \n+    return bitset<_Nb>(*this).flip();\n+  }\n+\n+  // element access:\n+  //for b[i];\n+  // _GLIBCPP_RESOLVE_LIB_DEFECTS Note that this implementation already\n+  // resolves DR 11 (items 1 and 2), but does not do the range-checking\n+  // required by that DR's resolution.  -pme\n+  reference operator[](size_t __pos) { return reference(*this,__pos); }\n+  bool operator[](size_t __pos) const { return _Unchecked_test(__pos); }\n+\n+  unsigned long to_ulong() const { return this->_M_do_to_ulong(); }\n+\n+  template <class _CharT, class _Traits, class _Alloc>\n+  basic_string<_CharT, _Traits, _Alloc> to_string() const {\n+    basic_string<_CharT, _Traits, _Alloc> __result;\n+    _M_copy_to_string(__result);\n+    return __result;\n+  }\n+\n+  // Helper functions for string operations.\n+  template<class _CharT, class _Traits, class _Alloc>\n+  void _M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,\n+                          size_t,\n+                          size_t);\n+\n+  template<class _CharT, class _Traits, class _Alloc>\n+  void _M_copy_to_string(basic_string<_CharT,_Traits,_Alloc>&) const;\n+\n+  size_t count() const { return this->_M_do_count(); }\n+\n+  size_t size() const { return _Nb; }\n+\n+  bool operator==(const bitset<_Nb>& __rhs) const {\n+    return this->_M_is_equal(__rhs);\n+  }\n+  bool operator!=(const bitset<_Nb>& __rhs) const {\n+    return !this->_M_is_equal(__rhs);\n+  }\n+\n+  bool test(size_t __pos) const {\n+    if (__pos >= _Nb)\n+      __throw_out_of_range(\"bitset\");\n+\n+    return _Unchecked_test(__pos);\n+  }\n+\n+  bool any() const { return this->_M_is_any(); }\n+  bool none() const { return !this->_M_is_any(); }\n+\n+  bitset<_Nb> operator<<(size_t __pos) const\n+    { return bitset<_Nb>(*this) <<= __pos; }\n+  bitset<_Nb> operator>>(size_t __pos) const\n+    { return bitset<_Nb>(*this) >>= __pos; }\n+\n+  //\n+  // EXTENSIONS: bit-find operations.  These operations are\n+  // experimental, and are subject to change or removal in future\n+  // versions.\n+  // \n+\n+  // find the index of the first \"on\" bit\n+  size_t _Find_first() const \n+    { return this->_M_do_find_first(_Nb); }\n+\n+  // find the index of the next \"on\" bit after prev\n+  size_t _Find_next( size_t __prev ) const \n+    { return this->_M_do_find_next(__prev, _Nb); }\n+\n+};\n+\n+//\n+// Definitions of non-inline member functions.\n+//\n+\n+template <size_t _Nb>\n+template<class _CharT, class _Traits, class _Alloc>\n+void bitset<_Nb>\n+  ::_M_copy_from_string(const basic_string<_CharT,_Traits,_Alloc>& __s,\n+                        size_t __pos,\n+                        size_t __n)\n+{\n+  reset();\n+  const size_t __nbits = min(_Nb, min(__n, __s.size() - __pos));\n+  for (size_t __i = 0; __i < __nbits; ++__i) {\n+    switch(__s[__pos + __nbits - __i - 1]) {\n+    case '0':\n+      break;\n+    case '1':\n+      set(__i);\n+      break;\n+    default:\n+      __throw_invalid_argument(\"bitset\");\n+    }\n+  }\n+}\n+\n+template <size_t _Nb>\n+template <class _CharT, class _Traits, class _Alloc>\n+void bitset<_Nb>\n+  ::_M_copy_to_string(basic_string<_CharT, _Traits, _Alloc>& __s) const\n+{\n+  __s.assign(_Nb, '0');\n+  \n+  for (size_t __i = 0; __i < _Nb; ++__i) \n+    if (_Unchecked_test(__i))\n+      __s[_Nb - 1 - __i] = '1';\n+}\n+\n+// ------------------------------------------------------------\n+\n+//\n+// 23.3.5.3 bitset operations:\n+//\n+\n+template <size_t _Nb>\n+inline bitset<_Nb> operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {\n+  bitset<_Nb> __result(__x);\n+  __result &= __y;\n+  return __result;\n+}\n+\n+\n+template <size_t _Nb>\n+inline bitset<_Nb> operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {\n+  bitset<_Nb> __result(__x);\n+  __result |= __y;\n+  return __result;\n+}\n+\n+template <size_t _Nb>\n+inline bitset<_Nb> operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) {\n+  bitset<_Nb> __result(__x);\n+  __result ^= __y;\n+  return __result;\n+}\n+\n+template <class _CharT, class _Traits, size_t _Nb>\n+basic_istream<_CharT, _Traits>&\n+operator>>(basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)\n+{\n+  typedef typename _Traits::char_type char_type;\n+  basic_string<_CharT, _Traits> __tmp;\n+  __tmp.reserve(_Nb);\n+\n+  // Skip whitespace\n+  typename basic_istream<_CharT, _Traits>::sentry __sentry(__is);\n+  if (__sentry) {\n+    basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();\n+    for (size_t __i = 0; __i < _Nb; ++__i) {\n+      static typename _Traits::int_type __eof = _Traits::eof();\n+\n+      typename _Traits::int_type __c1 = __buf->sbumpc();\n+      if (_Traits::eq_int_type(__c1, __eof)) {\n+        __is.setstate(ios_base::eofbit);\n+        break;\n+      }\n+      else {\n+        char_type __c2 = _Traits::to_char_type(__c1);\n+        char_type __c  = __is.narrow(__c2, '*');\n+\n+        if (__c == '0' || __c == '1')\n+          __tmp.push_back(__c);\n+        else if (_Traits::eq_int_type(__buf->sputbackc(__c2), __eof)) {\n+          __is.setstate(ios_base::failbit);\n+          break;\n+        }\n+      }\n+    }\n+\n+    if (__tmp.empty())\n+      __is.setstate(ios_base::failbit);\n+    else\n+      __x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n+  }\n+\n+  return __is;\n+}\n+\n+template <class _CharT, class _Traits, size_t _Nb>\n+basic_ostream<_CharT, _Traits>&\n+operator<<(basic_ostream<_CharT, _Traits>& __os, const bitset<_Nb>& __x)\n+{\n+  basic_string<_CharT, _Traits> __tmp;\n+  __x._M_copy_to_string(__tmp);\n+  return __os << __tmp;\n+}\n+\n+} // namespace std\n+\n+#undef __BITSET_WORDS\n+\n+#endif /* __GLIBCPP_BITSET */\n+\n+\n+// Local Variables:\n+// mode:C++\n+// End:\n+"}, {"sha": "5cb1e01eed15626dc395e8fd8a883b43e45bcbf6", "filename": "libstdc++-v3/include/std/cassert", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcassert", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcassert", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcassert?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cassert\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c assert.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-// This one should not have include guards.\n-#include <bits/std_cassert.h>\n-"}, {"sha": "b5bf92824554c63c9ea4136f252c8b047967da89", "filename": "libstdc++-v3/include/std/cctype", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcctype?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cctype\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c ctype.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CCTYPE\n-#include <bits/std_cctype.h>\n-#endif"}, {"sha": "0c1774984ee8906418d409dbffb288466a93cb1b", "filename": "libstdc++-v3/include/std/cerrno", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcerrno", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcerrno", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcerrno?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cerrno\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c errno.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CERRNO\n-#include <bits/std_cerrno.h>\n-#endif"}, {"sha": "fa5756daada7ffac291b39abc5ba16db253964fa", "filename": "libstdc++-v3/include/std/cfloat", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcfloat?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cfloat\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c float.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CFLOAT\n-#include <bits/std_cfloat.h>\n-#endif"}, {"sha": "345ad6140d738552f75a8c172b7c9f1913f0bab6", "filename": "libstdc++-v3/include/std/climits", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fclimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fclimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fclimits?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file climits\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c limits.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CLIMITS\n-#include <bits/std_climits.h>\n-#endif"}, {"sha": "3775010986a57da65949a28e49dc9ba776dff262", "filename": "libstdc++-v3/include/std/clocale", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fclocale?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file clocale\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c locale.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CLOCALE\n-#include <bits/std_clocale.h>\n-#endif"}, {"sha": "d565307c534eb3d32831761ebb5a5f2156920e0b", "filename": "libstdc++-v3/include/std/cmath", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcmath?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cmath\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c math.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CMATH\n-#include <bits/std_cmath.h>\n-#endif"}, {"sha": "18dd8675823767cfefef5b2e03869f7a54e6ea59", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 1027, "deletions": 6, "changes": 1033, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,1032 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file complex\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 26.2  Complex Numbers\n+// Note: this is not a conforming implementation.\n+// Initially implemented by Ulrich Drepper <drepper@cygnus.com>\n+// Improved by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>\n+//\n+\n+/** @file std_complex.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_COMPLEX\n-#include <bits/std_complex.h>\n+#define _CPP_COMPLEX\t1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <bits/cpp_type_traits.h>\n+#include <cmath>\n+#include <sstream>\n+\n+namespace std\n+{\n+  // Forward declarations\n+  template<typename _Tp> class complex;\n+  template<> class complex<float>;\n+  template<> class complex<double>;\n+  template<> class complex<long double>;\n+\n+  template<typename _Tp> _Tp abs(const complex<_Tp>&);\n+  template<typename _Tp> _Tp arg(const complex<_Tp>&);\n+  template<typename _Tp> _Tp norm(const complex<_Tp>&);\n+\n+  template<typename _Tp> complex<_Tp> conj(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> polar(const _Tp&, const _Tp& = 0);\n+\n+  // Transcendentals:\n+  template<typename _Tp> complex<_Tp> cos(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> cosh(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> exp(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> log(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> log10(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, int);\n+  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, const _Tp&);\n+  template<typename _Tp> complex<_Tp> pow(const complex<_Tp>&, \n+\t\t\t\t\t   const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> pow(const _Tp&, const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> sin(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> sinh(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> sqrt(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> tan(const complex<_Tp>&);\n+  template<typename _Tp> complex<_Tp> tanh(const complex<_Tp>&);\n+    \n+    \n+  // 26.2.2  Primary template class complex\n+  template<typename _Tp>\n+    class complex\n+    {\n+    public:\n+      typedef _Tp value_type;\n+      \n+      complex(const _Tp& = _Tp(), const _Tp & = _Tp());\n+\n+      // Let's the compiler synthetize the copy constructor   \n+      // complex (const complex<_Tp>&);\n+      template<typename _Up>\n+        complex(const complex<_Up>&);\n+        \n+      _Tp real() const;\n+      _Tp imag() const;\n+\n+      complex<_Tp>& operator=(const _Tp&);\n+      complex<_Tp>& operator+=(const _Tp&);\n+      complex<_Tp>& operator-=(const _Tp&);\n+      complex<_Tp>& operator*=(const _Tp&);\n+      complex<_Tp>& operator/=(const _Tp&);\n+\n+      // Let's the compiler synthetize the\n+      // copy and assignment operator\n+      // complex<_Tp>& operator= (const complex<_Tp>&);\n+      template<typename _Up>\n+        complex<_Tp>& operator=(const complex<_Up>&);\n+      template<typename _Up>\n+        complex<_Tp>& operator+=(const complex<_Up>&);\n+      template<typename _Up>\n+        complex<_Tp>& operator-=(const complex<_Up>&);\n+      template<typename _Up>\n+        complex<_Tp>& operator*=(const complex<_Up>&);\n+      template<typename _Up>\n+        complex<_Tp>& operator/=(const complex<_Up>&);\n+\n+    private:\n+      _Tp _M_real, _M_imag;\n+    };\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    complex<_Tp>::real() const { return _M_real; }\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    complex<_Tp>::imag() const { return _M_imag; }\n+\n+  template<typename _Tp>\n+    inline \n+    complex<_Tp>::complex(const _Tp& __r, const _Tp& __i)\n+    : _M_real(__r), _M_imag(__i) { }\n+\n+  template<typename _Tp>\n+    template<typename _Up>\n+    inline \n+    complex<_Tp>::complex(const complex<_Up>& __z)\n+    : _M_real(__z.real()), _M_imag(__z.imag()) { }\n+        \n+  template<typename _Tp>\n+    complex<_Tp>&\n+    complex<_Tp>::operator=(const _Tp& __t)\n+    {\n+     _M_real = __t;\n+     _M_imag = _Tp();\n+     return *this;\n+    } \n+\n+  // 26.2.5/1\n+  template<typename _Tp>\n+    inline complex<_Tp>&\n+    complex<_Tp>::operator+=(const _Tp& __t)\n+    {\n+      _M_real += __t;\n+      return *this;\n+    }\n+\n+  // 26.2.5/3\n+  template<typename _Tp>\n+    inline complex<_Tp>&\n+    complex<_Tp>::operator-=(const _Tp& __t)\n+    {\n+      _M_real -= __t;\n+      return *this;\n+    }\n+\n+  // 26.2.5/5\n+  template<typename _Tp>\n+    complex<_Tp>&\n+    complex<_Tp>::operator*=(const _Tp& __t)\n+    {\n+      _M_real *= __t;\n+      _M_imag *= __t;\n+      return *this;\n+    }\n+\n+  // 26.2.5/7\n+  template<typename _Tp>\n+    complex<_Tp>&\n+    complex<_Tp>::operator/=(const _Tp& __t)\n+    {\n+      _M_real /= __t;\n+      _M_imag /= __t;\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    template<typename _Up>\n+    complex<_Tp>&\n+    complex<_Tp>::operator=(const complex<_Up>& __z)\n+    {\n+      _M_real = __z.real();\n+      _M_imag = __z.imag();\n+      return *this;\n+    }\n+\n+  // 26.2.5/9\n+  template<typename _Tp>\n+    template<typename _Up>\n+    complex<_Tp>&\n+    complex<_Tp>::operator+=(const complex<_Up>& __z)\n+    {\n+      _M_real += __z.real();\n+      _M_imag += __z.imag();\n+      return *this;\n+    }\n+\n+  // 26.2.5/11\n+  template<typename _Tp>\n+    template<typename _Up>\n+    complex<_Tp>&\n+    complex<_Tp>::operator-=(const complex<_Up>& __z)\n+    {\n+      _M_real -= __z.real();\n+      _M_imag -= __z.imag();\n+      return *this;\n+    }\n+\n+  // 26.2.5/13\n+  // XXX: This is a grammar school implementation.\n+  template<typename _Tp>\n+    template<typename _Up>\n+    complex<_Tp>&\n+    complex<_Tp>::operator*=(const complex<_Up>& __z)\n+    {\n+      const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();\n+      _M_imag = _M_real * __z.imag() + _M_imag * __z.real();\n+      _M_real = __r;\n+      return *this;\n+    }\n+\n+  // 26.2.5/15\n+  // XXX: This is a grammar school implementation.\n+  template<typename _Tp>\n+    template<typename _Up>\n+    complex<_Tp>&\n+    complex<_Tp>::operator/=(const complex<_Up>& __z)\n+    {\n+      const _Tp __r =  _M_real * __z.real() + _M_imag * __z.imag();\n+      const _Tp __n = norm(__z);\n+      _M_imag = (_M_imag * __z.real() - _M_real * __z.imag()) / __n;\n+      _M_real = __r / __n;\n+      return *this;\n+    }\n+    \n+  // Operators:\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__x) += __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator+(const complex<_Tp>& __x, const _Tp& __y)\n+    { return complex<_Tp> (__x) += __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator+(const _Tp& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__y) += __x; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__x) -= __y; }\n+    \n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator-(const complex<_Tp>& __x, const _Tp& __y)\n+    { return complex<_Tp> (__x) -= __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator-(const _Tp& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__x) -= __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__x) *= __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator*(const complex<_Tp>& __x, const _Tp& __y)\n+    { return complex<_Tp> (__x) *= __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator*(const _Tp& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__y) *= __x; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__x) /= __y; }\n+    \n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator/(const complex<_Tp>& __x, const _Tp& __y)\n+    { return complex<_Tp> (__x) /= __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator/(const _Tp& __x, const complex<_Tp>& __y)\n+    { return complex<_Tp> (__x) /= __y; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator+(const complex<_Tp>& __x)\n+    { return __x; }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    operator-(const complex<_Tp>& __x)\n+    {  return complex<_Tp>(-__x.real(), -__x.imag()); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator==(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return __x.real() == __y.real() && __x.imag() == __y.imag(); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator==(const complex<_Tp>& __x, const _Tp& __y)\n+    { return __x.real() == __y && __x.imag() == _Tp(); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator==(const _Tp& __x, const complex<_Tp>& __y)\n+    { return __x == __y.real() && _Tp() == __y.imag(); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator!=(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    { return __x.real() != __y.real() || __x.imag() != __y.imag(); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator!=(const complex<_Tp>& __x, const _Tp& __y)\n+    { return __x.real() != __y || __x.imag() != _Tp(); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator!=(const _Tp& __x, const complex<_Tp>& __y)\n+    { return __x != __y.real() || _Tp() != __y.imag(); }\n+\n+  template<typename _Tp, typename _CharT, class _Traits>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)\n+    {\n+      _Tp __re_x, __im_x;\n+      _CharT __ch;\n+      __is >> __ch;\n+      if (__ch == '(') \n+\t{\n+\t  __is >> __re_x >> __ch;\n+\t  if (__ch == ',') \n+\t    {\n+\t      __is >> __im_x >> __ch;\n+\t      if (__ch == ')') \n+\t\t__x = complex<_Tp>(__re_x, __im_x);\n+\t      else\n+\t\t__is.setstate(ios_base::failbit);\n+\t    }\n+\t  else if (__ch == ')') \n+\t    __x = complex<_Tp>(__re_x, _Tp(0));\n+\t  else\n+\t    __is.setstate(ios_base::failbit);\n+\t}\n+      else \n+\t{\n+\t  __is.putback(__ch);\n+\t  __is >> __re_x;\n+\t  __x = complex<_Tp>(__re_x, _Tp(0));\n+\t}\n+      return __is;\n+    }\n+\n+  template<typename _Tp, typename _CharT, class _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __os, const complex<_Tp>& __x)\n+    {\n+      basic_ostringstream<_CharT, _Traits> __s;\n+      __s.flags(__os.flags());\n+      __s.imbue(__os.getloc());\n+      __s.precision(__os.precision());\n+      __s << '(' << __x.real() << \",\" << __x.imag() << ')';\n+      return __os << __s.str();\n+    }\n+\n+  // Values\n+  template<typename _Tp>\n+    inline _Tp\n+    real(const complex<_Tp>& __z)\n+    { return __z.real(); }\n+    \n+  template<typename _Tp>\n+    inline _Tp\n+    imag(const complex<_Tp>& __z)\n+    { return __z.imag(); }\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    abs(const complex<_Tp>& __z)\n+    {\n+      _Tp __x = __z.real();\n+      _Tp __y = __z.imag();\n+      const _Tp __s = max(abs(__x), abs(__y));\n+      if (__s == _Tp())  // well ...\n+        return __s;\n+      __x /= __s; \n+      __y /= __s;\n+      return __s * sqrt(__x * __x + __y * __y);\n+    }\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    arg(const complex<_Tp>& __z)\n+    { return atan2(__z.imag(), __z.real()); }\n+\n+  // 26.2.7/5: norm(__z) returns the squared magintude of __z.\n+  //     As defined, norm() is -not- a norm is the common mathematical\n+  //     sens used in numerics.  The helper class _Norm_helper<> tries to\n+  //     distinguish between builtin floating point and the rest, so as\n+  //     to deliver an answer as close as possible to the real value.\n+  template<bool>\n+    struct _Norm_helper\n+    {\n+      template<typename _Tp>\n+        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n+        {\n+          const _Tp __x = __z.real();\n+          const _Tp __y = __z.imag();\n+          return __x * __x + __y * __y;\n+        }\n+    };\n+\n+  template<>\n+    struct _Norm_helper<true>\n+    {\n+      template<typename _Tp>\n+        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n+        {\n+          _Tp __res = abs(__z);\n+          return __res * __res;\n+        }\n+    };\n+  \n+  template<typename _Tp>\n+    inline _Tp\n+    norm(const complex<_Tp>& __z)\n+    {\n+      return _Norm_helper<__is_floating<_Tp>::_M_type>::_S_do_it(__z);\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    polar(const _Tp& __rho, const _Tp& __theta)\n+    { return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta)); }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    conj(const complex<_Tp>& __z)\n+    { return complex<_Tp>(__z.real(), -__z.imag()); }\n+  \n+  // Transcendentals\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    cos(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(cos(__x) * cosh(__y), -sin(__x) * sinh(__y));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    cosh(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(cosh(__x) * cos(__y), sinh(__x) * sin(__y));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    exp(const complex<_Tp>& __z)\n+    { return polar(exp(__z.real()), __z.imag()); }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    log(const complex<_Tp>& __z)\n+    { return complex<_Tp>(log(abs(__z)), arg(__z)); }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    log10(const complex<_Tp>& __z)\n+    { return log(__z) / log(_Tp(10.0)); }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    sin(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp __y = __z.imag();\n+      return complex<_Tp>(sin(__x) * cosh(__y), cos(__x) * sinh(__y)); \n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    sinh(const complex<_Tp>& __z)\n+    {\n+      const _Tp __x = __z.real();\n+      const _Tp  __y = __z.imag();\n+      return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n+    }\n+\n+  template<typename _Tp>\n+    complex<_Tp>\n+    sqrt(const complex<_Tp>& __z)\n+    {\n+      _Tp __x = __z.real();\n+      _Tp __y = __z.imag();\n+\n+      if (__x == _Tp())\n+        {\n+          _Tp __t = sqrt(abs(__y) / 2);\n+          return complex<_Tp>(__t, __y < _Tp() ? -__t : __t);\n+        }\n+      else\n+        {\n+          _Tp __t = sqrt(2 * (abs(__z) + abs(__x)));\n+          _Tp __u = __t / 2;\n+          return __x > _Tp()\n+            ? complex<_Tp>(__u, __y / __t)\n+            : complex<_Tp>(abs(__y) / __t, __y < _Tp() ? -__u : __u);\n+        }\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    tan(const complex<_Tp>& __z)\n+    {\n+      return sin(__z) / cos(__z);\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    tanh(const complex<_Tp>& __z)\n+    {\n+      return sinh(__z) / cosh(__z);\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __z, int __n)\n+    {\n+      return __pow_helper(__z, __n);\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __x, const _Tp& __y)\n+    {\n+      return exp(__y * log(__x));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    {\n+      return exp(__y * log(__x));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const _Tp& __x, const complex<_Tp>& __y)\n+    {\n+      return exp(__y * log(__x));\n+    }\n+\n+  // 26.2.3  complex specializations\n+  // complex<float> specialization\n+  template<> class complex<float>\n+  {\n+  public:\n+    typedef float value_type;\n+    \n+    complex(float = 0.0f, float = 0.0f);\n+#ifdef _GLIBCPP_BUGGY_COMPLEX\n+    complex(const complex& __z) : _M_value(__z._M_value) { }\n+#endif\n+    explicit complex(const complex<double>&);\n+    explicit complex(const complex<long double>&);\n+\n+    float real() const;\n+    float imag() const;\n+\n+    complex<float>& operator=(float);\n+    complex<float>& operator+=(float);\n+    complex<float>& operator-=(float);\n+    complex<float>& operator*=(float);\n+    complex<float>& operator/=(float);\n+        \n+    // Let's the compiler synthetize the copy and assignment\n+    // operator.  It always does a pretty good job.\n+    // complex& operator= (const complex&);\n+    template<typename _Tp>\n+      complex<float>&operator=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<float>& operator+=(const complex<_Tp>&);\n+    template<class _Tp>\n+      complex<float>& operator-=(const complex<_Tp>&);\n+    template<class _Tp>\n+      complex<float>& operator*=(const complex<_Tp>&);\n+    template<class _Tp>\n+      complex<float>&operator/=(const complex<_Tp>&);\n+\n+  private:\n+    typedef __complex__ float _ComplexT;\n+    _ComplexT _M_value;\n+\n+    complex(_ComplexT __z) : _M_value(__z) { }\n+        \n+    friend class complex<double>;\n+    friend class complex<long double>;\n+  };\n+\n+  inline float\n+  complex<float>::real() const\n+  { return __real__ _M_value; }\n+\n+  inline float\n+  complex<float>::imag() const\n+  { return __imag__ _M_value; }\n+\n+  inline\n+  complex<float>::complex(float r, float i)\n+  {\n+    __real__ _M_value = r;\n+    __imag__ _M_value = i;\n+  }\n+\n+  inline complex<float>&\n+  complex<float>::operator=(float __f)\n+  {\n+    __real__ _M_value = __f;\n+    __imag__ _M_value = 0.0f;\n+    return *this;\n+  }\n+\n+  inline complex<float>&\n+  complex<float>::operator+=(float __f)\n+  {\n+    __real__ _M_value += __f;\n+    return *this;\n+  }\n+\n+  inline complex<float>&\n+  complex<float>::operator-=(float __f)\n+  {\n+    __real__ _M_value -= __f;\n+    return *this;\n+  }\n+\n+  inline complex<float>&\n+  complex<float>::operator*=(float __f)\n+  {\n+    _M_value *= __f;\n+    return *this;\n+  }\n+\n+  inline complex<float>&\n+  complex<float>::operator/=(float __f)\n+  {\n+    _M_value /= __f;\n+    return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline complex<float>&\n+  complex<float>::operator=(const complex<_Tp>& __z)\n+  {\n+    __real__ _M_value = __z.real();\n+    __imag__ _M_value = __z.imag();\n+    return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline complex<float>&\n+  complex<float>::operator+=(const complex<_Tp>& __z)\n+  {\n+    __real__ _M_value += __z.real();\n+    __imag__ _M_value += __z.imag();\n+    return *this;\n+  }\n+    \n+  template<typename _Tp>\n+    inline complex<float>&\n+    complex<float>::operator-=(const complex<_Tp>& __z)\n+    {\n+     __real__ _M_value -= __z.real();\n+     __imag__ _M_value -= __z.imag();\n+     return *this;\n+    } \n+\n+  template<typename _Tp>\n+    inline complex<float>&\n+    complex<float>::operator*=(const complex<_Tp>& __z)\n+    {\n+      _ComplexT __t;\n+      __real__ __t = __z.real();\n+      __imag__ __t = __z.imag();\n+      _M_value *= __t;\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<float>&\n+    complex<float>::operator/=(const complex<_Tp>& __z)\n+    {\n+      _ComplexT __t;\n+      __real__ __t = __z.real();\n+      __imag__ __t = __z.imag();\n+      _M_value /= __t;\n+      return *this;\n+    }\n+\n+  // 26.2.3  complex specializations\n+  // complex<double> specialization\n+  template<> class complex<double>\n+  {\n+  public:\n+    typedef double value_type;\n+\n+    complex(double  =0.0, double =0.0);\n+#ifdef _GLIBCPP_BUGGY_COMPLEX\n+    complex(const complex& __z) : _M_value(__z._M_value) { }\n+#endif\n+    complex(const complex<float>&);\n+    explicit complex(const complex<long double>&);\n+        \n+    double real() const;\n+    double imag() const;\n+        \n+    complex<double>& operator=(double);\n+    complex<double>& operator+=(double);\n+    complex<double>& operator-=(double);\n+    complex<double>& operator*=(double);\n+    complex<double>& operator/=(double);\n+\n+    // The compiler will synthetize this, efficiently.\n+    // complex& operator= (const complex&);\n+    template<typename _Tp>\n+      complex<double>& operator=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<double>& operator+=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<double>& operator-=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<double>& operator*=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<double>& operator/=(const complex<_Tp>&);\n+\n+  private:\n+    typedef __complex__ double _ComplexT;\n+    _ComplexT _M_value;\n+\n+    complex(_ComplexT __z) : _M_value(__z) { }\n+        \n+    friend class complex<float>;\n+    friend class complex<long double>;\n+  };\n+\n+  inline double\n+  complex<double>::real() const\n+  { return __real__ _M_value; }\n+\n+  inline double\n+  complex<double>::imag() const\n+  { return __imag__ _M_value; }\n+\n+  inline\n+  complex<double>::complex(double __r, double __i)\n+  {\n+    __real__ _M_value = __r;\n+    __imag__ _M_value = __i;\n+  }\n+\n+  inline complex<double>&\n+  complex<double>::operator=(double __d)\n+  {\n+    __real__ _M_value = __d;\n+    __imag__ _M_value = 0.0;\n+    return *this;\n+  }\n+\n+  inline complex<double>&\n+  complex<double>::operator+=(double __d)\n+  {\n+    __real__ _M_value += __d;\n+    return *this;\n+  }\n+\n+  inline complex<double>&\n+  complex<double>::operator-=(double __d)\n+  {\n+    __real__ _M_value -= __d;\n+    return *this;\n+  }\n+\n+  inline complex<double>&\n+  complex<double>::operator*=(double __d)\n+  {\n+    _M_value *= __d;\n+    return *this;\n+  }\n+\n+  inline complex<double>&\n+  complex<double>::operator/=(double __d)\n+  {\n+    _M_value /= __d;\n+    return *this;\n+  }\n+\n+  template<typename _Tp>\n+    inline complex<double>&\n+    complex<double>::operator=(const complex<_Tp>& __z)\n+    {\n+      __real__ _M_value = __z.real();\n+      __imag__ _M_value = __z.imag();\n+      return *this;\n+    }\n+    \n+  template<typename _Tp>\n+    inline complex<double>&\n+    complex<double>::operator+=(const complex<_Tp>& __z)\n+    {\n+      __real__ _M_value += __z.real();\n+      __imag__ _M_value += __z.imag();\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<double>&\n+    complex<double>::operator-=(const complex<_Tp>& __z)\n+    {\n+      __real__ _M_value -= __z.real();\n+      __imag__ _M_value -= __z.imag();\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<double>&\n+    complex<double>::operator*=(const complex<_Tp>& __z)\n+    {\n+      _ComplexT __t;\n+      __real__ __t = __z.real();\n+      __imag__ __t = __z.imag();\n+      _M_value *= __t;\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<double>&\n+    complex<double>::operator/=(const complex<_Tp>& __z)\n+    {\n+      _ComplexT __t;\n+      __real__ __t = __z.real();\n+      __imag__ __t = __z.imag();\n+      _M_value /= __t;\n+      return *this;\n+    }\n+\n+  // 26.2.3  complex specializations\n+  // complex<long double> specialization\n+  template<> class complex<long double>\n+  {\n+  public:\n+    typedef long double value_type;\n+\n+    complex(long double = 0.0L, long double = 0.0L);\n+#ifdef _GLIBCPP_BUGGY_COMPLEX\n+    complex(const complex& __z) : _M_value(__z._M_value) { }\n #endif\n+    complex(const complex<float>&);\n+    complex(const complex<double>&);\n+\n+    long double real() const;\n+    long double imag() const;\n+\n+    complex<long double>& operator= (long double);\n+    complex<long double>& operator+= (long double);\n+    complex<long double>& operator-= (long double);\n+    complex<long double>& operator*= (long double);\n+    complex<long double>& operator/= (long double);\n+\n+    // The compiler knows how to do this efficiently\n+    // complex& operator= (const complex&);\n+    template<typename _Tp>\n+      complex<long double>& operator=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<long double>& operator+=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<long double>& operator-=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<long double>& operator*=(const complex<_Tp>&);\n+    template<typename _Tp>\n+      complex<long double>& operator/=(const complex<_Tp>&);\n+\n+  private:\n+    typedef __complex__ long double _ComplexT;\n+    _ComplexT _M_value;\n+\n+    complex(_ComplexT __z) : _M_value(__z) { }\n+\n+    friend class complex<float>;\n+    friend class complex<double>;\n+  };\n+\n+  inline\n+  complex<long double>::complex(long double __r, long double __i)\n+  {\n+    __real__ _M_value = __r;\n+    __imag__ _M_value = __i;\n+  }\n+\n+  inline long double\n+  complex<long double>::real() const\n+  { return __real__ _M_value; }\n+\n+  inline long double\n+  complex<long double>::imag() const\n+  { return __imag__ _M_value; }\n+\n+  inline complex<long double>&   \n+  complex<long double>::operator=(long double __r)\n+  {\n+    __real__ _M_value = __r;\n+    __imag__ _M_value = 0.0L;\n+    return *this;\n+  }\n+\n+  inline complex<long double>&\n+  complex<long double>::operator+=(long double __r)\n+  {\n+    __real__ _M_value += __r;\n+    return *this;\n+  }\n+\n+  inline complex<long double>&\n+  complex<long double>::operator-=(long double __r)\n+  {\n+    __real__ _M_value -= __r;\n+    return *this;\n+  }\n+\n+  inline complex<long double>&\n+  complex<long double>::operator*=(long double __r)\n+  {\n+    _M_value *= __r;\n+    return *this;\n+  }\n+\n+  inline complex<long double>&\n+  complex<long double>::operator/=(long double __r)\n+  {\n+    _M_value /= __r;\n+    return *this;\n+  }\n+\n+  template<typename _Tp>\n+    inline complex<long double>&\n+    complex<long double>::operator=(const complex<_Tp>& __z)\n+    {\n+      __real__ _M_value = __z.real();\n+      __imag__ _M_value = __z.imag();\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<long double>&\n+    complex<long double>::operator+=(const complex<_Tp>& __z)\n+    {\n+      __real__ _M_value += __z.real();\n+      __imag__ _M_value += __z.imag();\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<long double>&\n+    complex<long double>::operator-=(const complex<_Tp>& __z)\n+    {\n+      __real__ _M_value -= __z.real();\n+      __imag__ _M_value -= __z.imag();\n+      return *this;\n+    }\n+    \n+  template<typename _Tp>\n+    inline complex<long double>&\n+    complex<long double>::operator*=(const complex<_Tp>& __z)\n+    {\n+      _ComplexT __t;\n+      __real__ __t = __z.real();\n+      __imag__ __t = __z.imag();\n+      _M_value *= __t;\n+      return *this;\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<long double>&\n+    complex<long double>::operator/=(const complex<_Tp>& __z)\n+    {\n+      _ComplexT __t;\n+      __real__ __t = __z.real();\n+      __imag__ __t = __z.imag();\n+      _M_value /= __t;\n+      return *this;\n+    }\n+\n+  // These bits have to be at the end of this file, so that the\n+  // specializations have all been defined.\n+  // ??? No, they have to be there because of compiler limitation at\n+  // inlining.  It suffices that class specializations be defined.\n+  inline\n+  complex<float>::complex(const complex<double>& __z)\n+  : _M_value(_ComplexT(__z._M_value)) { }\n+\n+  inline\n+  complex<float>::complex(const complex<long double>& __z)\n+  : _M_value(_ComplexT(__z._M_value)) { }\n+\n+  inline\n+  complex<double>::complex(const complex<float>& __z) \n+  : _M_value(_ComplexT(__z._M_value)) { }\n+\n+  inline\n+  complex<double>::complex(const complex<long double>& __z)\n+  {\n+    __real__ _M_value = __z.real();\n+    __imag__ _M_value = __z.imag();\n+  }\n+\n+  inline\n+  complex<long double>::complex(const complex<float>& __z)\n+  : _M_value(_ComplexT(__z._M_value)) { }\n+\n+  inline\n+  complex<long double>::complex(const complex<double>& __z)\n+  : _M_value(_ComplexT(__z._M_value)) { }\n+} // namespace std\n+\n+#endif\t/* _CPP_COMPLEX */"}, {"sha": "daf11b354a806ca8fa776d8fd3e73aff5b5a8fd2", "filename": "libstdc++-v3/include/std/csetjmp", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcsetjmp?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file csetjmp\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c setjmp.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSETJMP\n-#include <bits/std_csetjmp.h>\n-#endif"}, {"sha": "3790ff51882d1defa57dc29d0ce82ddba0a34ff0", "filename": "libstdc++-v3/include/std/csignal", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcsignal?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file csignal\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c signal.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSIGNAL\n-#include <bits/std_csignal.h>\n-#endif"}, {"sha": "8dfe625bcaec1179b1b60a018b58f5fdc2c5d440", "filename": "libstdc++-v3/include/std/cstdarg", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdarg?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cstdarg\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c stdarg.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSTDARG\n-#include <bits/std_cstdarg.h>\n-#endif"}, {"sha": "4b3d1f5be78706b15b438ca7c10bcf29613adfaa", "filename": "libstdc++-v3/include/std/cstddef", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstddef?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cstddef\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c stddef.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSTDDEF\n-#include <bits/std_cstddef.h>\n-#endif"}, {"sha": "b546585091d0df88c5c5a02c347c673c0d32efd4", "filename": "libstdc++-v3/include/std/cstdio", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdio?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cstdio\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c stdio.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSTDIO\n-#include <bits/std_cstdio.h>\n-#endif"}, {"sha": "2feeb533b658eb495a78d421b1cf8f6d86d8b65f", "filename": "libstdc++-v3/include/std/cstdlib", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstdlib?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cstdlib\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c stdlib.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSTDLIB\n-#include <bits/std_cstdlib.h>\n-#endif"}, {"sha": "5652803abd8782aa94832cd71cc4d9ffd6a23619", "filename": "libstdc++-v3/include/std/cstring", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcstring?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cstring\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c string.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CSTRING\n-#include <bits/std_cstring.h>\n-#endif"}, {"sha": "aa928d72870d3b10b51d5ef45455078da38bd517", "filename": "libstdc++-v3/include/std/cwchar", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcwchar?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cwchar\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c wchar.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CWCHAR\n-#include <bits/std_cwchar.h>\n-#endif"}, {"sha": "b0de79eeb9d9a0bcf000097d41084de9e8eb1bed", "filename": "libstdc++-v3/include/std/cwctype", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48180d6890b349f441109459b1575ef819e7651e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcwctype?ref=48180d6890b349f441109459b1575ef819e7651e", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- std header.\n-\n-// Copyright (C) 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file cwctype\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c wctype.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std.\n- */\n-\n-#ifndef _CPP_CWCTYPE\n-#include <bits/std_cwctype.h>\n-#endif"}, {"sha": "394eef3b8457859d522297e579fd066acb4f5f60", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <deque> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,51 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file deque\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_deque.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_DEQUE\n-#include <bits/std_deque.h>\n-#endif\n+#define _CPP_DEQUE 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/functexcept.h>\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_alloc.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_deque.h>\n+\n+#endif /* _CPP_DEQUE */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "350a691d68ce9d24d4804f7288b7ab14ed9ac754", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 403, "deletions": 6, "changes": 409, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// File based streams -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,408 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file fstream\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.8  File-based streams\n+//\n+\n+/** @file std_fstream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_FSTREAM\n-#include <bits/std_fstream.h>\n+#define _CPP_FSTREAM\t1\n+\n+#pragma GCC system_header\n+\n+#include <istream>\n+#include <ostream>\n+#include <bits/basic_file.h>\n+#include <locale>\t// For codecvt\n+#include <bits/gthr.h>\n+\n+namespace std \n+{\n+  template<typename _CharT, typename _Traits>\n+    class basic_filebuf : public basic_streambuf<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT                     \t        char_type;\n+      typedef _Traits                    \t        traits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+      \n+      // Non-standard Types:\n+      typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n+      typedef basic_filebuf<char_type, traits_type>     __filebuf_type;\n+      typedef __basic_file<char_type>\t\t        __file_type;\n+      typedef typename traits_type::state_type          __state_type;\n+      typedef codecvt<char_type, char, __state_type>    __codecvt_type;\n+      typedef typename __codecvt_type::result \t        __res_type;\n+      typedef ctype<char_type>                          __ctype_type;\n+\n+      friend class ios_base; // For sync_with_stdio.\n+\n+    private:\n+      // Data Members:\n+      // External buffer.\n+      __file_type* \t\t_M_file;\n+\n+      // Current and beginning state type for codecvt.\n+      __state_type\t\t_M_state_cur;\n+      __state_type \t\t_M_state_beg; \t\n+\n+      // MT lock inherited from libio or other low-level io library.\n+      __c_lock          \t_M_lock;\n+\n+      // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer..\n+      bool\t\t\t_M_buf_allocated;\n+\n+      // XXX Needed? \n+      bool\t\t\t_M_last_overflowed;  \n+  \n+    public:\n+      // Constructors/destructor:\n+      basic_filebuf();\n+\n+      // Non-standard ctor:\n+      basic_filebuf(__c_file_type* __f, ios_base::openmode __mode, \n+\t\t    int_type __s = static_cast<int_type>(BUFSIZ));\n+ \n+      // Non-standard member:\n+      int\n+      fd();\n+\n+      virtual \n+      ~basic_filebuf() \n+      { \n+\tthis->close();\n+\t_M_last_overflowed = false;\n+      }\n+\n+      // Members:\n+      bool \n+      is_open(void) const { return _M_file ? _M_file->is_open() : false; }\n+    \n+      __filebuf_type* \n+      open(const char* __s, ios_base::openmode __mode);\n+    \n+      __filebuf_type* \n+      close(void);\n+\n+    protected:\n+      void \n+      _M_allocate_internal_buffer();\n+\n+      void \n+      _M_destroy_internal_buffer();\n+\n+      void \n+      _M_allocate_pback_buffer();\n+\n+      // Create __file_type object and initialize it properly.\n+      void\n+      _M_allocate_file();\n+\n+      // Overridden virtual functions:\n+      virtual streamsize \n+      showmanyc(void);\n+   \n+      // Stroustrup, 1998, p. 628 \n+      // underflow() and uflow() functions are called to get the next\n+      // charater from the real input source when the buffer is empty.\n+      // Buffered input uses underflow()\n+      virtual int_type \n+      underflow(void);\n+\n+      virtual int_type \n+      pbackfail(int_type __c = _Traits::eof());\n+\n+      // NB: For what the standard expects of the overflow function,\n+      // see _M_really_overflow(), below. Because basic_streambuf's\n+      // sputc/sputn call overflow directly, and the complications of\n+      // this implementation's setting of the initial pointers all\n+      // equal to _M_buf when initializing, it seems essential to have\n+      // this in actuality be a helper function that checks for the\n+      // eccentricities of this implementation, and then call\n+      // overflow() if indeed the buffer is full.\n+      virtual int_type \n+      overflow(int_type __c = _Traits::eof());\n+\n+      // Stroustrup, 1998, p 648\n+      // The overflow() function is called to transfer characters to the\n+      // real output destination when the buffer is full. A call to\n+      // overflow(c) outputs the contents of the buffer plus the\n+      // character c.\n+      // 27.5.2.4.5 \n+      // Consume some sequence of the characters in the pending sequence.\n+      int_type \n+      _M_really_overflow(int_type __c = _Traits::eof());\n+    \n+      virtual __streambuf_type* \n+      setbuf(char_type* __s, streamsize __n);\n+    \n+      virtual pos_type \n+      seekoff(off_type __off, ios_base::seekdir __way,\n+\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n+\n+      virtual pos_type \n+      seekpos(pos_type __pos,\n+\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n+\n+      virtual int \n+      sync(void)\n+      {\n+\tbool __testput = _M_out_cur && _M_out_beg < _M_out_end;\n+\tif (__testput)\n+\t  {\n+            // Make sure that libio resyncs its idea of the file position\n+            // with the external file.\n+            _M_file->sync();\n+\n+\t    // Need to restore current position. This interpreted as\n+\t    // the position of the external byte sequence (_M_file)\n+\t    // plus the offset in the current internal buffer\n+\t    // (_M_out_beg - _M_out_cur)\n+\t    streamoff __cur = _M_file->seekoff(0, ios_base::cur);\n+\t    off_type __off = _M_out_cur - _M_out_beg;\n+\t    _M_really_overflow();\n+\t    _M_file->seekpos(__cur + __off);\n+\t  }\n+\t_M_last_overflowed = false;\t\n+\treturn 0;\n+      }\n+      \n+      virtual void \n+      imbue(const locale& __loc);\n+\n+      virtual streamsize \n+      xsgetn(char_type* __s, streamsize __n)\n+      {\n+\tstreamsize __ret = 0;\n+\t// Clear out pback buffer before going on to the real deal...\n+\tif (_M_pback_init)\n+\t  {\n+\t    while (__ret < __n && _M_in_cur < _M_in_end)\n+\t      {\n+\t\t*__s = *_M_in_cur;\n+\t\t++__ret;\n+\t\t++__s;\n+\t\t++_M_in_cur;\n+\t      }\n+\t    _M_pback_destroy();\n+\t  }\n+\tif (__ret < __n)\n+\t  __ret += __streambuf_type::xsgetn(__s, __n - __ret);\n+\treturn __ret;\n+      }\n+ \n+      virtual streamsize \n+      xsputn(const char_type* __s, streamsize __n)\n+      {\n+\t_M_pback_destroy();\n+\treturn __streambuf_type::xsputn(__s, __n);\n+      }\n+       \n+      void\n+      _M_output_unshift();\n+    };\n+\n+\n+  // 27.8.1.5  Template class basic_ifstream\n+  template<typename _CharT, typename _Traits>\n+    class basic_ifstream : public basic_istream<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard types:\n+      typedef basic_filebuf<char_type, traits_type> \t__filebuf_type;\n+      typedef basic_istream<char_type, traits_type>\t__istream_type;\n+    \n+    private:\n+      __filebuf_type\t_M_filebuf;\n+\n+    public:\n+     // Constructors/Destructors:\n+      basic_ifstream()\n+      : __istream_type(NULL), _M_filebuf()\n+      { this->init(&_M_filebuf); }\n+\n+      explicit \n+      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)\n+      : __istream_type(NULL), _M_filebuf()\n+      { \n+\tthis->init(&_M_filebuf); \n+\tthis->open(__s, __mode); \n+      }\n+    \n+      ~basic_ifstream()\n+      { }\n+\n+      // Members:\n+      __filebuf_type* \n+      rdbuf() const \n+      { return const_cast<__filebuf_type*>(&_M_filebuf); }\n+\n+      bool \n+      is_open(void) { return _M_filebuf.is_open(); }\n+\n+      void \n+      open(const char* __s, ios_base::openmode __mode = ios_base::in)\n+      { \n+\tif (_M_filebuf.open(__s, __mode | ios_base::in) == NULL)\n+\t  this->setstate(ios_base::failbit); \n+      }\n+\n+      void \n+      close(void)\n+      { \n+\tif (!_M_filebuf.close())\n+\t  this->setstate(ios_base::failbit);\t\n+      }\n+    };\n+\n+  \n+  // 27.8.1.8  Template class basic_ofstream\n+  template<typename _CharT, typename _Traits>\n+    class basic_ofstream : public basic_ostream<_CharT,_Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard types:\n+      typedef basic_filebuf<char_type, traits_type> \t__filebuf_type;\n+      typedef basic_ostream<char_type, traits_type>\t__ostream_type;\n+      \n+    private:\n+      __filebuf_type\t_M_filebuf;\n+\n+    public:\n+      // Constructors:\n+      basic_ofstream()\n+      : __ostream_type(NULL), _M_filebuf()\n+      { this->init(&_M_filebuf); }\n+      \n+      explicit \n+      basic_ofstream(const char* __s, \n+\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n+      : __ostream_type(NULL), _M_filebuf()\n+      { \n+\tthis->init(&_M_filebuf); \n+\tthis->open(__s, __mode); \n+      }\n+\n+      ~basic_ofstream()\n+      { }\n+\n+      // Members:\n+      __filebuf_type* \n+      rdbuf(void) const\n+      { return const_cast<__filebuf_type*>(&_M_filebuf); }\n+ \n+      bool \n+      is_open(void) { return _M_filebuf.is_open(); }\n+\n+      void \n+      open(const char* __s, \n+\t   ios_base::openmode __mode = ios_base::out | ios_base::trunc)\n+      { \n+\tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n+\t  this->setstate(ios_base::failbit); \n+      }\n+\n+      void \n+      close(void)\n+      { \n+\tif (!_M_filebuf.close())\n+\t  setstate(ios_base::failbit); \n+      }\n+    };\n+\n+\n+  // 27.8.1.11  Template class basic_fstream\n+  template<typename _CharT, typename _Traits>\n+    class basic_fstream : public basic_iostream<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard types:\n+      typedef basic_filebuf<char_type, traits_type> \t__filebuf_type;\n+      typedef basic_ios<char_type, traits_type>\t\t__ios_type;\n+      typedef basic_iostream<char_type, traits_type>\t__iostream_type;\n+\n+    private:\n+      __filebuf_type\t_M_filebuf;\n+      \n+    public:\n+      // Constructors/destructor:\n+      basic_fstream()\n+      : __iostream_type(NULL), _M_filebuf()\n+      { this->init(&_M_filebuf); }\n+\n+      explicit \n+      basic_fstream(const char* __s,\n+\t\t    ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      : __iostream_type(NULL), _M_filebuf()\n+      { \n+\tthis->init(&_M_filebuf); \n+\tthis->open(__s, __mode); \n+      }\n+ \n+      ~basic_fstream()\n+      { }\n+    \n+      // Members:\n+      __filebuf_type* \n+      rdbuf(void) const \n+      { return const_cast<__filebuf_type*>(&_M_filebuf); }\n+\n+      bool \n+      is_open(void) { return _M_filebuf.is_open(); }\n+\n+      void \n+      open(const char* __s, \n+\t   ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      { \n+\tif (!_M_filebuf.open(__s, __mode))\n+\t  setstate(ios_base::failbit); \n+      }\n+\n+      void \n+      close(void)\n+      { \n+\tif (!_M_filebuf.close())\n+\t  setstate(ios_base::failbit); \n+      }\n+    };\n+} // namespace std\n+\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+# define export\n+#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+# include <bits/fstream.tcc>\n #endif\n+#endif\n+\n+#endif\t\n+"}, {"sha": "16702caead1021b8858466efe592e7653ca70a6b", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <functional> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,36 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file functional\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ * Copyright (c) 1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ */\n+\n+/** @file std_functional.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_FUNCTIONAL\n-#include <bits/std_functional.h>\n-#endif\n+#define _CPP_FUNCTIONAL 1\n+\n+#pragma GCC system_header\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include <bits/stl_function.h>\n+\n+#endif /* _CPP_FUNCTIONAL */\n+\n+// Local Variables:\n+// mode:C++\n+// End:\n+"}, {"sha": "ab279d20ab609d35477db2d0e5d8ee723d138d80", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 191, "deletions": 7, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Standard stream manipulators -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,195 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file iomanip\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.6.3  Standard manipulators\n+//\n+\n+/** @file std_iomanip.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_IOMANIP\n-#include <bits/std_iomanip.h>\n-#endif\n+#define _CPP_IOMANIP 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <istream>\n+#include <functional>\n+\n+namespace std\n+{\n+\n+  struct _Resetiosflags { ios_base::fmtflags _M_mask; };\n+\n+  inline _Resetiosflags \n+  resetiosflags(ios_base::fmtflags __mask)\n+  { \n+    _Resetiosflags __x; \n+    __x._M_mask = __mask; \n+    return __x; \n+  }\n+\n+  template <class _CharT, class _Traits>\n+    basic_istream<_CharT,_Traits>& \n+    operator>>(basic_istream<_CharT,_Traits>& __is, _Resetiosflags __f)\n+    { \n+      __is.setf(ios_base::fmtflags(0), __f._M_mask); \n+      return __is; \n+    }\n+\n+  template <class _CharT, class _Traits>\n+    basic_ostream<_CharT,_Traits>& \n+    operator<<(basic_ostream<_CharT,_Traits>& __os, _Resetiosflags __f)\n+    { \n+      __os.setf(ios_base::fmtflags(0), __f._M_mask); \n+      return __os; \n+    }\n+\n+\n+  struct _Setiosflags { ios_base::fmtflags _M_mask; };\n+\n+  inline _Setiosflags \n+  setiosflags(ios_base::fmtflags __mask)\n+  { \n+    _Setiosflags __x; \n+    __x._M_mask = __mask; \n+    return __x; \n+  }\n+\n+  template <class _CharT, class _Traits>\n+    basic_istream<_CharT,_Traits>& \n+    operator>>(basic_istream<_CharT,_Traits>& __is, _Setiosflags __f)\n+    { \n+      __is.setf(__f._M_mask); \n+      return __is; \n+    }\n+\n+  template <class _CharT, class _Traits>\n+    basic_ostream<_CharT,_Traits>& \n+    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setiosflags __f)\n+    { \n+      __os.setf(__f._M_mask); \n+      return __os; \n+    }\n+\n+\n+  struct _Setbase { int _M_base; };\n+\n+  inline _Setbase \n+  setbase(int __base)\n+  { \n+    _Setbase __x; \n+    __x._M_base = __base; \n+    return __x; \n+  }\n+\n+  template <class _CharT, class _Traits>\n+    basic_istream<_CharT,_Traits>& \n+    operator>>(basic_istream<_CharT,_Traits>& __is, _Setbase __f)\n+    {\n+      __is.setf(__f._M_base ==  8 ? ios_base::oct : \n+\t      __f._M_base == 10 ? ios_base::dec : \n+\t      __f._M_base == 16 ? ios_base::hex : \n+\t      ios_base::fmtflags(0), ios_base::basefield);\n+      return __is; \n+    }\n+  \n+  template <class _CharT, class _Traits>\n+    basic_ostream<_CharT,_Traits>& \n+    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setbase __f)\n+    {\n+      __os.setf(__f._M_base ==  8 ? ios_base::oct : \n+\t\t__f._M_base == 10 ? ios_base::dec : \n+\t\t__f._M_base == 16 ? ios_base::hex : \n+\t\tios_base::fmtflags(0), ios_base::basefield);\n+      return __os; \n+    }\n+  \n+\n+  template<class _CharT> \n+    struct _Setfill { _CharT _M_c; };\n+\n+  template<class _CharT> \n+    _Setfill<_CharT> \n+    setfill(_CharT __c)\n+    { \n+      _Setfill<_CharT> __x; \n+      __x._M_c = __c; \n+      return __x; \n+    }\n+\n+  template <class _CharT, class _Traits>\n+    basic_istream<_CharT,_Traits>& \n+    operator>>(basic_istream<_CharT,_Traits>& __is, _Setfill<_CharT> __f)\n+    { \n+      __is.fill(__f._M_c); \n+      return __is; \n+    }\n+\n+  template <class _CharT, class _Traits>\n+    basic_ostream<_CharT,_Traits>& \n+    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setfill<_CharT> __f)\n+    { \n+      __os.fill(__f._M_c); \n+      return __os; \n+    }\n+\n+\n+  struct _Setprecision { int _M_n; };\n+\n+  inline _Setprecision \n+  setprecision(int __n)\n+  { \n+    _Setprecision __x; \n+    __x._M_n = __n; \n+    return __x; \n+  }\n+\n+  template <class _CharT, class _Traits>\n+    basic_istream<_CharT,_Traits>& \n+    operator>>(basic_istream<_CharT,_Traits>& __is, _Setprecision __f)\n+    { \n+      __is.precision(__f._M_n); \n+      return __is; \n+    }\n+\n+  template <class _CharT, class _Traits>\n+    basic_ostream<_CharT,_Traits>& \n+    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setprecision __f)\n+    { \n+      __os.precision(__f._M_n); \n+      return __os; \n+    }\n+\n+\n+  struct _Setw { int _M_n; };\n+\n+  inline _Setw \n+  setw(int __n)\n+  { \n+    _Setw __x; \n+    __x._M_n = __n; \n+    return __x; \n+  }\n+\n+  template <class _CharT, class _Traits>\n+    basic_istream<_CharT,_Traits>& \n+    operator>>(basic_istream<_CharT,_Traits>& __is, _Setw __f)\n+    { \n+      __is.width(__f._M_n); \n+      return __is; \n+    }\n+\n+  template <class _CharT, class _Traits>\n+    basic_ostream<_CharT,_Traits>& \n+    operator<<(basic_ostream<_CharT,_Traits>& __os, _Setw __f)\n+    { \n+      __os.width(__f._M_n); \n+      return __os; \n+    }\n+} // namespace std\n+\n+#endif\t"}, {"sha": "1e61c366d4e58075ec68bbc4776f6b452cfe8437", "filename": "libstdc++-v3/include/std/ios", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Iostreams base classes -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,28 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file ios\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.4  Iostreams base classes\n+//\n+\n+/** @file std_ios.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_IOS\n-#include <bits/std_ios.h>\n-#endif\n+#define _CPP_IOS\t1\n+\n+#pragma GCC system_header\n+\n+#include <iosfwd>\n+#include <exception> \t\t// For ios_base::failure\n+#include <bits/char_traits.h> \t// For char_traits, streamoff, streamsize, fpos\n+#include <cstdio> \t// For SEEK_SET, SEEK_CUR, SEEK_END\n+#include <bits/localefwd.h>\t// For class locale\n+#include <bits/ios_base.h>\t// For ios_base declarations.\n+#include <streambuf> \n+#include <bits/basic_ios.h>\n+\n+#endif\t/* _CPP_IOS */\n+"}, {"sha": "93c30b3fbf41450f02e202b14a369ff4ec8f9cf8", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 105, "deletions": 6, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Forwarding declarations -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,110 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file iosfwd\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.2  Forward declarations\n+//\n+\n+/** @file std_iosfwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_IOSFWD\n-#include <bits/std_iosfwd.h>\n+#define _CPP_IOSFWD 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <bits/stringfwd.h> // For string forward declarations.\n+#include <bits/fpos.h>\n+#include <bits/functexcept.h>\n+\n+namespace std \n+{\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_ios;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_streambuf;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_istream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_ostream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_iostream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+\t    typename _Alloc = allocator<_CharT> >\n+    class basic_stringbuf;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+\t   typename _Alloc = allocator<_CharT> >\n+    class basic_istringstream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+\t   typename _Alloc = allocator<_CharT> >\n+    class basic_ostringstream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+\t   typename _Alloc = allocator<_CharT> >\n+    class basic_stringstream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_filebuf;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_ifstream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_ofstream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class basic_fstream;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class istreambuf_iterator;\n+\n+  template<typename _CharT, typename _Traits = char_traits<_CharT> >\n+    class ostreambuf_iterator;\n+\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // Not included.   (??? Apparently no LWG number?)\n+  class ios_base; \n+#endif\n+\n+  typedef basic_ios<char> \t\tios;\n+  typedef basic_streambuf<char> \tstreambuf;\n+  typedef basic_istream<char> \t\tistream;\n+  typedef basic_ostream<char> \t\tostream;\n+  typedef basic_iostream<char> \t\tiostream;\n+  typedef basic_stringbuf<char> \tstringbuf;\n+  typedef basic_istringstream<char> \tistringstream;\n+  typedef basic_ostringstream<char> \tostringstream;\n+  typedef basic_stringstream<char> \tstringstream;\n+  typedef basic_filebuf<char> \t\tfilebuf;\n+  typedef basic_ifstream<char> \t\tifstream;\n+  typedef basic_ofstream<char> \t\tofstream;\n+  typedef basic_fstream<char> \t\tfstream;\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  typedef basic_ios<wchar_t> \t\twios;\n+  typedef basic_streambuf<wchar_t> \twstreambuf;\n+  typedef basic_istream<wchar_t> \twistream;\n+  typedef basic_ostream<wchar_t> \twostream;\n+  typedef basic_iostream<wchar_t> \twiostream;\n+  typedef basic_stringbuf<wchar_t> \twstringbuf;\n+  typedef basic_istringstream<wchar_t> \twistringstream;\n+  typedef basic_ostringstream<wchar_t> \twostringstream;\n+  typedef basic_stringstream<wchar_t> \twstringstream;\n+  typedef basic_filebuf<wchar_t> \twfilebuf;\n+  typedef basic_ifstream<wchar_t> \twifstream;\n+  typedef basic_ofstream<wchar_t> \twofstream;\n+  typedef basic_fstream<wchar_t> \twfstream;\n+#endif\n+} // namespace std\n+\n #endif"}, {"sha": "47b83798f5d1c48f88b2da00ccec3af15b699b16", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Standard iostream objects -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,13 +27,39 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file iostream\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.3  Standard iostream objects\n+//\n+\n+/** @file std_iostream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_IOSTREAM\n-#include <bits/std_iostream.h>\n+#define _CPP_IOSTREAM\t1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <ostream>\n+#include <istream>\n+\n+namespace std \n+{\n+  extern istream cin;\n+  extern ostream cout;\n+  extern ostream cerr;\n+  extern ostream clog;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  extern wistream wcin;\n+  extern wostream wcout;\n+  extern wostream wcerr;\n+  extern wostream wclog;\n #endif\n \n+  // For construction of filebuffers for cout, cin, cerr, clog et. al.\n+  static ios_base::Init __ioinit;\n+} // namespace std\n \n+#endif"}, {"sha": "7b5185289b235a45392f721bfd9b3799c477943d", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 268, "deletions": 6, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Input streams -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,273 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file istream\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.6.1  Input streams\n+//\n+\n+/** @file std_istream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_ISTREAM\n-#include <bits/std_istream.h>\n+#define _CPP_ISTREAM\t1\n+\n+#pragma GCC system_header\n+\n+#include <ios>\n+#include <limits> // For numeric_limits\n+\n+namespace std\n+{\n+  // 27.6.1.1 Template class basic_istream\n+  template<typename _CharT, typename _Traits>\n+    class basic_istream : virtual public basic_ios<_CharT, _Traits>\n+    {\n+    public:\n+      // Types (inherited from basic_ios (27.4.4)):\n+      typedef _CharT                     \t\tchar_type;\n+      typedef typename _Traits::int_type \t\tint_type;\n+      typedef typename _Traits::pos_type \t\tpos_type;\n+      typedef typename _Traits::off_type \t\toff_type;\n+      typedef _Traits                    \t\ttraits_type;\n+      \n+      // Non-standard Types:\n+      typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n+      typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n+      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n+      typedef istreambuf_iterator<_CharT, _Traits>\t__istreambuf_iter;\n+      typedef num_get<_CharT, __istreambuf_iter>        __numget_type;\n+      typedef ctype<_CharT>           \t\t\t__ctype_type;\n+\n+    protected:\n+      // Data Members:\n+      streamsize \t\t_M_gcount;\n+\n+    public:\n+      // 27.6.1.1.1 Constructor/destructor:\n+      explicit \n+      basic_istream(__streambuf_type* __sb)\n+      { \n+\tthis->init(__sb);\n+\t_M_gcount = streamsize(0);\n+      }\n+\n+      virtual \n+      ~basic_istream() \n+      { _M_gcount = streamsize(0); }\n+\n+      // 27.6.1.1.2 Prefix/suffix:\n+      class sentry;\n+      friend class sentry;\n+\n+      // 27.6.1.2 Formatted input:\n+      // 27.6.1.2.3 basic_istream::operator>>\n+      __istream_type&\n+      operator>>(__istream_type& (*__pf)(__istream_type&));\n+\n+      __istream_type&\n+      operator>>(__ios_type& (*__pf)(__ios_type&));\n+\n+      __istream_type&\n+      operator>>(ios_base& (*__pf)(ios_base&));\n+      \n+      // 27.6.1.2.2 Arithmetic Extractors\n+      __istream_type& \n+      operator>>(bool& __n);\n+      \n+      __istream_type& \n+      operator>>(short& __n);\n+      \n+      __istream_type& \n+      operator>>(unsigned short& __n);\n+\n+      __istream_type& \n+      operator>>(int& __n);\n+      \n+      __istream_type& \n+      operator>>(unsigned int& __n);\n+\n+      __istream_type& \n+      operator>>(long& __n);\n+      \n+      __istream_type& \n+      operator>>(unsigned long& __n);\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+      __istream_type& \n+      operator>>(long long& __n);\n+\n+      __istream_type& \n+      operator>>(unsigned long long& __n);\n #endif\n+\n+      __istream_type& \n+      operator>>(float& __f);\n+\n+      __istream_type& \n+      operator>>(double& __f);\n+\n+      __istream_type& \n+      operator>>(long double& __f);\n+\n+      __istream_type& \n+      operator>>(void*& __p);\n+\n+      __istream_type& \n+      operator>>(__streambuf_type* __sb);\n+      \n+      // 27.6.1.3 Unformatted input:\n+      inline streamsize \n+      gcount(void) const \n+      { return _M_gcount; }\n+      \n+      int_type \n+      get(void);\n+\n+      __istream_type& \n+      get(char_type& __c);\n+\n+      __istream_type& \n+      get(char_type* __s, streamsize __n, char_type __delim);\n+\n+      inline __istream_type& \n+      get(char_type* __s, streamsize __n)\n+      { return this->get(__s, __n, this->widen('\\n')); }\n+\n+      __istream_type&\n+      get(__streambuf_type& __sb, char_type __delim);\n+\n+      inline __istream_type&\n+      get(__streambuf_type& __sb)\n+      { return this->get(__sb, this->widen('\\n')); }\n+\n+      __istream_type& \n+      getline(char_type* __s, streamsize __n, char_type __delim);\n+\n+      inline __istream_type& \n+      getline(char_type* __s, streamsize __n)\n+      { return this->getline(__s, __n, this->widen('\\n')); }\n+\n+      __istream_type& \n+      ignore(streamsize __n = 1, int_type __delim = traits_type::eof());\n+      \n+      int_type \n+      peek(void);\n+      \n+      __istream_type& \n+      read(char_type* __s, streamsize __n);\n+\n+      streamsize \n+      readsome(char_type* __s, streamsize __n);\n+      \n+      __istream_type& \n+      putback(char_type __c);\n+\n+      __istream_type& \n+      unget(void);\n+\n+      int \n+      sync(void);\n+\n+      pos_type \n+      tellg(void);\n+\n+      __istream_type& \n+      seekg(pos_type);\n+\n+      __istream_type& \n+      seekg(off_type, ios_base::seekdir);\n+\n+    private:\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+      // Not defined.  (Side effect of DR 50.)\n+      __istream_type& \n+      operator=(const __istream_type&);\n+\n+      basic_istream(const __istream_type&);\n+#endif\n+    };\n+  \n+  template<typename _CharT, typename _Traits>\n+    class basic_istream<_CharT, _Traits>::sentry\n+    {\n+    public:\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+      typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n+      typedef basic_istream<_CharT, _Traits> \t\t__istream_type;\n+      typedef typename __istream_type::__ctype_type \t__ctype_type;\n+      typedef typename _Traits::int_type\t\t__int_type;\n+\n+      explicit \n+      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);\n+\n+      operator bool() { return _M_ok; }\n+\n+    private:\n+      bool _M_ok;\n+    };\n+\n+  // 27.6.1.2.3 Character extraction templates\n+  template<typename _CharT, typename _Traits>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);\n+\n+  template<class _Traits>\n+    basic_istream<char, _Traits>&\n+    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)\n+    { return (__in >> reinterpret_cast<char&>(__c)); }\n+\n+  template<class _Traits>\n+    basic_istream<char, _Traits>&\n+    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)\n+    { return (__in >> reinterpret_cast<char&>(__c)); }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);\n+  \n+  template<class _Traits>\n+    basic_istream<char,_Traits>&\n+    operator>>(basic_istream<char,_Traits>& __in, unsigned char* __s)\n+    { return (__in >> reinterpret_cast<char*>(__s)); }\n+\n+  template<class _Traits>\n+    basic_istream<char,_Traits>&\n+    operator>>(basic_istream<char,_Traits>& __in, signed char* __s)\n+    { return (__in >> reinterpret_cast<char*>(__s)); }\n+\n+  // 27.6.1.5 Template class basic_iostream\n+  template<typename _CharT, typename _Traits>\n+    class basic_iostream\n+    : public basic_istream<_CharT, _Traits>,\n+      public basic_ostream<_CharT, _Traits>\n+    {\n+    public:\n+      // Non-standard Types:\n+      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n+      typedef basic_ostream<_CharT, _Traits>\t\t__ostream_type;\n+\n+      explicit \n+      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)\n+      : __istream_type(__sb), __ostream_type(__sb)\n+      { }\n+\n+      virtual \n+      ~basic_iostream() { }\n+    };\n+\n+  // 27.6.1.4 Standard basic_istream manipulators\n+  template<typename _CharT, typename _Traits>\n+    basic_istream<_CharT, _Traits>& \n+    ws(basic_istream<_CharT, _Traits>& __is);\n+} // namespace std\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+# define export\n+#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+# include <bits/istream.tcc>\n+#endif\n+#endif\n+\n+#endif\t/* _CPP_ISTREAM */"}, {"sha": "f0eee1164badafd6821d55ee91fecc43607be50d", "filename": "libstdc++-v3/include/std/iterator", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <iterator> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,53 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file iterator\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_iterator.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_ITERATOR\n-#include <bits/std_iterator.h>\n-#endif\n+#define _CPP_ITERATOR 1\n+\n+#pragma GCC system_header\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include <bits/stl_iterator_base_types.h>\n+#include <bits/stl_iterator_base_funcs.h>\n+#include <bits/stl_iterator.h>\n+#include <ostream>\n+#include <istream>\n+#include <bits/stream_iterator.h>\n+#include <bits/streambuf_iterator.h>\n+\n+#endif /* _CPP_ITERATOR */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "7a6463625aed66020e330c2ba0bd85e969df172b", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 1987, "deletions": 7, "changes": 1994, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// The template and inlines for the -*- C++ -*- numeric_limits classes.\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999-2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,1991 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file limits\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+// Note: this is not a conforming implementation.\n+// Written by Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+//\n+// ISO 14882:1998\n+// 18.2.1\n+//\n+\n+/** @file std_limits.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_LIMITS\n-#include <bits/std_limits.h>\n+#ifndef _CPP_NUMERIC_LIMITS\n+#define _CPP_NUMERIC_LIMITS 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/cpu_limits.h>\n+#include <bits/c++config.h>\n+\n+//\n+// The numeric_limits<> traits document implementation-defined aspects\n+// of fundamental arithmetic data types (integers and floating points).\n+// From Standard C++ point of view, there are 13 such types:\n+//   * integers\n+//         bool\t\t\t\t\t\t        (1)\n+//         char, signed char, unsigned char\t\t\t(3)\n+//         short, unsigned short\t\t\t\t(2)\n+//         int, unsigned\t\t\t\t\t(2)\n+//         long, unsigned long\t\t\t\t\t(2)\n+//\n+//   * floating points\n+//         float\t\t\t\t\t\t(1)\n+//         double\t\t\t\t\t\t(1)\n+//         long double\t\t\t\t\t\t(1)\n+//\n+// GNU C++ undertstands (where supported by the host C-library) \n+//   * integer\n+//         long long, unsigned long long\t\t\t(2)\n+//\n+// which brings us to 15 fundamental arithmetic data types in GNU C++.\n+//\n+// \n+// Since a numeric_limits<> is a bit tricky to get right, we rely on\n+// an interface composed of macros which should be defined in config/os\n+// or config/cpu when they differ from the generic (read arbitrary)\n+// definitions given here.\n+//\n+\n+// These values can be overridden in the target configuration file.\n+// The default values are appropriate for many 32-bit targets.\n+\n+#ifndef __glibcpp_char_bits\n+#define __glibcpp_char_bits 8\n+#endif\n+#ifdef __CHAR_UNSIGNED__\n+#define __glibcpp_plain_char_is_signed false\n+#else\n+#define __glibcpp_plain_char_is_signed true\n+#endif\n+#ifndef __glibcpp_short_bits\n+#define __glibcpp_short_bits 16\n+#endif\n+#ifndef __glibcpp_int_bits\n+#define __glibcpp_int_bits 32\n+#endif\n+#ifndef __glibcpp_long_bits\n+#define __glibcpp_long_bits 32\n+#endif\n+#ifndef __glibcpp_wchar_t_bits\n+#define __glibcpp_wchar_t_bits 32\n+#endif\n+#ifndef __glibcpp_wchar_t_is_signed\n+#define __glibcpp_wchar_t_is_signed true\n+#endif\n+#ifndef __glibcpp_long_long_bits\n+#define __glibcpp_long_long_bits 64\n+#endif\n+#ifndef __glibcpp_float_bits\n+#define __glibcpp_float_bits 32\n+#endif\n+#ifndef __glibcpp_double_bits\n+#define __glibcpp_double_bits 64\n+#endif\n+#ifndef __glibcpp_long_double_bits\n+#define __glibcpp_long_double_bits 128\n+#endif\n+\n+#ifndef __glibcpp_char_traps\n+#define __glibcpp_char_traps true\n+#endif\n+#ifndef __glibcpp_short_traps\n+#define __glibcpp_short_traps true\n+#endif\n+#ifndef __glibcpp_int_traps\n+#define __glibcpp_int_traps true\n+#endif\n+#ifndef __glibcpp_long_traps\n+#define __glibcpp_long_traps true\n+#endif\n+#ifndef __glibcpp_wchar_t_traps\n+#define __glibcpp_wchar_t_traps true\n+#endif\n+#ifndef __glibcpp_long_long_traps\n+#define __glibcpp_long_long_traps true\n+#endif\n+\n+// You should not need to define any macros below this point, unless\n+// you have a machine with non-standard bit-widths.\n+\n+// These values are the minimums and maximums for standard data types\n+// of common widths.\n+\n+#define __glibcpp_s8_max 127\n+#define __glibcpp_s8_min (-__glibcpp_s8_max - 1)\n+#define __glibcpp_s8_digits 7\n+#define __glibcpp_s8_digits10 2\n+#define __glibcpp_u8_min 0U\n+#define __glibcpp_u8_max (__glibcpp_s8_max * 2 + 1)\n+#define __glibcpp_u8_digits 8\n+#define __glibcpp_u8_digits10 2\n+#define __glibcpp_s16_max 32767\n+#define __glibcpp_s16_min (-__glibcpp_s16_max - 1)\n+#define __glibcpp_s16_digits 15\n+#define __glibcpp_s16_digits10 4\n+#define __glibcpp_u16_min 0U\n+#define __glibcpp_u16_max (__glibcpp_s16_max * 2 + 1)\n+#define __glibcpp_u16_digits 16\n+#define __glibcpp_u16_digits10 4\n+#define __glibcpp_s32_max 2147483647L\n+#define __glibcpp_s32_min (-__glibcpp_s32_max - 1)\n+#define __glibcpp_s32_digits 31\n+#define __glibcpp_s32_digits10 9\n+#define __glibcpp_u32_min 0UL\n+#define __glibcpp_u32_max (__glibcpp_s32_max * 2U + 1)\n+#define __glibcpp_u32_digits 32\n+#define __glibcpp_u32_digits10 9\n+#define __glibcpp_s64_max 9223372036854775807LL\n+#define __glibcpp_s64_min (-__glibcpp_s64_max - 1)\n+#define __glibcpp_s64_digits 63\n+#define __glibcpp_s64_digits10 18\n+#define __glibcpp_u64_min 0ULL\n+#define __glibcpp_u64_max (__glibcpp_s64_max * 2ULL + 1)\n+#define __glibcpp_u64_digits 64\n+#define __glibcpp_u64_digits10 19\n+\n+#define __glibcpp_f32_min 1.17549435e-38F\n+#define __glibcpp_f32_max 3.40282347e+38F\n+#define __glibcpp_f32_digits 24\n+#define __glibcpp_f32_digits10 6\n+#define __glibcpp_f32_radix 2\n+#define __glibcpp_f32_epsilon 1.19209290e-07F\n+#define __glibcpp_f32_round_error 1.0F\n+#define __glibcpp_f32_min_exponent -125\n+#define __glibcpp_f32_min_exponent10 -37\n+#define __glibcpp_f32_max_exponent 128\n+#define __glibcpp_f32_max_exponent10 38\n+#define __glibcpp_f64_min 2.2250738585072014e-308\n+#define __glibcpp_f64_max 1.7976931348623157e+308\n+#define __glibcpp_f64_digits 53\n+#define __glibcpp_f64_digits10 15\n+#define __glibcpp_f64_radix 2\n+#define __glibcpp_f64_epsilon 2.2204460492503131e-16\n+#define __glibcpp_f64_round_error 1.0\n+#define __glibcpp_f64_min_exponent -1021\n+#define __glibcpp_f64_min_exponent10 -307\n+#define __glibcpp_f64_max_exponent 1024\n+#define __glibcpp_f64_max_exponent10 308\n+#define __glibcpp_f80_min 3.36210314311209350626e-4932L\n+#define __glibcpp_f80_max 1.18973149535723176502e+4932L\n+#define __glibcpp_f80_digits 64\n+#define __glibcpp_f80_digits10 18\n+#define __glibcpp_f80_radix 2\n+#define __glibcpp_f80_epsilon 1.08420217248550443401e-19L\n+#define __glibcpp_f80_round_error 1.0L\n+#define __glibcpp_f80_min_exponent -16381\n+#define __glibcpp_f80_min_exponent10 -4931\n+#define __glibcpp_f80_max_exponent 16384\n+#define __glibcpp_f80_max_exponent10 4932\n+#define __glibcpp_f96_min 1.68105157155604675313e-4932L\n+#define __glibcpp_f96_max 1.18973149535723176502e+4932L\n+#define __glibcpp_f96_digits 64\n+#define __glibcpp_f96_digits10 18\n+#define __glibcpp_f96_radix 2\n+#define __glibcpp_f96_epsilon 1.08420217248550443401e-19L\n+#define __glibcpp_f96_round_error 1.0L\n+#define __glibcpp_f96_min_exponent -16382\n+#define __glibcpp_f96_min_exponent10 -4931\n+#define __glibcpp_f96_max_exponent 16384\n+#define __glibcpp_f96_max_exponent10 4932\n+#define __glibcpp_f128_min 3.362103143112093506262677817321752603E-4932L\n+#define __glibcpp_f128_max 1.189731495357231765085759326628007016E+4932L\n+#define __glibcpp_f128_digits 113\n+#define __glibcpp_f128_digits10 33\n+#define __glibcpp_f128_radix 2\n+#define __glibcpp_f128_epsilon 1.925929944387235853055977942584927319E-34L\n+#define __glibcpp_f128_round_error 1.0L\n+#define __glibcpp_f128_min_exponent -16381\n+#define __glibcpp_f128_min_exponent10 -4931\n+#define __glibcpp_f128_max_exponent 16384\n+#define __glibcpp_f128_max_exponent10 4932\n+\n+// bool-specific hooks:\n+//     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps\n+\n+// This is actually CHAR_BITS because the new ABI says a bool\n+// is one (1) byte wide.\n+\n+#ifndef __glibcpp_bool_digits\n+#define __glibcpp_bool_digits __glibcpp_char_bits\n+#endif\n+\n+// char.\n+\n+#define __glibcpp_plain_char_traps true\n+#define __glibcpp_signed_char_traps true\n+#define __glibcpp_unsigned_char_traps true\n+#ifndef __glibcpp_char_is_modulo\n+#define __glibcpp_char_is_modulo true\n+#endif\n+#ifndef __glibcpp_signed_char_is_modulo\n+#define __glibcpp_signed_char_is_modulo true\n+#endif\n+#if __glibcpp_char_bits == 8\n+#define __glibcpp_signed_char_min __glibcpp_s8_min\n+#define __glibcpp_signed_char_max __glibcpp_s8_max\n+#define __glibcpp_signed_char_digits __glibcpp_s8_digits\n+#define __glibcpp_signed_char_digits10 __glibcpp_s8_digits10\n+#define __glibcpp_unsigned_char_min __glibcpp_u8_min\n+#define __glibcpp_unsigned_char_max __glibcpp_u8_max\n+#define __glibcpp_unsigned_char_digits __glibcpp_u8_digits\n+#define __glibcpp_unsigned_char_digits10 __glibcpp_u8_digits10\n+#elif __glibcpp_char_bits == 16\n+#define __glibcpp_signed_char_min __glibcpp_s16_min\n+#define __glibcpp_signed_char_max __glibcpp_s16_max\n+#define __glibcpp_signed_char_digits __glibcpp_s16_digits\n+#define __glibcpp_signed_char_digits10 __glibcpp_s16_digits10\n+#define __glibcpp_unsigned_char_min __glibcpp_u16_min\n+#define __glibcpp_unsigned_char_max __glibcpp_u16_max\n+#define __glibcpp_unsigned_char_digits __glibcpp_u16_digits\n+#define __glibcpp_unsigned_char_digits10 __glibcpp_u16_digits10\n+#elif __glibcpp_char_bits == 32\n+#define __glibcpp_signed_char_min (signed char)__glibcpp_s32_min\n+#define __glibcpp_signed_char_max (signed char)__glibcpp_s32_max\n+#define __glibcpp_signed_char_digits __glibcpp_s32_digits\n+#define __glibcpp_signed_char_digits10 __glibcpp_s32_digits10\n+#define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u32_min\n+#define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u32_max\n+#define __glibcpp_unsigned_char_digits __glibcpp_u32_digits\n+#define __glibcpp_unsigned_char_digits10 __glibcpp_u32_digits10\n+#elif __glibcpp_char_bits == 64\n+#define __glibcpp_signed_char_min (signed char)__glibcpp_s64_min\n+#define __glibcpp_signed_char_max (signed char)__glibcpp_s64_max\n+#define __glibcpp_signed_char_digits __glibcpp_s64_digits\n+#define __glibcpp_signed_char_digits10 __glibcpp_s64_digits10\n+#define __glibcpp_unsigned_char_min (unsigned char)__glibcpp_u64_min\n+#define __glibcpp_unsigned_char_max (unsigned char)__glibcpp_u64_max\n+#define __glibcpp_unsigned_char_digits __glibcpp_u64_digits\n+#define __glibcpp_unsigned_char_digits10 __glibcpp_u64_digits10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+#if __glibcpp_plain_char_is_signed\n+#define __glibcpp_char_min (char)__glibcpp_signed_char_min\n+#define __glibcpp_char_max (char)__glibcpp_signed_char_max\n+#define __glibcpp_char_digits __glibcpp_signed_char_digits\n+#define __glibcpp_char_digits10 __glibcpp_signed_char_digits\n+#else\n+#define __glibcpp_char_min (char)__glibcpp_unsigned_char_min\n+#define __glibcpp_char_max (char)__glibcpp_unsigned_char_max\n+#define __glibcpp_char_digits __glibcpp_unsigned_char_digits\n+#define __glibcpp_char_digits10 __glibcpp_unsigned_char_digits\n+#endif\n+\n+// short\n+\n+#define __glibcpp_signed_short_traps true\n+#define __glibcpp_unsigned_short_traps true\n+#ifndef __glibcpp_signed_short_is_modulo\n+#define __glibcpp_signed_short_is_modulo true\n+#endif\n+#if __glibcpp_short_bits == 8\n+#define __glibcpp_signed_short_min __glibcpp_s8_min\n+#define __glibcpp_signed_short_max __glibcpp_s8_max\n+#define __glibcpp_signed_short_digits __glibcpp_s8_digits\n+#define __glibcpp_signed_short_digits10 __glibcpp_s8_digits10\n+#define __glibcpp_unsigned_short_min __glibcpp_u8_min\n+#define __glibcpp_unsigned_short_max __glibcpp_u8_max\n+#define __glibcpp_unsigned_short_digits __glibcpp_u8_digits\n+#define __glibcpp_unsigned_short_digits10 __glibcpp_u8_digits10\n+#elif __glibcpp_short_bits == 16\n+#define __glibcpp_signed_short_min __glibcpp_s16_min\n+#define __glibcpp_signed_short_max __glibcpp_s16_max\n+#define __glibcpp_signed_short_digits __glibcpp_s16_digits\n+#define __glibcpp_signed_short_digits10 __glibcpp_s16_digits10\n+#define __glibcpp_unsigned_short_min __glibcpp_u16_min\n+#define __glibcpp_unsigned_short_max __glibcpp_u16_max\n+#define __glibcpp_unsigned_short_digits __glibcpp_u16_digits\n+#define __glibcpp_unsigned_short_digits10 __glibcpp_u16_digits10\n+#elif __glibcpp_short_bits == 32\n+#define __glibcpp_signed_short_min (short)__glibcpp_s32_min\n+#define __glibcpp_signed_short_max (short)__glibcpp_s32_max\n+#define __glibcpp_signed_short_digits __glibcpp_s32_digits\n+#define __glibcpp_signed_short_digits10 __glibcpp_s32_digits10\n+#define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u32_min\n+#define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u32_max\n+#define __glibcpp_unsigned_short_digits __glibcpp_u32_digits\n+#define __glibcpp_unsigned_short_digits10 __glibcpp_u32_digits10\n+#elif __glibcpp_short_bits == 64\n+#define __glibcpp_signed_short_min (short)__glibcpp_s64_min\n+#define __glibcpp_signed_short_max (short)__glibcpp_s64_max\n+#define __glibcpp_signed_short_digits __glibcpp_s64_digits\n+#define __glibcpp_signed_short_digits10 __glibcpp_s64_digits10\n+#define __glibcpp_unsigned_short_min (unsigned short)__glibcpp_u64_min\n+#define __glibcpp_unsigned_short_max (unsigned short)__glibcpp_u64_max\n+#define __glibcpp_unsigned_short_digits __glibcpp_u64_digits\n+#define __glibcpp_unsigned_short_digits10 __glibcpp_u64_digits10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// int\n+\n+#define __glibcpp_signed_int_traps true\n+#define __glibcpp_unsigned_int_traps true\n+#ifndef __glibcpp_signed_int_is_modulo\n+#define __glibcpp_signed_int_is_modulo true\n+#endif\n+#if __glibcpp_int_bits == 8\n+#define __glibcpp_signed_int_min __glibcpp_s8_min\n+#define __glibcpp_signed_int_max __glibcpp_s8_max\n+#define __glibcpp_signed_int_digits __glibcpp_s8_digits\n+#define __glibcpp_signed_int_digits10 __glibcpp_s8_digits10\n+#define __glibcpp_unsigned_int_min __glibcpp_u8_min\n+#define __glibcpp_unsigned_int_max __glibcpp_u8_max\n+#define __glibcpp_unsigned_int_digits __glibcpp_u8_digits\n+#define __glibcpp_unsigned_int_digits10 __glibcpp_u8_digits10\n+#elif __glibcpp_int_bits == 16\n+#define __glibcpp_signed_int_min __glibcpp_s16_min\n+#define __glibcpp_signed_int_max __glibcpp_s16_max\n+#define __glibcpp_signed_int_digits __glibcpp_s16_digits\n+#define __glibcpp_signed_int_digits10 __glibcpp_s16_digits10\n+#define __glibcpp_unsigned_int_min __glibcpp_u16_min\n+#define __glibcpp_unsigned_int_max __glibcpp_u16_max\n+#define __glibcpp_unsigned_int_digits __glibcpp_u16_digits\n+#define __glibcpp_unsigned_int_digits10 __glibcpp_u16_digits10\n+#elif __glibcpp_int_bits == 32\n+#define __glibcpp_signed_int_min (int)__glibcpp_s32_min\n+#define __glibcpp_signed_int_max (int)__glibcpp_s32_max\n+#define __glibcpp_signed_int_digits __glibcpp_s32_digits\n+#define __glibcpp_signed_int_digits10 __glibcpp_s32_digits10\n+#define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u32_min\n+#define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u32_max\n+#define __glibcpp_unsigned_int_digits __glibcpp_u32_digits\n+#define __glibcpp_unsigned_int_digits10 __glibcpp_u32_digits10\n+#elif __glibcpp_int_bits == 64\n+#define __glibcpp_signed_int_min (int)__glibcpp_s64_min\n+#define __glibcpp_signed_int_max (int)__glibcpp_s64_max\n+#define __glibcpp_signed_int_digits __glibcpp_s64_digits\n+#define __glibcpp_signed_int_digits10 __glibcpp_s64_digits10\n+#define __glibcpp_unsigned_int_min (unsigned)__glibcpp_u64_min\n+#define __glibcpp_unsigned_int_max (unsigned)__glibcpp_u64_max\n+#define __glibcpp_unsigned_int_digits __glibcpp_u64_digits\n+#define __glibcpp_unsigned_int_digits10 __glibcpp_u64_digits10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// long\n+\n+#define __glibcpp_signed_long_traps true\n+#define __glibcpp_unsigned_long_traps true\n+#ifndef __glibcpp_signed_long_is_modulo\n+#define __glibcpp_signed_long_is_modulo true\n+#endif\n+#if __glibcpp_long_bits == 8\n+#define __glibcpp_signed_long_min __glibcpp_s8_min\n+#define __glibcpp_signed_long_max __glibcpp_s8_max\n+#define __glibcpp_signed_long_digits __glibcpp_s8_digits\n+#define __glibcpp_signed_long_digits10 __glibcpp_s8_digits10\n+#define __glibcpp_unsigned_long_min __glibcpp_u8_min\n+#define __glibcpp_unsigned_long_max __glibcpp_u8_max\n+#define __glibcpp_unsigned_long_digits __glibcpp_u8_digits\n+#define __glibcpp_unsigned_long_digits10 __glibcpp_u8_digits10\n+#elif __glibcpp_long_bits == 16\n+#define __glibcpp_signed_long_min __glibcpp_s16_min\n+#define __glibcpp_signed_long_max __glibcpp_s16_max\n+#define __glibcpp_signed_long_digits __glibcpp_s16_digits\n+#define __glibcpp_signed_long_digits10 __glibcpp_s16_digits10\n+#define __glibcpp_unsigned_long_min __glibcpp_u16_min\n+#define __glibcpp_unsigned_long_max __glibcpp_u16_max\n+#define __glibcpp_unsigned_long_digits __glibcpp_u16_digits\n+#define __glibcpp_unsigned_long_digits10 __glibcpp_u16_digits10\n+#elif __glibcpp_long_bits == 32\n+#define __glibcpp_signed_long_min __glibcpp_s32_min\n+#define __glibcpp_signed_long_max __glibcpp_s32_max\n+#define __glibcpp_signed_long_digits __glibcpp_s32_digits\n+#define __glibcpp_signed_long_digits10 __glibcpp_s32_digits10\n+#define __glibcpp_unsigned_long_min __glibcpp_u32_min\n+#define __glibcpp_unsigned_long_max __glibcpp_u32_max\n+#define __glibcpp_unsigned_long_digits __glibcpp_u32_digits\n+#define __glibcpp_unsigned_long_digits10 __glibcpp_u32_digits10\n+#elif __glibcpp_long_bits == 64\n+#define __glibcpp_signed_long_min (long)__glibcpp_s64_min\n+#define __glibcpp_signed_long_max (long)__glibcpp_s64_max\n+#define __glibcpp_signed_long_digits __glibcpp_s64_digits\n+#define __glibcpp_signed_long_digits10 __glibcpp_s64_digits10\n+#define __glibcpp_unsigned_long_min (unsigned long)__glibcpp_u64_min\n+#define __glibcpp_unsigned_long_max (unsigned long)__glibcpp_u64_max\n+#define __glibcpp_unsigned_long_digits __glibcpp_u64_digits\n+#define __glibcpp_unsigned_long_digits10 __glibcpp_u64_digits10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// long long\n+\n+#define __glibcpp_signed_long_long_traps true\n+#define __glibcpp_signed_long_long_traps true\n+#ifndef __glibcpp_signed_long_long_is_modulo\n+#define __glibcpp_signed_long_long_is_modulo true\n+#endif\n+#if __glibcpp_long_long_bits == 8\n+#define __glibcpp_signed_long_long_min __glibcpp_s8_min\n+#define __glibcpp_signed_long_long_max __glibcpp_s8_max\n+#define __glibcpp_signed_long_long_digits __glibcpp_s8_digits\n+#define __glibcpp_signed_long_long_digits10 __glibcpp_s8_digits10\n+#define __glibcpp_unsigned_long_long_min __glibcpp_u8_min\n+#define __glibcpp_unsigned_long_long_max __glibcpp_u8_max\n+#define __glibcpp_unsigned_long_long_digits __glibcpp_u8_digits\n+#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u8_digits10\n+#elif __glibcpp_long_long_bits == 16\n+#define __glibcpp_signed_long_long_min __glibcpp_s16_min\n+#define __glibcpp_signed_long_long_max __glibcpp_s16_max\n+#define __glibcpp_signed_long_long_digits __glibcpp_s16_digits\n+#define __glibcpp_signed_long_long_digits10 __glibcpp_s16_digits10\n+#define __glibcpp_unsigned_long_long_min __glibcpp_u16_min\n+#define __glibcpp_unsigned_long_long_max __glibcpp_u16_max\n+#define __glibcpp_unsigned_long_long_digits __glibcpp_u16_digits\n+#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u16_digits10\n+#elif __glibcpp_long_long_bits == 32\n+#define __glibcpp_signed_long_long_min __glibcpp_s32_min\n+#define __glibcpp_signed_long_long_max __glibcpp_s32_max\n+#define __glibcpp_signed_long_long_digits __glibcpp_s32_digits\n+#define __glibcpp_signed_long_long_digits10 __glibcpp_s32_digits10\n+#define __glibcpp_unsigned_long_long_min __glibcpp_u32_min\n+#define __glibcpp_unsigned_long_long_max __glibcpp_u32_max\n+#define __glibcpp_unsigned_long_long_digits __glibcpp_u32_digits\n+#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u32_digits10\n+#elif __glibcpp_long_long_bits == 64\n+#define __glibcpp_signed_long_long_min __glibcpp_s64_min\n+#define __glibcpp_signed_long_long_max __glibcpp_s64_max\n+#define __glibcpp_signed_long_long_digits __glibcpp_s64_digits\n+#define __glibcpp_signed_long_long_digits10 __glibcpp_s64_digits10\n+#define __glibcpp_signed_long_long_traps true\n+#define __glibcpp_unsigned_long_long_min __glibcpp_u64_min\n+#define __glibcpp_unsigned_long_long_max __glibcpp_u64_max\n+#define __glibcpp_unsigned_long_long_digits __glibcpp_u64_digits\n+#define __glibcpp_unsigned_long_long_digits10 __glibcpp_u64_digits10\n+#define __glibcpp_unsigned_long_long_traps true\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// wchar_t\n+\n+#define __glibcpp_wchar_t_traps true\n+#ifndef __glibcpp_wchar_t_is_modulo\n+#define __glibcpp_wchar_t_is_modulo true\n+#endif\n+#if __glibcpp_wchar_t_is_signed\n+#if __glibcpp_wchar_t_bits == 8\n+#define __glibcpp_wchar_t_min __glibcpp_s8_min\n+#define __glibcpp_wchar_t_max __glibcpp_s8_max\n+#define __glibcpp_wchar_t_digits __glibcpp_s8_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_s8_digits10\n+#elif __glibcpp_wchar_t_bits == 16\n+#define __glibcpp_wchar_t_min __glibcpp_s16_min\n+#define __glibcpp_wchar_t_max __glibcpp_s16_max\n+#define __glibcpp_wchar_t_digits __glibcpp_s16_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_s16_digits10\n+#elif __glibcpp_wchar_t_bits == 32\n+#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s32_min\n+#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s32_max\n+#define __glibcpp_wchar_t_digits __glibcpp_s32_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_s32_digits10\n+#elif __glibcpp_wchar_t_bits == 64\n+#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_s64_min\n+#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_s64_max\n+#define __glibcpp_wchar_t_digits __glibcpp_s64_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_s64_digits10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+#else\n+#if __glibcpp_wchar_t_bits == 8\n+#define __glibcpp_wchar_t_min __glibcpp_u8_min\n+#define __glibcpp_wchar_t_max __glibcpp_u8_max\n+#define __glibcpp_wchar_t_digits __glibcpp_u8_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_u8_digits10\n+#elif __glibcpp_wchar_t_bits == 16\n+#define __glibcpp_wchar_t_min __glibcpp_u16_min\n+#define __glibcpp_wchar_t_max __glibcpp_u16_max\n+#define __glibcpp_wchar_t_digits __glibcpp_u16_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_u16_digits10\n+#elif __glibcpp_wchar_t_bits == 32\n+#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u32_min\n+#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u32_max\n+#define __glibcpp_wchar_t_digits __glibcpp_u32_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_u32_digits10\n+#elif __glibcpp_wchar_t_bits == 64\n+#define __glibcpp_wchar_t_min (wchar_t)__glibcpp_u64_min\n+#define __glibcpp_wchar_t_max (wchar_t)__glibcpp_u64_max\n+#define __glibcpp_wchar_t_digits __glibcpp_u64_digits\n+#define __glibcpp_wchar_t_digits10 __glibcpp_u64_digits10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+#endif\n+\n+// float\n+//\n+\n+#if __glibcpp_float_bits == 32\n+#define __glibcpp_float_min __glibcpp_f32_min\n+#define __glibcpp_float_max __glibcpp_f32_max\n+#define __glibcpp_float_digits __glibcpp_f32_digits\n+#define __glibcpp_float_digits10 __glibcpp_f32_digits10\n+#define __glibcpp_float_radix __glibcpp_f32_radix\n+#define __glibcpp_float_epsilon __glibcpp_f32_epsilon\n+#define __glibcpp_float_round_error __glibcpp_f32_round_error\n+#define __glibcpp_float_min_exponent __glibcpp_f32_min_exponent\n+#define __glibcpp_float_min_exponent10 __glibcpp_f32_min_exponent10\n+#define __glibcpp_float_max_exponent __glibcpp_f32_max_exponent\n+#define __glibcpp_float_max_exponent10 __glibcpp_f32_max_exponent10\n+#elif __glibcpp_float_bits == 64\n+#define __glibcpp_float_min __glibcpp_f64_min\n+#define __glibcpp_float_max __glibcpp_f64_max\n+#define __glibcpp_float_digits __glibcpp_f64_digits\n+#define __glibcpp_float_digits10 __glibcpp_f64_digits10\n+#define __glibcpp_float_radix __glibcpp_f64_radix\n+#define __glibcpp_float_epsilon __glibcpp_f64_epsilon\n+#define __glibcpp_float_round_error __glibcpp_f64_round_error\n+#define __glibcpp_float_min_exponent __glibcpp_f64_min_exponent\n+#define __glibcpp_float_min_exponent10 __glibcpp_f64_min_exponent10\n+#define __glibcpp_float_max_exponent __glibcpp_f64_max_exponent\n+#define __glibcpp_float_max_exponent10 __glibcpp_f64_max_exponent10\n+#elif __glibcpp_float_bits == 80\n+#define __glibcpp_float_min __glibcpp_f80_min\n+#define __glibcpp_float_max __glibcpp_f80_max\n+#define __glibcpp_float_digits __glibcpp_f80_digits\n+#define __glibcpp_float_digits10 __glibcpp_f80_digits10\n+#define __glibcpp_float_radix __glibcpp_f80_radix\n+#define __glibcpp_float_epsilon __glibcpp_f80_epsilon\n+#define __glibcpp_float_round_error __glibcpp_f80_round_error\n+#define __glibcpp_float_min_exponent __glibcpp_f80_min_exponent\n+#define __glibcpp_float_min_exponent10 __glibcpp_f80_min_exponent10\n+#define __glibcpp_float_max_exponent __glibcpp_f80_max_exponent\n+#define __glibcpp_float_max_exponent10 __glibcpp_f80_max_exponent10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// FIXME: These are just stubs and inkorrect\n+\n+#ifndef __glibcpp_float_has_infinity\n+#define __glibcpp_float_has_infinity false\n+#endif\n+\n+#ifndef __glibcpp_float_has_quiet_NaM\n+#define __glibcpp_float_has_quiet_NaN false\n+#endif\n+\n+#ifndef __glibcpp_float_has_signaling_NaN\n+#define __glibcpp_float_has_signaling_NaN false\n+#endif\n+\n+#ifndef __glibcpp_float_has_denorm\n+#define __glibcpp_float_has_denorm denorm_absent\n+#endif\n+\n+#ifndef __glibcpp_float_has_denorm_loss\n+#define __glibcpp_float_has_denorm_loss false\n+#endif\n+\n+#ifndef __glibcpp_float_infinity\n+#define __glibcpp_float_infinity 0.0F\n+#endif\n+\n+#ifndef __glibcpp_float_quiet_NaN\n+#define __glibcpp_float_quiet_NaN 0.0F\n+#endif\n+\n+#ifndef __glibcpp_float_signaling_NaN\n+#define __glibcpp_float_signaling_NaN 0.0F\n+#endif\n+\n+#ifndef __glibcpp_float_denorm_min\n+#define __glibcpp_float_denorm_min 0.0F\n+#endif\n+\n+#ifndef __glibcpp_float_is_iec559\n+#define __glibcpp_float_is_iec559 false\n+#endif\n+\n+#ifndef __glibcpp_float_is_bounded\n+#define __glibcpp_float_is_bounded true\n+#endif\n+\n+#ifndef __glibcpp_float_is_modulo\n+#define __glibcpp_float_is_modulo false\n+#endif\n+\n+#ifndef __glibcpp_float_traps\n+#define __glibcpp_float_traps false\n+#endif\n+\n+#ifndef __glibcpp_float_tinyness_before\n+#define __glibcpp_float_tinyness_before false\n+#endif\n+\n+#ifndef __glibcpp_float_round_style\n+#define __glibcpp_float_round_style round_toward_zero\n+#endif\n+\n+// double\n+\n+#if __glibcpp_double_bits == 32\n+#define __glibcpp_double_min __glibcpp_f32_min\n+#define __glibcpp_double_max __glibcpp_f32_max\n+#define __glibcpp_double_digits __glibcpp_f32_digits\n+#define __glibcpp_double_digits10 __glibcpp_f32_digits10\n+#define __glibcpp_double_radix __glibcpp_f32_radix\n+#define __glibcpp_double_epsilon __glibcpp_f32_epsilon\n+#define __glibcpp_double_round_error __glibcpp_f32_round_error\n+#define __glibcpp_double_min_exponent __glibcpp_f32_min_exponent\n+#define __glibcpp_double_min_exponent10 __glibcpp_f32_min_exponent10\n+#define __glibcpp_double_max_exponent __glibcpp_f32_max_exponent\n+#define __glibcpp_double_max_exponent10 __glibcpp_f32_max_exponent10\n+#elif __glibcpp_double_bits == 64\n+#define __glibcpp_double_min __glibcpp_f64_min\n+#define __glibcpp_double_max __glibcpp_f64_max\n+#define __glibcpp_double_digits __glibcpp_f64_digits\n+#define __glibcpp_double_digits10 __glibcpp_f64_digits10\n+#define __glibcpp_double_radix __glibcpp_f64_radix\n+#define __glibcpp_double_epsilon __glibcpp_f64_epsilon\n+#define __glibcpp_double_round_error __glibcpp_f64_round_error\n+#define __glibcpp_double_min_exponent __glibcpp_f64_min_exponent\n+#define __glibcpp_double_min_exponent10 __glibcpp_f64_min_exponent10\n+#define __glibcpp_double_max_exponent __glibcpp_f64_max_exponent\n+#define __glibcpp_double_max_exponent10 __glibcpp_f64_max_exponent10\n+#elif __glibcpp_double_bits == 80\n+#define __glibcpp_double_min __glibcpp_f80_min\n+#define __glibcpp_double_max __glibcpp_f80_max\n+#define __glibcpp_double_digits __glibcpp_f80_digits\n+#define __glibcpp_double_digits10 __glibcpp_f80_digits10\n+#define __glibcpp_double_radix __glibcpp_f80_radix\n+#define __glibcpp_double_epsilon __glibcpp_f80_epsilon\n+#define __glibcpp_double_round_error __glibcpp_f80_round_error\n+#define __glibcpp_double_min_exponent __glibcpp_f80_min_exponent\n+#define __glibcpp_double_min_exponent10 __glibcpp_f80_min_exponent10\n+#define __glibcpp_double_max_exponent __glibcpp_f80_max_exponent\n+#define __glibcpp_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// FIXME: These are just stubs and inkorrect\n+\n+#ifndef __glibcpp_double_has_infinity\n+#define __glibcpp_double_has_infinity false\n+#endif\n+\n+#ifndef __glibcpp_double_has_quiet_NaM\n+#define __glibcpp_double_has_quiet_NaN false\n+#endif\n+\n+#ifndef __glibcpp_double_has_signaling_NaN\n+#define __glibcpp_double_has_signaling_NaN false\n+#endif\n+\n+#ifndef __glibcpp_double_has_denorm\n+#define __glibcpp_double_has_denorm denorm_absent\n+#endif\n+\n+#ifndef __glibcpp_double_has_denorm_loss\n+#define __glibcpp_double_has_denorm_loss false\n+#endif\n+\n+#ifndef __glibcpp_double_infinity\n+#define __glibcpp_double_infinity 0.0\n+#endif\n+\n+#ifndef __glibcpp_double_quiet_NaN\n+#define __glibcpp_double_quiet_NaN 0.0\n+#endif\n+\n+#ifndef __glibcpp_double_signaling_NaN\n+#define __glibcpp_double_signaling_NaN 0.0\n+#endif\n+\n+#ifndef __glibcpp_double_denorm_min\n+#define __glibcpp_double_denorm_min 0.0\n+#endif\n+\n+#ifndef __glibcpp_double_is_iec559\n+#define __glibcpp_double_is_iec559 false\n+#endif\n+\n+#ifndef __glibcpp_double_is_bounded\n+#define __glibcpp_double_is_bounded true\n+#endif\n+\n+#ifndef __glibcpp_double_is_modulo\n+#define __glibcpp_double_is_modulo false\n+#endif\n+\n+#ifndef __glibcpp_double_traps\n+#define __glibcpp_double_traps false\n+#endif\n+\n+#ifndef __glibcpp_double_tinyness_before\n+#define __glibcpp_double_tinyness_before false\n+#endif\n+\n+#ifndef __glibcpp_double_round_style\n+#define __glibcpp_double_round_style round_toward_zero\n+#endif\n+\n+// long double\n+\n+#if __glibcpp_long_double_bits == 32\n+#define __glibcpp_long_double_min __glibcpp_f32_min\n+#define __glibcpp_long_double_max __glibcpp_f32_max\n+#define __glibcpp_long_double_digits __glibcpp_f32_digits\n+#define __glibcpp_long_double_digits10 __glibcpp_f32_digits10\n+#define __glibcpp_long_double_radix __glibcpp_f32_radix\n+#define __glibcpp_long_double_epsilon __glibcpp_f32_epsilon\n+#define __glibcpp_long_double_round_error __glibcpp_f32_round_error\n+#define __glibcpp_long_double_min_exponent __glibcpp_f32_min_exponent\n+#define __glibcpp_long_double_min_exponent10 __glibcpp_f32_min_exponent10\n+#define __glibcpp_long_double_max_exponent __glibcpp_f32_max_exponent\n+#define __glibcpp_long_double_max_exponent10 __glibcpp_f32_max_exponent10\n+#elif __glibcpp_long_double_bits == 64\n+#define __glibcpp_long_double_min __glibcpp_f64_min\n+#define __glibcpp_long_double_max __glibcpp_f64_max\n+#define __glibcpp_long_double_digits __glibcpp_f64_digits\n+#define __glibcpp_long_double_digits10 __glibcpp_f64_digits10\n+#define __glibcpp_long_double_radix __glibcpp_f64_radix\n+#define __glibcpp_long_double_epsilon __glibcpp_f64_epsilon\n+#define __glibcpp_long_double_round_error __glibcpp_f64_round_error\n+#define __glibcpp_long_double_min_exponent __glibcpp_f64_min_exponent\n+#define __glibcpp_long_double_min_exponent10 __glibcpp_f64_min_exponent10\n+#define __glibcpp_long_double_max_exponent __glibcpp_f64_max_exponent\n+#define __glibcpp_long_double_max_exponent10 __glibcpp_f64_max_exponent10\n+#elif __glibcpp_long_double_bits == 80\n+#define __glibcpp_long_double_min __glibcpp_f80_min\n+#define __glibcpp_long_double_max __glibcpp_f80_max\n+#define __glibcpp_long_double_digits __glibcpp_f80_digits\n+#define __glibcpp_long_double_digits10 __glibcpp_f80_digits10\n+#define __glibcpp_long_double_radix __glibcpp_f80_radix\n+#define __glibcpp_long_double_epsilon __glibcpp_f80_epsilon\n+#define __glibcpp_long_double_round_error __glibcpp_f80_round_error\n+#define __glibcpp_long_double_min_exponent __glibcpp_f80_min_exponent\n+#define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n+#define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n+#define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#elif __glibcpp_long_double_bits == 96\n+#define __glibcpp_long_double_min __glibcpp_f96_min\n+#define __glibcpp_long_double_max __glibcpp_f96_max\n+#define __glibcpp_long_double_digits __glibcpp_f96_digits\n+#define __glibcpp_long_double_digits10 __glibcpp_f96_digits10\n+#define __glibcpp_long_double_radix __glibcpp_f96_radix\n+#define __glibcpp_long_double_epsilon __glibcpp_f96_epsilon\n+#define __glibcpp_long_double_round_error __glibcpp_f96_round_error\n+#define __glibcpp_long_double_min_exponent __glibcpp_f96_min_exponent\n+#define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n+#define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n+#define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n+#elif __glibcpp_long_double_bits == 128\n+#define __glibcpp_long_double_min __glibcpp_f128_min\n+#define __glibcpp_long_double_max __glibcpp_f128_max\n+#define __glibcpp_long_double_digits __glibcpp_f128_digits\n+#define __glibcpp_long_double_digits10 __glibcpp_f128_digits10\n+#define __glibcpp_long_double_radix __glibcpp_f128_radix\n+#define __glibcpp_long_double_epsilon __glibcpp_f128_epsilon\n+#define __glibcpp_long_double_round_error __glibcpp_f128_round_error\n+#define __glibcpp_long_double_min_exponent __glibcpp_f128_min_exponent\n+#define __glibcpp_long_double_min_exponent10 __glibcpp_f128_min_exponent10\n+#define __glibcpp_long_double_max_exponent __glibcpp_f128_max_exponent\n+#define __glibcpp_long_double_max_exponent10 __glibcpp_f128_max_exponent10\n+#else\n+// You must define these macros in the configuration file.\n+#endif\n+\n+// FIXME: These are just stubs and inkorrect\n+\n+#ifndef __glibcpp_long_double_has_infinity\n+#define __glibcpp_long_double_has_infinity false\n+#endif\n+\n+#ifndef __glibcpp_long_double_has_quiet_NaN\n+#define __glibcpp_long_double_has_quiet_NaN false\n+#endif\n+\n+#ifndef __glibcpp_long_double_has_signaling_NaN\n+#define __glibcpp_long_double_has_signaling_NaN false\n+#endif\n+\n+#ifndef __glibcpp_long_double_has_denorm\n+#define __glibcpp_long_double_has_denorm denorm_absent\n+#endif\n+\n+#ifndef __glibcpp_long_double_has_denorm_loss\n+#define __glibcpp_long_double_has_denorm_loss false\n+#endif\n+\n+#ifndef __glibcpp_long_double_infinity\n+#define __glibcpp_long_double_infinity 0.0L\n+#endif\n+\n+#ifndef __glibcpp_long_double_quiet_NaN\n+#define __glibcpp_long_double_quiet_NaN 0.0L\n+#endif\n+\n+#ifndef __glibcpp_long_double_signaling_NaN\n+#define __glibcpp_long_double_signaling_NaN 0.0L\n+#endif\n+\n+#ifndef __glibcpp_long_double_denorm_min\n+#define __glibcpp_long_double_denorm_min 0.0L\n+#endif\n+\n+#ifndef __glibcpp_long_double_is_iec559\n+#define __glibcpp_long_double_is_iec559 false\n+#endif\n+\n+#ifndef __glibcpp_long_double_is_bounded\n+#define __glibcpp_long_double_is_bounded true\n+#endif\n+\n+#ifndef __glibcpp_long_double_is_modulo\n+#define __glibcpp_long_double_is_modulo false\n+#endif\n+\n+#ifndef __glibcpp_long_double_traps\n+#define __glibcpp_long_double_traps false\n+#endif\n+\n+#ifndef __glibcpp_long_double_tinyness_before\n+#define __glibcpp_long_double_tinyness_before false\n #endif\n+\n+#ifndef __glibcpp_long_double_round_style\n+#define __glibcpp_long_double_round_style round_toward_zero\n+#endif\n+\n+\n+namespace std\n+{\n+  enum float_round_style \n+  {\n+    round_indeterminate       = -1,\n+    round_toward_zero         = 0,\n+    round_to_nearest          = 1,\n+    round_toward_infinity     = 2,\n+    round_toward_neg_infinity = 3\n+  };\n+\n+  enum float_denorm_style \n+  {\n+    denorm_indeterminate = -1,\n+    denorm_absent        = 0,\n+    denorm_present       = 1\n+  };\n+\n+  //\n+  // The primary class traits\n+  //\n+  template<typename _Tp> \n+    struct numeric_limits \n+    {\n+      static const bool is_specialized = false;\n+\n+      static _Tp min() throw() { return static_cast<_Tp>(0); }\n+      static _Tp max() throw() { return static_cast<_Tp>(0); }\n+\n+      static const int digits = 0;\n+      static const int digits10 = 0;\n+      static const bool is_signed = false;\n+      static const bool is_integer = false;\n+      static const bool is_exact = false;\n+      static const int radix = 0;\n+\n+      static _Tp epsilon() throw() { return static_cast<_Tp>(0); }\n+      static _Tp round_error() throw() { return static_cast<_Tp>(0); }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static _Tp infinity() throw()  { return static_cast<_Tp>(0); }\n+      static _Tp quiet_NaN() throw() { return static_cast<_Tp>(0); }\n+      static _Tp signaling_NaN() throw() { return static_cast<_Tp>(0); }\n+      static _Tp denorm_min() throw() { return static_cast<_Tp>(0); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = false;\n+      static const bool is_modulo = false;\n+\n+      static const bool traps = false;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_specialized;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::digits;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::digits10;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_signed;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_integer;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_exact;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::radix;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::min_exponent;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::min_exponent10;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::max_exponent;\n+\n+  template<typename _Tp> \n+    const int\n+    numeric_limits<_Tp>::max_exponent10;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_infinity;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_quiet_NaN;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_signaling_NaN;\n+\n+  template<typename _Tp> \n+    const float_denorm_style\n+    numeric_limits<_Tp>::has_denorm;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::has_denorm_loss;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_iec559;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_bounded;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::is_modulo;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::traps;\n+\n+  template<typename _Tp> \n+    const bool\n+    numeric_limits<_Tp>::tinyness_before;\n+\n+  template<typename _Tp> \n+    const float_round_style\n+    numeric_limits<_Tp>::round_style;\n+\n+  // Now there follow 15 explicit specializations.  Yes, 15.  Make sure\n+  // you get the count right.\n+  \n+  template<>\n+    struct numeric_limits<bool>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static bool min() throw()\n+      { return false; }\n+\n+      static bool max() throw()\n+      { return true; }\n+\n+      static const int digits = __glibcpp_bool_digits;\n+      static const int digits10 = 0;\n+      static const bool is_signed = false;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static bool epsilon() throw()\n+      { return false; }\n+      static bool round_error() throw()\n+      { return false; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static bool infinity() throw()\n+      { return false; }\n+      static bool quiet_NaN() throw()\n+      { return false; }\n+      static bool signaling_NaN() throw()\n+      { return false; }\n+      static bool denorm_min() throw()\n+      { return false; }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      // It is not clear what it means for a boolean type to trap.\n+      // This is a DR on the LWG issue list.  Here, I use integer\n+      // promotion semantics.\n+      static const bool traps = __glibcpp_signed_int_traps\n+               || __glibcpp_signed_long_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_bool_digits  \n+  \n+  template<>\n+    struct numeric_limits<char>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static char min() throw()\n+      { return __glibcpp_char_min; }\n+      static char max() throw()\n+      { return __glibcpp_char_max; }\n+\n+      static const int digits = __glibcpp_char_digits;\n+      static const int digits10 = __glibcpp_char_digits10;\n+      static const bool is_signed = __glibcpp_plain_char_is_signed;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static char epsilon() throw()\n+      { return char(); }\n+      static char round_error() throw()\n+      { return char(); }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static char infinity() throw()\n+      { return char(); }\n+      static char quiet_NaN() throw()\n+      { return char(); }\n+      static char signaling_NaN() throw()\n+      { return char(); }\n+      static char denorm_min() throw()\n+      { return static_cast<char>(0); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_char_is_modulo;\n+\n+      static const bool traps = __glibcpp_char_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_char_min\n+#undef __glibcpp_char_max  \n+#undef __glibcpp_char_digits\n+#undef __glibcpp_char_digits10\n+#undef __glibcpp_char_is_signed\n+#undef __glibcpp_char_is_modulo\n+#undef __glibcpp_char_traps\n+\n+\n+\n+  template<>\n+    struct numeric_limits<signed char>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static signed char min() throw()\n+      { return __glibcpp_signed_char_min; }\n+      static signed char max() throw()\n+      { return __glibcpp_signed_char_max; }\n+\n+      static const int digits = __glibcpp_signed_char_digits;\n+      static const int digits10 = __glibcpp_signed_char_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static signed char epsilon() throw()\n+      { return 0; }\n+      static signed char round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static signed char infinity() throw()\n+      { return static_cast<signed char>(0); }\n+      static signed char quiet_NaN() throw()\n+      { return static_cast<signed char>(0); }\n+      static signed char signaling_NaN() throw()\n+      { return static_cast<signed char>(0); }\n+      static signed char denorm_min() throw()\n+      { return static_cast<signed char>(0); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_signed_char_is_modulo;\n+\n+      static const bool traps = __glibcpp_signed_char_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_signed_char_min\n+#undef __glibcpp_signed_char_max\n+#undef __glibcpp_signed_char_digits\n+#undef __glibcpp_signed_char_digits10\n+#undef __glibcpp_signed_char_is_modulo  \n+#undef __glibcpp_signed_char_traps  \n+\n+  template<>\n+    struct numeric_limits<unsigned char>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static unsigned char min() throw()\n+      { return 0; }\n+      static unsigned char max() throw()\n+      { return __glibcpp_unsigned_char_max; }\n+\n+      static const int digits = __glibcpp_unsigned_char_digits;\n+      static const int digits10 = __glibcpp_unsigned_char_digits10;\n+      static const bool is_signed = false;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static unsigned char epsilon() throw()\n+      { return 0; }\n+      static unsigned char round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static unsigned char infinity() throw()\n+      { return static_cast<unsigned char>(0); }\n+      static unsigned char quiet_NaN() throw()\n+      { return static_cast<unsigned char>(0); }\n+      static unsigned char signaling_NaN() throw()\n+      { return static_cast<unsigned char>(0); }\n+      static unsigned char denorm_min() throw()\n+      { return static_cast<unsigned char>(0); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = __glibcpp_unsigned_char_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_unsigned_char_max\n+#undef __glibcpp_unsigned_char_digits\n+#undef __glibcpp_unsigned_char_digits10\n+#undef __glibcpp_unsigned_char_traps  \n+\n+  template<>\n+    struct numeric_limits<wchar_t>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static wchar_t min() throw()\n+      { return __glibcpp_wchar_t_min; }\n+      static wchar_t max() throw()\n+      { return __glibcpp_wchar_t_max; }\n+\n+      static const int digits = __glibcpp_wchar_t_digits;\n+      static const int digits10 = __glibcpp_wchar_t_digits10;\n+      static const bool is_signed = __glibcpp_wchar_t_is_signed;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static wchar_t epsilon() throw()\n+      { return 0; }\n+      static wchar_t round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static wchar_t infinity() throw()\n+      { return wchar_t(); }\n+      static wchar_t quiet_NaN() throw()\n+      { return wchar_t(); }\n+      static wchar_t signaling_NaN() throw()\n+      { return wchar_t(); }\n+      static wchar_t denorm_min() throw()\n+      { return wchar_t(); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_wchar_t_is_modulo;\n+\n+      static const bool traps = __glibcpp_wchar_t_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_wchar_t_min\n+#undef __glibcpp_wchar_t_max\n+#undef __glibcpp_wchar_t_digits\n+#undef __glibcpp_wchar_t_digits10  \n+#undef __glibcpp_wchar_t_is_signed\n+#undef __glibcpp_wchar_t_is_modulo\n+#undef __glibcpp_wchar_t_traps  \n+  \n+  template<>\n+    struct numeric_limits<short>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static short min() throw()\n+      { return __glibcpp_signed_short_min; }\n+      static short max() throw()\n+      { return __glibcpp_signed_short_max; }\n+\n+      static const int digits = __glibcpp_signed_short_digits;\n+      static const int digits10 = __glibcpp_signed_short_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static short epsilon() throw()\n+      { return 0; }\n+      static short round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static short infinity() throw()\n+      { return short(); }\n+      static short quiet_NaN() throw()\n+      { return short(); }\n+      static short signaling_NaN() throw()\n+      { return short(); }\n+      static short denorm_min() throw()\n+      { return short(); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_signed_short_is_modulo;\n+\n+      static const bool traps = __glibcpp_signed_short_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_signed_short_min\n+#undef __glibcpp_signed_short_max\n+#undef __glibcpp_signed_short_digits\n+#undef __glibcpp_signed_short_digits10\n+#undef __glibcpp_signed_short_is_modulo\n+#undef __glibcpp_signed_short_traps  \n+  \n+  template<>\n+    struct numeric_limits<unsigned short>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static unsigned short min() throw()\n+      { return 0; }\n+      static unsigned short max() throw()\n+      { return __glibcpp_unsigned_short_max; }\n+\n+      static const int digits = __glibcpp_unsigned_short_digits;\n+      static const int digits10 = __glibcpp_unsigned_short_digits10;\n+      static const bool is_signed = false;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static unsigned short epsilon() throw()\n+      { return 0; }\n+      static unsigned short round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static unsigned short infinity() throw()\n+      { return static_cast<unsigned short>(0); }\n+      static unsigned short quiet_NaN() throw()\n+      { return static_cast<unsigned short>(0); }\n+      static unsigned short signaling_NaN() throw()\n+      { return static_cast<unsigned short>(0); }\n+      static unsigned short denorm_min() throw()\n+      { return static_cast<unsigned short>(0); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = __glibcpp_unsigned_short_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_unsigned_short_max\n+#undef __glibcpp_unsigned_short_digits\n+#undef __glibcpp_unsigned_short_digits10\n+#undef __glibcpp_unsigned_short_traps  \n+  \n+  template<>\n+    struct numeric_limits<int>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static int min() throw()\n+      { return __glibcpp_signed_int_min; }\n+      static int max() throw()\n+      { return __glibcpp_signed_int_max; }\n+\n+      static const int digits = __glibcpp_signed_int_digits;\n+      static const int digits10 = __glibcpp_signed_int_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static int epsilon() throw()\n+      { return 0; }\n+      static int round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static int infinity() throw()\n+      { return static_cast<int>(0); }\n+      static int quiet_NaN() throw()\n+      { return static_cast<int>(0); }\n+      static int signaling_NaN() throw()\n+      { return static_cast<int>(0); }\n+      static int denorm_min() throw()\n+      { return static_cast<int>(0); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_signed_int_is_modulo;\n+\n+      static const bool traps = __glibcpp_signed_int_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_signed_int_min\n+#undef __glibcpp_signed_int_max\n+#undef __glibcpp_signed_int_digits\n+#undef __glibcpp_signed_int_digits10\n+#undef __glibcpp_signed_int_is_modulo\n+#undef __glibcpp_signed_int_traps  \n+  \n+  template<>\n+    struct numeric_limits<unsigned int>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static unsigned int min() throw()\n+      { return 0; }\n+          static unsigned int max() throw()\n+      { return __glibcpp_unsigned_int_max; }\n+\n+      static const int digits = __glibcpp_unsigned_int_digits;\n+      static const int digits10 = __glibcpp_unsigned_int_digits10;\n+      static const bool is_signed = false;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static unsigned int epsilon() throw()\n+      { return 0; }\n+      static unsigned int round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static unsigned int infinity() throw()\n+      { return static_cast<unsigned int>(0); }\n+      static unsigned int quiet_NaN() throw()\n+      { return static_cast<unsigned int>(0); }\n+      static unsigned int signaling_NaN() throw()\n+      { return static_cast<unsigned int>(0); }\n+      static unsigned int denorm_min() throw()\n+      { return static_cast<unsigned int>(0); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = __glibcpp_unsigned_int_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_unsigned_int_max\n+#undef __glibcpp_unsigned_int_digits\n+#undef __glibcpp_unsigned_int_digits10\n+#undef __glibcpp_unsigned_int_traps  \n+\n+  template<>\n+    struct numeric_limits<long>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static long min() throw()\n+      { return __glibcpp_signed_long_min; }\n+      static long max() throw()\n+      { return __glibcpp_signed_long_max; }\n+\n+      static const int digits = __glibcpp_signed_long_digits;\n+      static const int digits10 = __glibcpp_signed_long_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static long epsilon() throw()\n+      { return 0; }\n+      static long round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static long infinity() throw()\n+      { return static_cast<long>(0); }\n+      static long quiet_NaN() throw()\n+      { return static_cast<long>(0); }\n+      static long signaling_NaN() throw()\n+      { return static_cast<long>(0); }\n+      static long denorm_min() throw()\n+      { return static_cast<long>(0); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_signed_long_is_modulo;\n+\n+      static const bool traps = __glibcpp_signed_long_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_signed_long_min\n+#undef __glibcpp_signed_long_max\n+#undef __glibcpp_signed_long_digits\n+#undef __glibcpp_signed_long_digits10\n+#undef __glibcpp_signed_long_is_modulo\n+#undef __glibcpp_signed_long_traps  \n+  \n+  template<>\n+    struct numeric_limits<unsigned long>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static unsigned long min() throw()\n+      { return 0; }\n+      static unsigned long max() throw()\n+      { return __glibcpp_unsigned_long_max; }\n+\n+      static const int digits = __glibcpp_unsigned_long_digits;\n+      static const int digits10 = __glibcpp_unsigned_long_digits10;\n+      static const bool is_signed = false;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static unsigned long epsilon() throw()\n+      { return 0; }\n+      static unsigned long round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static unsigned long infinity() throw()\n+      { return static_cast<unsigned long>(0); }\n+      static unsigned long quiet_NaN() throw()\n+      { return static_cast<unsigned long>(0); }\n+      static unsigned long signaling_NaN() throw()\n+      { return static_cast<unsigned long>(0); }\n+      static unsigned long denorm_min() throw()\n+      { return static_cast<unsigned long>(0); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = __glibcpp_unsigned_long_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_unsigned_long_max\n+#undef __glibcpp_unsigned_long_digits\n+#undef __glibcpp_unsigned_long_digits10\n+#undef __glibcpp_unsigned_long_traps  \n+\n+  template<>\n+    struct numeric_limits<long long>\n+    {\n+      static const bool is_specialized = true;\n+      \n+      static long long min() throw()\n+      { return __glibcpp_signed_long_long_min; }\n+      static long long max() throw()\n+      { return __glibcpp_signed_long_long_max; }\n+      \n+      static const int digits = __glibcpp_signed_long_long_digits;\n+      static const int digits10 = __glibcpp_signed_long_long_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static long long epsilon() throw()\n+      { return 0; }\n+      static long long round_error() throw()\n+      { return 0; }\n+      \n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+      \n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+      \n+      static long long infinity() throw()\n+      { return static_cast<long long>(0); }\n+      static long long quiet_NaN() throw()\n+      { return static_cast<long long>(0); }\n+      static long long signaling_NaN() throw()\n+      { return static_cast<long long>(0); }\n+      static long long denorm_min() throw()\n+      { return static_cast<long long>(0); }\n+      \n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = __glibcpp_signed_long_long_is_modulo;\n+\n+      static const bool traps = __glibcpp_signed_long_long_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_signed_long_long_min\n+#undef __glibcpp_signed_long_long_max\n+#undef __glibcpp_signed_long_long_digits\n+#undef __glibcpp_signed_long_long_digits10\n+#undef __glibcpp_signed_long_long_is_modulo\n+#undef __glibcpp_signed_long_long_traps  \n+  \n+  template<>\n+    struct numeric_limits<unsigned long long>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static unsigned long long min() throw()\n+      { return 0; }\n+      static unsigned long long max() throw()\n+      { return __glibcpp_unsigned_long_long_max; }\n+\n+      static const int digits = __glibcpp_unsigned_long_long_digits;\n+      static const int digits10 = __glibcpp_unsigned_long_long_digits10;\n+      static const bool is_signed = false;\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static unsigned long long epsilon() throw()\n+      { return 0; }\n+      static unsigned long long round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static unsigned long long infinity() throw()\n+      { return static_cast<unsigned long long>(0); }\n+      static unsigned long long quiet_NaN() throw()\n+      { return static_cast<unsigned long long>(0); }\n+      static unsigned long long signaling_NaN() throw()\n+      { return static_cast<unsigned long long>(0); }\n+      static unsigned long long denorm_min() throw()\n+      { return static_cast<unsigned long long>(0); }\n+\n+      static const bool is_iec559 = true;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = true;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+#undef __glibcpp_unsigned_long_long_max\n+#undef __glibcpp_unsigned_long_long_digits\n+#undef __glibcpp_unsigned_long_long_digits10\n+#undef __glibcpp_unsigned_long_long_traps  \n+\n+  template<>\n+    struct numeric_limits<float>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static float min() throw()\n+      { return __glibcpp_float_min; }\n+      static float max() throw()\n+      { return __glibcpp_float_max; }\n+\n+      static const int digits = __glibcpp_float_digits;\n+      static const int digits10 = __glibcpp_float_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = false;\n+      static const bool is_exact = false;\n+      static const int radix = __glibcpp_float_radix;\n+      static float epsilon() throw()\n+      { return __glibcpp_float_epsilon; }\n+      static float round_error() throw()\n+      { return __glibcpp_float_round_error; }\n+\n+      static const int min_exponent = __glibcpp_float_min_exponent;\n+      static const int min_exponent10 = __glibcpp_float_min_exponent10;\n+      static const int max_exponent = __glibcpp_float_max_exponent;\n+      static const int max_exponent10 = __glibcpp_float_max_exponent10;\n+\n+      static const bool has_infinity = __glibcpp_float_has_infinity;\n+      static const bool has_quiet_NaN = __glibcpp_float_has_quiet_NaN;\n+      static const bool has_signaling_NaN = __glibcpp_float_has_signaling_NaN;\n+      static const float_denorm_style has_denorm = __glibcpp_float_has_denorm;\n+      static const bool has_denorm_loss = __glibcpp_float_has_denorm_loss;\n+\n+      static float infinity() throw()\n+      { return __glibcpp_float_infinity; }\n+      static float quiet_NaN() throw()\n+      { return __glibcpp_float_quiet_NaN; }\n+      static float signaling_NaN() throw()\n+      { return __glibcpp_float_signaling_NaN; }\n+      static float denorm_min() throw()\n+      { return __glibcpp_float_denorm_min; }\n+\n+      static const bool is_iec559 = __glibcpp_float_is_iec559;\n+      static const bool is_bounded = __glibcpp_float_is_bounded;\n+      static const bool is_modulo = __glibcpp_float_is_modulo;\n+\n+      static const bool traps = __glibcpp_float_traps;\n+      static const bool tinyness_before = __glibcpp_float_tinyness_before;\n+      static const float_round_style round_style = __glibcpp_float_round_style;\n+    };\n+\n+#undef __glibcpp_float_min\n+#undef __glibcpp_float_max\n+#undef __glibcpp_float_digits\n+#undef __glibcpp_float_digits10\n+#undef __glibcpp_float_radix\n+#undef __glibcpp_float_round_error\n+#undef __glibcpp_float_min_exponent\n+#undef __glibcpp_float_min_exponent10\n+#undef __glibcpp_float_max_exponent\n+#undef __glibcpp_float_max_exponent10\n+#undef __glibcpp_float_has_infinity\n+#undef __glibcpp_float_has_quiet_NaN\n+#undef __glibcpp_float_has_signaling_NaN\n+#undef __glibcpp_float_has_denorm\n+#undef __glibcpp_float_has_denorm_loss\n+#undef __glibcpp_float_infinity\n+#undef __glibcpp_float_quiet_NaN\n+#undef __glibcpp_float_signaling_NaN\n+#undef __glibcpp_float_denorm_min\n+#undef __glibcpp_float_is_iec559\n+#undef __glibcpp_float_is_bounded\n+#undef __glibcpp_float_is_modulo\n+#undef __glibcpp_float_traps\n+#undef __glibcpp_float_tinyness_before\n+#undef __glibcpp_float_round_style  \n+\n+  template<>\n+    struct numeric_limits<double>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static double min() throw()\n+      { return __glibcpp_double_min; }\n+      static double max() throw()\n+      { return __glibcpp_double_max; }\n+\n+      static const int digits = __glibcpp_double_digits;\n+      static const int digits10 = __glibcpp_double_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = false;\n+      static const bool is_exact = false;\n+      static const int radix = __glibcpp_double_radix;\n+      static double epsilon() throw()\n+      { return __glibcpp_double_epsilon; }\n+      static double round_error() throw()\n+      { return __glibcpp_double_round_error; }\n+\n+      static const int min_exponent = __glibcpp_double_min_exponent;\n+      static const int min_exponent10 = __glibcpp_double_min_exponent10;\n+      static const int max_exponent = __glibcpp_double_max_exponent;\n+      static const int max_exponent10 = __glibcpp_double_max_exponent10;\n+\n+      static const bool has_infinity = __glibcpp_double_has_infinity;\n+      static const bool has_quiet_NaN = __glibcpp_double_has_quiet_NaN;\n+      static const bool has_signaling_NaN = __glibcpp_double_has_signaling_NaN;\n+      static const float_denorm_style has_denorm =\n+              __glibcpp_double_has_denorm;\n+      static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n+\n+      static double infinity() throw()\n+      { return __glibcpp_double_infinity; }\n+      static double quiet_NaN() throw()\n+      { return __glibcpp_double_quiet_NaN; }\n+      static double signaling_NaN() throw()\n+      { return __glibcpp_double_signaling_NaN; }\n+      static double denorm_min() throw()\n+      { return __glibcpp_double_denorm_min; }\n+\n+      static const bool is_iec559 = __glibcpp_double_is_iec559;\n+      static const bool is_bounded = __glibcpp_double_is_bounded;\n+      static const bool is_modulo = __glibcpp_double_is_modulo;\n+\n+      static const bool traps = __glibcpp_double_traps;\n+      static const bool tinyness_before = __glibcpp_double_tinyness_before;\n+      static const float_round_style round_style =\n+              __glibcpp_double_round_style;\n+    };\n+\n+#undef __glibcpp_double_min\n+#undef __glibcpp_double_max\n+#undef __glibcpp_double_digits\n+#undef __glibcpp_double_digits10\n+#undef __glibcpp_double_radix\n+#undef __glibcpp_double_round_error\n+#undef __glibcpp_double_min_exponent\n+#undef __glibcpp_double_min_exponent10\n+#undef __glibcpp_double_max_exponent\n+#undef __glibcpp_double_max_exponent10\n+#undef __glibcpp_double_has_infinity\n+#undef __glibcpp_double_has_quiet_NaN\n+#undef __glibcpp_double_has_signaling_NaN\n+#undef __glibcpp_double_has_denorm\n+#undef __glibcpp_double_has_denorm_loss\n+#undef __glibcpp_double_infinity\n+#undef __glibcpp_double_quiet_NaN\n+#undef __glibcpp_double_signaling_NaN\n+#undef __glibcpp_double_denorm_min\n+#undef __glibcpp_double_is_iec559\n+#undef __glibcpp_double_is_bounded\n+#undef __glibcpp_double_is_modulo\n+#undef __glibcpp_double_traps\n+#undef __glibcpp_double_tinyness_before\n+#undef __glibcpp_double_round_style  \n+  \n+  \n+  template<>\n+    struct numeric_limits<long double>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static long double min() throw()\n+      { return __glibcpp_long_double_min; }\n+      static long double max() throw()\n+      { return __glibcpp_long_double_max; }\n+\n+      static const int digits = __glibcpp_long_double_digits;\n+      static const int digits10 = __glibcpp_long_double_digits10;\n+      static const bool is_signed = true;\n+      static const bool is_integer = false;\n+      static const bool is_exact = false;\n+      static const int radix = __glibcpp_long_double_radix;\n+      static long double epsilon() throw()\n+      { return __glibcpp_long_double_epsilon; }\n+      static long double round_error() throw()\n+      { return __glibcpp_long_double_round_error; }\n+\n+      static const int min_exponent = __glibcpp_long_double_min_exponent;\n+      static const int min_exponent10 = __glibcpp_long_double_min_exponent10;\n+      static const int max_exponent = __glibcpp_long_double_max_exponent;\n+      static const int max_exponent10 = __glibcpp_long_double_max_exponent10;\n+\n+      static const bool has_infinity = __glibcpp_long_double_has_infinity;\n+      static const bool has_quiet_NaN = __glibcpp_long_double_has_quiet_NaN;\n+      static const bool has_signaling_NaN =\n+                __glibcpp_long_double_has_signaling_NaN;\n+      static const float_denorm_style has_denorm =\n+                __glibcpp_long_double_has_denorm;\n+      static const bool has_denorm_loss =\n+                __glibcpp_long_double_has_denorm_loss;\n+\n+      static long double infinity() throw()\n+      { return __glibcpp_long_double_infinity; }\n+      static long double quiet_NaN() throw()\n+      { return __glibcpp_long_double_quiet_NaN; }\n+      static long double signaling_NaN() throw()\n+      { return __glibcpp_long_double_signaling_NaN; }\n+      static long double denorm_min() throw()\n+      { return __glibcpp_long_double_denorm_min; }\n+\n+      static const bool is_iec559 = __glibcpp_long_double_is_iec559;\n+      static const bool is_bounded = __glibcpp_long_double_is_bounded;\n+      static const bool is_modulo = __glibcpp_long_double_is_modulo;\n+\n+      static const bool traps = __glibcpp_long_double_traps; \n+      static const bool tinyness_before = __glibcpp_long_double_tinyness_before;\n+      static const float_round_style round_style = \n+        __glibcpp_long_double_round_style;\n+    };\n+\n+#undef __glibcpp_long_double_min\n+#undef __glibcpp_long_double_max\n+#undef __glibcpp_long_double_digits\n+#undef __glibcpp_long_double_digits10\n+#undef __glibcpp_long_double_radix\n+#undef __glibcpp_long_double_round_error\n+#undef __glibcpp_long_double_min_exponent\n+#undef __glibcpp_long_double_min_exponent10\n+#undef __glibcpp_long_double_max_exponent\n+#undef __glibcpp_long_double_max_exponent10\n+#undef __glibcpp_long_double_has_infinity\n+#undef __glibcpp_long_double_has_quiet_NaN\n+#undef __glibcpp_long_double_has_signaling_NaN\n+#undef __glibcpp_long_double_has_denorm\n+#undef __glibcpp_long_double_has_denorm_loss\n+#undef __glibcpp_long_double_infinity\n+#undef __glibcpp_long_double_quiet_NaN\n+#undef __glibcpp_long_double_signaling_NaN\n+#undef __glibcpp_long_double_denorm_min\n+#undef __glibcpp_long_double_is_iec559\n+#undef __glibcpp_long_double_is_bounded\n+#undef __glibcpp_long_double_is_modulo\n+#undef __glibcpp_long_double_traps\n+#undef __glibcpp_long_double_tinyness_before\n+#undef __glibcpp_long_double_round_style  \n+  \n+} // namespace std\n+\n+#endif // _CPP_NUMERIC_LIMITS"}, {"sha": "683e0a7e66dbbcdc0d7d1184017294f549cb3959", "filename": "libstdc++-v3/include/std/list", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <list> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,51 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file list\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_list.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_LIST\n-#include <bits/std_list.h>\n-#endif\n+#define _CPP_LIST 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/functexcept.h>\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_alloc.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_list.h>\n+\n+#endif /* _CPP_LIST */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "82089d015397c75eef08204ce96173effa03da2b", "filename": "libstdc++-v3/include/std/locale", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Locale support -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,26 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file locale\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+/** @file std_locale.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_LOCALE\n-#include <bits/std_locale.h>\n+#define _CPP_LOCALE\t1\n+\n+#pragma GCC system_header\n+\n+#include <bits/localefwd.h>\n+#include <bits/locale_facets.h>\n+#include <bits/locale_facets.tcc>\n+\n #endif\n+\n+// Local Variables:\n+// mode:c++\n+// End:"}, {"sha": "0dd38bfafd383ada5eea289337928a29ca7aacab", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <map> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,48 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file map\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_map.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_MAP\n-#include <bits/std_map.h>\n-#endif\n+#define _CPP_MAP 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/stl_tree.h>\n+#include <bits/stl_map.h>\n+#include <bits/stl_multimap.h>\n+\n+#endif /* _CPP_MAP */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "c9a2e59e48e1469f09ccef1fd79c699e854861aa", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 118, "deletions": 6, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <memory> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,123 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file memory\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ * Copyright (c) 1997-1999\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ */\n+\n+/** @file std_memory.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_MEMORY\n-#include <bits/std_memory.h>\n-#endif\n+#define _CPP_MEMORY 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_alloc.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_iterator_base_types.h> //for iterator_traits\n+#include <bits/stl_tempbuf.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_raw_storage_iter.h>\n+\n+namespace std\n+{\n+\n+ template<class _Tp1> struct auto_ptr_ref {\n+   _Tp1* _M_ptr;\n+   auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}\n+};\n+\n+/**\n+ *  A simple smart pointer providing strict ownership semantics.  (More later.)\n+*/\n+template <class _Tp> class auto_ptr {\n+private:\n+  _Tp* _M_ptr;\n+\n+public:\n+  typedef _Tp element_type;\n+\n+  explicit auto_ptr(_Tp* __p = 0) throw() : _M_ptr(__p) {}\n+  auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) {}\n+\n+  template <class _Tp1> auto_ptr(auto_ptr<_Tp1>& __a) throw()\n+    : _M_ptr(__a.release()) {}\n+\n+  auto_ptr& operator=(auto_ptr& __a) throw() {\n+    reset(__a.release());\n+    return *this;\n+  }\n+\n+  template <class _Tp1>\n+  auto_ptr& operator=(auto_ptr<_Tp1>& __a) throw() {\n+    reset(__a.release());\n+    return *this;\n+  }\n+  \n+  // Note: The C++ standard says there is supposed to be an empty throw\n+  // specification here, but omitting it is standard conforming.  Its \n+  // presence can be detected only if _Tp::~_Tp() throws, but (17.4.3.6/2)\n+  // this is prohibited.\n+  ~auto_ptr() { delete _M_ptr; }\n+ \n+  _Tp& operator*() const throw() {\n+    return *_M_ptr;\n+  }\n+  _Tp* operator->() const throw() {\n+    return _M_ptr;\n+  }\n+  _Tp* get() const throw() {\n+    return _M_ptr;\n+  }\n+  _Tp* release() throw() {\n+    _Tp* __tmp = _M_ptr;\n+    _M_ptr = 0;\n+    return __tmp;\n+  }\n+  void reset(_Tp* __p = 0) throw() {\n+    if (__p != _M_ptr) {\n+      delete _M_ptr;\n+      _M_ptr = __p;\n+    }    \n+  }\n+\n+public:\n+  auto_ptr(auto_ptr_ref<_Tp> __ref) throw()\n+    : _M_ptr(__ref._M_ptr) {}\n+\n+  auto_ptr& operator=(auto_ptr_ref<_Tp> __ref) throw() {\n+    if (__ref._M_ptr != this->get()) {\n+      delete _M_ptr;\n+      _M_ptr = __ref._M_ptr;\n+    }\n+    return *this;\n+  }\n+\n+  template <class _Tp1> operator auto_ptr_ref<_Tp1>() throw() \n+    { return auto_ptr_ref<_Tp>(this->release()); }\n+  template <class _Tp1> operator auto_ptr<_Tp1>() throw()\n+    { return auto_ptr<_Tp1>(this->release()); }\n+};\n+\n+} // namespace std\n+\n+#endif /* _CPP_MEMORY */\n+\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "e7a6adc3ad463275275f8c44f2f4054358db0ce0", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <numeric> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,49 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file numeric\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_numeric.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_NUMERIC\n-#include <bits/std_numeric.h>\n-#endif\n+#define _CPP_NUMERIC 1\n+\n+#pragma GCC system_header\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include <iterator>\n+#include <bits/stl_function.h>\n+#include <bits/stl_numeric.h>\n+\n+#endif /* _CPP_NUMERIC */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "e3ec3260ec0dbccc9345e1940d6282a9a01bbb5c", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 257, "deletions": 6, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Output streams -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,262 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file ostream\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.6.2  Output streams\n+//\n+\n+/** @file std_ostream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_OSTREAM\n-#include <bits/std_ostream.h>\n+#define _CPP_OSTREAM\t1\n+\n+#pragma GCC system_header\n+\n+#include <ios>\n+\n+namespace std\n+{\n+  // 27.6.2.1 Template class basic_ostream\n+  template<typename _CharT, typename _Traits>\n+    class basic_ostream : virtual public basic_ios<_CharT, _Traits>\n+    {\n+    public:\n+\n+      // Types (inherited from basic_ios (27.4.4)):\n+      typedef _CharT                     \t\tchar_type;\n+      typedef typename _Traits::int_type \t\tint_type;\n+      typedef typename _Traits::pos_type \t\tpos_type;\n+      typedef typename _Traits::off_type \t\toff_type;\n+      typedef _Traits                    \t\ttraits_type;\n+      \n+      // Non-standard Types:\n+      typedef basic_streambuf<_CharT, _Traits> \t\t__streambuf_type;\n+      typedef basic_ios<_CharT, _Traits>\t\t__ios_type;\n+      typedef basic_ostream<_CharT, _Traits>\t\t__ostream_type;\n+      typedef ostreambuf_iterator<_CharT, _Traits>\t__ostreambuf_iter;\n+      typedef num_put<_CharT, __ostreambuf_iter>        __numput_type;\n+      typedef ctype<_CharT>           \t\t\t__ctype_type;\n+\n+      // 27.6.2.2 Constructor/destructor:\n+      explicit \n+      basic_ostream(__streambuf_type* __sb)\n+      { this->init(__sb); }\n+\n+      virtual \n+      ~basic_ostream() { }\n+\n+      // 27.6.2.3 Prefix/suffix:\n+      class sentry;\n+      friend class sentry;\n+      \n+      // 27.6.2.5 Formatted output:\n+      // 27.6.2.5.3  basic_ostream::operator<<\n+      __ostream_type&\n+      operator<<(__ostream_type& (*__pf)(__ostream_type&));\n+      \n+      __ostream_type&\n+      operator<<(__ios_type& (*__pf)(__ios_type&));\n+      \n+      __ostream_type&\n+      operator<<(ios_base& (*__pf) (ios_base&));\n+\n+      // 27.6.2.5.2 Arithmetic Inserters\n+      __ostream_type& \n+      operator<<(long __n);\n+      \n+      __ostream_type& \n+      operator<<(unsigned long __n);\n+\n+      __ostream_type& \n+      operator<<(bool __n);\n+\n+      __ostream_type& \n+      operator<<(short __n)\n+      { \n+\tios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\tif (__fmt & ios_base::oct || __fmt & ios_base::hex)\n+\t  return this->operator<<(static_cast<unsigned long>\n+\t\t\t\t  (static_cast<unsigned short>(__n)));\n+\telse\n+\t  return this->operator<<(static_cast<long>(__n));\n+      }\n+\n+      __ostream_type& \n+      operator<<(unsigned short __n)\n+      { return this->operator<<(static_cast<unsigned long>(__n)); }\n+\n+      __ostream_type& \n+      operator<<(int __n)\n+      { \n+\tios_base::fmtflags __fmt = this->flags() & ios_base::basefield;\n+\tif (__fmt & ios_base::oct || __fmt & ios_base::hex)\n+\t  return this->operator<<(static_cast<unsigned long>\n+\t\t\t\t  (static_cast<unsigned int>(__n)));\n+\telse\n+\t  return this->operator<<(static_cast<long>(__n));\n+      }\n+\n+      __ostream_type& \n+      operator<<(unsigned int __n)\n+      { return this->operator<<(static_cast<unsigned long>(__n)); }\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+      __ostream_type& \n+      operator<<(long long __n);\n+\n+      __ostream_type& \n+      operator<<(unsigned long long __n);\n+#endif\n+\n+      __ostream_type& \n+      operator<<(double __f);\n+\n+      __ostream_type& \n+      operator<<(float __f)\n+      { return this->operator<<(static_cast<double>(__f)); }\n+\n+      __ostream_type& \n+      operator<<(long double __f);\n+\n+      __ostream_type& \n+      operator<<(const void* __p);\n+\n+      __ostream_type& \n+      operator<<(__streambuf_type* __sb);\n+\n+      // Unformatted output:\n+      __ostream_type& \n+      put(char_type __c);\n+\n+      __ostream_type& \n+      write(const char_type* __s, streamsize __n);\n+\n+      __ostream_type& \n+      flush();\n+\n+      // Seeks:\n+      pos_type \n+      tellp();\n+\n+      __ostream_type& \n+      seekp(pos_type);\n+\n+      __ostream_type& \n+      seekp(off_type, ios_base::seekdir);\n+\n+    private:\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+      // Not defined.  (Side effect of DR 50.)\n+      __ostream_type& \n+      operator=(const __ostream_type&);\n+\n+      basic_ostream(const __ostream_type&);\n #endif\n+    };\n+\n+  // 27.6.2.3  Class basic_ostream::sentry\n+  template <typename _CharT, typename _Traits>\n+    class basic_ostream<_CharT, _Traits>::sentry\n+    {\n+      // Data Members:\n+      bool \t\t\t\t_M_ok;\n+      basic_ostream<_CharT,_Traits>& \t_M_os;\n+      \n+    public:\n+      explicit\n+      sentry(basic_ostream<_CharT,_Traits>& __os);\n+\n+      ~sentry()\n+      {\n+\t// XXX MT\n+\tif (_M_os.flags() & ios_base::unitbuf && !uncaught_exception())\n+\t  {\n+\t    // Can't call flush directly or else will get into recursive lock.\n+\t    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)\n+\t      _M_os.setstate(ios_base::badbit);\n+\t  }\n+      }\n+\n+      operator bool() \n+      { return _M_ok; }\n+    };\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c);\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)\n+    { return (__out << __out.widen(__c)); }\n+\n+  // Specialization\n+  template <class _Traits> \n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>& __out, char __c);\n+\n+  // Signed and unsigned\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)\n+    { return (__out << static_cast<char>(__c)); }\n+  \n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)\n+    { return (__out << static_cast<char>(__c)); }\n+  \n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s);\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits> &\n+    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);\n+\n+  // Partial specializationss\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>& __out, const char* __s);\n+ \n+  // Signed and unsigned\n+  template<class _Traits>\n+    basic_ostream<char, _Traits>&\n+    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)\n+    { return (__out << reinterpret_cast<const char*>(__s)); }\n+\n+  template<class _Traits>\n+    basic_ostream<char, _Traits> &\n+    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)\n+    { return (__out << reinterpret_cast<const char*>(__s)); }\n+\n+  // 27.6.2.7 Standard basic_ostream manipulators\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>& \n+    endl(basic_ostream<_CharT, _Traits>& __os)\n+    { return flush(__os.put(__os.widen('\\n'))); }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>& \n+    ends(basic_ostream<_CharT, _Traits>& __os)\n+    { return __os.put(_CharT()); }\n+  \n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>& \n+    flush(basic_ostream<_CharT, _Traits>& __os)\n+    { return __os.flush(); }\n+\n+} // namespace std\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+# define export\n+#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+# include <bits/ostream.tcc>\n+#endif\n+#endif\n+\n+#endif\t/* _CPP_OSTREAM */\n+"}, {"sha": "ecf7f4c135d9e54df1ef9dabc0746b8594ab660f", "filename": "libstdc++-v3/include/std/queue", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fqueue", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fqueue", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fqueue?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <queue> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,55 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file queue\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_queue.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_QUEUE\n-#include <bits/std_queue.h>\n-#endif\n+#define _CPP_QUEUE 1\n+\n+#pragma GCC system_header\n+#include <bits/c++config.h>\n+#include <bits/functexcept.h>\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_alloc.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_vector.h>\n+#include <bits/stl_heap.h>\n+#include <bits/stl_deque.h>\n+#include <bits/stl_function.h>\n+#include <bits/stl_queue.h>\n+\n+#endif /* _CPP_QUEUE */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "dab8e71af5b760e4ded94308bdcf0171d6c1e399", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <set> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,48 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file set\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_set.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_SET\n-#include <bits/std_set.h>\n-#endif\n+#define _CPP_SET 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/stl_tree.h>\n+#include <bits/stl_set.h>\n+#include <bits/stl_multiset.h>\n+\n+#endif /* _CPP_SET */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "fb909862a1e5c2073c54d5b70fad9c1c71e008e3", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 341, "deletions": 6, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// String based streams -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,346 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file sstream\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.7  String-based streams\n+//\n+\n+/** @file std_sstream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_SSTREAM\n-#include <bits/std_sstream.h>\n+#define _CPP_SSTREAM\t1\n+\n+#pragma GCC system_header\n+\n+#include <istream>\n+#include <ostream>\n+\n+namespace std\n+{\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 251. basic_stringbuf missing allocator_type\n+      typedef _Alloc\t\t\t\t       \tallocator_type;\n+#endif\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard Types:\n+      typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n+      typedef basic_string<char_type, _Traits, _Alloc> \t__string_type;\n+      typedef typename __string_type::size_type\t\t__size_type;\n+\n+    private:\n+      // Data Members:\n+      __string_type \t\t_M_string;\n+      \n+    public:\n+      // Constructors:\n+      explicit \n+      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      : __streambuf_type(), _M_string()\n+      { _M_stringbuf_init(__mode); }\n+\n+      explicit \n+      basic_stringbuf(const __string_type& __str,\n+\t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      : __streambuf_type(), _M_string(__str.data(), __str.size())\n+      { _M_stringbuf_init(__mode); }\n+\n+      // Get and set:\n+      __string_type \n+      str() const \n+      {\n+\tif (_M_mode & ios_base::out)\n+\t  {\n+\t    // This is the deal: _M_string.size() is a value that\n+\t    // represents the size of the initial string that makes\n+\t    // _M_string, and may not be the correct size of the\n+\t    // current stringbuf internal buffer.\n+\t    __size_type __len = _M_string.size();\n+\t    if (_M_out_cur > _M_out_beg)\n+\t      __len = max(__size_type(_M_out_end - _M_out_beg), __len);\n+\t    return __string_type(_M_out_beg, _M_out_beg + __len);\n+\t  }\n+\telse\n+\t  return _M_string;\n+      }\n+\n+      void \n+      str(const __string_type& __s)\n+      {\n+\t_M_string = __s;\n+\t_M_stringbuf_init(_M_mode);\n+      }\n+\n+    protected:\n+      // Common initialization code for both ctors goes here.\n+      void\n+      _M_stringbuf_init(ios_base::openmode __mode)\n+      {\n+\t// _M_buf_size is a convenient alias for \"what the streambuf\n+\t// thinks the allocated size of the string really is.\" This is\n+\t// necessary as ostringstreams are implemented with the\n+\t// streambufs having control of the allocation and\n+\t// re-allocation of the internal string object, _M_string.\n+\t_M_buf_size = _M_string.size();\n+\n+\t// NB: Start ostringstream buffers at 512 bytes. This is an\n+\t// experimental value (pronounced \"arbitrary\" in some of the\n+\t// hipper english-speaking countries), and can be changed to\n+\t// suite particular needs.\n+\t_M_buf_size_opt = 512;\n+\t_M_mode = __mode;\n+\tif (_M_mode & ios_base::ate)\n+\t  _M_really_sync(0, _M_buf_size); \n+\telse  \n+\t  _M_really_sync(0, 0);\n+      }\n+\n+      // Overridden virtual functions:\n+      virtual int_type \n+      underflow()\n+      {\n+\tif (_M_in_cur && _M_in_cur < _M_in_end)\n+\t  return traits_type::to_int_type(*gptr());\n+\telse\n+\t  return traits_type::eof();\n+      }\n+\n+      virtual int_type \n+      pbackfail(int_type __c = traits_type::eof());\n+\n+      virtual int_type \n+      overflow(int_type __c = traits_type::eof());\n+\n+      virtual __streambuf_type* \n+      setbuf(char_type* __s, streamsize __n)\n+      { \n+\tif (__s && __n) \n+\t  {\n+\t    _M_string = __string_type(__s, __n);\n+\t    _M_really_sync(0, 0);\n+\t  }\n+\treturn this; \n+      } \n+\n+      virtual pos_type \n+      seekoff(off_type __off, ios_base::seekdir __way,\n+\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n+\n+      virtual pos_type \n+      seekpos(pos_type __sp, \n+\t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n+\n+      // Internal function for correctly updating the internal buffer\n+      // for a particular _M_string, due to initialization or\n+      // re-sizing of an existing _M_string.\n+      // Assumes: contents of _M_string and internal buffer match exactly.\n+      // __i == _M_in_cur - _M_in_beg      \n+      // __o == _M_out_cur - _M_out_beg\n+      virtual int \n+      _M_really_sync(__size_type __i, __size_type __o)\n+      {\n+\tchar_type* __base = const_cast<char_type*>(_M_string.data());\n+\tbool __testin = _M_mode & ios_base::in;\n+\tbool __testout = _M_mode & ios_base::out;\n+\t__size_type __len = _M_string.size();\n+\n+\t_M_buf = __base;\n+\tif (__testin)\n+\t    this->setg(__base, __base + __i, __base + __len);\n+\tif (__testout)\n+\t  {\n+\t    this->setp(__base, __base + __len);\n+\t    _M_out_cur += __o;\n+\t  }\n+\treturn 0;\n+      }\n+    };\n+\n+\n+  // 27.7.2  Template class basic_istringstream\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    class basic_istringstream : public basic_istream<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 251. basic_stringbuf missing allocator_type\n+      typedef _Alloc\t\t\t\t       \tallocator_type;\n+#endif\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard types:\n+      typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n+      typedef basic_stringbuf<_CharT, _Traits, _Alloc> \t__stringbuf_type;\n+      typedef basic_istream<char_type, traits_type>\t__istream_type;\n+\n+    private:\n+      __stringbuf_type\t_M_stringbuf;\n+\n+    public:\n+      // Constructors:\n+      explicit \n+      basic_istringstream(ios_base::openmode __mode = ios_base::in)\n+      : __istream_type(NULL), _M_stringbuf(__mode | ios_base::in)\n+      { this->init(&_M_stringbuf); }\n+\n+      explicit \n+      basic_istringstream(const __string_type& __str,\n+\t\t\t  ios_base::openmode __mode = ios_base::in)\n+      : __istream_type(NULL), _M_stringbuf(__str, __mode | ios_base::in)\n+      { this->init(&_M_stringbuf); }\n+\n+      ~basic_istringstream()\n+      { }\n+\n+      // Members:\n+      __stringbuf_type* \n+      rdbuf() const\n+      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n+\n+      __string_type\n+      str() const\n+      { return _M_stringbuf.str(); }\n+  \n+      void \n+      str(const __string_type& __s)\n+      { _M_stringbuf.str(__s); }\n+    };\n+\n+\n+  // 27.7.3  Template class basic_ostringstream\n+  template <typename _CharT, typename _Traits, typename _Alloc>\n+    class basic_ostringstream : public basic_ostream<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 251. basic_stringbuf missing allocator_type\n+      typedef _Alloc\t\t\t\t       \tallocator_type;\n+#endif\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard types:\n+      typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n+      typedef basic_stringbuf<_CharT, _Traits, _Alloc> \t__stringbuf_type;\n+      typedef basic_ostream<char_type, traits_type>\t__ostream_type;\n+\n+    private:\n+      __stringbuf_type\t_M_stringbuf;\n+\n+    public:\n+     // Constructors/destructor:\n+      explicit \n+      basic_ostringstream(ios_base::openmode __mode = ios_base::out)\n+      : __ostream_type(NULL), _M_stringbuf(__mode | ios_base::out)\n+      { this->init(&_M_stringbuf); }\n+\n+      explicit \n+      basic_ostringstream(const __string_type& __str,\n+\t\t\t  ios_base::openmode __mode = ios_base::out)\n+      : __ostream_type(NULL), _M_stringbuf(__str, __mode | ios_base::out)\n+      { this->init(&_M_stringbuf); }\n+\n+      ~basic_ostringstream()\n+      { }\n+\n+      // Members:\n+      __stringbuf_type* \n+      rdbuf() const\n+      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n+\n+      __string_type\n+      str() const\n+      { return _M_stringbuf.str(); }\n+ \n+      void \n+      str(const __string_type& __s)\n+      { _M_stringbuf.str(__s); }\n+    };\n+  \n+  \n+  // 27.7.4  Template class basic_stringstream\n+  template <typename _CharT, typename _Traits, typename _Alloc>\n+    class basic_stringstream : public basic_iostream<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 251. basic_stringbuf missing allocator_type\n+      typedef _Alloc\t\t\t\t       \tallocator_type;\n #endif\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard Types:\n+      typedef basic_string<_CharT, _Traits, _Alloc> \t__string_type;\n+      typedef basic_stringbuf<_CharT, _Traits, _Alloc> \t__stringbuf_type;\n+      typedef basic_iostream<char_type, traits_type>\t__iostream_type;\n+\n+    private:\n+      __stringbuf_type\t_M_stringbuf;\n+\n+    public:\n+      // Constructors/destructors\n+      explicit \n+      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)\n+      : __iostream_type(NULL), _M_stringbuf(__m)\n+      { this->init(&_M_stringbuf); }\n+\n+      explicit \n+      basic_stringstream(const __string_type& __str,\n+\t\t\t ios_base::openmode __m = ios_base::out | ios_base::in)\n+      : __iostream_type(NULL), _M_stringbuf(__str, __m)\n+      { this->init(&_M_stringbuf); }\n+\n+      ~basic_stringstream()\n+      { }\n+\n+      // Members:\n+      __stringbuf_type* \n+      rdbuf() const\n+      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n+\n+      __string_type\n+      str() const\n+      { return _M_stringbuf.str(); }\n+\n+      void \n+      str(const __string_type& __s)\n+      { _M_stringbuf.str(__s); }\n+    };\n+} // namespace std\n+\n+\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+# define export\n+#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+# include <bits/sstream.tcc>\n+#endif\n+#endif\n+\n+#endif\t// _CPP_SSTREAM"}, {"sha": "166f428bf85566313dbef8e27d8151ff5ccfea44", "filename": "libstdc++-v3/include/std/stack", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstack", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstack", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstack?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <stack> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,51 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file stack\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_stack.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_STACK\n-#include <bits/std_stack.h>\n-#endif\n+#define _CPP_STACK 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_alloc.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_deque.h>\n+#include <bits/stl_stack.h>\n+\n+#endif /* _CPP_STACK */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "66bac5011be1da336b4616ec69e746efd0e3229f", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 119, "deletions": 6, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// Standard exception classes  -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,124 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file stdexcept\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 19.1  Exception classes\n+//\n+\n+/** @file std_stdexcept.h\n+ *  The Standard C++ library provides classes to be used to report certain\n+ *  errors (17.4.4.8) in C++ programs.  In the error model reflected in these\n+ *  classes, errors are divided into two broad categories: logic errors and\n+ *  runtime errors.\n  */\n \n #ifndef _CPP_STDEXCEPT\n-#include <bits/std_stdexcept.h>\n-#endif\n+#define _CPP_STDEXCEPT \t  1\n+\n+#pragma GCC system_header\n+\n+#include <exception>\n+#include <string>\n+\n+namespace std \n+{\n+  /** Logic errors represent problems in the internal logic of a program;\n+   *  in theory, these are preventable, and even detectable before the\n+   *  program runs (e.g., violations of class invariants).\n+   *  @brief One of two subclasses of exception.\n+   */\n+  class logic_error : public exception \n+  {\n+    string _M_msg;\n+\n+  public:\n+    /** Takes a character string describing the error.  */\n+    explicit \n+    logic_error(const string&  __arg);\n+\n+    virtual \n+    ~logic_error() throw();\n+\n+    /** Returns a C-style character string describing the general cause of\n+     *  the current error (the same string passed to the ctor).  */\n+    virtual const char* \n+    what() const throw();\n+  };\n+\n+  /** Thrown by the library, or by you, to report domain errors (domain in\n+   *  the mathmatical sense).  */\n+  class domain_error : public logic_error \n+  {\n+  public:\n+    explicit domain_error(const string&  __arg);\n+  };\n+\n+  /** Thrown to report invalid arguments to functions.  */\n+  class invalid_argument : public logic_error \n+  {\n+  public:\n+    explicit invalid_argument(const string&  __arg);\n+  };\n+\n+  /** Thrown when an object is constructed that would exceed its maximum\n+   *  permitted size (e.g., a basic_string instance).  */\n+  class length_error : public logic_error \n+  {\n+  public:\n+    explicit length_error(const string&  __arg);\n+  };\n+\n+  /** This represents an argument whose value is not within the expected\n+   *  range (e.g., boundary checks in basic_string).  */\n+  class out_of_range : public logic_error \n+  {\n+  public:\n+    explicit out_of_range(const string&  __arg);\n+  };\n+\n+  /** Runtime errors represent problems outside the scope of a program;\n+   *  they cannot be easily predicted and can generally only be caught as\n+   *  the program executes.\n+   *  @brief One of two subclasses of exception.\n+   */\n+  class runtime_error : public exception \n+  {\n+    string _M_msg;\n+\n+  public:\n+    /** Takes a character string describing the error.  */\n+    explicit \n+    runtime_error(const string&  __arg);\n+\n+    virtual \n+    ~runtime_error() throw();\n+\n+    /** Returns a C-style character string describing the general cause of\n+     *  the current error (the same string passed to the ctor).  */\n+    virtual const char* \n+    what() const throw();\n+  };\n+\n+  /** Thrown to indicate range errors in internal computations.  */\n+  class range_error : public runtime_error \n+  {\n+  public:\n+    explicit range_error(const string&  __arg);\n+  };\n+\n+  /** Thrown to indicate arithmetic overflow.  */\n+  class overflow_error : public runtime_error \n+  {\n+  public:\n+    explicit overflow_error(const string&  __arg);\n+  };\n+\n+  /** Thrown to indicate arithmetic underflow.  */\n+  class underflow_error : public runtime_error \n+  {\n+  public:\n+    explicit underflow_error(const string&  __arg);\n+  };\n+} // namespace std\n+\n+#endif // _CPP_STDEXCEPT"}, {"sha": "59f70705361047b52504d9ba16ed621f4aff6c5b", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 509, "deletions": 6, "changes": 515, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Stream buffer classes -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,514 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file streambuf\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 27.5  Stream buffers\n+//\n+\n+/** @file std_streambuf.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_STREAMBUF\n-#include <bits/std_streambuf.h>\n+#define _CPP_STREAMBUF\t1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <iosfwd>\n+#include <cstdio> \t// For SEEK_SET, SEEK_CUR, SEEK_END\n+#include <bits/localefwd.h>\n+#include <bits/ios_base.h>\n+\n+namespace std\n+{\n+  template<typename _CharT, typename _Traits>\n+    streamsize\n+    __copy_streambufs(basic_ios<_CharT, _Traits>& _ios,\n+\t\t      basic_streambuf<_CharT, _Traits>* __sbin,\n+\t\t      basic_streambuf<_CharT, _Traits>* __sbout);\n+  \n+  // 27.5.2 Template class basic_streambuf<_CharT, _Traits>\n+  template<typename _CharT, typename _Traits>\n+    class basic_streambuf \n+    {\n+    public:\n+      // Types:\n+      typedef _CharT \t\t\t\t\tchar_type;\n+      typedef _Traits \t\t\t\t\ttraits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+\n+      // Non-standard Types:\n+      typedef ctype<char_type>           \t\t__ctype_type;\n+      typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n+      \n+      friend class basic_ios<char_type, traits_type>;\n+      friend class basic_istream<char_type, traits_type>;\n+      friend class basic_ostream<char_type, traits_type>;\n+      friend class istreambuf_iterator<char_type, traits_type>;\n+      friend class ostreambuf_iterator<char_type, traits_type>;\n+\n+      friend streamsize\n+      __copy_streambufs<>(basic_ios<char_type, traits_type>& __ios,\n+\t\t\t  __streambuf_type* __sbin,__streambuf_type* __sbout);\n+      \n+    protected:\n+\n+      // Pointer to the beginning of internally-allocated\n+      // space. Filebuf manually allocates/deallocates this, whereas\n+      // stringstreams attempt to use the built-in intelligence of the\n+      // string class. If you are managing memory, set this. If not,\n+      // leave it NULL.\n+      char_type*\t\t_M_buf; \t\n+\n+      // Actual size of allocated internal buffer, in bytes.\n+      int_type\t\t\t_M_buf_size;\n+\n+      // Optimal or preferred size of internal buffer, in bytes.\n+      int_type\t\t\t_M_buf_size_opt;\n+\n+      // True iff _M_in_* and _M_out_* buffers should always point to\n+      // the same place.  True for fstreams, false for sstreams.\n+      bool \t\t\t_M_buf_unified;\t\n+\n+      // This is based on _IO_FILE, just reordered to be more\n+      // consistent, and is intended to be the most minimal abstraction\n+      // for an internal buffer.\n+      // get == input == read\n+      // put == output == write\n+      char_type* \t\t_M_in_beg;  \t// Start of get area. \n+      char_type* \t\t_M_in_cur;\t// Current read area. \n+      char_type* \t\t_M_in_end;\t// End of get area. \n+      char_type* \t\t_M_out_beg; \t// Start of put area. \n+      char_type* \t\t_M_out_cur;  \t// Current put area. \n+      char_type* \t\t_M_out_end;  \t// End of put area. \n+\n+      // Place to stash in || out || in | out settings for current streambuf.\n+      ios_base::openmode \t_M_mode;\t\n+\n+      // Current locale setting.\n+      locale \t\t\t_M_buf_locale;\t\n+\n+      // True iff locale is initialized.\n+      bool \t\t\t_M_buf_locale_init;\n+\n+      // Necessary bits for putback buffer management. Only used in\n+      // the basic_filebuf class, as necessary for the standard\n+      // requirements. The only basic_streambuf member function that\n+      // needs access to these data members is in_avail...\n+      // NB: pbacks of over one character are not currently supported.\n+      int_type    \t\t_M_pback_size; \n+      char_type*\t\t_M_pback; \n+      char_type*\t\t_M_pback_cur_save;\n+      char_type*\t\t_M_pback_end_save;\n+      bool\t\t\t_M_pback_init; \n+\n+      // Initializes pback buffers, and moves normal buffers to safety.\n+      // Assumptions:\n+      // _M_in_cur has already been moved back\n+      void\n+      _M_pback_create()\n+      {\n+\tif (!_M_pback_init)\n+\t  {\n+\t    int_type __dist = _M_in_end - _M_in_cur;\n+\t    int_type __len = min(_M_pback_size, __dist);\n+\t    traits_type::copy(_M_pback, _M_in_cur, __len);\n+\t    _M_pback_cur_save = _M_in_cur;\n+\t    _M_pback_end_save = _M_in_end;\n+\t    this->setg(_M_pback, _M_pback, _M_pback + __len);\n+\t    _M_pback_init = true;\n+\t  }\n+      }\n+\n+      // Deactivates pback buffer contents, and restores normal buffer.\n+      // Assumptions:\n+      // The pback buffer has only moved forward.\n+      void\n+      _M_pback_destroy()\n+      {\n+\tif (_M_pback_init)\n+\t  {\n+\t    // Length _M_in_cur moved in the pback buffer.\n+\t    int_type __off_cur = _M_in_cur - _M_pback;\n+\t    \n+\t    // For in | out buffers, the end can be pushed back...\n+\t    int_type __off_end = 0;\n+\t    int_type __pback_len = _M_in_end - _M_pback;\n+\t    int_type __save_len = _M_pback_end_save - _M_buf;\n+\t    if (__pback_len > __save_len)\n+\t      __off_end = __pback_len - __save_len;\n+\n+\t    this->setg(_M_buf, _M_pback_cur_save + __off_cur, \n+\t\t       _M_pback_end_save + __off_end);\n+\t    _M_pback_cur_save = NULL;\n+\t    _M_pback_end_save = NULL;\n+\t    _M_pback_init = false;\n+\t  }\n+      }\n+\n+      // Correctly sets the _M_in_cur pointer, and bumps the\n+      // _M_out_cur pointer as well if necessary.\n+      void \n+      _M_in_cur_move(off_type __n) // argument needs to be +-\n+      {\n+\tbool __testout = _M_out_cur;\n+\t_M_in_cur += __n;\n+\tif (__testout && _M_buf_unified)\n+\t  _M_out_cur += __n;\n+      }\n+\n+      // Correctly sets the _M_out_cur pointer, and bumps the\n+      // appropriate _M_*_end pointers as well. Necessary for the\n+      // un-tied stringbufs, in in|out mode.\n+      // Invariant:\n+      // __n + _M_out_[cur, end] <= _M_buf + _M_buf_size\n+      // Assuming all _M_*_[beg, cur, end] pointers are operating on\n+      // the same range:\n+      // _M_buf <= _M_*_ <= _M_buf + _M_buf_size\n+      void \n+      _M_out_cur_move(off_type __n) // argument needs to be +-\n+      {\n+\tbool __testin = _M_in_cur;\n+\n+\t_M_out_cur += __n;\n+\tif (__testin && _M_buf_unified)\n+\t  _M_in_cur += __n;\n+\tif (_M_out_cur > _M_out_end)\n+\t  {\n+\t    _M_out_end = _M_out_cur;\n+\t    // NB: in | out buffers drag the _M_in_end pointer along...\n+\t    if (__testin)\n+\t      _M_in_end += __n;\n+\t  }\n+      }\n+\n+      // Return the size of the output buffer.  This depends on the\n+      // buffer in use: allocated buffers have a stored size in\n+      // _M_buf_size and setbuf() buffers don't.\n+      off_type\n+      _M_out_buf_size()\n+      {\n+\toff_type __ret = 0;\n+\tif (_M_out_cur)\n+\t  {\n+\t    // Using allocated buffer.\n+\t    if (_M_out_beg == _M_buf)\n+\t      __ret = _M_out_beg + _M_buf_size - _M_out_cur;\n+\t    // Using non-allocated buffer.\n+\t    else\n+\t      __ret = _M_out_end - _M_out_cur;\n+\t  }\n+\treturn __ret;\n+      }\n+\n+      // These three functions are used to clarify internal buffer\n+      // maintenance. After an overflow, or after a seekoff call that\n+      // started at beg or end, or possibly when the stream becomes\n+      // unbuffered, and a myrid other obscure corner cases, the\n+      // internal buffer does not truly reflect the contents of the\n+      // external buffer. At this point, for whatever reason, it is in\n+      // an indeterminate state.\n+      void\n+      _M_set_indeterminate(void)\n+      {\n+\tif (_M_mode & ios_base::in)\n+\t  this->setg(_M_buf, _M_buf, _M_buf);\n+\tif (_M_mode & ios_base::out)\n+\t  this->setp(_M_buf, _M_buf);\n+      }\n+\n+      void\n+      _M_set_determinate(off_type __off)\n+      {\n+\tbool __testin = _M_mode & ios_base::in;\n+\tbool __testout = _M_mode & ios_base::out;\n+\tif (__testin)\n+\t  this->setg(_M_buf, _M_buf, _M_buf + __off);\n+\tif (__testout)\n+\t  this->setp(_M_buf, _M_buf + __off);\n+      }\n+\n+      bool\n+      _M_is_indeterminate(void)\n+      { \n+\tbool __ret = false;\n+\t// Don't return true if unbuffered.\n+\tif (_M_buf)\n+\t  {\n+\t    if (_M_mode & ios_base::in)\n+\t      __ret = _M_in_beg == _M_in_cur && _M_in_cur == _M_in_end;\n+\t    if (_M_mode & ios_base::out)\n+\t      __ret = _M_out_beg == _M_out_cur && _M_out_cur == _M_out_end;\n+\t  }\n+\treturn __ret;\n+      }\n+\n+  public:\n+      virtual \n+      ~basic_streambuf() \n+      {\n+\t_M_buf_unified = false;\n+\t_M_buf_size = 0;\n+\t_M_buf_size_opt = 0;\n+\t_M_mode = ios_base::openmode(0);\n+\t_M_buf_locale_init = false;\n+      }\n+\n+      // Locales:\n+      locale \n+      pubimbue(const locale &__loc)\n+      {\n+\tlocale __tmp(this->getloc());\n+\tthis->imbue(__loc);\n+\treturn __tmp;\n+      }\n+\n+      locale   \n+      getloc() const\n+      {\n+\tif (_M_buf_locale_init)\n+\t  return _M_buf_locale; \n+\telse \n+\t  return locale();\n+      } \n+\n+      // Buffer and positioning:\n+      __streambuf_type* \n+      pubsetbuf(char_type* __s, streamsize __n) \n+      { return this->setbuf(__s, __n); }\n+\n+      pos_type \n+      pubseekoff(off_type __off, ios_base::seekdir __way, \n+\t\t ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      { return this->seekoff(__off, __way, __mode); }\n+\n+      pos_type \n+      pubseekpos(pos_type __sp,\n+\t\t ios_base::openmode __mode = ios_base::in | ios_base::out)\n+      { return this->seekpos(__sp, __mode); }\n+\n+      int \n+      pubsync() { return this->sync(); }\n+\n+      // Get and put areas:\n+      // Get area:\n+      streamsize \n+      in_avail() \n+      { \n+\tstreamsize __ret;\n+\tif (_M_in_cur && _M_in_cur < _M_in_end)\n+\t  {\n+\t    if (_M_pback_init)\n+\t      {\n+\t\tint_type __save_len =  _M_pback_end_save - _M_pback_cur_save;\n+\t\tint_type __pback_len = _M_in_cur - _M_pback;\n+\t\t__ret = __save_len - __pback_len;\n+\t      }\n+\t    else\n+\t      __ret = this->egptr() - this->gptr();\n+\t  }\n+\telse\n+\t  __ret = this->showmanyc();\n+\treturn __ret;\n+      }\n+\n+      int_type \n+      snextc()\n+      {\n+\tint_type __eof = traits_type::eof();\n+\treturn (this->sbumpc() == __eof ? __eof : this->sgetc()); \n+      }\n+\n+      int_type \n+      sbumpc();\n+\n+      int_type \n+      sgetc()\n+      {\n+\tint_type __ret;\n+\tif (_M_in_cur && _M_in_cur < _M_in_end)\n+\t  __ret = traits_type::to_int_type(*(this->gptr()));\n+\telse \n+\t  __ret = this->underflow();\n+\treturn __ret;\n+      }\n+\n+      streamsize \n+      sgetn(char_type* __s, streamsize __n)\n+      { return this->xsgetn(__s, __n); }\n+\n+      // Putback:\n+      int_type \n+      sputbackc(char_type __c);\n+\n+      int_type \n+      sungetc();\n+\n+      // Put area:\n+      int_type \n+      sputc(char_type __c);\n+\n+      streamsize \n+      sputn(const char_type* __s, streamsize __n)\n+      { return this->xsputn(__s, __n); }\n+\n+    protected:\n+      basic_streambuf()\n+      : _M_buf(NULL), _M_buf_size(0), \n+      _M_buf_size_opt(static_cast<int_type>(BUFSIZ)), _M_buf_unified(false), \n+      _M_in_beg(0), _M_in_cur(0), _M_in_end(0), _M_out_beg(0), _M_out_cur(0), \n+      _M_out_end(0), _M_mode(ios_base::openmode(0)), _M_buf_locale(locale()), \n+      _M_buf_locale_init(false), _M_pback_size(1), _M_pback(NULL), \n+      _M_pback_cur_save(NULL), _M_pback_end_save(NULL), _M_pback_init(false)\n+      { }\n+\n+      // Get area:\n+      char_type* \n+      eback() const { return _M_in_beg; }\n+\n+      char_type* \n+      gptr()  const { return _M_in_cur;  }\n+\n+      char_type* \n+      egptr() const { return _M_in_end; }\n+\n+      void \n+      gbump(int __n) { _M_in_cur += __n; }\n+\n+      void \n+      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)\n+      {\n+\t_M_in_beg = __gbeg;\n+\t_M_in_cur = __gnext;\n+\t_M_in_end = __gend;\n+\tif (!(_M_mode & ios_base::in) && __gbeg && __gnext && __gend)\n+\t  _M_mode = _M_mode | ios_base::in;\n+      }\n+\n+      // Put area:\n+      char_type* \n+      pbase() const { return _M_out_beg; }\n+\n+      char_type* \n+      pptr() const { return _M_out_cur; }\n+\n+      char_type* \n+      epptr() const { return _M_out_end; }\n+\n+      void \n+      pbump(int __n) { _M_out_cur += __n; }\n+\n+      void \n+      setp(char_type* __pbeg, char_type* __pend)\n+      { \n+\t_M_out_beg = _M_out_cur = __pbeg; \n+\t_M_out_end = __pend; \n+\tif (!(_M_mode & ios_base::out) && __pbeg && __pend)\n+\t  _M_mode = _M_mode | ios_base::out;\n+      }\n+\n+      // Virtual functions:\n+      // Locales:\n+      virtual void \n+      imbue(const locale& __loc) \n+      { \n+\t_M_buf_locale_init = true;\n+\tif (_M_buf_locale != __loc)\n+\t  _M_buf_locale = __loc;\n+      }\n+\n+      // Buffer management and positioning:\n+      virtual basic_streambuf<char_type,_Traits>* \n+      setbuf(char_type*, streamsize)\n+      {\treturn this; }\n+      \n+      virtual pos_type \n+      seekoff(off_type, ios_base::seekdir,\n+\t      ios_base::openmode /*__mode*/ = ios_base::in | ios_base::out)\n+      { return pos_type(off_type(-1)); } \n+\n+      virtual pos_type \n+      seekpos(pos_type, \n+\t      ios_base::openmode /*__mode*/ = ios_base::in | ios_base::out)\n+      { return pos_type(off_type(-1)); } \n+\n+      virtual int \n+      sync() { return 0; }\n+\n+      // Get area:\n+      virtual streamsize \n+      showmanyc() { return 0; }\n+\n+      virtual streamsize \n+      xsgetn(char_type* __s, streamsize __n);\n+\n+      virtual int_type \n+      underflow()\n+      { return traits_type::eof(); }\n+\n+      virtual int_type \n+      uflow() \n+      {\n+\tint_type __ret = traits_type::eof();\n+\tbool __testeof = this->underflow() == __ret;\n+\tbool __testpending = _M_in_cur && _M_in_cur < _M_in_end;\n+\tif (!__testeof && __testpending)\n+\t  {\n+\t    __ret = traits_type::to_int_type(*_M_in_cur);\n+\t    ++_M_in_cur;\n+\t    if (_M_buf_unified && _M_mode & ios_base::out)\n+\t      ++_M_out_cur;\n+\t  }\n+\treturn __ret;    \n+      }\n+\n+      // Putback:\n+      virtual int_type \n+      pbackfail(int_type /* __c */  = traits_type::eof())\n+      { return traits_type::eof(); }\n+\n+      // Put area:\n+      virtual streamsize \n+      xsputn(const char_type* __s, streamsize __n);\n+\n+      virtual int_type \n+      overflow(int_type /* __c */ = traits_type::eof())\n+      { return traits_type::eof(); }\n+\n+#ifdef _GLIBCPP_DEPRECATED\n+    public:\n+      void \n+      stossc() \n+      {\n+\tif (_M_in_cur < _M_in_end) \n+\t  ++_M_in_cur;\n+\telse \n+\t  this->uflow();\n+      }\n #endif\n+\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+    // Side effect of DR 50.\n+    private:\n+      basic_streambuf(const __streambuf_type&);\n+\n+      __streambuf_type& \n+      operator=(const __streambuf_type&);\n+#endif\n+    };\n+\n+} // namespace std\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+# define export\n+#ifdef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n+#include <bits/streambuf.tcc>\n+#endif\n+#endif\n+\n+#endif\t/* _CPP_STREAMBUF */\n+"}, {"sha": "9cdc533e4a2ab573e39455d46589da6c005ded47", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,34 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file string\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+/** @file std_string.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_STRING\n-#include <bits/std_string.h>\n+#define _CPP_STRING\t1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <bits/stringfwd.h>\n+#include <bits/char_traits.h>\n+#include <memory> \t// For allocator.\n+#include <bits/type_traits.h>\n+#include <iosfwd> \t// For operators >>, <<, and getline decls.\n+#include <bits/stl_iterator.h>\n+#include <bits/stl_function.h>  // For less\n+#include <bits/basic_string.h>\n+\n+#ifdef _GLIBCPP_NO_TEMPLATE_EXPORT\n+# include <algorithm> // for find_if\n+# include <bits/basic_string.tcc> \n #endif\n+\n+#endif /* _CPP_STRING */\n+"}, {"sha": "5917c833818159d07fcd640839a05389a54f0185", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <utility> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,47 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file utility\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996,1997\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_utility.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_UTILITY\n-#include <bits/std_utility.h>\n-#endif\n+#define _CPP_UTILITY 1\n+\n+#pragma GCC system_header\n+#include <bits/c++config.h>\n+#include <bits/stl_relops.h>\n+#include <bits/stl_pair.h>\n+\n+#endif /* _CPP_UTILITY */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "a3547080ed3a7201e99019811e99cb1fdeb5085f", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 712, "deletions": 7, "changes": 719, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,6 +1,6 @@\n-// -*- C++ -*- std header.\n+// The template and inlines for the -*- C++ -*- valarray class.\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,11 +27,716 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file valarray\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+// Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n+\n+/** @file std_valarray.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_VALARRAY\n-#include <bits/std_valarray.h>\n-#endif\n+#define _CPP_VALARRAY 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include <cmath>\n+#include <cstdlib>\n+#include <numeric>\n+#include <functional>\n+#include <algorithm>\n+\n+namespace std\n+{\n+    template<class _Clos, typename _Tp> class _Expr;\n+\n+    template<typename _Tp1, typename _Tp2> class _ValArray;    \n+\n+    template<template<class> class _Oper,\n+        template<class, class> class _Meta, class _Dom> struct _UnClos;\n+\n+    template<template<class> class _Oper,\n+        template<class, class> class _Meta1,\n+        template<class, class> class _Meta2,\n+        class _Dom1, class _Dom2> class _BinClos;\n+\n+    template<template<class, class> class _Meta, class _Dom> class _SClos;\n+\n+    template<template<class, class> class _Meta, class _Dom> class _GClos;\n+    \n+    template<template<class, class> class _Meta, class _Dom> class _IClos;\n+    \n+    template<template<class, class> class _Meta, class _Dom> class _ValFunClos;\n+\n+    template<template<class, class> class _Meta, class _Dom> class _RefFunClos;\n+\n+    template<class _Tp> struct _Unary_plus;\n+    template<class _Tp> struct _Bitwise_and;\n+    template<class _Tp> struct _Bitwise_or;\n+    template<class _Tp> struct _Bitwise_xor;  \n+    template<class _Tp> struct _Bitwise_not;\n+    template<class _Tp> struct _Shift_left;\n+    template<class _Tp> struct _Shift_right;\n+  \n+    template<class _Tp> class valarray;   // An array of type _Tp\n+    class slice;                          // BLAS-like slice out of an array\n+    template<class _Tp> class slice_array;\n+    class gslice;                         // generalized slice out of an array\n+    template<class _Tp> class gslice_array;\n+    template<class _Tp> class mask_array;     // masked array\n+    template<class _Tp> class indirect_array; // indirected array\n+\n+} // namespace std\n+\n+#include <bits/valarray_array.h>\n+#include <bits/valarray_meta.h>\n+  \n+namespace std\n+{\n+  template<class _Tp> class valarray\n+  {\n+  public:\n+      typedef _Tp value_type;\n+\n+      // _lib.valarray.cons_ construct/destroy:\n+      valarray();\n+      explicit valarray(size_t);\n+      valarray(const _Tp&, size_t);\n+      valarray(const _Tp* __restrict__, size_t);\n+      valarray(const valarray&);\n+      valarray(const slice_array<_Tp>&);\n+      valarray(const gslice_array<_Tp>&);\n+      valarray(const mask_array<_Tp>&);\n+      valarray(const indirect_array<_Tp>&);\n+      template<class _Dom>\n+      valarray(const _Expr<_Dom,_Tp>& __e);\n+     ~valarray();\n+\n+      // _lib.valarray.assign_ assignment:\n+      valarray<_Tp>& operator=(const valarray<_Tp>&);\n+      valarray<_Tp>& operator=(const _Tp&);\n+      valarray<_Tp>& operator=(const slice_array<_Tp>&);\n+      valarray<_Tp>& operator=(const gslice_array<_Tp>&);\n+      valarray<_Tp>& operator=(const mask_array<_Tp>&);\n+      valarray<_Tp>& operator=(const indirect_array<_Tp>&);\n+\n+      template<class _Dom> valarray<_Tp>&\n+      \toperator= (const _Expr<_Dom,_Tp>&);\n+\n+      // _lib.valarray.access_ element access:\n+      // XXX: LWG to be resolved.\n+      const _Tp&                 operator[](size_t) const;\n+      _Tp&                operator[](size_t);\t\t\n+      // _lib.valarray.sub_ subset operations:\n+      _Expr<_SClos<_ValArray,_Tp>, _Tp> operator[](slice) const;\n+      slice_array<_Tp>    operator[](slice);\n+      _Expr<_GClos<_ValArray,_Tp>, _Tp> operator[](const gslice&) const;\n+      gslice_array<_Tp>   operator[](const gslice&);\n+      valarray<_Tp>     \t operator[](const valarray<bool>&) const;\n+      mask_array<_Tp>     operator[](const valarray<bool>&);\n+      _Expr<_IClos<_ValArray, _Tp>, _Tp>\n+      \toperator[](const valarray<size_t>&) const;\n+      indirect_array<_Tp> operator[](const valarray<size_t>&);\n+\n+      // _lib.valarray.unary_ unary operators:\n+      _Expr<_UnClos<_Unary_plus,_ValArray,_Tp>,_Tp>  operator+ () const;\n+      _Expr<_UnClos<negate,_ValArray,_Tp>,_Tp> operator- () const;\n+      _Expr<_UnClos<_Bitwise_not,_ValArray,_Tp>,_Tp> operator~ () const;\n+      _Expr<_UnClos<logical_not,_ValArray,_Tp>,bool> operator! () const;\n+      \n+      // _lib.valarray.cassign_ computed assignment:\n+      valarray<_Tp>& operator*= (const _Tp&);\n+      valarray<_Tp>& operator/= (const _Tp&);\n+      valarray<_Tp>& operator%= (const _Tp&);\n+      valarray<_Tp>& operator+= (const _Tp&);\n+      valarray<_Tp>& operator-= (const _Tp&);\n+      valarray<_Tp>& operator^= (const _Tp&);\n+      valarray<_Tp>& operator&= (const _Tp&);\n+      valarray<_Tp>& operator|= (const _Tp&);\n+      valarray<_Tp>& operator<<=(const _Tp&);\n+      valarray<_Tp>& operator>>=(const _Tp&);\n+      valarray<_Tp>& operator*= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator/= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator%= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator+= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator-= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator^= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator|= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator&= (const valarray<_Tp>&);\n+      valarray<_Tp>& operator<<=(const valarray<_Tp>&);\n+      valarray<_Tp>& operator>>=(const valarray<_Tp>&);\n+\n+      template<class _Dom>\n+        valarray<_Tp>& operator*= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator/= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator%= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator+= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator-= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator^= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator|= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator&= (const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator<<=(const _Expr<_Dom,_Tp>&);\n+      template<class _Dom>\n+        valarray<_Tp>& operator>>=(const _Expr<_Dom,_Tp>&);\n+\n+      \n+      // _lib.valarray.members_ member functions:\n+      size_t size() const;\n+      _Tp    sum() const;\t\n+      _Tp    min() const;\t\n+      _Tp    max() const;\t\n+\n+//           // FIXME: Extension\n+//       _Tp    product () const;\n+\n+      valarray<_Tp> shift (int) const;\n+      valarray<_Tp> cshift(int) const;\n+      _Expr<_ValFunClos<_ValArray,_Tp>,_Tp> apply(_Tp func(_Tp)) const;\n+      _Expr<_RefFunClos<_ValArray,_Tp>,_Tp> apply(_Tp func(const _Tp&)) const;\n+      void resize(size_t __size, _Tp __c = _Tp());\n+\n+  private:\n+      size_t _M_size;\n+      _Tp* __restrict__ _M_data;\n+\n+      friend class _Array<_Tp>;\n+  };\n+\n+\n+  template<typename _Tp> struct _Unary_plus : unary_function<_Tp,_Tp> {\n+      _Tp operator() (const _Tp& __t) const { return __t; }\n+  };\n+\n+  template<typename _Tp> struct _Bitwise_and : binary_function<_Tp,_Tp,_Tp> {\n+      _Tp operator() (_Tp __x, _Tp __y) const { return __x & __y; }\n+  };\n+\n+  template<typename _Tp> struct _Bitwise_or : binary_function<_Tp,_Tp,_Tp> {\n+      _Tp operator() (_Tp __x, _Tp __y) const { return __x | __y; }\n+  };\n+\n+  template<typename _Tp> struct _Bitwise_xor : binary_function<_Tp,_Tp,_Tp> {\n+      _Tp operator() (_Tp __x, _Tp __y) const { return __x ^ __y; }\n+  };\n+  \n+  template<typename _Tp> struct _Bitwise_not : unary_function<_Tp,_Tp> {\n+      _Tp operator() (_Tp __t) const { return ~__t; }\n+  };\n+\n+  template<typename _Tp> struct _Shift_left : unary_function<_Tp,_Tp> {\n+      _Tp operator() (_Tp __x, _Tp __y) const { return __x << __y; }\n+  };\n+\n+  template<typename _Tp> struct _Shift_right : unary_function<_Tp,_Tp> {\n+      _Tp operator() (_Tp __x, _Tp __y) const { return __x >> __y; }\n+  };\n+\n+  \n+  template<typename _Tp>\n+  inline const _Tp&\n+  valarray<_Tp>::operator[] (size_t __i) const\n+  { return _M_data[__i]; }\n+\n+  template<typename _Tp>\n+  inline _Tp&\n+  valarray<_Tp>::operator[] (size_t __i)\n+  { return _M_data[__i]; }\n+\n+} // std::\n+      \n+#include <bits/slice.h>\n+#include <bits/slice_array.h>\n+#include <bits/gslice.h>\n+#include <bits/gslice_array.h>\n+#include <bits/mask_array.h>\n+#include <bits/indirect_array.h>\n+\n+namespace std\n+{\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray () : _M_size (0), _M_data (0) {}\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (size_t __n) \n+      : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n+  { __valarray_default_construct(_M_data, _M_data + __n); }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const _Tp& __t, size_t __n)\n+    : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n+  { __valarray_fill_construct (_M_data, _M_data + __n, __t); }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const _Tp* __restrict__ __p, size_t __n)\n+    : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n+  { __valarray_copy_construct (__p, __p + __n, _M_data); }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const valarray<_Tp>& __v)\n+    : _M_size(__v._M_size), _M_data(__valarray_get_storage<_Tp>(__v._M_size))\n+  { __valarray_copy_construct (__v._M_data, __v._M_data + _M_size, _M_data); }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const slice_array<_Tp>& __sa)\n+    : _M_size(__sa._M_sz), _M_data(__valarray_get_storage<_Tp>(__sa._M_sz))\n+  {\n+    __valarray_copy\n+      (__sa._M_array, __sa._M_sz, __sa._M_stride, _Array<_Tp>(_M_data));\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const gslice_array<_Tp>& __ga)\n+    : _M_size(__ga._M_index.size()),\n+      _M_data(__valarray_get_storage<_Tp>(_M_size))\n+  {\n+    __valarray_copy\n+      (__ga._M_array, _Array<size_t>(__ga._M_index),\n+       _Array<_Tp>(_M_data), _M_size);\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const mask_array<_Tp>& __ma)\n+    : _M_size(__ma._M_sz), _M_data(__valarray_get_storage<_Tp>(__ma._M_sz))\n+  {\n+    __valarray_copy\n+      (__ma._M_array, __ma._M_mask, _Array<_Tp>(_M_data), _M_size);\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::valarray (const indirect_array<_Tp>& __ia)\n+    : _M_size(__ia._M_sz), _M_data(__valarray_get_storage<_Tp>(__ia._M_sz))\n+  {\n+    __valarray_copy\n+      (__ia._M_array, __ia._M_index, _Array<_Tp>(_M_data), _M_size);\n+  }\n+\n+  template<typename _Tp> template<class _Dom>\n+  inline valarray<_Tp>::valarray (const _Expr<_Dom, _Tp>& __e)\n+    : _M_size(__e.size ()), _M_data(__valarray_get_storage<_Tp>(_M_size))\n+  { __valarray_copy (__e, _M_size, _Array<_Tp>(_M_data)); }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>::~valarray ()\n+  {\n+      __valarray_destroy_elements(_M_data, _M_data + _M_size);\n+      __valarray_release_memory(_M_data);\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const valarray<_Tp>& __v)\n+  {\n+      __valarray_copy(__v._M_data, _M_size, _M_data);\n+      return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const _Tp& __t)\n+  {\n+      __valarray_fill (_M_data, _M_size, __t);\n+      return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const slice_array<_Tp>& __sa)\n+  {\n+      __valarray_copy (__sa._M_array, __sa._M_sz,\n+              __sa._M_stride, _Array<_Tp>(_M_data));\n+      return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const gslice_array<_Tp>& __ga)\n+  {\n+      __valarray_copy (__ga._M_array, _Array<size_t>(__ga._M_index),\n+              _Array<_Tp>(_M_data), _M_size);\n+      return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const mask_array<_Tp>& __ma)\n+  {\n+      __valarray_copy (__ma._M_array, __ma._M_mask,\n+              _Array<_Tp>(_M_data), _M_size);\n+      return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const indirect_array<_Tp>& __ia)\n+  {\n+      __valarray_copy (__ia._M_array, __ia._M_index,\n+               _Array<_Tp>(_M_data), _M_size);\n+      return *this;\n+  }\n+\n+  template<typename _Tp> template<class _Dom>\n+  inline valarray<_Tp>&\n+  valarray<_Tp>::operator= (const _Expr<_Dom, _Tp>& __e)\n+  {\n+      __valarray_copy (__e, _M_size, _Array<_Tp>(_M_data));\n+      return *this;\n+  }\n+\n+  template<typename _Tp>\n+  inline _Expr<_SClos<_ValArray,_Tp>, _Tp>\n+  valarray<_Tp>::operator[] (slice __s) const\n+  {\n+      typedef _SClos<_ValArray,_Tp> _Closure;\n+      return _Expr<_Closure, _Tp> (_Closure (_Array<_Tp>(_M_data), __s));\n+  }\n+\n+  template<typename _Tp>\n+  inline slice_array<_Tp>\n+  valarray<_Tp>::operator[] (slice __s)\n+  {\n+      return slice_array<_Tp> (_Array<_Tp>(_M_data), __s);\n+  }\n+\n+  template<typename _Tp>\n+  inline _Expr<_GClos<_ValArray,_Tp>, _Tp>\n+  valarray<_Tp>::operator[] (const gslice& __gs) const\n+  {\n+      typedef _GClos<_ValArray,_Tp> _Closure;\n+      return _Expr<_Closure, _Tp>\n+          (_Closure (_Array<_Tp>(_M_data), __gs._M_index->_M_index));\n+  }\n+\n+  template<typename _Tp>\n+  inline gslice_array<_Tp>\n+  valarray<_Tp>::operator[] (const gslice& __gs)\n+  {\n+      return gslice_array<_Tp>\n+          (_Array<_Tp>(_M_data), __gs._M_index->_M_index);\n+  }\n+\n+  template<typename _Tp>\n+  inline valarray<_Tp>\n+  valarray<_Tp>::operator[] (const valarray<bool>& __m) const\n+  {\n+      size_t __s (0);\n+      size_t __e (__m.size ());\n+      for (size_t __i=0; __i<__e; ++__i)\n+          if (__m[__i]) ++__s;\n+      return valarray<_Tp> (mask_array<_Tp> (_Array<_Tp>(_M_data), __s,\n+                                         _Array<bool> (__m)));\n+  }\n+\n+  template<typename _Tp>\n+  inline mask_array<_Tp>\n+  valarray<_Tp>::operator[] (const valarray<bool>& __m)\n+  {\n+      size_t __s (0);\n+      size_t __e (__m.size ());\n+      for (size_t __i=0; __i<__e; ++__i)\n+          if (__m[__i]) ++__s;\n+      return mask_array<_Tp> (_Array<_Tp>(_M_data), __s, _Array<bool> (__m));\n+  }\n+\n+  template<typename _Tp>\n+  inline _Expr<_IClos<_ValArray,_Tp>, _Tp>\n+  valarray<_Tp>::operator[] (const valarray<size_t>& __i) const\n+  {\n+      typedef _IClos<_ValArray,_Tp> _Closure;\n+      return _Expr<_Closure, _Tp> (_Closure (*this, __i));\n+  }\n+\n+  template<typename _Tp>\n+  inline indirect_array<_Tp>\n+  valarray<_Tp>::operator[] (const valarray<size_t>& __i)\n+  {\n+      return indirect_array<_Tp> (_Array<_Tp>(_M_data), __i.size(),\n+                                _Array<size_t> (__i));\n+  }\n+\n+  template<class _Tp>\n+  inline size_t valarray<_Tp>::size () const { return _M_size; }\n+\n+  template<class _Tp>\n+  inline _Tp\n+  valarray<_Tp>::sum () const\n+  {\n+      return __valarray_sum(_M_data, _M_data + _M_size);\n+  }\n+\n+//   template<typename _Tp>\n+//   inline _Tp\n+//   valarray<_Tp>::product () const\n+//   {\n+//       return __valarray_product(_M_data, _M_data + _M_size);\n+//   }\n+\n+  template <class _Tp>\n+     inline valarray<_Tp>\n+     valarray<_Tp>::shift(int __n) const\n+     {\n+       _Tp* const __a = static_cast<_Tp*>\n+         (__builtin_alloca(sizeof(_Tp) * _M_size));\n+       if (__n == 0)                          // no shift\n+         __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n+       else if (__n > 0)         // __n > 0: shift left\n+         {                 \n+           if (size_t(__n) > _M_size)\n+             __valarray_default_construct(__a, __a + __n);\n+           else\n+             {\n+               __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n+               __valarray_default_construct(__a+_M_size-__n, __a + _M_size);\n+             }\n+         }\n+       else                        // __n < 0: shift right\n+         {                          \n+           __valarray_copy_construct (_M_data, _M_data+_M_size+__n, __a-__n);\n+           __valarray_default_construct(__a, __a - __n);\n+         }\n+       return valarray<_Tp> (__a, _M_size);\n+     }\n+\n+  template <class _Tp>\n+     inline valarray<_Tp>\n+     valarray<_Tp>::cshift (int __n) const\n+     {\n+       _Tp* const __a = static_cast<_Tp*>\n+         (__builtin_alloca (sizeof(_Tp) * _M_size));\n+       if (__n == 0)               // no cshift\n+         __valarray_copy_construct(_M_data, _M_data + _M_size, __a);\n+       else if (__n > 0)           // cshift left\n+         {               \n+           __valarray_copy_construct(_M_data, _M_data+__n, __a+_M_size-__n);\n+           __valarray_copy_construct(_M_data+__n, _M_data + _M_size, __a);\n+         }\n+       else                        // cshift right\n+         {                       \n+           __valarray_copy_construct\n+             (_M_data + _M_size+__n, _M_data + _M_size, __a);\n+           __valarray_copy_construct\n+             (_M_data, _M_data + _M_size+__n, __a - __n);\n+         }\n+       return valarray<_Tp>(__a, _M_size);\n+     }\n+\n+  template <class _Tp>\n+  inline void\n+  valarray<_Tp>::resize (size_t __n, _Tp __c)\n+  {\n+    // This complication is so to make valarray<valarray<T> > work\n+    // even though it is not required by the standard.  Nobody should\n+    // be saying valarray<valarray<T> > anyway.  See the specs.\n+    __valarray_destroy_elements(_M_data, _M_data + _M_size);\n+    if (_M_size != __n)\n+      {\n+        __valarray_release_memory(_M_data);\n+        _M_size = __n;\n+        _M_data = __valarray_get_storage<_Tp>(__n);\n+      }\n+    __valarray_fill_construct(_M_data, _M_data + __n, __c);\n+  }\n+    \n+  template<typename _Tp>\n+  inline _Tp\n+  valarray<_Tp>::min() const\n+  {\n+      return *min_element (_M_data, _M_data+_M_size);\n+  }\n+\n+  template<typename _Tp>\n+  inline _Tp\n+  valarray<_Tp>::max() const\n+  {\n+      return *max_element (_M_data, _M_data+_M_size);\n+  }\n+  \n+  template<class _Tp>\n+  inline _Expr<_ValFunClos<_ValArray,_Tp>,_Tp>\n+  valarray<_Tp>::apply (_Tp func (_Tp)) const\n+  {\n+      typedef _ValFunClos<_ValArray,_Tp> _Closure;\n+      return _Expr<_Closure,_Tp> (_Closure (*this, func));\n+  }\n+\n+  template<class _Tp>\n+  inline _Expr<_RefFunClos<_ValArray,_Tp>,_Tp>\n+  valarray<_Tp>::apply (_Tp func (const _Tp &)) const\n+  {\n+      typedef _RefFunClos<_ValArray,_Tp> _Closure;\n+      return _Expr<_Closure,_Tp> (_Closure (*this, func));\n+  }\n+\n+#define _DEFINE_VALARRAY_UNARY_OPERATOR(_Op, _Name)                     \\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+  inline _Expr<_UnClos<_Name,_ValArray,_Tp>, _Tp>               \t\\\n+  valarray<_Tp>::operator _Op() const\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _UnClos<_Name,_ValArray,_Tp> _Closure;\t                \\\n+      return _Expr<_Closure, _Tp> (_Closure (*this));\t\t\t\\\n+  }\n+\n+    _DEFINE_VALARRAY_UNARY_OPERATOR(+, _Unary_plus)\n+    _DEFINE_VALARRAY_UNARY_OPERATOR(-, negate)\n+    _DEFINE_VALARRAY_UNARY_OPERATOR(~, _Bitwise_not)\n+\n+#undef _DEFINE_VALARRAY_UNARY_OPERATOR\n+  \n+  template<typename _Tp>\n+  inline _Expr<_UnClos<logical_not,_ValArray,_Tp>, bool>\n+  valarray<_Tp>::operator!() const\n+  {\n+      typedef _UnClos<logical_not,_ValArray,_Tp> _Closure;\n+      return _Expr<_Closure, bool> (_Closure (*this));\n+  }\n+\n+#define _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(_Op, _Name)               \\\n+  template<class _Tp>\t\t\t\t\t\t\t\\\n+  inline valarray<_Tp> &\t\t\t\t\t\t\\\n+  valarray<_Tp>::operator _Op##= (const _Tp &__t)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, __t);\t\\\n+      return *this;\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<class _Tp>\t\t\t\t\t\t\t\\\n+  inline valarray<_Tp> &\t\t\t\t\t\t\\\n+  valarray<_Tp>::operator _Op##= (const valarray<_Tp> &__v)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, \t\t\\\n+                               _Array<_Tp>(__v._M_data));\t\t\\\n+      return *this;\t\t\t\t\t\t\t\\\n+  }\n+\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(+, plus)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(-, minus)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(*, multiplies)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(/, divides)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(%, modulus)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(^, xor)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(&, and)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(|, or)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(<<, shift_left)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(>>, shift_right)\n+\n+#undef _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT\n+\n+\n+} // std::\n+  \n+\n+namespace std\n+{\n+\n+#define _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(_Op, _Name)          \\\n+  template<class _Tp> template<class _Dom>\t\t\t\t\\\n+  inline valarray<_Tp> &\t\t\t\t\t\t\\\n+  valarray<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name (_Array<_Tp>(_M_data), __e, _M_size);\t\\\n+      return *this;\t\t\t\t\t\t\t\\\n+  }\n+\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(+, plus)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(-, minus)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(*, multiplies)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(/, divides)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(%, modulus)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(^, xor)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(&, and)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(|, or)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(<<, shift_left)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, shift_right)\n+\n+#undef _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT\n+    \n+\n+#define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>, _Tp>        \\\n+  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n+      return _Expr<_Closure, _Tp> (_Closure (__v, __w));\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,_Tp>         \\\n+  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;\t\\\n+      return _Expr<_Closure, _Tp> (_Closure (__v, __t));\t        \\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,_Tp>         \\\n+  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n+      return _Expr<_Closure, _Tp> (_Closure (__t, __v));        \t\\\n+  }\n+\n+_DEFINE_BINARY_OPERATOR(+, plus)\n+_DEFINE_BINARY_OPERATOR(-, minus)\n+_DEFINE_BINARY_OPERATOR(*, multiplies)\n+_DEFINE_BINARY_OPERATOR(/, divides)\n+_DEFINE_BINARY_OPERATOR(%, modulus)\n+_DEFINE_BINARY_OPERATOR(^, _Bitwise_xor)\n+_DEFINE_BINARY_OPERATOR(&, _Bitwise_and)\n+_DEFINE_BINARY_OPERATOR(|, _Bitwise_or)\n+_DEFINE_BINARY_OPERATOR(<<, _Shift_left)\n+_DEFINE_BINARY_OPERATOR(>>, _Shift_right)\n+\n+#undef _DEFINE_BINARY_OPERATOR\n+\n+#define _DEFINE_LOGICAL_OPERATOR(_Op, _Name)\t\t\t\t\\\n+  template<typename _Tp>\t\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,bool>        \\\n+  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n+      return _Expr<_Closure, bool> (_Closure (__v, __w));               \\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<class _Tp>\t\t\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,bool>        \\\n+  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;     \\\n+      return _Expr<_Closure, bool> (_Closure (__v, __t));       \t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<class _Tp>\t\t\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,bool>        \\\n+  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+      typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n+      return _Expr<_Closure, bool> (_Closure (__t, __v));\t        \\\n+  }\n+\n+_DEFINE_LOGICAL_OPERATOR(&&, logical_and)\n+_DEFINE_LOGICAL_OPERATOR(||, logical_or)\n+_DEFINE_LOGICAL_OPERATOR(==, equal_to)\n+_DEFINE_LOGICAL_OPERATOR(!=, not_equal_to)\n+_DEFINE_LOGICAL_OPERATOR(<, less)\n+_DEFINE_LOGICAL_OPERATOR(>, greater)\n+_DEFINE_LOGICAL_OPERATOR(<=, less_equal)\n+_DEFINE_LOGICAL_OPERATOR(>=, greater_equal)\n+\n+#undef _DEFINE_LOGICAL_OPERATOR\n+\n+} // namespace std\n+\n+#endif // _CPP_VALARRAY\n+\n+// Local Variables:\n+// mode:c++\n+// End:"}, {"sha": "995daec7249f483616f073f61a3226d6f7f7dabf", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -1,4 +1,4 @@\n-// -*- C++ -*- std header.\n+// <vector> -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n //\n@@ -27,11 +27,52 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file vector\n- *  This is a Standard C++ Library file.  You should @c #include this file\n- *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n+/*\n+ *\n+ * Copyright (c) 1994\n+ * Hewlett-Packard Company\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Hewlett-Packard Company makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ *\n+ *\n+ * Copyright (c) 1996\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+/** @file std_vector.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_VECTOR\n-#include <bits/std_vector.h>\n-#endif\n+#define _CPP_VECTOR 1\n+\n+#pragma GCC system_header\n+\n+#include <bits/functexcept.h>\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_alloc.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_vector.h>\n+#include <bits/stl_bvector.h> \n+\n+#endif /* _CPP_VECTOR */\n+\n+// Local Variables:\n+// mode:C++\n+// End:"}, {"sha": "c0bec5d5b34dd613deef2a5b5390086eeb8c4cf5", "filename": "libstdc++-v3/src/bitset.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fbitset.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -41,7 +41,7 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */ \n \n-#include <bits/std_bitset.h>\n+#include <bitset>\n \n //\n // Definitions of non-inline functions from the single-word version of"}, {"sha": "7a7433a1cf38288f80d00442243431413641fb58", "filename": "libstdc++-v3/src/cmath.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcmath.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -32,7 +32,7 @@\n // helper functions used in the math routines of libstdc++.\n \n \n-#include <bits/std_cmath.h>\n+#include <cmath>\n \n namespace std\n {\n@@ -45,4 +45,3 @@ namespace std\n       __cmath_power<long double>(long double, unsigned int);\n   \n } // namespace std\n-"}, {"sha": "c5474c6c7a7a5be37d76a3e9979c1af14277ad7f", "filename": "libstdc++-v3/src/codecvt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcodecvt.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -27,7 +27,7 @@\n \n // Written by Benjamin Kosnik <bkoz@cygnus.com>\n \n-#include <bits/std_locale.h>\n+#include <locale>\n \n namespace std \n {"}, {"sha": "a6d502f2dad0cbeee3efc428e74a1e1792b74af1", "filename": "libstdc++-v3/src/complex_io.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex_io.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -27,7 +27,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <bits/std_complex.h>\n+#include <complex>\n \n namespace std\n {\n@@ -91,6 +91,3 @@ namespace std\n                const complex<long double>&);\n #endif //_GLIBCPP_USE_WCHAR_T\n } // namespace std\n-\n-\n-"}, {"sha": "11e4a89a8315de2015659a1b9f410404de1c99c0", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -39,15 +39,14 @@\n \n #ifdef _GLIBCPP_CONCEPT_CHECKS\n \n-#include <bits/stl_alloc.h>\n-#include <bits/std_vector.h>\n-#include <bits/std_ostream.h>\n+#include <memory>\n+#include <vector>\n+#include <ostream>\n \n #define _Instantiate(...) template void __function_requires< __VA_ARGS__ > ()\n \n namespace __gnu_cxx\n {\n-\n   template void __aux_require_boolean_expr<bool>(bool const&);\n \n   _Instantiate(_BidirectionalIteratorConcept<\n@@ -160,5 +159,3 @@ namespace __gnu_cxx\n #undef _Instantiate\n \n #endif\n-\n-"}, {"sha": "6ca59572fba80b3a57e0d670e2ce8b72959ed377", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -31,10 +31,10 @@\n // ISO C++ 14882: 27.4  Iostreams base classes\n //\n \n-#include <bits/std_ios.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_fstream.h>\n+#include <ios>\n+#include <ostream>\n+#include <istream>\n+#include <fstream>\n \n namespace std \n {"}, {"sha": "3fc3dcb8fb30352cb9f21036bd3dc31f65a094f8", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -34,7 +34,7 @@\n // 18.2.1\n //\n \n-#include <bits/std_limits.h>\n+#include <limits>\n \n namespace std \n {"}, {"sha": "e2f6d7764fe6955bed54997e1fefc0e623f9baf9", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -31,17 +31,16 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n-#include <bits/std_cstdlib.h>\n-#include <bits/std_clocale.h>\n-#include <bits/std_cstring.h>\n-#include <bits/std_cassert.h>\n-#include <bits/std_limits.h>\n+#include <cstdlib>\n+#include <clocale>\n+#include <cstring>\n+#include <cassert>\n+#include <limits>\n #include <exception>\n-#include <bits/std_stdexcept.h>\n-#include <bits/std_locale.h>\n-#include <bits/locale_facets.tcc>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n+#include <stdexcept>\n+#include <locale>\n+#include <istream>\n+#include <ostream>\n \n namespace std\n {"}, {"sha": "630805ee0fa5e21e4aabf19879bf095c0f60b4ec", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -25,20 +25,20 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <bits/std_clocale.h>\n-#include <bits/std_cstring.h>\n-#include <bits/std_cassert.h>\n-#include <bits/std_cctype.h>\n-#include <bits/std_limits.h>\n+#include <clocale>\n+#include <cstring>\n+#include <cassert>\n+#include <cctype>\n+#include <limits>\n #include <exception>\n-#include <bits/std_stdexcept.h>\n-#include <bits/std_locale.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_vector.h>\n-#include <bits/std_memory.h>      // for auto_ptr\n+#include <stdexcept>\n+#include <locale>\n+#include <istream>\n+#include <ostream>\n+#include <vector>\n+#include <memory>      // for auto_ptr\n #ifdef _GLIBCPP_USE_WCHAR_T  \n-# include <bits/std_cwctype.h>     // for towupper, etc.\n+# include <cwctype>     // for towupper, etc.\n #endif\n \n namespace std "}, {"sha": "45c4732d007fe1dbfff8fbefacab771961698b17", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -25,11 +25,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <bits/std_clocale.h>\n-#include <bits/std_locale.h>\n-#include <bits/std_cstring.h>\n-#include <bits/std_vector.h>\n-#include <bits/std_stdexcept.h>\n+#include <clocale>\n+#include <cstring>\n+#include <locale>\n+#include <vector>\n+#include <stdexcept>\n \n namespace std\n {"}, {"sha": "bb0bd78da93d41219ad6d11831fa01b853a1e4b4", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -31,20 +31,18 @@\n // ISO C++ 14882:\n //\n \n-#include <bits/std_string.h>\n-#include <bits/std_algorithm.h>\n-#include <bits/std_locale.h>\n-#include <bits/std_vector.h>\n-#include <bits/std_iterator.h>\n-#include <bits/std_streambuf.h>\n-#include <bits/std_sstream.h>\n-#include <bits/std_fstream.h>\n-#include <bits/std_ios.h>\n-#include <bits/basic_ios.tcc>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_string.h>\n-#include <bits/std_iomanip.h>\n+#include <string>\n+#include <algorithm>\n+#include <locale>\n+#include <vector>\n+#include <iterator>\n+#include <streambuf>\n+#include <sstream>\n+#include <fstream>\n+#include <ios>\n+#include <istream>\n+#include <ostream>\n+#include <iomanip>\n \n // NB: unnecessary if the .h headers include these\n #ifndef  _GLIBCPP_FULLY_COMPLIANT_HEADERS"}, {"sha": "d39d41ffef658b587be14ae232df77fae0f60009", "filename": "libstdc++-v3/src/stdexcept.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstdexcept.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -31,8 +31,8 @@\n // ISO C++ 14882: 19.1  Exception classes\n //\n \n-#include <bits/std_string.h>\n-#include <bits/std_stdexcept.h>\n+#include <string>\n+#include <stdexcept>\n \n namespace std \n {"}, {"sha": "52661dfc2e548a21d9c1211aec28c4f6880fea2b", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -32,13 +32,12 @@\n //\n \n #include <bits/c++config.h>\n-#include <bits/stl_alloc.h>\n-#include <bits/std_vector.h>\n-#include <bits/std_ostream.h>\n+#include <memory>\n+#include <vector>\n+#include <ostream>\n \n namespace std\n {\n-\n   template class __malloc_alloc_template<0>;\n \n #ifndef __USE_MALLOC\n@@ -51,4 +50,3 @@ namespace std\n     _M_insert_aux(vector<unsigned int>::iterator, unsigned int const &);\n \n } // namespace std\n-"}, {"sha": "4da060fefb270e0f6c0350f242ca0b30e9d9e7a1", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -33,7 +33,7 @@\n // Written by Jason Merrill based upon the specification by Takanori Adachi\n // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers.\n \n-#include <bits/std_string.h>\n+#include <string>\n \n // Instantiation configuration.\n #ifndef C"}, {"sha": "b56a911dcd92ba37148120c21b579ecdaafa651f", "filename": "libstdc++-v3/src/valarray-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc?ref=54c1bf7801758caf2ff54917e79a8c239643061c", "patch": "@@ -31,7 +31,7 @@\n // ISO C++ 14882:\n //\n \n-#include <bits/std_valarray.h>\n+#include <valarray>\n \n namespace std\n {"}]}