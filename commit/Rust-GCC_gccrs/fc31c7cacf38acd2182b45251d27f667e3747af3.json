{"sha": "fc31c7cacf38acd2182b45251d27f667e3747af3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMzMWM3Y2FjZjM4YWNkMjE4MmI0NTI1MWQyN2Y2NjdlMzc0N2FmMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-03-11T08:25:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-03-11T08:25:27Z"}, "message": "mips.md: Use move_operand in splitters for 64-bit moves.\n\n\t* config/mips/mips.md: Use move_operand in splitters for 64-bit moves.\n\t(movdi, movsi, movhi, movqi, movsf, movdf): Remove predicates.\n\t(*movdi_32bit_mips16, *movsi_mips16, *movhi_mips16, *movqi_mips16)\n\t(*movsf_mips16, *movdf_mips16):  Name unnamed patterns.  Use\n\tmove_operand as source predicate in all cases.\n\t(*movdi_32bit): Renamed from movdi_internal.  Remove 'F' constraint.\n\tTest reg_or_0_operand.  Use move_operand as source predicate.\n\t(*movdi_64bit): Renamed from movdi_internal2.  Test reg_or_0_operand.\n\t(*movdi_64bit_mips16): Renamed from movdi_internal2_mips16.\n\t(*movsi_internal): Renamed from movsi_internal.  Test reg_or_0_operand.\n\t(movhi, movqi, movsf, movdf): Use mips_legitimize_move.\n\t(*movhi_internal): Renamed from movhi_internal.  Test reg_or_0_operand.\n\tUse move_operand as source predicate.  Remove 'K' constraint.\n\t(*movqi_internal): Likewise movqi_internal.\n\t(*movsf_hardfloat): Renamed from movsf_internal1.  Test\n\treg_or_0_operand.  Use move_operand as source predicate.\n\t(*movsf_softfloat): Likewise movsf_internal2.\n\t(*movdf_hardfloat_64bit): Likewise movsf_internal1a.\n\t(*movdf_hardfloat_32bit): Likewise movsf_internal1b.\n\t(*movdf_softfloat): Likewise movdf_internal2.\n\t* config/mips/mips.c (move_operand): Match arbitrary CONST_INTs\n\tfor DImode if !TARGET_64BIT.\n\t(mips_legitimize_move): Simplify accordingly.\n\nFrom-SVN: r79309", "tree": {"sha": "7a46d8921f8baabb0d774cc567dfe9b475aa428a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a46d8921f8baabb0d774cc567dfe9b475aa428a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc31c7cacf38acd2182b45251d27f667e3747af3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc31c7cacf38acd2182b45251d27f667e3747af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc31c7cacf38acd2182b45251d27f667e3747af3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc31c7cacf38acd2182b45251d27f667e3747af3/comments", "author": null, "committer": null, "parents": [{"sha": "81f2eadbedaf8048f749b2a6c7f550740ece94a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f2eadbedaf8048f749b2a6c7f550740ece94a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f2eadbedaf8048f749b2a6c7f550740ece94a4"}], "stats": {"total": 190, "additions": 94, "deletions": 96}, "files": [{"sha": "bcd727c42254db74246447a2f9f4a131d94e3dd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc31c7cacf38acd2182b45251d27f667e3747af3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc31c7cacf38acd2182b45251d27f667e3747af3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc31c7cacf38acd2182b45251d27f667e3747af3", "patch": "@@ -1,3 +1,29 @@\n+2004-03-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md: Use move_operand in splitters for 64-bit moves.\n+\t(movdi, movsi, movhi, movqi, movsf, movdf): Remove predicates.\n+\t(*movdi_32bit_mips16, *movsi_mips16, *movhi_mips16, *movqi_mips16)\n+\t(*movsf_mips16, *movdf_mips16):  Name unnamed patterns.  Use\n+\tmove_operand as source predicate in all cases.\n+\t(*movdi_32bit): Renamed from movdi_internal.  Remove 'F' constraint.\n+\tTest reg_or_0_operand.  Use move_operand as source predicate.\n+\t(*movdi_64bit): Renamed from movdi_internal2.  Test reg_or_0_operand.\n+\t(*movdi_64bit_mips16): Renamed from movdi_internal2_mips16.\n+\t(*movsi_internal): Renamed from movsi_internal.  Test reg_or_0_operand.\n+\t(movhi, movqi, movsf, movdf): Use mips_legitimize_move.\n+\t(*movhi_internal): Renamed from movhi_internal.  Test reg_or_0_operand.\n+\tUse move_operand as source predicate.  Remove 'K' constraint.\n+\t(*movqi_internal): Likewise movqi_internal.\n+\t(*movsf_hardfloat): Renamed from movsf_internal1.  Test\n+\treg_or_0_operand.  Use move_operand as source predicate.\n+\t(*movsf_softfloat): Likewise movsf_internal2.\n+\t(*movdf_hardfloat_64bit): Likewise movsf_internal1a.\n+\t(*movdf_hardfloat_32bit): Likewise movsf_internal1b.\n+\t(*movdf_softfloat): Likewise movdf_internal2.\n+\t* config/mips/mips.c (move_operand): Match arbitrary CONST_INTs\n+\tfor DImode if !TARGET_64BIT.\n+\t(mips_legitimize_move): Simplify accordingly.\n+\n 2004-03-11  Josef Zlomek  <zlomekj@suse.cz>\n \n \tPR/14362"}, {"sha": "bedf920d385920df3407ff15344a88860fd30f9b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc31c7cacf38acd2182b45251d27f667e3747af3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc31c7cacf38acd2182b45251d27f667e3747af3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fc31c7cacf38acd2182b45251d27f667e3747af3", "patch": "@@ -1556,6 +1556,11 @@ move_operand (rtx op, enum machine_mode mode)\n       if (TARGET_MIPS16)\n \treturn true;\n \n+      /* When generating 32-bit code, allow DImode move_operands to\n+\t match arbitrary constants.  We split them after reload.  */\n+      if (!TARGET_64BIT && mode == DImode)\n+\treturn true;\n+\n       /* Otherwise check whether the constant can be loaded in a single\n \t instruction.  */\n       return LUI_INT (op) || SMALL_INT (op) || SMALL_INT_UNSIGNED (op);\n@@ -1981,13 +1986,9 @@ mips_legitimize_move (enum machine_mode mode, rtx dest, rtx src)\n       return true;\n     }\n \n-  /* The source of an SImode move must be a move_operand.  Likewise\n-     DImode moves on 64-bit targets.  We need to deal with constants\n-     that would be legitimate immediate_operands but not legitimate\n-     move_operands.  */\n-  if (GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n-      && CONSTANT_P (src)\n-      && !move_operand (src, mode))\n+  /* We need to deal with constants that would be legitimate\n+     immediate_operands but not legitimate move_operands.  */\n+  if (CONSTANT_P (src) && !move_operand (src, mode))\n     {\n       mips_legitimize_const_move (mode, dest, src);\n       set_unique_reg_note (get_last_insn (), REG_EQUAL, copy_rtx (src));"}, {"sha": "87e6cbd2c027e31f7554aeec35a948e7d2e75515", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 60, "deletions": 89, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc31c7cacf38acd2182b45251d27f667e3747af3/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc31c7cacf38acd2182b45251d27f667e3747af3/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=fc31c7cacf38acd2182b45251d27f667e3747af3", "patch": "@@ -4481,7 +4481,7 @@ dsrl\\t%3,%3,1\\n\\\n ;; the compiler, have memoized the insn number already.\n \n (define_expand \"movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:DI 0 \"\" \"\")\n \t(match_operand:DI 1 \"\" \"\"))]\n   \"\"\n {\n@@ -4518,22 +4518,20 @@ dsrl\\t%3,%3,1\\n\\\n   [(set_attr \"type\"\t\"store\")\n    (set_attr \"mode\"\t\"DI\")])\n \n-(define_insn \"movdi_internal\"\n+(define_insn \"*movdi_32bit\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,m,*x,*d,*x,*B*C*D,*B*C*D,*d,*m\")\n-\t(match_operand:DI 1 \"general_operand\" \"d,iF,m,d,J,*x,*d,*d,*m,*B*C*D,*B*C*D\"))]\n+\t(match_operand:DI 1 \"move_operand\" \"d,i,m,d,J,*x,*d,*d,*m,*B*C*D,*B*C*D\"))]\n   \"!TARGET_64BIT && !TARGET_MIPS16\n    && (register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode)\n-       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n-       || operands[1] == CONST0_RTX (DImode))\"\n+       || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,arith,load,store,hilo,hilo,hilo,xfer,load,xfer,store\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"   \"8,16,*,*,8,8,8,8,*,8,*\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_32bit_mips16\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,m,*d\")\n-\t(match_operand:DI 1 \"general_operand\" \"d,d,y,K,N,m,d,*x\"))]\n+\t(match_operand:DI 1 \"move_operand\" \"d,d,y,K,N,m,d,*x\"))]\n   \"!TARGET_64BIT && TARGET_MIPS16\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n@@ -4542,20 +4540,18 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"\t\"8,8,8,8,12,*,*,8\")])\n \n-(define_insn \"movdi_internal2\"\n+(define_insn \"*movdi_64bit\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,e,d,m,*f,*f,*f,*d,*m,*x,*d,*x,*B*C*D,*B*C*D,*d,*m\")\n \t(match_operand:DI 1 \"move_operand\" \"d,U,T,m,dJ,*f,*d*J,*m,*f,*f,*J,*x,*d,*d,*m,*B*C*D,*B*C*D\"))]\n   \"TARGET_64BIT && !TARGET_MIPS16\n    && (register_operand (operands[0], DImode)\n-       || register_operand (operands[1], DImode)\n-       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0)\n-       || operands[1] == CONST0_RTX (DImode))\"\n+       || reg_or_0_operand (operands[1], DImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,const,const,load,store,move,xfer,load,xfer,store,hilo,hilo,hilo,xfer,load,xfer,store\")\n    (set_attr \"mode\"\t\"DI\")\n    (set_attr \"length\"\t\"4,*,*,*,*,4,4,*,4,*,4,4,4,8,*,8,*\")])\n \n-(define_insn \"*movdi_internal2_mips16\"\n+(define_insn \"*movdi_64bit_mips16\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,m,*d\")\n \t(match_operand:DI 1 \"move_operand\" \"d,d,y,K,N,U,m,d,*x\"))]\n   \"TARGET_64BIT && TARGET_MIPS16\n@@ -4630,7 +4626,7 @@ dsrl\\t%3,%3,1\\n\\\n ;; the compiler, have memoized the insn number already.\n \n (define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:SI 0 \"\" \"\")\n \t(match_operand:SI 1 \"\" \"\"))]\n   \"\"\n {\n@@ -4668,19 +4664,18 @@ dsrl\\t%3,%3,1\\n\\\n ;; The difference between these two is whether or not ints are allowed\n ;; in FP registers (off by default, use -mdebugh to enable).\n \n-(define_insn \"movsi_internal\"\n+(define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,e,d,m,*f,*f,*f,*d,*m,*d,*z,*x,*d,*x,*B*C*D,*B*C*D,*d,*m\")\n \t(match_operand:SI 1 \"move_operand\" \"d,U,T,m,dJ,*f,*d*J,*m,*f,*f,*z,*d,J,*x,*d,*d,*m,*B*C*D,*B*C*D\"))]\n   \"!TARGET_MIPS16\n    && (register_operand (operands[0], SImode)\n-       || register_operand (operands[1], SImode)\n-       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n+       || reg_or_0_operand (operands[1], SImode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,const,const,load,store,move,xfer,load,xfer,store,xfer,xfer,hilo,hilo,hilo,xfer,load,xfer,store\")\n    (set_attr \"mode\"\t\"SI\")\n    (set_attr \"length\"\t\"4,*,*,*,*,4,4,*,4,*,4,4,4,4,4,4,*,4,*\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsi_mips16\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,d,m,*d\")\n \t(match_operand:SI 1 \"move_operand\" \"d,d,y,K,N,U,m,d,*x\"))]\n   \"TARGET_MIPS16\n@@ -4933,30 +4928,20 @@ dsrl\\t%3,%3,1\\n\\\n ;; Unsigned loads are used because LOAD_EXTEND_OP returns ZERO_EXTEND.\n \n (define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:HI 0 \"\" \"\")\n+\t(match_operand:HI 1 \"\" \"\"))]\n   \"\"\n {\n-  if ((reload_in_progress | reload_completed) == 0\n-      && !register_operand (operands[0], HImode)\n-      && !register_operand (operands[1], HImode)\n-      && (TARGET_MIPS16\n-\t  || (GET_CODE (operands[1]) != CONST_INT\n-\t  || INTVAL (operands[1]) != 0)))\n-    {\n-      rtx temp = force_reg (HImode, operands[1]);\n-      emit_move_insn (operands[0], temp);\n-      DONE;\n-    }\n+  if (mips_legitimize_move (HImode, operands[0], operands[1]))\n+    DONE;\n })\n \n-(define_insn \"movhi_internal\"\n+(define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,d,m,*d,*f,*f,*x,*d\")\n-\t(match_operand:HI 1 \"general_operand\"       \"d,IK,m,dJ,*f,*d,*f,*d,*x\"))]\n+\t(match_operand:HI 1 \"move_operand\"         \"d,I,m,dJ,*f,*d,*f,*d,*x\"))]\n   \"!TARGET_MIPS16\n    && (register_operand (operands[0], HImode)\n-       || register_operand (operands[1], HImode)\n-       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n+       || reg_or_0_operand (operands[1], HImode))\"\n   \"@\n     move\\t%0,%1\n     li\\t%0,%1\n@@ -4971,9 +4956,9 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"HI\")\n    (set_attr \"length\"\t\"4,4,*,*,4,4,4,4,4\")])\n \n-(define_insn \"\"\n+(define_insn \"*movhi_mips16\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,m,*d\")\n-\t(match_operand:HI 1 \"general_operand\"      \"d,d,y,K,N,m,d,*x\"))]\n+\t(match_operand:HI 1 \"move_operand\"         \"d,d,y,K,N,m,d,*x\"))]\n   \"TARGET_MIPS16\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n@@ -5053,30 +5038,20 @@ dsrl\\t%3,%3,1\\n\\\n ;; Unsigned loads are used because LOAD_EXTEND_OP returns ZERO_EXTEND.\n \n (define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:QI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:QI 0 \"\" \"\")\n+\t(match_operand:QI 1 \"\" \"\"))]\n   \"\"\n {\n-  if ((reload_in_progress | reload_completed) == 0\n-      && !register_operand (operands[0], QImode)\n-      && !register_operand (operands[1], QImode)\n-      && (TARGET_MIPS16\n-\t  || (GET_CODE (operands[1]) != CONST_INT\n-\t  || INTVAL (operands[1]) != 0)))\n-    {\n-      rtx temp = force_reg (QImode, operands[1]);\n-      emit_move_insn (operands[0], temp);\n-      DONE;\n-    }\n+  if (mips_legitimize_move (QImode, operands[0], operands[1]))\n+    DONE;\n })\n \n-(define_insn \"movqi_internal\"\n+(define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,d,m,*d,*f,*f,*x,*d\")\n-\t(match_operand:QI 1 \"general_operand\"       \"d,IK,m,dJ,*f,*d,*f,*d,*x\"))]\n+\t(match_operand:QI 1 \"move_operand\"         \"d,I,m,dJ,*f,*d,*f,*d,*x\"))]\n   \"!TARGET_MIPS16\n    && (register_operand (operands[0], QImode)\n-       || register_operand (operands[1], QImode)\n-       || (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) == 0))\"\n+       || reg_or_0_operand (operands[1], QImode))\"\n   \"@\n     move\\t%0,%1\n     li\\t%0,%1\n@@ -5091,9 +5066,9 @@ dsrl\\t%3,%3,1\\n\\\n    (set_attr \"mode\"\t\"QI\")\n    (set_attr \"length\"\t\"4,4,*,*,4,4,4,4,4\")])\n \n-(define_insn \"\"\n+(define_insn \"*movqi_mips16\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,y,d,d,d,d,m,*d\")\n-\t(match_operand:QI 1 \"general_operand\"      \"d,d,y,K,N,m,d,*x\"))]\n+\t(match_operand:QI 1 \"move_operand\"         \"d,d,y,K,N,m,d,*x\"))]\n   \"TARGET_MIPS16\n    && (register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n@@ -5143,41 +5118,39 @@ dsrl\\t%3,%3,1\\n\\\n ;; 32-bit floating point moves\n \n (define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SF 0 \"\" \"\")\n+\t(match_operand:SF 1 \"\" \"\"))]\n   \"\"\n {\n-  if ((reload_in_progress | reload_completed) == 0\n-      && !register_operand (operands[0], SFmode)\n-      && !nonmemory_operand (operands[1], SFmode))\n-    operands[1] = force_reg (SFmode, operands[1]);\n+  if (mips_legitimize_move (SFmode, operands[0], operands[1]))\n+    DONE;\n })\n \n-(define_insn \"movsf_internal1\"\n+(define_insn \"*movsf_hardfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:SF 1 \"general_operand\" \"f,G,m,fG,*d,*f,*G*d,*m,*d\"))]\n+\t(match_operand:SF 1 \"move_operand\" \"f,G,m,fG,*d,*f,*G*d,*m,*d\"))]\n   \"TARGET_HARD_FLOAT\n    && (register_operand (operands[0], SFmode)\n-       || nonmemory_operand (operands[1], SFmode))\"\n+       || reg_or_0_operand (operands[1], SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,xfer,load,store,xfer,xfer,move,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"4,4,*,*,4,4,4,*,*\")])\n \n-(define_insn \"movsf_internal2\"\n+(define_insn \"*movsf_softfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=d,d,m\")\n-\t(match_operand:SF 1 \"general_operand\" \"      Gd,m,d\"))]\n+\t(match_operand:SF 1 \"move_operand\" \"Gd,m,d\"))]\n   \"TARGET_SOFT_FLOAT && !TARGET_MIPS16\n    && (register_operand (operands[0], SFmode)\n-       || nonmemory_operand (operands[1], SFmode))\"\n+       || reg_or_0_operand (operands[1], SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n    (set_attr \"length\"\t\"4,*,*\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_mips16\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=d,y,d,d,m\")\n-\t(match_operand:SF 1 \"nonimmediate_operand\" \"d,d,y,m,d\"))]\n+\t(match_operand:SF 1 \"move_operand\" \"d,d,y,m,d\"))]\n   \"TARGET_MIPS16\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\"\n@@ -5190,52 +5163,50 @@ dsrl\\t%3,%3,1\\n\\\n ;; 64-bit floating point moves\n \n (define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:DF 0 \"\" \"\")\n+\t(match_operand:DF 1 \"\" \"\"))]\n   \"\"\n {\n-  if ((reload_in_progress | reload_completed) == 0\n-      && !register_operand (operands[0], DFmode)\n-      && !nonmemory_operand (operands[1], DFmode))\n-    operands[1] = force_reg (DFmode, operands[1]);\n+  if (mips_legitimize_move (DFmode, operands[0], operands[1]))\n+    DONE;\n })\n \n-(define_insn \"movdf_internal1a\"\n+(define_insn \"*movdf_hardfloat_64bit\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:DF 1 \"general_operand\" \"f,G,m,fG,*d,*f,*d*G,*m,*d\"))]\n+\t(match_operand:DF 1 \"move_operand\" \"f,G,m,fG,*d,*f,*d*G,*m,*d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_64BIT\n    && (register_operand (operands[0], DFmode)\n-       || nonmemory_operand (operands[1], DFmode))\"\n+       || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,xfer,load,store,xfer,xfer,move,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"4,4,*,*,4,4,4,*,*\")])\n \n-(define_insn \"movdf_internal1b\"\n+(define_insn \"*movdf_hardfloat_32bit\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:DF 1 \"general_operand\" \"f,G,m,fG,*d,*f,*d*G,*m,*d\"))]\n+\t(match_operand:DF 1 \"move_operand\" \"f,G,m,fG,*d,*f,*d*G,*m,*d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && !TARGET_64BIT\n    && (register_operand (operands[0], DFmode)\n-       || nonmemory_operand (operands[1], DFmode))\"\n+       || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,xfer,load,store,xfer,xfer,move,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"4,8,*,*,8,8,8,*,*\")])\n \n-(define_insn \"movdf_internal2\"\n+(define_insn \"*movdf_softfloat\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=d,d,m,d,f,f\")\n-\t(match_operand:DF 1 \"general_operand\" \"dG,m,dG,f,d,f\"))]\n+\t(match_operand:DF 1 \"move_operand\" \"dG,m,dG,f,d,f\"))]\n   \"(TARGET_SOFT_FLOAT || TARGET_SINGLE_FLOAT) && !TARGET_MIPS16\n    && (register_operand (operands[0], DFmode)\n-       || nonmemory_operand (operands[1], DFmode))\"\n+       || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n   [(set_attr \"type\"\t\"move,load,store,xfer,xfer,move\")\n    (set_attr \"mode\"\t\"DF\")\n    (set_attr \"length\"\t\"8,*,*,4,4,4\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_mips16\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=d,y,d,d,m\")\n-\t(match_operand:DF 1 \"nonimmediate_operand\" \"d,d,y,m,d\"))]\n+\t(match_operand:DF 1 \"move_operand\" \"d,d,y,m,d\"))]\n   \"TARGET_MIPS16\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n@@ -5246,7 +5217,7 @@ dsrl\\t%3,%3,1\\n\\\n \n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))]\n+\t(match_operand:DI 1 \"move_operand\" \"\"))]\n   \"reload_completed && !TARGET_64BIT\n    && mips_split_64bit_move_p (operands[0], operands[1])\"\n   [(const_int 0)]\n@@ -5257,7 +5228,7 @@ dsrl\\t%3,%3,1\\n\\\n \n (define_split\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n+\t(match_operand:DF 1 \"move_operand\" \"\"))]\n   \"reload_completed && !TARGET_64BIT\n    && mips_split_64bit_move_p (operands[0], operands[1])\"\n   [(const_int 0)]"}]}