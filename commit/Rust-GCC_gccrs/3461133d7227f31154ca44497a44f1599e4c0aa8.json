{"sha": "3461133d7227f31154ca44497a44f1599e4c0aa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2MTEzM2Q3MjI3ZjMxMTU0Y2E0NDQ5N2E0NGYxNTk5ZTRjMGFhOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-06-27T12:33:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-06-27T12:33:49Z"}, "message": "Nathan C.\n\n2003-06-27  Paolo Carlini  <pcarlini@unitus.it>\n\t    Nathan C. Myers  <ncm-nospam@cantrip.org>\n\n\tPR libstdc++/9178\n\t* include/bits/fstream.tcc (_M_underflow): Properly estimate\n\tthe worst-case number of external bytes for a given get area.\n\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/9178.cc: New.\n\n2003-06-27  Paolo Carlini  <pcarlini@unitus.it>\n\t    Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/11305\n\t* include/bits/fstream.tcc (overflow): Properly estimate the\n\tworst-case number of external bytes for a given put area\n\t(by using codecvt::max_length()).\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1: New.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-2: New.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-3: New.\n\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-4: New.\n\nCo-Authored-By: Nathan C. Myers <ncm-nospam@cantrip.org>\nCo-Authored-By: Petur Runolfsson <peturr02@ru.is>\n\nFrom-SVN: r68566", "tree": {"sha": "867197502c38847a583cb1129372b25e7815176b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/867197502c38847a583cb1129372b25e7815176b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3461133d7227f31154ca44497a44f1599e4c0aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3461133d7227f31154ca44497a44f1599e4c0aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3461133d7227f31154ca44497a44f1599e4c0aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3461133d7227f31154ca44497a44f1599e4c0aa8/comments", "author": null, "committer": null, "parents": [{"sha": "5648db5461855276e4445804940772c1d9d8fd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5648db5461855276e4445804940772c1d9d8fd18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5648db5461855276e4445804940772c1d9d8fd18"}], "stats": {"total": 431, "additions": 422, "deletions": 9}, "files": [{"sha": "0d30ceb2f66223718bb3d81239c966f3e695a931", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -1,3 +1,23 @@\n+2003-06-27  Paolo Carlini  <pcarlini@unitus.it>\n+\t    Nathan C. Myers  <ncm-nospam@cantrip.org>\n+\n+\tPR libstdc++/9178\n+\t* include/bits/fstream.tcc (_M_underflow): Properly estimate\n+\tthe worst-case number of external bytes for a given get area.\n+\t* testsuite/27_io/basic_filebuf/underflow/wchar_t/9178.cc: New.\n+\n+2003-06-27  Paolo Carlini  <pcarlini@unitus.it>\n+\t    Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/11305\n+\t* include/bits/fstream.tcc (overflow): Properly estimate the\n+\tworst-case number of external bytes for a given put area\n+\t(by using codecvt::max_length()).\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1: New.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-2: New.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-3: New.\n+\t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-4: New.\n+\n 2003-06-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/linker-map.gnu: Remove ; after __numpunct_cache."}, {"sha": "3d6fb96e296f8c70bd4f75774e14227d76008216", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -213,16 +213,19 @@ namespace std\n \t    }\n \t  else\n \t    {\n-\t      char* __buf = static_cast<char*>(__builtin_alloca(__buflen));\n-\t      __elen = _M_file.xsgetn(__buf, __buflen);\n- \n-\t      const char* __eend;\n+\t      // Worst-case number of external bytes.\n+\t      // XXX Not done encoding() == -1.\n+\t      const streamsize __blen = __buflen * _M_codecvt->max_length();\n+\t      char* __buf = static_cast<char*>(__builtin_alloca(__blen));\n+\t      __elen = _M_file.xsgetn(__buf, __blen);\n+\n+ \t      const char* __eend;\n \t      char_type* __iend;\n \t      codecvt_base::result __r;\n \t      __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n \t\t\t\t   __eend, this->eback(), \n \t\t\t\t   this->eback() + __buflen, __iend);\n-\t      if (__r == codecvt_base::ok)\n+\t      if (__r == codecvt_base::ok || __r == codecvt_base::partial)\n \t\t__ilen = __iend - this->eback();\n \t      else if (__r == codecvt_base::noconv)\n \t\t{\n@@ -391,11 +394,10 @@ namespace std\n       else\n \t{\n \t  // Worst-case number of external bytes needed.\n-\t  int __ext_multiplier = _M_codecvt->encoding();\n-\t  if (__ext_multiplier ==  -1 || __ext_multiplier == 0)\n-\t    __ext_multiplier = sizeof(char_type);\n-\t  streamsize __blen = __ilen * __ext_multiplier;\n+\t  // XXX Not done encoding() == -1.\n+\t  streamsize __blen = __ilen * _M_codecvt->max_length();\n \t  char* __buf = static_cast<char*>(__builtin_alloca(__blen));\n+\n \t  char* __bend;\n \t  const char_type* __iend;\n \t  codecvt_base::result __r;"}, {"sha": "5174c332d8a5c1ea1a38f8bac49374b7507ae501", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-1.cc?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  wfilebuf fb;\n+  locale loc(__gnu_cxx_test::try_named_locale(\"en_US.UTF-8\"));\n+  fb.pubimbue(loc);\n+  fb.pubsetbuf(0, 0);\n+  fb.open(\"tmp_11305-1\", ios_base::out);\n+  wint_t n1 = fb.sputc(0x20000000);\n+  wfilebuf* f = fb.close();\n+  \n+  VERIFY( n1 != WEOF );\n+  VERIFY( f != NULL );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "571d7178bceb1070cb01973b990b3083334de701", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-2.cc?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  wfilebuf fb;\n+  locale loc(__gnu_cxx_test::try_named_locale(\"en_US.UTF-8\"));\n+  fb.pubimbue(loc);\n+  fb.pubsetbuf(0, 0);\n+  fb.open(\"tmp_11305-2\", ios_base::out);\n+  wint_t n1 = fb.sputc(0x20000000);\n+  wint_t n2 = fb.sputc(0x40000000);\n+  wfilebuf* f = fb.close();\n+  \n+  VERIFY( n1 != WEOF );\n+  VERIFY( n2 != WEOF );\n+  VERIFY( f != NULL );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "86c81fa5604b3f0ed8fd095dbb560d0768e6b177", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-3.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-3.cc?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  wfilebuf fb;\n+  locale loc(__gnu_cxx_test::try_named_locale(\"en_US.UTF-8\"));\n+  fb.pubimbue(loc);\n+  fb.open(\"tmp_11305-3\", ios_base::out);\n+  wint_t n1 = fb.sputc(0x20000000);\n+  wfilebuf* f = fb.close();\n+\t\n+  VERIFY( n1 != WEOF );\n+  VERIFY( f != NULL );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "100e6a2b0f4381a439ffbd05bd7c7606b802a6ee", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-4.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Foverflow%2Fwchar_t%2F11305-4.cc?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  wfilebuf fb;\n+  locale loc(__gnu_cxx_test::try_named_locale(\"en_US.UTF-8\"));\n+  fb.pubimbue(loc);\n+  fb.open(\"tmp_11405-4\", ios_base::out);\n+  wint_t n1 = fb.sputc(0x20000000);\n+  wint_t n2 = fb.sputc(0x40000000);\n+  wfilebuf* f = fb.close();\n+  \n+  VERIFY( n1 != WEOF );\n+  VERIFY( n2 != WEOF );\n+  VERIFY( f != NULL );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "8a5797053fb8f0bdd6e7702c79feba8858e79558", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/wchar_t/9178.cc", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9178.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3461133d7227f31154ca44497a44f1599e4c0aa8/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9178.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fwchar_t%2F9178.cc?ref=3461133d7227f31154ca44497a44f1599e4c0aa8", "patch": "@@ -0,0 +1,205 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+template <typename InternT, typename StateT = mbstate_t>\n+class checksumcvt : public std::codecvt<InternT, char, StateT>\n+{\n+  typedef std::codecvt<InternT, char, StateT> Base;\n+  static const size_t width = sizeof(InternT) + 1;\n+\n+public:\n+  typedef InternT intern_type;\n+  typedef char extern_type;\n+\n+  explicit checksumcvt(size_t refs = 0)\n+  : Base(refs)\n+  { }\n+\n+protected:\n+  virtual typename std::codecvt<InternT, char, StateT>::result\n+  do_out(StateT&, const intern_type* from,\n+\t const intern_type* from_end, const intern_type*& from_next,\n+\t extern_type* to, extern_type* to_end,\n+\t extern_type*& to_next) const\n+  {\n+    size_t len = std::min(static_cast<size_t>(from_end - from),\n+\t\t\t  static_cast<size_t>(to_end - to) / width);\n+\n+    while (len--)\n+      {\n+\tconst char* p = reinterpret_cast<const char*>(from);\n+\tunsigned char checksum = 0;\n+\t\t\t\t\n+\tfor (size_t i = 0; i < sizeof(intern_type); ++i)\n+\t  {\n+\t    *to++ = p[i];\n+\t    checksum ^= static_cast<unsigned char>(p[i]);\n+\t  }\n+\n+\t*to++ = checksum;\n+\t++from;\n+      }\n+\n+    from_next = from;\n+    to_next = to;\n+    return from_next == from_end ? std::codecvt<InternT, char, StateT>::ok\n+           : std::codecvt<InternT, char, StateT>::partial;\n+  }\n+\n+  virtual typename std::codecvt<InternT, char, StateT>::result\n+  do_unshift(StateT&, extern_type* to,\n+\t     extern_type*, extern_type*& to_next) const\n+  {\n+    to_next = to;\n+    return std::codecvt<InternT, char, StateT>::ok;\n+  }\n+\n+  virtual typename std::codecvt<InternT, char, StateT>::result\n+  do_in(StateT&, const extern_type* from,\n+\tconst extern_type* from_end, const extern_type*& from_next,\n+\tintern_type* to, intern_type* to_end,\n+\tintern_type*& to_next) const\n+  {\n+    size_t len = std::min(static_cast<size_t>(to_end - to),\n+\t\t\t  static_cast<size_t>(from_end - from) / width);\n+\t\t\t\n+    while (len)\n+      {\n+\tconst char* f = from;\n+\tintern_type tmp;\n+\tchar* p = reinterpret_cast<char*>(&tmp);\n+\tunsigned char checksum = 0;\n+\n+\tfor (size_t i = 0; i < sizeof(intern_type); ++i)\n+\t  {\n+\t    p[i] = *f;\n+\t    checksum ^= static_cast<unsigned char>(*f++);\n+\t  }\n+\n+\tif (*f++ != checksum)\n+\t  break;\n+\n+\tfrom = f;\n+\t*to++ = tmp;\n+\tlen--;\n+      }\n+\n+    from_next = from;\n+    to_next = to;\n+    return len ? std::codecvt<InternT, char, StateT>::error :\n+      (from_next == from_end ? std::codecvt<InternT, char, StateT>::ok\n+       : std::codecvt<InternT, char, StateT>::partial);\n+  }\n+\n+  virtual int\n+  do_encoding() const throw()\n+  {\n+    return width;\n+  }\n+\n+  virtual int\n+  do_length(StateT&, const extern_type* from,\n+\t    const extern_type* end, size_t max) const\n+  {\n+    size_t len = std::min(max, static_cast<size_t>(end - from) / width);\n+\n+    int ret = 0;\n+    while (len--)\n+      {\n+\tunsigned char checksum = 0;\n+\n+\tfor (size_t i = 0; i < sizeof(intern_type); ++i)\n+\t  {\n+\t    checksum ^= static_cast<unsigned char>(*from++);\n+\t  }\n+\n+\tif (*from++ != checksum)\n+\t  break;\n+\n+\tret++;\n+      }\n+\n+    return ret;\n+  }\n+\n+  virtual int\n+  do_max_length() const throw()\n+  {\n+    return width;\n+  }\n+\n+  virtual bool\n+  do_always_noconv() const throw()\n+  {\n+    return false;\n+  }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  locale loc;\n+  loc = locale(loc, new checksumcvt<wchar_t>);\n+\n+  wfilebuf fbuf1;\n+  fbuf1.pubimbue(loc);\n+  fbuf1.open(\"tmp_9178\", ios_base::out | ios_base::trunc);\n+\t\n+  string tmpstr = \"abcdefghijklmnopqrstuvwxyz0123456789 \\t\\n\";\n+\n+  wifstream stream;\n+  wstring str1;\n+\n+  while (str1.length() < 20000) \n+    {\n+      transform(tmpstr.begin(), tmpstr.end(),\n+\t\tback_inserter(str1),\n+\t\tbind1st(std::mem_fun(&std::wios::widen), &stream));\n+    }\n+\t\n+  fbuf1.sputn(str1.data(), str1.size());\n+  fbuf1.close();\n+\n+  wfilebuf fbuf2;\n+  fbuf2.pubimbue(loc);\n+  fbuf2.open(\"tmp_9178\", std::ios_base::in);\n+\t\n+  wstring str2;\n+  copy(istreambuf_iterator<wchar_t>(&fbuf2),\n+       istreambuf_iterator<wchar_t>(),\n+       back_inserter(str2));\n+\n+  VERIFY( str1 == str2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}