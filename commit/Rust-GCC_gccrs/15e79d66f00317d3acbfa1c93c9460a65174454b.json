{"sha": "15e79d66f00317d3acbfa1c93c9460a65174454b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlNzlkNjZmMDAzMTdkM2FjYmZhMWM5M2M5NDYwYTY1MTc0NDU0Yg==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2019-07-23T08:13:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-23T08:13:09Z"}, "message": "[Ada] Issue error on SPARK ownership rule violation\n\nA modified rule in SPARK RM specifies that object declarations of\nanonymous access type should only occur immediately in subprogram, entry\nor block. Now checked.\n\nThere is no impact on compilation.\n\n2019-07-23  Yannick Moy  <moy@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.ads (Is_Local_Context): New function.\n\t* sem_spark.adb (Check_Declaration): Issue errors on violations\n\tof SPARK RM 3.10(4)\n\t(Process_Path): Do not issue error on borrow/observe during\n\telaboration, as these are caught by the new rule.\n\nFrom-SVN: r273721", "tree": {"sha": "a7403d2ab1345401410c7343cce278ec3a08093f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7403d2ab1345401410c7343cce278ec3a08093f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e79d66f00317d3acbfa1c93c9460a65174454b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e79d66f00317d3acbfa1c93c9460a65174454b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e79d66f00317d3acbfa1c93c9460a65174454b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e79d66f00317d3acbfa1c93c9460a65174454b/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39c20502ef7398766a8c9520c4210c2df9769d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c20502ef7398766a8c9520c4210c2df9769d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c20502ef7398766a8c9520c4210c2df9769d15"}], "stats": {"total": 75, "additions": 62, "deletions": 13}, "files": [{"sha": "748f1bfd681938e5db6a2de40ce859c379eda0b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e79d66f00317d3acbfa1c93c9460a65174454b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e79d66f00317d3acbfa1c93c9460a65174454b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=15e79d66f00317d3acbfa1c93c9460a65174454b", "patch": "@@ -1,3 +1,11 @@\n+2019-07-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_spark.ads (Is_Local_Context): New function.\n+\t* sem_spark.adb (Check_Declaration): Issue errors on violations\n+\tof SPARK RM 3.10(4)\n+\t(Process_Path): Do not issue error on borrow/observe during\n+\telaboration, as these are caught by the new rule.\n+\n 2019-07-23  Yannick Moy  <moy@adacore.com>\n \n \t* exp_ch7.adb (Create_Finalizer): Force finalizer not to be"}, {"sha": "a60a6cb4bacc51c5db3b48626fc531dc05cd52c2", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e79d66f00317d3acbfa1c93c9460a65174454b/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e79d66f00317d3acbfa1c93c9460a65174454b/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=15e79d66f00317d3acbfa1c93c9460a65174454b", "patch": "@@ -1419,9 +1419,37 @@ package body Sem_SPARK is\n             Check_Expression (Subtype_Indication (Decl), Read);\n \n          when N_Object_Declaration =>\n+            Expr := Expression (Decl);\n+\n             Check_Type (Target_Typ);\n \n-            Expr := Expression (Decl);\n+            --  A declaration of a stand-alone object of an anonymous access\n+            --  type shall have an explicit initial value and shall occur\n+            --  immediately within a subprogram body, an entry body, or a\n+            --  block statement (SPARK RM 3.10(4)).\n+\n+            if Is_Anonymous_Access_Type (Target_Typ) then\n+               declare\n+                  Scop : constant Entity_Id := Scope (Target);\n+               begin\n+                  if not Is_Local_Context (Scop) then\n+                     if Emit_Messages then\n+                        Error_Msg_N\n+                          (\"object of anonymous access type must be declared \"\n+                           & \"immediately within a subprogram, entry or block \"\n+                           & \"(SPARK RM 3.10(4))\", Decl);\n+                     end if;\n+                  end if;\n+               end;\n+\n+               if No (Expr) then\n+                  if Emit_Messages then\n+                     Error_Msg_N (\"object of anonymous access type must be \"\n+                                  & \"initialized (SPARK RM 3.10(4))\", Decl);\n+                  end if;\n+               end if;\n+            end if;\n+\n             if Present (Expr) then\n                Check_Assignment (Target => Target,\n                                  Expr   => Expr);\n@@ -2848,9 +2876,14 @@ package body Sem_SPARK is\n          --  independently for R permission. Outputs are checked\n          --  independently to have RW permission on exit.\n \n-         when Pragma_Contract_Cases\n+         --  Postconditions are checked for correct use of 'Old, but starting\n+         --  from the corresponding declaration, in order to avoid dealing with\n+         --  with contracts on generic subprograms, which are not handled in\n+         --  GNATprove.\n+\n+         when Pragma_Precondition\n             | Pragma_Postcondition\n-            | Pragma_Precondition\n+            | Pragma_Contract_Cases\n             | Pragma_Refined_Post\n          =>\n             null;\n@@ -3993,6 +4026,16 @@ package body Sem_SPARK is\n       end case;\n    end Is_Deep;\n \n+   ----------------------\n+   -- Is_Local_Context --\n+   ----------------------\n+\n+   function Is_Local_Context (Scop : Entity_Id) return Boolean is\n+   begin\n+      return Is_Subprogram_Or_Entry (Scop)\n+        or else Ekind (Scop) = E_Block;\n+   end Is_Local_Context;\n+\n    ------------------------\n    -- Is_Path_Expression --\n    ------------------------\n@@ -4863,13 +4906,10 @@ package body Sem_SPARK is\n \n          when Borrow =>\n \n-            --  Forbidden during elaboration\n+            --  Forbidden during elaboration, an error is already issued in\n+            --  Check_Declaration, just return.\n \n             if Inside_Elaboration then\n-               if not Inside_Procedure_Call and then Emit_Messages then\n-                  Error_Msg_N (\"illegal borrow during elaboration\", Expr);\n-               end if;\n-\n                return;\n             end if;\n \n@@ -4882,13 +4922,10 @@ package body Sem_SPARK is\n \n          when Observe =>\n \n-            --  Forbidden during elaboration\n+            --  Forbidden during elaboration, an error is already issued in\n+            --  Check_Declaration, just return.\n \n             if Inside_Elaboration then\n-               if not Inside_Procedure_Call and then Emit_Messages then\n-                  Error_Msg_N (\"illegal observe during elaboration\", Expr);\n-               end if;\n-\n                return;\n             end if;\n "}, {"sha": "195e833277ba53059aab9fe39a75c8bae6e2d385", "filename": "gcc/ada/sem_spark.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e79d66f00317d3acbfa1c93c9460a65174454b/gcc%2Fada%2Fsem_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e79d66f00317d3acbfa1c93c9460a65174454b/gcc%2Fada%2Fsem_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.ads?ref=15e79d66f00317d3acbfa1c93c9460a65174454b", "patch": "@@ -162,4 +162,8 @@ package Sem_SPARK is\n \n    function Is_Traversal_Function (E : Entity_Id) return Boolean;\n \n+   function Is_Local_Context (Scop : Entity_Id) return Boolean;\n+   --  Return if a given scope defines a local context where it is legal to\n+   --  declare a variable of anonymous access type.\n+\n end Sem_SPARK;"}]}