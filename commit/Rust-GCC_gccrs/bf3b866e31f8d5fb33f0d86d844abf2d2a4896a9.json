{"sha": "bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzYjg2NmUzMWY4ZDVmYjMzZjBkODZkODQ0YWJmMmQyYTQ4OTZhOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-12-12T03:22:25Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-12-12T03:22:25Z"}, "message": "ctype_inline.h: Remove spaces.\n\n\n\n2001-12-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/os/generic/bits/ctype_inline.h: Remove spaces.\n\t* config/os/gnu-linux/bits/ctype_noninline.h: Same.\n\t* include/bits/locale_facets.h (__num_base): Move double data\n\tmembers to first in class.\n\t* include/bits/locale_facets.tcc: Re-arrange, tweak.\n\t* src/locale.cc: Clean.\n\t*include/bits/stl_vector.h: Space typedefs.\n\nFrom-SVN: r47918", "tree": {"sha": "a9f5fa6ff4114b38f6bdd2a303fd1262ec4344af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f5fa6ff4114b38f6bdd2a303fd1262ec4344af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/comments", "author": null, "committer": null, "parents": [{"sha": "a13287e15d210926f30f37ce91c8b96e30792425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13287e15d210926f30f37ce91c8b96e30792425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13287e15d210926f30f37ce91c8b96e30792425"}], "stats": {"total": 302, "additions": 148, "deletions": 154}, "files": [{"sha": "4c604775bdb9d5f2771c2095806d996810e6c560", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -1,3 +1,13 @@\n+2001-12-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/os/generic/bits/ctype_inline.h: Remove spaces.\n+\t* config/os/gnu-linux/bits/ctype_noninline.h: Same.\n+\t* include/bits/locale_facets.h (__num_base): Move double data\n+\tmembers to first in class.\n+\t* include/bits/locale_facets.tcc: Re-arrange, tweak.\n+\t* src/locale.cc: Clean.\n+\t*include/bits/stl_vector.h: Space typedefs.\n+\n 2001-12-11  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* testsuite/ext/allocators.cc:  New file."}, {"sha": "c10cb565b76c43247381fa9badf48dc169096ba0", "filename": "libstdc++-v3/config/os/generic/bits/ctype_inline.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fctype_inline.h?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -123,8 +123,3 @@\n       ++__low;\n     return __low;\n   }\n-\n-\n-\n-\n-"}, {"sha": "0d649f681fb3fe4624d4959a7a61df0eba695e0b", "filename": "libstdc++-v3/config/os/gnu-linux/bits/ctype_noninline.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fctype_noninline.h?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -74,15 +74,3 @@\n       }\n     return __high;\n   }\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "5d88ea9fc057632c1d8de46b7ef230d836dbc72b", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -419,6 +419,12 @@ namespace std\n   class __num_base\n   {\n   public:\n+    // Used to establish gating factor for base 16 input.\n+    static const double _S_scale_hex;\n+    \n+    // Used to establish gating factor for base 8 input.\n+    static const double _S_scale_oct;\n+\n     // String literal of acceptable (narrow) input, for num_get.\n     // \"0123456789eEabcdfABCDF\"\n     static const char _S_atoms[];\n@@ -439,12 +445,6 @@ namespace std\n     // Construct and return valid scanf format for integer types.\n     static void\n     _S_format_int(const ios_base& __io, char* __fptr, char __mod, char __modl);\n-\n-    // Used to establish gating factor for base 16 input.\n-    static const double _S_scale_hex;\n-    \n-    // Used to establish gating factor for base 8 input.\n-    static const double _S_scale_oct;\n   };\n \n   template<typename _CharT>"}, {"sha": "d4313721a3c7c9e162e3b1a6adcde0fcd80e0cdc", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -299,12 +299,12 @@ namespace std\n       // Figure out the maximum number of digits that can be extracted\n       // for the given type, using the determined base.\n       int __max_digits;\n-      if (__base == 10)\n-\t__max_digits = __max;\n-      else if (__base == 16)\n+      if (__base == 16)\n \t__max_digits = static_cast<int>(ceil(__max * _S_scale_hex));\n-      else /* if (__base == 8) */\n+      else if (__base == 8)\n \t__max_digits = static_cast<int>(ceil(__max * _S_scale_oct));\n+      else\n+\t__max_digits = __max;\n \n       // Add in what's already been extracted.\n       __max_digits += __pos;"}, {"sha": "d327628c87655c0752c6790aeca2522d2fa5506d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -154,15 +154,15 @@ class vector : protected _Vector_base<_Tp, _Alloc>\n   typedef _Vector_base<_Tp, _Alloc> _Base;\n   typedef vector<_Tp, _Alloc> vector_type;\n public:\n-  typedef _Tp value_type;\n-  typedef value_type* pointer;\n-  typedef const value_type* const_pointer;\n-  typedef __normal_iterator<pointer, vector_type> iterator;\n+  typedef _Tp \t\t\t\t\t\tvalue_type;\n+  typedef value_type* \t\t\t\t\tpointer;\n+  typedef const value_type* \t\t\t\tconst_pointer;\n+  typedef __normal_iterator<pointer, vector_type> \titerator;\n   typedef __normal_iterator<const_pointer, vector_type> const_iterator;\n-  typedef value_type& reference;\n-  typedef const value_type& const_reference;\n-  typedef size_t size_type;\n-  typedef ptrdiff_t difference_type;\n+  typedef value_type& \t\t\t\t\treference;\n+  typedef const value_type& \t\t\t\tconst_reference;\n+  typedef size_t \t\t\t\t\tsize_type;\n+  typedef ptrdiff_t \t\t\t\t\tdifference_type;\n \n   typedef typename _Base::allocator_type allocator_type;\n   allocator_type get_allocator() const { return _Base::get_allocator(); }"}, {"sha": "14938d9d730ba7d077d23c565f2a839a94293651", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 120, "deletions": 119, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=bf3b866e31f8d5fb33f0d86d844abf2d2a4896a9", "patch": "@@ -74,12 +74,6 @@ namespace std\n   // Definitions for static const data members of locale::id\n   size_t locale::id::_S_highwater;  // init'd to 0 by linker\n \n-  const char __num_base::_S_atoms[] = \"0123456789eEabcdfABCDF\";\n-\n-  const double __num_base::_S_scale_hex = log(10.0)/log(16.0);\n-\n-  const double __num_base::_S_scale_oct = log(10.0)/log(8.0);\n-\n   // Definitions for static const data members of locale::_Impl\n   const locale::id* const\n   locale::_Impl::_S_id_ctype[] =\n@@ -440,119 +434,6 @@ namespace std\n   : ctype<char>(new mask[table_size], true, __refs)\n   { }\n \n-  // Definitions for static const data members of time_base\n-  template<> \n-    const char*\n-    __timepunct<char>::_S_timezones[14] =\n-    { \n-      \"GMT\", \"HST\", \"AKST\", \"PST\", \"MST\", \"CST\", \"EST\", \"AST\", \"NST\", \"CET\", \n-      \"IST\", \"EET\", \"CST\", \"JST\"  \n-    };\n- \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<> \n-    const wchar_t*\n-    __timepunct<wchar_t>::_S_timezones[14] =\n-    { \n-      L\"GMT\", L\"HST\", L\"AKST\", L\"PST\", L\"MST\", L\"CST\", L\"EST\", L\"AST\", \n-      L\"NST\", L\"CET\", L\"IST\", L\"EET\", L\"CST\", L\"JST\"  \n-    };\n-#endif\n-\n-  // Definitions for static const data members of money_base\n-  const money_base::pattern \n-  money_base::_S_default_pattern =  {{symbol, sign, none, value}};\n-\n-  template<>\n-    const ctype<char>&\n-    use_facet<ctype<char> >(const locale& __loc)\n-    {\n-      size_t __i = ctype<char>::id._M_index;\n-      const locale::_Impl* __tmp = __loc._M_impl;\n-      return static_cast<const ctype<char>&>(* (*(__tmp->_M_facets))[__i]);\n-    }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    const ctype<wchar_t>&\n-    use_facet<ctype<wchar_t> >(const locale& __loc)\n-    {\n-      size_t __i = ctype<wchar_t>::id._M_index;\n-      const locale::_Impl* __tmp = __loc._M_impl;\n-      return static_cast<const ctype<wchar_t>&>(* (*(__tmp->_M_facets))[__i]);\n-    }\n-#endif\n-\n-  bool\n-  __num_base::_S_format_float(const ios_base& __io, char* __fptr, char __mod,\n-\t\t\t      streamsize __prec)\n-  {\n-    bool __incl_prec = false;\n-    ios_base::fmtflags __flags = __io.flags();\n-    *__fptr++ = '%';\n-    // [22.2.2.2.2] Table 60\n-    if (__flags & ios_base::showpos)\n-      *__fptr++ = '+';\n-    if (__flags & ios_base::showpoint)\n-      *__fptr++ = '#';\n-    // As per [22.2.2.2.2.11]\n-    if (__flags & ios_base::fixed || __prec > 0)\n-      {\n-\t*__fptr++ = '.';\n-\t*__fptr++ = '*';\n-\t__incl_prec = true;\n-      }\n-    if (__mod)\n-      *__fptr++ = __mod;\n-    ios_base::fmtflags __fltfield = __flags & ios_base::floatfield;\n-    // [22.2.2.2.2] Table 58\n-    if (__fltfield == ios_base::fixed)\n-      *__fptr++ = 'f';\n-    else if (__fltfield == ios_base::scientific)\n-      *__fptr++ = (__flags & ios_base::uppercase) ? 'E' : 'e';\n-    else\n-      *__fptr++ = (__flags & ios_base::uppercase) ? 'G' : 'g';\n-    *__fptr = '\\0';\n-    return __incl_prec;\n-  }\n-  \n-  void\n-  __num_base::_S_format_int(const ios_base& __io, char* __fptr, char __mod, \n-\t\t\t    char __modl)\n-  {\n-    ios_base::fmtflags __flags = __io.flags();\n-    *__fptr++ = '%';\n-    // [22.2.2.2.2] Table 60\n-    if (__flags & ios_base::showpos)\n-      *__fptr++ = '+';\n-    if (__flags & ios_base::showbase)\n-      *__fptr++ = '#';\n-    *__fptr++ = 'l';\n-\n-    // For long long types.\n-    if (__modl)\n-      *__fptr++ = __modl;\n-\n-    ios_base::fmtflags __bsefield = __flags & ios_base::basefield;\n-    if (__bsefield == ios_base::hex)\n-      *__fptr++ = (__flags & ios_base::uppercase) ? 'X' : 'x';\n-    else if (__bsefield == ios_base::oct)\n-      *__fptr++ = 'o';\n-    else\n-      *__fptr++ = __mod;\n-    *__fptr = '\\0';\n-  }\n-  \n-  template<>\n-    moneypunct_byname<char, false>::moneypunct_byname(const char* /*__s*/, \n-\t\t\t\t\t\t      size_t __refs)\n-    : moneypunct<char, false>(__refs) { }\n-  \n-  template<>\n-    moneypunct_byname<char, true>::moneypunct_byname(const char* /*__s*/, \n-\t\t\t\t\t\t     size_t __refs)\n-    : moneypunct<char, true>(__refs) { }\n-  \n #ifdef _GLIBCPP_USE_WCHAR_T  \n   ctype<wchar_t>::__wmask_type\n   ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const\n@@ -710,4 +591,124 @@ namespace std\n   ctype_byname(const char* /*__s*/, size_t __refs)\n   : ctype<wchar_t>(__refs) { }\n #endif //  _GLIBCPP_USE_WCHAR_T\n+\n+  // Definitions for static const data members of time_base\n+  template<> \n+    const char*\n+    __timepunct<char>::_S_timezones[14] =\n+    { \n+      \"GMT\", \"HST\", \"AKST\", \"PST\", \"MST\", \"CST\", \"EST\", \"AST\", \"NST\", \"CET\", \n+      \"IST\", \"EET\", \"CST\", \"JST\"  \n+    };\n+ \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    const wchar_t*\n+    __timepunct<wchar_t>::_S_timezones[14] =\n+    { \n+      L\"GMT\", L\"HST\", L\"AKST\", L\"PST\", L\"MST\", L\"CST\", L\"EST\", L\"AST\", \n+      L\"NST\", L\"CET\", L\"IST\", L\"EET\", L\"CST\", L\"JST\"  \n+    };\n+#endif\n+\n+  // Definitions for static const data members of money_base\n+  const money_base::pattern \n+  money_base::_S_default_pattern =  {{symbol, sign, none, value}};\n+\n+  template<>\n+    const ctype<char>&\n+    use_facet<ctype<char> >(const locale& __loc)\n+    {\n+      size_t __i = ctype<char>::id._M_index;\n+      const locale::_Impl* __tmp = __loc._M_impl;\n+      return static_cast<const ctype<char>&>(* (*(__tmp->_M_facets))[__i]);\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<>\n+    const ctype<wchar_t>&\n+    use_facet<ctype<wchar_t> >(const locale& __loc)\n+    {\n+      size_t __i = ctype<wchar_t>::id._M_index;\n+      const locale::_Impl* __tmp = __loc._M_impl;\n+      return static_cast<const ctype<wchar_t>&>(* (*(__tmp->_M_facets))[__i]);\n+    }\n+#endif\n+\n+\n+  const char __num_base::_S_atoms[] = \"0123456789eEabcdfABCDF\";\n+\n+  const double __num_base::_S_scale_hex = log(10.0)/log(16.0);\n+\n+  const double __num_base::_S_scale_oct = log(10.0)/log(8.0);\n+\n+  bool\n+  __num_base::_S_format_float(const ios_base& __io, char* __fptr, char __mod,\n+\t\t\t      streamsize __prec)\n+  {\n+    bool __incl_prec = false;\n+    ios_base::fmtflags __flags = __io.flags();\n+    *__fptr++ = '%';\n+    // [22.2.2.2.2] Table 60\n+    if (__flags & ios_base::showpos)\n+      *__fptr++ = '+';\n+    if (__flags & ios_base::showpoint)\n+      *__fptr++ = '#';\n+    // As per [22.2.2.2.2.11]\n+    if (__flags & ios_base::fixed || __prec > 0)\n+      {\n+\t*__fptr++ = '.';\n+\t*__fptr++ = '*';\n+\t__incl_prec = true;\n+      }\n+    if (__mod)\n+      *__fptr++ = __mod;\n+    ios_base::fmtflags __fltfield = __flags & ios_base::floatfield;\n+    // [22.2.2.2.2] Table 58\n+    if (__fltfield == ios_base::fixed)\n+      *__fptr++ = 'f';\n+    else if (__fltfield == ios_base::scientific)\n+      *__fptr++ = (__flags & ios_base::uppercase) ? 'E' : 'e';\n+    else\n+      *__fptr++ = (__flags & ios_base::uppercase) ? 'G' : 'g';\n+    *__fptr = '\\0';\n+    return __incl_prec;\n+  }\n+  \n+  void\n+  __num_base::_S_format_int(const ios_base& __io, char* __fptr, char __mod, \n+\t\t\t    char __modl)\n+  {\n+    ios_base::fmtflags __flags = __io.flags();\n+    *__fptr++ = '%';\n+    // [22.2.2.2.2] Table 60\n+    if (__flags & ios_base::showpos)\n+      *__fptr++ = '+';\n+    if (__flags & ios_base::showbase)\n+      *__fptr++ = '#';\n+    *__fptr++ = 'l';\n+\n+    // For long long types.\n+    if (__modl)\n+      *__fptr++ = __modl;\n+\n+    ios_base::fmtflags __bsefield = __flags & ios_base::basefield;\n+    if (__bsefield == ios_base::hex)\n+      *__fptr++ = (__flags & ios_base::uppercase) ? 'X' : 'x';\n+    else if (__bsefield == ios_base::oct)\n+      *__fptr++ = 'o';\n+    else\n+      *__fptr++ = __mod;\n+    *__fptr = '\\0';\n+  }\n+  \n+  template<>\n+    moneypunct_byname<char, false>::moneypunct_byname(const char* /*__s*/, \n+\t\t\t\t\t\t      size_t __refs)\n+    : moneypunct<char, false>(__refs) { }\n+  \n+  template<>\n+    moneypunct_byname<char, true>::moneypunct_byname(const char* /*__s*/, \n+\t\t\t\t\t\t     size_t __refs)\n+    : moneypunct<char, true>(__refs) { }\n } // namespace std"}]}