{"sha": "ae113080a9f98e807db239f3ad2157c64324542f", "node_id": "C_kwDOANBUbNoAKGFlMTEzMDgwYTlmOThlODA3ZGIyMzlmM2FkMjE1N2M2NDMyNDU0MmY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-20T08:54:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-20T08:54:37Z"}, "message": "tree-optimization/108825 - checking ICE with unroll-and-jam\n\nThe issue is that unroll-and-jam applies RPO VN on the transformed body but\nthat leaves the IL in \"indetermined\" state (it returns a TODO to make it\nvalid again).  But unroll-and-jam then continues to transform another loop and\nin using the tree_unroll_loop helper runs into tree_transform_and_unroll_loop\nperforming IL checking on the whole function.\n\nWhile the real fix is to elide all such checking I'm only making the\nloop-local LC SSA verifier not perform function-wide SSA verification\nat this point.\n\n\tPR tree-optimization/108825\n\t* tree-ssa-loop-manip.cc (verify_loop_closed_ssa): For\n\tloop-local verfication only verify there's no pending SSA\n\tupdate.\n\n\t* gcc.dg/torture/pr108825.c: New testcase.", "tree": {"sha": "a406e30e1f07d830c46566e146fabd2f1c5f39cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a406e30e1f07d830c46566e146fabd2f1c5f39cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae113080a9f98e807db239f3ad2157c64324542f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae113080a9f98e807db239f3ad2157c64324542f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae113080a9f98e807db239f3ad2157c64324542f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae113080a9f98e807db239f3ad2157c64324542f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca31bc3366c533a55bfd7f1b9f4959c0c9869a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca31bc3366c533a55bfd7f1b9f4959c0c9869a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca31bc3366c533a55bfd7f1b9f4959c0c9869a7b"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "ada2da8605469710ddc155ee276551a6fc046bb9", "filename": "gcc/testsuite/gcc.dg/torture/pr108825.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae113080a9f98e807db239f3ad2157c64324542f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108825.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae113080a9f98e807db239f3ad2157c64324542f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108825.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr108825.c?ref=ae113080a9f98e807db239f3ad2157c64324542f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+\n+int safe_mul_func_uint8_t_u_u_ui2, g_231, g_277_1, g_568, func_35___trans_tmp_10;\n+int g_81[7];\n+extern int g_96[];\n+char func_35___trans_tmp_11;\n+static inline int safe_add_func_int32_t_s_s(int si1, int si2)\n+{ return si1 > 647 - si2 ?: si1; }\n+void func_35() {\n+  for (; g_277_1; g_277_1 += 1) {\n+    g_231 = 0;\n+    for (; g_231 <= 6; g_231 += 1) {\n+      func_35___trans_tmp_10 =\n+          safe_add_func_int32_t_s_s(g_81[g_231], g_568 || g_96[1]);\n+      func_35___trans_tmp_11 =\n+          func_35___trans_tmp_10 * safe_mul_func_uint8_t_u_u_ui2;\n+      g_81[g_231] = func_35___trans_tmp_11;\n+    }\n+  }\n+}"}, {"sha": "09acc1c94cce4100f91338934b2acbc9e23e2476", "filename": "gcc/tree-ssa-loop-manip.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae113080a9f98e807db239f3ad2157c64324542f/gcc%2Ftree-ssa-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae113080a9f98e807db239f3ad2157c64324542f/gcc%2Ftree-ssa-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.cc?ref=ae113080a9f98e807db239f3ad2157c64324542f", "patch": "@@ -681,15 +681,15 @@ verify_loop_closed_ssa (bool verify_ssa_p, class loop *loop)\n   if (number_of_loops (cfun) <= 1)\n     return;\n \n-  if (verify_ssa_p)\n-    verify_ssa (false, true);\n-\n   timevar_push (TV_VERIFY_LOOP_CLOSED);\n \n   if (loop == NULL)\n     {\n       basic_block bb;\n \n+      if (verify_ssa_p)\n+\tverify_ssa (false, true);\n+\n       FOR_EACH_BB_FN (bb, cfun)\n \tif (bb->loop_father && bb->loop_father->num > 0)\n \t  check_loop_closed_ssa_bb (bb);\n@@ -698,6 +698,11 @@ verify_loop_closed_ssa (bool verify_ssa_p, class loop *loop)\n     {\n       basic_block *bbs = get_loop_body (loop);\n \n+      /* We do not have loop-local SSA verification so just\n+\t check there's no update queued.  */\n+      if (verify_ssa_p)\n+\tgcc_assert (!need_ssa_update_p (cfun));\n+\n       for (unsigned i = 0; i < loop->num_nodes; ++i)\n \tcheck_loop_closed_ssa_bb (bbs[i]);\n "}]}