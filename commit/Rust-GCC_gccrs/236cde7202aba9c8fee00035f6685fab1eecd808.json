{"sha": "236cde7202aba9c8fee00035f6685fab1eecd808", "node_id": "C_kwDOANBUbNoAKDIzNmNkZTcyMDJhYmE5YzhmZWUwMDAzNWY2Njg1ZmFiMWVlY2Q4MDg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-04-02T00:16:59Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-04-02T00:16:59Z"}, "message": "Daily bump.", "tree": {"sha": "8e1a78d61b73afe313893de9f573f8262eb78d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1a78d61b73afe313893de9f573f8262eb78d77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/236cde7202aba9c8fee00035f6685fab1eecd808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236cde7202aba9c8fee00035f6685fab1eecd808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236cde7202aba9c8fee00035f6685fab1eecd808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236cde7202aba9c8fee00035f6685fab1eecd808/comments", "author": null, "committer": null, "parents": [{"sha": "a5de246535db1b4fdc61287f27de0fdd074fc4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5de246535db1b4fdc61287f27de0fdd074fc4b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5de246535db1b4fdc61287f27de0fdd074fc4b3"}], "stats": {"total": 108, "additions": 107, "deletions": 1}, "files": [{"sha": "f0fd22fad37f1581e3c0be704d3389186ceb39c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=236cde7202aba9c8fee00035f6685fab1eecd808", "patch": "@@ -1,3 +1,41 @@\n+2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* range-op-float.cc (foperator_equal::fold_range): If at least\n+\tone of the op ranges is not singleton and neither is NaN and all\n+\t4 bounds are zero, return [1, 1].\n+\t(foperator_not_equal::fold_range): In the same case return [0, 0].\n+\n+2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* range-op-float.cc (foperator_equal::fold_range): Perform the\n+\tnon-singleton handling regardless of maybe_isnan (op1, op2).\n+\t(foperator_not_equal::fold_range): Likewise.\n+\t(foperator_lt::fold_range, foperator_le::fold_range,\n+\tfoperator_gt::fold_range, foperator_ge::fold_range): Perform the\n+\treal_* comparison check which results in range_false (type)\n+\teven if maybe_isnan (op1, op2).  Simplify.\n+\t(foperator_ltgt): New class.\n+\t(fop_ltgt): New variable.\n+\t(floating_op_table::floating_op_table): Handle LTGT_EXPR using\n+\tfop_ltgt.\n+\n+2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/109254\n+\t* builtins.cc (apply_args_size): If targetm.calls.get_raw_arg_mode\n+\treturns VOIDmode, handle it like if the register isn't used for\n+\tpassing arguments at all.\n+\t(apply_result_size): If targetm.calls.get_raw_result_mode returns\n+\tVOIDmode, handle it like if the register isn't used for returning\n+\tresults at all.\n+\t* target.def (get_raw_result_mode, get_raw_arg_mode): Document what it\n+\tmeans to return VOIDmode.\n+\t* doc/tm.texi: Regenerated.\n+\t* config/aarch64/aarch64.cc (aarch64_function_value_regno_p): Return\n+\tTARGET_SVE for P0_REGNUM.\n+\t(aarch64_function_arg_regno_p): Also return true for p0-p3.\n+\t(aarch64_get_reg_raw_mode): Return VOIDmode for PR_REGNUM_P regs.\n+\n 2023-03-31  Vladimir N. Makarov  <vmakarov@redhat.com>\n \n \t* lra-constraints.cc: (combine_reload_insn): New function."}, {"sha": "afd3f9fc6c889765b6498164348a11d4d58c5eae", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=236cde7202aba9c8fee00035f6685fab1eecd808", "patch": "@@ -1 +1 @@\n-20230401\n+20230402"}, {"sha": "de9c3df51d944d9f2aa861c5a4d1ee49857dae70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=236cde7202aba9c8fee00035f6685fab1eecd808", "patch": "@@ -1,3 +1,34 @@\n+2023-04-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/109160\n+\t* cp-tree.h (do_auto_deduction): Add defaulted tmpl parameter.\n+\t* pt.cc (convert_template_argument): Pass 'in_decl' as 'tmpl' to\n+\tdo_auto_deduction.\n+\t(tsubst_decl) <case VAR_/TYPE_DECL>: Pass 'tmpl' instead of 't' as\n+\t'in_decl' to coerce_template_parms.\n+\t(unify) <case TEMPLATE_PARM_INDEX>: Pass TPARMS_PRIMARY_TEMPLATE\n+\tas 'tmpl' to do_auto_deduction.\n+\t(do_auto_deduction): Document default arguments.  Rename local\n+\tvariable 'tmpl' to 'ctmpl'.  Use 'tmpl' to obtain a full set of\n+\ttemplate arguments for satisfaction in the adc_unify case.\n+\n+2023-04-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/53164\n+\tPR c++/105848\n+\t* pt.cc (invalid_tparm_referent_p): Accept ADDR_EXPR of\n+\tFUNCTION_DECL.\n+\t(instantiate_class_template): Call mark_template_arguments_used.\n+\t(tsubst_copy_and_build) <case CALL_EXPR>: Revert r13-995 change.\n+\t(mark_template_arguments_used): Define.\n+\t(instantiate_body): Call mark_template_arguments_used.\n+\n+2023-04-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/101118\n+\t* coroutines.cc (flatten_await_stmt): Use the current count of\n+\tpromoted temporaries to build a unique name for the frame entries.\n+\n 2023-03-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105452"}, {"sha": "10b81c98e2add05fa1b56ea7e864235de9da6010", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=236cde7202aba9c8fee00035f6685fab1eecd808", "patch": "@@ -1,3 +1,8 @@\n+2023-04-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* dump-parse-tree.cc (get_c_type_name): Fix \"long_long\"\n+\ttype name to be \"long long\".\n+\n 2023-03-30  Andrew Pinski  <apinski@marvell.com>\n \n \t* dump-parse-tree.cc (get_c_type_name): Fix \"long_long\""}, {"sha": "6b79db9c9604aefdd413bf89e1947769cb9d8cce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236cde7202aba9c8fee00035f6685fab1eecd808/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=236cde7202aba9c8fee00035f6685fab1eecd808", "patch": "@@ -1,3 +1,35 @@\n+2023-04-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/109160\n+\t* g++.dg/cpp2a/concepts-placeholder12.C: New test.\n+\n+2023-04-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/53164\n+\tPR c++/105848\n+\t* g++.dg/template/fn-ptr3a.C: New test.\n+\t* g++.dg/template/fn-ptr3b.C: New test.\n+\t* g++.dg/template/fn-ptr4.C: New test.\n+\n+2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/torture/inf-compare-1.c: Add dg-additional-options\n+\t-fno-tree-dominator-opts -fno-tree-vrp.\n+\t* gcc.dg/torture/inf-compare-1-float.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-2.c: Likewise.\n+\t* gcc.dg/torture/inf-compare-2-float.c: Likewise.\n+\n+2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/109362\n+\t* gcc.target/i386/pr109362.c: New test.\n+\n+2023-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/109254\n+\t* gcc.target/aarch64/sve/pr109254.c: New test.\n+\n 2023-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR analyzer/107396"}]}