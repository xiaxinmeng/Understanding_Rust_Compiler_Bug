{"sha": "c52501398534057dfdd1bf212d43f351f62b69ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyNTAxMzk4NTM0MDU3ZGZkZDFiZjIxMmQ0M2YzNTFmNjJiNjlhYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-08-31T11:20:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-08-31T11:20:38Z"}, "message": "re PR middle-end/23477 (default-initializing array new expression uses makes stack usage go way up)\n\n2005-08-31  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/23477\n\t* expr.c (all_zeros_p): New function.\n\t(expand_expr_real_1): Handle the case of an all-zero\n\tnon-addressable constructor separately.\n\nFrom-SVN: r103670", "tree": {"sha": "b73794efd7f16530fac36ea823cb95636bbe0b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73794efd7f16530fac36ea823cb95636bbe0b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c52501398534057dfdd1bf212d43f351f62b69ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c52501398534057dfdd1bf212d43f351f62b69ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c52501398534057dfdd1bf212d43f351f62b69ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c52501398534057dfdd1bf212d43f351f62b69ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef07d61bcbbfd3947beb3f66b2c2468a5a701722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef07d61bcbbfd3947beb3f66b2c2468a5a701722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef07d61bcbbfd3947beb3f66b2c2468a5a701722"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "330db3e4e2504477817e3d63d9aa19388e180624", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52501398534057dfdd1bf212d43f351f62b69ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52501398534057dfdd1bf212d43f351f62b69ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c52501398534057dfdd1bf212d43f351f62b69ab", "patch": "@@ -1,3 +1,10 @@\n+2005-08-31  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/23477\n+\t* expr.c (all_zeros_p): New function.\n+\t(expand_expr_real_1): Handle the case of an all-zero\n+\tnon-addressable constructor separately.\n+\n 2005-08-31  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* builtins.c: (expand_builtin_strcpy, expand_builtin_strcat): Change"}, {"sha": "e75d3351395d5a4f906009ba9e3dc567ac99273d", "filename": "gcc/expr.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c52501398534057dfdd1bf212d43f351f62b69ab/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c52501398534057dfdd1bf212d43f351f62b69ab/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c52501398534057dfdd1bf212d43f351f62b69ab", "patch": "@@ -4645,6 +4645,24 @@ mostly_zeros_p (tree exp)\n \n   return initializer_zerop (exp);\n }\n+\n+/* Return 1 if EXP contains all zeros.  */\n+\n+static int\n+all_zeros_p (tree exp)\n+{\n+  if (TREE_CODE (exp) == CONSTRUCTOR)\n+\n+    {\n+      HOST_WIDE_INT nz_elts, nc_elts, count;\n+      bool must_clear;\n+\n+      categorize_ctor_elements (exp, &nz_elts, &nc_elts, &count, &must_clear);\n+      return nz_elts == 0;\n+    }\n+\n+  return initializer_zerop (exp);\n+}\n \f\n /* Helper function for store_constructor.\n    TARGET, BITSIZE, BITPOS, MODE, EXP are as for store_field.\n@@ -6843,6 +6861,19 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  return const0_rtx;\n \t}\n \n+      /* Try to avoid creating a temporary at all.  This is possible\n+\t if all of the initializer is zero.\n+\t FIXME: try to handle all [0..255] initializers we can handle\n+\t with memset.  */\n+      else if (TREE_STATIC (exp)\n+\t       && !TREE_ADDRESSABLE (exp)\n+\t       && target != 0 && mode == BLKmode\n+\t       && all_zeros_p (exp))\n+\t{\n+\t  clear_storage (target, expr_size (exp), BLOCK_OP_NORMAL);\n+\t  return target;\n+\t}\n+\n       /* All elts simple constants => refer to a constant in memory.  But\n \t if this is a non-BLKmode mode, let it store a field at a time\n \t since that should make a CONST_INT or CONST_DOUBLE when we"}]}