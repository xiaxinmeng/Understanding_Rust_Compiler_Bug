{"sha": "78810bd35336529a133661a5e4f801ccda57fd74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4MTBiZDM1MzM2NTI5YTEzMzY2MWE1ZTRmODAxY2NkYTU3ZmQ3NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-15T15:43:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-15T15:43:48Z"}, "message": "re PR tree-optimization/66856 (ICE in compute_live_loop_exits, at tree-ssa-loop-manip.c:234)\n\n2016-01-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66856\n\t* tree-vect-loop.c (vect_transform_loop): Free SLP instances here.\n\t* tree-vect-slp.c (vect_free_slp_tree): Decrement stmt reference count.\n\t(vect_create_new_slp_node): Increment stmt reference count.\n\t(vect_get_and_check_slp_defs): Make sure stmts are nor already in\n\tan SLP tree before swapping operands.\n\t(vect_build_slp_tree): Likewise.\n\t(destroy_bb_vec_info): Free stmt info after SLP instances.\n\t* tree-vect-stmts.c (new_stmt_vec_info): Initialize reference count.\n\t* tree-vectorizer.h (struct _stmt_vec_info): Add num_slp_uses field.\n\t(STMT_VINFO_NUM_SLP_USES): New macro.\n\n\t* gcc.dg/torture/pr66856-1.c: New testcase.\n\t* gcc.dg/torture/pr66856-2.c: Likewise.\n\nFrom-SVN: r232435", "tree": {"sha": "ac7638373fb51bc7a33745a33d9099a22b1b3b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac7638373fb51bc7a33745a33d9099a22b1b3b04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78810bd35336529a133661a5e4f801ccda57fd74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78810bd35336529a133661a5e4f801ccda57fd74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78810bd35336529a133661a5e4f801ccda57fd74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78810bd35336529a133661a5e4f801ccda57fd74/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bd847fed39669cfd021b9c3068ca84fd98593e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd847fed39669cfd021b9c3068ca84fd98593e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd847fed39669cfd021b9c3068ca84fd98593e4"}], "stats": {"total": 156, "additions": 142, "deletions": 14}, "files": [{"sha": "067fb0757952fca73e4d0e6fd4c8933a4d7e7a7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -1,3 +1,17 @@\n+2016-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66856\n+\t* tree-vect-loop.c (vect_transform_loop): Free SLP instances here.\n+\t* tree-vect-slp.c (vect_free_slp_tree): Decrement stmt reference count.\n+\t(vect_create_new_slp_node): Increment stmt reference count.\n+\t(vect_get_and_check_slp_defs): Make sure stmts are nor already in\n+\tan SLP tree before swapping operands.\n+\t(vect_build_slp_tree): Likewise.\n+\t(destroy_bb_vec_info): Free stmt info after SLP instances.\n+\t* tree-vect-stmts.c (new_stmt_vec_info): Initialize reference count.\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Add num_slp_uses field.\n+\t(STMT_VINFO_NUM_SLP_USES): New macro.\n+\n 2016-01-15  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/69137"}, {"sha": "bc6105d922eea54c5afe56e9dddde265a4d23dc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -1,3 +1,9 @@\n+2016-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66856\n+\t* gcc.dg/torture/pr66856-1.c: New testcase.\n+\t* gcc.dg/torture/pr66856-2.c: Likewise.\n+\n 2016-01-15  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/69137"}, {"sha": "9da89fb48861fa83b0a86920562c8805ec1daa3b", "filename": "gcc/testsuite/gcc.dg/torture/pr66856-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66856-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66856-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66856-1.c?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-mavx2\" { target x86_64-*-* i?86-*-* } } */\n+\n+short c;\n+int d;\n+int fn1(int p1, int p2) {\n+    int a, b;\n+    a = p1 >> 3 & p2;\n+    b = p1 & 072;\n+    a |= a >> 5;\n+    a |= b >> 5;\n+    return a;\n+}\n+void fn2() {\n+    short *e = &c;\n+    int *f;\n+    int g;\n+    while (d -= 4) {\n+\tfn1(1, 1);\n+\tfn1(1, 1) * fn1(1, 1) * fn1(1, 1);\n+\t*e++ = fn1(*f++, g);\n+\t*e++ = fn1(*f++, g);\n+    }\n+}"}, {"sha": "50890853db9ff2c8435129420a0679dcb9447706", "filename": "gcc/testsuite/gcc.dg/torture/pr66856-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66856-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66856-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr66856-2.c?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+\n+typedef int uint32_t;\n+int c, e, f, g, h;\n+short *d;\n+uint32_t fn1(uint32_t p1, uint32_t p2)\n+{\n+  uint32_t a, b;\n+  a = p1 >> 3 & p2;\n+  b = p1 & 072;\n+  a |= a >> 5;\n+  a |= b >> 5;\n+  return a;\n+}\n+\n+void fn2()\n+{\n+  uint32_t *i;\n+  uint32_t j;\n+  while (c -= 4) {\n+      fn1(e, j);\n+      fn1(f, j) * fn1(g, j) * fn1(h, j);\n+      *d++ = fn1(*i++, j);\n+      *d++ = fn1(*i++, j);\n+  }\n+}"}, {"sha": "60346725a441bf6bad7594b7f09abcbb23e5e06e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -6930,4 +6930,11 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t\t\t \"OUTER LOOP VECTORIZED\\n\");\n       dump_printf (MSG_NOTE, \"\\n\");\n     }\n+\n+  /* Free SLP instances here because otherwise stmt reference counting\n+     won't work.  */\n+  slp_instance instance;\n+  FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (loop_vinfo), i, instance)\n+    vect_free_slp_instance (instance);\n+  LOOP_VINFO_SLP_INSTANCES (loop_vinfo).release ();\n }"}, {"sha": "5767e19e8847d85481bdad0bb6813b9a226d9ad5", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 60, "deletions": 14, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -54,6 +54,15 @@ vect_free_slp_tree (slp_tree node)\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n     vect_free_slp_tree (child);\n \n+  gimple *stmt;\n+  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n+    /* After transform some stmts are removed and thus their vinfo is gone.  */\n+    if (vinfo_for_stmt (stmt))\n+      {\n+\tgcc_assert (STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt)) > 0);\n+\tSTMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt))--;\n+      }\n+\n   SLP_TREE_CHILDREN (node).release ();\n   SLP_TREE_SCALAR_STMTS (node).release ();\n   SLP_TREE_VEC_STMTS (node).release ();\n@@ -102,6 +111,10 @@ vect_create_new_slp_node (vec<gimple *> scalar_stmts)\n   SLP_TREE_TWO_OPERATORS (node) = false;\n   SLP_TREE_DEF_TYPE (node) = vect_internal_def;\n \n+  unsigned i;\n+  FOR_EACH_VEC_ELT (scalar_stmts, i, stmt)\n+    STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt))++;\n+\n   return node;\n }\n \n@@ -401,6 +414,20 @@ vect_get_and_check_slp_defs (vec_info *vinfo,\n   /* Swap operands.  */\n   if (swapped)\n     {\n+      /* If there are already uses of this stmt in a SLP instance then\n+         we've committed to the operand order and can't swap it.  */\n+      if (STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmt)) != 0)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    {\n+\t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t       \"Build SLP failed: cannot swap operands of \"\n+\t\t\t       \"shared stmt \");\n+\t      dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n+\t    }\n+\t  return -1;\n+\t}\n+\n       if (first_op_cond)\n \t{\n \t  tree cond = gimple_assign_rhs1 (stmt);\n@@ -411,6 +438,12 @@ vect_get_and_check_slp_defs (vec_info *vinfo,\n       else\n \tswap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n \t\t\t   gimple_assign_rhs2_ptr (stmt));\n+      if (dump_enabled_p ())\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"swapped operands to match def types in \");\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+\t}\n     }\n \n   return 0;\n@@ -1007,6 +1040,23 @@ vect_build_slp_tree (vec_info *vinfo,\n \t     behavior.  */\n \t  && *npermutes < 4)\n \t{\n+\t  /* Verify if we can safely swap or if we committed to a specific\n+\t     operand order already.  */\n+\t  for (j = 0; j < group_size; ++j)\n+\t    if (!matches[j]\n+\t\t&& STMT_VINFO_NUM_SLP_USES (vinfo_for_stmt (stmts[j])) != 0)\n+\t      {\n+\t\tif (dump_enabled_p ())\n+\t\t  {\n+\t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t     \"Build SLP failed: cannot swap operands \"\n+\t\t\t\t     \"of shared stmt \");\n+\t\t    dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t\t      stmts[j], 0);\n+\t\t  }\n+\t\tgoto fail;\n+\t      }\n+\n \t  /* Swap mismatched definition stmts.  */\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t   \"Re-trying with swapped operands of stmts \");\n@@ -1095,6 +1145,7 @@ vect_build_slp_tree (vec_info *vinfo,\n \t  ++*npermutes;\n \t}\n \n+fail:\n       gcc_assert (child == NULL);\n       FOR_EACH_VEC_ELT (children, j, child)\n \tvect_free_slp_tree (child);\n@@ -2186,18 +2237,21 @@ new_bb_vec_info (gimple_stmt_iterator region_begin,\n static void\n destroy_bb_vec_info (bb_vec_info bb_vinfo)\n {\n-  vec<slp_instance> slp_instances;\n   slp_instance instance;\n-  basic_block bb;\n-  gimple_stmt_iterator si;\n   unsigned i;\n \n   if (!bb_vinfo)\n     return;\n \n-  bb = BB_VINFO_BB (bb_vinfo);\n+  vect_destroy_datarefs (bb_vinfo);\n+  free_dependence_relations (BB_VINFO_DDRS (bb_vinfo));\n+  BB_VINFO_GROUPED_STORES (bb_vinfo).release ();\n+  FOR_EACH_VEC_ELT (BB_VINFO_SLP_INSTANCES (bb_vinfo), i, instance)\n+    vect_free_slp_instance (instance);\n+  BB_VINFO_SLP_INSTANCES (bb_vinfo).release ();\n+  destroy_cost_data (BB_VINFO_TARGET_COST_DATA (bb_vinfo));\n \n-  for (si = bb_vinfo->region_begin;\n+  for (gimple_stmt_iterator si = bb_vinfo->region_begin;\n        gsi_stmt (si) != gsi_stmt (bb_vinfo->region_end); gsi_next (&si))\n     {\n       gimple *stmt = gsi_stmt (si);\n@@ -2211,16 +2265,8 @@ destroy_bb_vec_info (bb_vec_info bb_vinfo)\n       gimple_set_uid (stmt, -1);\n     }\n \n-  vect_destroy_datarefs (bb_vinfo);\n-  free_dependence_relations (BB_VINFO_DDRS (bb_vinfo));\n-  BB_VINFO_GROUPED_STORES (bb_vinfo).release ();\n-  slp_instances = BB_VINFO_SLP_INSTANCES (bb_vinfo);\n-  FOR_EACH_VEC_ELT (slp_instances, i, instance)\n-    vect_free_slp_instance (instance);\n-  BB_VINFO_SLP_INSTANCES (bb_vinfo).release ();\n-  destroy_cost_data (BB_VINFO_TARGET_COST_DATA (bb_vinfo));\n+  BB_VINFO_BB (bb_vinfo)->aux = NULL;\n   free (bb_vinfo);\n-  bb->aux = NULL;\n }\n \n "}, {"sha": "635c7970fca0f3b1e2e11225327b2ee14a088a7c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -8391,6 +8391,8 @@ new_stmt_vec_info (gimple *stmt, vec_info *vinfo)\n \n   STMT_VINFO_SAME_ALIGN_REFS (res).create (0);\n   STMT_SLP_TYPE (res) = loop_vect;\n+  STMT_VINFO_NUM_SLP_USES (res) = 0;\n+\n   GROUP_FIRST_ELEMENT (res) = NULL;\n   GROUP_NEXT_ELEMENT (res) = NULL;\n   GROUP_SIZE (res) = 0;"}, {"sha": "0a3f5d75ffbae36c710ac7ce5f148095a7b6f9bd", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78810bd35336529a133661a5e4f801ccda57fd74/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=78810bd35336529a133661a5e4f801ccda57fd74", "patch": "@@ -601,6 +601,8 @@ typedef struct _stmt_vec_info {\n   /* For reduction loops, this is the type of reduction.  */\n   enum vect_reduction_type v_reduc_type;\n \n+  /* The number of scalar stmt references from active SLP instances.  */\n+  unsigned int num_slp_uses;\n } *stmt_vec_info;\n \n /* Access Functions.  */\n@@ -653,6 +655,7 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_BASE_UNCHANGED(S) (S)->loop_phi_evolution_base_unchanged\n #define STMT_VINFO_LOOP_PHI_EVOLUTION_PART(S) (S)->loop_phi_evolution_part\n #define STMT_VINFO_MIN_NEG_DIST(S)\t(S)->min_neg_dist\n+#define STMT_VINFO_NUM_SLP_USES(S)\t(S)->num_slp_uses\n \n #define GROUP_FIRST_ELEMENT(S)          (S)->first_element\n #define GROUP_NEXT_ELEMENT(S)           (S)->next_element"}]}