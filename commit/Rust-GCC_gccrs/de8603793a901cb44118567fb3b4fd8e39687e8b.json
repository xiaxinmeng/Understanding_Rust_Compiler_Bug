{"sha": "de8603793a901cb44118567fb3b4fd8e39687e8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4NjAzNzkzYTkwMWNiNDQxMTg1NjdmYjNiNGZkOGUzOTY4N2U4Yg==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-23T21:03:55Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-23T21:03:55Z"}, "message": "Enable VBMI2 support [3/7]\n\ngcc/\n\tconfig/i386/avx512vbmi2intrin.h (_mm512_mask_expand_epi8,\n\t_mm512_maskz_expand_epi8, _mm512_mask_expandloadu_epi8,\n\t_mm512_maskz_expandloadu_epi8, _mm512_mask_expand_epi16,\n\t_mm512_maskz_expand_epi16, _mm512_mask_expandloadu_epi16,\n\t_mm512_maskz_expandloadu_epi16): New intrinsics.\n\tconfig/i386/avx512vbmi2vlintrin.h (_mm_mask_expand_epi8,\n\t_mm_maskz_expand_epi8, _mm_mask_expandloadu_epi8,\n\t_mm_maskz_expandloadu_epi8, _mm_mask_expand_epi16,\n\t_mm_maskz_expand_epi16, _mm_mask_expandloadu_epi16,\n\t_mm_maskz_expandloadu_epi16, _mm256_mask_expand_epi16,\n\t_mm256_maskz_expand_epi16, _mm256_mask_expandloadu_epi16,\n\t_mm256_maskz_expandloadu_epi16, _mm256_mask_expand_epi8,\n\t_mm256_maskz_expand_epi8, _mm256_mask_expandloadu_epi8,\n\t_mm256_maskz_expandloadu_epi8): New intrinsics.\n\tconfig/i386/i386-builtin-types.def (V64QI_FTYPE_PCV64QI_V64QI_UDI,\n\tV32HI_FTYPE_PCV32HI_V32HI_USI, V32QI_FTYPE_PCV32QI_V32QI_USI,\n\tV16HI_FTYPE_PCV16HI_V16HI_UHI, V16QI_FTYPE_PCV16QI_V16QI_UHI,\n\tV8HI_FTYPE_PCV8HI_V8HI_UQI): New types.\n\tconfig/i386/i386.c (ix86_expand_special_args_builtin): Use new types.\n\tconfig/i386/sse.md (VI248_VLBW): New iterator.\n\t(expand<mode>_mask, expand<mode>_maskz): New patterns.\n\ngcc/testsuite/\n\tgcc.target/i386/avx512f-vpexpandb-1.c: New test.\n\tgcc.target/i386/avx512f-vpexpandb-2.c: Ditto.\n\tgcc.target/i386/avx512f-vpexpandw-1.c: Ditto.\n\tgcc.target/i386/avx512f-vpexpandw-2.c: Ditto.\n\tgcc.target/i386/avx512vl-vpexpandb-1.c: Ditto.\n\tgcc.target/i386/avx512vl-vpexpandb-2.c: Ditto.\n\tgcc.target/i386/avx512vl-vpexpandw-1.c: Ditto.\n\tgcc.target/i386/avx512vl-vpexpandw-2.c: Ditto.\n\nFrom-SVN: r255121", "tree": {"sha": "2f39fc1730a73923c9b899d20583b45cd9abfbe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f39fc1730a73923c9b899d20583b45cd9abfbe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de8603793a901cb44118567fb3b4fd8e39687e8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8603793a901cb44118567fb3b4fd8e39687e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8603793a901cb44118567fb3b4fd8e39687e8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8603793a901cb44118567fb3b4fd8e39687e8b/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cca3ca7d4ac9971eb76127316ab1e75bccbb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cca3ca7d4ac9971eb76127316ab1e75bccbb23"}], "stats": {"total": 546, "additions": 546, "deletions": 0}, "files": [{"sha": "7b40bd09b2701fd3d144bb0e3120ed9d6bbb94b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -1,3 +1,27 @@\n+2017-11-23  Julia Koval  <julia.koval@intel.com>\n+\n+\tconfig/i386/avx512vbmi2intrin.h (_mm512_mask_expand_epi8,\n+\t_mm512_maskz_expand_epi8, _mm512_mask_expandloadu_epi8,\n+\t_mm512_maskz_expandloadu_epi8, _mm512_mask_expand_epi16,\n+\t_mm512_maskz_expand_epi16, _mm512_mask_expandloadu_epi16,\n+\t_mm512_maskz_expandloadu_epi16): New intrinsics.\n+\tconfig/i386/avx512vbmi2vlintrin.h (_mm_mask_expand_epi8,\n+\t_mm_maskz_expand_epi8, _mm_mask_expandloadu_epi8,\n+\t_mm_maskz_expandloadu_epi8, _mm_mask_expand_epi16,\n+\t_mm_maskz_expand_epi16, _mm_mask_expandloadu_epi16,\n+\t_mm_maskz_expandloadu_epi16, _mm256_mask_expand_epi16,\n+\t_mm256_maskz_expand_epi16, _mm256_mask_expandloadu_epi16,\n+\t_mm256_maskz_expandloadu_epi16, _mm256_mask_expand_epi8,\n+\t_mm256_maskz_expand_epi8, _mm256_mask_expandloadu_epi8,\n+\t_mm256_maskz_expandloadu_epi8): New intrinsics.\n+\tconfig/i386/i386-builtin-types.def (V64QI_FTYPE_PCV64QI_V64QI_UDI,\n+\tV32HI_FTYPE_PCV32HI_V32HI_USI, V32QI_FTYPE_PCV32QI_V32QI_USI,\n+\tV16HI_FTYPE_PCV16HI_V16HI_UHI, V16QI_FTYPE_PCV16QI_V16QI_UHI,\n+\tV8HI_FTYPE_PCV8HI_V8HI_UQI): New types.\n+\tconfig/i386/i386.c (ix86_expand_special_args_builtin): Use new types.\n+\tconfig/i386/sse.md (VI248_VLBW): New iterator.\n+\t(expand<mode>_mask, expand<mode>_maskz): New patterns.\n+\n 2017-11-23  Julia Koval  <julia.koval@intel.com>\n \n \tconfig.gcc (avx512vbmi2intrin.h, avx512vbmi2vlintrin): New headers."}, {"sha": "aa936ce55464a55b4c91ac3611a8da824bac4129", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -83,6 +83,72 @@ _mm512_mask_compressstoreu_epi16 (void * __A, __mmask32 __B, __m512i __C)\n   __builtin_ia32_compressstoreuhi512_mask ((__v32hi *) __A, (__v32hi) __C,\n \t\t\t\t\t\t\t(__mmask32) __B);\n }\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expand_epi8 (__m512i __A, __mmask64 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_expandqi512_mask ((__v64qi) __C,\n+\t\t\t\t\t\t    (__v64qi) __A,\n+\t\t\t\t\t\t    (__mmask64) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expand_epi8 (__mmask64 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_expandqi512_maskz ((__v64qi) __B,\n+\t\t\t(__v64qi) _mm512_setzero_si512 (), (__mmask64) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expandloadu_epi8 (__m512i __A, __mmask64 __B, const void * __C)\n+{\n+  return (__m512i) __builtin_ia32_expandloadqi512_mask ((const __v64qi *) __C,\n+\t\t\t\t\t(__v64qi) __A, (__mmask64) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expandloadu_epi8 (__mmask64 __A, const void * __B)\n+{\n+  return (__m512i) __builtin_ia32_expandloadqi512_maskz ((const __v64qi *) __B,\n+\t\t\t(__v64qi) _mm512_setzero_si512 (), (__mmask64) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expand_epi16 (__m512i __A, __mmask32 __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_expandhi512_mask ((__v32hi) __C,\n+\t\t\t\t\t\t    (__v32hi) __A,\n+\t\t\t\t\t\t    (__mmask32) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expand_epi16 (__mmask32 __A, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_expandhi512_maskz ((__v32hi) __B,\n+\t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_expandloadu_epi16 (__m512i __A, __mmask32 __B, const void * __C)\n+{\n+  return (__m512i) __builtin_ia32_expandloadhi512_mask ((const __v32hi *) __C,\n+\t\t\t\t\t(__v32hi) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_expandloadu_epi16 (__mmask32 __A, const void * __B)\n+{\n+  return (__m512i) __builtin_ia32_expandloadhi512_maskz ((const __v32hi *) __B,\n+\t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n+}\n #ifdef __DISABLE_AVX512VBMI2BW__\n #undef __DISABLE_AVX512VBMI2BW__\n "}, {"sha": "f47f3d0c6a6a1415ed3aa88401fcaaedac06d265", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -106,6 +106,104 @@ _mm_mask_compressstoreu_epi16 (void * __A, __mmask8 __B, __m128i __C)\n   __builtin_ia32_compressstoreuhi128_mask ((__v8hi *) __A, (__v8hi) __C,\n \t\t\t\t\t\t\t(__mmask8) __B);\n }\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_expand_epi8 (__m128i __A, __mmask16 __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_expandqi128_mask ((__v16qi) __C,\n+\t\t\t\t\t\t    (__v16qi) __A,\n+\t\t\t\t\t\t    (__mmask16) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_expand_epi8 (__mmask16 __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_expandqi128_maskz ((__v16qi) __B,\n+\t\t\t(__v16qi) _mm_setzero_si128 (), (__mmask16) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_expandloadu_epi8 (__m128i __A, __mmask16 __B, const void * __C)\n+{\n+  return (__m128i) __builtin_ia32_expandloadqi128_mask ((const __v16qi *) __C,\n+\t\t\t\t\t(__v16qi) __A, (__mmask16) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_expandloadu_epi8 (__mmask16 __A, const void * __B)\n+{\n+  return (__m128i) __builtin_ia32_expandloadqi128_maskz ((const __v16qi *) __B,\n+\t\t\t(__v16qi) _mm_setzero_si128 (), (__mmask16) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_expand_epi16 (__m128i __A, __mmask8 __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_expandhi128_mask ((__v8hi) __C,\n+\t\t\t\t\t\t    (__v8hi) __A,\n+\t\t\t\t\t\t    (__mmask8) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_expand_epi16 (__mmask8 __A, __m128i __B)\n+{\n+  return (__m128i) __builtin_ia32_expandhi128_maskz ((__v8hi) __B,\n+\t\t\t\t(__v8hi) _mm_setzero_si128 (), (__mmask8) __A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_expandloadu_epi16 (__m128i __A, __mmask8 __B, const void * __C)\n+{\n+  return (__m128i) __builtin_ia32_expandloadhi128_mask ((const __v8hi *) __C,\n+\t\t\t\t\t\t(__v8hi) __A, (__mmask8) __B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_expandloadu_epi16 (__mmask8 __A, const void * __B)\n+{\n+  return (__m128i) __builtin_ia32_expandloadhi128_maskz ((const __v8hi *) __B,\n+\t\t\t\t(__v8hi) _mm_setzero_si128 (), (__mmask8) __A);\n+}\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_expand_epi16 (__m256i __A, __mmask16 __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_expandhi256_mask ((__v16hi) __C,\n+\t\t\t\t\t\t    (__v16hi) __A,\n+\t\t\t\t\t\t    (__mmask16) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_expand_epi16 (__mmask16 __A, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_expandhi256_maskz ((__v16hi) __B,\n+\t\t\t(__v16hi) _mm256_setzero_si256 (), (__mmask16) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_expandloadu_epi16 (__m256i __A, __mmask16 __B, const void * __C)\n+{\n+  return (__m256i) __builtin_ia32_expandloadhi256_mask ((const __v16hi *) __C,\n+\t\t\t\t\t(__v16hi) __A, (__mmask16) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_expandloadu_epi16 (__mmask16 __A, const void * __B)\n+{\n+  return (__m256i) __builtin_ia32_expandloadhi256_maskz ((const __v16hi *) __B,\n+\t\t\t(__v16hi) _mm256_setzero_si256 (), (__mmask16) __A);\n+}\n #ifdef __DISABLE_AVX512VBMI2VL__\n #undef __DISABLE_AVX512VBMI2VL__\n #pragma GCC pop_options\n@@ -142,6 +240,39 @@ _mm256_mask_compressstoreu_epi8 (void * __A, __mmask32 __B, __m256i __C)\n \t\t\t\t\t\t\t(__mmask32) __B);\n }\n \n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_expand_epi8 (__m256i __A, __mmask32 __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_expandqi256_mask ((__v32qi) __C,\n+\t\t\t\t\t\t    (__v32qi) __A,\n+\t\t\t\t\t\t    (__mmask32) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_expand_epi8 (__mmask32 __A, __m256i __B)\n+{\n+  return (__m256i) __builtin_ia32_expandqi256_maskz ((__v32qi) __B,\n+\t\t\t(__v32qi) _mm256_setzero_si256 (), (__mmask32) __A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_expandloadu_epi8 (__m256i __A, __mmask32 __B, const void * __C)\n+{\n+  return (__m256i) __builtin_ia32_expandloadqi256_mask ((const __v32qi *) __C,\n+\t\t\t\t\t(__v32qi) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_expandloadu_epi8 (__mmask32 __A, const void * __B)\n+{\n+  return (__m256i) __builtin_ia32_expandloadqi256_maskz ((const __v32qi *) __B,\n+\t\t\t(__v32qi) _mm256_setzero_si256 (), (__mmask32) __A);\n+}\n+\n #ifdef __DISABLE_AVX512VBMI2VLBW__\n #undef __DISABLE_AVX512VBMI2VLBW__\n #pragma GCC pop_options"}, {"sha": "2e528396982efebfe56cc75487da810ec8669b06", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -34914,6 +34914,12 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_PCV2DI_V2DI_UQI:\n     case V4DI_FTYPE_PCV4DI_V4DI_UQI:\n     case V8DI_FTYPE_PCV8DI_V8DI_UQI:\n+    case V64QI_FTYPE_PCV64QI_V64QI_UDI:\n+    case V32HI_FTYPE_PCV32HI_V32HI_USI:\n+    case V32QI_FTYPE_PCV32QI_V32QI_USI:\n+    case V16QI_FTYPE_PCV16QI_V16QI_UHI:\n+    case V16HI_FTYPE_PCV16HI_V16HI_UHI:\n+    case V8HI_FTYPE_PCV8HI_V8HI_UQI:\n       switch (icode)\n \t{\n \t/* These builtins and instructions require the memory"}, {"sha": "93efd275997f790144471dd5f3cf3bc568d5a584", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -418,6 +418,12 @@\n (define_mode_iterator VI2_AVX2_AVX512BW\n   [(V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX2\") V8HI])\n \n+(define_mode_iterator VI248_VLBW\n+  [(V32HI \"TARGET_AVX512BW\") V16SI V8DI\n+   (V16HI \"TARGET_AVX512VL\") (V8SI \"TARGET_AVX512VL\")\n+   (V4DI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")\n+   (V4SI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VI48_AVX2\n   [(V8SI \"TARGET_AVX2\") V4SI\n    (V4DI \"TARGET_AVX2\") V2DI])\n@@ -19369,6 +19375,30 @@\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"expand<mode>_mask\"\n+  [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\" \"=v,v\")\n+\t(unspec:VI12_AVX512VLBW\n+\t  [(match_operand:VI12_AVX512VLBW 1 \"nonimmediate_operand\" \"v,m\")\n+\t   (match_operand:VI12_AVX512VLBW 2 \"vector_move_operand\" \"0C,0C\")\n+\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk,Yk\")]\n+\t  UNSPEC_EXPAND))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"v<sseintprefix>expand<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"memory\" \"none,load\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"expand<mode>_maskz\"\n+  [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\")\n+\t(unspec:VI12_AVX512VLBW\n+\t  [(match_operand:VI12_AVX512VLBW 1 \"nonimmediate_operand\")\n+\t   (match_operand:VI12_AVX512VLBW 2 \"vector_move_operand\")\n+\t   (match_operand:<avx512fmaskmode> 3 \"register_operand\")]\n+\t  UNSPEC_EXPAND))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"operands[2] = CONST0_RTX (<MODE>mode);\")\n+\n (define_insn \"avx512dq_rangep<mode><mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VF_AVX512VL"}, {"sha": "943f5fe84c0b80b0cfbe76f1cf1937ad86fd27d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -1,3 +1,14 @@\n+2017-11-23  Julia Koval  <julia.koval@intel.com>\n+\n+\tgcc.target/i386/avx512f-vpexpandb-1.c: New test.\n+\tgcc.target/i386/avx512f-vpexpandb-2.c: Ditto.\n+\tgcc.target/i386/avx512f-vpexpandw-1.c: Ditto.\n+\tgcc.target/i386/avx512f-vpexpandw-2.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpexpandb-1.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpexpandb-2.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpexpandw-1.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpexpandw-2.c: Ditto.\n+\n 2017-11-16  Julia Koval  <julia.koval@intel.com>\n \n \tgcc.target/i386/avx512-check.h: Handle AVX512VBMI2 bit."}, {"sha": "fb0c58e428fd55c50ab75a958edbdb87e6152fb7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpexpandb-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandb-1.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi2 -mavx512bw -mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_expand_epi8 (x, m, x);\n+  x = _mm512_maskz_expand_epi8 (m, x);\n+\n+  x = _mm512_mask_expandloadu_epi8 (x, m, p);\n+  x = _mm512_maskz_expandloadu_epi8 (m, p);\n+}"}, {"sha": "0105ddbe20e6fb8c39cc769a2f5fc1ecf49728b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpexpandb-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandb-2.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (char *s, char *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  char s2[SIZE];\n+  char res_ref1[SIZE];\n+  char res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 12345 * (i + 200) * sign;\n+      s2[i] = 67890 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_expand_epi8) (res1.x, mask, s1.x);\n+  res2.x = INTRINSIC (_maskz_expand_epi8) (mask, s1.x);\n+  res3.x = INTRINSIC (_mask_expandloadu_epi8) (res3.x, mask, s2);\n+  res4.x = INTRINSIC (_maskz_expandloadu_epi8) (mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  MASK_MERGE (i_b) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res1, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO (i_b) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res4, res_ref2))\n+    abort ();\n+}"}, {"sha": "49d9fb89acf7d7bc0c4190f444709bd6e2f7d336", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpexpandw-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandw-1.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi2 -mavx512bw -mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m512i x;\n+volatile __mmask16 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_mask_expand_epi16 (x, m, x);\n+  x = _mm512_maskz_expand_epi16 (m, x);\n+\n+  x = _mm512_mask_expandloadu_epi16 (x, m, p);\n+  x = _mm512_maskz_expandloadu_epi16 (m, p);\n+}"}, {"sha": "fdad38b68131e4545e5adcc38d7e54acd08b8204", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpexpandw-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpexpandw-2.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (short *s, short *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, res1, res2, res3, res4;\n+  MASK_TYPE mask = MASK_VALUE;\n+  short s2[SIZE];\n+  short res_ref1[SIZE];\n+  short res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 12345 * (i + 200) * sign;\n+      s2[i] = 67890 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res1.x = INTRINSIC (_mask_expand_epi16) (res1.x, mask, s1.x);\n+  res2.x = INTRINSIC (_maskz_expand_epi16) (mask, s1.x);\n+  res3.x = INTRINSIC (_mask_expandloadu_epi16) (res3.x, mask, s2);\n+  res4.x = INTRINSIC (_maskz_expandloadu_epi16) (mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  MASK_MERGE (i_w) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res1, res_ref1))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, res_ref1))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO (i_w) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res4, res_ref2))\n+    abort ();\n+}"}, {"sha": "96e0d815f132caa4e99f5133e1a846f697ee1bb3", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpexpandb-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandb-1.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi2 -mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m256i x1;\n+volatile __m128i x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x1 = _mm256_mask_expand_epi8 (x1, m, x1);\n+  x2 = _mm_mask_expand_epi8 (x2, m, x2);\n+\n+  x1 = _mm256_maskz_expand_epi8 (m, x1);\n+  x2 = _mm_maskz_expand_epi8 (m, x2);\n+\n+  x1 = _mm256_mask_expandloadu_epi8 (x1, m, p);\n+  x2 = _mm_mask_expandloadu_epi8 (x2, m, p);\n+\n+  x1 = _mm256_maskz_expandloadu_epi8 (m, p);\n+  x2 = _mm_maskz_expandloadu_epi8 (m, p);\n+}"}, {"sha": "280aedad1358cb743b000302e8c680b1aad0c4b4", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpexpandb-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandb-2.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpexpandb-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpexpandb-2.c\""}, {"sha": "ac5c34a0f425de04cb55bc1fedde42ff35474492", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpexpandw-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandw-1.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vbmi2 -mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <immintrin.h>\n+\n+int *p;\n+volatile __m256i x1;\n+volatile __m128i x2;\n+volatile __mmask8 m;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  x1 = _mm256_mask_expand_epi16 (x1, m, x1);\n+  x2 = _mm_mask_expand_epi16 (x2, m, x2);\n+\n+  x1 = _mm256_maskz_expand_epi16 (m, x1);\n+  x2 = _mm_maskz_expand_epi16 (m, x2);\n+\n+  x1 = _mm256_mask_expandloadu_epi16 (x1, m, p);\n+  x2 = _mm_mask_expandloadu_epi16 (x2, m, p);\n+\n+  x1 = _mm256_maskz_expandloadu_epi16 (m, p);\n+  x2 = _mm_maskz_expandloadu_epi16 (m, p);\n+}"}, {"sha": "2c1e00457cc45c3d4a0cefe504ef01822d8d9ccf", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpexpandw-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8603793a901cb44118567fb3b4fd8e39687e8b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpexpandw-2.c?ref=de8603793a901cb44118567fb3b4fd8e39687e8b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpexpandw-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpexpandw-2.c\""}]}