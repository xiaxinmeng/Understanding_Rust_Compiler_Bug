{"sha": "7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyYzlmMTQzNDhkOGVkOTE5MmE5NGIyNjkxMzhhNWE1ZjU3YjkyYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-05T09:23:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-05T09:23:31Z"}, "message": "re PR middle-end/61010 (Infinite recursion in fold)\n\n2014-05-05  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/61010\n\t* fold-const.c (fold_binary_loc): Consistently avoid\n\tcanonicalizing X & CST away from a CST that is the mask\n\tof a mode.\n\n\t* gcc.dg/torture/pr61010.c: New testcase.\n\nFrom-SVN: r210066", "tree": {"sha": "f757276d245dcc7de0472ece3f970911675fca65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f757276d245dcc7de0472ece3f970911675fca65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33ecf1086a0b59a6c2c78db7bd6f5d6ea1c62a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33ecf1086a0b59a6c2c78db7bd6f5d6ea1c62a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33ecf1086a0b59a6c2c78db7bd6f5d6ea1c62a03"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "18959f6eacb59dc11abaf916388d3dddccf9b908", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "patch": "@@ -1,3 +1,10 @@\n+2014-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61010\n+\t* fold-const.c (fold_binary_loc): Consistently avoid\n+\tcanonicalizing X & CST away from a CST that is the mask\n+\tof a mode.\n+\n 2014-05-05  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/picochip/picochip-protos.h (picochip_regno_nregs): Change"}, {"sha": "65051a12c2ac089c14e61d98e712b5087e0e89f1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "patch": "@@ -11426,7 +11426,6 @@ fold_binary_loc (location_t loc,\n \t{\n \t  double_int c1, c2, c3, msk;\n \t  int width = TYPE_PRECISION (type), w;\n-\t  bool try_simplify = true;\n \n \t  c1 = tree_to_double_int (TREE_OPERAND (arg0, 1));\n \t  c2 = tree_to_double_int (arg1);\n@@ -11463,20 +11462,7 @@ fold_binary_loc (location_t loc,\n \t\t}\n \t    }\n \n-\t  /* If X is a tree of the form (Y * K1) & K2, this might conflict\n-\t     with that optimization from the BIT_AND_EXPR optimizations.\n-\t     This could end up in an infinite recursion.  */\n-\t  if (TREE_CODE (TREE_OPERAND (arg0, 0)) == MULT_EXPR\n-\t      && TREE_CODE (TREE_OPERAND (TREE_OPERAND (arg0, 0), 1))\n-\t                    == INTEGER_CST)\n-\t  {\n-\t    tree t = TREE_OPERAND (TREE_OPERAND (arg0, 0), 1);\n-\t    double_int masked = mask_with_tz (type, c3, tree_to_double_int (t));\n-\n-\t    try_simplify = (masked != c1);\n-\t  }\n-\n-\t  if (try_simplify && c3 != c1)\n+\t  if (c3 != c1)\n \t    return fold_build2_loc (loc, BIT_IOR_EXPR, type,\n \t\t\t\t    fold_build2_loc (loc, BIT_AND_EXPR, type,\n \t\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n@@ -11866,16 +11852,25 @@ fold_binary_loc (location_t loc,\n \t  && TREE_CODE (arg0) == MULT_EXPR\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n+\t  double_int darg1 = tree_to_double_int (arg1);\n \t  double_int masked\n-\t    = mask_with_tz (type, tree_to_double_int (arg1),\n+\t    = mask_with_tz (type, darg1,\n \t                    tree_to_double_int (TREE_OPERAND (arg0, 1)));\n \n \t  if (masked.is_zero ())\n \t    return omit_two_operands_loc (loc, type, build_zero_cst (type),\n \t                                  arg0, arg1);\n-\t  else if (masked != tree_to_double_int (arg1))\n-\t    return fold_build2_loc (loc, code, type, op0,\n-\t                            double_int_to_tree (type, masked));\n+\t  else if (masked != darg1)\n+\t    {\n+\t      /* Avoid the transform if arg1 is a mask of some\n+\t         mode which allows further optimizations.  */\n+\t      int pop = darg1.popcount ();\n+\t      if (!(pop >= BITS_PER_UNIT\n+\t\t    && exact_log2 (pop) != -1\n+\t\t    && double_int::mask (pop) == darg1))\n+\t\treturn fold_build2_loc (loc, code, type, op0,\n+\t\t\t\t\tdouble_int_to_tree (type, masked));\n+\t    }\n \t}\n \n       /* For constants M and N, if M == (1LL << cst) - 1 && (N & M) == M,"}, {"sha": "1c9d4d31c662b1d7aceb102e795c7ba4baf5f703", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "patch": "@@ -1,3 +1,8 @@\n+2014-05-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61010\n+\t* gcc.dg/torture/pr61010.c: New testcase.\n+\n 2014-05-05  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* gcc.target/s390/leaf-profile.c: New testcase."}, {"sha": "ed5653982cbbb8dbc084a646b72c71aa41359e02", "filename": "gcc/testsuite/gcc.dg/torture/pr61010.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61010.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e2c9f14348d8ed9192a94b269138a5a5f57b92a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61010.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr61010.c?ref=7e2c9f14348d8ed9192a94b269138a5a5f57b92a", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+\n+int main (void)\n+{\n+  int a = 0;\n+  unsigned b = (a * 64 & 192) | 63U;\n+  return 0;\n+}"}]}