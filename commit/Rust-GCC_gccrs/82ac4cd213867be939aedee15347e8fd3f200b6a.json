{"sha": "82ac4cd213867be939aedee15347e8fd3f200b6a", "node_id": "C_kwDOANBUbNoAKDgyYWM0Y2QyMTM4NjdiZTkzOWFlZGVlMTUzNDdlOGZkM2YyMDBiNmE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-01T06:26:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-08-01T06:26:03Z"}, "message": "libfortran: Fix up boz_15.f90 on powerpc64le with -mabi=ieeelongdouble [PR106079]\n\nThe boz_15.f90 test FAILs on powerpc64le-linux when -mabi=ieeelongdouble\nis used (either default through --with-long-double-format=ieee or\nwhen used explicitly).\nThe problem is that the read/write transfer routines are called with\nBT_REAL (or BT_COMPLEX) type and kind 17 which is magic we use to say\nit is the IEEE quad real(kind=16) rather than the IBM double double\nreal(kind=16).  For the floating point input/output we then handle kind\n17 specially, but for B/O/Z we just treat the bytes of the floating point\nvalue as binary blob and using 17 in that case results in unexpected\nbehavior, for write it means we don't estimate right how many chars we'll\nneed and print ******************** etc. rather than what we should, and\neven with explicit size we'd print one further byte than intended.\nFor read it would even mean overwriting some unrelated byte after the\nfloating point object.\n\nFixed by using 16 instead of 17 in the read_radix and write_{b,o,z} calls.\n\n2022-08-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libfortran/106079\n\t* io/transfer.c (formatted_transfer_scalar_read,\n\tformatted_transfer_scalar_write): For type BT_REAL with kind 17\n\tchange kind to 16 before calling read_radix or write_{b,o,z}.", "tree": {"sha": "46fdded551db4c81be4c136c74d561ca94defc60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46fdded551db4c81be4c136c74d561ca94defc60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82ac4cd213867be939aedee15347e8fd3f200b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ac4cd213867be939aedee15347e8fd3f200b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ac4cd213867be939aedee15347e8fd3f200b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ac4cd213867be939aedee15347e8fd3f200b6a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f05605364f6f17b84842a8a5960d465b4448bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f05605364f6f17b84842a8a5960d465b4448bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f05605364f6f17b84842a8a5960d465b4448bae"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "2760929a1e9ec5349eef8bd48aecbcdad64452a8", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ac4cd213867be939aedee15347e8fd3f200b6a/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ac4cd213867be939aedee15347e8fd3f200b6a/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=82ac4cd213867be939aedee15347e8fd3f200b6a", "patch": "@@ -1614,6 +1614,10 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n+#ifdef HAVE_GFC_REAL_17\n+\t  if (type == BT_REAL && kind == 17)\n+\t    kind = 16;\n+#endif\n \t  read_radix (dtp, f, p, kind, 2);\n \t  break;\n \n@@ -1626,6 +1630,10 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n+#ifdef HAVE_GFC_REAL_17\n+\t  if (type == BT_REAL && kind == 17)\n+\t    kind = 16;\n+#endif\n \t  read_radix (dtp, f, p, kind, 8);\n \t  break;\n \n@@ -1638,6 +1646,10 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n+#ifdef HAVE_GFC_REAL_17\n+\t  if (type == BT_REAL && kind == 17)\n+\t    kind = 16;\n+#endif\n \t  read_radix (dtp, f, p, kind, 16);\n \t  break;\n \n@@ -2085,6 +2097,10 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n+#ifdef HAVE_GFC_REAL_17\n+\t  if (type == BT_REAL && kind == 17)\n+\t    kind = 16;\n+#endif\n \t  write_b (dtp, f, p, kind);\n \t  break;\n \n@@ -2097,6 +2113,10 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n+#ifdef HAVE_GFC_REAL_17\n+\t  if (type == BT_REAL && kind == 17)\n+\t    kind = 16;\n+#endif\n \t  write_o (dtp, f, p, kind);\n \t  break;\n \n@@ -2109,6 +2129,10 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t  if (!(compile_options.allow_std & GFC_STD_F2008)\n               && require_type (dtp, BT_INTEGER, type, f))\n \t    return;\n+#ifdef HAVE_GFC_REAL_17\n+\t  if (type == BT_REAL && kind == 17)\n+\t    kind = 16;\n+#endif\n \t  write_z (dtp, f, p, kind);\n \t  break;\n "}]}