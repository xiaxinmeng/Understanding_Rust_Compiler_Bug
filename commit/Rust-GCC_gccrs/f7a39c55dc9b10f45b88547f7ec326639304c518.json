{"sha": "f7a39c55dc9b10f45b88547f7ec326639304c518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhMzljNTVkYzliMTBmNDViODg1NDdmN2VjMzI2NjM5MzA0YzUxOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-14T11:39:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-14T11:39:18Z"}, "message": "tree-vrp.c (register_new_assert_for): Simplify for backward walk.\n\n2012-09-14  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vrp.c (register_new_assert_for): Simplify for backward\n\twalk.\n\t(find_assert_locations_1): Walk the basic-block backwards,\n\tproperly add/prune from live.  Use live for asserts derived\n\tfrom stmts.\n\nFrom-SVN: r191293", "tree": {"sha": "6fd00479962b123f3a8374ee9d88447add3a7f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd00479962b123f3a8374ee9d88447add3a7f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a39c55dc9b10f45b88547f7ec326639304c518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a39c55dc9b10f45b88547f7ec326639304c518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a39c55dc9b10f45b88547f7ec326639304c518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a39c55dc9b10f45b88547f7ec326639304c518/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ebd25e11b571812971df97c1c589a64f94634a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebd25e11b571812971df97c1c589a64f94634a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebd25e11b571812971df97c1c589a64f94634a6"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "f5da3ab6b0c3dbe2569780352322d0d35050325d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a39c55dc9b10f45b88547f7ec326639304c518/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a39c55dc9b10f45b88547f7ec326639304c518/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7a39c55dc9b10f45b88547f7ec326639304c518", "patch": "@@ -1,3 +1,11 @@\n+2012-09-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (register_new_assert_for): Simplify for backward\n+\twalk.\n+\t(find_assert_locations_1): Walk the basic-block backwards,\n+\tproperly add/prune from live.  Use live for asserts derived\n+\tfrom stmts.\n+\n 2012-09-14  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* tree-ssa-forwprop.c (simplify_bitfield_ref): Call"}, {"sha": "291d8990d4ff09d011a57c493f54f195220d594e", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 33, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a39c55dc9b10f45b88547f7ec326639304c518/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a39c55dc9b10f45b88547f7ec326639304c518/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f7a39c55dc9b10f45b88547f7ec326639304c518", "patch": "@@ -4384,24 +4384,7 @@ register_new_assert_for (tree name, tree expr,\n \t  && (loc->expr == expr\n \t      || operand_equal_p (loc->expr, expr, 0)))\n \t{\n-\t  /* If the assertion NAME COMP_CODE VAL has already been\n-\t     registered at a basic block that dominates DEST_BB, then\n-\t     we don't need to insert the same assertion again.  Note\n-\t     that we don't check strict dominance here to avoid\n-\t     replicating the same assertion inside the same basic\n-\t     block more than once (e.g., when a pointer is\n-\t     dereferenced several times inside a block).\n-\n-\t     An exception to this rule are edge insertions.  If the\n-\t     new assertion is to be inserted on edge E, then it will\n-\t     dominate all the other insertions that we may want to\n-\t     insert in DEST_BB.  So, if we are doing an edge\n-\t     insertion, don't do this dominance check.  */\n-          if (e == NULL\n-\t      && dominated_by_p (CDI_DOMINATORS, dest_bb, loc->bb))\n-\t    return;\n-\n-\t  /* Otherwise, if E is not a critical edge and DEST_BB\n+\t  /* If E is not a critical edge and DEST_BB\n \t     dominates the existing location for the assertion, move\n \t     the assertion up in the dominance tree by updating its\n \t     location information.  */\n@@ -5439,7 +5422,6 @@ find_assert_locations_1 (basic_block bb, sbitmap live)\n {\n   gimple_stmt_iterator si;\n   gimple last;\n-  gimple phi;\n   bool need_assert;\n \n   need_assert = false;\n@@ -5462,7 +5444,7 @@ find_assert_locations_1 (basic_block bb, sbitmap live)\n \n   /* Traverse all the statements in BB marking used names and looking\n      for statements that may infer assertions for their used operands.  */\n-  for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n+  for (si = gsi_last_bb (bb); !gsi_end_p (si); gsi_prev (&si))\n     {\n       gimple stmt;\n       tree op;\n@@ -5479,8 +5461,10 @@ find_assert_locations_1 (basic_block bb, sbitmap live)\n \t  tree value;\n \t  enum tree_code comp_code;\n \n-\t  /* Mark OP in our live bitmap.  */\n-\t  SET_BIT (live, SSA_NAME_VERSION (op));\n+\t  /* If op is not live beyond this stmt, do not bother to insert\n+\t     asserts for it.  */\n+\t  if (!TEST_BIT (live, SSA_NAME_VERSION (op)))\n+\t    continue;\n \n \t  /* If OP is used in such a way that we can infer a value\n \t     range for it, and we don't find a previous assertion for\n@@ -5520,32 +5504,37 @@ find_assert_locations_1 (basic_block bb, sbitmap live)\n \t\t    }\n \t\t}\n \n-\t      /* If OP is used only once, namely in this STMT, don't\n-\t\t bother creating an ASSERT_EXPR for it.  Such an\n-\t\t ASSERT_EXPR would do nothing but increase compile time.  */\n-\t      if (!has_single_use (op))\n-\t\t{\n-\t\t  register_new_assert_for (op, op, comp_code, value,\n-\t\t\t\t\t   bb, NULL, si);\n-\t\t  need_assert = true;\n-\t\t}\n+\t      register_new_assert_for (op, op, comp_code, value, bb, NULL, si);\n+\t      need_assert = true;\n \t    }\n \t}\n+\n+      /* Update live.  */\n+      FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_USE)\n+\tSET_BIT (live, SSA_NAME_VERSION (op));\n+      FOR_EACH_SSA_TREE_OPERAND (op, stmt, i, SSA_OP_DEF)\n+\tRESET_BIT (live, SSA_NAME_VERSION (op));\n     }\n \n-  /* Traverse all PHI nodes in BB marking used operands.  */\n+  /* Traverse all PHI nodes in BB, updating live.  */\n   for (si = gsi_start_phis (bb); !gsi_end_p(si); gsi_next (&si))\n     {\n       use_operand_p arg_p;\n       ssa_op_iter i;\n-      phi = gsi_stmt (si);\n+      gimple phi = gsi_stmt (si);\n+      tree res = gimple_phi_result (phi);\n+\n+      if (virtual_operand_p (res))\n+\tcontinue;\n \n       FOR_EACH_PHI_ARG (arg_p, phi, i, SSA_OP_USE)\n \t{\n \t  tree arg = USE_FROM_PTR (arg_p);\n \t  if (TREE_CODE (arg) == SSA_NAME)\n \t    SET_BIT (live, SSA_NAME_VERSION (arg));\n \t}\n+\n+      RESET_BIT (live, SSA_NAME_VERSION (res));\n     }\n \n   return need_assert;"}]}