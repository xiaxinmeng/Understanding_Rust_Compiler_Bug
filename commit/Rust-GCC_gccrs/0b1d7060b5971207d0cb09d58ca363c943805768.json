{"sha": "0b1d7060b5971207d0cb09d58ca363c943805768", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxZDcwNjBiNTk3MTIwN2QwY2IwOWQ1OGNhMzYzYzk0MzgwNTc2OA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2009-09-20T11:03:33Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-09-20T11:03:33Z"}, "message": "unwind-dw2-fde.c (classify_object_over_fdes): Cast the constant 1 to _Unwind_Ptr.\n\n2009-09-20  Kai Tietz  <kai.tietz@onevision.com>\n            Pascal Obry  <obry@adacore.com>\n\n        * unwind-dw2-fde.c (classify_object_over_fdes):\n        Cast the constant 1 to _Unwind_Ptr.\n        (add_fdes): Likewise.\n        (linear_search_fdes): Likewise.\n\n\nCo-Authored-By: Pascal Obry <obry@adacore.com>\n\nFrom-SVN: r151899", "tree": {"sha": "ba34653d026f94f799e73921edcb1fdda301a4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba34653d026f94f799e73921edcb1fdda301a4a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1d7060b5971207d0cb09d58ca363c943805768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d7060b5971207d0cb09d58ca363c943805768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1d7060b5971207d0cb09d58ca363c943805768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d7060b5971207d0cb09d58ca363c943805768/comments", "author": null, "committer": null, "parents": [{"sha": "d0566a63a5bc7bc67cb6da5c51507c739ac34148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0566a63a5bc7bc67cb6da5c51507c739ac34148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0566a63a5bc7bc67cb6da5c51507c739ac34148"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "361484a7b2deb300a809efbf8519ef86669e30b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d7060b5971207d0cb09d58ca363c943805768/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d7060b5971207d0cb09d58ca363c943805768/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b1d7060b5971207d0cb09d58ca363c943805768", "patch": "@@ -1,3 +1,11 @@\n+2009-09-20  Kai Tietz  <kai.tietz@onevision.com>\n+\t    Pascal Obry  <obry@adacore.com>\n+\n+\t* unwind-dw2-fde.c (classify_object_over_fdes):\n+\tCast the constant 1 to _Unwind_Ptr.\n+\t(add_fdes): Likewise.\n+\t(linear_search_fdes): Likewise.\n+\n 2009-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (set_sizetype): Avoid useless type copy."}, {"sha": "60535cfd78011cb0d3631f2c8c8ff6ab51cbaa5a", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d7060b5971207d0cb09d58ca363c943805768/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d7060b5971207d0cb09d58ca363c943805768/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=0b1d7060b5971207d0cb09d58ca363c943805768", "patch": "@@ -630,7 +630,7 @@ classify_object_over_fdes (struct object *ob, const fde *this_fde)\n \t be representable.  Assume 0 in the representable bits is NULL.  */\n       mask = size_of_encoded_value (encoding);\n       if (mask < sizeof (void *))\n-\tmask = (1L << (mask << 3)) - 1;\n+\tmask = (((_Unwind_Ptr) 1) << (mask << 3)) - 1;\n       else\n \tmask = -1;\n \n@@ -693,7 +693,7 @@ add_fdes (struct object *ob, struct fde_accumulator *accu, const fde *this_fde)\n \t     be representable.  Assume 0 in the representable bits is NULL.  */\n \t  mask = size_of_encoded_value (encoding);\n \t  if (mask < sizeof (void *))\n-\t    mask = (1L << (mask << 3)) - 1;\n+\t    mask = (((_Unwind_Ptr) 1) << (mask << 3)) - 1;\n \t  else\n \t    mask = -1;\n \n@@ -816,7 +816,7 @@ linear_search_fdes (struct object *ob, const fde *this_fde, void *pc)\n \t     be representable.  Assume 0 in the representable bits is NULL.  */\n \t  mask = size_of_encoded_value (encoding);\n \t  if (mask < sizeof (void *))\n-\t    mask = (1L << (mask << 3)) - 1;\n+\t    mask = (((_Unwind_Ptr) 1) << (mask << 3)) - 1;\n \t  else\n \t    mask = -1;\n "}]}