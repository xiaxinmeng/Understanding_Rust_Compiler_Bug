{"sha": "036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2ZWEzOTkxN2IwZWY2ZjA3YTdjM2MzYzA2MDAyYzczZmQyMzhmNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-27T07:53:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-27T07:53:33Z"}, "message": "attribs.c (decl_attributes): Imply noinline, noclone and no_icf attributes for noipa attribute.\n\n\t* attribs.c (decl_attributes): Imply noinline, noclone and no_icf\n\tattributes for noipa attribute.  For naked attribute use\n\tlookup_attribute first before lookup_attribute_spec.\n\t* final.c (rest_of_handle_final): Disable IPA RA for functions with\n\tnoipa attribute.\n\t* ipa-visibility.c (non_local_p): Fix comment typos.  Return true\n\tfor functions with noipa attribute.\n\t(cgraph_externally_visible_p): Return true for functions with noipa\n\tattribute.\n\t* cgraph.c (cgraph_node::get_availability): Return AVAIL_INTERPOSABLE\n\tfor functions with noipa attribute.\n\t* doc/extend.texi: Document noipa function attribute.\n\t* tree-ssa-structalias.c (refered_from_nonlocal_fn): Set *nonlocal_p\n\talso for functions with noipa attribute.\n\t(ipa_pta_execute): Set nonlocal_p also for nodes with noipa attribute.\nc-family/\n\t* c-attribs.c (c_common_attribute_table): Add noipa attribute.\n\t(handle_noipa_attribute): New function.\ntestsuite/\n\t* gcc.dg/attr-noipa.c: New test.\n\t* gcc.dg/ipa/ipa-pta-18.c: New test.\n\t* gcc.dg/ipa/ipa-sra-11.c: New test.\n\nFrom-SVN: r250607", "tree": {"sha": "a35982ffc34baaebfbff808b7c0ae77b320f7b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a35982ffc34baaebfbff808b7c0ae77b320f7b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2443509ba815ae9acc5303846661c409fa63436a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2443509ba815ae9acc5303846661c409fa63436a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2443509ba815ae9acc5303846661c409fa63436a"}], "stats": {"total": 352, "additions": 345, "deletions": 7}, "files": [{"sha": "89180b7d9c22ba1e391aa521a65c2ff040eeceaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -1,3 +1,21 @@\n+2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* attribs.c (decl_attributes): Imply noinline, noclone and no_icf\n+\tattributes for noipa attribute.  For naked attribute use\n+\tlookup_attribute first before lookup_attribute_spec.\n+\t* final.c (rest_of_handle_final): Disable IPA RA for functions with\n+\tnoipa attribute.\n+\t* ipa-visibility.c (non_local_p): Fix comment typos.  Return true\n+\tfor functions with noipa attribute.\n+\t(cgraph_externally_visible_p): Return true for functions with noipa\n+\tattribute.\n+\t* cgraph.c (cgraph_node::get_availability): Return AVAIL_INTERPOSABLE\n+\tfor functions with noipa attribute.\n+\t* doc/extend.texi: Document noipa function attribute.\n+\t* tree-ssa-structalias.c (refered_from_nonlocal_fn): Set *nonlocal_p\n+\talso for functions with noipa attribute.\n+\t(ipa_pta_execute): Set nonlocal_p also for nodes with noipa attribute.\n+\n 2017-07-26  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64.c (thunderx_vector_cost): Decrease cost of"}, {"sha": "05fa8ef8692867556300e63e5e239004373e4de2", "filename": "gcc/attribs.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -404,8 +404,8 @@ decl_attributes (tree *node, tree attributes, int flags)\n      those targets that support it.  */\n   if (TREE_CODE (*node) == FUNCTION_DECL\n       && attributes\n-      && lookup_attribute_spec (get_identifier (\"naked\"))\n-      && lookup_attribute (\"naked\", attributes) != NULL)\n+      && lookup_attribute (\"naked\", attributes) != NULL\n+      && lookup_attribute_spec (get_identifier (\"naked\")))\n     {\n       if (lookup_attribute (\"noinline\", attributes) == NULL)\n \tattributes = tree_cons (get_identifier (\"noinline\"), NULL, attributes);\n@@ -414,6 +414,23 @@ decl_attributes (tree *node, tree attributes, int flags)\n \tattributes = tree_cons (get_identifier (\"noclone\"),  NULL, attributes);\n     }\n \n+  /* A \"noipa\" function attribute implies \"noinline\", \"noclone\" and \"no_icf\"\n+     for those targets that support it.  */\n+  if (TREE_CODE (*node) == FUNCTION_DECL\n+      && attributes\n+      && lookup_attribute (\"noipa\", attributes) != NULL\n+      && lookup_attribute_spec (get_identifier (\"noipa\")))\n+    {\n+      if (lookup_attribute (\"noinline\", attributes) == NULL)\n+\tattributes = tree_cons (get_identifier (\"noinline\"), NULL, attributes);\n+\n+      if (lookup_attribute (\"noclone\", attributes) == NULL)\n+\tattributes = tree_cons (get_identifier (\"noclone\"),  NULL, attributes);\n+\n+      if (lookup_attribute (\"no_icf\", attributes) == NULL)\n+\tattributes = tree_cons (get_identifier (\"no_icf\"),  NULL, attributes);\n+    }\n+\n   targetm.insert_attributes (*node, &attributes);\n \n   for (a = attributes; a; a = TREE_CHAIN (a))"}, {"sha": "4a2b9ad430f331eae0643a42aa928e573309f165", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -1,3 +1,8 @@\n+2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-attribs.c (c_common_attribute_table): Add noipa attribute.\n+\t(handle_noipa_attribute): New function.\n+\n 2017-07-07  Torsten Duwe  <duwe@suse.de>\n \n \t* c-attribs.c (c_common_attribute_table): Add entry for"}, {"sha": "0d9ab2d6ae037d36667ee2558e3aa91226f21095", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -66,6 +66,7 @@ static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noicf_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_noipa_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);\n static tree handle_always_inline_attribute (tree *, tree, tree, int,\n \t\t\t\t\t    bool *);\n@@ -178,6 +179,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_noclone_attribute, false },\n   { \"no_icf\",                 0, 0, true,  false, false,\n \t\t\t      handle_noicf_attribute, false },\n+  { \"noipa\",\t\t      0, 0, true,  false, false,\n+\t\t\t      handle_noipa_attribute, false },\n   { \"leaf\",                   0, 0, true,  false, false,\n \t\t\t      handle_leaf_attribute, false },\n   { \"always_inline\",          0, 0, true,  false, false,\n@@ -698,6 +701,21 @@ handle_asan_odr_indicator_attribute (tree *, tree, tree, int, bool *)\n static tree\n handle_stack_protect_attribute (tree *node, tree name, tree, int,\n \t\t\t\tbool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Handle a \"noipa\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_noipa_attribute (tree *node, tree name, tree, int, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {"}, {"sha": "d7c9ba617955122de611c43a8dbadc0280be580a", "filename": "gcc/cgraph.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -2319,7 +2319,8 @@ cgraph_node::get_availability (symtab_node *ref)\n     avail = AVAIL_AVAILABLE;\n   else if (transparent_alias)\n     ultimate_alias_target (&avail, ref);\n-  else if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (decl)))\n+  else if (lookup_attribute (\"ifunc\", DECL_ATTRIBUTES (decl))\n+\t   || lookup_attribute (\"noipa\", DECL_ATTRIBUTES (decl)))\n     avail = AVAIL_INTERPOSABLE;\n   else if (!externally_visible)\n     avail = AVAIL_AVAILABLE;"}, {"sha": "6934b4cde3e53ce2f073f2fe9f478b5c0dfdad16", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -2984,6 +2984,19 @@ asm (\"\");\n (@pxref{Extended Asm}) in the called function, to serve as a special\n side-effect.\n \n+@item noipa\n+@cindex @code{noipa} function attribute\n+Disable interprocedural optimizations between the function with this\n+attribute and its callers, as if the body of the function is not available\n+when optimizing callers and the callers are unavailable when optimizing\n+the body.  This attribute implies @code{noinline}, @code{noclone} and\n+@code{no_icf} attributes.    However, this attribute is not equivalent\n+to a combination of other attributes, because its purpose is to suppress\n+existing and future optimizations employing interprocedural analysis,\n+including those that do not have an attribute suitable for disabling\n+them individually.  This attribute is supported mainly for the purpose\n+of testing the compiler.\n+\n @item nonnull (@var{arg-index}, @dots{})\n @cindex @code{nonnull} function attribute\n @cindex functions with non-null pointer arguments"}, {"sha": "2a24f4fe10208306ab717cd1bad2774d7b6151ad", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -4492,7 +4492,8 @@ rest_of_handle_final (void)\n   assemble_start_function (current_function_decl, fnname);\n   final_start_function (get_insns (), asm_out_file, optimize);\n   final (get_insns (), asm_out_file, optimize);\n-  if (flag_ipa_ra)\n+  if (flag_ipa_ra\n+      && !lookup_attribute (\"noipa\", DECL_ATTRIBUTES (current_function_decl)))\n     collect_fn_hard_reg_usage ();\n   final_end_function ();\n "}, {"sha": "3033f20e3f14e17956d56b1a5ded1b9d54216925", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -92,10 +92,11 @@ non_local_p (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n {\n   return !(node->only_called_directly_or_aliased_p ()\n \t   /* i386 would need update to output thunk with local calling\n-\t      convetions.  */\n+\t      conventions.  */\n \t   && !node->thunk.thunk_p\n \t   && node->definition\n \t   && !DECL_EXTERNAL (node->decl)\n+\t   && !lookup_attribute (\"noipa\", DECL_ATTRIBUTES (node->decl))\n \t   && !node->externally_visible\n \t   && !node->used_from_other_partition\n \t   && !node->in_other_partition\n@@ -211,6 +212,8 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n   if (lookup_attribute (\"externally_visible\",\n \t\t\tDECL_ATTRIBUTES (node->decl)))\n     return true;\n+  if (lookup_attribute (\"noipa\", DECL_ATTRIBUTES (node->decl)))\n+    return true;\n   if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n       && lookup_attribute (\"dllexport\",\n \t\t\t   DECL_ATTRIBUTES (node->decl)))"}, {"sha": "532870c90a89e8c00a6e45c0986c8587c1e0d191", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -1,3 +1,9 @@\n+2017-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/attr-noipa.c: New test.\n+\t* gcc.dg/ipa/ipa-pta-18.c: New test.\n+\t* gcc.dg/ipa/ipa-sra-11.c: New test.\n+\n 2017-07-25  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vsx-himode.c: Delete -mvsx-small-integer"}, {"sha": "1d2b86894ed2395ab3dd8871335475649e2a05e3", "filename": "gcc/testsuite/gcc.dg/attr-noipa.c", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-noipa.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -0,0 +1,188 @@\n+/* Test the noipa attribute.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+static inline int __attribute__((noipa))\n+fn1 (void) /* { dg-warning \"inline function \\[^\\n\\]* given attribute noinline\" \"\" } */\n+{\n+  return 1;\n+}\n+\n+/* Verify the function is not inlined into its caller.  */\n+\n+static __attribute__((noipa)) int\n+fn2 (int x, int y)\n+{\n+  return x + y;\n+}\n+\n+int\n+fn3 (int x)\n+{\n+  return fn2 (x, 0);\n+}\n+\n+/* { dg-final { scan-tree-dump \"= fn2 \\\\(\" \"optimized\" } } */\n+\n+void fn4 (char *);\n+\n+/* Verify the function is not cloned.  */\n+\n+__attribute__((__noipa__)) static int\n+fn5 (int x, int y)\n+{\n+  char *p = __builtin_alloca (x + y);\n+  fn4 (p);\n+  return x + y;\n+}\n+\n+int\n+fn6 (int x)\n+{\n+  return fn5 (x, 2);\n+}\n+\n+/* { dg-final { scan-tree-dump \"= fn5 \\\\(\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"fn5\\\\.constprop\" \"optimized\" } } */\n+\n+/* Verify we still remove unused function calls, even if they have\n+   noipa attribute.  */\n+\n+static void fn7 (void) __attribute__((noipa));\n+static void\n+fn7 (void)\n+{\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"fn7 \\\\(\" \"optimized\" } } */\n+\n+/* Verify noipa functions are not ICF optimized.  */\n+\n+static __attribute__((noipa)) int\n+fn8 (int x)\n+{\n+  return x + 12;\n+}\n+\n+static __attribute__((noipa)) int\n+fn9 (int x)\n+{\n+  return x + 12;\n+}\n+\n+int\n+fn10 (int x)\n+{\n+  return fn8 (x) + fn9 (x);\n+}\n+\n+/* { dg-final { scan-tree-dump \"fn8 \\\\(int\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"fn9 \\\\(int\" \"optimized\" } } */\n+\n+/* Verify IPA-VRP is not performed.  */\n+\n+void fn11 (void);\n+\n+static int __attribute__((noipa))\n+fn12 (int x)\n+{\n+  if (x < 6 || x >= 29)\n+    fn11 ();\n+}\n+\n+void\n+fn13 (int x)\n+{\n+  fn12 (6 + (x & 15));\n+}\n+\n+/* { dg-final { scan-tree-dump \"fn11 \\\\(\\\\)\" \"optimized\" } } */\n+\n+void fn14 (void);\n+\n+__attribute__((noipa)) static int\n+fn15 (int x)\n+{\n+  return x & 7;\n+}\n+\n+int\n+fn16 (int x)\n+{\n+  x = fn15 (x);\n+  if (x < 0 || x >= 7)\n+    fn14 ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"fn14 \\\\(\\\\)\" \"optimized\" } } */\n+\n+/* Verify IPA BIT CP is not performed.  */\n+\n+void fn17 (void);\n+\n+__attribute__((noipa)) static int\n+fn18 (int x)\n+{\n+  if (x & 8)\n+    fn17 ();\n+}\n+\n+void\n+fn19 (void)\n+{\n+  fn18 (1);\n+  fn18 (2);\n+  fn18 (4);\n+  fn18 (16);\n+  fn18 (32);\n+  fn18 (64);\n+}\n+\n+/* { dg-final { scan-tree-dump \"fn17 \\\\(\\\\)\" \"optimized\" } } */\n+\n+/* Ensure pure/const discovery is not performed.  */\n+\n+int var1;\n+void fn20 (void);\n+\n+__attribute__((noipa)) static int\n+fn21 (int x, int y)\n+{\n+  return x * y;\n+}\n+\n+int\n+fn22 (void)\n+{\n+  var1 = 7;\n+  asm volatile (\"\" : \"+g\" (var1) : : \"memory\");\n+  int a = var1;\n+  int b = fn21 (a, a);\n+  if (a != var1)\n+    fn20 ();\n+  return b;\n+}\n+\n+/* { dg-final { scan-tree-dump \"fn20 \\\\(\\\\)\" \"optimized\" } } */\n+\n+/* Verify IPA alignment propagation is not performed.  */\n+\n+static __attribute__ ((aligned(16))) char var2[32];\n+void fn23 (void);\n+\n+__attribute__((noipa)) static void\n+fn24 (char *p)\n+{\n+  if ((((__UINTPTR_TYPE__) p) & 15) != 0)\n+    fn23 ();\n+  asm (\"\");\n+}\n+\n+void\n+fn25 (void)\n+{\n+  fn24 (var2);\n+  fn24 (var2 + 16);\n+}\n+\n+/* { dg-final { scan-tree-dump \"fn20 \\\\(\\\\)\" \"optimized\" } } */"}, {"sha": "01b0976409716d08657db3b91809ff3582beeb85", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-18.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-18.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fipa-pta -fdump-ipa-pta2-details -fdump-tree-fre3-details\" } */\n+\n+static int __attribute__((noipa))\n+foo (int *p, int *q)\n+{\n+  *p = 1;\n+  *q = 0;\n+  return *p;\n+}\n+\n+extern void abort (void);\n+\n+int main()\n+{\n+  int a, b;\n+  if (foo (&a, &b) != 1)\n+    abort ();\n+  return 0;\n+}\n+\n+/* Verify we can disambiguate *p and *q in foo.  */\n+\n+/* { dg-final { scan-ipa-dump \"foo.arg0 = &a\" \"pta2\" } } */\n+/* { dg-final { scan-ipa-dump \"foo.arg1 = &b\" \"pta2\" } } */\n+/* { dg-final { scan-tree-dump-not \"Replaced \\\\\\*p_2\\\\\\(D\\\\\\) with 1\" \"fre3\" } } */"}, {"sha": "e91423a62fbb6b9603659c4c4aa4ac68874c78aa", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-sra-11.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-sra-11.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fipa-sra -fdump-tree-eipa_sra-details\"  } */\n+\n+struct bovid\n+{\n+  float red;\n+  int green;\n+  void *blue;\n+};\n+\n+extern int printf (const char *, ...);\n+extern void abort (void);\n+\n+static int\n+__attribute__((noipa))\n+ox (struct bovid cow)\n+{\n+  if (cow.green != 6)\n+    abort ();\n+\n+  printf (\"green: %f\\nblue: %p\\nblue again: %p\\n\", cow.green,\n+\t  cow.blue, cow.blue);\n+  return 0;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  struct bovid cow;\n+\n+  cow.red = 7.4;\n+  cow.green = 6;\n+  cow.blue = &cow;\n+\n+  ox (cow);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"About to replace expr\" \"eipa_sra\" } } */"}, {"sha": "e743e35033eadcf9461ff322c6690bfcf21034a6", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036ea39917b0ef6f07a7c3c3c06002c73fd238f5/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=036ea39917b0ef6f07a7c3c3c06002c73fd238f5", "patch": "@@ -7764,7 +7764,8 @@ refered_from_nonlocal_fn (struct cgraph_node *node, void *data)\n   bool *nonlocal_p = (bool *)data;\n   *nonlocal_p |= (node->used_from_other_partition\n \t\t  || node->externally_visible\n-\t\t  || node->force_output);\n+\t\t  || node->force_output\n+\t\t  || lookup_attribute (\"noipa\", DECL_ATTRIBUTES (node->decl)));\n   return false;\n }\n \n@@ -7824,7 +7825,9 @@ ipa_pta_execute (void)\n \t constraints for parameters.  */\n       bool nonlocal_p = (node->used_from_other_partition\n \t\t\t || node->externally_visible\n-\t\t\t || node->force_output);\n+\t\t\t || node->force_output\n+\t\t\t || lookup_attribute (\"noipa\",\n+\t\t\t\t\t      DECL_ATTRIBUTES (node->decl)));\n       node->call_for_symbol_thunks_and_aliases (refered_from_nonlocal_fn,\n \t\t\t\t\t\t&nonlocal_p, true);\n "}]}