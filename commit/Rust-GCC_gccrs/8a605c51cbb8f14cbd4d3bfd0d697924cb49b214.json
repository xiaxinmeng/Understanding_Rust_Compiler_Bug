{"sha": "8a605c51cbb8f14cbd4d3bfd0d697924cb49b214", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2MDVjNTFjYmI4ZjE0Y2JkNGQzYmZkMGQ2OTc5MjRjYjQ5YjIxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-02T07:29:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-10-02T07:29:49Z"}, "message": "re PR target/62128 (Use vpalignr for AVX2 rotation)\n\n\tPR target/62128\n\t* config/i386/i386.c (expand_vec_perm_1): Try expand_vec_perm_palignr\n\tif it expands to a single insn only.\n\t(expand_vec_perm_palignr): Add SINGLE_INSN_ONLY_P argument.  If true,\n\tfail unless in_order is true.  Add forward declaration.\n\t(expand_vec_perm_vperm2f128): Fix up comment about which permutation\n\tis useful for one_operand_p.\n\t(ix86_expand_vec_perm_const_1): Adjust expand_vec_perm_palignr caller.\n\nFrom-SVN: r215796", "tree": {"sha": "246551f633d709c97d0fb8662459a1c8bec949d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/246551f633d709c97d0fb8662459a1c8bec949d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ae5a2386e7ddfeb79bb703c7d81282bd0a0d885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae5a2386e7ddfeb79bb703c7d81282bd0a0d885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae5a2386e7ddfeb79bb703c7d81282bd0a0d885"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "24e007d28a17d0976726d683ae021ff721ebb846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a605c51cbb8f14cbd4d3bfd0d697924cb49b214", "patch": "@@ -1,3 +1,14 @@\n+2014-10-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/62128\n+\t* config/i386/i386.c (expand_vec_perm_1): Try expand_vec_perm_palignr\n+\tif it expands to a single insn only.\n+\t(expand_vec_perm_palignr): Add SINGLE_INSN_ONLY_P argument.  If true,\n+\tfail unless in_order is true.  Add forward declaration.\n+\t(expand_vec_perm_vperm2f128): Fix up comment about which permutation\n+\tis useful for one_operand_p.\n+\t(ix86_expand_vec_perm_const_1): Adjust expand_vec_perm_palignr caller.\n+\n 2014-10-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraphclones.c (build_function_type_skip_args): Do not make new"}, {"sha": "8fdc414114cc9ffec9572df80a3a9928b1aefa73", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a605c51cbb8f14cbd4d3bfd0d697924cb49b214/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8a605c51cbb8f14cbd4d3bfd0d697924cb49b214", "patch": "@@ -39636,6 +39636,7 @@ struct expand_vec_perm_d\n static bool canonicalize_perm (struct expand_vec_perm_d *d);\n static bool expand_vec_perm_1 (struct expand_vec_perm_d *d);\n static bool expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d);\n+static bool expand_vec_perm_palignr (struct expand_vec_perm_d *d, bool);\n \n /* Get a vector mode of the same size as the original but with elements\n    twice as wide.  This is only guaranteed to apply to integral vectors.  */\n@@ -43225,6 +43226,10 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_pshufb (d))\n     return true;\n \n+  /* Try the AVX2 vpalignr instruction.  */\n+  if (expand_vec_perm_palignr (d, true))\n+    return true;\n+\n   /* Try the AVX512F vpermi2 instructions.  */\n   rtx vec[64];\n   enum machine_mode mode = d->vmode;\n@@ -43286,10 +43291,11 @@ expand_vec_perm_pshuflw_pshufhw (struct expand_vec_perm_d *d)\n    the permutation using the SSSE3 palignr instruction.  This succeeds\n    when all of the elements in PERM fit within one vector and we merely\n    need to shift them down so that a single vector permutation has a\n-   chance to succeed.  */\n+   chance to succeed.  If SINGLE_INSN_ONLY_P, succeed if only\n+   the vpalignr instruction itself can perform the requested permutation.  */\n \n static bool\n-expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n+expand_vec_perm_palignr (struct expand_vec_perm_d *d, bool single_insn_only_p)\n {\n   unsigned i, nelt = d->nelt;\n   unsigned min, max;\n@@ -43320,8 +43326,9 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n \n   /* Given that we have SSSE3, we know we'll be able to implement the\n      single operand permutation after the palignr with pshufb for\n-     128-bit vectors.  */\n-  if (d->testing_p && GET_MODE_SIZE (d->vmode) == 16)\n+     128-bit vectors.  If SINGLE_INSN_ONLY_P, in_order has to be computed\n+     first.  */\n+  if (d->testing_p && GET_MODE_SIZE (d->vmode) == 16 && !single_insn_only_p)\n     return true;\n \n   dcopy = *d;\n@@ -43342,6 +43349,9 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d)\n     }\n   dcopy.one_operand_p = true;\n \n+  if (single_insn_only_p && !in_order)\n+    return false;\n+\n   /* For AVX2, test whether we can permute the result in one instruction.  */\n   if (d->testing_p)\n     {\n@@ -43922,7 +43932,8 @@ expand_vec_perm_vperm2f128 (struct expand_vec_perm_d *d)\n \t  return true;\n \t}\n \n-      /* For one operand, the only useful vperm2f128 permutation is 0x10.  */\n+      /* For one operand, the only useful vperm2f128 permutation is 0x01\n+\t aka lanes swap.  */\n       if (d->one_operand_p)\n \treturn false;\n     }\n@@ -44811,7 +44822,7 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_pshuflw_pshufhw (d))\n     return true;\n \n-  if (expand_vec_perm_palignr (d))\n+  if (expand_vec_perm_palignr (d, false))\n     return true;\n \n   if (expand_vec_perm_interleave2 (d))"}]}