{"sha": "9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlYzAwNDI5ZGQzNmVhNTE3OThhZmVhZjVmNmI5YzE5ODdiODVjZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-11T09:26:48Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-11T09:26:48Z"}, "message": "re PR c++/24985 (caret diagnostics)\n\n2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 24985\ngcc/\n        * diagnostic.h (show_caret): Declare.\n\t(caret_max_width): Declare.\n\t(diagnostic_show_locus): Declare.\n        * diagnostic.c (diagnostic_initialize): Initialize to false.\n        (diagnostic_show_locus): New.\n        (diagnostic_report_diagnostic): Call it.\n\t(getenv_columns): New.\n\t(adjust_line): New.\n\t(diagnostic_set_caret_max_width): New.\n        * input.c (read_line): New.\n\t(location_get_source_line): New.\n        * input.h (location_get_source_line): Declare.\n        * toplev.c (general_init): Initialize show_caret from options.\n        * dwarf2out.c (gen_producer_string): Handle fdiagnostics-show-caret.\n        * opts.c (common_handle_option): Likewise.\n\t* pretty-print.h (pp_get_prefix): New.\n\t(pp_base_get_prefix): New.\n        * common.opt (fdiagnostics-show-caret): New option.\n\t* doc/invoke.texi (fdiagnostics-show-caret): Document it.\ntestsuite/\n        * lib/prune.exp: Add -fno-diagnostics-show-caret.\nlibstdc++-v3/\n\t* testsuite/lib/prune.exp: Handle caret.\nlibmudflap/\n\t* testsuite/lib/libmudflap.exp: Handle caret.\n\nFrom-SVN: r186305", "tree": {"sha": "9e780906c85f6be0ad543abba26314c0c15e5512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e780906c85f6be0ad543abba26314c0c15e5512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/comments", "author": null, "committer": null, "parents": [{"sha": "13a7578b180de6d8bb91a2f340817e71c61a9988", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a7578b180de6d8bb91a2f340817e71c61a9988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a7578b180de6d8bb91a2f340817e71c61a9988"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "b4a02ddde5b669a05375f244b0f3415fb5a7f50a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -1,3 +1,26 @@\n+2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 24985\n+        * diagnostic.h (show_caret): Declare.\n+\t(caret_max_width): Declare.\n+\t(diagnostic_show_locus): Declare.\n+        * diagnostic.c (diagnostic_initialize): Initialize to false.\n+        (diagnostic_show_locus): New.\n+        (diagnostic_report_diagnostic): Call it.\n+\t(getenv_columns): New.\n+\t(adjust_line): New.\n+\t(diagnostic_set_caret_max_width): New.\n+        * input.c (read_line): New.\n+\t(location_get_source_line): New.\n+        * input.h (location_get_source_line): Declare.\n+        * toplev.c (general_init): Initialize show_caret from options.\n+        * dwarf2out.c (gen_producer_string): Handle fdiagnostics-show-caret.\n+        * opts.c (common_handle_option): Likewise.\n+\t* pretty-print.h (pp_get_prefix): New.\n+\t(pp_base_get_prefix): New.\n+        * common.opt (fdiagnostics-show-caret): New option.\n+\t* doc/invoke.texi (fdiagnostics-show-caret): Document it.\n+\n 2012-04-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/52881"}, {"sha": "39f1679ab1a83a2f2533a280313bedd3d817241e", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -999,6 +999,10 @@ Enum(diagnostic_prefixing_rule) String(once) Value(DIAGNOSTICS_SHOW_PREFIX_ONCE)\n EnumValue\n Enum(diagnostic_prefixing_rule) String(every-line) Value(DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE)\n \n+fdiagnostics-show-caret\n+Common Var(flag_diagnostics_show_caret) Init(1)\n+Show the source line with a caret indicating the column\n+\n fdiagnostics-show-option\n Common Var(flag_diagnostics_show_option) Init(1)\n Amend appropriate diagnostic messages with the command line option that controls them"}, {"sha": "60773d3ac505dd257e60ccf657af63fa92f14503", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -78,6 +78,35 @@ file_name_as_prefix (const char *f)\n \n \n \f\n+/* Return the value of the getenv(\"COLUMNS\") as an integer. If the\n+   value is not set to a positive integer, then return INT_MAX.  */\n+static int\n+getenv_columns (void)\n+{\n+  const char * s = getenv (\"COLUMNS\");\n+  if (s != NULL) {\n+    int n = atoi (s);\n+    if (n > 0)\n+      return n;\n+  }\n+  return INT_MAX;\n+}\n+\n+/* Set caret_max_width to value.  */\n+void\n+diagnostic_set_caret_max_width (diagnostic_context *context, int value)\n+{\n+  /* One minus to account for the leading empty space.  */\n+  value = value ? value - 1 \n+    : (isatty (fileno (context->printer->buffer->stream))\n+       ? getenv_columns () - 1: INT_MAX);\n+  \n+  if (value <= 0) \n+    value = INT_MAX;\n+\n+  context->caret_max_width = value;\n+}\n+\n /* Initialize the diagnostic message outputting machinery.  */\n void\n diagnostic_initialize (diagnostic_context *context, int n_opts)\n@@ -100,6 +129,8 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->classify_diagnostic = XNEWVEC (diagnostic_t, n_opts);\n   for (i = 0; i < n_opts; i++)\n     context->classify_diagnostic[i] = DK_UNSPECIFIED;\n+  context->show_caret = false;\n+  diagnostic_set_caret_max_width (context, pp_line_cutoff (context->printer));\n   context->show_option_requested = false;\n   context->abort_on_error = false;\n   context->show_column = false;\n@@ -196,6 +227,72 @@ diagnostic_build_prefix (diagnostic_context *context,\n      : build_message_string (\"%s:%d: %s\", s.file, s.line, text));\n }\n \n+/* If LINE is longer than MAX_WIDTH, and COLUMN is not smaller than\n+   MAX_WIDTH by some margin, then adjust the start of the line such\n+   that the COLUMN is smaller than MAX_WIDTH minus the margin.  The\n+   margin is either 10 characters or the difference between the column\n+   and the length of the line, whatever is smaller.  */\n+static const char *\n+adjust_line (const char *line, int max_width, int *column_p)\n+{\n+  int right_margin = 10;\n+  int line_width = strlen (line);\n+  int column = *column_p;\n+\n+  right_margin = MIN(line_width - column, right_margin);\n+  right_margin = max_width - right_margin;\n+  if (line_width >= max_width && column > right_margin)\n+    {\n+      line += column - right_margin;\n+      *column_p = right_margin;\n+    }\n+  return line;\n+}\n+\n+/* Print the physical source line corresponding to the location of\n+   this diagnostics, and a caret indicating the precise column.  */\n+void\n+diagnostic_show_locus (diagnostic_context * context,\n+\t\t       const diagnostic_info *diagnostic)\n+{\n+  const char *line;\n+  char *buffer;\n+  expanded_location s;\n+  int max_width;\n+  const char *saved_prefix;\n+\n+\n+  if (!context->show_caret\n+      || diagnostic->location <= BUILTINS_LOCATION)\n+    return;\n+\n+  s = expand_location(diagnostic->location);\n+  line = location_get_source_line (s);\n+  if (line == NULL)\n+    return;\n+\n+  max_width = context->caret_max_width;\n+  line = adjust_line (line, max_width, &(s.column));\n+\n+  pp_newline (context->printer);\n+  saved_prefix = pp_get_prefix (context->printer);\n+  pp_set_prefix (context->printer, NULL);\n+  pp_character (context->printer, ' ');\n+  while (max_width > 0 && *line != '\\0')\n+    {\n+      char c = *line == '\\t' ? ' ' : *line;\n+      pp_character (context->printer, c);\n+      max_width--;\n+      line++;\n+    }\n+  pp_newline (context->printer);\n+  /* pp_printf does not implement %*c.  */\n+  buffer = XALLOCAVEC (char, s.column + 3);\n+  snprintf (buffer, s.column + 3, \" %*c\", s.column, '^');\n+  pp_string (context->printer, buffer);\n+  pp_set_prefix (context->printer, saved_prefix);\n+}\n+\n /* Take any action which is expected to happen after the diagnostic\n    is written out.  This function does not always return.  */\n static void\n@@ -547,6 +644,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   pp_format (context->printer, &diagnostic->message);\n   (*diagnostic_starter (context)) (context, diagnostic);\n   pp_output_formatted_text (context->printer);\n+  diagnostic_show_locus (context, diagnostic);\n   (*diagnostic_finalizer (context)) (context, diagnostic);\n   pp_flush (context->printer);\n   diagnostic_action_after_output (context, diagnostic);"}, {"sha": "63eb38529588ff801134ee6574dffc2727728f42", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -99,6 +99,13 @@ struct diagnostic_context\n   int *push_list;\n   int n_push;\n \n+  /* True if we should print the source line with a caret indicating\n+     the location.  */\n+  bool show_caret;\n+\n+  /* Maximum width of the source line printed.  */\n+  int caret_max_width;\n+\n   /* True if we should print the command line option which controls\n      each diagnostic, if known.  */\n   bool show_option_requested;\n@@ -254,6 +261,7 @@ extern diagnostic_context *global_dc;\n extern void diagnostic_initialize (diagnostic_context *, int);\n extern void diagnostic_finish (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *, location_t);\n+extern void diagnostic_show_locus (diagnostic_context *, const diagnostic_info *);\n \n /* Force diagnostics controlled by OPTIDX to be kind KIND.  */\n extern diagnostic_t diagnostic_classify_diagnostic (diagnostic_context *,\n@@ -275,6 +283,8 @@ extern void diagnostic_set_info_translated (diagnostic_info *, const char *,\n extern char *diagnostic_build_prefix (diagnostic_context *, diagnostic_info *);\n void default_diagnostic_starter (diagnostic_context *, diagnostic_info *);\n void default_diagnostic_finalizer (diagnostic_context *, diagnostic_info *);\n+void diagnostic_set_caret_max_width (diagnostic_context *context, int value);\n+\n \n /* Pure text formatting support functions.  */\n extern char *file_name_as_prefix (const char *);"}, {"sha": "2dde9c74147d1524c0dec0d4a2ad769ff16af206", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -230,7 +230,7 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Language Independent Options,,Options to Control Diagnostic Messages Formatting}.\n @gccoptlist{-fmessage-length=@var{n}  @gol\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n--fno-diagnostics-show-option}\n+-fno-diagnostics-show-option -fno-diagnostics-show-caret}\n \n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n@@ -2894,6 +2894,13 @@ command-line option that directly controls the diagnostic (if such an\n option is known to the diagnostic machinery).  Specifying the\n @option{-fno-diagnostics-show-option} flag suppresses that behavior.\n \n+@item -fno-diagnostics-show-caret\n+@opindex fno-diagnostics-show-caret\n+@opindex fdiagnostics-show-caret\n+By default, each diagnostic emitted includes the original source line\n+and a caret '^' indicating the column.  This option suppresses this\n+information.\n+\n @end table\n \n @node Warning Options"}, {"sha": "7e2ce58ae4519828859aa3c75366120f9a8c0e13", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -18369,6 +18369,7 @@ gen_producer_string (void)\n       case OPT__output_pch_:\n       case OPT_fdiagnostics_show_location_:\n       case OPT_fdiagnostics_show_option:\n+      case OPT_fdiagnostics_show_caret:\n       case OPT_fverbose_asm:\n       case OPT____:\n       case OPT__sysroot_:"}, {"sha": "bf5fe481fdfdb6054068588907da4df29d7d8d88", "filename": "gcc/input.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -50,6 +50,65 @@ expand_location (source_location loc)\n   return xloc;\n }\n \n+/* Reads one line from file into a static buffer.  */\n+static const char *\n+read_line (FILE *file)\n+{\n+  static char *string;\n+  static size_t string_len;\n+  size_t pos = 0;\n+  char *ptr;\n+\n+  if (!string_len)\n+    {\n+      string_len = 200;\n+      string = XNEWVEC (char, string_len);\n+    }\n+\n+  while ((ptr = fgets (string + pos, string_len - pos, file)))\n+    {\n+      size_t len = strlen (string + pos);\n+\n+      if (string[pos + len - 1] == '\\n')\n+\t{\n+\t  string[pos + len - 1] = 0;\n+\t  return string;\n+\t}\n+      pos += len;\n+      ptr = XNEWVEC (char, string_len * 2);\n+      if (ptr)\n+\t{\n+\t  memcpy (ptr, string, pos);\n+\t  string = ptr;\n+\t  string_len += 2;\n+\t}\n+      else\n+\tpos = 0;\n+    }\n+      \n+  return pos ? string : NULL;\n+}\n+\n+/* Return the physical source line that corresponds to xloc in a\n+   buffer that is statically allocated.  The newline is replaced by\n+   the null character.  */\n+\n+const char *\n+location_get_source_line(expanded_location xloc)\n+{\n+  const char *buffer;\n+  int lines = 1;\n+  FILE *stream = xloc.file ? fopen (xloc.file, \"r\") : NULL;\n+  if (!stream)\n+    return NULL;\n+\n+  while ((buffer = read_line (stream)) && lines < xloc.line)\n+    lines++;\n+\n+  fclose (stream);\n+  return buffer;\n+}\n+\n #define ONE_K 1024\n #define ONE_M (ONE_K * ONE_K)\n "}, {"sha": "4b152228fc40934252ff7721f65f76ad3c36f912", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -38,6 +38,7 @@ extern char builtins_location_check[(BUILTINS_LOCATION\n \t\t\t\t     < RESERVED_LOCATION_COUNT) ? 1 : -1];\n \n extern expanded_location expand_location (source_location);\n+extern const char * location_get_source_line(expanded_location xloc);\n \n /* Historically GCC used location_t, while cpp used source_location.\n    This could be removed but it hardly seems worth the effort.  */"}, {"sha": "4e8b3c033fee06fbb105689d4e75305b50e94e36", "filename": "gcc/opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -1499,6 +1499,10 @@ common_handle_option (struct gcc_options *opts,\n     case OPT_fdiagnostics_show_location_:\n       diagnostic_prefixing_rule (dc) = (diagnostic_prefixing_rule_t) value;\n       break;\n+ \n+    case OPT_fdiagnostics_show_caret:\n+      dc->show_caret = value;\n+      break;\n \n     case OPT_fdiagnostics_show_option:\n       dc->show_option_requested = value;\n@@ -1539,6 +1543,7 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_fmessage_length_:\n       pp_set_line_maximum_length (dc->printer, value);\n+      diagnostic_set_caret_max_width (dc, value);\n       break;\n \n     case OPT_fpack_struct_:"}, {"sha": "a7b5a9fbbbad90c61e13b1673400decc0ee16eed", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -201,6 +201,9 @@ struct pretty_print_info\n #define pp_set_line_maximum_length(PP, L) \\\n    pp_base_set_line_maximum_length (pp_base (PP), L)\n #define pp_set_prefix(PP, P)    pp_base_set_prefix (pp_base (PP), P)\n+#define pp_get_prefix(PP)       pp_base_get_prefix (pp_base (PP))\n+static inline const char *\n+pp_base_get_prefix (const pretty_printer *pp) { return pp->prefix; }\n #define pp_destroy_prefix(PP)   pp_base_destroy_prefix (pp_base (PP))\n #define pp_remaining_character_count_for_line(PP) \\\n   pp_base_remaining_character_count_for_line (pp_base (PP))"}, {"sha": "61d83ffeedc5d0918fbe102f2e05c32a70782f5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 24985\n+        * lib/prune.exp: Add -fno-diagnostics-show-caret.\n+\n 2012-04-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/52881"}, {"sha": "d2ba49e9db04335844002a227d5d99c5344f4ba8", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -17,6 +17,8 @@\n \n # Prune messages from gcc that aren't useful.\n \n+set TEST_ALWAYS_FLAGS \"-fno-diagnostics-show-caret $TEST_ALWAYS_FLAGS\"\n+\n proc prune_gcc_output { text } {\n     #send_user \"Before:$text\\n\"\n "}, {"sha": "51d52e1c8dd77bb6feb1f54d74dd32c9a9b18aa1", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -1169,6 +1169,8 @@ general_init (const char *argv0)\n   /* Set a default printer.  Language specific initializations will\n      override it later.  */\n   pp_format_decoder (global_dc->printer) = &default_tree_printer;\n+  global_dc->show_caret\n+    = global_options_init.x_flag_diagnostics_show_caret;\n   global_dc->show_option_requested\n     = global_options_init.x_flag_diagnostics_show_option;\n   global_dc->show_column"}, {"sha": "9fb1cac7758b2cfad75fe5906655138551447769", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 24985\n+\t* testsuite/lib/libmudflap.exp: Handle caret.\n+\n 2012-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libmudflap/40778"}, {"sha": "00699e87b756a84e76099eeb3502f95b6ae91451", "filename": "libmudflap/testsuite/lib/libmudflap.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -298,6 +298,9 @@ proc libmudflap-dg-prune { system text } {\n \n \n proc prune_gcc_output { text } {\n+    # Ignore caret diagnostics. Unfortunately dejaGNU trims leading\n+    # spaces, so one cannot rely on them being present.\n+    regsub -all \"(^|\\n)\\[^\\n\\]+\\n *\\\\^\\n\" $text \"\\n\" text\n     regsub -all {(^|\\n)[^\\n]*ld: warning: libgcc_s[^\\n]*not found[^\\n]*try using[^\\n]*} $text \"\" text\n     regsub -all {(^|\\n)[^\\n]*In function.*pthread_create[^\\n]*} $text \"\" text\n     regsub -all {(^|\\n)[^\\n]*the use of .pthread.*is deprecated[^\\n]*} $text \"\" text"}, {"sha": "ba608fec0351b5d94dc918a400db71bcb8c1d91f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 24985\n+\t* testsuite/lib/prune.exp: Handle caret.\n+\n 2012-04-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPartially revert:"}, {"sha": "a2371c60d5fe77d4697ab4977abe97d9b795bfba", "filename": "libstdc++-v3/testsuite/lib/prune.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fec00429dd36ea51798afeaf5f6b9c1987b85cd/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fprune.exp?ref=9fec00429dd36ea51798afeaf5f6b9c1987b85cd", "patch": "@@ -32,6 +32,12 @@ proc dg-prune-output { args } {\n proc libstdc++-dg-prune { system text } {\n     global additional_prunes\n \n+#    send_user \"Before:$text\\n\"\n+\n+    # Ignore caret diagnostics. Unfortunately dejaGNU trims leading\n+    # spaces, so one cannot rely on them being present.\n+    regsub -all \"(^|\\n)\\[^\\n\\]+\\n *\\\\^\\n\" $text \"\\n\" text\n+\n     # Cygwin warns about -ffunction-sections\n     regsub -all \"(^|\\n)\\[^\\n\\]*: -ffunction-sections may affect debugging on some targets\\[^\\n\\]*\" $text \"\" text\n \n@@ -68,5 +74,6 @@ proc libstdc++-dg-prune { system text } {\n \t}\n     }\n \n+#    send_user \"After:$text\\n\"\n     return $text\n }"}]}