{"sha": "92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlMjlhNWU4NmM4YWRjODhlZTE3YTQ4M2Q3Mjg0ZDdiYjllMDkwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-28T11:27:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-28T11:27:45Z"}, "message": "re PR middle-end/81502 (In some cases the data is moved to memory unnecessarily [partial regression])\n\n2017-07-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81502\n\t* match.pd: Add pattern combining BIT_INSERT_EXPR with\n\tBIT_FIELD_REF.\n\t* tree-cfg.c (verify_expr): Verify types of BIT_FIELD_REF\n\tsize/pos operands.\n\t(verify_gimple_assign_ternary): Likewise for BIT_INSERT_EXPR pos.\n\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Use bitsizetype\n\tfor BIT_FIELD_REF args.\n\t* fold-const.c (make_bit_field_ref): Likewise.\n\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Likewise.\n\n\t* gcc.target/i386/pr81502.c: New testcase.\n\nFrom-SVN: r250659", "tree": {"sha": "7c89972072bd6357aef834097b5e62e1378d814d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c89972072bd6357aef834097b5e62e1378d814d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9b39a4955f56fe609ef54784f7bf48c4cba6b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b39a4955f56fe609ef54784f7bf48c4cba6b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b39a4955f56fe609ef54784f7bf48c4cba6b1a"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "964fa1cdc9cf6b9b75a6459aebb60d03f26a7035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -1,3 +1,16 @@\n+2017-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81502\n+\t* match.pd: Add pattern combining BIT_INSERT_EXPR with\n+\tBIT_FIELD_REF.\n+\t* tree-cfg.c (verify_expr): Verify types of BIT_FIELD_REF\n+\tsize/pos operands.\n+\t(verify_gimple_assign_ternary): Likewise for BIT_INSERT_EXPR pos.\n+\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Use bitsizetype\n+\tfor BIT_FIELD_REF args.\n+\t* fold-const.c (make_bit_field_ref): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_simd_clone_call): Likewise.\n+\n 2017-07-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80998"}, {"sha": "ae94659652819b5fde990832d7933a65ec740691", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -3936,7 +3936,7 @@ make_bit_field_ref (location_t loc, tree inner, tree orig_inner, tree type,\n     bftype = build_nonstandard_integer_type (bitsize, 0);\n \n   result = build3_loc (loc, BIT_FIELD_REF, bftype, inner,\n-\t\t       size_int (bitsize), bitsize_int (bitpos));\n+\t\t       bitsize_int (bitsize), bitsize_int (bitpos));\n   REF_REVERSE_STORAGE_ORDER (result) = reversep;\n \n   if (bftype != type)"}, {"sha": "d82d0606cbeff6c20fc500007e3397e4f8b8ccfc", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -4245,7 +4245,7 @@ maybe_canonicalize_mem_ref_addr (tree *t)\n \t\t\t\t       TREE_TYPE (*t),\n \t\t\t\t       TREE_OPERAND (TREE_OPERAND (*t, 0), 0),\n \t\t\t\t       TYPE_SIZE (TREE_TYPE (*t)),\n-\t\t\t\t       wide_int_to_tree (sizetype, idx));\n+\t\t\t\t       wide_int_to_tree (bitsizetype, idx));\n \t\t      res = true;\n \t\t    }\n \t\t}"}, {"sha": "60f262d59267d24dcbc05023d6e91909a15589a8", "filename": "gcc/match.pd", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -4178,3 +4178,25 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t { CONSTRUCTOR_ELT (ctor, idx / k)->value; })\n \t(BIT_FIELD_REF { CONSTRUCTOR_ELT (ctor, idx / k)->value; }\n \t\t       @1 { bitsize_int ((idx % k) * width); })))))))))\n+\n+/* Simplify a bit extraction from a bit insertion for the cases with\n+   the inserted element fully covering the extraction or the insertion\n+   not touching the extraction.  */\n+(simplify\n+ (BIT_FIELD_REF (bit_insert @0 @1 @ipos) @rsize @rpos)\n+ (with\n+  {\n+    unsigned HOST_WIDE_INT isize;\n+    if (INTEGRAL_TYPE_P (TREE_TYPE (@1)))\n+      isize = TYPE_PRECISION (TREE_TYPE (@1));\n+    else\n+      isize = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (@1)));\n+  }\n+  (switch\n+   (if (wi::leu_p (@ipos, @rpos)\n+        && wi::leu_p (wi::add (@rpos, @rsize), wi::add (@ipos, isize)))\n+    (BIT_FIELD_REF @1 @rsize { wide_int_to_tree (bitsizetype,\n+                                                 wi::sub (@rpos, @ipos)); }))\n+   (if (wi::geu_p (@ipos, wi::add (@rpos, @rsize))\n+        || wi::geu_p (@rpos, wi::add (@ipos, isize)))\n+    (BIT_FIELD_REF @0 @rsize @rpos)))))"}, {"sha": "396f0b1fa982be98166b7833a9b98cdcae3ab3b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -1,3 +1,8 @@\n+2017-07-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81502\n+\t* gcc.target/i386/pr81502.c: New testcase.\n+\n 2017-07-28  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/81460"}, {"sha": "d28791aacd7c8b88ae755c55e2c9558d5d340cf2", "filename": "gcc/testsuite/gcc.target/i386/pr81502.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81502.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81502.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr81502.c?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+#define SIZE (sizeof (void *))\n+\n+static int foo(unsigned char (*foo)[SIZE])\n+{\n+  __m128i acc = _mm_set_epi32(0, 0, 0, 0);\n+  size_t i = 0;\n+  for(; i + sizeof(__m128i) <= SIZE; i += sizeof(__m128i)) {\n+      __m128i word;\n+      __builtin_memcpy(&word, foo + i, sizeof(__m128i));\n+      acc = _mm_add_epi32(word, acc);\n+  }\n+  if (i != SIZE) {\n+      __m128i word = _mm_set_epi32(0, 0, 0, 0);\n+      __builtin_memcpy(&word, foo + i, SIZE - i); // (1)\n+      acc = _mm_add_epi32(word, acc);\n+  }\n+  int res;\n+  __builtin_memcpy(&res, &acc, sizeof(res));\n+  return res;\n+}\n+\n+int bar(void *ptr)\n+{\n+  unsigned char buf[SIZE];\n+  __builtin_memcpy(buf, &ptr, SIZE);\n+  return foo((unsigned char(*)[SIZE])buf);\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\" 1 } } */"}, {"sha": "733c92fcdd0914bf3957bcc6ca69704927661c61", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -3054,7 +3054,9 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t  tree t1 = TREE_OPERAND (t, 1);\n \t  tree t2 = TREE_OPERAND (t, 2);\n \t  if (!tree_fits_uhwi_p (t1)\n-\t      || !tree_fits_uhwi_p (t2))\n+\t      || !tree_fits_uhwi_p (t2)\n+\t      || !types_compatible_p (bitsizetype, TREE_TYPE (t1))\n+\t      || !types_compatible_p (bitsizetype, TREE_TYPE (t2)))\n \t    {\n \t      error (\"invalid position or size operand to BIT_FIELD_REF\");\n \t      return t;\n@@ -4248,6 +4250,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  return true;\n \t}\n       if (! tree_fits_uhwi_p (rhs3)\n+\t  || ! types_compatible_p (bitsizetype, TREE_TYPE (rhs3))\n \t  || ! tree_fits_uhwi_p (TYPE_SIZE (rhs2_type)))\n \t{\n \t  error (\"invalid position or size in BIT_INSERT_EXPR\");"}, {"sha": "18dd1a4df32bfe64f24241f5a18e9d37863c6397", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92e29a5e86c8adc88ee17a483d7284d7bb9e090c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=92e29a5e86c8adc88ee17a483d7284d7bb9e090c", "patch": "@@ -3531,7 +3531,7 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t      arginfo[i].op = vec_oprnd0;\n \t\t      vec_oprnd0\n \t\t\t= build3 (BIT_FIELD_REF, atype, vec_oprnd0,\n-\t\t\t\t  size_int (prec),\n+\t\t\t\t  bitsize_int (prec),\n \t\t\t\t  bitsize_int ((m & (k - 1)) * prec));\n \t\t      new_stmt\n \t\t\t= gimple_build_assign (make_ssa_name (atype),\n@@ -3692,7 +3692,7 @@ vectorizable_simd_clone_call (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t    }\n \t\t  else\n \t\t    t = build3 (BIT_FIELD_REF, vectype, new_temp,\n-\t\t\t\tsize_int (prec), bitsize_int (l * prec));\n+\t\t\t\tbitsize_int (prec), bitsize_int (l * prec));\n \t\t  new_stmt\n \t\t    = gimple_build_assign (make_ssa_name (vectype), t);\n \t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);"}]}