{"sha": "4073ce2c4e5584c1be58fbe76dd66285de2529bb", "node_id": "C_kwDOANBUbNoAKDQwNzNjZTJjNGU1NTg0YzFiZTU4ZmJlNzZkZDY2Mjg1ZGUyNTI5YmI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-12T14:53:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-04-12T14:53:23Z"}, "message": "i386: Fix up z operand modifier diagnostics on inline-asm [PR109458]\n\nOn the following testcase, we emit weird diagnostics.\nUser used the z modifier, but diagnostics talks about Z instead.\nThis is because z is implemented by doing some stuff and then falling\nthrough into the Z case.\n\nThe following patch adjusts the Z diagnostics, such that it prints whatever\nmodifier user actually uses in places which could happen with either\nmodifier.\n\nFurthermore, in case of the non-integer operand used with operand code %<z%>\nwarning the warning location was incorrect (and of function), so I've used\nwarning_for_asm to get it a proper location in case it is a user inline-asm.\n\n2023-04-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/109458\n\t* config/i386/i386.cc: Include rtl-error.h.\n\t(ix86_print_operand): For z modifier warning, use warning_for_asm\n\tif this_is_asm_operands.  For Z modifier errors, use %c and code\n\tinstead of hardcoded Z.\n\n\t* gcc.target/i386/pr109458.c: New test.", "tree": {"sha": "086630be3d58c3d7d0c01952019573ba0e92d291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/086630be3d58c3d7d0c01952019573ba0e92d291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4073ce2c4e5584c1be58fbe76dd66285de2529bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4073ce2c4e5584c1be58fbe76dd66285de2529bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4073ce2c4e5584c1be58fbe76dd66285de2529bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4073ce2c4e5584c1be58fbe76dd66285de2529bb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3beeebd6934654f3453209730b98c7a1fd0305b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3beeebd6934654f3453209730b98c7a1fd0305b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3beeebd6934654f3453209730b98c7a1fd0305b6"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "fbd33a6bfd1283bc63801b84c634f97c0c0f95b9", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4073ce2c4e5584c1be58fbe76dd66285de2529bb/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4073ce2c4e5584c1be58fbe76dd66285de2529bb/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=4073ce2c4e5584c1be58fbe76dd66285de2529bb", "patch": "@@ -96,6 +96,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"i386-expand.h\"\n #include \"i386-features.h\"\n #include \"function-abi.h\"\n+#include \"rtl-error.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -13218,7 +13219,13 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    }\n \n \t  if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n-\t    warning (0, \"non-integer operand used with operand code %<z%>\");\n+\t    {\n+\t      if (this_is_asm_operands)\n+\t\twarning_for_asm (this_is_asm_operands,\n+\t\t\t\t \"non-integer operand used with operand code %<z%>\");\n+\t      else\n+\t\twarning (0, \"non-integer operand used with operand code %<z%>\");\n+\t    }\n \t  /* FALLTHRU */\n \n \tcase 'Z':\n@@ -13281,11 +13288,12 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  else\n \t    {\n \t      output_operand_lossage (\"invalid operand type used with \"\n-\t\t\t\t      \"operand code 'Z'\");\n+\t\t\t\t      \"operand code '%c'\", code);\n \t      return;\n \t    }\n \n-\t  output_operand_lossage (\"invalid operand size for operand code 'Z'\");\n+\t  output_operand_lossage (\"invalid operand size for operand code '%c'\",\n+\t\t\t\t  code);\n \t  return;\n \n \tcase 'd':"}, {"sha": "abd0ed222112cba18b7c64b85e92842c1194a49a", "filename": "gcc/testsuite/gcc.target/i386/pr109458.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4073ce2c4e5584c1be58fbe76dd66285de2529bb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109458.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4073ce2c4e5584c1be58fbe76dd66285de2529bb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109458.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr109458.c?ref=4073ce2c4e5584c1be58fbe76dd66285de2529bb", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/109458 */\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2\" } */\n+\n+void\n+foo (_Float16 x)\n+{\n+  asm volatile (\"# %z0\" : : \"i\" (42));\t/* { dg-error \"invalid 'asm': invalid operand type used with operand code 'z'\" } */\n+  asm volatile (\"# %Z0\" : : \"i\" (42));\t/* { dg-error \"invalid 'asm': invalid operand type used with operand code 'Z'\" } */\n+  asm volatile (\"# %z0\" : : \"x\" (x));\t/* { dg-error \"invalid 'asm': invalid operand size for operand code 'z'\" } */\n+\t\t\t\t\t/* { dg-warning \"non-integer operand used with operand code 'z'\" \"\" { target *-*-* } .-1 } */\n+  asm volatile (\"# %Z0\" : : \"x\" (x));\t/* { dg-error \"invalid 'asm': invalid operand size for operand code 'Z'\" } */\n+}"}]}