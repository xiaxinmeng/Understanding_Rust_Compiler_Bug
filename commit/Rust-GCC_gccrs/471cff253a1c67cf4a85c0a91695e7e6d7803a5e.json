{"sha": "471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "node_id": "C_kwDOANBUbNoAKDQ3MWNmZjI1M2ExYzY3Y2Y0YTg1YzBhOTE2OTVlN2U2ZDc4MDNhNWU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-28T08:10:07Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-28T08:23:31Z"}, "message": "ast: Add location info to remaining meta items", "tree": {"sha": "be2cc0785ed1ca6b71fa40c91ebc0b3cdbcf0ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be2cc0785ed1ca6b71fa40c91ebc0b3cdbcf0ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471cff253a1c67cf4a85c0a91695e7e6d7803a5e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb38df2eb370eacdf35f6273d6c450eb4940a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb38df2eb370eacdf35f6273d6c450eb4940a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb38df2eb370eacdf35f6273d6c450eb4940a21"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "92325f1e4f3923d2635db555c76267bc6212eb60", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471cff253a1c67cf4a85c0a91695e7e6d7803a5e/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471cff253a1c67cf4a85c0a91695e7e6d7803a5e/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "patch": "@@ -4118,14 +4118,14 @@ AttributeParser::parse_meta_item_inner ()\n       return parse_path_meta_item ();\n     }\n \n-  auto &identifier = peek_token ();\n+  auto ident = peek_token ()->as_string ();\n+  auto ident_locus = peek_token ()->get_locus ();\n+\n   if (is_end_meta_item_tok (peek_token (1)->get_id ()))\n     {\n       // meta word syntax\n       skip_token ();\n-      // FIXME: We probably need a Location here as well\n-      return std::unique_ptr<MetaWord> (\n-\tnew MetaWord (identifier->as_string (), identifier->get_locus ()));\n+      return std::unique_ptr<MetaWord> (new MetaWord (ident, ident_locus));\n     }\n \n   if (peek_token (1)->get_id () == EQUAL)\n@@ -4145,9 +4145,8 @@ AttributeParser::parse_meta_item_inner ()\n \t  std::string raw_value = unquote_string (std::move (value));\n \n \t  return std::unique_ptr<MetaNameValueStr> (\n-\t    new MetaNameValueStr (identifier->as_string (),\n-\t\t\t\t  identifier->get_locus (),\n-\t\t\t\t  std::move (raw_value), locus));\n+\t    new MetaNameValueStr (ident, ident_locus, std::move (raw_value),\n+\t\t\t\t  locus));\n \t}\n       else\n \t{\n@@ -4189,7 +4188,7 @@ AttributeParser::parse_meta_item_inner ()\n   if (!meta_name_value_str_items.empty ())\n     {\n       return std::unique_ptr<MetaListNameValueStr> (\n-\tnew MetaListNameValueStr (identifier->as_string (),\n+\tnew MetaListNameValueStr (ident, ident_locus,\n \t\t\t\t  std::move (meta_name_value_str_items)));\n     }\n \n@@ -4228,7 +4227,7 @@ AttributeParser::parse_meta_item_inner ()\n   if (!path_items.empty ())\n     {\n       return std::unique_ptr<MetaListPaths> (\n-\tnew MetaListPaths (identifier->as_string (), std::move (path_items)));\n+\tnew MetaListPaths (ident, ident_locus, std::move (path_items)));\n     }\n \n   rust_error_at (Linemap::unknown_location (),\n@@ -4749,8 +4748,7 @@ MetaListPaths::to_attribute () const\n \n   std::unique_ptr<AttrInputMetaItemContainer> new_seq_container (\n     new AttrInputMetaItemContainer (std::move (new_seq)));\n-  // FIXME: How do we get a location here?\n-  return Attribute (SimplePath::from_str (ident, Location ()),\n+  return Attribute (SimplePath::from_str (ident, ident_locus),\n \t\t    std::move (new_seq_container));\n }\n \n@@ -4765,8 +4763,7 @@ MetaListNameValueStr::to_attribute () const\n \n   std::unique_ptr<AttrInputMetaItemContainer> new_seq_container (\n     new AttrInputMetaItemContainer (std::move (new_seq)));\n-  // FIXME: How do we get a location here?\n-  return Attribute (SimplePath::from_str (ident, Location ()),\n+  return Attribute (SimplePath::from_str (ident, ident_locus),\n \t\t    std::move (new_seq_container));\n }\n "}, {"sha": "1bf8912083a05d4ca84bf5446b4b3fc1f7847421", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/471cff253a1c67cf4a85c0a91695e7e6d7803a5e/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/471cff253a1c67cf4a85c0a91695e7e6d7803a5e/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "patch": "@@ -829,11 +829,14 @@ class MetaNameValueStr : public MetaItem\n class MetaListPaths : public MetaItem\n {\n   Identifier ident;\n+  Location ident_locus;\n   std::vector<SimplePath> paths;\n \n public:\n-  MetaListPaths (Identifier ident, std::vector<SimplePath> paths)\n-    : ident (std::move (ident)), paths (std::move (paths))\n+  MetaListPaths (Identifier ident, Location ident_locus,\n+\t\t std::vector<SimplePath> paths)\n+    : ident (std::move (ident)), ident_locus (ident_locus),\n+      paths (std::move (paths))\n   {}\n \n   std::string as_string () const override;\n@@ -860,13 +863,14 @@ class MetaListPaths : public MetaItem\n class MetaListNameValueStr : public MetaItem\n {\n   Identifier ident;\n+  Location ident_locus;\n   std::vector<MetaNameValueStr> strs;\n \n-  // FIXME add location info\n-\n public:\n-  MetaListNameValueStr (Identifier ident, std::vector<MetaNameValueStr> strs)\n-    : ident (std::move (ident)), strs (std::move (strs))\n+  MetaListNameValueStr (Identifier ident, Location ident_locus,\n+\t\t\tstd::vector<MetaNameValueStr> strs)\n+    : ident (std::move (ident)), ident_locus (ident_locus),\n+      strs (std::move (strs))\n   {}\n \n   std::string as_string () const override;"}]}