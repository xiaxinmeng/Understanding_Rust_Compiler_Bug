{"sha": "5acd5cf07262141100da18e8dc227ed4e073ac8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjZDVjZjA3MjYyMTQxMTAwZGExOGU4ZGMyMjdlZDRlMDczYWM4Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-30T19:29:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-30T19:29:02Z"}, "message": "ChangeLog: Fix whitespace.\n\n\t* ChangeLog: Fix whitespace.\n\t* testsuite/ChangeLog: Ditto.\n\nFrom-SVN: r212170", "tree": {"sha": "5927c0fd28d172068fbf7d93f0c4d2b10ec95cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5927c0fd28d172068fbf7d93f0c4d2b10ec95cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5acd5cf07262141100da18e8dc227ed4e073ac8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acd5cf07262141100da18e8dc227ed4e073ac8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acd5cf07262141100da18e8dc227ed4e073ac8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acd5cf07262141100da18e8dc227ed4e073ac8c/comments", "author": null, "committer": null, "parents": [{"sha": "96a4066f86ff71a414783c9b170c99fa141ee320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a4066f86ff71a414783c9b170c99fa141ee320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a4066f86ff71a414783c9b170c99fa141ee320"}], "stats": {"total": 100, "additions": 47, "deletions": 53}, "files": [{"sha": "7692bfb88c7b1706b13eb92faaf692982d251057", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 48, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acd5cf07262141100da18e8dc227ed4e073ac8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acd5cf07262141100da18e8dc227ed4e073ac8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5acd5cf07262141100da18e8dc227ed4e073ac8c", "patch": "@@ -35,8 +35,8 @@\n \n 2014-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* ira-build.c (sort_conflict_id_map): Don't call\n-\tqsort if num is 0, as ira_object_id_map might be NULL, or 1.\n+\t* ira-build.c (sort_conflict_id_map): Don't call qsort if num is 0,\n+\tas ira_object_id_map might be NULL, or 1.\n \n 2014-06-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n@@ -61,56 +61,46 @@\n \n 2014-06-29  Roman Gareev  <gareevroman@gmail.com>\n \n-\t* Makefile.in:\n-\tAdd the compilation of graphite-isl-ast-to-gimple.o.\n-\t* common.opt:\n-\tAdd new switch fgraphite-code-generator=[isl|cloog].\n-\t* flag-types.h:\n-\tAdd new enum fgraphite_generator.\n+\t* Makefile.in: Add the compilation of graphite-isl-ast-to-gimple.o.\n+\t* common.opt: Add new switch fgraphite-code-generator=[isl|cloog].\n+\t* flag-types.h: Add new enum fgraphite_generator.\n \t* graphite-isl-ast-to-gimple.c: New.\n \t* graphite-isl-ast-to-gimple.h: New.\n-\t* graphite.c (graphite_transform_loops):\n-\tAdd choice of Graphite code generator,\n-\twhich depends on flag_graphite_code_gen.\n-\n-\ttestsuite/gcc.dg/graphite/isl-codegen-loop-dumping.c:\n-\tNew testcase that checks that the dump is generated.\n+\t* graphite.c (graphite_transform_loops): Add choice of Graphite\n+\tcode generator, which depends on flag_graphite_code_gen.\n \n 2014-06-29  Roman Gareev  <gareevroman@gmail.com>\n \n-\t* graphite-dependences.c (subtract_commutative_associative_deps): \n-\tAdd NULL checking of the following variables: must_raw_no_source, \n-\tmay_raw_no_source, must_war_no_source, may_war_no_source, \n-\tmust_waw_no_source, may_waw_no_source, must_raw, may_raw, \n-\tmust_war, may_war, must_waw, may_waw\n-\n-\ttestsuite/gfortran.dg/graphite/pr59586.f: New testcase.\n+\t* graphite-dependences.c (subtract_commutative_associative_deps):\n+\tAdd NULL checking of the following variables: must_raw_no_source,\n+\tmay_raw_no_source, must_war_no_source, may_war_no_source,\n+\tmust_waw_no_source, may_waw_no_source, must_raw, may_raw,\n+\tmust_war, may_war, must_waw, may_waw.\n \n 2014-06-29  Roman Gareev  <gareevroman@gmail.com>\n \n-\t* graphite-clast-to-gimple.c:\n-\tgloog is renamed to graphite_regenerate_ast_cloog.\n-\tgloog_error is renamed to graphite_regenerate_error.\n-\t* graphite-clast-to-gimple.h:\n-\tThe definition of the struct bb_pbb_def is moved to graphite-htab.h.\n+\t* graphite-clast-to-gimple.c: gloog is renamed to\n+\tgraphite_regenerate_ast_cloog.  gloog_error is renamed to\n+\tgraphite_regenerate_error.\n+\t* graphite-clast-to-gimple.h: The definition of the struct\n+\tbb_pbb_def is moved to graphite-htab.h.\n \tAdd inclusion of the hash-table.h.\n-\t* graphite-htab.h:\n-\tThe declaration of the function gloog is moved\n+\t* graphite-htab.h: The declaration of the function gloog is moved\n \tto graphite-clast-to-gimple.h and renamed to\n \tgraphite_regenerate_ast_cloog.\n-\t* graphite.c (graphite_transform_loops):\n-\tgloog is renamed to graphite_regenerate_ast_cloog.\n+\t* graphite.c (graphite_transform_loops): gloog is renamed\n+\tto graphite_regenerate_ast_cloog.\n \n 2014-06-28  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Stream if type\n-\tis complete.\n-\t(write_ts_type_common_tree_pointers): Do not stream fields not set for incomplete\n-\ttypes; do not stream duplicated fields for variants; sanity check that variant\n-\tand type match.\n-\t(write_ts_type_non_common_tree_pointers): Likewise.\n-\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Mark in TYPE_SIZE whether\n+\t* tree-streamer-out.c (pack_ts_type_common_value_fields): Stream if\n \ttype is complete.\n+\t(write_ts_type_common_tree_pointers): Do not stream fields not set\n+\tfor incomplete types; do not stream duplicated fields for variants;\n+\tsanity check that variant and type match.\n+\t(write_ts_type_non_common_tree_pointers): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_type_common_value_fields): Mark in\n+\tTYPE_SIZE whether type is complete.\n \t(lto_input_ts_type_common_tree_pointers): Do same changes as in\n \twrite_ts_type_common_tree_pointers\n \t(lto_input_ts_type_non_common_tree_pointers): Likewise.\n@@ -140,15 +130,15 @@\n \t(get_odr_type): Sanity check that binfos points to main variants.\n \t(get_class_context): Be sure the context's outer_type is main variant.\n \t(contains_type_p): Walk main variant.\n-\t(get_polymorphic_call_info_for_decl): Set outer_type to be main variant.\n+\t(get_polymorphic_call_info_for_decl): Set outer_type to be\n+\tmain variant.\n \t(get_polymorphic_call_info): Likewise.\n-\t(possible_polymorphic_call_targets): Sanity check that we operate on main\n-\tvariant.\n+\t(possible_polymorphic_call_targets): Sanity check that we operate\n+\ton main variant.\n \n 2014-06-28  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* stor-layout.c (finish_builtin_struct): Copy fields into\n-\tthe variants.\n+\t* stor-layout.c (finish_builtin_struct): Copy fields into the variants.\n \n 2014-06-28  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n@@ -159,22 +149,19 @@\n \n \t* configure.ac (gcc_cv_as_compress_debug): Check for assembler\n \tcompressed debug support.\n-\t(gcc_cv_ld_compress_debug): Check for linker compressed debug\n-\tsupport.\n+\t(gcc_cv_ld_compress_debug): Check for linker compressed debug support.\n \t* configure: Regenerate.\n \t* config.in: Regenerate.\n \t* common.opt (compressed_debug_sections): New enum.\n \t(gz, gz=): New options.\n-\t* gcc.c (LINK_COMPRESS_DEBUG_SPEC, ASM_COMPRESS_DEBUG_SPEC):\n-\tDefine.\n+\t* gcc.c (LINK_COMPRESS_DEBUG_SPEC, ASM_COMPRESS_DEBUG_SPEC): Define.\n \t(LINK_COMMAND_SPEC): Invoke LINK_COMPRESS_DEBUG_SPEC.\n \t(asm_options): Invoke ASM_COMPRESS_DEBUG_SPEC.\n \t* config/darwin.h (LINK_COMMAND_SPEC_A): Invoke\n \tLINK_COMPRESS_DEBUG_SPEC.\n \t* config/i386/djgpp.h (LINK_COMMAND_SPEC): Likewise.\n \t* opts.c (common_handle_option): Handle OPT_gz, OPT_gz_.\n-\t* doc/invoke.texi (Option Summary, Debugging Options): Add\n-\t-gz[=type].\n+\t* doc/invoke.texi (Option Summary, Debugging Options): Add -gz[=type].\n \t(Debugging Options): Document -gz[=type].\n \n 2014-06-27  Martin Jambor  <mjambor@suse.cz>"}, {"sha": "bf35498a3aaa978717d3a7bdce723dd66521e88b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5acd5cf07262141100da18e8dc227ed4e073ac8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5acd5cf07262141100da18e8dc227ed4e073ac8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5acd5cf07262141100da18e8dc227ed4e073ac8c", "patch": "@@ -32,7 +32,12 @@\n \n 2014-06-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n-\t* ira-loop-pressure.c: New test.\n+\t* gcc.dg/ira-loop-pressure.c: New test.\n+\n+2014-06-29  Roman Gareev  <gareevroman@gmail.com>\n+\n+\t* gcc.dg/graphite/isl-codegen-loop-dumping.c: New testcase that\n+\tchecks that the dump is generated.\n \n 2014-06-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n@@ -41,10 +46,13 @@\n \t* gfortran.dg/binding_label_tests_2.f03: Adjust error messages.\n \t* gfortran.dg/binding_label_tests_27.f90: New file.\n \n+2014-06-29  Roman Gareev  <gareevroman@gmail.com>\n+\n+\t* gfortran.dg/graphite/pr59586.f: New testcase.\n+\n 2014-06-29  Andreas Schwab  <schwab@linux-m68k.org>\n \n-\t* gfortran.dg/ieee/ieee_6.f90: Allow inexact together with\n-\tunderflow.\n+\t* gfortran.dg/ieee/ieee_6.f90: Allow inexact together with underflow.\n \n 2014-06-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n@@ -178,8 +186,7 @@\n \n 2014-06-26  Nick Clifton  <nickc@redhat.com>\n \n-\t* lib/target-supports.exp (check_effective_target_trapping): Fix\n-\ttypo.\n+\t* lib/target-supports.exp (check_effective_target_trapping): Fix typo.\n \n 2014-06-26  Adam Butcher  <adam@jessamine.co.uk>\n "}]}