{"sha": "457f72ac38955335c4b3f20e353bc9891681d805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3ZjcyYWMzODk1NTMzNWM0YjNmMjBlMzUzYmM5ODkxNjgxZDgwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-10-19T11:03:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-10-19T11:03:34Z"}, "message": "cuintp.c: Remove useless include directives.\n\n\t* gcc-interface/cuintp.c: Remove useless include directives.\n\t(build_cst_from_int): Use standard predicate.\n\t(UI_To_gnu): Simplify.\n\t(UI_From_gnu): Fix formatting.\n\t* gcc-interface/trans.c (post_error): Likewise.\n\t(post_error_ne): Likewise.\n\nFrom-SVN: r203851", "tree": {"sha": "05abbf795b9b521ad13fafbf7f1c41eaa4ad795a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05abbf795b9b521ad13fafbf7f1c41eaa4ad795a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/457f72ac38955335c4b3f20e353bc9891681d805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457f72ac38955335c4b3f20e353bc9891681d805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457f72ac38955335c4b3f20e353bc9891681d805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457f72ac38955335c4b3f20e353bc9891681d805/comments", "author": null, "committer": null, "parents": [{"sha": "4708440c7c3e49438684e33c6aa045336112567c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4708440c7c3e49438684e33c6aa045336112567c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4708440c7c3e49438684e33c6aa045336112567c"}], "stats": {"total": 78, "additions": 43, "deletions": 35}, "files": [{"sha": "f67ab1f0577b1873e2aaba05ba3a08b00d5ba9c6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457f72ac38955335c4b3f20e353bc9891681d805/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457f72ac38955335c4b3f20e353bc9891681d805/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=457f72ac38955335c4b3f20e353bc9891681d805", "patch": "@@ -1,3 +1,12 @@\n+2013-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/cuintp.c: Remove useless include directives.\n+\t(build_cst_from_int): Use standard predicate.\n+\t(UI_To_gnu): Simplify.\n+\t(UI_From_gnu): Fix formatting.\n+\t* gcc-interface/trans.c (post_error): Likewise.\n+\t(post_error_ne): Likewise.\n+\n 2013-10-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (gnat_set_type_context): New function."}, {"sha": "9b58b0ecc6420830572581d91446fe794471610f", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457f72ac38955335c4b3f20e353bc9891681d805/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457f72ac38955335c4b3f20e353bc9891681d805/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=457f72ac38955335c4b3f20e353bc9891681d805", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -23,8 +23,8 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* This file corresponds to the Ada package body Uintp. It was created\n-   manually from the files uintp.ads and uintp.adb. */\n+/* This file corresponds to the Ada package body Uintp.  It was created\n+   manually from the files uintp.ads and uintp.adb.  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -35,11 +35,6 @@\n #include \"ada.h\"\n #include \"types.h\"\n #include \"uintp.h\"\n-#include \"atree.h\"\n-#include \"elists.h\"\n-#include \"nlists.h\"\n-#include \"stringt.h\"\n-#include \"fe.h\"\n #include \"ada-tree.h\"\n #include \"gigi.h\"\n \n@@ -53,13 +48,13 @@\n    the integer value itself.  The origin of the Uints_Ptr table is adjusted so\n    that a Uint value of Uint_Bias indexes the first element.\n \n-   First define a utility function that operates like build_int_cst for\n-   integral types and does a conversion to floating-point for real types.  */\n+   First define a utility function that operates like build_int_cst_type for\n+   integral types and does a conversion for floating-point types.  */\n \n static tree\n build_cst_from_int (tree type, HOST_WIDE_INT low)\n {\n-  if (TREE_CODE (type) == REAL_TYPE)\n+  if (SCALAR_FLOAT_TYPE_P (type))\n     return convert (type, build_int_cst (NULL_TREE, low));\n   else\n     return build_int_cst_type (type, low);\n@@ -73,20 +68,15 @@ build_cst_from_int (tree type, HOST_WIDE_INT low)\n tree\n UI_To_gnu (Uint Input, tree type)\n {\n+  /* We might have a TYPE with biased representation and be passed an unbiased\n+     value that doesn't fit.  We always use an unbiased type to be able to hold\n+     any such possible value for intermediate computations and then rely on a\n+     conversion back to TYPE to perform the bias adjustment when need be.  */\n+  tree comp_type\n+    = TREE_CODE (type) == INTEGER_TYPE && TYPE_BIASED_REPRESENTATION_P (type)\n+      ? get_base_type (type) : type;\n   tree gnu_ret;\n \n-  /* We might have a TYPE with biased representation and be passed an\n-     unbiased value that doesn't fit.  We always use an unbiased type able\n-     to hold any such possible value for intermediate computations, and\n-     then rely on a conversion back to TYPE to perform the bias adjustment\n-     when need be.  */\n-\n-  int biased_type_p\n-    = (TREE_CODE (type) == INTEGER_TYPE\n-       && TYPE_BIASED_REPRESENTATION_P (type));\n-\n-  tree comp_type = biased_type_p ? get_base_type (type) : type;\n-\n   if (Input <= Uint_Direct_Last)\n     gnu_ret = build_cst_from_int (comp_type, Input - Uint_Direct_Bias);\n   else\n@@ -188,12 +178,13 @@ UI_From_gnu (tree Input)\n     {\n       v[i] = tree_low_cst (fold_build1 (ABS_EXPR, gnu_type,\n \t\t\t\t\tfold_build2 (TRUNC_MOD_EXPR, gnu_type,\n-\t\t\t\t\t\t     gnu_temp, gnu_base)),\n-\t\t\t   0);\n+\t\t\t\t\t\t     gnu_temp, gnu_base)), 0);\n       gnu_temp = fold_build2 (TRUNC_DIV_EXPR, gnu_type, gnu_temp, gnu_base);\n     }\n \n-  temp.Low_Bound = 1, temp.High_Bound = Max_For_Dint;\n-  vec.Array = v, vec.Bounds = &temp;\n+  temp.Low_Bound = 1;\n+  temp.High_Bound = Max_For_Dint;\n+  vec.Bounds = &temp;\n+  vec.Array = v;\n   return Vector_To_Uint (vec, tree_int_cst_sgn (Input) < 0);\n }"}, {"sha": "7eef8aa5cb0046f5a805b976eb770dbff66425c3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457f72ac38955335c4b3f20e353bc9891681d805/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457f72ac38955335c4b3f20e353bc9891681d805/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=457f72ac38955335c4b3f20e353bc9891681d805", "patch": "@@ -9221,10 +9221,14 @@ post_error (const char *msg, Node_Id node)\n   String_Template temp;\n   Fat_Pointer fp;\n \n-  temp.Low_Bound = 1, temp.High_Bound = strlen (msg);\n-  fp.Array = msg, fp.Bounds = &temp;\n-  if (Present (node))\n-    Error_Msg_N (fp, node);\n+  if (No (node))\n+    return;\n+\n+  temp.Low_Bound = 1;\n+  temp.High_Bound = strlen (msg);\n+  fp.Bounds = &temp;\n+  fp.Array = msg;\n+  Error_Msg_N (fp, node);\n }\n \n /* Similar to post_error, but NODE is the node at which to post the error and\n@@ -9236,10 +9240,14 @@ post_error_ne (const char *msg, Node_Id node, Entity_Id ent)\n   String_Template temp;\n   Fat_Pointer fp;\n \n-  temp.Low_Bound = 1, temp.High_Bound = strlen (msg);\n-  fp.Array = msg, fp.Bounds = &temp;\n-  if (Present (node))\n-    Error_Msg_NE (fp, node, ent);\n+  if (No (node))\n+    return;\n+\n+  temp.Low_Bound = 1;\n+  temp.High_Bound = strlen (msg);\n+  fp.Bounds = &temp;\n+  fp.Array = msg;\n+  Error_Msg_NE (fp, node, ent);\n }\n \n /* Similar to post_error_ne, but NUM is the number to use for the '^'.  */"}]}