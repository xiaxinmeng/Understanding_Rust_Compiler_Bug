{"sha": "6855fe452e1c8b5063fa9a57705987a02211b79c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1NWZlNDUyZTFjOGI1MDYzZmE5YTU3NzA1OTg3YTAyMjExYjc5Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-05-14T17:56:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-14T17:56:17Z"}, "message": "re PR libstdc++/40123 (Revision 147395 failed libstc++ tests)\n\n2009-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40123\n\t* random.tcc (independent_bits_engine<>::operator()()): Use\n\tresult_type(1), not 1UL.\n\n\t* random.tcc (independent_bits_engine<>::operator()()): Use _M_b.max()\n\tand _M_b.min(), instead of this->max() and this->min().\n\n\t* random.h (_ShiftMin1): Remove, adjust everywhere.\n\n\t* random.tcc: Minor cosmetic changes.\n\nFrom-SVN: r147538", "tree": {"sha": "fd1db376ec9e7ccccb57b4703e5a574c1e47ea0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd1db376ec9e7ccccb57b4703e5a574c1e47ea0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6855fe452e1c8b5063fa9a57705987a02211b79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6855fe452e1c8b5063fa9a57705987a02211b79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6855fe452e1c8b5063fa9a57705987a02211b79c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6855fe452e1c8b5063fa9a57705987a02211b79c/comments", "author": null, "committer": null, "parents": [{"sha": "61c273538b0349c662b68ed92c8bd0387d737c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61c273538b0349c662b68ed92c8bd0387d737c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61c273538b0349c662b68ed92c8bd0387d737c51"}], "stats": {"total": 100, "additions": 47, "deletions": 53}, "files": [{"sha": "651b53e71644e698c03479b7e2dd0d0c459f1138", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6855fe452e1c8b5063fa9a57705987a02211b79c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6855fe452e1c8b5063fa9a57705987a02211b79c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6855fe452e1c8b5063fa9a57705987a02211b79c", "patch": "@@ -1,3 +1,16 @@\n+2009-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40123\n+\t* random.tcc (independent_bits_engine<>::operator()()): Use\n+\tresult_type(1), not 1UL.\n+\n+\t* random.tcc (independent_bits_engine<>::operator()()): Use _M_b.max()\n+\tand _M_b.min(), instead of this->max() and this->min().\n+\n+\t* random.h (_ShiftMin1): Remove, adjust everywhere.\n+\n+\t* random.tcc: Minor cosmetic changes.\n+\n 2009-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.tcc (cauchy_distribution<>::"}, {"sha": "b5ccf8a1680592e8720b6f1d24e724263005693c", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6855fe452e1c8b5063fa9a57705987a02211b79c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6855fe452e1c8b5063fa9a57705987a02211b79c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=6855fe452e1c8b5063fa9a57705987a02211b79c", "patch": "@@ -68,23 +68,6 @@ namespace std\n       struct _Shift<_UIntType, __w, true>\n       { static const _UIntType __value = _UIntType(1) << __w; };\n \n-    // XXX need constexpr\n-    template<typename _UIntType, size_t __w,\n-\t     bool = __w < static_cast<size_t>\n-\t\t\t  (std::numeric_limits<_UIntType>::digits)>\n-      struct _ShiftMin1\n-      {\n-\tstatic const _UIntType __value =\n-\t  __gnu_cxx::__numeric_traits<_UIntType>::__max;\n-      };\n-\n-    template<typename _UIntType, size_t __w>\n-      struct _ShiftMin1<_UIntType, __w, true>\n-      {\n-\tstatic const _UIntType __value =\n-\t  (_UIntType(1) << __w) - _UIntType(1);\n-      };\n-\n     template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n       struct _Mod;\n \n@@ -395,11 +378,11 @@ namespace std\n       static_assert(__w <=\n \t\t    static_cast<size_t>(numeric_limits<_UIntType>::digits),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__a <= __detail::_ShiftMin1<_UIntType, __w>::__value,\n+      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__b <= __detail::_ShiftMin1<_UIntType, __w>::__value,\n+      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n-      static_assert(__c <= __detail::_ShiftMin1<_UIntType, __w>::__value,\n+      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n \n     public:\n@@ -459,7 +442,7 @@ namespace std\n        */\n       result_type\n       max() const\n-      { return __detail::_ShiftMin1<_UIntType, __w>::__value; }\n+      { return __detail::_Shift<_UIntType, __w>::__value - 1; }\n \n       /**\n        * @brief Discard a sequence of random numbers.\n@@ -644,7 +627,7 @@ namespace std\n        */\n       result_type\n       max() const\n-      { return __detail::_ShiftMin1<_UIntType, __w>::__value; }\n+      { return __detail::_Shift<_UIntType, __w>::__value - 1; }\n \n       /**\n        * @brief Discard a sequence of random numbers.\n@@ -1040,7 +1023,7 @@ namespace std\n        */\n       result_type\n       max() const\n-      { return __detail::_ShiftMin1<_UIntType, __w>::__value; }\n+      { return __detail::_Shift<_UIntType, __w>::__value - 1; }\n \n       /**\n        * @brief Discard a sequence of random numbers."}, {"sha": "b110f99740c0c9a6d257d6845e2c60b2b9f8c3a1", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6855fe452e1c8b5063fa9a57705987a02211b79c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6855fe452e1c8b5063fa9a57705987a02211b79c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=6855fe452e1c8b5063fa9a57705987a02211b79c", "patch": "@@ -554,8 +554,8 @@ namespace std\n     independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::\n     operator()()\n     {\n-      const long double __r = static_cast<long double>(this->max())\n-\t\t\t    - static_cast<long double>(this->min()) + 1.0L;\n+      const long double __r = static_cast<long double>(_M_b.max())\n+\t\t\t    - static_cast<long double>(_M_b.min()) + 1.0L;\n       const result_type __m = std::log10(__r) / std::log10(2.0L);\n       result_type __n, __n0, __y0, __y1, __s0, __s1;\n       for (size_t __i = 0; __i < 2; ++__i)\n@@ -564,8 +564,8 @@ namespace std\n \t  __n0 = __n - __w % __n;\n \t  const result_type __w0 = __w / __n;\n \t  const result_type __w1 = __w0 + 1;\n-\t  __s0 = 1UL << __w0;\n-\t  __s1 = 1UL << __w1;\n+\t  __s0 = result_type(1) << __w0;\n+\t  __s1 = result_type(1) << __w1;\n \t  __y0 = __s0 * (__r / __s0);\n \t  __y1 = __s1 * (__r / __s1);\n \t  if (__r - __y0 <= __y0 / __n)\n@@ -577,19 +577,17 @@ namespace std\n \t{\n \t  result_type __u;\n \t  do\n-\t    __u = _M_b() - this->min();\n+\t    __u = _M_b() - _M_b.min();\n \t  while (__u >= __y0);\n-\t  __sum = __s0 * __sum\n-\t\t+ __u % __s0;\n+\t  __sum = __s0 * __sum + __u % __s0;\n \t}\n       for (size_t __k = __n0; __k < __n; ++__k)\n \t{\n \t  result_type __u;\n \t  do\n-\t    __u = _M_b() - this->min();\n+\t    __u = _M_b() - _M_b.min();\n \t  while (__u >= __y1);\n-\t  __sum = __s1 * __sum\n-\t\t+ __u % __s1;\n+\t  __sum = __s1 * __sum + __u % __s1;\n \t}\n       return __sum;\n     }\n@@ -2648,12 +2646,12 @@ namespace std\n \t\t       _RandomAccessIterator __end)\n     {\n       typedef typename iterator_traits<_RandomAccessIterator>::value_type\n-        __Type;\n+        _Type;\n \n       if (__begin == __end)\n \treturn;\n \n-      std::fill(__begin, __end, __Type(0x8b8b8b8bU));\n+      std::fill(__begin, __end, _Type(0x8b8b8b8bU));\n \n       const size_t __n = __end - __begin;\n       const size_t __s = _M_v.size();\n@@ -2668,37 +2666,37 @@ namespace std\n \n       for (size_t __k = 0; __k < __m; ++__k)\n \t{\n-\t  __Type __arg = __begin[__k % __n]\n-\t\t       ^ __begin[(__k + __p) % __n]\n-\t\t       ^ __begin[(__k - 1) % __n];\n-\t  __Type __r1 = __arg ^ (__arg << 27);\n-\t  __r1 = __detail::__mod<__Type, 1664525U, 0U,\n-\t\t   __detail::_Shift<__Type, 32>::__value>(__r1);\n-\t  __Type __r2 = __r1;\n+\t  _Type __arg = (__begin[__k % __n]\n+\t\t\t ^ __begin[(__k + __p) % __n]\n+\t\t\t ^ __begin[(__k - 1) % __n]);\n+\t  _Type __r1 = __arg ^ (__arg << 27);\n+\t  __r1 = __detail::__mod<_Type, 1664525U, 0U,\n+\t\t   __detail::_Shift<_Type, 32>::__value>(__r1);\n+\t  _Type __r2 = __r1;\n \t  if (__k == 0)\n \t    __r2 += __s;\n \t  else if (__k <= __s)\n \t    __r2 += __k % __n + _M_v[__k - 1];\n \t  else\n \t    __r2 += __k % __n;\n-\t  __r2 = __detail::__mod<__Type, 1U, 0U,\n-\t\t   __detail::_Shift<__Type, 32>::__value>(__r2);\n+\t  __r2 = __detail::__mod<_Type, 1U, 0U,\n+\t\t   __detail::_Shift<_Type, 32>::__value>(__r2);\n \t  __begin[(__k + __p) % __n] += __r1;\n \t  __begin[(__k + __q) % __n] += __r2;\n \t  __begin[__k % __n] = __r2;\n \t}\n \n       for (size_t __k = __m; __k < __m + __n; ++__k)\n \t{\n-\t  __Type __arg = __begin[__k % __n]\n-\t\t       + __begin[(__k + __p) % __n]\n-\t\t       + __begin[(__k - 1) % __n];\n-\t  __Type __r3 = __arg ^ (__arg << 27);\n-\t  __r3 = __detail::__mod<__Type, 1566083941U, 0U,\n-\t\t   __detail::_Shift<__Type, 32>::__value>(__r3);\n-\t  __Type __r4 = __r3 - __k % __n;\n-\t  __r4 = __detail::__mod<__Type, 1U, 0U,\n-\t\t   __detail::_Shift<__Type, 32>::__value>(__r4);\n+\t  _Type __arg = (__begin[__k % __n]\n+\t\t\t + __begin[(__k + __p) % __n]\n+\t\t\t + __begin[(__k - 1) % __n]);\n+\t  _Type __r3 = __arg ^ (__arg << 27);\n+\t  __r3 = __detail::__mod<_Type, 1566083941U, 0U,\n+\t\t   __detail::_Shift<_Type, 32>::__value>(__r3);\n+\t  _Type __r4 = __r3 - __k % __n;\n+\t  __r4 = __detail::__mod<_Type, 1U, 0U,\n+\t\t   __detail::_Shift<_Type, 32>::__value>(__r4);\n \t  __begin[(__k + __p) % __n] ^= __r4;\n \t  __begin[(__k + __q) % __n] ^= __r3;\n \t  __begin[__k % __n] = __r4;"}]}