{"sha": "146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2YWVmMGIzOTk4ZTc2ZjE2YzNhYjgyNTVkMWNhYTNkY2I0Yzg3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-21T16:25:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-06-21T16:25:57Z"}, "message": "re PR middle-end/49489 (gcc.c-torture/execute/builtin-bitops-1.c fails on x86_64-linux)\n\n\tPR middle-end/49489\n\t* builtins.c (expand_builtin_unop): Call expand_unop with 0 as\n\tunsignedp argument instead of 1 for clrsb_optab.\n\t(fold_builtin_bitop): Fix masking for width > HOST_BITS_PER_WIDE_INT\n\tand < 2 * HOST_BITS_PER_WIDE_INT.  Optimize BUILT_IN_CLRSB*.\n\t(fold_builtin_1): Call fold_builtin_binop for BUILT_IN_CLRSB*.\n\t* optabs.c (widen_leading): Call widen_operand and expand_unop\n\twith 0 as unsignedp argument instead of 1 for clrsb_optab.\n\t(expand_unop): Subtract difference of mode sizes also for\n\tclrsb_optab.\n\nFrom-SVN: r175265", "tree": {"sha": "9c216d752e228b140bcd643fe2591b081c4af049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c216d752e228b140bcd643fe2591b081c4af049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0503294bc105e7f0d6be22443abd3ef07d4aff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0503294bc105e7f0d6be22443abd3ef07d4aff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0503294bc105e7f0d6be22443abd3ef07d4aff1"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "db3b00b0cf42ad9df37a9951d6320642fc0ff53a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "patch": "@@ -1,3 +1,16 @@\n+2011-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/49489\n+\t* builtins.c (expand_builtin_unop): Call expand_unop with 0 as\n+\tunsignedp argument instead of 1 for clrsb_optab.\n+\t(fold_builtin_bitop): Fix masking for width > HOST_BITS_PER_WIDE_INT\n+\tand < 2 * HOST_BITS_PER_WIDE_INT.  Optimize BUILT_IN_CLRSB*.\n+\t(fold_builtin_1): Call fold_builtin_binop for BUILT_IN_CLRSB*.\n+\t* optabs.c (widen_leading): Call widen_operand and expand_unop\n+\twith 0 as unsignedp argument instead of 1 for clrsb_optab.\n+\t(expand_unop): Subtract difference of mode sizes also for\n+\tclrsb_optab.\n+\n 2011-06-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (*jcindirect_jump): Fix build warning."}, {"sha": "5a3835f30edc9617778bdf288fd65efa7a6a4f2a", "filename": "gcc/builtins.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "patch": "@@ -4578,7 +4578,7 @@ expand_builtin_unop (enum machine_mode target_mode, tree exp, rtx target,\n   /* Compute op, into TARGET if possible.\n      Set TARGET to wherever the result comes back.  */\n   target = expand_unop (TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 0))),\n-\t\t\top_optab, op0, target, 1);\n+\t\t\top_optab, op0, target, op_optab != clrsb_optab);\n   gcc_assert (target);\n \n   return convert_to_mode (target_mode, target, 0);\n@@ -7265,7 +7265,8 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \t{\n \t  hi = TREE_INT_CST_HIGH (arg);\n \t  if (width < 2 * HOST_BITS_PER_WIDE_INT)\n-\t    hi &= ~((HOST_WIDE_INT) (-1) >> (width - HOST_BITS_PER_WIDE_INT));\n+\t    hi &= ~((unsigned HOST_WIDE_INT) (-1)\n+\t\t    << (width - HOST_BITS_PER_WIDE_INT));\n \t}\n       else\n \t{\n@@ -7303,6 +7304,26 @@ fold_builtin_bitop (tree fndecl, tree arg)\n \t    result = width;\n \t  break;\n \n+\tCASE_INT_FN (BUILT_IN_CLRSB):\n+\t  if (width > HOST_BITS_PER_WIDE_INT\n+\t      && (hi & ((unsigned HOST_WIDE_INT) 1\n+\t\t\t<< (width - HOST_BITS_PER_WIDE_INT - 1))) != 0)\n+\t    {\n+\t      hi = ~hi & ~((unsigned HOST_WIDE_INT) (-1)\n+\t\t\t   << (width - HOST_BITS_PER_WIDE_INT - 1));\n+\t      lo = ~lo;\n+\t    }\n+\t  else if (width <= HOST_BITS_PER_WIDE_INT\n+\t\t   && (lo & ((unsigned HOST_WIDE_INT) 1 << (width - 1))) != 0)\n+\t    lo = ~lo & ~((unsigned HOST_WIDE_INT) (-1) << (width - 1));\n+\t  if (hi != 0)\n+\t    result = width - floor_log2 (hi) - 2 - HOST_BITS_PER_WIDE_INT;\n+\t  else if (lo != 0)\n+\t    result = width - floor_log2 (lo) - 2;\n+\t  else\n+\t    result = width - 1;\n+\t  break;\n+\n \tCASE_INT_FN (BUILT_IN_POPCOUNT):\n \t  result = 0;\n \t  while (lo)\n@@ -9737,6 +9758,7 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n     CASE_INT_FN (BUILT_IN_FFS):\n     CASE_INT_FN (BUILT_IN_CLZ):\n     CASE_INT_FN (BUILT_IN_CTZ):\n+    CASE_INT_FN (BUILT_IN_CLRSB):\n     CASE_INT_FN (BUILT_IN_POPCOUNT):\n     CASE_INT_FN (BUILT_IN_PARITY):\n       return fold_builtin_bitop (fndecl, arg0);"}, {"sha": "969d5cf55948eda7c62e0cf1fdf6d07076fa8531", "filename": "gcc/optabs.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/146aef0b3998e76f16c3ab8255d1caa3dcb4c870/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=146aef0b3998e76f16c3ab8255d1caa3dcb4c870", "patch": "@@ -1,7 +1,7 @@\n /* Expand the basic unary and binary arithmetic operations, for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -2350,8 +2350,10 @@ widen_leading (enum machine_mode mode, rtx op0, rtx target, optab unoptab)\n \n \t      if (target == 0)\n \t\ttarget = gen_reg_rtx (mode);\n-\t      xop0 = widen_operand (op0, wider_mode, mode, true, false);\n-\t      temp = expand_unop (wider_mode, unoptab, xop0, NULL_RTX, true);\n+\t      xop0 = widen_operand (op0, wider_mode, mode,\n+\t\t\t\t    unoptab != clrsb_optab, false);\n+\t      temp = expand_unop (wider_mode, unoptab, xop0, NULL_RTX,\n+\t\t\t\t  unoptab != clrsb_optab);\n \t      if (temp != 0)\n \t\ttemp = expand_binop (wider_mode, sub_optab, temp,\n \t\t\t\t     GEN_INT (GET_MODE_BITSIZE (wider_mode)\n@@ -3075,8 +3077,9 @@ expand_unop (enum machine_mode mode, optab unoptab, rtx op0, rtx target,\n \t\t\t\t  unsignedp);\n \n \t      /* If we are generating clz using wider mode, adjust the\n-\t\t result.  */\n-\t      if (unoptab == clz_optab && temp != 0)\n+\t\t result.  Similarly for clrsb.  */\n+\t      if ((unoptab == clz_optab || unoptab == clrsb_optab)\n+\t\t  && temp != 0)\n \t\ttemp = expand_binop (wider_mode, sub_optab, temp,\n \t\t\t\t     GEN_INT (GET_MODE_BITSIZE (wider_mode)\n \t\t\t\t\t      - GET_MODE_BITSIZE (mode)),"}]}