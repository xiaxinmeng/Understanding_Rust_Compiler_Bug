{"sha": "3e368284acf08cd61daf74eb81347e882f60f106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzNjgyODRhY2YwOGNkNjFkYWY3NGViODEzNDdlODgyZjYwZjEwNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-17T08:10:28Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-17T08:10:28Z"}, "message": "2004-03-17  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/PlainDatagramSocketImpl.java\n\t(RECEIVE_LOCK): New member field.\n\t(SEND_LOCK): New member field.\n\t(send0): New method.\n\t(send): Synchronize on SEND_LOCK.\n\t(receive0): New method.\n\t(receive): Synchronize on RECEIVE_LOCK.\n\t* gnu/java/net/natPlainDatagramSocketImplNoNet.cc,\n\tgnu/java/net/natPlainDatagramSocketImplPosix.cc,\n\tgnu/java/net/natPlainDatagramSocketImplWin32.cc\n\t(send0): Renamed from send.\n\t(receive0): Renamed from receive.\n\nFrom-SVN: r79579", "tree": {"sha": "2d40e9d43e44245f6f775602706091f7d8f7b8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d40e9d43e44245f6f775602706091f7d8f7b8d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e368284acf08cd61daf74eb81347e882f60f106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e368284acf08cd61daf74eb81347e882f60f106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e368284acf08cd61daf74eb81347e882f60f106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e368284acf08cd61daf74eb81347e882f60f106/comments", "author": null, "committer": null, "parents": [{"sha": "aa18fb30ad9c857b5fe102b2a34c335734eca475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa18fb30ad9c857b5fe102b2a34c335734eca475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa18fb30ad9c857b5fe102b2a34c335734eca475"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "ad71001f23dd99849932aac8e60cc27b2f8ef37b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3e368284acf08cd61daf74eb81347e882f60f106", "patch": "@@ -1,5 +1,19 @@\n 2004-03-17  Michael Koch  <konqueror@gmx.de>\n \n+\t* gnu/java/net/PlainDatagramSocketImpl.java\n+\t(RECEIVE_LOCK): New member field.\n+\t(SEND_LOCK): New member field.\n+\t(send0): New method.\n+\t(send): Synchronize on SEND_LOCK.\n+\t(receive0): New method.\n+\t(receive): Synchronize on RECEIVE_LOCK.\n+\t* gnu/java/net/natPlainDatagramSocketImplNoNet.cc,\n+\tgnu/java/net/natPlainDatagramSocketImplPosix.cc,\n+\tgnu/java/net/natPlainDatagramSocketImplWin32.cc\n+\t(send0): Renamed from send.\n+\t(receive0): Renamed from receive.\n+2004-03-17  Michael Koch  <konqueror@gmx.de>\n+\n \t* gnu/java/net/natPlainSocketImplPosix.cc\n \t(write): Just call write(jbyteArray, offset, len).\n \t(read): Just call read(jbyteArray, offset, len)."}, {"sha": "62bcba9e7d8f23a9c16d1b662298dd23f8615e13", "filename": "libjava/gnu/java/net/PlainDatagramSocketImpl.java", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2Fgnu%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2Fgnu%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java?ref=3e368284acf08cd61daf74eb81347e882f60f106", "patch": "@@ -1,5 +1,5 @@\n /* PlainDatagramSocketImpl.java -- Default DatagramSocket implementation\n-   Copyright (C) 1998, 1999, 2001, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -60,8 +60,8 @@\n  * It makes native calls to C routines that implement BSD style\n  * SOCK_DGRAM sockets in the AF_INET family.\n  *\n- * @author Aaron M. Renn <arenn@urbanophile.com>\n- * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy (warrenl@cygnus.com)\n  */\n public final class PlainDatagramSocketImpl extends DatagramSocketImpl\n {\n@@ -95,6 +95,16 @@ public final class PlainDatagramSocketImpl extends DatagramSocketImpl\n    * This is the actual underlying file descriptor\n    */\n   int native_fd = -1;\n+  \n+  /**\n+   * Lock object to serialize threads wanting to receive \n+   */\n+  private final Object RECEIVE_LOCK = new Object();\n+  \n+  /**\n+   * Lock object to serialize threads wanting to send \n+   */\n+  private final Object SEND_LOCK = new Object();\n \n   // FIXME: Is this necessary?  Could it help w/ DatagramSocket.getLocalAddress?\n   // InetAddress address;\n@@ -179,7 +189,7 @@ protected native void connect(InetAddress addr, int port)\n    *\n    * @exception IOException If an error occurs\n    */\n-  protected native void send(DatagramPacket p) throws IOException;\n+  protected native void send(DatagramPacket packet) throws IOException;\n \n   /**\n    * Receives a UDP packet from the network"}, {"sha": "b1bc514c1986049dd14dee8d76068d89f36cf0ff", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplPosix.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplPosix.cc?ref=3e368284acf08cd61daf74eb81347e882f60f106", "patch": "@@ -286,6 +286,8 @@ gnu::java::net::PlainDatagramSocketImpl::close ()\n void\n gnu::java::net::PlainDatagramSocketImpl::send (::java::net::DatagramPacket *p)\n {\n+  JvSynchronize lock (SEND_LOCK);\n+  \n   // FIXME: Deal with Multicast and if the socket is connected.\n   jint rport = p->getPort();\n   union SockAddr u;\n@@ -327,6 +329,8 @@ gnu::java::net::PlainDatagramSocketImpl::send (::java::net::DatagramPacket *p)\n void\n gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p)\n {\n+  JvSynchronize lock (RECEIVE_LOCK);\n+\n   // FIXME: Deal with Multicast and if the socket is connected.\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);"}, {"sha": "bda03fb6c39fa3cdabe4bc1ce0a718325243f1b6", "filename": "libjava/gnu/java/net/natPlainDatagramSocketImplWin32.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e368284acf08cd61daf74eb81347e882f60f106/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainDatagramSocketImplWin32.cc?ref=3e368284acf08cd61daf74eb81347e882f60f106", "patch": "@@ -273,6 +273,8 @@ gnu::java::net::PlainDatagramSocketImpl::close ()\n void\n gnu::java::net::PlainDatagramSocketImpl::send (::java::net::DatagramPacket *p)\n {\n+  JvSynchronize lock (SEND_LOCK);\n+\n   // FIXME: Deal with Multicast and if the socket is connected.\n   jint rport = p->getPort();\n   union SockAddr u;\n@@ -313,6 +315,8 @@ gnu::java::net::PlainDatagramSocketImpl::send (::java::net::DatagramPacket *p)\n void\n gnu::java::net::PlainDatagramSocketImpl::receive (::java::net::DatagramPacket *p)\n {\n+  JvSynchronize lock (RECEIVE_LOCK);\n+\n   // FIXME: Deal with Multicast and if the socket is connected.\n   union SockAddr u;\n   socklen_t addrlen = sizeof(u);"}]}