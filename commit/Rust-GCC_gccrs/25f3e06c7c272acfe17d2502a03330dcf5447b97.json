{"sha": "25f3e06c7c272acfe17d2502a03330dcf5447b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmM2UwNmM3YzI3MmFjZmUxN2QyNTAyYTAzMzMwZGNmNTQ0N2I5Nw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-08-10T08:38:29Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-10T08:38:29Z"}, "message": "expr.c (expand_expr_real_1): Add back code that was not dead.\n\n2004-08-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expr.c (expand_expr_real_1): Add back code that was not dead.\n\nFrom-SVN: r85742", "tree": {"sha": "186eb1816065a4f6b4cffad79c1dd08dff6c1d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186eb1816065a4f6b4cffad79c1dd08dff6c1d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f3e06c7c272acfe17d2502a03330dcf5447b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f3e06c7c272acfe17d2502a03330dcf5447b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f3e06c7c272acfe17d2502a03330dcf5447b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f3e06c7c272acfe17d2502a03330dcf5447b97/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a3203c8e3ffcc1ff0b409bfdbf44e41abff353f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3203c8e3ffcc1ff0b409bfdbf44e41abff353f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3203c8e3ffcc1ff0b409bfdbf44e41abff353f"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "87045e6484c7fcd6a6fce702a38c4c5cb621d867", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f3e06c7c272acfe17d2502a03330dcf5447b97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f3e06c7c272acfe17d2502a03330dcf5447b97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f3e06c7c272acfe17d2502a03330dcf5447b97", "patch": "@@ -1,3 +1,7 @@\n+2004-08-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expr.c (expand_expr_real_1): Add back code that was not dead.\n+\n 2004-08-09  Andrew Pinski  <apinski@apple.com>\n \n \t* c-common.c (c_common_get_alias_set): Set the aliasing set of the type"}, {"sha": "607115b01b691d70613ab3fbeb574c4cf9e95ab8", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f3e06c7c272acfe17d2502a03330dcf5447b97/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f3e06c7c272acfe17d2502a03330dcf5447b97/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=25f3e06c7c272acfe17d2502a03330dcf5447b97", "patch": "@@ -7778,6 +7778,32 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t  return temp;\n \t}\n \n+      /* If no set-flag instruction, must generate a conditional store\n+\t into a temporary variable.  Drop through and handle this\n+\t like && and ||.  */\n+\n+      if (! ignore\n+\t  && (target == 0\n+\t      || modifier == EXPAND_STACK_PARM\n+\t      || ! safe_from_p (target, exp, 1)\n+\t      /* Make sure we don't have a hard reg (such as function's return\n+\t\t value) live across basic blocks, if not optimizing.  */\n+\t      || (!optimize && REG_P (target)\n+\t\t  && REGNO (target) < FIRST_PSEUDO_REGISTER)))\n+\ttarget = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n+\n+      if (target)\n+\temit_move_insn (target, const0_rtx);\n+\n+      op1 = gen_label_rtx ();\n+      jumpifnot (exp, op1);\n+\n+      if (target)\n+\temit_move_insn (target, const1_rtx);\n+\n+      emit_label (op1);\n+      return ignore ? const0_rtx : target;\n+\n     case TRUTH_NOT_EXPR:\n       if (modifier == EXPAND_STACK_PARM)\n \ttarget = 0;"}]}