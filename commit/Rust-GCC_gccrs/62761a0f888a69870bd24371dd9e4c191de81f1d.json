{"sha": "62761a0f888a69870bd24371dd9e4c191de81f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI3NjFhMGY4ODhhNjk4NzBiZDI0MzcxZGQ5ZTRjMTkxZGU4MWYxZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-05T11:10:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-05T11:10:25Z"}, "message": "tree-cfg.c (struct locus_discrim_map): Store line, not location.\n\n2018-06-05  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (struct locus_discrim_map): Store line, not location.\n\t(locus_discrim_hasher::hash): Adjust.\n\t(locus_discrim_hasher::equal): Likewise.\n\t(next_discriminator_for_locus): Work on line directly.\n\t(same_line_p): Pass in expanded locus1 as well.\n\t(assign_discriminators): Avoid redundant location expansions.\n\nFrom-SVN: r261194", "tree": {"sha": "7046ce6cd79a9d513040cb517e836e0ce702a15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7046ce6cd79a9d513040cb517e836e0ce702a15f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62761a0f888a69870bd24371dd9e4c191de81f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62761a0f888a69870bd24371dd9e4c191de81f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62761a0f888a69870bd24371dd9e4c191de81f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62761a0f888a69870bd24371dd9e4c191de81f1d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa385ff4d7d3a8375ded8cb951041d5acaa92325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa385ff4d7d3a8375ded8cb951041d5acaa92325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa385ff4d7d3a8375ded8cb951041d5acaa92325"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "9bff3f5c9e0e33eeab907f3ed5028fb2909d3bcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62761a0f888a69870bd24371dd9e4c191de81f1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62761a0f888a69870bd24371dd9e4c191de81f1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62761a0f888a69870bd24371dd9e4c191de81f1d", "patch": "@@ -1,3 +1,12 @@\n+2018-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (struct locus_discrim_map): Store line, not location.\n+\t(locus_discrim_hasher::hash): Adjust.\n+\t(locus_discrim_hasher::equal): Likewise.\n+\t(next_discriminator_for_locus): Work on line directly.\n+\t(same_line_p): Pass in expanded locus1 as well.\n+\t(assign_discriminators): Avoid redundant location expansions.\n+\n 2018-06-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/86046"}, {"sha": "21b3fdffa59382280fa99c1276c1252c88a7e75d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62761a0f888a69870bd24371dd9e4c191de81f1d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62761a0f888a69870bd24371dd9e4c191de81f1d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=62761a0f888a69870bd24371dd9e4c191de81f1d", "patch": "@@ -110,7 +110,7 @@ struct replace_decls_d\n /* Hash table to store last discriminator assigned for each locus.  */\n struct locus_discrim_map\n {\n-  location_t locus;\n+  int location_line;\n   int discriminator;\n };\n \n@@ -129,7 +129,7 @@ struct locus_discrim_hasher : free_ptr_hash <locus_discrim_map>\n inline hashval_t\n locus_discrim_hasher::hash (const locus_discrim_map *item)\n {\n-  return LOCATION_LINE (item->locus);\n+  return item->location_line;\n }\n \n /* Equality function for the locus-to-discriminator map.  A and B\n@@ -139,7 +139,7 @@ inline bool\n locus_discrim_hasher::equal (const locus_discrim_map *a,\n \t\t\t     const locus_discrim_map *b)\n {\n-  return LOCATION_LINE (a->locus) == LOCATION_LINE (b->locus);\n+  return a->location_line == b->location_line;\n }\n \n static hash_table<locus_discrim_hasher> *discriminator_per_locus;\n@@ -1168,21 +1168,20 @@ gimple_find_sub_bbs (gimple_seq seq, gimple_stmt_iterator *gsi)\n    profiling.  */\n \n static int\n-next_discriminator_for_locus (location_t locus)\n+next_discriminator_for_locus (int line)\n {\n   struct locus_discrim_map item;\n   struct locus_discrim_map **slot;\n \n-  item.locus = locus;\n+  item.location_line = line;\n   item.discriminator = 0;\n-  slot = discriminator_per_locus->find_slot_with_hash (\n-      &item, LOCATION_LINE (locus), INSERT);\n+  slot = discriminator_per_locus->find_slot_with_hash (&item, line, INSERT);\n   gcc_assert (slot);\n   if (*slot == HTAB_EMPTY_ENTRY)\n     {\n       *slot = XNEW (struct locus_discrim_map);\n       gcc_assert (*slot);\n-      (*slot)->locus = locus;\n+      (*slot)->location_line = line;\n       (*slot)->discriminator = 0;\n     }\n   (*slot)->discriminator++;\n@@ -1192,23 +1191,22 @@ next_discriminator_for_locus (location_t locus)\n /* Return TRUE if LOCUS1 and LOCUS2 refer to the same source line.  */\n \n static bool\n-same_line_p (location_t locus1, location_t locus2)\n+same_line_p (location_t locus1, expanded_location *from, location_t locus2)\n {\n-  expanded_location from, to;\n+  expanded_location to;\n \n   if (locus1 == locus2)\n     return true;\n \n-  from = expand_location (locus1);\n   to = expand_location (locus2);\n \n-  if (from.line != to.line)\n+  if (from->line != to.line)\n     return false;\n-  if (from.file == to.file)\n+  if (from->file == to.file)\n     return true;\n-  return (from.file != NULL\n+  return (from->file != NULL\n           && to.file != NULL\n-          && filename_cmp (from.file, to.file) == 0);\n+          && filename_cmp (from->file, to.file) == 0);\n }\n \n /* Assign discriminators to each basic block.  */\n@@ -1228,17 +1226,23 @@ assign_discriminators (void)\n       if (locus == UNKNOWN_LOCATION)\n \tcontinue;\n \n+      expanded_location locus_e = expand_location (locus);\n+\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t{\n \t  gimple *first = first_non_label_stmt (e->dest);\n \t  gimple *last = last_stmt (e->dest);\n-\t  if ((first && same_line_p (locus, gimple_location (first)))\n-\t      || (last && same_line_p (locus, gimple_location (last))))\n+\t  if ((first && same_line_p (locus, &locus_e,\n+\t\t\t\t     gimple_location (first)))\n+\t      || (last && same_line_p (locus, &locus_e,\n+\t\t\t\t       gimple_location (last))))\n \t    {\n \t      if (e->dest->discriminator != 0 && bb->discriminator == 0)\n-\t\tbb->discriminator = next_discriminator_for_locus (locus);\n+\t\tbb->discriminator\n+\t\t  = next_discriminator_for_locus (locus_e.line);\n \t      else\n-\t\te->dest->discriminator = next_discriminator_for_locus (locus);\n+\t\te->dest->discriminator\n+\t\t  = next_discriminator_for_locus (locus_e.line);\n \t    }\n \t}\n     }"}]}