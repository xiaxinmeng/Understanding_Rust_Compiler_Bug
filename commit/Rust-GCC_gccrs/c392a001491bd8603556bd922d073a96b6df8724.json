{"sha": "c392a001491bd8603556bd922d073a96b6df8724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM5MmEwMDE0OTFiZDg2MDM1NTZiZDkyMmQwNzNhOTZiNmRmODcyNA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-03-03T00:13:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-10T13:34:55Z"}, "message": "[Ada] Minor reformatting and some typo fixes\n\n2020-06-10  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* einfo.ads: Minor reformatting of a comment.\n\t* exp_aggr.adb: Minor reformatting and a grammar correction.\n\t* exp_attr.adb: Minor reformatting and a typo fix in some\n\tcomments.\n\t* sem_ch12.adb: Fix three typos in comments.", "tree": {"sha": "c8380048b99fdc1675e2be42a2c80d7f848cfbe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8380048b99fdc1675e2be42a2c80d7f848cfbe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c392a001491bd8603556bd922d073a96b6df8724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c392a001491bd8603556bd922d073a96b6df8724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c392a001491bd8603556bd922d073a96b6df8724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c392a001491bd8603556bd922d073a96b6df8724/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f25161bdcc2b098a4678a42bb2c581ac47625b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25161bdcc2b098a4678a42bb2c581ac47625b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25161bdcc2b098a4678a42bb2c581ac47625b17"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "44cbe68dd79f042bf1406648a9dcb4818f70b54d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c392a001491bd8603556bd922d073a96b6df8724", "patch": "@@ -4180,10 +4180,10 @@ package Einfo is\n --       for the function case.\n \n --    Returns_By_Ref (Flag90)\n---       Defined in subprogram type entities and functions. Set if a\n---       function (or an access to function type) returns a result by\n---       reference, either because its return type is a by-reference-type or\n---       because said function explicitly uses the secondary stack.\n+--       Defined in subprogram type entities and functions. Set if a function\n+--       (or an access-to-function type) returns a result by reference, either\n+--       because its return type is a by-reference-type or because the function\n+--       explicitly uses the secondary stack.\n \n --    Reverse_Bit_Order (Flag164) [base type only]\n --       Defined in all record type entities. Set if entity has a Bit_Order"}, {"sha": "3a74d0679f01e019ab5c929239146b5bca578d8b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=c392a001491bd8603556bd922d073a96b6df8724", "patch": "@@ -316,8 +316,8 @@ package body Exp_Aggr is\n    function Max_Aggregate_Size\n      (Typ          : Entity_Id;\n       Default_Size : Nat := 5000) return Nat;\n-   --  Return the max size for a static aggregate for the given Typ.\n-   --  Return Default_Size if no other special criteria triggers.\n+   --  Return the max size for a static aggregate of the given Typ.\n+   --  Return Default_Size if no other special criteria trigger.\n \n    function Packed_Array_Aggregate_Handled (N : Node_Id) return Boolean;\n    --  Given an array aggregate, this function handles the case of a packed"}, {"sha": "aa049fcc9f9fa56bb9aeed759e1e00771db4f68e", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=c392a001491bd8603556bd922d073a96b6df8724", "patch": "@@ -4855,13 +4855,13 @@ package body Exp_Attr is\n          Rewrite (N,\n            Make_If_Expression (Loc, New_List (\n \n-             --  Generate a check for zero sized things like a null record with\n+             --  Generate a check for zero-sized things like a null record with\n              --  size zero or an array with zero length since they have no\n              --  opportunity of overlapping.\n \n-             --  Without this check a zero-sized object can trigger a false\n-             --  runtime result if its compared against another object\n-             --  in its declarative region due to the zero-sized object having\n+             --  Without this check, a zero-sized object can trigger a false\n+             --  runtime result if it's compared against another object in\n+             --  its declarative region, due to the zero-sized object having\n              --  the same address.\n \n              Make_Or_Else (Loc,\n@@ -4882,7 +4882,7 @@ package body Exp_Attr is\n \n              New_Occurrence_Of (Standard_False, Loc),\n \n-             --  Non-size zero overlap check\n+             --  Non-zero-size overlap check\n \n              Make_If_Expression (Loc, New_List (\n                Cond,"}, {"sha": "80a8246b3a6a7bdd8f511c789af9387a96a82319", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c392a001491bd8603556bd922d073a96b6df8724/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=c392a001491bd8603556bd922d073a96b6df8724", "patch": "@@ -1753,7 +1753,7 @@ package body Sem_Ch12 is\n \n                      --  Warn when an actual is a fixed-point with user-\n                      --  defined promitives. The warning is superfluous\n-                     --  if the fornal is private, because there can be\n+                     --  if the formal is private, because there can be\n                      --  no arithmetic operations in the generic so there\n                      --  no danger of confusion.\n \n@@ -12394,12 +12394,12 @@ package body Sem_Ch12 is\n \n       --  Ada 2020: Verify that shared variable control aspects (RM C.6)\n       --  that may be specified for the formal are obeyed by the actual.\n-      --  If the fornal is a derived type the aspect specifications must match.\n+      --  If the formal is a derived type the aspect specifications must match.\n       --  NOTE: AI12-0282 implies that matching of aspects is required between\n       --  formal and actual in all cases, but this is too restrictive.\n       --  In particular it violates a language design rule: a limited private\n       --  indefinite formal can be matched by any actual. The current code\n-      --  reflects an older and more permissve version of RM C.6 (12/5).\n+      --  reflects an older and more permissive version of RM C.6 (12/5).\n \n       procedure Check_Shared_Variable_Control_Aspects is\n       begin"}]}