{"sha": "d5d0a377e65d1f802d51246fbe08524e3fc4b831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVkMGEzNzdlNjVkMWY4MDJkNTEyNDZmYmUwODUyNGUzZmM0YjgzMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-22T00:42:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-22T00:42:06Z"}, "message": "Initial revision\n\nFrom-SVN: r14282", "tree": {"sha": "3b4efd77c6b5644eda4ceb1b1ff9ee2033cf886f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b4efd77c6b5644eda4ceb1b1ff9ee2033cf886f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5d0a377e65d1f802d51246fbe08524e3fc4b831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d0a377e65d1f802d51246fbe08524e3fc4b831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d0a377e65d1f802d51246fbe08524e3fc4b831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d0a377e65d1f802d51246fbe08524e3fc4b831/comments", "author": null, "committer": null, "parents": [{"sha": "3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3379e8efc6a0efd008bd3bc9ae15fa6bc233dc1f"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "59553a63dbba1b233c8222cb039f6caa49906632", "filename": "gcc/objc/Make-lang.in", "status": "added", "additions": 265, "deletions": 0, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5d0a377e65d1f802d51246fbe08524e3fc4b831/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5d0a377e65d1f802d51246fbe08524e3fc4b831/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=d5d0a377e65d1f802d51246fbe08524e3fc4b831", "patch": "@@ -0,0 +1,265 @@\n+# Top level makefile fragment for GNU Objective-C\n+#   Copyright (C) 1997 Free Software Foundation, Inc.\n+\n+#This file is part of GNU CC.\n+\n+#GNU CC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GNU CC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GNU CC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 59 Temple Place - Suite 330,\n+#Boston, MA 02111-1307, USA.\n+\n+# This file provides the language dependent support in the main Makefile.\n+# Each language makefile fragment must provide the following targets:\n+#\n+# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,\n+# foo.info, foo.dvi,\n+# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,\n+# foo.uninstall, foo.distdir,\n+# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,\n+# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4\n+#\n+# where `foo' is the name of the language.\n+#\n+# It should also provide rules for:\n+#\n+# - making any compiler driver (eg: g++)\n+# - the compiler proper (eg: cc1plus)\n+# - define the names for selecting the language in LANGUAGES.\n+\f\n+# Extra flags to pass to recursive makes.\n+OBJC_FLAGS_TO_PASS = \\\n+\t\"OBJC_FOR_BUILD=$(OBJC_FOR_BUILD)\" \\\n+\t\"OBJCFLAGS=$(OBJCFLAGS)\" \\\n+\t\"OBJC_FOR_TARGET=$(OBJC_FOR_TARGET)\" \\\n+\n+# Actual names to use when installing a native compiler.\n+#OBJC_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`\n+\n+# Actual names to use when installing a cross-compiler.\n+#OBJC_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`\n+\n+\f\n+# Define the names for selecting Objective-C in LANGUAGES.\n+OBJC objc: cc1obj objc-runtime\n+OBJECTIVE-C objective-c: cc1obj objc-runtime\n+\n+# Tell GNU make to ignore these if they exist.\n+.PHONY: objective-c objc ObjC\n+\n+# C common object files required by Objective C.\n+OBJC_CCOMMON = $(srcdir)/c-lex.o $(srcdir)/c-pragma.o \\\n+ $(srcdir)/c-decl.o $(srcdir)/c-typeck.o $(srcdir)/c-convert.o \\\n+ $(srcdir)/c-aux-info.o $(srcdir)/c-common.o $(srcdir)/c-iterate.o\n+\n+# Language-specific object files for Objective C.\n+OBJC_OBJS = $(srcdir)/objc/objc-parse.o $(srcdir)/objc/objc-act.o\n+\n+cc1obj: $(P) $(OBJC_OBJS) $(OBJC_CCOMMON) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJC_OBJS) $(OBJS) \\\n+\t\t$(OBJC_CCOMMON) $(BC_OBJS) $(LIBS)\n+\n+# Objective C language specific files.\n+\n+$(srcdir)/objc/objc-parse.o : $(srcdir)/objc/objc-parse.c \\\n+   $(CONFIG_H) $(TREE_H) \\\n+   $(srcdir)/c-lex.h $(srcdir)/c-tree.h $(srcdir)/input.h \\\n+   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n+\t-c $(srcdir)/objc/objc-parse.c -o $(srcdir)/objc/objc-parse.o\n+\n+$(srcdir)/objc/objc-parse.c : $(srcdir)/objc/objc-parse.y\n+\tcd $(srcdir); $(BISON) $(BISONFLAGS) \\\n+\t$(srcdir)/objc/objc-parse.y -o $(srcdir)/objc/objc-parse.c\n+\n+$(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n+\techo '/*WARNING: This file is automatically generated!*/' >tmp-objc-prs.y\n+\tsed -e \"/^ifc$$/,/^end ifc$$/d\" \\\n+\t  -e \"/^ifobjc$$/d\" -e \"/^end ifobjc$$/d\" \\\n+\t  $(srcdir)/c-parse.in >>tmp-objc-prs.y\n+\t$(srcdir)/move-if-change tmp-objc-prs.y $(srcdir)/objc/objc-parse.y\n+\n+$(srcdir)/objc/objc-act.o : $(srcdir)/objc/objc-act.c \\\n+   $(CONFIG_H) $(TREE_H) $(RTL_H) \\\n+   $(srcdir)/c-tree.h $(srcdir)/c-lex.h \\\n+   $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h \\\n+   $(srcdir)/function.h $(srcdir)/c-parse.h\n+\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\\n+\t-c $(srcdir)/objc/objc-act.c -o $(srcdir)/objc/objc-act.o\n+\n+objc-runtime: libobjc.a\n+\n+# copy objc header files into build directory\n+objc-headers: stmp-fixinc\n+\tif [ -d include ]; then true; else mkdir include; fi\n+\tif [ -d objc ]; then true; else mkdir objc; fi\n+\tthisdir1=`pwd`; \\\n+\tsrcdir1=`cd $(srcdir); pwd`; \\\n+\tcd objc; \\\n+\tif [ -f $${srcdir1}/objc/Makefile ]; then \\\n+\t  $(MAKE) -f $${srcdir1}/objc/Makefile copy-headers \\\n+\t  srcdir=$${srcdir1} tooldir=$(tooldir) \\\n+\t  AR=\"$(AR)\" AR_FLAGS=\"$(AR_FLAGS)\" \\\n+\t  GCC_FOR_TARGET=\"$${thisdir1}/xgcc -B$${thisdir1}/\" \\\n+\t  GCC_CFLAGS=\"$(GCC_CFLAGS)\" incinstalldir=$${thisdir1}/include; \\\n+\tfi\n+\ttouch objc-headers\n+\n+# Objective C runtime library specific files.\n+\n+OBJC_O = $(srcdir)/objc/hash.o $(srcdir)/objc/sarray.o \\\n+\t$(srcdir)/objc/class.o $(srcdir)/objc/sendmsg.o \\\n+\t$(srcdir)/objc/init.o $(srcdir)/objc/archive.o \\\n+\t$(srcdir)/objc/encoding.o $(srcdir)/objc/selector.o \\\n+\t$(srcdir)/objc/objects.o $(srcdir)/objc/misc.o \\\n+\t$(srcdir)/objc/NXConstStr.o $(srcdir)/objc/Object.o \\\n+\t$(srcdir)/objc/Protocol.o $(srcdir)/objc/nil_method.o \\\n+\t$(srcdir)/objc/thr.o $(srcdir)/objc/linking.o \\\n+\t$(srcdir)/objc/$(OBJC_THREAD_FILE).o\n+\n+$(srcdir)/objc/hash.o: $(srcdir)/objc/hash.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/hash.c -o $@\n+$(srcdir)/objc/sarray.o: $(srcdir)/objc/sarray.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/sarray.c -o $@\n+$(srcdir)/objc/class.o: $(srcdir)/objc/class.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/class.c -o $@\n+$(srcdir)/objc/sendmsg.o: $(srcdir)/objc/sendmsg.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/sendmsg.c -o $@\n+$(srcdir)/objc/init.o: $(srcdir)/objc/init.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/init.c -o $@\n+$(srcdir)/objc/archive.o: $(srcdir)/objc/archive.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/archive.c -o $@\n+$(srcdir)/objc/encoding.o: $(srcdir)/objc/encoding.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/encoding.c -o $@\n+$(srcdir)/objc/selector.o: $(srcdir)/objc/selector.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/selector.c -o $@\n+$(srcdir)/objc/objects.o: $(srcdir)/objc/objects.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/objects.c -o $@\n+$(srcdir)/objc/misc.o: $(srcdir)/objc/misc.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/misc.c -o $@\n+$(srcdir)/objc/NXConstStr.o: $(srcdir)/objc/NXConstStr.m\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/NXConstStr.m -o $@\n+$(srcdir)/objc/Object.o: $(srcdir)/objc/Object.m\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/Object.m -o $@\n+$(srcdir)/objc/Protocol.o: $(srcdir)/objc/Protocol.m\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/Protocol.m -o $@\n+$(srcdir)/objc/thr.o: $(srcdir)/objc/thr.h $(srcdir)/objc/thr.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/thr.c -o $@\n+$(srcdir)/objc/$(OBJC_THREAD_FILE).o: $(srcdir)/objc/$(OBJC_THREAD_FILE).c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/$(OBJC_THREAD_FILE).c -o $@\n+$(srcdir)/objc/nil_method.o: $(srcdir)/objc/nil_method.c\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/nil_method.c -o $@\n+$(srcdir)/objc/linking.o: $(srcdir)/objc/linking.m\n+\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) \\\n+\t-c $(srcdir)/objc/linking.m -o $@\n+\n+# Build the Objective C runtime library.\n+libobjc.a: cc1obj specs stmp-int-hdrs libgcc2.ready \\\n+ $(USE_COLLECT2) $(EXTRA_PARTS) $(OBJC_O)\n+\t-rm -f libobjc.a\n+\t$(AR) $(AR_FLAGS) libobjc.a $(OBJC_O)\n+\t-if $(RANLIB_TEST) ; then $(RANLIB) libobjc.a; else true; fi\n+\n+\f\n+# Build hooks:\n+\n+objc.all.build:\n+objc.all.cross:\n+objc.start.encap:\n+objc.rest.encap:\n+\n+objc.info:\n+objc.dvi:\n+\n+\f\n+# Install hooks:\n+# cc1obj is installed elsewhere as part of $(COMPILERS).\n+\n+# Nothing to do here.\n+objc.install-normal: installdirs\n+\t-if [ -f libobjc.a ] ; then \\\n+\t  rm -f $(libsubdir)/libobjc.a; \\\n+\t  $(INSTALL_DATA) libobjc.a $(libsubdir)/libobjc.a; \\\n+\t  if $(RANLIB_TEST) ; then \\\n+\t    (cd $(libsubdir); $(RANLIB) libobjc.a); else true; fi; \\\n+\t  chmod a-x $(libsubdir)/libobjc.a; \\\n+\telse true; fi\n+\n+\n+objc.install-common:\n+\n+objc.install-info:\n+\n+objc.install-man:\n+\n+objc.uninstall:\n+\f\n+# Clean hooks:\n+# A lot of the ancillary files are deleted by the main makefile.\n+# We just have to delete files specific to us.\n+objc.mostlyclean:\n+\t-rm -f tmp-objc-prs.y\n+\t-rm -f objc/*$(objext) objc/xforward objc/fflags\n+\t-rm -f libobjc.a\n+objc.clean: objc.mostlyclean\n+\t-rm -rf objc-headers\n+objc.distclean:\n+\t-rm -f objc/Makefile objc/Make-host objc/Make-target\n+\t-rm -f objc/config.status objc/config.cache\n+\t-rm -f objc-parse.output\n+objc.extraclean:\n+objc.maintainer-clean:\n+\t-rm -f objc/objc-parse.y\n+\t-rm -f objc/objc-parse.c objc/objc-parse.output\n+\n+\f\n+# Stage hooks:\n+\n+objc.stage1:\n+\t-mv objc/*$(objext) stage1/objc\n+\t-mv cc1obj$(exeext) stage1\n+\t-mv libobjc.a stage1\n+objc.stage2:\n+\t-mv objc/*$(objext) stage2/objc\n+\t-mv cc1obj$(exeext) stage2\n+\t-mv libobjc.a stage2\n+objc.stage3:\n+\t-mv objc/*$(objext) stage3/objc\n+\t-mv cc1obj$(exeext) stage3\n+\t-mv libobjc.a stage3\n+objc.stage4:\n+\t-mv objc/*$(objext) stage4/objc\n+\t-mv cc1obj$(exeext) stage4\n+\t-mv libobjc.a stage4\n+\n+\f\n+# Maintenance hooks:\n+\n+# This target creates the files that can be rebuilt, but go in the\n+# distribution anyway.  It then copies the files to the distdir directory.\n+objc.distdir:"}]}