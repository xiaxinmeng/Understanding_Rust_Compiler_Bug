{"sha": "46abada07fd5354741fa2d12147b0ff22b858fb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhYmFkYTA3ZmQ1MzU0NzQxZmEyZDEyMTQ3YjBmZjIyYjg1OGZiNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-02-12T02:39:33Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-02-12T02:39:33Z"}, "message": "*: Populate with regenerated files.\n\n\n2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/html/*: Populate with regenerated files.\n\nFrom-SVN: r132251", "tree": {"sha": "8e1567f3393147d2f0ccf7dabdc2b51d32e766a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1567f3393147d2f0ccf7dabdc2b51d32e766a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46abada07fd5354741fa2d12147b0ff22b858fb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46abada07fd5354741fa2d12147b0ff22b858fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46abada07fd5354741fa2d12147b0ff22b858fb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46abada07fd5354741fa2d12147b0ff22b858fb4/comments", "author": null, "committer": null, "parents": [{"sha": "620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620039adfb7162e9a9ce6a9b90fd3f14d711c5fc"}], "stats": {"total": 19357, "additions": 19357, "deletions": 0}, "files": [{"sha": "bb19e8ccf20c1dc400a7e89a49c057fa5caa6a2a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -1,3 +1,7 @@\n+2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/html/*: Populate with regenerated files.\n+\n 2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/html/*: Remove all but contents of ext/pb_ds."}, {"sha": "f9f7e65b0f758a917f51bb35ed91f5fa70f81498", "filename": "libstdc++-v3/doc/html/api.html", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fapi.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>API and Source Level Documentation</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk02.html\" title=\"\" /><link rel=\"prev\" href=\"bk02.html\" title=\"\" /><link rel=\"next\" href=\"bk03.html\" title=\"\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">API and Source Level Documentation</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\"></th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk03.html\">Next</a></td></tr></table><hr /></div><div class=\"article\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"api\"></a>API and Source Level Documentation</h2></div><div><p class=\"copyright\">Copyright \u00a9 \n+      2008\n+     \n+      <a class=\"ulink\" href=\"http://fsf.org\" target=\"_top\">FSF\n+      </a>\n+    </p></div><div><div class=\"legalnotice\"><a id=\"id330876\"></a><p>\n+      <a class=\"ulink\" href=\"17_intro/license.html\" target=\"_top\">License \n+      </a>\n+    </p></div></div></div><hr /></div><p>\n+The GNU C++ library sources have been specially formatted so that with the\n+proper invocation of another tool (Doxygen), a set of HTML pages\n+are generated from the sources files themselves. The resultant\n+documentation is referred to as Source Level Documentation, and is\n+useful for examining the signatures of public member functions for\n+the library classes, finding out what is in a particular include\n+file, looking at inheritance diagrams, etc.\n+</p><p>\n+The source-level documentation for the most recent releases can be\n+viewed online:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+      <a class=\"ulink\" href=\"libstdc++-html-USERS-3.4/index.html\" target=\"_top\">for the 3.4 release\n+      </a>\n+    </p></li><li><p>\n+      <a class=\"ulink\" href=\"libstdc++-html-USERS-4.1/index.html\" target=\"_top\">for the 4.1 release\n+      </a>\n+    </p></li><li><p>\n+      <a class=\"ulink\" href=\"libstdc++-html-USERS-4.2/index.html\" target=\"_top\">for the 4.2 release\n+      </a>\n+    </p></li><li><p>\n+      <a class=\"ulink\" href=\"latest-doxygen/index.html\" target=\"_top\">\"the latest collection\"\n+      </a>\n+      (For the main development tree; see the date on the first page.)\n+    </p></li></ul></div><p>\n+This generated HTML collection, as above, is also available for download in the libstdc++ snapshots directory at\n+   <code class=\"literal\">&lt;URL:ftp://gcc.gnu.org/pub/gcc/libstdc++/doxygen/&gt;</code>.\n+   You will almost certainly need to use one of the\n+   <a class=\"ulink\" href=\"http://gcc.gnu.org/mirrors.html\" target=\"_top\">mirror sites</a> to download\n+   the tarball.  After unpacking, simply load libstdc++-html-*/index.html\n+   into a browser.\n+</p><p>\n+Documentation for older releases is available for download only, not\n+online viewing.\n+</p><p>\n+In addition, an initial set of man pages are also available in the\n+same place as the HTML collections.  Start with C++Intro(3).\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk02.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0</td></tr></table></div></body></html>"}, {"sha": "a93a9ece9fa418d247b9361bb7d5765daa186254", "filename": "libstdc++-v3/doc/html/bk02.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fbk02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fbk02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fbk02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title></title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"prev\" href=\"manual/backwards.html\" title=\"Backwards Compatibility\" /><link rel=\"next\" href=\"api.html\" title=\"API and Source Level Documentation\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\"></th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"manual/backwards.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">\u00a0</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr></table><hr /></div><div class=\"book\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><hr /></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"article\"><a href=\"api.html\">API and Source Level Documentation</a></span></dt></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"manual/backwards.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\">\u00a0</td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Backwards Compatibility\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0API and Source Level Documentation</td></tr></table></div></body></html>"}, {"sha": "49c532b55154a37904616e6b49115fb526524d3f", "filename": "libstdc++-v3/doc/html/bk03.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fbk03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fbk03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fbk03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title></title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"prev\" href=\"api.html\" title=\"API and Source Level Documentation\" /><link rel=\"next\" href=\"faq.html\" title=\"Frequently Asked Questions\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\"></th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"api.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">\u00a0</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"faq.html\">Next</a></td></tr></table><hr /></div><div class=\"book\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><hr /></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"article\"><a href=\"faq.html\">Frequently Asked Questions</a></span></dt></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"api.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\">\u00a0</td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"faq.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">API and Source Level Documentation\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Frequently Asked Questions</td></tr></table></div></body></html>"}, {"sha": "966f55a253668556d3ce5ede1390c734da752673", "filename": "libstdc++-v3/doc/html/faq.html", "status": "added", "additions": 873, "deletions": 0, "changes": 873, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,873 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Frequently Asked Questions</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk03.html\" title=\"\" /><link rel=\"prev\" href=\"bk03.html\" title=\"\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Frequently Asked Questions</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\"></th><td width=\"20%\" align=\"right\">\u00a0</td></tr></table><hr /></div><div class=\"article\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"faq\"></a>Frequently Asked Questions</h2></div><div><p class=\"copyright\">Copyright \u00a9 \n+      2008\n+     \n+      <a class=\"ulink\" href=\"http://fsf.org\" target=\"_top\">FSF</a>\n+    </p></div></div><hr /></div><div class=\"qandaset\"><dl><dt>1.  <a href=\"faq.html#faq.info\">General Information</a></dt><dd><dl><dt>1.1. <a href=\"faq.html#faq.what\">\n+      What is libstdc++?\n+    </a></dt><dt>1.2. <a href=\"faq.html#faq.why\">\n+      Why should I use libstdc++?\n+    </a></dt><dt>1.3. <a href=\"faq.html#faq.who\">\n+      Who's in charge of it?\n+    </a></dt><dt>1.4. <a href=\"faq.html#faq.when\">\n+      When is libstdc++ going to be finished?\n+    </a></dt><dt>1.5. <a href=\"faq.html#faq.how\">\n+      How do I contribute to the effort?\n+    </a></dt><dt>1.6. <a href=\"faq.html#faq.whereis_old\">\n+      What happened to the older libg++? I need that!\n+    </a></dt><dt>1.7. <a href=\"faq.html#faq.more_questions\">\n+      What if I have more questions?\n+    </a></dt></dl></dd><dt>2.  <a href=\"faq.html#faq.license\">License</a></dt><dd><dl><dt>2.1. <a href=\"faq.html#faq.license.what\">\n+      What are the license terms for libstdc++?\n+    </a></dt><dt>2.2. <a href=\"faq.html#faq.license.any_program\">\n+      So any program which uses libstdc++ falls under the GPL?\n+    </a></dt><dt>2.3. <a href=\"faq.html#faq.license.lgpl\">\n+      How is that different from the GNU {Lesser,Library} GPL?\n+    </a></dt><dt>2.4. <a href=\"faq.html#faq.license.what_restrictions\">\n+      I see. So, what restrictions are there on programs that use the library?\n+    </a></dt></dl></dd><dt>3.  <a href=\"faq.html#faq.installation\">Installation</a></dt><dd><dl><dt>3.1. <a href=\"faq.html#faq.how_to_install\">How do I install libstdc++?\n+    </a></dt><dt>3.2. <a href=\"faq.html#faq.how_to_get_sources\">How does one get current libstdc++ sources?\n+    </a></dt><dt>3.3. <a href=\"faq.html#faq.how_to_test\">How do I know if it works?\n+    </a></dt><dt>3.4. <a href=\"faq.html#faq.how_to_set_paths\">How do I insure that the dynamically linked library will be found?\n+    </a></dt><dt>3.5. <a href=\"faq.html#faq.what_is_libsupcxx\">\n+      What's libsupc++?\n+    </a></dt><dt>3.6. <a href=\"faq.html#faq.size\">\n+      This library is HUGE!\n+    </a></dt></dl></dd><dt>4.  <a href=\"faq.html#faq.platform-specific\">Platform-Specific Issues</a></dt><dd><dl><dt>4.1. <a href=\"faq.html#faq.other_compilers\">\n+      Can libstdc++ be used with non-GNU compilers?\n+    </a></dt><dt>4.2. <a href=\"faq.html#faq.solaris_long_long\">\n+      No 'long long' type on Solaris?\n+    </a></dt><dt>4.3. <a href=\"faq.html#faq.predefined\">\n+      _XOPEN_SOURCE and _GNU_SOURCE are always defined?\n+    </a></dt><dt>4.4. <a href=\"faq.html#faq.darwin_ctype\">\n+      Mac OS X ctype.h is broken! How can I fix it?\n+    </a></dt><dt>4.5. <a href=\"faq.html#faq.threads_i386\">\n+      Threading is broken on i386?\n+    </a></dt><dt>4.6. <a href=\"faq.html#faq.atomic_mips\">\n+      MIPS atomic operations\n+    </a></dt><dt>4.7. <a href=\"faq.html#faq.linux_glibc\">\n+      Recent GNU/Linux glibc required?\n+    </a></dt><dt>4.8. <a href=\"faq.html#faq.freebsd_wchar\">\n+      Can't use wchar_t/wstring on FreeBSD\n+    </a></dt></dl></dd><dt>5.  <a href=\"faq.html#faq.known_bugs\">Known Bugs</a></dt><dd><dl><dt>5.1. <a href=\"faq.html#faq.what_works\">\n+      What works already?\n+    </a></dt><dt>5.2. <a href=\"faq.html#faq.standard_bugs\">\n+      Bugs in the ISO C++ language or library specification\n+    </a></dt><dt>5.3. <a href=\"faq.html#faq.compiler_bugs\">\n+      Bugs in the compiler (gcc/g++) and not libstdc++\n+    </a></dt></dl></dd><dt>6.  <a href=\"faq.html#faq.known_non-bugs\">Known Non-Bugs</a></dt><dd><dl><dt>6.1. <a href=\"faq.html#faq.stream_reopening_fails\">\n+      Reopening a stream fails\n+    </a></dt><dt>6.2. <a href=\"faq.html#faq.wefcxx_verbose\">\n+      -Weffc++ complains too much\n+    </a></dt><dt>6.3. <a href=\"faq.html#faq.ambiguous_overloads\">\n+      Ambiguous overloads after including an old-style header\n+    </a></dt><dt>6.4. <a href=\"faq.html#faq.v2_headers\">\n+      The g++-3 headers are not ours\n+    </a></dt><dt>6.5. <a href=\"faq.html#faq.boost_concept_checks\">\n+      Errors about *Concept and\n+      constraints in the STL\n+    </a></dt><dt>6.6. <a href=\"faq.html#faq.dlopen_crash\">\n+      Program crashes when using library code in a\n+      dynamically-loaded library\n+    </a></dt><dt>6.7. <a href=\"faq.html#faq.memory_leaks\">\n+      \u201cMemory leaks\u201d in containers\n+    </a></dt><dt>6.8. <a href=\"faq.html#faq.list_size_on\">\n+      list::size() is O(n)!\n+    </a></dt><dt>6.9. <a href=\"faq.html#faq.easy_to_fix\">\n+      Aw, that's easy to fix!\n+    </a></dt></dl></dd><dt>7.  <a href=\"faq.html#faq.misc\">Miscellaneous</a></dt><dd><dl><dt>7.1. <a href=\"faq.html#faq.iterator_as_pod\">\n+      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+    </a></dt><dt>7.2. <a href=\"faq.html#faq.what_is_next\">\n+      What's next after libstdc++?\n+    </a></dt><dt>7.3. <a href=\"faq.html#faq.sgi_stl\">\n+      What about the STL from SGI?\n+    </a></dt><dt>7.4. <a href=\"faq.html#faq.extensions_and_backwards_compat\">\n+      Extensions and Backward Compatibility\n+    </a></dt><dt>7.5. <a href=\"faq.html#faq.tr1_support\">\n+      Does libstdc++ support TR1?\n+    </a></dt><dt>7.6. <a href=\"faq.html#faq.get_iso_cxx\">How do I get a copy of the ISO C++ Standard?\n+    </a></dt><dt>7.7. <a href=\"faq.html#faq.what_is_abi\">\n+      What's an ABI and why is it so messy?\n+    </a></dt><dt>7.8. <a href=\"faq.html#faq.size_equals_capacity\">\n+      How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n+    </a></dt></dl></dd></dl><table border=\"0\" summary=\"Q and A Set\"><col align=\"left\" width=\"1%\" /><tbody><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.info\"></a>1. General Information</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>1.1. <a href=\"faq.html#faq.what\">\n+      What is libstdc++?\n+    </a></dt><dt>1.2. <a href=\"faq.html#faq.why\">\n+      Why should I use libstdc++?\n+    </a></dt><dt>1.3. <a href=\"faq.html#faq.who\">\n+      Who's in charge of it?\n+    </a></dt><dt>1.4. <a href=\"faq.html#faq.when\">\n+      When is libstdc++ going to be finished?\n+    </a></dt><dt>1.5. <a href=\"faq.html#faq.how\">\n+      How do I contribute to the effort?\n+    </a></dt><dt>1.6. <a href=\"faq.html#faq.whereis_old\">\n+      What happened to the older libg++? I need that!\n+    </a></dt><dt>1.7. <a href=\"faq.html#faq.more_questions\">\n+      What if I have more questions?\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.what\"></a><a id=\"faq.what.q\"></a><p><b>1.1.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What is libstdc++?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"faq.what.a\"></a></td><td align=\"left\" valign=\"top\"><p>\n+     The GNU Standard C++ Library v3 is an ongoing project to\n+     implement the ISO 14882 Standard C++ library as described in\n+     chapters 17 through 27 and annex D.  For those who want to see\n+     exactly how far the project has come, or just want the latest\n+     bleeding-edge code, the up-to-date source is available over\n+     anonymous SVN, and can even be browsed over\n+     the <a class=\"ulink\" href=\"http://gcc.gnu.org/svn.html\" target=\"_top\">web</a>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.why\"></a><a id=\"q-why\"></a><p><b>1.2.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Why should I use libstdc++?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-why\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    The completion of the ISO C++ standardization gave the C++\n+    community a powerful set of reuseable tools in the form of the C++\n+    Standard Library.  However, all existing C++ implementations are\n+    (as the Draft Standard used to say) \u201c<span class=\"quote\">incomplet and\n+    incorrekt</span>\u201d, and many suffer from limitations of the compilers\n+    that use them.\n+    </p><p>\n+    The GNU compiler collection\n+    (<span class=\"command\"><strong>gcc</strong></span>, <span class=\"command\"><strong>g++</strong></span>, etc) is widely\n+    considered to be one of the leading compilers in the world.  Its\n+    development is overseen by the\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/\" target=\"_top\">GCC team</a>.  All of\n+    the rapid development and near-legendary\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/buildstat.html\" target=\"_top\">portability</a>\n+    that are the hallmarks of an open-source project are being\n+    applied to libstdc++.\n+    </p><p>\n+    That means that all of the Standard classes and functions will be\n+    freely available and fully compliant. (Such as\n+    <code class=\"classname\">string</code>,\n+    <code class=\"classname\">vector&lt;&gt;</code>, iostreams, and algorithms.)\n+    Programmers will no longer need to \u201c<span class=\"quote\">roll their own</span>\u201d\n+    nor be worried about platform-specific incompatibilities.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.who\"></a><a id=\"q-who\"></a><p><b>1.3.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Who's in charge of it?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-who\"></a></td><td align=\"left\" valign=\"top\"><p>\n+     The libstdc++ project is contributed to by several developers\n+     all over the world, in the same way as GCC or Linux.\n+     Benjamin Kosnik, Gabriel Dos Reis, Phil Edwards, Ulrich Drepper,\n+     Loren James Rittle, and Paolo Carlini are the lead maintainers of\n+     the SVN archive.\n+    </p><p>\n+    Development and discussion is held on the libstdc++ mailing\n+    list.  Subscribing to the list, or searching the list\n+    archives, is open to everyone.  You can read instructions for\n+    doing so on the <a class=\"ulink\" href=\"http://gcc.gnu.org/libstdc++/\" target=\"_top\">homepage</a>.\n+    If you have questions, ideas, code, or are just curious, sign up!\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.when\"></a><a id=\"q-when\"></a><p><b>1.4.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      When is libstdc++ going to be finished?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-when\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Nathan Myers gave the best of all possible answers, responding to\n+    a Usenet article asking this question: <span class=\"emphasis\"><em>Sooner, if you\n+    help.</em></span>\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.how\"></a><a id=\"q-how\"></a><p><b>1.5.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      How do I contribute to the effort?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-how\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Here is <a class=\"ulink\" href=\"../17_intro/contribute.html\" target=\"_top\">a page devoted to\n+    this topic</a>. Subscribing to the mailing list (see above, or\n+    the homepage) is a very good idea if you have something to\n+    contribute, or if you have spare time and want to\n+    help. Contributions don't have to be in the form of source code;\n+    anybody who is willing to help write documentation, for example,\n+    or has found a bug in code that we all thought was working and is\n+    willing to provide details, is more than welcome!\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.whereis_old\"></a><a id=\"q-whereis_old\"></a><p><b>1.6.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What happened to the older libg++? I need that!\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-whereis_old\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    The most recent libg++ README states that libg++ is no longer\n+    being actively maintained.  It should not be used for new\n+    projects, and is only being kicked along to support older code.\n+    </p><p>\n+    More information in the <a class=\"link\" href=\"manual/backwards.html\" title=\"Backwards Compatibility\">backwards compatibility documentation</a>\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.more_questions\"></a><a id=\"q-more_questions\"></a><p><b>1.7.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What if I have more questions?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-more_questions\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    If you have read the README file, and your question remains\n+    unanswered, then just ask the mailing list. At present, you do not\n+    need to be subscribed to the list to send a message to it.  More\n+    information is available on the homepage (including how to browse\n+    the list archives); to send a message to the list,\n+    use <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:libstdc++@gcc.gnu.org\">libstdc++@gcc.gnu.org</a>&gt;</code>.\n+    </p><p> \n+    If you have a question that you think should be included\n+    here, or if you have a question <span class=\"emphasis\"><em>about</em></span> a question/answer\n+    here, please send email to the libstdc++ mailing list, as above.\n+    </p></td></tr><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.license\"></a>2. License</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>2.1. <a href=\"faq.html#faq.license.what\">\n+      What are the license terms for libstdc++?\n+    </a></dt><dt>2.2. <a href=\"faq.html#faq.license.any_program\">\n+      So any program which uses libstdc++ falls under the GPL?\n+    </a></dt><dt>2.3. <a href=\"faq.html#faq.license.lgpl\">\n+      How is that different from the GNU {Lesser,Library} GPL?\n+    </a></dt><dt>2.4. <a href=\"faq.html#faq.license.what_restrictions\">\n+      I see. So, what restrictions are there on programs that use the library?\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.license.what\"></a><a id=\"q-license.what\"></a><p><b>2.1.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What are the license terms for libstdc++?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-license.what\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    See <a class=\"link\" href=\"manual/bk01pt01ch01s02.html\" title=\"License\">our license description</a>\n+    for these and related questions.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.license.any_program\"></a><a id=\"q-license.any_program\"></a><p><b>2.2.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      So any program which uses libstdc++ falls under the GPL?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-license.any_program\"></a></td><td align=\"left\" valign=\"top\"><p>\n+     No. The special exception permits use of the library in\n+     proprietary applications.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.license.lgpl\"></a><a id=\"q-license.lgpl\"></a><p><b>2.3.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      How is that different from the GNU {Lesser,Library} GPL?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-license.lgpl\"></a></td><td align=\"left\" valign=\"top\"><p>\n+      The LGPL requires that users be able to replace the LGPL code with a\n+     modified version; this is trivial if the library in question is a C\n+     shared library.  But there's no way to make that work with C++, where\n+     much of the library consists of inline functions and templates, which\n+     are expanded inside the code that uses the library.  So to allow people\n+     to replace the library code, someone using the library would have to\n+     distribute their own source, rendering the LGPL equivalent to the GPL.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.license.what_restrictions\"></a><a id=\"q-license.what_restrictions\"></a><p><b>2.4.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      I see. So, what restrictions are there on programs that use the library?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-license.what_restrictions\"></a></td><td align=\"left\" valign=\"top\"><p>\n+      None.  We encourage such programs to be released as open source,\n+     but we won't punish you or sue you if you choose otherwise.\n+    </p></td></tr><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.installation\"></a>3. Installation</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>3.1. <a href=\"faq.html#faq.how_to_install\">How do I install libstdc++?\n+    </a></dt><dt>3.2. <a href=\"faq.html#faq.how_to_get_sources\">How does one get current libstdc++ sources?\n+    </a></dt><dt>3.3. <a href=\"faq.html#faq.how_to_test\">How do I know if it works?\n+    </a></dt><dt>3.4. <a href=\"faq.html#faq.how_to_set_paths\">How do I insure that the dynamically linked library will be found?\n+    </a></dt><dt>3.5. <a href=\"faq.html#faq.what_is_libsupcxx\">\n+      What's libsupc++?\n+    </a></dt><dt>3.6. <a href=\"faq.html#faq.size\">\n+      This library is HUGE!\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.how_to_install\"></a><a id=\"q-how_to_install\"></a><p><b>3.1.</b></p></td><td align=\"left\" valign=\"top\"><p>How do I install libstdc++?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-how_to_install\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Often libstdc++ comes pre-installed as an integral part of many\n+    existing Linux and Unix systems, as well as many embedded\n+    development tools. It may be necessary to install extra\n+    development packages to get the headers, or the documentation, or\n+    the source: please consult your vendor for details.\n+    </p><p> \n+    To build and install from the GNU GCC sources, please consult the \n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/install.html\" target=\"_top\">install\n+    documentation</a> for detailed\n+    instructions. You may wish to browse those files ahead\n+    of time to get a feel for what's required.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.how_to_get_sources\"></a><a id=\"q-how_to_get_sources\"></a><p><b>3.2.</b></p></td><td align=\"left\" valign=\"top\"><p>How does one get current libstdc++ sources?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-how_to_get_sources\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Libstdc++ sources for all official releases can be obtained as\n+    part of the GCC sources, available from various sites and\n+    mirrors. A full <a class=\"ulink\" href=\"http://gcc.gnu.org/mirrors.html\" target=\"_top\">list of \n+    download sites</a> is provided on the main GCC site.\n+    </p><p>\n+    Current libstdc++ sources can always be checked out of the main\n+    GCC source repository using the appropriate version control\n+    tool. At this time, that tool\n+    is <span class=\"application\">Subversion</span>.\n+    </p><p>\n+    <span class=\"application\">Subversion</span>, or <acronym class=\"acronym\">SVN</acronym>, is\n+    one of several revision control packages.  It was selected for GNU\n+    projects because it's free (speech), free (beer), and very high\n+    quality.  The <a class=\"ulink\" href=\"http://subversion.tigris.org\" target=\"_top\"> Subversion\n+    home page</a> has a better description.\n+    </p><p>\n+    The \u201c<span class=\"quote\">anonymous client checkout</span>\u201d feature of SVN is\n+    similar to anonymous FTP in that it allows anyone to retrieve\n+    the latest libstdc++ sources.\n+    </p><p>\n+    For more information\n+    see <a class=\"ulink\" href=\"http://gcc.gnu.org/svn.html\" target=\"_top\"><acronym class=\"acronym\">SVN</acronym>\n+    details</a>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.how_to_test\"></a><a id=\"q-how_to_test\"></a><p><b>3.3.</b></p></td><td align=\"left\" valign=\"top\"><p>How do I know if it works?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-how_to_test\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Libstdc++ comes with its own validation testsuite, which includes\n+    conformance testing, regression testing, ABI testing, and\n+    performance testing. Please consult the \n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/install/test.html\" target=\"_top\">testing\n+    documentation</a> for more details.\n+    </p><p>\n+    If you find bugs in the testsuite programs themselves, or if you\n+    think of a new test program that should be added to the suite,\n+    <span class=\"emphasis\"><em>please</em></span> write up your idea and send it to the list!\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.how_to_set_paths\"></a><a id=\"q-how_to_set_paths\"></a><p><b>3.4.</b></p></td><td align=\"left\" valign=\"top\"><p>How do I insure that the dynamically linked library will be found?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-how_to_set_paths\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Depending on your platform and library version, the error message might\n+    be similar to one of the following:\n+    </p><pre class=\"screen\">\n+    ./a.out: error while loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory\n+\n+    /usr/libexec/ld-elf.so.1: Shared object \"libstdc++.so.6\" not found\n+    </pre><p>\n+    This doesn't mean that the shared library isn't installed, only\n+    that the dynamic linker can't find it. When a dynamically-linked\n+    executable is run the linker finds and loads the required shared\n+    libraries by searching a pre-configured list of directories. If\n+    the directory where you've installed libstdc++ is not in this list\n+    then the libraries won't be found. The simplest way to fix this is\n+    to use the <code class=\"literal\">LD_LIBRARY_PATH</code> environment variable,\n+    which is a colon-separated list of directories in which the linker\n+    will search for shared libraries:\n+    </p><pre class=\"screen\">\n+    LD_LIBRARY_PATH=${prefix}/lib:$LD_LIBRARY_PATH\n+    export LD_LIBRARY_PATH\n+    </pre><p>\n+    The exact environment variable to use will depend on your\n+    platform, e.g. DYLD_LIBRARY_PATH for Darwin,\n+    LD_LIBRARY_PATH_32/LD_LIBRARY_PATH_64 for Solaris 32-/64-bit,\n+    LD_LIBRARYN32_PATH/LD_LIBRARY64_PATH for Irix N32/64-bit ABIs and\n+    SHLIB_PATH for HP-UX.\n+    </p><p>\n+    See the man pages for <span class=\"command\"><strong>ld</strong></span>, <span class=\"command\"><strong>ldd</strong></span>\n+    and <span class=\"command\"><strong>ldconfig</strong></span> for more information. The dynamic\n+    linker has different names on different platforms but the man page\n+    is usually called something such as <code class=\"filename\">ld.so/rtld/dld.so</code>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.what_is_libsupcxx\"></a><a id=\"q-what_is_libsupcxx\"></a><p><b>3.5.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What's libsupc++?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-what_is_libsupcxx\"></a></td><td align=\"left\" valign=\"top\"><p>\n+      If the only functions from <code class=\"filename\">libstdc++.a</code>\n+      which you need are language support functions (those listed in\n+      <a class=\"ulink\" href=\"../18_support/howto.html\" target=\"_top\">clause 18</a> of the\n+      standard, e.g., <code class=\"function\">new</code> and\n+      <code class=\"function\">delete</code>), then try linking against\n+      <code class=\"filename\">libsupc++.a</code>, which is a subset of\n+      <code class=\"filename\">libstdc++.a</code>.  (Using <span class=\"command\"><strong>gcc</strong></span>\n+      instead of <span class=\"command\"><strong>g++</strong></span> and explicitly linking in\n+      <code class=\"filename\">libsupc++.a</code> via <code class=\"literal\">-lsupc++</code>\n+      for the final link step will do it).  This library contains only\n+      those support routines, one per object file.  But if you are\n+      using anything from the rest of the library, such as IOStreams\n+      or vectors, then you'll still need pieces from\n+      <code class=\"filename\">libstdc++.a</code>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.size\"></a><a id=\"q-size\"></a><p><b>3.6.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      This library is HUGE!\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-size\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Usually the size of libraries on disk isn't noticeable.  When a\n+    link editor (or simply \u201c<span class=\"quote\">linker</span>\u201d) pulls things from a\n+    static archive library, only the necessary object files are copied\n+    into your executable, not the entire library.  Unfortunately, even\n+    if you only need a single function or variable from an object file,\n+    the entire object file is extracted.  (There's nothing unique to C++\n+    or libstdc++ about this; it's just common behavior, given here\n+    for background reasons.)\n+    </p><p>\n+    Some of the object files which make up libstdc++.a are rather large.\n+    If you create a statically-linked executable with\n+    <code class=\"literal\">-static</code>, those large object files are suddenly part\n+    of your executable.  Historically the best way around this was to\n+    only place a very few functions (often only a single one) in each\n+    source/object file; then extracting a single function is the same\n+    as extracting a single .o file.  For libstdc++ this is only\n+    possible to a certain extent; the object files in question contain\n+    template classes and template functions, pre-instantiated, and\n+    splitting those up causes severe maintenance headaches.\n+    </p><p>\n+    On supported platforms, libstdc++ takes advantage of garbage\n+    collection in the GNU linker to get a result similar to separating\n+    each symbol into a separate source and object files. On these platforms,\n+    GNU ld can place each function and variable into its own\n+    section in a .o file.  The GNU linker can then perform garbage\n+    collection on unused sections; this reduces the situation to only\n+    copying needed functions into the executable, as before, but all\n+    happens automatically.\n+    </p></td></tr><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.platform-specific\"></a>4. Platform-Specific Issues</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>4.1. <a href=\"faq.html#faq.other_compilers\">\n+      Can libstdc++ be used with non-GNU compilers?\n+    </a></dt><dt>4.2. <a href=\"faq.html#faq.solaris_long_long\">\n+      No 'long long' type on Solaris?\n+    </a></dt><dt>4.3. <a href=\"faq.html#faq.predefined\">\n+      _XOPEN_SOURCE and _GNU_SOURCE are always defined?\n+    </a></dt><dt>4.4. <a href=\"faq.html#faq.darwin_ctype\">\n+      Mac OS X ctype.h is broken! How can I fix it?\n+    </a></dt><dt>4.5. <a href=\"faq.html#faq.threads_i386\">\n+      Threading is broken on i386?\n+    </a></dt><dt>4.6. <a href=\"faq.html#faq.atomic_mips\">\n+      MIPS atomic operations\n+    </a></dt><dt>4.7. <a href=\"faq.html#faq.linux_glibc\">\n+      Recent GNU/Linux glibc required?\n+    </a></dt><dt>4.8. <a href=\"faq.html#faq.freebsd_wchar\">\n+      Can't use wchar_t/wstring on FreeBSD\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.other_compilers\"></a><a id=\"q-other_compilers\"></a><p><b>4.1.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Can libstdc++ be used with non-GNU compilers?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-other_compilers\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Perhaps.\n+    </p><p>\n+    Since the goal of ISO Standardization is for all C++\n+    implementations to be able to share code, libstdc++ should be\n+    usable under any ISO-compliant compiler, at least in theory.\n+    </p><p>\n+    However, the reality is that libstdc++ is targeted and optimized\n+    for GCC/g++. This means that often libstdc++ uses specific,\n+    non-standard features of g++ that are not present in older\n+    versions of proprietary compilers. It may take as much as a year or two\n+    after an official release of GCC that contains these features for\n+    proprietary tools support these constructs.\n+    </p><p>\n+    In the near past, specific released versions of libstdc++ have\n+    been known to work with versions of the EDG C++ compiler, and\n+    vendor-specific proprietary C++ compilers such as the Intel ICC\n+    C++ compiler.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.solaris_long_long\"></a><a id=\"q-solaris_long_long\"></a><p><b>4.2.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      No 'long long' type on Solaris?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-solaris_long_long\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    By default we try to support the C99 <span class=\"type\">long long</span> type.\n+    This requires that certain functions from your C library be present.\n+    </p><p> \n+    Up through release 3.0.2 the platform-specific tests performed by\n+    libstdc++ were too general, resulting in a conservative approach\n+    to enabling the <span class=\"type\">long long</span> code paths. The most\n+    commonly reported platform affected was Solaris.\n+    </p><p> \n+    This has been fixed for libstdc++ releases greater than 3.0.3.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.predefined\"></a><a id=\"q-predefined\"></a><p><b>4.3.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      <code class=\"constant\">_XOPEN_SOURCE</code> and <code class=\"constant\">_GNU_SOURCE</code> are always defined?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-predefined\"></a></td><td align=\"left\" valign=\"top\"><p>On Solaris, g++ (but not gcc) always defines the preprocessor\n+         macro <code class=\"constant\">_XOPEN_SOURCE</code>.  On GNU/Linux, the same happens\n+         with <code class=\"constant\">_GNU_SOURCE</code>.  (This is not an exhaustive list;\n+         other macros and other platforms are also affected.)\n+      </p><p>These macros are typically used in C library headers, guarding new\n+         versions of functions from their older versions.  The C++ standard\n+         library includes the C standard library, but it requires the C90\n+         version, which for backwards-compatibility reasons is often not the\n+         default for many vendors.\n+      </p><p>More to the point, the C++ standard requires behavior which is only\n+         available on certain platforms after certain symbols are defined.\n+         Usually the issue involves I/O-related typedefs.  In order to\n+         ensure correctness, the compiler simply predefines those symbols.\n+      </p><p>Note that it's not enough to #define them only when the library is\n+         being built (during installation).  Since we don't have an 'export'\n+         keyword, much of the library exists as headers, which means that\n+         the symbols must also be defined as your programs are parsed and\n+         compiled.\n+      </p><p>To see which symbols are defined, look for CPLUSPLUS_CPP_SPEC in\n+         the gcc config headers for your target (and try changing them to\n+         see what happens when building complicated code).  You can also run\n+         <span class=\"command\"><strong>g++ -E -dM - &lt; /dev/null\"</strong></span> to display\n+         a list of predefined macros for any particular installation.\n+      </p><p>This has been discussed on the mailing lists\n+         <a class=\"ulink\" href=\"http://gcc.gnu.org/cgi-bin/htsearch?method=and&amp;format=builtin-long&amp;sort=score&amp;words=_XOPEN_SOURCE+Solaris\" target=\"_top\">quite a bit</a>.\n+      </p><p>This method is something of a wart.  We'd like to find a cleaner\n+         solution, but nobody yet has contributed the time.\n+      </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.darwin_ctype\"></a><a id=\"q-darwin_ctype\"></a><p><b>4.4.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Mac OS X <code class=\"filename\">ctype.h</code> is broken! How can I fix it?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-darwin_ctype\"></a></td><td align=\"left\" valign=\"top\"><p>This is a long-standing bug in the OS X support.  Fortunately,\n+         the patch is quite simple, and well-known.\n+         <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/gcc/2002-03/msg00817.html\" target=\"_top\"> Here's a\n+         link to the solution</a>.\n+      </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.threads_i386\"></a><a id=\"q-threads_i386\"></a><p><b>4.5.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Threading is broken on i386?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-threads_i386\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    </p><p>Support for atomic integer operations is/was broken on i386\n+         platforms.  The assembly code accidentally used opcodes that are\n+         only available on the i486 and later.  So if you configured GCC\n+         to target, for example, i386-linux, but actually used the programs\n+         on an i686, then you would encounter no problems.  Only when\n+         actually running the code on a i386 will the problem appear.\n+      </p><p>This is fixed in 3.2.2.\n+      </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.atomic_mips\"></a><a id=\"q-atomic_mips\"></a><p><b>4.6.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      MIPS atomic operations\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-atomic_mips\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    The atomic locking routines for MIPS targets requires MIPS II\n+    and later.  A patch went in just after the 3.3 release to\n+    make mips* use the generic implementation instead.  You can also\n+    configure for mipsel-elf as a workaround.\n+    </p><p>    \n+    The mips*-*-linux* port continues to use the MIPS II routines, and more\n+    work in this area is expected.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.linux_glibc\"></a><a id=\"q-linux_glibc\"></a><p><b>4.7.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Recent GNU/Linux glibc required?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-linux_glibc\"></a></td><td align=\"left\" valign=\"top\"><p>When running on GNU/Linux, libstdc++ 3.2.1 (shared library version\n+         5.0.1) and later uses localization and formatting code from the system\n+         C library (glibc) version 2.2.5.  That version of glibc is over a\n+         year old and contains necessary bugfixes.  Many GNU/Linux distros make\n+         glibc version 2.3.x available now.\n+      </p><p>The guideline is simple:  the more recent the C++ library, the\n+         more recent the C library.  (This is also documented in the main\n+         GCC installation instructions.)\n+      </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.freebsd_wchar\"></a><a id=\"q-freebsd_wchar\"></a><p><b>4.8.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Can't use wchar_t/wstring on FreeBSD\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-freebsd_wchar\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Older versions of FreeBSD's C library do not have sufficient\n+    support for wide character functions, and as a result the\n+    libstdc++ configury decides that wchar_t support should be\n+    disabled. In addition, the libstdc++ platform checks that\n+    enabled <span class=\"type\">wchar_t</span> were quite strict, and not granular\n+    enough to detect when the minimal support to\n+    enable <span class=\"type\">wchar_t</span> and C++ library structures\n+    like <code class=\"classname\">wstring</code> were present. This impacted Solaris,\n+    Darwin, and BSD varients, and is fixed in libstdc++ versions post 4.1.0.\n+    </p><p> \n+    </p></td></tr><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.known_bugs\"></a>5. Known Bugs</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>5.1. <a href=\"faq.html#faq.what_works\">\n+      What works already?\n+    </a></dt><dt>5.2. <a href=\"faq.html#faq.standard_bugs\">\n+      Bugs in the ISO C++ language or library specification\n+    </a></dt><dt>5.3. <a href=\"faq.html#faq.compiler_bugs\">\n+      Bugs in the compiler (gcc/g++) and not libstdc++\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.what_works\"></a><a id=\"q-what_works\"></a><p><b>5.1.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What works already?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-what_works\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Short answer: Pretty much everything <span class=\"emphasis\"><em>works</em></span>\n+    except for some corner cases.  Support for localization\n+    in <code class=\"classname\">locale</code> may be incomplete on non-GNU\n+    platforms. Also dependant on the underlying platform is support\n+    for <span class=\"type\">wchar_t</span> and <span class=\"type\">long\n+    long</span> specializations, and details of thread support.\n+    </p><p>    \n+    Long answer: See the implementation status pages for \n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/c++1998_status.html\" target=\"_top\">C++98</a>,\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/tr1_status.html\" target=\"_top\">TR1</a>, and <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/c++0x_status.html\" target=\"_top\">C++0x</a>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.standard_bugs\"></a><a id=\"q-standard_bugs\"></a><p><b>5.2.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Bugs in the ISO C++ language or library specification\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-standard_bugs\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Unfortunately, there are some. \n+    </p><p>\n+    For those people who are not part of the ISO Library Group\n+    (i.e., nearly all of us needing to read this page in the first\n+    place), a public list of the library defects is occasionally\n+    published <a class=\"ulink\" href=\"http://anubis.dkuug.dk/jtc1/sc22/wg21/\" target=\"_top\">here</a>.\n+    Some of these issues have resulted in code changes in libstdc++.\n+    </p><p>\n+    If you think you've discovered a new bug that is not listed,\n+    please post a message describing your problem\n+    to <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:libstdc++@gcc.gnu.org\">libstdc++@gcc.gnu.org</a>&gt;</code> or the Usenet group\n+    comp.lang.c++.moderated.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.compiler_bugs\"></a><a id=\"q-compiler_bugs\"></a><p><b>5.3.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Bugs in the compiler (gcc/g++) and not libstdc++\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-compiler_bugs\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    On occasion, the compiler is wrong. Please be advised that this\n+    happens much less often than one would think, and avoid jumping to\n+    conclusions.\n+    </p><p>\n+    First, examine the ISO C++ standard. Second, try another compiler\n+    or an older version of the GNU compilers. Third, you can find more\n+    information on the libstdc++ and the GCC mailing lists: search\n+    these lists with terms describing your issue.\n+    </p><p> \n+    Before reporting a bug, please examine the\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/bugs.html\" target=\"_top\">bugs database</a> with the\n+    category set to \u201c<span class=\"quote\">g++</span>\u201d. \n+    </p></td></tr><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.known_non-bugs\"></a>6. Known Non-Bugs</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>6.1. <a href=\"faq.html#faq.stream_reopening_fails\">\n+      Reopening a stream fails\n+    </a></dt><dt>6.2. <a href=\"faq.html#faq.wefcxx_verbose\">\n+      -Weffc++ complains too much\n+    </a></dt><dt>6.3. <a href=\"faq.html#faq.ambiguous_overloads\">\n+      Ambiguous overloads after including an old-style header\n+    </a></dt><dt>6.4. <a href=\"faq.html#faq.v2_headers\">\n+      The g++-3 headers are not ours\n+    </a></dt><dt>6.5. <a href=\"faq.html#faq.boost_concept_checks\">\n+      Errors about *Concept and\n+      constraints in the STL\n+    </a></dt><dt>6.6. <a href=\"faq.html#faq.dlopen_crash\">\n+      Program crashes when using library code in a\n+      dynamically-loaded library\n+    </a></dt><dt>6.7. <a href=\"faq.html#faq.memory_leaks\">\n+      \u201cMemory leaks\u201d in containers\n+    </a></dt><dt>6.8. <a href=\"faq.html#faq.list_size_on\">\n+      list::size() is O(n)!\n+    </a></dt><dt>6.9. <a href=\"faq.html#faq.easy_to_fix\">\n+      Aw, that's easy to fix!\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.stream_reopening_fails\"></a><a id=\"q-stream_reopening_fails\"></a><p><b>6.1.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Reopening a stream fails\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-stream_reopening_fails\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    One of the most-reported non-bug reports. Executing a sequence like:\n+    </p><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0#include\u00a0&lt;fstream&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0...<br />\n+\u00a0\u00a0\u00a0\u00a0std::fstream\u00a0\u00a0fs(\u201c<span class=\"quote\">a_file</span>\u201d);<br />\n+\u00a0\u00a0\u00a0\u00a0//\u00a0.<br />\n+\u00a0\u00a0\u00a0\u00a0//\u00a0.\u00a0do\u00a0things\u00a0with\u00a0fs...<br />\n+\u00a0\u00a0\u00a0\u00a0//\u00a0.<br />\n+\u00a0\u00a0\u00a0\u00a0fs.close();<br />\n+\u00a0\u00a0\u00a0\u00a0fs.open(\u201c<span class=\"quote\">a_new_file</span>\u201d);<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div><p>\n+    All operations on the re-opened <code class=\"varname\">fs</code> will fail, or at\n+    least act very strangely.  Yes, they often will, especially if\n+    <code class=\"varname\">fs</code> reached the EOF state on the previous file.  The\n+    reason is that the state flags are <span class=\"emphasis\"><em>not</em></span> cleared\n+    on a successful call to open().  The standard unfortunately did\n+    not specify behavior in this case, and to everybody's great sorrow,\n+    the <a class=\"ulink\" href=\"../ext/howto.html#5\" target=\"_top\">proposed LWG resolution in\n+      DR #22</a> is to leave the flags unchanged.  You must insert a call\n+    to <code class=\"function\">fs.clear()</code> between the calls to close() and open(),\n+    and then everything will work like we all expect it to work.\n+    <span class=\"emphasis\"><em>Update:</em></span> for GCC 4.0 we implemented the resolution\n+    of <a class=\"ulink\" href=\"../ext/howto.html#5\" target=\"_top\">DR #409</a> and open() now calls\n+    <code class=\"function\">clear()</code> on success!\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.wefcxx_verbose\"></a><a id=\"q-wefcxx_verbose\"></a><p><b>6.2.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      -Weffc++ complains too much\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-wefcxx_verbose\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Many warnings are emitted when <code class=\"literal\">-Weffc++</code> is used.  Making\n+    libstdc++ <code class=\"literal\">-Weffc++</code>-clean is not a goal of the project,\n+    for a few reasons.  Mainly, that option tries to enforce\n+    object-oriented programming, while the Standard Library isn't\n+    necessarily trying to be OO.\n+    </p><p>\n+    We do, however, try to have libstdc++ sources as clean as possible. If\n+    you see some simple changes that pacify <code class=\"literal\">-Weffc++</code>\n+    without other drawbacks, send us a patch.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.ambiguous_overloads\"></a><a id=\"q-ambiguous_overloads\"></a><p><b>6.3.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Ambiguous overloads after including an old-style header\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-ambiguous_overloads\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Another problem is the <code class=\"literal\">rel_ops</code> namespace and the template\n+    comparison operator functions contained therein.  If they become\n+    visible in the same namespace as other comparison functions\n+    (e.g., \u201c<span class=\"quote\">using</span>\u201d them and the &lt;iterator&gt; header),\n+    then you will suddenly be faced with huge numbers of ambiguity\n+    errors.  This was discussed on the -v3 list; Nathan Myers\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\" target=\"_top\">sums\n+      things up here</a>.  The collisions with vector/string iterator\n+    types have been fixed for 3.1.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.v2_headers\"></a><a id=\"q-v2_headers\"></a><p><b>6.4.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      The g++-3 headers are <span class=\"emphasis\"><em>not ours</em></span>\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-v2_headers\"></a></td><td align=\"left\" valign=\"top\"><p>\n+\tIf you have found an extremely broken header file which is\n+\tcausing problems for you, look carefully before submitting a\n+\t\"high\" priority bug report (which you probably\n+\tshouldn't do anyhow; see the last paragraph of the page\n+\tdescribing <a class=\"ulink\" href=\"http://gcc.gnu.org/bugs.html\" target=\"_top\">the GCC\n+\tbug database</a>).\n+      </p><p>\n+\tIf the headers are in <code class=\"filename\">${prefix}/include/g++-3</code>, or\n+\tif the installed library's name looks like\n+\t<code class=\"filename\">libstdc++-2.10.a</code> or\n+\t<code class=\"filename\">libstdc++-libc6-2.10.so</code>, then you are using the\n+\told libstdc++-v2 library, which is nonstandard and\n+\tunmaintained.  Do not report problems with -v2 to the -v3\n+\tmailing list.\n+      </p><p>\n+\tFor GCC versions 3.0 and 3.1 the libstdc++ header files are\n+\tinstalled in <code class=\"filename\">${prefix}/include/g++-v3</code> (see the\n+\t'v'?).  Starting with version 3.2 the headers are installed in\n+\t<code class=\"filename\">${prefix}/include/c++/${version}</code> as this prevents\n+\theaders from previous versions being found by mistake.\n+      </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.boost_concept_checks\"></a><a id=\"q-boost_concept_checks\"></a><p><b>6.5.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Errors about <span class=\"emphasis\"><em>*Concept</em></span> and\n+      <span class=\"emphasis\"><em>constraints</em></span> in the STL\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-boost_concept_checks\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    If you see compilation errors containing messages about\n+    <span class=\"errortext\">foo Concept </span>and something to do with a\n+    <span class=\"errortext\">constraints</span> member function, then most\n+    likely you have violated one of the requirements for types used\n+    during instantiation of template containers and functions.  For\n+    example, EqualityComparableConcept appears if your types must be\n+    comparable with == and you have not provided this capability (a\n+    typo, or wrong visibility, or you just plain forgot, etc).\n+    </p><p>\n+    More information, including how to optionally enable/disable the\n+    checks, is available\n+    <a class=\"ulink\" href=\"../19_diagnostics/howto.html#3\" target=\"_top\">here</a>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.dlopen_crash\"></a><a id=\"q-dlopen_crash\"></a><p><b>6.6.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Program crashes when using library code in a\n+      dynamically-loaded library\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-dlopen_crash\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    If you are using the C++ library across dynamically-loaded\n+    objects, make certain that you are passing the correct options\n+    when compiling and linking:\n+    </p><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0//\u00a0compile\u00a0your\u00a0library\u00a0components<br />\n+\u00a0\u00a0\u00a0\u00a0g++\u00a0-fPIC\u00a0-c\u00a0a.cc<br />\n+\u00a0\u00a0\u00a0\u00a0g++\u00a0-fPIC\u00a0-c\u00a0b.cc<br />\n+\u00a0\u00a0\u00a0\u00a0...<br />\n+\u00a0\u00a0\u00a0\u00a0g++\u00a0-fPIC\u00a0-c\u00a0z.cc<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0//\u00a0create\u00a0your\u00a0library<br />\n+\u00a0\u00a0\u00a0\u00a0g++\u00a0-fPIC\u00a0-shared\u00a0-rdynamic\u00a0-o\u00a0libfoo.so\u00a0a.o\u00a0b.o\u00a0...\u00a0z.o<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0//\u00a0link\u00a0the\u00a0executable<br />\n+\u00a0\u00a0\u00a0\u00a0g++\u00a0-fPIC\u00a0-rdynamic\u00a0-o\u00a0foo\u00a0...\u00a0-L.\u00a0-lfoo\u00a0-ldl<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.memory_leaks\"></a><a id=\"q-memory_leaks\"></a><p><b>6.7.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      \u201c<span class=\"quote\">Memory leaks</span>\u201d in containers\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-memory_leaks\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    A few people have reported that the standard containers appear\n+    to leak memory when tested with memory checkers such as\n+    <a class=\"ulink\" href=\"http://developer.kde.org/~sewardj/\" target=\"_top\">valgrind</a>.\n+    The library's default allocators keep free memory in a pool\n+    for later reuse, rather than returning it to the OS.  Although\n+    this memory is always reachable by the library and is never\n+    lost, memory debugging tools can report it as a leak.  If you\n+    want to test the library for memory leaks please read\n+    <a class=\"ulink\" href=\"../debug.html#mem\" target=\"_top\">Tips for memory leak hunting</a>\n+    first.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.list_size_on\"></a><a id=\"q-list_size_on\"></a><p><b>6.8.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      list::size() is O(n)!\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-list_size_on\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    See\n+    the <a class=\"ulink\" href=\"../23_containers/howto.html#6\" target=\"_top\">Containers</a>\n+    chapter.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.easy_to_fix\"></a><a id=\"q-easy_to_fix\"></a><p><b>6.9.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Aw, that's easy to fix!\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-easy_to_fix\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    If you have found a bug in the library and you think you have\n+    a working fix, then send it in!  The main GCC site has a page\n+    on <a class=\"ulink\" href=\"http://gcc.gnu.org/contribute.html\" target=\"_top\">submitting\n+    patches</a> that covers the procedure, but for libstdc++ you\n+    should also send the patch to our mailing list in addition to\n+    the GCC patches mailing list.  The libstdc++\n+    <a class=\"ulink\" href=\"../17_intro/contribute.html\" target=\"_top\">contributors' page</a>\n+    also talks about how to submit patches.\n+    </p><p>\n+    In addition to the description, the patch, and the ChangeLog\n+    entry, it is a Good Thing if you can additionally create a small\n+    test program to test for the presence of the bug that your\n+    patch fixes.  Bugs have a way of being reintroduced; if an old\n+    bug creeps back in, it will be caught immediately by the\n+    <a class=\"ulink\" href=\"#2_4\" target=\"_top\">testsuite</a> -- but only if such a test exists.\n+    </p></td></tr><tr class=\"qandadiv\"><td align=\"left\" valign=\"top\" colspan=\"2\"><h3 class=\"title\"><a id=\"faq.misc\"></a>7. Miscellaneous</h3></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>7.1. <a href=\"faq.html#faq.iterator_as_pod\">\n+      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+    </a></dt><dt>7.2. <a href=\"faq.html#faq.what_is_next\">\n+      What's next after libstdc++?\n+    </a></dt><dt>7.3. <a href=\"faq.html#faq.sgi_stl\">\n+      What about the STL from SGI?\n+    </a></dt><dt>7.4. <a href=\"faq.html#faq.extensions_and_backwards_compat\">\n+      Extensions and Backward Compatibility\n+    </a></dt><dt>7.5. <a href=\"faq.html#faq.tr1_support\">\n+      Does libstdc++ support TR1?\n+    </a></dt><dt>7.6. <a href=\"faq.html#faq.get_iso_cxx\">How do I get a copy of the ISO C++ Standard?\n+    </a></dt><dt>7.7. <a href=\"faq.html#faq.what_is_abi\">\n+      What's an ABI and why is it so messy?\n+    </a></dt><dt>7.8. <a href=\"faq.html#faq.size_equals_capacity\">\n+      How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n+    </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.iterator_as_pod\"></a><a id=\"faq.iterator_as_pod_q\"></a><p><b>7.1.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"faq.iterator_as_pod_a\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    If you have code that depends on container&lt;T&gt; iterators\n+    being implemented as pointer-to-T, your code is broken. It's\n+    considered a feature, not a bug, that libstdc++ points this out.\n+    </p><p>\n+    While there are arguments for iterators to be implemented in\n+    that manner, A) they aren't very good ones in the long term,\n+    and B) they were never guaranteed by the Standard anyway.  The\n+    type-safety achieved by making iterators a real class rather\n+    than a typedef for <span class=\"type\">T*</span> outweighs nearly all opposing\n+    arguments.\n+    </p><p>\n+    Code which does assume that a vector iterator <code class=\"varname\">i</code>\n+    is a pointer can often be fixed by changing <code class=\"varname\">i</code> in\n+    certain expressions to <code class=\"varname\">&amp;*i</code>.  Future revisions\n+    of the Standard are expected to bless this usage for\n+    vector&lt;&gt; (but not for basic_string&lt;&gt;).\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.what_is_next\"></a><a id=\"q-what_is_next\"></a><p><b>7.2.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What's next after libstdc++?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-what_is_next\"></a></td><td align=\"left\" valign=\"top\"><p>\n+\tHopefully, not much.  The goal of libstdc++ is to produce a\n+\tfully-compliant, fully-portable Standard Library.  After that,\n+\twe're mostly done: there won't <span class=\"emphasis\"><em>be</em></span> any\n+\tmore compliance work to do.\n+      </p><p>\n+\tThere is an effort underway to add significant extensions to\n+\tthe standard library specification.  The latest version of\n+\tthis effort is described in\n+         <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\" target=\"_top\">\n+         The C++ Library Technical Report 1</a>.\n+      </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.sgi_stl\"></a><a id=\"q-sgi_stl\"></a><p><b>7.3.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What about the STL from SGI?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-sgi_stl\"></a></td><td align=\"left\" valign=\"top\"><p>\n+      The <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/\" target=\"_top\">STL from SGI</a>,\n+    version 3.3, was the final merge of the STL codebase.  The\n+    code in libstdc++ contains many fixes and changes, and\n+    the SGI code is no longer under active\n+    development.  We expect that no future merges will take place.\n+    </p><p>\n+    In particular, <code class=\"classname\">string</code> is not from SGI and makes no\n+    use of their \"rope\" class (which is included as an\n+    optional extension), nor is <code class=\"classname\">valarray</code> and some others.\n+    Classes like <code class=\"classname\">vector&lt;&gt;</code> are, but have been\n+    extensively modified.\n+    </p><p>\n+    More information on the evolution of libstdc++ can be found at the\n+    <a class=\"link\" href=\"manual/api.html\" title=\"API Evolution and Deprecation History\">API\n+    evolution</a>\n+    and <a class=\"link\" href=\"manual/backwards.html\" title=\"Backwards Compatibility\">backwards\n+    compatibility</a> documentation.\n+    </p><p>\n+    The FAQ for SGI's STL (one jump off of their main page) is\n+    still recommended reading.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.extensions_and_backwards_compat\"></a><a id=\"q-extensions_and_backwards_compat\"></a><p><b>7.4.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Extensions and Backward Compatibility\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-extensions_and_backwards_compat\"></a></td><td align=\"left\" valign=\"top\"><p>\n+      See the <a class=\"link\" href=\"manual/backwards.html\" title=\"Backwards Compatibility\">link</a> on backwards compatiblity and <a class=\"link\" href=\"manual/api.html\" title=\"API Evolution and Deprecation History\">link</a> on evolution.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.tr1_support\"></a><a id=\"q-tr1_support\"></a><p><b>7.5.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      Does libstdc++ support TR1?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-tr1_support\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Yes.\n+    </p><p>\n+    The C++ Standard Library Technical Report adds many new features to \n+    the library.  The latest version of this effort is described in\n+    <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\" target=\"_top\">\n+         Technical Report 1</a>.\n+    </p><p>\n+    The implementation status of TR1 in libstdc++ can be tracked <a class=\"link\" href=\"manual/bk01pt01ch01.html#manual.intro.status.standard.tr1\" title=\"C++ TR1\">on the TR1 status\n+    page</a>.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.get_iso_cxx\"></a><a id=\"q-get_iso_cxx\"></a><p><b>7.6.</b></p></td><td align=\"left\" valign=\"top\"><p>How do I get a copy of the ISO C++ Standard?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-get_iso_cxx\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    Copies of the full ISO 14882 standard are available on line via\n+    the ISO mirror site for committee members.  Non-members, or those\n+    who have not paid for the privilege of sitting on the committee\n+    and sustained their two-meeting commitment for voting rights, may\n+    get a copy of the standard from their respective national\n+    standards organization.  In the USA, this national standards\n+    organization is ANSI and their website is\n+    right <a class=\"ulink\" href=\"http://www.ansi.org\" target=\"_top\">here</a>.  (And if\n+    you've already registered with them, clicking this link will take\n+    you to directly to the place where you can\n+    <a class=\"ulink\" href=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%3A2003\" target=\"_top\">buy the standard on-line</a>.\n+    </p><p>\n+    Who is your country's member body?  Visit the\n+    <a class=\"ulink\" href=\"http://www.iso.ch/\" target=\"_top\">ISO homepage</a> and find out!\n+    </p><p>\n+    The 2003 version of the standard (the 1998 version plus TC1) is\n+    available in print, ISBN 0-470-84674-7.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.what_is_abi\"></a><a id=\"q-what_is_abi\"></a><p><b>7.7.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      What's an ABI and why is it so messy?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-what_is_abi\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    <acronym class=\"acronym\">ABI</acronym> stands for \u201c<span class=\"quote\">Application Binary\n+     Interface</span>\u201d.  Conventionally, it refers to a great\n+    mass of details about how arguments are arranged on the call\n+    stack and/or in registers, and how various types are arranged\n+    and padded in structs.  A single CPU design may suffer\n+    multiple ABIs designed by different development tool vendors\n+    who made different choices, or even by the same vendor for\n+    different target applications or compiler versions.  In ideal\n+    circumstances the CPU designer presents one ABI and all the\n+    OSes and compilers use it.  In practice every ABI omits\n+    details that compiler implementers (consciously or\n+    accidentally) must choose for themselves.\n+    </p><p>\n+    That ABI definition suffices for compilers to generate code so a\n+    program can interact safely with an OS and its lowest-level libraries.\n+    Users usually want an ABI to encompass more detail, allowing libraries\n+    built with different compilers (or different releases of the same\n+    compiler!) to be linked together.  For C++, this includes many more\n+    details than for C, and CPU designers (for good reasons elaborated\n+    below) have not stepped up to publish C++ ABIs.  The details include\n+    virtual function implementation, struct inheritance layout, name\n+    mangling, and exception handling.  Such an ABI has been defined for\n+    GNU C++, and is immediately useful for embedded work relying only on\n+    a \u201c<span class=\"quote\">free-standing implementation</span>\u201d that doesn't include (much\n+    of) the standard library.  It is a good basis for the work to come.\n+    </p><p>\n+    A useful C++ ABI must also incorporate many details of the standard\n+    library implementation.  For a C ABI, the layouts of a few structs\n+    (such as FILE, stat, jmpbuf, and the like) and a few macros suffice.\n+    For C++, the details include the complete set of names of functions\n+    and types used, the offsets of class members and virtual functions,\n+    and the actual definitions of all inlines.  C++ exposes many more\n+    library details to the caller than C does.  It makes defining\n+    a complete ABI a much bigger undertaking, and requires not just\n+    documenting library implementation details, but carefully designing\n+    those details so that future bug fixes and optimizations don't\n+    force breaking the ABI.\n+    </p><p>\n+    There are ways to help isolate library implementation details from the\n+    ABI, but they trade off against speed.  Library details used in\n+    inner loops (e.g., getchar) must be exposed and frozen for all\n+    time, but many others may reasonably be kept hidden from user code,\n+    so they may later be changed.  Deciding which, and implementing\n+    the decisions, must happen before you can reasonably document a\n+    candidate C++ ABI that encompasses the standard library.\n+    </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.size_equals_capacity\"></a><a id=\"q-size_equals_capacity\"></a><p><b>7.8.</b></p></td><td align=\"left\" valign=\"top\"><p>\n+      How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-size_equals_capacity\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    The standard idiom for deallocating a <code class=\"classname\">vector&lt;T&gt;</code>'s\n+    unused memory is to create a temporary copy of the vector and swap their\n+    contents, e.g. for <code class=\"classname\">vector&lt;T&gt; v</code>\n+    </p><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0std::vector&lt;T&gt;(v).swap(v);<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div><p>\n+    The copy will take O(n) time and the swap is constant time.\n+    </p><p>\n+    See <a class=\"ulink\" href=\"../21_strings/howto.html#6\" target=\"_top\">Shrink-to-fit\n+    strings</a> for a similar solution for strings.\n+    </p></td></tr></tbody></table></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk03.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0</td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0</td></tr></table></div></body></html>"}, {"sha": "d86bb47918bb75cdb64caa1bb940d72dab0d1332", "filename": "libstdc++-v3/doc/html/manual/abi.html", "status": "added", "additions": 493, "deletions": 0, "changes": 493, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,493 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>ABI Policy and Guidelines</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      ABI&#10;    , &#10;      version&#10;    , &#10;      dynamic&#10;    , &#10;      shared&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\" /><link rel=\"prev\" href=\"internals.html\" title=\"Porting to New Hardware or Operating Systems\" /><link rel=\"next\" href=\"api.html\" title=\"API Evolution and Deprecation History\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">ABI Policy and Guidelines</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"internals.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0Porting and Maintenance</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"appendix.porting.abi\"></a>ABI Policy and Guidelines</h2></div></div></div><p>\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.cxx_interface\"></a>The C++ Interface</h3></div></div></div><p>\n+  C++ applications often dependent on specific language support\n+  routines, say for throwing exceptions, or catching exceptions, and\n+  perhaps also dependent on features in the C++ Standard Library.\n+</p><p> \n+  The C++ Standard Library has many include files, types defined in\n+  those include files, specific named functions, and other\n+  behavior. The text of these behaviors, as written in source include\n+  files, is called the Application Programing Interface, or API.\n+</p><p> \n+  Furthermore, C++ source that is compiled into object files is\n+  transformed by the compiler: it arranges objects with specific\n+  alignment and in a particular layout, mangling names according to a\n+  well-defined algorithm, has specific arrangements for the support of\n+  virtual functions, etc. These details are defined as the compiler\n+  Application Binary Interface, or ABI. The GNU C++ compiler uses an\n+  industry-standard C++ ABI starting with version 3. Details can be\n+  found in the <a class=\"ulink\" href=\"http://www.codesourcery.com/cxx-abi/abi.html\" target=\"_top\"> ABI\n+  specification</a>.\n+</p><p>\n+ The GNU C++ compiler, g++, has a compiler command line option to\n+  switch between various different C++ ABIs. This explicit version\n+  switch is the flag <code class=\"code\">-fabi-version</code>. In addition, some\n+  g++ command line options may change the ABI as a side-effect of\n+  use. Such flags include <code class=\"code\">-fpack-struct</code> and\n+  <code class=\"code\">-fno-exceptions</code>, but include others: see the complete\n+  list in the GCC manual under the heading <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code%20Gen%20Options\" target=\"_top\">Options\n+  for Code Generation Conventions</a>.\n+</p><p> \n+  The configure options used when building a specific libstdc++\n+  version may also impact the resulting library ABI. The available\n+  configure options, and their impact on the library ABI, are\n+  documented\n+<a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\" target=\"_top\">\n+here</a>.\n+</p><p> Putting all of these ideas together results in the C++ Standard\n+library ABI, which is the compilation of a given library API by a\n+given compiler ABI. In a nutshell:\n+</p><p>\n+  \u201c<span class=\"quote\">\n+    library API + compiler ABI = library ABI\n+  </span>\u201d\n+</p><p>\n+ The library ABI is mostly of interest for end-users who have\n+ unresolved symbols and are linking dynamically to the C++ Standard\n+ library, and who thus must be careful to compile their application\n+ with a compiler that is compatible with the available C++ Standard\n+ library binary. In this case, compatible is defined with the equation\n+ above: given an application compiled with a given compiler ABI and\n+ library API, it will work correctly with a Standard C++ Library\n+ created with the same constraints.\n+</p><p>\n+  To use a specific version of the C++ ABI, one must use a\n+  corresponding GNU C++ toolchain (Ie, g++ and libstdc++) that\n+  implements the C++ ABI in question.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.versioning\"></a>Versioning</h3></div></div></div><p> The C++ interface has evolved throughout the history of the GNU\n+C++ toolchain. With each release, various details have been changed so\n+as to give distinct versions to the C++ interface.\n+</p><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.versioning.goals\"></a>Goals</h4></div></div></div><p>Extending existing, stable ABIs. Versioning gives subsequent stable\n+releases series libraries the ability to add new symbols and add\n+functionality, all the while retaining backwards compatibility with\n+the previous releases in the series. Note: the reverse is not true. It\n+is not possible to take binaries linked with the latest version of a\n+release series (if symbols have been added) and expect the initial\n+release of the series to remain link compatible.\n+</p><p>Allows multiple, incompatible ABIs to coexist at the same time.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.versioning.history\"></a>History</h4></div></div></div><p>\n+ How can this complexity be managed? What does C++ versioning mean?\n+  Because library and compiler changes often make binaries compiled\n+  with one version of the GNU tools incompatible with binaries\n+  compiled with other (either newer or older) versions of the same GNU\n+  tools, specific techniques are used to make managing this complexity\n+  easier.\n+</p><p>\n+  The following techniques are used:\n+</p><div class=\"orderedlist\"><ol type=\"1\"><li><p>Release versioning on the libgcc_s.so binary. </p><p>This is implemented via file names and the ELF DT_SONAME\n+    mechanism (at least on ELF systems). It is versioned as follows:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: libgcc_s.so.1</p></li><li><p>gcc-3.0.1: libgcc_s.so.1</p></li><li><p>gcc-3.0.2: libgcc_s.so.1</p></li><li><p>gcc-3.0.3: libgcc_s.so.1</p></li><li><p>gcc-3.0.4: libgcc_s.so.1</p></li><li><p>gcc-3.1.0: libgcc_s.so.1</p></li><li><p>gcc-3.1.1: libgcc_s.so.1</p></li><li><p>gcc-3.2.0: libgcc_s.so.1</p></li><li><p>gcc-3.2.1: libgcc_s.so.1</p></li><li><p>gcc-3.2.2: libgcc_s.so.1</p></li><li><p>gcc-3.2.3: libgcc_s.so.1</p></li><li><p>gcc-3.3.0: libgcc_s.so.1</p></li><li><p>gcc-3.3.1: libgcc_s.so.1</p></li><li><p>gcc-3.3.2: libgcc_s.so.1</p></li><li><p>gcc-3.3.3: libgcc_s.so.1</p></li><li><p>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: on m68k-linux and\n+    hppa-linux this is either libgcc_s.so.1 (when configuring\n+    <code class=\"code\">--with-sjlj-exceptions</code>) or libgcc_s.so.2. For all\n+    others, this is libgcc_s.so.1.  </p></li></ul></div></li><li><p>Symbol versioning on the libgcc_s.so binary.</p><p>It is versioned with the following labels and version\n+   definitions, where the version definition is the maximum for a\n+   particular release. Labels are cumulative. If a particular release\n+   is not listed, it has the same version labels as the preceeding\n+   release.</p><p>This corresponds to the mapfile: gcc/libgcc-std.ver</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: GCC_3.0</p></li><li><p>gcc-3.3.0: GCC_3.3</p></li><li><p>gcc-3.3.1: GCC_3.3.1</p></li><li><p>gcc-3.3.2: GCC_3.3.2</p></li><li><p>gcc-3.3.4: GCC_3.3.4</p></li><li><p>gcc-3.4.0: GCC_3.4</p></li><li><p>gcc-3.4.2: GCC_3.4.2</p></li><li><p>gcc-3.4.4: GCC_3.4.4</p></li><li><p>gcc-4.0.0: GCC_4.0.0</p></li><li><p>gcc-4.1.0: GCC_4.1.0</p></li><li><p>gcc-4.2.0: GCC_4.2.0</p></li></ul></div></li><li><p>Release versioning on the libstdc++.so binary, implemented in the same was as the libgcc_s.so binary, above.</p><p>It is versioned as follows:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: libstdc++.so.3.0.0</p></li><li><p>gcc-3.0.1: libstdc++.so.3.0.1</p></li><li><p>gcc-3.0.2: libstdc++.so.3.0.2</p></li><li><p>gcc-3.0.3: libstdc++.so.3.0.2 (Error should be libstdc++.so.3.0.3)</p></li><li><p>gcc-3.0.4: libstdc++.so.3.0.4</p></li><li><p>gcc-3.1.0: libstdc++.so.4.0.0</p></li><li><p>gcc-3.1.1: libstdc++.so.4.0.1</p></li><li><p>gcc-3.2.0: libstdc++.so.5.0.0</p></li><li><p>gcc-3.2.1: libstdc++.so.5.0.1</p></li><li><p>gcc-3.2.2: libstdc++.so.5.0.2</p></li><li><p>gcc-3.2.3: libstdc++.so.5.0.3 (Not strictly required)</p></li><li><p>gcc-3.3.0: libstdc++.so.5.0.4</p></li><li><p>gcc-3.3.1: libstdc++.so.5.0.5</p></li><li><p>gcc-3.3.2: libstdc++.so.5.0.5</p></li><li><p>gcc-3.3.3: libstdc++.so.5.0.5</p></li><li><p>gcc-3.4.0: libstdc++.so.6.0.0</p></li><li><p>gcc-3.4.1: libstdc++.so.6.0.1</p></li><li><p>gcc-3.4.2: libstdc++.so.6.0.2</p></li><li><p>gcc-3.4.3: libstdc++.so.6.0.3</p></li><li><p>gcc-3.4.4: libstdc++.so.6.0.3</p></li><li><p>gcc-3.4.5: libstdc++.so.6.0.3</p></li><li><p>gcc-3.4.6: libstdc++.so.6.0.3</p></li><li><p>gcc-4.0.0: libstdc++.so.6.0.4</p></li><li><p>gcc-4.0.1: libstdc++.so.6.0.5</p></li><li><p>gcc-4.0.2: libstdc++.so.6.0.6</p></li><li><p>gcc-4.0.3: libstdc++.so.6.0.7</p></li><li><p>gcc-4.1.0: libstdc++.so.6.0.7</p></li><li><p>gcc-4.1.1: libstdc++.so.6.0.8</p></li><li><p>gcc-4.1.2: libstdc++.so.6.0.8</p></li><li><p>gcc-4.2.0: libstdc++.so.6.0.9</p></li></ul></div></li><li><p>Symbol versioning on the libstdc++.so binary.</p><p>mapfile: libstdc++/config/linker-map.gnu</p><p>It is versioned with the following labels and version\n+   definitions, where the version definition is the maximum for a\n+   particular release. Note, only symbol which are newly introduced\n+   will use the maximum version definition. Thus, for release series\n+   with the same label, but incremented version definitions, the later\n+   release has both versions. (An example of this would be the\n+   gcc-3.2.1 release, which has GLIBCPP_3.2.1 for new symbols and\n+   GLIBCPP_3.2 for symbols that were introduced in the gcc-3.2.0\n+   release.) If a particular release is not listed, it has the same\n+   version labels as the preceeding release.\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: (Error, not versioned)</p></li><li><p>gcc-3.0.1: (Error, not versioned)</p></li><li><p>gcc-3.0.2: (Error, not versioned)</p></li><li><p>gcc-3.0.3: (Error, not versioned)</p></li><li><p>gcc-3.0.4: (Error, not versioned)</p></li><li><p>gcc-3.1.0: GLIBCPP_3.1, CXXABI_1</p></li><li><p>gcc-3.1.1: GLIBCPP_3.1, CXXABI_1</p></li><li><p>gcc-3.2.0: GLIBCPP_3.2, CXXABI_1.2</p></li><li><p>gcc-3.2.1: GLIBCPP_3.2.1, CXXABI_1.2</p></li><li><p>gcc-3.2.2: GLIBCPP_3.2.2, CXXABI_1.2</p></li><li><p>gcc-3.2.3: GLIBCPP_3.2.2, CXXABI_1.2</p></li><li><p>gcc-3.3.0: GLIBCPP_3.2.2, CXXABI_1.2.1</p></li><li><p>gcc-3.3.1: GLIBCPP_3.2.3, CXXABI_1.2.1</p></li><li><p>gcc-3.3.2: GLIBCPP_3.2.3, CXXABI_1.2.1</p></li><li><p>gcc-3.3.3: GLIBCPP_3.2.3, CXXABI_1.2.1</p></li><li><p>gcc-3.4.0: GLIBCXX_3.4, CXXABI_1.3</p></li><li><p>gcc-3.4.1: GLIBCXX_3.4.1, CXXABI_1.3</p></li><li><p>gcc-3.4.2: GLIBCXX_3.4.2</p></li><li><p>gcc-3.4.3: GLIBCXX_3.4.3</p></li><li><p>gcc-4.0.0: GLIBCXX_3.4.4, CXXABI_1.3.1</p></li><li><p>gcc-4.0.1: GLIBCXX_3.4.5</p></li><li><p>gcc-4.0.2: GLIBCXX_3.4.6</p></li><li><p>gcc-4.0.3: GLIBCXX_3.4.7</p></li><li><p>gcc-4.1.1: GLIBCXX_3.4.8</p></li><li><p>gcc-4.2.0: GLIBCXX_3.4.9</p></li></ul></div></li><li><p>Incremental bumping of a compiler pre-defined macro,\n+    __GXX_ABI_VERSION. This macro is defined as the version of the\n+    compiler v3 ABI, with g++ 3.0.x being version 100. This macro will\n+    be automatically defined whenever g++ is used (the curious can\n+    test this by invoking g++ with the '-v' flag.)\n+    </p><p>\n+    This macro was defined in the file \"lang-specs.h\" in the gcc/cp directory.\n+    Later versions defined it in \"c-common.c\" in the gcc directory, and from\n+    G++ 3.4 it is defined in c-cppbuiltin.c and its value determined by the\n+    '-fabi-version' command line option.\n+    </p><p>\n+    It is versioned as follows, where 'n' is given by '-fabi-version=n':\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.x: 100</p></li><li><p>gcc-3.1.x: 100 (Error, should be 101)</p></li><li><p>gcc-3.2.x: 102</p></li><li><p>gcc-3.3.x: 102</p></li><li><p>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 102 (when n=1)</p></li><li><p>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 1000 + n (when n&gt;1)</p></li><li><p>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: 999999 (when n=0)</p></li></ul></div><p></p></li><li><p>Changes to the default compiler option for\n+    <code class=\"code\">-fabi-version</code>.\n+    </p><p>\n+    It is versioned as follows:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.x: (Error, not versioned) </p></li><li><p>gcc-3.1.x: (Error, not versioned) </p></li><li><p>gcc-3.2.x: <code class=\"code\">-fabi-version=1</code></p></li><li><p>gcc-3.3.x: <code class=\"code\">-fabi-version=1</code></p></li><li><p>gcc-3.4.x, gcc-4.0.x, gcc-4.1.x, gcc-4.2.x: <code class=\"code\">-fabi-version=2</code></p></li></ul></div><p></p></li><li><p>Incremental bumping of a library pre-defined macro. For releases\n+    before 3.4.0, the macro is __GLIBCPP__. For later releases, it's\n+    __GLIBCXX__. (The libstdc++ project generously changed from CPP to\n+    CXX throughout its source to allow the \"C\" pre-processor the CPP\n+    macro namespace.) These macros are defined as the date the library\n+    was released, in compressed ISO date format, as an unsigned long.\n+    </p><p>\n+    This macro is defined in the file \"c++config\" in the\n+    \"libstdc++/include/bits\" directory. (Up to gcc-4.1.0, it was\n+    changed every night by an automated script. Since gcc-4.1.0, it is\n+    the same value as gcc/DATESTAMP.)\n+    </p><p>\n+    It is versioned as follows:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: 20010615</p></li><li><p>gcc-3.0.1: 20010819</p></li><li><p>gcc-3.0.2: 20011023</p></li><li><p>gcc-3.0.3: 20011220</p></li><li><p>gcc-3.0.4: 20020220</p></li><li><p>gcc-3.1.0: 20020514</p></li><li><p>gcc-3.1.1: 20020725</p></li><li><p>gcc-3.2.0: 20020814</p></li><li><p>gcc-3.2.1: 20021119</p></li><li><p>gcc-3.2.2: 20030205</p></li><li><p>gcc-3.2.3: 20030422</p></li><li><p>gcc-3.3.0: 20030513</p></li><li><p>gcc-3.3.1: 20030804</p></li><li><p>gcc-3.3.2: 20031016</p></li><li><p>gcc-3.3.3: 20040214</p></li><li><p>gcc-3.4.0: 20040419</p></li><li><p>gcc-3.4.1: 20040701</p></li><li><p>gcc-3.4.2: 20040906</p></li><li><p>gcc-3.4.3: 20041105</p></li><li><p>gcc-3.4.4: 20050519</p></li><li><p>gcc-3.4.5: 20051201</p></li><li><p>gcc-3.4.6: 20060306</p></li><li><p>gcc-4.0.0: 20050421</p></li><li><p>gcc-4.0.1: 20050707</p></li><li><p>gcc-4.0.2: 20050921</p></li><li><p>gcc-4.0.3: 20060309</p></li><li><p>gcc-4.1.0: 20060228</p></li><li><p>gcc-4.1.1: 20060524</p></li><li><p>gcc-4.1.2: 20070214</p></li><li><p>gcc-4.2.0: 20070514</p></li></ul></div><p></p></li><li><p>\n+    Incremental bumping of a library pre-defined macro,\n+    _GLIBCPP_VERSION. This macro is defined as the released version of\n+    the library, as a string literal. This is only implemented in\n+    gcc-3.1.0 releases and higher, and is deprecated in 3.4 (where it\n+    is called _GLIBCXX_VERSION).\n+    </p><p>\n+    This macro is defined in the file \"c++config\" in the\n+    \"libstdc++/include/bits\" directory and is generated\n+    automatically by autoconf as part of the configure-time generation\n+    of config.h.\n+    </p><p>\n+    It is versioned as follows:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: \"3.0.0\"</p></li><li><p>gcc-3.0.1: \"3.0.0\" (Error, should be \"3.0.1\")</p></li><li><p>gcc-3.0.2: \"3.0.0\" (Error, should be \"3.0.2\")</p></li><li><p>gcc-3.0.3: \"3.0.0\" (Error, should be \"3.0.3\")</p></li><li><p>gcc-3.0.4: \"3.0.0\" (Error, should be \"3.0.4\")</p></li><li><p>gcc-3.1.0: \"3.1.0\"</p></li><li><p>gcc-3.1.1: \"3.1.1\"</p></li><li><p>gcc-3.2.0: \"3.2\"</p></li><li><p>gcc-3.2.1: \"3.2.1\"</p></li><li><p>gcc-3.2.2: \"3.2.2\"</p></li><li><p>gcc-3.2.3: \"3.2.3\"</p></li><li><p>gcc-3.3.0: \"3.3\"</p></li><li><p>gcc-3.3.1: \"3.3.1\"</p></li><li><p>gcc-3.3.2: \"3.3.2\"</p></li><li><p>gcc-3.3.3: \"3.3.3\"</p></li><li><p>gcc-3.4.x: \"version-unused\"</p></li><li><p>gcc-4.0.x: \"version-unused\"</p></li><li><p>gcc-4.1.x: \"version-unused\"</p></li><li><p>gcc-4.2.x: \"version-unused\"</p></li></ul></div><p></p></li><li><p>\n+    Matching each specific C++ compiler release to a specific set of\n+    C++ include files. This is only implemented in gcc-3.1.1 releases\n+    and higher.\n+    </p><p>\n+    All C++ includes are installed in include/c++, then nest in a\n+    directory hierarchy corresponding to the C++ compiler's released\n+    version. This version corresponds to the variable \"gcc_version\" in\n+    \"libstdc++/acinclude.m4,\" and more details can be found in that\n+    file's macro GLIBCXX_CONFIGURE (GLIBCPP_CONFIGURE before gcc-3.4.0).\n+    </p><p>\n+    C++ includes are versioned as follows:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>gcc-3.0.0: include/g++-v3</p></li><li><p>gcc-3.0.1: include/g++-v3</p></li><li><p>gcc-3.0.2: include/g++-v3</p></li><li><p>gcc-3.0.3: include/g++-v3</p></li><li><p>gcc-3.0.4: include/g++-v3</p></li><li><p>gcc-3.1.0: include/g++-v3</p></li><li><p>gcc-3.1.1: include/c++/3.1.1</p></li><li><p>gcc-3.2.0: include/c++/3.2</p></li><li><p>gcc-3.2.1: include/c++/3.2.1</p></li><li><p>gcc-3.2.2: include/c++/3.2.2</p></li><li><p>gcc-3.2.3: include/c++/3.2.3</p></li><li><p>gcc-3.3.0: include/c++/3.3</p></li><li><p>gcc-3.3.1: include/c++/3.3.1</p></li><li><p>gcc-3.3.2: include/c++/3.3.2</p></li><li><p>gcc-3.3.3: include/c++/3.3.3</p></li><li><p>gcc-3.4.0: include/c++/3.4.0</p></li><li><p>gcc-3.4.1: include/c++/3.4.1</p></li><li><p>gcc-3.4.2: include/c++/3.4.2</p></li><li><p>gcc-3.4.3: include/c++/3.4.3</p></li><li><p>gcc-3.4.4: include/c++/3.4.4</p></li><li><p>gcc-3.4.5: include/c++/3.4.5</p></li><li><p>gcc-3.4.6: include/c++/3.4.6</p></li><li><p>gcc-4.0.0: include/c++/4.0.0</p></li><li><p>gcc-4.0.1: include/c++/4.0.1</p></li><li><p>gcc-4.0.2: include/c++/4.0.2</p></li><li><p>gcc-4.0.3: include/c++/4.0.3</p></li><li><p>gcc-4.1.0: include/c++/4.1.0</p></li><li><p>gcc-4.1.1: include/c++/4.1.1</p></li><li><p>gcc-4.1.2: include/c++/4.1.2</p></li><li><p>gcc-4.2.0: include/c++/4.2.0</p></li></ul></div><p></p></li></ol></div><p>\n+  Taken together, these techniques can accurately specify interface\n+  and implementation changes in the GNU C++ tools themselves. Used\n+  properly, they allow both the GNU C++ tools implementation, and\n+  programs using them, an evolving yet controlled development that\n+  maintains backward compatibility.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.versioning.prereq\"></a>Prerequisites</h4></div></div></div><p>\n+      Minimum environment that supports a versioned ABI: A supported\n+      dynamic linker, a GNU linker of sufficient vintage to understand\n+      demangled C++ name globbing (ld), a shared executable compiled\n+      with g++, and shared libraries (libgcc_s, libstdc++) compiled by\n+      a compiler (g++) with a compatible ABI. Phew.\n+    </p><p>\n+      On top of all that, an additional constraint: libstdc++ did not\n+      attempt to version symbols (or age gracefully, really) until\n+      version 3.1.0.\n+    </p><p>\n+      Most modern Linux and BSD versions, particularly ones using\n+      gcc-3.1.x tools and more recent vintages, will meet the\n+      requirements above.\n+    </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.versioning.config\"></a>Configuring</h4></div></div></div><p>\n+      It turns out that most of the configure options that change\n+      default behavior will impact the mangled names of exported\n+      symbols, and thus impact versioning and compatibility.\n+    </p><p>\n+      For more information on configure options, including ABI\n+      impacts, see:\n+      http://gcc.gnu.org/onlinedocs/libstdc++/configopts.html\n+    </p><p>\n+      There is one flag that explicitly deals with symbol versioning:\n+      --enable-symvers.\n+    </p><p>\n+      In particular, libstdc++/acinclude.m4 has a macro called\n+      GLIBCXX_ENABLE_SYMVERS that defaults to yes (or the argument\n+      passed in via --enable-symvers=foo). At that point, the macro\n+      attempts to make sure that all the requirement for symbol\n+      versioning are in place. For more information, please consult\n+      acinclude.m4.\n+    </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.versioning.active\"></a>Checking Active</h4></div></div></div><p>\n+      When the GNU C++ library is being built with symbol versioning\n+      on, you should see the following at configure time for\n+      libstdc++:\n+    </p><pre class=\"screen\">\n+<code class=\"computeroutput\">\n+  checking versioning on shared library symbols... gnu\n+</code>\n+</pre><p>\n+  If you don't see this line in the configure output, or if this line\n+  appears but the last word is 'no', then you are out of luck.\n+</p><p>\n+  If the compiler is pre-installed, a quick way to test is to compile\n+  the following (or any) simple C++ file and link it to the shared\n+  libstdc++ library:\n+</p><pre class=\"programlisting\">\n+#include &lt;iostream&gt;\n+\n+int main()\n+{ std::cout &lt;&lt; \"hello\" &lt;&lt; std::endl; return 0; }\n+\n+%g++ hello.cc -o hello.out\n+\n+%ldd hello.out\n+        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x00764000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x004a8000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x40016000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x0036d000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+\n+%nm hello.out\n+</pre><p>\n+If you see symbols in the resulting output with \"GLIBCXX_3\" as part\n+of the name, then the executable is versioned. Here's an example:\n+</p><p>\n+   <code class=\"code\">U _ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4</code>\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.changes_allowed\"></a>Allowed Changes</h3></div></div></div><p>\n+The following will cause the library minor version number to\n+increase, say from \"libstdc++.so.3.0.4\" to \"libstdc++.so.3.0.5\".\n+</p><div class=\"orderedlist\"><ol type=\"1\"><li><p>Adding an exported global or static data member</p></li><li><p>Adding an exported function, static or non-virtual member function</p></li><li><p>Adding an exported symbol or symbols by additional instantiations</p></li></ol></div><p>\n+Other allowed changes are possible.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.changes_no\"></a>Prohibited Changes</h3></div></div></div><p>\n+The following non-exhaustive list will cause the library major version\n+number to increase, say from \"libstdc++.so.3.0.4\" to\n+\"libstdc++.so.4.0.0\".\n+</p><div class=\"orderedlist\"><ol type=\"1\"><li><p>Changes in the gcc/g++ compiler ABI</p></li><li><p>Changing size of an exported symbol</p></li><li><p>Changing alignment of an exported symbol</p></li><li><p>Changing the layout of an exported symbol</p></li><li><p>Changing mangling on an exported symbol</p></li><li><p>Deleting an exported symbol</p></li><li><p>Changing the inheritance properties of a type by adding or removing\n+    base classes</p></li><li><p>\n+  Changing the size, alignment, or layout of types\n+  specified in the C++ standard. These may not necessarily be\n+  instantiated or otherwise exported in the library binary, and\n+  include all the required locale facets, as well as things like\n+  std::basic_streambuf, et al.\n+</p></li><li><p> Adding an explicit copy constructor or destructor to a\n+class that would otherwise have implicit versions. This will change\n+the way the compiler deals with this class in by-value return\n+statements or parameters: instead of being passing instances of this\n+class in registers, the compiler will be forced to use memory. See <a class=\"ulink\" href=\"http://www.codesourcery.com/cxx-abi/abi.html#calls\" target=\"_top\"> this part</a>\n+ of the C++ ABI documentation for further details. \n+ </p></li></ol></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.impl\"></a>Implementation</h3></div></div></div><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+     Separation of interface and implementation\n+   </p><p>\n+     This is accomplished by two techniques that separate the API from\n+     the ABI: forcing undefined references to link against a library\n+     binary for definitions.\n+   </p><div class=\"variablelist\"><dl><dt><span class=\"term\">Include files have declarations, source files have defines</span></dt><dd><p>\n+\tFor non-templatized types, such as much of <code class=\"code\">class\n+\tlocale</code>, the appropriate standard C++ include, say\n+\t<code class=\"code\">locale</code>, can contain full declarations, while\n+\tvarious source files (say <code class=\"code\"> locale.cc, locale_init.cc,\n+\tlocalename.cc</code>) contain definitions.\n+      </p></dd><dt><span class=\"term\">Extern template on required types</span></dt><dd><p>\n+       For parts of the standard that have an explicit list of\n+       required instantiations, the GNU extension syntax <code class=\"code\"> extern\n+       template </code> can be used to control where template\n+       definitions reside. By marking required instantiations as\n+       <code class=\"code\"> extern template </code> in include files, and providing\n+       explicit instantiations in the appropriate instantiation files,\n+       non-inlined template functions can be versioned. This technique\n+       is mostly used on parts of the standard that require <code class=\"code\">\n+       char</code> and <code class=\"code\"> wchar_t</code> instantiations, and\n+       includes <code class=\"code\"> basic_string</code>, the locale facets, and the\n+       types in <code class=\"code\"> iostreams</code>.\n+     </p></dd></dl></div><p> \n+   In addition, these techniques have the additional benefit that they\n+   reduce binary size, which can increase runtime performance.\n+ </p></li><li><p>\n+     Namespaces linking symbol definitions to export mapfiles\n+   </p><p>\n+     All symbols in the shared library binary are processed by a\n+     linker script at build time that either allows or disallows\n+     external linkage. Because of this, some symbols, regardless of\n+     normal C/C++ linkage, are not visible. Symbols that are internal\n+     have several appealing characteristics: by not exporting the\n+     symbols, there are no relocations when the shared library is\n+     started and thus this makes for faster runtime loading\n+     performance by the underlying dynamic loading mechanism. In\n+     addition, they have the possibility of changing without impacting\n+     ABI compatibility.\n+   </p><p>The following namespaces are transformed by the mapfile:</p><div class=\"variablelist\"><dl><dt><span class=\"term\"><code class=\"code\">namespace std</code></span></dt><dd><p> Defaults to exporting all symbols in label\n+<code class=\"code\">GLIBCXX</code> that do not begin with an underscore, ie\n+<code class=\"code\">__test_func</code> would not be exported by default. Select\n+exceptional symbols are allowed to be visible.</p></dd><dt><span class=\"term\"><code class=\"code\">namespace __gnu_cxx</code></span></dt><dd><p> Defaults to not exporting any symbols in label\n+<code class=\"code\">GLIBCXX</code>, select items are allowed to be visible.</p></dd><dt><span class=\"term\"><code class=\"code\">namespace __gnu_internal</code></span></dt><dd><p> Defaults to not exported, no items are allowed to be visible.</p></dd><dt><span class=\"term\"><code class=\"code\">namespace __cxxabiv1</code>, aliased to <code class=\"code\"> namespace abi</code></span></dt><dd><p> Defaults to not exporting any symbols in label\n+<code class=\"code\">CXXABI</code>, select items are allowed to be visible.</p></dd></dl></div><p>\n+</p></li><li><p>Freezing the API</p><p>Disallowed changes, as above, are not made on a stable release\n+branch. Enforcement tends to be less strict with GNU extensions that\n+standard includes.</p></li></ol></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.testing\"></a>Testing</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.testing.single\"></a>Single ABI Testing</h4></div></div></div><p>\n+      Testing for GNU C++ ABI changes is composed of two distinct\n+      areas: testing the C++ compiler (g++) for compiler changes, and\n+      testing the C++ library (libstdc++) for library changes.\n+    </p><p>\n+      Testing the C++ compiler ABI can be done various ways.\n+    </p><p>\n+      One.  Intel ABI checker. More information can be obtained <a class=\"ulink\" href=\"http://developer.intel.com/software/products/opensource/\" target=\"_top\">here.</a>\n+    </p><p>\n+Two.\n+The second is yet unreleased, but has been announced on the gcc\n+mailing list. It is yet unspecified if these tools will be freely\n+available, and able to be included in a GNU project. Please contact\n+Mark Mitchell (mark@codesourcery.com) for more details, and current\n+status.\n+</p><p>\n+Three.\n+Involves using the vlad.consistency test framework. This has also been\n+discussed on the gcc mailing lists.\n+</p><p>\n+Testing the C++ library ABI can also be done various ways.\n+</p><p>\n+One. \n+(Brendan Kehoe, Jeff Law suggestion to run 'make check-c++' two ways, \n+one with a new compiler and an old library, and the other with an old\n+compiler and a new library, and look for testsuite regressions)\n+</p><p>\n+Details on how to set this kind of test up can be found here:\n+http://gcc.gnu.org/ml/gcc/2002-08/msg00142.html\n+</p><p>\n+Two.  \n+Use the 'make check-abi' rule in the libstdc++ Makefile. \n+</p><p>\n+This is a proactive check the library ABI. Currently, exported symbol\n+names that are either weak or defined are checked against a last known\n+good baseline. Currently, this baseline is keyed off of 3.4.0\n+binaries, as this was the last time the .so number was incremented. In\n+addition, all exported names are demangled, and the exported objects\n+are checked to make sure they are the same size as the same object in\n+the baseline.\n+\n+Notice that each baseline is relative to a <span class=\"emphasis\"><em>default</em></span>\n+configured library and compiler: in particular, if options such as\n+--enable-clocale, or --with-cpu, in case of multilibs, are used at\n+configure time, the check may fail, either because of substantive\n+differences or because of limitations of the current checking\n+machinery.\n+</p><p>\n+This dataset is insufficient, yet a start. Also needed is a\n+comprehensive check for all user-visible types part of the standard\n+library for sizeof() and alignof() changes. \n+</p><p>\n+Verifying compatible layouts of objects is not even attempted.  It\n+should be possible to use sizeof, alignof, and offsetof to compute\n+offsets for each structure and type in the standard library, saving to\n+another datafile. Then, compute this in a similar way for new\n+binaries, and look for differences.\n+</p><p>\n+Another approach might be to use the -fdump-class-hierarchy flag to\n+get information. However, currently this approach gives insufficient\n+data for use in library testing, as class data members, their offsets,\n+and other detailed data is not displayed with this flag.\n+(See g++/7470 on how this was used to find bugs.)\n+</p><p>\n+Perhaps there are other C++ ABI checkers. If so, please notify\n+us. We'd like to know about them!\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"abi.testing.multi\"></a>Multiple ABI Testing</h4></div></div></div><p>\n+A \"C\" application, dynamically linked to two shared libraries, liba,\n+libb. The dependent library liba is C++ shared library compiled with\n+gcc-3.3.x, and uses io, exceptions, locale, etc. The dependent library\n+libb is a C++ shared library compiled with gcc-3.4.x, and also uses io,\n+exceptions, locale, etc.\n+</p><p> As above, libone is constructed as follows: </p><pre class=\"programlisting\">\n+%$bld/H-x86-gcc-3.4.0/bin/g++ -fPIC -DPIC -c a.cc\n+\n+%$bld/H-x86-gcc-3.4.0/bin/g++ -shared -Wl,-soname -Wl,libone.so.1 -Wl,-O1 -Wl,-z,defs a.o -o libone.so.1.0.0\n+\n+%ln -s libone.so.1.0.0 libone.so\n+\n+%$bld/H-x86-gcc-3.4.0/bin/g++ -c a.cc\n+\n+%ar cru libone.a a.o \n+</pre><p> And, libtwo is constructed as follows: </p><pre class=\"programlisting\">\n+%$bld/H-x86-gcc-3.3.3/bin/g++ -fPIC -DPIC -c b.cc\n+\n+%$bld/H-x86-gcc-3.3.3/bin/g++ -shared -Wl,-soname -Wl,libtwo.so.1 -Wl,-O1 -Wl,-z,defs b.o -o libtwo.so.1.0.0\n+\n+%ln -s libtwo.so.1.0.0 libtwo.so\n+\n+%$bld/H-x86-gcc-3.3.3/bin/g++ -c b.cc\n+\n+%ar cru libtwo.a b.o \n+</pre><p> ...with the resulting libraries looking like </p><pre class=\"screen\">\n+<code class=\"computeroutput\">\n+%ldd libone.so.1.0.0\n+        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x40016000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x400fa000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x4011c000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x40125000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+\n+%ldd libtwo.so.1.0.0\n+        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x40027000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x400e1000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x40103000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x4010c000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+</code>\n+</pre><p> \n+  Then, the \"C\" compiler is used to compile a source file that uses\n+  functions from each library.\n+</p><pre class=\"programlisting\">\n+gcc test.c -g -O2 -L. -lone -ltwo /usr/lib/libstdc++.so.5 /usr/lib/libstdc++.so.6\n+</pre><p>\n+  Which gives the expected:\n+</p><pre class=\"screen\">\n+<code class=\"computeroutput\">\n+%ldd a.out\n+        libstdc++.so.5 =&gt; /usr/lib/libstdc++.so.5 (0x00764000)\n+        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x40015000)\n+        libc.so.6 =&gt; /lib/tls/libc.so.6 (0x0036d000)\n+        libm.so.6 =&gt; /lib/tls/libm.so.6 (0x004a8000)\n+        libgcc_s.so.1 =&gt; /mnt/hd/bld/gcc/gcc/libgcc_s.so.1 (0x400e5000)\n+        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00355000)\n+</code>\n+</pre><p>\n+  This resulting binary, when executed, will be able to safely use\n+  code from both liba, and the dependent libstdc++.so.6, and libb,\n+  with the dependent libstdc++.so.5.\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.issues\"></a>Outstanding Issues</h3></div></div></div><p> \n+  Some features in the C++ language make versioning especially\n+  difficult. In particular, compiler generated constructs such as\n+  implicit instantiations for templates, typeinfo information, and\n+  virtual tables all may cause ABI leakage across shared library\n+  boundaries. Because of this, mixing C++ ABI's is not recommended at\n+  this time.\n+</p><p>\n+  For more background on this issue, see these bugzilla entries:\n+</p><p>\n+<a class=\"ulink\" href=\"http://gcc.gnu.org/PR24660\" target=\"_top\">24660: versioning weak symbols in libstdc++</a>\n+</p><p>\n+<a class=\"ulink\" href=\"http://gcc.gnu.org/PR19664\" target=\"_top\">19664: libstdc++ headers should have pop/push of the visibility around the declarations</a>\n+</p></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"abi.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id510592\"></a><p><span class=\"title\"><i>\n+      ABIcheck, a vague idea of checking ABI compatibility\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://abicheck.sourceforge.net/\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510609\"></a><p><span class=\"title\"><i>\n+      C++ ABI Reference\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.codesourcery.com/cxx-abi\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510627\"></a><p><span class=\"title\"><i>\n+      Intel\u00ae Compilers for Linux* -Compatibility with the GNU Compilers\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://developer.intel.com/software/products/compilers/techtopics/LinuxCompilersCompatibility.htm\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510644\"></a><p><span class=\"title\"><i>\n+      Intel\u00ae Compilers for Linux* -Compatibility with the GNU Compilers\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://developer.intel.com/software/products/compilers/techtopics/LinuxCompilersCompatibility.htm\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510662\"></a><p><span class=\"title\"><i>\n+      Sun Solaris 2.9 : Linker and Libraries Guide (document 816-1386)\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://docs.sun.com/?p=/doc/816-1386&amp;a=load\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510679\"></a><p><span class=\"title\"><i>\n+      Sun Solaris 2.9 : C++ Migration Guide (document 816-2459)\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://docs.sun.com/db/prod/solaris.9\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510696\"></a><p><span class=\"title\"><i>\n+      ELF Symbol Versioning\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://people.redhat.com/drepper/symbol-versioning\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510725\"></a><p><span class=\"title\"><i>\n+      C++ ABI for the ARM Architecture\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.arm.com/miscPDFs/8033.pdf\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id510742\"></a><p><span class=\"title\"><i>\n+      Dynamic Shared Objects: Survey and Issues\n+    </i>. </span><span class=\"subtitle\">\n+      ISO C++ J16/06-0046\n+    . </span><span class=\"author\"><span class=\"firstname\">Benjamin</span> <span class=\"surname\">Kosnik</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1976.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id499374\"></a><p><span class=\"title\"><i>\n+      Versioning With Namespaces\n+    </i>. </span><span class=\"subtitle\">\n+      ISO C++ J16/06-0083\n+    . </span><span class=\"author\"><span class=\"firstname\">Benjamin</span> <span class=\"surname\">Kosnik</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2013.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"internals.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"api.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Porting to New Hardware or Operating Systems\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0API Evolution and Deprecation History</td></tr></table></div></body></html>"}, {"sha": "b490fe49ecd06d2c71c73f9ad89537aa5c5dc5a7", "filename": "libstdc++-v3/doc/html/manual/algorithms.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Falgorithms.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Falgorithms.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Falgorithms.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0IX.\u00a0Algorithms</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    , &#10;      algorithm&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt08ch19s02.html\" title=\"One Past the End\" /><link rel=\"next\" href=\"bk01pt09pr02.html\" title=\"\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0IX.\u00a0Algorithms</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt08ch19s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt09pr02.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.algorithms\"></a>Part\u00a0IX.\u00a0Algorithms</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"preface\"><a href=\"bk01pt09pr02.html\"></a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt09ch20.html\">20. Mutating</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt09ch20.html#algorithms.mutating.swap\"><code class=\"function\">swap</code></a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt09ch20.html#algorithms.swap.specializations\">Specializations</a></span></dt></dl></dd></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt08ch19s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt09pr02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">One Past the End\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0</td></tr></table></div></body></html>"}, {"sha": "6da7e73c0587eca99ee76299961a0adf0c5a582c", "filename": "libstdc++-v3/doc/html/manual/api.html", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fapi.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,151 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>API Evolution and Deprecation History</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"ISO C++, api, evolution, deprecation, history\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\" /><link rel=\"prev\" href=\"abi.html\" title=\"ABI Policy and Guidelines\" /><link rel=\"next\" href=\"backwards.html\" title=\"Backwards Compatibility\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">API Evolution and Deprecation History</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"abi.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0Porting and Maintenance</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"backwards.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"appendix.porting.api\"></a>API Evolution and Deprecation History</h2></div></div></div><p>\n+A list of user-visible changes, in cronological order\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_300\"></a><code class=\"constant\">3.0</code></h3></div></div></div><p>\n+Extensions moved to <code class=\"filename\">include/ext</code>.\n+  </p><p>\n+Include files from the SGI/HP sources that pre-date the ISO standard\n+are added. These files are placed into\n+the <code class=\"filename\">include/backward</code> directory and a deprecated warning\n+is added that notifies on inclusion (<code class=\"literal\">-Wno-deprecated</code>\n+deactivates the warning.)\n+</p><p>Deprecated include <code class=\"filename\">backward/strstream</code> added.</p><p>Removal of include <code class=\"filename\">builtinbuf.h</code>, <code class=\"filename\">indstream.h</code>, <code class=\"filename\">parsestream.h</code>, <code class=\"filename\">PlotFile.h</code>, <code class=\"filename\">SFile.h</code>, <code class=\"filename\">stdiostream.h</code>, and <code class=\"filename\">stream.h</code>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_310\"></a><code class=\"constant\">3.1</code></h3></div></div></div><p>\n+  </p><p>\n+Extensions from SGI/HP moved from <code class=\"code\">namespace std</code>\n+to <code class=\"code\">namespace __gnu_cxx</code>. As part of this, the following\n+new includes are\n+added: <code class=\"filename\">ext/algorithm</code>, <code class=\"filename\">ext/functional</code>, <code class=\"filename\">ext/iterator</code>, <code class=\"filename\">ext/memory</code>, and <code class=\"filename\">ext/numeric</code>.\n+</p><p>\n+Extensions to <code class=\"code\">basic_filebuf</code> introduced: <code class=\"code\">__gnu_cxx::enc_filebuf</code>, and <code class=\"code\">__gnu_cxx::stdio_filebuf</code>.\n+</p><p>\n+Extensions to tree data structures added in <code class=\"filename\">ext/rb_tree</code>.\n+</p><p>\n+Removal of <code class=\"filename\">ext/tree</code>, moved to <code class=\"filename\">backward/tree.h</code>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_320\"></a><code class=\"constant\">3.2</code></h3></div></div></div><p>\n+  </p><p>Symbol versioning introduced for shared library.</p><p>Removal of include <code class=\"filename\">backward/strstream.h</code>.</p><p>Allocator changes. Change <code class=\"code\">__malloc_alloc</code> to <code class=\"code\">malloc_allocator</code> and <code class=\"code\">__new_alloc</code> to <code class=\"code\">new_allocator</code>. </p><p> For GCC releases from 2.95 through the 3.1 series, defining\n+   <code class=\"literal\">__USE_MALLOC</code> on the gcc command line would change the\n+   default allocation strategy to instead use <code class=\"code\"> malloc</code> and\n+   <code class=\"function\">free</code>. See \n+   <a class=\"ulink\" href=\"../23_containers/howto.html#3\" target=\"_top\">this note</a> \n+   for details as to why this was something needing improvement.\n+   </p><p>Error handling in iostreams cleaned up, made consistent. </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_330\"></a><code class=\"constant\">3.3</code></h3></div></div></div><p>\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_340\"></a><code class=\"constant\">3.4</code></h3></div></div></div><p>\n+  </p><p>\n+Large file support.\n+</p><p> Extensions for generic characters and <code class=\"code\">char_traits</code> added in <code class=\"filename\">ext/pod_char_traits.h</code>.\n+</p><p>\n+Support for <code class=\"code\">wchar_t</code> specializations of <code class=\"code\">basic_filebuf</code> enhanced to support <code class=\"code\">UTF-8</code> and <code class=\"code\">Unicode</code>, depending on host. More hosts support basic <code class=\"code\">wchar_t</code> functionality.\n+</p><p>\n+Support for <code class=\"code\">char_traits</code> beyond builtin types.\n+</p><p>\n+Conformant <code class=\"code\">allocator</code> class and usage in containers. As\n+part of this, the following extensions are\n+added: <code class=\"filename\">ext/bitmap_allocator.h</code>, <code class=\"filename\">ext/debug_allocator.h</code>, <code class=\"filename\">ext/mt_allocator.h</code>, <code class=\"filename\">ext/malloc_allocator.h</code>,<code class=\"filename\">ext/new_allocator.h</code>, <code class=\"filename\">ext/pool_allocator.h</code>.\n+</p><p>\n+This is a change from all previous versions, and may require\n+source-level changes due to allocator-related changes to structures\n+names and template parameters, filenames, and file locations. Some,\n+like <code class=\"code\">__simple_alloc, __allocator, __alloc, </code> and <code class=\"code\">\n+_Alloc_traits</code> have been removed.\n+</p><p>Default behavior of <code class=\"code\">std::allocator</code> has changed.</p><p>\n+   Previous versions prior to 3.4 cache allocations in a memory\n+   pool, instead of passing through to call the global allocation\n+   operators (ie, <code class=\"classname\">__gnu_cxx::pool_allocator</code>).  More\n+   recent versions default to the\n+   simpler <code class=\"classname\">__gnu_cxx::new_allocator</code>.\n+</p><p> Previously, all allocators were written to the SGI\n+   style, and all STL containers expected this interface. This\n+   interface had a traits class called <code class=\"code\">_Alloc_traits</code> that\n+   attempted to provide more information for compile-time allocation\n+   selection and optimization. This traits class had another allocator\n+   wrapper, <code class=\"code\">__simple_alloc&lt;T,A&gt;</code>, which was a\n+   wrapper around another allocator, A, which itself is an allocator\n+   for instances of T. But wait, there's more:\n+   <code class=\"code\">__allocator&lt;T,A&gt;</code> is another adapter.  Many of\n+   the provided allocator classes were SGI style: such classes can be\n+   changed to a conforming interface with this wrapper:\n+   <code class=\"code\">__allocator&lt;T, __alloc&gt;</code> is thus the same as\n+   <code class=\"code\">allocator&lt;T&gt;</code>.\n+   </p><p> The class <code class=\"classname\">allocator</code> used the typedef\n+   <span class=\"type\">__alloc</span> to select an underlying allocator that\n+   satisfied memory allocation requests. The selection of this\n+   underlying allocator was not user-configurable.\n+   </p><div class=\"table\"><a id=\"id456920\"></a><p class=\"title\"><b>Table\u00a0B.1.\u00a0Extension Allocators</b></p><div class=\"table-contents\"><table summary=\"Extension Allocators\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><thead><tr><th align=\"left\">Allocator (3.4)</th><th align=\"left\">Header (3.4)</th><th align=\"left\">Allocator (3.[0-3])</th><th align=\"left\">Header (3.[0-3])</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::new_allocator&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/new_allocator.h</code></td><td align=\"left\"><code class=\"classname\">std::__new_alloc</code></td><td align=\"left\"><code class=\"filename\">memory</code></td></tr><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::malloc_allocator&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/malloc_allocator.h</code></td><td align=\"left\"><code class=\"classname\">std::__malloc_alloc_template&lt;int&gt;</code></td><td align=\"left\"><code class=\"filename\">memory</code></td></tr><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::debug_allocator&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/debug_allocator.h</code></td><td align=\"left\"><code class=\"classname\">std::debug_alloc&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">memory</code></td></tr><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::__pool_alloc&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/pool_allocator.h</code></td><td align=\"left\"><code class=\"classname\">std::__default_alloc_template&lt;bool,int&gt;</code></td><td align=\"left\"><code class=\"filename\">memory</code></td></tr><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::__mt_alloc&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/mt_allocator.h</code></td><td align=\"left\"> </td><td align=\"left\"> </td></tr><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::bitmap_allocator&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/bitmap_allocator.h</code></td><td align=\"left\"> </td><td align=\"left\"> </td></tr></tbody></table></div></div><br class=\"table-break\" /><p> Releases after gcc-3.4 have continued to add to the collection\n+   of available allocators. All of these new allocators are\n+   standard-style. The following table includes details, along with\n+   the first released version of GCC that included the extension allocator.\n+   </p><div class=\"table\"><a id=\"id408028\"></a><p class=\"title\"><b>Table\u00a0B.2.\u00a0Extension Allocators Continued</b></p><div class=\"table-contents\"><table summary=\"Extension Allocators Continued\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><thead><tr><th align=\"left\">Allocator</th><th align=\"left\">Include</th><th align=\"left\">Version</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::array_allocator&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/array_allocator.h</code></td><td align=\"left\">4.0.0</td></tr><tr><td align=\"left\"><code class=\"classname\">__gnu_cxx::throw_allocator&lt;T&gt;</code></td><td align=\"left\"><code class=\"filename\">ext/throw_allocator.h</code></td><td align=\"left\">4.2.0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n+Debug mode first appears.\n+</p><p>\n+Precompiled header support <acronym class=\"acronym\">PCH</acronym> support.\n+</p><p>\n+Macro guard for changed, from <code class=\"literal\">_GLIBCPP_</code> to <code class=\"literal\">_GLIBCXX_</code>.\n+</p><p>\n+Extension <code class=\"filename\">ext/stdio_sync_filebuf.h</code> added.\n+</p><p>\n+Extension <code class=\"filename\">ext/demangle.h</code> added.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_400\"></a><code class=\"constant\">4.0</code></h3></div></div></div><p>\n+  </p><p>\n+TR1 features first appear.\n+</p><p>\n+Extension allocator <code class=\"filename\">ext/array_allocator.h</code> added.\n+</p><p>\n+Extension <code class=\"code\">codecvt</code> specializations moved to <code class=\"filename\">ext/codecvt_specializations.h</code>.\n+</p><p>\n+Removal of <code class=\"filename\">ext/demangle.h</code>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_410\"></a><code class=\"constant\">4.1</code></h3></div></div></div><p>\n+  </p><p>\n+Removal of <code class=\"filename\">cassert</code> from all standard headers: now has to be explicitly included for <code class=\"code\">std::assert</code> calls.\n+</p><p> Extensions for policy-based data structures first added. New includes,\n+types, namespace <code class=\"code\">pb_assoc</code>.\n+</p><p> Extensions for typelists added in <code class=\"filename\">ext/typelist.h</code>.\n+</p><p> Extension for policy-based <code class=\"code\">basic_string</code> first added: <code class=\"code\">__gnu_cxx::__versa_string</code> in <code class=\"filename\">ext/vstring.h</code>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_420\"></a><code class=\"constant\">4.2</code></h3></div></div></div><p>\n+  </p><p> Default visibility attributes applied to <code class=\"code\">namespace std</code>. Support for <code class=\"code\">-fvisibility</code>.\n+</p><p>TR1 <code class=\"filename\">random</code>, <code class=\"filename\">complex</code>, and C compatibility headers added.</p><p> Extensions for concurrent programming consolidated\n+into <code class=\"filename\">ext/concurrence.h</code> and <code class=\"filename\">ext/atomicity.h</code>,\n+including change of namespace to <code class=\"code\">__gnu_cxx</code> in some\n+cases. Added types\n+include <code class=\"code\">_Lock_policy</code>, <code class=\"code\">__concurrence_lock_error</code>, <code class=\"code\">__concurrence_unlock_error</code>, <code class=\"code\">__mutex</code>, <code class=\"code\">__scoped_lock</code>.</p><p> Extensions for type traits consolidated\n+into <code class=\"filename\">ext/type_traits.h</code>. Additional traits are added\n+(<code class=\"code\">__conditional_type</code>, <code class=\"code\">__enable_if</code>, others.)\n+</p><p> Extensions for policy-based data structures revised. New includes,\n+types, namespace moved to <code class=\"code\">__pb_ds</code>.\n+</p><p> Extensions for debug mode modified: now nested in <code class=\"code\">namespace\n+std::__debug</code> and extensions in <code class=\"code\">namespace\n+__gnu_cxx::__debug</code>.</p><p> Extensions added: <code class=\"filename\">ext/typelist.h</code>\n+and <code class=\"filename\">ext/throw_allocator.h</code>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"api.rel_430\"></a><code class=\"constant\">4.3</code></h3></div></div></div><p>\n+  </p><p>\n+C++0X features first appear.\n+</p><p>TR1 <code class=\"filename\">regex</code> and <code class=\"filename\">cmath</code>'s mathematical special function added.</p><p>\n+Backward include edit.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>Removed</p><p>\n+<code class=\"filename\">algobase.h</code> <code class=\"filename\">algo.h</code> <code class=\"filename\">alloc.h</code> <code class=\"filename\">bvector.h</code> <code class=\"filename\">complex.h</code>\n+<code class=\"filename\">defalloc.h</code> <code class=\"filename\">deque.h</code> <code class=\"filename\">fstream.h</code> <code class=\"filename\">function.h</code> <code class=\"filename\">hash_map.h</code> <code class=\"filename\">hash_set.h</code>\n+<code class=\"filename\">hashtable.h</code> <code class=\"filename\">heap.h</code> <code class=\"filename\">iomanip.h</code> <code class=\"filename\">iostream.h</code> <code class=\"filename\">istream.h</code> <code class=\"filename\">iterator.h</code>\n+<code class=\"filename\">list.h</code> <code class=\"filename\">map.h</code> <code class=\"filename\">multimap.h</code> <code class=\"filename\">multiset.h</code> <code class=\"filename\">new.h</code> <code class=\"filename\">ostream.h</code> <code class=\"filename\">pair.h</code> <code class=\"filename\">queue.h</code> <code class=\"filename\">rope.h</code> <code class=\"filename\">set.h</code> <code class=\"filename\">slist.h</code> <code class=\"filename\">stack.h</code> <code class=\"filename\">streambuf.h</code> <code class=\"filename\">stream.h</code> <code class=\"filename\">tempbuf.h</code>\n+<code class=\"filename\">tree.h</code> <code class=\"filename\">vector.h</code>\n+  </p></li><li><p>Added</p><p>\n+  <code class=\"filename\">hash_map</code> and <code class=\"filename\">hash_set</code>\n+  </p></li><li><p>Added in C++0x</p><p>\n+    <code class=\"filename\">auto_ptr.h</code> and <code class=\"filename\">binders.h</code>\n+  </p></li></ul></div><p>\n+Header dependency streamlining.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"filename\">algorithm</code> no longer includes <code class=\"filename\">climits</code>, <code class=\"filename\">cstring</code>, or <code class=\"filename\">iosfwd</code> </p></li><li><p><code class=\"filename\">bitset</code> no longer includes <code class=\"filename\">istream</code> or <code class=\"filename\">ostream</code>, adds <code class=\"filename\">iosfwd</code> </p></li><li><p><code class=\"filename\">functional</code> no longer includes <code class=\"filename\">cstddef</code></p></li><li><p><code class=\"filename\">iomanip</code> no longer includes <code class=\"filename\">istream</code>, <code class=\"filename\">istream</code>, or <code class=\"filename\">functional</code>, adds <code class=\"filename\">ioswd</code> </p></li><li><p><code class=\"filename\">numeric</code> no longer includes <code class=\"filename\">iterator</code></p></li><li><p><code class=\"filename\">string</code> no longer includes <code class=\"filename\">algorithm</code> or <code class=\"filename\">memory</code></p></li><li><p><code class=\"filename\">valarray</code> no longer includes <code class=\"filename\">numeric</code> or <code class=\"filename\">cstdlib</code></p></li><li><p><code class=\"filename\">tr1/hashtable</code> no longer includes <code class=\"filename\">memory</code> or <code class=\"filename\">functional</code></p></li><li><p><code class=\"filename\">tr1/memory</code> no longer includes <code class=\"filename\">algorithm</code></p></li><li><p><code class=\"filename\">tr1/random</code> no longer includes <code class=\"filename\">algorithm</code> or <code class=\"filename\">fstream</code></p></li></ul></div><p>\n+Debug mode for <code class=\"filename\">unordered_map</code> and <code class=\"filename\">unordered_set</code>.\n+</p><p>\n+Parallel mode first appears.\n+</p><p>Variadic template implementations of items in <code class=\"filename\">tuple</code> and\n+    <code class=\"filename\">functional</code>. \n+</p><p>Default <code class=\"code\">what</code> implementations give more elaborate\n+    exception strings for <code class=\"code\">bad_cast</code>,\n+    <code class=\"code\">bad_typeid</code>, <code class=\"code\">bad_exception</code>, and\n+    <code class=\"code\">bad_alloc</code>.\n+</p><p>\n+PCH binary files no longer installed. Instead, the source files are installed. \n+</p><p>\n+Namespace pb_ds moved to __gnu_pb_ds.\n+</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"abi.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"backwards.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">ABI Policy and Guidelines\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Backwards Compatibility</td></tr></table></div></body></html>"}, {"sha": "007c7fe52a6644945b86ea553b5d8ebf99e927a5", "filename": "libstdc++-v3/doc/html/manual/appendix_contributing.html", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_contributing.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_contributing.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_contributing.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Appendix\u00a0A.\u00a0Contributing</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt12ch40s03.html\" title=\"Use\" /><link rel=\"next\" href=\"bk01apas02.html\" title=\"Directory Layout and Source Conventions\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Appendix\u00a0A.\u00a0Contributing</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch40s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas02.html\">Next</a></td></tr></table><hr /></div><div class=\"appendix\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"appendix.contrib\"></a>Appendix\u00a0A.\u00a0Contributing</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"appendix_contributing.html#contrib.list\">Contributor Checklist</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"appendix_contributing.html#list.reading\">Reading</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_contributing.html#list.copyright\">Assignment</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_contributing.html#list.getting\">Getting Sources</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_contributing.html#list.patches\">Submitting Patches</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01apas02.html\">Directory Layout and Source Conventions</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01apas03.html\">Coding Style</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01apas03.html#coding_style.bad_identifiers\">Bad Itentifiers</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01apas03.html#coding_style.example\">By Example</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01apas04.html\">Documentation Style</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01apas04.html#doc_style.doxygen\">Doxygen</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01apas04.html#doc_style.docbook\">Docbook</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01apas05.html\">Design Notes</a></span></dt></dl></div><p> \n+  The GNU C++ Library follows an open development model. Active\n+  contributors are assigned maintainer-ship responsibility, and given\n+  write access to the source repository. First time contributors\n+  should follow this procedure:\n+</p><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"contrib.list\"></a>Contributor Checklist</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"list.reading\"></a>Reading</h3></div></div></div><div class=\"itemizedlist\"><ul type=\"disc\"><li><p> \n+\t  Get and read the relevant sections of the C++ language\n+\t  specification. Copies of the full ISO 14882 standard are\n+\t  available on line via the ISO mirror site for committee\n+\t  members. Non-members, or those who have not paid for the\n+\t  privilege of sitting on the committee and sustained their\n+\t  two meeting commitment for voting rights, may get a copy of\n+\t  the standard from their respective national standards\n+\t  organization. In the USA, this national standards\n+\t  organization is ANSI and their web-site is right\n+\t  <a class=\"ulink\" href=\"http://www.ansi.org\" target=\"_top\">here.</a> \n+\t  (And if you've already registered with them, clicking this link will take you to directly to the place where you can \n+\t  <a class=\"ulink\" href=\"http://webstore.ansi.org/ansidocstore/product.asp?sku=ISO%2FIEC+14882%3A2003\" target=\"_top\">buy the standard on-line.)</a>\n+\t</p></li><li><p> \n+\t  The library working group bugs, and known defects, can\n+\t  be obtained here:\n+\t  <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">http://www.open-std.org/jtc1/sc22/wg21 </a>\n+\t</p></li><li><p> \n+\t  The newsgroup dedicated to standardization issues is\n+\t  comp.std.c++: this FAQ for this group is quite useful and\n+\t  can be\n+\t  found <a class=\"ulink\" href=\"http://www.jamesd.demon.co.uk/csc/faq.html\" target=\"_top\">\n+\t  here </a>.\n+      </p></li><li><p> \n+\t  Peruse\n+\t  the <a class=\"ulink\" href=\"http://www.gnu.org/prep/standards_toc.html\" target=\"_top\">GNU\n+\t  Coding Standards</a>, and chuckle when you hit the part\n+\t  about \u201c<span class=\"quote\">Using Languages Other Than C</span>\u201d.\n+\t</p></li><li><p> \n+\t  Be familiar with the extensions that preceded these\n+\t  general GNU rules. These style issues for libstdc++ can be\n+\t  found <a class=\"link\" href=\"bk01apas03.html\" title=\"Coding Style\">here</a>.\n+      </p></li><li><p> \n+\t  And last but certainly not least, read the\n+\t  library-specific information\n+\t  found <a class=\"link\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\"> here</a>.\n+      </p></li></ul></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"list.copyright\"></a>Assignment</h3></div></div></div><p>\n+      Small changes can be accepted without a copyright assignment form on\n+      file. New code and additions to the library need completed copyright\n+      assignment form on file at the FSF. Note: your employer may be required\n+      to fill out appropriate disclaimer forms as well. \n+    </p><p> \n+      Historically, the libstdc++ assignment form added the following\n+      question:\n+    </p><p>\n+      \u201c<span class=\"quote\">\n+\tWhich Belgian comic book character is better, Tintin or Asterix, and\n+\twhy?\n+      </span>\u201d\n+    </p><p>\n+      While not strictly necessary, humoring the maintainers and answering\n+      this question would be appreciated.\n+    </p><p>\n+      For more information about getting a copyright assignment, please see \n+      <a class=\"ulink\" href=\"http://www.gnu.org/prep/maintain/html_node/Legal-Matters.html\" target=\"_top\">Legal\n+\tMatters</a>.\n+    </p><p>\n+      Please contact Benjamin Kosnik at\n+      <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:bkoz+assign@redhat.com\">bkoz+assign@redhat.com</a>&gt;</code> if you are confused\n+      about the assignment or have general licensing questions. When\n+      requesting an assignment form from\n+      <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:mailto:assign@gnu.org\">mailto:assign@gnu.org</a>&gt;</code>, please cc the libstdc++\n+      maintainer above so that progress can be monitored.\n+    </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"list.getting\"></a>Getting Sources</h3></div></div></div><p>\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/svnwrite.html\" target=\"_top\">Getting write access\n+\t(look for \"Write after approval\")</a>\n+    </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"list.patches\"></a>Submitting Patches</h3></div></div></div><p>\n+      Every patch must have several pieces of information before it can be\n+      properly evaluated. Ideally (and to ensure the fastest possible\n+      response from the maintainers) it would have all of these pieces:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p> \n+\t  A description of the bug and how your patch fixes this\n+\t  bug. For new features a description of the feature and your\n+\t  implementation. \n+\t</p></li><li><p> \n+\t  A ChangeLog entry as plain text; see the various\n+\t  ChangeLog files for format and content. If using you are\n+\t  using emacs as your editor, simply position the insertion\n+\t  point at the beginning of your change and hit CX-4a to bring\n+\t  up the appropriate ChangeLog entry. See--magic! Similar\n+\t  functionality also exists for vi. \n+\t</p></li><li><p> \n+\t  A testsuite submission or sample program that will\n+\t  easily and simply show the existing error or test new\n+\t  functionality. \n+\t</p></li><li><p> \n+\t  The patch itself. If you are accessing the SVN\n+\t  repository use <span class=\"command\"><strong>svn update; svn diff NEW</strong></span>;\n+\t  else, use <span class=\"command\"><strong>diff -cp OLD NEW</strong></span> ... If your\n+\t  version of diff does not support these options, then get the\n+\t  latest version of GNU\n+\t  diff. The <a class=\"ulink\" href=\"http://gcc.gnu.org/wiki/SvnTricks\" target=\"_top\">SVN\n+\t  Tricks</a> wiki page has information on customising the\n+\t  output of <code class=\"code\">svn diff</code>.\n+\t</p></li><li><p> \n+\t  When you have all these pieces, bundle them up in a\n+\t  mail message and send it to libstdc++@gcc.gnu.org. All\n+\t  patches and related discussion should be sent to the\n+\t  libstdc++ mailing list. \n+\t</p></li></ul></div></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch40s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Use\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Directory Layout and Source Conventions</td></tr></table></div></body></html>"}, {"sha": "5f86c98fd71c602dad4409d01c9c7acac6b9f776", "filename": "libstdc++-v3/doc/html/manual/appendix_free.html", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_free.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_free.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_free.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,116 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Appendix\u00a0C.\u00a0Free Software Needs Free Documentation</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"backwards.html\" title=\"Backwards Compatibility\" /><link rel=\"next\" href=\"bk01apd.html\" title=\"Appendix\u00a0D.\u00a0GNU General Public License\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Appendix\u00a0C.\u00a0Free Software Needs Free Documentation</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"backwards.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apd.html\">Next</a></td></tr></table><hr /></div><div class=\"appendix\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"appendix.free\"></a>Appendix\u00a0C.\u00a0Free Software Needs Free Documentation</h2></div></div></div><p>\n+The biggest deficiency in free operating systems is not in the\n+software--it is the lack of good free manuals that we can include in\n+these systems.  Many of our most important programs do not come with\n+full manuals.  Documentation is an essential part of any software\n+package; when an important free software package does not come with a\n+free manual, that is a major gap.  We have many such gaps today.\n+</p><p>\n+Once upon a time, many years ago, I thought I would learn Perl.  I got\n+a copy of a free manual, but I found it hard to read.  When I asked\n+Perl users about alternatives, they told me that there were better\n+introductory manuals--but those were not free.\n+</p><p>\n+Why was this?  The authors of the good manuals had written them for\n+O'Reilly Associates, which published them with restrictive terms--no\n+copying, no modification, source files not available--which exclude\n+them from the free software community.\n+</p><p>\n+That wasn't the first time this sort of thing has happened, and (to\n+our community's great loss) it was far from the last.  Proprietary\n+manual publishers have enticed a great many authors to restrict their\n+manuals since then.  Many times I have heard a GNU user eagerly tell\n+me about a manual that he is writing, with which he expects to help\n+the GNU project--and then had my hopes dashed, as he proceeded to\n+explain that he had signed a contract with a publisher that would\n+restrict it so that we cannot use it.\n+</p><p>\n+Given that writing good English is a rare skill among programmers, we\n+can ill afford to lose manuals this way.\n+</p><p> \n+  Free documentation, like free software, is a matter of freedom,\n+not price.  The problem with these manuals was not that O'Reilly\n+Associates charged a price for printed copies--that in itself is fine.\n+(The Free Software Foundation <a class=\"ulink\" href=\"http://www.gnu.org/doc/doc.html\" target=\"_top\">sells printed copies</a> of\n+free GNU manuals, too.)  But GNU manuals are available in source code\n+form, while these manuals are available only on paper.  GNU manuals\n+come with permission to copy and modify; the Perl manuals do not.\n+These restrictions are the problems.\n+</p><p>\n+The criterion for a free manual is pretty much the same as for free\n+software: it is a matter of giving all users certain freedoms.\n+Redistribution (including commercial redistribution) must be\n+permitted, so that the manual can accompany every copy of the program,\n+on-line or on paper.  Permission for modification is crucial too.\n+</p><p>\n+As a general rule, I don't believe that it is essential for people to\n+have permission to modify all sorts of articles and books.  The issues\n+for writings are not necessarily the same as those for software.  For\n+example, I don't think you or I are obliged to give permission to\n+modify articles like this one, which describe our actions and our\n+views.\n+</p><p>\n+But there is a particular reason why the freedom to modify is crucial\n+for documentation for free software.  When people exercise their right\n+to modify the software, and add or change its features, if they are\n+conscientious they will change the manual too--so they can provide\n+accurate and usable documentation with the modified program.  A manual\n+which forbids programmers to be conscientious and finish the job, or\n+more precisely requires them to write a new manual from scratch if\n+they change the program, does not fill our community's needs.\n+</p><p>\n+While a blanket prohibition on modification is unacceptable, some\n+kinds of limits on the method of modification pose no problem.  For\n+example, requirements to preserve the original author's copyright\n+notice, the distribution terms, or the list of authors, are ok.  It is\n+also no problem to require modified versions to include notice that\n+they were modified, even to have entire sections that may not be\n+deleted or changed, as long as these sections deal with nontechnical\n+topics.  (Some GNU manuals have them.)\n+</p><p>\n+These kinds of restrictions are not a problem because, as a practical\n+matter, they don't stop the conscientious programmer from adapting the\n+manual to fit the modified program.  In other words, they don't block\n+the free software community from making full use of the manual.\n+</p><p>\n+However, it must be possible to modify all the <span class=\"emphasis\"><em>technical</em></span>\n+content of the manual, and then distribute the result in all the usual\n+media, through all the usual channels; otherwise, the restrictions do\n+block the community, the manual is not free, and so we need another\n+manual.\n+</p><p>\n+Unfortunately, it is often hard to find someone to write another\n+manual when a proprietary manual exists.  The obstacle is that many\n+users think that a proprietary manual is good enough--so they don't\n+see the need to write a free manual.  They do not see that the free\n+operating system has a gap that needs filling.\n+</p><p>\n+Why do users think that proprietary manuals are good enough?  Some\n+have not considered the issue.  I hope this article will do something\n+to change that.\n+</p><p>\n+Other users consider proprietary manuals acceptable for the same\n+reason so many people consider proprietary software acceptable: they\n+judge in purely practical terms, not using freedom as a criterion.\n+These people are entitled to their opinions, but since those opinions\n+spring from values which do not include freedom, they are no guide for\n+those of us who do value freedom.\n+</p><p>\n+Please spread the word about this issue.  We continue to lose manuals\n+to proprietary publishing.  If we spread the word that proprietary\n+manuals are not sufficient, perhaps the next person who wants to help\n+GNU by writing documentation will realize, before it is too late, that\n+he must above all make it free.\n+</p><p>\n+We can also encourage commercial publishers to sell free, copylefted\n+manuals instead of proprietary ones.  One way you can help this is to\n+check the distribution terms of a manual before you buy it, and\n+prefer copylefted manuals to non-copylefted ones.\n+</p><p>\n+[Note: We now maintain a <a class=\"ulink\" href=\"http://www.fsf.org/licensing/doc/other-free-books.html\" target=\"_top\">web page\n+that lists free books available from other publishers</a>].\n+</p><p>Copyright \u00a9 2004, 2005, 2006, 2007 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA</p><p>Verbatim copying and distribution of this entire article are\n+permitted worldwide, without royalty, in any medium, provided this\n+notice is preserved.</p><p>Report any problems or suggestions to <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:webmaster@fsf.org\">webmaster@fsf.org</a>&gt;</code>.</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"backwards.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apd.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Backwards Compatibility\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Appendix\u00a0D.\u00a0GNU General Public License</td></tr></table></div></body></html>"}, {"sha": "001943516a33cb60a47357385b42209c3fe07111", "filename": "libstdc++-v3/doc/html/manual/appendix_porting.html", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fappendix_porting.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,224 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Appendix\u00a0B.\u00a0Porting and Maintenance</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01apas05.html\" title=\"Design Notes\" /><link rel=\"next\" href=\"internals.html\" title=\"Porting to New Hardware or Operating Systems\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Appendix\u00a0B.\u00a0Porting and Maintenance</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas05.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"internals.html\">Next</a></td></tr></table><hr /></div><div class=\"appendix\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"appendix.porting\"></a>Appendix\u00a0B.\u00a0Porting and Maintenance</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"appendix_porting.html#appendix.porting.build_hacking\">Configure and Build Hacking</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"appendix_porting.html#build_hacking.prereq\">Prerequisites</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_porting.html#build_hacking.map\">Overview: What Comes from Where</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_porting.html#build_hacking.scripts\">Storing Information in non-AC files (like configure.host)</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_porting.html#build_hacking.conventions\">Coding and Commenting Conventions</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_porting.html#build_hacking.acinclude\">The acinclude.m4 layout</a></span></dt><dt><span class=\"sect2\"><a href=\"appendix_porting.html#build_hacking.enable\"><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"internals.html\">Porting to New Hardware or Operating Systems</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"internals.html#internals.os\">Operating System</a></span></dt><dt><span class=\"sect2\"><a href=\"internals.html#internals.cpu\">CPU</a></span></dt><dt><span class=\"sect2\"><a href=\"internals.html#internals.char_types\">Character Types</a></span></dt><dt><span class=\"sect2\"><a href=\"internals.html#internals.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"sect2\"><a href=\"internals.html#internals.numeric_limits\">Numeric Limits</a></span></dt><dt><span class=\"sect2\"><a href=\"internals.html#internals.libtool\">Libtool</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"abi.html\">ABI Policy and Guidelines</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"abi.html#abi.cxx_interface\">The C++ Interface</a></span></dt><dt><span class=\"sect2\"><a href=\"abi.html#abi.versioning\">Versioning</a></span></dt><dt><span class=\"sect2\"><a href=\"abi.html#abi.changes_allowed\">Allowed Changes</a></span></dt><dt><span class=\"sect2\"><a href=\"abi.html#abi.changes_no\">Prohibited Changes</a></span></dt><dt><span class=\"sect2\"><a href=\"abi.html#abi.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"abi.html#abi.testing\">Testing</a></span></dt><dt><span class=\"sect2\"><a href=\"abi.html#abi.issues\">Outstanding Issues</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"api.html\">API Evolution and Deprecation History</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"api.html#api.rel_300\"><code class=\"constant\">3.0</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_310\"><code class=\"constant\">3.1</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_320\"><code class=\"constant\">3.2</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_330\"><code class=\"constant\">3.3</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_340\"><code class=\"constant\">3.4</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_400\"><code class=\"constant\">4.0</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_410\"><code class=\"constant\">4.1</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_420\"><code class=\"constant\">4.2</code></a></span></dt><dt><span class=\"sect2\"><a href=\"api.html#api.rel_430\"><code class=\"constant\">4.3</code></a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"backwards.html\">Backwards Compatibility</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"backwards.html#backwards.first\">First</a></span></dt><dt><span class=\"sect2\"><a href=\"backwards.html#backwards.second\">Second</a></span></dt><dt><span class=\"sect2\"><a href=\"backwards.html#backwards.third\">Third</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"appendix.porting.build_hacking\"></a>Configure and Build Hacking</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.prereq\"></a>Prerequisites</h3></div></div></div><p> \n+    As noted <a class=\"ulink\" href=\"http://gcc.gnu.org/install/prerequisites.html\" target=\"_top\">previously</a>,\n+    certain other tools are necessary for hacking on files that\n+    control configure (<code class=\"code\">configure.ac</code>,\n+    <code class=\"code\">acinclude.m4</code>) and make\n+    (<code class=\"code\">Makefile.am</code>). These additional tools\n+    (<code class=\"code\">automake</code>, and <code class=\"code\">autoconf</code>) are further\n+    described in detail in their respective manuals. All the libraries\n+    in GCC try to stay in sync with each other in terms of versions of\n+    the auto-tools used, so please try to play nicely with the\n+    neighbors.\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.map\"></a>Overview: What Comes from Where</h3></div></div></div><pre class=\"screen\">\n+  <img src=\"../images/confdeps.png\" alt=\"Dependency Graph Configure to Build Files\" />\n+  </pre><p>\n+    Regenerate all generated files by using the command sequence\n+    <code class=\"code\">\"autoreconf\"</code> at the top level of the libstdc++ source\n+    directory. The following will also work, but is much more complex:\n+    <code class=\"code\">\"aclocal-1.7 &amp;&amp; autoconf-2.59 &amp;&amp;\n+    autoheader-2.59 &amp;&amp; automake-1.7\"</code> The version\n+    numbers may be absent entirely or otherwise vary depending on\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/install/prerequisites.html\" target=\"_top\">the\n+    current requirements</a> and your vendor's choice of\n+    installation names.\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.scripts\"></a>Storing Information in non-AC files (like configure.host)</h3></div></div></div><p>\n+    Until that glorious day when we can use AC_TRY_LINK with a\n+    cross-compiler, we have to hardcode the results of what the tests\n+    would have shown if they could be run.  So we have an inflexible\n+    mess like crossconfig.m4.\n+  </p><p>\n+    Wouldn't it be nice if we could store that information in files\n+    like configure.host, which can be modified without needing to\n+    regenerate anything, and can even be tweaked without really\n+    knowing how the configury all works?  Perhaps break the pieces of\n+    crossconfig.m4 out and place them in their appropriate\n+    config/{cpu,os} directory.\n+  </p><p>\n+    Alas, writing macros like\n+    \"<code class=\"code\">AC_DEFINE(HAVE_A_NICE_DAY)</code>\" can only be done inside\n+    files which are passed through autoconf.  Files which are pure\n+    shell script can be source'd at configure time.  Files which\n+    contain autoconf macros must be processed with autoconf.  We could\n+    still try breaking the pieces out into \"config/*/cross.m4\" bits,\n+    for instance, but then we would need arguments to aclocal/autoconf\n+    to properly find them all when generating configure.  I would\n+    discourage that.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.conventions\"></a>Coding and Commenting Conventions</h3></div></div></div><p>\n+    Most comments should use {octothorpes, shibboleths, hash marks,\n+    pound signs, whatevers} rather than \"dnl\".  Nearly all comments in\n+    configure.ac should.  Comments inside macros written in ancilliary\n+    .m4 files should.  About the only comments which should\n+    <span class=\"emphasis\"><em>not</em></span> use #, but use dnl instead, are comments\n+    <span class=\"emphasis\"><em>outside</em></span> our own macros in the ancilliary\n+    files.  The difference is that # comments show up in\n+    <code class=\"code\">configure</code> (which is most helpful for debugging),\n+    while dnl'd lines just vanish.  Since the macros in ancilliary\n+    files generate code which appears in odd places, their \"outside\"\n+    comments tend to not be useful while reading\n+    <code class=\"code\">configure</code>.\n+  </p><p>\n+    Do not use any <code class=\"code\">$target*</code> variables, such as\n+    <code class=\"code\">$target_alias</code>.  The single exception is in\n+    configure.ac, for automake+dejagnu's sake.\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.acinclude\"></a>The acinclude.m4 layout</h3></div></div></div><p>\n+    The nice thing about acinclude.m4/aclocal.m4 is that macros aren't\n+    actually performed/called/expanded/whatever here, just loaded.  So\n+    we can arrange the contents however we like.  As of this writing,\n+    acinclude.m4 is arranged as follows:\n+  </p><pre class=\"programlisting\">\n+    GLIBCXX_CHECK_HOST\n+    GLIBCXX_TOPREL_CONFIGURE\n+    GLIBCXX_CONFIGURE\n+  </pre><p>\n+    All the major variable \"discovery\" is done here.  CXX, multilibs,\n+    etc.\n+  </p><pre class=\"programlisting\">\n+    fragments included from elsewhere\n+  </pre><p>\n+    Right now, \"fragments\" == \"the math/linkage bits\".\n+  </p><pre class=\"programlisting\">\n+    GLIBCXX_CHECK_COMPILER_FEATURES\n+    GLIBCXX_CHECK_LINKER_FEATURES\n+    GLIBCXX_CHECK_WCHAR_T_SUPPORT\n+</pre><p>\n+  Next come extra compiler/linker feature tests.  Wide character\n+  support was placed here because I couldn't think of another place\n+  for it.  It will probably get broken apart like the math tests,\n+  because we're still disabling wchars on systems which could actually\n+  support them.\n+</p><pre class=\"programlisting\">\n+    GLIBCXX_CHECK_SETRLIMIT_ancilliary\n+    GLIBCXX_CHECK_SETRLIMIT\n+    GLIBCXX_CHECK_S_ISREG_OR_S_IFREG\n+    GLIBCXX_CHECK_POLL\n+    GLIBCXX_CHECK_WRITEV\n+\n+    GLIBCXX_CONFIGURE_TESTSUITE\n+</pre><p>\n+  Feature tests which only get used in one place.  Here, things used\n+  only in the testsuite, plus a couple bits used in the guts of I/O.\n+</p><pre class=\"programlisting\">\n+    GLIBCXX_EXPORT_INCLUDES\n+    GLIBCXX_EXPORT_FLAGS\n+    GLIBCXX_EXPORT_INSTALL_INFO\n+</pre><p>\n+  Installation variables, multilibs, working with the rest of the\n+  compiler.  Many of the critical variables used in the makefiles are\n+  set here.\n+</p><pre class=\"programlisting\">\n+    GLIBGCC_ENABLE\n+    GLIBCXX_ENABLE_C99\n+    GLIBCXX_ENABLE_CHEADERS\n+    GLIBCXX_ENABLE_CLOCALE\n+    GLIBCXX_ENABLE_CONCEPT_CHECKS\n+    GLIBCXX_ENABLE_CSTDIO\n+    GLIBCXX_ENABLE_CXX_FLAGS\n+    GLIBCXX_ENABLE_C_MBCHAR\n+    GLIBCXX_ENABLE_DEBUG\n+    GLIBCXX_ENABLE_DEBUG_FLAGS\n+    GLIBCXX_ENABLE_LONG_LONG\n+    GLIBCXX_ENABLE_PCH\n+    GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n+    GLIBCXX_ENABLE_SYMVERS\n+    GLIBCXX_ENABLE_THREADS\n+</pre><p>\n+  All the features which can be controlled with enable/disable\n+  configure options.  Note how they're alphabetized now?  Keep them\n+  like that.  :-)\n+</p><pre class=\"programlisting\">\n+    AC_LC_MESSAGES\n+    libtool bits\n+</pre><p>\n+  Things which we don't seem to use directly, but just has to be\n+  present otherwise stuff magically goes wonky.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build_hacking.enable\"></a><code class=\"constant\">GLIBCXX_ENABLE</code>, the <code class=\"literal\">--enable</code> maker</h3></div></div></div><p>\n+    All the GLIBCXX_ENABLE_FOO macros use a common helper,\n+    GLIBCXX_ENABLE.  (You don't have to use it, but it's easy.)  The\n+    helper does two things for us:\n+  </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+     Builds the call to the AC_ARG_ENABLE macro, with --help text\n+     properly quoted and aligned.  (Death to changequote!)\n+   </p></li><li><p>\n+     Checks the result against a list of allowed possibilities, and\n+     signals a fatal error if there's no match.  This means that the\n+     rest of the GLIBCXX_ENABLE_FOO macro doesn't need to test for\n+     strange arguments, nor do we need to protect against\n+     empty/whitespace strings with the <code class=\"code\">\"x$foo\" = \"xbar\"</code>\n+     idiom.\n+   </p></li></ol></div><p>Doing these things correctly takes some extra autoconf/autom4te code,\n+   which made our macros nearly illegible.  So all the ugliness is factored\n+   out into this one helper macro.\n+</p><p>Many of the macros take an argument, passed from when they are expanded\n+   in configure.ac.  The argument controls the default value of the\n+   enable/disable switch.  Previously, the arguments themselves had defaults.\n+   Now they don't, because that's extra complexity with zero gain for us.\n+</p><p>There are three \"overloaded signatures\".  When reading the descriptions\n+   below, keep in mind that the brackets are autoconf's quotation characters,\n+   and that they will be stripped.  Examples of just about everything occur\n+   in acinclude.m4, if you want to look.\n+</p><pre class=\"programlisting\">\n+    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING)\n+    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, permit a|b|c)\n+    GLIBCXX_ENABLE (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, SHELL-CODE-HANDLER)\n+</pre><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+     FEATURE is the string that follows --enable.  The results of the\n+     test (such as it is) will be in the variable $enable_FEATURE,\n+     where FEATURE has been squashed.  Example:\n+     <code class=\"code\">[extra-foo]</code>, controlled by the --enable-extra-foo\n+     option and stored in $enable_extra_foo.\n+   </p></li><li><p>\n+     DEFAULT is the value to store in $enable_FEATURE if the user does\n+     not pass --enable/--disable.  It should be one of the permitted\n+     values passed later.  Examples: <code class=\"code\">[yes]</code>, or\n+     <code class=\"code\">[bar]</code>, or <code class=\"code\">[$1]</code> (which passes the\n+     argument given to the GLIBCXX_ENABLE_FOO macro as the\n+     default).\n+   </p><p>\n+     For cases where we need to probe for particular models of things,\n+     it is useful to have an undocumented \"auto\" value here (see\n+     GLIBCXX_ENABLE_CLOCALE for an example).\n+   </p></li><li><p>\n+     HELP-ARG is any text to append to the option string itself in the\n+     --help output.  Examples: <code class=\"code\">[]</code> (i.e., an empty string,\n+     which appends nothing), <code class=\"code\">[=BAR]</code>, which produces\n+     <code class=\"code\">--enable-extra-foo=BAR</code>, and\n+     <code class=\"code\">[@&lt;:@=BAR@:&gt;@]</code>, which produces\n+     <code class=\"code\">--enable-extra-foo[=BAR]</code>.  See the difference?  See\n+     what it implies to the user?\n+   </p><p>\n+     If you're wondering what that line noise in the last example was,\n+     that's how you embed autoconf special characters in output text.\n+     They're called <a class=\"ulink\" href=\"http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_95.html#SEC95\" target=\"_top\"><span class=\"emphasis\"><em>quadrigraphs</em></span></a>\n+     and you should use them whenever necessary.\n+ </p></li><li><p>HELP-STRING is what you think it is.  Do not include the\n+   \"default\" text like we used to do; it will be done for you by\n+   GLIBCXX_ENABLE.  By convention, these are not full English\n+   sentences.  Example: [turn on extra foo]\n+   </p></li></ul></div><p>\n+  With no other arguments, only the standard autoconf patterns are\n+  allowed: \"<code class=\"code\">--{enable,disable}-foo[={yes,no}]</code>\" The\n+  $enable_FEATURE variable is guaranteed to equal either \"yes\" or \"no\"\n+  after the macro.  If the user tries to pass something else, an\n+  explanatory error message will be given, and configure will halt.\n+</p><p>\n+  The second signature takes a fifth argument, \"<code class=\"code\">[permit\n+  a | b | c | ...]</code>\"\n+  This allows <span class=\"emphasis\"><em>a</em></span> or <span class=\"emphasis\"><em>b</em></span> or\n+  ... after the equals sign in the option, and $enable_FEATURE is\n+  guaranteed to equal one of them after the macro.  Note that if you\n+  want to allow plain --enable/--disable with no \"=whatever\", you must\n+  include \"yes\" and \"no\" in the list of permitted values.  Also note\n+  that whatever you passed as DEFAULT must be in the list.  If the\n+  user tries to pass something not on the list, a semi-explanatory\n+  error message will be given, and configure will halt.  Example:\n+  <code class=\"code\">[permit generic|gnu|ieee_1003.1-2001|yes|no|auto]</code>\n+</p><p>\n+  The third signature takes a fifth argument.  It is arbitrary shell\n+  code to execute if the user actually passes the enable/disable\n+  option.  (If the user does not, the default is used.  Duh.)  No\n+  argument checking at all is done in this signature.  See\n+  GLIBCXX_ENABLE_CXX_FLAGS for an example of handling, and an error\n+  message.\n+</p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas05.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"internals.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Design Notes\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Porting to New Hardware or Operating Systems</td></tr></table></div></body></html>"}, {"sha": "31e35af3fb2e33f0463d251148d1a4db182476fc", "filename": "libstdc++-v3/doc/html/manual/auto_ptr.html", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fauto_ptr.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fauto_ptr.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fauto_ptr.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,90 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>auto_ptr</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      auto_ptr&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt04ch11.html\" title=\"Chapter\u00a011.\u00a0Memory\" /><link rel=\"prev\" href=\"bk01pt04ch11.html\" title=\"Chapter\u00a011.\u00a0Memory\" /><link rel=\"next\" href=\"shared_ptr.html\" title=\"shared_ptr\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">auto_ptr</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt04ch11.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a011.\u00a0Memory</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"shared_ptr.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.util.memory.auto_ptr\"></a>auto_ptr</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"auto_ptr.limitations\"></a>Limitations</h3></div></div></div><p>Explaining all of the fun and delicious things that can\n+   happen with misuse of the <code class=\"classname\">auto_ptr</code> class\n+   template (called <acronym class=\"acronym\">AP</acronym> here) would take some\n+   time. Suffice it to say that the use of <acronym class=\"acronym\">AP</acronym>\n+   safely in the presence of copying has some subtleties.\n+   </p><p>\n+     The AP class is a really\n+      nifty idea for a smart pointer, but it is one of the dumbest of\n+      all the smart pointers -- and that's fine.\n+   </p><p>\n+     AP is not meant to be a supersmart solution to all resource\n+      leaks everywhere.  Neither is it meant to be an effective form\n+      of garbage collection (although it can help, a little bit).\n+      And it can <span class=\"emphasis\"><em>not</em></span>be used for arrays!\n+   </p><p>\n+     <acronym class=\"acronym\">AP</acronym> is meant to prevent nasty leaks in the\n+     presence of exceptions.  That's <span class=\"emphasis\"><em>all</em></span>.  This\n+     code is AP-friendly:\n+   </p><pre class=\"programlisting\">\n+    // Not a recommend naming scheme, but good for web-based FAQs.\n+    typedef std::auto_ptr&lt;MyClass&gt;  APMC;\n+\n+    extern function_taking_MyClass_pointer (MyClass*);\n+    extern some_throwable_function ();\n+\n+    void func (int data)\n+    {\n+        APMC  ap (new MyClass(data));\n+\n+        some_throwable_function();   // this will throw an exception\n+\n+        function_taking_MyClass_pointer (ap.get());\n+    }\n+   </pre><p>When an exception gets thrown, the instance of MyClass that's\n+      been created on the heap will be <code class=\"function\">delete</code>'d as the stack is\n+      unwound past <code class=\"function\">func()</code>.\n+   </p><p>Changing that code as follows is not <acronym class=\"acronym\">AP</acronym>-friendly:\n+   </p><pre class=\"programlisting\">\n+        APMC  ap (new MyClass[22]);\n+   </pre><p>You will get the same problems as you would without the use\n+      of <acronym class=\"acronym\">AP</acronym>:\n+   </p><pre class=\"programlisting\">\n+        char*  array = new char[10];       // array new...\n+        ...\n+        delete array;                      // ...but single-object delete\n+   </pre><p>\n+     AP cannot tell whether the pointer you've passed at creation points\n+      to one or many things.  If it points to many things, you are about\n+      to die.  AP is trivial to write, however, so you could write your\n+      own <code class=\"code\">auto_array_ptr</code> for that situation (in fact, this has\n+      been done many times; check the mailing lists, Usenet, Boost, etc).\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"auto_ptr.using\"></a>Use in Containers</h3></div></div></div><p>\n+  </p><p>All of the <a class=\"ulink\" href=\"../23_containers/howto.html\" target=\"_top\">containers</a>\n+      described in the standard library require their contained types\n+      to have, among other things, a copy constructor like this:\n+  </p><pre class=\"programlisting\">\n+    struct My_Type\n+    {\n+        My_Type (My_Type const&amp;);\n+    };\n+   </pre><p>\n+     Note the const keyword; the object being copied shouldn't change.\n+     The template class <code class=\"code\">auto_ptr</code> (called AP here) does not\n+     meet this requirement.  Creating a new AP by copying an existing\n+     one transfers ownership of the pointed-to object, which means that\n+     the AP being copied must change, which in turn means that the\n+     copy ctors of AP do not take const objects.\n+   </p><p>\n+     The resulting rule is simple: <span class=\"emphasis\"><em>Never ever use a\n+     container of auto_ptr objects</em></span>. The standard says that\n+     \u201c<span class=\"quote\">undefined</span>\u201d behavior is the result, but it is\n+     guaranteed to be messy.\n+   </p><p>\n+     To prevent you from doing this to yourself, the\n+      <a class=\"ulink\" href=\"../19_diagnostics/howto.html#3\" target=\"_top\">concept checks</a> built\n+      in to this implementation will issue an error if you try to\n+      compile code like this:\n+   </p><pre class=\"programlisting\">\n+    #include &lt;vector&gt;\n+    #include &lt;memory&gt;\n+    \n+    void f()\n+    {\n+        std::vector&lt; std::auto_ptr&lt;int&gt; &gt;   vec_ap_int;\n+    }\n+   </pre><p>\n+Should you try this with the checks enabled, you will see an error.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt04ch11.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt04ch11.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"shared_ptr.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a011.\u00a0Memory\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0shared_ptr</td></tr></table></div></body></html>"}, {"sha": "3bdf1937aad88f255b2d4951e8b42c8670b0a5fc", "filename": "libstdc++-v3/doc/html/manual/backwards.html", "status": "added", "additions": 926, "deletions": 0, "changes": 926, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbackwards.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbackwards.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbackwards.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,926 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Backwards Compatibility</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      backwards&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\" /><link rel=\"prev\" href=\"api.html\" title=\"API Evolution and Deprecation History\" /><link rel=\"next\" href=\"appendix_free.html\" title=\"Appendix\u00a0C.\u00a0Free Software Needs Free Documentation\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Backwards Compatibility</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"api.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0Porting and Maintenance</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"appendix_free.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.appendix.porting.backwards\"></a>Backwards Compatibility</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"backwards.first\"></a>First</h3></div></div></div><p>The first generation GNU C++ library was called libg++.  It was a\n+separate GNU project, although reliably paired with GCC. Rumors imply\n+that it had a working relationship with at least two kinds of\n+dinosaur.\n+</p><p>Some background: libg++ was designed and created when there was no\n+ISO standard to provide guidance.  Classes like linked lists are now\n+provided for by <code class=\"classname\">list&lt;T&gt;</code> and do not need to be\n+created by <code class=\"function\">genclass</code>.  (For that matter, templates exist\n+now and are well-supported, whereas genclass (mostly) predates them.)\n+</p><p>There are other classes in libg++ that are not specified in the\n+ISO Standard (e.g., statistical analysis).  While there are a lot of\n+really useful things that are used by a lot of people, the Standards\n+Committee couldn't include everything, and so a lot of those\n+\u201c<span class=\"quote\">obvious</span>\u201d classes didn't get included.\n+</p><p>Known Issues include many of the limitations of its immediate ancestor.</p><p>Portability notes and known implementation limitations are as follows.</p><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id390292\"></a>No <code class=\"code\">ios_base</code></h4></div></div></div><p> At least some older implementations don't have <code class=\"code\">std::ios_base</code>, so you should use <code class=\"code\">std::ios::badbit</code>, <code class=\"code\">std::ios::failbit</code> and <code class=\"code\">std::ios::eofbit</code> and <code class=\"code\">std::ios::goodbit</code>.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id390324\"></a>No <code class=\"code\">cout</code> in <code class=\"code\">ostream.h</code>, no <code class=\"code\">cin</code> in <code class=\"code\">istream.h</code></h4></div></div></div><p>\n+\tIn earlier versions of the standard,\n+\t<code class=\"filename\">fstream.h</code>,\n+\t<code class=\"filename\">ostream.h</code>\n+\tand <code class=\"filename\">istream.h</code>\n+\tused to define\n+\t<code class=\"code\">cout</code>, <code class=\"code\">cin</code> and so on. ISO C++ specifies that one needs to include\n+\t<code class=\"filename\">iostream</code>\n+\texplicitly to get the required definitions.\n+ </p><p> Some include adjustment may be required.</p><p>This project is no longer maintained or supported, and the sources\n+archived. For the desperate,\n+the <a class=\"ulink\" href=\"http://gcc.gnu.org/extensions.html\" target=\"_top\">GCC extensions\n+page</a> describes where to find the last libg++ source. The code is\n+considered replaced and rewritten.\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"backwards.second\"></a>Second</h3></div></div></div><p> \n+  The second generation GNU C++ library was called libstdc++, or\n+  libstdc++-v2. It spans the time between libg++ and pre-ISO C++\n+  standardization and is usually associated with the following GCC\n+  releases: egcs 1.x, gcc 2.95, and gcc 2.96.\n+</p><p> \n+  The STL portions of this library are based on SGI/HP STL release 3.11.\n+</p><p>\n+  This project is no longer maintained or supported, and the sources\n+  archived.  The code is considered replaced and rewritten.\n+</p><p>\n+  Portability notes and known implementation limitations are as follows.\n+</p><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id390424\"></a>Namespace <code class=\"code\">std::</code> not supported</h4></div></div></div><p>\n+    Some care is required to support C++ compiler and or library\n+    implementation that do not have the standard library in\n+    <code class=\"code\">namespace std</code>.\n+  </p><p>\n+    The following sections list some possible solutions to support compilers\n+    that cannot ignore <code class=\"code\">std::</code>-qualified names.\n+  </p><p> \n+    First, see if the compiler has a flag for this. Namespace\n+    back-portability-issues are generally not a problem for g++\n+    compilers that do not have libstdc++ in <code class=\"code\">std::</code>, as the\n+    compilers use <code class=\"code\">-fno-honor-std</code> (ignore\n+    <code class=\"code\">std::</code>, <code class=\"code\">:: = std::</code>) by default. That is,\n+    the responsibility for enabling or disabling <code class=\"code\">std::</code> is\n+    on the user; the maintainer does not have to care about it. This\n+    probably applies to some other compilers as well.\n+  </p><p>\n+    Second, experiment with a variety of pre-processor tricks.\n+  </p><p> \n+    By defining <code class=\"code\">std</code> as a macro, fully-qualified namespace\n+    calls become global. Volia.\n+  </p><pre class=\"programlisting\">\n+#ifdef WICKEDLY_OLD_COMPILER\n+# define std\n+#endif\n+</pre><p>\n+    Thanks to Juergen Heinzl who posted this solution on gnu.gcc.help.\n+  </p><p>\n+    Another pre-processor based approach is to define a macro\n+    <code class=\"code\">NAMESPACE_STD</code>, which is defined to either\n+    \u201c<span class=\"quote\"> </span>\u201d or \u201c<span class=\"quote\">std</span>\u201d based on a compile-type\n+    test. On GNU systems, this can be done with autotools by means of\n+    an autoconf test (see below) for <code class=\"code\">HAVE_NAMESPACE_STD</code>,\n+    then using that to set a value for the <code class=\"code\">NAMESPACE_STD</code>\n+    macro.  At that point, one is able to use\n+    <code class=\"code\">NAMESPACE_STD::string</code>, which will evaluate to\n+    <code class=\"code\">std::string</code> or <code class=\"code\">::string</code> (ie, in the\n+    global namespace on systems that do not put <code class=\"code\">string</code> in\n+    <code class=\"code\">std::</code>).\n+  </p><pre class=\"programlisting\">\n+dnl @synopsis AC_CXX_NAMESPACE_STD\n+dnl\n+dnl If the compiler supports namespace std, define\n+dnl HAVE_NAMESPACE_STD.\n+dnl\n+dnl @category Cxx\n+dnl @author Todd Veldhuizen\n+dnl @author Luc Maisonobe &lt;luc@spaceroots.org&gt;\n+dnl @version 2004-02-04\n+dnl @license AllPermissive\n+AC_DEFUN([AC_CXX_NAMESPACE_STD], [\n+  AC_CACHE_CHECK(if g++ supports namespace std,\n+  ac_cv_cxx_have_std_namespace,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;iostream&gt; \n+                  std::istream&amp; is = std::cin;],,\n+  ac_cv_cxx_have_std_namespace=yes, ac_cv_cxx_have_std_namespace=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_have_std_namespace\" = yes; then\n+    AC_DEFINE(HAVE_NAMESPACE_STD,,[Define if g++ supports namespace std. ])\n+  fi\n+])\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id393816\"></a>Illegal iterator usage</h4></div></div></div><p>\n+  The following illustrate implementation-allowed illegal iterator\n+  use, and then correct use.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+      you cannot do <code class=\"code\">ostream::operator&lt;&lt;(iterator)</code>\n+      to print the address of the iterator =&gt; use\n+      <code class=\"code\">operator&lt;&lt; &amp;*iterator</code> instead\n+    </p></li><li><p>\n+      you cannot clear an iterator's reference (<code class=\"code\">iterator =\n+      0</code>) =&gt; use <code class=\"code\">iterator = iterator_type();</code>\n+    </p></li><li><p>\n+      <code class=\"code\">if (iterator)</code> won't work any more =&gt; use\n+      <code class=\"code\">if (iterator != iterator_type())</code> \n+    </p></li></ul></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id393877\"></a><code class=\"code\">isspace</code> from <code class=\"filename\">cctype</code> is a macro\n+  </h4></div></div></div><p> \n+    Glibc 2.0.x and 2.1.x define <code class=\"filename\">ctype.h</code> functionality as macros\n+    (isspace, isalpha etc.).\n+  </p><p>\n+    This implementations of libstdc++, however, keep these functions\n+    as macros, and so it is not back-portable to use fully qualified\n+    names. For example:\n+  </p><pre class=\"programlisting\"> \n+#include &lt;cctype&gt; \n+int main() { std::isspace('X'); } \n+</pre><p>\n+  Results in something like this:\n+</p><pre class=\"programlisting\"> \n+std:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int) _ISspace ) ; \n+</pre><p> \n+  A solution is to modify a header-file so that the compiler tells\n+  <code class=\"filename\">ctype.h</code> to define functions\n+  instead of macros:\n+</p><pre class=\"programlisting\">\n+// This keeps isalnum, et al from being propagated as macros. \n+#if __linux__\n+# define __NO_CTYPE 1\n+#endif\n+</pre><p>\n+  Then, include <code class=\"filename\">ctype.h</code>\n+</p><p>\n+  Another problem arises if you put a <code class=\"code\">using namespace\n+  std;</code> declaration at the top, and include <code class=\"filename\">ctype.h</code>. This will result in\n+  ambiguities between the definitions in the global namespace\n+  (<code class=\"filename\">ctype.h</code>) and the\n+  definitions in namespace <code class=\"code\">std::</code>\n+  (<code class=\"code\">&lt;cctype&gt;</code>).\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id450846\"></a>No <code class=\"code\">vector::at</code>, <code class=\"code\">deque::at</code>, <code class=\"code\">string::at</code></h4></div></div></div><p>\n+  One solution is to add an autoconf-test for this:\n+</p><pre class=\"programlisting\">\n+AC_MSG_CHECKING(for container::at)\n+AC_TRY_COMPILE(\n+[\n+#include &lt;vector&gt;\n+#include &lt;deque&gt;\n+#include &lt;string&gt;\n+\t\n+using namespace std;\n+],\n+[\n+deque&lt;int&gt; test_deque(3);\n+test_deque.at(2);\n+vector&lt;int&gt; test_vector(2);\n+test_vector.at(1);\n+string test_string(\u201c<span class=\"quote\">test_string</span>\u201d);\n+test_string.at(3);\n+],\n+[AC_MSG_RESULT(yes)\n+AC_DEFINE(HAVE_CONTAINER_AT)],\n+[AC_MSG_RESULT(no)])\n+</pre><p>\n+  If you are using other (non-GNU) compilers it might be a good idea\n+  to check for <code class=\"code\">string::at</code> separately.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id450884\"></a>No <code class=\"code\">std::char_traits&lt;char&gt;::eof</code></h4></div></div></div><p>\n+  Use some kind of autoconf test, plus this:\n+</p><pre class=\"programlisting\">\n+#ifdef HAVE_CHAR_TRAITS\n+#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n+#else\n+#define CPP_EOF EOF\n+#endif\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id450902\"></a>No <code class=\"code\">string::clear</code></h4></div></div></div><p>\n+  There are two functions for deleting the contents of a string:\n+  <code class=\"code\">clear</code> and <code class=\"code\">erase</code> (the latter returns the\n+  string).\n+</p><pre class=\"programlisting\">\n+void \n+clear() { _M_mutate(0, this-&gt;size(), 0); }\n+</pre><pre class=\"programlisting\">\n+basic_string&amp; \n+erase(size_type __pos = 0, size_type __n = npos)\n+{ \n+  return this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n+                          _M_data(), _M_data()); \n+}\n+</pre><p>\n+  Unfortunately, ut <code class=\"code\">clear</code> is not implemented in this\n+  version, so you should use <code class=\"code\">erase</code> (which is probably\n+  faster than <code class=\"code\">operator=(charT*)</code>).\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id450947\"></a>\n+  Removal of <code class=\"code\">ostream::form</code> and <code class=\"code\">istream::scan</code>\n+  extensions\n+</h4></div></div></div><p> \n+  These are no longer supported. Please use stringstreams instead.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id450966\"></a>No <code class=\"code\">basic_stringbuf</code>, <code class=\"code\">basic_stringstream</code></h4></div></div></div><p>\n+  Although the ISO standard <code class=\"code\">i/ostringstream</code>-classes are\n+  provided, (<code class=\"filename\">sstream</code>), for\n+  compatibility with older implementations the pre-ISO\n+  <code class=\"code\">i/ostrstream</code> (<code class=\"filename\">strstream</code>) interface is also provided,\n+  with these caveats:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p> \n+      <code class=\"code\">strstream</code> is considered to be deprecated\n+    </p></li><li><p> \n+      <code class=\"code\">strstream</code> is limited to <code class=\"code\">char</code>\n+    </p></li><li><p> \n+      with <code class=\"code\">ostringstream</code> you don't have to take care of\n+      terminating the string or freeing its memory \n+    </p></li><li><p> \n+      <code class=\"code\">istringstream</code> can be re-filled (clear();\n+      str(input);) \n+    </p></li></ul></div><p>\n+  You can then use output-stringstreams like this:\n+</p><pre class=\"programlisting\">\n+#ifdef HAVE_SSTREAM\n+# include &lt;sstream&gt;\n+#else\n+# include &lt;strstream&gt;\n+#endif\n+\n+#ifdef HAVE_SSTREAM\n+  std::ostringstream oss;\n+#else\n+  std::ostrstream oss;\n+#endif\n+\n+oss &lt;&lt; \u201c<span class=\"quote\">Name=</span>\u201d &lt;&lt; m_name &lt;&lt; \u201c<span class=\"quote\">, number=</span>\u201d &lt;&lt; m_number &lt;&lt; std::endl;\n+...\n+#ifndef HAVE_SSTREAM\n+  oss &lt;&lt; std::ends; // terminate the char*-string\n+#endif\n+\n+// str() returns char* for ostrstream and a string for ostringstream\n+// this also causes ostrstream to think that the buffer's memory\n+// is yours\n+m_label.set_text(oss.str());\n+#ifndef HAVE_SSTREAM\n+  // let the ostrstream take care of freeing the memory\n+  oss.freeze(false);\n+#endif\n+</pre><p>\n+      Input-stringstreams can be used similarly:\n+</p><pre class=\"programlisting\">\n+std::string input;\n+...\n+#ifdef HAVE_SSTREAM\n+std::istringstream iss(input);\n+#else\n+std::istrstream iss(input.c_str());\n+#endif\n+\n+int i;\n+iss &gt;&gt; i; \n+</pre><p> One (the only?) restriction is that an istrstream cannot be re-filled:\n+</p><pre class=\"programlisting\">\n+std::istringstream iss(numerator);\n+iss &gt;&gt; m_num;\n+// this is not possible with istrstream\n+iss.clear();\n+iss.str(denominator);\n+iss &gt;&gt; m_den;\n+</pre><p>\n+If you don't care about speed, you can put these conversions in\n+      a template-function:\n+</p><pre class=\"programlisting\">\n+template &lt;class X&gt;\n+void fromString(const string&amp; input, X&amp; any)\n+{\n+#ifdef HAVE_SSTREAM\n+std::istringstream iss(input);\n+#else\n+std::istrstream iss(input.c_str());\n+#endif\n+X temp;\n+iss &gt;&gt; temp;\n+if (iss.fail())\n+throw runtime_error(..)\n+any = temp;\n+}\n+</pre><p> \n+  Another example of using stringstreams is in <a class=\"link\" href=\"bk01pt05ch13s05.html\" title=\"Shrink to Fit\">this howto</a>.\n+</p><p> There is additional information in the libstdc++-v2 info files, in\n+particular \u201c<span class=\"quote\">info iostream</span>\u201d.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id451118\"></a>Little or no wide character support</h4></div></div></div><p>\n+    Classes <code class=\"classname\">wstring</code> and\n+    <code class=\"classname\">char_traits&lt;wchar_t&gt;</code> are\n+    not supported.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id451137\"></a>No templatized iostreams</h4></div></div></div><p>\n+    Classes <code class=\"classname\">wfilebuf</code> and\n+    <code class=\"classname\">wstringstream</code> are not supported.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id451156\"></a>Thread safety issues</h4></div></div></div><p>\n+    Earlier GCC releases had a somewhat different approach to\n+    threading configuration and proper compilation.  Before GCC 3.0,\n+    configuration of the threading model was dictated by compiler\n+    command-line options and macros (both of which were somewhat\n+    thread-implementation and port-specific).  There were no\n+    guarantees related to being able to link code compiled with one\n+    set of options and macro setting with another set.\n+  </p><p>\n+    For GCC 3.0, configuration of the threading model used with\n+    libraries and user-code is performed when GCC is configured and\n+    built using the --enable-threads and --disable-threads options.\n+    The ABI is stable for symbol name-mangling and limited functional\n+    compatibility exists between code compiled under different\n+    threading models.\n+  </p><p>\n+     The libstdc++ library has been designed so that it can be used in\n+     multithreaded applications (with libstdc++-v2 this was only true\n+     of the STL parts.)  The first problem is finding a\n+     <span class=\"emphasis\"><em>fast</em></span> method of implementation portable to\n+     all platforms.  Due to historical reasons, some of the library is\n+     written against per-CPU-architecture spinlocks and other parts\n+     against the gthr.h abstraction layer which is provided by gcc.  A\n+     minor problem that pops up every so often is different\n+     interpretations of what \"thread-safe\" means for a\n+     library (not a general program).  We currently use the <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/thread_safety.html\" target=\"_top\">same\n+     definition that SGI</a> uses for their STL subset.  However,\n+     the exception for read-only containers only applies to the STL\n+     components. This definition is widely-used and something similar\n+     will be used in the next version of the C++ standard library.\n+   </p><p>\n+     Here is a small link farm to threads (no pun) in the mail\n+     archives that discuss the threading problem.  Each link is to the\n+     first relevant message in the thread; from there you can use\n+     \"Thread Next\" to move down the thread.  This farm is in\n+     latest-to-oldest order.\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\t    Our threading expert Loren gives a breakdown of <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2001-10/msg00024.html\" target=\"_top\">the\n+\t    six situations involving threads</a> for the 3.0\n+\t    release series.\n+\t  </p></li><li><p>\n+\t    <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00384.html\" target=\"_top\">\n+        This message</a> inspired a recent updating of issues with\n+        threading and the SGI STL library.  It also contains some\n+        example POSIX-multithreaded STL code.\n+\t  </p></li></ul></div><p> \n+     (A large selection of links to older messages has been removed;\n+     many of the messages from 1999 were lost in a disk crash, and the\n+     few people with access to the backup tapes have been too swamped\n+     with work to restore them.  Many of the points have been\n+     superseded anyhow.)\n+   </p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"backwards.third\"></a>Third</h3></div></div></div><p> The third generation GNU C++ library is called libstdc++, or\n+libstdc++-v3.\n+</p><p>The subset commonly known as the Standard Template Library\n+         (chapters 23 through 25, mostly) is adapted from the final release\n+         of the SGI STL (version 3.3), with extensive changes.\n+      </p><p>A more formal description of the V3 goals can be found in the\n+         official <a class=\"ulink\" href=\"../17_intro/DESIGN\" target=\"_top\">design document</a>.\n+      </p><p>Portability notes and known implementation limitations are as follows.</p><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516132\"></a>Pre-ISO headers moved to backwards or removed</h4></div></div></div><p> The pre-ISO C++ headers\n+      (<code class=\"code\">iostream.h</code>, <code class=\"code\">defalloc.h</code> etc.) are\n+      available, unlike previous libstdc++ versions, but inclusion\n+      generates a warning that you are using deprecated headers.\n+</p><p>This compatibility layer is constructed by including the\n+    standard C++ headers, and injecting any items in\n+    <code class=\"code\">std::</code> into the global namespace.\n+   </p><p>For those of you new to ISO C++ (welcome, time travelers!), no,\n+      that isn't a typo. Yes, the headers really have new names.\n+      Marshall Cline's C++ FAQ Lite has a good explanation in <a class=\"ulink\" href=\"http://www.parashift.com/c++-faq-lite/coding-standards.html#faq-27.4\" target=\"_top\">item\n+      [27.4]</a>.\n+   </p><p> Some include adjustment may be required. What follows is an\n+autoconf test that defines <code class=\"code\">PRE_STDCXX_HEADERS</code> when they\n+exist.</p><pre class=\"programlisting\">\n+# AC_HEADER_PRE_STDCXX\n+AC_DEFUN([AC_HEADER_PRE_STDCXX], [\n+  AC_CACHE_CHECK(for pre-ISO C++ include files,\n+  ac_cv_cxx_pre_stdcxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Wno-deprecated\"\t\n+\n+  # Omit defalloc.h, as compilation with newer compilers is problematic.\n+  AC_TRY_COMPILE([\n+  #include &lt;new.h&gt;\n+  #include &lt;iterator.h&gt;\n+  #include &lt;alloc.h&gt;\n+  #include &lt;set.h&gt;\n+  #include &lt;hashtable.h&gt;\n+  #include &lt;hash_set.h&gt;\n+  #include &lt;fstream.h&gt;\n+  #include &lt;tempbuf.h&gt;\n+  #include &lt;istream.h&gt;\n+  #include &lt;bvector.h&gt;\n+  #include &lt;stack.h&gt;\n+  #include &lt;rope.h&gt;\n+  #include &lt;complex.h&gt;\n+  #include &lt;ostream.h&gt;\n+  #include &lt;heap.h&gt;\n+  #include &lt;iostream.h&gt;\n+  #include &lt;function.h&gt;\n+  #include &lt;multimap.h&gt;\n+  #include &lt;pair.h&gt;\n+  #include &lt;stream.h&gt;\n+  #include &lt;iomanip.h&gt;\n+  #include &lt;slist.h&gt;\n+  #include &lt;tree.h&gt;\n+  #include &lt;vector.h&gt;\n+  #include &lt;deque.h&gt;\n+  #include &lt;multiset.h&gt;\n+  #include &lt;list.h&gt;\n+  #include &lt;map.h&gt;\n+  #include &lt;algobase.h&gt;\n+  #include &lt;hash_map.h&gt;\n+  #include &lt;algo.h&gt;\n+  #include &lt;queue.h&gt;\n+  #include &lt;streambuf.h&gt;\n+  ],,\n+  ac_cv_cxx_pre_stdcxx=yes, ac_cv_cxx_pre_stdcxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_pre_stdcxx\" = yes; then\n+    AC_DEFINE(PRE_STDCXX_HEADERS,,[Define if pre-ISO C++ header files are present. ])\n+  fi\n+])\n+</pre><p>Porting between pre-ISO headers and ISO headers is simple: headers\n+like <code class=\"filename\">vector.h</code> can be replaced with <code class=\"filename\">vector</code> and a using\n+directive <code class=\"code\">using namespace std;</code> can be put at the global\n+scope. This should be enough to get this code compiling, assuming the\n+other usage is correct.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516213\"></a>Extension headers hash_map, hash_set moved to ext or backwards</h4></div></div></div><p>At this time most of the features of the SGI STL extension have been\n+         replaced by standardized libraries.\n+         In particular, the unordered_map and unordered_set containers of TR1\n+         are suitable replacement for the non-standard hash_map and hash_set\n+         containers in the SGI STL. \n+      </p><p> Header files <code class=\"filename\">hash_map</code> and <code class=\"filename\">hash_set</code> moved\n+to <code class=\"filename\">ext/hash_map</code> and  <code class=\"filename\">ext/hash_set</code>,\n+respectively. At the same time, all types in these files are enclosed\n+in <code class=\"code\">namespace __gnu_cxx</code>. Later versions move deprecate\n+these files, and suggest using TR1's  <code class=\"filename\">unordered_map</code>\n+and  <code class=\"filename\">unordered_set</code> instead.\n+</p><p>The extensions are no longer in the global or <code class=\"code\">std</code>\n+         namespaces, instead they are declared in the <code class=\"code\">__gnu_cxx</code>\n+         namespace. For maximum portability, consider defining a namespace\n+         alias to use to talk about extensions, e.g.:\n+      </p><pre class=\"programlisting\">\n+      #ifdef __GNUC__\n+      #if __GNUC__ &lt; 3\n+        #include &lt;hash_map.h&gt;\n+        namespace extension { using ::hash_map; }; // inherit globals\n+      #else\n+        #include &lt;backward/hash_map&gt;\n+        #if __GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ == 0\n+          namespace extension = std;               // GCC 3.0\n+        #else\n+          namespace extension = ::__gnu_cxx;       // GCC 3.1 and later\n+        #endif\n+      #endif\n+      #else      // ...  there are other compilers, right?\n+        namespace extension = std;\n+      #endif\n+\n+      extension::hash_map&lt;int,int&gt; my_map; \n+      </pre><p>This is a bit cleaner than defining typedefs for all the\n+         instantiations you might need.\n+      </p><p>The following autoconf tests check for working HP/SGI hash containers.\n+</p><pre class=\"programlisting\">\n+# AC_HEADER_EXT_HASH_MAP\n+AC_DEFUN([AC_HEADER_EXT_HASH_MAP], [\n+  AC_CACHE_CHECK(for ext/hash_map,\n+  ac_cv_cxx_ext_hash_map,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n+  AC_TRY_COMPILE([#include &lt;ext/hash_map&gt;], [using __gnu_cxx::hash_map;],\n+  ac_cv_cxx_ext_hash_map=yes, ac_cv_cxx_ext_hash_map=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_ext_hash_map\" = yes; then\n+    AC_DEFINE(HAVE_EXT_HASH_MAP,,[Define if ext/hash_map is present. ])\n+  fi\n+])\n+</pre><pre class=\"programlisting\">\n+# AC_HEADER_EXT_HASH_SET\n+AC_DEFUN([AC_HEADER_EXT_HASH_SET], [\n+  AC_CACHE_CHECK(for ext/hash_set,\n+  ac_cv_cxx_ext_hash_set,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -Werror\"\t\n+  AC_TRY_COMPILE([#include &lt;ext/hash_set&gt;], [using __gnu_cxx::hash_set;],\n+  ac_cv_cxx_ext_hash_set=yes, ac_cv_cxx_ext_hash_set=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_ext_hash_set\" = yes; then\n+    AC_DEFINE(HAVE_EXT_HASH_SET,,[Define if ext/hash_set is present. ])\n+  fi\n+])\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516316\"></a>No <code class=\"code\">ios::nocreate/ios::noreplace</code>.\n+</h4></div></div></div><p> The existence of <code class=\"code\">ios::nocreate</code> being used for\n+input-streams has been confirmed, most probably because the author\n+thought it would be more correct to specify nocreate explicitly.  So\n+it can be left out for input-streams.\n+</p><p>For output streams, \u201c<span class=\"quote\">nocreate</span>\u201d is probably the default,\n+unless you specify <code class=\"code\">std::ios::trunc</code> ? To be safe, you can\n+open the file for reading, check if it has been opened, and then\n+decide whether you want to create/replace or not. To my knowledge,\n+even older implementations support <code class=\"code\">app</code>, <code class=\"code\">ate</code>\n+and <code class=\"code\">trunc</code> (except for <code class=\"code\">app</code> ?).\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516364\"></a>\n+No <code class=\"code\">stream::attach(int fd)</code>\n+</h4></div></div></div><p>\n+      Phil Edwards writes: It was considered and rejected for the ISO\n+      standard.  Not all environments use file descriptors.  Of those\n+      that do, not all of them use integers to represent them.\n+    </p><p>\n+      For a portable solution (among systems which use\n+      filedescriptors), you need to implement a subclass of\n+      <code class=\"code\">std::streambuf</code> (or\n+      <code class=\"code\">std::basic_streambuf&lt;..&gt;</code>) which opens a file\n+      given a descriptor, and then pass an instance of this to the\n+      stream-constructor. \n+    </p><p>\n+      An extension is available that implements this.\n+      <code class=\"filename\">ext/stdio_filebuf.h</code> contains a derived class called\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\" target=\"_top\"><code class=\"code\">__gnu_cxx::stdio_filebuf</code></a>.\n+      This class can be constructed from a C <code class=\"code\">FILE*</code> or a file\n+      descriptor, and provides the <code class=\"code\">fd()</code> function.\n+    </p><p>\n+ For another example of this, refer to\n+      <a class=\"ulink\" href=\"http://www.josuttis.com/cppcode/fdstream.html\" target=\"_top\">fdstream example</a> \n+      by Nicolai Josuttis.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516428\"></a>\n+Support for C++98 dialect.\n+</h4></div></div></div><p>Check for complete library coverage of the C++1998/2003 standard.\n+</p><pre class=\"programlisting\">\n+# AC_HEADER_STDCXX_98\n+AC_DEFUN([AC_HEADER_STDCXX_98], [\n+  AC_CACHE_CHECK(for ISO C++ 98 include files,\n+  ac_cv_cxx_stdcxx_98,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+    #include &lt;cassert&gt;\n+    #include &lt;cctype&gt;\n+    #include &lt;cerrno&gt;\n+    #include &lt;cfloat&gt;\n+    #include &lt;ciso646&gt;\n+    #include &lt;climits&gt;\n+    #include &lt;clocale&gt;\n+    #include &lt;cmath&gt;\n+    #include &lt;csetjmp&gt;\n+    #include &lt;csignal&gt;\n+    #include &lt;cstdarg&gt;\n+    #include &lt;cstddef&gt;\n+    #include &lt;cstdio&gt;\n+    #include &lt;cstdlib&gt;\n+    #include &lt;cstring&gt;\n+    #include &lt;ctime&gt;\n+\n+    #include &lt;algorithm&gt;\n+    #include &lt;bitset&gt;\n+    #include &lt;complex&gt;\n+    #include &lt;deque&gt;\n+    #include &lt;exception&gt;\n+    #include &lt;fstream&gt;\n+    #include &lt;functional&gt;\n+    #include &lt;iomanip&gt;\n+    #include &lt;ios&gt;\n+    #include &lt;iosfwd&gt;\n+    #include &lt;iostream&gt;\n+    #include &lt;istream&gt;\n+    #include &lt;iterator&gt;\n+    #include &lt;limits&gt;\n+    #include &lt;list&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;map&gt;\n+    #include &lt;memory&gt;\n+    #include &lt;new&gt;\n+    #include &lt;numeric&gt;\n+    #include &lt;ostream&gt;\n+    #include &lt;queue&gt;\n+    #include &lt;set&gt;\n+    #include &lt;sstream&gt;\n+    #include &lt;stack&gt;\n+    #include &lt;stdexcept&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;string&gt;\n+    #include &lt;typeinfo&gt;\n+    #include &lt;utility&gt;\n+    #include &lt;valarray&gt;\n+    #include &lt;vector&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_98=yes, ac_cv_cxx_stdcxx_98=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_98\" = yes; then\n+    AC_DEFINE(STDCXX_98_HEADERS,,[Define if ISO C++ 1998 header files are present. ])\n+  fi\n+])\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516455\"></a>\n+Support for C++TR1 dialect.\n+</h4></div></div></div><p>Check for library coverage of the TR1 standard.\n+</p><pre class=\"programlisting\">\n+# AC_HEADER_STDCXX_TR1\n+AC_DEFUN([AC_HEADER_STDCXX_TR1], [\n+  AC_CACHE_CHECK(for ISO C++ TR1 include files,\n+  ac_cv_cxx_stdcxx_tr1,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  #include &lt;tr1/array&gt;\n+  #include &lt;tr1/ccomplex&gt;\n+  #include &lt;tr1/cctype&gt;\n+  #include &lt;tr1/cfenv&gt;\n+  #include &lt;tr1/cfloat&gt;\n+  #include &lt;tr1/cinttypes&gt;\n+  #include &lt;tr1/climits&gt;\n+  #include &lt;tr1/cmath&gt;\n+  #include &lt;tr1/complex&gt;\n+  #include &lt;tr1/cstdarg&gt;\n+  #include &lt;tr1/cstdbool&gt;\n+  #include &lt;tr1/cstdint&gt;\n+  #include &lt;tr1/cstdio&gt;\n+  #include &lt;tr1/cstdlib&gt;\n+  #include &lt;tr1/ctgmath&gt;\n+  #include &lt;tr1/ctime&gt;\n+  #include &lt;tr1/cwchar&gt;\n+  #include &lt;tr1/cwctype&gt;\n+  #include &lt;tr1/functional&gt;\n+  #include &lt;tr1/memory&gt;\n+  #include &lt;tr1/random&gt;\n+  #include &lt;tr1/regex&gt;\n+  #include &lt;tr1/tuple&gt;\n+  #include &lt;tr1/type_traits&gt;\n+  #include &lt;tr1/unordered_set&gt;\n+  #include &lt;tr1/unordered_map&gt;\n+  #include &lt;tr1/utility&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_tr1=yes, ac_cv_cxx_stdcxx_tr1=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_tr1\" = yes; then\n+    AC_DEFINE(STDCXX_TR1_HEADERS,,[Define if ISO C++ TR1 header files are present. ])\n+  fi\n+])\n+</pre><p>An alternative is to check just for specific TR1 includes, such as &lt;unordered_map&gt; and &lt;unordered_set&gt;.\n+</p><pre class=\"programlisting\">\n+# AC_HEADER_TR1_UNORDERED_MAP\n+AC_DEFUN([AC_HEADER_TR1_UNORDERED_MAP], [\n+  AC_CACHE_CHECK(for tr1/unordered_map,\n+  ac_cv_cxx_tr1_unordered_map,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;tr1/unordered_map&gt;], [using std::tr1::unordered_map;],\n+  ac_cv_cxx_tr1_unordered_map=yes, ac_cv_cxx_tr1_unordered_map=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_tr1_unordered_map\" = yes; then\n+    AC_DEFINE(HAVE_TR1_UNORDERED_MAP,,[Define if tr1/unordered_map is present. ])\n+  fi\n+])\n+</pre><pre class=\"programlisting\">\n+# AC_HEADER_TR1_UNORDERED_SET\n+AC_DEFUN([AC_HEADER_TR1_UNORDERED_SET], [\n+  AC_CACHE_CHECK(for tr1/unordered_set,\n+  ac_cv_cxx_tr1_unordered_set,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([#include &lt;tr1/unordered_set&gt;], [using std::tr1::unordered_set;],\n+  ac_cv_cxx_tr1_unordered_set=yes, ac_cv_cxx_tr1_unordered_set=no)\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_tr1_unordered_set\" = yes; then\n+    AC_DEFINE(HAVE_TR1_UNORDERED_SET,,[Define if tr1/unordered_set is present. ])\n+  fi\n+])\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id516499\"></a>\n+Support for C++0x dialect.\n+</h4></div></div></div><p>Check for baseline language coverage in the compiler for the C++0xstandard.\n+</p><pre class=\"programlisting\">\n+# AC_COMPILE_STDCXX_OX\n+AC_DEFUN([AC_COMPILE_STDCXX_0X], [\n+  AC_CACHE_CHECK(if g++ supports C++0x features without additional flags,\n+  ac_cv_cxx_compile_cxx0x_native,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&amp;&amp; cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_native=yes, ac_cv_cxx_compile_cxx0x_native=no)\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=c++0x,\n+  ac_cv_cxx_compile_cxx0x_cxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\t\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&amp;&amp; cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_cxx=yes, ac_cv_cxx_compile_cxx0x_cxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=gnu++0x,\n+  ac_cv_cxx_compile_cxx0x_gxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([\n+  template &lt;typename T&gt;\n+    struct check \n+    {\n+      static_assert(sizeof(int) &lt;= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check&lt;check&lt;bool&gt;&gt; right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check&lt;int&gt; check_type;\n+    check_type c;\n+    check_type&amp;&amp; cr = c;],,\n+  ac_cv_cxx_compile_cxx0x_gxx=yes, ac_cv_cxx_compile_cxx0x_gxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  if test \"$ac_cv_cxx_compile_cxx0x_native\" = yes || \n+     test \"$ac_cv_cxx_compile_cxx0x_cxx\" = yes || \n+     test \"$ac_cv_cxx_compile_cxx0x_gxx\" = yes; then\n+    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n+  fi\n+])\n+</pre><p>Check for library coverage of the C++0xstandard.\n+</p><pre class=\"programlisting\">\n+# AC_HEADER_STDCXX_0X\n+AC_DEFUN([AC_HEADER_STDCXX_0X], [\n+  AC_CACHE_CHECK(for ISO C++ 0x include files,\n+  ac_cv_cxx_stdcxx_0x,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+\n+  AC_TRY_COMPILE([\n+    #include &lt;cassert&gt;\n+    #include &lt;ccomplex&gt;\n+    #include &lt;cctype&gt;\n+    #include &lt;cerrno&gt;\n+    #include &lt;cfenv&gt;\n+    #include &lt;cfloat&gt;\n+    #include &lt;cinttypes&gt;\n+    #include &lt;ciso646&gt;\n+    #include &lt;climits&gt;\n+    #include &lt;clocale&gt;\n+    #include &lt;cmath&gt;\n+    #include &lt;csetjmp&gt;\n+    #include &lt;csignal&gt;\n+    #include &lt;cstdarg&gt;\n+    #include &lt;cstdbool&gt;\n+    #include &lt;cstddef&gt;\n+    #include &lt;cstdint&gt;\n+    #include &lt;cstdio&gt;\n+    #include &lt;cstdlib&gt;\n+    #include &lt;cstring&gt;\n+    #include &lt;ctgmath&gt;\n+    #include &lt;ctime&gt;\n+    #include &lt;cwchar&gt;\n+    #include &lt;cwctype&gt;\n+\n+    #include &lt;algorithm&gt;\n+    #include &lt;array&gt;\n+    #include &lt;bitset&gt;\n+    #include &lt;complex&gt;\n+    #include &lt;deque&gt;\n+    #include &lt;exception&gt;\n+    #include &lt;fstream&gt;\n+    #include &lt;functional&gt;\n+    #include &lt;iomanip&gt;\n+    #include &lt;ios&gt;\n+    #include &lt;iosfwd&gt;\n+    #include &lt;iostream&gt;\n+    #include &lt;istream&gt;\n+    #include &lt;iterator&gt;\n+    #include &lt;limits&gt;\n+    #include &lt;list&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;map&gt;\n+    #include &lt;memory&gt;\n+    #include &lt;new&gt;\n+    #include &lt;numeric&gt;\n+    #include &lt;ostream&gt;\n+    #include &lt;queue&gt;\n+    #include &lt;random&gt;\n+    #include &lt;regex&gt;\n+    #include &lt;set&gt;\n+    #include &lt;sstream&gt;\n+    #include &lt;stack&gt;\n+    #include &lt;stdexcept&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;string&gt;\n+    #include &lt;tuple&gt;\n+    #include &lt;typeinfo&gt;\n+    #include &lt;type_traits&gt;\n+    #include &lt;unordered_map&gt;\n+    #include &lt;unordered_set&gt;\n+    #include &lt;utility&gt;\n+    #include &lt;valarray&gt;\n+    #include &lt;vector&gt;\n+  ],,\n+  ac_cv_cxx_stdcxx_0x=yes, ac_cv_cxx_stdcxx_0x=no)\n+  AC_LANG_RESTORE\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ])\n+  if test \"$ac_cv_cxx_stdcxx_0x\" = yes; then\n+    AC_DEFINE(STDCXX_0X_HEADERS,,[Define if ISO C++ 0x header files are present. ])\n+  fi\n+])\n+</pre><p>As is the case for TR1 support, these autoconf macros can be made for a finer-grained, per-header-file check. For &lt;unordered_map&gt;\n+</p><pre class=\"programlisting\">\n+# AC_HEADER_UNORDERED_MAP\n+AC_DEFUN([AC_HEADER_UNORDERED_MAP], [\n+  AC_CACHE_CHECK(for unordered_map,\n+  ac_cv_cxx_unordered_map,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([#include &lt;unordered_map&gt;], [using std::unordered_map;],\n+  ac_cv_cxx_unordered_map=yes, ac_cv_cxx_unordered_map=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_unordered_map\" = yes; then\n+    AC_DEFINE(HAVE_UNORDERED_MAP,,[Define if unordered_map is present. ])\n+  fi\n+])\n+</pre><pre class=\"programlisting\">\n+# AC_HEADER_UNORDERED_SET\n+AC_DEFUN([AC_HEADER_UNORDERED_SET], [\n+  AC_CACHE_CHECK(for unordered_set,\n+  ac_cv_cxx_unordered_set,\n+  [AC_REQUIRE([AC_COMPILE_STDCXX_0X])\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\t\n+  AC_TRY_COMPILE([#include &lt;unordered_set&gt;], [using std::unordered_set;],\n+  ac_cv_cxx_unordered_set=yes, ac_cv_cxx_unordered_set=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  if test \"$ac_cv_cxx_unordered_set\" = yes; then\n+    AC_DEFINE(HAVE_UNORDERED_SET,,[Define if unordered_set is present. ])\n+  fi\n+])\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id437068\"></a>\n+  Container::iterator_type is not necessarily Container::value_type*\n+</h4></div></div></div><p>\n+  This is a change in behavior from the previous version. Now, most\n+  <span class=\"type\">iterator_type</span> typedefs in container classes are POD\n+  objects, not <span class=\"type\">value_type</span> pointers.\n+</p></div></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"backwards.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id437100\"></a><p>[<abbr class=\"abbrev\">\n+      kegel41\n+    </abbr>] <span class=\"title\"><i>\n+      Migrating to GCC 4.1\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Dan</span> <span class=\"surname\">Kegel</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.kegel.com/gcc/gcc4.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id437132\"></a><p>[<abbr class=\"abbrev\">\n+      kegel41\n+    </abbr>] <span class=\"title\"><i>\n+      Building the Whole Debian Archive with GCC 4.1: A Summary\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Martin</span> <span class=\"surname\">Michlmayr</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://lists.debian.org/debian-gcc/2006/03/msg00405.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id437165\"></a><p>[<abbr class=\"abbrev\">\n+      lbl32\n+    </abbr>] <span class=\"title\"><i>\n+      Migration guide for GCC-3.2\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://annwm.lbl.gov/~leggett/Atlas/gcc-3.2.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"api.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"appendix_free.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">API Evolution and Deprecation History\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Appendix\u00a0C.\u00a0Free Software Needs Free Documentation</td></tr></table></div></body></html>"}, {"sha": "88b44157bd7f4a2bcbe73eab3ec0c2d645a9ddd6", "filename": "libstdc++-v3/doc/html/manual/bitmap_allocator.html", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbitmap_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbitmap_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbitmap_allocator.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,340 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>bitmap_allocator</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      allocator&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt12ch32.html\" title=\"Chapter\u00a032.\u00a0Allocators\" /><link rel=\"prev\" href=\"bk01pt12ch32.html\" title=\"Chapter\u00a032.\u00a0Allocators\" /><link rel=\"next\" href=\"bk01pt12ch33.html\" title=\"Chapter\u00a033.\u00a0Containers\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">bitmap_allocator</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch32.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a032.\u00a0Allocators</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch33.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.allocator.bitmap\"></a>bitmap_allocator</h2></div></div></div><p>\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.bitmap.design\"></a>Design</h3></div></div></div><p>\n+    As this name suggests, this allocator uses a bit-map to keep track\n+    of the used and unused memory locations for it's book-keeping\n+    purposes.\n+  </p><p>\n+    This allocator will make use of 1 single bit to keep track of\n+    whether it has been allocated or not. A bit 1 indicates free,\n+    while 0 indicates allocated. This has been done so that you can\n+    easily check a collection of bits for a free block. This kind of\n+    Bitmapped strategy works best for single object allocations, and\n+    with the STL type parameterized allocators, we do not need to\n+    choose any size for the block which will be represented by a\n+    single bit. This will be the size of the parameter around which\n+    the allocator has been parameterized. Thus, close to optimal\n+    performance will result. Hence, this should be used for node based\n+    containers which call the allocate function with an argument of 1.\n+  </p><p>\n+    The bitmapped allocator's internal pool is exponentially growing.\n+    Meaning that internally, the blocks acquired from the Free List\n+    Store will double every time the bitmapped allocator runs out of\n+    memory.\n+  </p><p>\n+    The macro <code class=\"literal\">__GTHREADS</code> decides whether to use\n+    Mutex Protection around every allocation/deallocation. The state\n+    of the macro is picked up automatically from the gthr abstraction\n+    layer.\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.bitmap.impl\"></a>Implementation</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.free_list_store\"></a>Free List Store</h4></div></div></div><p>\n+    The Free List Store (referred to as FLS for the remaining part of this\n+    document) is the Global memory pool that is shared by all instances of\n+    the bitmapped allocator instantiated for any type. This maintains a\n+    sorted order of all free memory blocks given back to it by the\n+    bitmapped allocator, and is also responsible for giving memory to the\n+    bitmapped allocator when it asks for more.\n+  </p><p>\n+    Internally, there is a Free List threshold which indicates the\n+    Maximum number of free lists that the FLS can hold internally\n+    (cache).  Currently, this value is set at 64. So, if there are\n+    more than 64 free lists coming in, then some of them will be given\n+    back to the OS using operator delete so that at any given time the\n+    Free List's size does not exceed 64 entries. This is done because\n+    a Binary Search is used to locate an entry in a free list when a\n+    request for memory comes along.  Thus, the run-time complexity of\n+    the search would go up given an increasing size, for 64 entries\n+    however, lg(64) == 6 comparisons are enough to locate the correct\n+    free list if it exists.\n+  </p><p>\n+    Suppose the free list size has reached it's threshold, then the\n+    largest block from among those in the list and the new block will\n+    be selected and given back to the OS. This is done because it\n+    reduces external fragmentation, and allows the OS to use the\n+    larger blocks later in an orderly fashion, possibly merging them\n+    later. Also, on some systems, large blocks are obtained via calls\n+    to mmap, so giving them back to free system resources becomes most\n+    important.\n+  </p><p>\n+    The function _S_should_i_give decides the policy that determines\n+    whether the current block of memory should be given to the\n+    allocator for the request that it has made. That's because we may\n+    not always have exact fits for the memory size that the allocator\n+    requests. We do this mainly to prevent external fragmentation at\n+    the cost of a little internal fragmentation. Now, the value of\n+    this internal fragmentation has to be decided by this function. I\n+    can see 3 possibilities right now. Please add more as and when you\n+    find better strategies.\n+  </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>Equal size check. Return true only when the 2 blocks are of equal\n+size.</p></li><li><p>Difference Threshold: Return true only when the _block_size is\n+greater than or equal to the _required_size, and if the _BS is &gt; _RS\n+by a difference of less than some THRESHOLD value, then return true,\n+else return false. </p></li><li><p>Percentage Threshold. Return true only when the _block_size is\n+greater than or equal to the _required_size, and if the _BS is &gt; _RS\n+by a percentage of less than some THRESHOLD value, then return true,\n+else return false.</p></li></ol></div><p>\n+    Currently, (3) is being used with a value of 36% Maximum wastage per\n+    Super Block.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.super_block\"></a>Super Block</h4></div></div></div><p>\n+    A super block is the block of memory acquired from the FLS from\n+    which the bitmap allocator carves out memory for single objects\n+    and satisfies the user's requests. These super blocks come in\n+    sizes that are powers of 2 and multiples of 32\n+    (_Bits_Per_Block). Yes both at the same time!  That's because the\n+    next super block acquired will be 2 times the previous one, and\n+    also all super blocks have to be multiples of the _Bits_Per_Block\n+    value.\n+  </p><p>\n+    How does it interact with the free list store?\n+  </p><p>\n+    The super block is contained in the FLS, and the FLS is responsible for\n+    getting / returning Super Bocks to and from the OS using operator new\n+    as defined by the C++ standard.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.super_block_data\"></a>Super Block Data Layout</h4></div></div></div><p>\n+    Each Super Block will be of some size that is a multiple of the\n+    number of Bits Per Block. Typically, this value is chosen as\n+    Bits_Per_Byte x sizeof(size_t). On an x86 system, this gives the\n+    figure 8 x 4 = 32. Thus, each Super Block will be of size 32\n+    x Some_Value. This Some_Value is sizeof(value_type). For now, let\n+    it be called 'K'. Thus, finally, Super Block size is 32 x K bytes.\n+  </p><p>\n+    This value of 32 has been chosen because each size_t has 32-bits\n+    and Maximum use of these can be made with such a figure.\n+  </p><p>\n+    Consider a block of size 64 ints. In memory, it would look like this:\n+    (assume a 32-bit system where, size_t is a 32-bit entity).\n+  </p><div class=\"table\"><a id=\"id510462\"></a><p class=\"title\"><b>Table\u00a032.1.\u00a0Bitmap Allocator Memory Map</b></p><div class=\"table-contents\"><table summary=\"Bitmap Allocator Memory Map\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\">268</td><td align=\"left\">0</td><td align=\"left\">4294967295</td><td align=\"left\">4294967295</td><td align=\"left\">Data -&gt; Space for 64 ints</td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n+    The first Column(268) represents the size of the Block in bytes as\n+    seen by the Bitmap Allocator. Internally, a global free list is\n+    used to keep track of the free blocks used and given back by the\n+    bitmap allocator.  It is this Free List Store that is responsible\n+    for writing and managing this information. Actually the number of\n+    bytes allocated in this case would be: 4 + 4 + (4x2) + (64x4) =\n+    272 bytes, but the first 4 bytes are an addition by the Free List\n+    Store, so the Bitmap Allocator sees only 268 bytes. These first 4\n+    bytes about which the bitmapped allocator is not aware hold the\n+    value 268.\n+  </p><p>\n+  What do the remaining values represent?</p><p>\n+    The 2nd 4 in the expression is the sizeof(size_t) because the\n+    Bitmapped Allocator maintains a used count for each Super Block,\n+    which is initially set to 0 (as indicated in the diagram). This is\n+    incremented every time a block is removed from this super block\n+    (allocated), and decremented whenever it is given back. So, when\n+    the used count falls to 0, the whole super block will be given\n+    back to the Free List Store.\n+  </p><p>\n+    The value 4294967295 represents the integer corresponding to the bit\n+    representation of all bits set: 11111111111111111111111111111111.\n+  </p><p>\n+    The 3rd 4x2 is size of the bitmap itself, which is the size of 32-bits\n+    x 2,\n+    which is 8-bytes, or 2 x sizeof(size_t).\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.max_wasted\"></a>Maximum Wasted Percentage</h4></div></div></div><p>\n+    This has nothing to do with the algorithm per-se,\n+    only with some vales that must be chosen correctly to ensure that the\n+    allocator performs well in a real word scenario, and maintains a good\n+    balance between the memory consumption and the allocation/deallocation\n+    speed.\n+  </p><p>\n+    The formula for calculating the maximum wastage as a percentage:\n+  </p><p>\n+(32 x k + 1) / (2 x (32 x k + 1 + 32 x c)) x 100.\n+  </p><p>\n+    Where, k =&gt; The constant overhead per node. eg. for list, it is\n+    8 bytes, and for map it is 12 bytes. c =&gt; The size of the\n+    base type on which the map/list is instantiated. Thus, suppose the\n+    type1 is int and type2 is double, they are related by the relation\n+    sizeof(double) == 2*sizeof(int). Thus, all types must have this\n+    double size relation for this formula to work properly.\n+  </p><p>\n+    Plugging-in: For List: k = 8 and c = 4 (int and double), we get:\n+    33.376%\n+  </p><p>\n+For map/multimap: k = 12, and c = 4 (int and double), we get: 37.524%\n+  </p><p>\n+    Thus, knowing these values, and based on the sizeof(value_type), we may\n+    create a function that returns the Max_Wastage_Percentage for us to use.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.allocate\"></a><code class=\"function\">allocate</code></h4></div></div></div><p>\n+    The allocate function is specialized for single object allocation\n+    ONLY.  Thus, ONLY if n == 1, will the bitmap_allocator's\n+    specialized algorithm be used. Otherwise, the request is satisfied\n+    directly by calling operator new.\n+  </p><p>\n+    Suppose n == 1, then the allocator does the following:\n+  </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+\tChecks to see whether a free block exists somewhere in a region\n+\tof memory close to the last satisfied request. If so, then that\n+\tblock is marked as allocated in the bit map and given to the\n+\tuser. If not, then (2) is executed.\n+    </p></li><li><p>\n+\tIs there a free block anywhere after the current block right\n+\tup to the end of the memory that we have? If so, that block is\n+\tfound, and the same procedure is applied as above, and\n+\treturned to the user. If not, then (3) is executed.\n+    </p></li><li><p>\n+\tIs there any block in whatever region of memory that we own\n+\tfree?  This is done by checking\n+      </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\tThe use count for each super block, and if that fails then\n+\t</p></li><li><p>\n+\t  The individual bit-maps for each super block.\n+\t</p></li></ul></div><p>\n+\tNote: Here we are never touching any of the memory that the\n+\tuser will be given, and we are confining all memory accesses\n+\tto a small region of memory! This helps reduce cache\n+\tmisses. If this succeeds then we apply the same procedure on\n+\tthat bit-map as (1), and return that block of memory to the\n+\tuser. However, if this process fails, then we resort to (4).\n+\t</p></li><li><p>\n+\tThis process involves Refilling the internal exponentially\n+\tgrowing memory pool. The said effect is achieved by calling\n+\t_S_refill_pool which does the following:\n+      </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\t    Gets more memory from the Global Free List of the Required\n+\t    size.  \n+\t  </p></li><li><p>\n+      Adjusts the size for the next call to itself. \n+      </p></li><li><p>\n+      Writes the appropriate headers in the bit-maps.\n+      </p></li><li><p>\n+\tSets the use count for that super-block just allocated to 0\n+\t(zero).  \n+      </p></li><li><p>\n+\t  All of the above accounts to maintaining the basic invariant\n+\t  for the allocator. If the invariant is maintained, we are\n+\t  sure that all is well. Now, the same process is applied on\n+\t  the newly acquired free blocks, which are dispatched\n+\t  accordingly.  \n+      </p></li></ul></div></li></ol></div><p>\n+Thus, you can clearly see that the allocate function is nothing but a\n+combination of the next-fit and first-fit algorithm optimized ONLY for\n+single object allocations.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.deallocate\"></a><code class=\"function\">deallocate</code></h4></div></div></div><p>\n+    The deallocate function again is specialized for single objects ONLY.\n+    For all n belonging to &gt; 1, the operator delete is called without\n+    further ado, and the deallocate function returns.\n+  </p><p>\n+    However for n == 1, a series of steps are performed:\n+  </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+      We first need to locate that super-block which holds the memory\n+      location given to us by the user. For that purpose, we maintain\n+      a static variable _S_last_dealloc_index, which holds the index\n+      into the vector of block pairs which indicates the index of the\n+      last super-block from which memory was freed. We use this\n+      strategy in the hope that the user will deallocate memory in a\n+      region close to what he/she deallocated the last time around. If\n+      the check for belongs_to succeeds, then we determine the bit-map\n+      for the given pointer, and locate the index into that bit-map,\n+      and mark that bit as free by setting it.\n+    </p></li><li><p>\n+      If the _S_last_dealloc_index does not point to the memory block\n+      that we're looking for, then we do a linear search on the block\n+      stored in the vector of Block Pairs. This vector in code is\n+      called _S_mem_blocks. When the corresponding super-block is\n+      found, we apply the same procedure as we did for (1) to mark the\n+      block as free in the bit-map.\n+    </p></li></ol></div><p>\n+    Now, whenever a block is freed, the use count of that particular\n+    super block goes down by 1. When this use count hits 0, we remove\n+    that super block from the list of all valid super blocks stored in\n+    the vector.  While doing this, we also make sure that the basic\n+    invariant is maintained by making sure that _S_last_request and\n+    _S_last_dealloc_index point to valid locations within the vector.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.questions\"></a>Questions</h4></div></div></div><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"bitmap.impl.question.1\"></a>1</h5></div></div></div><p>\n+Q1) The \"Data Layout\" section is\n+cryptic. I have no idea of what you are trying to say. Layout of what?\n+The free-list? Each bitmap? The Super Block?\n+    </p><p>\n+      The layout of a Super Block of a given\n+size. In the example, a super block of size 32 x 1 is taken. The\n+general formula for calculating the size of a super block is\n+32 x sizeof(value_type) x 2^n, where n ranges from 0 to 32 for 32-bit\n+systems.\n+    </p></div><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"bitmap.impl.question.2\"></a>2</h5></div></div></div><p>\n+      And since I just mentioned the\n+term `each bitmap', what in the world is meant by it? What does each\n+bitmap manage? How does it relate to the super block? Is the Super\n+Block a bitmap as well?\n+    </p><p>\n+      Each bitmap is part of a Super Block which is made up of 3 parts\n+      as I have mentioned earlier.  Re-iterating, 1. The use count,\n+      2. The bit-map for that Super Block. 3.  The actual memory that\n+      will be eventually given to the user. Each bitmap is a multiple\n+      of 32 in size. If there are 32 x (2^3) blocks of single objects\n+      to be given, there will be '32 x (2^3)' bits present.  Each 32\n+      bits managing the allocated / free status for 32 blocks. Since\n+      each size_t contains 32-bits, one size_t can manage up to 32\n+      blocks' status. Each bit-map is made up of a number of size_t,\n+      whose exact number for a super-block of a given size I have just\n+      mentioned.\n+    </p></div><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"bitmap.impl.question.3\"></a>3</h5></div></div></div><p>\n+      How do the allocate and deallocate functions work in regard to\n+      bitmaps?\n+    </p><p>\n+      The allocate and deallocate functions manipulate the bitmaps and\n+      have nothing to do with the memory that is given to the user. As\n+      I have earlier mentioned, a 1 in the bitmap's bit field\n+      indicates free, while a 0 indicates allocated. This lets us\n+      check 32 bits at a time to check whether there is at lease one\n+      free block in those 32 blocks by testing for equality with\n+      (0). Now, the allocate function will given a memory block find\n+      the corresponding bit in the bitmap, and will reset it (i.e.,\n+      make it re-set (0)). And when the deallocate function is called,\n+      it will again set that bit after locating it to indicate that\n+      that particular block corresponding to this bit in the bit-map\n+      is not being used by anyone, and may be used to satisfy future\n+      requests.\n+    </p><p>\n+      e.g.: Consider a bit-map of 64-bits as represented below:\n+      1111111111111111111111111111111111111111111111111111111111111111\n+    </p><p>\n+      Now, when the first request for allocation of a single object\n+      comes along, the first block in address order is returned. And\n+      since the bit-maps in the reverse order to that of the address\n+      order, the last bit (LSB if the bit-map is considered as a\n+      binary word of 64-bits) is re-set to 0.\n+    </p><p>\n+      The bit-map now looks like this:\n+      1111111111111111111111111111111111111111111111111111111111111110\n+    </p></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.locality\"></a>Locality</h4></div></div></div><p>\n+    Another issue would be whether to keep the all bitmaps in a\n+    separate area in memory, or to keep them near the actual blocks\n+    that will be given out or allocated for the client. After some\n+    testing, I've decided to keep these bitmaps close to the actual\n+    blocks. This will help in 2 ways.\n+  </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>Constant time access for the bitmap themselves, since no kind of\n+look up will be needed to find the correct bitmap list or it's\n+equivalent.</p></li><li><p>And also this would preserve the cache as far as possible.</p></li></ol></div><p>\n+    So in effect, this kind of an allocator might prove beneficial from a\n+    purely cache point of view. But this allocator has been made to try and\n+    roll out the defects of the node_allocator, wherein the nodes get\n+    skewed about in memory, if they are not returned in the exact reverse\n+    order or in the same order in which they were allocated. Also, the\n+    new_allocator's book keeping overhead is too much for small objects and\n+    single object allocations, though it preserves the locality of blocks\n+    very well when they are returned back to the allocator.\n+  </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"bitmap.impl.grow_policy\"></a>Overhead and Grow Policy</h4></div></div></div><p>\n+    Expected overhead per block would be 1 bit in memory. Also, once\n+    the address of the free list has been found, the cost for\n+    allocation/deallocation would be negligible, and is supposed to be\n+    constant time. For these very reasons, it is very important to\n+    minimize the linear time costs, which include finding a free list\n+    with a free block while allocating, and finding the corresponding\n+    free list for a block while deallocating. Therefore, I have\n+    decided that the growth of the internal pool for this allocator\n+    will be exponential as compared to linear for\n+    node_allocator. There, linear time works well, because we are\n+    mainly concerned with speed of allocation/deallocation and memory\n+    consumption, whereas here, the allocation/deallocation part does\n+    have some linear/logarithmic complexity components in it. Thus, to\n+    try and minimize them would be a good thing to do at the cost of a\n+    little bit of memory.\n+  </p><p>\n+    Another thing to be noted is the pool size will double every time\n+    the internal pool gets exhausted, and all the free blocks have\n+    been given away. The initial size of the pool would be\n+    sizeof(size_t) x 8 which is the number of bits in an integer,\n+    which can fit exactly in a CPU register. Hence, the term given is\n+    exponential growth of the internal pool.\n+  </p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch32.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt12ch32.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch33.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a032.\u00a0Allocators\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a033.\u00a0Containers</td></tr></table></div></body></html>"}, {"sha": "82562a65c37c77455e5cc587bd89b94cd11f811c", "filename": "libstdc++-v3/doc/html/manual/bk01apas02.html", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,96 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Directory Layout and Source Conventions</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0Contributing\" /><link rel=\"prev\" href=\"appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0Contributing\" /><link rel=\"next\" href=\"bk01apas03.html\" title=\"Coding Style\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Directory Layout and Source Conventions</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"appendix_contributing.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0A.\u00a0Contributing</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"contrib.organization\"></a>Directory Layout and Source Conventions</h2></div></div></div><p>\n+    The unpacked source directory of libstdc++ contains the files\n+    needed to create the GNU C++ Library.\n+  </p><div class=\"literallayout\"><p><br />\n+It\u00a0has\u00a0subdirectories:<br />\n+<br />\n+\u00a0\u00a0doc<br />\n+\u00a0\u00a0\u00a0\u00a0Files\u00a0in\u00a0HTML\u00a0and\u00a0text\u00a0format\u00a0that\u00a0document\u00a0usage,\u00a0quirks\u00a0of\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0implementation,\u00a0and\u00a0contributor\u00a0checklists.<br />\n+<br />\n+\u00a0\u00a0include<br />\n+\u00a0\u00a0\u00a0\u00a0All\u00a0header\u00a0files\u00a0for\u00a0the\u00a0C++\u00a0library\u00a0are\u00a0within\u00a0this\u00a0directory,<br />\n+\u00a0\u00a0\u00a0\u00a0modulo\u00a0specific\u00a0runtime-related\u00a0files\u00a0that\u00a0are\u00a0in\u00a0the\u00a0libsupc++<br />\n+\u00a0\u00a0\u00a0\u00a0directory.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/std<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Files\u00a0meant\u00a0to\u00a0be\u00a0found\u00a0by\u00a0#include\u00a0&lt;name&gt;\u00a0directives\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0standard-conforming\u00a0user\u00a0programs.\u00a0\u00a0<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/c<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Headers\u00a0intended\u00a0to\u00a0directly\u00a0include\u00a0standard\u00a0C\u00a0headers.\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[NB:\u00a0this\u00a0can\u00a0be\u00a0enabled\u00a0via\u00a0--enable-cheaders=c]<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/c_global\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Headers\u00a0intended\u00a0to\u00a0include\u00a0standard\u00a0C\u00a0headers\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the\u00a0global\u00a0namespace,\u00a0and\u00a0put\u00a0select\u00a0names\u00a0into\u00a0the\u00a0std::<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace.\u00a0\u00a0[NB:\u00a0this\u00a0is\u00a0the\u00a0default,\u00a0and\u00a0is\u00a0the\u00a0same\u00a0as<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--enable-cheaders=c_global]<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/c_std\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Headers\u00a0intended\u00a0to\u00a0include\u00a0standard\u00a0C\u00a0headers<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0already\u00a0in\u00a0namespace\u00a0std,\u00a0and\u00a0put\u00a0select\u00a0names\u00a0into\u00a0the\u00a0std::<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace.\u00a0\u00a0[NB:\u00a0this\u00a0is\u00a0the\u00a0same\u00a0as\u00a0--enable-cheaders=c_std]<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/bits<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Files\u00a0included\u00a0by\u00a0standard\u00a0headers\u00a0and\u00a0by\u00a0other\u00a0files\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the\u00a0bits\u00a0directory.\u00a0<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/backward<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Headers\u00a0provided\u00a0for\u00a0backward\u00a0compatibility,\u00a0such\u00a0as\u00a0&lt;iostream.h&gt;.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0They\u00a0are\u00a0not\u00a0used\u00a0in\u00a0this\u00a0library.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0include/ext<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Headers\u00a0that\u00a0define\u00a0extensions\u00a0to\u00a0the\u00a0standard\u00a0library.\u00a0\u00a0No<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0standard\u00a0header\u00a0refers\u00a0to\u00a0any\u00a0of\u00a0them.<br />\n+<br />\n+\u00a0\u00a0scripts<br />\n+\u00a0\u00a0\u00a0\u00a0Scripts\u00a0that\u00a0are\u00a0used\u00a0during\u00a0the\u00a0configure,\u00a0build,\u00a0make,\u00a0or\u00a0test<br />\n+\u00a0\u00a0\u00a0\u00a0process.<br />\n+<br />\n+\u00a0\u00a0src<br />\n+\u00a0\u00a0\u00a0\u00a0Files\u00a0that\u00a0are\u00a0used\u00a0in\u00a0constructing\u00a0the\u00a0library,\u00a0but\u00a0are\u00a0not<br />\n+\u00a0\u00a0\u00a0\u00a0installed.<br />\n+<br />\n+\u00a0\u00a0testsuites/[backward,\u00a0demangle,\u00a0ext,\u00a0performance,\u00a0thread,\u00a017_*\u00a0to\u00a027_*]<br />\n+\u00a0\u00a0\u00a0\u00a0Test\u00a0programs\u00a0are\u00a0here,\u00a0and\u00a0may\u00a0be\u00a0used\u00a0to\u00a0begin\u00a0to\u00a0exercise\u00a0the\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0library.\u00a0\u00a0Support\u00a0for\u00a0\"make\u00a0check\"\u00a0and\u00a0\"make\u00a0check-install\"\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0complete,\u00a0and\u00a0runs\u00a0through\u00a0all\u00a0the\u00a0subdirectories\u00a0here\u00a0when\u00a0this<br />\n+\u00a0\u00a0\u00a0\u00a0command\u00a0is\u00a0issued\u00a0from\u00a0the\u00a0build\u00a0directory.\u00a0\u00a0Please\u00a0note\u00a0that<br />\n+\u00a0\u00a0\u00a0\u00a0\"make\u00a0check\"\u00a0requires\u00a0DejaGNU\u00a01.4\u00a0or\u00a0later\u00a0to\u00a0be\u00a0installed.\u00a0\u00a0Please<br />\n+\u00a0\u00a0\u00a0\u00a0note\u00a0that\u00a0\"make\u00a0check-script\"\u00a0calls\u00a0the\u00a0script\u00a0mkcheck,\u00a0which<br />\n+\u00a0\u00a0\u00a0\u00a0requires\u00a0bash,\u00a0and\u00a0which\u00a0may\u00a0need\u00a0the\u00a0paths\u00a0to\u00a0bash\u00a0adjusted\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0work\u00a0properly,\u00a0as\u00a0/bin/bash\u00a0is\u00a0assumed.<br />\n+<br />\n+Other\u00a0subdirectories\u00a0contain\u00a0variant\u00a0versions\u00a0of\u00a0certain\u00a0files<br />\n+that\u00a0are\u00a0meant\u00a0to\u00a0be\u00a0copied\u00a0or\u00a0linked\u00a0by\u00a0the\u00a0configure\u00a0script.<br />\n+Currently\u00a0these\u00a0are:<br />\n+<br />\n+\u00a0\u00a0config/abi<br />\n+\u00a0\u00a0config/cpu<br />\n+\u00a0\u00a0config/io<br />\n+\u00a0\u00a0config/locale<br />\n+\u00a0\u00a0config/os<br />\n+<br />\n+In\u00a0addition,\u00a0two\u00a0subdirectories\u00a0are\u00a0convenience\u00a0libraries:<br />\n+<br />\n+\u00a0\u00a0libmath<br />\n+\u00a0\u00a0\u00a0\u00a0Support\u00a0routines\u00a0needed\u00a0for\u00a0C++\u00a0math.\u00a0Only\u00a0needed\u00a0if\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0underlying\u00a0\"C\"\u00a0implementation\u00a0is\u00a0non-existent,\u00a0in\u00a0particular<br />\n+\u00a0\u00a0\u00a0\u00a0required\u00a0or\u00a0optimal\u00a0long\u00a0double,\u00a0long\u00a0long,\u00a0and\u00a0C99\u00a0functionality.<br />\n+<br />\n+\u00a0\u00a0libsupc++<br />\n+\u00a0\u00a0\u00a0\u00a0Contains\u00a0the\u00a0runtime\u00a0library\u00a0for\u00a0C++,\u00a0including\u00a0exception<br />\n+\u00a0\u00a0\u00a0\u00a0handling\u00a0and\u00a0memory\u00a0allocation\u00a0and\u00a0deallocation,\u00a0RTTI,\u00a0terminate<br />\n+\u00a0\u00a0\u00a0\u00a0handlers,\u00a0etc.<br />\n+<br />\n+Note\u00a0that\u00a0glibc\u00a0also\u00a0has\u00a0a\u00a0bits/\u00a0subdirectory.\u00a0\u00a0We\u00a0will\u00a0either<br />\n+need\u00a0to\u00a0be\u00a0careful\u00a0not\u00a0to\u00a0collide\u00a0with\u00a0names\u00a0in\u00a0its\u00a0bits/<br />\n+directory;\u00a0or\u00a0rename\u00a0bits\u00a0to\u00a0(e.g.)\u00a0cppbits/.<br />\n+<br />\n+In\u00a0files\u00a0throughout\u00a0the\u00a0system,\u00a0lines\u00a0marked\u00a0with\u00a0an\u00a0\"XXX\"\u00a0indicate<br />\n+a\u00a0bug\u00a0or\u00a0incompletely-implemented\u00a0feature.\u00a0\u00a0Lines\u00a0marked\u00a0\"XXX\u00a0MT\"<br />\n+indicate\u00a0a\u00a0place\u00a0that\u00a0may\u00a0require\u00a0attention\u00a0for\u00a0multi-thread\u00a0safety.<br />\n+\u00a0\u00a0</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"appendix_contributing.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_contributing.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Appendix\u00a0A.\u00a0Contributing\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Coding Style</td></tr></table></div></body></html>"}, {"sha": "620968d2750853b8324e1b68f2bf7086f18fad8f", "filename": "libstdc++-v3/doc/html/manual/bk01apas03.html", "status": "added", "additions": 582, "deletions": 0, "changes": 582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,582 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Coding Style</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0Contributing\" /><link rel=\"prev\" href=\"bk01apas02.html\" title=\"Directory Layout and Source Conventions\" /><link rel=\"next\" href=\"bk01apas04.html\" title=\"Documentation Style\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Coding Style</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0A.\u00a0Contributing</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas04.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"contrib.coding_style\"></a>Coding Style</h2></div></div></div><p>\n+  </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"coding_style.bad_identifiers\"></a>Bad Itentifiers</h3></div></div></div><p>\n+      Identifiers that conflict and should be avoided.\n+    </p><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0This\u00a0is\u00a0the\u00a0list\u00a0of\u00a0names\u00a0\u201c<span class=\"quote\">reserved\u00a0to\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0implementation</span>\u201d\u00a0that\u00a0have\u00a0been\u00a0claimed\u00a0by\u00a0certain<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compilers\u00a0and\u00a0system\u00a0headers\u00a0of\u00a0interest,\u00a0and\u00a0should\u00a0not\u00a0be\u00a0used<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0in\u00a0the\u00a0library.\u00a0It\u00a0will\u00a0grow,\u00a0of\u00a0course.\u00a0\u00a0We\u00a0generally\u00a0are<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0interested\u00a0in\u00a0names\u00a0that\u00a0are\u00a0not\u00a0all-caps,\u00a0except\u00a0for\u00a0those\u00a0like<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"_T\"<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For\u00a0Solaris:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_B<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_C<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_L<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_N<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_P<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_S<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_U<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_X<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_E1<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0..<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_E24<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Irix\u00a0adds:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_A<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_G<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MS\u00a0adds:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_T<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0BSD\u00a0adds:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__used<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__unused<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__inline<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_Complex<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__istype<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__maskrune<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__tolower<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__toupper<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__wchar_t<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__wint_t<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_res<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_res_ext<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__tg_*<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For\u00a0GCC:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Note\u00a0that\u00a0this\u00a0list\u00a0is\u00a0out\u00a0of\u00a0date.\u00a0It\u00a0applies\u00a0to\u00a0the\u00a0old<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name-mangling;\u00a0in\u00a0G++\u00a03.0\u00a0and\u00a0higher\u00a0a\u00a0different\u00a0name-mangling\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0used.\u00a0In\u00a0addition,\u00a0many\u00a0of\u00a0the\u00a0bugs\u00a0relating\u00a0to\u00a0G++\u00a0interpreting<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0these\u00a0names\u00a0as\u00a0operators\u00a0have\u00a0been\u00a0fixed.]<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0full\u00a0set\u00a0of\u00a0__*\u00a0identifiers\u00a0(combined\u00a0from\u00a0gcc/cp/lex.c\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gcc/cplus-dem.c)\u00a0that\u00a0are\u00a0either\u00a0old\u00a0or\u00a0new,\u00a0but\u00a0are\u00a0definitely\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0recognized\u00a0by\u00a0the\u00a0demangler,\u00a0is:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__aa<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__aad<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ad<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__addr<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__adv<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__aer<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__als<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__alshift<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__amd<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ami<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__aml<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__amu<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__aor<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__apl<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__array<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ars<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__arshift<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__as<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__bit_and<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__bit_ior<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__bit_not<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__bit_xor<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__call<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__cl<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__cm<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__cn<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__co<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__component<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__compound<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__cond<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__convert<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__delete<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__dl<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__dv<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__eq<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__er<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ge<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__gt<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__indirect<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__le<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ls<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__lt<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__max<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__md<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__method_call<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__mi<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__min<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__minus<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ml<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__mm<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__mn<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__mult<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__mx<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__ne<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__negate<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__new<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__nop<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__nt<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__nw<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__oo<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__op<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__or<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__pl<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__plus<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__postdecrement<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__postincrement<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__pp<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__pt<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__rf<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__rm<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__rs<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__sz<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__trunc_div<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__trunc_mod<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__truth_andif<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__truth_not<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__truth_orif<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__vc<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__vd<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__vn<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SGI\u00a0badnames:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_alloca<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_fsqrt<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_sqrt<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_fabs<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_dabs<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_cast_f2i<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_cast_i2f<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_cast_d2ll<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_cast_ll2d<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_copy_dhi2i<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_copy_i2dhi<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_copy_dlo2i<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__builtin_copy_i2dlo<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__add_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__sub_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__or_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__xor_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__and_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__nand_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__mpy_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__min_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__max_and_fetch<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_add<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_sub<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_or<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_xor<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_and<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_nand<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_mpy<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_min<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__fetch_and_max<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__lock_test_and_set<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__lock_release<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__lock_acquire<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__compare_and_swap<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__synchronize<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__high_multiply<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__unix<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__sgi<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__linux__<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__i386__<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__i486__<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__cplusplus<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__embedded_cplusplus<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0long\u00a0double\u00a0conversion\u00a0members\u00a0mangled\u00a0as\u00a0__opr<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00060.html<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_opr<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"coding_style.example\"></a>By Example</h3></div></div></div><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0This\u00a0library\u00a0is\u00a0written\u00a0to\u00a0appropriate\u00a0C++\u00a0coding\u00a0standards.\u00a0As\u00a0such,<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it\u00a0is\u00a0intended\u00a0to\u00a0precede\u00a0the\u00a0recommendations\u00a0of\u00a0the\u00a0GNU\u00a0Coding<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Standard,\u00a0which\u00a0can\u00a0be\u00a0referenced\u00a0in\u00a0full\u00a0here:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http://www.gnu.org/prep/standards/standards.html#Formatting<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0rest\u00a0of\u00a0this\u00a0is\u00a0also\u00a0interesting\u00a0reading,\u00a0but\u00a0skip\u00a0the\u00a0\"Design<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Advice\"\u00a0part.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0GCC\u00a0coding\u00a0conventions\u00a0are\u00a0here,\u00a0and\u00a0are\u00a0also\u00a0useful:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0http://gcc.gnu.org/codingconventions.html<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0In\u00a0addition,\u00a0because\u00a0it\u00a0doesn't\u00a0seem\u00a0to\u00a0be\u00a0stated\u00a0explicitly\u00a0anywhere<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else,\u00a0there\u00a0is\u00a0an\u00a080\u00a0column\u00a0source\u00a0limit.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ChangeLog\u00a0entries\u00a0for\u00a0member\u00a0functions\u00a0should\u00a0use\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0classname::member\u00a0function\u00a0name\u00a0syntax\u00a0as\u00a0follows:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01999-04-15\u00a0\u00a0Dennis\u00a0Ritchie\u00a0\u00a0&lt;dr@att.com&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0src/basic_file.cc\u00a0(__basic_file::open):\u00a0Fix\u00a0thinko\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_G_HAVE_IO_FILE_OPEN\u00a0bits.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Notable\u00a0areas\u00a0of\u00a0divergence\u00a0from\u00a0what\u00a0may\u00a0be\u00a0previous\u00a0local\u00a0practice<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(particularly\u00a0for\u00a0GNU\u00a0C)\u00a0include:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a001.\u00a0Pointers\u00a0and\u00a0references<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char*\u00a0p\u00a0=\u00a0\"flop\";<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char&amp;\u00a0c\u00a0=\u00a0*p;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char\u00a0*p\u00a0=\u00a0\"flop\";\u00a0\u00a0//\u00a0wrong<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char\u00a0&amp;c\u00a0=\u00a0*p;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0wrong<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0In\u00a0C++,\u00a0definitions\u00a0are\u00a0mixed\u00a0with\u00a0executable\u00a0code.\u00a0Here,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0p\u00a0is\u00a0being\u00a0initialized,\u00a0not\u00a0*p.\u00a0This\u00a0is\u00a0near-universal<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0practice\u00a0among\u00a0C++\u00a0programmers;\u00a0it\u00a0is\u00a0normal\u00a0for\u00a0C\u00a0hackers<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to\u00a0switch\u00a0spontaneously\u00a0as\u00a0they\u00a0gain\u00a0experience.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a002.\u00a0Operator\u00a0names\u00a0and\u00a0parentheses<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0operator==(type)<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0operator\u00a0==\u00a0(type)\u00a0\u00a0//\u00a0wrong<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0The\u00a0==\u00a0is\u00a0part\u00a0of\u00a0the\u00a0function\u00a0name.\u00a0Separating<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it\u00a0makes\u00a0the\u00a0declaration\u00a0look\u00a0like\u00a0an\u00a0expression.\u00a0<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a003.\u00a0Function\u00a0names\u00a0and\u00a0parentheses<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void\u00a0mangle()<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void\u00a0mangle\u00a0()\u00a0\u00a0//\u00a0wrong<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0no\u00a0space\u00a0before\u00a0parentheses\u00a0(except\u00a0after\u00a0a\u00a0control-flow<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0keyword)\u00a0is\u00a0near-universal\u00a0practice\u00a0for\u00a0C++.\u00a0It\u00a0identifies\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parentheses\u00a0as\u00a0the\u00a0function-call\u00a0operator\u00a0or\u00a0declarator,\u00a0as\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0opposed\u00a0to\u00a0an\u00a0expression\u00a0or\u00a0other\u00a0overloaded\u00a0use\u00a0of\u00a0parentheses.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a004.\u00a0Template\u00a0function\u00a0indentation<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;typename\u00a0T&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template_function(args)<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;class\u00a0T&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void\u00a0template_function(args)\u00a0{};<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0In\u00a0class\u00a0definitions,\u00a0without\u00a0indentation\u00a0whitespace\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0needed\u00a0both\u00a0above\u00a0and\u00a0below\u00a0the\u00a0declaration\u00a0to\u00a0distinguish<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it\u00a0visually\u00a0from\u00a0other\u00a0members.\u00a0(Also,\u00a0re:\u00a0\"typename\"<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rather\u00a0than\u00a0\"class\".)\u00a0\u00a0T\u00a0often\u00a0could\u00a0be\u00a0int,\u00a0which\u00a0is\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0not\u00a0a\u00a0class.\u00a0(\"class\",\u00a0here,\u00a0is\u00a0an\u00a0anachronism.)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a005.\u00a0Template\u00a0class\u00a0indentation<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;typename\u00a0_CharT,\u00a0typename\u00a0_Traits&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0basic_ios\u00a0:\u00a0public\u00a0ios_base<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Types:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;class\u00a0_CharT,\u00a0class\u00a0_Traits&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0basic_ios\u00a0:\u00a0public\u00a0ios_base<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Types:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;class\u00a0_CharT,\u00a0class\u00a0_Traits&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0basic_ios\u00a0:\u00a0public\u00a0ios_base<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Types:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a006.\u00a0Enumerators<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enum<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space\u00a0=\u00a0_ISspace,<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print\u00a0=\u00a0_ISprint,<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cntrl\u00a0=\u00a0_IScntrl<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enum\u00a0{\u00a0space\u00a0=\u00a0_ISspace,\u00a0print\u00a0=\u00a0_ISprint,\u00a0cntrl\u00a0=\u00a0_IScntrl\u00a0};<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a007.\u00a0Member\u00a0initialization\u00a0lists<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0All\u00a0one\u00a0line,\u00a0separate\u00a0from\u00a0class\u00a0name.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble::gribble()\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0_M_private_data(0),\u00a0_M_more_stuff(0),\u00a0_M_helper(0);<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble::gribble()\u00a0:\u00a0_M_private_data(0),\u00a0_M_more_stuff(0),\u00a0_M_helper(0);<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a008.\u00a0Try/Catch\u00a0blocks<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0catch\u00a0(...)<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0catch(...)\u00a0{\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a009.\u00a0Member\u00a0functions\u00a0declarations\u00a0and\u00a0definitions<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Keywords\u00a0such\u00a0as\u00a0extern,\u00a0static,\u00a0export,\u00a0explicit,\u00a0inline,\u00a0etc<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0go\u00a0on\u00a0the\u00a0line\u00a0above\u00a0the\u00a0function\u00a0name.\u00a0Thus<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual\u00a0int\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foo()<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual\u00a0int\u00a0foo()<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0GNU\u00a0coding\u00a0conventions\u00a0dictate\u00a0return\u00a0types\u00a0for\u00a0functions<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0are\u00a0on\u00a0a\u00a0separate\u00a0line\u00a0than\u00a0the\u00a0function\u00a0name\u00a0and\u00a0parameter\u00a0list<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0definitions.\u00a0For\u00a0C++,\u00a0where\u00a0we\u00a0have\u00a0member\u00a0functions\u00a0that\u00a0can<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0be\u00a0either\u00a0inline\u00a0definitions\u00a0or\u00a0declarations,\u00a0keeping\u00a0to\u00a0this<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0standard\u00a0allows\u00a0all\u00a0member\u00a0function\u00a0names\u00a0for\u00a0a\u00a0given\u00a0class\u00a0to\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0aligned\u00a0to\u00a0the\u00a0same\u00a0margin,\u00a0increasing\u00a0readibility.<br />\n+<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010.\u00a0Invocation\u00a0of\u00a0member\u00a0functions\u00a0with\u00a0\"this-&gt;\"<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For\u00a0non-uglified\u00a0names,\u00a0use\u00a0this-&gt;name\u00a0to\u00a0call\u00a0the\u00a0function.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this-&gt;sync()<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sync()<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0Koenig\u00a0lookup.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a011.\u00a0Namespaces<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace\u00a0std<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0blah\u00a0blah\u00a0blah;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0//\u00a0namespace\u00a0std<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace\u00a0std\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0blah\u00a0blah\u00a0blah;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0//\u00a0namespace\u00a0std<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a012.\u00a0Spacing\u00a0under\u00a0protected\u00a0and\u00a0private\u00a0in\u00a0class\u00a0declarations:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space\u00a0above,\u00a0none\u00a0below<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ie<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0foo;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0foo;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a013.\u00a0Spacing\u00a0WRT\u00a0return\u00a0statements.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0no\u00a0extra\u00a0spacing\u00a0before\u00a0returns,\u00a0no\u00a0parenthesis<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ie<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__ret;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__ret;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-NOT-<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0(__ret);<br />\n+<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a014.\u00a0Location\u00a0of\u00a0global\u00a0variables.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0All\u00a0global\u00a0variables\u00a0of\u00a0class\u00a0type,\u00a0whether\u00a0in\u00a0the\u00a0\"user\u00a0visable\"<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0space\u00a0(e.g.,\u00a0cin)\u00a0or\u00a0the\u00a0implementation\u00a0namespace,\u00a0must\u00a0be\u00a0defined<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0as\u00a0a\u00a0character\u00a0array\u00a0with\u00a0the\u00a0appropriate\u00a0alignment\u00a0and\u00a0then\u00a0later<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0re-initialized\u00a0to\u00a0the\u00a0correct\u00a0value.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0This\u00a0is\u00a0due\u00a0to\u00a0startup\u00a0issues\u00a0on\u00a0certain\u00a0platforms,\u00a0such\u00a0as\u00a0AIX.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For\u00a0more\u00a0explanation\u00a0and\u00a0examples,\u00a0see\u00a0src/globals.cc.\u00a0All\u00a0such<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables\u00a0should\u00a0be\u00a0contained\u00a0in\u00a0that\u00a0file,\u00a0for\u00a0simplicity.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a015.\u00a0Exception\u00a0abstractions<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Use\u00a0the\u00a0exception\u00a0abstractions\u00a0found\u00a0in\u00a0functexcept.h,\u00a0which\u00a0allow<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0C++\u00a0programmers\u00a0to\u00a0use\u00a0this\u00a0library\u00a0with\u00a0-fno-exceptions.\u00a0(Even\u00a0if<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0that\u00a0is\u00a0rarely\u00a0advisable,\u00a0it's\u00a0a\u00a0necessary\u00a0evil\u00a0for\u00a0backwards<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0compatibility.)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016.\u00a0Exception\u00a0error\u00a0messages<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0All\u00a0start\u00a0with\u00a0the\u00a0name\u00a0of\u00a0the\u00a0function\u00a0where\u00a0the\u00a0exception\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thrown,\u00a0and\u00a0then\u00a0(optional)\u00a0descriptive\u00a0text\u00a0is\u00a0added.\u00a0Example:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0__throw_logic_error(__N(\"basic_string::_S_construct\u00a0NULL\u00a0not\u00a0valid\"));<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Reason:\u00a0The\u00a0verbose\u00a0terminate\u00a0handler\u00a0prints\u00a0out\u00a0exception::what(),<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0as\u00a0well\u00a0as\u00a0the\u00a0typeinfo\u00a0for\u00a0the\u00a0thrown\u00a0exception.\u00a0As\u00a0this\u00a0is\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default\u00a0terminate\u00a0handler,\u00a0by\u00a0putting\u00a0location\u00a0info\u00a0into\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exception\u00a0string,\u00a0a\u00a0very\u00a0useful\u00a0error\u00a0message\u00a0is\u00a0printed\u00a0out\u00a0for<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0uncaught\u00a0exceptions.\u00a0So\u00a0useful,\u00a0in\u00a0fact,\u00a0that\u00a0non-programmers\u00a0can<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0give\u00a0useful\u00a0error\u00a0messages,\u00a0and\u00a0programmers\u00a0can\u00a0intelligently<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0speculate\u00a0what\u00a0went\u00a0wrong\u00a0without\u00a0even\u00a0using\u00a0a\u00a0debugger.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a017.\u00a0The\u00a0doxygen\u00a0style\u00a0guide\u00a0to\u00a0comments\u00a0is\u00a0a\u00a0separate\u00a0document,<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0see\u00a0index.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0library\u00a0currently\u00a0has\u00a0a\u00a0mixture\u00a0of\u00a0GNU-C\u00a0and\u00a0modern\u00a0C++\u00a0coding<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0styles.\u00a0The\u00a0GNU\u00a0C\u00a0usages\u00a0will\u00a0be\u00a0combed\u00a0out\u00a0gradually.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Name\u00a0patterns:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0For\u00a0nonstandard\u00a0names\u00a0appearing\u00a0in\u00a0Standard\u00a0headers,\u00a0we\u00a0are\u00a0constrained\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to\u00a0use\u00a0names\u00a0that\u00a0begin\u00a0with\u00a0underscores.\u00a0This\u00a0is\u00a0called\u00a0\"uglification\".<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The\u00a0convention\u00a0is:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Local\u00a0and\u00a0argument\u00a0names:\u00a0\u00a0__[a-z].*<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examples:\u00a0\u00a0__count\u00a0\u00a0__ix\u00a0\u00a0__s1\u00a0\u00a0<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type\u00a0names\u00a0and\u00a0template\u00a0formal-argument\u00a0names:\u00a0_[A-Z][^_].*<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examples:\u00a0\u00a0_Helper\u00a0\u00a0_CharT\u00a0\u00a0_N\u00a0<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Member\u00a0data\u00a0and\u00a0function\u00a0names:\u00a0_M_.*<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examples:\u00a0\u00a0_M_num_elements\u00a0\u00a0_M_initialize\u00a0()<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Static\u00a0data\u00a0members,\u00a0constants,\u00a0and\u00a0enumerations:\u00a0_S_.*<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Examples:\u00a0_S_max_elements\u00a0\u00a0_S_default_value<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Don't\u00a0use\u00a0names\u00a0in\u00a0the\u00a0same\u00a0scope\u00a0that\u00a0differ\u00a0only\u00a0in\u00a0the\u00a0prefix,\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.g.\u00a0_S_top\u00a0and\u00a0_M_top.\u00a0See\u00a0BADNAMES\u00a0for\u00a0a\u00a0list\u00a0of\u00a0forbidden\u00a0names.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(The\u00a0most\u00a0tempting\u00a0of\u00a0these\u00a0seem\u00a0to\u00a0be\u00a0and\u00a0\"_T\"\u00a0and\u00a0\"__sz\".)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Names\u00a0must\u00a0never\u00a0have\u00a0\"__\"\u00a0internally;\u00a0it\u00a0would\u00a0confuse\u00a0name<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unmanglers\u00a0on\u00a0some\u00a0targets.\u00a0Also,\u00a0never\u00a0use\u00a0\"__[0-9]\",\u00a0same\u00a0reason.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--------------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[BY\u00a0EXAMPLE]<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#ifndef\u00a0\u00a0_HEADER_<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#define\u00a0\u00a0_HEADER_\u00a01<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace\u00a0std<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0gribble<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble()\u00a0throw();<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble(const\u00a0gribble&amp;);<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0explicit\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble(int\u00a0__howmany);<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble&amp;\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0operator=(const\u00a0gribble&amp;);<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0~gribble()\u00a0throw\u00a0();<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Start\u00a0with\u00a0a\u00a0capital\u00a0letter,\u00a0end\u00a0with\u00a0a\u00a0period.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inline\u00a0void\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public_member(const\u00a0char*\u00a0__arg)\u00a0const;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0In-class\u00a0function\u00a0definitions\u00a0should\u00a0be\u00a0restricted\u00a0to\u00a0one-liners.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0one_line()\u00a0{\u00a0return\u00a00\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0two_lines(const\u00a0char*\u00a0arg)\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0return\u00a0strchr(arg,\u00a0'a');\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inline\u00a0int\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0three_lines();\u00a0\u00a0//\u00a0inline,\u00a0but\u00a0defined\u00a0below.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Note\u00a0indentation.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;typename\u00a0_Formal_argument&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public_template()\u00a0const\u00a0throw();<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;typename\u00a0_Iterator&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0other_template();<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0private:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0_Helper;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0_M_private_data;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0_M_more_stuff;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_Helper*\u00a0_M_helper;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0_M_private_function();<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enum\u00a0_Enum\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_S_one,\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_S_two\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0static\u00a0void\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0_S_initialize_library();<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0More-or-less-standard\u00a0language\u00a0features\u00a0described\u00a0by\u00a0lack,\u00a0not\u00a0presence.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#\u00a0ifndef\u00a0_G_NO_LONGLONG<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0extern\u00a0long\u00a0long\u00a0_G_global_with_a_good_long_name;\u00a0\u00a0//\u00a0avoid\u00a0globals!<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#\u00a0endif<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Avoid\u00a0in-class\u00a0inline\u00a0definitions,\u00a0define\u00a0separately;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0likewise\u00a0for\u00a0member\u00a0class\u00a0definitions:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inline\u00a0int<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble::public_member()\u00a0const<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0int\u00a0__local\u00a0=\u00a00;\u00a0return\u00a0__local;\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0gribble::_Helper<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0_M_stuff;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0friend\u00a0class\u00a0gribble;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0Names\u00a0beginning\u00a0with\u00a0\"__\":\u00a0only\u00a0for\u00a0arguments\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0\u00a0local\u00a0variables;\u00a0never\u00a0use\u00a0\"__\"\u00a0in\u00a0a\u00a0type\u00a0name,\u00a0or<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0\u00a0within\u00a0any\u00a0name;\u00a0never\u00a0use\u00a0\"__[0-9]\".<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#endif\u00a0/*\u00a0_HEADER_\u00a0*/<br />\n+<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace\u00a0std\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template&lt;typename\u00a0T&gt;\u00a0\u00a0//\u00a0notice:\u00a0\"typename\",\u00a0not\u00a0\"class\",\u00a0no\u00a0space<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0long_return_value_type&lt;with_many,\u00a0args&gt;\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function_name(char*\u00a0pointer,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\"char\u00a0*pointer\"\u00a0is\u00a0wrong.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char*\u00a0argument,\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0Reference&amp;\u00a0ref)<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0int\u00a0a_local;\u00a0\u00a0/*\u00a0wrong;\u00a0see\u00a0below.\u00a0*/<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(test)\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nested\u00a0code\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int\u00a0a_local\u00a0=\u00a00;\u00a0\u00a0//\u00a0declare\u00a0variable\u00a0at\u00a0first\u00a0use.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u00a0char\u00a0a,\u00a0b,\u00a0*p;\u00a0\u00a0\u00a0/*\u00a0wrong\u00a0*/<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char\u00a0a\u00a0=\u00a0'a';<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char\u00a0b\u00a0=\u00a0a\u00a0+\u00a01;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char*\u00a0c\u00a0=\u00a0\"abc\";\u00a0\u00a0//\u00a0each\u00a0variable\u00a0goes\u00a0on\u00a0its\u00a0own\u00a0line,\u00a0always.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0except\u00a0maybe\u00a0here...<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0(unsigned\u00a0i\u00a0=\u00a00,\u00a0mask\u00a0=\u00a01;\u00a0mask;\u00a0++i,\u00a0mask\u00a0&lt;&lt;=\u00a01)\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0...<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble::gribble()<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0_M_private_data(0),\u00a0_M_more_stuff(0),\u00a0_M_helper(0);<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\u00a0}<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0inline\u00a0int\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0gribble::three_lines()<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0doesn't\u00a0fit\u00a0in\u00a0one\u00a0line.<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0//\u00a0namespace\u00a0std<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_contributing.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas04.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Directory Layout and Source Conventions\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Documentation Style</td></tr></table></div></body></html>"}, {"sha": "ceb73d883461a0a40b4a52ddd4e681d60706a319", "filename": "libstdc++-v3/doc/html/manual/bk01apas04.html", "status": "added", "additions": 263, "deletions": 0, "changes": 263, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas04.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas04.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas04.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,263 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Documentation Style</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0Contributing\" /><link rel=\"prev\" href=\"bk01apas03.html\" title=\"Coding Style\" /><link rel=\"next\" href=\"bk01apas05.html\" title=\"Design Notes\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Documentation Style</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0A.\u00a0Contributing</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas05.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"contrib.doc_style\"></a>Documentation Style</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"doc_style.doxygen\"></a>Doxygen</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"doxygen.prereq\"></a>Prerequisites</h4></div></div></div><p>\n+\tPrerequisite tools are Bash 2.x,\n+\t<a class=\"ulink\" href=\"http://www.doxygen.org/\" target=\"_top\">Doxygen</a>, and\n+\tthe <a class=\"ulink\" href=\"http://www.gnu.org/software/coreutils/\" target=\"_top\">GNU\n+\tcoreutils</a>. (GNU versions of find, xargs, and possibly\n+\tsed and grep are used, just because the GNU versions make\n+\tthings very easy.)\n+      </p><p>\n+\tTo generate the pretty pictures and hierarchy\n+\tgraphs, the\n+\t<a class=\"ulink\" href=\"http://www.research.att.com/sw/tools/graphviz/download.html\" target=\"_top\">Graphviz</a>\n+\tpackage will need to be installed. \n+      </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"doxygen.rules\"></a>Generating the Doxygen Files</h4></div></div></div><p>\n+\tThe Makefile rules\n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-html-doxygen</code></strong></pre><p>\n+\tand \n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-xml-doxygen</code></strong></pre><p>\n+\tand \n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-man-doxygen</code></strong></pre><p>\n+\tin the libstdc++ build directory generate the HTML docs, the\n+\tXML docs, and the man pages.\n+      </p><p>\n+\tCareful observers will see that the Makefile rules simply call\n+\ta script from the source tree, <code class=\"filename\">run_doxygen</code>, which\n+\tdoes the actual work of running Doxygen and then (most\n+\timportantly) massaging the output files. If for some reason\n+\tyou prefer to not go through the Makefile, you can call this\n+\tscript directly. (Start by passing <code class=\"literal\">--help</code>.)\n+      </p><p>\n+\tIf you wish to tweak the Doxygen settings, do so by editing\n+\t<code class=\"filename\">doc/doxygen/user.cfg.in</code>. Notes to fellow\n+\tlibrary hackers are written in triple-# comments.\n+      </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"doxygen.markup\"></a>Markup</h4></div></div></div><p>\n+\tIn general, libstdc++ files should be formatted according to\n+\tthe rules found in the\n+\t<a class=\"link\" href=\"bk01apas03.html\" title=\"Coding Style\">Coding Standard</a>. Before\n+\tany doxygen-specific formatting tweaks are made, please try to\n+\tmake sure that the initial formatting is sound.\n+      </p><p>\n+\tAdding Doxygen markup to a file (informally called\n+\t\u201c<span class=\"quote\">doxygenating</span>\u201d) is very simple. The Doxygen manual can be\n+\tfound\n+\t<a class=\"ulink\" href=\"http://www.stack.nl/~dimitri/doxygen/download.html#latestman\" target=\"_top\">here</a>.\n+\tWe try to use a very-recent version of Doxygen.\n+      </p><p>\n+\tFor classes, use\n+\t<code class=\"classname\">deque</code>/<code class=\"classname\">vector</code>/<code class=\"classname\">list</code>\n+\tand <code class=\"classname\">std::pair</code> as examples.  For\n+\tfunctions, see their member functions, and the free functions\n+\tin <code class=\"filename\">stl_algobase.h</code>. Member functions of\n+\tother container-like types should read similarly to these\n+\tmember functions.\n+      </p><p>\n+\tThese points accompany the first list in section 3.1 of the\n+\tDoxygen manual:\n+      </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>Use the Javadoc style...</p></li><li><p>\n+\t    ...not the Qt style. The intermediate *'s are preferred.\n+\t  </p></li><li><p>\n+\t    Use the triple-slash style only for one-line comments (the\n+\t    \u201c<span class=\"quote\">brief</span>\u201d mode).  Very recent versions of Doxygen permit\n+\t    full-mode comments in triple-slash blocks, but the\n+\t    formatting still comes out wonky.\n+\t  </p></li><li><p>\n+\t    This is disgusting. Don't do this.\n+\t  </p></li></ol></div><p>\n+\tUse the @-style of commands, not the !-style. Please be\n+\tcareful about whitespace in your markup comments. Most of the\n+\ttime it doesn't matter; doxygen absorbs most whitespace, and\n+\tboth HTML and *roff are agnostic about whitespace. However,\n+\tin &lt;pre&gt; blocks and @code/@endcode sections, spacing can\n+\thave \u201c<span class=\"quote\">interesting</span>\u201d effects.\n+      </p><p>\n+\tUse either kind of grouping, as\n+\tappropriate. <code class=\"filename\">doxygroups.cc</code> exists for this\n+\tpurpose. See <code class=\"filename\">stl_iterator.h</code> for a good example\n+\tof the \u201c<span class=\"quote\">other</span>\u201d kind of grouping.\n+      </p><p>\n+\tPlease use markup tags like @p and @a when referring to things\n+\tsuch as the names of function parameters. Use @e for emphasis\n+\twhen necessary. Use @c to refer to other standard names.\n+\t(Examples of all these abound in the present code.)\n+      </p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"doc_style.docbook\"></a>Docbook</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"docbook.prereq\"></a>Prerequisites</h4></div></div></div><p>\n+\tEditing the DocBook sources requires an XML editor. Many\n+\texist: some noteable options\n+\tinclude <span class=\"command\"><strong>emacs</strong></span>, <span class=\"application\">Kate</span>,\n+\tor <span class=\"application\">Conglomerate</span>.\n+      </p><p>\n+\tSome editors support special \u201c<span class=\"quote\">XML Validation</span>\u201d\n+\tmodes that can validate the file as it is\n+\tproduced. Recommended is the <span class=\"command\"><strong>nXML Mode</strong></span>\n+\tfor <span class=\"command\"><strong>emacs</strong></span>.\n+      </p><p>\n+\tBesides an editor, additional DocBook files and XML tools are\n+\talso required.\n+      </p><p>\n+\tAccess to the DocBook stylesheets and DTD is required. The\n+\tstylesheets are usually packaged by vendor, in something\n+\tlike <code class=\"filename\">docbook-style-xsl</code>. The installation\n+\tdirectory for this package corresponds to\n+\tthe <code class=\"literal\">XSL_STYLE_DIR</code>\n+\tin <code class=\"filename\">doc/Makefile.am</code> and defaults\n+\tto <code class=\"filename\">/usr/share/sgml/docbook/xsl-stylesheets</code>.\n+      </p><p>\n+\tFor procesessing XML, an XML processor and some style\n+\tsheets are necessary. Defaults are <span class=\"command\"><strong>xsltproc</strong></span>\n+\tprovided by <code class=\"filename\">libxslt</code>.\n+      </p><p>\n+\tFor validating the XML document, you'll need\n+\tsomething like <span class=\"command\"><strong>xmllint</strong></span> and access to the\n+\tDocBook DTD. These are provided\n+\tby a vendor package like <code class=\"filename\">lixml2</code>.\n+      </p><p>\n+\tFor PDF output, something that transforms valid XML to PDF is\n+\trequired. Possible solutions include <span class=\"command\"><strong>xmlto</strong></span>,\n+\t<a class=\"ulink\" href=\"http://xmlgraphics.apache.org/fop/\" target=\"_top\">Apache\n+\tFOP</a>, or <span class=\"command\"><strong>prince</strong></span>. Other options are\n+\tlisted on the DocBook web <a class=\"ulink\" href=\"http://wiki.docbook.org/topic/DocBookPublishingTools\" target=\"_top\">pages</a>. Please\n+\tconsult the <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:libstdc++@gcc.gnu.org\">libstdc++@gcc.gnu.org</a>&gt;</code> list when\n+\tpreparing printed manuals for current best practice and suggestions.\n+      </p><p>\n+\tMake sure that the XML documentation and markup is valid for\n+\tany change. This can be done easily, with the validation rules\n+\tin the <code class=\"filename\">Makefile</code>, which is equivalent to doing: \n+      </p><pre class=\"screen\">\n+\t  <strong class=\"userinput\"><code>\n+xmllint --noout --valid <code class=\"filename\">xml/index.xml</code>\n+\t  </code></strong>\n+\t</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"docbook.rules\"></a>Generating the DocBook Files</h4></div></div></div><p>\n+\tThe Makefile rules\n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-html</code></strong></pre><p>\n+\tand \n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-pdf</code></strong></pre><p>\n+\tand \n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-xml-single</code></strong></pre><p>\n+\tand \n+      </p><pre class=\"screen\"><strong class=\"userinput\"><code>make doc-xml-validate</code></strong></pre><p>\n+\tin the libstdc++ build directory result respectively in the\n+\tfollowing: the generation of an HTML version of all the\n+\tdocumentation, a PDF version of the same, a single XML\n+\tdocument, and the results of validating the XML document.\n+      </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"docbook.examples\"></a>File Organization and Basics</h4></div></div></div><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"emphasis\"><em>Which\u00a0files\u00a0are\u00a0important</em></span><br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0All\u00a0Docbook\u00a0files\u00a0are\u00a0in\u00a0the\u00a0directory<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0libstdc++-v3/doc/xml<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Inside\u00a0this\u00a0directory,\u00a0the\u00a0files\u00a0of\u00a0importance:<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spine.xml\u00a0\u00a0\t-\u00a0index\u00a0to\u00a0documentation\u00a0set<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0manual/spine.xml\u00a0\u00a0-\u00a0index\u00a0to\u00a0manual<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0manual/*.xml\u00a0\u00a0\t-\u00a0individual\u00a0chapters\u00a0and\u00a0sections\u00a0of\u00a0the\u00a0manual<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0faq.xml\u00a0\u00a0\t\t-\u00a0index\u00a0to\u00a0FAQ<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0api.xml\u00a0\u00a0\t\t-\u00a0index\u00a0to\u00a0source\u00a0level\u00a0/\u00a0API\u00a0<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0All\u00a0*.txml\u00a0files\u00a0are\u00a0template\u00a0xml\u00a0files,\u00a0ie\u00a0otherwise\u00a0empty\u00a0files\u00a0with<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the\u00a0correct\u00a0structure,\u00a0suitable\u00a0for\u00a0filling\u00a0in\u00a0with\u00a0new\u00a0information.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"emphasis\"><em>Cannonical\u00a0Writing\u00a0Style</em></span><br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0member\u00a0function\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(via\u00a0C++\u00a0Templates,\u00a0Vandevoorde)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0class\u00a0in\u00a0namespace\u00a0std:\u00a0allocator,\u00a0not\u00a0std::allocator<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0header\u00a0file:\u00a0iostream,\u00a0not\u00a0&lt;iostream&gt;<br />\n+<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span class=\"emphasis\"><em>General\u00a0structure</em></span><br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;set&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;book&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/book&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;book&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;chapter&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/chapter&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/book&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;book&gt;\t<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;part&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;chapter&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;section&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/section&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;sect1&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/sect1&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;sect1&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;sect2&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/sect2&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/sect1&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/chapter&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;chapter&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/chapter&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/part&gt;\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/book&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/set&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"docbook.markup\"></a>Markup By Example</h4></div></div></div><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0HTML\u00a0to\u00a0XML\u00a0rough\u00a0equivalents<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;p&gt;\t\t\t&lt;para&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;pre&gt;\t\t\t&lt;computeroutput&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;pre&gt;\t\t\t&lt;programlisting&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;pre&gt;\t\t\t&lt;literallayout&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;ul&gt;\t\t\t&lt;itemizedlist&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;ol&gt;\t\t\t&lt;orderedlist&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;il&gt;\t\t\t&lt;listitem&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;dl&gt;\t\t\t&lt;variablelist&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;varlistentry&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;dt&gt;\u00a0\t\t\t\u00a0\u00a0&lt;term&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/dt&gt;\t\t\t\u00a0\u00a0&lt;/term&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;dd&gt;\u00a0\u00a0\t\t\t\u00a0\u00a0&lt;listitem&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/dt&gt;\t\t\t\u00a0\u00a0&lt;/listitem&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/varlistentry&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;a\u00a0href\t\t\t&lt;ulink\u00a0url<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;code&gt;\t\t\t&lt;literal&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;code&gt;\t\t\t&lt;programlisting&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;strong&gt;\t\t&lt;emphasis&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;em&gt;\t\t\t&lt;emphasis&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\t\t\t&lt;quote&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctype.h\t\t\t&lt;filename\u00a0class=\"headerfile\"&gt;&lt;/filename&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0build_dir\u00a0\u00a0\u00a0\t\t&lt;filename\u00a0class=\"directory\"&gt;path_to_build_dir&lt;/filename&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Finer\u00a0gradations\u00a0of\u00a0&lt;code&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;classname&gt;\t\t&lt;classname&gt;string&lt;/classname&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;classname&gt;vector&lt;&gt;&lt;/classname&gt;\t\t\t<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;function&gt;fs.clear()&lt;/function&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;structname&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;function&gt;\t\t&lt;function&gt;clear()&lt;/function&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;type&gt;\t\t\t&lt;type&gt;long\u00a0long&lt;/type&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;varname&gt;\t\t&lt;varname&gt;fs&lt;/varname&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;literal&gt;\t\t&lt;literal&gt;-Weffc++&lt;/literal&gt;\u00a0<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;literal&gt;rel_ops&lt;/literal&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;constant&gt;\t\t&lt;constant&gt;_GNU_SOURCE&lt;/constant&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;constant&gt;3.0&lt;/constant&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;filename&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;command&gt;\t\t&lt;command&gt;g++&lt;/command&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;errortext&gt;\t\t&lt;errortext&gt;foo\u00a0Concept\u00a0&lt;/errortext&gt;<br />\n+</p></div></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_contributing.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apas05.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Coding Style\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design Notes</td></tr></table></div></body></html>"}, {"sha": "27baae874135b89ee5e639188bc66613f718a723", "filename": "libstdc++-v3/doc/html/manual/bk01apas05.html", "status": "added", "additions": 857, "deletions": 0, "changes": 857, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas05.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas05.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apas05.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,857 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Design Notes</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0Contributing\" /><link rel=\"prev\" href=\"bk01apas04.html\" title=\"Documentation Style\" /><link rel=\"next\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Design Notes</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas04.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0A.\u00a0Contributing</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"appendix_porting.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"contrib.design_notes\"></a>Design Notes</h2></div></div></div><p>\n+  </p><div class=\"literallayout\"><p><br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0Library<br />\n+\u00a0\u00a0\u00a0\u00a0-----------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0This\u00a0paper\u00a0is\u00a0covers\u00a0two\u00a0major\u00a0areas:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Features\u00a0and\u00a0policies\u00a0not\u00a0mentioned\u00a0in\u00a0the\u00a0standard\u00a0that<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0quality\u00a0of\u00a0the\u00a0library\u00a0implementation\u00a0depends\u00a0on,\u00a0including<br />\n+\u00a0\u00a0\u00a0\u00a0extensions\u00a0and\u00a0\"implementation-defined\"\u00a0features;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Plans\u00a0for\u00a0required\u00a0but\u00a0unimplemented\u00a0library\u00a0features\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0optimizations\u00a0to\u00a0them.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Overhead<br />\n+\u00a0\u00a0\u00a0\u00a0--------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0standard\u00a0defines\u00a0a\u00a0large\u00a0library,\u00a0much\u00a0larger\u00a0than\u00a0the\u00a0standard<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0library.\u00a0A\u00a0naive\u00a0implementation\u00a0would\u00a0suffer\u00a0substantial\u00a0overhead<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0compile\u00a0time,\u00a0executable\u00a0size,\u00a0and\u00a0speed,\u00a0rendering\u00a0it\u00a0unusable<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0many\u00a0(particularly\u00a0embedded)\u00a0applications.\u00a0The\u00a0alternative\u00a0demands<br />\n+\u00a0\u00a0\u00a0\u00a0care\u00a0in\u00a0construction,\u00a0and\u00a0some\u00a0compiler\u00a0support,\u00a0but\u00a0there\u00a0is\u00a0no<br />\n+\u00a0\u00a0\u00a0\u00a0need\u00a0for\u00a0library\u00a0subsets.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0What\u00a0are\u00a0the\u00a0sources\u00a0of\u00a0this\u00a0overhead?\u00a0\u00a0There\u00a0are\u00a0four\u00a0main\u00a0causes:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0The\u00a0library\u00a0is\u00a0specified\u00a0almost\u00a0entirely\u00a0as\u00a0templates,\u00a0which<br />\n+\u00a0\u00a0\u00a0\u00a0with\u00a0current\u00a0compilers\u00a0must\u00a0be\u00a0included\u00a0in-line,\u00a0resulting\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0very\u00a0slow\u00a0builds\u00a0as\u00a0tens\u00a0or\u00a0hundreds\u00a0of\u00a0thousands\u00a0of\u00a0lines<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0function\u00a0definitions\u00a0are\u00a0read\u00a0for\u00a0each\u00a0user\u00a0source\u00a0file.<br />\n+\u00a0\u00a0\u00a0\u00a0Indeed,\u00a0the\u00a0entire\u00a0SGI\u00a0STL,\u00a0as\u00a0well\u00a0as\u00a0the\u00a0dos\u00a0Reis\u00a0valarray,<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0provided\u00a0purely\u00a0as\u00a0header\u00a0files,\u00a0largely\u00a0for\u00a0simplicity\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0porting.\u00a0Iostream/locale\u00a0is\u00a0(or\u00a0will\u00a0be)\u00a0as\u00a0large\u00a0again.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0The\u00a0library\u00a0is\u00a0very\u00a0flexible,\u00a0specifying\u00a0a\u00a0multitude\u00a0of\u00a0hooks<br />\n+\u00a0\u00a0\u00a0\u00a0where\u00a0users\u00a0can\u00a0insert\u00a0their\u00a0own\u00a0code\u00a0in\u00a0place\u00a0of\u00a0defaults.<br />\n+\u00a0\u00a0\u00a0\u00a0When\u00a0these\u00a0hooks\u00a0are\u00a0not\u00a0used,\u00a0any\u00a0time\u00a0and\u00a0code\u00a0expended\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0support\u00a0that\u00a0flexibility\u00a0is\u00a0wasted.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Templates\u00a0are\u00a0often\u00a0described\u00a0as\u00a0causing\u00a0to\u00a0\"code\u00a0bloat\".\u00a0In<br />\n+\u00a0\u00a0\u00a0\u00a0practice,\u00a0this\u00a0refers\u00a0(when\u00a0it\u00a0refers\u00a0to\u00a0anything\u00a0real)\u00a0to\u00a0several<br />\n+\u00a0\u00a0\u00a0\u00a0independent\u00a0processes.\u00a0First,\u00a0when\u00a0a\u00a0class\u00a0template\u00a0is\u00a0manually<br />\n+\u00a0\u00a0\u00a0\u00a0instantiated\u00a0in\u00a0its\u00a0entirely,\u00a0current\u00a0compilers\u00a0place\u00a0the\u00a0definitions<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0all\u00a0members\u00a0in\u00a0a\u00a0single\u00a0object\u00a0file,\u00a0so\u00a0that\u00a0a\u00a0program\u00a0linking<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0one\u00a0member\u00a0gets\u00a0definitions\u00a0of\u00a0all.\u00a0Second,\u00a0template\u00a0functions<br />\n+\u00a0\u00a0\u00a0\u00a0which\u00a0do\u00a0not\u00a0actually\u00a0depend\u00a0on\u00a0the\u00a0template\u00a0argument\u00a0are,\u00a0under<br />\n+\u00a0\u00a0\u00a0\u00a0current\u00a0compilers,\u00a0generated\u00a0anew\u00a0for\u00a0each\u00a0instantiation,\u00a0rather<br />\n+\u00a0\u00a0\u00a0\u00a0than\u00a0being\u00a0shared\u00a0with\u00a0other\u00a0instantiations.\u00a0Third,\u00a0some\u00a0of\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0flexibility\u00a0mentioned\u00a0above\u00a0comes\u00a0from\u00a0virtual\u00a0functions\u00a0(both\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0regular\u00a0classes\u00a0and\u00a0template\u00a0classes)\u00a0which\u00a0current\u00a0linkers\u00a0add<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0the\u00a0executable\u00a0file\u00a0even\u00a0when\u00a0they\u00a0manifestly\u00a0cannot\u00a0be\u00a0called.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0The\u00a0library\u00a0is\u00a0specified\u00a0to\u00a0use\u00a0a\u00a0language\u00a0feature,\u00a0exceptions,<br />\n+\u00a0\u00a0\u00a0\u00a0which\u00a0in\u00a0the\u00a0current\u00a0gcc\u00a0compiler\u00a0ABI\u00a0imposes\u00a0a\u00a0run\u00a0time\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0code\u00a0space\u00a0cost\u00a0to\u00a0handle\u00a0the\u00a0possibility\u00a0of\u00a0exceptions\u00a0even\u00a0when<br />\n+\u00a0\u00a0\u00a0\u00a0they\u00a0are\u00a0not\u00a0used.\u00a0Under\u00a0the\u00a0new\u00a0ABI\u00a0(accessed\u00a0with\u00a0-fnew-abi),<br />\n+\u00a0\u00a0\u00a0\u00a0there\u00a0is\u00a0a\u00a0space\u00a0overhead\u00a0and\u00a0a\u00a0small\u00a0reduction\u00a0in\u00a0code\u00a0efficiency<br />\n+\u00a0\u00a0\u00a0\u00a0resulting\u00a0from\u00a0lost\u00a0optimization\u00a0opportunities\u00a0associated\u00a0with<br />\n+\u00a0\u00a0\u00a0\u00a0non-local\u00a0branches\u00a0associated\u00a0with\u00a0exceptions.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0What\u00a0can\u00a0be\u00a0done\u00a0to\u00a0eliminate\u00a0this\u00a0overhead?\u00a0\u00a0A\u00a0variety\u00a0of\u00a0coding<br />\n+\u00a0\u00a0\u00a0\u00a0techniques,\u00a0and\u00a0compiler,\u00a0linker\u00a0and\u00a0library\u00a0improvements\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0extensions\u00a0may\u00a0be\u00a0used,\u00a0as\u00a0covered\u00a0below.\u00a0Most\u00a0are\u00a0not\u00a0difficult,<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0some\u00a0are\u00a0already\u00a0implemented\u00a0in\u00a0varying\u00a0degrees.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Overhead:\u00a0Compilation\u00a0Time<br />\n+\u00a0\u00a0\u00a0\u00a0--------------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Providing\u00a0\"ready-instantiated\"\u00a0template\u00a0code\u00a0in\u00a0object\u00a0code\u00a0archives<br />\n+\u00a0\u00a0\u00a0\u00a0allows\u00a0us\u00a0to\u00a0avoid\u00a0generating\u00a0and\u00a0optimizing\u00a0template\u00a0instantiations<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0each\u00a0compilation\u00a0unit\u00a0which\u00a0uses\u00a0them.\u00a0However,\u00a0the\u00a0number\u00a0of\u00a0such<br />\n+\u00a0\u00a0\u00a0\u00a0instantiations\u00a0that\u00a0are\u00a0useful\u00a0to\u00a0provide\u00a0is\u00a0limited,\u00a0and\u00a0anyway\u00a0this<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0not\u00a0enough,\u00a0by\u00a0itself,\u00a0to\u00a0minimize\u00a0compilation\u00a0time.\u00a0In\u00a0particular,<br />\n+\u00a0\u00a0\u00a0\u00a0it\u00a0does\u00a0not\u00a0reduce\u00a0time\u00a0spent\u00a0parsing\u00a0conforming\u00a0headers.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Quicker\u00a0header\u00a0parsing\u00a0will\u00a0depend\u00a0on\u00a0library\u00a0extensions\u00a0and\u00a0compiler<br />\n+\u00a0\u00a0\u00a0\u00a0improvements.\u00a0\u00a0One\u00a0approach\u00a0is\u00a0some\u00a0variation\u00a0on\u00a0the\u00a0techniques<br />\n+\u00a0\u00a0\u00a0\u00a0previously\u00a0marketed\u00a0as\u00a0\"pre-compiled\u00a0headers\",\u00a0now\u00a0standardized\u00a0as<br />\n+\u00a0\u00a0\u00a0\u00a0support\u00a0for\u00a0the\u00a0\"export\"\u00a0keyword.\u00a0\"Exported\"\u00a0template\u00a0definitions<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0be\u00a0placed\u00a0(once)\u00a0in\u00a0a\u00a0\"repository\"\u00a0--\u00a0really\u00a0just\u00a0a\u00a0library,\u00a0but<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0template\u00a0definitions\u00a0rather\u00a0than\u00a0object\u00a0code\u00a0--\u00a0to\u00a0be\u00a0drawn\u00a0upon<br />\n+\u00a0\u00a0\u00a0\u00a0at\u00a0link\u00a0time\u00a0when\u00a0an\u00a0instantiation\u00a0is\u00a0needed,\u00a0rather\u00a0than\u00a0placed\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0header\u00a0files\u00a0to\u00a0be\u00a0parsed\u00a0along\u00a0with\u00a0every\u00a0compilation\u00a0unit.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Until\u00a0\"export\"\u00a0is\u00a0implemented\u00a0we\u00a0can\u00a0put\u00a0some\u00a0of\u00a0the\u00a0lengthy\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0definitions\u00a0in\u00a0#if\u00a0guards\u00a0or\u00a0alternative\u00a0headers\u00a0so\u00a0that\u00a0users\u00a0can\u00a0skip<br />\n+\u00a0\u00a0\u00a0\u00a0over\u00a0the\u00a0full\u00a0definitions\u00a0when\u00a0they\u00a0need\u00a0only\u00a0the\u00a0ready-instantiated<br />\n+\u00a0\u00a0\u00a0\u00a0specializations.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0To\u00a0be\u00a0precise,\u00a0this\u00a0means\u00a0that\u00a0certain\u00a0headers\u00a0which\u00a0define<br />\n+\u00a0\u00a0\u00a0\u00a0templates\u00a0which\u00a0users\u00a0normally\u00a0use\u00a0only\u00a0for\u00a0certain\u00a0arguments<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0be\u00a0instrumented\u00a0to\u00a0avoid\u00a0exposing\u00a0the\u00a0template\u00a0definitions<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0the\u00a0compiler\u00a0unless\u00a0a\u00a0macro\u00a0is\u00a0defined.\u00a0For\u00a0example,\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;string&gt;,\u00a0we\u00a0might\u00a0have:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0template\u00a0&lt;class\u00a0_CharT,\u00a0...\u00a0&gt;\u00a0class\u00a0basic_string\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0...\u00a0//\u00a0member\u00a0declarations<br />\n+\u00a0\u00a0\u00a0\u00a0};<br />\n+\u00a0\u00a0\u00a0\u00a0...\u00a0//\u00a0operator\u00a0declarations<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0#ifdef\u00a0_STRICT_ISO_<br />\n+\u00a0\u00a0\u00a0\u00a0#\u00a0if\u00a0_G_NO_TEMPLATE_EXPORT<br />\n+\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0include\u00a0&lt;bits/std_locale.h&gt;\u00a0\u00a0//\u00a0headers\u00a0needed\u00a0by\u00a0definitions<br />\n+\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0...<br />\n+\u00a0\u00a0\u00a0\u00a0#\u00a0\u00a0\u00a0include\u00a0&lt;bits/string.tcc&gt;\u00a0\u00a0//\u00a0member\u00a0and\u00a0global\u00a0template\u00a0definitions.<br />\n+\u00a0\u00a0\u00a0\u00a0#\u00a0endif<br />\n+\u00a0\u00a0\u00a0\u00a0#endif<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Users\u00a0who\u00a0compile\u00a0without\u00a0specifying\u00a0a\u00a0strict-ISO-conforming\u00a0flag<br />\n+\u00a0\u00a0\u00a0\u00a0would\u00a0not\u00a0see\u00a0many\u00a0of\u00a0the\u00a0template\u00a0definitions\u00a0they\u00a0now\u00a0see,\u00a0and\u00a0rely<br />\n+\u00a0\u00a0\u00a0\u00a0instead\u00a0on\u00a0ready-instantiated\u00a0specializations\u00a0in\u00a0the\u00a0library.\u00a0This<br />\n+\u00a0\u00a0\u00a0\u00a0technique\u00a0would\u00a0be\u00a0useful\u00a0for\u00a0the\u00a0following\u00a0substantial\u00a0components:<br />\n+\u00a0\u00a0\u00a0\u00a0string,\u00a0locale/iostreams,\u00a0valarray.\u00a0It\u00a0would\u00a0*not*\u00a0be\u00a0useful\u00a0or<br />\n+\u00a0\u00a0\u00a0\u00a0usable\u00a0with\u00a0the\u00a0following:\u00a0containers,\u00a0algorithms,\u00a0iterators,<br />\n+\u00a0\u00a0\u00a0\u00a0allocator.\u00a0Since\u00a0these\u00a0constitute\u00a0a\u00a0large\u00a0(though\u00a0decreasing)<br />\n+\u00a0\u00a0\u00a0\u00a0fraction\u00a0of\u00a0the\u00a0library,\u00a0the\u00a0benefit\u00a0the\u00a0technique\u00a0offers\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0limited.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0language\u00a0specifies\u00a0the\u00a0semantics\u00a0of\u00a0the\u00a0\"export\"\u00a0keyword,\u00a0but<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0gcc\u00a0compiler\u00a0does\u00a0not\u00a0yet\u00a0support\u00a0it.\u00a0When\u00a0it\u00a0does,\u00a0problems<br />\n+\u00a0\u00a0\u00a0\u00a0with\u00a0large\u00a0template\u00a0inclusions\u00a0can\u00a0largely\u00a0disappear,\u00a0given\u00a0some<br />\n+\u00a0\u00a0\u00a0\u00a0minor\u00a0library\u00a0reorganization,\u00a0along\u00a0with\u00a0the\u00a0need\u00a0for\u00a0the\u00a0apparatus<br />\n+\u00a0\u00a0\u00a0\u00a0described\u00a0above.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Overhead:\u00a0Flexibility\u00a0Cost<br />\n+\u00a0\u00a0\u00a0\u00a0--------------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0library\u00a0offers\u00a0many\u00a0places\u00a0where\u00a0users\u00a0can\u00a0specify\u00a0operations<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0be\u00a0performed\u00a0by\u00a0the\u00a0library\u00a0in\u00a0place\u00a0of\u00a0defaults.\u00a0Sometimes<br />\n+\u00a0\u00a0\u00a0\u00a0this\u00a0seems\u00a0to\u00a0require\u00a0that\u00a0the\u00a0library\u00a0use\u00a0a\u00a0more-roundabout,\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0possibly\u00a0slower,\u00a0way\u00a0to\u00a0accomplish\u00a0the\u00a0default\u00a0requirements\u00a0than<br />\n+\u00a0\u00a0\u00a0\u00a0would\u00a0be\u00a0used\u00a0otherwise.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0primary\u00a0protection\u00a0against\u00a0this\u00a0overhead\u00a0is\u00a0thorough\u00a0compiler<br />\n+\u00a0\u00a0\u00a0\u00a0optimization,\u00a0to\u00a0crush\u00a0out\u00a0layers\u00a0of\u00a0inline\u00a0function\u00a0interfaces.<br />\n+\u00a0\u00a0\u00a0\u00a0Kuck\u00a0&amp;\u00a0Associates\u00a0has\u00a0demonstrated\u00a0the\u00a0practicality\u00a0of\u00a0this\u00a0kind<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0optimization.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0second\u00a0line\u00a0of\u00a0defense\u00a0against\u00a0this\u00a0overhead\u00a0is\u00a0explicit<br />\n+\u00a0\u00a0\u00a0\u00a0specialization.\u00a0By\u00a0defining\u00a0helper\u00a0function\u00a0templates,\u00a0and\u00a0writing<br />\n+\u00a0\u00a0\u00a0\u00a0specialized\u00a0code\u00a0for\u00a0the\u00a0default\u00a0case,\u00a0overhead\u00a0can\u00a0be\u00a0eliminated<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0that\u00a0case\u00a0without\u00a0sacrificing\u00a0flexibility.\u00a0This\u00a0takes\u00a0full<br />\n+\u00a0\u00a0\u00a0\u00a0advantage\u00a0of\u00a0any\u00a0ability\u00a0of\u00a0the\u00a0optimizer\u00a0to\u00a0crush\u00a0out\u00a0degenerate<br />\n+\u00a0\u00a0\u00a0\u00a0code.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0library\u00a0specifies\u00a0many\u00a0virtual\u00a0functions\u00a0which\u00a0current\u00a0linkers<br />\n+\u00a0\u00a0\u00a0\u00a0load\u00a0even\u00a0when\u00a0they\u00a0cannot\u00a0be\u00a0called.\u00a0Some\u00a0minor\u00a0improvements\u00a0to\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0compiler\u00a0and\u00a0to\u00a0ld\u00a0would\u00a0eliminate\u00a0any\u00a0such\u00a0overhead\u00a0by\u00a0simply<br />\n+\u00a0\u00a0\u00a0\u00a0omitting\u00a0virtual\u00a0functions\u00a0that\u00a0the\u00a0complete\u00a0program\u00a0does\u00a0not\u00a0call.<br />\n+\u00a0\u00a0\u00a0\u00a0A\u00a0prototype\u00a0of\u00a0this\u00a0work\u00a0has\u00a0already\u00a0been\u00a0done.\u00a0For\u00a0targets\u00a0where<br />\n+\u00a0\u00a0\u00a0\u00a0GNU\u00a0ld\u00a0is\u00a0not\u00a0used,\u00a0a\u00a0\"pre-linker\"\u00a0could\u00a0do\u00a0the\u00a0same\u00a0job.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0main\u00a0areas\u00a0in\u00a0the\u00a0standard\u00a0interface\u00a0where\u00a0user\u00a0flexibility<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0result\u00a0in\u00a0overhead\u00a0are:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Allocators:\u00a0\u00a0Containers\u00a0are\u00a0specified\u00a0to\u00a0use\u00a0user-definable<br />\n+\u00a0\u00a0\u00a0\u00a0allocator\u00a0types\u00a0and\u00a0objects,\u00a0making\u00a0tuning\u00a0for\u00a0the\u00a0container<br />\n+\u00a0\u00a0\u00a0\u00a0characteristics\u00a0tricky.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Locales:\u00a0the\u00a0standard\u00a0specifies\u00a0locale\u00a0objects\u00a0used\u00a0to\u00a0implement<br />\n+\u00a0\u00a0\u00a0\u00a0iostream\u00a0operations,\u00a0involving\u00a0many\u00a0virtual\u00a0functions\u00a0which\u00a0use<br />\n+\u00a0\u00a0\u00a0\u00a0streambuf\u00a0iterators.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Algorithms\u00a0and\u00a0containers:\u00a0these\u00a0may\u00a0be\u00a0instantiated\u00a0on\u00a0any\u00a0type,<br />\n+\u00a0\u00a0\u00a0\u00a0frequently\u00a0duplicating\u00a0code\u00a0for\u00a0identical\u00a0operations.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-\u00a0Iostreams\u00a0and\u00a0strings:\u00a0users\u00a0are\u00a0permitted\u00a0to\u00a0use\u00a0these\u00a0on\u00a0their<br />\n+\u00a0\u00a0\u00a0\u00a0own\u00a0types,\u00a0and\u00a0specify\u00a0the\u00a0operations\u00a0the\u00a0stream\u00a0must\u00a0use\u00a0on\u00a0these<br />\n+\u00a0\u00a0\u00a0\u00a0types.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Note\u00a0that\u00a0these\u00a0sources\u00a0of\u00a0overhead\u00a0are\u00a0_avoidable_.\u00a0The\u00a0techniques<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0avoid\u00a0them\u00a0are\u00a0covered\u00a0below.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Code\u00a0Bloat<br />\n+\u00a0\u00a0\u00a0\u00a0----------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0In\u00a0the\u00a0SGI\u00a0STL,\u00a0and\u00a0in\u00a0some\u00a0other\u00a0headers,\u00a0many\u00a0of\u00a0the\u00a0templates<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0defined\u00a0\"inline\"\u00a0--\u00a0either\u00a0explicitly\u00a0or\u00a0by\u00a0their\u00a0placement<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0class\u00a0definitions\u00a0--\u00a0which\u00a0should\u00a0not\u00a0be\u00a0inline.\u00a0This\u00a0is\u00a0a<br />\n+\u00a0\u00a0\u00a0\u00a0source\u00a0of\u00a0code\u00a0bloat.\u00a0Matt\u00a0had\u00a0remarked\u00a0that\u00a0he\u00a0was\u00a0relying\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0compiler\u00a0to\u00a0recognize\u00a0what\u00a0was\u00a0too\u00a0big\u00a0to\u00a0benefit\u00a0from\u00a0inlining,<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0generate\u00a0it\u00a0out-of-line\u00a0automatically.\u00a0However,\u00a0this\u00a0also\u00a0can<br />\n+\u00a0\u00a0\u00a0\u00a0result\u00a0in\u00a0code\u00a0bloat\u00a0except\u00a0where\u00a0the\u00a0linker\u00a0can\u00a0eliminate\u00a0the\u00a0extra<br />\n+\u00a0\u00a0\u00a0\u00a0copies.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Fixing\u00a0these\u00a0cases\u00a0will\u00a0require\u00a0an\u00a0audit\u00a0of\u00a0all\u00a0inline\u00a0functions<br />\n+\u00a0\u00a0\u00a0\u00a0defined\u00a0in\u00a0the\u00a0library\u00a0to\u00a0determine\u00a0which\u00a0merit\u00a0inlining,\u00a0and\u00a0moving<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0rest\u00a0out\u00a0of\u00a0line.\u00a0This\u00a0is\u00a0an\u00a0issue\u00a0mainly\u00a0in\u00a0chapters\u00a023,\u00a025,\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a027.\u00a0Of\u00a0course\u00a0it\u00a0can\u00a0be\u00a0done\u00a0incrementally,\u00a0and\u00a0we\u00a0should\u00a0generally<br />\n+\u00a0\u00a0\u00a0\u00a0accept\u00a0patches\u00a0that\u00a0move\u00a0large\u00a0functions\u00a0out\u00a0of\u00a0line\u00a0and\u00a0into\u00a0\".tcc\"<br />\n+\u00a0\u00a0\u00a0\u00a0files,\u00a0which\u00a0can\u00a0later\u00a0be\u00a0pulled\u00a0into\u00a0a\u00a0repository.\u00a0Compiler/linker<br />\n+\u00a0\u00a0\u00a0\u00a0improvements\u00a0to\u00a0recognize\u00a0very\u00a0large\u00a0inline\u00a0functions\u00a0and\u00a0move\u00a0them<br />\n+\u00a0\u00a0\u00a0\u00a0out-of-line,\u00a0but\u00a0shared\u00a0among\u00a0compilation\u00a0units,\u00a0could\u00a0make\u00a0this<br />\n+\u00a0\u00a0\u00a0\u00a0work\u00a0unnecessary.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Pre-instantiating\u00a0template\u00a0specializations\u00a0currently\u00a0produces\u00a0large<br />\n+\u00a0\u00a0\u00a0\u00a0amounts\u00a0of\u00a0dead\u00a0code\u00a0which\u00a0bloats\u00a0statically\u00a0linked\u00a0programs.\u00a0The<br />\n+\u00a0\u00a0\u00a0\u00a0current\u00a0state\u00a0of\u00a0the\u00a0static\u00a0library,\u00a0libstdc++.a,\u00a0is\u00a0intolerable\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0this\u00a0account,\u00a0and\u00a0will\u00a0fuel\u00a0further\u00a0confused\u00a0speculation\u00a0about\u00a0a\u00a0need<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0a\u00a0library\u00a0\"subset\".\u00a0A\u00a0compiler\u00a0improvement\u00a0that\u00a0treats\u00a0each<br />\n+\u00a0\u00a0\u00a0\u00a0instantiated\u00a0function\u00a0as\u00a0a\u00a0separate\u00a0object\u00a0file,\u00a0for\u00a0linking\u00a0purposes,<br />\n+\u00a0\u00a0\u00a0\u00a0would\u00a0be\u00a0one\u00a0solution\u00a0to\u00a0this\u00a0problem.\u00a0An\u00a0alternative\u00a0would\u00a0be\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0split\u00a0up\u00a0the\u00a0manual\u00a0instantiation\u00a0files\u00a0into\u00a0dozens\u00a0upon\u00a0dozens\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0little\u00a0files,\u00a0each\u00a0compiled\u00a0separately,\u00a0but\u00a0an\u00a0abortive\u00a0attempt\u00a0at<br />\n+\u00a0\u00a0\u00a0\u00a0this\u00a0was\u00a0done\u00a0for\u00a0&lt;string&gt;\u00a0and,\u00a0though\u00a0it\u00a0is\u00a0far\u00a0from\u00a0complete,\u00a0it<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0already\u00a0a\u00a0nuisance.\u00a0A\u00a0better\u00a0interim\u00a0solution\u00a0(just\u00a0until\u00a0we\u00a0have<br />\n+\u00a0\u00a0\u00a0\u00a0\"export\")\u00a0is\u00a0badly\u00a0needed.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0When\u00a0building\u00a0a\u00a0shared\u00a0library,\u00a0the\u00a0current\u00a0compiler/linker\u00a0cannot<br />\n+\u00a0\u00a0\u00a0\u00a0automatically\u00a0generate\u00a0the\u00a0instantiatiations\u00a0needed.\u00a0This\u00a0creates\u00a0a<br />\n+\u00a0\u00a0\u00a0\u00a0miserable\u00a0situation;\u00a0it\u00a0means\u00a0any\u00a0time\u00a0something\u00a0is\u00a0changed\u00a0in\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0library,\u00a0before\u00a0a\u00a0shared\u00a0library\u00a0can\u00a0be\u00a0built\u00a0someone\u00a0must\u00a0manually<br />\n+\u00a0\u00a0\u00a0\u00a0copy\u00a0the\u00a0declarations\u00a0of\u00a0all\u00a0templates\u00a0that\u00a0are\u00a0needed\u00a0by\u00a0other\u00a0parts<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0the\u00a0library\u00a0to\u00a0an\u00a0\"instantiation\"\u00a0file,\u00a0and\u00a0add\u00a0it\u00a0to\u00a0the\u00a0build<br />\n+\u00a0\u00a0\u00a0\u00a0system\u00a0to\u00a0be\u00a0compiled\u00a0and\u00a0linked\u00a0to\u00a0the\u00a0library.\u00a0This\u00a0process\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0readily\u00a0automated,\u00a0and\u00a0should\u00a0be\u00a0automated\u00a0as\u00a0soon\u00a0as\u00a0possible.<br />\n+\u00a0\u00a0\u00a0\u00a0Users\u00a0building\u00a0their\u00a0own\u00a0shared\u00a0libraries\u00a0experience\u00a0identical<br />\n+\u00a0\u00a0\u00a0\u00a0frustrations.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Sharing\u00a0common\u00a0aspects\u00a0of\u00a0template\u00a0definitions\u00a0among\u00a0instantiations<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0radically\u00a0reduce\u00a0code\u00a0bloat.\u00a0The\u00a0compiler\u00a0could\u00a0help\u00a0a\u00a0great<br />\n+\u00a0\u00a0\u00a0\u00a0deal\u00a0here\u00a0by\u00a0recognizing\u00a0when\u00a0a\u00a0function\u00a0depends\u00a0on\u00a0nothing\u00a0about<br />\n+\u00a0\u00a0\u00a0\u00a0a\u00a0template\u00a0parameter,\u00a0or\u00a0only\u00a0on\u00a0its\u00a0size,\u00a0and\u00a0giving\u00a0the\u00a0resulting<br />\n+\u00a0\u00a0\u00a0\u00a0function\u00a0a\u00a0link-name\u00a0\"equate\"\u00a0that\u00a0allows\u00a0it\u00a0to\u00a0be\u00a0shared\u00a0with\u00a0other<br />\n+\u00a0\u00a0\u00a0\u00a0instantiations.\u00a0Implementation\u00a0code\u00a0could\u00a0take\u00a0advantage\u00a0of\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0capability\u00a0by\u00a0factoring\u00a0out\u00a0code\u00a0that\u00a0does\u00a0not\u00a0depend\u00a0on\u00a0the\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0argument\u00a0into\u00a0separate\u00a0functions\u00a0to\u00a0be\u00a0merged\u00a0by\u00a0the\u00a0compiler.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Until\u00a0such\u00a0a\u00a0compiler\u00a0optimization\u00a0is\u00a0implemented,\u00a0much\u00a0can\u00a0be\u00a0done<br />\n+\u00a0\u00a0\u00a0\u00a0manually\u00a0(if\u00a0tediously)\u00a0in\u00a0this\u00a0direction.\u00a0One\u00a0such\u00a0optimization\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0derive\u00a0class\u00a0templates\u00a0from\u00a0non-template\u00a0classes,\u00a0and\u00a0move\u00a0as\u00a0much<br />\n+\u00a0\u00a0\u00a0\u00a0implementation\u00a0as\u00a0possible\u00a0into\u00a0the\u00a0base\u00a0class.\u00a0Another\u00a0is\u00a0to\u00a0partial-<br />\n+\u00a0\u00a0\u00a0\u00a0specialize\u00a0certain\u00a0common\u00a0instantiations,\u00a0such\u00a0as\u00a0vector&lt;T*&gt;,\u00a0to\u00a0share<br />\n+\u00a0\u00a0\u00a0\u00a0code\u00a0for\u00a0instantiations\u00a0on\u00a0all\u00a0types\u00a0T.\u00a0While\u00a0these\u00a0techniques\u00a0work,<br />\n+\u00a0\u00a0\u00a0\u00a0they\u00a0are\u00a0far\u00a0from\u00a0the\u00a0complete\u00a0solution\u00a0that\u00a0a\u00a0compiler\u00a0improvement<br />\n+\u00a0\u00a0\u00a0\u00a0would\u00a0afford.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Overhead:\u00a0Expensive\u00a0Language\u00a0Features<br />\n+\u00a0\u00a0\u00a0\u00a0-------------------------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0main\u00a0\"expensive\"\u00a0language\u00a0feature\u00a0used\u00a0in\u00a0the\u00a0standard\u00a0library<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0exception\u00a0support,\u00a0which\u00a0requires\u00a0compiling\u00a0in\u00a0cleanup\u00a0code\u00a0with<br />\n+\u00a0\u00a0\u00a0\u00a0static\u00a0table\u00a0data\u00a0to\u00a0locate\u00a0it,\u00a0and\u00a0linking\u00a0in\u00a0library\u00a0code\u00a0to\u00a0use<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0table.\u00a0For\u00a0small\u00a0embedded\u00a0programs\u00a0the\u00a0amount\u00a0of\u00a0such\u00a0library<br />\n+\u00a0\u00a0\u00a0\u00a0code\u00a0and\u00a0table\u00a0data\u00a0is\u00a0assumed\u00a0by\u00a0some\u00a0to\u00a0be\u00a0excessive.\u00a0Under\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0\"new\"\u00a0ABI\u00a0this\u00a0perception\u00a0is\u00a0generally\u00a0exaggerated,\u00a0although\u00a0in\u00a0some<br />\n+\u00a0\u00a0\u00a0\u00a0cases\u00a0it\u00a0may\u00a0actually\u00a0be\u00a0excessive.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0To\u00a0implement\u00a0a\u00a0library\u00a0which\u00a0does\u00a0not\u00a0use\u00a0exceptions\u00a0directly\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0not\u00a0difficult\u00a0given\u00a0minor\u00a0compiler\u00a0support\u00a0(to\u00a0\"turn\u00a0off\"\u00a0exceptions<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0ignore\u00a0exception\u00a0constructs),\u00a0and\u00a0results\u00a0in\u00a0no\u00a0great\u00a0library<br />\n+\u00a0\u00a0\u00a0\u00a0maintenance\u00a0difficulties.\u00a0To\u00a0be\u00a0precise,\u00a0given\u00a0\"-fno-exceptions\",<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0compiler\u00a0should\u00a0treat\u00a0\"try\"\u00a0blocks\u00a0as\u00a0ordinary\u00a0blocks,\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0\"catch\"\u00a0blocks\u00a0as\u00a0dead\u00a0code\u00a0to\u00a0ignore\u00a0or\u00a0eliminate.\u00a0Compiler<br />\n+\u00a0\u00a0\u00a0\u00a0support\u00a0is\u00a0not\u00a0strictly\u00a0necessary,\u00a0except\u00a0in\u00a0the\u00a0case\u00a0of\u00a0\"function<br />\n+\u00a0\u00a0\u00a0\u00a0try\u00a0blocks\";\u00a0otherwise\u00a0the\u00a0following\u00a0macros\u00a0almost\u00a0suffice:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0#define\u00a0throw(X)<br />\n+\u00a0\u00a0\u00a0\u00a0#define\u00a0try\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(true)<br />\n+\u00a0\u00a0\u00a0\u00a0#define\u00a0catch(X)\u00a0else\u00a0if\u00a0(false)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0However,\u00a0there\u00a0may\u00a0be\u00a0a\u00a0need\u00a0to\u00a0use\u00a0function\u00a0try\u00a0blocks\u00a0in\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0library\u00a0implementation,\u00a0and\u00a0use\u00a0of\u00a0macros\u00a0in\u00a0this\u00a0way\u00a0can\u00a0make<br />\n+\u00a0\u00a0\u00a0\u00a0correct\u00a0diagnostics\u00a0impossible.\u00a0Furthermore,\u00a0use\u00a0of\u00a0this\u00a0scheme<br />\n+\u00a0\u00a0\u00a0\u00a0would\u00a0require\u00a0the\u00a0library\u00a0to\u00a0call\u00a0a\u00a0function\u00a0to\u00a0re-throw\u00a0exceptions<br />\n+\u00a0\u00a0\u00a0\u00a0from\u00a0a\u00a0try\u00a0block.\u00a0Implementing\u00a0the\u00a0above\u00a0semantics\u00a0in\u00a0the\u00a0compiler<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0preferable.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Given\u00a0the\u00a0support\u00a0above\u00a0(however\u00a0implemented)\u00a0it\u00a0only\u00a0remains\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0replace\u00a0code\u00a0that\u00a0\"throws\"\u00a0with\u00a0a\u00a0call\u00a0to\u00a0a\u00a0well-documented\u00a0\"handler\"<br />\n+\u00a0\u00a0\u00a0\u00a0function\u00a0in\u00a0a\u00a0separate\u00a0compilation\u00a0unit\u00a0which\u00a0may\u00a0be\u00a0replaced\u00a0by<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0user.\u00a0The\u00a0main\u00a0source\u00a0of\u00a0exceptions\u00a0that\u00a0would\u00a0be\u00a0difficult<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0users\u00a0to\u00a0avoid\u00a0is\u00a0memory\u00a0allocation\u00a0failures,\u00a0but\u00a0users\u00a0can<br />\n+\u00a0\u00a0\u00a0\u00a0define\u00a0their\u00a0own\u00a0memory\u00a0allocation\u00a0primitives\u00a0that\u00a0never\u00a0throw.<br />\n+\u00a0\u00a0\u00a0\u00a0Otherwise,\u00a0the\u00a0complete\u00a0list\u00a0of\u00a0such\u00a0handlers,\u00a0and\u00a0which\u00a0library<br />\n+\u00a0\u00a0\u00a0\u00a0functions\u00a0may\u00a0call\u00a0them,\u00a0would\u00a0be\u00a0needed\u00a0for\u00a0users\u00a0to\u00a0be\u00a0able\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0implement\u00a0the\u00a0necessary\u00a0substitutes.\u00a0(Fortunately,\u00a0they\u00a0have\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0source\u00a0code.)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Opportunities<br />\n+\u00a0\u00a0\u00a0\u00a0-------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0template\u00a0capabilities\u00a0of\u00a0C++\u00a0offer\u00a0enormous\u00a0opportunities\u00a0for<br />\n+\u00a0\u00a0\u00a0\u00a0optimizing\u00a0common\u00a0library\u00a0operations,\u00a0well\u00a0beyond\u00a0what\u00a0would\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0considered\u00a0\"eliminating\u00a0overhead\".\u00a0In\u00a0particular,\u00a0many\u00a0operations<br />\n+\u00a0\u00a0\u00a0\u00a0done\u00a0in\u00a0Glibc\u00a0with\u00a0macros\u00a0that\u00a0depend\u00a0on\u00a0proprietary\u00a0language<br />\n+\u00a0\u00a0\u00a0\u00a0extensions\u00a0can\u00a0be\u00a0implemented\u00a0in\u00a0pristine\u00a0Standard\u00a0C++.\u00a0For\u00a0example,<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0chapter\u00a025\u00a0algorithms,\u00a0and\u00a0even\u00a0C\u00a0library\u00a0functions\u00a0such\u00a0as\u00a0strchr,<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0be\u00a0specialized\u00a0for\u00a0the\u00a0case\u00a0of\u00a0static\u00a0arrays\u00a0of\u00a0known\u00a0(small)\u00a0size.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Detailed\u00a0optimization\u00a0opportunities\u00a0are\u00a0identified\u00a0below\u00a0where<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0component\u00a0where\u00a0they\u00a0would\u00a0appear\u00a0is\u00a0discussed.\u00a0Of\u00a0course\u00a0new<br />\n+\u00a0\u00a0\u00a0\u00a0opportunities\u00a0will\u00a0be\u00a0identified\u00a0during\u00a0implementation.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Unimplemented\u00a0Required\u00a0Library\u00a0Features<br />\n+\u00a0\u00a0\u00a0\u00a0---------------------------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0standard\u00a0specifies\u00a0hundreds\u00a0of\u00a0components,\u00a0grouped\u00a0broadly\u00a0by<br />\n+\u00a0\u00a0\u00a0\u00a0chapter.\u00a0These\u00a0are\u00a0listed\u00a0in\u00a0excruciating\u00a0detail\u00a0in\u00a0the\u00a0CHECKLIST<br />\n+\u00a0\u00a0\u00a0\u00a0file.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a017\u00a0general<br />\n+\u00a0\u00a0\u00a0\u00a018\u00a0support<br />\n+\u00a0\u00a0\u00a0\u00a019\u00a0diagnostics<br />\n+\u00a0\u00a0\u00a0\u00a020\u00a0utilities<br />\n+\u00a0\u00a0\u00a0\u00a021\u00a0string<br />\n+\u00a0\u00a0\u00a0\u00a022\u00a0locale<br />\n+\u00a0\u00a0\u00a0\u00a023\u00a0containers<br />\n+\u00a0\u00a0\u00a0\u00a024\u00a0iterators<br />\n+\u00a0\u00a0\u00a0\u00a025\u00a0algorithms<br />\n+\u00a0\u00a0\u00a0\u00a026\u00a0numerics<br />\n+\u00a0\u00a0\u00a0\u00a027\u00a0iostreams<br />\n+\u00a0\u00a0\u00a0\u00a0Annex\u00a0D\u00a0\u00a0backward\u00a0compatibility<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Anyone\u00a0participating\u00a0in\u00a0implementation\u00a0of\u00a0the\u00a0library\u00a0should\u00a0obtain<br />\n+\u00a0\u00a0\u00a0\u00a0a\u00a0copy\u00a0of\u00a0the\u00a0standard,\u00a0ISO\u00a014882.\u00a0\u00a0People\u00a0in\u00a0the\u00a0U.S.\u00a0can\u00a0obtain\u00a0an<br />\n+\u00a0\u00a0\u00a0\u00a0electronic\u00a0copy\u00a0for\u00a0US$18\u00a0from\u00a0ANSI's\u00a0web\u00a0site.\u00a0Those\u00a0from\u00a0other<br />\n+\u00a0\u00a0\u00a0\u00a0countries\u00a0should\u00a0visit\u00a0http://www.iso.ch/\u00a0to\u00a0find\u00a0out\u00a0the\u00a0location<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0their\u00a0country's\u00a0representation\u00a0in\u00a0ISO,\u00a0in\u00a0order\u00a0to\u00a0know\u00a0who\u00a0can<br />\n+\u00a0\u00a0\u00a0\u00a0sell\u00a0them\u00a0a\u00a0copy.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0emphasis\u00a0in\u00a0the\u00a0following\u00a0sections\u00a0is\u00a0on\u00a0unimplemented\u00a0features<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0optimization\u00a0opportunities.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a017\u00a0\u00a0General<br />\n+\u00a0\u00a0\u00a0\u00a0-------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a017\u00a0concerns\u00a0overall\u00a0library\u00a0requirements.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0standard\u00a0doesn't\u00a0mention\u00a0threads.\u00a0A\u00a0multi-thread\u00a0(MT)\u00a0extension<br />\n+\u00a0\u00a0\u00a0\u00a0primarily\u00a0affects\u00a0operators\u00a0new\u00a0and\u00a0delete\u00a0(18),\u00a0allocator\u00a0(20),<br />\n+\u00a0\u00a0\u00a0\u00a0string\u00a0(21),\u00a0locale\u00a0(22),\u00a0and\u00a0iostreams\u00a0(27).\u00a0The\u00a0common\u00a0underlying<br />\n+\u00a0\u00a0\u00a0\u00a0support\u00a0needed\u00a0for\u00a0this\u00a0is\u00a0discussed\u00a0under\u00a0chapter\u00a020.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0standard\u00a0requirements\u00a0on\u00a0names\u00a0from\u00a0the\u00a0C\u00a0headers\u00a0create\u00a0a<br />\n+\u00a0\u00a0\u00a0\u00a0lot\u00a0of\u00a0work,\u00a0mostly\u00a0done.\u00a0Names\u00a0in\u00a0the\u00a0C\u00a0headers\u00a0must\u00a0be\u00a0visible<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0the\u00a0std::\u00a0and\u00a0sometimes\u00a0the\u00a0global\u00a0namespace;\u00a0the\u00a0names\u00a0in\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0two\u00a0scopes\u00a0must\u00a0refer\u00a0to\u00a0the\u00a0same\u00a0object.\u00a0More\u00a0stringent\u00a0is\u00a0that<br />\n+\u00a0\u00a0\u00a0\u00a0Koenig\u00a0lookup\u00a0implies\u00a0that\u00a0any\u00a0types\u00a0specified\u00a0as\u00a0defined\u00a0in\u00a0std::<br />\n+\u00a0\u00a0\u00a0\u00a0really\u00a0are\u00a0defined\u00a0in\u00a0std::.\u00a0Names\u00a0optionally\u00a0implemented\u00a0as<br />\n+\u00a0\u00a0\u00a0\u00a0macros\u00a0in\u00a0C\u00a0cannot\u00a0be\u00a0macros\u00a0in\u00a0C++.\u00a0(An\u00a0overview\u00a0may\u00a0be\u00a0read\u00a0at<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;http://www.cantrip.org/cheaders.html&gt;).\u00a0The\u00a0scripts\u00a0\"inclosure\"<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0\"mkcshadow\",\u00a0and\u00a0the\u00a0directories\u00a0shadow/\u00a0and\u00a0cshadow/,\u00a0are\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0beginning\u00a0of\u00a0an\u00a0effort\u00a0to\u00a0conform\u00a0in\u00a0this\u00a0area.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0A\u00a0correct\u00a0conforming\u00a0definition\u00a0of\u00a0C\u00a0header\u00a0names\u00a0based\u00a0on\u00a0underlying<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0library\u00a0headers,\u00a0and\u00a0practical\u00a0linking\u00a0of\u00a0conforming\u00a0namespaced<br />\n+\u00a0\u00a0\u00a0\u00a0customer\u00a0code\u00a0with\u00a0third-party\u00a0C\u00a0libraries\u00a0depends\u00a0ultimately\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0an\u00a0ABI\u00a0change,\u00a0allowing\u00a0namespaced\u00a0C\u00a0type\u00a0names\u00a0to\u00a0be\u00a0mangled\u00a0into<br />\n+\u00a0\u00a0\u00a0\u00a0type\u00a0names\u00a0as\u00a0if\u00a0they\u00a0were\u00a0global,\u00a0somewhat\u00a0as\u00a0C\u00a0function\u00a0names\u00a0in\u00a0a<br />\n+\u00a0\u00a0\u00a0\u00a0namespace,\u00a0or\u00a0C++\u00a0global\u00a0variable\u00a0names,\u00a0are\u00a0left\u00a0unmangled.\u00a0Perhaps<br />\n+\u00a0\u00a0\u00a0\u00a0another\u00a0\"extern\"\u00a0mode,\u00a0such\u00a0as\u00a0'extern\u00a0\"C-global\"'\u00a0would\u00a0be\u00a0an<br />\n+\u00a0\u00a0\u00a0\u00a0appropriate\u00a0place\u00a0for\u00a0such\u00a0type\u00a0definitions.\u00a0Such\u00a0a\u00a0type\u00a0would<br />\n+\u00a0\u00a0\u00a0\u00a0affect\u00a0mangling\u00a0as\u00a0follows:<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0namespace\u00a0A\u00a0{<br />\n+\u00a0\u00a0\u00a0\u00a0struct\u00a0X\u00a0{};<br />\n+\u00a0\u00a0\u00a0\u00a0extern\u00a0\"C-global\"\u00a0{\u00a0\u00a0//\u00a0or\u00a0maybe\u00a0just\u00a0'extern\u00a0\"C\"'<br />\n+\u00a0\u00a0\u00a0\u00a0struct\u00a0Y\u00a0{};<br />\n+\u00a0\u00a0\u00a0\u00a0};<br />\n+\u00a0\u00a0\u00a0\u00a0}<br />\n+\u00a0\u00a0\u00a0\u00a0void\u00a0f(A::X*);\u00a0\u00a0//\u00a0mangles\u00a0to\u00a0f__FPQ21A1X<br />\n+\u00a0\u00a0\u00a0\u00a0void\u00a0f(A::Y*);\u00a0\u00a0//\u00a0mangles\u00a0to\u00a0f__FP1Y<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0(It\u00a0may\u00a0be\u00a0that\u00a0this\u00a0is\u00a0really\u00a0the\u00a0appropriate\u00a0semantics\u00a0for\u00a0regular<br />\n+\u00a0\u00a0\u00a0\u00a0'extern\u00a0\"C\"',\u00a0and\u00a0'extern\u00a0\"C-global\"',\u00a0as\u00a0an\u00a0extension,\u00a0would\u00a0not\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0necessary.)\u00a0This\u00a0would\u00a0allow\u00a0functions\u00a0declared\u00a0in\u00a0non-standard\u00a0C\u00a0headers<br />\n+\u00a0\u00a0\u00a0\u00a0(and\u00a0thus\u00a0fixable\u00a0by\u00a0neither\u00a0us\u00a0nor\u00a0users)\u00a0to\u00a0link\u00a0properly\u00a0with\u00a0functions<br />\n+\u00a0\u00a0\u00a0\u00a0declared\u00a0using\u00a0C\u00a0types\u00a0defined\u00a0in\u00a0properly-namespaced\u00a0headers.\u00a0The<br />\n+\u00a0\u00a0\u00a0\u00a0problem\u00a0this\u00a0solves\u00a0is\u00a0that\u00a0C\u00a0headers\u00a0(which\u00a0C++\u00a0programmers\u00a0do\u00a0persist<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0using)\u00a0frequently\u00a0forward-declare\u00a0C\u00a0struct\u00a0tags\u00a0without\u00a0including<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0header\u00a0where\u00a0the\u00a0type\u00a0is\u00a0defined,\u00a0as\u00a0in<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0struct\u00a0tm;<br />\n+\u00a0\u00a0\u00a0\u00a0void\u00a0munge(tm*);<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Without\u00a0some\u00a0compiler\u00a0accommodation,\u00a0munge\u00a0cannot\u00a0be\u00a0called\u00a0by\u00a0correct<br />\n+\u00a0\u00a0\u00a0\u00a0C++\u00a0code\u00a0using\u00a0a\u00a0pointer\u00a0to\u00a0a\u00a0correctly-scoped\u00a0tm*\u00a0value.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0current\u00a0C\u00a0headers\u00a0use\u00a0the\u00a0preprocessor\u00a0extension\u00a0\"#include_next\",<br />\n+\u00a0\u00a0\u00a0\u00a0which\u00a0the\u00a0compiler\u00a0complains\u00a0about\u00a0when\u00a0run\u00a0\"-pedantic\".<br />\n+\u00a0\u00a0\u00a0\u00a0(Incidentally,\u00a0it\u00a0appears\u00a0that\u00a0\"-fpedantic\"\u00a0is\u00a0currently\u00a0ignored,<br />\n+\u00a0\u00a0\u00a0\u00a0probably\u00a0a\u00a0bug.)\u00a0\u00a0The\u00a0solution\u00a0in\u00a0the\u00a0C\u00a0compiler\u00a0is\u00a0to\u00a0use<br />\n+\u00a0\u00a0\u00a0\u00a0\"-isystem\"\u00a0rather\u00a0than\u00a0\"-I\",\u00a0but\u00a0unfortunately\u00a0in\u00a0g++\u00a0this\u00a0seems<br />\n+\u00a0\u00a0\u00a0\u00a0also\u00a0to\u00a0wrap\u00a0the\u00a0whole\u00a0header\u00a0in\u00a0an\u00a0'extern\u00a0\"C\"'\u00a0block,\u00a0so\u00a0it's<br />\n+\u00a0\u00a0\u00a0\u00a0unusable\u00a0for\u00a0C++\u00a0headers.\u00a0The\u00a0correct\u00a0solution\u00a0appears\u00a0to\u00a0be\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0allow\u00a0the\u00a0various\u00a0special\u00a0include-directory\u00a0options,\u00a0if\u00a0not\u00a0given<br />\n+\u00a0\u00a0\u00a0\u00a0an\u00a0argument,\u00a0to\u00a0affect\u00a0subsequent\u00a0include-directory\u00a0options\u00a0additively,<br />\n+\u00a0\u00a0\u00a0\u00a0so\u00a0that\u00a0if\u00a0one\u00a0said<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0-pedantic\u00a0-iprefix\u00a0$(prefix)\u00a0\\<br />\n+\u00a0\u00a0\u00a0\u00a0-idirafter\u00a0-ino-pedantic\u00a0-ino-extern-c\u00a0-iwithprefix\u00a0-I\u00a0g++-v3\u00a0\\<br />\n+\u00a0\u00a0\u00a0\u00a0-iwithprefix\u00a0-I\u00a0g++-v3/ext<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0compiler\u00a0would\u00a0search\u00a0$(prefix)/g++-v3\u00a0and\u00a0not\u00a0report<br />\n+\u00a0\u00a0\u00a0\u00a0pedantic\u00a0warnings\u00a0for\u00a0files\u00a0found\u00a0there,\u00a0but\u00a0treat\u00a0files\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0$(prefix)/g++-v3/ext\u00a0pedantically.\u00a0(The\u00a0undocumented\u00a0semantics<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0\"-isystem\"\u00a0in\u00a0g++\u00a0stink.\u00a0Can\u00a0they\u00a0be\u00a0rescinded?\u00a0\u00a0If\u00a0not\u00a0it<br />\n+\u00a0\u00a0\u00a0\u00a0must\u00a0be\u00a0replaced\u00a0with\u00a0something\u00a0more\u00a0rationally\u00a0behaved.)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0All\u00a0the\u00a0C\u00a0headers\u00a0need\u00a0the\u00a0treatment\u00a0above;\u00a0in\u00a0the\u00a0standard\u00a0these<br />\n+\u00a0\u00a0\u00a0\u00a0headers\u00a0are\u00a0mentioned\u00a0in\u00a0various\u00a0chapters.\u00a0Below,\u00a0I\u00a0have\u00a0only<br />\n+\u00a0\u00a0\u00a0\u00a0mentioned\u00a0those\u00a0that\u00a0present\u00a0interesting\u00a0implementation\u00a0issues.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0components\u00a0identified\u00a0as\u00a0\"mostly\u00a0complete\",\u00a0below,\u00a0have\u00a0not\u00a0been<br />\n+\u00a0\u00a0\u00a0\u00a0audited\u00a0for\u00a0conformance.\u00a0In\u00a0many\u00a0cases\u00a0where\u00a0the\u00a0library\u00a0passes<br />\n+\u00a0\u00a0\u00a0\u00a0conformance\u00a0tests\u00a0we\u00a0have\u00a0non-conforming\u00a0extensions\u00a0that\u00a0must\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0wrapped\u00a0in\u00a0#if\u00a0guards\u00a0for\u00a0\"pedantic\"\u00a0use,\u00a0and\u00a0in\u00a0some\u00a0cases\u00a0renamed<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0a\u00a0conforming\u00a0way\u00a0for\u00a0continued\u00a0use\u00a0in\u00a0the\u00a0implementation\u00a0regardless<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0conformance\u00a0flags.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0STL\u00a0portion\u00a0of\u00a0the\u00a0library\u00a0still\u00a0depends\u00a0on\u00a0a\u00a0header<br />\n+\u00a0\u00a0\u00a0\u00a0stl/bits/stl_config.h\u00a0full\u00a0of\u00a0#ifdef\u00a0clauses.\u00a0This\u00a0apparatus<br />\n+\u00a0\u00a0\u00a0\u00a0should\u00a0be\u00a0replaced\u00a0with\u00a0autoconf/automake\u00a0machinery.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0SGI\u00a0STL\u00a0defines\u00a0a\u00a0type_traits&lt;&gt;\u00a0template,\u00a0specialized\u00a0for<br />\n+\u00a0\u00a0\u00a0\u00a0many\u00a0types\u00a0in\u00a0their\u00a0code\u00a0including\u00a0the\u00a0built-in\u00a0numeric\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0pointer\u00a0types\u00a0and\u00a0some\u00a0library\u00a0types,\u00a0to\u00a0direct\u00a0optimizations\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0functions.\u00a0The\u00a0SGI\u00a0compiler\u00a0has\u00a0been\u00a0extended\u00a0to\u00a0generate<br />\n+\u00a0\u00a0\u00a0\u00a0specializations\u00a0of\u00a0this\u00a0template\u00a0automatically\u00a0for\u00a0user\u00a0types,<br />\n+\u00a0\u00a0\u00a0\u00a0so\u00a0that\u00a0use\u00a0of\u00a0STL\u00a0templates\u00a0on\u00a0user\u00a0types\u00a0can\u00a0take\u00a0advantage\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0these\u00a0optimizations.\u00a0Specializations\u00a0for\u00a0other,\u00a0non-STL,\u00a0types<br />\n+\u00a0\u00a0\u00a0\u00a0would\u00a0make\u00a0more\u00a0optimizations\u00a0possible,\u00a0but\u00a0extending\u00a0the\u00a0gcc<br />\n+\u00a0\u00a0\u00a0\u00a0compiler\u00a0in\u00a0the\u00a0same\u00a0way\u00a0would\u00a0be\u00a0much\u00a0better.\u00a0Probably\u00a0the\u00a0next<br />\n+\u00a0\u00a0\u00a0\u00a0round\u00a0of\u00a0standardization\u00a0will\u00a0ratify\u00a0this,\u00a0but\u00a0probably\u00a0with<br />\n+\u00a0\u00a0\u00a0\u00a0changes,\u00a0so\u00a0it\u00a0probably\u00a0should\u00a0be\u00a0renamed\u00a0to\u00a0place\u00a0it\u00a0in\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0implementation\u00a0namespace.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0SGI\u00a0STL\u00a0also\u00a0defines\u00a0a\u00a0large\u00a0number\u00a0of\u00a0extensions\u00a0visible\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0headers.\u00a0(Other\u00a0extensions\u00a0that\u00a0appear\u00a0in\u00a0separate\u00a0headers<br />\n+\u00a0\u00a0\u00a0\u00a0have\u00a0been\u00a0sequestered\u00a0in\u00a0subdirectories\u00a0ext/\u00a0and\u00a0backward/.)\u00a0\u00a0All<br />\n+\u00a0\u00a0\u00a0\u00a0these\u00a0extensions\u00a0should\u00a0be\u00a0moved\u00a0to\u00a0other\u00a0headers\u00a0where\u00a0possible,<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0in\u00a0any\u00a0case\u00a0wrapped\u00a0in\u00a0a\u00a0namespace\u00a0(not\u00a0std!),\u00a0and\u00a0(where\u00a0kept<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0a\u00a0standard\u00a0header)\u00a0girded\u00a0about\u00a0with\u00a0macro\u00a0guards.\u00a0Some\u00a0cannot\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0moved\u00a0out\u00a0of\u00a0standard\u00a0headers\u00a0because\u00a0they\u00a0are\u00a0used\u00a0to\u00a0implement<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0features.\u00a0\u00a0The\u00a0canonical\u00a0method\u00a0for\u00a0accommodating\u00a0these<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0to\u00a0use\u00a0a\u00a0protected\u00a0name,\u00a0aliased\u00a0in\u00a0macro\u00a0guards\u00a0to\u00a0a\u00a0user-space<br />\n+\u00a0\u00a0\u00a0\u00a0name.\u00a0Unfortunately\u00a0C++\u00a0offers\u00a0no\u00a0satisfactory\u00a0template\u00a0typedef<br />\n+\u00a0\u00a0\u00a0\u00a0mechanism,\u00a0so\u00a0very\u00a0ad-hoc\u00a0and\u00a0unsatisfactory\u00a0aliasing\u00a0must\u00a0be\u00a0used<br />\n+\u00a0\u00a0\u00a0\u00a0instead.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Implementation\u00a0of\u00a0a\u00a0template\u00a0typedef\u00a0mechanism\u00a0should\u00a0have\u00a0the\u00a0highest<br />\n+\u00a0\u00a0\u00a0\u00a0priority\u00a0among\u00a0possible\u00a0extensions,\u00a0on\u00a0the\u00a0same\u00a0level\u00a0as\u00a0implementation<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0the\u00a0template\u00a0\"export\"\u00a0feature.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a018\u00a0\u00a0Language\u00a0support<br />\n+\u00a0\u00a0\u00a0\u00a0----------------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;limits&gt;\u00a0&lt;new&gt;\u00a0&lt;typeinfo&gt;\u00a0&lt;exception&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;cstddef&gt;\u00a0&lt;climits&gt;\u00a0&lt;cfloat&gt;\u00a0\u00a0&lt;cstdarg&gt;\u00a0&lt;csetjmp&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;ctime&gt;\u00a0\u00a0\u00a0&lt;csignal&gt;\u00a0&lt;cstdlib&gt;\u00a0(also\u00a021,\u00a025,\u00a026)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0This\u00a0defines\u00a0the\u00a0built-in\u00a0exceptions,\u00a0rtti,\u00a0numeric_limits&lt;&gt;,<br />\n+\u00a0\u00a0\u00a0\u00a0operator\u00a0new\u00a0and\u00a0delete.\u00a0Much\u00a0of\u00a0this\u00a0is\u00a0provided\u00a0by\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0compiler\u00a0in\u00a0its\u00a0static\u00a0runtime\u00a0library.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Work\u00a0to\u00a0do\u00a0includes\u00a0defining\u00a0numeric_limits&lt;&gt;\u00a0specializations\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0separate\u00a0files\u00a0for\u00a0all\u00a0target\u00a0architectures.\u00a0Values\u00a0for\u00a0integer\u00a0types<br />\n+\u00a0\u00a0\u00a0\u00a0except\u00a0for\u00a0bool\u00a0and\u00a0wchar_t\u00a0are\u00a0readily\u00a0obtained\u00a0from\u00a0the\u00a0C\u00a0header<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;limits.h&gt;,\u00a0but\u00a0values\u00a0for\u00a0the\u00a0remaining\u00a0numeric\u00a0types\u00a0(bool,\u00a0wchar_t,<br />\n+\u00a0\u00a0\u00a0\u00a0float,\u00a0double,\u00a0long\u00a0double)\u00a0must\u00a0be\u00a0entered\u00a0manually.\u00a0This\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0largely\u00a0dog\u00a0work\u00a0except\u00a0for\u00a0those\u00a0members\u00a0whose\u00a0values\u00a0are\u00a0not<br />\n+\u00a0\u00a0\u00a0\u00a0easily\u00a0deduced\u00a0from\u00a0available\u00a0documentation.\u00a0Also,\u00a0this\u00a0involves<br />\n+\u00a0\u00a0\u00a0\u00a0some\u00a0work\u00a0in\u00a0target\u00a0configuration\u00a0to\u00a0identify\u00a0the\u00a0correct\u00a0choice\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0file\u00a0to\u00a0build\u00a0against\u00a0and\u00a0to\u00a0install.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0definitions\u00a0of\u00a0the\u00a0various\u00a0operators\u00a0new\u00a0and\u00a0delete\u00a0must\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0made\u00a0thread-safe,\u00a0which\u00a0depends\u00a0on\u00a0a\u00a0portable\u00a0exclusion\u00a0mechanism,<br />\n+\u00a0\u00a0\u00a0\u00a0discussed\u00a0under\u00a0chapter\u00a020.\u00a0\u00a0Of\u00a0course\u00a0there\u00a0is\u00a0always\u00a0plenty\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0room\u00a0for\u00a0improvements\u00a0to\u00a0the\u00a0speed\u00a0of\u00a0operators\u00a0new\u00a0and\u00a0delete.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;cstdarg&gt;,\u00a0in\u00a0Glibc,\u00a0defines\u00a0some\u00a0macros\u00a0that\u00a0gcc\u00a0does\u00a0not\u00a0allow\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0be\u00a0wrapped\u00a0into\u00a0an\u00a0inline\u00a0function.\u00a0Probably\u00a0this\u00a0header\u00a0will\u00a0demand<br />\n+\u00a0\u00a0\u00a0\u00a0attention\u00a0whenever\u00a0a\u00a0new\u00a0target\u00a0is\u00a0chosen.\u00a0The\u00a0functions\u00a0atexit(),<br />\n+\u00a0\u00a0\u00a0\u00a0exit(),\u00a0and\u00a0abort()\u00a0in\u00a0cstdlib\u00a0have\u00a0different\u00a0semantics\u00a0in\u00a0C++,\u00a0so<br />\n+\u00a0\u00a0\u00a0\u00a0must\u00a0be\u00a0re-implemented\u00a0for\u00a0C++.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a019\u00a0\u00a0Diagnostics<br />\n+\u00a0\u00a0\u00a0\u00a0-----------------------<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;stdexcept&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;cassert&gt;\u00a0&lt;cerrno&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0This\u00a0defines\u00a0the\u00a0standard\u00a0exception\u00a0objects,\u00a0which\u00a0are\u00a0\"mostly\u00a0complete\".<br />\n+\u00a0\u00a0\u00a0\u00a0Cygnus\u00a0has\u00a0a\u00a0version,\u00a0and\u00a0now\u00a0SGI\u00a0provides\u00a0a\u00a0slightly\u00a0different\u00a0one.<br />\n+\u00a0\u00a0\u00a0\u00a0It\u00a0makes\u00a0little\u00a0difference\u00a0which\u00a0we\u00a0use.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0C\u00a0global\u00a0name\u00a0\"errno\",\u00a0which\u00a0C\u00a0allows\u00a0to\u00a0be\u00a0a\u00a0variable\u00a0or\u00a0a\u00a0macro,<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0required\u00a0in\u00a0C++\u00a0to\u00a0be\u00a0a\u00a0macro.\u00a0For\u00a0MT\u00a0it\u00a0must\u00a0typically\u00a0result\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0a\u00a0function\u00a0call.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a020\u00a0\u00a0Utilities<br />\n+\u00a0\u00a0\u00a0\u00a0---------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;utility&gt;\u00a0&lt;functional&gt;\u00a0&lt;memory&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0header:\u00a0&lt;ctime&gt;\u00a0(also\u00a0in\u00a018)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0SGI\u00a0STL\u00a0provides\u00a0\"mostly\u00a0complete\"\u00a0versions\u00a0of\u00a0all\u00a0the\u00a0components<br />\n+\u00a0\u00a0\u00a0\u00a0defined\u00a0in\u00a0this\u00a0chapter.\u00a0However,\u00a0the\u00a0auto_ptr&lt;&gt;\u00a0implementation<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0known\u00a0to\u00a0be\u00a0wrong.\u00a0Furthermore,\u00a0the\u00a0standard\u00a0definition\u00a0of\u00a0it<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0known\u00a0to\u00a0be\u00a0unimplementable\u00a0as\u00a0written.\u00a0A\u00a0minor\u00a0change\u00a0to\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0would\u00a0fix\u00a0it,\u00a0and\u00a0auto_ptr&lt;&gt;\u00a0should\u00a0be\u00a0adjusted\u00a0to\u00a0match.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Multi-threading\u00a0affects\u00a0the\u00a0allocator\u00a0implementation,\u00a0and\u00a0there\u00a0must<br />\n+\u00a0\u00a0\u00a0\u00a0be\u00a0configuration/installation\u00a0choices\u00a0for\u00a0different\u00a0users'\u00a0MT<br />\n+\u00a0\u00a0\u00a0\u00a0requirements.\u00a0Anyway,\u00a0users\u00a0will\u00a0want\u00a0to\u00a0tune\u00a0allocator\u00a0options<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0support\u00a0different\u00a0target\u00a0conditions,\u00a0MT\u00a0or\u00a0no.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0primitives\u00a0used\u00a0for\u00a0MT\u00a0implementation\u00a0should\u00a0be\u00a0exposed,\u00a0as\u00a0an<br />\n+\u00a0\u00a0\u00a0\u00a0extension,\u00a0for\u00a0users'\u00a0own\u00a0work.\u00a0We\u00a0need\u00a0cross-CPU\u00a0\"mutex\"\u00a0support,<br />\n+\u00a0\u00a0\u00a0\u00a0multi-processor\u00a0shared-memory\u00a0atomic\u00a0integer\u00a0operations,\u00a0and\u00a0single-<br />\n+\u00a0\u00a0\u00a0\u00a0processor\u00a0uninterruptible\u00a0integer\u00a0operations,\u00a0and\u00a0all\u00a0three\u00a0configurable<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0be\u00a0stubbed\u00a0out\u00a0for\u00a0non-MT\u00a0use,\u00a0or\u00a0to\u00a0use\u00a0an\u00a0appropriately-loaded<br />\n+\u00a0\u00a0\u00a0\u00a0dynamic\u00a0library\u00a0for\u00a0the\u00a0actual\u00a0runtime\u00a0environment,\u00a0or\u00a0statically<br />\n+\u00a0\u00a0\u00a0\u00a0compiled\u00a0in\u00a0for\u00a0cases\u00a0where\u00a0the\u00a0target\u00a0architecture\u00a0is\u00a0known.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a021\u00a0\u00a0String<br />\n+\u00a0\u00a0\u00a0\u00a0------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;string&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;cctype&gt;\u00a0&lt;cwctype&gt;\u00a0&lt;cstring&gt;\u00a0&lt;cwchar&gt;\u00a0(also\u00a0in\u00a027)<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;cstdlib&gt;\u00a0(also\u00a0in\u00a018,\u00a025,\u00a026)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0We\u00a0have\u00a0\"mostly-complete\"\u00a0char_traits&lt;&gt;\u00a0implementations.\u00a0Many\u00a0of\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0char_traits&lt;char&gt;\u00a0operations\u00a0might\u00a0be\u00a0optimized\u00a0further\u00a0using\u00a0existing<br />\n+\u00a0\u00a0\u00a0\u00a0proprietary\u00a0language\u00a0extensions.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0We\u00a0have\u00a0a\u00a0\"mostly-complete\"\u00a0basic_string&lt;&gt;\u00a0implementation.\u00a0The\u00a0work<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0manually\u00a0instantiate\u00a0char\u00a0and\u00a0wchar_t\u00a0specializations\u00a0in\u00a0object<br />\n+\u00a0\u00a0\u00a0\u00a0files\u00a0to\u00a0improve\u00a0link-time\u00a0behavior\u00a0is\u00a0extremely\u00a0unsatisfactory,<br />\n+\u00a0\u00a0\u00a0\u00a0literally\u00a0tripling\u00a0library-build\u00a0time\u00a0with\u00a0no\u00a0commensurate\u00a0improvement<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0static\u00a0program\u00a0link\u00a0sizes.\u00a0It\u00a0must\u00a0be\u00a0redone.\u00a0(Similar\u00a0work\u00a0is<br />\n+\u00a0\u00a0\u00a0\u00a0needed\u00a0for\u00a0some\u00a0components\u00a0in\u00a0chapters\u00a022\u00a0and\u00a027.)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Other\u00a0work\u00a0needed\u00a0for\u00a0strings\u00a0is\u00a0MT-safety,\u00a0as\u00a0discussed\u00a0under\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0chapter\u00a020\u00a0heading.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0standard\u00a0C\u00a0type\u00a0mbstate_t\u00a0from\u00a0&lt;cwchar&gt;\u00a0and\u00a0used\u00a0in\u00a0char_traits&lt;&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0must\u00a0be\u00a0different\u00a0in\u00a0C++\u00a0than\u00a0in\u00a0C,\u00a0because\u00a0in\u00a0C++\u00a0the\u00a0default\u00a0constructor<br />\n+\u00a0\u00a0\u00a0\u00a0value\u00a0mbstate_t()\u00a0must\u00a0be\u00a0the\u00a0\"base\"\u00a0or\u00a0\"ground\"\u00a0sequence\u00a0state.<br />\n+\u00a0\u00a0\u00a0\u00a0(According\u00a0to\u00a0the\u00a0likely\u00a0resolution\u00a0of\u00a0a\u00a0recently\u00a0raised\u00a0Core\u00a0issue,<br />\n+\u00a0\u00a0\u00a0\u00a0this\u00a0may\u00a0become\u00a0unnecessary.\u00a0However,\u00a0there\u00a0are\u00a0other\u00a0reasons\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0use\u00a0a\u00a0state\u00a0type\u00a0not\u00a0as\u00a0limited\u00a0as\u00a0whatever\u00a0the\u00a0C\u00a0library\u00a0provides.)<br />\n+\u00a0\u00a0\u00a0\u00a0If\u00a0we\u00a0might\u00a0want\u00a0to\u00a0provide\u00a0conversions\u00a0from\u00a0(e.g.)\u00a0internally-<br />\n+\u00a0\u00a0\u00a0\u00a0represented\u00a0EUC-wide\u00a0to\u00a0externally-represented\u00a0Unicode,\u00a0or\u00a0vice-<br />\n+\u00a0\u00a0\u00a0\u00a0versa,\u00a0the\u00a0mbstate_t\u00a0we\u00a0choose\u00a0will\u00a0need\u00a0to\u00a0be\u00a0more\u00a0accommodating<br />\n+\u00a0\u00a0\u00a0\u00a0than\u00a0what\u00a0might\u00a0be\u00a0provided\u00a0by\u00a0an\u00a0underlying\u00a0C\u00a0library.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0There\u00a0remain\u00a0some\u00a0basic_string\u00a0template-member\u00a0functions\u00a0which\u00a0do<br />\n+\u00a0\u00a0\u00a0\u00a0not\u00a0overload\u00a0properly\u00a0with\u00a0their\u00a0non-template\u00a0brethren.\u00a0The\u00a0infamous<br />\n+\u00a0\u00a0\u00a0\u00a0hack\u00a0akin\u00a0to\u00a0what\u00a0was\u00a0done\u00a0in\u00a0vector&lt;&gt;\u00a0is\u00a0needed,\u00a0to\u00a0conform\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a023.1.1\u00a0para\u00a010.\u00a0The\u00a0CHECKLIST\u00a0items\u00a0for\u00a0basic_string\u00a0marked\u00a0'X',<br />\n+\u00a0\u00a0\u00a0\u00a0or\u00a0incomplete,\u00a0are\u00a0so\u00a0marked\u00a0for\u00a0this\u00a0reason.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Replacing\u00a0the\u00a0string\u00a0iterators,\u00a0which\u00a0currently\u00a0are\u00a0simple\u00a0character<br />\n+\u00a0\u00a0\u00a0\u00a0pointers,\u00a0with\u00a0class\u00a0objects\u00a0would\u00a0greatly\u00a0increase\u00a0the\u00a0safety\u00a0of\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0client\u00a0interface,\u00a0and\u00a0also\u00a0permit\u00a0a\u00a0\"debug\"\u00a0mode\u00a0in\u00a0which\u00a0range,<br />\n+\u00a0\u00a0\u00a0\u00a0ownership,\u00a0and\u00a0validity\u00a0are\u00a0rigorously\u00a0checked.\u00a0The\u00a0current\u00a0use\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0raw\u00a0pointers\u00a0as\u00a0string\u00a0iterators\u00a0is\u00a0evil.\u00a0vector&lt;&gt;\u00a0iterators\u00a0need\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0same\u00a0treatment.\u00a0Note\u00a0that\u00a0the\u00a0current\u00a0implementation\u00a0freely\u00a0mixes<br />\n+\u00a0\u00a0\u00a0\u00a0pointers\u00a0and\u00a0iterators,\u00a0and\u00a0that\u00a0must\u00a0be\u00a0fixed\u00a0before\u00a0safer\u00a0iterators<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0be\u00a0introduced.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Some\u00a0of\u00a0the\u00a0functions\u00a0in\u00a0&lt;cstring&gt;\u00a0are\u00a0different\u00a0from\u00a0the\u00a0C\u00a0version.<br />\n+\u00a0\u00a0\u00a0\u00a0generally\u00a0overloaded\u00a0on\u00a0const\u00a0and\u00a0non-const\u00a0argument\u00a0pointers.\u00a0For<br />\n+\u00a0\u00a0\u00a0\u00a0example,\u00a0in\u00a0&lt;cstring&gt;\u00a0strchr\u00a0is\u00a0overloaded.\u00a0The\u00a0functions\u00a0isupper<br />\n+\u00a0\u00a0\u00a0\u00a0etc.\u00a0in\u00a0&lt;cctype&gt;\u00a0typically\u00a0implemented\u00a0as\u00a0macros\u00a0in\u00a0C\u00a0are\u00a0functions<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0C++,\u00a0because\u00a0they\u00a0are\u00a0overloaded\u00a0with\u00a0others\u00a0of\u00a0the\u00a0same\u00a0name<br />\n+\u00a0\u00a0\u00a0\u00a0defined\u00a0in\u00a0&lt;locale&gt;.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Many\u00a0of\u00a0the\u00a0functions\u00a0required\u00a0in\u00a0&lt;cwctype&gt;\u00a0and\u00a0&lt;cwchar&gt;\u00a0cannot\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0implemented\u00a0using\u00a0underlying\u00a0C\u00a0facilities\u00a0on\u00a0intended\u00a0targets\u00a0because<br />\n+\u00a0\u00a0\u00a0\u00a0such\u00a0facilities\u00a0only\u00a0partly\u00a0exist.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a022\u00a0\u00a0Locale<br />\n+\u00a0\u00a0\u00a0\u00a0------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;locale&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;clocale&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0We\u00a0have\u00a0a\u00a0\"mostly\u00a0complete\"\u00a0class\u00a0locale,\u00a0with\u00a0the\u00a0exception\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0code\u00a0for\u00a0constructing,\u00a0and\u00a0handling\u00a0the\u00a0names\u00a0of,\u00a0named\u00a0locales.<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0ways\u00a0that\u00a0locales\u00a0are\u00a0named\u00a0(particularly\u00a0when\u00a0categories<br />\n+\u00a0\u00a0\u00a0\u00a0(e.g.\u00a0LC_TIME,\u00a0LC_COLLATE)\u00a0are\u00a0different)\u00a0varies\u00a0among\u00a0all\u00a0target<br />\n+\u00a0\u00a0\u00a0\u00a0environments.\u00a0This\u00a0code\u00a0must\u00a0be\u00a0written\u00a0in\u00a0various\u00a0versions\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0chosen\u00a0by\u00a0configuration\u00a0parameters.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Members\u00a0of\u00a0many\u00a0of\u00a0the\u00a0facets\u00a0defined\u00a0in\u00a0&lt;locale&gt;\u00a0are\u00a0stubs.\u00a0Generally,<br />\n+\u00a0\u00a0\u00a0\u00a0there\u00a0are\u00a0two\u00a0sets\u00a0of\u00a0facets:\u00a0the\u00a0base\u00a0class\u00a0facets\u00a0(which\u00a0are\u00a0supposed<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0implement\u00a0the\u00a0\"C\"\u00a0locale)\u00a0and\u00a0the\u00a0\"byname\"\u00a0facets,\u00a0which\u00a0are\u00a0supposed<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0read\u00a0files\u00a0to\u00a0determine\u00a0their\u00a0behavior.\u00a0The\u00a0base\u00a0ctype&lt;&gt;,\u00a0collate&lt;&gt;,<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0numpunct&lt;&gt;\u00a0facets\u00a0are\u00a0\"mostly\u00a0complete\",\u00a0except\u00a0that\u00a0the\u00a0table\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0bitmask\u00a0values\u00a0used\u00a0for\u00a0\"is\"\u00a0operations,\u00a0and\u00a0corresponding\u00a0mask\u00a0values,<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0still\u00a0defined\u00a0in\u00a0libio\u00a0and\u00a0just\u00a0included/linked.\u00a0(We\u00a0will\u00a0need\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0implement\u00a0these\u00a0tables\u00a0independently,\u00a0soon,\u00a0but\u00a0should\u00a0take\u00a0advantage<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0libio\u00a0where\u00a0possible.)\u00a0\u00a0The\u00a0num_put&lt;&gt;::put\u00a0members\u00a0for\u00a0integer\u00a0types<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0\"mostly\u00a0complete\".<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0A\u00a0complete\u00a0list\u00a0of\u00a0what\u00a0has\u00a0and\u00a0has\u00a0not\u00a0been\u00a0implemented\u00a0may\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0found\u00a0in\u00a0CHECKLIST.\u00a0However,\u00a0note\u00a0that\u00a0the\u00a0current\u00a0definition\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0codecvt&lt;wchar_t,char,mbstate_t&gt;\u00a0is\u00a0wrong.\u00a0It\u00a0should\u00a0simply\u00a0write<br />\n+\u00a0\u00a0\u00a0\u00a0out\u00a0the\u00a0raw\u00a0bytes\u00a0representing\u00a0the\u00a0wide\u00a0characters,\u00a0rather\u00a0than<br />\n+\u00a0\u00a0\u00a0\u00a0trying\u00a0to\u00a0convert\u00a0each\u00a0to\u00a0a\u00a0corresponding\u00a0single\u00a0\"char\"\u00a0value.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Some\u00a0of\u00a0the\u00a0facets\u00a0are\u00a0more\u00a0important\u00a0than\u00a0others.\u00a0Specifically,<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0members\u00a0of\u00a0ctype&lt;&gt;,\u00a0numpunct&lt;&gt;,\u00a0num_put&lt;&gt;,\u00a0and\u00a0num_get&lt;&gt;\u00a0facets<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0used\u00a0by\u00a0other\u00a0library\u00a0facilities\u00a0defined\u00a0in\u00a0&lt;string&gt;,\u00a0&lt;istream&gt;,<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0&lt;ostream&gt;,\u00a0and\u00a0the\u00a0codecvt&lt;&gt;\u00a0facet\u00a0is\u00a0used\u00a0by\u00a0basic_filebuf&lt;&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0&lt;fstream&gt;,\u00a0so\u00a0a\u00a0conforming\u00a0iostream\u00a0implementation\u00a0depends\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0these.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0\"long\u00a0long\"\u00a0type\u00a0eventually\u00a0must\u00a0be\u00a0supported,\u00a0but\u00a0code\u00a0mentioning<br />\n+\u00a0\u00a0\u00a0\u00a0it\u00a0should\u00a0be\u00a0wrapped\u00a0in\u00a0#if\u00a0guards\u00a0to\u00a0allow\u00a0pedantic-mode\u00a0compiling.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Performance\u00a0of\u00a0num_put&lt;&gt;\u00a0and\u00a0num_get&lt;&gt;\u00a0depend\u00a0critically\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0caching\u00a0computed\u00a0values\u00a0in\u00a0ios_base\u00a0objects,\u00a0and\u00a0on\u00a0extensions<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0the\u00a0interface\u00a0with\u00a0streambufs.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Specifically:\u00a0retrieving\u00a0a\u00a0copy\u00a0of\u00a0the\u00a0locale\u00a0object,\u00a0extracting<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0needed\u00a0facets,\u00a0and\u00a0gathering\u00a0data\u00a0from\u00a0them,\u00a0for\u00a0each\u00a0call\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0(e.g.)\u00a0operator&lt;&lt;\u00a0would\u00a0be\u00a0prohibitively\u00a0slow.\u00a0\u00a0To\u00a0cache\u00a0format<br />\n+\u00a0\u00a0\u00a0\u00a0data\u00a0for\u00a0use\u00a0by\u00a0num_put&lt;&gt;\u00a0and\u00a0num_get&lt;&gt;\u00a0we\u00a0have\u00a0a\u00a0_Format_cache&lt;&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0object\u00a0stored\u00a0in\u00a0the\u00a0ios_base::pword()\u00a0array.\u00a0This\u00a0is\u00a0constructed<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0initialized\u00a0lazily,\u00a0and\u00a0is\u00a0organized\u00a0purely\u00a0for\u00a0utility.\u00a0It<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0discarded\u00a0when\u00a0a\u00a0new\u00a0locale\u00a0with\u00a0different\u00a0facets\u00a0is\u00a0imbued.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Using\u00a0only\u00a0the\u00a0public\u00a0interfaces\u00a0of\u00a0the\u00a0iterator\u00a0arguments\u00a0to\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0facet\u00a0functions\u00a0would\u00a0limit\u00a0performance\u00a0by\u00a0forbidding\u00a0\"vector-style\"<br />\n+\u00a0\u00a0\u00a0\u00a0character\u00a0operations.\u00a0The\u00a0streambuf\u00a0iterator\u00a0optimizations\u00a0are<br />\n+\u00a0\u00a0\u00a0\u00a0described\u00a0under\u00a0chapter\u00a024,\u00a0but\u00a0facets\u00a0can\u00a0also\u00a0bypass\u00a0the\u00a0streambuf<br />\n+\u00a0\u00a0\u00a0\u00a0iterators\u00a0via\u00a0explicit\u00a0specializations\u00a0and\u00a0operate\u00a0directly\u00a0on\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0streambufs,\u00a0and\u00a0use\u00a0extended\u00a0interfaces\u00a0to\u00a0get\u00a0direct\u00a0access\u00a0to\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0streambuf\u00a0internal\u00a0buffer\u00a0arrays.\u00a0These\u00a0extensions\u00a0are\u00a0mentioned<br />\n+\u00a0\u00a0\u00a0\u00a0under\u00a0chapter\u00a027.\u00a0These\u00a0optimizations\u00a0are\u00a0particularly\u00a0important<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0input\u00a0parsing.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Unused\u00a0virtual\u00a0members\u00a0of\u00a0locale\u00a0facets\u00a0can\u00a0be\u00a0omitted,\u00a0as\u00a0mentioned<br />\n+\u00a0\u00a0\u00a0\u00a0above,\u00a0by\u00a0a\u00a0smart\u00a0linker.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a023\u00a0\u00a0Containers<br />\n+\u00a0\u00a0\u00a0\u00a0----------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;deque&gt;\u00a0&lt;list&gt;\u00a0&lt;queue&gt;\u00a0&lt;stack&gt;\u00a0&lt;vector&gt;\u00a0&lt;map&gt;\u00a0&lt;set&gt;\u00a0&lt;bitset&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0All\u00a0the\u00a0components\u00a0in\u00a0chapter\u00a023\u00a0are\u00a0implemented\u00a0in\u00a0the\u00a0SGI\u00a0STL.<br />\n+\u00a0\u00a0\u00a0\u00a0They\u00a0are\u00a0\"mostly\u00a0complete\";\u00a0they\u00a0include\u00a0a\u00a0large\u00a0number\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0nonconforming\u00a0extensions\u00a0which\u00a0must\u00a0be\u00a0wrapped.\u00a0Some\u00a0of\u00a0these<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0used\u00a0internally\u00a0and\u00a0must\u00a0be\u00a0renamed\u00a0or\u00a0duplicated.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0SGI\u00a0components\u00a0are\u00a0optimized\u00a0for\u00a0large-memory\u00a0environments.\u00a0For<br />\n+\u00a0\u00a0\u00a0\u00a0embedded\u00a0targets,\u00a0different\u00a0criteria\u00a0might\u00a0be\u00a0more\u00a0appropriate.\u00a0Users<br />\n+\u00a0\u00a0\u00a0\u00a0will\u00a0want\u00a0to\u00a0be\u00a0able\u00a0to\u00a0tune\u00a0this\u00a0behavior.\u00a0We\u00a0should\u00a0provide<br />\n+\u00a0\u00a0\u00a0\u00a0ways\u00a0for\u00a0users\u00a0to\u00a0compile\u00a0the\u00a0library\u00a0with\u00a0different\u00a0memory\u00a0usage<br />\n+\u00a0\u00a0\u00a0\u00a0characteristics.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0A\u00a0lot\u00a0more\u00a0work\u00a0is\u00a0needed\u00a0on\u00a0factoring\u00a0out\u00a0common\u00a0code\u00a0from\u00a0different<br />\n+\u00a0\u00a0\u00a0\u00a0specializations\u00a0to\u00a0reduce\u00a0code\u00a0size\u00a0here\u00a0and\u00a0in\u00a0chapter\u00a025.\u00a0The<br />\n+\u00a0\u00a0\u00a0\u00a0easiest\u00a0fix\u00a0for\u00a0this\u00a0would\u00a0be\u00a0a\u00a0compiler/ABI\u00a0improvement\u00a0that\u00a0allows<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0compiler\u00a0to\u00a0recognize\u00a0when\u00a0a\u00a0specialization\u00a0depends\u00a0only\u00a0on\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0size\u00a0(or\u00a0other\u00a0gross\u00a0quality)\u00a0of\u00a0a\u00a0template\u00a0argument,\u00a0and\u00a0allow\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0linker\u00a0to\u00a0share\u00a0the\u00a0code\u00a0with\u00a0similar\u00a0specializations.\u00a0In\u00a0its<br />\n+\u00a0\u00a0\u00a0\u00a0absence,\u00a0many\u00a0of\u00a0the\u00a0algorithms\u00a0and\u00a0containers\u00a0can\u00a0be\u00a0partial-<br />\n+\u00a0\u00a0\u00a0\u00a0specialized,\u00a0at\u00a0least\u00a0for\u00a0the\u00a0case\u00a0of\u00a0pointers,\u00a0but\u00a0this\u00a0only\u00a0solves<br />\n+\u00a0\u00a0\u00a0\u00a0a\u00a0small\u00a0part\u00a0of\u00a0the\u00a0problem.\u00a0Use\u00a0of\u00a0a\u00a0type_traits-style\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0allows\u00a0a\u00a0few\u00a0more\u00a0optimization\u00a0opportunities,\u00a0more\u00a0if\u00a0the\u00a0compiler<br />\n+\u00a0\u00a0\u00a0\u00a0can\u00a0generate\u00a0the\u00a0specializations\u00a0automatically.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0As\u00a0an\u00a0optimization,\u00a0containers\u00a0can\u00a0specialize\u00a0on\u00a0the\u00a0default\u00a0allocator<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0bypass\u00a0it,\u00a0or\u00a0take\u00a0advantage\u00a0of\u00a0details\u00a0of\u00a0its\u00a0implementation<br />\n+\u00a0\u00a0\u00a0\u00a0after\u00a0it\u00a0has\u00a0been\u00a0improved\u00a0upon.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Replacing\u00a0the\u00a0vector\u00a0iterators,\u00a0which\u00a0currently\u00a0are\u00a0simple\u00a0element<br />\n+\u00a0\u00a0\u00a0\u00a0pointers,\u00a0with\u00a0class\u00a0objects\u00a0would\u00a0greatly\u00a0increase\u00a0the\u00a0safety\u00a0of\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0client\u00a0interface,\u00a0and\u00a0also\u00a0permit\u00a0a\u00a0\"debug\"\u00a0mode\u00a0in\u00a0which\u00a0range,<br />\n+\u00a0\u00a0\u00a0\u00a0ownership,\u00a0and\u00a0validity\u00a0are\u00a0rigorously\u00a0checked.\u00a0The\u00a0current\u00a0use\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0pointers\u00a0for\u00a0iterators\u00a0is\u00a0evil.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0As\u00a0mentioned\u00a0for\u00a0chapter\u00a024,\u00a0the\u00a0deque\u00a0iterator\u00a0is\u00a0a\u00a0good\u00a0example\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0an\u00a0opportunity\u00a0to\u00a0implement\u00a0a\u00a0\"staged\"\u00a0iterator\u00a0that\u00a0would\u00a0benefit<br />\n+\u00a0\u00a0\u00a0\u00a0from\u00a0specializations\u00a0of\u00a0some\u00a0algorithms.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a024\u00a0\u00a0Iterators<br />\n+\u00a0\u00a0\u00a0\u00a0---------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;iterator&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Standard\u00a0iterators\u00a0are\u00a0\"mostly\u00a0complete\",\u00a0with\u00a0the\u00a0exception\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0stream\u00a0iterators,\u00a0which\u00a0are\u00a0not\u00a0yet\u00a0templatized\u00a0on\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0stream\u00a0type.\u00a0Also,\u00a0the\u00a0base\u00a0class\u00a0template\u00a0iterator&lt;&gt;\u00a0appears<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0be\u00a0wrong,\u00a0so\u00a0everything\u00a0derived\u00a0from\u00a0it\u00a0must\u00a0also\u00a0be\u00a0wrong,<br />\n+\u00a0\u00a0\u00a0\u00a0currently.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0streambuf\u00a0iterators\u00a0(currently\u00a0located\u00a0in\u00a0stl/bits/std_iterator.h,<br />\n+\u00a0\u00a0\u00a0\u00a0but\u00a0should\u00a0be\u00a0under\u00a0bits/)\u00a0can\u00a0be\u00a0rewritten\u00a0to\u00a0take\u00a0advantage\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0friendship\u00a0with\u00a0the\u00a0streambuf\u00a0implementation.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Matt\u00a0Austern\u00a0has\u00a0identified\u00a0opportunities\u00a0where\u00a0certain\u00a0iterator<br />\n+\u00a0\u00a0\u00a0\u00a0types,\u00a0particularly\u00a0including\u00a0streambuf\u00a0iterators\u00a0and\u00a0deque<br />\n+\u00a0\u00a0\u00a0\u00a0iterators,\u00a0have\u00a0a\u00a0\"two-stage\"\u00a0quality,\u00a0such\u00a0that\u00a0an\u00a0intermediate<br />\n+\u00a0\u00a0\u00a0\u00a0limit\u00a0can\u00a0be\u00a0checked\u00a0much\u00a0more\u00a0quickly\u00a0than\u00a0the\u00a0true\u00a0limit\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0range\u00a0operations.\u00a0If\u00a0identified\u00a0with\u00a0a\u00a0member\u00a0of\u00a0iterator_traits,<br />\n+\u00a0\u00a0\u00a0\u00a0algorithms\u00a0may\u00a0be\u00a0specialized\u00a0for\u00a0this\u00a0case.\u00a0Of\u00a0course\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0iterators\u00a0that\u00a0have\u00a0this\u00a0quality\u00a0can\u00a0be\u00a0identified\u00a0by\u00a0specializing<br />\n+\u00a0\u00a0\u00a0\u00a0a\u00a0traits\u00a0class.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Many\u00a0of\u00a0the\u00a0algorithms\u00a0must\u00a0be\u00a0specialized\u00a0for\u00a0the\u00a0streambuf<br />\n+\u00a0\u00a0\u00a0\u00a0iterators,\u00a0to\u00a0take\u00a0advantage\u00a0of\u00a0block-mode\u00a0operations,\u00a0in\u00a0order<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0allow\u00a0iostream/locale\u00a0operations'\u00a0performance\u00a0not\u00a0to\u00a0suffer.<br />\n+\u00a0\u00a0\u00a0\u00a0It\u00a0may\u00a0be\u00a0that\u00a0they\u00a0could\u00a0be\u00a0treated\u00a0as\u00a0staged\u00a0iterators\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0take\u00a0advantage\u00a0of\u00a0those\u00a0optimizations.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a025\u00a0\u00a0Algorithms<br />\n+\u00a0\u00a0\u00a0\u00a0----------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;algorithm&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;cstdlib&gt;\u00a0(also\u00a0in\u00a018,\u00a021,\u00a026))<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0algorithms\u00a0are\u00a0\"mostly\u00a0complete\".\u00a0As\u00a0mentioned\u00a0above,\u00a0they<br />\n+\u00a0\u00a0\u00a0\u00a0are\u00a0optimized\u00a0for\u00a0speed\u00a0at\u00a0the\u00a0expense\u00a0of\u00a0code\u00a0and\u00a0data\u00a0size.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Specializations\u00a0of\u00a0many\u00a0of\u00a0the\u00a0algorithms\u00a0for\u00a0non-STL\u00a0types\u00a0would<br />\n+\u00a0\u00a0\u00a0\u00a0give\u00a0performance\u00a0improvements,\u00a0but\u00a0we\u00a0must\u00a0use\u00a0great\u00a0care\u00a0not\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0interfere\u00a0with\u00a0fragile\u00a0template\u00a0overloading\u00a0semantics\u00a0for\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0interfaces.\u00a0Conventionally\u00a0the\u00a0standard\u00a0function\u00a0template<br />\n+\u00a0\u00a0\u00a0\u00a0interface\u00a0is\u00a0an\u00a0inline\u00a0which\u00a0delegates\u00a0to\u00a0a\u00a0non-standard\u00a0function<br />\n+\u00a0\u00a0\u00a0\u00a0which\u00a0is\u00a0then\u00a0overloaded\u00a0(this\u00a0is\u00a0already\u00a0done\u00a0in\u00a0many\u00a0places\u00a0in<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0library).\u00a0Particularly\u00a0appealing\u00a0opportunities\u00a0for\u00a0the\u00a0sake\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0iostream\u00a0performance\u00a0are\u00a0for\u00a0copy\u00a0and\u00a0find\u00a0applied\u00a0to\u00a0streambuf<br />\n+\u00a0\u00a0\u00a0\u00a0iterators\u00a0or\u00a0(as\u00a0noted\u00a0elsewhere)\u00a0for\u00a0staged\u00a0iterators,\u00a0of\u00a0which<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0streambuf\u00a0iterators\u00a0are\u00a0a\u00a0good\u00a0example.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0bsearch\u00a0and\u00a0qsort\u00a0functions\u00a0cannot\u00a0be\u00a0overloaded\u00a0properly\u00a0as<br />\n+\u00a0\u00a0\u00a0\u00a0required\u00a0by\u00a0the\u00a0standard\u00a0because\u00a0gcc\u00a0does\u00a0not\u00a0yet\u00a0allow\u00a0overloading<br />\n+\u00a0\u00a0\u00a0\u00a0on\u00a0the\u00a0extern-\"C\"-ness\u00a0of\u00a0a\u00a0function\u00a0pointer.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a026\u00a0\u00a0Numerics<br />\n+\u00a0\u00a0\u00a0\u00a0--------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;complex&gt;\u00a0&lt;valarray&gt;\u00a0&lt;numeric&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;cmath&gt;,\u00a0&lt;cstdlib&gt;\u00a0(also\u00a018,\u00a021,\u00a025)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Numeric\u00a0components:\u00a0Gabriel\u00a0dos\u00a0Reis's\u00a0valarray,\u00a0Drepper's\u00a0complex,<br />\n+\u00a0\u00a0\u00a0\u00a0and\u00a0the\u00a0few\u00a0algorithms\u00a0from\u00a0the\u00a0STL\u00a0are\u00a0\"mostly\u00a0done\".\u00a0\u00a0Of\u00a0course<br />\n+\u00a0\u00a0\u00a0\u00a0optimization\u00a0opportunities\u00a0abound\u00a0for\u00a0the\u00a0numerically\u00a0literate.\u00a0It<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0not\u00a0clear\u00a0whether\u00a0the\u00a0valarray\u00a0implementation\u00a0really\u00a0conforms<br />\n+\u00a0\u00a0\u00a0\u00a0fully,\u00a0in\u00a0the\u00a0assumptions\u00a0it\u00a0makes\u00a0about\u00a0aliasing\u00a0(and\u00a0lack\u00a0thereof)<br />\n+\u00a0\u00a0\u00a0\u00a0in\u00a0its\u00a0arguments.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0C\u00a0div()\u00a0and\u00a0ldiv()\u00a0functions\u00a0are\u00a0interesting,\u00a0because\u00a0they\u00a0are\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0only\u00a0case\u00a0where\u00a0a\u00a0C\u00a0library\u00a0function\u00a0returns\u00a0a\u00a0class\u00a0object\u00a0by\u00a0value.<br />\n+\u00a0\u00a0\u00a0\u00a0Since\u00a0the\u00a0C++\u00a0type\u00a0div_t\u00a0must\u00a0be\u00a0different\u00a0from\u00a0the\u00a0underlying\u00a0C\u00a0type<br />\n+\u00a0\u00a0\u00a0\u00a0(which\u00a0is\u00a0in\u00a0the\u00a0wrong\u00a0namespace)\u00a0the\u00a0underlying\u00a0functions\u00a0div()\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0ldiv()\u00a0cannot\u00a0be\u00a0re-used\u00a0efficiently.\u00a0Fortunately\u00a0they\u00a0are\u00a0trivial\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0re-implement.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Chapter\u00a027\u00a0\u00a0Iostreams<br />\n+\u00a0\u00a0\u00a0\u00a0---------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;iosfwd&gt;\u00a0&lt;streambuf&gt;\u00a0&lt;ios&gt;\u00a0&lt;ostream&gt;\u00a0&lt;istream&gt;\u00a0&lt;iostream&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;iomanip&gt;\u00a0&lt;sstream&gt;\u00a0&lt;fstream&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0C\u00a0headers:\u00a0&lt;cstdio&gt;\u00a0&lt;cwchar&gt;\u00a0(also\u00a0in\u00a021)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Iostream\u00a0is\u00a0currently\u00a0in\u00a0a\u00a0very\u00a0incomplete\u00a0state.\u00a0&lt;iosfwd&gt;,\u00a0&lt;iomanip&gt;,<br />\n+\u00a0\u00a0\u00a0\u00a0ios_base,\u00a0and\u00a0basic_ios&lt;&gt;\u00a0are\u00a0\"mostly\u00a0complete\".\u00a0basic_streambuf&lt;&gt;\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0basic_ostream&lt;&gt;\u00a0are\u00a0well\u00a0along,\u00a0but\u00a0basic_istream&lt;&gt;\u00a0has\u00a0had\u00a0little\u00a0work<br />\n+\u00a0\u00a0\u00a0\u00a0done.\u00a0The\u00a0standard\u00a0stream\u00a0objects,\u00a0&lt;sstream&gt;\u00a0and\u00a0&lt;fstream&gt;\u00a0have\u00a0been<br />\n+\u00a0\u00a0\u00a0\u00a0started;\u00a0basic_filebuf&lt;&gt;\u00a0\"write\"\u00a0functions\u00a0have\u00a0been\u00a0implemented\u00a0just<br />\n+\u00a0\u00a0\u00a0\u00a0enough\u00a0to\u00a0do\u00a0\"hello,\u00a0world\".<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Most\u00a0of\u00a0the\u00a0istream\u00a0and\u00a0ostream\u00a0operators\u00a0&lt;&lt;\u00a0and\u00a0&gt;&gt;\u00a0(with\u00a0the\u00a0exception<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0the\u00a0op&lt;&lt;(integer)\u00a0ones)\u00a0have\u00a0not\u00a0been\u00a0changed\u00a0to\u00a0use\u00a0locale\u00a0primitives,<br />\n+\u00a0\u00a0\u00a0\u00a0sentry\u00a0objects,\u00a0or\u00a0char_traits\u00a0members.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0All\u00a0these\u00a0templates\u00a0should\u00a0be\u00a0manually\u00a0instantiated\u00a0for\u00a0char\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0wchar_t\u00a0in\u00a0a\u00a0way\u00a0that\u00a0links\u00a0only\u00a0used\u00a0members\u00a0into\u00a0user\u00a0programs.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Streambuf\u00a0is\u00a0fertile\u00a0ground\u00a0for\u00a0optimization\u00a0extensions.\u00a0An\u00a0extended<br />\n+\u00a0\u00a0\u00a0\u00a0interface\u00a0giving\u00a0iterator\u00a0access\u00a0to\u00a0its\u00a0internal\u00a0buffer\u00a0would\u00a0be\u00a0very<br />\n+\u00a0\u00a0\u00a0\u00a0useful\u00a0for\u00a0other\u00a0library\u00a0components.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Iostream\u00a0operations\u00a0(primarily\u00a0operators\u00a0&lt;&lt;\u00a0and\u00a0&gt;&gt;)\u00a0can\u00a0take\u00a0advantage<br />\n+\u00a0\u00a0\u00a0\u00a0of\u00a0the\u00a0case\u00a0where\u00a0user\u00a0code\u00a0has\u00a0not\u00a0specified\u00a0a\u00a0locale,\u00a0and\u00a0bypass\u00a0locale<br />\n+\u00a0\u00a0\u00a0\u00a0operations\u00a0entirely.\u00a0The\u00a0current\u00a0implementation\u00a0of\u00a0op&lt;&lt;/num_put&lt;&gt;::put,<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0the\u00a0integer\u00a0types,\u00a0demonstrates\u00a0how\u00a0they\u00a0can\u00a0cache\u00a0encoding\u00a0details<br />\n+\u00a0\u00a0\u00a0\u00a0from\u00a0the\u00a0locale\u00a0on\u00a0each\u00a0operation.\u00a0There\u00a0is\u00a0lots\u00a0more\u00a0room\u00a0for<br />\n+\u00a0\u00a0\u00a0\u00a0optimization\u00a0in\u00a0this\u00a0area.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0definition\u00a0of\u00a0the\u00a0relationship\u00a0between\u00a0the\u00a0standard\u00a0streams<br />\n+\u00a0\u00a0\u00a0\u00a0cout\u00a0et\u00a0al.\u00a0and\u00a0stdout\u00a0et\u00a0al.\u00a0requires\u00a0something\u00a0like\u00a0a\u00a0\"stdiobuf\".<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0SGI\u00a0solution\u00a0of\u00a0using\u00a0double-indirection\u00a0to\u00a0actually\u00a0use\u00a0a<br />\n+\u00a0\u00a0\u00a0\u00a0stdio\u00a0FILE\u00a0object\u00a0for\u00a0buffering\u00a0is\u00a0unsatisfactory,\u00a0because\u00a0it<br />\n+\u00a0\u00a0\u00a0\u00a0interferes\u00a0with\u00a0peephole\u00a0loop\u00a0optimizations.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0&lt;sstream&gt;\u00a0header\u00a0work\u00a0has\u00a0begun.\u00a0stringbuf\u00a0can\u00a0benefit\u00a0from<br />\n+\u00a0\u00a0\u00a0\u00a0friendship\u00a0with\u00a0basic_string&lt;&gt;\u00a0and\u00a0basic_string&lt;&gt;::_Rep\u00a0to\u00a0use<br />\n+\u00a0\u00a0\u00a0\u00a0those\u00a0objects\u00a0directly\u00a0as\u00a0buffers,\u00a0and\u00a0avoid\u00a0allocating\u00a0and\u00a0making<br />\n+\u00a0\u00a0\u00a0\u00a0copies.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0basic_filebuf&lt;&gt;\u00a0template\u00a0is\u00a0a\u00a0complex\u00a0beast.\u00a0It\u00a0is\u00a0specified\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0use\u00a0the\u00a0locale\u00a0facet\u00a0codecvt&lt;&gt;\u00a0to\u00a0translate\u00a0characters\u00a0between\u00a0native<br />\n+\u00a0\u00a0\u00a0\u00a0files\u00a0and\u00a0the\u00a0locale\u00a0character\u00a0encoding.\u00a0In\u00a0general\u00a0this\u00a0involves<br />\n+\u00a0\u00a0\u00a0\u00a0two\u00a0buffers,\u00a0one\u00a0of\u00a0\"char\"\u00a0representing\u00a0the\u00a0file\u00a0and\u00a0another\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0\"char_type\",\u00a0for\u00a0the\u00a0stream,\u00a0with\u00a0codecvt&lt;&gt;\u00a0translating.\u00a0The\u00a0process<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0complicated\u00a0by\u00a0the\u00a0variable-length\u00a0nature\u00a0of\u00a0the\u00a0translation,\u00a0and<br />\n+\u00a0\u00a0\u00a0\u00a0the\u00a0need\u00a0to\u00a0seek\u00a0to\u00a0corresponding\u00a0places\u00a0in\u00a0the\u00a0two\u00a0representations.<br />\n+\u00a0\u00a0\u00a0\u00a0For\u00a0the\u00a0case\u00a0of\u00a0basic_filebuf&lt;char&gt;,\u00a0when\u00a0no\u00a0translation\u00a0is\u00a0needed,<br />\n+\u00a0\u00a0\u00a0\u00a0a\u00a0single\u00a0buffer\u00a0suffices.\u00a0A\u00a0specialized\u00a0filebuf\u00a0can\u00a0be\u00a0used\u00a0to\u00a0reduce<br />\n+\u00a0\u00a0\u00a0\u00a0code\u00a0space\u00a0overhead\u00a0when\u00a0no\u00a0locale\u00a0has\u00a0been\u00a0imbued.\u00a0Matt\u00a0Austern's<br />\n+\u00a0\u00a0\u00a0\u00a0work\u00a0at\u00a0SGI\u00a0will\u00a0be\u00a0useful,\u00a0perhaps\u00a0directly\u00a0as\u00a0a\u00a0source\u00a0of\u00a0code,\u00a0or<br />\n+\u00a0\u00a0\u00a0\u00a0at\u00a0least\u00a0as\u00a0an\u00a0example\u00a0to\u00a0draw\u00a0on.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Filebuf,\u00a0almost\u00a0uniquely\u00a0(cf.\u00a0operator\u00a0new),\u00a0depends\u00a0heavily\u00a0on<br />\n+\u00a0\u00a0\u00a0\u00a0underlying\u00a0environmental\u00a0facilities.\u00a0In\u00a0current\u00a0releases\u00a0iostream<br />\n+\u00a0\u00a0\u00a0\u00a0depends\u00a0fairly\u00a0heavily\u00a0on\u00a0libio\u00a0constant\u00a0definitions,\u00a0but\u00a0it\u00a0should<br />\n+\u00a0\u00a0\u00a0\u00a0be\u00a0made\u00a0independent.\u00a0\u00a0It\u00a0also\u00a0depends\u00a0on\u00a0operating\u00a0system\u00a0primitives<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0file\u00a0operations.\u00a0There\u00a0is\u00a0immense\u00a0room\u00a0for\u00a0optimizations\u00a0using<br />\n+\u00a0\u00a0\u00a0\u00a0(e.g.)\u00a0mmap\u00a0for\u00a0reading.\u00a0The\u00a0shadow/\u00a0directory\u00a0wraps,\u00a0besides\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0C\u00a0headers,\u00a0the\u00a0libio.h\u00a0and\u00a0unistd.h\u00a0headers,\u00a0for\u00a0use\u00a0mainly<br />\n+\u00a0\u00a0\u00a0\u00a0by\u00a0filebuf.\u00a0These\u00a0wrappings\u00a0have\u00a0not\u00a0been\u00a0completed,\u00a0though\u00a0there<br />\n+\u00a0\u00a0\u00a0\u00a0is\u00a0scaffolding\u00a0in\u00a0place.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0The\u00a0encapulation\u00a0of\u00a0certain\u00a0C\u00a0header\u00a0&lt;cstdio&gt;\u00a0names\u00a0presents\u00a0an<br />\n+\u00a0\u00a0\u00a0\u00a0interesting\u00a0problem.\u00a0It\u00a0is\u00a0possible\u00a0to\u00a0define\u00a0an\u00a0inline\u00a0std::fprintf()<br />\n+\u00a0\u00a0\u00a0\u00a0implemented\u00a0in\u00a0terms\u00a0of\u00a0the\u00a0'extern\u00a0\"C\"'\u00a0vfprintf(),\u00a0but\u00a0there\u00a0is\u00a0no<br />\n+\u00a0\u00a0\u00a0\u00a0standard\u00a0vfscanf()\u00a0to\u00a0use\u00a0to\u00a0implement\u00a0std::fscanf().\u00a0It\u00a0appears\u00a0that<br />\n+\u00a0\u00a0\u00a0\u00a0vfscanf\u00a0but\u00a0be\u00a0re-implemented\u00a0in\u00a0C++\u00a0for\u00a0targets\u00a0where\u00a0no\u00a0vfscanf<br />\n+\u00a0\u00a0\u00a0\u00a0extension\u00a0has\u00a0been\u00a0defined.\u00a0This\u00a0is\u00a0interesting\u00a0in\u00a0that\u00a0it\u00a0seems<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0be\u00a0the\u00a0only\u00a0significant\u00a0case\u00a0in\u00a0the\u00a0C\u00a0library\u00a0where\u00a0this\u00a0kind\u00a0of<br />\n+\u00a0\u00a0\u00a0\u00a0rewriting\u00a0is\u00a0necessary.\u00a0(Of\u00a0course\u00a0Glibc\u00a0provides\u00a0the\u00a0vfscanf()<br />\n+\u00a0\u00a0\u00a0\u00a0extension.)\u00a0\u00a0(The\u00a0functions\u00a0related\u00a0to\u00a0exit()\u00a0must\u00a0be\u00a0rewritten<br />\n+\u00a0\u00a0\u00a0\u00a0for\u00a0other\u00a0reasons.)<br />\n+<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Annex\u00a0D<br />\n+\u00a0\u00a0\u00a0\u00a0-------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;strstream&gt;<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Annex\u00a0D\u00a0defines\u00a0many\u00a0non-library\u00a0features,\u00a0and\u00a0many\u00a0minor<br />\n+\u00a0\u00a0\u00a0\u00a0modifications\u00a0to\u00a0various\u00a0headers,\u00a0and\u00a0a\u00a0complete\u00a0header.<br />\n+\u00a0\u00a0\u00a0\u00a0It\u00a0is\u00a0\"mostly\u00a0done\",\u00a0except\u00a0that\u00a0the\u00a0libstdc++-2\u00a0&lt;strstream&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0header\u00a0has\u00a0not\u00a0been\u00a0adopted\u00a0into\u00a0the\u00a0library,\u00a0or\u00a0checked\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0verify\u00a0that\u00a0it\u00a0matches\u00a0the\u00a0draft\u00a0in\u00a0those\u00a0details\u00a0that\u00a0were<br />\n+\u00a0\u00a0\u00a0\u00a0clarified\u00a0by\u00a0the\u00a0committee.\u00a0Certainly\u00a0it\u00a0must\u00a0at\u00a0least\u00a0be<br />\n+\u00a0\u00a0\u00a0\u00a0moved\u00a0into\u00a0the\u00a0std\u00a0namespace.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0We\u00a0still\u00a0need\u00a0to\u00a0wrap\u00a0all\u00a0the\u00a0deprecated\u00a0features\u00a0in\u00a0#if\u00a0guards<br />\n+\u00a0\u00a0\u00a0\u00a0so\u00a0that\u00a0pedantic\u00a0compile\u00a0modes\u00a0can\u00a0detect\u00a0their\u00a0use.<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0Nonstandard\u00a0Extensions<br />\n+\u00a0\u00a0\u00a0\u00a0----------------------<br />\n+\u00a0\u00a0\u00a0\u00a0Headers:\u00a0&lt;iostream.h&gt;\u00a0&lt;strstream.h&gt;\u00a0&lt;hash&gt;\u00a0&lt;rbtree&gt;<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;pthread_alloc&gt;\u00a0&lt;stdiobuf&gt;\u00a0(etc.)<br />\n+<br />\n+\u00a0\u00a0\u00a0\u00a0User\u00a0code\u00a0has\u00a0come\u00a0to\u00a0depend\u00a0on\u00a0a\u00a0variety\u00a0of\u00a0nonstandard\u00a0components<br />\n+\u00a0\u00a0\u00a0\u00a0that\u00a0we\u00a0must\u00a0not\u00a0omit.\u00a0Much\u00a0of\u00a0this\u00a0code\u00a0can\u00a0be\u00a0adopted\u00a0from<br />\n+\u00a0\u00a0\u00a0\u00a0libstdc++-v2\u00a0or\u00a0from\u00a0the\u00a0SGI\u00a0STL.\u00a0This\u00a0particularly\u00a0includes<br />\n+\u00a0\u00a0\u00a0\u00a0&lt;iostream.h&gt;,\u00a0&lt;strstream.h&gt;,\u00a0and\u00a0various\u00a0SGI\u00a0extensions\u00a0such<br />\n+\u00a0\u00a0\u00a0\u00a0as\u00a0&lt;hash_map.h&gt;.\u00a0Many\u00a0of\u00a0these\u00a0are\u00a0already\u00a0placed\u00a0in\u00a0the<br />\n+\u00a0\u00a0\u00a0\u00a0subdirectories\u00a0ext/\u00a0and\u00a0backward/.\u00a0(Note\u00a0that\u00a0it\u00a0is\u00a0better\u00a0to<br />\n+\u00a0\u00a0\u00a0\u00a0include\u00a0them\u00a0via\u00a0\"&lt;backward/hash_map.h&gt;\"\u00a0or\u00a0\"&lt;ext/hash_map&gt;\"\u00a0than<br />\n+\u00a0\u00a0\u00a0\u00a0to\u00a0search\u00a0the\u00a0subdirectory\u00a0itself\u00a0via\u00a0a\u00a0\"-I\"\u00a0directive.<br />\n+\u00a0\u00a0</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apas04.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_contributing.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"appendix_porting.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Documentation Style\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Appendix\u00a0B.\u00a0Porting and Maintenance</td></tr></table></div></body></html>"}, {"sha": "edcb2dc610f1435532afd245323d24dbb25a057c", "filename": "libstdc++-v3/doc/html/manual/bk01apd.html", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apd.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apd.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apd.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Appendix\u00a0D.\u00a0GNU General Public License</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"appendix_free.html\" title=\"Appendix\u00a0C.\u00a0Free Software Needs Free Documentation\" /><link rel=\"next\" href=\"bk01apds02.html\" title=\"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Appendix\u00a0D.\u00a0GNU General Public License</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"appendix_free.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apds02.html\">Next</a></td></tr></table><hr /></div><div class=\"appendix\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"appendix.gpl-2.0\"></a>GNU General Public License</h1></div><div><p class=\"releaseinfo\">Version 2, June 1991</p></div><div><p class=\"copyright\">Copyright \u00a9 1989, 1991 Free Software Foundation, Inc.</p></div><div><div class=\"legalnotice\"><a id=\"gpl-legalnotice\"></a><p>\n+\t</p><div class=\"address\"><p>Free\u00a0Software\u00a0Foundation,\u00a0Inc.\u00a0<br />\n+\t\u00a0\u00a0<span class=\"street\">51\u00a0Franklin\u00a0Street,\u00a0Fifth\u00a0Floor</span>,\u00a0<br />\n+\t\u00a0\u00a0<span class=\"city\">Boston</span>,\u00a0<span class=\"state\">MA</span>\u00a0<span class=\"postcode\">02110-1301</span><br />\n+\t\u00a0\u00a0<span class=\"country\">USA</span><br />\n+\t</p></div><p>\n+      </p><p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p></div></div><div><p class=\"pubdate\">Version 2, June 1991</p></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"section\"><a href=\"bk01apd.html#gpl-1\">Preamble</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html\">TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</a></span></dt><dd><dl><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-0\">Section 0</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-1\">Section 1</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-2\">Section 2</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-3\">Section 3</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-4\">Section 4</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-5\">Section 5</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-6\">Section 6</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-7\">Section 7</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-8\">Section 8</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-9\">Section 9</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-10\">Section 10</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-11\">NO WARRANTY Section 11</a></span></dt><dt><span class=\"section\"><a href=\"bk01apds02.html#gpl-2-12\">Section 12</a></span></dt></dl></dd><dt><span class=\"section\"><a href=\"bk01apds03.html\">How to Apply These Terms to Your New Programs</a></span></dt></dl></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"gpl-1\"></a>Preamble</h2></div></div></div><p>The licenses for most software are designed to take away your \n+      freedom to share and change it. By contrast, the GNU General Public License is \n+      intended to guarantee your freedom to share and change \n+      free software - to make sure the software is free for all its users. \n+      This General Public License applies to most of the Free Software \n+      Foundation's software and to any other program whose authors commit \n+      to using it. (Some other Free Software Foundation software is covered \n+      by the GNU Library General Public License instead.) You can apply it \n+      to your programs, too.</p><p>When we speak of free software, we are referring to freedom, not price. \n+      Our General Public Licenses are designed to make sure that you have the \n+      freedom to distribute copies of free software (and charge for this \n+      service if you wish), that you receive source code or can get it if you \n+      want it, that you can change the software or use pieces of it in new free \n+      programs; and that you know you can do these things.</p><p>To protect your rights, we need to make restrictions that forbid anyone \n+      to deny you these rights or to ask you to surrender the rights. These \n+      restrictions translate to certain responsibilities for you if you distribute \n+      copies of the software, or if you modify it.</p><p>For example, if you distribute copies of such a program, whether gratis or \n+      for a fee, you must give the recipients all the rights that you have. You \n+      must make sure that they, too, receive or can get the source code. And you \n+      must show them these terms so they know their rights.</p><p>We protect your rights with two steps:\n+      </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>copyright the software, and</p></li><li><p>offer you this license which gives you legal permission to copy, \n+\t    distribute and/or modify the software.</p></li></ol></div><p>\n+    </p><p>Also, for each author's protection and ours, we want to make certain that \n+      everyone understands that there is no warranty for this free software. If \n+      the software is modified by someone else and passed on, we want its \n+      recipients to know that what they have is not the original, so that any \n+      problems introduced by others will not reflect on the original authors' \n+      reputations.</p><p>Finally, any free program is threatened constantly by software patents. \n+      We wish to avoid the danger that redistributors of a free program will \n+      individually obtain patent licenses, in effect making the program \n+      proprietary. To prevent this, we have made it clear that any patent must be \n+      licensed for everyone's free use or not licensed at all.</p><p>The precise terms and conditions for copying, distribution and modification \n+      follow.</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"appendix_free.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apds02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Appendix\u00a0C.\u00a0Free Software Needs Free Documentation\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</td></tr></table></div></body></html>"}, {"sha": "5fb34dcbf66461448cb5e19e6136e2a8e245ccb5", "filename": "libstdc++-v3/doc/html/manual/bk01apds02.html", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apds02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apds02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apds02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,129 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01apd.html\" title=\"Appendix\u00a0D.\u00a0GNU General Public License\" /><link rel=\"prev\" href=\"bk01apd.html\" title=\"Appendix\u00a0D.\u00a0GNU General Public License\" /><link rel=\"next\" href=\"bk01apds03.html\" title=\"How to Apply These Terms to Your New Programs\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apd.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0D.\u00a0GNU General Public License</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apds03.html\">Next</a></td></tr></table><hr /></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"gpl-2\"></a>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</h2></div></div></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-0\"></a>Section 0</h3></div></div></div><p>This License applies to any program or other work which contains a notice \n+\tplaced by the copyright holder saying it may be distributed under the terms \n+\tof this General Public License. The \u201c<span class=\"quote\">Program</span>\u201d, below, refers to any such \n+\tprogram or work, and a \n+\t\u201c<span class=\"quote\">work based on the Program</span>\u201d means either \n+\tthe Program or any derivative work under copyright law: that is to say, a \n+\twork containing the Program or a portion of it, either verbatim or with \n+\tmodifications and/or translated into another language. (Hereinafter, translation \n+\tis included without limitation in the term \n+\t\u201c<span class=\"quote\">modification</span>\u201d.) Each licensee is addressed as \u201c<span class=\"quote\">you</span>\u201d.</p><p>Activities other than copying, distribution and modification are not covered by \n+\tthis License; they are outside its scope. The act of running the Program is not \n+\trestricted, and the output from the Program is covered only if its contents \n+\tconstitute a work based on the Program (independent of having been made by running \n+\tthe Program). Whether that is true depends on what the Program does.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-1\"></a>Section 1</h3></div></div></div><p>You may copy and distribute verbatim copies of the Program's source code as you \n+\treceive it, in any medium, provided that you conspicuously and appropriately \n+\tpublish on each copy an appropriate copyright notice and disclaimer of warranty; \n+\tkeep intact all the notices that refer to this License and to the absence of any \n+\twarranty; and give any other recipients of the Program a copy of this License \n+\talong with the Program.</p><p>You may charge a fee for the physical act of transferring a copy, and you may at \n+\tyour option offer warranty protection in exchange for a fee.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-2\"></a>Section 2</h3></div></div></div><p>You may modify your copy or copies of the Program or any portion of it, thus \n+\tforming a work based on the Program, and copy and distribute such modifications \n+\tor work under the terms of \n+\t<a class=\"link\" href=\"bk01apds02.html#gpl-2-1\" title=\"Section 1\">Section 1</a> above, provided \n+\tthat you also meet all of these conditions:\n+\t</p><div class=\"orderedlist\"><ol type=\"a\"><li><p>You must cause the modified files to carry prominent notices stating that \n+\t      you changed the files and the date of any change.</p></li><li><p>You must cause any work that you distribute or publish, that in whole or \n+\t      in part contains or is derived from the Program or any part thereof, to be \n+\t      licensed as a whole at no charge to all third parties under the terms of \n+\t      this License.</p></li><li><p>If the modified program normally reads commands interactively when run, you \n+\t      must cause it, when started running for such interactive use in the most \n+\t      ordinary way, to print or display an announcement including an appropriate \n+\t      copyright notice and a notice that there is no warranty (or else, saying \n+\t      that you provide a warranty) and that users may redistribute the program \n+\t      under these conditions, and telling the user how to view a copy of this \n+\t      License. (Exception: If the Program itself is interactive but does not \n+              normally print such an announcement, your work based on the Program is not \n+              required to print an   announcement.)</p></li></ol></div><p>\n+      </p><p>These requirements apply to the modified work as a whole. If identifiable sections \n+\tof that work are not derived from the Program, and can be reasonably considered \n+\tindependent and separate works in themselves, then this License, and its terms, \n+\tdo not apply to those sections when you distribute them as separate works. But when \n+\tyou distribute the same sections as part of a whole which is a work based on the \n+\tProgram, the distribution of the whole must be on the terms of this License, whose \n+\tpermissions for other licensees extend to the entire whole, and thus to each and \n+\tevery part regardless of who wrote it.</p><p>Thus, it is not the intent of this section to claim rights or contest your rights \n+\tto work written entirely by you; rather, the intent is to exercise the right to control \n+\tthe distribution of derivative or collective works based on the Program.</p><p>In addition, mere aggregation of another work not based on the Program with the Program \n+\t(or with a work based on the Program) on a volume of a storage or distribution medium \n+\tdoes not bring the other work under the scope of this License.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-3\"></a>Section 3</h3></div></div></div><p>You may copy and distribute the Program (or a work based on it, under \n+\t<a class=\"link\" href=\"bk01apds02.html#gpl-2-2\" title=\"Section 2\">Section 2</a> in object code or executable form under the terms of \n+\t<a class=\"link\" href=\"bk01apds02.html#gpl-2-1\" title=\"Section 1\">Sections 1</a> and \n+\t<a class=\"link\" href=\"bk01apds02.html#gpl-2-2\" title=\"Section 2\">2</a> above provided that you also do one of the following:\n+\t</p><div class=\"orderedlist\"><ol type=\"a\"><li><p>Accompany it with the complete corresponding machine-readable source code, which \n+\t      must be distributed under the terms of Sections 1 and 2 above on a medium \n+\t      customarily used for software interchange; or,</p></li><li><p>Accompany it with a written offer, valid for at least three years, to give any \n+\t      third party, for a charge no more than your cost of physically performing source \n+\t      distribution, a complete machine-readable copy of the corresponding source code, \n+\t      to be distributed under the terms of Sections 1 and 2 above on a medium customarily \n+\t      used for software interchange; or,</p></li><li><p>Accompany it with the information you received as to the offer to distribute \n+\t      corresponding source code. (This alternative is allowed only for noncommercial \n+\t      distribution and only if you received the program in object code or executable form \n+\t      with such an offer, in accord with Subsection b above.)</p></li></ol></div><p>\n+      </p><p>The source code for a work means the preferred form of the work for making modifications \n+\tto it. For an executable work, complete source code means all the source code for all modules \n+\tit contains, plus any associated interface definition files, plus the scripts used to control \n+\tcompilation and installation of the executable. However, as a special exception, the source \n+\tcode distributed need not include anything that is normally distributed (in either source or \n+\tbinary form) with the major components (compiler, kernel, and so on) of the operating system \n+\ton which the executable runs, unless that component itself accompanies the executable.</p><p>If distribution of executable or object code is made by offering access to copy from a \n+\tdesignated place, then offering equivalent access to copy the source code from the same place \n+\tcounts as distribution of the source code, even though third parties are not compelled to \n+\tcopy the source along with the object code.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-4\"></a>Section 4</h3></div></div></div><p>You may not copy, modify, sublicense, or distribute the Program except as expressly provided \n+\tunder this License. Any attempt otherwise to copy, modify, sublicense or distribute the \n+\tProgram is void, and will automatically terminate your rights under this License. However, \n+\tparties who have received copies, or rights, from you under this License will not have their \n+\tlicenses terminated so long as such parties remain in full compliance.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-5\"></a>Section 5</h3></div></div></div><p>You are not required to accept this License, since you have not signed it. However, nothing \n+\telse grants you permission to modify or distribute the Program or its derivative works. \n+\tThese actions are prohibited by law if you do not accept this License. Therefore, by modifying \n+\tor distributing the Program (or any work based on the Program), you indicate your acceptance \n+\tof this License to do so, and all its terms and conditions for copying, distributing or \n+\tmodifying the Program or works based on it.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-6\"></a>Section 6</h3></div></div></div><p>Each time you redistribute the Program (or any work based on the Program), the recipient \n+\tautomatically receives a license from the original licensor to copy, distribute or modify \n+\tthe Program subject to these terms and conditions. You may not impose any further restrictions \n+\ton the recipients' exercise of the rights granted herein. You are not responsible for enforcing \n+\tcompliance by third parties to this License.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-7\"></a>Section 7</h3></div></div></div><p>If, as a consequence of a court judgment or allegation of patent infringement or for any other \n+\treason (not limited to patent issues), conditions are imposed on you (whether by court order, \n+\tagreement or otherwise) that contradict the conditions of this License, they do not excuse you \n+\tfrom the conditions of this License. If you cannot distribute so as to satisfy simultaneously \n+\tyour obligations under this License and any other pertinent obligations, then as a consequence \n+\tyou may not distribute the Program at all. For example, if a patent license would not permit \n+\troyalty-free redistribution of the Program by all those who receive copies directly or \n+\tindirectly through you, then the only way you could satisfy both it and this License would be \n+\tto refrain entirely from distribution of the Program.</p><p>If any portion of this section is held invalid or unenforceable under any particular circumstance, \n+\tthe balance of the section is intended to apply and the section as a whole is intended to apply \n+\tin other circumstances.</p><p>It is not the purpose of this section to induce you to infringe any patents or other property \n+\tright claims or to contest validity of any such claims; this section has the sole purpose of \n+\tprotecting the integrity of the free software distribution system, which is implemented by public \n+\tlicense practices. Many people have made generous contributions to the wide range of software \n+\tdistributed through that system in reliance on consistent application of that system; it is up \n+\tto the author/donor to decide if he or she is willing to distribute software through any other \n+\tsystem and a licensee cannot impose that choice.</p><p>This section is intended to make thoroughly clear what is believed to be a consequence of the \n+\trest of this License.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-8\"></a>Section 8</h3></div></div></div><p>If the distribution and/or use of the Program is restricted in certain countries either by patents \n+\tor by copyrighted interfaces, the original copyright holder who places the Program under this License \n+\tmay add an explicit geographical distribution limitation excluding those countries, so that \n+\tdistribution is permitted only in or among countries not thus excluded. In such case, this License \n+\tincorporates the limitation as if written in the body of this License.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-9\"></a>Section 9</h3></div></div></div><p>The Free Software Foundation may publish revised and/or new versions of the General Public License \n+\tfrom time to time. Such new versions will be similar in spirit to the present version, but may differ \n+\tin detail to address new problems or concerns.</p><p>Each version is given a distinguishing version number. If the Program specifies a version number of \n+\tthis License which applies to it and \u201c<span class=\"quote\">any later version</span>\u201d, you have the option of following the terms \n+\tand conditions either of that version or of any later version published by the Free Software \n+\tFoundation. If the Program does not specify a version number of this License, you may choose any \n+\tversion ever published by the Free Software Foundation.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-10\"></a>Section 10</h3></div></div></div><p>If you wish to incorporate parts of the Program into other free programs whose distribution \n+\tconditions are different, write to the author to ask for permission. For software which is copyrighted \n+\tby the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions \n+\tfor this. Our decision will be guided by the two goals of preserving the free status of all \n+\tderivatives of our free software and of promoting the sharing and reuse of software generally.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-11\"></a>NO WARRANTY Section 11</h3></div></div></div><p>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT \n+\tPERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR \n+\tOTHER PARTIES PROVIDE THE PROGRAM \u201c<span class=\"quote\">AS IS</span>\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, \n+\tINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR \n+\tPURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE \n+\tPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"gpl-2-12\"></a>Section 12</h3></div></div></div><p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR \n+\tANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU \n+\tFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE \n+\tUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED \n+\tINACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH \n+\tANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH \n+\tDAMAGES.</p><p>END OF TERMS AND CONDITIONS</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apd.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01apd.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01apds03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Appendix\u00a0D.\u00a0GNU General Public License\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0How to Apply These Terms to Your New Programs</td></tr></table></div></body></html>"}, {"sha": "87b5df25ef06f1829e0e0b7a470a06d441726c85", "filename": "libstdc++-v3/doc/html/manual/bk01apds03.html", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apds03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apds03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01apds03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>How to Apply These Terms to Your New Programs</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01apd.html\" title=\"Appendix\u00a0D.\u00a0GNU General Public License\" /><link rel=\"prev\" href=\"bk01apds02.html\" title=\"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\" /><link rel=\"next\" href=\"bk01ape.html\" title=\"Appendix\u00a0E.\u00a0GNU Free Documentation License\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">How to Apply These Terms to Your New Programs</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apds02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0D.\u00a0GNU General Public License</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01ape.html\">Next</a></td></tr></table><hr /></div><div class=\"section\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"gpl-3\"></a>How to Apply These Terms to Your New Programs</h2></div></div></div><p>If you develop a new program, and you want it to be of the greatest\n+      possible use to the public, the best way to achieve this is to make it\n+      free software which everyone can redistribute and change under these terms.</p><p>To do so, attach the following notices to the program.  It is safest\n+      to attach them to the start of each source file to most effectively\n+      convey the exclusion of warranty; and each file should have at least\n+      the \u201c<span class=\"quote\">copyright</span>\u201d line and a pointer to where the full notice is found.</p><p>&lt;one line to give the program's name and a brief idea of what it does.&gt;\n+      Copyright (C) &lt;year&gt;    &lt;name of author&gt;</p><p>This program is free software; you can redistribute it and/or modify\n+      it under the terms of the GNU General Public License as published by\n+      the Free Software Foundation; either version 2 of the License, or\n+      (at your option) any later version.</p><p>This program is distributed in the hope that it will be useful,\n+      but WITHOUT ANY WARRANTY; without even the implied warranty of\n+      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+      GNU General Public License for more details.</p><p>You should have received a copy of the GNU General Public License\n+      along with this program; if not, write to the Free Software\n+      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</p><p>Also add information on how to contact you by electronic and paper mail.</p><p>If the program is interactive, make it output a short notice like this\n+      when it starts in an interactive mode:</p><p>Gnomovision version 69, Copyright (C) year name of author\n+      Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type \u201c<span class=\"quote\">show w</span>\u201d.\n+      This is free software, and you are welcome to redistribute it\n+      under certain conditions; type \u201c<span class=\"quote\">show c</span>\u201d for details.</p><p>The hypothetical commands \u201c<span class=\"quote\">show w</span>\u201d and \u201c<span class=\"quote\">show c</span>\u201d should \n+      show the appropriate parts of the General Public License.  Of course, the commands you \n+      use may be called something other than \u201c<span class=\"quote\">show w</span>\u201d and \u201c<span class=\"quote\">show c</span>\u201d; \n+      they could even be mouse-clicks or menu items--whatever suits your program.</p><p>You should also get your employer (if you work as a programmer) or your\n+      school, if any, to sign a \u201c<span class=\"quote\">copyright disclaimer</span>\u201d for the program, if\n+      necessary.  Here is a sample; alter the names:</p><p>Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n+      \u201c<span class=\"quote\">Gnomovision</span>\u201d (which makes passes at compilers) written by James Hacker.</p><p>&lt;signature of Ty Coon&gt;, 1 April 1989\n+      Ty Coon, President of Vice</p><p>This General Public License does not permit incorporating your program into\n+      proprietary programs.  If your program is a subroutine library, you may\n+      consider it more useful to permit linking proprietary applications with the\n+      library.  If this is what you want to do, use the GNU Library General\n+      Public License instead of this License.</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apds02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01apd.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01ape.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Appendix\u00a0E.\u00a0GNU Free Documentation License</td></tr></table></div></body></html>"}, {"sha": "c5a021fe1528db4c325f54202fdb175b4937c065", "filename": "libstdc++-v3/doc/html/manual/bk01ape.html", "status": "added", "additions": 393, "deletions": 0, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01ape.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01ape.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01ape.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,393 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Appendix\u00a0E.\u00a0GNU Free Documentation License</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01apds03.html\" title=\"How to Apply These Terms to Your New Programs\" /><link rel=\"next\" href=\"../bk02.html\" title=\"\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Appendix\u00a0E.\u00a0GNU Free Documentation License</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apds03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"../bk02.html\">Next</a></td></tr></table><hr /></div><div class=\"appendix\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"appendix.gfdl-1.2\"></a>Appendix\u00a0E.\u00a0GNU Free Documentation License</h2></div></div></div><p>\n+    Copyright (C) 2000, 2001, 2002 Free Software Foundation,\n+    <abbr class=\"abbrev\">Inc.</abbr> 51 Franklin <abbr class=\"abbrev\">St</abbr>, Fifth Floor,\n+    Boston, <abbr class=\"abbrev\">MA</abbr> 02110-1301 <abbr class=\"abbrev\">USA</abbr>.  Everyone is permitted to copy and\n+    distribute verbatim copies of this license document, but changing it is\n+    not allowed.\n+  </p><h2><a id=\"Preamble\"></a>\n+    0. PREAMBLE\n+  </h2><p>\n+    The purpose of this License is to make a manual, textbook, or other\n+    functional and useful document \"free\" in the sense of freedom: to assure\n+    everyone the effective freedom to copy and redistribute it, with or\n+    without modifying it, either commercially or noncommercially.\n+    Secondarily, this License preserves for the author and publisher a way to\n+    get credit for their work, while not being considered responsible for\n+    modifications made by others.\n+  </p><p>\n+    This License is a kind of \"copyleft\", which means that derivative works of\n+    the document must themselves be free in the same sense.  It complements\n+    the GNU General Public License, which is a copyleft license designed for\n+    free software.\n+  </p><p>\n+    We have designed this License in order to use it for manuals for free\n+    software, because free software needs free documentation: a free program\n+    should come with manuals providing the same freedoms that the software\n+    does.  But this License is not limited to software manuals; it can be used\n+    for any textual work, regardless of subject matter or whether it is\n+    published as a printed book.  We recommend this License principally for\n+    works whose purpose is instruction or reference.</p><h2><a id=\"Definitions\"></a>\n+    1. APPLICABILITY AND DEFINITIONS\n+  </h2><p>\n+    This License applies to any manual or other work, in any medium, that\n+    contains a notice placed by the copyright holder saying it can be\n+    distributed under the terms of this License.  Such a notice grants a\n+    world-wide, royalty-free license, unlimited in duration, to use that work\n+    under the conditions stated herein.  The \"Document\", below, refers to any\n+    such manual or work.  Any member of the public is a licensee, and is\n+    addressed as \"you\".  You accept the license if you copy, modify or\n+    distribute the work in a way requiring permission under copyright\n+    law.\n+  </p><p>\n+    A \"Modified Version\" of the Document means any work containing the\n+    Document or a portion of it, either copied verbatim, or with modifications\n+    and/or translated into another language.\n+  </p><p>\n+    A \"Secondary Section\" is a named appendix or a front-matter section of the\n+    Document that deals exclusively with the relationship of the publishers or\n+    authors of the Document to the Document's overall subject (or to related\n+    matters) and contains nothing that could fall directly within that overall\n+    subject.  (Thus, if the Document is in part a textbook of mathematics, a\n+    Secondary Section may not explain any mathematics.)  The relationship\n+    could be a matter of historical connection with the subject or with\n+    related matters, or of legal, commercial, philosophical, ethical or\n+    political position regarding them.\n+  </p><p>\n+    The \"Invariant Sections\" are certain Secondary Sections whose titles are\n+    designated, as being those of Invariant Sections, in the notice that says\n+    that the Document is released under this License.  If a section does not\n+    fit the above definition of Secondary then it is not allowed to be\n+    designated as Invariant.  The Document may contain zero Invariant\n+    Sections.  If the Document does not identify any Invariant Sections then\n+    there are none.\n+  </p><p>\n+    The \"Cover Texts\" are certain short passages of text that are listed, as\n+    Front-Cover Texts or Back-Cover Texts, in the notice that says that the\n+    Document is released under this License.  A Front-Cover Text may be at\n+    most 5 words, and a Back-Cover Text may be at most 25 words.\n+  </p><p>\n+    A \"Transparent\" copy of the Document means a machine-readable copy,\n+    represented in a format whose specification is available to the general\n+    public, that is suitable for revising the document straightforwardly with\n+    generic text editors or (for images composed of pixels) generic paint\n+    programs or (for drawings) some widely available drawing editor, and that\n+    is suitable for input to text formatters or for automatic translation to a\n+    variety of formats suitable for input to text formatters.  A copy made in\n+    an otherwise Transparent file format whose markup, or absence of markup,\n+    has been arranged to thwart or discourage subsequent modification by\n+    readers is not Transparent.  An image format is not Transparent if used\n+    for any substantial amount of text.  A copy that is not \"Transparent\" is\n+    called \"Opaque\".\n+  </p><p>\n+    Examples of suitable formats for Transparent copies include plain ASCII\n+    without markup, Texinfo input format, LaTeX input format, SGML or XML\n+    using a publicly available DTD, and standard-conforming simple HTML,\n+    PostScript or PDF designed for human modification.  Examples of\n+    transparent image formats include PNG, XCF and JPG.  Opaque formats\n+    include proprietary formats that can be read and edited only by\n+    proprietary word processors, SGML or XML for which the DTD and/or\n+    processing tools are not generally available, and the machine-generated\n+    HTML, PostScript or PDF produced by some word processors for output\n+    purposes only.\n+  </p><p>\n+    The \"Title Page\" means, for a printed book, the title page itself, plus\n+    such following pages as are needed to hold, legibly, the material this\n+    License requires to appear in the title page.  For works in formats which\n+    do not have any title page as such, \"Title Page\" means the text near the\n+    most prominent appearance of the work's title, preceding the beginning of\n+    the body of the text.\n+  </p><p>\n+    A section \"Entitled XYZ\" means a named subunit of the Document whose title\n+    either is precisely XYZ or contains XYZ in parentheses following text that\n+    translates XYZ in another language.  (Here XYZ stands for a specific\n+    section name mentioned below, such as \"Acknowledgements\", \"Dedications\",\n+    \"Endorsements\", or \"History\".)  To \"Preserve the Title\" of such a section\n+    when you modify the Document means that it remains a section \"Entitled\n+    XYZ\" according to this definition.\n+  </p><p>\n+    The Document may include Warranty Disclaimers next to the notice which\n+    states that this License applies to the Document.  These Warranty\n+    Disclaimers are considered to be included by reference in this License,\n+    but only as regards disclaiming warranties: any other implication that\n+    these Warranty Disclaimers may have is void and has no effect on the\n+    meaning of this License.\n+  </p><h2><a id=\"VerbatimCopying\"></a>\n+    2. VERBATIM COPYING\n+  </h2><p>\n+    You may copy and distribute the Document in any medium, either\n+    commercially or noncommercially, provided that this License, the copyright\n+    notices, and the license notice saying this License applies to the\n+    Document are reproduced in all copies, and that you add no other\n+    conditions whatsoever to those of this License.  You may not use technical\n+    measures to obstruct or control the reading or further copying of the\n+    copies you make or distribute.  However, you may accept compensation in\n+    exchange for copies.  If you distribute a large enough number of copies\n+    you must also follow the conditions in section 3.\n+  </p><p>\n+    You may also lend copies, under the same conditions stated above, and you\n+    may publicly display copies.\n+  </p><h2><a id=\"QuantityCopying\"></a>\n+    3. COPYING IN QUANTITY\n+  </h2><p>\n+    If you publish printed copies (or copies in media that commonly have\n+    printed covers) of the Document, numbering more than 100, and the\n+    Document's license notice requires Cover Texts, you must enclose the\n+    copies in covers that carry, clearly and legibly, all these Cover Texts:\n+    Front-Cover Texts on the front cover, and Back-Cover Texts on the back\n+    cover.  Both covers must also clearly and legibly identify you as the\n+    publisher of these copies.  The front cover must present the full title\n+    with all words of the title equally prominent and visible.  You may add\n+    other material on the covers in addition.  Copying with changes limited to\n+    the covers, as long as they preserve the title of the Document and satisfy\n+    these conditions, can be treated as verbatim copying in other\n+    respects.\n+  </p><p>\n+    If the required texts for either cover are too voluminous to fit legibly,\n+    you should put the first ones listed (as many as fit reasonably) on the\n+    actual cover, and continue the rest onto adjacent pages.\n+  </p><p>\n+    If you publish or distribute Opaque copies of the Document numbering more\n+    than 100, you must either include a machine-readable Transparent copy\n+    along with each Opaque copy, or state in or with each Opaque copy a\n+    computer-network location from which the general network-using public has\n+    access to download using public-standard network protocols a complete\n+    Transparent copy of the Document, free of added material.  If you use the\n+    latter option, you must take reasonably prudent steps, when you begin\n+    distribution of Opaque copies in quantity, to ensure that this Transparent\n+    copy will remain thus accessible at the stated location until at least one\n+    year after the last time you distribute an Opaque copy (directly or\n+    through your agents or retailers) of that edition to the public.\n+  </p><p>\n+    It is requested, but not required, that you contact the authors of the\n+    Document well before redistributing any large number of copies, to give\n+    them a chance to provide you with an updated version of the\n+    Document.\n+  </p><h2><a id=\"Modifications\"></a>\n+    4. MODIFICATIONS\n+  </h2><p>\n+    You may copy and distribute a Modified Version of the Document under the\n+    conditions of sections 2 and 3 above, provided that you release the\n+    Modified Version under precisely this License, with the Modified Version\n+    filling the role of the Document, thus licensing distribution and\n+    modification of the Modified Version to whoever possesses a copy of it.\n+    In addition, you must do these things in the Modified Version:\n+  </p><div class=\"orderedlist\"><ol type=\"A\"><li>\n+        Use in the Title Page (and on the covers, if any) a title distinct\n+        from that of the Document, and from those of previous versions (which\n+        should, if there were any, be listed in the History section of the\n+        Document).  You may use the same title as a previous version if the\n+        original publisher of that version gives permission.\n+        </li><li>\n+        List on the Title Page, as authors, one or more persons or entities\n+        responsible for authorship of the modifications in the Modified\n+        Version, together with at least five of the principal authors of the\n+        Document (all of its principal authors, if it has fewer than five),\n+        unless they release you from this requirement.\n+      </li><li>\n+        State on the Title page the name of the publisher of the Modified\n+        Version, as the publisher.\n+      </li><li>\n+        Preserve all the copyright notices of the Document.\n+      </li><li>\n+        Add an appropriate copyright notice for your modifications adjacent to\n+        the other copyright notices.\n+      </li><li>\n+        Include, immediately after the copyright notices, a license notice\n+        giving the public permission to use the Modified Version under the\n+        terms of this License, in the form shown in the Addendum below.\n+      </li><li>\n+        Preserve in that license notice the full lists of Invariant Sections\n+        and required Cover Texts given in the Document's license notice.\n+      </li><li>\n+        Include an unaltered copy of this License.\n+      </li><li>\n+        Preserve the section Entitled \"History\", Preserve its Title, and add\n+        to it an item stating at least the title, year, new authors, and\n+        publisher of the Modified Version as given on the Title Page.  If\n+        there is no section Entitled \"History\" in the Document, create one\n+        stating the title, year, authors, and publisher of the Document as\n+        given on its Title Page, then add an item describing the Modified\n+        Version as stated in the previous sentence.\n+      </li><li>\n+        Preserve the network location, if any, given in the Document for\n+        public access to a Transparent copy of the Document, and likewise the\n+        network locations given in the Document for previous versions it was\n+        based on.  These may be placed in the \"History\" section.  You may omit\n+        a network location for a work that was published at least four years\n+        before the Document itself, or if the original publisher of the\n+        version it refers to gives permission.\n+      </li><li>\n+        For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve\n+        the Title of the section, and preserve in the section all the\n+        substance and tone of each of the contributor acknowledgements and/or\n+        dedications given therein.\n+      </li><li>\n+        Preserve all the Invariant Sections of the Document, unaltered in\n+        their text and in their titles.  Section numbers or the equivalent are\n+        not considered part of the section titles.\n+      </li><li>\n+        Delete any section Entitled \"Endorsements\".  Such a section may not be\n+        included in the Modified Version.\n+      </li><li>\n+        Do not retitle any existing section to be Entitled \"Endorsements\" or\n+        to conflict in title with any Invariant Section.\n+      </li><li>\n+        Preserve any Warranty Disclaimers.\n+      </li></ol></div><p>\n+    If the Modified Version includes new front-matter sections or appendices\n+    that qualify as Secondary Sections and contain no material copied from the\n+    Document, you may at your option designate some or all of these sections\n+    as invariant.  To do this, add their titles to the list of Invariant\n+    Sections in the Modified Version's license notice.  These titles must be\n+    distinct from any other section titles.\n+  </p><p>\n+    You may add a section Entitled \"Endorsements\", provided it contains\n+    nothing but endorsements of your Modified Version by various parties--for\n+    example, statements of peer review or that the text has been approved by\n+    an organization as the authoritative definition of a standard.\n+  </p><p>\n+    You may add a passage of up to five words as a Front-Cover Text, and a\n+    passage of up to 25 words as a Back-Cover Text, to the end of the list of\n+    Cover Texts in the Modified Version.  Only one passage of Front-Cover Text\n+    and one of Back-Cover Text may be added by (or through arrangements made\n+    by) any one entity.  If the Document already includes a cover text for the\n+    same cover, previously added by you or by arrangement made by the same\n+    entity you are acting on behalf of, you may not add another; but you may\n+    replace the old one, on explicit permission from the previous publisher\n+    that added the old one.\n+  </p><p>\n+    The author(s) and publisher(s) of the Document do not by this License give\n+    permission to use their names for publicity for or to assert or imply\n+    endorsement of any Modified Version.\n+  </p><h2><a id=\"Combining\"></a>\n+    5. COMBINING DOCUMENTS\n+  </h2><p>\n+    You may combine the Document with other documents released under this\n+    License, under the terms defined in section 4 above for modified versions,\n+    provided that you include in the combination all of the Invariant Sections\n+    of all of the original documents, unmodified, and list them all as\n+    Invariant Sections of your combined work in its license notice, and that\n+    you preserve all their Warranty Disclaimers.\n+  </p><p>\n+    The combined work need only contain one copy of this License, and multiple\n+    identical Invariant Sections may be replaced with a single copy.  If there\n+    are multiple Invariant Sections with the same name but different contents,\n+    make the title of each such section unique by adding at the end of it, in\n+    parentheses, the name of the original author or publisher of that section\n+    if known, or else a unique number.  Make the same adjustment to the\n+    section titles in the list of Invariant Sections in the license notice of\n+    the combined work.\n+  </p><p>\n+    In the combination, you must combine any sections Entitled \"History\" in\n+    the various original documents, forming one section Entitled \"History\";\n+    likewise combine any sections Entitled \"Acknowledgements\", and any\n+    sections Entitled \"Dedications\".  You must delete all sections Entitled\n+    \"Endorsements\".\n+  </p><h2><a id=\"Collections\"></a>\n+    6. COLLECTIONS OF DOCUMENTS\n+  </h2><p>\n+    You may make a collection consisting of the Document and other documents\n+    released under this License, and replace the individual copies of this\n+    License in the various documents with a single copy that is included in\n+    the collection, provided that you follow the rules of this License for\n+    verbatim copying of each of the documents in all other respects.\n+  </p><p>\n+    You may extract a single document from such a collection, and distribute\n+    it individually under this License, provided you insert a copy of this\n+    License into the extracted document, and follow this License in all other\n+    respects regarding verbatim copying of that document.\n+  </p><h2><a id=\"Aggregation\"></a>\n+    7. AGGREGATION WITH INDEPENDENT WORKS\n+  </h2><p>\n+    A compilation of the Document or its derivatives with other separate and\n+    independent documents or works, in or on a volume of a storage or\n+    distribution medium, is called an \"aggregate\" if the copyright resulting\n+    from the compilation is not used to limit the legal rights of the\n+    compilation's users beyond what the individual works permit.  When the\n+    Document is included in an aggregate, this License does not apply to the\n+    other works in the aggregate which are not themselves derivative works of\n+    the Document.\n+  </p><p>\n+    If the Cover Text requirement of section 3 is applicable to these copies\n+    of the Document, then if the Document is less than one half of the entire\n+    aggregate, the Document's Cover Texts may be placed on covers that bracket\n+    the Document within the aggregate, or the electronic equivalent of covers\n+    if the Document is in electronic form.  Otherwise they must appear on\n+    printed covers that bracket the whole aggregate.\n+  </p><h2><a id=\"Translation\"></a>\n+    8. TRANSLATION\n+  </h2><p>\n+    Translation is considered a kind of modification, so you may distribute\n+    translations of the Document under the terms of section 4.  Replacing\n+    Invariant Sections with translations requires special permission from\n+    their copyright holders, but you may include translations of some or all\n+    Invariant Sections in addition to the original versions of these Invariant\n+    Sections.  You may include a translation of this License, and all the\n+    license notices in the Document, and any Warranty Disclaimers, provided\n+    that you also include the original English version of this License and the\n+    original versions of those notices and disclaimers.  In case of a\n+    disagreement between the translation and the original version of this\n+    License or a notice or disclaimer, the original version will prevail.\n+  </p><p>\n+    If a section in the Document is Entitled \"Acknowledgements\",\n+    \"Dedications\", or \"History\", the requirement (section 4) to Preserve its\n+    Title (section 1) will typically require changing the actual title.\n+  </p><h2><a id=\"Termination\"></a>\n+    9. TERMINATION\n+  </h2><p>\n+    You may not copy, modify, sublicense, or distribute the Document except as\n+    expressly provided for under this License.  Any other attempt to copy,\n+    modify, sublicense or distribute the Document is void, and will\n+    automatically terminate your rights under this License.  However, parties\n+    who have received copies, or rights, from you under this License will not\n+    have their licenses terminated so long as such parties remain in full\n+    compliance.\n+  </p><h2><a id=\"FutureRevisions\"></a>\n+    10. FUTURE REVISIONS OF THIS LICENSE\n+  </h2><p>\n+    The Free Software Foundation may publish new, revised versions of the GNU\n+    Free Documentation License from time to time.  Such new versions will be\n+    similar in spirit to the present version, but may differ in detail to\n+    address new problems or concerns.  See <a class=\"ulink\" href=\"http://www.gnu.org/copyleft/\" target=\"_top\">http://www.gnu.org/copyleft/</a>.\n+  </p><p>\n+    Each version of the License is given a distinguishing version number.  If\n+    the Document specifies that a particular numbered version of this License\n+    \"or any later version\" applies to it, you have the option of following the\n+    terms and conditions either of that specified version or of any later\n+    version that has been published (not as a draft) by the Free Software\n+    Foundation.  If the Document does not specify a version number of this\n+    License, you may choose any version ever published (not as a draft) by the\n+    Free Software Foundation.\n+  </p><h2><a id=\"HowToUse\"></a>\n+    ADDENDUM: How to use this License for your documents\n+  </h2><p>\n+    To use this License in a document you have written, include a copy of the\n+    License in the document and put the following copyright and license\n+    notices just after the title page:\n+  </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+      Copyright (C) YEAR YOUR NAME.\n+    </p><p>\n+      Permission is granted to copy, distribute and/or modify this document\n+      under the terms of the GNU Free Documentation License, Version 1.2 or\n+      any later version published by the Free Software Foundation; with no\n+      Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A\n+      copy of the license is included in the section entitled \"GNU Free\n+      Documentation License\".\n+    </p></blockquote></div><p>\n+    If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,\n+    replace the \"with...Texts.\" line with this:\n+  </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+      with the Invariant Sections being LIST THEIR TITLES, with the\n+      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.\n+    </p></blockquote></div><p>\n+    If you have Invariant Sections without Cover Texts, or some other\n+    combination of the three, merge those two alternatives to suit the\n+    situation.\n+  </p><p>\n+    If your document contains nontrivial examples of program code, we\n+    recommend releasing these examples in parallel under your choice of free\n+    software license, such as the GNU General Public License, to permit their\n+    use in free software.\n+  </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01apds03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"../bk02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">How to Apply These Terms to Your New Programs\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0</td></tr></table></div></body></html>"}, {"sha": "ab5c04569e72236be169e8a962e21e77529020bb", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch01.html", "status": "added", "additions": 6131, "deletions": 0, "changes": 6131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "fe9055c8bb1dfe029ab05a3dd32018a109a10743", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch01s02.html", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>License</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt01ch01.html\" title=\"Chapter\u00a01.\u00a0Status\" /><link rel=\"prev\" href=\"bk01pt01ch01.html\" title=\"Chapter\u00a01.\u00a0Status\" /><link rel=\"next\" href=\"bk01pt01ch01s03.html\" title=\"Bugs\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">License</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch01.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a01.\u00a0Status</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch01s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.status.license\"></a>License</h2></div></div></div><p>\n+    There are two licenses affecting GNU libstdc++: one for the code,\n+    and one for the documentation.  \n+    </p><p>\n+      There is a license section in the FAQ regarding common <a class=\"link\" href=\"../faq.html#faq.license\" title=\"License\">questions</a>. If you have more\n+      questions, ask the FSF or the <a class=\"ulink\" href=\"http://gcc.gnu.org/lists.html\" target=\"_top\">gcc mailing list</a>.\n+    </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.status.license.gpl\"></a>The Code: GPL</h3></div></div></div><p>\n+      The source code is distributed under the <a class=\"link\" href=\"bk01apd.html\" title=\"Appendix\u00a0D.\u00a0GNU General Public License\">GNU General Public License version 2</a>,\n+      with the so-called \u201c<span class=\"quote\">Runtime Exception</span>\u201d\n+      as follows (or see any header or implementation file):\n+    </p><div class=\"literallayout\"><p><br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0As\u00a0a\u00a0special\u00a0exception,\u00a0you\u00a0may\u00a0use\u00a0this\u00a0file\u00a0as\u00a0part\u00a0of\u00a0a\u00a0free\u00a0software<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0library\u00a0without\u00a0restriction.\u00a0\u00a0Specifically,\u00a0if\u00a0other\u00a0files\u00a0instantiate<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0templates\u00a0or\u00a0use\u00a0macros\u00a0or\u00a0inline\u00a0functions\u00a0from\u00a0this\u00a0file,\u00a0or\u00a0you\u00a0compile<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this\u00a0file\u00a0and\u00a0link\u00a0it\u00a0with\u00a0other\u00a0files\u00a0to\u00a0produce\u00a0an\u00a0executable,\u00a0this<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0file\u00a0does\u00a0not\u00a0by\u00a0itself\u00a0cause\u00a0the\u00a0resulting\u00a0executable\u00a0to\u00a0be\u00a0covered\u00a0by<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the\u00a0GNU\u00a0General\u00a0Public\u00a0License.\u00a0\u00a0This\u00a0exception\u00a0does\u00a0not\u00a0however<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0invalidate\u00a0any\u00a0other\u00a0reasons\u00a0why\u00a0the\u00a0executable\u00a0file\u00a0might\u00a0be\u00a0covered\u00a0by<br />\n+\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0the\u00a0GNU\u00a0General\u00a0Public\u00a0License.<br />\n+\u00a0\u00a0\u00a0\u00a0</p></div><p>\n+      Hopefully that text is self-explanatory.  If it isn't, you need to speak\n+      to your lawyer, or the Free Software Foundation.\n+    </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.status.license.fdl\"></a>The Documentation: GPL, FDL</h3></div></div></div><p>\n+      The documentation shipped with the library and made available over\n+      the web, excluding the pages generated from source comments, are\n+      copyrighted by the Free Software Foundation, and placed under the\n+      <a class=\"link\" href=\"bk01ape.html\" title=\"Appendix\u00a0E.\u00a0GNU Free Documentation License\"> GNU Free Documentation\n+      License version 1.2</a>.  There are no Front-Cover Texts, no\n+      Back-Cover Texts, and no Invariant Sections.\n+    </p><p> \n+      For documentation generated by doxygen or other automated tools\n+      via processing source code comments and markup, the original source\n+      code license applies to the generated files. Thus, the doxygen\n+      documents are licensed <a class=\"link\" href=\"bk01apd.html\" title=\"Appendix\u00a0D.\u00a0GNU General Public License\">GPL</a>.\n+    </p><p>\n+      If you plan on making copies of the documentation, please let us know.\n+      We can probably offer suggestions.\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch01.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt01ch01.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch01s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a01.\u00a0Status\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Bugs</td></tr></table></div></body></html>"}, {"sha": "cbca8f3f3f856a65c7f658094ba5d22e1c9a8fdb", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch01s03.html", "status": "added", "additions": 287, "deletions": 0, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch01s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,287 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Bugs</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt01ch01.html\" title=\"Chapter\u00a01.\u00a0Status\" /><link rel=\"prev\" href=\"bk01pt01ch01s02.html\" title=\"License\" /><link rel=\"next\" href=\"bk01pt01ch02.html\" title=\"Chapter\u00a02.\u00a0Setup\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Bugs</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch01s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a01.\u00a0Status</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch02.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.status.bugs\"></a>Bugs</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.status.bugs.impl\"></a>Implementation Bugs</h3></div></div></div><p>\n+      Information on known bugs, details on efforts to fix them, and\n+      fixed bugs are all available as part of the GCC bug tracking\n+      system, <a class=\"ulink\" href=\"http://gcc.gnu.org/bugzilla\" target=\"_top\">bugzilla</a>, with the\n+      category set to <code class=\"literal\">libstdc++</code>.\n+    </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.status.bugs.iso\"></a>Standard Bugs</h3></div></div></div><p>\n+\tEverybody's got issues.  Even the C++ Standard Library.\n+      </p><p>\n+\tThe Library Working Group, or LWG, is the ISO subcommittee responsible\n+\tfor making changes to the library.  They periodically publish an\n+\tIssues List containing problems and possible solutions.  As they reach\n+\ta consensus on proposed solutions, we often incorporate the solution.\n+      </p><p>\n+\tHere are the issues which have resulted in code changes to the library.\n+\tThe links are to the specific defect reports from a <span class=\"emphasis\"><em>partial\n+\tcopy</em></span> of the Issues List.  You can read the full version online\n+\tat the <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">ISO C++\n+\tCommittee homepage</a>, linked to on the\n+\t<a class=\"ulink\" href=\"http://gcc.gnu.org/readings.html\" target=\"_top\">GCC \"Readings\"\n+\tpage</a>.  If\n+\tyou spend a lot of time reading the issues, we recommend downloading\n+\tthe ZIP file and reading them locally.\n+      </p><p>\n+\t(NB: <span class=\"emphasis\"><em>partial copy</em></span> means that not all\n+\tlinks within the lwg-*.html pages will work.  Specifically,\n+\tlinks to defect reports that have not been accorded full DR\n+\tstatus will probably break.  Rather than trying to mirror the\n+\tentire issues list on our overworked web server, we recommend\n+\tyou go to the LWG homepage instead.)\n+      </p><p>\n+\tIf a DR is not listed here, we may simply not have gotten to\n+\tit yet; feel free to submit a patch.  Search the include/bits\n+\tand src directories for appearances of\n+\t<code class=\"constant\">_GLIBCXX_RESOLVE_LIB_DEFECTS</code> for examples\n+\tof style.  Note that we usually do not make changes to the\n+\tcode until an issue has reached <a class=\"ulink\" href=\"lwg-active.html#DR\" target=\"_top\">DR</a> status.\n+      </p><div class=\"variablelist\"><dl><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#5\" target=\"_top\">5</a>:\n+        <span class=\"emphasis\"><em>string::compare specification questionable</em></span>\n+    </span></dt><dd><p>This should be two overloaded functions rather than a single function.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#17\" target=\"_top\">17</a>:\n+        <span class=\"emphasis\"><em>Bad bool parsing</em></span>\n+    </span></dt><dd><p>Apparently extracting Boolean values was messed up...\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#19\" target=\"_top\">19</a>:\n+        <span class=\"emphasis\"><em>\"Noconv\" definition too vague</em></span>\n+    </span></dt><dd><p>If <code class=\"code\">codecvt::do_in</code> returns <code class=\"code\">noconv</code> there are\n+        no changes to the values in <code class=\"code\">[to, to_limit)</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#22\" target=\"_top\">22</a>:\n+        <span class=\"emphasis\"><em>Member open vs flags</em></span>\n+    </span></dt><dd><p>Re-opening a file stream does <span class=\"emphasis\"><em>not</em></span> clear the state flags.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#25\" target=\"_top\">25</a>:\n+        <span class=\"emphasis\"><em>String operator&lt;&lt; uses width() value wrong</em></span>\n+    </span></dt><dd><p>Padding issues.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#48\" target=\"_top\">48</a>:\n+        <span class=\"emphasis\"><em>Use of non-existent exception constructor</em></span>\n+    </span></dt><dd><p>An instance of <code class=\"code\">ios_base::failure</code> is constructed instead.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#49\" target=\"_top\">49</a>:\n+        <span class=\"emphasis\"><em>Underspecification of ios_base::sync_with_stdio</em></span>\n+    </span></dt><dd><p>The return type is the <span class=\"emphasis\"><em>previous</em></span> state of synchronization.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#50\" target=\"_top\">50</a>:\n+        <span class=\"emphasis\"><em>Copy constructor and assignment operator of ios_base</em></span>\n+    </span></dt><dd><p>These members functions are declared <code class=\"code\">private</code> and are\n+        thus inaccessible.  Specifying the correct semantics of\n+        \"copying stream state\" was deemed too complicated.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#60\" target=\"_top\">60</a>:\n+        <span class=\"emphasis\"><em>What is a formatted input function?</em></span>\n+    </span></dt><dd><p>This DR made many widespread changes to <code class=\"code\">basic_istream</code>\n+        and <code class=\"code\">basic_ostream</code> all of which have been implemented.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#63\" target=\"_top\">63</a>:\n+        <span class=\"emphasis\"><em>Exception-handling policy for unformatted output</em></span>\n+    </span></dt><dd><p>Make the policy consistent with that of formatted input, unformatted\n+        input, and formatted output.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#68\" target=\"_top\">68</a>:\n+        <span class=\"emphasis\"><em>Extractors for char* should store null at end</em></span>\n+    </span></dt><dd><p>And they do now.  An editing glitch in the last item in the list of\n+        [27.6.1.2.3]/7.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#74\" target=\"_top\">74</a>:\n+        <span class=\"emphasis\"><em>Garbled text for codecvt::do_max_length</em></span>\n+    </span></dt><dd><p>The text of the standard was gibberish.  Typos gone rampant.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#75\" target=\"_top\">75</a>:\n+        <span class=\"emphasis\"><em>Contradiction in codecvt::length's argument types</em></span>\n+    </span></dt><dd><p>Change the first parameter to <code class=\"code\">stateT&amp;</code> and implement\n+        the new effects paragraph.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#83\" target=\"_top\">83</a>:\n+        <span class=\"emphasis\"><em>string::npos vs. string::max_size()</em></span>\n+    </span></dt><dd><p>Safety checks on the size of the string should test against\n+        <code class=\"code\">max_size()</code> rather than <code class=\"code\">npos</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#90\" target=\"_top\">90</a>:\n+        <span class=\"emphasis\"><em>Incorrect description of operator&gt;&gt; for strings</em></span>\n+    </span></dt><dd><p>The effect contain <code class=\"code\">isspace(c,getloc())</code> which must be\n+        replaced by <code class=\"code\">isspace(c,is.getloc())</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#91\" target=\"_top\">91</a>:\n+        <span class=\"emphasis\"><em>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n+\t    might cause endless loop</em></span>\n+    </span></dt><dd><p>They behave as a formatted input function and as an unformatted\n+        input function, respectively (except that <code class=\"code\">getline</code> is\n+\tnot required to set <code class=\"code\">gcount</code>).\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#103\" target=\"_top\">103</a>:\n+        <span class=\"emphasis\"><em>set::iterator is required to be modifiable, but this allows\n+\t    modification of keys.</em></span>\n+    </span></dt><dd><p>For associative containers where the value type is the same as\n+        the key type, both <code class=\"code\">iterator</code> and <code class=\"code\">const_iterator\n+\t</code> are constant iterators.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#109\" target=\"_top\">109</a>:\n+        <span class=\"emphasis\"><em>Missing binders for non-const sequence elements</em></span>\n+    </span></dt><dd><p>The <code class=\"code\">binder1st</code> and <code class=\"code\">binder2nd</code> didn't have an\n+        <code class=\"code\">operator()</code> taking a non-const parameter.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#110\" target=\"_top\">110</a>:\n+        <span class=\"emphasis\"><em>istreambuf_iterator::equal not const</em></span>\n+    </span></dt><dd><p>This was not a const member function.  Note that the DR says to\n+        replace the function with a const one; we have instead provided an\n+        overloaded version with identical contents.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#117\" target=\"_top\">117</a>:\n+        <span class=\"emphasis\"><em>basic_ostream uses nonexistent num_put member functions</em></span>\n+    </span></dt><dd><p><code class=\"code\">num_put::put()</code> was overloaded on the wrong types.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#118\" target=\"_top\">118</a>:\n+        <span class=\"emphasis\"><em>basic_istream uses nonexistent num_get member functions</em></span>\n+    </span></dt><dd><p>Same as 117, but for <code class=\"code\">num_get::get()</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#129\" target=\"_top\">129</a>:\n+        <span class=\"emphasis\"><em>Need error indication from seekp() and seekg()</em></span>\n+    </span></dt><dd><p>These functions set <code class=\"code\">failbit</code> on error now.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#136\" target=\"_top\">136</a>:\n+        <span class=\"emphasis\"><em>seekp, seekg setting wrong streams?</em></span>\n+    </span></dt><dd><p><code class=\"code\">seekp</code> should only set the output stream, and\n+        <code class=\"code\">seekg</code> should only set the input stream.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#167\" target=\"_top\">167</a>:\n+        <span class=\"emphasis\"><em>Improper use of traits_type::length()</em></span>\n+    </span></dt><dd><p><code class=\"code\">op&lt;&lt;</code> with a <code class=\"code\">const char*</code> was\n+        calculating an incorrect number of characters to write.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#169\" target=\"_top\">169</a>:\n+        <span class=\"emphasis\"><em>Bad efficiency of overflow() mandated</em></span>\n+    </span></dt><dd><p>Grow efficiently the internal array object.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#171\" target=\"_top\">171</a>:\n+        <span class=\"emphasis\"><em>Strange seekpos() semantics due to joint position</em></span>\n+    </span></dt><dd><p>Quite complex to summarize...\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#181\" target=\"_top\">181</a>:\n+        <span class=\"emphasis\"><em>make_pair() unintended behavior</em></span>\n+    </span></dt><dd><p>This function used to take its arguments as reference-to-const, now\n+        it copies them (pass by value).\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#195\" target=\"_top\">195</a>:\n+        <span class=\"emphasis\"><em>Should basic_istream::sentry's constructor ever set eofbit?</em></span>\n+    </span></dt><dd><p>Yes, it can, specifically if EOF is reached while skipping whitespace.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#211\" target=\"_top\">211</a>:\n+        <span class=\"emphasis\"><em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em></span>\n+    </span></dt><dd><p>If nothing is extracted into the string, <code class=\"code\">op&gt;&gt;</code> now\n+        sets <code class=\"code\">failbit</code> (which can cause an exception, etc., etc.).\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#214\" target=\"_top\">214</a>:\n+        <span class=\"emphasis\"><em>set::find() missing const overload</em></span>\n+    </span></dt><dd><p>Both <code class=\"code\">set</code> and <code class=\"code\">multiset</code> were missing\n+        overloaded find, lower_bound, upper_bound, and equal_range functions\n+        for const instances.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#231\" target=\"_top\">231</a>:\n+        <span class=\"emphasis\"><em>Precision in iostream?</em></span>\n+    </span></dt><dd><p>For conversion from a floating-point type, <code class=\"code\">str.precision()</code>\n+        is specified in the conversion specification.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-active.html#233\" target=\"_top\">233</a>:\n+        <span class=\"emphasis\"><em>Insertion hints in associative containers</em></span>\n+    </span></dt><dd><p>Implement N1780, first check before then check after, insert as close\n+        to hint as possible.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#235\" target=\"_top\">235</a>:\n+        <span class=\"emphasis\"><em>No specification of default ctor for reverse_iterator</em></span>\n+    </span></dt><dd><p>The declaration of <code class=\"code\">reverse_iterator</code> lists a default constructor.\n+        However, no specification is given what this constructor should do.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#241\" target=\"_top\">241</a>:\n+        <span class=\"emphasis\"><em>Does unique_copy() require CopyConstructible and Assignable?</em></span>\n+    </span></dt><dd><p>Add a helper for forward_iterator/output_iterator, fix the existing\n+        one for input_iterator/output_iterator to not rely on Assignability.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#243\" target=\"_top\">243</a>:\n+        <span class=\"emphasis\"><em>get and getline when sentry reports failure</em></span>\n+    </span></dt><dd><p>Store a null character only if the character array has a non-zero size.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#251\" target=\"_top\">251</a>:\n+        <span class=\"emphasis\"><em>basic_stringbuf missing allocator_type</em></span>\n+    </span></dt><dd><p>This nested typedef was originally not specified.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#253\" target=\"_top\">253</a>:\n+        <span class=\"emphasis\"><em>valarray helper functions are almost entirely useless</em></span>\n+    </span></dt><dd><p>Make the copy constructor and copy-assignment operator declarations\n+        public in gslice_array, indirect_array, mask_array, slice_array; provide\n+\tdefinitions.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#265\" target=\"_top\">265</a>:\n+        <span class=\"emphasis\"><em>std::pair::pair() effects overly restrictive</em></span>\n+    </span></dt><dd><p>The default ctor would build its members from copies of temporaries;\n+        now it simply uses their respective default ctors.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#266\" target=\"_top\">266</a>:\n+        <span class=\"emphasis\"><em>bad_exception::~bad_exception() missing Effects clause</em></span>\n+    </span></dt><dd><p>The <code class=\"code\">bad_</code>* classes no longer have destructors (they\n+        are trivial), since no description of them was ever given.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#271\" target=\"_top\">271</a>:\n+        <span class=\"emphasis\"><em>basic_iostream missing typedefs</em></span>\n+    </span></dt><dd><p>The typedefs it inherits from its base classes can't be used, since\n+        (for example) <code class=\"code\">basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#275\" target=\"_top\">275</a>:\n+        <span class=\"emphasis\"><em>Wrong type in num_get::get() overloads</em></span>\n+    </span></dt><dd><p>Similar to 118.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#280\" target=\"_top\">280</a>:\n+        <span class=\"emphasis\"><em>Comparison of reverse_iterator to const reverse_iterator</em></span>\n+    </span></dt><dd><p>Add global functions with two template parameters.\n+        (NB: not added for now a templated assignment operator) \n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#292\" target=\"_top\">292</a>:\n+        <span class=\"emphasis\"><em>Effects of a.copyfmt (a)</em></span>\n+    </span></dt><dd><p>If <code class=\"code\">(this == &amp;rhs)</code> do nothing.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#300\" target=\"_top\">300</a>:\n+        <span class=\"emphasis\"><em>List::merge() specification incomplete</em></span>\n+    </span></dt><dd><p>If <code class=\"code\">(this == &amp;x)</code> do nothing.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#303\" target=\"_top\">303</a>:\n+        <span class=\"emphasis\"><em>Bitset input operator underspecified</em></span>\n+    </span></dt><dd><p>Basically, compare the input character to <code class=\"code\">is.widen(0)</code>\n+        and <code class=\"code\">is.widen(1)</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#305\" target=\"_top\">305</a>:\n+        <span class=\"emphasis\"><em>Default behavior of codecvt&lt;wchar_t, char, mbstate_t&gt;::length()</em></span>\n+    </span></dt><dd><p>Do not specify what <code class=\"code\">codecvt&lt;wchar_t, char, mbstate_t&gt;::do_length</code>\n+        must return.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#328\" target=\"_top\">328</a>:\n+        <span class=\"emphasis\"><em>Bad sprintf format modifier in money_put&lt;&gt;::do_put()</em></span>\n+    </span></dt><dd><p>Change the format string to \"%.0Lf\".\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#365\" target=\"_top\">365</a>:\n+        <span class=\"emphasis\"><em>Lack of const-qualification in clause 27</em></span>\n+    </span></dt><dd><p>Add const overloads of <code class=\"code\">is_open</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#389\" target=\"_top\">389</a>:\n+        <span class=\"emphasis\"><em>Const overload of valarray::operator[] returns by value</em></span>\n+    </span></dt><dd><p>Change it to return a <code class=\"code\">const T&amp;</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#402\" target=\"_top\">402</a>:\n+        <span class=\"emphasis\"><em>Wrong new expression in [some_]allocator::construct</em></span>\n+    </span></dt><dd><p>Replace \"new\" with \"::new\".\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#409\" target=\"_top\">409</a>:\n+        <span class=\"emphasis\"><em>Closing an fstream should clear the error state</em></span>\n+    </span></dt><dd><p>Have <code class=\"code\">open</code> clear the error flags.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-active.html#431\" target=\"_top\">431</a>:\n+        <span class=\"emphasis\"><em>Swapping containers with unequal allocators</em></span>\n+    </span></dt><dd><p>Implement Option 3, as per N1599.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#432\" target=\"_top\">432</a>:\n+        <span class=\"emphasis\"><em>stringbuf::overflow() makes only one write position\n+\t    available</em></span>\n+    </span></dt><dd><p>Implement the resolution, beyond DR 169.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#434\" target=\"_top\">434</a>:\n+        <span class=\"emphasis\"><em>bitset::to_string() hard to use</em></span>\n+    </span></dt><dd><p>Add three overloads, taking fewer template arguments.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#438\" target=\"_top\">438</a>:\n+        <span class=\"emphasis\"><em>Ambiguity in the \"do the right thing\" clause</em></span>\n+    </span></dt><dd><p>Implement the resolution, basically cast less.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#453\" target=\"_top\">453</a>:\n+        <span class=\"emphasis\"><em>basic_stringbuf::seekoff need not always fail for an empty stream</em></span>\n+    </span></dt><dd><p>Don't fail if the next pointer is null and newoff is zero.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#455\" target=\"_top\">455</a>:\n+        <span class=\"emphasis\"><em>cerr::tie() and wcerr::tie() are overspecified</em></span>\n+    </span></dt><dd><p>Initialize cerr tied to cout and wcerr tied to wcout.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#464\" target=\"_top\">464</a>:\n+        <span class=\"emphasis\"><em>Suggestion for new member functions in standard containers</em></span>\n+    </span></dt><dd><p>Add <code class=\"code\">data()</code> to <code class=\"code\">std::vector</code> and\n+        <code class=\"code\">at(const key_type&amp;)</code> to <code class=\"code\">std::map</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#508\" target=\"_top\">508</a>:\n+        <span class=\"emphasis\"><em>Bad parameters for ranlux64_base_01</em></span>\n+    </span></dt><dd><p>Fix the parameters.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-closed.html#512\" target=\"_top\">512</a>:\n+        <span class=\"emphasis\"><em>Seeding subtract_with_carry_01 from a single unsigned long</em></span>\n+    </span></dt><dd><p>Construct a <code class=\"code\">linear_congruential</code> engine and seed with it.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-closed.html#526\" target=\"_top\">526</a>:\n+        <span class=\"emphasis\"><em>Is it undefined if a function in the standard changes in\n+\t    parameters?</em></span>\n+    </span></dt><dd><p>Use &amp;value.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#538\" target=\"_top\">538</a>:\n+        <span class=\"emphasis\"><em>241 again: Does unique_copy() require CopyConstructible\n+\t    and Assignable?</em></span>\n+    </span></dt><dd><p>In case of input_iterator/output_iterator rely on Assignability of\n+        input_iterator' value_type.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#541\" target=\"_top\">541</a>:\n+        <span class=\"emphasis\"><em>shared_ptr template assignment and void</em></span>\n+    </span></dt><dd><p>Add an auto_ptr&lt;void&gt; specialization.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#543\" target=\"_top\">543</a>:\n+        <span class=\"emphasis\"><em>valarray slice default constructor</em></span>\n+    </span></dt><dd><p>Follow the straightforward proposed resolution.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#586\" target=\"_top\">586</a>:\n+        <span class=\"emphasis\"><em>string inserter not a formatted function</em></span>\n+    </span></dt><dd><p>Change it to be a formatted output function (i.e. catch exceptions).\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-active.html#596\" target=\"_top\">596</a>:\n+        <span class=\"emphasis\"><em>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</em></span>\n+    </span></dt><dd><p>Add the missing modes to fopen_mode.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-defects.html#660\" target=\"_top\">660</a>:\n+        <span class=\"emphasis\"><em>Missing bitwise operations</em></span>\n+    </span></dt><dd><p>Add the missing operations.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-active.html#693\" target=\"_top\">693</a>:\n+        <span class=\"emphasis\"><em>std::bitset::all() missing</em></span>\n+    </span></dt><dd><p>Add it, consistently with the discussion.\n+    </p></dd><dt><span class=\"term\"><a class=\"ulink\" href=\"lwg-active.html#695\" target=\"_top\">695</a>:\n+        <span class=\"emphasis\"><em>ctype&lt;char&gt;::classic_table() not accessible</em></span>\n+    </span></dt><dd><p>Make the member functions table and classic_table public.\n+    </p></dd></dl></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch01s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt01ch01.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">License\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a02.\u00a0Setup</td></tr></table></div></body></html>"}, {"sha": "7ddc9cabeb488abc963f62825f3bd0b0557346f3", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch02.html", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,181 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a02.\u00a0Setup</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"intro.html\" title=\"Part\u00a0I.\u00a0Introduction\" /><link rel=\"prev\" href=\"bk01pt01ch01s03.html\" title=\"Bugs\" /><link rel=\"next\" href=\"build.html\" title=\"Build\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a02.\u00a0Setup</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch01s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0I.\u00a0Introduction</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"build.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.intro.setup\"></a>Chapter\u00a02.\u00a0Setup</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt01ch02.html#manual.intro.setup.configure\">Configure</a></span></dt><dt><span class=\"sect1\"><a href=\"build.html\">Build</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"build.html#build.prereq\">Prerequisites</a></span></dt><dt><span class=\"sect2\"><a href=\"build.html#build.configure\">Make</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"test.html\">Test</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"test.html#test.organization\">Organization</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.naming\">Naming Conventions</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.utils\">Utilities</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.new_tests\">New Test Cases</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.dejagnu\">Test Harness Details</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.future\">Future</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.setup.configure\"></a>Configure</h2></div></div></div><p>\n+  Here are some of the non-obvious options to libstdc++'s configure.\n+  Keep in mind that\n+   \n+   <a class=\"ulink\" href=\"http://www.gnu.org/software/autoconf/manual/autoconf-2.57/html_node/autoconf_131.html#SEC131\" target=\"_top\">they\n+   all have opposite forms as well</a>\n+   (enable/disable and with/without).  The defaults are for <span class=\"emphasis\"><em>current\n+   development sources</em></span>, which may be different than those for\n+   released versions.\n+</p><p>The canonical way to find out the configure options that are\n+   available for a given set of libstdc++ sources is to go to the\n+   source directory and then type:<code class=\"code\">  ./configure --help</code>\n+</p><div class=\"variablelist\"><dl><dt><span class=\"term\"><code class=\"code\">--enable-multilib</code>[default]</span></dt><dd><p>This is part of the generic multilib support for building cross\n+        compilers.  As such, targets like \"powerpc-elf\" will have\n+        libstdc++ built many different ways:  \"-msoft-float\"\n+        and not, etc.  A different libstdc++ will be built for each of\n+        the different multilib versions.  This option is on by default.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-sjlj-exceptions</code></span></dt><dd><p>Forces old, set-jump/long-jump exception handling model.  If\n+        at all possible, the new, frame unwinding exception handling routines\n+        should be used instead, as they significantly reduce both\n+        runtime memory usage and executable size. This option can\n+        change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-version-specific-runtime-libs</code></span></dt><dd><p>Specify that run-time libraries should be installed in the\n+        compiler-specific subdirectory (i.e.,\n+        <code class=\"code\">${libdir}/gcc-lib/${target_alias}/${gcc_version}</code>)\n+        instead of <code class=\"code\">${libdir}</code>.  This option is useful if you\n+        intend to use several versions of gcc in parallel.  In addition,\n+        libstdc++'s include files will be installed in\n+        <code class=\"code\">${libdir}/gcc-lib/${target_alias}/${gcc_version}/include/g++</code>,\n+        unless you also specify\n+       <code class=\"literal\">--with-gxx-include-dir=<code class=\"filename\">dirname</code></code> during configuration.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--with-gxx-include-dir=&lt;include-files dir&gt;</code></span></dt><dd><p>Adds support for named libstdc++ include directory.  For instance,\n+        the following puts all the libstdc++ headers into a directory\n+        called \"2.97-20001008\" instead of the usual\n+        \"c++/(version)\".\n+     </p><pre class=\"programlisting\">\n+   --with-gxx-include-dir=/foo/H-x86-gcc-3-c-gxx-inc/include/2.97-20001008</pre></dd><dt><span class=\"term\"><code class=\"code\">--enable-cstdio</code></span></dt><dd><p>This is an abbreviated form of <code class=\"code\">'--enable-cstdio=stdio'</code>\n+        (described next). This option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-cstdio=OPTION</code></span></dt><dd><p>Select a target-specific I/O package. At the moment, the only\n+        choice is to use 'stdio', a generic \"C\" abstraction.\n+        The default is 'stdio'. \n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-clocale</code></span></dt><dd><p>This is an abbreviated form of <code class=\"code\">'--enable-clocale=generic'</code>\n+        (described next). This option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-clocale=OPTION</code></span></dt><dd><p>Select a target-specific underlying locale package.  The\n+        choices are 'ieee_1003.1-2001' to specify an X/Open, Standard Unix\n+        (IEEE Std. 1003.1-2001) model based on langinfo/iconv/catgets,\n+        'gnu' to specify a model based on functionality from the GNU C\n+        library (langinfo/iconv/gettext) (from <a class=\"ulink\" href=\"http://sources.redhat.com/glibc/\" target=\"_top\">glibc</a>, the GNU C\n+        library), or 'generic' to use a generic \"C\"\n+        abstraction which consists of \"C\" locale info.\n+     </p><p>As part of the configuration process, the \"C\" library is\n+      probed both for sufficient vintage, and installed locale\n+      data. If either of these elements are not present, the C++\n+      locale model default to 'generic.' On glibc-based systems of\n+      version 2.2.5 and above with installed locale files, 'gnu' is\n+      automatically selected.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-libstdcxx-allocator</code></span></dt><dd><p>This is an abbreviated form of\n+        <code class=\"code\">'--enable-libstdcxx-allocator=auto'</code> (described\n+        next). This option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-libstdcxx-allocator=OPTION  </code></span></dt><dd><p>Select a target-specific underlying std::allocator.  The\n+        choices are 'new' to specify a wrapper for new, 'malloc' to\n+        specify a wrapper for malloc, 'mt' for a fixed power of two allocator\n+        (<a class=\"ulink\" href=\"ext/mt_allocator.html\" target=\"_top\">documented</a> under extensions),\n+\t'pool' for the SGI pooled allocator or 'bitmap' for a bitmap allocator.\n+\tThis option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-cheaders=OPTION</code></span></dt><dd><p>This allows the user to define the approach taken for C header\n+        compatibility with C++. Options are c, c_std, and c_global.\n+        These correspond to the source directory's include/c,\n+        include/c_std, and include/c_global, and may also include\n+        include/c_compatibility.  The default is c_global.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-threads</code></span></dt><dd><p>This is an abbreviated form of <code class=\"code\">'--enable-threads=yes'</code>\n+        (described next). This option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-threads=OPTION</code></span></dt><dd><p>Select a threading library.  A full description is given in the\n+        general <a class=\"ulink\" href=\"http://gcc.gnu.org/install/configure.html\" target=\"_top\">compiler\n+        configuration instructions</a>.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-libstdcxx-debug</code></span></dt><dd><p>Build separate debug libraries in addition to what is normally built.\n+        By default, the debug libraries are compiled with \n+        <code class=\"code\"> CXXFLAGS='-g3 -O0'</code>\n+        , are installed in <code class=\"code\">${libdir}/debug</code>, and have the\n+        same names and versioning information as the non-debug\n+        libraries. This option is off by default.\n+     </p><p>Note this make command, executed in\n+        the build directory, will do much the same thing, without the\n+        configuration difference and without building everything twice: \n+        <code class=\"code\">make CXXFLAGS='-g3 -O0' all</code>\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-libstdcxx-debug-flags=FLAGS</code></span></dt><dd><p>This option is only valid when <code class=\"code\"> --enable-debug </code>\n+        is also specified, and applies to the debug builds only. With\n+        this option, you can pass a specific string of flags to the\n+        compiler to use when building the debug versions of libstdc++.\n+        FLAGS is a quoted string of options, like\n+     </p><pre class=\"programlisting\">\n+  --enable-libstdcxx-debug-flags='-g3 -O1 -gdwarf-2'</pre></dd><dt><span class=\"term\"><code class=\"code\">--enable-cxx-flags=FLAGS</code></span></dt><dd><p>With this option, you can pass a string of -f (functionality)\n+        flags to the compiler to use when building libstdc++. This\n+        option can change the library ABI. FLAGS is a quoted string of\n+        options, like\n+     </p><pre class=\"programlisting\">\n+  --enable-cxx-flags='-fvtable-gc -fomit-frame-pointer -ansi'</pre><p>\n+        Note that the flags don't necessarily have to all be -f flags,\n+        as shown, but usually those are the ones that will make sense\n+        for experimentation and configure-time overriding.\n+     </p><p>The advantage of --enable-cxx-flags over setting CXXFLAGS in\n+        the 'make' environment is that, if files are automatically\n+        rebuilt, the same flags will be used when compiling those files\n+        as well, so that everything matches.\n+     </p><p>Fun flags to try might include combinations of\n+     </p><pre class=\"programlisting\">\n+  -fstrict-aliasing\n+  -fno-exceptions\n+  -ffunction-sections\n+  -fvtable-gc</pre><p>and opposite forms (-fno-) of the same.  Tell us (the libstdc++\n+        mailing list) if you discover more!\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-c99</code></span></dt><dd><p>The \"long long\" type was introduced in C99, along\n+        with many other functions for wide characters, and math\n+        classification macros, etc.  If enabled, all C99 functions not\n+        specified by the C++ standard will be put into <code class=\"code\">namespace\n+        __gnu_cxx</code>, and then all these names will\n+        be injected into namespace std, so that C99 functions can be\n+        used \"as if\" they were in the C++ standard (as they\n+        will eventually be in some future revision of the standard,\n+        without a doubt).  By default, C99 support is on, assuming the\n+        configure probes find all the necessary functions and bits\n+        necessary. This option can change the library ABI.\n+    </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-wchar_t</code>[default]</span></dt><dd><p>Template specializations for the \"wchar_t\" type are\n+        required for wide character conversion support.  Disabling\n+        wide character specializations may be expedient for initial\n+        porting efforts, but builds only a subset of what is required by\n+        ISO, and is not recommended.  By default, this option is on.\n+        This option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-long-long  </code></span></dt><dd><p>The \"long long\" type was introduced in C99.  It is\n+        provided as a GNU extension to C++98 in g++.  This flag builds\n+        support for \"long long\" into the library (specialized\n+        templates and the like for iostreams).  This option is on by default:\n+        if enabled, users will have to either use the new-style \"C\"\n+        headers by default (i.e., &lt;cmath&gt; not &lt;math.h&gt;)\n+        or add appropriate compile-time flags to all compile lines to\n+        allow \"C\" visibility of this feature (on GNU/Linux,\n+        the flag is -D_ISOC99_SOURCE, which is added automatically via\n+        CPLUSPLUS_CPP_SPEC's addition of _GNU_SOURCE).\n+        This option can change the library ABI. \n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-fully-dynamic-string</code></span></dt><dd><p>This option enables a special version of basic_string avoiding\n+        the optimization that allocates empty objects in static memory.\n+\tMostly useful together with shared memory allocators, see PR\n+\tlibstdc++/16612 for details.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-concept-checks</code></span></dt><dd><p>This turns on additional compile-time checks for instantiated\n+        library templates, in the form of specialized templates,\n+        <a class=\"ulink\" href=\"19_diagnostics/howto.html#3\" target=\"_top\">described here</a>.  They\n+        can help users discover when they break the rules of the STL, before\n+        their programs run.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-symvers[=style]</code></span></dt><dd><p>In 3.1 and later, tries to turn on symbol versioning in the\n+        shared library (if a shared library has been\n+        requested). Values for 'style' that are currently supported\n+        are 'gnu', 'gnu-versioned-namespace', 'darwin', and\n+        'darwin-export'. Both gnu- options require that a recent\n+        version of the GNU linker be in use. Both darwin options are\n+        equivalent. With no style given, the configure script will try\n+        to guess correct defaults for the host system, probe to see if\n+        additional requirements are necessary and present for\n+        activation, and if so, will turn symbol versioning on. This\n+        option can change the library ABI.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-visibility</code></span></dt><dd><p> In 4.2 and later, enables or disables visibility attributes.\n+        If enabled (as by default), and the compiler seems capable of\n+        passing the simple sanity checks thrown at it, adjusts items\n+        in namespace std, namespace std::tr1, and namespace __gnu_cxx\n+        so that -fvisibility options work.\n+    </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-libstdcxx-pch</code></span></dt><dd><p>In 3.4 and later, tries to turn on the generation of\n+        stdc++.h.gch, a pre-compiled file including all the standard\n+        C++ includes. If enabled (as by default), and the compiler\n+        seems capable of passing the simple sanity checks thrown at\n+        it, try to build stdc++.h.gch as part of the make process. \n+        In addition, this generated file is used later on (by appending <code class=\"code\">\n+        --include bits/stdc++.h </code> to CXXFLAGS) when running the\n+        testsuite.\n+     </p></dd><dt><span class=\"term\"><code class=\"code\">--disable-hosted-libstdcxx</code></span></dt><dd><p>\n+     By default, a complete <span class=\"emphasis\"><em>hosted</em></span> C++ library is\n+     built.  The C++ Standard also describes a\n+     <span class=\"emphasis\"><em>freestanding</em></span> environment, in which only a\n+     minimal set of headers are provided.  This option builds such an\n+     environment.\n+     </p></dd></dl></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch01s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"intro.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"build.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Bugs\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Build</td></tr></table></div></body></html>"}, {"sha": "6bdc0333a32eaebc480a294f96fdcf379c6fe97a", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch03s02.html", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Headers</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"prev\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"next\" href=\"bk01pt01ch03s03.html\" title=\"Namespaces\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Headers</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"using.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a03.\u00a0Using</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.using.headers\"></a>Headers</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.headers.all\"></a>Header Files</h3></div></div></div><p>\n+     The C++ standard specifies the entire set of header files that\n+     must be available to all hosted implementations.  Actually, the\n+     word \"files\" is a misnomer, since the contents of the\n+     headers don't necessarily have to be in any kind of external\n+     file.  The only rule is that when one <code class=\"code\">#include</code>'s a\n+     header, the contents of that header become available, no matter\n+     how.\n+   </p><p>\n+   That said, in practice files are used.\n+   </p><p> \n+     There are two main types of include files: header files related\n+     to a specific version of the ISO C++ standard (called Standard\n+     Headers), and all others (TR1, C++ ABI, and Extensions).\n+   </p><p>\n+     Two dialects of standard headers are supported, corresponding to\n+     the 1998 standard as updated for 2003, and the draft of the\n+     upcoming 200x standard.\n+   </p><p>\n+     C++98/03 include files. These are available in the default compilation mode, ie <code class=\"code\">-std=c++98</code> or <code class=\"code\">-std=gnu++98</code>. \n+   </p><div class=\"table\"><a id=\"id398035\"></a><p class=\"title\"><b>Table\u00a03.1.\u00a0C++ 1998 Library Headers</b></p><div class=\"table-contents\"><table summary=\"C++ 1998 Library Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"filename\">iomanip</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td align=\"left\"><code class=\"filename\">ostream</code></td><td align=\"left\"><code class=\"filename\">streambuf</code></td></tr><tr><td align=\"left\"><code class=\"filename\">bitset</code></td><td align=\"left\"><code class=\"filename\">ios</code></td><td align=\"left\"><code class=\"filename\">locale</code></td><td align=\"left\"><code class=\"filename\">queue</code></td><td align=\"left\"><code class=\"filename\">string</code></td></tr><tr><td align=\"left\"><code class=\"filename\">complex</code></td><td align=\"left\"><code class=\"filename\">iosfwd</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"filename\">typeinfo</code></td></tr><tr><td align=\"left\"><code class=\"filename\">deque</code></td><td align=\"left\"><code class=\"filename\">iostream</code></td><td align=\"left\"><code class=\"filename\">memory</code></td><td align=\"left\"><code class=\"filename\">sstream</code></td><td align=\"left\"><code class=\"filename\">utility</code></td></tr><tr><td align=\"left\"><code class=\"filename\">exception</code></td><td align=\"left\"><code class=\"filename\">istream</code></td><td align=\"left\"><code class=\"filename\">new</code></td><td align=\"left\"><code class=\"filename\">stack</code></td><td align=\"left\"><code class=\"filename\">valarray</code></td></tr><tr><td align=\"left\"><code class=\"filename\">fstream</code></td><td align=\"left\"><code class=\"filename\">iterator</code></td><td align=\"left\"><code class=\"filename\">numeric</code></td><td align=\"left\"><code class=\"filename\">stdexcept</code></td><td align=\"left\"><code class=\"filename\">vector</code></td></tr><tr><td align=\"left\"><code class=\"filename\">functional</code></td><td align=\"left\"><code class=\"filename\">limits</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p></p><div class=\"table\"><a id=\"id397982\"></a><p class=\"title\"><b>Table\u00a03.2.\u00a0C++ 1998 Library Headers for C Library Facilities</b></p><div class=\"table-contents\"><table summary=\"C++ 1998 Library Headers for C Library Facilities\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">cassert</code></td><td align=\"left\"><code class=\"filename\">ciso646</code></td><td align=\"left\"><code class=\"filename\">csetjmp</code></td><td align=\"left\"><code class=\"filename\">cstdio</code></td><td align=\"left\"><code class=\"filename\">ctime</code></td></tr><tr><td align=\"left\"><code class=\"filename\">cctype</code></td><td align=\"left\"><code class=\"filename\">climits</code></td><td align=\"left\"><code class=\"filename\">csignal</code></td><td align=\"left\"><code class=\"filename\">cstdlib</code></td><td align=\"left\"><code class=\"filename\">cwchar</code></td></tr><tr><td align=\"left\"><code class=\"filename\">cerrno</code></td><td align=\"left\"><code class=\"filename\">clocale</code></td><td align=\"left\"><code class=\"filename\">cstdarg</code></td><td align=\"left\"><code class=\"filename\">cstring</code></td><td align=\"left\"><code class=\"filename\">cwctype</code></td></tr><tr><td align=\"left\"><code class=\"filename\">cfloat</code></td><td align=\"left\"><code class=\"filename\">cmath</code></td><td align=\"left\"><code class=\"filename\">cstddef</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p>C++0x include files. These are only available in C++0x compilation mode, ie <code class=\"code\">-std=c++0x</code> or <code class=\"code\">-std=gnu++0x</code>. \n+</p><p></p><div class=\"table\"><a id=\"id399447\"></a><p class=\"title\"><b>Table\u00a03.3.\u00a0C++ 200x Library Headers</b></p><div class=\"table-contents\"><table summary=\"C++ 200x Library Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"filename\">iomanip</code></td><td align=\"left\"><code class=\"filename\">locale</code></td><td align=\"left\"><code class=\"filename\">regex</code></td><td align=\"left\"><code class=\"filename\">tuple</code></td></tr><tr><td align=\"left\"><code class=\"filename\">array</code></td><td align=\"left\"><code class=\"filename\">ios</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"filename\">typeinfo</code></td></tr><tr><td align=\"left\"><code class=\"filename\">bitset</code></td><td align=\"left\"><code class=\"filename\">iosfwd</code></td><td align=\"left\"><code class=\"filename\">memory</code></td><td align=\"left\"><code class=\"filename\">sstream</code></td><td align=\"left\"><code class=\"filename\">type_traits</code></td></tr><tr><td align=\"left\"><code class=\"filename\">complex</code></td><td align=\"left\"><code class=\"filename\">iostream</code></td><td align=\"left\"><code class=\"filename\">new</code></td><td align=\"left\"><code class=\"filename\">stack</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td></tr><tr><td align=\"left\"><code class=\"filename\">deque</code></td><td align=\"left\"><code class=\"filename\">istream</code></td><td align=\"left\"><code class=\"filename\">numeric</code></td><td align=\"left\"><code class=\"filename\">stdexcept</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td></tr><tr><td align=\"left\"><code class=\"filename\">exception</code></td><td align=\"left\"><code class=\"filename\">iterator</code></td><td align=\"left\"><code class=\"filename\">ostream</code></td><td align=\"left\"><code class=\"filename\">streambuf</code></td><td align=\"left\"><code class=\"filename\">utility</code></td></tr><tr><td align=\"left\"><code class=\"filename\">fstream</code></td><td align=\"left\"><code class=\"filename\">limits</code></td><td align=\"left\"><code class=\"filename\">queue</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"filename\">valarray</code></td></tr><tr><td align=\"left\"><code class=\"filename\">functional</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td align=\"left\"><code class=\"filename\">random</code></td><td align=\"left\"><code class=\"filename\">system_error</code></td><td align=\"left\"><code class=\"filename\">vector</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p></p><div class=\"table\"><a id=\"id394222\"></a><p class=\"title\"><b>Table\u00a03.4.\u00a0C++ 200x Library Headers for C Library Facilities</b></p><div class=\"table-contents\"><table summary=\"C++ 200x Library Headers for C Library Facilities\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">cassert</code></td><td align=\"left\"><code class=\"filename\">cfloat</code></td><td align=\"left\"><code class=\"filename\">cmath</code></td><td align=\"left\"><code class=\"filename\">cstddef</code></td><td align=\"left\"><code class=\"filename\">ctgmath</code></td></tr><tr><td align=\"left\"><code class=\"filename\">ccomplex</code></td><td align=\"left\"><code class=\"filename\">cinttypes</code></td><td align=\"left\"><code class=\"filename\">csetjmp</code></td><td align=\"left\"><code class=\"filename\">cstdint</code></td><td align=\"left\"><code class=\"filename\">ctime</code></td></tr><tr><td align=\"left\"><code class=\"filename\">cctype</code></td><td align=\"left\"><code class=\"filename\">ciso646</code></td><td align=\"left\"><code class=\"filename\">csignal</code></td><td align=\"left\"><code class=\"filename\">cstdio</code></td><td align=\"left\"><code class=\"filename\">cuchar</code></td></tr><tr><td align=\"left\"><code class=\"filename\">cerrno</code></td><td align=\"left\"><code class=\"filename\">climits</code></td><td align=\"left\"><code class=\"filename\">cstdarg</code></td><td align=\"left\"><code class=\"filename\">cstdlib</code></td><td align=\"left\"><code class=\"filename\">cwchar</code></td></tr><tr><td align=\"left\"><code class=\"filename\">cfenv</code></td><td align=\"left\"><code class=\"filename\">clocale</code></td><td align=\"left\"><code class=\"filename\">cstdbool</code></td><td align=\"left\"><code class=\"filename\">cstring</code></td><td align=\"left\"><code class=\"filename\">cwctype</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n+  In addition, TR1 includes as:\n+</p><div class=\"table\"><a id=\"id485624\"></a><p class=\"title\"><b>Table\u00a03.5.\u00a0C++ TR1 Library Headers</b></p><div class=\"table-contents\"><table summary=\"C++ TR1 Library Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">tr1/array</code></td><td align=\"left\"><code class=\"filename\">tr1/memory</code></td><td align=\"left\"><code class=\"filename\">tr1/regex</code></td><td align=\"left\"><code class=\"filename\">tr1/type_traits</code></td><td align=\"left\"><code class=\"filename\">tr1/unordered_set</code></td></tr><tr><td align=\"left\"><code class=\"filename\">tr1/complex</code></td><td align=\"left\"><code class=\"filename\">tr1/random</code></td><td align=\"left\"><code class=\"filename\">tr1/tuple</code></td><td align=\"left\"><code class=\"filename\">tr1/unordered_map</code></td><td align=\"left\"><code class=\"filename\">tr1/utility</code></td></tr><tr><td align=\"left\"><code class=\"filename\">tr1/functional</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p></p><div class=\"table\"><a id=\"id407403\"></a><p class=\"title\"><b>Table\u00a03.6.\u00a0C++ TR1 Library Headers for C Library Facilities</b></p><div class=\"table-contents\"><table summary=\"C++ TR1 Library Headers for C Library Facilities\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">tr1/cmath</code></td><td align=\"left\"><code class=\"filename\">tr1/cfloat</code></td><td align=\"left\"><code class=\"filename\">tr1/cstdarg</code></td><td align=\"left\"><code class=\"filename\">tr1/cstdio</code></td><td align=\"left\"><code class=\"filename\">tr1/ctime</code></td></tr><tr><td align=\"left\"><code class=\"filename\">tr1/ccomplex</code></td><td align=\"left\"><code class=\"filename\">tr1/cinttypes</code></td><td align=\"left\"><code class=\"filename\">tr1/cstdbool</code></td><td align=\"left\"><code class=\"filename\">tr1/cstdlib</code></td><td align=\"left\"><code class=\"filename\">tr1/cwchar</code></td></tr><tr><td align=\"left\"><code class=\"filename\">tr1/cfenv</code></td><td align=\"left\"><code class=\"filename\">tr1/climits</code></td><td align=\"left\"><code class=\"filename\">tr1/cstdint</code></td><td align=\"left\"><code class=\"filename\">tr1/ctgmath</code></td><td align=\"left\"><code class=\"filename\">tr1/cwctype</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n+  Also included are files for the C++ ABI interface:\n+</p><div class=\"table\"><a id=\"id420398\"></a><p class=\"title\"><b>Table\u00a03.7.\u00a0C++ ABI Headers</b></p><div class=\"table-contents\"><table summary=\"C++ ABI Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">cxxabi.h</code></td><td align=\"left\"><code class=\"filename\">cxxabi_forced.h</code></td></tr></tbody></table></div></div><br class=\"table-break\" /><p>\n+  And a large variety of extensions.\n+</p><div class=\"table\"><a id=\"id414207\"></a><p class=\"title\"><b>Table\u00a03.8.\u00a0Extension Headers</b></p><div class=\"table-contents\"><table summary=\"Extension Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">ext/algorithm</code></td><td align=\"left\"><code class=\"filename\">ext/debug_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/mt_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/pod_char_traits.h</code></td><td align=\"left\"><code class=\"filename\">ext/stdio_sync_filebuf.h</code></td></tr><tr><td align=\"left\"><code class=\"filename\">ext/array_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/enc_filebuf.h</code></td><td align=\"left\"><code class=\"filename\">ext/new_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/pool_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/throw_allocator.h</code></td></tr><tr><td align=\"left\"><code class=\"filename\">ext/atomicity.h</code></td><td align=\"left\"><code class=\"filename\">ext/functional</code></td><td align=\"left\"><code class=\"filename\">ext/numeric</code></td><td align=\"left\"><code class=\"filename\">ext/rb_tree</code></td><td align=\"left\"><code class=\"filename\">ext/typelist.h</code></td></tr><tr><td align=\"left\"><code class=\"filename\">ext/bitmap_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/iterator</code></td><td align=\"left\"><code class=\"filename\">ext/numeric_traits.h</code></td><td align=\"left\"><code class=\"filename\">ext/rope</code></td><td align=\"left\"><code class=\"filename\">ext/type_traits.h</code></td></tr><tr><td align=\"left\"><code class=\"filename\">ext/codecvt_specializations.h</code></td><td align=\"left\"><code class=\"filename\">ext/malloc_allocator.h</code></td><td align=\"left\"><code class=\"filename\">ext/pb_ds/assoc_container.h</code></td><td align=\"left\"><code class=\"filename\">ext/slist</code></td><td align=\"left\"><code class=\"filename\">ext/vstring.h</code></td></tr><tr><td align=\"left\"><code class=\"filename\">ext/concurrence.h</code></td><td align=\"left\"><code class=\"filename\">ext/memory</code></td><td align=\"left\"><code class=\"filename\">ext/pb_ds/priority_queue.h</code></td><td align=\"left\"><code class=\"filename\">ext/stdio_filebuf.h</code></td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p></p><div class=\"table\"><a id=\"id458275\"></a><p class=\"title\"><b>Table\u00a03.9.\u00a0Extension Debug Headers</b></p><div class=\"table-contents\"><table summary=\"Extension Debug Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">debug/bitset</code></td><td align=\"left\"><code class=\"filename\">debug/list</code></td><td align=\"left\"><code class=\"filename\">debug/set</code></td><td align=\"left\"><code class=\"filename\">debug/unordered_map</code></td><td align=\"left\"><code class=\"filename\">debug/vector</code></td></tr><tr><td align=\"left\"><code class=\"filename\">debug/deque</code></td><td align=\"left\"><code class=\"filename\">debug/map</code></td><td align=\"left\"><code class=\"filename\">debug/string</code></td><td align=\"left\"><code class=\"filename\">debug/unordered_set</code></td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p></p><div class=\"table\"><a id=\"id428288\"></a><p class=\"title\"><b>Table\u00a03.10.\u00a0Extension Parallel Headers</b></p><div class=\"table-contents\"><table summary=\"Extension Parallel Headers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /></colgroup><tbody><tr><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td><td align=\"left\"><code class=\"filename\">parallel/numeric</code></td></tr></tbody></table></div></div><br class=\"table-break\" /></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.headers.mixing\"></a>Mixing Headers</h3></div></div></div><p> A few simple rules.\n+</p><p>First, mixing different dialects of the standard headers is not\n+possible. It's an all-or-nothing affair. Thus, code like\n+</p><pre class=\"programlisting\">\n+#include &lt;array&gt;\n+#include &lt;functional&gt;\n+</pre><p>Implies C++0x mode. To use the entities in &lt;array&gt;, the C++0x\n+compilation mode must be used, which implies the C++0x functionality\n+(and deprecations) in &lt;functional&gt; will be present.\n+</p><p>Second, the other headers can be included with either dialect of\n+the standard headers, although features and types specific to C++0x\n+are still only enabled when in C++0x compilation mode. So, to use\n+rvalue references with <code class=\"code\">__gnu_cxx::vstring</code>, or to use the\n+debug-mode versions of <code class=\"code\">std::unordered_map</code>, one must use\n+the <code class=\"code\">std=gnu++0x</code> compiler flag. (Or <code class=\"code\">std=c++0x</code>, of course.)\n+</p><p>A special case of the second rule is the mixing of TR1 and C++0x\n+facilities. It is possible (although not especially prudent) to\n+include both the TR1 version and the C++0x version of header in the\n+same translation unit:\n+</p><pre class=\"programlisting\">\n+#include &lt;tr1/type_traits&gt;\n+#include &lt;type_traits&gt;\n+</pre><p> Several parts of C++0x diverge quite substantially from TR1 predecessors.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.headers.cheaders\"></a>The C Headers and <code class=\"code\">namespace std</code></h3></div></div></div><p>\n+\tThe standard specifies that if one includes the C-style header\n+\t(&lt;math.h&gt; in this case), the symbols will be available\n+\tin the global namespace and perhaps in\n+\tnamespace <code class=\"code\">std::</code> (but this is no longer a firm\n+\trequirement.) One the other hand, including the C++-style\n+\theader (&lt;cmath&gt;) guarantees that the entities will be\n+\tfound in namespace std and perhaps in the global namespace.\n+      </p><p>\n+Usage of C++-style headers is recommended, as then\n+C-linkage names can be disambiguated by explicit qualification, such\n+as by <code class=\"code\">std::abort</code>. In addition, the C++-style headers can\n+use function overloading to provide a simpler interface to certain\n+families of C-functions. For instance in &lt;cmath&gt;, the\n+function <code class=\"code\">std::sin</code> has overloads for all the builtin\n+floating-point types. This means that <code class=\"code\">std::sin</code> can be\n+used uniformly, instead of a combination\n+of <code class=\"code\">std::sinf</code>, <code class=\"code\">std::sin</code>,\n+and <code class=\"code\">std::sinl</code>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.headers.pre\"></a>Precompiled Headers</h3></div></div></div><p>There are three base header files that are provided. They can be\n+used to precompile the standard headers and extensions into binary\n+files that may the be used to speed compiles that use these headers.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>stdc++.h</p><p>Includes all standard headers. Actual content varies depending on\n+language dialect.\n+</p></li><li><p>stdtr1c++.h</p><p>Includes all of &lt;stdc++.h&gt;, and adds all the TR1 headers.\n+</p></li><li><p>extc++.h</p><p>Includes all of &lt;stdtr1c++.h&gt;, and adds all the Extension headers.\n+</p></li></ul></div><p>How to construct a .gch file from one of these base header files.</p><p>First, find the include directory for the compiler. One way to do\n+this is:</p><pre class=\"programlisting\">\n+g++ -v hello.cc\n+\n+#include &lt;...&gt; search starts here:\n+ /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0\n+...\n+End of search list.\n+</pre><p>Then, create a precompiled header file with the same flags that\n+will be used to compile other projects.</p><pre class=\"programlisting\">\n+g++ -Winvalid-pch -x c++-header -g -O2 -o ./stdc++.h.gch /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0/x86_64-unknown-linux-gnu/bits/stdc++.h\n+</pre><p>The resulting file will be quite large: the current size is around\n+thirty megabytes. </p><p>How to use the resulting file.</p><pre class=\"programlisting\">\n+g++ -I. -include stdc++.h  -H -g -O2 hello.cc \n+</pre><p>Verification that the PCH file is being used is easy:</p><pre class=\"programlisting\">\n+g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n+! ./stdc++.h.gch\n+. /mnt/share/bld/H-x86-gcc.20071201/include/c++/4.3.0/iostream\n+. /mnt/share/bld/H-x86-gcc.20071201include/c++/4.3.0/string\n+</pre><p>The exclamation point to the left of the <code class=\"code\">stdc++.h.gch</code> listing means that the generated PCH file was used, and thus the </p><p></p><p> Detailed information about creating precompiled header files can be found in the GCC <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html\" target=\"_top\">documentation</a>.\n+</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"using.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a03.\u00a0Using\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Namespaces</td></tr></table></div></body></html>"}, {"sha": "50ea8771de3f55a6ed981138d23a3f251b2e65e1", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch03s03.html", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Namespaces</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"prev\" href=\"bk01pt01ch03s02.html\" title=\"Headers\" /><link rel=\"next\" href=\"bk01pt01ch03s04.html\" title=\"Macros\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Namespaces</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a03.\u00a0Using</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s04.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.using.namespaces\"></a>Namespaces</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.namespaces.all\"></a>Available Namespaces</h3></div></div></div><p> There are three main namespaces.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>std</p><p>The ISO C++ standards specify that \"all library entities are defined\n+within namespace std.\" This includes namepaces nested\n+within <code class=\"code\">namespace std</code>, such as <code class=\"code\">namespace\n+std::tr1</code>.\n+</p></li><li><p>abi</p><p>Specified by the C++ ABI. This ABI specifies a number of type and\n+function APIs supplemental to those required by the ISO C++ Standard,\n+but necessary for interoperability.\n+</p></li><li><p>__gnu_</p><p>Indicating one of several GNU extensions. Choices\n+include <code class=\"code\">__gnu_cxx</code>, <code class=\"code\">__gnu_debug</code>, <code class=\"code\">__gnu_parallel</code>,\n+and <code class=\"code\">__gnu_pbds</code>.\n+</p></li></ul></div><p> A complete list of implementation namespaces (including namespace contents) is available in the generated source <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html\" target=\"_top\">documentation</a>. \n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.namespaces.std\"></a>namespace std</h3></div></div></div><p>\n+      One standard requirement is that the library components are defined\n+      in <code class=\"code\">namespace std::</code>. Thus, in order to use these types or\n+      functions, one must do one of two things:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>put a kind of <span class=\"emphasis\"><em>using-declaration</em></span> in your source\n+(either <code class=\"code\">using namespace std;</code> or i.e. <code class=\"code\">using\n+std::string;</code>) This approach works well for individual source files, but\n+should not be used in a global context, like header files.\n+\t  </p></li><li><p>use a <span class=\"emphasis\"><em>fully\n+qualified name</em></span>for each library symbol\n+(i.e. <code class=\"code\">std::string</code>, <code class=\"code\">std::cout</code>) Always can be\n+used, and usually enhanced, by strategic use of typedefs. (In the\n+cases where the qualified verbiage becomes unwieldy.)\n+\t  </p></li></ul></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.namespaces.comp\"></a>Using Namespace Composition</h3></div></div></div><p>\n+Best practice in programming suggests sequestering new data or\n+functionality in a sanely-named, unique namespace whenever\n+possible. This is considered an advantage over dumping everything in\n+the global namespace, as then name look-up can be explicitly enabled or\n+disabled as above, symbols are consistently mangled without repetitive\n+naming prefixes or macros, etc.\n+</p><p>For instance, consider a project that defines most of its classes in <code class=\"code\">namespace gtk</code>. It is possible to\n+\tadapt <code class=\"code\">namespace gtk</code> to <code class=\"code\">namespace std</code> by using a C++-feature called\n+\t<span class=\"emphasis\"><em>namespace composition</em></span>. This is what happens if\n+\ta <span class=\"emphasis\"><em>using</em></span>-declaration is put into a\n+\tnamespace-definition: the imported symbol(s) gets imported into the\n+\tcurrently active namespace(s). For example:\n+</p><pre class=\"programlisting\">\n+namespace gtk \n+{\n+  using std::string;\n+  using std::tr1::array;\n+\n+  class Window { ... };\n+}\n+</pre><p>\n+\tIn this example, <code class=\"code\">std::string</code> gets imported into\n+\t<code class=\"code\">namespace gtk</code>.  The result is that use of\n+\t<code class=\"code\">std::string</code> inside namespace gtk can just use <code class=\"code\">string</code>, without the explicit qualification. \n+\tAs an added bonus, \n+\t<code class=\"code\">std::string</code> does not get imported into\n+\tthe global namespace.  Additionally, a more elaborate arrangement can be made for backwards compatibility and portability, whereby the\n+\t<code class=\"code\">using</code>-declarations can wrapped in macros that\n+\tare set based on autoconf-tests to either \"\" or i.e. <code class=\"code\">using\n+\t  std::string;</code> (depending on whether the system has\n+\tlibstdc++ in <code class=\"code\">std::</code> or not).  (ideas from\n+\t<code class=\"email\">&lt;<a class=\"email\" href=\"mailto:llewelly@dbritsch.dsl.xmission.com\">llewelly@dbritsch.dsl.xmission.com</a>&gt;</code>, Karl Nelson <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:kenelson@ece.ucdavis.edu\">kenelson@ece.ucdavis.edu</a>&gt;</code>)\n+</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s04.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Headers\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Macros</td></tr></table></div></body></html>"}, {"sha": "48002e7e6c422cea58951b08abd5f0c1a72581c5", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch03s04.html", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s04.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s04.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s04.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Macros</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"prev\" href=\"bk01pt01ch03s03.html\" title=\"Namespaces\" /><link rel=\"next\" href=\"bk01pt01ch03s05.html\" title=\"Concurrency\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Macros</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a03.\u00a0Using</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s05.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.using.macros\"></a>Macros</h2></div></div></div><p>All pre-processor switches and configurations are all gathered\n+      in the file <code class=\"code\">c++config.h</code>, which is generated during\n+      the libstdc++ configuration and build process, and included by\n+      files part of the public libstdc++ API. Most of these macros\n+      should not be used by consumers of libstdc++, and are reserved\n+      for internal implementation use. <span class=\"emphasis\"><em>These macros cannot be\n+      redefined</em></span>. However, a select handful of these macro\n+      control libstdc++ extensions and extra features, or provide\n+      versioning information for the API, and are able to be used.\n+   </p><p>All library macros begin with <code class=\"code\">_GLIBCXX_</code> (except for\n+   versions 3.1.x to 3.3.x, which use <code class=\"code\">_GLIBCPP_</code>).\n+   </p><p>Below is the macro which users may check for library version\n+      information. </p><div class=\"variablelist\"><dl><dt><span class=\"term\"><code class=\"code\">__GLIBCXX__</code></span></dt><dd><p>The current version of\n+    libstdc++ in compressed ISO date format, form of an unsigned\n+    long. For details on the value of this particular macro for a\n+    particular release, please consult this <a class=\"ulink\" href=\"abi.html\" target=\"_top\">\n+    document</a>.\n+    </p></dd></dl></div><p>Below are the macros which users may change with #define/#undef or\n+      with -D/-U compiler flags.  The default state of the symbol is\n+      listed.</p><p>\u201c<span class=\"quote\">Configurable</span>\u201d (or \u201c<span class=\"quote\">Not configurable</span>\u201d) means\n+      that the symbol is initially chosen (or not) based on\n+      --enable/--disable options at library build and configure time\n+      (documented <a class=\"link\" href=\"bk01pt01ch02.html#manual.intro.setup.configure\" title=\"Configure\">here</a>), with the\n+      various --enable/--disable choices being translated to\n+      #define/#undef).\n+   </p><p> <acronym class=\"acronym\">ABI</acronym> means that changing from the default value may\n+  mean changing the <acronym class=\"acronym\">ABI</acronym> of compiled code. In other words, these\n+  choices control code which has already been compiled (i.e., in a\n+  binary such as libstdc++.a/.so).  If you explicitly #define or\n+  #undef these macros, the <span class=\"emphasis\"><em>headers</em></span> may see different code\n+  paths, but the <span class=\"emphasis\"><em>libraries</em></span> which you link against will not.\n+  Experimenting with different values with the expectation of\n+  consistent linkage requires changing the config headers before\n+  building/installing the library.\n+   </p><div class=\"variablelist\"><dl><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_DEPRECATED</code></span></dt><dd><p>\n+\tDefined by default. Not configurable. ABI-changing. Turning this off\n+        removes older ARM-style iostreams code, and other anachronisms\n+        from the API.  This macro is dependent on the version of the\n+        standard being tracked, and as a result may give different results for\n+        <code class=\"code\">-std=c++98</code> and <code class=\"code\">-std=c++0x</code>. This may\n+        be useful in updating old C++ code which no longer meet the\n+        requirements of the language, or for checking current code\n+        against new language standards.  \n+    </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_FORCE_NEW</code></span></dt><dd><p>\n+\tUndefined by default. When defined, memory allocation and\n+\tallocators controlled by libstdc++ call operator new/delete\n+\twithout caching and pooling. Configurable via\n+\t<code class=\"code\">--enable-libstdcxx-allocator</code>. ABI-changing.\n+      </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_CONCEPT_CHECKS</code></span></dt><dd><p>\n+\tUndefined by default.  Configurable via\n+\t<code class=\"code\">--enable-concept-checks</code>.  When defined, performs\n+\tcompile-time checking on certain template instantiations to\n+\tdetect violations of the requirements of the standard.  This\n+\tis described in more detail <a class=\"ulink\" href=\"../19_diagnostics/howto.html#3\" target=\"_top\">here</a>.\n+      </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_DEBUG</code></span></dt><dd><p>\n+\tUndefined by default. When defined, compiles\n+    user code using the <a class=\"ulink\" href=\"../ext/debug.html#safe\" target=\"_top\">libstdc++ debug\n+    mode</a>.\n+      </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_DEBUG_PEDANTIC</code></span></dt><dd><p>\n+\tUndefined by default. When defined while\n+    compiling with the <a class=\"ulink\" href=\"../ext/debug.html#safe\" target=\"_top\">libstdc++ debug\n+    mode</a>, makes the debug mode extremely picky by making the use\n+    of libstdc++ extensions and libstdc++-specific behavior into\n+    errors.\n+      </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_PARALLEL</code></span></dt><dd><p>Undefined by default. When defined, compiles\n+    user code using the <a class=\"ulink\" href=\"../ext/parallel_mode.html\" target=\"_top\">libstdc++ parallel\n+    mode</a>.\n+      </p></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s05.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Namespaces\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Concurrency</td></tr></table></div></body></html>"}, {"sha": "7a9d2eb0c295af4c678917dafe9ef6d3eeda2e8b", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch03s05.html", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s05.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s05.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s05.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,219 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Concurrency</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"prev\" href=\"bk01pt01ch03s04.html\" title=\"Macros\" /><link rel=\"next\" href=\"bk01pt01ch03s06.html\" title=\"Exception Safety\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Concurrency</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s04.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a03.\u00a0Using</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s06.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.using.concurrency\"></a>Concurrency</h2></div></div></div><p>This section discusses issues surrounding the proper compilation\n+      of multithreaded applications which use the Standard C++\n+      library.  This information is GCC-specific since the C++\n+      standard does not address matters of multithreaded applications.\n+   </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.prereq\"></a>Prerequisites</h3></div></div></div><p>All normal disclaimers aside, multithreaded C++ application are\n+      only supported when libstdc++ and all user code was built with\n+      compilers which report (via <code class=\"code\"> gcc/g++ -v </code>) the same thread\n+      model and that model is not <span class=\"emphasis\"><em>single</em></span>.  As long as your\n+      final application is actually single-threaded, then it should be\n+      safe to mix user code built with a thread model of\n+      <span class=\"emphasis\"><em>single</em></span> with a libstdc++ and other C++ libraries built\n+      with another thread model useful on the platform.  Other mixes\n+      may or may not work but are not considered supported.  (Thus, if\n+      you distribute a shared C++ library in binary form only, it may\n+      be best to compile it with a GCC configured with\n+      --enable-threads for maximal interchangeability and usefulness\n+      with a user population that may have built GCC with either\n+      --enable-threads or --disable-threads.)\n+   </p><p>When you link a multithreaded application, you will probably\n+      need to add a library or flag to g++.  This is a very\n+      non-standardized area of GCC across ports.  Some ports support a\n+      special flag (the spelling isn't even standardized yet) to add\n+      all required macros to a compilation (if any such flags are\n+      required then you must provide the flag for all compilations not\n+      just linking) and link-library additions and/or replacements at\n+      link time.  The documentation is weak.  Here is a quick summary\n+      to display how ad hoc this is: On Solaris, both -pthreads and\n+      -threads (with subtly different meanings) are honored.  On OSF,\n+      -pthread and -threads (with subtly different meanings) are\n+      honored.  On Linux/i386, -pthread is honored.  On FreeBSD,\n+      -pthread is honored.  Some other ports use other switches.\n+      AFAIK, none of this is properly documented anywhere other than\n+      in ``gcc -dumpspecs'' (look at lib and cpp entries).\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.thread_safety\"></a>Thread Safety</h3></div></div></div><p>\n+We currently use the <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/thread_safety.html\" target=\"_top\">SGI STL</a> definition of thread safety.\n+</p><p>The library strives to be thread-safe when all of the following\n+         conditions are met:\n+      </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>The system's libc is itself thread-safe,\n+       </p></li><li><p>\n+\t   The compiler in use reports a thread model other than\n+\t   'single'. This can be tested via output from <code class=\"code\">gcc\n+\t   -v</code>. Multi-thread capable versions of gcc output\n+\t   something like this:\n+\t </p><pre class=\"programlisting\">\n+%gcc -v\n+Using built-in specs.\n+...\n+Thread model: posix\n+gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)\n+</pre><p>Look for \"Thread model\" lines that aren't equal to \"single.\"</p></li><li><p>\n+\t Requisite command-line flags are used for atomic operations\n+\t and threading. Examples of this include <code class=\"code\">-pthread</code>\n+\t and <code class=\"code\">-march=native</code>, although specifics vary\n+\t depending on the host environment. See <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html\" target=\"_top\">Machine\n+\t Dependent Options</a>.\n+       </p></li><li><p>\n+\t   An implementation of atomicity.h functions\n+           exists for the architecture in question. See the internals documentation for more <a class=\"ulink\" href=\"../ext/concurrence.html\" target=\"_top\">details</a>.\n+       </p></li></ul></div><p>The user-code must guard against concurrent method calls which may\n+         access any particular library object's state.  Typically, the\n+         application programmer may infer what object locks must be held\n+         based on the objects referenced in a method call.  Without getting\n+         into great detail, here is an example which requires user-level\n+         locks:\n+      </p><pre class=\"programlisting\">\n+     library_class_a shared_object_a;\n+\n+     thread_main () {\n+       library_class_b *object_b = new library_class_b;\n+       shared_object_a.add_b (object_b);   // must hold lock for shared_object_a\n+       shared_object_a.mutate ();          // must hold lock for shared_object_a\n+     }\n+\n+     // Multiple copies of thread_main() are started in independent threads.</pre><p>Under the assumption that object_a and object_b are never exposed to\n+         another thread, here is an example that should not require any\n+         user-level locks:\n+      </p><pre class=\"programlisting\">\n+     thread_main () {\n+       library_class_a object_a;\n+       library_class_b *object_b = new library_class_b;\n+       object_a.add_b (object_b);\n+       object_a.mutate ();\n+     } </pre><p>All library objects are safe to use in a multithreaded program as\n+         long as each thread carefully locks out access by any other\n+         thread while it uses any object visible to another thread, i.e.,\n+         treat library objects like any other shared resource.  In general,\n+         this requirement includes both read and write access to objects;\n+         unless otherwise documented as safe, do not assume that two threads\n+         may access a shared standard library object at the same time.\n+      </p><p>See chapters <a class=\"ulink\" href=\"../17_intro/howto.html#3\" target=\"_top\">17</a> (library\n+         introduction), <a class=\"ulink\" href=\"../23_containers/howto.html#3\" target=\"_top\">23</a>\n+         (containers), and <a class=\"ulink\" href=\"../27_io/howto.html#9\" target=\"_top\">27</a> (I/O) for\n+         more information.\n+      </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.atomics\"></a>Atomics</h3></div></div></div><p>\n+    </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.io\"></a>IO</h3></div></div></div><p>I'll assume that you have already read the\n+      <a class=\"ulink\" href=\"../17_intro/howto.html#3\" target=\"_top\">general notes on library threads</a>,\n+      and the\n+      <a class=\"ulink\" href=\"../23_containers/howto.html#3\" target=\"_top\">notes on threaded container\n+      access</a> (you might not think of an I/O stream as a container, but\n+      the points made there also hold here).  If you have not read them,\n+      please do so first.\n+   </p><p>This gets a bit tricky.  Please read carefully, and bear with me.\n+   </p><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"concurrency.io.structure\"></a>Structure</h4></div></div></div><p>A wrapper\n+      type called <code class=\"code\">__basic_file</code> provides our abstraction layer\n+      for the <code class=\"code\">std::filebuf</code> classes.  Nearly all decisions dealing\n+      with actual input and output must be made in <code class=\"code\">__basic_file</code>.\n+   </p><p>A generic locking mechanism is somewhat in place at the filebuf layer,\n+      but is not used in the current code.  Providing locking at any higher\n+      level is akin to providing locking within containers, and is not done\n+      for the same reasons (see the links above).\n+   </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"concurrency.io.defaults\"></a>Defaults</h4></div></div></div><p>The __basic_file type is simply a collection of small wrappers around\n+      the C stdio layer (again, see the link under Structure).  We do no\n+      locking ourselves, but simply pass through to calls to <code class=\"code\">fopen</code>,\n+      <code class=\"code\">fwrite</code>, and so forth.\n+   </p><p>So, for 3.0, the question of \"is multithreading safe for I/O\" \n+      must be answered with, \"is your platform's C library threadsafe\n+      for I/O?\"  Some are by default, some are not; many offer multiple\n+      implementations of the C library with varying tradeoffs of threadsafety\n+      and efficiency.  You, the programmer, are always required to take care\n+      with multiple threads.\n+   </p><p>(As an example, the POSIX standard requires that C stdio FILE*\n+       operations are atomic.  POSIX-conforming C libraries (e.g, on Solaris\n+       and GNU/Linux) have an internal mutex to serialize operations on\n+       FILE*s.  However, you still need to not do stupid things like calling\n+       <code class=\"code\">fclose(fs)</code> in one thread followed by an access of\n+       <code class=\"code\">fs</code> in another.)\n+   </p><p>So, if your platform's C library is threadsafe, then your\n+      <code class=\"code\">fstream</code> I/O operations will be threadsafe at the lowest\n+      level.  For higher-level operations, such as manipulating the data\n+      contained in the stream formatting classes (e.g., setting up callbacks\n+      inside an <code class=\"code\">std::ofstream</code>), you need to guard such accesses\n+      like any other critical shared resource.\n+   </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"concurrency.io.future\"></a>Future</h4></div></div></div><p> A\n+      second choice may be available for I/O implementations:  libio.  This is\n+      disabled by default, and in fact will not currently work due to other\n+      issues.  It will be revisited, however.\n+   </p><p>The libio code is a subset of the guts of the GNU libc (glibc) I/O\n+      implementation.  When libio is in use, the <code class=\"code\">__basic_file</code>\n+      type is basically derived from FILE.  (The real situation is more\n+      complex than that... it's derived from an internal type used to\n+      implement FILE.  See libio/libioP.h to see scary things done with\n+      vtbls.)  The result is that there is no \"layer\" of C stdio\n+      to go through; the filebuf makes calls directly into the same\n+      functions used to implement <code class=\"code\">fread</code>, <code class=\"code\">fwrite</code>,\n+      and so forth, using internal data structures.  (And when I say\n+      \"makes calls directly,\" I mean the function is literally\n+      replaced by a jump into an internal function.  Fast but frightening.\n+      *grin*)\n+   </p><p>Also, the libio internal locks are used.  This requires pulling in\n+      large chunks of glibc, such as a pthreads implementation, and is one\n+      of the issues preventing widespread use of libio as the libstdc++\n+      cstdio implementation.\n+   </p><p>But we plan to make this work, at least as an option if not a future\n+      default.  Platforms running a copy of glibc with a recent-enough\n+      version will see calls from libstdc++ directly into the glibc already\n+      installed.  For other platforms, a copy of the libio subsection will\n+      be built and included in libstdc++.\n+   </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"concurrency.io.alt\"></a>Alternatives</h4></div></div></div><p>Don't forget that other cstdio implementations are possible.  You could\n+      easily write one to perform your own forms of locking, to solve your\n+      \"interesting\" problems.\n+   </p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.containers\"></a>Containers</h3></div></div></div><p>This section discusses issues surrounding the design of\n+      multithreaded applications which use Standard C++ containers.\n+      All information in this section is current as of the gcc 3.0\n+      release and all later point releases.  Although earlier gcc\n+      releases had a different approach to threading configuration and\n+      proper compilation, the basic code design rules presented here\n+      were similar.  For information on all other aspects of\n+      multithreading as it relates to libstdc++, including details on\n+      the proper compilation of threaded code (and compatibility between\n+      threaded and non-threaded code), see Chapter 17.\n+   </p><p>Two excellent pages to read when working with the Standard C++\n+      containers and threads are\n+      <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/thread_safety.html\" target=\"_top\">SGI's\n+      http://www.sgi.com/tech/stl/thread_safety.html</a> and\n+      <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/Allocators.html\" target=\"_top\">SGI's\n+      http://www.sgi.com/tech/stl/Allocators.html</a>.\n+   </p><p><span class=\"emphasis\"><em>However, please ignore all discussions about the user-level\n+      configuration of the lock implementation inside the STL\n+      container-memory allocator on those pages.  For the sake of this\n+      discussion, libstdc++ configures the SGI STL implementation,\n+      not you.  This is quite different from how gcc pre-3.0 worked.\n+      In particular, past advice was for people using g++ to\n+      explicitly define _PTHREADS or other macros or port-specific\n+      compilation options on the command line to get a thread-safe\n+      STL.  This is no longer required for any port and should no\n+      longer be done unless you really know what you are doing and\n+      assume all responsibility.</em></span>\n+   </p><p>Since the container implementation of libstdc++ uses the SGI\n+      code, we use the same definition of thread safety as SGI when\n+      discussing design.  A key point that beginners may miss is the\n+      fourth major paragraph of the first page mentioned above\n+      (\"For most clients,\"...), which points out that\n+      locking must nearly always be done outside the container, by\n+      client code (that'd be you, not us).  There is a notable\n+      exceptions to this rule.  Allocators called while a container or\n+      element is constructed uses an internal lock obtained and\n+      released solely within libstdc++ code (in fact, this is the\n+      reason STL requires any knowledge of the thread configuration).\n+   </p><p>For implementing a container which does its own locking, it is\n+      trivial to provide a wrapper class which obtains the lock (as\n+      SGI suggests), performs the container operation, and then\n+      releases the lock.  This could be templatized <span class=\"emphasis\"><em>to a certain\n+      extent</em></span>, on the underlying container and/or a locking\n+      mechanism.  Trying to provide a catch-all general template\n+      solution would probably be more trouble than it's worth.\n+   </p><p>The STL implementation is currently configured to use the\n+      high-speed caching memory allocator.  Some people like to\n+      test and/or normally run threaded programs with a different\n+      default.  For all details about how to globally override this\n+      at application run-time see <a class=\"ulink\" href=\"../ext/howto.html#3\" target=\"_top\">here</a>.\n+   </p><p>There is a better way (not standardized yet):  It is possible to\n+      force the malloc-based allocator on a per-case-basis for some\n+      application code.  The library team generally believes that this\n+      is a better way to tune an application for high-speed using this\n+      implementation of the STL.  There is\n+      <a class=\"ulink\" href=\"../ext/howto.html#3\" target=\"_top\">more information on allocators here</a>.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s04.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch03s06.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Macros\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Exception Safety</td></tr></table></div></body></html>"}, {"sha": "1b7bbfeb7b6ac5f15aca0448602c155580f910f7", "filename": "libstdc++-v3/doc/html/manual/bk01pt01ch03s06.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s06.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s06.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt01ch03s06.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Exception Safety</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"prev\" href=\"bk01pt01ch03s05.html\" title=\"Concurrency\" /><link rel=\"next\" href=\"debug.html\" title=\"Debugging Support\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Exception Safety</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s05.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a03.\u00a0Using</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.using.exception_safety\"></a>Exception Safety</h2></div></div></div><p></p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s05.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Concurrency\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Debugging Support</td></tr></table></div></body></html>"}, {"sha": "30ff3115ba16a5f93fe70fbbdbd9b0a747b51571", "filename": "libstdc++-v3/doc/html/manual/bk01pt02ch04.html", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a04.\u00a0Types</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"support.html\" title=\"Part\u00a0II.\u00a0Support\" /><link rel=\"prev\" href=\"bk01pt02pr01.html\" title=\"\" /><link rel=\"next\" href=\"bk01pt02ch04s02.html\" title=\"Numeric Properties\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a04.\u00a0Types</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02pr01.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0II.\u00a0Support</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch04s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.support.types\"></a>Chapter\u00a04.\u00a0Types</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt02ch04.html#manual.support.types.fundamental\">Fundamental Types</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt02ch04s02.html\">Numeric Properties</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt02ch04s03.html\">NULL</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.support.types.fundamental\"></a>Fundamental Types</h2></div></div></div><p>\n+      C++ has the following builtin types:\n+    </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\tchar\n+      </p></li><li><p>\n+\tsigned char\n+      </p></li><li><p>\n+\tunsigned char\n+      </p></li><li><p>\n+\tsigned short\n+      </p></li><li><p>\n+\tsigned int\n+      </p></li><li><p>\n+\tsigned long\n+      </p></li><li><p>\n+\tunsigned short\n+      </p></li><li><p>\n+\tunsigned int\n+      </p></li><li><p>\n+\tunsigned long\n+      </p></li><li><p>\n+\tbool\n+      </p></li><li><p>\n+\twchar_t\n+      </p></li><li><p>\n+\tfloat\n+      </p></li><li><p>\n+\tdouble\n+      </p></li><li><p>\n+\tlong double\n+      </p></li></ul></div><p>\n+      These fundamental types are always available, without having to\n+      include a header file. These types are exactly the same in\n+      either C++ or in C.\n+    </p><p>\n+      Specializing parts of the library on these types is prohibited:\n+      instead, use a POD.\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02pr01.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"support.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch04s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Numeric Properties</td></tr></table></div></body></html>"}, {"sha": "29c5b7f77cbc0266dbc6900a792eafaa041bd6a4", "filename": "libstdc++-v3/doc/html/manual/bk01pt02ch04s02.html", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Numeric Properties</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt02ch04.html\" title=\"Chapter\u00a04.\u00a0Types\" /><link rel=\"prev\" href=\"bk01pt02ch04.html\" title=\"Chapter\u00a04.\u00a0Types\" /><link rel=\"next\" href=\"bk01pt02ch04s03.html\" title=\"NULL\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Numeric Properties</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch04.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a04.\u00a0Types</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch04s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.support.types.numeric_limits\"></a>Numeric Properties</h2></div></div></div><p>\n+    The header <code class=\"filename\">limits</code> defines\n+    traits classes to give access to various implementation\n+    defined-aspects of the fundamental types. The traits classes --\n+    fourteen in total -- are all specializations of the template class\n+    <code class=\"classname\">numeric_limits</code>, documented <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/structstd_1_1numeric__limits.html\" target=\"_top\">here</a>\n+    and defined as follows:\n+    </p><pre class=\"programlisting\">\n+   template&lt;typename T&gt; \n+     struct class \n+     {\n+       static const bool is_specialized;\n+       static T max() throw();\n+       static T min() throw();\n+\n+       static const int digits;\n+       static const int digits10;\n+       static const bool is_signed;\n+       static const bool is_integer;\n+       static const bool is_exact;\n+       static const int radix;\n+       static T epsilon() throw();\n+       static T round_error() throw();\n+\n+       static const int min_exponent;\n+       static const int min_exponent10;\n+       static const int max_exponent;\n+       static const int max_exponent10;\n+\n+       static const bool has_infinity;\n+       static const bool has_quiet_NaN;\n+       static const bool has_signaling_NaN;\n+       static const float_denorm_style has_denorm;\n+       static const bool has_denorm_loss;\n+       static T infinity() throw();\n+       static T quiet_NaN() throw();\n+       static T denorm_min() throw();\n+\n+       static const bool is_iec559;\n+       static const bool is_bounded;\n+       static const bool is_modulo;\n+\n+       static const bool traps;\n+       static const bool tinyness_before;\n+       static const float_round_style round_style;\n+     };\n+   </pre></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch04.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt02ch04.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch04s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a04.\u00a0Types\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0NULL</td></tr></table></div></body></html>"}, {"sha": "fbfba430e2266439fe6a201721303b8daa13ab85", "filename": "libstdc++-v3/doc/html/manual/bk01pt02ch04s03.html", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch04s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>NULL</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt02ch04.html\" title=\"Chapter\u00a04.\u00a0Types\" /><link rel=\"prev\" href=\"bk01pt02ch04s02.html\" title=\"Numeric Properties\" /><link rel=\"next\" href=\"bk01pt02ch05.html\" title=\"Chapter\u00a05.\u00a0Dynamic Memory\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">NULL</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch04s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a04.\u00a0Types</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch05.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.support.types.null\"></a>NULL</h2></div></div></div><p>\n+     The only change that might affect people is the type of\n+     <code class=\"constant\">NULL</code>: while it is required to be a macro,\n+     the definition of that macro is <span class=\"emphasis\"><em>not</em></span> allowed\n+     to be <code class=\"constant\">(void*)0</code>, which is often used in C.\n+    </p><p>\n+     For <span class=\"command\"><strong>g++</strong></span>, <code class=\"constant\">NULL</code> is\n+     </p><pre class=\"programlisting\">#define</pre><p>'d to be\n+     <code class=\"constant\">__null</code>, a magic keyword extension of\n+     <span class=\"command\"><strong>g++</strong></span>.\n+    </p><p>\n+     The biggest problem of #defining <code class=\"constant\">NULL</code> to be\n+     something like \u201c<span class=\"quote\">0L</span>\u201d is that the compiler will view\n+     that as a long integer before it views it as a pointer, so\n+     overloading won't do what you expect. (This is why\n+     <span class=\"command\"><strong>g++</strong></span> has a magic extension, so that\n+     <code class=\"constant\">NULL</code> is always a pointer.)\n+    </p><p>In his book <a class=\"ulink\" href=\"http://www.awprofessional.com/titles/0-201-92488-9/\" target=\"_top\"><span class=\"emphasis\"><em>Effective\n+    C++</em></span></a>, Scott Meyers points out that the best way\n+    to solve this problem is to not overload on pointer-vs-integer\n+    types to begin with.  He also offers a way to make your own magic\n+    <code class=\"constant\">NULL</code> that will match pointers before it\n+    matches integers.\n+    </p><p>See \n+      <a class=\"ulink\" href=\"http://www.awprofessional.com/titles/0-201-31015-5/\" target=\"_top\">the\n+      Effective C++ CD example</a>\n+    </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch04s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt02ch04.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch05.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Numeric Properties\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a05.\u00a0Dynamic Memory</td></tr></table></div></body></html>"}, {"sha": "8e18d9d6658eccdee3f90dd8b78ad9b94b709959", "filename": "libstdc++-v3/doc/html/manual/bk01pt02ch05.html", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch05.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch05.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch05.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,66 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a05.\u00a0Dynamic Memory</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"support.html\" title=\"Part\u00a0II.\u00a0Support\" /><link rel=\"prev\" href=\"bk01pt02ch04s03.html\" title=\"NULL\" /><link rel=\"next\" href=\"bk01pt02ch06.html\" title=\"Chapter\u00a06.\u00a0Termination\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a05.\u00a0Dynamic Memory</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch04s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0II.\u00a0Support</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch06.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.support.memory\"></a>Chapter\u00a05.\u00a0Dynamic Memory</h2></div></div></div><p>\n+    There are six flavors each of <code class=\"function\">new</code> and\n+    <code class=\"function\">delete</code>, so make certain that you're using the right\n+    ones. Here are quickie descriptions of <code class=\"function\">new</code>:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\tsingle object form, throwing a\n+\t<code class=\"classname\">bad_alloc</code> on errors; this is what most\n+\tpeople are used to using\n+      </p></li><li><p>\n+\tSingle object \"nothrow\" form, returning NULL on errors\n+      </p></li><li><p>\n+\tArray <code class=\"function\">new</code>, throwing\n+\t<code class=\"classname\">bad_alloc</code> on errors\n+      </p></li><li><p>\n+\tArray nothrow <code class=\"function\">new</code>, returning\n+\t<code class=\"constant\">NULL</code> on errors\n+      </p></li><li><p>\n+\tPlacement <code class=\"function\">new</code>, which does nothing (like\n+\tit's supposed to)\n+      </p></li><li><p>\n+\tPlacement array <code class=\"function\">new</code>, which also does\n+\tnothing\n+      </p></li></ul></div><p>\n+     They are distinguished by the parameters that you pass to them, like\n+     any other overloaded function.  The six flavors of <code class=\"function\">delete</code>\n+     are distinguished the same way, but none of them are allowed to throw\n+     an exception under any circumstances anyhow.  (They match up for\n+     completeness' sake.)\n+   </p><p>\n+     Remember that it is perfectly okay to call <code class=\"function\">delete</code> on a\n+     NULL pointer!  Nothing happens, by definition.  That is not the\n+     same thing as deleting a pointer twice.\n+   </p><p>\n+     By default, if one of the \u201c<span class=\"quote\">throwing <code class=\"function\">new</code>s</span>\u201d can't\n+     allocate the memory requested, it tosses an instance of a\n+     <code class=\"classname\">bad_alloc</code> exception (or, technically, some class derived\n+     from it).  You can change this by writing your own function (called a\n+     new-handler) and then registering it with <code class=\"function\">set_new_handler()</code>:\n+   </p><pre class=\"programlisting\">\n+   typedef void (*PFV)(void);\n+\n+   static char*  safety;\n+   static PFV    old_handler;\n+\n+   void my_new_handler ()\n+   {\n+       delete[] safety;\n+       popup_window (\"Dude, you are running low on heap memory.  You\n+                      should, like, close some windows, or something.\n+                      The next time you run out, we're gonna burn!\");\n+       set_new_handler (old_handler);\n+       return;\n+   }\n+\n+   int main ()\n+   {\n+       safety = new char[500000];\n+       old_handler = set_new_handler (&amp;my_new_handler);\n+       ...\n+   }\n+   </pre><p>\n+     <code class=\"classname\">bad_alloc</code> is derived from the base <code class=\"classname\">exception</code>\n+     class defined in Chapter 19.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch04s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"support.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch06.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">NULL\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a06.\u00a0Termination</td></tr></table></div></body></html>"}, {"sha": "a47fc4c28e427da1a262cbb7e21794daef9e7036", "filename": "libstdc++-v3/doc/html/manual/bk01pt02ch06.html", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch06.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch06.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch06.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a06.\u00a0Termination</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"support.html\" title=\"Part\u00a0II.\u00a0Support\" /><link rel=\"prev\" href=\"bk01pt02ch05.html\" title=\"Chapter\u00a05.\u00a0Dynamic Memory\" /><link rel=\"next\" href=\"bk01pt02ch06s02.html\" title=\"Verbose Terminate Handler\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a06.\u00a0Termination</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch05.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0II.\u00a0Support</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch06s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.support.termination\"></a>Chapter\u00a06.\u00a0Termination</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt02ch06.html#support.termination.handlers\">Termination Handlers</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt02ch06s02.html\">Verbose Terminate Handler</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"support.termination.handlers\"></a>Termination Handlers</h2></div></div></div><p>\n+      Not many changes here to <code class=\"filename\">cstdlib</code>.  You should note that the\n+      <code class=\"function\">abort()</code> function does not call the\n+      destructors of automatic nor static objects, so if you're\n+      depending on those to do cleanup, it isn't going to happen.\n+      (The functions registered with <code class=\"function\">atexit()</code>\n+      don't get called either, so you can forget about that\n+      possibility, too.)\n+    </p><p>\n+      The good old <code class=\"function\">exit()</code> function can be a bit\n+      funky, too, until you look closer.  Basically, three points to\n+      remember are:\n+    </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+\tStatic objects are destroyed in reverse order of their creation.\n+\t</p></li><li><p>\n+\tFunctions registered with <code class=\"function\">atexit()</code> are called in\n+        reverse order of registration, once per registration call.\n+        (This isn't actually new.)\n+\t</p></li><li><p>\n+\tThe previous two actions are \u201c<span class=\"quote\">interleaved,</span>\u201d that is,\n+        given this pseudocode:\n+\t</p><pre class=\"programlisting\">\n+  extern \"C or C++\" void  f1 (void);\n+  extern \"C or C++\" void  f2 (void);\n+  \n+  static Thing obj1;\n+  atexit(f1);\n+  static Thing obj2;\n+  atexit(f2);\n+</pre><p>\n+        then at a call of <code class=\"function\">exit()</code>,\n+        <code class=\"varname\">f2</code> will be called, then\n+        <code class=\"varname\">obj2</code> will be destroyed, then\n+        <code class=\"varname\">f1</code> will be called, and finally\n+        <code class=\"varname\">obj1</code> will be destroyed. If\n+        <code class=\"varname\">f1</code> or <code class=\"varname\">f2</code> allow an\n+        exception to propagate out of them, Bad Things happen.\n+\t</p></li></ol></div><p>\n+      Note also that <code class=\"function\">atexit()</code> is only required to store 32\n+      functions, and the compiler/library might already be using some of\n+      those slots.  If you think you may run out, we recommend using\n+      the <code class=\"function\">xatexit</code>/<code class=\"function\">xexit</code> combination from <code class=\"literal\">libiberty</code>, which has no such limit.\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch05.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"support.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch06s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a05.\u00a0Dynamic Memory\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Verbose Terminate Handler</td></tr></table></div></body></html>"}, {"sha": "222fb043500a4da6e404a4fb2ba54c7b50159703", "filename": "libstdc++-v3/doc/html/manual/bk01pt02ch06s02.html", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch06s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch06s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02ch06s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Verbose Terminate Handler</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt02ch06.html\" title=\"Chapter\u00a06.\u00a0Termination\" /><link rel=\"prev\" href=\"bk01pt02ch06.html\" title=\"Chapter\u00a06.\u00a0Termination\" /><link rel=\"next\" href=\"diagnostics.html\" title=\"Part\u00a0III.\u00a0Diagnostics\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Verbose Terminate Handler</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch06.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a06.\u00a0Termination</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"diagnostics.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"support.termination.verbose\"></a>Verbose Terminate Handler</h2></div></div></div><p>\n+      If you are having difficulty with uncaught exceptions and want a\n+      little bit of help debugging the causes of the core dumps, you can\n+      make use of a GNU extension, the verbose terminate handler.\n+    </p><pre class=\"programlisting\">\n+#include &lt;exception&gt;\n+  \n+int main()\n+{\n+  std::set_terminate(__gnu_cxx::__verbose_terminate_handler);\n+  ...\n+\n+  throw <em class=\"replaceable\"><code>anything</code></em>;\n+}\n+</pre><p>\n+     The <code class=\"function\">__verbose_terminate_handler</code> function\n+     obtains the name of the current exception, attempts to demangle\n+     it, and prints it to stderr.  If the exception is derived from\n+     <code class=\"classname\">exception</code> then the output from\n+     <code class=\"function\">what()</code> will be included.\n+   </p><p>\n+     Any replacement termination function is required to kill the\n+     program without returning; this one calls abort.\n+   </p><p>\n+     For example:\n+   </p><pre class=\"programlisting\">\n+#include &lt;exception&gt;\n+#include &lt;stdexcept&gt;\n+\n+struct argument_error : public std::runtime_error\n+{  \n+  argument_error(const std::string&amp; s): std::runtime_error(s) { }\n+};\n+\n+int main(int argc)\n+{\n+  std::set_terminate(__gnu_cxx::__verbose_terminate_handler);\n+  if (argc &gt; 5)\n+    throw argument_error(\u201c<span class=\"quote\">argc is greater than 5!</span>\u201d);\n+  else\n+    throw argc;\n+}\n+</pre><p>\n+     With the verbose terminate handler active, this gives:\n+   </p><pre class=\"screen\">\n+   <code class=\"computeroutput\">\n+   % ./a.out\n+   terminate called after throwing a `int'\n+   Aborted\n+   % ./a.out f f f f f f f f f f f\n+   terminate called after throwing an instance of `argument_error'\n+   what(): argc is greater than 5!\n+   Aborted\n+   </code>\n+   </pre><p>\n+     The 'Aborted' line comes from the call to\n+     <code class=\"function\">abort()</code>, of course.\n+   </p><p>\n+     This is the default termination handler; nothing need be done to\n+     use it.  To go back to the previous \u201c<span class=\"quote\">silent death</span>\u201d\n+     method, simply include <code class=\"filename\">exception</code> and\n+     <code class=\"filename\">cstdlib</code>, and call\n+   </p><pre class=\"programlisting\">\n+     std::set_terminate(std::abort);\n+   </pre><p> \n+     After this, all calls to <code class=\"function\">terminate</code> will use\n+     <code class=\"function\">abort</code> as the terminate handler.\n+   </p><p>\n+     Note: the verbose terminate handler will attempt to write to\n+     stderr.  If your application closes stderr or redirects it to an\n+     inappropriate location,\n+     <code class=\"function\">__verbose_terminate_handler</code> will behave in\n+     an unspecified manner.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch06.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt02ch06.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"diagnostics.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a06.\u00a0Termination\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0III.\u00a0Diagnostics</td></tr></table></div></body></html>"}, {"sha": "46dbe2ab865d5421998c8b7a69e0b65a3d4d1c1a", "filename": "libstdc++-v3/doc/html/manual/bk01pt02pr01.html", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02pr01.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02pr01.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt02pr01.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title></title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"support.html\" title=\"Part\u00a0II.\u00a0Support\" /><link rel=\"prev\" href=\"support.html\" title=\"Part\u00a0II.\u00a0Support\" /><link rel=\"next\" href=\"bk01pt02ch04.html\" title=\"Chapter\u00a04.\u00a0Types\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\"></th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"support.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0II.\u00a0Support</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch04.html\">Next</a></td></tr></table><hr /></div><div class=\"preface\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"id394397\"></a></h2></div></div></div><p>\n+    This part deals with the functions called and objects created\n+    automatically during the course of a program's existence.\n+  </p><p>\n+    While we can't reproduce the contents of the Standard here (you\n+    need to get your own copy from your nation's member body; see our\n+    homepage for help), we can mention a couple of changes in what\n+    kind of support a C++ program gets from the Standard Library.\n+  </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"support.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"support.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt02ch04.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0II.\u00a0Support\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a04.\u00a0Types</td></tr></table></div></body></html>"}, {"sha": "a258631cb162f6edd469cd32eb24009ac17a137d", "filename": "libstdc++-v3/doc/html/manual/bk01pt03ch07.html", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a07.\u00a0Exceptions</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"diagnostics.html\" title=\"Part\u00a0III.\u00a0Diagnostics\" /><link rel=\"prev\" href=\"diagnostics.html\" title=\"Part\u00a0III.\u00a0Diagnostics\" /><link rel=\"next\" href=\"bk01pt03ch07s02.html\" title=\"Adding Data to Exceptions\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a07.\u00a0Exceptions</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"diagnostics.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0III.\u00a0Diagnostics</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch07s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.diagnostics.exceptions\"></a>Chapter\u00a07.\u00a0Exceptions</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt03ch07.html#manual.diagnostics.exceptions.hierarchy\">Exception Classes</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt03ch07s02.html\">Adding Data to Exceptions</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt03ch07s03.html\">Cancellation</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.diagnostics.exceptions.hierarchy\"></a>Exception Classes</h2></div></div></div><p>\n+      All exception objects are defined in one of the standard header\n+      files: <code class=\"filename\">exception</code>,\n+      <code class=\"filename\">stdexcept</code>, <code class=\"filename\">new</code>, and\n+      <code class=\"filename\">typeinfo</code>.\n+    </p><p>\n+      The base exception object is <code class=\"classname\">exception</code>,\n+      located in <code class=\"filename\">exception</code>. This object has no\n+      <code class=\"classname\">string</code> member.\n+    </p><p>\n+      Derived from this are several classes that may have a\n+      <code class=\"classname\">string</code> member: a full heirarchy can be\n+      found in the <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a00233.html\" target=\"_top\">source documentation</a>.\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"diagnostics.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"diagnostics.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch07s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0III.\u00a0Diagnostics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Adding Data to Exceptions</td></tr></table></div></body></html>"}, {"sha": "d7c892a2b829aecda095a9c9b07538bc3f457795", "filename": "libstdc++-v3/doc/html/manual/bk01pt03ch07s02.html", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Adding Data to Exceptions</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt03ch07.html\" title=\"Chapter\u00a07.\u00a0Exceptions\" /><link rel=\"prev\" href=\"bk01pt03ch07.html\" title=\"Chapter\u00a07.\u00a0Exceptions\" /><link rel=\"next\" href=\"bk01pt03ch07s03.html\" title=\"Cancellation\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Adding Data to Exceptions</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt03ch07.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a07.\u00a0Exceptions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch07s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.diagnostics.exceptions.data\"></a>Adding Data to Exceptions</h2></div></div></div><p>\n+      The standard exception classes carry with them a single string as\n+      data (usually describing what went wrong or where the 'throw' took\n+    place).  It's good to remember that you can add your own data to\n+    these exceptions when extending the hierarchy:\n+   </p><pre class=\"programlisting\">\n+   struct My_Exception : public std::runtime_error\n+   {\n+     public:\n+       My_Exception (const string&amp; whatarg)\n+           : std::runtime_error(whatarg), e(errno), id(GetDataBaseID()) { }\n+       int  errno_at_time_of_throw() const { return e; }\n+       DBID id_of_thing_that_threw() const { return id; }\n+     protected:\n+       int    e;\n+       DBID   id;     // some user-defined type\n+   };\n+   </pre></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt03ch07.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt03ch07.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch07s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a07.\u00a0Exceptions\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Cancellation</td></tr></table></div></body></html>"}, {"sha": "42c7b2e648264b09115148df633a4645ee9730a5", "filename": "libstdc++-v3/doc/html/manual/bk01pt03ch07s03.html", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch07s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Cancellation</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt03ch07.html\" title=\"Chapter\u00a07.\u00a0Exceptions\" /><link rel=\"prev\" href=\"bk01pt03ch07s02.html\" title=\"Adding Data to Exceptions\" /><link rel=\"next\" href=\"bk01pt03ch08.html\" title=\"Chapter\u00a08.\u00a0Concept Checking\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Cancellation</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt03ch07s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a07.\u00a0Exceptions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch08.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.diagnostics.exceptions.cancellation\"></a>Cancellation</h2></div></div></div><p>\n+    </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt03ch07s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt03ch07.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch08.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Adding Data to Exceptions\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a08.\u00a0Concept Checking</td></tr></table></div></body></html>"}, {"sha": "a7b50f0a4560ce9dec16bac1d4b41beb1d6c13f7", "filename": "libstdc++-v3/doc/html/manual/bk01pt03ch08.html", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch08.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch08.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt03ch08.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a08.\u00a0Concept Checking</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"diagnostics.html\" title=\"Part\u00a0III.\u00a0Diagnostics\" /><link rel=\"prev\" href=\"bk01pt03ch07s03.html\" title=\"Cancellation\" /><link rel=\"next\" href=\"utilities.html\" title=\"Part\u00a0IV.\u00a0Utilities\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a08.\u00a0Concept Checking</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt03ch07s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0III.\u00a0Diagnostics</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"utilities.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.diagnostics.concept_checking\"></a>Chapter\u00a08.\u00a0Concept Checking</h2></div></div></div><p>\n+    In 1999, SGI added \u201c<span class=\"quote\">concept checkers</span>\u201d to their\n+    implementation of the STL: code which checked the template\n+    parameters of instantiated pieces of the STL, in order to insure\n+    that the parameters being used met the requirements of the\n+    standard.  For example, the Standard requires that types passed as\n+    template parameters to <code class=\"classname\">vector</code> be\n+    \"Assignable\" (which means what you think it means).  The\n+    checking was done during compilation, and none of the code was\n+    executed at runtime.\n+   </p><p>\n+     Unfortunately, the size of the compiler files grew significantly\n+     as a result.  The checking code itself was cumbersome.  And bugs\n+     were found in it on more than one occasion.\n+   </p><p>\n+     The primary author of the checking code, Jeremy Siek, had already\n+     started work on a replacement implementation.  The new code has been\n+     formally reviewed and accepted into\n+   <a class=\"ulink\" href=\"http://www.boost.org/libs/concept_check/concept_check.htm\" target=\"_top\">the\n+   Boost libraries</a>, and we are pleased to incorporate it into the\n+   GNU C++ library.\n+ </p><p>\n+   The new version imposes a much smaller space overhead on the generated\n+   object file.  The checks are also cleaner and easier to read and\n+   understand.\n+ </p><p>\n+   They are off by default for all versions of GCC.\n+   They can be enabled at configure time with\n+   <a class=\"ulink\" href=\"../configopts.html\" target=\"_top\"><code class=\"literal\">--enable-concept-checks</code></a>.\n+   You can enable them on a per-translation-unit basis with\n+     <code class=\"literal\">-D_GLIBCXX_CONCEPT_CHECKS</code>.\n+ </p><p>\n+   Please note that the upcoming C++ standard has first-class\n+   support for template parameter constraints based on concepts in the core\n+   language. This will obviate the need for the library-simulated concept\n+   checking described above.\n+ </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt03ch07s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"diagnostics.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"utilities.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Cancellation\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0IV.\u00a0Utilities</td></tr></table></div></body></html>"}, {"sha": "9a93f2c2708731be3b55a0a538dd4196b77facf8", "filename": "libstdc++-v3/doc/html/manual/bk01pt04ch09.html", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch09.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch09.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch09.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a09.\u00a0Functors</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"utilities.html\" title=\"Part\u00a0IV.\u00a0Utilities\" /><link rel=\"prev\" href=\"utilities.html\" title=\"Part\u00a0IV.\u00a0Utilities\" /><link rel=\"next\" href=\"bk01pt04ch10.html\" title=\"Chapter\u00a010.\u00a0Pairs\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a09.\u00a0Functors</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"utilities.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0IV.\u00a0Utilities</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt04ch10.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.util.functors\"></a>Chapter\u00a09.\u00a0Functors</h2></div></div></div><p>If you don't know what functors are, you're not alone.  Many people\n+      get slightly the wrong idea.  In the interest of not reinventing\n+      the wheel, we will refer you to the introduction to the functor\n+      concept written by SGI as part of their STL, in\n+      <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/functors.html\" target=\"_top\">their\n+      http://www.sgi.com/tech/stl/functors.html</a>.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"utilities.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"utilities.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt04ch10.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0IV.\u00a0Utilities\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a010.\u00a0Pairs</td></tr></table></div></body></html>"}, {"sha": "292026954a6e4474e90c7ee9155f8b2204b8d65d", "filename": "libstdc++-v3/doc/html/manual/bk01pt04ch10.html", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch10.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch10.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch10.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a010.\u00a0Pairs</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"utilities.html\" title=\"Part\u00a0IV.\u00a0Utilities\" /><link rel=\"prev\" href=\"bk01pt04ch09.html\" title=\"Chapter\u00a09.\u00a0Functors\" /><link rel=\"next\" href=\"bk01pt04ch11.html\" title=\"Chapter\u00a011.\u00a0Memory\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a010.\u00a0Pairs</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt04ch09.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0IV.\u00a0Utilities</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt04ch11.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.util.pairs\"></a>Chapter\u00a010.\u00a0Pairs</h2></div></div></div><p>The <code class=\"code\">pair&lt;T1,T2&gt;</code> is a simple and handy way to\n+      carry around a pair of objects.  One is of type T1, and another of\n+      type T2; they may be the same type, but you don't get anything\n+      extra if they are.  The two members can be accessed directly, as\n+      <code class=\"code\">.first</code> and <code class=\"code\">.second</code>.\n+   </p><p>Construction is simple.  The default ctor initializes each member\n+      with its respective default ctor.  The other simple ctor,\n+   </p><pre class=\"programlisting\">\n+    pair (const T1&amp; x, const T2&amp; y);\n+   </pre><p>does what you think it does, <code class=\"code\">first</code> getting <code class=\"code\">x</code>\n+      and <code class=\"code\">second</code> getting <code class=\"code\">y</code>.\n+   </p><p>There is a copy constructor, but it requires that your compiler\n+      handle member function templates:\n+   </p><pre class=\"programlisting\">\n+    template &lt;class U, class V&gt; pair (const pair&lt;U,V&gt;&amp; p);\n+   </pre><p>The compiler will convert as necessary from U to T1 and from\n+      V to T2 in order to perform the respective initializations.\n+   </p><p>The comparison operators are done for you.  Equality\n+      of two <code class=\"code\">pair&lt;T1,T2&gt;</code>s is defined as both <code class=\"code\">first</code>\n+      members comparing equal and both <code class=\"code\">second</code> members comparing\n+      equal; this simply delegates responsibility to the respective\n+      <code class=\"code\">operator==</code> functions (for types like MyClass) or builtin\n+      comparisons (for types like int, char, etc).\n+   </p><p>\n+      The less-than operator is a bit odd the first time you see it.  It\n+      is defined as evaluating to:\n+   </p><pre class=\"programlisting\">\n+    x.first  &lt;  y.first  ||\n+        ( !(y.first  &lt;  x.first)  &amp;&amp;  x.second  &lt;  y.second )\n+   </pre><p>The other operators are not defined using the <code class=\"code\">rel_ops</code>\n+      functions above, but their semantics are the same.\n+   </p><p>Finally, there is a template function called <code class=\"function\">make_pair</code>\n+      that takes two references-to-const objects and returns an\n+      instance of a pair instantiated on their respective types:\n+   </p><pre class=\"programlisting\">\n+    pair&lt;int,MyClass&gt; p = make_pair(4,myobject);\n+   </pre></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt04ch09.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"utilities.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt04ch11.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a09.\u00a0Functors\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a011.\u00a0Memory</td></tr></table></div></body></html>"}, {"sha": "d1f0024810f609066cd2192079cfbb2e9401b28c", "filename": "libstdc++-v3/doc/html/manual/bk01pt04ch11.html", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch11.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch11.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch11.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,346 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a011.\u00a0Memory</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"utilities.html\" title=\"Part\u00a0IV.\u00a0Utilities\" /><link rel=\"prev\" href=\"bk01pt04ch10.html\" title=\"Chapter\u00a010.\u00a0Pairs\" /><link rel=\"next\" href=\"auto_ptr.html\" title=\"auto_ptr\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a011.\u00a0Memory</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt04ch10.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0IV.\u00a0Utilities</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"auto_ptr.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.util.memory\"></a>Chapter\u00a011.\u00a0Memory</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt04ch11.html#manual.util.memory.allocator\">Allocators</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt04ch11.html#allocator.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt04ch11.html#allocator.design_issues\">Design Issues</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt04ch11.html#allocator.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt04ch11.html#allocator.using\">Using a Specific Allocator</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt04ch11.html#allocator.custom\">Custom Allocators</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt04ch11.html#allocator.ext\">Extension Allocators</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"auto_ptr.html\">auto_ptr</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"auto_ptr.html#auto_ptr.limitations\">Limitations</a></span></dt><dt><span class=\"sect2\"><a href=\"auto_ptr.html#auto_ptr.using\">Use in Containers</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"shared_ptr.html\">shared_ptr</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"shared_ptr.html#shared_ptr.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"shared_ptr.html#shared_ptr.design_issues\">Design Issues</a></span></dt><dt><span class=\"sect2\"><a href=\"shared_ptr.html#shared_ptr.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"shared_ptr.html#shared_ptr.using\">Use</a></span></dt><dt><span class=\"sect2\"><a href=\"shared_ptr.html#shared_ptr.ack\">Acknowledgments</a></span></dt></dl></dd></dl></div><p>\n+    Memory contains three general areas. First, function and operator\n+    calls via <code class=\"function\">new</code> and <code class=\"function\">delete</code>\n+    operator or member function calls.  Second, allocation via\n+    <code class=\"classname\">allocator</code>. And finally, smart pointer and\n+    intelligent pointer abstractions.\n+  </p><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.util.memory.allocator\"></a>Allocators</h2></div></div></div><p>\n+ Memory management for Standard Library entities is encapsulated in a\n+ class template called <code class=\"classname\">allocator</code>. The\n+ <code class=\"classname\">allocator</code> abstraction is used throughout the\n+ library in <code class=\"classname\">string</code>, container classes,\n+ algorithnms, and parts of iostreams. This class, and base classes of\n+ it, are the superset of available free store (\u201c<span class=\"quote\">heap</span>\u201d)\n+ management classes.\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.req\"></a>Requirements</h3></div></div></div><p>\n+    The C++ standard only gives a few directives in this area:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+       When you add elements to a container, and the container must\n+       allocate more memory to hold them, the container makes the\n+       request via its <span class=\"type\">Allocator</span> template\n+       parameter, which is usually aliased to\n+       <span class=\"type\">allocator_type</span>.  This includes adding chars\n+       to the string class, which acts as a regular STL container in\n+       this respect.\n+      </p></li><li><p>\n+       The default <span class=\"type\">Allocator</span> argument of every\n+       container-of-T is <code class=\"classname\">allocator&lt;T&gt;</code>.\n+       </p></li><li><p>\n+       The interface of the <code class=\"classname\">allocator&lt;T&gt;</code> class is\n+         extremely simple.  It has about 20 public declarations (nested\n+         typedefs, member functions, etc), but the two which concern us most\n+         are:\n+       </p><pre class=\"programlisting\">\n+\t T*    allocate   (size_type n, const void* hint = 0);\n+\t void  deallocate (T* p, size_type n);\n+       </pre><p>\n+\t The <code class=\"varname\">n</code> arguments in both those\n+\t functions is a <span class=\"emphasis\"><em>count</em></span> of the number of\n+\t <span class=\"type\">T</span>'s to allocate space for, <span class=\"emphasis\"><em>not their\n+\t total size</em></span>.\n+\t (This is a simplification; the real signatures use nested typedefs.)  \n+       </p></li><li><p>\n+\t The storage is obtained by calling <code class=\"function\">::operator\n+\t new</code>, but it is unspecified when or how\n+\t often this function is called.  The use of the \n+\t <code class=\"varname\">hint</code> is unspecified, but intended as an\n+\t aid to locality if an implementation so\n+\t desires. <code class=\"constant\">[20.4.1.1]/6</code>\n+       </p></li></ul></div><p> \n+     Complete details cam be found in the C++ standard, look in\n+     <code class=\"constant\">[20.4 Memory]</code>.\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.design_issues\"></a>Design Issues</h3></div></div></div><p>\n+    The easiest way of fulfilling the requirements is to call\n+    <code class=\"function\">operator new</code> each time a container needs\n+    memory, and to call <code class=\"function\">operator delete</code> each time\n+    the container releases memory. This method may be <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html\" target=\"_top\">slower</a>\n+    than caching the allocations and re-using previously-allocated\n+    memory, but has the advantage of working correctly across a wide\n+    variety of hardware and operating systems, including large\n+    clusters. The <code class=\"classname\">__gnu_cxx::new_allocator</code>\n+    implements the simple operator new and operator delete semantics,\n+    while <code class=\"classname\">__gnu_cxx::malloc_allocator</code>\n+    implements much the same thing, only with the C language functions\n+    <code class=\"function\">std::malloc</code> and <code class=\"function\">free</code>.\n+  </p><p> \n+    Another approach is to use intelligence within the allocator\n+    class to cache allocations. This extra machinery can take a variety\n+    of forms: a bitmap index, an index into an exponentially increasing\n+    power-of-two-sized buckets, or simpler fixed-size pooling cache.\n+    The cache is shared among all the containers in the program: when\n+    your program's <code class=\"classname\">std::vector&lt;int&gt;</code> gets\n+  cut in half and frees a bunch of its storage, that memory can be\n+  reused by the private\n+  <code class=\"classname\">std::list&lt;WonkyWidget&gt;</code> brought in from\n+  a KDE library that you linked against.  And operators\n+  <code class=\"function\">new</code> and <code class=\"function\">delete</code> are not\n+  always called to pass the memory on, either, which is a speed\n+  bonus. Examples of allocators that use these techniques are\n+  <code class=\"classname\">__gnu_cxx::bitmap_allocator</code>,\n+  <code class=\"classname\">__gnu_cxx::pool_allocator</code>, and\n+  <code class=\"classname\">__gnu_cxx::__mt_alloc</code>.\n+  </p><p>\n+    Depending on the implementation techniques used, the underlying\n+    operating system, and compilation environment, scaling caching\n+    allocators can be tricky. In particular, order-of-destruction and\n+    order-of-creation for memory pools may be difficult to pin down\n+    with certainty, which may create problems when used with plugins\n+    or loading and unloading shared objects in memory. As such, using\n+    caching allocators on systems that do not support\n+    <code class=\"function\">abi::__cxa_atexit</code> is not recommended.\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.impl\"></a>Implementation</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id419220\"></a>Interface Design</h4></div></div></div><p>\n+     The only allocator interface that\n+     is support is the standard C++ interface. As such, all STL\n+     containers have been adjusted, and all external allocators have\n+     been modified to support this change.   \n+   </p><p> \n+     The class <code class=\"classname\">allocator</code> just has typedef,\n+   constructor, and rebind members. It inherits from one of the\n+   high-speed extension allocators, covered below. Thus, all\n+   allocation and deallocation depends on the base class.\n+   </p><p> \n+     The base class that <code class=\"classname\">allocator</code> is derived from\n+     may not be user-configurable.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id480984\"></a>Selecting Default Allocation Policy</h4></div></div></div><p> \n+     It's difficult to pick an allocation strategy that will provide\n+   maximum utility, without excessively penalizing some behavior. In\n+   fact, it's difficult just deciding which typical actions to measure\n+   for speed.\n+   </p><p> \n+     Three synthetic benchmarks have been created that provide data\n+     that is used to compare different C++ allocators. These tests are:\n+   </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+       Insertion. \n+       </p><p>\n+       Over multiple iterations, various STL container\n+     objects have elements inserted to some maximum amount. A variety\n+     of allocators are tested.  \n+     Test source for <a class=\"ulink\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/sequence.cc?view=markup\" target=\"_top\">sequence</a>\n+     and <a class=\"ulink\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert/associative.cc?view=markup\" target=\"_top\">associative</a>\n+     containers.\n+       </p></li><li><p>\n+       Insertion and erasure in a multi-threaded environment.\n+       </p><p>\n+       This test shows the ability of the allocator to reclaim memory\n+     on a pre-thread basis, as well as measuring thread contention\n+     for memory resources. \n+     Test source \n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/insert_erase/associative.cc?view=markup\" target=\"_top\">here</a>.\n+       </p></li><li><p>\n+\t A threaded producer/consumer model.\n+       </p><p>\n+       Test source for\n+     <a class=\"ulink\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/producer_consumer/sequence.cc?view=markup\" target=\"_top\">sequence</a>\n+     and \n+     <a class=\"ulink\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/performance/23_containers/producer_consumer/associative.cc?view=markup\" target=\"_top\">associative</a>\n+     containers.\n+     </p></li></ol></div><p>\n+     The current default choice for\n+     <code class=\"classname\">allocator</code> is\n+     <code class=\"classname\">__gnu_cxx::new_allocator</code>.\n+   </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id411194\"></a>Disabling Memory Caching</h4></div></div></div><p> \n+      In use, <code class=\"classname\">allocator</code> may allocate and\n+      deallocate using implementation-specified strategies and\n+      heuristics. Because of this, every call to an allocator object's\n+      <code class=\"function\">allocate</code> member function may not actually\n+      call the global operator new. This situation is also duplicated\n+      for calls to the <code class=\"function\">deallocate</code> member\n+      function.\n+    </p><p> \n+     This can be confusing. \n+   </p><p> \n+     In particular, this can make debugging memory errors more\n+     difficult, especially when using third party tools like valgrind or\n+     debug versions of <code class=\"function\">new</code>.\n+   </p><p> \n+     There are various ways to solve this problem. One would be to use\n+     a custom allocator that just called operators\n+     <code class=\"function\">new</code> and <code class=\"function\">delete</code>\n+     directly, for every allocation. (See\n+     <code class=\"filename\">include/ext/new_allocator.h</code>, for instance.)\n+     However, that option would involve changing source code to use\n+     the a non-default allocator. Another option is to force the\n+     default allocator to remove caching and pools, and to directly\n+     allocate with every call of <code class=\"function\">allocate</code> and\n+     directly deallocate with every call of\n+     <code class=\"function\">deallocate</code>, regardless of efficiency. As it\n+     turns out, this last option is also available.\n+   </p><p>\n+     To globally disable memory caching within the library for the\n+     default allocator, merely set\n+     <code class=\"constant\">GLIBCXX_FORCE_NEW</code> (with any value) in the\n+     system's environment before running the program. If your program\n+     crashes with <code class=\"constant\">GLIBCXX_FORCE_NEW</code> in the\n+     environment, it likely means that you linked against objects\n+     built against the older library (objects which might still using the\n+     cached allocations...).\n+  </p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.using\"></a>Using a Specific Allocator</h3></div></div></div><p>\n+     You can specify different memory management schemes on a\n+     per-container basis, by overriding the default\n+     <span class=\"type\">Allocator</span> template parameter.  For example, an easy\n+      (but non-portable) method of specifying that only <code class=\"function\">malloc</code> or <code class=\"function\">free</code>\n+      should be used instead of the default node allocator is:\n+   </p><pre class=\"programlisting\">\n+    std::list &lt;int, __gnu_cxx::malloc_allocator&lt;int&gt; &gt;  malloc_list;</pre><p>\n+      Likewise, a debugging form of whichever allocator is currently in use:\n+    </p><pre class=\"programlisting\">\n+    std::deque &lt;int, __gnu_cxx::debug_allocator&lt;std::allocator&lt;int&gt; &gt; &gt;  debug_deque;\n+      </pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.custom\"></a>Custom Allocators</h3></div></div></div><p> \n+    Writing a portable C++ allocator would dictate that the interface\n+    would look much like the one specified for\n+    <code class=\"classname\">allocator</code>. Additional member functions, but\n+    not subtractions, would be permissible.\n+  </p><p> \n+     Probably the best place to start would be to copy one of the\n+   extension allocators: say a simple one like \n+   <code class=\"classname\">new_allocator</code>.\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.ext\"></a>Extension Allocators</h3></div></div></div><p> \n+    Several other allocators are provided as part of this\n+    implementation.  The location of the extension allocators and their\n+    names have changed, but in all cases, functionality is\n+    equivalent. Starting with gcc-3.4, all extension allocators are\n+    standard style. Before this point, SGI style was the norm. Because of\n+    this, the number of template arguments also changed. Here's a simple\n+    chart to track the changes.\n+  </p><p>\n+    More details on each of these extension allocators follows.\n+  </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+       <code class=\"classname\">new_allocator</code>\n+       </p><p>\n+\t Simply wraps <code class=\"function\">::operator new</code>\n+\t and <code class=\"function\">::operator delete</code>.\n+       </p></li><li><p>\n+       <code class=\"classname\">malloc_allocator</code>\n+       </p><p>\n+\t Simply wraps <code class=\"function\">malloc</code> and\n+\t <code class=\"function\">free</code>. There is also a hook for an\n+\t out-of-memory handler (for\n+\t <code class=\"function\">new</code>/<code class=\"function\">delete</code> this is\n+\t taken care of elsewhere).\n+       </p></li><li><p>\n+       <code class=\"classname\">array_allocator</code>\n+       </p><p>\n+\t Allows allocations of known and fixed sizes using existing\n+\t global or external storage allocated via construction of\n+\t <code class=\"classname\">std::tr1::array</code> objects. By using this\n+\t allocator, fixed size containers (including\n+\t <code class=\"classname\">std::string</code>) can be used without\n+\t instances calling <code class=\"function\">::operator new</code> and\n+\t <code class=\"function\">::operator delete</code>. This capability\n+\t allows the use of STL abstractions without runtime\n+\t complications or overhead, even in situations such as program\n+\t startup. For usage examples, please consult the testsuite.\n+       </p></li><li><p>\n+       <code class=\"classname\">debug_allocator</code>\n+       </p><p> \n+\t A wrapper around an arbitrary allocator A.  It passes on\n+\t slightly increased size requests to A, and uses the extra\n+\t memory to store size information.  When a pointer is passed\n+\t to <code class=\"function\">deallocate()</code>, the stored size is\n+\t checked, and <code class=\"function\">assert()</code> is used to\n+\t guarantee they match.\n+       </p></li><li><p>\n+\t<code class=\"classname\">throw_allocator</code>\n+\t</p><p> \n+\t  Includes memory tracking and marking abilities as well as hooks for\n+\t  throwing exceptinos at configurable intervals (including random,\n+\t  all, none). \n+\t</p></li><li><p>\n+       <code class=\"classname\">__pool_alloc</code>\n+       </p><p> \n+\t A high-performance, single pool allocator.  The reusable\n+\t memory is shared among identical instantiations of this type.\n+\t It calls through <code class=\"function\">::operator new</code> to\n+\t obtain new memory when its lists run out.  If a client\n+\t container requests a block larger than a certain threshold\n+\t size, then the pool is bypassed, and the allocate/deallocate\n+\t request is passed to <code class=\"function\">::operator new</code>\n+\t directly.\n+       </p><p> \n+\t Older versions of this class take a boolean template\n+\t parameter, called <code class=\"varname\">thr</code>, and an integer template\n+\t parameter, called <code class=\"varname\">inst</code>.\n+       </p><p>\n+\t The <code class=\"varname\">inst</code> number is used to track additional memory\n+      pools.  The point of the number is to allow multiple\n+      instantiations of the classes without changing the semantics at\n+      all.  All three of\n+       </p><pre class=\"programlisting\">\n+    typedef  __pool_alloc&lt;true,0&gt;    normal;\n+    typedef  __pool_alloc&lt;true,1&gt;    private;\n+    typedef  __pool_alloc&lt;true,42&gt;   also_private;\n+   </pre><p>\n+     behave exactly the same way.  However, the memory pool for each type\n+      (and remember that different instantiations result in different types)\n+      remains separate.\n+   </p><p>\n+     The library uses <span class=\"emphasis\"><em>0</em></span> in all its instantiations.  If you\n+      wish to keep separate free lists for a particular purpose, use a\n+      different number.\n+   </p><p>The <code class=\"varname\">thr</code> boolean determines whether the\n+   pool should be manipulated atomically or not.  When\n+   <code class=\"varname\">thr</code> = <code class=\"constant\">true</code>, the allocator\n+   is is threadsafe, while <code class=\"varname\">thr</code> =\n+   <code class=\"constant\">false</code>, and is slightly faster but unsafe for\n+   multiple threads.\n+   </p><p>\n+     For thread-enabled configurations, the pool is locked with a\n+     single big lock. In some situations, this implementation detail\n+     may result in severe performance degredation.\n+   </p><p>\n+     (Note that the GCC thread abstraction layer allows us to provide\n+     safe zero-overhead stubs for the threading routines, if threads\n+     were disabled at configuration time.)\n+   </p></li><li><p>\n+       <code class=\"classname\">__mt_alloc</code>\n+       </p><p>\n+\t A high-performance fixed-size allocator with\n+\t exponentially-increasing allocations. It has its own\n+\t documentation, found <a class=\"ulink\" href=\"../ext/mt_allocator.html\" target=\"_top\">here</a>.\n+       </p></li><li><p>\n+       <code class=\"classname\">bitmap_allocator</code>\n+       </p><p>\n+\t A high-performance allocator that uses a bit-map to keep track\n+\t of the used and unused memory locations. It has its own\n+\t documentation, found <a class=\"ulink\" href=\"../ext/ballocator_doc.html\" target=\"_top\">here</a>.\n+       </p></li></ol></div></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id413478\"></a><p><span class=\"title\"><i>\n+    ISO/IEC 14882:1998 Programming languages - C++  \n+    </i>. </span>\n+      isoc++_1998\n+    <span class=\"pagenums\">20.4 Memory. </span></p></div><div class=\"biblioentry\"><a id=\"id415484\"></a><p><span class=\"title\"><i>The Standard Librarian: What Are Allocators Good\n+    </i>. </span>\n+      austernm\n+    <span class=\"author\"><span class=\"firstname\">Matt</span> <span class=\"surname\">Austern</span>. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tC/C++ Users Journal\t\n+      . </span></span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.cuj.com/documents/s=8000/cujcexp1812austern/\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id398891\"></a><p><span class=\"title\"><i>The Hoard Memory Allocator</i>. </span>\n+      emeryb\n+    <span class=\"author\"><span class=\"firstname\">Emery</span> <span class=\"surname\">Berger</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.cs.umass.edu/~emery/hoard/\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id413375\"></a><p><span class=\"title\"><i>Reconsidering Custom Memory Allocation</i>. </span>\n+      bergerzorn\n+    <span class=\"author\"><span class=\"firstname\">Emery</span> <span class=\"surname\">Berger</span>. </span><span class=\"author\"><span class=\"firstname\">Ben</span> <span class=\"surname\">Zorn</span>. </span><span class=\"author\"><span class=\"firstname\">Kathryn</span> <span class=\"surname\">McKinley</span>. </span><span class=\"copyright\">Copyright \u00a9 2002 OOPSLA. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.cs.umass.edu/~emery/pubs/berger-oopsla2002.pdf\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id425682\"></a><p><span class=\"title\"><i>Allocator Types</i>. </span>\n+      kreftlanger\n+    <span class=\"author\"><span class=\"firstname\">Klaus</span> <span class=\"surname\">Kreft</span>. </span><span class=\"author\"><span class=\"firstname\">Angelika</span> <span class=\"surname\">Langer</span>. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tC/C++ Users Journal\t\n+      . </span></span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.langer.camelot.de/Articles/C++Report/Allocators/Allocators.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id420837\"></a><p><span class=\"title\"><i>The C++ Programming Language</i>. </span>\n+      tcpl\n+    <span class=\"author\"><span class=\"firstname\">Bjarne</span> <span class=\"surname\">Stroustrup</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 . </span><span class=\"pagenums\">19.4 Allocators. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id423539\"></a><p><span class=\"title\"><i>Yalloc: A Recycling C++ Allocator</i>. </span>\n+      yenf\n+    <span class=\"author\"><span class=\"firstname\">Felix</span> <span class=\"surname\">Yen</span>. </span><span class=\"copyright\">Copyright \u00a9  . </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://home.earthlink.net/~brimar/yalloc/\" target=\"_top\">\n+      </a>\n+    . </span></p></div></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt04ch10.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"utilities.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"auto_ptr.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a010.\u00a0Pairs\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0auto_ptr</td></tr></table></div></body></html>"}, {"sha": "7c316db57a612c814130c22c413bd5e0ab58090e", "filename": "libstdc++-v3/doc/html/manual/bk01pt04ch12.html", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch12.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch12.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt04ch12.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a012.\u00a0Traits</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"utilities.html\" title=\"Part\u00a0IV.\u00a0Utilities\" /><link rel=\"prev\" href=\"shared_ptr.html\" title=\"shared_ptr\" /><link rel=\"next\" href=\"strings.html\" title=\"Part\u00a0V.\u00a0Strings\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a012.\u00a0Traits</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"shared_ptr.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0IV.\u00a0Utilities</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"strings.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.util.traits\"></a>Chapter\u00a012.\u00a0Traits</h2></div></div></div><p>\n+  </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"shared_ptr.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"utilities.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"strings.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">shared_ptr\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0V.\u00a0Strings</td></tr></table></div></body></html>"}, {"sha": "bc03ae817d942523e9935e62574b7086beaae23e", "filename": "libstdc++-v3/doc/html/manual/bk01pt05ch13.html", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,89 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a013.\u00a0String Classes</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"strings.html\" title=\"Part\u00a0V.\u00a0Strings\" /><link rel=\"prev\" href=\"strings.html\" title=\"Part\u00a0V.\u00a0Strings\" /><link rel=\"next\" href=\"bk01pt05ch13s02.html\" title=\"Case Sensivitity\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a013.\u00a0String Classes</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"strings.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0V.\u00a0Strings</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.strings.string\"></a>Chapter\u00a013.\u00a0String Classes</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt05ch13.html#strings.string.simple\">Simple Transformations</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt05ch13s02.html\">Case Sensivitity</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt05ch13s03.html\">Arbitrary Character Types</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt05ch13s04.html\">Tokenizing</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt05ch13s05.html\">Shrink to Fit</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt05ch13s06.html\">CString (MFC)</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"strings.string.simple\"></a>Simple Transformations</h2></div></div></div><p>\n+      Here are Standard, simple, and portable ways to perform common\n+      transformations on a <code class=\"code\">string</code> instance, such as\n+      \"convert to all upper case.\" The word transformations\n+      is especially apt, because the standard template function\n+      <code class=\"code\">transform&lt;&gt;</code> is used.\n+   </p><p>\n+     This code will go through some iterations.  Here's a simiple\n+     version:\n+   </p><pre class=\"programlisting\">\n+   #include &lt;string&gt;\n+   #include &lt;algorithm&gt;\n+   #include &lt;cctype&gt;      // old &lt;ctype.h&gt;\n+\n+   struct ToLower\n+   {\n+     char operator() (char c) const  { return std::tolower(c); }\n+   };\n+\n+   struct ToUpper\n+   {\n+     char operator() (char c) const  { return std::toupper(c); }\n+   };\n+\n+   int main()\n+   {\n+     std::string  s (\"Some Kind Of Initial Input Goes Here\");\n+\n+     // Change everything into upper case\n+     std::transform (s.begin(), s.end(), s.begin(), ToUpper());\n+\n+     // Change everything into lower case\n+     std::transform (s.begin(), s.end(), s.begin(), ToLower());\n+\n+     // Change everything back into upper case, but store the\n+     // result in a different string\n+     std::string  capital_s;\n+     capital_s.resize(s.size());\n+     std::transform (s.begin(), s.end(), capital_s.begin(), ToUpper());\n+   } \n+   </pre><p>\n+     <span class=\"emphasis\"><em>Note</em></span> that these calls all\n+      involve the global C locale through the use of the C functions\n+      <code class=\"code\">toupper/tolower</code>.  This is absolutely guaranteed to work --\n+      but <span class=\"emphasis\"><em>only</em></span> if the string contains <span class=\"emphasis\"><em>only</em></span> characters\n+      from the basic source character set, and there are <span class=\"emphasis\"><em>only</em></span>\n+      96 of those.  Which means that not even all English text can be\n+      represented (certain British spellings, proper names, and so forth).\n+      So, if all your input forevermore consists of only those 96\n+      characters (hahahahahaha), then you're done.\n+   </p><p><span class=\"emphasis\"><em>Note</em></span> that the\n+      <code class=\"code\">ToUpper</code> and <code class=\"code\">ToLower</code> function objects\n+      are needed because <code class=\"code\">toupper</code> and <code class=\"code\">tolower</code>\n+      are overloaded names (declared in <code class=\"code\">&lt;cctype&gt;</code> and\n+      <code class=\"code\">&lt;locale&gt;</code>) so the template-arguments for\n+      <code class=\"code\">transform&lt;&gt;</code> cannot be deduced, as explained in\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-11/msg00180.html\" target=\"_top\">this\n+      message</a>.  \n+      \n+      At minimum, you can write short wrappers like\n+   </p><pre class=\"programlisting\">\n+   char toLower (char c)\n+   {\n+      return std::tolower(c);\n+   } </pre><p>The correct method is to use a facet for a particular locale\n+      and call its conversion functions.  These are discussed more in\n+      Chapter 22; the specific part is\n+      <a class=\"ulink\" href=\"../22_locale/howto.html#7\" target=\"_top\">Correct Transformations</a>,\n+      which shows the final version of this code.  (Thanks to James Kanze\n+      for assistance and suggestions on all of this.)\n+   </p><p>Another common operation is trimming off excess whitespace.  Much\n+      like transformations, this task is trivial with the use of string's\n+      <code class=\"code\">find</code> family.  These examples are broken into multiple\n+      statements for readability:\n+   </p><pre class=\"programlisting\">\n+   std::string  str (\" \\t blah blah blah    \\n \");\n+\n+   // trim leading whitespace\n+   string::size_type  notwhite = str.find_first_not_of(\" \\t\\n\");\n+   str.erase(0,notwhite);\n+\n+   // trim trailing whitespace\n+   notwhite = str.find_last_not_of(\" \\t\\n\"); \n+   str.erase(notwhite+1); </pre><p>Obviously, the calls to <code class=\"code\">find</code> could be inserted directly\n+      into the calls to <code class=\"code\">erase</code>, in case your compiler does not\n+      optimize named temporaries out of existence.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"strings.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"strings.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0V.\u00a0Strings\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Case Sensivitity</td></tr></table></div></body></html>"}, {"sha": "603721cd88d0dbf27a05fe5a296c62def9f5490b", "filename": "libstdc++-v3/doc/html/manual/bk01pt05ch13s02.html", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Case Sensivitity</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt05ch13.html\" title=\"Chapter\u00a013.\u00a0String Classes\" /><link rel=\"prev\" href=\"bk01pt05ch13.html\" title=\"Chapter\u00a013.\u00a0String Classes\" /><link rel=\"next\" href=\"bk01pt05ch13s03.html\" title=\"Arbitrary Character Types\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Case Sensivitity</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a013.\u00a0String Classes</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"strings.string.case\"></a>Case Sensivitity</h2></div></div></div><p>\n+    </p><p>The well-known-and-if-it-isn't-well-known-it-ought-to-be\n+      <a class=\"ulink\" href=\"http://www.gotw.ca/gotw/\" target=\"_top\">Guru of the Week</a>\n+      discussions held on Usenet covered this topic in January of 1998.\n+      Briefly, the challenge was, \u201c<span class=\"quote\">write a 'ci_string' class which\n+      is identical to the standard 'string' class, but is\n+      case-insensitive in the same way as the (common but nonstandard)\n+      C function stricmp()</span>\u201d.\n+   </p><pre class=\"programlisting\">\n+   ci_string s( \"AbCdE\" );\n+\n+   // case insensitive\n+   assert( s == \"abcde\" );\n+   assert( s == \"ABCDE\" );\n+\n+   // still case-preserving, of course\n+   assert( strcmp( s.c_str(), \"AbCdE\" ) == 0 );\n+   assert( strcmp( s.c_str(), \"abcde\" ) != 0 ); </pre><p>The solution is surprisingly easy.  The original answer was\n+   posted on Usenet, and a revised version appears in Herb Sutter's\n+   book <span class=\"emphasis\"><em>Exceptional C++</em></span> and on his website as <a class=\"ulink\" href=\"http://www.gotw.ca/gotw/029.htm\" target=\"_top\">GotW 29</a>.\n+   </p><p>See?  Told you it was easy!</p><p>\n+     <span class=\"emphasis\"><em>Added June 2000:</em></span> The May 2000 issue of C++\n+     Report contains a fascinating <a class=\"ulink\" href=\"http://lafstern.org/matt/col2_new.pdf\" target=\"_top\"> article</a> by\n+     Matt Austern (yes, <span class=\"emphasis\"><em>the</em></span> Matt Austern) on why\n+     case-insensitive comparisons are not as easy as they seem, and\n+     why creating a class is the <span class=\"emphasis\"><em>wrong</em></span> way to go\n+     about it in production code.  (The GotW answer mentions one of\n+     the principle difficulties; his article mentions more.)\n+   </p><p>Basically, this is \"easy\" only if you ignore some things,\n+      things which may be too important to your program to ignore.  (I chose\n+      to ignore them when originally writing this entry, and am surprised\n+      that nobody ever called me on it...)  The GotW question and answer\n+      remain useful instructional tools, however.\n+   </p><p><span class=\"emphasis\"><em>Added September 2000:</em></span>  James Kanze provided a link to a\n+      <a class=\"ulink\" href=\"http://www.unicode.org/unicode/reports/tr21/\" target=\"_top\">Unicode\n+      Technical Report discussing case handling</a>, which provides some\n+      very good information.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt05ch13.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a013.\u00a0String Classes\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Arbitrary Character Types</td></tr></table></div></body></html>"}, {"sha": "c321667a729a7bf4505a293d8c65ee334f9a136e", "filename": "libstdc++-v3/doc/html/manual/bk01pt05ch13s03.html", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Arbitrary Character Types</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt05ch13.html\" title=\"Chapter\u00a013.\u00a0String Classes\" /><link rel=\"prev\" href=\"bk01pt05ch13s02.html\" title=\"Case Sensivitity\" /><link rel=\"next\" href=\"bk01pt05ch13s04.html\" title=\"Tokenizing\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Arbitrary Character Types</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a013.\u00a0String Classes</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s04.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"strings.string.character_types\"></a>Arbitrary Character Types</h2></div></div></div><p>\n+    </p><p>The <code class=\"code\">std::basic_string</code> is tantalizingly general, in that\n+      it is parameterized on the type of the characters which it holds.\n+      In theory, you could whip up a Unicode character class and instantiate\n+      <code class=\"code\">std::basic_string&lt;my_unicode_char&gt;</code>, or assuming\n+      that integers are wider than characters on your platform, maybe just\n+      declare variables of type <code class=\"code\">std::basic_string&lt;int&gt;</code>.\n+   </p><p>That's the theory.  Remember however that basic_string has additional\n+      type parameters, which take default arguments based on the character\n+      type (called <code class=\"code\">CharT</code> here):\n+   </p><pre class=\"programlisting\">\n+      template &lt;typename CharT,\n+                typename Traits = char_traits&lt;CharT&gt;,\n+                typename Alloc = allocator&lt;CharT&gt; &gt;\n+      class basic_string { .... };</pre><p>Now, <code class=\"code\">allocator&lt;CharT&gt;</code> will probably Do The Right\n+      Thing by default, unless you need to implement your own allocator\n+      for your characters.\n+   </p><p>But <code class=\"code\">char_traits</code> takes more work.  The char_traits\n+      template is <span class=\"emphasis\"><em>declared</em></span> but not <span class=\"emphasis\"><em>defined</em></span>.\n+      That means there is only\n+   </p><pre class=\"programlisting\">\n+      template &lt;typename CharT&gt;\n+        struct char_traits\n+        {\n+            static void foo (type1 x, type2 y);\n+            ...\n+        };</pre><p>and functions such as char_traits&lt;CharT&gt;::foo() are not\n+      actually defined anywhere for the general case.  The C++ standard\n+      permits this, because writing such a definition to fit all possible\n+      CharT's cannot be done.\n+   </p><p>The C++ standard also requires that char_traits be specialized for\n+      instantiations of <code class=\"code\">char</code> and <code class=\"code\">wchar_t</code>, and it\n+      is these template specializations that permit entities like\n+      <code class=\"code\">basic_string&lt;char,char_traits&lt;char&gt;&gt;</code> to work.\n+   </p><p>If you want to use character types other than char and wchar_t,\n+      such as <code class=\"code\">unsigned char</code> and <code class=\"code\">int</code>, you will\n+      need suitable specializations for them.  For a time, in earlier\n+      versions of GCC, there was a mostly-correct implementation that\n+      let programmers be lazy but it broke under many situations, so it\n+      was removed.  GCC 3.4 introduced a new implementation that mostly\n+      works and can be specialized even for <code class=\"code\">int</code> and other\n+      built-in types.\n+   </p><p>If you want to use your own special character class, then you have\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00163.html\" target=\"_top\">a lot\n+      of work to do</a>, especially if you with to use i18n features\n+      (facets require traits information but don't have a traits argument).\n+   </p><p>Another example of how to specialize char_traits was given <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\" target=\"_top\">on the\n+      mailing list</a> and at a later date was put into the file <code class=\"code\">\n+      include/ext/pod_char_traits.h</code>.  We agree\n+      that the way it's used with basic_string (scroll down to main())\n+      doesn't look nice, but that's because <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00236.html\" target=\"_top\">the\n+      nice-looking first attempt</a> turned out to <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00242.html\" target=\"_top\">not\n+      be conforming C++</a>, due to the rule that CharT must be a POD.\n+      (See how tricky this is?)\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt05ch13.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s04.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Case Sensivitity\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Tokenizing</td></tr></table></div></body></html>"}, {"sha": "971887c86f6530716ffddb7a65649cb82b5406e9", "filename": "libstdc++-v3/doc/html/manual/bk01pt05ch13s04.html", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s04.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s04.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s04.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Tokenizing</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt05ch13.html\" title=\"Chapter\u00a013.\u00a0String Classes\" /><link rel=\"prev\" href=\"bk01pt05ch13s03.html\" title=\"Arbitrary Character Types\" /><link rel=\"next\" href=\"bk01pt05ch13s05.html\" title=\"Shrink to Fit\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Tokenizing</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a013.\u00a0String Classes</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s05.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"strings.string.token\"></a>Tokenizing</h2></div></div></div><p>\n+    </p><p>The Standard C (and C++) function <code class=\"code\">strtok()</code> leaves a lot to\n+      be desired in terms of user-friendliness.  It's unintuitive, it\n+      destroys the character string on which it operates, and it requires\n+      you to handle all the memory problems.  But it does let the client\n+      code decide what to use to break the string into pieces; it allows\n+      you to choose the \"whitespace,\" so to speak.\n+   </p><p>A C++ implementation lets us keep the good things and fix those\n+      annoyances.  The implementation here is more intuitive (you only\n+      call it once, not in a loop with varying argument), it does not\n+      affect the original string at all, and all the memory allocation\n+      is handled for you.\n+   </p><p>It's called stringtok, and it's a template function. Sources are\n+   as below, in a less-portable form than it could be, to keep this\n+   example simple (for example, see the comments on what kind of\n+   string it will accept).\n+   </p><pre class=\"programlisting\">\n+#include &lt;string&gt;\n+template &lt;typename Container&gt;\n+void\n+stringtok(Container &amp;container, string const &amp;in,\n+          const char * const delimiters = \" \\t\\n\")\n+{\n+    const string::size_type len = in.length();\n+          string::size_type i = 0;\n+\n+    while (i &lt; len)\n+    {\n+        // Eat leading whitespace\n+        i = in.find_first_not_of(delimiters, i);\n+        if (i == string::npos)\n+\t  return;   // Nothing left but white space\n+\n+        // Find the end of the token\n+        string::size_type j = in.find_first_of(delimiters, i);\n+\n+        // Push token\n+        if (j == string::npos) \n+\t{\n+\t  container.push_back(in.substr(i));\n+\t  return;\n+        } \n+\telse\n+\t  container.push_back(in.substr(i, j-i));\n+\n+        // Set up for next loop\n+        i = j + 1;\n+    }\n+}\n+</pre><p>\n+     The author uses a more general (but less readable) form of it for\n+     parsing command strings and the like.  If you compiled and ran this\n+     code using it:\n+   </p><pre class=\"programlisting\">\n+   std::list&lt;string&gt;  ls;\n+   stringtok (ls, \" this  \\t is\\t\\n  a test  \");\n+   for (std::list&lt;string&gt;const_iterator i = ls.begin();\n+        i != ls.end(); ++i)\n+   {\n+       std::cerr &lt;&lt; ':' &lt;&lt; (*i) &lt;&lt; \":\\n\";\n+   } </pre><p>You would see this as output:\n+   </p><pre class=\"programlisting\">\n+   :this:\n+   :is:\n+   :a:\n+   :test: </pre><p>with all the whitespace removed.  The original <code class=\"code\">s</code> is still\n+      available for use, <code class=\"code\">ls</code> will clean up after itself, and\n+      <code class=\"code\">ls.size()</code> will return how many tokens there were.\n+   </p><p>As always, there is a price paid here, in that stringtok is not\n+      as fast as strtok.  The other benefits usually outweigh that, however.\n+      <a class=\"ulink\" href=\"stringtok_std_h.txt\" target=\"_top\">Another version of stringtok is given\n+      here</a>, suggested by Chris King and tweaked by Petr Prikryl,\n+      and this one uses the\n+      transformation functions mentioned below.  If you are comfortable\n+      with reading the new function names, this version is recommended\n+      as an example.\n+   </p><p><span class=\"emphasis\"><em>Added February 2001:</em></span>  Mark Wilden pointed out that the\n+      standard <code class=\"code\">std::getline()</code> function can be used with standard\n+      <a class=\"ulink\" href=\"../27_io/howto.html\" target=\"_top\">istringstreams</a> to perform\n+      tokenizing as well.  Build an istringstream from the input text,\n+      and then use std::getline with varying delimiters (the three-argument\n+      signature) to extract tokens into a string.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt05ch13.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s05.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Arbitrary Character Types\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Shrink to Fit</td></tr></table></div></body></html>"}, {"sha": "b5ee55ddbb25ab0432507807a2fd969a30637654", "filename": "libstdc++-v3/doc/html/manual/bk01pt05ch13s05.html", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s05.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s05.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s05.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Shrink to Fit</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt05ch13.html\" title=\"Chapter\u00a013.\u00a0String Classes\" /><link rel=\"prev\" href=\"bk01pt05ch13s04.html\" title=\"Tokenizing\" /><link rel=\"next\" href=\"bk01pt05ch13s06.html\" title=\"CString (MFC)\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Shrink to Fit</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s04.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a013.\u00a0String Classes</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s06.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"strings.string.shrink\"></a>Shrink to Fit</h2></div></div></div><p>\n+    </p><p>From GCC 3.4 calling <code class=\"code\">s.reserve(res)</code> on a\n+      <code class=\"code\">string s</code> with <code class=\"code\">res &lt; s.capacity()</code> will\n+      reduce the string's capacity to <code class=\"code\">std::max(s.size(), res)</code>.\n+   </p><p>This behaviour is suggested, but not required by the standard. Prior\n+      to GCC 3.4 the following alternative can be used instead\n+   </p><pre class=\"programlisting\">\n+      std::string(str.data(), str.size()).swap(str);\n+   </pre><p>This is similar to the idiom for reducing a <code class=\"code\">vector</code>'s\n+      memory usage (see <a class=\"ulink\" href=\"../faq/index.html#5_9\" target=\"_top\">FAQ 5.9</a>) but\n+      the regular copy constructor cannot be used because libstdc++'s\n+      <code class=\"code\">string</code> is Copy-On-Write.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s04.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt05ch13.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt05ch13s06.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Tokenizing\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0CString (MFC)</td></tr></table></div></body></html>"}, {"sha": "4725e2c012cb2fdd62bee619989a7747945491d2", "filename": "libstdc++-v3/doc/html/manual/bk01pt05ch13s06.html", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s06.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s06.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt05ch13s06.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,91 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>CString (MFC)</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt05ch13.html\" title=\"Chapter\u00a013.\u00a0String Classes\" /><link rel=\"prev\" href=\"bk01pt05ch13s05.html\" title=\"Shrink to Fit\" /><link rel=\"next\" href=\"localization.html\" title=\"Part\u00a0VI.\u00a0Localization\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">CString (MFC)</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s05.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a013.\u00a0String Classes</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"localization.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"strings.string.Cstring\"></a>CString (MFC)</h2></div></div></div><p>\n+    </p><p>A common lament seen in various newsgroups deals with the Standard\n+      string class as opposed to the Microsoft Foundation Class called\n+      CString.  Often programmers realize that a standard portable\n+      answer is better than a proprietary nonportable one, but in porting\n+      their application from a Win32 platform, they discover that they\n+      are relying on special functions offered by the CString class.\n+   </p><p>Things are not as bad as they seem.  In\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/gcc/1999-04n/msg00236.html\" target=\"_top\">this\n+      message</a>, Joe Buck points out a few very important things:\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>The Standard <code class=\"code\">string</code> supports all the operations\n+             that CString does, with three exceptions.\n+         </p></li><li><p>Two of those exceptions (whitespace trimming and case \n+             conversion) are trivial to implement.  In fact, we do so\n+             on this page.\n+         </p></li><li><p>The third is <code class=\"code\">CString::Format</code>, which allows formatting\n+             in the style of <code class=\"code\">sprintf</code>.  This deserves some mention:\n+         </p></li></ul></div><p>\n+      The old libg++ library had a function called form(), which did much\n+      the same thing.  But for a Standard solution, you should use the\n+      stringstream classes.  These are the bridge between the iostream\n+      hierarchy and the string class, and they operate with regular\n+      streams seamlessly because they inherit from the iostream\n+      hierarchy.  An quick example:\n+   </p><pre class=\"programlisting\">\n+   #include &lt;iostream&gt;\n+   #include &lt;string&gt;\n+   #include &lt;sstream&gt;\n+\n+   string f (string&amp; incoming)     // incoming is \"foo  N\"\n+   {\n+       istringstream   incoming_stream(incoming);\n+       string          the_word;\n+       int             the_number;\n+\n+       incoming_stream &gt;&gt; the_word        // extract \"foo\"\n+                       &gt;&gt; the_number;     // extract N\n+\n+       ostringstream   output_stream;\n+       output_stream &lt;&lt; \"The word was \" &lt;&lt; the_word\n+                     &lt;&lt; \" and 3*N was \" &lt;&lt; (3*the_number);\n+\n+       return output_stream.str();\n+   } </pre><p>A serious problem with CString is a design bug in its memory\n+      allocation.  Specifically, quoting from that same message:\n+   </p><pre class=\"programlisting\">\n+   CString suffers from a common programming error that results in\n+   poor performance.  Consider the following code:\n+   \n+   CString n_copies_of (const CString&amp; foo, unsigned n)\n+   {\n+           CString tmp;\n+           for (unsigned i = 0; i &lt; n; i++)\n+                   tmp += foo;\n+           return tmp;\n+   }\n+   \n+   This function is O(n^2), not O(n).  The reason is that each +=\n+   causes a reallocation and copy of the existing string.  Microsoft\n+   applications are full of this kind of thing (quadratic performance\n+   on tasks that can be done in linear time) -- on the other hand,\n+   we should be thankful, as it's created such a big market for high-end\n+   ix86 hardware. :-)\n+   \n+   If you replace CString with string in the above function, the\n+   performance is O(n).\n+   </pre><p>Joe Buck also pointed out some other things to keep in mind when\n+      comparing CString and the Standard string class:\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>CString permits access to its internal representation; coders\n+             who exploited that may have problems moving to <code class=\"code\">string</code>.\n+         </p></li><li><p>Microsoft ships the source to CString (in the files\n+             MFC\\SRC\\Str{core,ex}.cpp), so you could fix the allocation\n+             bug and rebuild your MFC libraries.\n+             <span class=\"emphasis\"><em><span class=\"emphasis\"><em>Note:</em></span> It looks like the CString shipped\n+             with VC++6.0 has fixed this, although it may in fact have been\n+             one of the VC++ SPs that did it.</em></span>\n+         </p></li><li><p><code class=\"code\">string</code> operations like this have O(n) complexity\n+             <span class=\"emphasis\"><em>if the implementors do it correctly</em></span>.  The libstdc++\n+             implementors did it correctly.  Other vendors might not.\n+         </p></li><li><p>While parts of the SGI STL are used in libstdc++, their\n+             string class is not.  The SGI <code class=\"code\">string</code> is essentially\n+             <code class=\"code\">vector&lt;char&gt;</code> and does not do any reference\n+             counting like libstdc++'s does.  (It is O(n), though.)\n+             So if you're thinking about SGI's string or rope classes,\n+             you're now looking at four possibilities:  CString, the\n+             libstdc++ string, the SGI string, and the SGI rope, and this\n+             is all before any allocator or traits customizations!  (More\n+             choices than you can shake a stick at -- want fries with that?)\n+         </p></li></ul></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s05.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt05ch13.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"localization.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Shrink to Fit\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0VI.\u00a0Localization</td></tr></table></div></body></html>"}, {"sha": "7b98960a0a05e12828ddf8a2c08594743ad30d31", "filename": "libstdc++-v3/doc/html/manual/bk01pt06ch14.html", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt06ch14.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt06ch14.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt06ch14.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,422 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a014.\u00a0Locales</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"localization.html\" title=\"Part\u00a0VI.\u00a0Localization\" /><link rel=\"prev\" href=\"localization.html\" title=\"Part\u00a0VI.\u00a0Localization\" /><link rel=\"next\" href=\"bk01pt06ch15.html\" title=\"Chapter\u00a015.\u00a0Facets aka Categories\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a014.\u00a0Locales</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"localization.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0VI.\u00a0Localization</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt06ch15.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.localization.locales\"></a>Chapter\u00a014.\u00a0Locales</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt06ch14.html#manual.localization.locales.locale\">locale</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.future\">Future</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.localization.locales.locale\"></a>locale</h2></div></div></div><p>\n+Describes the basic locale object, including nested\n+classes id, facet, and the reference-counted implementation object,\n+class _Impl.\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"locales.locale.req\"></a>Requirements</h3></div></div></div><p>\n+Class locale is non-templatized and has two distinct types nested\n+inside of it:\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+class facet\n+22.1.1.1.2 Class locale::facet\n+</em></span>\n+</p></blockquote></div><p>\n+Facets actually implement locale functionality. For instance, a facet\n+called numpunct is the data objects that can be used to query for the\n+thousands separator is in the German locale.\n+</p><p>\n+Literally, a facet is strictly defined:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+      Dontaining the following public data member:\n+    </p><p>\n+      <code class=\"code\">static locale::id id;</code>\n+    </p></li><li><p>\n+      Derived from another facet:\n+    </p><p>\n+      <code class=\"code\">class gnu_codecvt: public std::ctype&lt;user-defined-type&gt;</code>\n+    </p></li></ul></div><p>\n+Of interest in this class are the memory management options explicitly\n+specified as an argument to facet's constructor. Each constructor of a\n+facet class takes a std::size_t __refs argument: if __refs == 0, the\n+facet is deleted when the locale containing it is destroyed. If __refs\n+== 1, the facet is not destroyed, even when it is no longer\n+referenced.\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+class id\n+22.1.1.1.3 - Class locale::id\n+</em></span>\n+</p></blockquote></div><p>\n+Provides an index for looking up specific facets.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"locales.locale.design\"></a>Design</h3></div></div></div><p>\n+The major design challenge is fitting an object-orientated and\n+non-global locale design ontop of POSIX and other relevant stanards,\n+which include the Single Unix (nee X/Open.)\n+</p><p>\n+Because C and earlier versions of POSIX falls down so completely,\n+portibility is an issue.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"locales.locale.impl\"></a>Implementation</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"locale.impl.c\"></a>Interacting with \"C\" locales</h4></div></div></div><div class=\"itemizedlist\"><ul type=\"disc\"><li><p> \n+       <code class=\"code\">`locale -a`</code> displays available locales. \n+     </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><pre class=\"programlisting\">\n+af_ZA\n+ar_AE\n+ar_AE.utf8\n+ar_BH\n+ar_BH.utf8\n+ar_DZ\n+ar_DZ.utf8\n+ar_EG\n+ar_EG.utf8\n+ar_IN\n+ar_IQ\n+ar_IQ.utf8\n+ar_JO\n+ar_JO.utf8\n+ar_KW\n+ar_KW.utf8\n+ar_LB\n+ar_LB.utf8\n+ar_LY\n+ar_LY.utf8\n+ar_MA\n+ar_MA.utf8\n+ar_OM\n+ar_OM.utf8\n+ar_QA\n+ar_QA.utf8\n+ar_SA\n+ar_SA.utf8\n+ar_SD\n+ar_SD.utf8\n+ar_SY\n+ar_SY.utf8\n+ar_TN\n+ar_TN.utf8\n+ar_YE\n+ar_YE.utf8\n+be_BY\n+be_BY.utf8\n+bg_BG\n+bg_BG.utf8\n+br_FR\n+bs_BA\n+C\n+ca_ES\n+ca_ES@euro\n+ca_ES.utf8\n+ca_ES.utf8@euro\n+cs_CZ\n+cs_CZ.utf8\n+cy_GB\n+da_DK\n+da_DK.iso885915\n+da_DK.utf8\n+de_AT\n+de_AT@euro\n+de_AT.utf8\n+de_AT.utf8@euro\n+de_BE\n+de_BE@euro\n+de_BE.utf8\n+de_BE.utf8@euro\n+de_CH\n+de_CH.utf8\n+de_DE\n+de_DE@euro\n+de_DE.utf8\n+de_DE.utf8@euro\n+de_LU\n+de_LU@euro\n+de_LU.utf8\n+de_LU.utf8@euro\n+el_GR\n+el_GR.utf8\n+en_AU\n+en_AU.utf8\n+en_BW\n+en_BW.utf8\n+en_CA\n+en_CA.utf8\n+en_DK\n+en_DK.utf8\n+en_GB\n+en_GB.iso885915\n+en_GB.utf8\n+en_HK\n+en_HK.utf8\n+en_IE\n+en_IE@euro\n+en_IE.utf8\n+en_IE.utf8@euro\n+en_IN\n+en_NZ\n+en_NZ.utf8\n+en_PH\n+en_PH.utf8\n+en_SG\n+en_SG.utf8\n+en_US\n+en_US.iso885915\n+en_US.utf8\n+en_ZA\n+en_ZA.utf8\n+en_ZW\n+en_ZW.utf8\n+es_AR\n+es_AR.utf8\n+es_BO\n+es_BO.utf8\n+es_CL\n+es_CL.utf8\n+es_CO\n+es_CO.utf8\n+es_CR\n+es_CR.utf8\n+es_DO\n+es_DO.utf8\n+es_EC\n+es_EC.utf8\n+es_ES\n+es_ES@euro\n+es_ES.utf8\n+es_ES.utf8@euro\n+es_GT\n+es_GT.utf8\n+es_HN\n+es_HN.utf8\n+es_MX\n+es_MX.utf8\n+es_NI\n+es_NI.utf8\n+es_PA\n+es_PA.utf8\n+es_PE\n+es_PE.utf8\n+es_PR\n+es_PR.utf8\n+es_PY\n+es_PY.utf8\n+es_SV\n+es_SV.utf8\n+es_US\n+es_US.utf8\n+es_UY\n+es_UY.utf8\n+es_VE\n+es_VE.utf8\n+et_EE\n+et_EE.utf8\n+eu_ES\n+eu_ES@euro\n+eu_ES.utf8\n+eu_ES.utf8@euro\n+fa_IR\n+fi_FI\n+fi_FI@euro\n+fi_FI.utf8\n+fi_FI.utf8@euro\n+fo_FO\n+fo_FO.utf8\n+fr_BE\n+fr_BE@euro\n+fr_BE.utf8\n+fr_BE.utf8@euro\n+fr_CA\n+fr_CA.utf8\n+fr_CH\n+fr_CH.utf8\n+fr_FR\n+fr_FR@euro\n+fr_FR.utf8\n+fr_FR.utf8@euro\n+fr_LU\n+fr_LU@euro\n+fr_LU.utf8\n+fr_LU.utf8@euro\n+ga_IE\n+ga_IE@euro\n+ga_IE.utf8\n+ga_IE.utf8@euro\n+gl_ES\n+gl_ES@euro\n+gl_ES.utf8\n+gl_ES.utf8@euro\n+gv_GB\n+gv_GB.utf8\n+he_IL\n+he_IL.utf8\n+hi_IN\n+hr_HR\n+hr_HR.utf8\n+hu_HU\n+hu_HU.utf8\n+id_ID\n+id_ID.utf8\n+is_IS\n+is_IS.utf8\n+it_CH\n+it_CH.utf8\n+it_IT\n+it_IT@euro\n+it_IT.utf8\n+it_IT.utf8@euro\n+iw_IL\n+iw_IL.utf8\n+ja_JP.eucjp\n+ja_JP.utf8\n+ka_GE\n+kl_GL\n+kl_GL.utf8\n+ko_KR.euckr\n+ko_KR.utf8\n+kw_GB\n+kw_GB.utf8\n+lt_LT\n+lt_LT.utf8\n+lv_LV\n+lv_LV.utf8\n+mi_NZ\n+mk_MK\n+mk_MK.utf8\n+mr_IN\n+ms_MY\n+ms_MY.utf8\n+mt_MT\n+mt_MT.utf8\n+nl_BE\n+nl_BE@euro\n+nl_BE.utf8\n+nl_BE.utf8@euro\n+nl_NL\n+nl_NL@euro\n+nl_NL.utf8\n+nl_NL.utf8@euro\n+nn_NO\n+nn_NO.utf8\n+no_NO\n+no_NO.utf8\n+oc_FR\n+pl_PL\n+pl_PL.utf8\n+POSIX\n+pt_BR\n+pt_BR.utf8\n+pt_PT\n+pt_PT@euro\n+pt_PT.utf8\n+pt_PT.utf8@euro\n+ro_RO\n+ro_RO.utf8\n+ru_RU\n+ru_RU.koi8r\n+ru_RU.utf8\n+ru_UA\n+ru_UA.utf8\n+se_NO\n+sk_SK\n+sk_SK.utf8\n+sl_SI\n+sl_SI.utf8\n+sq_AL\n+sq_AL.utf8\n+sr_YU\n+sr_YU@cyrillic\n+sr_YU.utf8\n+sr_YU.utf8@cyrillic\n+sv_FI\n+sv_FI@euro\n+sv_FI.utf8\n+sv_FI.utf8@euro\n+sv_SE\n+sv_SE.iso885915\n+sv_SE.utf8\n+ta_IN\n+te_IN\n+tg_TJ\n+th_TH\n+th_TH.utf8\n+tl_PH\n+tr_TR\n+tr_TR.utf8\n+uk_UA\n+uk_UA.utf8\n+ur_PK\n+uz_UZ\n+vi_VN\n+vi_VN.tcvn\n+wa_BE\n+wa_BE@euro\n+yi_US\n+zh_CN\n+zh_CN.gb18030\n+zh_CN.gbk\n+zh_CN.utf8\n+zh_HK\n+zh_HK.utf8\n+zh_TW\n+zh_TW.euctw\n+zh_TW.utf8\n+</pre></blockquote></div></li><li><p> \n+       <code class=\"code\">`locale`</code> displays environmental variables that\n+       impact how locale(\"\") will be deduced.\n+     </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><pre class=\"programlisting\">\n+LANG=en_US\n+LC_CTYPE=\"en_US\"\n+LC_NUMERIC=\"en_US\"\n+LC_TIME=\"en_US\"\n+LC_COLLATE=\"en_US\"\n+LC_MONETARY=\"en_US\"\n+LC_MESSAGES=\"en_US\"\n+LC_PAPER=\"en_US\"\n+LC_NAME=\"en_US\"\n+LC_ADDRESS=\"en_US\"\n+LC_TELEPHONE=\"en_US\"\n+LC_MEASUREMENT=\"en_US\"\n+LC_IDENTIFICATION=\"en_US\"\n+LC_ALL=\n+</pre></blockquote></div></li></ul></div><p>\n+From Josuttis, p. 697-698, which says, that \"there is only *one*\n+relation (of the C++ locale mechanism) to the C locale mechanism: the\n+global C locale is modified if a named C++ locale object is set as the\n+global locale\" (emphasis Paolo), that is:\n+</p><pre class=\"programlisting\">std::locale::global(std::locale(\"\"));</pre><p>affects the C functions as if the following call was made:</p><pre class=\"programlisting\">std::setlocale(LC_ALL, \"\");</pre><p>\n+  On the other hand, there is *no* viceversa, that is, calling\n+  setlocale has *no* whatsoever on the C++ locale mechanism, in\n+  particular on the working of locale(\"\"), which constructs the locale\n+  object from the environment of the running program, that is, in\n+  practice, the set of LC_ALL, LANG, etc. variable of the shell.\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"locales.locale.future\"></a>Future</h3></div></div></div><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+       Locale initialization: at what point does _S_classic, _S_global\n+       get initialized? Can named locales assume this initialization\n+       has already taken place? \n+     </p></li><li><p> \n+       Document how named locales error check when filling data\n+       members. Ie, a fr_FR locale that doesn't have\n+       numpunct::truename(): does it use \"true\"? Or is it a blank\n+       string? What's the convention? \n+   </p></li><li><p> \n+       Explain how locale aliasing happens. When does \"de_DE\" use \"de\"\n+       information? What is the rule for locales composed of just an\n+       ISO language code (say, \"de\") and locales with both an ISO\n+       language code and ISO country code (say, \"de_DE\"). \n+     </p></li><li><p> \n+       What should non-required facet instantiations do?  If the\n+       generic implemenation is provided, then how to end-users\n+       provide specializations? \n+   </p></li></ul></div></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"locales.locale.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id389722\"></a><p><span class=\"title\"><i>\n+      The GNU C Library\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Roland</span> <span class=\"surname\">McGrath</span>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2007 FSF. </span><span class=\"pagenums\">Chapters 6 Character Set Handling and 7 Locales and Internationalization. </span></p></div><div class=\"biblioentry\"><a id=\"id418042\"></a><p><span class=\"title\"><i>\n+      Correspondence\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2002 . </span></p></div><div class=\"biblioentry\"><a id=\"id495535\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1998 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id434429\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id434447\"></a><p><span class=\"title\"><i>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 \n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.opennc.org/austin/docreg.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id415318\"></a><p><span class=\"title\"><i>\n+      The C++ Programming Language, Special Edition\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Bjarne</span> <span class=\"surname\">Stroustrup</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley, Inc.. </span><span class=\"pagenums\">Appendix D. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id424745\"></a><p><span class=\"title\"><i>\n+      Standard C++ IOStreams and Locales\n+    </i>. </span><span class=\"subtitle\">\n+      Advanced Programmer's Guide and Reference\n+    . </span><span class=\"author\"><span class=\"firstname\">Angelika</span> <span class=\"surname\">Langer</span>. </span><span class=\"author\"><span class=\"firstname\">Klaus</span> <span class=\"surname\">Kreft</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley Longman, Inc.. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley Longman\n+      . </span></span></p></div></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"localization.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"localization.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt06ch15.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0VI.\u00a0Localization\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a015.\u00a0Facets aka Categories</td></tr></table></div></body></html>"}, {"sha": "2a3811806a7c02dc03c0c201dc76e5a471614129", "filename": "libstdc++-v3/doc/html/manual/bk01pt06ch15.html", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt06ch15.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt06ch15.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt06ch15.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a015.\u00a0Facets aka Categories</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"localization.html\" title=\"Part\u00a0VI.\u00a0Localization\" /><link rel=\"prev\" href=\"bk01pt06ch14.html\" title=\"Chapter\u00a014.\u00a0Locales\" /><link rel=\"next\" href=\"codecvt.html\" title=\"codecvt\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a015.\u00a0Facets aka Categories</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt06ch14.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0VI.\u00a0Localization</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"codecvt.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.localization.facet\"></a>Chapter\u00a015.\u00a0Facets aka Categories</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt06ch15.html#manual.localization.facet.ctype\">ctype</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt06ch15.html#facet.ctype.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch15.html#facet.ctype.future\">Future</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"codecvt.html\">codecvt</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.use\">Use</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.future\">Future</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"messages.html\">messages</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.use\">Use</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.future\">Future</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.localization.facet.ctype\"></a>ctype</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.ctype.impl\"></a>Implementation</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"id424267\"></a>Specializations</h4></div></div></div><p>\n+For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n+conversions are made between the internal character set (always UCS4\n+on GNU/Linux) and whatever the currently selected locale for the\n+LC_CTYPE category implements.\n+</p><p>\n+The two required specializations are implemented as follows:\n+</p><p>\n+<code class=\"code\">\n+ctype&lt;char&gt;\n+</code>\n+</p><p>\n+This is simple specialization. Implementing this was a piece of cake.\n+</p><p>\n+<code class=\"code\">\n+ctype&lt;wchar_t&gt;\n+</code>\n+</p><p>\n+This specialization, by specifying all the template parameters, pretty\n+much ties the hands of implementors. As such, the implementation is\n+straightforward, involving mcsrtombs for the conversions between char\n+to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+</p><p>\n+Neither of these two required specializations deals with Unicode\n+characters.\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.ctype.future\"></a>Future</h3></div></div></div><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+   How to deal with the global locale issue? \n+   </p></li><li><p> \n+   How to deal with different types than char, wchar_t? </p></li><li><p>\n+   Overlap between codecvt/ctype: narrow/widen \n+   </p></li><li><p> \n+       Mask typedef in codecvt_base, argument types in codecvt.  what\n+       is know about this type? \n+   </p></li><li><p> \n+   Why mask* argument in codecvt?\n+   </p></li><li><p>\n+       Can this be made (more) generic? is there a simple way to\n+       straighten out the configure-time mess that is a by-product of\n+       this class?  \n+   </p></li><li><p> \n+       Get the ctype&lt;wchar_t&gt;::mask stuff under control. Need to\n+       make some kind of static table, and not do lookup evertime\n+       somebody hits the do_is... functions. Too bad we can't just\n+       redefine mask for ctype&lt;wchar_t&gt; \n+   </p></li><li><p> \n+       Rename abstract base class. See if just smash-overriding is a\n+       better approach. Clarify, add sanity to naming.\n+     </p></li></ul></div></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.ctype.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id428438\"></a><p><span class=\"title\"><i>\n+      The GNU C Library\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Roland</span> <span class=\"surname\">McGrath</span>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2007 FSF. </span><span class=\"pagenums\">Chapters 6  Character Set Handling and 7 Locales and Internationalization. </span></p></div><div class=\"biblioentry\"><a id=\"id406217\"></a><p><span class=\"title\"><i>\n+      Correspondence\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2002 . </span></p></div><div class=\"biblioentry\"><a id=\"id406246\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1998 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id424106\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id424124\"></a><p><span class=\"title\"><i>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 \n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.opennc.org/austin/docreg.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id483804\"></a><p><span class=\"title\"><i>\n+      The C++ Programming Language, Special Edition\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Bjarne</span> <span class=\"surname\">Stroustrup</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley, Inc.. </span><span class=\"pagenums\">Appendix D. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id428016\"></a><p><span class=\"title\"><i>\n+      Standard C++ IOStreams and Locales\n+    </i>. </span><span class=\"subtitle\">\n+      Advanced Programmer's Guide and Reference\n+    . </span><span class=\"author\"><span class=\"firstname\">Angelika</span> <span class=\"surname\">Langer</span>. </span><span class=\"author\"><span class=\"firstname\">Klaus</span> <span class=\"surname\">Kreft</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley Longman, Inc.. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley Longman\n+      . </span></span></p></div></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt06ch14.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"localization.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"codecvt.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a014.\u00a0Locales\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0codecvt</td></tr></table></div></body></html>"}, {"sha": "a2bdffffd31bd41fee24f2536798adb7ef04813d", "filename": "libstdc++-v3/doc/html/manual/bk01pt07ch16.html", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch16.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch16.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch16.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a016.\u00a0Sequences</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"containers.html\" title=\"Part\u00a0VII.\u00a0Containers\" /><link rel=\"prev\" href=\"containers.html\" title=\"Part\u00a0VII.\u00a0Containers\" /><link rel=\"next\" href=\"bk01pt07ch16s02.html\" title=\"vector\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a016.\u00a0Sequences</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"containers.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0VII.\u00a0Containers</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch16s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.containers.sequences\"></a>Chapter\u00a016.\u00a0Sequences</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt07ch16.html#containers.sequences.list\">list</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt07ch16.html#sequences.list.size\">list::size() is O(n)</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt07ch16s02.html\">vector</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt07ch16s02.html#sequences.vector.management\">Space Overhead Management</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"containers.sequences.list\"></a>list</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"sequences.list.size\"></a>list::size() is O(n)</h3></div></div></div><p>\n+     Yes it is, and that's okay.  This is a decision that we preserved\n+     when we imported SGI's STL implementation.  The following is\n+     quoted from <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/FAQ.html\" target=\"_top\">their FAQ</a>:\n+   </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+       The size() member function, for list and slist, takes time\n+       proportional to the number of elements in the list.  This was a\n+       deliberate tradeoff.  The only way to get a constant-time\n+       size() for linked lists would be to maintain an extra member\n+       variable containing the list's size.  This would require taking\n+       extra time to update that variable (it would make splice() a\n+       linear time operation, for example), and it would also make the\n+       list larger.  Many list algorithms don't require that extra\n+       word (algorithms that do require it might do better with\n+       vectors than with lists), and, when it is necessary to maintain\n+       an explicit size count, it's something that users can do\n+       themselves.\n+     </p><p>\n+       This choice is permitted by the C++ standard. The standard says\n+       that size() \u201c<span class=\"quote\">should</span>\u201d be constant time, and\n+       \u201c<span class=\"quote\">should</span>\u201d does not mean the same thing as\n+       \u201c<span class=\"quote\">shall</span>\u201d.  This is the officially recommended ISO\n+       wording for saying that an implementation is supposed to do\n+       something unless there is a good reason not to.\n+      </p><p>\n+\tOne implication of linear time size(): you should never write\n+      </p><pre class=\"programlisting\">\n+         if (L.size() == 0)\n+             ...\n+\t </pre><p>\n+         Instead, you should write\n+\t </p><pre class=\"programlisting\">\n+         if (L.empty())\n+             ...\n+\t </pre></blockquote></div></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"containers.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"containers.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch16s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0VII.\u00a0Containers\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0vector</td></tr></table></div></body></html>"}, {"sha": "deb4790d4a97ddc02dc3fbdb7e2fe210b2d32b23", "filename": "libstdc++-v3/doc/html/manual/bk01pt07ch16s02.html", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch16s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch16s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch16s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>vector</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt07ch16.html\" title=\"Chapter\u00a016.\u00a0Sequences\" /><link rel=\"prev\" href=\"bk01pt07ch16.html\" title=\"Chapter\u00a016.\u00a0Sequences\" /><link rel=\"next\" href=\"bk01pt07ch17.html\" title=\"Chapter\u00a017.\u00a0Associative\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">vector</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch16.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a016.\u00a0Sequences</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch17.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"containers.sequences.vector\"></a>vector</h2></div></div></div><p>\n+  </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"sequences.vector.management\"></a>Space Overhead Management</h3></div></div></div><p>\n+     In <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-04/msg00105.html\" target=\"_top\">this\n+     message to the list</a>, Daniel Kostecky announced work on an\n+     alternate form of <code class=\"code\">std::vector</code> that would support\n+     hints on the number of elements to be over-allocated.  The design\n+     was also described, along with possible implementation choices.\n+   </p><p>\n+     The first two alpha releases were announced <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00048.html\" target=\"_top\">here</a>\n+     and <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2002-07/msg00111.html\" target=\"_top\">here</a>.\n+     The releases themselves are available at\n+      <a class=\"ulink\" href=\"http://www.kotelna.sk/dk/sw/caphint/\" target=\"_top\">\n+      http://www.kotelna.sk/dk/sw/caphint/</a>.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch16.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt07ch16.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch17.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a016.\u00a0Sequences\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a017.\u00a0Associative</td></tr></table></div></body></html>"}, {"sha": "ebe2fd0f5576ec540f3ef9e26a42253cb4f80a88", "filename": "libstdc++-v3/doc/html/manual/bk01pt07ch17.html", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch17.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch17.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch17.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,84 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a017.\u00a0Associative</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"containers.html\" title=\"Part\u00a0VII.\u00a0Containers\" /><link rel=\"prev\" href=\"bk01pt07ch16s02.html\" title=\"vector\" /><link rel=\"next\" href=\"bk01pt07ch17s02.html\" title=\"bitset\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a017.\u00a0Associative</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch16s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0VII.\u00a0Containers</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch17s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.containers.associative\"></a>Chapter\u00a017.\u00a0Associative</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt07ch17.html#containers.associative.insert_hints\">Insertion Hints</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt07ch17s02.html\">bitset</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt07ch17s02.html#associative.bitset.size_variable\">Size Variable</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt07ch17s02.html#associative.bitset.type_string\">Type String</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"containers.associative.insert_hints\"></a>Insertion Hints</h2></div></div></div><p>\n+     Section [23.1.2], Table 69, of the C++ standard lists this\n+     function for all of the associative containers (map, set, etc):\n+   </p><pre class=\"programlisting\">\n+      a.insert(p,t);\n+   </pre><p>\n+     where 'p' is an iterator into the container 'a', and 't' is the\n+     item to insert.  The standard says that \u201c<span class=\"quote\"><code class=\"code\">t</code> is\n+     inserted as close as possible to the position just prior to\n+     <code class=\"code\">p</code>.</span>\u201d (Library DR #233 addresses this topic,\n+     referring to <a class=\"ulink\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1780.html\" target=\"_top\">N1780</a>.\n+     Since version 4.2 GCC implements the resolution to DR 233, so\n+     that insertions happen as close as possible to the hint. For\n+     earlier releases the hint was only used as described below.\n+   </p><p>\n+     Here we'll describe how the hinting works in the libstdc++\n+     implementation, and what you need to do in order to take\n+     advantage of it.  (Insertions can change from logarithmic\n+     complexity to amortized constant time, if the hint is properly\n+     used.)  Also, since the current implementation is based on the\n+     SGI STL one, these points may hold true for other library\n+     implementations also, since the HP/SGI code is used in a lot of\n+     places.\n+   </p><p>\n+     In the following text, the phrases <span class=\"emphasis\"><em>greater\n+     than</em></span> and <span class=\"emphasis\"><em>less than</em></span> refer to the\n+     results of the strict weak ordering imposed on the container by\n+     its comparison object, which defaults to (basically)\n+     \u201c<span class=\"quote\">&lt;</span>\u201d.  Using those phrases is semantically sloppy,\n+     but I didn't want to get bogged down in syntax.  I assume that if\n+     you are intelligent enough to use your own comparison objects,\n+     you are also intelligent enough to assign \u201c<span class=\"quote\">greater</span>\u201d\n+     and \u201c<span class=\"quote\">lesser</span>\u201d their new meanings in the next\n+     paragraph.  *grin*\n+   </p><p>\n+     If the <code class=\"code\">hint</code> parameter ('p' above) is equivalent to:\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\t  <code class=\"code\">begin()</code>, then the item being inserted should\n+\t  have a key less than all the other keys in the container.\n+\t  The item will be inserted at the beginning of the container,\n+\t  becoming the new entry at <code class=\"code\">begin()</code>.\n+      </p></li><li><p>\n+\t  <code class=\"code\">end()</code>, then the item being inserted should have\n+\t  a key greater than all the other keys in the container.  The\n+\t  item will be inserted at the end of the container, becoming\n+\t  the new entry at <code class=\"code\">end()</code>.  \n+      </p></li><li><p>\n+\t  neither <code class=\"code\">begin()</code> nor <code class=\"code\">end()</code>, then:\n+\t  Let <code class=\"code\">h</code> be the entry in the container pointed to\n+\t  by <code class=\"code\">hint</code>, that is, <code class=\"code\">h = *hint</code>.  Then\n+\t  the item being inserted should have a key less than that of\n+\t  <code class=\"code\">h</code>, and greater than that of the item preceding\n+\t  <code class=\"code\">h</code>.  The new item will be inserted between\n+\t  <code class=\"code\">h</code> and <code class=\"code\">h</code>'s predecessor.\n+\t  </p></li></ul></div><p>\n+     For <code class=\"code\">multimap</code> and <code class=\"code\">multiset</code>, the\n+     restrictions are slightly looser: \u201c<span class=\"quote\">greater than</span>\u201d\n+     should be replaced by \u201c<span class=\"quote\">not less than</span>\u201dand \u201c<span class=\"quote\">less\n+     than</span>\u201d should be replaced by \u201c<span class=\"quote\">not greater\n+     than.</span>\u201d (Why not replace greater with\n+     greater-than-or-equal-to?  You probably could in your head, but\n+     the mathematicians will tell you that it isn't the same thing.)\n+   </p><p>\n+     If the conditions are not met, then the hint is not used, and the\n+     insertion proceeds as if you had called <code class=\"code\"> a.insert(t)\n+     </code> instead.  (<span class=\"emphasis\"><em>Note </em></span> that GCC releases\n+     prior to 3.0.2 had a bug in the case with <code class=\"code\">hint ==\n+     begin()</code> for the <code class=\"code\">map</code> and <code class=\"code\">set</code>\n+     classes.  You should not use a hint argument in those releases.)\n+   </p><p>\n+     This behavior goes well with other containers'\n+     <code class=\"code\">insert()</code> functions which take an iterator: if used,\n+     the new item will be inserted before the iterator passed as an\n+     argument, same as the other containers.\n+   </p><p>\n+     <span class=\"emphasis\"><em>Note </em></span> also that the hint in this\n+     implementation is a one-shot.  The older insertion-with-hint\n+     routines check the immediately surrounding entries to ensure that\n+     the new item would in fact belong there.  If the hint does not\n+     point to the correct place, then no further local searching is\n+     done; the search begins from scratch in logarithmic time.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch16s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"containers.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch17s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">vector\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0bitset</td></tr></table></div></body></html>"}, {"sha": "6b434ce5ec1c29d24b7dbe96f24afcf0ff27c7eb", "filename": "libstdc++-v3/doc/html/manual/bk01pt07ch17s02.html", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch17s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch17s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch17s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>bitset</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt07ch17.html\" title=\"Chapter\u00a017.\u00a0Associative\" /><link rel=\"prev\" href=\"bk01pt07ch17.html\" title=\"Chapter\u00a017.\u00a0Associative\" /><link rel=\"next\" href=\"bk01pt07ch18.html\" title=\"Chapter\u00a018.\u00a0Interacting with C\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">bitset</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch17.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a017.\u00a0Associative</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch18.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"containers.associative.bitset\"></a>bitset</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"associative.bitset.size_variable\"></a>Size Variable</h3></div></div></div><p>\n+\tNo, you cannot write code of the form\n+      </p><pre class=\"programlisting\">\n+      #include &lt;bitset&gt;\n+\n+      void foo (size_t n)\n+      {\n+          std::bitset&lt;n&gt;   bits;\n+          ....\n+      } \n+   </pre><p>\n+     because <code class=\"code\">n</code> must be known at compile time.  Your\n+     compiler is correct; it is not a bug.  That's the way templates\n+     work.  (Yes, it <span class=\"emphasis\"><em>is</em></span> a feature.)\n+   </p><p>\n+     There are a couple of ways to handle this kind of thing.  Please\n+     consider all of them before passing judgement.  They include, in\n+     no particular order:\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>A very large N in <code class=\"code\">bitset&lt;N&gt;</code>.</p></li><li><p>A container&lt;bool&gt;.</p></li><li><p>Extremely weird solutions.</p></li></ul></div><p>\n+     <span class=\"emphasis\"><em>A very large N in\n+     <code class=\"code\">bitset&lt;N&gt;</code>.\u00a0\u00a0</em></span> It has been\n+     pointed out a few times in newsgroups that N bits only takes up\n+     (N/8) bytes on most systems, and division by a factor of eight is\n+     pretty impressive when speaking of memory.  Half a megabyte given\n+     over to a bitset (recall that there is zero space overhead for\n+     housekeeping info; it is known at compile time exactly how large\n+     the set is) will hold over four million bits.  If you're using\n+     those bits as status flags (e.g.,\n+     \u201c<span class=\"quote\">changed</span>\u201d/\u201c<span class=\"quote\">unchanged</span>\u201d flags), that's a\n+     <span class=\"emphasis\"><em>lot</em></span> of state.\n+   </p><p>\n+     You can then keep track of the \u201c<span class=\"quote\">maximum bit used</span>\u201d\n+     during some testing runs on representative data, make note of how\n+     many of those bits really need to be there, and then reduce N to\n+     a smaller number.  Leave some extra space, of course.  (If you\n+     plan to write code like the incorrect example above, where the\n+     bitset is a local variable, then you may have to talk your\n+     compiler into allowing that much stack space; there may be zero\n+     space overhead, but it's all allocated inside the object.)\n+   </p><p>\n+     <span class=\"emphasis\"><em>A container&lt;bool&gt;.\u00a0\u00a0</em></span> The\n+     Committee made provision for the space savings possible with that\n+     (N/8) usage previously mentioned, so that you don't have to do\n+     wasteful things like <code class=\"code\">Container&lt;char&gt;</code> or\n+     <code class=\"code\">Container&lt;short int&gt;</code>.  Specifically,\n+     <code class=\"code\">vector&lt;bool&gt;</code> is required to be specialized for\n+     that space savings.\n+   </p><p>\n+     The problem is that <code class=\"code\">vector&lt;bool&gt;</code> doesn't\n+     behave like a normal vector anymore.  There have been recent\n+     journal articles which discuss the problems (the ones by Herb\n+     Sutter in the May and July/August 1999 issues of C++ Report cover\n+     it well).  Future revisions of the ISO C++ Standard will change\n+     the requirement for <code class=\"code\">vector&lt;bool&gt;</code>\n+     specialization.  In the meantime, <code class=\"code\">deque&lt;bool&gt;</code>\n+     is recommended (although its behavior is sane, you probably will\n+     not get the space savings, but the allocation scheme is different\n+     than that of vector).\n+   </p><p>\n+     <span class=\"emphasis\"><em>Extremely weird solutions.\u00a0\u00a0</em></span> If\n+     you have access to the compiler and linker at runtime, you can do\n+     something insane, like figuring out just how many bits you need,\n+     then writing a temporary source code file.  That file contains an\n+     instantiation of <code class=\"code\">bitset</code> for the required number of\n+     bits, inside some wrapper functions with unchanging signatures.\n+     Have your program then call the compiler on that file using\n+     Position Independent Code, then open the newly-created object\n+     file and load those wrapper functions.  You'll have an\n+     instantiation of <code class=\"code\">bitset&lt;N&gt;</code> for the exact\n+     <code class=\"code\">N</code> that you need at the time.  Don't forget to delete\n+     the temporary files.  (Yes, this <span class=\"emphasis\"><em>can</em></span> be, and\n+     <span class=\"emphasis\"><em>has been</em></span>, done.)\n+   </p><p>\n+     This would be the approach of either a visionary genius or a\n+     raving lunatic, depending on your programming and management\n+     style.  Probably the latter.\n+   </p><p>\n+     Which of the above techniques you use, if any, are up to you and\n+     your intended application.  Some time/space profiling is\n+     indicated if it really matters (don't just guess).  And, if you\n+     manage to do anything along the lines of the third category, the\n+     author would love to hear from you...\n+   </p><p>\n+     Also note that the implementation of bitset used in libstdc++ has\n+     <a class=\"ulink\" href=\"../ext/sgiexts.html#ch23\" target=\"_top\">some extensions</a>.\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"associative.bitset.type_string\"></a>Type String</h3></div></div></div><p>\n+      </p><p>\n+     Bitmasks do not take char* nor const char* arguments in their\n+     constructors.  This is something of an accident, but you can read\n+     about the problem: follow the library's \u201c<span class=\"quote\">Links</span>\u201d from\n+     the homepage, and from the C++ information \u201c<span class=\"quote\">defect\n+     reflector</span>\u201d link, select the library issues list.  Issue\n+     number 116 describes the problem.\n+   </p><p>\n+     For now you can simply make a temporary string object using the\n+     constructor expression:\n+   </p><pre class=\"programlisting\">\n+      std::bitset&lt;5&gt; b ( std::string(\u201c<span class=\"quote\">10110</span>\u201d) );\n+   </pre><p>\n+     instead of\n+   </p><pre class=\"programlisting\">\n+      std::bitset&lt;5&gt; b ( \u201c<span class=\"quote\">10110</span>\u201d );    // invalid\n+    </pre></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch17.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt07ch17.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch18.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a017.\u00a0Associative\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a018.\u00a0Interacting with C</td></tr></table></div></body></html>"}, {"sha": "e168ed82b58efcb37abbe8919144be4da712dbba", "filename": "libstdc++-v3/doc/html/manual/bk01pt07ch18.html", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch18.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch18.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt07ch18.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a018.\u00a0Interacting with C</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"containers.html\" title=\"Part\u00a0VII.\u00a0Containers\" /><link rel=\"prev\" href=\"bk01pt07ch17s02.html\" title=\"bitset\" /><link rel=\"next\" href=\"iterators.html\" title=\"Part\u00a0VIII.\u00a0Iterators\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a018.\u00a0Interacting with C</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch17s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0VII.\u00a0Containers</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"iterators.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.containers.c\"></a>Chapter\u00a018.\u00a0Interacting with C</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt07ch18.html#containers.c.vs_array\">Containers vs. Arrays</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"containers.c.vs_array\"></a>Containers vs. Arrays</h2></div></div></div><p>\n+     You're writing some code and can't decide whether to use builtin\n+     arrays or some kind of container.  There are compelling reasons\n+     to use one of the container classes, but you're afraid that\n+     you'll eventually run into difficulties, change everything back\n+     to arrays, and then have to change all the code that uses those\n+     data types to keep up with the change.\n+   </p><p>\n+     If your code makes use of the standard algorithms, this isn't as\n+     scary as it sounds.  The algorithms don't know, nor care, about\n+     the kind of \u201c<span class=\"quote\">container</span>\u201d on which they work, since\n+     the algorithms are only given endpoints to work with.  For the\n+     container classes, these are iterators (usually\n+     <code class=\"code\">begin()</code> and <code class=\"code\">end()</code>, but not always).\n+     For builtin arrays, these are the address of the first element\n+     and the <a class=\"ulink\" href=\"../24_iterators/howto.html#2\" target=\"_top\">past-the-end</a> element.\n+   </p><p>\n+     Some very simple wrapper functions can hide all of that from the\n+     rest of the code.  For example, a pair of functions called\n+     <code class=\"code\">beginof</code> can be written, one that takes an array,\n+     another that takes a vector.  The first returns a pointer to the\n+     first element, and the second returns the vector's\n+     <code class=\"code\">begin()</code> iterator.\n+   </p><p>\n+     The functions should be made template functions, and should also\n+     be declared inline.  As pointed out in the comments in the code\n+     below, this can lead to <code class=\"code\">beginof</code> being optimized out\n+     of existence, so you pay absolutely nothing in terms of increased\n+     code size or execution time.\n+   </p><p>\n+     The result is that if all your algorithm calls look like\n+   </p><pre class=\"programlisting\">\n+   std::transform(beginof(foo), endof(foo), beginof(foo), SomeFunction);\n+   </pre><p>\n+     then the type of foo can change from an array of ints to a vector\n+     of ints to a deque of ints and back again, without ever changing\n+     any client code.\n+   </p><p>\n+     This author has a collection of such functions, called\n+     \u201c<span class=\"quote\">*of</span>\u201d because they all extend the builtin\n+     \u201c<span class=\"quote\">sizeof</span>\u201d.  It started with some Usenet discussions\n+     on a transparent way to find the length of an array.  A\n+     simplified and much-reduced version for easier reading is <a class=\"ulink\" href=\"wrappers_h.txt\" target=\"_top\">given here</a>.\n+   </p><p>\n+     Astute readers will notice two things at once: first, that the\n+     container class is still a <code class=\"code\">vector&lt;T&gt;</code> instead\n+     of a more general <code class=\"code\">Container&lt;T&gt;</code>.  This would\n+     mean that three functions for <code class=\"code\">deque</code> would have to be\n+     added, another three for <code class=\"code\">list</code>, and so on.  This is\n+     due to problems with getting template resolution correct; I find\n+     it easier just to give the extra three lines and avoid confusion.\n+   </p><p>\n+     Second, the line\n+   </p><pre class=\"programlisting\">\n+    inline unsigned int lengthof (T (&amp;)[sz]) { return sz; } \n+   </pre><p>\n+     looks just weird!  Hint:  unused parameters can be left nameless.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch17s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"containers.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"iterators.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">bitset\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0VIII.\u00a0Iterators</td></tr></table></div></body></html>"}, {"sha": "d95c0869a846c33ce19171eba084c87d02705809", "filename": "libstdc++-v3/doc/html/manual/bk01pt08ch19.html", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt08ch19.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt08ch19.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt08ch19.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a019.\u00a0Predefined</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"iterators.html\" title=\"Part\u00a0VIII.\u00a0Iterators\" /><link rel=\"prev\" href=\"iterators.html\" title=\"Part\u00a0VIII.\u00a0Iterators\" /><link rel=\"next\" href=\"bk01pt08ch19s02.html\" title=\"One Past the End\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a019.\u00a0Predefined</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"iterators.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0VIII.\u00a0Iterators</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt08ch19s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.iterators.predefined\"></a>Chapter\u00a019.\u00a0Predefined</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt08ch19.html#iterators.predefined.vs_pointers\">Iterators vs. Pointers</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt08ch19s02.html\">One Past the End</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"iterators.predefined.vs_pointers\"></a>Iterators vs. Pointers</h2></div></div></div><p><a class=\"ulink\" href=\"../faq/index.html#5_1\" target=\"_top\">FAQ 5.1</a> points out that iterators\n+      are not implemented as pointers.  They are a generalization of\n+      pointers, but they are implemented in libstdc++ as separate classes.\n+   </p><p>Keeping that simple fact in mind as you design your code will\n+      prevent a whole lot of difficult-to-understand bugs.\n+   </p><p>You can think of it the other way 'round, even.  Since iterators\n+      are a generalization, that means that <span class=\"emphasis\"><em>pointers</em></span> are\n+      <span class=\"emphasis\"><em>iterators</em></span>, and that pointers can be used whenever an\n+      iterator would be.  All those functions in the Algorithms chapter\n+      of the Standard will work just as well on plain arrays and their\n+      pointers.\n+   </p><p>That doesn't mean that when you pass in a pointer, it gets wrapped\n+      into some special delegating iterator-to-pointer class with a layer\n+      of overhead.  (If you think that's the case anywhere, you don't\n+      understand templates to begin with...)  Oh, no; if you pass\n+      in a pointer, then the compiler will instantiate that template\n+      using T* as a type, and good old high-speed pointer arithmetic as\n+      its operations, so the resulting code will be doing exactly the same\n+      things as it would be doing if you had hand-coded it yourself (for\n+      the 273rd time).\n+   </p><p>How much overhead <span class=\"emphasis\"><em>is</em></span> there when using an iterator class?\n+      Very little.  Most of the layering classes contain nothing but\n+      typedefs, and typedefs are \"meta-information\" that simply\n+      tell the compiler some nicknames; they don't create code.  That\n+      information gets passed down through inheritance, so while the\n+      compiler has to do work looking up all the names, your runtime code\n+      does not.  (This has been a prime concern from the beginning.)\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"iterators.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"iterators.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt08ch19s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0VIII.\u00a0Iterators\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0One Past the End</td></tr></table></div></body></html>"}, {"sha": "d8462d2a497ac51ba5d1ae4e5bc6402b07792529", "filename": "libstdc++-v3/doc/html/manual/bk01pt08ch19s02.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt08ch19s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt08ch19s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt08ch19s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>One Past the End</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt08ch19.html\" title=\"Chapter\u00a019.\u00a0Predefined\" /><link rel=\"prev\" href=\"bk01pt08ch19.html\" title=\"Chapter\u00a019.\u00a0Predefined\" /><link rel=\"next\" href=\"algorithms.html\" title=\"Part\u00a0IX.\u00a0Algorithms\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">One Past the End</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt08ch19.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a019.\u00a0Predefined</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"algorithms.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"iterators.predefined.end\"></a>One Past the End</h2></div></div></div><p>This starts off sounding complicated, but is actually very easy,\n+      especially towards the end.  Trust me.\n+   </p><p>Beginners usually have a little trouble understand the whole\n+      'past-the-end' thing, until they remember their early algebra classes\n+      (see, they <span class=\"emphasis\"><em>told</em></span> you that stuff would come in handy!) and\n+      the concept of half-open ranges.\n+   </p><p>First, some history, and a reminder of some of the funkier rules in\n+      C and C++ for builtin arrays.  The following rules have always been\n+      true for both languages:\n+   </p><div class=\"orderedlist\"><ol type=\"1\"><li><p>You can point anywhere in the array, <span class=\"emphasis\"><em>or to the first element\n+          past the end of the array</em></span>.  A pointer that points to one\n+          past the end of the array is guaranteed to be as unique as a\n+          pointer to somewhere inside the array, so that you can compare\n+          such pointers safely.\n+\t</p></li><li><p>You can only dereference a pointer that points into an array.\n+          If your array pointer points outside the array -- even to just\n+          one past the end -- and you dereference it, Bad Things happen.\n+\t</p></li><li><p>Strictly speaking, simply pointing anywhere else invokes\n+          undefined behavior.  Most programs won't puke until such a\n+          pointer is actually dereferenced, but the standards leave that\n+          up to the platform.\n+\t</p></li></ol></div><p>The reason this past-the-end addressing was allowed is to make it\n+      easy to write a loop to go over an entire array, e.g.,\n+      while (*d++ = *s++);.\n+   </p><p>So, when you think of two pointers delimiting an array, don't think\n+      of them as indexing 0 through n-1.  Think of them as <span class=\"emphasis\"><em>boundary\n+      markers</em></span>:\n+   </p><pre class=\"programlisting\">\n+\n+   beginning            end\n+     |                   |\n+     |                   |               This is bad.  Always having to\n+     |                   |               remember to add or subtract one.\n+     |                   |               Off-by-one bugs very common here.\n+     V                   V\n+        array of N elements\n+     |---|---|--...--|---|---|\n+     | 0 | 1 |  ...  |N-2|N-1|\n+     |---|---|--...--|---|---|\n+\n+     ^                       ^\n+     |                       |\n+     |                       |           This is good.  This is safe.  This\n+     |                       |           is guaranteed to work.  Just don't\n+     |                       |           dereference 'end'.\n+   beginning                end\n+\n+   </pre><p>See?  Everything between the boundary markers is part of the array.\n+      Simple.\n+   </p><p>Now think back to your junior-high school algebra course, when you\n+      were learning how to draw graphs.  Remember that a graph terminating\n+      with a solid dot meant, \"Everything up through this point,\"\n+      and a graph terminating with an open dot meant, \"Everything up\n+      to, but not including, this point,\" respectively called closed\n+      and open ranges?  Remember how closed ranges were written with\n+      brackets, <span class=\"emphasis\"><em>[a,b]</em></span>, and open ranges were written with parentheses,\n+      <span class=\"emphasis\"><em>(a,b)</em></span>?\n+   </p><p>The boundary markers for arrays describe a <span class=\"emphasis\"><em>half-open range</em></span>,\n+      starting with (and including) the first element, and ending with (but\n+      not including) the last element:  <span class=\"emphasis\"><em>[beginning,end)</em></span>.  See, I\n+      told you it would be simple in the end.\n+   </p><p>Iterators, and everything working with iterators, follows this same\n+      time-honored tradition.  A container's <code class=\"code\">begin()</code> method returns\n+      an iterator referring to the first element, and its <code class=\"code\">end()</code>\n+      method returns a past-the-end iterator, which is guaranteed to be\n+      unique and comparable against any other iterator pointing into the\n+      middle of the container.\n+   </p><p>Container constructors, container methods, and algorithms, all take\n+      pairs of iterators describing a range of values on which to operate.\n+      All of these ranges are half-open ranges, so you pass the beginning\n+      iterator as the starting parameter, and the one-past-the-end iterator\n+      as the finishing parameter.\n+   </p><p>This generalizes very well.  You can operate on sub-ranges quite\n+      easily this way; functions accepting a <span class=\"emphasis\"><em>[first,last)</em></span> range\n+      don't know or care whether they are the boundaries of an entire {array,\n+      sequence, container, whatever}, or whether they only enclose a few\n+      elements from the center.  This approach also makes zero-length\n+      sequences very simple to recognize:  if the two endpoints compare\n+      equal, then the {array, sequence, container, whatever} is empty.\n+   </p><p>Just don't dereference <code class=\"code\">end()</code>.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt08ch19.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt08ch19.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"algorithms.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a019.\u00a0Predefined\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0IX.\u00a0Algorithms</td></tr></table></div></body></html>"}, {"sha": "da024cda86420e808ab7d18e9361762f4c9483a0", "filename": "libstdc++-v3/doc/html/manual/bk01pt09ch20.html", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt09ch20.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt09ch20.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt09ch20.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a020.\u00a0Mutating</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    , &#10;      algorithm&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"algorithms.html\" title=\"Part\u00a0IX.\u00a0Algorithms\" /><link rel=\"prev\" href=\"bk01pt09pr02.html\" title=\"\" /><link rel=\"next\" href=\"numerics.html\" title=\"Part\u00a0X.\u00a0Numerics\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a020.\u00a0Mutating</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt09pr02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0IX.\u00a0Algorithms</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"numerics.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.algorithms.mutating\"></a>Chapter\u00a020.\u00a0Mutating</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt09ch20.html#algorithms.mutating.swap\"><code class=\"function\">swap</code></a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt09ch20.html#algorithms.swap.specializations\">Specializations</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"algorithms.mutating.swap\"></a><code class=\"function\">swap</code></h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"algorithms.swap.specializations\"></a>Specializations</h3></div></div></div><p>If you call <code class=\"code\"> std::swap(x,y); </code> where x and y are standard\n+      containers, then the call will automatically be replaced by a call to\n+      <code class=\"code\"> x.swap(y); </code> instead.\n+   </p><p>This allows member functions of each container class to take over, and\n+      containers' swap functions should have O(1) complexity according to\n+      the standard.  (And while \"should\" allows implementations to\n+      behave otherwise and remain compliant, this implementation does in\n+      fact use constant-time swaps.)  This should not be surprising, since\n+      for two containers of the same type to swap contents, only some\n+      internal pointers to storage need to be exchanged.\n+   </p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt09pr02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"algorithms.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"numerics.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0X.\u00a0Numerics</td></tr></table></div></body></html>"}, {"sha": "d5cedbdfd3f3572d9d858f362af0c0cd5a37aad4", "filename": "libstdc++-v3/doc/html/manual/bk01pt09pr02.html", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt09pr02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt09pr02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt09pr02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title></title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    , &#10;      algorithm&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"algorithms.html\" title=\"Part\u00a0IX.\u00a0Algorithms\" /><link rel=\"prev\" href=\"algorithms.html\" title=\"Part\u00a0IX.\u00a0Algorithms\" /><link rel=\"next\" href=\"bk01pt09ch20.html\" title=\"Chapter\u00a020.\u00a0Mutating\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\"></th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"algorithms.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0IX.\u00a0Algorithms</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt09ch20.html\">Next</a></td></tr></table><hr /></div><div class=\"preface\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"id405802\"></a></h2></div></div></div><p>\n+  The neatest accomplishment of the algorithms chapter is that all the\n+  work is done via iterators, not containers directly.  This means two\n+  important things:\n+</p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+\t  Anything that behaves like an iterator can be used in one of\n+          these algorithms.  Raw pointers make great candidates, thus\n+          built-in arrays are fine containers, as well as your own iterators.\n+\t</p></li><li><p>\n+\t  The algorithms do not (and cannot) affect the container as a\n+          whole; only the things between the two iterator endpoints.  If\n+          you pass a range of iterators only enclosing the middle third of\n+          a container, then anything outside that range is inviolate.\n+\t</p></li></ol></div><p>\n+     Even strings can be fed through the algorithms here, although the\n+     string class has specialized versions of many of these functions\n+     (for example, <code class=\"code\">string::find()</code>).  Most of the examples\n+     on this page will use simple arrays of integers as a playground\n+     for algorithms, just to keep things simple.  The use of\n+     <span class=\"emphasis\"><em>N</em></span> as a size in the examples is to keep\n+     things easy to read but probably won't be valid code.  You can\n+     use wrappers such as those described in the <a class=\"ulink\" href=\"../23_containers/howto.html\" target=\"_top\">containers chapter</a> to\n+     keep real code readable.\n+   </p><p>\n+     The single thing that trips people up the most is the definition\n+     of <span class=\"emphasis\"><em>range</em></span> used with iterators; the famous\n+     \"past-the-end\" rule that everybody loves to hate.  The\n+     <a class=\"ulink\" href=\"../24_iterators/howto.html#2\" target=\"_top\">iterators\n+     chapter</a> of this document has a complete explanation of\n+     this simple rule that seems to cause so much confusion.  Once you\n+     get <span class=\"emphasis\"><em>range</em></span> into your head (it's not that\n+     hard, honest!), then the algorithms are a cakewalk.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"algorithms.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"algorithms.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt09ch20.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0IX.\u00a0Algorithms\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a020.\u00a0Mutating</td></tr></table></div></body></html>"}, {"sha": "66c31363069c2b8de96445527061451cc97273a5", "filename": "libstdc++-v3/doc/html/manual/bk01pt10ch21.html", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch21.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch21.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch21.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,19 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a021.\u00a0Complex</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"numerics.html\" title=\"Part\u00a0X.\u00a0Numerics\" /><link rel=\"prev\" href=\"numerics.html\" title=\"Part\u00a0X.\u00a0Numerics\" /><link rel=\"next\" href=\"bk01pt10ch22.html\" title=\"Chapter\u00a022.\u00a0Generalized Operations\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a021.\u00a0Complex</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"numerics.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0X.\u00a0Numerics</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch22.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.numerics.complex\"></a>Chapter\u00a021.\u00a0Complex</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt10ch21.html#numerics.complex.processing\">complex Processing</a></span></dt></dl></div><p>\n+  </p><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"numerics.complex.processing\"></a>complex Processing</h2></div></div></div><p>\n+    </p><p>Using <code class=\"code\">complex&lt;&gt;</code> becomes even more comple- er, sorry,\n+      <span class=\"emphasis\"><em>complicated</em></span>, with the not-quite-gratuitously-incompatible\n+      addition of complex types to the C language.  David Tribble has\n+      compiled a list of C++98 and C99 conflict points; his description of\n+      C's new type versus those of C++ and how to get them playing together\n+      nicely is\n+<a class=\"ulink\" href=\"http://david.tribble.com/text/cdiffs.htm#C99-complex\" target=\"_top\">here</a>.\n+   </p><p><code class=\"code\">complex&lt;&gt;</code> is intended to be instantiated with a\n+      floating-point type.  As long as you meet that and some other basic\n+      requirements, then the resulting instantiation has all of the usual\n+      math operators defined, as well as definitions of <code class=\"code\">op&lt;&lt;</code>\n+      and <code class=\"code\">op&gt;&gt;</code> that work with iostreams: <code class=\"code\">op&lt;&lt;</code>\n+      prints <code class=\"code\">(u,v)</code> and <code class=\"code\">op&gt;&gt;</code> can read <code class=\"code\">u</code>,\n+      <code class=\"code\">(u)</code>, and <code class=\"code\">(u,v)</code>.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"numerics.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"numerics.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch22.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0X.\u00a0Numerics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a022.\u00a0Generalized Operations</td></tr></table></div></body></html>"}, {"sha": "72b7697d16f1ad60a8d252daa163957d7f6bf5cb", "filename": "libstdc++-v3/doc/html/manual/bk01pt10ch22.html", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch22.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch22.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch22.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a022.\u00a0Generalized Operations</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"numerics.html\" title=\"Part\u00a0X.\u00a0Numerics\" /><link rel=\"prev\" href=\"bk01pt10ch21.html\" title=\"Chapter\u00a021.\u00a0Complex\" /><link rel=\"next\" href=\"bk01pt10ch23.html\" title=\"Chapter\u00a023.\u00a0Interacting with C\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a022.\u00a0Generalized Operations</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch21.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0X.\u00a0Numerics</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch23.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.numerics.generalized_ops\"></a>Chapter\u00a022.\u00a0Generalized Operations</h2></div></div></div><p>\n+  </p><p>There are four generalized functions in the &lt;numeric&gt; header\n+      that follow the same conventions as those in &lt;algorithm&gt;.  Each\n+      of them is overloaded:  one signature for common default operations,\n+      and a second for fully general operations.  Their names are\n+      self-explanatory to anyone who works with numerics on a regular basis:\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">accumulate</code></p></li><li><p><code class=\"code\">inner_product</code></p></li><li><p><code class=\"code\">partial_sum</code></p></li><li><p><code class=\"code\">adjacent_difference</code></p></li></ul></div><p>Here is a simple example of the two forms of <code class=\"code\">accumulate</code>.\n+   </p><pre class=\"programlisting\">\n+   int   ar[50];\n+   int   someval = somefunction();\n+\n+   // ...initialize members of ar to something...\n+\n+   int  sum       = std::accumulate(ar,ar+50,0);\n+   int  sum_stuff = std::accumulate(ar,ar+50,someval);\n+   int  product   = std::accumulate(ar,ar+50,1,std::multiplies&lt;int&gt;());\n+   </pre><p>The first call adds all the members of the array, using zero as an\n+      initial value for <code class=\"code\">sum</code>.  The second does the same, but uses\n+      <code class=\"code\">someval</code> as the starting value (thus, <code class=\"code\">sum_stuff == sum +\n+      someval</code>).  The final call uses the second of the two signatures,\n+      and multiplies all the members of the array; here we must obviously\n+      use 1 as a starting value instead of 0.\n+   </p><p>The other three functions have similar dual-signature forms.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch21.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"numerics.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch23.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a021.\u00a0Complex\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a023.\u00a0Interacting with C</td></tr></table></div></body></html>"}, {"sha": "0fe7854a454ac38044c32cb018ac5564f7f72a7a", "filename": "libstdc++-v3/doc/html/manual/bk01pt10ch23.html", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch23.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch23.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch23.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a023.\u00a0Interacting with C</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"numerics.html\" title=\"Part\u00a0X.\u00a0Numerics\" /><link rel=\"prev\" href=\"bk01pt10ch22.html\" title=\"Chapter\u00a022.\u00a0Generalized Operations\" /><link rel=\"next\" href=\"bk01pt10ch23s02.html\" title=\"C99\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a023.\u00a0Interacting with C</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch22.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0X.\u00a0Numerics</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch23s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.numerics.c\"></a>Chapter\u00a023.\u00a0Interacting with C</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt10ch23.html#numerics.c.array\">Numerics vs. Arrays</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt10ch23s02.html\">C99</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"numerics.c.array\"></a>Numerics vs. Arrays</h2></div></div></div><p>One of the major reasons why FORTRAN can chew through numbers so well\n+      is that it is defined to be free of pointer aliasing, an assumption\n+      that C89 is not allowed to make, and neither is C++98.  C99 adds a new\n+      keyword, <code class=\"code\">restrict</code>, to apply to individual pointers.  The\n+      C++ solution is contained in the library rather than the language\n+      (although many vendors can be expected to add this to their compilers\n+      as an extension).\n+   </p><p>That library solution is a set of two classes, five template classes,\n+      and \"a whole bunch\" of functions.  The classes are required\n+      to be free of pointer aliasing, so compilers can optimize the\n+      daylights out of them the same way that they have been for FORTRAN.\n+      They are collectively called <code class=\"code\">valarray</code>, although strictly\n+      speaking this is only one of the five template classes, and they are\n+      designed to be familiar to people who have worked with the BLAS\n+      libraries before.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch22.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"numerics.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch23s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a022.\u00a0Generalized Operations\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0C99</td></tr></table></div></body></html>"}, {"sha": "5a68fb4729312c303bcd5e41f87f9be11c2e1ff4", "filename": "libstdc++-v3/doc/html/manual/bk01pt10ch23s02.html", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch23s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch23s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt10ch23s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>C99</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt10ch23.html\" title=\"Chapter\u00a023.\u00a0Interacting with C\" /><link rel=\"prev\" href=\"bk01pt10ch23.html\" title=\"Chapter\u00a023.\u00a0Interacting with C\" /><link rel=\"next\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">C99</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch23.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a023.\u00a0Interacting with C</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"io.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"numerics.c.c99\"></a>C99</h2></div></div></div><p>In addition to the other topics on this page, we'll note here some\n+      of the C99 features that appear in libstdc++.\n+   </p><p>The C99 features depend on the <code class=\"code\">--enable-c99</code> configure flag.\n+      This flag is already on by default, but it can be disabled by the\n+      user.  Also, the configuration machinery will disable it if the\n+      necessary support for C99 (e.g., header files) cannot be found.\n+   </p><p>As of GCC 3.0, C99 support includes classification functions\n+      such as <code class=\"code\">isnormal</code>, <code class=\"code\">isgreater</code>,\n+      <code class=\"code\">isnan</code>, etc.\n+      The functions used for 'long long' support such as <code class=\"code\">strtoll</code>\n+      are supported, as is the <code class=\"code\">lldiv_t</code> typedef.  Also supported\n+      are the wide character functions using 'long long', like\n+      <code class=\"code\">wcstoll</code>.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch23.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt10ch23.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"io.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a023.\u00a0Interacting with C\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0XI.\u00a0Input and Output</td></tr></table></div></body></html>"}, {"sha": "2518ce435a525098941d434ef0356d6da291f65b", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch24.html", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch24.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch24.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch24.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,113 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a024.\u00a0Iostream Objects</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /><link rel=\"prev\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /><link rel=\"next\" href=\"bk01pt11ch25.html\" title=\"Chapter\u00a025.\u00a0Stream Buffers\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a024.\u00a0Iostream Objects</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"io.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XI.\u00a0Input and Output</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch25.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.io.objects\"></a>Chapter\u00a024.\u00a0Iostream Objects</h2></div></div></div><p>To minimize the time you have to wait on the compiler, it's good to\n+      only include the headers you really need.  Many people simply include\n+      &lt;iostream&gt; when they don't need to -- and that can <span class=\"emphasis\"><em>penalize\n+      your runtime as well.</em></span>  Here are some tips on which header to use\n+      for which situations, starting with the simplest.\n+   </p><p><span class=\"emphasis\"><em>&lt;iosfwd&gt;</em></span> should be included whenever you simply\n+      need the <span class=\"emphasis\"><em>name</em></span> of an I/O-related class, such as\n+      \"ofstream\" or \"basic_streambuf\".  Like the name\n+      implies, these are forward declarations.  (A word to all you fellow\n+      old school programmers:  trying to forward declare classes like\n+      \"class istream;\" won't work.  Look in the iosfwd header if\n+      you'd like to know why.)  For example,\n+   </p><pre class=\"programlisting\">\n+    #include &lt;iosfwd&gt;\n+\n+    class MyClass\n+    {\n+        ....\n+        std::ifstream&amp;   input_file;\n+    };\n+\n+    extern std::ostream&amp; operator&lt;&lt; (std::ostream&amp;, MyClass&amp;);\n+   </pre><p><span class=\"emphasis\"><em>&lt;ios&gt;</em></span> declares the base classes for the entire\n+      I/O stream hierarchy, std::ios_base and std::basic_ios&lt;charT&gt;, the\n+      counting types std::streamoff and std::streamsize, the file\n+      positioning type std::fpos, and the various manipulators like\n+      std::hex, std::fixed, std::noshowbase, and so forth.\n+   </p><p>The ios_base class is what holds the format flags, the state flags,\n+      and the functions which change them (setf(), width(), precision(),\n+      etc).  You can also store extra data and register callback functions\n+      through ios_base, but that has been historically underused.  Anything\n+      which doesn't depend on the type of characters stored is consolidated\n+      here.\n+   </p><p>The template class basic_ios is the highest template class in the\n+      hierarchy; it is the first one depending on the character type, and\n+      holds all general state associated with that type:  the pointer to the\n+      polymorphic stream buffer, the facet information, etc.\n+   </p><p><span class=\"emphasis\"><em>&lt;streambuf&gt;</em></span> declares the template class\n+      basic_streambuf, and two standard instantiations, streambuf and\n+      wstreambuf.  If you need to work with the vastly useful and capable\n+      stream buffer classes, e.g., to create a new form of storage\n+      transport, this header is the one to include.\n+   </p><p><span class=\"emphasis\"><em>&lt;istream&gt;</em></span>/<span class=\"emphasis\"><em>&lt;ostream&gt;</em></span> are\n+      the headers to include when you are using the &gt;&gt;/&lt;&lt;\n+      interface, or any of the other abstract stream formatting functions.\n+      For example,\n+   </p><pre class=\"programlisting\">\n+    #include &lt;istream&gt;\n+\n+    std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, MyClass&amp; c)\n+    {\n+       return os &lt;&lt; c.data1() &lt;&lt; c.data2();\n+    }\n+   </pre><p>The std::istream and std::ostream classes are the abstract parents of\n+      the various concrete implementations.  If you are only using the\n+      interfaces, then you only need to use the appropriate interface header.\n+   </p><p><span class=\"emphasis\"><em>&lt;iomanip&gt;</em></span> provides \"extractors and inserters\n+      that alter information maintained by class ios_base and its derived\n+      classes,\" such as std::setprecision and std::setw.  If you need\n+      to write expressions like <code class=\"code\">os &lt;&lt; setw(3);</code> or\n+      <code class=\"code\">is &gt;&gt; setbase(8);</code>, you must include &lt;iomanip&gt;.\n+   </p><p><span class=\"emphasis\"><em>&lt;sstream&gt;</em></span>/<span class=\"emphasis\"><em>&lt;fstream&gt;</em></span>\n+      declare the six stringstream and fstream classes.  As they are the\n+      standard concrete descendants of istream and ostream, you will already\n+      know about them.\n+   </p><p>Finally, <span class=\"emphasis\"><em>&lt;iostream&gt;</em></span> provides the eight standard\n+      global objects (cin, cout, etc).  To do this correctly, this header\n+      also provides the contents of the &lt;istream&gt; and &lt;ostream&gt;\n+      headers, but nothing else.  The contents of this header look like\n+   </p><pre class=\"programlisting\">\n+    #include &lt;ostream&gt;\n+    #include &lt;istream&gt;\n+\n+    namespace std\n+    {\n+        extern istream cin;\n+        extern ostream cout;\n+        ....\n+\n+        // this is explained below\n+        <span class=\"emphasis\"><em>static ios_base::Init __foo;</em></span>    // not its real name\n+    }\n+   </pre><p>Now, the runtime penalty mentioned previously:  the global objects\n+      must be initialized before any of your own code uses them; this is\n+      guaranteed by the standard.  Like any other global object, they must\n+      be initialized once and only once.  This is typically done with a\n+      construct like the one above, and the nested class ios_base::Init is \n+      specified in the standard for just this reason.\n+   </p><p>How does it work?  Because the header is included before any of your\n+      code, the <span class=\"emphasis\"><em>__foo</em></span> object is constructed before any of\n+      your objects.  (Global objects are built in the order in which they\n+      are declared, and destroyed in reverse order.)  The first time the\n+      constructor runs, the eight stream objects are set up.\n+   </p><p>The <code class=\"code\">static</code> keyword means that each object file compiled\n+      from a source file containing &lt;iostream&gt; will have its own\n+      private copy of <span class=\"emphasis\"><em>__foo</em></span>.  There is no specified order\n+      of construction across object files (it's one of those pesky NP\n+      problems that make life so interesting), so one copy in each object\n+      file means that the stream objects are guaranteed to be set up before\n+      any of your code which uses them could run, thereby meeting the\n+      requirements of the standard.\n+   </p><p>The penalty, of course, is that after the first copy of\n+      <span class=\"emphasis\"><em>__foo</em></span> is constructed, all the others are just wasted\n+      processor time.  The time spent is merely for an increment-and-test\n+      inside a function call, but over several dozen or hundreds of object\n+      files, that time can add up.  (It's not in a tight loop, either.)\n+   </p><p>The lesson?  Only include &lt;iostream&gt; when you need to use one of\n+      the standard objects in that source file; you'll pay less startup\n+      time.  Only include the header files you need to in general; your\n+      compile times will go down when there's less parsing work to do.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"io.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"io.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch25.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0XI.\u00a0Input and Output\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a025.\u00a0Stream Buffers</td></tr></table></div></body></html>"}, {"sha": "9920f97b7f6d905a9cb18ac1cf859d5518cfe9e7", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch25.html", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch25.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch25.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch25.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a025.\u00a0Stream Buffers</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /><link rel=\"prev\" href=\"bk01pt11ch24.html\" title=\"Chapter\u00a024.\u00a0Iostream Objects\" /><link rel=\"next\" href=\"bk01pt11ch25s02.html\" title=\"Buffering\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a025.\u00a0Stream Buffers</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch24.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XI.\u00a0Input and Output</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch25s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.io.streambufs\"></a>Chapter\u00a025.\u00a0Stream Buffers</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch25.html#io.streambuf.derived\">Derived streambuf Classes</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch25s02.html\">Buffering</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"io.streambuf.derived\"></a>Derived streambuf Classes</h2></div></div></div><p>\n+    </p><p>Creating your own stream buffers for I/O can be remarkably easy.\n+      If you are interested in doing so, we highly recommend two very\n+      excellent books:\n+      <a class=\"ulink\" href=\"http://www.langer.camelot.de/iostreams.html\" target=\"_top\">Standard C++\n+      IOStreams and Locales</a> by Langer and Kreft, ISBN 0-201-18395-1, and\n+      <a class=\"ulink\" href=\"http://www.josuttis.com/libbook/\" target=\"_top\">The C++ Standard Library</a>\n+      by Nicolai Josuttis, ISBN 0-201-37926-0.  Both are published by\n+      Addison-Wesley, who isn't paying us a cent for saying that, honest.\n+   </p><p>Here is a simple example, io/outbuf1, from the Josuttis text.  It\n+      transforms everything sent through it to uppercase.  This version\n+      assumes many things about the nature of the character type being\n+      used (for more information, read the books or the newsgroups):\n+   </p><pre class=\"programlisting\">\n+    #include &lt;iostream&gt;\n+    #include &lt;streambuf&gt;\n+    #include &lt;locale&gt;\n+    #include &lt;cstdio&gt;\n+\n+    class outbuf : public std::streambuf\n+    {\n+      protected:\n+\t/* central output function\n+\t * - print characters in uppercase mode\n+\t */\n+\tvirtual int_type overflow (int_type c) {\n+\t    if (c != EOF) {\n+\t\t// convert lowercase to uppercase\n+\t\tc = std::toupper(static_cast&lt;char&gt;(c),getloc());\n+\n+\t\t// and write the character to the standard output\n+\t\tif (putchar(c) == EOF) {\n+\t\t    return EOF;\n+\t\t}\n+\t    }\n+\t    return c;\n+\t}\n+    };\n+\n+    int main()\n+    {\n+\t// create special output buffer\n+\toutbuf ob;\n+\t// initialize output stream with that output buffer\n+\tstd::ostream out(&amp;ob);\n+\n+\tout &lt;&lt; \"31 hexadecimal: \"\n+\t    &lt;&lt; std::hex &lt;&lt; 31 &lt;&lt; std::endl;\n+\treturn 0;\n+    }\n+   </pre><p>Try it yourself!  More examples can be found in 3.1.x code, in\n+      <code class=\"code\">include/ext/*_filebuf.h</code>, and on\n+      <a class=\"ulink\" href=\"http://www.informatik.uni-konstanz.de/~kuehl/c++/iostream/\" target=\"_top\">Dietmar\n+      K\u00fchl's IOStreams page</a>.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch24.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"io.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch25s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a024.\u00a0Iostream Objects\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Buffering</td></tr></table></div></body></html>"}, {"sha": "3d3a8297c45df4d5b82692020fca54f0c66915ef", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch25s02.html", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch25s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch25s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch25s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Buffering</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt11ch25.html\" title=\"Chapter\u00a025.\u00a0Stream Buffers\" /><link rel=\"prev\" href=\"bk01pt11ch25.html\" title=\"Chapter\u00a025.\u00a0Stream Buffers\" /><link rel=\"next\" href=\"bk01pt11ch26.html\" title=\"Chapter\u00a026.\u00a0Memory Based Streams\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Buffering</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch25.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a025.\u00a0Stream Buffers</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch26.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"io.streambuf.buffering\"></a>Buffering</h2></div></div></div><p>First, are you sure that you understand buffering?  Particularly\n+      the fact that C++ may not, in fact, have anything to do with it?\n+   </p><p>The rules for buffering can be a little odd, but they aren't any\n+      different from those of C.  (Maybe that's why they can be a bit\n+      odd.)  Many people think that writing a newline to an output\n+      stream automatically flushes the output buffer.  This is true only\n+      when the output stream is, in fact, a terminal and not a file\n+      or some other device -- and <span class=\"emphasis\"><em>that</em></span> may not even be true\n+      since C++ says nothing about files nor terminals.  All of that is\n+      system-dependent.  (The \"newline-buffer-flushing only occurring\n+      on terminals\" thing is mostly true on Unix systems, though.)\n+   </p><p>Some people also believe that sending <code class=\"code\">endl</code> down an\n+      output stream only writes a newline.  This is incorrect; after a\n+      newline is written, the buffer is also flushed.  Perhaps this\n+      is the effect you want when writing to a screen -- get the text\n+      out as soon as possible, etc -- but the buffering is largely\n+      wasted when doing this to a file:\n+   </p><pre class=\"programlisting\">\n+   output &lt;&lt; \"a line of text\" &lt;&lt; endl;\n+   output &lt;&lt; some_data_variable &lt;&lt; endl;\n+   output &lt;&lt; \"another line of text\" &lt;&lt; endl; </pre><p>The proper thing to do in this case to just write the data out\n+      and let the libraries and the system worry about the buffering.\n+      If you need a newline, just write a newline:\n+   </p><pre class=\"programlisting\">\n+   output &lt;&lt; \"a line of text\\n\"\n+          &lt;&lt; some_data_variable &lt;&lt; '\\n'\n+          &lt;&lt; \"another line of text\\n\"; </pre><p>I have also joined the output statements into a single statement.\n+      You could make the code prettier by moving the single newline to\n+      the start of the quoted text on the last line, for example.\n+   </p><p>If you do need to flush the buffer above, you can send an\n+      <code class=\"code\">endl</code> if you also need a newline, or just flush the buffer\n+      yourself:\n+   </p><pre class=\"programlisting\">\n+   output &lt;&lt; ...... &lt;&lt; flush;    // can use std::flush manipulator\n+   output.flush();               // or call a member fn </pre><p>On the other hand, there are times when writing to a file should\n+      be like writing to standard error; no buffering should be done \n+      because the data needs to appear quickly (a prime example is a\n+      log file for security-related information).  The way to do this is\n+      just to turn off the buffering <span class=\"emphasis\"><em>before any I/O operations at\n+      all</em></span> have been done (note that opening counts as an I/O operation):\n+   </p><pre class=\"programlisting\">\n+   std::ofstream    os;\n+   std::ifstream    is;\n+   int   i;\n+\n+   os.rdbuf()-&gt;pubsetbuf(0,0);\n+   is.rdbuf()-&gt;pubsetbuf(0,0);\n+\n+   os.open(\"/foo/bar/baz\");\n+   is.open(\"/qux/quux/quuux\");\n+   ...\n+   os &lt;&lt; \"this data is written immediately\\n\";\n+   is &gt;&gt; i;   // and this will probably cause a disk read </pre><p>Since all aspects of buffering are handled by a streambuf-derived\n+      member, it is necessary to get at that member with <code class=\"code\">rdbuf()</code>.\n+      Then the public version of <code class=\"code\">setbuf</code> can be called.  The \n+      arguments are the same as those for the Standard C I/O Library\n+      function (a buffer area followed by its size).\n+   </p><p>A great deal of this is implementation-dependent.  For example,\n+      <code class=\"code\">streambuf</code> does not specify any actions for its own \n+      <code class=\"code\">setbuf()</code>-ish functions; the classes derived from\n+      <code class=\"code\">streambuf</code> each define behavior that \"makes \n+      sense\" for that class:  an argument of (0,0) turns off buffering\n+      for <code class=\"code\">filebuf</code> but does nothing at all for its siblings\n+      <code class=\"code\">stringbuf</code> and <code class=\"code\">strstreambuf</code>, and specifying\n+      anything other than (0,0) has varying effects.\n+      User-defined classes derived from <code class=\"code\">streambuf</code> can\n+      do whatever they want.  (For <code class=\"code\">filebuf</code> and arguments for\n+      <code class=\"code\">(p,s)</code> other than zeros, libstdc++ does what you'd expect:\n+      the first <code class=\"code\">s</code> bytes of <code class=\"code\">p</code> are used as a buffer,\n+      which you must allocate and deallocate.)\n+   </p><p>A last reminder:  there are usually more buffers involved than\n+      just those at the language/library level.  Kernel buffers, disk\n+      buffers, and the like will also have an effect.  Inspecting and\n+      changing those are system-dependent.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch25.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt11ch25.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch26.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a025.\u00a0Stream Buffers\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a026.\u00a0Memory Based Streams</td></tr></table></div></body></html>"}, {"sha": "40727d6053092dddba5225e9650b7d77f0b6ecbb", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch26.html", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch26.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch26.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch26.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a026.\u00a0Memory Based Streams</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /><link rel=\"prev\" href=\"bk01pt11ch25s02.html\" title=\"Buffering\" /><link rel=\"next\" href=\"bk01pt11ch27.html\" title=\"Chapter\u00a027.\u00a0File Based Streams\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a026.\u00a0Memory Based Streams</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch25s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XI.\u00a0Input and Output</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch27.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.io.memstreams\"></a>Chapter\u00a026.\u00a0Memory Based Streams</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch26.html#manual.io.memstreams.compat\">Compatibility With strstream</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.io.memstreams.compat\"></a>Compatibility With strstream</h2></div></div></div><p>\n+    </p><p>Stringstreams (defined in the header <code class=\"code\">&lt;sstream&gt;</code>)\n+      are in this author's opinion one of the coolest things since\n+      sliced time.  An example of their use is in the Received Wisdom\n+      section for Chapter 21 (Strings),\n+      <a class=\"ulink\" href=\"../21_strings/howto.html#1.1internal\" target=\"_top\"> describing how to\n+      format strings</a>.\n+   </p><p>The quick definition is:  they are siblings of ifstream and ofstream,\n+      and they do for <code class=\"code\">std::string</code> what their siblings do for\n+      files.  All that work you put into writing <code class=\"code\">&lt;&lt;</code> and\n+      <code class=\"code\">&gt;&gt;</code> functions for your classes now pays off\n+      <span class=\"emphasis\"><em>again!</em></span>  Need to format a string before passing the string\n+      to a function?  Send your stuff via <code class=\"code\">&lt;&lt;</code> to an\n+      ostringstream.  You've read a string as input and need to parse it?\n+      Initialize an istringstream with that string, and then pull pieces\n+      out of it with <code class=\"code\">&gt;&gt;</code>.  Have a stringstream and need to\n+      get a copy of the string inside?  Just call the <code class=\"code\">str()</code>\n+      member function.\n+   </p><p>This only works if you've written your\n+      <code class=\"code\">&lt;&lt;</code>/<code class=\"code\">&gt;&gt;</code> functions correctly, though,\n+      and correctly means that they take istreams and ostreams as\n+      parameters, not i<span class=\"emphasis\"><em>f</em></span>streams and o<span class=\"emphasis\"><em>f</em></span>streams.  If they\n+      take the latter, then your I/O operators will work fine with\n+      file streams, but with nothing else -- including stringstreams.\n+   </p><p>If you are a user of the strstream classes, you need to update\n+      your code.  You don't have to explicitly append <code class=\"code\">ends</code> to\n+      terminate the C-style character array, you don't have to mess with\n+      \"freezing\" functions, and you don't have to manage the\n+      memory yourself.  The strstreams have been officially deprecated,\n+      which means that 1) future revisions of the C++ Standard won't\n+      support them, and 2) if you use them, people will laugh at you.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch25s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"io.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch27.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Buffering\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a027.\u00a0File Based Streams</td></tr></table></div></body></html>"}, {"sha": "e35e682e7692da23b2d367e54278ea65e098b3ae", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch27.html", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a027.\u00a0File Based Streams</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /><link rel=\"prev\" href=\"bk01pt11ch26.html\" title=\"Chapter\u00a026.\u00a0Memory Based Streams\" /><link rel=\"next\" href=\"bk01pt11ch27s02.html\" title=\"Binary Input and Output\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a027.\u00a0File Based Streams</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch26.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XI.\u00a0Input and Output</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch27s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.io.filestreams\"></a>Chapter\u00a027.\u00a0File Based Streams</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch27.html#manual.io.filestreams.copying_a_file\">Copying a File</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch27s02.html\">Binary Input and Output</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch27s03.html\">More Binary Input and Output</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.io.filestreams.copying_a_file\"></a>Copying a File</h2></div></div></div><p>\n+  </p><p>So you want to copy a file quickly and easily, and most important,\n+      completely portably.  And since this is C++, you have an open\n+      ifstream (call it IN) and an open ofstream (call it OUT):\n+   </p><pre class=\"programlisting\">\n+   #include &lt;fstream&gt;\n+\n+   std::ifstream  IN (\"input_file\");\n+   std::ofstream  OUT (\"output_file\"); </pre><p>Here's the easiest way to get it completely wrong:\n+   </p><pre class=\"programlisting\">\n+   OUT &lt;&lt; IN;</pre><p>For those of you who don't already know why this doesn't work\n+      (probably from having done it before), I invite you to quickly\n+      create a simple text file called \"input_file\" containing\n+      the sentence\n+   </p><pre class=\"programlisting\">\n+      The quick brown fox jumped over the lazy dog.</pre><p>surrounded by blank lines.  Code it up and try it.  The contents\n+      of \"output_file\" may surprise you.\n+   </p><p>Seriously, go do it.  Get surprised, then come back.  It's worth it.\n+   </p><p>The thing to remember is that the <code class=\"code\">basic_[io]stream</code> classes\n+      handle formatting, nothing else.  In particular, they break up on\n+      whitespace.  The actual reading, writing, and storing of data is\n+      handled by the <code class=\"code\">basic_streambuf</code> family.  Fortunately, the\n+      <code class=\"code\">operator&lt;&lt;</code> is overloaded to take an ostream and\n+      a pointer-to-streambuf, in order to help with just this kind of\n+      \"dump the data verbatim\" situation.\n+   </p><p>Why a <span class=\"emphasis\"><em>pointer</em></span> to streambuf and not just a streambuf?  Well,\n+      the [io]streams hold pointers (or references, depending on the\n+      implementation) to their buffers, not the actual\n+      buffers.  This allows polymorphic behavior on the part of the buffers\n+      as well as the streams themselves.  The pointer is easily retrieved\n+      using the <code class=\"code\">rdbuf()</code> member function.  Therefore, the easiest\n+      way to copy the file is:\n+   </p><pre class=\"programlisting\">\n+   OUT &lt;&lt; IN.rdbuf();</pre><p>So what <span class=\"emphasis\"><em>was</em></span> happening with OUT&lt;&lt;IN?  Undefined\n+      behavior, since that particular &lt;&lt; isn't defined by the Standard.\n+      I have seen instances where it is implemented, but the character\n+      extraction process removes all the whitespace, leaving you with no\n+      blank lines and only \"Thequickbrownfox...\".  With\n+      libraries that do not define that operator, IN (or one of IN's\n+      member pointers) sometimes gets converted to a void*, and the output\n+      file then contains a perfect text representation of a hexadecimal\n+      address (quite a big surprise).  Others don't compile at all.\n+   </p><p>Also note that none of this is specific to o<span class=\"emphasis\"><em>*f*</em></span>streams. \n+      The operators shown above are all defined in the parent \n+      basic_ostream class and are therefore available with all possible\n+      descendants.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch26.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"io.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch27s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a026.\u00a0Memory Based Streams\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Binary Input and Output</td></tr></table></div></body></html>"}, {"sha": "b313bcc5f1903ebd839fb32bd9e97f59d6b5a8c7", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch27s02.html", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Binary Input and Output</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt11ch27.html\" title=\"Chapter\u00a027.\u00a0File Based Streams\" /><link rel=\"prev\" href=\"bk01pt11ch27.html\" title=\"Chapter\u00a027.\u00a0File Based Streams\" /><link rel=\"next\" href=\"bk01pt11ch27s03.html\" title=\"More Binary Input and Output\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Binary Input and Output</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch27.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a027.\u00a0File Based Streams</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch27s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.io.filestreams.binary\"></a>Binary Input and Output</h2></div></div></div><p>\n+    </p><p>The first and most important thing to remember about binary I/O is\n+      that opening a file with <code class=\"code\">ios::binary</code> is not, repeat\n+      <span class=\"emphasis\"><em>not</em></span>, the only thing you have to do.  It is not a silver\n+      bullet, and will not allow you to use the <code class=\"code\">&lt;&lt;/&gt;&gt;</code>\n+      operators of the normal fstreams to do binary I/O.\n+   </p><p>Sorry.  Them's the breaks.\n+   </p><p>This isn't going to try and be a complete tutorial on reading and\n+      writing binary files (because \"binary\"\n+      <a class=\"ulink\" href=\"#7\" target=\"_top\">covers a lot of ground)</a>, but we will try and clear\n+      up a couple of misconceptions and common errors.\n+   </p><p>First, <code class=\"code\">ios::binary</code> has exactly one defined effect, no more\n+      and no less.  Normal text mode has to be concerned with the newline\n+      characters, and the runtime system will translate between (for\n+      example) '\\n' and the appropriate end-of-line sequence (LF on Unix,\n+      CRLF on DOS, CR on Macintosh, etc).  (There are other things that\n+      normal mode does, but that's the most obvious.)  Opening a file in\n+      binary mode disables this conversion, so reading a CRLF sequence\n+      under Windows won't accidentally get mapped to a '\\n' character, etc.\n+      Binary mode is not supposed to suddenly give you a bitstream, and\n+      if it is doing so in your program then you've discovered a bug in\n+      your vendor's compiler (or some other part of the C++ implementation,\n+      possibly the runtime system).\n+   </p><p>Second, using <code class=\"code\">&lt;&lt;</code> to write and <code class=\"code\">&gt;&gt;</code> to\n+      read isn't going to work with the standard file stream classes, even\n+      if you use <code class=\"code\">skipws</code> during reading.  Why not?  Because \n+      ifstream and ofstream exist for the purpose of <span class=\"emphasis\"><em>formatting</em></span>,\n+      not reading and writing.  Their job is to interpret the data into\n+      text characters, and that's exactly what you don't want to happen\n+      during binary I/O.\n+   </p><p>Third, using the <code class=\"code\">get()</code> and <code class=\"code\">put()/write()</code> member\n+      functions still aren't guaranteed to help you.  These are\n+      \"unformatted\" I/O functions, but still character-based.\n+      (This may or may not be what you want, see below.)\n+   </p><p>Notice how all the problems here are due to the inappropriate use\n+      of <span class=\"emphasis\"><em>formatting</em></span> functions and classes to perform something\n+      which <span class=\"emphasis\"><em>requires</em></span> that formatting not be done?  There are a\n+      seemingly infinite number of solutions, and a few are listed here:\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\u201c<span class=\"quote\">Derive your own fstream-type classes and write your own\n+          &lt;&lt;/&gt;&gt; operators to do binary I/O on whatever data\n+          types you're using.</span>\u201d\n+\t</p><p>\n+\t  This is a Bad Thing, because while\n+          the compiler would probably be just fine with it, other humans\n+          are going to be confused.  The overloaded bitshift operators\n+          have a well-defined meaning (formatting), and this breaks it.\n+\t</p></li><li><p>\n+\t  \u201c<span class=\"quote\">Build the file structure in memory, then\n+\t  <code class=\"code\">mmap()</code> the file and copy the\n+\t  structure.\n+\t</span>\u201d\n+\t</p><p>\n+\t  Well, this is easy to make work, and easy to break, and is\n+\t  pretty equivalent to using <code class=\"code\">::read()</code> and\n+\t  <code class=\"code\">::write()</code> directly, and makes no use of the\n+\t  iostream library at all...\n+\t  </p></li><li><p>\n+\t  \u201c<span class=\"quote\">Use streambufs, that's what they're there for.</span>\u201d\n+\t</p><p>\n+          While not trivial for the beginner, this is the best of all\n+          solutions.  The streambuf/filebuf layer is the layer that is\n+          responsible for actual I/O.  If you want to use the C++\n+          library for binary I/O, this is where you start.\n+\t</p></li></ul></div><p>How to go about using streambufs is a bit beyond the scope of this\n+      document (at least for now), but while streambufs go a long way,\n+      they still leave a couple of things up to you, the programmer.\n+      As an example, byte ordering is completely between you and the\n+      operating system, and you have to handle it yourself.\n+   </p><p>Deriving a streambuf or filebuf\n+      class from the standard ones, one that is specific to your data\n+      types (or an abstraction thereof) is probably a good idea, and\n+      lots of examples exist in journals and on Usenet.  Using the\n+      standard filebufs directly (either by declaring your own or by\n+      using the pointer returned from an fstream's <code class=\"code\">rdbuf()</code>)\n+      is certainly feasible as well.\n+   </p><p>One area that causes problems is trying to do bit-by-bit operations\n+      with filebufs.  C++ is no different from C in this respect:  I/O\n+      must be done at the byte level.  If you're trying to read or write\n+      a few bits at a time, you're going about it the wrong way.  You\n+      must read/write an integral number of bytes and then process the\n+      bytes.  (For example, the streambuf functions take and return\n+      variables of type <code class=\"code\">int_type</code>.)\n+   </p><p>Another area of problems is opening text files in binary mode.\n+      Generally, binary mode is intended for binary files, and opening\n+      text files in binary mode means that you now have to deal with all of \n+      those end-of-line and end-of-file problems that we mentioned before.\n+      An instructive thread from comp.lang.c++.moderated delved off into\n+      this topic starting more or less at\n+      <a class=\"ulink\" href=\"http://groups.google.com/groups?oi=djq&amp;selm=an_436187505\" target=\"_top\">this</a>\n+      article and continuing to the end of the thread.  (You'll have to\n+      sort through some flames every couple of paragraphs, but the points\n+      made are good ones.)\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch27.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt11ch27.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch27s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a027.\u00a0File Based Streams\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0More Binary Input and Output</td></tr></table></div></body></html>"}, {"sha": "70369eab80be86e8f0a6428b46a7df5c3731e789", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch27s03.html", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch27s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>More Binary Input and Output</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt11ch27.html\" title=\"Chapter\u00a027.\u00a0File Based Streams\" /><link rel=\"prev\" href=\"bk01pt11ch27s02.html\" title=\"Binary Input and Output\" /><link rel=\"next\" href=\"bk01pt11ch28.html\" title=\"Chapter\u00a028.\u00a0Interacting with C\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">More Binary Input and Output</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch27s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a027.\u00a0File Based Streams</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch28.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.io.filestreams.binary2\"></a>More Binary Input and Output</h2></div></div></div><p>Towards the beginning of February 2001, the subject of\n+      \"binary\" I/O was brought up in a couple of places at the\n+      same time.  One notable place was Usenet, where James Kanze and\n+      Dietmar K\u00fchl separately posted articles on why attempting\n+      generic binary I/O was not a good idea.  (Here are copies of\n+      <a class=\"ulink\" href=\"binary_iostreams_kanze.txt\" target=\"_top\">Kanze's article</a> and\n+      <a class=\"ulink\" href=\"binary_iostreams_kuehl.txt\" target=\"_top\">K\u00fchl's article</a>.)\n+   </p><p>Briefly, the problems of byte ordering and type sizes mean that\n+      the unformatted functions like <code class=\"code\">ostream::put()</code> and\n+      <code class=\"code\">istream::get()</code> cannot safely be used to communicate\n+      between arbitrary programs, or across a network, or from one\n+      invocation of a program to another invocation of the same program\n+      on a different platform, etc.\n+   </p><p>The entire Usenet thread is instructive, and took place under the\n+      subject heading \"binary iostreams\" on both comp.std.c++\n+      and comp.lang.c++.moderated in parallel.  Also in that thread,\n+      Dietmar K\u00fchl mentioned that he had written a pair of stream\n+      classes that would read and write XDR, which is a good step towards\n+      a portable binary format.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch27s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt11ch27.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch28.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Binary Input and Output\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a028.\u00a0Interacting with C</td></tr></table></div></body></html>"}, {"sha": "1e7dd0d3eebe9d0ac89dbb6d2d6a309c8797b6f0", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch28.html", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch28.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch28.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch28.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a028.\u00a0Interacting with C</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"io.html\" title=\"Part\u00a0XI.\u00a0Input and Output\" /><link rel=\"prev\" href=\"bk01pt11ch27s03.html\" title=\"More Binary Input and Output\" /><link rel=\"next\" href=\"bk01pt11ch28s02.html\" title=\"Performance\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a028.\u00a0Interacting with C</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch27s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XI.\u00a0Input and Output</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch28s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.io.c\"></a>Chapter\u00a028.\u00a0Interacting with C</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch28.html#manual.io.c.FILE\">Using FILE* and file descriptors</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch28s02.html\">Performance</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.io.c.FILE\"></a>Using FILE* and file descriptors</h2></div></div></div><p>\n+      See the <a class=\"link\" href=\"bk01pt12ch38.html\" title=\"Chapter\u00a038.\u00a0Input and Output\">extensions</a> for using\n+      <span class=\"type\">FILE</span> and <span class=\"type\">file descriptors</span> with\n+      <code class=\"classname\">ofstream</code> and\n+      <code class=\"classname\">ifstream</code>.\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch27s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"io.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch28s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">More Binary Input and Output\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Performance</td></tr></table></div></body></html>"}, {"sha": "2cce3db1a736d3a1227a62547abb1ceb48996cc5", "filename": "libstdc++-v3/doc/html/manual/bk01pt11ch28s02.html", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch28s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch28s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt11ch28s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,46 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Performance</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt11ch28.html\" title=\"Chapter\u00a028.\u00a0Interacting with C\" /><link rel=\"prev\" href=\"bk01pt11ch28.html\" title=\"Chapter\u00a028.\u00a0Interacting with C\" /><link rel=\"next\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Performance</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch28.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a028.\u00a0Interacting with C</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"extensions.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.io.c.sync\"></a>Performance</h2></div></div></div><p>\n+      Pathetic Performance? Ditch C.\n+    </p><p>It sounds like a flame on C, but it isn't.  Really.  Calm down.\n+      I'm just saying it to get your attention.\n+   </p><p>Because the C++ library includes the C library, both C-style and\n+      C++-style I/O have to work at the same time.  For example:\n+   </p><pre class=\"programlisting\">\n+     #include &lt;iostream&gt;\n+     #include &lt;cstdio&gt;\n+\n+     std::cout &lt;&lt; \"Hel\";\n+     std::printf (\"lo, worl\");\n+     std::cout &lt;&lt; \"d!\\n\";\n+   </pre><p>This must do what you think it does.\n+   </p><p>Alert members of the audience will immediately notice that buffering\n+      is going to make a hash of the output unless special steps are taken.\n+   </p><p>The special steps taken by libstdc++, at least for version 3.0,\n+      involve doing very little buffering for the standard streams, leaving\n+      most of the buffering to the underlying C library.  (This kind of\n+      thing is tricky to get right.)\n+      The upside is that correctness is ensured.  The downside is that\n+      writing through <code class=\"code\">cout</code> can quite easily lead to awful\n+      performance when the C++ I/O library is layered on top of the C I/O\n+      library (as it is for 3.0 by default).  Some patches have been applied\n+      which improve the situation for 3.1.\n+   </p><p>However, the C and C++ standard streams only need to be kept in sync\n+      when both libraries' facilities are in use.  If your program only uses\n+      C++ I/O, then there's no need to sync with the C streams.  The right\n+      thing to do in this case is to call\n+   </p><pre class=\"programlisting\">\n+     #include <span class=\"emphasis\"><em>any of the I/O headers such as ios, iostream, etc</em></span>\n+\n+     std::ios::sync_with_stdio(false);\n+   </pre><p>You must do this before performing any I/O via the C++ stream objects.\n+      Once you call this, the C++ streams will operate independently of the\n+      (unused) C streams.  For GCC 3.x, this means that <code class=\"code\">cout</code> and\n+      company will become fully buffered on their own.\n+   </p><p>Note, by the way, that the synchronization requirement only applies to\n+      the standard streams (<code class=\"code\">cin</code>, <code class=\"code\">cout</code>,\n+      <code class=\"code\">cerr</code>,\n+      <code class=\"code\">clog</code>, and their wide-character counterparts).  File stream\n+      objects that you declare yourself have no such requirement and are fully\n+      buffered.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch28.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt11ch28.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"extensions.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a028.\u00a0Interacting with C\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0XII.\u00a0Extensions</td></tr></table></div></body></html>"}, {"sha": "03dc8ee9e504d48dd30c27ba9666b03c7df5f92a", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch29.html", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch29.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch29.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch29.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a029.\u00a0Compile Time Checks</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12pr03.html\" title=\"\" /><link rel=\"next\" href=\"debug_mode.html\" title=\"Chapter\u00a030.\u00a0Debug Mode\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a029.\u00a0Compile Time Checks</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12pr03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug_mode.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.compile_checks\"></a>Chapter\u00a029.\u00a0Compile Time Checks</h2></div></div></div><p>\n+    Also known as concept checking.\n+  </p><p>In 1999, SGI added <span class=\"emphasis\"><em>concept checkers</em></span> to their implementation\n+      of the STL:  code which checked the template parameters of\n+      instantiated pieces of the STL, in order to insure that the parameters\n+      being used met the requirements of the standard.  For example,\n+      the Standard requires that types passed as template parameters to\n+      <code class=\"code\">vector</code> be \u201c<span class=\"quote\">Assignable</span>\u201d (which means what you think\n+      it means).  The checking was done during compilation, and none of\n+      the code was executed at runtime.\n+   </p><p>Unfortunately, the size of the compiler files grew significantly\n+      as a result.  The checking code itself was cumbersome.  And bugs\n+      were found in it on more than one occasion.\n+   </p><p>The primary author of the checking code, Jeremy Siek, had already\n+      started work on a replacement implementation.  The new code has been\n+      formally reviewed and accepted into\n+      <a class=\"ulink\" href=\"http://www.boost.org/libs/concept_check/concept_check.htm\" target=\"_top\">the\n+      Boost libraries</a>, and we are pleased to incorporate it into the\n+      GNU C++ library.\n+   </p><p>The new version imposes a much smaller space overhead on the generated\n+      object file.  The checks are also cleaner and easier to read and\n+      understand.\n+   </p><p>They are off by default for all versions of GCC from 3.0 to 3.4 (the\n+      latest release at the time of writing).\n+      They can be enabled at configure time with\n+      <a class=\"ulink\" href=\"../configopts.html\" target=\"_top\"><code class=\"literal\">--enable-concept-checks</code></a>.\n+      You can enable them on a per-translation-unit basis with\n+      <code class=\"code\">#define _GLIBCXX_CONCEPT_CHECKS</code> for GCC 3.4 and higher\n+      (or with <code class=\"code\">#define _GLIBCPP_CONCEPT_CHECKS</code> for versions\n+      3.1, 3.2 and 3.3).\n+   </p><p>Please note that the upcoming C++ standard has first-class\n+   support for template parameter constraints based on concepts in the core\n+   language. This will obviate the need for the library-simulated concept\n+   checking described above.\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12pr03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"debug_mode.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a030.\u00a0Debug Mode</td></tr></table></div></body></html>"}, {"sha": "c111bffff86425f4800df7c7918731d658dc5e46", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch30s02.html", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Semantics</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      debug&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"debug_mode.html\" title=\"Chapter\u00a030.\u00a0Debug Mode\" /><link rel=\"prev\" href=\"debug_mode.html\" title=\"Chapter\u00a030.\u00a0Debug Mode\" /><link rel=\"next\" href=\"bk01pt12ch30s03.html\" title=\"Using\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Semantics</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"debug_mode.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a030.\u00a0Debug Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch30s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.debug_mode.semantics\"></a>Semantics</h2></div></div></div><p>\n+  </p><p>A program that uses the C++ standard library correctly\n+  will maintain the same semantics under debug mode as it had with\n+  the normal (release) library. All functional and exception-handling\n+  guarantees made by the normal library also hold for the debug mode\n+  library, with one exception: performance guarantees made by the\n+  normal library may not hold in the debug mode library. For\n+  instance, erasing an element in a <code class=\"code\">std::list</code> is a\n+  constant-time operation in normal library, but in debug mode it is\n+  linear in the number of iterators that reference that particular\n+  list. So while your (correct) program won't change its results, it \n+  is likely to execute more slowly.</p><p>libstdc++ includes many extensions to the C++ standard library. In\n+  some cases the extensions are obvious, such as the hashed\n+  associative containers, whereas other extensions give predictable\n+  results to behavior that would otherwise be undefined, such as\n+  throwing an exception when a <code class=\"code\">std::basic_string</code> is\n+  constructed from a NULL character pointer. This latter category also\n+  includes implementation-defined and unspecified semantics, such as\n+  the growth rate of a vector. Use of these extensions is not\n+  considered incorrect, so code that relies on them will not be\n+  rejected by debug mode. However, use of these extensions may affect\n+  the portability of code to other implementations of the C++ standard\n+  library, and is therefore somewhat hazardous. For this reason, the\n+  libstdc++ debug mode offers a \"pedantic\" mode (similar to\n+  GCC's <code class=\"code\">-pedantic</code> compiler flag) that attempts to emulate\n+  the semantics guaranteed by the C++ standard. For\n+  instance, constructing a <code class=\"code\">std::basic_string</code> with a NULL\n+  character pointer would result in an exception under normal mode or\n+  non-pedantic debug mode (this is a libstdc++ extension), whereas\n+  under pedantic debug mode libstdc++ would signal an error. To enable\n+  the pedantic debug mode, compile your program with\n+  both <code class=\"code\">-D_GLIBCXX_DEBUG</code>\n+  and <code class=\"code\">-D_GLIBCXX_DEBUG_PEDANTIC</code> .\n+  (N.B. In GCC 3.4.x and 4.0.0, due to a bug,\n+  <code class=\"code\">-D_GLIBXX_DEBUG_PEDANTIC</code> was also needed. The problem has\n+  been fixed in GCC 4.0.1 and later versions.) </p><p>The following library components provide extra debugging\n+  capabilities in debug mode:</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">std::basic_string</code> (no safe iterators and see note below)</p></li><li><p><code class=\"code\">std::bitset</code></p></li><li><p><code class=\"code\">std::deque</code></p></li><li><p><code class=\"code\">std::list</code></p></li><li><p><code class=\"code\">std::map</code></p></li><li><p><code class=\"code\">std::multimap</code></p></li><li><p><code class=\"code\">std::multiset</code></p></li><li><p><code class=\"code\">std::set</code></p></li><li><p><code class=\"code\">std::vector</code></p></li><li><p><code class=\"code\">std::unordered_map</code></p></li><li><p><code class=\"code\">std::unordered_multimap</code></p></li><li><p><code class=\"code\">std::unordered_set</code></p></li><li><p><code class=\"code\">std::unordered_multiset</code></p></li></ul></div><p>N.B. although there are precondition checks for some string operations,\n+e.g.  <code class=\"code\">operator[]</code>,\n+they will not always be run when using the <code class=\"code\">char</code> and\n+<code class=\"code\">wchar_t</code> specialisations (<code class=\"code\">std::string</code> and\n+<code class=\"code\">std::wstring</code>).  This is because libstdc++ uses GCC's\n+<code class=\"code\">extern template</code> extension to provide explicit instantiations\n+of <code class=\"code\">std::string</code> and <code class=\"code\">std::wstring</code>, and those\n+explicit instantiations don't include the debug-mode checks.  If the\n+containing functions are inlined then the checks will run, so compiling\n+with <code class=\"code\">-O1</code> might be enough to enable them.  Alternatively\n+<code class=\"code\">-D_GLIBCXX_EXTERN_TEMPLATE=0</code> will suppress the declarations\n+of the explicit instantiations and cause the functions to be instantiated\n+with the debug-mode checks included, but this is unsupported and not\n+guaranteed to work.  For full debug-mode support you can use the\n+<code class=\"code\">__gnu_debug::basic_string</code> debugging container directly,\n+which always works correctly.\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"debug_mode.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch30s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a030.\u00a0Debug Mode\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Using</td></tr></table></div></body></html>"}, {"sha": "d52674bbb3de7d82c43773466033bf702a19860e", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch30s03.html", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Using</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      debug&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"debug_mode.html\" title=\"Chapter\u00a030.\u00a0Debug Mode\" /><link rel=\"prev\" href=\"bk01pt12ch30s02.html\" title=\"Semantics\" /><link rel=\"next\" href=\"bk01pt12ch30s04.html\" title=\"Design\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Using</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch30s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a030.\u00a0Debug Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch30s04.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.debug_mode.using\"></a>Using</h2></div></div></div><p>\n+  </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug_mode.using.mode\"></a>Using the Debug Mode</h3></div></div></div><p>To use the libstdc++ debug mode, compile your application with the\n+  compiler flag <code class=\"code\">-D_GLIBCXX_DEBUG</code>. Note that this flag\n+  changes the sizes and behavior of standard class templates such\n+  as <code class=\"code\">std::vector</code>, and therefore you can only link code\n+  compiled with debug mode and code compiled without debug mode if no\n+  instantiation of a container is passed between the two translation\n+  units.</p><p>By default, error messages are formatted to fit on lines of about\n+  78 characters.  The environment variable\n+  <code class=\"code\">GLIBCXX_DEBUG_MESSAGE_LENGTH</code> can be used to request a\n+  different length.</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug_mode.using.specific\"></a>Using a Specific Debug Container</h3></div></div></div><p>When it is not feasible to recompile your entire application, or\n+  only specific containers need checking, debugging containers are\n+  available as GNU extensions. These debugging containers are\n+  functionally equivalent to the standard drop-in containers used in\n+  debug mode, but they are available in a separate namespace as GNU\n+  extensions and may be used in programs compiled with either release\n+  mode or with debug mode. The\n+  following table provides the names and headers of the debugging\n+  containers:\n+</p><div class=\"table\"><a id=\"id400605\"></a><p class=\"title\"><b>Table\u00a030.1.\u00a0Debugging Containers</b></p><div class=\"table-contents\"><table summary=\"Debugging Containers\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col /><col /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::bitset</code></td><td align=\"left\"><code class=\"filename\">bitset</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::bitset</code></td><td align=\"left\"><code class=\"filename\">bitset</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::deque</code></td><td align=\"left\"><code class=\"filename\">deque</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::deque</code></td><td align=\"left\"><code class=\"filename\">deque</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::list</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::list</code></td><td align=\"left\"><code class=\"filename\">list</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::map</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::map</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::multimap</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multimap</code></td><td align=\"left\"><code class=\"filename\">map</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::multiset</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::multiset</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::set</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::set</code></td><td align=\"left\"><code class=\"filename\">set</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::wstring</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::wstring</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::basic_string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::basic_string</code></td><td align=\"left\"><code class=\"filename\">string</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::vector</code></td><td align=\"left\"><code class=\"filename\">vector</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::vector</code></td><td align=\"left\"><code class=\"filename\">vector</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /><p>In addition, when compiling in C++0x mode, these additional\n+containers have additional debug capability.\n+</p><div class=\"table\"><a id=\"id452759\"></a><p class=\"title\"><b>Table\u00a030.2.\u00a0Debugging Containers C++0x</b></p><div class=\"table-contents\"><table summary=\"Debugging Containers C++0x\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col /><col /></colgroup><thead><tr><th align=\"left\">Container</th><th align=\"left\">Header</th><th align=\"left\">Debug container</th><th align=\"left\">Debug header</th><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></thead><tbody><tr><td align=\"left\"><code class=\"classname\">std::unordered_map</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_map</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multimap</code></td><td align=\"left\"><code class=\"filename\">unordered_map</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_set</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_set</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr><tr><td align=\"left\"><code class=\"classname\">std::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td align=\"left\"><code class=\"classname\">__gnu_debug::unordered_multiset</code></td><td align=\"left\"><code class=\"filename\">unordered_set</code></td><td class=\"auto-generated\">\u00a0</td><td class=\"auto-generated\">\u00a0</td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch30s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch30s04.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Semantics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design</td></tr></table></div></body></html>"}, {"sha": "53b2d4c38252f55e06a512ddf4e0f70b8284621a", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch30s04.html", "status": "added", "additions": 409, "deletions": 0, "changes": 409, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s04.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s04.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch30s04.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,409 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Design</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      debug&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"debug_mode.html\" title=\"Chapter\u00a030.\u00a0Debug Mode\" /><link rel=\"prev\" href=\"bk01pt12ch30s03.html\" title=\"Using\" /><link rel=\"next\" href=\"parallel_mode.html\" title=\"Chapter\u00a031.\u00a0Parallel Mode\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Design</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch30s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a030.\u00a0Debug Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"parallel_mode.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.debug_mode.design\"></a>Design</h2></div></div></div><p>\n+  </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.debug_mode.design.goals\"></a>Goals</h3></div></div></div><p>\n+    </p><p> The libstdc++ debug mode replaces unsafe (but efficient) standard\n+  containers and iterators with semantically equivalent safe standard\n+  containers and iterators to aid in debugging user programs. The\n+  following goals directed the design of the libstdc++ debug mode:</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><span class=\"emphasis\"><em>Correctness</em></span>: the libstdc++ debug mode must not change\n+    the semantics of the standard library for all cases specified in\n+    the ANSI/ISO C++ standard. The essence of this constraint is that\n+    any valid C++ program should behave in the same manner regardless\n+    of whether it is compiled with debug mode or release mode. In\n+    particular, entities that are defined in namespace std in release\n+    mode should remain defined in namespace std in debug mode, so that\n+    legal specializations of namespace std entities will remain\n+    valid. A program that is not valid C++ (e.g., invokes undefined\n+    behavior) is not required to behave similarly, although the debug\n+    mode will abort with a diagnostic when it detects undefined\n+    behavior.</p></li><li><p><span class=\"emphasis\"><em>Performance</em></span>: the additional of the libstdc++ debug mode\n+    must not affect the performance of the library when it is compiled\n+    in release mode. Performance of the libstdc++ debug mode is\n+    secondary (and, in fact, will be worse than the release\n+    mode).</p></li><li><p><span class=\"emphasis\"><em>Usability</em></span>: the libstdc++ debug mode should be easy to\n+    use. It should be easily incorporated into the user's development\n+    environment (e.g., by requiring only a single new compiler switch)\n+    and should produce reasonable diagnostics when it detects a\n+    problem with the user program. Usability also involves detection\n+    of errors when using the debug mode incorrectly, e.g., by linking\n+    a release-compiled object against a debug-compiled object if in\n+    fact the resulting program will not run correctly.</p></li><li><p><span class=\"emphasis\"><em>Minimize recompilation</em></span>: While it is expected that\n+    users recompile at least part of their program to use debug\n+    mode, the amount of recompilation affects the\n+    detect-compile-debug turnaround time. This indirectly affects the\n+    usefulness of the debug mode, because debugging some applications\n+    may require rebuilding a large amount of code, which may not be\n+    feasible when the suspect code may be very localized. There are\n+    several levels of conformance to this requirement, each with its\n+    own usability and implementation characteristics. In general, the\n+    higher-numbered conformance levels are more usable (i.e., require\n+    less recompilation) but are more complicated to implement than\n+    the lower-numbered conformance levels. \n+      </p><div class=\"orderedlist\"><ol type=\"1\"><li><p><span class=\"emphasis\"><em>Full recompilation</em></span>: The user must recompile his or\n+\ther entire application and all C++ libraries it depends on,\n+\tincluding the C++ standard library that ships with the\n+\tcompiler. This must be done even if only a small part of the\n+\tprogram can use debugging features.</p></li><li><p><span class=\"emphasis\"><em>Full user recompilation</em></span>: The user must recompile\n+\this or her entire application and all C++ libraries it depends\n+\ton, but not the C++ standard library itself. This must be done\n+\teven if only a small part of the program can use debugging\n+\tfeatures. This can be achieved given a full recompilation\n+\tsystem by compiling two versions of the standard library when\n+\tthe compiler is installed and linking against the appropriate\n+\tone, e.g., a multilibs approach.</p></li><li><p><span class=\"emphasis\"><em>Partial recompilation</em></span>: The user must recompile the\n+\tparts of his or her application and the C++ libraries it\n+\tdepends on that will use the debugging facilities\n+\tdirectly. This means that any code that uses the debuggable\n+\tstandard containers would need to be recompiled, but code\n+\tthat does not use them (but may, for instance, use IOStreams)\n+\twould not have to be recompiled.</p></li><li><p><span class=\"emphasis\"><em>Per-use recompilation</em></span>: The user must recompile the\n+\tparts of his or her application and the C++ libraries it\n+\tdepends on where debugging should occur, and any other code\n+\tthat interacts with those containers. This means that a set of\n+\ttranslation units that accesses a particular standard\n+\tcontainer instance may either be compiled in release mode (no\n+\tchecking) or debug mode (full checking), but must all be\n+\tcompiled in the same way; a translation unit that does not see\n+\tthat standard container instance need not be recompiled. This\n+\talso means that a translation unit <span class=\"emphasis\"><em>A</em></span> that contains a\n+\tparticular instantiation\n+\t(say, <code class=\"code\">std::vector&lt;int&gt;</code>) compiled in release\n+\tmode can be linked against a translation unit <span class=\"emphasis\"><em>B</em></span> that\n+\tcontains the same instantiation compiled in debug mode (a\n+\tfeature not present with partial recompilation). While this\n+\tbehavior is technically a violation of the One Definition\n+\tRule, this ability tends to be very important in\n+\tpractice. The libstdc++ debug mode supports this level of\n+\trecompilation. </p></li><li><p><span class=\"emphasis\"><em>Per-unit recompilation</em></span>: The user must only\n+\trecompile the translation units where checking should occur,\n+\tregardless of where debuggable standard containers are\n+\tused. This has also been dubbed \"<code class=\"code\">-g</code> mode\",\n+\tbecause the <code class=\"code\">-g</code> compiler switch works in this way,\n+\temitting debugging information at a per--translation-unit\n+\tgranularity. We believe that this level of recompilation is in\n+\tfact not possible if we intend to supply safe iterators, leave\n+\tthe program semantics unchanged, and not regress in\n+\tperformance under release mode because we cannot associate\n+\textra information with an iterator (to form a safe iterator)\n+\twithout either reserving that space in release mode\n+\t(performance regression) or allocating extra memory associated\n+\twith each iterator with <code class=\"code\">new</code> (changes the program\n+\tsemantics).</p></li></ol></div><p>\n+    </p></li></ul></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.debug_mode.design.methods\"></a>Methods</h3></div></div></div><p>\n+    </p><p>This section provides an overall view of the design of the\n+  libstdc++ debug mode and details the relationship between design\n+  decisions and the stated design goals.</p><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"debug_mode.design.methods.wrappers\"></a>The Wrapper Model</h4></div></div></div><p>The libstdc++ debug mode uses a wrapper model where the debugging\n+  versions of library components (e.g., iterators and containers) form\n+  a layer on top of the release versions of the library\n+  components. The debugging components first verify that the operation\n+  is correct (aborting with a diagnostic if an error is found) and\n+  will then forward to the underlying release-mode container that will\n+  perform the actual work. This design decision ensures that we cannot\n+  regress release-mode performance (because the release-mode\n+  containers are left untouched) and partially enables <a class=\"ulink\" href=\"#mixing\" target=\"_top\">mixing debug and release code</a> at link time,\n+  although that will not be discussed at this time.</p><p>Two types of wrappers are used in the implementation of the debug\n+  mode: container wrappers and iterator wrappers. The two types of\n+  wrappers interact to maintain relationships between iterators and\n+  their associated containers, which are necessary to detect certain\n+  types of standard library usage errors such as dereferencing\n+  past-the-end iterators or inserting into a container using an\n+  iterator from a different container.</p><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"debug_mode.design.methods.safe_iter\"></a>Safe Iterators</h5></div></div></div><p>Iterator wrappers provide a debugging layer over any iterator that\n+  is attached to a particular container, and will manage the\n+  information detailing the iterator's state (singular,\n+  dereferenceable, etc.) and tracking the container to which the\n+  iterator is attached. Because iterators have a well-defined, common\n+  interface the iterator wrapper is implemented with the iterator\n+  adaptor class template <code class=\"code\">__gnu_debug::_Safe_iterator</code>,\n+  which takes two template parameters:</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">Iterator</code>: The underlying iterator type, which must\n+    be either the <code class=\"code\">iterator</code> or <code class=\"code\">const_iterator</code>\n+    typedef from the sequence type this iterator can reference.</p></li><li><p><code class=\"code\">Sequence</code>: The type of sequence that this iterator\n+  references. This sequence must be a safe sequence (discussed below)\n+  whose <code class=\"code\">iterator</code> or <code class=\"code\">const_iterator</code> typedef\n+  is the type of the safe iterator.</p></li></ul></div></div><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"debug_mode.design.methods.safe_seq\"></a>Safe Sequences (Containers)</h5></div></div></div><p>Container wrappers provide a debugging layer over a particular\n+  container type. Because containers vary greatly in the member\n+  functions they support and the semantics of those member functions\n+  (especially in the area of iterator invalidation), container\n+  wrappers are tailored to the container they reference, e.g., the\n+  debugging version of <code class=\"code\">std::list</code> duplicates the entire\n+  interface of <code class=\"code\">std::list</code>, adding additional semantic\n+  checks and then forwarding operations to the\n+  real <code class=\"code\">std::list</code> (a public base class of the debugging\n+  version) as appropriate. However, all safe containers inherit from\n+  the class template <code class=\"code\">__gnu_debug::_Safe_sequence</code>,\n+  instantiated with the type of the safe container itself (an instance\n+  of the curiously recurring template pattern).</p><p>The iterators of a container wrapper will be \n+  <a class=\"ulink\" href=\"#safe_iterator\" target=\"_top\">safe iterators</a> that reference sequences\n+  of this type and wrap the iterators provided by the release-mode\n+  base class. The debugging container will use only the safe\n+  iterators within its own interface (therefore requiring the user to\n+  use safe iterators, although this does not change correct user\n+  code) and will communicate with the release-mode base class with\n+  only the underlying, unsafe, release-mode iterators that the base\n+  class exports.</p><p> The debugging version of <code class=\"code\">std::list</code> will have the\n+  following basic structure:</p><pre class=\"programlisting\">\n+template&lt;typename _Tp, typename _Allocator = allocator&lt;_Tp&gt;\n+  class debug-list :\n+    public release-list&lt;_Tp, _Allocator&gt;,\n+    public __gnu_debug::_Safe_sequence&lt;debug-list&lt;_Tp, _Allocator&gt; &gt;\n+  {\n+    typedef release-list&lt;_Tp, _Allocator&gt; _Base;\n+    typedef debug-list&lt;_Tp, _Allocator&gt;   _Self;\n+\n+  public:\n+    typedef __gnu_debug::_Safe_iterator&lt;typename _Base::iterator, _Self&gt;       iterator;\n+    typedef __gnu_debug::_Safe_iterator&lt;typename _Base::const_iterator, _Self&gt; const_iterator;\n+\n+    // duplicate std::list interface with debugging semantics\n+  };\n+</pre></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"debug_mode.design.methods.precond\"></a>Precondition Checking</h4></div></div></div><p>The debug mode operates primarily by checking the preconditions of\n+  all standard library operations that it supports. Preconditions that\n+  are always checked (regardless of whether or not we are in debug\n+  mode) are checked via the <code class=\"code\">__check_xxx</code> macros defined\n+  and documented in the source\n+  file <code class=\"code\">include/debug/debug.h</code>. Preconditions that may or\n+  may not be checked, depending on the debug-mode\n+  macro <code class=\"code\">_GLIBCXX_DEBUG</code>, are checked via\n+  the <code class=\"code\">__requires_xxx</code> macros defined and documented in the\n+  same source file. Preconditions are validated using any additional\n+  information available at run-time, e.g., the containers that are\n+  associated with a particular iterator, the position of the iterator\n+  within those containers, the distance between two iterators that may\n+  form a valid range, etc. In the absence of suitable information,\n+  e.g., an input iterator that is not a safe iterator, these\n+  precondition checks will silently succeed.</p><p>The majority of precondition checks use the aforementioned macros,\n+  which have the secondary benefit of having prewritten debug\n+  messages that use information about the current status of the\n+  objects involved (e.g., whether an iterator is singular or what\n+  sequence it is attached to) along with some static information\n+  (e.g., the names of the function parameters corresponding to the\n+  objects involved). When not using these macros, the debug mode uses\n+  either the debug-mode assertion\n+  macro <code class=\"code\">_GLIBCXX_DEBUG_ASSERT</code> , its pedantic\n+  cousin <code class=\"code\">_GLIBCXX_DEBUG_PEDASSERT</code>, or the assertion\n+  check macro that supports more advance formulation of error\n+  messages, <code class=\"code\">_GLIBCXX_DEBUG_VERIFY</code>. These macros are\n+  documented more thoroughly in the debug mode source code.</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"debug_mode.design.methods.coexistence\"></a>Release- and debug-mode coexistence</h4></div></div></div><p>The libstdc++ debug mode is the first debug mode we know of that\n+  is able to provide the \"Per-use recompilation\" (4) guarantee, that\n+  allows release-compiled and debug-compiled code to be linked and\n+  executed together without causing unpredictable behavior. This\n+  guarantee minimizes the recompilation that users are required to\n+  perform, shortening the detect-compile-debug bughunting cycle\n+  and making the debug mode easier to incorporate into development\n+  environments by minimizing dependencies.</p><p>Achieving link- and run-time coexistence is not a trivial\n+  implementation task. To achieve this goal we required a small\n+  extension to the GNU C++ compiler (described in the GCC Manual for\n+  C++ Extensions, see <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Strong-Using.html\" target=\"_top\">strong\n+  using</a>), and a complex organization of debug- and\n+  release-modes. The end result is that we have achieved per-use\n+  recompilation but have had to give up some checking of the\n+  <code class=\"code\">std::basic_string</code> class template (namely, safe\n+  iterators).\n+</p><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"methods.coexistence.compile\"></a>Compile-time coexistence of release- and debug-mode components</h5></div></div></div><p>Both the release-mode components and the debug-mode\n+  components need to exist within a single translation unit so that\n+  the debug versions can wrap the release versions. However, only one\n+  of these components should be user-visible at any particular\n+  time with the standard name, e.g., <code class=\"code\">std::list</code>. </p><p>In release mode, we define only the release-mode version of the\n+  component with its standard name and do not include the debugging\n+  component at all. The release mode version is defined within the\n+  namespace <code class=\"code\">std</code>. Minus the namespace associations, this\n+  method leaves the behavior of release mode completely unchanged from\n+  its behavior prior to the introduction of the libstdc++ debug\n+  mode. Here's an example of what this ends up looking like, in\n+  C++.</p><pre class=\"programlisting\">\n+namespace std\n+{\n+  template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+    class list\n+    {\n+      // ...\n+     };\n+} // namespace std\n+</pre><p>In debug mode we include the release-mode container (which is now\n+defined in in the namespace <code class=\"code\">__norm</code>) and also the\n+debug-mode container. The debug-mode container is defined within the\n+namespace <code class=\"code\">__debug</code>, which is associated with namespace\n+<code class=\"code\">std</code> via the GNU namespace association extension.  This\n+method allows the debug and release versions of the same component to\n+coexist at compile-time and link-time without causing an unreasonable\n+maintenance burden, while minimizing confusion. Again, this boils down\n+to C++ code as follows:</p><pre class=\"programlisting\">\n+namespace std\n+{\n+  namespace __norm\n+  {\n+    template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+      class list\n+      {\n+        // ...\n+      };\n+  } // namespace __gnu_norm\n+\n+  namespace __debug\n+  {\n+    template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n+      class list\n+      : public __norm::list&lt;_Tp, _Alloc&gt;,\n+        public __gnu_debug::_Safe_sequence&lt;list&lt;_Tp, _Alloc&gt; &gt;\n+      {\n+        // ...\n+      };\n+  } // namespace __norm\n+\n+  using namespace __debug __attribute__ ((strong));\n+}\n+</pre></div><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"methods.coexistence.link\"></a>Link- and run-time coexistence of release- and\n+    debug-mode components</h5></div></div></div><p>Because each component has a distinct and separate release and\n+debug implementation, there are are no issues with link-time\n+coexistence: the separate namespaces result in different mangled\n+names, and thus unique linkage.</p><p>However, components that are defined and used within the C++\n+standard library itself face additional constraints. For instance,\n+some of the member functions of <code class=\"code\"> std::moneypunct</code> return\n+<code class=\"code\">std::basic_string</code>. Normally, this is not a problem, but\n+with a mixed mode standard library that could be using either\n+debug-mode or release-mode <code class=\"code\"> basic_string</code> objects, things\n+get more complicated.  As the return value of a function is not\n+encoded into the mangled name, there is no way to specify a\n+release-mode or a debug-mode string. In practice, this results in\n+runtime errors. A simplified example of this problem is as follows.\n+</p><p> Take this translation unit, compiled in debug-mode: </p><pre class=\"programlisting\">\n+// -D_GLIBCXX_DEBUG\n+#include &lt;string&gt;\n+\n+std::string test02();\n+ \n+std::string test01()\n+{\n+  return test02();\n+}\n+ \n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+</pre><p> ... and linked to this translation unit, compiled in release mode:</p><pre class=\"programlisting\">\n+#include &lt;string&gt;\n+ \n+std::string\n+test02()\n+{\n+  return std::string(\"toast\");\n+}\n+</pre><p> For this reason we cannot easily provide safe iterators for\n+  the <code class=\"code\">std::basic_string</code> class template, as it is present\n+  throughout the C++ standard library. For instance, locale facets\n+  define typedefs that include <code class=\"code\">basic_string</code>: in a mixed\n+  debug/release program, should that typedef be based on the\n+  debug-mode <code class=\"code\">basic_string</code> or the\n+  release-mode <code class=\"code\">basic_string</code>? While the answer could be\n+  \"both\", and the difference hidden via renaming a la the\n+  debug/release containers, we must note two things about locale\n+  facets:</p><div class=\"orderedlist\"><ol type=\"1\"><li><p>They exist as shared state: one can create a facet in one\n+  translation unit and access the facet via the same type name in a\n+  different translation unit. This means that we cannot have two\n+  different versions of locale facets, because the types would not be\n+  the same across debug/release-mode translation unit barriers.</p></li><li><p>They have virtual functions returning strings: these functions\n+  mangle in the same way regardless of the mangling of their return\n+  types (see above), and their precise signatures can be relied upon\n+  by users because they may be overridden in derived classes.</p></li></ol></div><p>With the design of libstdc++ debug mode, we cannot effectively hide\n+  the differences between debug and release-mode strings from the\n+  user. Failure to hide the differences may result in unpredictable\n+  behavior, and for this reason we have opted to only\n+  perform <code class=\"code\">basic_string</code> changes that do not require ABI\n+  changes. The effect on users is expected to be minimal, as there are\n+  simple alternatives (e.g., <code class=\"code\">__gnu_debug::basic_string</code>),\n+  and the usability benefit we gain from the ability to mix debug- and\n+  release-compiled translation units is enormous.</p></div><div class=\"sect4\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h5 class=\"title\"><a id=\"methods.coexistence.alt\"></a>Alternatives for Coexistence</h5></div></div></div><p>The coexistence scheme above was chosen over many alternatives,\n+  including language-only solutions and solutions that also required\n+  extensions to the C++ front end. The following is a partial list of\n+  solutions, with justifications for our rejection of each.</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><span class=\"emphasis\"><em>Completely separate debug/release libraries</em></span>: This is by\n+  far the simplest implementation option, where we do not allow any\n+  coexistence of debug- and release-compiled translation units in a\n+  program. This solution has an extreme negative affect on usability,\n+  because it is quite likely that some libraries an application\n+  depends on cannot be recompiled easily. This would not meet\n+  our <span class=\"emphasis\"><em>usability</em></span> or <span class=\"emphasis\"><em>minimize recompilation</em></span> criteria\n+  well.</p></li><li><p><span class=\"emphasis\"><em>Add a <code class=\"code\">Debug</code> boolean template parameter</em></span>:\n+  Partial specialization could be used to select the debug\n+  implementation when <code class=\"code\">Debug == true</code>, and the state\n+  of <code class=\"code\">_GLIBCXX_DEBUG</code> could decide whether the\n+  default <code class=\"code\">Debug</code> argument is <code class=\"code\">true</code>\n+  or <code class=\"code\">false</code>. This option would break conformance with the\n+  C++ standard in both debug <span class=\"emphasis\"><em>and</em></span> release modes. This would\n+  not meet our <span class=\"emphasis\"><em>correctness</em></span> criteria. </p></li><li><p><span class=\"emphasis\"><em>Packaging a debug flag in the allocators</em></span>: We could\n+    reuse the <code class=\"code\">Allocator</code> template parameter of containers\n+    by adding a sentinel wrapper <code class=\"code\">debug&lt;&gt;</code> that\n+    signals the user's intention to use debugging, and pick up\n+    the <code class=\"code\">debug&lt;&gt;</code> allocator wrapper in a partial\n+    specialization. However, this has two drawbacks: first, there is a\n+    conformance issue because the default allocator would not be the\n+    standard-specified <code class=\"code\">std::allocator&lt;T&gt;</code>. Secondly\n+    (and more importantly), users that specify allocators instead of\n+    implicitly using the default allocator would not get debugging\n+    containers. Thus this solution fails the <span class=\"emphasis\"><em>correctness</em></span>\n+    criteria.</p></li><li><p><span class=\"emphasis\"><em>Define debug containers in another namespace, and employ\n+      a <code class=\"code\">using</code> declaration (or directive)</em></span>: This is an\n+      enticing option, because it would eliminate the need for\n+      the <code class=\"code\">link_name</code> extension by aliasing the\n+      templates. However, there is no true template aliasing mechanism\n+      is C++, because both <code class=\"code\">using</code> directives and using\n+      declarations disallow specialization. This method fails\n+      the <span class=\"emphasis\"><em>correctness</em></span> criteria.</p></li><li><p><span class=\"emphasis\"><em> Use implementation-specific properties of anonymous\n+    namespaces. </em></span>\n+    See <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2003-08/msg00004.html\" target=\"_top\"> this post\n+    </a>\n+    This method fails the <span class=\"emphasis\"><em>correctness</em></span> criteria.</p></li><li><p><span class=\"emphasis\"><em>Extension: allow reopening on namespaces</em></span>: This would\n+    allow the debug mode to effectively alias the\n+    namespace <code class=\"code\">std</code> to an internal namespace, such\n+    as <code class=\"code\">__gnu_std_debug</code>, so that it is completely\n+    separate from the release-mode <code class=\"code\">std</code> namespace. While\n+    this will solve some renaming problems and ensure that\n+    debug- and release-compiled code cannot be mixed unsafely, it ensures that\n+    debug- and release-compiled code cannot be mixed at all. For\n+    instance, the program would have two <code class=\"code\">std::cout</code>\n+    objects! This solution would fails the <span class=\"emphasis\"><em>minimize\n+    recompilation</em></span> requirement, because we would only be able to\n+    support option (1) or (2).</p></li><li><p><span class=\"emphasis\"><em>Extension: use link name</em></span>: This option involves\n+    complicated re-naming between debug-mode and release-mode\n+    components at compile time, and then a g++ extension called <span class=\"emphasis\"><em>\n+    link name </em></span> to recover the original names at link time. There\n+    are two drawbacks to this approach. One, it's very verbose,\n+    relying on macro renaming at compile time and several levels of\n+    include ordering. Two, ODR issues remained with container member\n+    functions taking no arguments in mixed-mode settings resulting in\n+    equivalent link names, <code class=\"code\"> vector::push_back() </code> being\n+    one example. \n+    See <a class=\"ulink\" href=\"http://gcc.gnu.org/ml/libstdc++/2003-08/msg00177.html\" target=\"_top\">link\n+    name</a> </p></li></ul></div><p>Other options may exist for implementing the debug mode, many of\n+  which have probably been considered and others that may still be\n+  lurking. This list may be expanded over time to include other\n+  options that we could have implemented, but in all cases the full\n+  ramifications of the approach (as measured against the design goals\n+  for a libstdc++ debug mode) should be considered first. The DejaGNU\n+  testsuite includes some testcases that check for known problems with\n+  some solutions (e.g., the <code class=\"code\">using</code> declaration solution\n+  that breaks user specialization), and additional testcases will be\n+  added as we are able to identify other typical problem cases. These\n+  test cases will serve as a benchmark by which we can compare debug\n+  mode implementations.</p></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.debug_mode.design.other\"></a>Other Implementations</h3></div></div></div><p>\n+    </p><p> There are several existing implementations of debug modes for C++\n+  standard library implementations, although none of them directly\n+  supports debugging for programs using libstdc++. The existing\n+  implementations include:</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><a class=\"ulink\" href=\"http://www.mathcs.sjsu.edu/faculty/horstman/safestl.html\" target=\"_top\">SafeSTL</a>:\n+  SafeSTL was the original debugging version of the Standard Template\n+  Library (STL), implemented by Cay S. Horstmann on top of the\n+  Hewlett-Packard STL. Though it inspired much work in this area, it\n+  has not been kept up-to-date for use with modern compilers or C++\n+  standard library implementations.</p></li><li><p><a class=\"ulink\" href=\"http://www.stlport.org/\" target=\"_top\">STLport</a>: STLport is a free\n+  implementation of the C++ standard library derived from the <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/\" target=\"_top\">SGI implementation</a>, and\n+  ported to many other platforms. It includes a debug mode that uses a\n+  wrapper model (that in some way inspired the libstdc++ debug mode\n+  design), although at the time of this writing the debug mode is\n+  somewhat incomplete and meets only the \"Full user recompilation\" (2)\n+  recompilation guarantee by requiring the user to link against a\n+  different library in debug mode vs. release mode.</p></li><li><p><a class=\"ulink\" href=\"http://www.metrowerks.com/mw/default.htm\" target=\"_top\">Metrowerks\n+  CodeWarrior</a>: The C++ standard library that ships with Metrowerks\n+  CodeWarrior includes a debug mode. It is a full debug-mode\n+  implementation (including debugging for CodeWarrior extensions) and\n+  is easy to use, although it meets only the \"Full recompilation\" (1)\n+  recompilation guarantee.</p></li></ul></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch30s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"debug_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"parallel_mode.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Using\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a031.\u00a0Parallel Mode</td></tr></table></div></body></html>"}, {"sha": "e06362edd9f3db9c9dde465650b3228dc5cf8e67", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch31s02.html", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Semantics</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      parallel&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"parallel_mode.html\" title=\"Chapter\u00a031.\u00a0Parallel Mode\" /><link rel=\"prev\" href=\"parallel_mode.html\" title=\"Chapter\u00a031.\u00a0Parallel Mode\" /><link rel=\"next\" href=\"bk01pt12ch31s03.html\" title=\"Using\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Semantics</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"parallel_mode.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a031.\u00a0Parallel Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch31s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.parallel_mode.semantics\"></a>Semantics</h2></div></div></div><p> The parallel mode STL algorithms are currently not exception-safe,\n+i. e. user-defined functors must not throw exceptions.\n+</p><p> Since the current GCC OpenMP implementation does not support\n+OpenMP parallel regions in concurrent threads,\n+it is not possible to call parallel STL algorithm in\n+concurrent threads, either.\n+It might work with other compilers, though.</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"parallel_mode.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"parallel_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch31s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a031.\u00a0Parallel Mode\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Using</td></tr></table></div></body></html>"}, {"sha": "0bc7ae5d2ab6343188d6525d8b6e749b96478741", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch31s03.html", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Using</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      parallel&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"parallel_mode.html\" title=\"Chapter\u00a031.\u00a0Parallel Mode\" /><link rel=\"prev\" href=\"bk01pt12ch31s02.html\" title=\"Semantics\" /><link rel=\"next\" href=\"bk01pt12ch31s04.html\" title=\"Design\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Using</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a031.\u00a0Parallel Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch31s04.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.parallel_mode.using\"></a>Using</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"parallel_mode.using.parallel_mode\"></a>Using Parallel Mode</h3></div></div></div><p>To use the libstdc++ parallel mode, compile your application with\n+  the compiler flag <code class=\"code\">-D_GLIBCXX_PARALLEL -fopenmp</code>. This\n+  will link in <code class=\"code\">libgomp</code>, the GNU OpenMP <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libgomp\" target=\"_top\">implementation</a>,\n+  whose presence is mandatory. In addition, hardware capable of atomic\n+  operations is mandatory. Actually activating these atomic\n+  operations may require explicit compiler flags on some targets\n+  (like sparc and x86), such as <code class=\"code\">-march=i686</code>,\n+  <code class=\"code\">-march=native</code> or <code class=\"code\">-mcpu=v9</code>.\n+</p><p>Note that the <code class=\"code\">_GLIBCXX_PARALLEL</code> define may change the\n+  sizes and behavior of standard class templates such as\n+  <code class=\"code\">std::search</code>, and therefore one can only link code\n+  compiled with parallel mode and code compiled without parallel mode\n+  if no instantiation of a container is passed between the two\n+  translation units. Parallel mode functionality has distinct linkage,\n+  and cannot be confused with normal mode symbols.</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.parallel_mode.usings\"></a>Using Specific Parallel Components</h3></div></div></div><p>When it is not feasible to recompile your entire application, or\n+  only specific algorithms need to be parallel-aware, individual\n+  parallel algorithms can be made available explicitly. These\n+  parallel algorithms are functionally equivalent to the standard\n+  drop-in algorithms used in parallel mode, but they are available in\n+  a separate namespace as GNU extensions and may be used in programs\n+  compiled with either release mode or with parallel mode. The\n+  following table provides the names and headers of the parallel\n+  algorithms:\n+</p><div class=\"table\"><a id=\"id419374\"></a><p class=\"title\"><b>Table\u00a031.1.\u00a0Parallel Algorithms</b></p><div class=\"table-contents\"><table summary=\"Parallel Algorithms\" border=\"1\"><colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /><col align=\"left\" /></colgroup><thead><tr><th align=\"left\">Algorithm</th><th align=\"left\">Header</th><th align=\"left\">Parallel algorithm</th><th align=\"left\">Parallel header</th></tr></thead><tbody><tr><td align=\"left\"><code class=\"function\">std::accumulate</code></td><td align=\"left\"><code class=\"filename\">numeric</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::accumulate</code></td><td align=\"left\"><code class=\"filename\">parallel/numeric</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::adjacent_difference</code></td><td align=\"left\"><code class=\"filename\">numeric</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::adjacent_difference</code></td><td align=\"left\"><code class=\"filename\">parallel/numeric</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::inner_product</code></td><td align=\"left\"><code class=\"filename\">numeric</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::inner_product</code></td><td align=\"left\"><code class=\"filename\">parallel/numeric</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::partial_sum</code></td><td align=\"left\"><code class=\"filename\">numeric</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::partial_sum</code></td><td align=\"left\"><code class=\"filename\">parallel/numeric</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::adjacent_find</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::adjacent_find</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::count</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::count</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::count_if</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::count_if</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::equal</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::equal</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::find</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::find</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::find_if</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::find_if</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::find_first_of</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::find_first_of</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::for_each</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::for_each</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::generate</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::generate</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::generate_n</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::generate_n</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::lexicographical_compare</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::lexicographical_compare</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::mismatch</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::mismatch</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::search</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::search</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::search_n</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::search_n</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::transform</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::transform</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::replace</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::replace</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::replace_if</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::replace_if</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::max_element</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::max_element</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::merge</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::merge</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::min_element</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::min_element</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::nth_element</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::nth_element</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::partial_sort</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::partial_sort</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::partition</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::partition</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::random_shuffle</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::random_shuffle</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::set_union</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::set_union</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::set_intersection</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::set_intersection</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::set_symmetric_difference</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::set_symmetric_difference</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::set_difference</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::set_difference</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::sort</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::sort</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::stable_sort</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::stable_sort</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr><tr><td align=\"left\"><code class=\"function\">std::unique_copy</code></td><td align=\"left\"><code class=\"filename\">algorithm</code></td><td align=\"left\"><code class=\"function\">__gnu_parallel::unique_copy</code></td><td align=\"left\"><code class=\"filename\">parallel/algorithm</code></td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"parallel_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch31s04.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Semantics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Design</td></tr></table></div></body></html>"}, {"sha": "99c1356d85abfddb4049b7e28d71d0667da87c9d", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch31s04.html", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s04.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s04.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s04.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Design</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      parallel&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"parallel_mode.html\" title=\"Chapter\u00a031.\u00a0Parallel Mode\" /><link rel=\"prev\" href=\"bk01pt12ch31s03.html\" title=\"Using\" /><link rel=\"next\" href=\"bk01pt12ch31s05.html\" title=\"Testing\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Design</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a031.\u00a0Parallel Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch31s05.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.parallel_mode.design\"></a>Design</h2></div></div></div><p>\n+  </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.parallel_mode.design.intro\"></a>Interface Basics</h3></div></div></div><p>All parallel algorithms are intended to have signatures that are\n+equivalent to the ISO C++ algorithms replaced. For instance, the\n+<code class=\"code\">std::adjacent_find</code> function is declared as:\n+</p><pre class=\"programlisting\">\n+namespace std\n+{\n+  template&lt;typename _FIter&gt;\n+    _FIter\n+    adjacent_find(_FIter, _FIter);\n+}\n+</pre><p>\n+Which means that there should be something equivalent for the parallel\n+version. Indeed, this is the case:\n+</p><pre class=\"programlisting\">\n+namespace std\n+{\n+  namespace __parallel\n+  {\n+    template&lt;typename _FIter&gt;\n+      _FIter\n+      adjacent_find(_FIter, _FIter);\n+\n+    ...\n+  }\n+}\n+</pre><p>But.... why the elipses?\n+</p><p> The elipses in the example above represent additional overloads\n+required for the parallel version of the function. These additional\n+overloads are used to dispatch calls from the ISO C++ function\n+signature to the appropriate parallel function (or sequential\n+function, if no parallel functions are deemed worthy), based on either\n+compile-time or run-time conditions.\n+</p><p> Compile-time conditions are referred to as \"embarrassingly\n+parallel,\" and are denoted with the appropriate dispatch object, ie\n+one of <code class=\"code\">__gnu_parallel::sequential_tag</code>,\n+<code class=\"code\">__gnu_parallel::parallel_tag</code>,\n+<code class=\"code\">__gnu_parallel::balanced_tag</code>,\n+<code class=\"code\">__gnu_parallel::unbalanced_tag</code>,\n+<code class=\"code\">__gnu_parallel::omp_loop_tag</code>, or\n+<code class=\"code\">__gnu_parallel::omp_loop_static_tag</code>.\n+</p><p> Run-time conditions depend on the hardware being used, the number\n+of threads available, etc., and are denoted by the use of the enum\n+<code class=\"code\">__gnu_parallel::parallelism</code>. Values of this enum include\n+<code class=\"code\">__gnu_parallel::sequential</code>,\n+<code class=\"code\">__gnu_parallel::parallel_unbalanced</code>,\n+<code class=\"code\">__gnu_parallel::parallel_balanced</code>,\n+<code class=\"code\">__gnu_parallel::parallel_omp_loop</code>,\n+<code class=\"code\">__gnu_parallel::parallel_omp_loop_static</code>, or\n+<code class=\"code\">__gnu_parallel::parallel_taskqueue</code>.\n+</p><p> Putting all this together, the general view of overloads for the\n+parallel algorithms look like this:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>ISO C++ signature</p></li><li><p>ISO C++ signature + sequential_tag argument</p></li><li><p>ISO C++ signature + parallelism argument</p></li></ul></div><p> Please note that the implementation may use additional functions\n+(designated with the <code class=\"code\">_switch</code> suffix) to dispatch from the\n+ISO C++ signature to the correct parallel version. Also, some of the\n+algorithms do not have support for run-time conditions, so the last\n+overload is therefore missing.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.parallel_mode.design.tuning\"></a>Configuration and Tuning</h3></div></div></div><p> Some algorithm variants can be enabled/disabled/selected at compile-time.\n+See <a class=\"ulink\" href=\"latest-doxygen/compiletime__settings_8h.html\" target=\"_top\">\n+<code class=\"code\">&lt;compiletime_settings.h&gt;</code></a> and\n+See <a class=\"ulink\" href=\"latest-doxygen/compiletime__settings_8h.html\" target=\"_top\">\n+<code class=\"code\">&lt;features.h&gt;</code></a> for details.\n+</p><p>\n+To specify the number of threads to be used for an algorithm,\n+use <code class=\"code\">omp_set_num_threads</code>.\n+To force a function to execute sequentially,\n+even though parallelism is switched on in general,\n+add <code class=\"code\">__gnu_parallel::sequential_tag()</code>\n+to the end of the argument list.\n+</p><p>\n+Parallelism always incurs some overhead. Thus, it is not\n+helpful to parallelize operations on very small sets of data.\n+There are measures to avoid parallelizing stuff that is not worth it.\n+For each algorithm, a minimum problem size can be stated,\n+usually using the variable\n+<code class=\"code\">__gnu_parallel::Settings::[algorithm]_minimal_n</code>.\n+Please see <a class=\"ulink\" href=\"latest-doxygen/settings_8h.html\" target=\"_top\">\n+<code class=\"code\">&lt;settings.h&gt;</code></a> for details.</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.parallel_mode.design.impl\"></a>Implementation Namespaces</h3></div></div></div><p> One namespace contain versions of code that are explicitly sequential:\n+<code class=\"code\">__gnu_serial</code>.\n+</p><p> Two namespaces contain the parallel mode:\n+<code class=\"code\">std::__parallel</code> and <code class=\"code\">__gnu_parallel</code>. \n+</p><p> Parallel implementations of standard components, including\n+template helpers to select parallelism, are defined in <code class=\"code\">namespace\n+std::__parallel</code>. For instance, <code class=\"code\">std::transform</code> from\n+&lt;algorithm&gt; has a parallel counterpart in\n+<code class=\"code\">std::__parallel::transform</code> from\n+&lt;parallel/algorithm&gt;. In addition, these parallel\n+implementations are injected into <code class=\"code\">namespace\n+__gnu_parallel</code> with using declarations.\n+</p><p> Support and general infrastructure is in <code class=\"code\">namespace\n+__gnu_parallel</code>.\n+</p><p> More information, and an organized index of types and functions\n+related to the parallel mode on a per-namespace basis, can be found in\n+the generated source documentation.\n+</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"parallel_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch31s05.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Using\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Testing</td></tr></table></div></body></html>"}, {"sha": "698ba3906de2b821d6679a11dbb8be2d59de557a", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch31s05.html", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s05.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s05.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch31s05.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Testing</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      parallel&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"parallel_mode.html\" title=\"Chapter\u00a031.\u00a0Parallel Mode\" /><link rel=\"prev\" href=\"bk01pt12ch31s04.html\" title=\"Design\" /><link rel=\"next\" href=\"bk01pt12ch32.html\" title=\"Chapter\u00a032.\u00a0Allocators\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Testing</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s04.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a031.\u00a0Parallel Mode</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch32.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.parallel_mode.test\"></a>Testing</h2></div></div></div><p> \n+    Both the normal conformance and regression tests and the\n+    supplemental performance tests work.\n+  </p><p> \n+    To run the conformance and regression tests with the parallel mode\n+    active,\n+  </p><pre class=\"screen\">\n+  <strong class=\"userinput\"><code>make check-parallel</code></strong>\n+  </pre><p>\n+    The log and summary files for conformance testing are in the\n+    <code class=\"code\">testsuite/parallel</code> directory.\n+  </p><p> \n+    To run the performance tests with the parallel mode active,\n+  </p><pre class=\"screen\">\n+  <strong class=\"userinput\"><code>check-performance-parallel</code></strong>\n+  </pre><p>\n+    The result file for performance testing are in the\n+    <code class=\"code\">testsuite</code> directory, in the file\n+    <code class=\"code\">libstdc++_performance.sum</code>. In addition, the\n+    policy-based containers have their own visualizations, which have\n+    additional software dependencies than the usual bare-boned text\n+    file, and can be generated by using the <code class=\"code\">make\n+    doc-performance</code> rule in the testsuite's Makefile.\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s04.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"parallel_mode.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch32.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Design\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a032.\u00a0Allocators</td></tr></table></div></body></html>"}, {"sha": "444c16223e8de2c5cb5e25362d72fda2624d6c2d", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch32.html", "status": "added", "additions": 394, "deletions": 0, "changes": 394, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch32.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch32.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch32.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,394 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a032.\u00a0Allocators</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch31s05.html\" title=\"Testing\" /><link rel=\"next\" href=\"bitmap_allocator.html\" title=\"bitmap_allocator\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a032.\u00a0Allocators</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s05.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bitmap_allocator.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.allocator\"></a>Chapter\u00a032.\u00a0Allocators</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt12ch32.html#manual.ext.allocator.mt\">mt_allocator</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.intro\">Intro</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.design_issues\">Design Issues</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.example_single\">Single Thread Example</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.example_multi\">Multiple Thread Example</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bitmap_allocator.html\">bitmap_allocator</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bitmap_allocator.html#allocator.bitmap.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"bitmap_allocator.html#allocator.bitmap.impl\">Implementation</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.allocator.mt\"></a>mt_allocator</h2></div></div></div><p>\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.mt.intro\"></a>Intro</h3></div></div></div><p> \n+  The mt allocator [hereinafter referred to simply as \"the allocator\"]\n+  is a fixed size (power of two) allocator that was initially\n+  developed specifically to suit the needs of multi threaded\n+  applications [hereinafter referred to as an MT application]. Over\n+  time the allocator has evolved and been improved in many ways, in\n+  particular it now also does a good job in single threaded\n+  applications [hereinafter referred to as a ST application]. (Note:\n+  In this document, when referring to single threaded applications\n+  this also includes applications that are compiled with gcc without\n+  thread support enabled. This is accomplished using ifdef's on\n+  __GTHREADS). This allocator is tunable, very flexible, and capable\n+  of high-performance.\n+</p><p>\n+  The aim of this document is to describe - from an application point of\n+  view - the \"inner workings\" of the allocator.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.mt.design_issues\"></a>Design Issues</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"allocator.mt.overview\"></a>Overview</h4></div></div></div><p> There are three general components to the allocator: a datum\n+describing the characteristics of the memory pool, a policy class\n+containing this pool that links instantiation types to common or\n+individual pools, and a class inheriting from the policy class that is\n+the actual allocator.\n+</p><p>The datum describing pools characteristics is \n+</p><pre class=\"programlisting\">\n+  template&lt;bool _Thread&gt;\n+    class __pool\n+</pre><p> This class is parametrized on thread support, and is explicitly\n+specialized for both multiple threads (with <code class=\"code\">bool==true</code>)\n+and single threads (via <code class=\"code\">bool==false</code>.) It is possible to\n+use a custom pool datum instead of the default class that is provided.\n+</p><p> There are two distinct policy classes, each of which can be used\n+with either type of underlying pool datum.\n+</p><pre class=\"programlisting\">\n+  template&lt;bool _Thread&gt;\n+    struct __common_pool_policy\n+\n+  template&lt;typename _Tp, bool _Thread&gt;\n+    struct __per_type_pool_policy\n+</pre><p> The first policy, <code class=\"code\">__common_pool_policy</code>, implements a\n+common pool. This means that allocators that are instantiated with\n+different types, say <code class=\"code\">char</code> and <code class=\"code\">long</code> will both\n+use the same pool. This is the default policy.\n+</p><p> The second policy, <code class=\"code\">__per_type_pool_policy</code>, implements\n+a separate pool for each instantiating type. Thus, <code class=\"code\">char</code>\n+and <code class=\"code\">long</code> will use separate pools. This allows per-type\n+tuning, for instance.\n+</p><p> Putting this all together, the actual allocator class is\n+</p><pre class=\"programlisting\">\n+  template&lt;typename _Tp, typename _Poolp = __default_policy&gt;\n+    class __mt_alloc : public __mt_alloc_base&lt;_Tp&gt;,  _Poolp\n+</pre><p> This class has the interface required for standard library allocator\n+classes, namely member functions <code class=\"code\">allocate</code> and\n+<code class=\"code\">deallocate</code>, plus others.\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.mt.impl\"></a>Implementation</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"allocator.mt.tune\"></a>Tunable Parameters</h4></div></div></div><p>Certain allocation parameters can be modified, or tuned. There\n+exists a nested <code class=\"code\">struct __pool_base::_Tune</code> that contains all\n+these parameters, which include settings for\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>Alignment</p></li><li><p>Maximum bytes before calling <code class=\"code\">::operator new</code> directly</p></li><li><p>Minimum bytes</p></li><li><p>Size of underlying global allocations</p></li><li><p>Maximum number of supported threads</p></li><li><p>Migration of deallocations to the global free list</p></li><li><p>Shunt for global <code class=\"code\">new</code> and <code class=\"code\">delete</code></p></li></ul></div><p>Adjusting parameters for a given instance of an allocator can only\n+happen before any allocations take place, when the allocator itself is\n+initialized. For instance:\n+</p><pre class=\"programlisting\">\n+#include &lt;ext/mt_allocator.h&gt;\n+\n+struct pod\n+{\n+  int i;\n+  int j;\n+};\n+\n+int main()\n+{\n+  typedef pod value_type;\n+  typedef __gnu_cxx::__mt_alloc&lt;value_type&gt; allocator_type;\n+  typedef __gnu_cxx::__pool_base::_Tune tune_type;\n+\n+  tune_type t_default;\n+  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n+\n+  tune_type t;\n+  t = allocator_type::_M_get_options();  \n+  allocator_type::_M_set_options(t_opt);\n+  t = allocator_type::_M_get_options();  \n+\n+  allocator_type a;\n+  allocator_type::pointer p1 = a.allocate(128);\n+  allocator_type::pointer p2 = a.allocate(5128);\n+\n+  a.deallocate(p1, 128);\n+  a.deallocate(p2, 5128);\n+\n+  return 0;\n+}\n+</pre></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"allocator.mt.init\"></a>Initialization</h4></div></div></div><p>\n+The static variables (pointers to freelists, tuning parameters etc)\n+are initialized as above, or are set to the global defaults.\n+</p><p>\n+The very first allocate() call will always call the\n+_S_initialize_once() function.  In order to make sure that this\n+function is called exactly once we make use of a __gthread_once call\n+in MT applications and check a static bool (_S_init) in ST\n+applications.\n+</p><p>\n+The _S_initialize() function:\n+- If the GLIBCXX_FORCE_NEW environment variable is set, it sets the bool\n+  _S_force_new to true and then returns. This will cause subsequent calls to\n+  allocate() to return memory directly from a new() call, and deallocate will\n+  only do a delete() call.\n+</p><p>\n+- If the GLIBCXX_FORCE_NEW environment variable is not set, both ST and MT \n+  applications will:\n+  - Calculate the number of bins needed. A bin is a specific power of two size\n+    of bytes. I.e., by default the allocator will deal with requests of up to \n+    128 bytes (or whatever the value of _S_max_bytes is when _S_init() is \n+    called). This means that there will be bins of the following sizes \n+    (in bytes): 1, 2, 4, 8, 16, 32, 64, 128. \n+\n+  - Create the _S_binmap array. All requests are rounded up to the next \n+    \"large enough\" bin. I.e., a request for 29 bytes will cause a block from \n+    the \"32 byte bin\" to be returned to the application. The purpose of \n+    _S_binmap is to speed up the process of finding out which bin to use. \n+    I.e., the value of _S_binmap[ 29 ] is initialized to 5 (bin 5 = 32 bytes).\n+</p><p>\n+  - Create the _S_bin array. This array consists of bin_records. There will be\n+    as many bin_records in this array as the number of bins that we calculated\n+    earlier. I.e., if _S_max_bytes = 128 there will be 8 entries.\n+    Each bin_record is then initialized:\n+    - bin_record-&gt;first = An array of pointers to block_records. There will be\n+      as many block_records pointers as there are maximum number of threads \n+      (in a ST application there is only 1 thread, in a MT application there \n+      are _S_max_threads).\n+      This holds the pointer to the first free block for each thread in this\n+      bin. I.e., if we would like to know where the first free block of size 32\n+      for thread number 3 is we would look this up by: _S_bin[ 5 ].first[ 3 ]\n+\n+    The above created block_record pointers members are now initialized to \n+    their initial values. I.e. _S_bin[ n ].first[ n ] = NULL;\n+</p><p>\n+- Additionally a MT application will:\n+  - Create a list of free thread id's. The pointer to the first entry\n+    is stored in _S_thread_freelist_first. The reason for this approach is \n+    that the __gthread_self() call will not return a value that corresponds to \n+    the maximum number of threads allowed but rather a process id number or\n+    something else. So what we do is that we create a list of thread_records.\n+    This list is _S_max_threads long and each entry holds a size_t thread_id\n+    which is initialized to 1, 2, 3, 4, 5 and so on up to _S_max_threads.\n+    Each time a thread calls allocate() or deallocate() we call \n+    _S_get_thread_id() which looks at the value of _S_thread_key which is a\n+    thread local storage pointer. If this is NULL we know that this is a newly\n+    created thread and we pop the first entry from this list and saves the\n+    pointer to this record in the _S_thread_key variable. The next time \n+    we will get the pointer to the thread_record back and we use the \n+    thread_record-&gt;thread_id as identification. I.e., the first thread that \n+    calls allocate will get the first record in this list and thus be thread\n+    number 1 and will then find the pointer to its first free 32 byte block\n+    in _S_bin[ 5 ].first[ 1 ]\n+    When we create the _S_thread_key we also define a destructor \n+    (_S_thread_key_destr) which means that when the thread dies, this\n+    thread_record is returned to the front of this list and the thread id\n+    can then be reused if a new thread is created.\n+    This list is protected by a mutex (_S_thread_freelist_mutex) which is only\n+    locked when records are removed or added to the list.\n+</p><p>\n+  - Initialize the free and used counters of each bin_record:\n+    - bin_record-&gt;free = An array of size_t. This keeps track of the number\n+      of blocks on a specific thread's freelist in each bin. I.e., if a thread\n+      has 12 32-byte blocks on it's freelists and allocates one of these, this\n+      counter would be decreased to 11.\n+\n+    - bin_record-&gt;used = An array of size_t. This keeps track of the number\n+      of blocks currently in use of this size by this thread. I.e., if a thread\n+      has made 678 requests (and no deallocations...) of 32-byte blocks this\n+      counter will read 678.\n+\n+    The above created arrays are now initialized with their initial values. \n+    I.e. _S_bin[ n ].free[ n ] = 0;\n+</p><p>\n+  - Initialize the mutex of each bin_record: The bin_record-&gt;mutex\n+    is used to protect the global freelist. This concept of a global\n+    freelist is explained in more detail in the section \"A multi\n+    threaded example\", but basically this mutex is locked whenever a\n+    block of memory is retrieved or returned to the global freelist\n+    for this specific bin. This only occurs when a number of blocks\n+    are grabbed from the global list to a thread specific list or when\n+    a thread decides to return some blocks to the global freelist.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"allocator.mt.deallocation\"></a>Deallocation Notes</h4></div></div></div><p> Notes about deallocation. This allocator does not explicitly\n+release memory. Because of this, memory debugging programs like\n+valgrind or purify may notice leaks: sorry about this\n+inconvenience. Operating systems will reclaim allocated memory at\n+program termination anyway. If sidestepping this kind of noise is\n+desired, there are three options: use an allocator, like\n+<code class=\"code\">new_allocator</code> that releases memory while debugging, use\n+GLIBCXX_FORCE_NEW to bypass the allocator's internal pools, or use a\n+custom pool datum that releases resources on destruction.\n+</p><p>\n+  On systems with the function <code class=\"code\">__cxa_atexit</code>, the\n+allocator can be forced to free all memory allocated before program\n+termination with the member function\n+<code class=\"code\">__pool_type::_M_destroy</code>. However, because this member\n+function relies on the precise and exactly-conforming ordering of\n+static destructors, including those of a static local\n+<code class=\"code\">__pool</code> object, it should not be used, ever, on systems\n+that don't have the necessary underlying support. In addition, in\n+practice, forcing deallocation can be tricky, as it requires the\n+<code class=\"code\">__pool</code> object to be fully-constructed before the object\n+that uses it is fully constructed. For most (but not all) STL\n+containers, this works, as an instance of the allocator is constructed\n+as part of a container's constructor. However, this assumption is\n+implementation-specific, and subject to change. For an example of a\n+pool that frees memory, see the following\n+    <a class=\"ulink\" href=\"http://gcc.gnu.org/viewcvs/trunk/libstdc%2B%2B-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc?view=markup\" target=\"_top\">\n+    example.</a>\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.mt.example_single\"></a>Single Thread Example</h3></div></div></div><p>\n+Let's start by describing how the data on a freelist is laid out in memory.\n+This is the first two blocks in freelist for thread id 3 in bin 3 (8 bytes):\n+</p><pre class=\"programlisting\">\n++----------------+\n+| next* ---------|--+  (_S_bin[ 3 ].first[ 3 ] points here)\n+|                |  |\n+|                |  |\n+|                |  |\n++----------------+  |\n+| thread_id = 3  |  |\n+|                |  |\n+|                |  |\n+|                |  |\n++----------------+  |\n+| DATA           |  |  (A pointer to here is what is returned to the\n+|                |  |   the application when needed)\n+|                |  |\n+|                |  |\n+|                |  |\n+|                |  |\n+|                |  |\n+|                |  |\n++----------------+  |\n++----------------+  |\n+| next*          |&lt;-+  (If next == NULL it's the last one on the list)\n+|                |\n+|                |\n+|                |\n++----------------+\n+| thread_id = 3  |\n+|                |\n+|                |\n+|                |\n++----------------+\n+| DATA           |\n+|                |\n+|                |\n+|                |\n+|                |\n+|                |\n+|                |\n+|                |\n++----------------+\n+</pre><p>\n+With this in mind we simplify things a bit for a while and say that there is\n+only one thread (a ST application). In this case all operations are made to \n+what is referred to as the global pool - thread id 0 (No thread may be\n+assigned this id since they span from 1 to _S_max_threads in a MT application).\n+</p><p>\n+When the application requests memory (calling allocate()) we first look at the\n+requested size and if this is &gt; _S_max_bytes we call new() directly and return.\n+</p><p>\n+If the requested size is within limits we start by finding out from which \n+bin we should serve this request by looking in _S_binmap.\n+</p><p>\n+A quick look at _S_bin[ bin ].first[ 0 ] tells us if there are any blocks of\n+this size on the freelist (0). If this is not NULL - fine, just remove the\n+block that _S_bin[ bin ].first[ 0 ] points to from the list, \n+update _S_bin[ bin ].first[ 0 ] and return a pointer to that blocks data.\n+</p><p>\n+If the freelist is empty (the pointer is NULL) we must get memory from the \n+system and build us a freelist within this memory. All requests for new memory\n+is made in chunks of _S_chunk_size. Knowing the size of a block_record and \n+the bytes that this bin stores we then calculate how many blocks we can create \n+within this chunk, build the list, remove the first block, update the pointer\n+(_S_bin[ bin ].first[ 0 ]) and return a pointer to that blocks data. \n+</p><p>\n+Deallocation is equally simple; the pointer is casted back to a block_record\n+pointer, lookup which bin to use based on the size, add the block to the front \n+of the global freelist and update the pointer as needed \n+(_S_bin[ bin ].first[ 0 ]).\n+</p><p>\n+The decision to add deallocated blocks to the front of the freelist was made\n+after a set of performance measurements that showed that this is roughly 10%\n+faster than maintaining a set of \"last pointers\" as well.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"allocator.mt.example_multi\"></a>Multiple Thread Example</h3></div></div></div><p>\n+In the ST example we never used the thread_id variable present in each block. \n+Let's start by explaining the purpose of this in a MT application. \n+</p><p>\n+The concept of \"ownership\" was introduced since many MT applications\n+allocate and deallocate memory to shared containers from different\n+threads (such as a cache shared amongst all threads). This introduces\n+a problem if the allocator only returns memory to the current threads\n+freelist (I.e., there might be one thread doing all the allocation and\n+thus obtaining ever more memory from the system and another thread\n+that is getting a longer and longer freelist - this will in the end\n+consume all available memory).\n+</p><p>\n+Each time a block is moved from the global list (where ownership is\n+irrelevant), to a threads freelist (or when a new freelist is built\n+from a chunk directly onto a threads freelist or when a deallocation\n+occurs on a block which was not allocated by the same thread id as the\n+one doing the deallocation) the thread id is set to the current one.\n+</p><p>\n+What's the use? Well, when a deallocation occurs we can now look at\n+the thread id and find out if it was allocated by another thread id\n+and decrease the used counter of that thread instead, thus keeping the\n+free and used counters correct. And keeping the free and used counters\n+corrects is very important since the relationship between these two\n+variables decides if memory should be returned to the global pool or\n+not when a deallocation occurs.\n+</p><p>\n+When the application requests memory (calling allocate()) we first\n+look at the requested size and if this is &gt;_S_max_bytes we call new()\n+directly and return.\n+</p><p>\n+If the requested size is within limits we start by finding out from which \n+bin we should serve this request by looking in _S_binmap.\n+</p><p>\n+A call to _S_get_thread_id() returns the thread id for the calling thread \n+(and if no value has been set in _S_thread_key, a new id is assigned and\n+returned).\n+</p><p>\n+A quick look at _S_bin[ bin ].first[ thread_id ] tells us if there are\n+any blocks of this size on the current threads freelist. If this is\n+not NULL - fine, just remove the block that _S_bin[ bin ].first[\n+thread_id ] points to from the list, update _S_bin[ bin ].first[\n+thread_id ], update the free and used counters and return a pointer to\n+that blocks data.\n+</p><p>\n+If the freelist is empty (the pointer is NULL) we start by looking at\n+the global freelist (0). If there are blocks available on the global\n+freelist we lock this bins mutex and move up to block_count (the\n+number of blocks of this bins size that will fit into a _S_chunk_size)\n+or until end of list - whatever comes first - to the current threads\n+freelist and at the same time change the thread_id ownership and\n+update the counters and pointers. When the bins mutex has been\n+unlocked, we remove the block that _S_bin[ bin ].first[ thread_id ]\n+points to from the list, update _S_bin[ bin ].first[ thread_id ],\n+update the free and used counters, and return a pointer to that blocks\n+data.\n+</p><p>\n+The reason that the number of blocks moved to the current threads\n+freelist is limited to block_count is to minimize the chance that a\n+subsequent deallocate() call will return the excess blocks to the\n+global freelist (based on the _S_freelist_headroom calculation, see\n+below).\n+</p><p>\n+However if there isn't any memory on the global pool we need to get\n+memory from the system - this is done in exactly the same way as in a\n+single threaded application with one major difference; the list built\n+in the newly allocated memory (of _S_chunk_size size) is added to the\n+current threads freelist instead of to the global.\n+</p><p>\n+The basic process of a deallocation call is simple: always add the\n+block to the front of the current threads freelist and update the\n+counters and pointers (as described earlier with the specific check of\n+ownership that causes the used counter of the thread that originally\n+allocated the block to be decreased instead of the current threads\n+counter).\n+</p><p>\n+And here comes the free and used counters to service. Each time a\n+deallocation() call is made, the length of the current threads\n+freelist is compared to the amount memory in use by this thread.\n+</p><p>\n+Let's go back to the example of an application that has one thread\n+that does all the allocations and one that deallocates. Both these\n+threads use say 516 32-byte blocks that was allocated during thread\n+creation for example.  Their used counters will both say 516 at this\n+point. The allocation thread now grabs 1000 32-byte blocks and puts\n+them in a shared container. The used counter for this thread is now\n+1516.\n+</p><p>\n+The deallocation thread now deallocates 500 of these blocks. For each\n+deallocation made the used counter of the allocating thread is\n+decreased and the freelist of the deallocation thread gets longer and\n+longer. But the calculation made in deallocate() will limit the length\n+of the freelist in the deallocation thread to _S_freelist_headroom %\n+of it's used counter.  In this case, when the freelist (given that the\n+_S_freelist_headroom is at it's default value of 10%) exceeds 52\n+(516/10) blocks will be returned to the global pool where the\n+allocating thread may pick them up and reuse them.\n+</p><p>\n+In order to reduce lock contention (since this requires this bins\n+mutex to be locked) this operation is also made in chunks of blocks\n+(just like when chunks of blocks are moved from the global freelist to\n+a threads freelist mentioned above). The \"formula\" used can probably\n+be improved to further reduce the risk of blocks being \"bounced back\n+and forth\" between freelists.\n+</p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch31s05.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bitmap_allocator.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Testing\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0bitmap_allocator</td></tr></table></div></body></html>"}, {"sha": "ee96bfa38f6922eb450b9d066038a74b62cba1f2", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch33.html", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a033.\u00a0Containers</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bitmap_allocator.html\" title=\"bitmap_allocator\" /><link rel=\"next\" href=\"bk01pt12ch33s02.html\" title=\"HP/SGI\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a033.\u00a0Containers</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bitmap_allocator.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch33s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.containers\"></a>Chapter\u00a033.\u00a0Containers</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt12ch33.html#manual.ext.containers.pbds\">Policy Based Data Structures</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch33s02.html\">HP/SGI</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch33s03.html\">Deprecated HP/SGI</a></span></dt></dl></div><p>\n+  </p><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.containers.pbds\"></a>Policy Based Data Structures</h2></div></div></div><p>\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/index.html\" target=\"_top\">More details here</a>.\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bitmap_allocator.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch33s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">bitmap_allocator\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0HP/SGI</td></tr></table></div></body></html>"}, {"sha": "f7a8543b8ce8b0bc889d8f3e9a5d9841ca887e93", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch33s02.html", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>HP/SGI</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt12ch33.html\" title=\"Chapter\u00a033.\u00a0Containers\" /><link rel=\"prev\" href=\"bk01pt12ch33.html\" title=\"Chapter\u00a033.\u00a0Containers\" /><link rel=\"next\" href=\"bk01pt12ch33s03.html\" title=\"Deprecated HP/SGI\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">HP/SGI</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch33.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a033.\u00a0Containers</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch33s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.containers.sgi\"></a>HP/SGI</h2></div></div></div><p>\n+    </p><p>A few extensions and nods to backwards-compatibility have been made with\n+   containers.  Those dealing with older SGI-style allocators are dealt with\n+   elsewhere.  The remaining ones all deal with bits:\n+</p><p>The old pre-standard <code class=\"code\">bit_vector</code> class is present for\n+   backwards compatibility.  It is simply a typedef for the\n+   <code class=\"code\">vector&lt;bool&gt;</code> specialization.\n+</p><p>The <code class=\"code\">bitset</code> class has a number of extensions, described in the\n+   rest of this item.  First, we'll mention that this implementation of\n+   <code class=\"code\">bitset&lt;N&gt;</code> is specialized for cases where N number of\n+   bits will fit into a single word of storage.  If your choice of N is\n+   within that range (&lt;=32 on i686-pc-linux-gnu, for example), then all\n+   of the operations will be faster.\n+</p><p>There are\n+   versions of single-bit test, set, reset, and flip member functions which\n+   do no range-checking.  If we call them member functions of an instantiation\n+   of \"bitset&lt;N&gt;,\" then their names and signatures are:\n+</p><pre class=\"programlisting\">\n+   bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos);\n+   bitset&lt;N&gt;&amp;   _Unchecked_set   (size_t pos, int val);\n+   bitset&lt;N&gt;&amp;   _Unchecked_reset (size_t pos);\n+   bitset&lt;N&gt;&amp;   _Unchecked_flip  (size_t pos);\n+   bool         _Unchecked_test  (size_t pos);\n+   </pre><p>Note that these may in fact be removed in the future, although we have\n+   no present plans to do so (and there doesn't seem to be any immediate\n+   reason to).\n+</p><p>The semantics of member function <code class=\"code\">operator[]</code> are not specified \n+   in the C++ standard.  A long-standing defect report calls for sensible\n+   obvious semantics, which are already implemented here:  <code class=\"code\">op[]</code>\n+   on a const bitset returns a bool, and for a non-const bitset returns a\n+   <code class=\"code\">reference</code> (a nested type).  However, this implementation does\n+   no range-checking on the index argument, which is in keeping with other\n+   containers' <code class=\"code\">op[]</code> requirements.  The defect report's proposed\n+   resolution calls for range-checking to be done.  We'll just wait and see...\n+</p><p>Finally, two additional searching functions have been added.  They return\n+   the index of the first \"on\" bit, and the index of the first\n+   \"on\" bit that is after <code class=\"code\">prev</code>, respectively:\n+</p><pre class=\"programlisting\">\n+   size_t _Find_first() const;\n+   size_t _Find_next (size_t prev) const;</pre><p>The same caveat given for the _Unchecked_* functions applies here also.\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch33.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt12ch33.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch33s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a033.\u00a0Containers\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Deprecated HP/SGI</td></tr></table></div></body></html>"}, {"sha": "b89fad1d7eeac0c56eaa881609e3462f7fcec86b", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch33s03.html", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch33s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Deprecated HP/SGI</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt12ch33.html\" title=\"Chapter\u00a033.\u00a0Containers\" /><link rel=\"prev\" href=\"bk01pt12ch33s02.html\" title=\"HP/SGI\" /><link rel=\"next\" href=\"bk01pt12ch34.html\" title=\"Chapter\u00a034.\u00a0Utilities\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Deprecated HP/SGI</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch33s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a033.\u00a0Containers</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch34.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.containers.deprecated_sgi\"></a>Deprecated HP/SGI</h2></div></div></div><p>\n+     The SGI hashing classes <code class=\"classname\">hash_set</code> and\n+     <code class=\"classname\">hash_set</code> have been deprecated by the\n+     unordered_set, unordered_multiset, unordered_map,\n+     unordered_multimap containers in TR1 and the upcoming C++0x, and\n+     may be removed in future releases.\n+   </p><p>The SGI headers</p><pre class=\"programlisting\">\n+     &lt;hash_map&gt;\n+     &lt;hash_set&gt;\n+     &lt;rope&gt;\n+     &lt;slist&gt;\n+     &lt;rb_tree&gt;\n+   </pre><p>are all here;\n+      <code class=\"code\">&lt;hash_map&gt;</code> and <code class=\"code\">&lt;hash_set&gt;</code>\n+      are deprecated but available as backwards-compatible extensions,\n+      as discussed further below.  <code class=\"code\">&lt;rope&gt;</code> is the\n+      SGI specialization for large strings (\"rope,\"\n+      \"large strings,\" get it? Love that geeky humor.)\n+      <code class=\"code\">&lt;slist&gt;</code> is a singly-linked list, for when the\n+      doubly-linked <code class=\"code\">list&lt;&gt;</code> is too much space\n+      overhead, and <code class=\"code\">&lt;rb_tree&gt;</code> exposes the red-black\n+      tree classes used in the implementation of the standard maps and\n+      sets.\n+   </p><p>Each of the associative containers map, multimap, set, and multiset\n+      have a counterpart which uses a\n+      <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/HashFunction.html\" target=\"_top\">hashing\n+      function</a> to do the arranging, instead of a strict weak ordering\n+      function.  The classes take as one of their template parameters a\n+      function object that will return the hash value; by default, an\n+      instantiation of\n+      <a class=\"ulink\" href=\"http://www.sgi.com/tech/stl/hash.html\" target=\"_top\">hash</a>.\n+      You should specialize this functor for your class, or define your own,\n+      before trying to use one of the hashing classes.\n+   </p><p>The hashing classes support all the usual associative container\n+      functions, as well as some extra constructors specifying the number\n+      of buckets, etc.\n+   </p><p>Why would you want to use a hashing class instead of the\n+      \u201c<span class=\"quote\">normal</span>\u201dimplementations?  Matt Austern writes:\n+   </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+       <span class=\"emphasis\"><em>[W]ith a well chosen hash function, hash tables\n+       generally provide much better average-case performance than\n+       binary search trees, and much worse worst-case performance.  So\n+       if your implementation has hash_map, if you don't mind using\n+       nonstandard components, and if you aren't scared about the\n+       possibility of pathological cases, you'll probably get better\n+       performance from hash_map.\n+     </em></span>\n+     </p></blockquote></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch33s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt12ch33.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch34.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">HP/SGI\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a034.\u00a0Utilities</td></tr></table></div></body></html>"}, {"sha": "d338b35a671d5d454fda1d22c9fe6570d7ec401c", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch34.html", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch34.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch34.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch34.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a034.\u00a0Utilities</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch33s03.html\" title=\"Deprecated HP/SGI\" /><link rel=\"next\" href=\"bk01pt12ch35.html\" title=\"Chapter\u00a035.\u00a0Algorithms\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a034.\u00a0Utilities</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch33s03.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch35.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.util\"></a>Chapter\u00a034.\u00a0Utilities</h2></div></div></div><p>\n+    The &lt;functional&gt; header contains many additional functors\n+    and helper functions, extending section 20.3.  They are\n+    implemented in the file stl_function.h:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">identity_element</code> for addition and multiplication. * \n+  </p></li><li><p>The functor <code class=\"code\">identity</code>, whose <code class=\"code\">operator()</code>\n+      returns the argument unchanged. * \n+  </p></li><li><p>Composition functors <code class=\"code\">unary_function</code> and\n+      <code class=\"code\">binary_function</code>, and their helpers <code class=\"code\">compose1</code>\n+      and <code class=\"code\">compose2</code>. * \n+    </p></li><li><p><code class=\"code\">select1st</code> and <code class=\"code\">select2nd</code>, to strip pairs. * \n+  </p></li><li><p><code class=\"code\">project1st</code> and <code class=\"code\">project2nd</code>. * </p></li><li><p>A set of functors/functions which always return the same result.  They\n+      are <code class=\"code\">constant_void_fun</code>, <code class=\"code\">constant_binary_fun</code>,\n+      <code class=\"code\">constant_unary_fun</code>, <code class=\"code\">constant0</code>,\n+      <code class=\"code\">constant1</code>, and <code class=\"code\">constant2</code>. * </p></li><li><p>The class <code class=\"code\">subtractive_rng</code>. * </p></li><li><p>mem_fun adaptor helpers <code class=\"code\">mem_fun1</code> and\n+      <code class=\"code\">mem_fun1_ref</code> are provided for backwards compatibility. </p></li></ul></div><p>\n+  20.4.1 can use several different allocators; they are described on the\n+   main extensions page.\n+</p><p>\n+  20.4.3 is extended with a special version of\n+  <code class=\"code\">get_temporary_buffer</code> taking a second argument.  The\n+  argument is a pointer, which is ignored, but can be used to specify\n+  the template type (instead of using explicit function template\n+  arguments like the standard version does).  That is, in addition to\n+</p><pre class=\"programlisting\">\n+get_temporary_buffer&lt;int&gt;(5);\n+</pre><p>\n+you can also use\n+</p><pre class=\"programlisting\">\n+get_temporary_buffer(5, (int*)0);\n+</pre><p>\n+  A class <code class=\"code\">temporary_buffer</code> is given in stl_tempbuf.h. *\n+</p><p>\n+  The specialized algorithms of section 20.4.4 are extended with\n+  <code class=\"code\">uninitialized_copy_n</code>. *\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch33s03.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch35.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Deprecated HP/SGI\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a035.\u00a0Algorithms</td></tr></table></div></body></html>"}, {"sha": "1ab65c963a7a9fd837f9c6b43363a16fb299ee45", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch35.html", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch35.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch35.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch35.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a035.\u00a0Algorithms</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch34.html\" title=\"Chapter\u00a034.\u00a0Utilities\" /><link rel=\"next\" href=\"bk01pt12ch36.html\" title=\"Chapter\u00a036.\u00a0Numerics\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a035.\u00a0Algorithms</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch34.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch36.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.algorithms\"></a>Chapter\u00a035.\u00a0Algorithms</h2></div></div></div><p>25.1.6 (count, count_if) is extended with two more versions of count\n+   and count_if.  The standard versions return their results.  The\n+   additional signatures return void, but take a final parameter by\n+   reference to which they assign their results, e.g.,\n+</p><pre class=\"programlisting\">\n+   void count (first, last, value, n);</pre><p>25.2 (mutating algorithms) is extended with two families of signatures,\n+   random_sample and random_sample_n.\n+</p><p>25.2.1 (copy) is extended with\n+</p><pre class=\"programlisting\">\n+   copy_n (_InputIter first, _Size count, _OutputIter result);</pre><p>which copies the first 'count' elements at 'first' into 'result'.\n+</p><p>25.3 (sorting 'n' heaps 'n' stuff) is extended with some helper\n+   predicates.  Look in the doxygen-generated pages for notes on these.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">is_heap</code> tests whether or not a range is a heap.</p></li><li><p><code class=\"code\">is_sorted</code> tests whether or not a range is sorted in\n+        nondescending order.</p></li></ul></div><p>25.3.8 (lexigraphical_compare) is extended with\n+</p><pre class=\"programlisting\">\n+   lexicographical_compare_3way(_InputIter1 first1, _InputIter1 last1,\n+                                 _InputIter2 first2, _InputIter2 last2)</pre><p>which does... what?\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch34.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch36.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a034.\u00a0Utilities\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a036.\u00a0Numerics</td></tr></table></div></body></html>"}, {"sha": "812423363483d433e313516165129070337ed121", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch36.html", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch36.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch36.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch36.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a036.\u00a0Numerics</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch35.html\" title=\"Chapter\u00a035.\u00a0Algorithms\" /><link rel=\"next\" href=\"bk01pt12ch37.html\" title=\"Chapter\u00a037.\u00a0Iterators\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a036.\u00a0Numerics</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch35.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch37.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.numerics\"></a>Chapter\u00a036.\u00a0Numerics</h2></div></div></div><p>26.4, the generalized numeric operations such as accumulate, are extended\n+   with the following functions:\n+</p><pre class=\"programlisting\">\n+   power (x, n);\n+   power (x, n, moniod_operation);</pre><p>Returns, in FORTRAN syntax, \"x ** n\" where n&gt;=0.  In the\n+   case of n == 0, returns the <a class=\"ulink\" href=\"#ch20\" target=\"_top\">identity element</a> for the\n+   monoid operation.  The two-argument signature uses multiplication (for\n+   a true \"power\" implementation), but addition is supported as well.\n+   The operation functor must be associative.\n+</p><p>The <code class=\"code\">iota</code> function wins the award for Extension With the\n+   Coolest Name.  It \"assigns sequentially increasing values to a range.\n+   That is, it assigns value to *first, value + 1 to *(first + 1) and so\n+   on.\"  Quoted from SGI documentation.\n+</p><pre class=\"programlisting\">\n+   void iota(_ForwardIter first, _ForwardIter last, _Tp value);</pre></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch35.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch37.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a035.\u00a0Algorithms\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a037.\u00a0Iterators</td></tr></table></div></body></html>"}, {"sha": "7c3d3cd33430002df15d8988368683b90a7eb22f", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch37.html", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch37.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch37.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch37.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a037.\u00a0Iterators</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch36.html\" title=\"Chapter\u00a036.\u00a0Numerics\" /><link rel=\"next\" href=\"bk01pt12ch38.html\" title=\"Chapter\u00a038.\u00a0Input and Output\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a037.\u00a0Iterators</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch36.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch38.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.iterators\"></a>Chapter\u00a037.\u00a0Iterators</h2></div></div></div><p>24.3.2 describes <code class=\"code\">struct iterator</code>, which didn't exist in the\n+   original HP STL implementation (the language wasn't rich enough at the\n+   time).  For backwards compatibility, base classes are provided which\n+   declare the same nested typedefs:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>input_iterator</p></li><li><p>output_iterator</p></li><li><p>forward_iterator</p></li><li><p>bidirectional_iterator</p></li><li><p>random_access_iterator</p></li></ul></div><p>24.3.4 describes iterator operation <code class=\"code\">distance</code>, which takes\n+   two iterators and returns a result.  It is extended by another signature\n+   which takes two iterators and a reference to a result.  The result is\n+   modified, and the function returns nothing.\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch36.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch38.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a036.\u00a0Numerics\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a038.\u00a0Input and Output</td></tr></table></div></body></html>"}, {"sha": "04ac340da8e75a0e09744a778d442aeff4e31f01", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch38.html", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch38.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch38.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch38.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a038.\u00a0Input and Output</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch37.html\" title=\"Chapter\u00a037.\u00a0Iterators\" /><link rel=\"next\" href=\"bk01pt12ch39.html\" title=\"Chapter\u00a039.\u00a0Demangling\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a038.\u00a0Input and Output</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch37.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch39.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.io\"></a>Chapter\u00a038.\u00a0Input and Output</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"bk01pt12ch38.html#manual.ext.io.filebuf_derived\">Derived filebufs</a></span></dt></dl></div><p>\n+    Extensions allowing <code class=\"code\">filebuf</code>s to be constructed from\n+    \"C\" types like  FILE*s and file descriptors.\n+  </p><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.io.filebuf_derived\"></a>Derived filebufs</h2></div></div></div><p>The v2 library included non-standard extensions to construct\n+      <code class=\"code\">std::filebuf</code>s from C stdio types such as\n+      <code class=\"code\">FILE*</code>s and POSIX file descriptors.\n+      Today the recommended way to use stdio types with libstdc++\n+      IOStreams is via the <code class=\"code\">stdio_filebuf</code> class (see below),\n+      but earlier releases provided slightly different mechanisms.\n+   </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>3.0.x <code class=\"code\">filebuf</code>s have another ctor with this signature:\n+        <code class=\"code\">basic_filebuf(__c_file_type*, ios_base::openmode, int_type);\n+\t</code>\n+         This comes in very handy in a number of places, such as\n+         attaching Unix sockets, pipes, and anything else which uses file\n+         descriptors, into the IOStream buffering classes.  The three\n+         arguments are as follows:\n+         </p><div class=\"itemizedlist\"><ul type=\"circle\"><li><p><code class=\"code\">__c_file_type*      F   </code>\n+              // the __c_file_type typedef usually boils down to stdio's FILE\n+          </p></li><li><p><code class=\"code\">ios_base::openmode  M   </code>\n+              // same as all the other uses of openmode\n+          </p></li><li><p><code class=\"code\">int_type            B   </code>\n+              // buffer size, defaults to BUFSIZ if not specified\n+          </p></li></ul></div><p>\n+         For those wanting to use file descriptors instead of FILE*'s, I\n+         invite you to contemplate the mysteries of C's <code class=\"code\">fdopen()</code>.\n+     </p></li><li><p>In library snapshot 3.0.95 and later, <code class=\"code\">filebuf</code>s bring\n+         back an old extension:  the <code class=\"code\">fd()</code> member function.  The\n+         integer returned from this function can be used for whatever file\n+         descriptors can be used for on your platform.  Naturally, the\n+         library cannot track what you do on your own with a file descriptor,\n+         so if you perform any I/O directly, don't expect the library to be\n+         aware of it.\n+     </p></li><li><p>Beginning with 3.1, the extra <code class=\"code\">filebuf</code> constructor and\n+         the <code class=\"code\">fd()</code> function were removed from the standard\n+         filebuf.  Instead, <code class=\"code\">&lt;ext/stdio_filebuf.h&gt;</code> contains\n+         a derived class called\n+         <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/class____gnu__cxx_1_1stdio__filebuf.html\" target=\"_top\"><code class=\"code\">__gnu_cxx::stdio_filebuf</code></a>.\n+         This class can be constructed from a C <code class=\"code\">FILE*</code> or a file\n+         descriptor, and provides the <code class=\"code\">fd()</code> function.\n+     </p></li></ul></div><p>If you want to access a <code class=\"code\">filebuf</code>'s file descriptor to\n+      implement file locking (e.g. using the <code class=\"code\">fcntl()</code> system\n+      call) then you might be interested in Henry Suter's\n+      <a class=\"ulink\" href=\"http://suter.home.cern.ch/suter/RWLock.html\" target=\"_top\">RWLock</a>\n+      class.\n+   </p><p>\n+    </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch37.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch39.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a037.\u00a0Iterators\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a039.\u00a0Demangling</td></tr></table></div></body></html>"}, {"sha": "666a384f507f59bccab4573a55e8eec35ab96126", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch39.html", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch39.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch39.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch39.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,71 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a039.\u00a0Demangling</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch38.html\" title=\"Chapter\u00a038.\u00a0Input and Output\" /><link rel=\"next\" href=\"concurrency.html\" title=\"Chapter\u00a040.\u00a0Concurrency\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a039.\u00a0Demangling</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch38.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"concurrency.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.demangle\"></a>Chapter\u00a039.\u00a0Demangling</h2></div></div></div><p>\n+    Transforming C++ ABI itentifiers (like RTTI symbols) into the\n+    original C++ source identifiers is called\n+    \u201c<span class=\"quote\">demangling.</span>\u201d\n+  </p><p>\n+    If you have read the <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaceabi.html\" target=\"_top\">source\n+    documentation for <code class=\"code\">namespace abi</code></a> then you are\n+    aware of the cross-vendor C++ ABI in use by GCC.  One of the\n+    exposed functions is used for demangling,\n+    <code class=\"code\">abi::__cxa_demangle</code>.\n+  </p><p>\n+    In programs like <span class=\"command\"><strong>c++filt</strong></span>, the linker, and other tools\n+    have the ability to decode C++ ABI names, and now so can you.\n+  </p><p>\n+    (The function itself might use different demanglers, but that's the\n+    whole point of abstract interfaces.  If we change the implementation,\n+    you won't notice.)\n+  </p><p>\n+    Probably the only times you'll be interested in demangling at runtime\n+    are when you're seeing <code class=\"code\">typeid</code> strings in RTTI, or when\n+    you're handling the runtime-support exception classes.  For example:\n+  </p><pre class=\"programlisting\">\n+#include &lt;exception&gt;\n+#include &lt;iostream&gt;\n+#include &lt;cxxabi.h&gt;\n+\n+struct empty { };\n+\n+template &lt;typename T, int N&gt;\n+  struct bar { };\n+\n+\n+int main()\n+{\n+  int     status;\n+  char   *realname;\n+\n+  // exception classes not in &lt;stdexcept&gt;, thrown by the implementation\n+  // instead of the user\n+  std::bad_exception  e;\n+  realname = abi::__cxa_demangle(e.what(), 0, 0, &amp;status);\n+  std::cout &lt;&lt; e.what() &lt;&lt; \"\\t=&gt; \" &lt;&lt; realname &lt;&lt; \"\\t: \" &lt;&lt; status &lt;&lt; '\\n';\n+  free(realname);\n+\n+\n+  // typeid\n+  bar&lt;empty,17&gt;          u;\n+  const std::type_info  &amp;ti = typeid(u);\n+\n+  realname = abi::__cxa_demangle(ti.name(), 0, 0, &amp;status);\n+  std::cout &lt;&lt; ti.name() &lt;&lt; \"\\t=&gt; \" &lt;&lt; realname &lt;&lt; \"\\t: \" &lt;&lt; status &lt;&lt; '\\n';\n+  free(realname);\n+\n+  return 0;\n+}\n+   </pre><p>\n+     This prints\n+   </p><pre class=\"screen\">\n+   <code class=\"computeroutput\">\n+      St13bad_exception       =&gt; std::bad_exception   : 0\n+      3barI5emptyLi17EE       =&gt; bar&lt;empty, 17&gt;       : 0 \n+   </code>\n+   </pre><p>\n+     The demangler interface is described in the source documentation\n+     linked to above.  It is actually written in C, so you don't need to\n+     be writing C++ in order to demangle C++.  (That also means we have to\n+     use crummy memory management facilities, so don't forget to free()\n+     the returned char array.)\n+   </p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch38.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"concurrency.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a038.\u00a0Input and Output\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a040.\u00a0Concurrency</td></tr></table></div></body></html>"}, {"sha": "6f1f5df4b23881498257f40a6df6eaed6ae1bce7", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch40s02.html", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch40s02.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch40s02.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch40s02.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,38 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Implementation</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"concurrency.html\" title=\"Chapter\u00a040.\u00a0Concurrency\" /><link rel=\"prev\" href=\"concurrency.html\" title=\"Chapter\u00a040.\u00a0Concurrency\" /><link rel=\"next\" href=\"bk01pt12ch40s03.html\" title=\"Use\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Implementation</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"concurrency.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a040.\u00a0Concurrency</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch40s03.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.concurrency.impl\"></a>Implementation</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.concurrency.impl.atomic_fallbacks\"></a>Using Builitin Atomic Functions</h3></div></div></div><p>The functions for atomic operations described above are either\n+implemented via compiler intrinsics (if the underlying host is\n+capable) or by library fallbacks.</p><p>Compiler intrinsics (builtins) are always preferred.  However, as\n+the compiler builtins for atomics are not universally implemented,\n+using them directly is problematic, and can result in undefined\n+function calls. (An example of an undefined symbol from the use\n+of <code class=\"code\">__sync_fetch_and_add</code> on an unsupported host is a\n+missing reference to <code class=\"code\">__sync_fetch_and_add_4</code>.)\n+</p><p>In addition, on some hosts the compiler intrinsics are enabled\n+conditionally, via the <code class=\"code\">-march</code> command line flag. This makes\n+usage vary depending on the target hardware and the flags used during\n+compile.\n+</p><p> If builtins are possible, <code class=\"code\">_GLIBCXX_ATOMIC_BUILTINS</code>\n+will be defined.\n+</p><p>For the following hosts, intrinsics are enabled by default.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>alpha</p></li><li><p>ia64</p></li><li><p>powerpc</p></li><li><p>s390</p></li></ul></div><p>For others, some form of <code class=\"code\">-march</code> may work. On\n+non-ancient x86 hardware, <code class=\"code\">-march=native</code> usually does the\n+trick.</p><p> For hosts without compiler intrinsics, but with capable\n+hardware, hand-crafted assembly is selected. This is the case for the following hosts:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>cris</p></li><li><p>hppa</p></li><li><p>i386</p></li><li><p>i486</p></li><li><p>m48k</p></li><li><p>mips</p></li><li><p>sparc</p></li></ul></div><p>And for the rest, a simulated atomic lock via pthreads.\n+</p><p> Detailed information about compiler intrinsics for atomic operations can be found in the GCC <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Atomic-Builtins.html\" target=\"_top\"> documentation</a>.\n+</p><p> More details on the library fallbacks from the porting <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/17_intro/porting.html#Thread%20safety\" target=\"_top\">section</a>.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.concurrency.impl.thread\"></a>Thread Abstraction</h3></div></div></div><p>A thin layer above IEEE 1003.1 (ie pthreads) is used to abstract\n+the thread interface for GCC. This layer is called \"gthread,\" and is\n+comprised of one header file that wraps the host's default thread layer with\n+a POSIX-like interface.\n+</p><p> The file &lt;gthr-default.h&gt; points to the deduced wrapper for\n+the current host. In libstdc++ implementation files,\n+&lt;bits/gthr.h&gt; is used to select the proper gthreads file.\n+</p><p>Within libstdc++ sources, all calls to underlying thread functionality\n+use this layer. More detail as to the specific interface can be found in the source <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/gthr_8h-source.html\" target=\"_top\">documentation</a>.\n+</p><p>By design, the gthread layer is interoperable with the types,\n+functions, and usage found in the usual &lt;pthread.h&gt; file,\n+including <code class=\"code\">pthread_t</code>, <code class=\"code\">pthread_once_t</code>, <code class=\"code\">pthread_create</code>,\n+etc.\n+</p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"concurrency.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"concurrency.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch40s03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a040.\u00a0Concurrency\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Use</td></tr></table></div></body></html>"}, {"sha": "b67d0f7fbf5a8c9850af57b485bd0edd0d4df429", "filename": "libstdc++-v3/doc/html/manual/bk01pt12ch40s03.html", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch40s03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch40s03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12ch40s03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Use</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"concurrency.html\" title=\"Chapter\u00a040.\u00a0Concurrency\" /><link rel=\"prev\" href=\"bk01pt12ch40s02.html\" title=\"Implementation\" /><link rel=\"next\" href=\"appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0Contributing\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Use</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch40s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a040.\u00a0Concurrency</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"appendix_contributing.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.concurrency.use\"></a>Use</h2></div></div></div><p>Typical usage of the last two constructs is demonstrated as follows:\n+</p><pre class=\"programlisting\">\n+#include &lt;ext/concurrence.h&gt;\n+\n+namespace\n+{\n+  __gnu_cxx::__mutex safe_base_mutex;\n+} // anonymous namespace\n+\n+namespace other\n+{\n+  void\n+  foo()\n+  {\n+    __gnu_cxx::__scoped_lock sentry(safe_base_mutex);\n+    for (int i = 0; i &lt; max;  ++i)\n+      {\n+\t_Safe_iterator_base* __old = __iter;\n+\t__iter = __iter-&lt;_M_next;\n+\t__old-&lt;_M_detach_single();\n+      }\n+}\n+</pre><p>In this sample code, an anonymous namespace is used to keep\n+the <code class=\"code\">__mutex</code> private to the compilation unit,\n+and <code class=\"code\">__scoped_lock</code> is used to guard access to the critical\n+section within the for loop, locking the mutex on creation and freeing\n+the mutex as control moves out of this block.\n+</p><p>Several exception classes are used to keep track of\n+concurrence-related errors. These classes\n+are: <code class=\"code\">__concurrence_lock_error</code>, <code class=\"code\">__concurrence_unlock_error</code>, <code class=\"code\">__concurrence_wait_error</code>,\n+and <code class=\"code\">__concurrence_broadcast_error</code>.\n+</p></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch40s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"concurrency.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"appendix_contributing.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Implementation\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Appendix\u00a0A.\u00a0Contributing</td></tr></table></div></body></html>"}, {"sha": "79d6d356f2ceb3b3d24e76a5556a560dfb253645", "filename": "libstdc++-v3/doc/html/manual/bk01pt12pr03.html", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12pr03.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12pr03.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbk01pt12pr03.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title></title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"next\" href=\"bk01pt12ch29.html\" title=\"Chapter\u00a029.\u00a0Compile Time Checks\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\"></th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"extensions.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch29.html\">Next</a></td></tr></table><hr /></div><div class=\"preface\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"id516952\"></a></h2></div></div></div><p>\n+  Here we will make an attempt at describing the non-Standard extensions to\n+  the library.  Some of these are from SGI's STL, some of these are GNU's,\n+  and some just seemed to appear on the doorstep.\n+</p><p><span class=\"emphasis\"><em>Before</em></span> you leap in and use any of these\n+extensions, be aware of two things:\n+</p><div class=\"orderedlist\"><ol type=\"1\"><li><p>\n+     Non-Standard means exactly that.  \n+     </p><p>\n+       The behavior, and the very\n+       existence, of these extensions may change with little or no\n+       warning.  (Ideally, the really good ones will appear in the next\n+       revision of C++.)  Also, other platforms, other compilers, other\n+       versions of g++ or libstdc++ may not recognize these names, or\n+       treat them differently, or... \n+     </p></li><li><p>\n+       You should know how to <a class=\"ulink\" href=\"XXX\" target=\"_top\">access\n+       these headers properly</a>. \n+     </p></li></ol></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"extensions.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch29.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0XII.\u00a0Extensions\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a029.\u00a0Compile Time Checks</td></tr></table></div></body></html>"}, {"sha": "4322717cf52b59b43636a1470a9b02a94f1bd743", "filename": "libstdc++-v3/doc/html/manual/build.html", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbuild.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbuild.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbuild.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,95 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Build</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      build&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt01ch02.html\" title=\"Chapter\u00a02.\u00a0Setup\" /><link rel=\"prev\" href=\"bk01pt01ch02.html\" title=\"Chapter\u00a02.\u00a0Setup\" /><link rel=\"next\" href=\"test.html\" title=\"Test\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Build</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a02.\u00a0Setup</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"test.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.setup.build\"></a>Build</h2></div></div></div><p>\n+  Because libstdc++ is part of GCC, the primary source for\n+   installation instructions is\n+   <a class=\"ulink\" href=\"http://gcc.gnu.org/install/\" target=\"_top\">the GCC install page</a>.\n+   Additional data is given here only where it applies to libstdc++.\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build.prereq\"></a>Prerequisites</h3></div></div></div><p>\n+    The list of software needed to build the library is kept with the\n+    rest of the compiler, at\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/install/prerequisites.html\" target=\"_top\">\n+      http://gcc.gnu.org/install/prerequisites.html</a>.  The same page\n+      also lists the tools you will need if you wish to modify the source.\n+  </p><p>As of GCC 4.0.1 the minimum version of binutils required to build\n+      libstdc++ is <code class=\"code\">2.15.90.0.1.1</code>. You can get snapshots\n+      (as well as releases) of binutils from\n+      <a class=\"ulink\" href=\"ftp://sources.redhat.com/pub/binutils\" target=\"_top\">\n+      ftp://sources.redhat.com/pub/binutils</a>.\n+      Older releases of libstdc++ do not require such a recent version,\n+      but to take full advantage of useful space-saving features and\n+      bug-fixes you should use a recent binutils if possible.\n+      The configure process will automatically detect and use these\n+      features if the underlying support is present.\n+   </p><p>\n+   Finally, a few system-specific requirements: \n+   </p><div class=\"variablelist\"><dl><dt><span class=\"term\">linux</span></dt><dd><p>\n+\t  If gcc 3.1.0 or later on is being used on linux, an attempt\n+\t  will be made to use \"C\" library functionality necessary for\n+\t  C++ named locale support.  For gcc 3.2.1 and later, this\n+\t  means that glibc 2.2.5 or later is required and the \"C\"\n+\t  library de_DE locale information must be installed.\n+\t</p><p>\n+\t  Note however that the sanity checks involving the de_DE\n+\t  locale are skipped when an explicit --enable-clocale=gnu\n+\t  configure option is used: only the basic checks are carried\n+\t  out, defending against misconfigurations.\n+\t</p><p>\n+\t  If the 'gnu' locale model is being used, the following\n+\t  locales are used and tested in the libstdc++ testsuites.\n+\t  The first column is the name of the locale, the second is\n+\t  the character set it is expected to use.\n+\t</p><pre class=\"programlisting\">\n+de_DE               ISO-8859-1\n+de_DE@euro          ISO-8859-15\n+en_HK               ISO-8859-1\n+en_PH               ISO-8859-1\n+en_US               ISO-8859-1\n+en_US.ISO-8859-1    ISO-8859-1\n+en_US.ISO-8859-15   ISO-8859-15\n+en_US.UTF-8         UTF-8\n+es_ES               ISO-8859-1\n+es_MX               ISO-8859-1\n+fr_FR               ISO-8859-1\n+fr_FR@euro          ISO-8859-15\n+is_IS               UTF-8\n+it_IT               ISO-8859-1\n+ja_JP.eucjp         EUC-JP\n+se_NO.UTF-8         UTF-8\n+ta_IN               UTF-8\n+zh_TW               BIG5\n+</pre><p>Failure to have the underlying \"C\" library locale\n+      information installed will mean that C++ named locales for the\n+      above regions will not work: because of this, the libstdc++\n+      testsuite will skip the named locale tests. If this isn't an\n+      issue, don't worry about it. If named locales are needed, the\n+      underlying locale information must be installed. Note that\n+      rebuilding libstdc++ after the \"C\" locales are installed is not\n+      necessary.\n+      </p><p>\n+\tTo install support for locales, do only one of the following:\n+      </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>install all locales</p><div class=\"itemizedlist\"><ul type=\"circle\"><li><p>with RedHat Linux:\n+\t      </p><p> <code class=\"code\"> export LC_ALL=C </code> \n+\t      </p><p> <code class=\"code\"> rpm -e glibc-common --nodeps </code> \n+\t      </p><p> \n+\t\t<code class=\"code\"> rpm -i --define \"_install_langs all\"\n+\t\t glibc-common-2.2.5-34.i386.rpm \n+\t\t</code> \n+\t      </p></li><li><p>\n+\t       Instructions for other operating systems solicited.\n+\t     </p></li></ul></div></li><li><p>install just the necessary locales</p><div class=\"itemizedlist\"><ul type=\"circle\"><li><p>with Debian Linux:</p><p> Add the above list, as shown, to the file\n+\t      <code class=\"code\">/etc/locale.gen</code> </p><p> run <code class=\"code\">/usr/sbin/locale-gen</code> </p></li><li><p>on most Unix-like operating systems:</p><p><code class=\"code\"> localedef -i de_DE -f ISO-8859-1 de_DE </code></p><p>(repeat for each entry in the above list) </p></li><li><p>\n+\t       Instructions for other operating systems solicited.\n+\t    </p></li></ul></div></li></ul></div></dd></dl></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"build.configure\"></a>Make</h3></div></div></div><p>If you have never done this before, you should read the basic\n+      <a class=\"ulink\" href=\"http://gcc.gnu.org/install/\" target=\"_top\">GCC Installation\n+      Instructions</a> first.  Read <span class=\"emphasis\"><em>all of them</em></span>.\n+      <span class=\"emphasis\"><em>Twice.</em></span>\n+   </p><p>When building libstdc++ you'll have to configure\n+      the entire <span class=\"emphasis\"><em>gccsrcdir</em></span> directory.  The full list of libstdc++\n+      specific configuration options, not dependent on the specific compiler\n+      release being used, can be found <a class=\"ulink\" href=\"configopts.html\" target=\"_top\">here</a>.\n+   </p><p>Consider possibly using --enable-languages=c++ to save time by only\n+      building the C++ language parts.\n+   </p><pre class=\"programlisting\">\n+   cd <span class=\"emphasis\"><em>gccbuilddir</em></span>\n+   <span class=\"emphasis\"><em>gccsrcdir</em></span>/configure --prefix=<span class=\"emphasis\"><em>destdir</em></span> --other-opts...</pre></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt01ch02.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"test.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a02.\u00a0Setup\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Test</td></tr></table></div></body></html>"}, {"sha": "17230b9b3c180970326259c11680073f40c4d948", "filename": "libstdc++-v3/doc/html/manual/codecvt.html", "status": "added", "additions": 379, "deletions": 0, "changes": 379, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fcodecvt.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fcodecvt.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fcodecvt.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,379 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>codecvt</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      codecvt&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt06ch15.html\" title=\"Chapter\u00a015.\u00a0Facets aka Categories\" /><link rel=\"prev\" href=\"bk01pt06ch15.html\" title=\"Chapter\u00a015.\u00a0Facets aka Categories\" /><link rel=\"next\" href=\"messages.html\" title=\"messages\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">codecvt</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt06ch15.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a015.\u00a0Facets aka Categories</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"messages.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.localization.facet.codecvt\"></a>codecvt</h2></div></div></div><p>\n+The standard class codecvt attempts to address conversions between\n+different character encoding schemes. In particular, the standard\n+attempts to detail conversions between the implementation-defined wide\n+characters (hereafter referred to as wchar_t) and the standard type\n+char that is so beloved in classic \u201c<span class=\"quote\">C</span>\u201d (which can now be\n+referred to as narrow characters.)  This document attempts to describe\n+how the GNU libstdc++ implementation deals with the conversion between\n+wide and narrow characters, and also presents a framework for dealing\n+with the huge number of other encodings that iconv can convert,\n+including Unicode and UTF8. Design issues and requirements are\n+addressed, and examples of correct usage for both the required\n+specializations for wide and narrow characters and the\n+implementation-provided extended functionality are given.\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.codecvt.req\"></a>Requirements</h3></div></div></div><p>\n+Around page 425 of the C++ Standard, this charming heading comes into view:\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+22.2.1.5 - Template class codecvt\n+</p></blockquote></div><p>\n+The text around the codecvt definition gives some clues:\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+-1- The class codecvt&lt;internT,externT,stateT&gt; is for use when\n+converting from one codeset to another, such as from wide characters\n+to multibyte characters, between wide character encodings such as\n+Unicode and EUC. \n+</em></span>\n+</p></blockquote></div><p> \n+Hmm. So, in some unspecified way, Unicode encodings and\n+translations between other character sets should be handled by this\n+class.  \n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+-2- The stateT argument selects the pair of codesets being mapped between. \n+</em></span>\n+</p></blockquote></div><p>\n+Ah ha! Another clue...\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+-3- The instantiations required in the Table ??\n+(lib.locale.category), namely codecvt&lt;wchar_t,char,mbstate_t&gt; and\n+codecvt&lt;char,char,mbstate_t&gt;, convert the implementation-defined\n+native character set. codecvt&lt;char,char,mbstate_t&gt; implements a\n+degenerate conversion; it does not convert at\n+all. codecvt&lt;wchar_t,char,mbstate_t&gt; converts between the native\n+character sets for tiny and wide characters. Instantiations on\n+mbstate_t perform conversion between encodings known to the library\n+implementor.  Other encodings can be converted by specializing on a\n+user-defined stateT type. The stateT object can contain any state that\n+is useful to communicate to or from the specialized do_convert member.\n+</em></span>\n+</p></blockquote></div><p>\n+At this point, a couple points become clear:\n+</p><p>\n+One: The standard clearly implies that attempts to add non-required\n+(yet useful and widely used) conversions need to do so through the\n+third template parameter, stateT.</p><p>\n+Two: The required conversions, by specifying mbstate_t as the third\n+template parameter, imply an implementation strategy that is mostly\n+(or wholly) based on the underlying C library, and the functions\n+mcsrtombs and wcsrtombs in particular.</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.codecvt.design\"></a>Design</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"codecvt.design.wchar_t_size\"></a><span class=\"type\">wchar_t</span> Size</h4></div></div></div><p>\n+      The simple implementation detail of wchar_t's size seems to\n+      repeatedly confound people. Many systems use a two byte,\n+      unsigned integral type to represent wide characters, and use an\n+      internal encoding of Unicode or UCS2. (See AIX, Microsoft NT,\n+      Java, others.) Other systems, use a four byte, unsigned integral\n+      type to represent wide characters, and use an internal encoding\n+      of UCS4. (GNU/Linux systems using glibc, in particular.) The C\n+      programming language (and thus C++) does not specify a specific\n+      size for the type wchar_t.\n+    </p><p>\n+      Thus, portable C++ code cannot assume a byte size (or endianness) either.\n+    </p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"codecvt.design.unicode\"></a>Support for Unicode</h4></div></div></div><p>\n+    Probably the most frequently asked question about code conversion\n+    is: \"So dudes, what's the deal with Unicode strings?\"\n+    The dude part is optional, but apparently the usefulness of\n+    Unicode strings is pretty widely appreciated. Sadly, this specific\n+    encoding (And other useful encodings like UTF8, UCS4, ISO 8859-10,\n+    etc etc etc) are not mentioned in the C++ standard.\n+  </p><p>\n+    A couple of comments:\n+  </p><p>\n+    The thought that all one needs to convert between two arbitrary\n+    codesets is two types and some kind of state argument is\n+    unfortunate. In particular, encodings may be stateless. The naming\n+    of the third parameter as stateT is unfortunate, as what is really\n+    needed is some kind of generalized type that accounts for the\n+    issues that abstract encodings will need. The minimum information\n+    that is required includes:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+\tIdentifiers for each of the codesets involved in the\n+\tconversion. For example, using the iconv family of functions\n+\tfrom the Single Unix Specification (what used to be called\n+\tX/Open) hosted on the GNU/Linux operating system allows\n+\tbi-directional mapping between far more than the following\n+\ttantalizing possibilities:\n+      </p><p>\n+\t(An edited list taken from <code class=\"code\">`iconv --list`</code> on a\n+\tRed Hat 6.2/Intel system:\n+      </p><div class=\"blockquote\"><blockquote class=\"blockquote\"><pre class=\"programlisting\">\n+8859_1, 8859_9, 10646-1:1993, 10646-1:1993/UCS4, ARABIC, ARABIC7,\n+ASCII, EUC-CN, EUC-JP, EUC-KR, EUC-TW, GREEK-CCIcode, GREEK, GREEK7-OLD,\n+GREEK7, GREEK8, HEBREW, ISO-8859-1, ISO-8859-2, ISO-8859-3,\n+ISO-8859-4, ISO-8859-5, ISO-8859-6, ISO-8859-7, ISO-8859-8,\n+ISO-8859-9, ISO-8859-10, ISO-8859-11, ISO-8859-13, ISO-8859-14,\n+ISO-8859-15, ISO-10646, ISO-10646/UCS2, ISO-10646/UCS4,\n+ISO-10646/UTF-8, ISO-10646/UTF8, SHIFT-JIS, SHIFT_JIS, UCS-2, UCS-4,\n+UCS2, UCS4, UNICODE, UNICODEBIG, UNICODELIcodeLE, US-ASCII, US, UTF-8,\n+UTF-16, UTF8, UTF16).\n+</pre></blockquote></div><p>\n+For iconv-based implementations, string literals for each of the\n+encodings (ie. \"UCS-2\" and \"UTF-8\") are necessary,\n+although for other,\n+non-iconv implementations a table of enumerated values or some other\n+mechanism may be required.\n+</p></li><li><p>\n+ Maximum length of the identifying string literal.\n+</p></li><li><p>\n+ Some encodings require explicit endian-ness. As such, some kind\n+  of endian marker or other byte-order marker will be necessary. See\n+  \"Footnotes for C/C++ developers\" in Haible for more information on\n+  UCS-2/Unicode endian issues. (Summary: big endian seems most likely,\n+  however implementations, most notably Microsoft, vary.)\n+</p></li><li><p>\n+ Types representing the conversion state, for conversions involving\n+  the machinery in the \"C\" library, or the conversion descriptor, for\n+  conversions using iconv (such as the type iconv_t.)  Note that the\n+  conversion descriptor encodes more information than a simple encoding\n+  state type.\n+</p></li><li><p>\n+ Conversion descriptors for both directions of encoding. (ie, both\n+  UCS-2 to UTF-8 and UTF-8 to UCS-2.)\n+</p></li><li><p>\n+ Something to indicate if the conversion requested if valid.\n+</p></li><li><p>\n+ Something to represent if the conversion descriptors are valid.\n+</p></li><li><p>\n+ Some way to enforce strict type checking on the internal and\n+  external types. As part of this, the size of the internal and\n+  external types will need to be known.\n+</p></li></ul></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"codecvt.design.issues\"></a>Other Issues</h4></div></div></div><p>\n+In addition, multi-threaded and multi-locale environments also impact\n+the design and requirements for code conversions. In particular, they\n+affect the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt;\n+when implemented using standard \"C\" functions.\n+</p><p>\n+Three problems arise, one big, one of medium importance, and one small. \n+</p><p>\n+First, the small: mcsrtombs and wcsrtombs may not be multithread-safe\n+on all systems required by the GNU tools. For GNU/Linux and glibc,\n+this is not an issue.\n+</p><p>\n+Of medium concern, in the grand scope of things, is that the functions\n+used to implement this specialization work on null-terminated\n+strings. Buffers, especially file buffers, may not be null-terminated,\n+thus giving conversions that end prematurely or are otherwise\n+incorrect. Yikes!\n+</p><p>\n+The last, and fundamental problem, is the assumption of a global\n+locale for all the \"C\" functions referenced above. For something like\n+C++ iostreams (where codecvt is explicitly used) the notion of\n+multiple locales is fundamental. In practice, most users may not run\n+into this limitation. However, as a quality of implementation issue,\n+the GNU C++ library would like to offer a solution that allows\n+multiple locales and or simultaneous usage with computationally\n+correct results. In short, libstdc++ is trying to offer, as an\n+option, a high-quality implementation, damn the additional complexity!\n+</p><p>\n+For the required specialization codecvt&lt;wchar_t, char, mbstate_t&gt; ,\n+conversions are made between the internal character set (always UCS4\n+on GNU/Linux) and whatever the currently selected locale for the\n+LC_CTYPE category implements.\n+</p></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.codecvt.impl\"></a>Implementation</h3></div></div></div><p>\n+The two required specializations are implemented as follows:\n+</p><p>\n+<code class=\"code\">\n+codecvt&lt;char, char, mbstate_t&gt;\n+</code>\n+</p><p>\n+This is a degenerate (ie, does nothing) specialization. Implementing\n+this was a piece of cake.\n+</p><p>\n+<code class=\"code\">\n+codecvt&lt;char, wchar_t, mbstate_t&gt;\n+</code>\n+</p><p>\n+This specialization, by specifying all the template parameters, pretty\n+much ties the hands of implementors. As such, the implementation is\n+straightforward, involving mcsrtombs for the conversions between char\n+to wchar_t and wcsrtombs for conversions between wchar_t and char.\n+</p><p>\n+Neither of these two required specializations deals with Unicode\n+characters. As such, libstdc++ implements a partial specialization\n+of the codecvt class with and iconv wrapper class, encoding_state as the\n+third template parameter.\n+</p><p>\n+This implementation should be standards conformant. First of all, the\n+standard explicitly points out that instantiations on the third\n+template parameter, stateT, are the proper way to implement\n+non-required conversions. Second of all, the standard says (in Chapter\n+17) that partial specializations of required classes are a-ok. Third\n+of all, the requirements for the stateT type elsewhere in the standard\n+(see 21.1.2 traits typedefs) only indicate that this type be copy\n+constructible.\n+</p><p>\n+As such, the type encoding_state is defined as a non-templatized, POD\n+type to be used as the third type of a codecvt instantiation. This\n+type is just a wrapper class for iconv, and provides an easy interface\n+to iconv functionality.\n+</p><p>\n+There are two constructors for encoding_state:\n+</p><p>\n+<code class=\"code\"> \n+encoding_state() : __in_desc(0), __out_desc(0)\n+</code>\n+</p><p>\n+This default constructor sets the internal encoding to some default\n+(currently UCS4) and the external encoding to whatever is returned by\n+nl_langinfo(CODESET).\n+</p><p>\n+<code class=\"code\"> \n+encoding_state(const char* __int, const char* __ext)\n+</code>\n+</p><p>\n+This constructor takes as parameters string literals that indicate the\n+desired internal and external encoding. There are no defaults for\n+either argument.\n+</p><p>\n+One of the issues with iconv is that the string literals identifying\n+conversions are not standardized. Because of this, the thought of\n+mandating and or enforcing some set of pre-determined valid\n+identifiers seems iffy: thus, a more practical (and non-migraine\n+inducing) strategy was implemented: end-users can specify any string\n+(subject to a pre-determined length qualifier, currently 32 bytes) for\n+encodings. It is up to the user to make sure that these strings are\n+valid on the target system.\n+</p><p>\n+<code class=\"code\"> \n+void\n+_M_init()\n+</code>\n+</p><p>\n+Strangely enough, this member function attempts to open conversion\n+descriptors for a given encoding_state object. If the conversion\n+descriptors are not valid, the conversion descriptors returned will\n+not be valid and the resulting calls to the codecvt conversion\n+functions will return error.\n+</p><p>\n+<code class=\"code\"> \n+bool\n+_M_good()\n+</code>\n+</p><p>\n+Provides a way to see if the given encoding_state object has been\n+properly initialized. If the string literals describing the desired\n+internal and external encoding are not valid, initialization will\n+fail, and this will return false. If the internal and external\n+encodings are valid, but iconv_open could not allocate conversion\n+descriptors, this will also return false. Otherwise, the object is\n+ready to convert and will return true.\n+</p><p>\n+<code class=\"code\"> \n+encoding_state(const encoding_state&amp;)\n+</code>\n+</p><p>\n+As iconv allocates memory and sets up conversion descriptors, the copy\n+constructor can only copy the member data pertaining to the internal\n+and external code conversions, and not the conversion descriptors\n+themselves.\n+</p><p>\n+Definitions for all the required codecvt member functions are provided\n+for this specialization, and usage of codecvt&lt;internal character type,\n+external character type, encoding_state&gt; is consistent with other\n+codecvt usage.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.codecvt.use\"></a>Use</h3></div></div></div><p>A conversions involving string literal.</p><pre class=\"programlisting\">\n+  typedef codecvt_base::result                  result;\n+  typedef unsigned short                        unicode_t;\n+  typedef unicode_t                             int_type;\n+  typedef char                                  ext_type;\n+  typedef encoding_state                          state_type;\n+  typedef codecvt&lt;int_type, ext_type, state_type&gt; unicode_codecvt;\n+\n+  const ext_type*       e_lit = \"black pearl jasmine tea\";\n+  int                   size = strlen(e_lit);\n+  int_type              i_lit_base[24] = \n+  { 25088, 27648, 24832, 25344, 27392, 8192, 28672, 25856, 24832, 29184, \n+    27648, 8192, 27136, 24832, 29440, 27904, 26880, 28160, 25856, 8192, 29696,\n+    25856, 24832, 2560\n+  };\n+  const int_type*       i_lit = i_lit_base;\n+  const ext_type*       efrom_next;\n+  const int_type*       ifrom_next;\n+  ext_type*             e_arr = new ext_type[size + 1];\n+  ext_type*             eto_next;\n+  int_type*             i_arr = new int_type[size + 1];\n+  int_type*             ito_next;\n+\n+  // construct a locale object with the specialized facet.\n+  locale                loc(locale::classic(), new unicode_codecvt);\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet&lt;unicode_codecvt&gt;(loc) );\n+  const unicode_codecvt&amp; cvt = use_facet&lt;unicode_codecvt&gt;(loc); \n+  // convert between const char* and unicode strings\n+  unicode_codecvt::state_type state01(\"UNICODE\", \"ISO_8859-1\");\n+  initialize_state(state01);\n+  result r1 = cvt.in(state01, e_lit, e_lit + size, efrom_next, \n+                     i_arr, i_arr + size, ito_next);\n+  VERIFY( r1 == codecvt_base::ok );\n+  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n+  VERIFY( efrom_next == e_lit + size );\n+  VERIFY( ito_next == i_arr + size );\n+</pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.codecvt.future\"></a>Future</h3></div></div></div><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+   a. things that are sketchy, or remain unimplemented:\n+      do_encoding, max_length and length member functions\n+      are only weakly implemented. I have no idea how to do\n+      this correctly, and in a generic manner.  Nathan?\n+</p></li><li><p>\n+   b. conversions involving std::string\n+  </p><div class=\"itemizedlist\"><ul type=\"circle\"><li><p>\n+      how should operators != and == work for string of\n+      different/same encoding?\n+      </p></li><li><p>\n+      what is equal? A byte by byte comparison or an\n+      encoding then byte comparison?\n+      </p></li><li><p>\n+      conversions between narrow, wide, and unicode strings\n+      </p></li></ul></div></li><li><p>\n+   c. conversions involving std::filebuf and std::ostream\n+</p><div class=\"itemizedlist\"><ul type=\"circle\"><li><p>\n+      how to initialize the state object in a\n+      standards-conformant manner?\n+      </p></li><li><p>\n+      how to synchronize the \"C\" and \"C++\"\n+      conversion information?\n+      </p></li><li><p>\n+      wchar_t/char internal buffers and conversions between\n+      internal/external buffers?\n+      </p></li></ul></div></li></ul></div></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.codecvt.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id400718\"></a><p><span class=\"title\"><i>\n+      The GNU C Library\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Roland</span> <span class=\"surname\">McGrath</span>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2007 FSF. </span><span class=\"pagenums\">Chapters 6 Character Set Handling and 7 Locales and Internationalization. </span></p></div><div class=\"biblioentry\"><a id=\"id487971\"></a><p><span class=\"title\"><i>\n+      Correspondence\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2002 . </span></p></div><div class=\"biblioentry\"><a id=\"id452178\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1998 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id452196\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id461282\"></a><p><span class=\"title\"><i>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 \n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.opennc.org/austin/docreg.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id461308\"></a><p><span class=\"title\"><i>\n+      The C++ Programming Language, Special Edition\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Bjarne</span> <span class=\"surname\">Stroustrup</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley, Inc.. </span><span class=\"pagenums\">Appendix D. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id494830\"></a><p><span class=\"title\"><i>\n+      Standard C++ IOStreams and Locales\n+    </i>. </span><span class=\"subtitle\">\n+      Advanced Programmer's Guide and Reference\n+    . </span><span class=\"author\"><span class=\"firstname\">Angelika</span> <span class=\"surname\">Langer</span>. </span><span class=\"author\"><span class=\"firstname\">Klaus</span> <span class=\"surname\">Kreft</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley Longman, Inc.. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley Longman\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id417572\"></a><p><span class=\"title\"><i>\n+      A brief description of Normative Addendum 1\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Clive</span> <span class=\"surname\">Feather</span>. </span><span class=\"pagenums\">Extended Character Sets. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.lysator.liu.se/c/na1.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id417604\"></a><p><span class=\"title\"><i>\n+      The Unicode HOWTO\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Bruno</span> <span class=\"surname\">Haible</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"ftp://ftp.ilog.fr/pub/Users/haible/utf8/Unicode-HOWTO.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id427552\"></a><p><span class=\"title\"><i>\n+      UTF-8 and Unicode FAQ for Unix/Linux\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Markus</span> <span class=\"surname\">Khun</span>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.cl.cam.ac.uk/~mgk25/unicode.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt06ch15.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt06ch15.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"messages.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a015.\u00a0Facets aka Categories\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0messages</td></tr></table></div></body></html>"}, {"sha": "6b3705aabc2b2825ef9948f91d7ea0f99b6bdf25", "filename": "libstdc++-v3/doc/html/manual/concurrency.html", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconcurrency.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconcurrency.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconcurrency.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a040.\u00a0Concurrency</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch39.html\" title=\"Chapter\u00a039.\u00a0Demangling\" /><link rel=\"next\" href=\"bk01pt12ch40s02.html\" title=\"Implementation\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a040.\u00a0Concurrency</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch39.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch40s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.concurrency\"></a>Chapter\u00a040.\u00a0Concurrency</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"concurrency.html#manual.ext.concurrency.design\">Design</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"concurrency.html#manual.ext.concurrency.design.threads\">Interface to Locks and Mutexes</a></span></dt><dt><span class=\"sect2\"><a href=\"concurrency.html#manual.ext.concurrency.design.atomics\">Interface to Atomic Functions</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch40s02.html\">Implementation</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch40s02.html#manual.ext.concurrency.impl.atomic_fallbacks\">Using Builitin Atomic Functions</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch40s02.html#manual.ext.concurrency.impl.thread\">Thread Abstraction</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch40s03.html\">Use</a></span></dt></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.concurrency.design\"></a>Design</h2></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.concurrency.design.threads\"></a>Interface to Locks and Mutexes</h3></div></div></div><p>The file &lt;ext/concurrence.h&gt; contains all the higher-level\n+constructs for playing with threads. In contrast to the atomics layer,\n+the concurrence layer consists largely of types. All types are defined within <code class=\"code\">namespace __gnu_cxx</code>.\n+</p><p>\n+These types can be used in a portable manner, regardless of the\n+specific environment. They are carefully designed to provide optimum\n+efficiency and speed, abstracting out underlying thread calls and\n+accesses when compiling for single-threaded situations (even on hosts\n+that support multiple threads.)\n+</p><p>The enumerated type <code class=\"code\">_Lock_policy</code> details the set of\n+available locking\n+policies: <code class=\"code\">_S_single</code>, <code class=\"code\">_S_mutex</code>,\n+and <code class=\"code\">_S_atomic</code>.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">_S_single</code></p><p>Indicates single-threaded code that does not need locking.\n+</p></li><li><p><code class=\"code\">_S_mutex</code></p><p>Indicates multi-threaded code using thread-layer abstractions.\n+</p></li><li><p><code class=\"code\">_S_atomic</code></p><p>Indicates multi-threaded code using atomic operations.\n+</p></li></ul></div><p>The compile-time constant <code class=\"code\">__default_lock_policy</code> is set\n+to one of the three values above, depending on characteristics of the\n+host environment and the current compilation flags.\n+</p><p>Two more datatypes make up the rest of the\n+interface: <code class=\"code\">__mutex</code>, and <code class=\"code\">__scoped_lock</code>.\n+</p><p>\n+</p><p>The scoped lock idiom is well-discussed within the C++\n+community. This version takes a <code class=\"code\">__mutex</code> reference, and\n+locks it during construction of <code class=\"code\">__scoped_locke</code> and\n+unlocks it during destruction. This is an efficient way of locking\n+critical sections, while retaining exception-safety.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.ext.concurrency.design.atomics\"></a>Interface to Atomic Functions</h3></div></div></div><p>\n+Two functions and one type form the base of atomic support. \n+</p><p>The type <code class=\"code\">_Atomic_word</code> is a signed integral type\n+supporting atomic operations.\n+</p><p>\n+The two functions functions are:\n+</p><pre class=\"programlisting\">\n+_Atomic_word\n+__exchange_and_add_dispatch(volatile _Atomic_word*, int);\n+\n+void\n+__atomic_add_dispatch(volatile _Atomic_word*, int);\n+</pre><p>Both of these functions are declared in the header file\n+&lt;ext/atomicity.h&gt;, and are in <code class=\"code\">namespace __gnu_cxx</code>.\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+<code class=\"code\">\n+__exchange_and_add_dispatch\n+</code>\n+</p><p>Adds the second argument's value to the first argument. Returns the old value.\n+</p></li><li><p>\n+<code class=\"code\">\n+__atomic_add_dispatch\n+</code>\n+</p><p>Adds the second argument's value to the first argument. Has no return value.\n+</p></li></ul></div><p>\n+These functions forward to one of several specialized helper\n+functions, depending on the circumstances. For instance, \n+</p><p>\n+<code class=\"code\">\n+__exchange_and_add_dispatch\n+</code>\n+</p><p>\n+Calls through to either of:\n+</p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><code class=\"code\">__exchange_and_add</code>\n+</p><p>Multi-thread version. Inlined if compiler-generated builtin atomics\n+can be used, otherwise resolved at link time to a non-builtin code\n+sequence.\n+</p></li><li><p><code class=\"code\">__exchange_and_add_single</code> \n+</p><p>Single threaded version. Inlined.</p></li></ul></div><p>However, only <code class=\"code\">__exchange_and_add_dispatch</code>\n+and <code class=\"code\">__atomic_add_dispatch</code> should be used. These functions\n+can be used in a portable manner, regardless of the specific\n+environment. They are carefully designed to provide optimum efficiency\n+and speed, abstracting out atomic accesses when they are not required\n+(even on hosts that support compiler intrinsics for atomic\n+operations.)\n+</p><p>\n+In addition, there are two macros\n+</p><p>\n+<code class=\"code\">\n+_GLIBCXX_READ_MEM_BARRIER \n+</code>\n+</p><p>\n+<code class=\"code\">\n+_GLIBCXX_WRITE_MEM_BARRIER \n+</code>\n+</p><p>\n+Which expand to the appropriate write and read barrier required by the\n+host hardware and operating system.\n+</p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch39.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch40s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a039.\u00a0Demangling\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Implementation</td></tr></table></div></body></html>"}, {"sha": "cb5eb15b54057cb1bb33f2efd49b5d5e9d9e5070", "filename": "libstdc++-v3/doc/html/manual/containers.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fcontainers.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fcontainers.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fcontainers.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0VII.\u00a0Containers</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"messages.html\" title=\"messages\" /><link rel=\"next\" href=\"bk01pt07ch16.html\" title=\"Chapter\u00a016.\u00a0Sequences\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0VII.\u00a0Containers</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"messages.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch16.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.containers\"></a>Part\u00a0VII.\u00a0Containers</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt07ch16.html\">16. Sequences</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt07ch16.html#containers.sequences.list\">list</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt07ch16.html#sequences.list.size\">list::size() is O(n)</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt07ch16s02.html\">vector</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt07ch16s02.html#sequences.vector.management\">Space Overhead Management</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt07ch17.html\">17. Associative</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt07ch17.html#containers.associative.insert_hints\">Insertion Hints</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt07ch17s02.html\">bitset</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt07ch17s02.html#associative.bitset.size_variable\">Size Variable</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt07ch17s02.html#associative.bitset.type_string\">Type String</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt07ch18.html\">18. Interacting with C</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt07ch18.html#containers.c.vs_array\">Containers vs. Arrays</a></span></dt></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"messages.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt07ch16.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">messages\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a016.\u00a0Sequences</td></tr></table></div></body></html>"}, {"sha": "9dd254e2981ecd71d8250915a21fd0ea93dd3900", "filename": "libstdc++-v3/doc/html/manual/debug.html", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,148 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Debugging Support</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      debug&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"using.html\" title=\"Chapter\u00a03.\u00a0Using\" /><link rel=\"prev\" href=\"bk01pt01ch03s06.html\" title=\"Exception Safety\" /><link rel=\"next\" href=\"support.html\" title=\"Part\u00a0II.\u00a0Support\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Debugging Support</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s06.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a03.\u00a0Using</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"support.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.using.debug\"></a>Debugging Support</h2></div></div></div><p>\n+  There are numerous things that can be done to improve the ease with\n+  which C++ binaries are debugged when using the GNU tool chain. Here\n+  are some of them.\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.compiler\"></a>Using <span class=\"command\"><strong>g++</strong></span></h3></div></div></div><p> \n+    Compiler flags determine how debug information is transmitted\n+    between compilation and debug or analysis tools.\n+  </p><p>\n+    The default optimizations and debug flags for a libstdc++ build\n+    are <code class=\"code\">-g -O2</code>. However, both debug and optimization\n+    flags can be varied to change debugging characteristics. For\n+    instance, turning off all optimization via the <code class=\"code\">-g -O0</code>\n+    flag will disable inlining, so that stepping through all\n+    functions, including inlined constructors and destructors, is\n+    possible. In addition,\n+    <code class=\"code\">-fno-eliminate-unused-debug-types</code> can be used when\n+    additional debug information, such as nested class info, is\n+    desired.\n+</p><p>\n+  Or, the debug format that the compiler and debugger use to\n+  communicate information about source constructs can be changed via\n+  <code class=\"code\"> -gdwarf-2 </code> or <code class=\"code\"> -gstabs </code> flags: some\n+  debugging formats permit more expressive type and scope information\n+  to be shown in gdb.  The default debug information for a particular\n+  platform can be identified via the value set by the\n+  PREFERRED_DEBUGGING_TYPE macro in the gcc sources.\n+</p><p>\n+  Many other options are available: please see <a class=\"ulink\" href=\"http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging%20Options\" target=\"_top\">\"Options\n+  for Debugging Your Program\"</a> in Using the GNU Compiler\n+  Collection (GCC) for a complete list.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.req\"></a>Debug Versions of Library Binary Files</h3></div></div></div><p>\n+  If you would like debug symbols in libstdc++, there are two ways to\n+  build libstdc++ with debug flags. The first is to run make from the\n+  toplevel in a freshly-configured tree with\n+</p><pre class=\"programlisting\">\n+     --enable-libstdcxx-debug\n+</pre><p>and perhaps</p><pre class=\"programlisting\">\n+     --enable-libstdcxx-debug-flags='...'\n+</pre><p>\n+  to create a separate debug build. Both the normal build and the\n+  debug build will persist, without having to specify\n+  <code class=\"code\">CXXFLAGS</code>, and the debug library will be installed in a\n+  separate directory tree, in <code class=\"code\">(prefix)/lib/debug</code>. For\n+  more information, look at the <a class=\"ulink\" href=\"configopts.html\" target=\"_top\">configuration options</a> document.\n+</p><p>\n+  A second approach is to use the configuration flags \n+</p><pre class=\"programlisting\">\n+     make CXXFLAGS='-g3 -O0' all\n+</pre><p>\n+  This quick and dirty approach is often sufficient for quick\n+  debugging tasks, when you cannot or don't want to recompile your\n+  application to use the <a class=\"ulink\" href=\"#safe\" target=\"_top\">debug mode</a>.</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.memory\"></a>Memory Leak Hunting</h3></div></div></div><p>\n+  There are various third party memory tracing and debug utilities\n+  that can be used to provide detailed memory allocation information\n+  about C++ code. An exhaustive list of tools is not going to be\n+  attempted, but includes <code class=\"code\">mtrace</code>, <code class=\"code\">valgrind</code>,\n+  <code class=\"code\">mudflap</code>, and the non-free commercial product\n+  <code class=\"code\">purify</code>. In addition, <code class=\"code\">libcwd</code> has a\n+  replacement for the global new and delete operators that can track\n+  memory allocation and deallocation and provide useful memory\n+  statistics.\n+</p><p>\n+  Regardless of the memory debugging tool being used, there is one\n+  thing of great importance to keep in mind when debugging C++ code\n+  that uses <code class=\"code\">new</code> and <code class=\"code\">delete</code>: there are\n+  different kinds of allocation schemes that can be used by <code class=\"code\">\n+  std::allocator </code>. For implementation details, see the <a class=\"ulink\" href=\"ext/mt_allocator.html\" target=\"_top\">mt allocator</a> documentation and\n+  look specifically for <code class=\"code\">GLIBCXX_FORCE_NEW</code>.\n+</p><p>\n+  In a nutshell, the default allocator used by <code class=\"code\">\n+  std::allocator</code> is a high-performance pool allocator, and can\n+  give the mistaken impression that in a suspect executable, memory is\n+  being leaked, when in reality the memory \"leak\" is a pool being used\n+  by the library's allocator and is reclaimed after program\n+  termination.\n+</p><p>\n+  For valgrind, there are some specific items to keep in mind. First\n+  of all, use a version of valgrind that will work with current GNU\n+  C++ tools: the first that can do this is valgrind 1.0.4, but later\n+  versions should work at least as well. Second of all, use a\n+  completely unoptimized build to avoid confusing valgrind. Third, use\n+  GLIBCXX_FORCE_NEW to keep extraneous pool allocation noise from\n+  cluttering debug information.\n+</p><p>\n+  Fourth, it may be necessary to force deallocation in other libraries\n+  as well, namely the \"C\" library. On linux, this can be accomplished\n+  with the appropriate use of the <code class=\"code\">__cxa_atexit</code> or\n+  <code class=\"code\">atexit</code> functions.\n+</p><pre class=\"programlisting\">\n+   #include &lt;cstdlib&gt;\n+\n+   extern \"C\" void __libc_freeres(void);\n+\n+   void do_something() { }\n+\n+   int main()\n+   {\n+     atexit(__libc_freeres);\n+     do_something();\n+     return 0;\n+   }\n+</pre><p>or, using <code class=\"code\">__cxa_atexit</code>:</p><pre class=\"programlisting\">\n+   extern \"C\" void __libc_freeres(void);\n+   extern \"C\" int __cxa_atexit(void (*func) (void *), void *arg, void *d);\n+\n+   void do_something() { }\n+\n+   int main()\n+   {\n+      extern void* __dso_handle __attribute__ ((__weak__));\n+      __cxa_atexit((void (*) (void *)) __libc_freeres, NULL, \n+                   &amp;__dso_handle ? __dso_handle : NULL);\n+      do_test();\n+      return 0;\n+   }\n+</pre><p>\n+  Suggested valgrind flags, given the suggestions above about setting\n+  up the runtime environment, library, and test file, might be:\n+</p><pre class=\"programlisting\"> \n+   valgrind -v --num-callers=20 --leak-check=yes --leak-resolution=high --show-reachable=yes a.out\n+</pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.gdb\"></a>Using <span class=\"command\"><strong>gdb</strong></span></h3></div></div></div><p> \n+  </p><p>\n+  Many options are available for gdb itself: please see <a class=\"ulink\" href=\"http://sources.redhat.com/gdb/current/onlinedocs/gdb_13.html#SEC109\" target=\"_top\">\n+  \"GDB features for C++\" </a> in the gdb documentation. Also\n+  recommended: the other parts of this manual.\n+</p><p>\n+  These settings can either be switched on in at the gdb command line,\n+  or put into a .gdbint file to establish default debugging\n+  characteristics, like so:\n+</p><pre class=\"programlisting\">\n+   set print pretty on\n+   set print object on\n+   set print static-members on\n+   set print vtbl on\n+   set print demangle on\n+   set demangle-style gnu-v3\n+</pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.exceptions\"></a>Tracking uncaught exceptions</h3></div></div></div><p>\n+  The <a class=\"link\" href=\"bk01pt02ch06s02.html\" title=\"Verbose Terminate Handler\">verbose\n+  termination handler</a> gives information about uncaught\n+  exceptions which are killing the program.  It is described in the\n+  linked-to page.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.debug_mode\"></a>Debug Mode</h3></div></div></div><p> The <a class=\"link\" href=\"debug_mode.html\" title=\"Chapter\u00a030.\u00a0Debug Mode\">Debug Mode</a>\n+  has compile and run-time checks for many containers.\n+  </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"debug.compile_time_checks\"></a>Compile Time Checking</h3></div></div></div><p> The <a class=\"link\" href=\"bk01pt12ch29.html\" title=\"Chapter\u00a029.\u00a0Compile Time Checks\">Compile-Time\n+  Checks</a> Extension has compile-time checks for many algorithms.\n+  </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt01ch03s06.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"using.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"support.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Exception Safety\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0II.\u00a0Support</td></tr></table></div></body></html>"}, {"sha": "fa9f7b7e3e80563d6b4518c092125a6096a05b7c", "filename": "libstdc++-v3/doc/html/manual/debug_mode.html", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug_mode.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Chapter\u00a030.\u00a0Debug Mode</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      C++&#10;    , &#10;      library&#10;    , &#10;      debug&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"extensions.html\" title=\"Part\u00a0XII.\u00a0Extensions\" /><link rel=\"prev\" href=\"bk01pt12ch29.html\" title=\"Chapter\u00a029.\u00a0Compile Time Checks\" /><link rel=\"next\" href=\"bk01pt12ch30s02.html\" title=\"Semantics\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Chapter\u00a030.\u00a0Debug Mode</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch29.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch30s02.html\">Next</a></td></tr></table><hr /></div><div class=\"chapter\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\"><a id=\"manual.ext.debug_mode\"></a>Chapter\u00a030.\u00a0Debug Mode</h2></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"sect1\"><a href=\"debug_mode.html#manual.ext.debug_mode.intro\">Intro</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch30s02.html\">Semantics</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch30s03.html\">Using</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s03.html#debug_mode.using.mode\">Using the Debug Mode</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s03.html#debug_mode.using.specific\">Using a Specific Debug Container</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch30s04.html\">Design</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s04.html#manual.ext.debug_mode.design.goals\">Goals</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s04.html#manual.ext.debug_mode.design.methods\">Methods</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s04.html#manual.ext.debug_mode.design.other\">Other Implementations</a></span></dt></dl></dd></dl></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.ext.debug_mode.intro\"></a>Intro</h2></div></div></div><p>\n+    By default, libstdc++ is built with efficiency in mind, and\n+    therefore performs little or no error checking that is not\n+    required by the C++ standard. This means that programs that\n+    incorrectly use the C++ standard library will exhibit behavior\n+    that is not portable and may not even be predictable, because they\n+    tread into implementation-specific or undefined behavior. To\n+    detect some of these errors before they can become problematic,\n+    libstdc++ offers a debug mode that provides additional checking of\n+    library facilities, and will report errors in the use of libstdc++\n+    as soon as they can be detected by emitting a description of the\n+    problem to standard error and aborting the program.  This debug\n+    mode is available with GCC 3.4.0 and later versions. \n+  </p><p>\n+    The libstdc++ debug mode performs checking for many areas of the\n+    C++ standard, but the focus is on checking interactions among\n+    standard iterators, containers, and algorithms, including:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p><span class=\"emphasis\"><em>Safe iterators</em></span>: Iterators keep track of the\n+    container whose elements they reference, so errors such as\n+    incrementing a past-the-end iterator or dereferencing an iterator\n+    that points to a container that has been destructed are diagnosed\n+    immediately.</p></li><li><p><span class=\"emphasis\"><em>Algorithm preconditions</em></span>: Algorithms attempt to\n+    validate their input parameters to detect errors as early as\n+    possible. For instance, the <code class=\"code\">set_intersection</code>\n+    algorithm requires that its iterator\n+    parameters <code class=\"code\">first1</code> and <code class=\"code\">last1</code> form a valid\n+    iterator range, and that the sequence\n+    [<code class=\"code\">first1</code>, <code class=\"code\">last1</code>) is sorted according to\n+    the same predicate that was passed\n+    to <code class=\"code\">set_intersection</code>; the libstdc++ debug mode will\n+    detect an error if the sequence is not sorted or was sorted by a\n+    different predicate.</p></li></ul></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt12ch29.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"extensions.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12ch30s02.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a029.\u00a0Compile Time Checks\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Semantics</td></tr></table></div></body></html>"}, {"sha": "4557c13d9c9b50683622455756c4a7849d4410ac", "filename": "libstdc++-v3/doc/html/manual/diagnostics.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdiagnostics.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdiagnostics.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdiagnostics.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0III.\u00a0Diagnostics</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt02ch06s02.html\" title=\"Verbose Terminate Handler\" /><link rel=\"next\" href=\"bk01pt03ch07.html\" title=\"Chapter\u00a07.\u00a0Exceptions\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0III.\u00a0Diagnostics</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch06s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch07.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.diagnostics\"></a>Part\u00a0III.\u00a0Diagnostics</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt03ch07.html\">7. Exceptions</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt03ch07.html#manual.diagnostics.exceptions.hierarchy\">Exception Classes</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt03ch07s02.html\">Adding Data to Exceptions</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt03ch07s03.html\">Cancellation</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt03ch08.html\">8. Concept Checking</a></span></dt></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt02ch06s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt03ch07.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Verbose Terminate Handler\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a07.\u00a0Exceptions</td></tr></table></div></body></html>"}, {"sha": "bbd57bafde94607c628d965282dc953f9e3c09ee", "filename": "libstdc++-v3/doc/html/manual/extensions.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fextensions.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fextensions.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fextensions.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0XII.\u00a0Extensions</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt11ch28s02.html\" title=\"Performance\" /><link rel=\"next\" href=\"bk01pt12pr03.html\" title=\"\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0XII.\u00a0Extensions</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch28s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12pr03.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.ext\"></a>Part\u00a0XII.\u00a0Extensions</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"preface\"><a href=\"bk01pt12pr03.html\"></a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt12ch29.html\">29. Compile Time Checks</a></span></dt><dt><span class=\"chapter\"><a href=\"debug_mode.html\">30. Debug Mode</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"debug_mode.html#manual.ext.debug_mode.intro\">Intro</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch30s02.html\">Semantics</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch30s03.html\">Using</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s03.html#debug_mode.using.mode\">Using the Debug Mode</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s03.html#debug_mode.using.specific\">Using a Specific Debug Container</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch30s04.html\">Design</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s04.html#manual.ext.debug_mode.design.goals\">Goals</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s04.html#manual.ext.debug_mode.design.methods\">Methods</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch30s04.html#manual.ext.debug_mode.design.other\">Other Implementations</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"parallel_mode.html\">31. Parallel Mode</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"parallel_mode.html#manual.ext.parallel_mode.intro\">Intro</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch31s02.html\">Semantics</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch31s03.html\">Using</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch31s03.html#parallel_mode.using.parallel_mode\">Using Parallel Mode</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch31s03.html#manual.ext.parallel_mode.usings\">Using Specific Parallel Components</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch31s04.html\">Design</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch31s04.html#manual.ext.parallel_mode.design.intro\">Interface Basics</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch31s04.html#manual.ext.parallel_mode.design.tuning\">Configuration and Tuning</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch31s04.html#manual.ext.parallel_mode.design.impl\">Implementation Namespaces</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch31s05.html\">Testing</a></span></dt><dt><span class=\"bibliography\"><a href=\"parallel_mode.html#parallel_mode.biblio\">Bibliography</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt12ch32.html\">32. Allocators</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt12ch32.html#manual.ext.allocator.mt\">mt_allocator</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.intro\">Intro</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.design_issues\">Design Issues</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.example_single\">Single Thread Example</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch32.html#allocator.mt.example_multi\">Multiple Thread Example</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bitmap_allocator.html\">bitmap_allocator</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bitmap_allocator.html#allocator.bitmap.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"bitmap_allocator.html#allocator.bitmap.impl\">Implementation</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt12ch33.html\">33. Containers</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt12ch33.html#manual.ext.containers.pbds\">Policy Based Data Structures</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch33s02.html\">HP/SGI</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt12ch33s03.html\">Deprecated HP/SGI</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt12ch34.html\">34. Utilities</a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt12ch35.html\">35. Algorithms</a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt12ch36.html\">36. Numerics</a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt12ch37.html\">37. Iterators</a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt12ch38.html\">38. Input and Output</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt12ch38.html#manual.ext.io.filebuf_derived\">Derived filebufs</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt12ch39.html\">39. Demangling</a></span></dt><dt><span class=\"chapter\"><a href=\"concurrency.html\">40. Concurrency</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"concurrency.html#manual.ext.concurrency.design\">Design</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"concurrency.html#manual.ext.concurrency.design.threads\">Interface to Locks and Mutexes</a></span></dt><dt><span class=\"sect2\"><a href=\"concurrency.html#manual.ext.concurrency.design.atomics\">Interface to Atomic Functions</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch40s02.html\">Implementation</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt12ch40s02.html#manual.ext.concurrency.impl.atomic_fallbacks\">Using Builitin Atomic Functions</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt12ch40s02.html#manual.ext.concurrency.impl.thread\">Thread Abstraction</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt12ch40s03.html\">Use</a></span></dt></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt11ch28s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt12pr03.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Performance\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0</td></tr></table></div></body></html>"}, {"sha": "af54578b31bfead97eff697639eeb4ac715851d7", "filename": "libstdc++-v3/doc/html/manual/internals.html", "status": "added", "additions": 368, "deletions": 0, "changes": 368, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Finternals.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Finternals.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Finternals.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,368 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Porting to New Hardware or Operating Systems</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      internals&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\" /><link rel=\"prev\" href=\"appendix_porting.html\" title=\"Appendix\u00a0B.\u00a0Porting and Maintenance\" /><link rel=\"next\" href=\"abi.html\" title=\"ABI Policy and Guidelines\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Porting to New Hardware or Operating Systems</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"appendix_porting.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Appendix\u00a0B.\u00a0Porting and Maintenance</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"abi.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"appendix.porting.internals\"></a>Porting to New Hardware or Operating Systems</h2></div></div></div><p>\n+</p><p>This document explains how to port libstdc++ (the GNU C++ library) to\n+a new target.\n+</p><p>In order to make the GNU C++ library (libstdc++) work with a new\n+target, you must edit some configuration files and provide some new\n+header files.  Unless this is done, libstdc++ will use generic\n+settings which may not be correct for your target; even if they are\n+correct, they will likely be inefficient.\n+   </p><p>Before you get started, make sure that you have a working C library on\n+your target.  The C library need not precisely comply with any\n+particular standard, but should generally conform to the requirements\n+imposed by the ANSI/ISO standard.\n+   </p><p>In addition, you should try to verify that the C++ compiler generally\n+works.  It is difficult to test the C++ compiler without a working\n+library, but you should at least try some minimal test cases.\n+   </p><p>(Note that what we think of as a \"target,\" the library refers to as\n+a \"host.\"  The comment at the top of <code class=\"code\">configure.ac</code> explains why.)\n+   </p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"internals.os\"></a>Operating System</h3></div></div></div><p>If you are porting to a new operating system (as opposed to a new chip\n+using an existing operating system), you will need to create a new\n+directory in the <code class=\"code\">config/os</code> hierarchy.  For example, the IRIX\n+configuration files are all in <code class=\"code\">config/os/irix</code>.  There is no set\n+way to organize the OS configuration directory.  For example,\n+<code class=\"code\">config/os/solaris/solaris-2.6</code> and\n+<code class=\"code\">config/os/solaris/solaris-2.7</code> are used as configuration\n+directories for these two versions of Solaris.  On the other hand, both\n+Solaris 2.7 and Solaris 2.8 use the <code class=\"code\">config/os/solaris/solaris-2.7</code>\n+directory.  The important information is that there needs to be a\n+directory under <code class=\"code\">config/os</code> to store the files for your operating\n+system.\n+</p><p>You might have to change the <code class=\"code\">configure.host</code> file to ensure that\n+your new directory is activated.  Look for the switch statement that sets\n+<code class=\"code\">os_include_dir</code>, and add a pattern to handle your operating system\n+if the default will not suffice.  The switch statement switches on only\n+the OS portion of the standard target triplet; e.g., the <code class=\"code\">solaris2.8</code>\n+in <code class=\"code\">sparc-sun-solaris2.8</code>.  If the new directory is named after the\n+OS portion of the triplet (the default), then nothing needs to be changed.\n+   </p><p>The first file to create in this directory, should be called\n+<code class=\"code\">os_defines.h</code>.  This file contains basic macro definitions\n+that are required to allow the C++ library to work with your C library. \n+   </p><p>Several libstdc++ source files unconditionally define the macro\n+<code class=\"code\">_POSIX_SOURCE</code>.  On many systems, defining this macro causes\n+large portions of the C library header files to be eliminated\n+at preprocessing time.  Therefore, you may have to <code class=\"code\">#undef</code> this\n+macro, or define other macros (like <code class=\"code\">_LARGEFILE_SOURCE</code> or\n+<code class=\"code\">__EXTENSIONS__</code>).  You won't know what macros to define or\n+undefine at this point; you'll have to try compiling the library and\n+seeing what goes wrong.  If you see errors about calling functions\n+that have not been declared, look in your C library headers to see if\n+the functions are declared there, and then figure out what macros you\n+need to define.  You will need to add them to the\n+<code class=\"code\">CPLUSPLUS_CPP_SPEC</code> macro in the GCC configuration file for your\n+target.  It will not work to simply define these macros in\n+<code class=\"code\">os_defines.h</code>.\n+   </p><p>At this time, there are a few libstdc++-specific macros which may be\n+defined:\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_CHECK</code> may be defined to 1 to check C99\n+function declarations (which are not covered by specialization below)\n+found in system headers against versions found in the library headers\n+derived from the standard.\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_DYNAMIC</code> may be defined to an expression that\n+yields 0 if and only if the system headers are exposing proper support\n+for C99 functions (which are not covered by specialization below).  If\n+defined, it must be 0 while bootstrapping the compiler/rebuilding the\n+library.\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_LONG_LONG_CHECK</code> may be defined to 1 to check\n+the set of C99 long long function declarations found in system headers\n+against versions found in the library headers derived from the\n+standard.\n+\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC</code> may be defined to an\n+expression that yields 0 if and only if the system headers are\n+exposing proper support for the set of C99 long long functions.  If\n+defined, it must be 0 while bootstrapping the compiler/rebuilding the\n+library.\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC</code> may be defined to an\n+expression that yields 0 if and only if the system headers\n+are exposing proper support for the related set of macros.  If defined,\n+it must be 0 while bootstrapping the compiler/rebuilding the library.\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_CHECK</code> may be defined\n+to 1 to check the related set of function declarations found in system\n+headers against versions found in the library headers derived from\n+the standard.\n+   </p><p><code class=\"code\">_GLIBCXX_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC</code> may be defined\n+to an expression that yields 0 if and only if the system headers\n+are exposing proper support for the related set of functions.  If defined,\n+it must be 0 while bootstrapping the compiler/rebuilding the library.\n+   </p><p>Finally, you should bracket the entire file in an include-guard, like\n+this:\n+   </p><pre class=\"programlisting\">     \n+\n+#ifndef _GLIBCXX_OS_DEFINES\n+#define _GLIBCXX_OS_DEFINES\n+...\n+#endif\n+</pre><p>We recommend copying an existing <code class=\"code\">os_defines.h</code> to use as a\n+starting point.\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"internals.cpu\"></a>CPU</h3></div></div></div><p>If you are porting to a new chip (as opposed to a new operating system\n+running on an existing chip), you will need to create a new directory in the\n+<code class=\"code\">config/cpu</code> hierarchy.  Much like the <a class=\"link\" href=\"internals.html#internals.os\" title=\"Operating System\">Operating system</a> setup,\n+there are no strict rules on how to organize the CPU configuration\n+directory, but careful naming choices will allow the configury to find your\n+setup files without explicit help.\n+</p><p>We recommend that for a target triplet <code class=\"code\">&lt;CPU&gt;-&lt;vendor&gt;-&lt;OS&gt;</code>, you\n+name your configuration directory <code class=\"code\">config/cpu/&lt;CPU&gt;</code>.  If you do this,\n+the configury will find the directory by itself.  Otherwise you will need to\n+edit the <code class=\"code\">configure.host</code> file and, in the switch statement that sets\n+<code class=\"code\">cpu_include_dir</code>, add a pattern to handle your chip.\n+   </p><p>Note that some chip families share a single configuration directory, for\n+example, <code class=\"code\">alpha</code>, <code class=\"code\">alphaev5</code>, and <code class=\"code\">alphaev6</code> all use the\n+<code class=\"code\">config/cpu/alpha</code> directory, and there is an entry in the\n+<code class=\"code\">configure.host</code> switch statement to handle this.\n+   </p><p>The <code class=\"code\">cpu_include_dir</code> sets default locations for the files controlling\n+<a class=\"link\" href=\"internals.html#internals.thread_safety\" title=\"Thread Safety\">Thread safety</a> and <a class=\"link\" href=\"internals.html#internals.numeric_limits\" title=\"Numeric Limits\">Numeric limits</a>, if the defaults are not\n+appropriate for your chip.\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"internals.char_types\"></a>Character Types</h3></div></div></div><p>The library requires that you provide three header files to implement\n+character classification, analogous to that provided by the C libraries\n+<code class=\"code\">&lt;ctype.h&gt;</code> header.  You can model these on the files provided in\n+<code class=\"code\">config/os/generic</code>.  However, these files will almost\n+certainly need some modification.\n+</p><p>The first file to write is <code class=\"code\">ctype_base.h</code>.  This file provides\n+some very basic information about character classification.  The libstdc++\n+library assumes that your C library implements <code class=\"code\">&lt;ctype.h&gt;</code> by using\n+a table (indexed by character code) containing integers, where each of\n+these integers is a bit-mask indicating whether the character is\n+upper-case, lower-case, alphabetic, etc.  The <code class=\"code\">ctype_base.h</code>\n+file gives the type of the integer, and the values of the various bit\n+masks.  You will have to peer at your own <code class=\"code\">&lt;ctype.h&gt;</code> to figure out\n+how to define the values required by this file.\n+   </p><p>The <code class=\"code\">ctype_base.h</code> header file does not need include guards. \n+It should contain a single <code class=\"code\">struct</code> definition called\n+<code class=\"code\">ctype_base</code>.  This <code class=\"code\">struct</code> should contain two type\n+declarations, and one enumeration declaration, like this example, taken\n+from the IRIX configuration:\n+   </p><pre class=\"programlisting\">\n+  struct ctype_base\n+     {\n+       typedef unsigned int \tmask;\n+       typedef int* \t\t__to_type;\n+     \n+       enum\n+       {\n+         space = _ISspace,\n+         print = _ISprint,\n+         cntrl = _IScntrl,\n+         upper = _ISupper,\n+         lower = _ISlower,\n+         alpha = _ISalpha,\n+         digit = _ISdigit,\n+         punct = _ISpunct,\n+         xdigit = _ISxdigit,\n+         alnum = _ISalnum,\n+         graph = _ISgraph\n+       };\n+     };\n+</pre><p>The <code class=\"code\">mask</code> type is the type of the elements in the table.  If your\n+C library uses a table to map lower-case numbers to upper-case numbers,\n+and vice versa, you should define <code class=\"code\">__to_type</code> to be the type of the\n+elements in that table.  If you don't mind taking a minor performance\n+penalty, or if your library doesn't implement <code class=\"code\">toupper</code> and\n+<code class=\"code\">tolower</code> in this way, you can pick any pointer-to-integer type,\n+but you must still define the type.\n+</p><p>The enumeration should give definitions for all the values in the above\n+example, using the values from your native <code class=\"code\">&lt;ctype.h&gt;</code>.  They can\n+be given symbolically (as above), or numerically, if you prefer.  You do\n+not have to include <code class=\"code\">&lt;ctype.h&gt;</code> in this header; it will always be\n+included before <code class=\"code\">ctype_base.h</code> is included.\n+   </p><p>The next file to write is <code class=\"code\">ctype_noninline.h</code>, which also does\n+not require include guards.  This file defines a few member functions\n+that will be included in <code class=\"code\">include/bits/locale_facets.h</code>.  The first\n+function that must be written is the <code class=\"code\">ctype&lt;char&gt;::ctype</code>\n+constructor.  Here is the IRIX example:\n+   </p><pre class=\"programlisting\">\n+ctype&lt;char&gt;::ctype(const mask* __table = 0, bool __del = false,\n+           size_t __refs = 0)\n+       : _Ctype_nois&lt;char&gt;(__refs), _M_del(__table != 0 &amp;&amp; __del),\n+         _M_toupper(NULL),\n+         _M_tolower(NULL),\n+         _M_ctable(NULL),\n+         _M_table(!__table\n+                  ? (const mask*) (__libc_attr._ctype_tbl-&gt;_class + 1)\n+                  : __table)\n+       { }\n+</pre><p>There are two parts of this that you might choose to alter. The first,\n+and most important, is the line involving <code class=\"code\">__libc_attr</code>.  That is\n+IRIX system-dependent code that gets the base of the table mapping\n+character codes to attributes.  You need to substitute code that obtains\n+the address of this table on your system.  If you want to use your\n+operating system's tables to map upper-case letters to lower-case, and\n+vice versa, you should initialize <code class=\"code\">_M_toupper</code> and\n+<code class=\"code\">_M_tolower</code> with those tables, in similar fashion.\n+</p><p>Now, you have to write two functions to convert from upper-case to\n+lower-case, and vice versa.  Here are the IRIX versions:\n+   </p><pre class=\"programlisting\">\n+     char\n+     ctype&lt;char&gt;::do_toupper(char __c) const\n+     { return _toupper(__c); }\n+     \n+     char\n+     ctype&lt;char&gt;::do_tolower(char __c) const\n+     { return _tolower(__c); }\n+</pre><p>Your C library provides equivalents to IRIX's <code class=\"code\">_toupper</code> and\n+<code class=\"code\">_tolower</code>.  If you initialized <code class=\"code\">_M_toupper</code> and\n+<code class=\"code\">_M_tolower</code> above, then you could use those tables instead.\n+</p><p>Finally, you have to provide two utility functions that convert strings\n+of characters.  The versions provided here will always work - but you\n+could use specialized routines for greater performance if you have\n+machinery to do that on your system:\n+   </p><pre class=\"programlisting\">\n+     const char*\n+     ctype&lt;char&gt;::do_toupper(char* __low, const char* __high) const\n+     {\n+       while (__low &lt; __high)\n+         {\n+           *__low = do_toupper(*__low);\n+           ++__low;\n+         }\n+       return __high;\n+     }\n+     \n+     const char*\n+     ctype&lt;char&gt;::do_tolower(char* __low, const char* __high) const\n+     {\n+       while (__low &lt; __high)\n+         {\n+           *__low = do_tolower(*__low);\n+           ++__low;\n+         }\n+       return __high;\n+     }\n+</pre><p>You must also provide the <code class=\"code\">ctype_inline.h</code> file, which\n+contains a few more functions.  On most systems, you can just copy\n+<code class=\"code\">config/os/generic/ctype_inline.h</code> and use it on your system.\n+   </p><p>In detail, the functions provided test characters for particular\n+properties; they are analogous to the functions like <code class=\"code\">isalpha</code> and\n+<code class=\"code\">islower</code> provided by the C library.\n+   </p><p>The first function is implemented like this on IRIX:\n+   </p><pre class=\"programlisting\">\n+     bool\n+     ctype&lt;char&gt;::\n+     is(mask __m, char __c) const throw()\n+     { return (_M_table)[(unsigned char)(__c)] &amp; __m; }\n+</pre><p>The <code class=\"code\">_M_table</code> is the table passed in above, in the constructor. \n+This is the table that contains the bitmasks for each character.  The\n+implementation here should work on all systems.\n+</p><p>The next function is:\n+   </p><pre class=\"programlisting\">\n+     const char*\n+     ctype&lt;char&gt;::\n+     is(const char* __low, const char* __high, mask* __vec) const throw()\n+     {\n+       while (__low &lt; __high)\n+         *__vec++ = (_M_table)[(unsigned char)(*__low++)];\n+       return __high;\n+     }\n+</pre><p>This function is similar; it copies the masks for all the characters\n+from <code class=\"code\">__low</code> up until <code class=\"code\">__high</code> into the vector given by\n+<code class=\"code\">__vec</code>.\n+</p><p>The last two functions again are entirely generic:\n+   </p><pre class=\"programlisting\">\n+     const char*\n+     ctype&lt;char&gt;::\n+     scan_is(mask __m, const char* __low, const char* __high) const throw()\n+     {\n+       while (__low &lt; __high &amp;&amp; !this-&gt;is(__m, *__low))\n+         ++__low;\n+       return __low;\n+     }\n+     \n+     const char*\n+     ctype&lt;char&gt;::\n+     scan_not(mask __m, const char* __low, const char* __high) const throw()\n+     {\n+       while (__low &lt; __high &amp;&amp; this-&gt;is(__m, *__low))\n+         ++__low;\n+       return __low;\n+     }\n+</pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"internals.thread_safety\"></a>Thread Safety</h3></div></div></div><p>The C++ library string functionality requires a couple of atomic\n+operations to provide thread-safety.  If you don't take any special\n+action, the library will use stub versions of these functions that are\n+not thread-safe.  They will work fine, unless your applications are\n+multi-threaded.\n+</p><p>If you want to provide custom, safe, versions of these functions, there\n+are two distinct approaches.  One is to provide a version for your CPU,\n+using assembly language constructs.  The other is to use the\n+thread-safety primitives in your operating system.  In either case, you\n+make a file called <code class=\"code\">atomicity.h</code>, and the variable\n+<code class=\"code\">ATOMICITYH</code> must point to this file.\n+   </p><p>If you are using the assembly-language approach, put this code in\n+<code class=\"code\">config/cpu/&lt;chip&gt;/atomicity.h</code>, where chip is the name of\n+your processor (see <a class=\"link\" href=\"internals.html#internals.cpu\" title=\"CPU\">CPU</a>).  No additional changes are necessary to\n+locate the file in this case; <code class=\"code\">ATOMICITYH</code> will be set by default.\n+   </p><p>If you are using the operating system thread-safety primitives approach,\n+you can also put this code in the same CPU directory, in which case no more\n+work is needed to locate the file.  For examples of this approach,\n+see the <code class=\"code\">atomicity.h</code> file for IRIX or IA64.\n+   </p><p>Alternatively, if the primitives are more closely related to the OS\n+than they are to the CPU, you can put the <code class=\"code\">atomicity.h</code> file in\n+the <a class=\"link\" href=\"internals.html#internals.os\" title=\"Operating System\">Operating system</a> directory instead.  In this case, you must\n+edit <code class=\"code\">configure.host</code>, and in the switch statement that handles\n+operating systems, override the <code class=\"code\">ATOMICITYH</code> variable to point to\n+the appropriate <code class=\"code\">os_include_dir</code>.  For examples of this approach,\n+see the <code class=\"code\">atomicity.h</code> file for AIX.\n+   </p><p>With those bits out of the way, you have to actually write\n+<code class=\"code\">atomicity.h</code> itself.  This file should be wrapped in an\n+include guard named <code class=\"code\">_GLIBCXX_ATOMICITY_H</code>.  It should define one\n+type, and two functions.\n+   </p><p>The type is <code class=\"code\">_Atomic_word</code>.  Here is the version used on IRIX:\n+   </p><pre class=\"programlisting\">\n+typedef long _Atomic_word;\n+</pre><p>This type must be a signed integral type supporting atomic operations. \n+If you're using the OS approach, use the same type used by your system's\n+primitives.  Otherwise, use the type for which your CPU provides atomic\n+primitives.\n+</p><p>Then, you must provide two functions.  The bodies of these functions\n+must be equivalent to those provided here, but using atomic operations:\n+   </p><pre class=\"programlisting\">\n+     static inline _Atomic_word\n+     __attribute__ ((__unused__))\n+     __exchange_and_add (_Atomic_word* __mem, int __val)\n+     {\n+       _Atomic_word __result = *__mem;\n+       *__mem += __val;\n+       return __result;\n+     }\n+     \n+     static inline void\n+     __attribute__ ((__unused__))\n+     __atomic_add (_Atomic_word* __mem, int __val)\n+     {\n+       *__mem += __val;\n+     }\n+</pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"internals.numeric_limits\"></a>Numeric Limits</h3></div></div></div><p>The C++ library requires information about the fundamental data types,\n+such as the minimum and maximum representable values of each type. \n+You can define each of these values individually, but it is usually\n+easiest just to indicate how many bits are used in each of the data\n+types and let the library do the rest.  For information about the\n+macros to define, see the top of <code class=\"code\">include/bits/std_limits.h</code>.\n+</p><p>If you need to define any macros, you can do so in <code class=\"code\">os_defines.h</code>. \n+However, if all operating systems for your CPU are likely to use the\n+same values, you can provide a CPU-specific file instead so that you\n+do not have to provide the same definitions for each operating system. \n+To take that approach, create a new file called <code class=\"code\">cpu_limits.h</code> in\n+your CPU configuration directory (see <a class=\"link\" href=\"internals.html#internals.cpu\" title=\"CPU\">CPU</a>).\n+   </p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"internals.libtool\"></a>Libtool</h3></div></div></div><p>The C++ library is compiled, archived and linked with libtool. \n+Explaining the full workings of libtool is beyond the scope of this\n+document, but there are a few, particular bits that are necessary for\n+porting.\n+</p><p>Some parts of the libstdc++ library are compiled with the libtool\n+<code class=\"code\">--tags CXX</code> option (the C++ definitions for libtool).  Therefore,\n+<code class=\"code\">ltcf-cxx.sh</code> in the top-level directory needs to have the correct\n+logic to compile and archive objects equivalent to the C version of libtool,\n+<code class=\"code\">ltcf-c.sh</code>.  Some libtool targets have definitions for C but not\n+for C++, or C++ definitions which have not been kept up to date.\n+   </p><p>The C++ run-time library contains initialization code that needs to be\n+run as the library is loaded.  Often, that requires linking in special\n+object files when the C++ library is built as a shared library, or\n+taking other system-specific actions.\n+   </p><p>The libstdc++ library is linked with the C version of libtool, even\n+though it is a C++ library.  Therefore, the C version of libtool needs to\n+ensure that the run-time library initializers are run.  The usual way to\n+do this is to build the library using <code class=\"code\">gcc -shared</code>.\n+   </p><p>If you need to change how the library is linked, look at\n+<code class=\"code\">ltcf-c.sh</code> in the top-level directory.  Find the switch statement\n+that sets <code class=\"code\">archive_cmds</code>.  Here, adjust the setting for your\n+operating system.\n+   </p></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"appendix_porting.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"appendix_porting.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"abi.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Appendix\u00a0B.\u00a0Porting and Maintenance\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0ABI Policy and Guidelines</td></tr></table></div></body></html>"}, {"sha": "50287fb51b880946a83193a7d8eba0e9314a0251", "filename": "libstdc++-v3/doc/html/manual/intro.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fintro.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fintro.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fintro.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0I.\u00a0Introduction</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"next\" href=\"bk01pt01ch01.html\" title=\"Chapter\u00a01.\u00a0Status\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0I.\u00a0Introduction</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"spine.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch01.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.intro\"></a>Part\u00a0I.\u00a0Introduction</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt01ch01.html\">1. Status</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt01ch01.html#manual.intro.status.standard\">Implementation Status</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt01ch01.html#manual.intro.status.standard.1998\">C++ 1998</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch01.html#manual.intro.status.standard.tr1\">C++ TR1</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch01.html#manual.intro.status.standard.200x\">C++ 200x</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt01ch01s02.html\">License</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt01ch01s02.html#manual.intro.status.license.gpl\">The Code: GPL</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch01s02.html#manual.intro.status.license.fdl\">The Documentation: GPL, FDL</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt01ch01s03.html\">Bugs</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt01ch01s03.html#manual.intro.status.bugs.impl\">Implementation Bugs</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch01s03.html#manual.intro.status.bugs.iso\">Standard Bugs</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt01ch02.html\">2. Setup</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt01ch02.html#manual.intro.setup.configure\">Configure</a></span></dt><dt><span class=\"sect1\"><a href=\"build.html\">Build</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"build.html#build.prereq\">Prerequisites</a></span></dt><dt><span class=\"sect2\"><a href=\"build.html#build.configure\">Make</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"test.html\">Test</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"test.html#test.organization\">Organization</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.naming\">Naming Conventions</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.utils\">Utilities</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.run\">Running the Testsuite</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.new_tests\">New Test Cases</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.dejagnu\">Test Harness Details</a></span></dt><dt><span class=\"sect2\"><a href=\"test.html#test.future\">Future</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"using.html\">3. Using</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"using.html#manual.intro.using.lib\">Linking Library Binary Files</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt01ch03s02.html\">Headers</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s02.html#manual.intro.using.headers.all\">Header Files</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s02.html#manual.intro.using.headers.mixing\">Mixing Headers</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s02.html#manual.intro.using.headers.cheaders\">The C Headers and <code class=\"code\">namespace std</code></a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s02.html#manual.intro.using.headers.pre\">Precompiled Headers</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt01ch03s03.html\">Namespaces</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s03.html#manual.intro.using.namespaces.all\">Available Namespaces</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s03.html#manual.intro.using.namespaces.std\">namespace std</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s03.html#manual.intro.using.namespaces.comp\">Using Namespace Composition</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt01ch03s04.html\">Macros</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt01ch03s05.html\">Concurrency</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s05.html#manual.intro.using.concurrency.prereq\">Prerequisites</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s05.html#manual.intro.using.concurrency.thread_safety\">Thread Safety</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s05.html#manual.intro.using.concurrency.atomics\">Atomics</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s05.html#manual.intro.using.concurrency.io\">IO</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt01ch03s05.html#manual.intro.using.concurrency.containers\">Containers</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"bk01pt01ch03s06.html\">Exception Safety</a></span></dt><dt><span class=\"sect1\"><a href=\"debug.html\">Debugging Support</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"debug.html#debug.compiler\">Using <span class=\"command\"><strong>g++</strong></span></a></span></dt><dt><span class=\"sect2\"><a href=\"debug.html#debug.req\">Debug Versions of Library Binary Files</a></span></dt><dt><span class=\"sect2\"><a href=\"debug.html#debug.memory\">Memory Leak Hunting</a></span></dt><dt><span class=\"sect2\"><a href=\"debug.html#debug.gdb\">Using <span class=\"command\"><strong>gdb</strong></span></a></span></dt><dt><span class=\"sect2\"><a href=\"debug.html#debug.exceptions\">Tracking uncaught exceptions</a></span></dt><dt><span class=\"sect2\"><a href=\"debug.html#debug.debug_mode\">Debug Mode</a></span></dt><dt><span class=\"sect2\"><a href=\"debug.html#debug.compile_time_checks\">Compile Time Checking</a></span></dt></dl></dd></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"spine.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt01ch01.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">The GNU C++ Library\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a01.\u00a0Status</td></tr></table></div></body></html>"}, {"sha": "4690e8f8861cab2bb4bd78f92725531b809ed28a", "filename": "libstdc++-v3/doc/html/manual/io.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fio.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fio.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fio.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0XI.\u00a0Input and Output</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt10ch23s02.html\" title=\"C99\" /><link rel=\"next\" href=\"bk01pt11ch24.html\" title=\"Chapter\u00a024.\u00a0Iostream Objects\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0XI.\u00a0Input and Output</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch23s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch24.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.io\"></a>Part\u00a0XI.\u00a0Input and Output</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt11ch24.html\">24. Iostream Objects</a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt11ch25.html\">25. Stream Buffers</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch25.html#io.streambuf.derived\">Derived streambuf Classes</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch25s02.html\">Buffering</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt11ch26.html\">26. Memory Based Streams</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch26.html#manual.io.memstreams.compat\">Compatibility With strstream</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt11ch27.html\">27. File Based Streams</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch27.html#manual.io.filestreams.copying_a_file\">Copying a File</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch27s02.html\">Binary Input and Output</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch27s03.html\">More Binary Input and Output</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt11ch28.html\">28. Interacting with C</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt11ch28.html#manual.io.c.FILE\">Using FILE* and file descriptors</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt11ch28s02.html\">Performance</a></span></dt></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt10ch23s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt11ch24.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">C99\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a024.\u00a0Iostream Objects</td></tr></table></div></body></html>"}, {"sha": "9e6b562655eefabcfb37615c99add93f24774158", "filename": "libstdc++-v3/doc/html/manual/iterators.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fiterators.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fiterators.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fiterators.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0VIII.\u00a0Iterators</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt07ch17s02.html\" title=\"bitset\" /><link rel=\"next\" href=\"bk01pt08ch19.html\" title=\"Chapter\u00a019.\u00a0Predefined\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0VIII.\u00a0Iterators</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch17s02.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt08ch19.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.iterators\"></a>Part\u00a0VIII.\u00a0Iterators</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt08ch19.html\">19. Predefined</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt08ch19.html#iterators.predefined.vs_pointers\">Iterators vs. Pointers</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt08ch19s02.html\">One Past the End</a></span></dt></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt07ch17s02.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt08ch19.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">bitset\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a019.\u00a0Predefined</td></tr></table></div></body></html>"}, {"sha": "8d2d8d701fc4cb6c804ee24fc476b3eb3a9b45a4", "filename": "libstdc++-v3/doc/html/manual/localization.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Flocalization.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Flocalization.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Flocalization.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0VI.\u00a0Localization</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt05ch13s06.html\" title=\"CString (MFC)\" /><link rel=\"next\" href=\"bk01pt06ch14.html\" title=\"Chapter\u00a014.\u00a0Locales\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0VI.\u00a0Localization</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s06.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt06ch14.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.localization\"></a>Part\u00a0VI.\u00a0Localization</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt06ch14.html\">14. Locales</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt06ch14.html#manual.localization.locales.locale\">locale</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch14.html#locales.locale.future\">Future</a></span></dt></dl></dd></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt06ch15.html\">15. Facets aka Categories</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt06ch15.html#manual.localization.facet.ctype\">ctype</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"bk01pt06ch15.html#facet.ctype.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"bk01pt06ch15.html#facet.ctype.future\">Future</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"codecvt.html\">codecvt</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.use\">Use</a></span></dt><dt><span class=\"sect2\"><a href=\"codecvt.html#facet.codecvt.future\">Future</a></span></dt></dl></dd><dt><span class=\"sect1\"><a href=\"messages.html\">messages</a></span></dt><dd><dl><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.req\">Requirements</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.design\">Design</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.impl\">Implementation</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.use\">Use</a></span></dt><dt><span class=\"sect2\"><a href=\"messages.html#facet.messages.future\">Future</a></span></dt></dl></dd></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt05ch13s06.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt06ch14.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">CString (MFC)\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a014.\u00a0Locales</td></tr></table></div></body></html>"}, {"sha": "e59f5d11cbdcafb0807c88c9631ab225f51f478a", "filename": "libstdc++-v3/doc/html/manual/messages.html", "status": "added", "additions": 281, "deletions": 0, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmessages.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmessages.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fmessages.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,281 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>messages</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      messages&#10;    \" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"bk01pt06ch15.html\" title=\"Chapter\u00a015.\u00a0Facets aka Categories\" /><link rel=\"prev\" href=\"codecvt.html\" title=\"codecvt\" /><link rel=\"next\" href=\"containers.html\" title=\"Part\u00a0VII.\u00a0Containers\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">messages</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"codecvt.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a015.\u00a0Facets aka Categories</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"containers.html\">Next</a></td></tr></table><hr /></div><div class=\"sect1\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.localization.facet.messages\"></a>messages</h2></div></div></div><p>\n+The std::messages facet implements message retrieval functionality\n+equivalent to Java's java.text.MessageFormat .using either GNU gettext\n+or IEEE 1003.1-200 functions.\n+</p><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.messages.req\"></a>Requirements</h3></div></div></div><p>\n+The std::messages facet is probably the most vaguely defined facet in\n+the standard library. It's assumed that this facility was built into\n+the standard library in order to convert string literals from one\n+locale to the other. For instance, converting the \"C\" locale's\n+<code class=\"code\">const char* c = \"please\"</code> to a German-localized <code class=\"code\">\"bitte\"</code>\n+during program execution.\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+22.2.7.1 - Template class messages [lib.locale.messages]\n+</p></blockquote></div><p>\n+This class has three public member functions, which directly\n+correspond to three protected virtual member functions. \n+</p><p>\n+The public member functions are:\n+</p><p>\n+<code class=\"code\">catalog open(const string&amp;, const locale&amp;) const</code>\n+</p><p>\n+<code class=\"code\">string_type get(catalog, int, int, const string_type&amp;) const</code>\n+</p><p>\n+<code class=\"code\">void close(catalog) const</code>\n+</p><p>\n+While the virtual functions are:\n+</p><p>\n+<code class=\"code\">catalog do_open(const string&amp;, const locale&amp;) const</code>\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+-1- Returns: A value that may be passed to get() to retrieve a\n+message, from the message catalog identified by the string name\n+according to an implementation-defined mapping. The result can be used\n+until it is passed to close().  Returns a value less than 0 if no such\n+catalog can be opened.\n+</em></span>\n+</p></blockquote></div><p>\n+<code class=\"code\">string_type do_get(catalog, int, int, const string_type&amp;) const</code>\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+-3- Requires: A catalog cat obtained from open() and not yet closed. \n+-4- Returns: A message identified by arguments set, msgid, and dfault,\n+according to an implementation-defined mapping. If no such message can\n+be found, returns dfault.\n+</em></span>\n+</p></blockquote></div><p>\n+<code class=\"code\">void do_close(catalog) const</code>\n+</p><div class=\"blockquote\"><blockquote class=\"blockquote\"><p>\n+<span class=\"emphasis\"><em>\n+-5- Requires: A catalog cat obtained from open() and not yet closed. \n+-6- Effects: Releases unspecified resources associated with cat. \n+-7- Notes: The limit on such resources, if any, is implementation-defined. \n+</em></span>\n+</p></blockquote></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.messages.design\"></a>Design</h3></div></div></div><p>\n+A couple of notes on the standard. \n+</p><p>\n+First, why is <code class=\"code\">messages_base::catalog</code> specified as a typedef\n+to int? This makes sense for implementations that use\n+<code class=\"code\">catopen</code>, but not for others. Fortunately, it's not heavily\n+used and so only a minor irritant. \n+</p><p>\n+Second, by making the member functions <code class=\"code\">const</code>, it is\n+impossible to save state in them. Thus, storing away information used\n+in the 'open' member function for use in 'get' is impossible. This is\n+unfortunate.\n+</p><p>\n+The 'open' member function in particular seems to be oddly\n+designed. The signature seems quite peculiar. Why specify a <code class=\"code\">const\n+string&amp; </code> argument, for instance, instead of just <code class=\"code\">const\n+char*</code>? Or, why specify a <code class=\"code\">const locale&amp;</code> argument that is\n+to be used in the 'get' member function? How, exactly, is this locale\n+argument useful? What was the intent? It might make sense if a locale\n+argument was associated with a given default message string in the\n+'open' member function, for instance. Quite murky and unclear, on\n+reflection.\n+</p><p>\n+Lastly, it seems odd that messages, which explicitly require code\n+conversion, don't use the codecvt facet. Because the messages facet\n+has only one template parameter, it is assumed that ctype, and not\n+codecvt, is to be used to convert between character sets. \n+</p><p>\n+It is implicitly assumed that the locale for the default message\n+string in 'get' is in the \"C\" locale. Thus, all source code is assumed\n+to be written in English, so translations are always from \"en_US\" to\n+other, explicitly named locales.\n+</p></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.messages.impl\"></a>Implementation</h3></div></div></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"messages.impl.models\"></a>Models</h4></div></div></div><p>\n+    This is a relatively simple class, on the face of it. The standard\n+    specifies very little in concrete terms, so generic\n+    implementations that are conforming yet do very little are the\n+    norm. Adding functionality that would be useful to programmers and\n+    comparable to Java's java.text.MessageFormat takes a bit of work,\n+    and is highly dependent on the capabilities of the underlying\n+    operating system.\n+  </p><p>\n+    Three different mechanisms have been provided, selectable via\n+    configure flags:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+       generic\n+     </p><p>\n+       This model does very little, and is what is used by default.   \n+     </p></li><li><p> \n+       gnu\n+     </p><p>\n+       The gnu model is complete and fully tested. It's based on the\n+       GNU gettext package, which is part of glibc. It uses the\n+       functions <code class=\"code\">textdomain, bindtextdomain, gettext</code> to\n+       implement full functionality. Creating message catalogs is a\n+       relatively straight-forward process and is lightly documented\n+       below, and fully documented in gettext's distributed\n+       documentation.\n+     </p></li><li><p> \n+       ieee_1003.1-200x\n+     </p><p>\n+       This is a complete, though untested, implementation based on\n+       the IEEE standard. The functions <code class=\"code\">catopen, catgets,\n+       catclose</code> are used to retrieve locale-specific messages\n+       given the appropriate message catalogs that have been\n+       constructed for their use. Note, the script <code class=\"code\">\n+       po2msg.sed</code> that is part of the gettext distribution can\n+       convert gettext catalogs into catalogs that\n+       <code class=\"code\">catopen</code> can use.\n+   </p></li></ul></div><p>\n+A new, standards-conformant non-virtual member function signature was\n+added for 'open' so that a directory could be specified with a given\n+message catalog. This simplifies calling conventions for the gnu\n+model.\n+</p></div><div class=\"sect3\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"messages.impl.gnu\"></a>The GNU Model</h4></div></div></div><p>\n+    The messages facet, because it is retrieving and converting\n+    between characters sets, depends on the ctype and perhaps the\n+    codecvt facet in a given locale. In addition, underlying \"C\"\n+    library locale support is necessary for more than just the\n+    <code class=\"code\">LC_MESSAGES</code> mask: <code class=\"code\">LC_CTYPE</code> is also\n+    necessary. To avoid any unpleasantness, all bits of the \"C\" mask\n+    (ie <code class=\"code\">LC_ALL</code>) are set before retrieving messages.\n+  </p><p>\n+    Making the message catalogs can be initially tricky, but become\n+    quite simple with practice. For complete info, see the gettext\n+    documentation. Here's an idea of what is required:\n+  </p><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+       Make a source file with the required string literals that need\n+       to be translated. See <code class=\"code\">intl/string_literals.cc</code> for\n+       an example.\n+     </p></li><li><p> \n+       Make initial catalog (see \"4 Making the PO Template File\" from\n+       the gettext docs).</p><p>\n+   <code class=\"code\"> xgettext --c++ --debug string_literals.cc -o libstdc++.pot </code>\n+   </p></li><li><p>Make language and country-specific locale catalogs.</p><p>\n+   <code class=\"code\">cp libstdc++.pot fr_FR.po</code>\n+   </p><p>\n+   <code class=\"code\">cp libstdc++.pot de_DE.po</code>\n+   </p></li><li><p>\n+       Edit localized catalogs in emacs so that strings are\n+       translated.\n+     </p><p>\n+   <code class=\"code\">emacs fr_FR.po</code>\n+   </p></li><li><p>Make the binary mo files.</p><p>\n+   <code class=\"code\">msgfmt fr_FR.po -o fr_FR.mo</code>\n+   </p><p>\n+   <code class=\"code\">msgfmt de_DE.po -o de_DE.mo</code>\n+   </p></li><li><p>Copy the binary files into the correct directory structure.</p><p>\n+   <code class=\"code\">cp fr_FR.mo (dir)/fr_FR/LC_MESSAGES/libstdc++.mo</code>\n+   </p><p>\n+   <code class=\"code\">cp de_DE.mo (dir)/de_DE/LC_MESSAGES/libstdc++.mo</code>\n+   </p></li><li><p>Use the new message catalogs.</p><p>\n+   <code class=\"code\">locale loc_de(\"de_DE\");</code>\n+   </p><p>\n+   <code class=\"code\">\n+   use_facet&lt;messages&lt;char&gt; &gt;(loc_de).open(\"libstdc++\", locale(), dir);\n+   </code>\n+   </p></li></ul></div></div></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.messages.use\"></a>Use</h3></div></div></div><p>\n+   A simple example using the GNU model of message conversion.\n+ </p><pre class=\"programlisting\">\n+#include &lt;iostream&gt;\n+#include &lt;locale&gt;\n+using namespace std;\n+\n+void test01()\n+{\n+  typedef messages&lt;char&gt;::catalog catalog;\n+  const char* dir =\n+  \"/mnt/egcs/build/i686-pc-linux-gnu/libstdc++/po/share/locale\";  \n+  const locale loc_de(\"de_DE\");\n+  const messages&lt;char&gt;&amp; mssg_de = use_facet&lt;messages&lt;char&gt; &gt;(loc_de); \n+\n+  catalog cat_de = mssg_de.open(\"libstdc++\", loc_de, dir);\n+  string s01 = mssg_de.get(cat_de, 0, 0, \"please\");\n+  string s02 = mssg_de.get(cat_de, 0, 0, \"thank you\");\n+  cout &lt;&lt; \"please in german:\" &lt;&lt; s01 &lt;&lt; '\\n';\n+  cout &lt;&lt; \"thank you in german:\" &lt;&lt; s02 &lt;&lt; '\\n';\n+  mssg_de.close(cat_de);\n+}\n+</pre></div><div class=\"sect2\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.messages.future\"></a>Future</h3></div></div></div><div class=\"itemizedlist\"><ul type=\"disc\"><li><p>\n+    Things that are sketchy, or remain unimplemented:\n+  </p><div class=\"itemizedlist\"><ul type=\"circle\"><li><p>\n+\t  _M_convert_from_char, _M_convert_to_char are in flux,\n+\t  depending on how the library ends up doing character set\n+\t  conversions. It might not be possible to do a real character\n+\t  set based conversion, due to the fact that the template\n+\t  parameter for messages is not enough to instantiate the\n+\t  codecvt facet (1 supplied, need at least 2 but would prefer\n+\t  3).\n+\t</p></li><li><p> \n+\t  There are issues with gettext needing the global locale set\n+\t  to extract a message. This dependence on the global locale\n+\t  makes the current \"gnu\" model non MT-safe. Future versions\n+\t  of glibc, ie glibc 2.3.x will fix this, and the C++ library\n+\t  bits are already in place.\n+\t</p></li></ul></div></li><li><p>  \n+    Development versions of the GNU \"C\" library, glibc 2.3 will allow\n+    a more efficient, MT implementation of std::messages, and will\n+    allow the removal of the _M_name_messages data member. If this is\n+    done, it will change the library ABI. The C++ parts to support\n+    glibc 2.3 have already been coded, but are not in use: once this\n+    version of the \"C\" library is released, the marked parts of the\n+    messages implementation can be switched over to the new \"C\"\n+    library functionality.\n+  </p></li><li><p>\n+    At some point in the near future, std::numpunct will probably use\n+    std::messages facilities to implement truename/falename\n+    correctly. This is currently not done, but entries in\n+    libstdc++.pot have already been made for \"true\" and \"false\" string\n+    literals, so all that remains is the std::numpunct coding and the\n+    configure/make hassles to make the installed library search its\n+    own catalog. Currently the libstdc++.mo catalog is only searched\n+    for the testsuite cases involving messages members.\n+  </p></li><li><p> The following member functions:</p><p>\n+   <code class=\"code\">\n+        catalog \n+        open(const basic_string&lt;char&gt;&amp; __s, const locale&amp; __loc) const\n+   </code>\n+   </p><p>\n+   <code class=\"code\">\n+   catalog \n+   open(const basic_string&lt;char&gt;&amp;, const locale&amp;, const char*) const;\n+   </code>\n+   </p><p>\n+   Don't actually return a \"value less than 0 if no such catalog\n+   can be opened\" as required by the standard in the \"gnu\"\n+   model. As of this writing, it is unknown how to query to see\n+   if a specified message catalog exists using the gettext\n+   package.\n+   </p></li></ul></div></div><div class=\"bibliography\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"facet.messages.biblio\"></a>Bibliography</h3></div></div></div><div class=\"biblioentry\"><a id=\"id486645\"></a><p><span class=\"title\"><i>\n+      The GNU C Library\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Roland</span> <span class=\"surname\">McGrath</span>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2007 FSF. </span><span class=\"pagenums\">Chapters 6 Character Set Handling, and 7 Locales and Internationalization\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id420122\"></a><p><span class=\"title\"><i>\n+      Correspondence\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Ulrich</span> <span class=\"surname\">Drepper</span>. </span><span class=\"copyright\">Copyright \u00a9 2002 . </span></p></div><div class=\"biblioentry\"><a id=\"id420151\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 14882:1998 Programming languages - C++\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1998 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id483860\"></a><p><span class=\"title\"><i>\n+      ISO/IEC 9899:1999 Programming languages - C\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 ISO. </span></p></div><div class=\"biblioentry\"><a id=\"id483878\"></a><p><span class=\"title\"><i>\n+      System Interface Definitions, Issue 6 (IEEE Std. 1003.1-200x)\n+    </i>. </span><span class=\"copyright\">Copyright \u00a9 1999 \n+      The Open Group/The Institute of Electrical and Electronics Engineers, Inc.. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://www.opennc.org/austin/docreg.html\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id428875\"></a><p><span class=\"title\"><i>\n+      The C++ Programming Language, Special Edition\n+    </i>. </span><span class=\"author\"><span class=\"firstname\">Bjarne</span> <span class=\"surname\">Stroustrup</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley, Inc.. </span><span class=\"pagenums\">Appendix D. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id420793\"></a><p><span class=\"title\"><i>\n+      Standard C++ IOStreams and Locales\n+    </i>. </span><span class=\"subtitle\">\n+      Advanced Programmer's Guide and Reference\n+    . </span><span class=\"author\"><span class=\"firstname\">Angelika</span> <span class=\"surname\">Langer</span>. </span><span class=\"author\"><span class=\"firstname\">Klaus</span> <span class=\"surname\">Kreft</span>. </span><span class=\"copyright\">Copyright \u00a9 2000 Addison Wesley Longman, Inc.. </span><span class=\"publisher\"><span class=\"publishername\">\n+\tAddison Wesley Longman\n+      . </span></span></p></div><div class=\"biblioentry\"><a id=\"id487716\"></a><p><span class=\"title\"><i>\n+      Java 2 Platform, Standard Edition, v 1.3.1 API Specification\n+    </i>. </span><span class=\"pagenums\">java.util.Properties, java.text.MessageFormat,\n+java.util.Locale, java.util.ResourceBundle. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://java.sun.com/j2se/1.3/docs/api\" target=\"_top\">\n+      </a>\n+    . </span></p></div><div class=\"biblioentry\"><a id=\"id487737\"></a><p><span class=\"title\"><i>\n+       GNU gettext tools, version 0.10.38, Native Language Support\n+Library and Tools.\n+    </i>. </span><span class=\"biblioid\">\n+      <a class=\"ulink\" href=\"http://sources.redhat.com/gettext\" target=\"_top\">\n+      </a>\n+    . </span></p></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"codecvt.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"bk01pt06ch15.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"containers.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">codecvt\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Part\u00a0VII.\u00a0Containers</td></tr></table></div></body></html>"}, {"sha": "89d8c0fb07aca04ed6e2cfc4bbb2bc33206f2c1b", "filename": "libstdc++-v3/doc/html/manual/numerics.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fnumerics.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fnumerics.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fnumerics.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Part\u00a0X.\u00a0Numerics</title><meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.73.2\" /><meta name=\"keywords\" content=\"&#10;      ISO C++&#10;    , &#10;      library&#10;    \" /><link rel=\"start\" href=\"../spine.html\" title=\"The GNU C++ Library Documentation\" /><link rel=\"up\" href=\"spine.html\" title=\"The GNU C++ Library\" /><link rel=\"prev\" href=\"bk01pt09ch20.html\" title=\"Chapter\u00a020.\u00a0Mutating\" /><link rel=\"next\" href=\"bk01pt10ch21.html\" title=\"Chapter\u00a021.\u00a0Complex\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Part\u00a0X.\u00a0Numerics</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt09ch20.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">The GNU C++ Library</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch21.html\">Next</a></td></tr></table><hr /></div><div class=\"part\" lang=\"en\" xml:lang=\"en\"><div class=\"titlepage\"><div><div><h1 class=\"title\"><a id=\"manual.numerics\"></a>Part\u00a0X.\u00a0Numerics</h1></div></div></div><div class=\"toc\"><p><b>Table of Contents</b></p><dl><dt><span class=\"chapter\"><a href=\"bk01pt10ch21.html\">21. Complex</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt10ch21.html#numerics.complex.processing\">complex Processing</a></span></dt></dl></dd><dt><span class=\"chapter\"><a href=\"bk01pt10ch22.html\">22. Generalized Operations</a></span></dt><dt><span class=\"chapter\"><a href=\"bk01pt10ch23.html\">23. Interacting with C</a></span></dt><dd><dl><dt><span class=\"sect1\"><a href=\"bk01pt10ch23.html#numerics.c.array\">Numerics vs. Arrays</a></span></dt><dt><span class=\"sect1\"><a href=\"bk01pt10ch23s02.html\">C99</a></span></dt></dl></dd></dl></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"bk01pt09ch20.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"spine.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"bk01pt10ch21.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Chapter\u00a020.\u00a0Mutating\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../spine.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a021.\u00a0Complex</td></tr></table></div></body></html>"}, {"sha": "137d041e74985dd6bfd26a2f4ec7e051c65efdb4", "filename": "libstdc++-v3/doc/html/manual/parallel_mode.html", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fparallel_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fparallel_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fparallel_mode.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "21d38d3e3d61d454493b4ecdf6c6d9604024a7cb", "filename": "libstdc++-v3/doc/html/manual/shared_ptr.html", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fshared_ptr.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fshared_ptr.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fshared_ptr.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "ba20f193d8e0bba06352de2daa1b8794fca13345", "filename": "libstdc++-v3/doc/html/manual/spine.html", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fspine.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fspine.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fspine.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "99d8cbed0e38bf4cd16bf3d2cf07bb71a4e3b369", "filename": "libstdc++-v3/doc/html/manual/strings.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstrings.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstrings.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstrings.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "8f7e84a1364e7269ef694afafe664b31a1abf784", "filename": "libstdc++-v3/doc/html/manual/support.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fsupport.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fsupport.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fsupport.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "6e3e3718f1b706b347056140fdfdf6aafeb58f68", "filename": "libstdc++-v3/doc/html/manual/test.html", "status": "added", "additions": 504, "deletions": 0, "changes": 504, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "e1b5ad75810e58c260b61b6c3eb3848dc04e5b34", "filename": "libstdc++-v3/doc/html/manual/using.html", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "c7f58bf10d2bdca4bdf9e8ff70cdd9d5e7a9e86d", "filename": "libstdc++-v3/doc/html/manual/utilities.html", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Futilities.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Futilities.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Futilities.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}, {"sha": "12840aaa9096e84eaf9857a815483021db66aa57", "filename": "libstdc++-v3/doc/html/spine.html", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fspine.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46abada07fd5354741fa2d12147b0ff22b858fb4/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fspine.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fspine.html?ref=46abada07fd5354741fa2d12147b0ff22b858fb4"}]}