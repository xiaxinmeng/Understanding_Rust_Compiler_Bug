{"sha": "7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjYzk4ZTI1YzdkYTBmN2VlZWY5M2Q3N2QwZWFkMmU1ODE0YjAxOQ==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2004-01-30T13:43:21Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2004-01-30T13:43:21Z"}, "message": "* gnu/java/net/PlainSocketImpl.java\n\t(inChannelOperation): New field.\n\t(isInChannelOperation): New accessor.\n\t(setInChannelOperation): New modifier.\n\t* gnu/java/nio/ServerSocketChannelImpl.java\n\t(accept): Set and reset our server socket's PlainSocketImpl's\n\t\"in channel operation\" indicator before and after delegating\n\tthe accept to our server socket.\n\t* gnu/java/nio/SocketChannelImpl.java\n\t(connect): Set and reset our socket's PlainSocketImpl's \"in channel\n\toperation\" indicator before and after delegating the operation to\n\tour socket.\n\t(read): Likewise.\n\t(write): Likewise.\n\t* java/net/ServerSocket.java (implAccept): Don't throw an\n\tIllegalBlockingModeException if we have a non-blocking\n\tchannel which initiated this accept operation.\n\t* java/net/Socket.java (connect): Don't throw an\n\tIllegalBlockingModeException if we have a non-blocking\n\tchannel which initiated this connect operation.\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(configureBlocking): Only call implConfigureBlocking() if\n\tthe desired blocking mode is different from our current one.\n\nFrom-SVN: r76956", "tree": {"sha": "49b741adeec23a17d6a07df2869147de34f24174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49b741adeec23a17d6a07df2869147de34f24174"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/comments", "author": null, "committer": null, "parents": [{"sha": "d1615643e511bab93bdf275303aab9468505bc79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1615643e511bab93bdf275303aab9468505bc79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1615643e511bab93bdf275303aab9468505bc79"}], "stats": {"total": 153, "additions": 127, "deletions": 26}, "files": [{"sha": "1376be8ecac77b8f96bdd61f55cd066b6e303cfc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,3 +1,29 @@\n+2004-01-30  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* gnu/java/net/PlainSocketImpl.java \n+\t(inChannelOperation): New field.\n+\t(isInChannelOperation): New accessor.\n+\t(setInChannelOperation): New modifier.\n+\t* gnu/java/nio/ServerSocketChannelImpl.java\n+\t(accept): Set and reset our server socket's PlainSocketImpl's\n+\t\"in channel operation\" indicator before and after delegating\n+\tthe accept to our server socket.\n+\t* gnu/java/nio/SocketChannelImpl.java\n+\t(connect): Set and reset our socket's PlainSocketImpl's \"in channel\n+\toperation\" indicator before and after delegating the operation to\n+\tour socket.\n+\t(read): Likewise.\n+\t(write): Likewise.\n+\t* java/net/ServerSocket.java (implAccept): Don't throw an\n+\tIllegalBlockingModeException if we have a non-blocking\n+\tchannel which initiated this accept operation.\n+\t* java/net/Socket.java (connect): Don't throw an\n+\tIllegalBlockingModeException if we have a non-blocking\n+\tchannel which initiated this connect operation.\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(configureBlocking): Only call implConfigureBlocking() if\n+\tthe desired blocking mode is different from our current one.\n+\n 2004-01-29  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* java/io/BufferedReader.java (sbuf): New field."}, {"sha": "5680fb30cbe6507064bbe1747dd295d911ba7759", "filename": "libjava/gnu/java/net/PlainSocketImpl.java", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.java?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,5 +1,5 @@\n /* PlainSocketImpl.java -- Default socket implementation\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -119,6 +119,33 @@ public final class PlainSocketImpl extends SocketImpl\n    */\n   private OutputStream out;\n \n+  /**\n+   * Indicates whether a channel initiated whatever operation\n+   * is being invoked on this socket.\n+   */\n+  private boolean inChannelOperation;\n+\n+  /**\n+   * Indicates whether we should ignore whether any associated\n+   * channel is set to non-blocking mode. Certain operations\n+   * throw an <code>IllegalBlockingModeException</code> if the\n+   * associated channel is in non-blocking mode, <i>except</i>\n+   * if the operation is invoked by the channel itself.\n+   */\n+  public final boolean isInChannelOperation()\n+  {\n+    return inChannelOperation;\n+  }\n+  \n+  /**\n+   * Sets our indicator of whether an I/O operation is being\n+   * initiated by a channel.\n+   */\n+  public final void setInChannelOperation(boolean b)\n+  {\n+    inChannelOperation = b;\n+  }\n+ \n   /**\n    * Default do nothing constructor\n    */"}, {"sha": "76e1ce3242f59eac81371dbbb3b5d826b984dae2", "filename": "libjava/gnu/java/nio/ServerSocketChannelImpl.java", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FServerSocketChannelImpl.java?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,5 +1,5 @@\n /* ServerSocketChannelImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -69,7 +69,7 @@ public int getNativeFD()\n   {\n     return serverSocket.getPlainSocketImpl().getNativeFD();\n   }\n- \n+  \n   public void finalizer()\n   {\n     if (connected)\n@@ -107,6 +107,11 @@ public SocketChannel accept () throws IOException\n     \n     try\n       {\n+        begin();\n+        serverSocket.getPlainSocketImpl().setInChannelOperation(true);\n+          // indicate that a channel is initiating the accept operation\n+          // so that the socket ignores the fact that we might be in\n+          // non-blocking mode.\n         NIOSocket socket = (NIOSocket) serverSocket.accept();\n         completed = true;\n         return socket.getChannel();\n@@ -117,6 +122,7 @@ public SocketChannel accept () throws IOException\n       }\n     finally\n       {\n+        serverSocket.getPlainSocketImpl().setInChannelOperation(false);\n         end (completed);\n       }\n   }"}, {"sha": "4df40b481a6df0a9915ab2d7a2dc1811030de422", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 42, "deletions": 15, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,5 +1,5 @@\n /* SocketChannelImpl.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -136,23 +136,35 @@ public boolean connect (SocketAddress remote) throws IOException\n     if (((InetSocketAddress) remote).isUnresolved())\n       throw new UnresolvedAddressException();\n     \n-    if (isBlocking())\n-      {\n-        // Do blocking connect.\n-        socket.connect (remote);\n-        return true;\n-      }\n-\n-    // Do non-blocking connect.\n     try\n       {\n-        socket.connect (remote, NIOConstants.DEFAULT_TIMEOUT);\n-        return true;\n+        socket.getPlainSocketImpl().setInChannelOperation(true);\n+          // indicate that a channel is initiating the accept operation\n+          // so that the socket ignores the fact that we might be in\n+          // non-blocking mode.\n+        \n+        if (isBlocking())\n+          {\n+            // Do blocking connect.\n+            socket.connect (remote);\n+            return true;\n+          }\n+\n+        // Do non-blocking connect.\n+        try\n+          {\n+            socket.connect (remote, NIOConstants.DEFAULT_TIMEOUT);\n+            return true;\n+          }\n+        catch (SocketTimeoutException e)\n+          {\n+            connectionPending = true;\n+            return false;\n+          }\n       }\n-    catch (SocketTimeoutException e)\n+    finally\n       {\n-        connectionPending = true;\n-        return false;\n+        socket.getPlainSocketImpl().setInChannelOperation(false);\n       }\n   }\n     \n@@ -238,12 +250,14 @@ public int read (ByteBuffer dst) throws IOException\n     try\n       {\n         begin();\n+        socket.getPlainSocketImpl().setInChannelOperation(true);\n         readBytes = input.read (data, offset, len);\n         completed = true;\n       }\n     finally\n       {\n         end (completed);\n+        socket.getPlainSocketImpl().setInChannelOperation(false);\n       }\n \n     if (readBytes > 0)\n@@ -301,7 +315,20 @@ public int write (ByteBuffer src)\n       }\n \n     OutputStream output = socket.getOutputStream();\n-    output.write (data, offset, len);\n+    boolean completed = false;\n+\n+    try\n+      {\n+        begin();\n+        socket.getPlainSocketImpl().setInChannelOperation(true);\n+        output.write (data, offset, len);\n+        completed = true;\n+      }\n+    finally\n+      {\n+        end (completed);\n+        socket.getPlainSocketImpl().setInChannelOperation(false);\n+      }\n \n     if (src.hasArray())\n       {"}, {"sha": "a53ebf674d1372a8cd003f58fb870d0c5153d78c", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,5 +1,6 @@\n /* ServerSocket.java -- Class for implementing server side sockets\n-   Copyright (C) 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -345,9 +346,14 @@ protected final void implAccept (Socket socket)\n     if (isClosed())\n       throw new SocketException(\"ServerSocket is closed\");\n     \n+    // The Sun spec says that if we have an associated channel and\n+    // it is in non-blocking mode, we throw an IllegalBlockingModeException.\n+    // However, in our implementation if the channel itself initiated this\n+    // operation, then we must honor it regardless of its blocking mode.\n     if (getChannel() != null\n-        && !getChannel().isBlocking())\n-      throw new IllegalBlockingModeException();\n+        && !getChannel().isBlocking ()\n+        && !((PlainSocketImpl) getImpl()).isInChannelOperation())\n+      throw new IllegalBlockingModeException ();\n \t    \n     impl.accept(socket.getImpl());\n   }"}, {"sha": "f9cbb7e6cb344f629fb6479c51864052d19cb775", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,5 +1,6 @@\n /* Socket.java -- Client socket implementation\n-   Copyright (C) 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -420,8 +421,13 @@ public void connect (SocketAddress endpoint, int timeout)\n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException(\"unsupported address type\");\n \n+    // The Sun spec says that if we have an associated channel and\n+    // it is in non-blocking mode, we throw an IllegalBlockingModeException.\n+    // However, in our implementation if the channel itself initiated this\n+    // operation, then we must honor it regardless of its blocking mode.\n     if (getChannel() != null\n-        && !getChannel().isBlocking ())\n+        && !getChannel().isBlocking ()\n+        && !((PlainSocketImpl) getImpl()).isInChannelOperation())\n       throw new IllegalBlockingModeException ();\n   \n     if (!isBound ())"}, {"sha": "76c6c2b899f866f76dc375f0220abf4e2e6143f0", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dcc98e25c7da0f7eeef93d77d0ead2e5814b019/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=7dcc98e25c7da0f7eeef93d77d0ead2e5814b019", "patch": "@@ -1,5 +1,5 @@\n /* AbstractSelectableChannel.java\n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -80,8 +80,11 @@ public final SelectableChannel configureBlocking (boolean blocking)\n   {\n     synchronized (blockingLock())\n       {\n-        implConfigureBlocking(blocking);\n-        this.blocking = blocking;\n+        if (this.blocking != blocking)\n+          {\n+            implConfigureBlocking(blocking);\n+            this.blocking = blocking;\n+          }\n       }\n     \n     return this;"}]}