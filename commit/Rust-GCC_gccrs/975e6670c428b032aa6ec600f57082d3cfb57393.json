{"sha": "975e6670c428b032aa6ec600f57082d3cfb57393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1ZTY2NzBjNDI4YjAzMmFhNmVjNjAwZjU3MDgyZDNjZmI1NzM5Mw==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-04-08T14:06:31Z"}, "committer": {"name": "Dennis Zhang", "email": "dennis.zh@live.com", "date": "2020-04-08T14:06:31Z"}, "message": "arm: CLI for Custom Datapath Extension (CDE)\n\nThis patch is part of a series that adds support for the Arm Custom\nDatapath Extension. It defines the options cdecp0-cdecp7 for CLI to\nenable the CDE on corresponding coprocessor 0-7.\nIt also adds new target supports for CDE feature testsuite.\n\ngcc/ChangeLog:\n2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config.gcc: Add arm_cde.h.\n\t* config/arm/arm-c.c (arm_cpu_builtins): Define or undefine\n\t__ARM_FEATURE_CDE and __ARM_FEATURE_CDE_COPROC.\n\t* config/arm/arm-cpus.in (cdecp0, cdecp1, ..., cdecp7): New options.\n\t* config/arm/arm.c (arm_option_reconfigure_globals): Configure\n\tarm_arch_cde and arm_arch_cde_coproc to store the feature bits.\n\t* config/arm/arm.h (TARGET_CDE): New macro.\n\t* config/arm/arm_cde.h: New file.\n\t* doc/invoke.texi: Document CDE options +cdecp[0-7].\n\t* doc/sourcebuild.texi (arm_v8m_main_cde_ok): Document new target\n\tsupports option.\n\t(arm_v8m_main_cde_fp, arm_v8_1m_main_cde_mve): Likewise.\n\ngcc/testsuite/ChangeLog:\n2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* gcc.target/arm/pragma_cde.c: New test.\n\t* lib/target-supports.exp (arm_v8m_main_cde_ok): New target support\n\toption.\n\t(arm_v8m_main_cde_fp, arm_v8_1m_main_cde_mve): Likewise.", "tree": {"sha": "ee079a210bfab455715fb97817d1010222f5c6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee079a210bfab455715fb97817d1010222f5c6ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975e6670c428b032aa6ec600f57082d3cfb57393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975e6670c428b032aa6ec600f57082d3cfb57393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975e6670c428b032aa6ec600f57082d3cfb57393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975e6670c428b032aa6ec600f57082d3cfb57393/comments", "author": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solarock", "id": 109078, "node_id": "MDQ6VXNlcjEwOTA3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/109078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solarock", "html_url": "https://github.com/solarock", "followers_url": "https://api.github.com/users/solarock/followers", "following_url": "https://api.github.com/users/solarock/following{/other_user}", "gists_url": "https://api.github.com/users/solarock/gists{/gist_id}", "starred_url": "https://api.github.com/users/solarock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solarock/subscriptions", "organizations_url": "https://api.github.com/users/solarock/orgs", "repos_url": "https://api.github.com/users/solarock/repos", "events_url": "https://api.github.com/users/solarock/events{/privacy}", "received_events_url": "https://api.github.com/users/solarock/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf6b06cb5b02c053738e2975e3b7a4b3c577401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf6b06cb5b02c053738e2975e3b7a4b3c577401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf6b06cb5b02c053738e2975e3b7a4b3c577401"}], "stats": {"total": 306, "additions": 305, "deletions": 1}, "files": [{"sha": "ff5c1c5e2a5ecb6035ad875ae8841687fe230c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -1,3 +1,18 @@\n+2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config.gcc: Add arm_cde.h.\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Define or undefine\n+\t__ARM_FEATURE_CDE and __ARM_FEATURE_CDE_COPROC.\n+\t* config/arm/arm-cpus.in (cdecp0, cdecp1, ..., cdecp7): New options.\n+\t* config/arm/arm.c (arm_option_reconfigure_globals): Configure\n+\tarm_arch_cde and arm_arch_cde_coproc to store the feature bits.\n+\t* config/arm/arm.h (TARGET_CDE): New macro.\n+\t* config/arm/arm_cde.h: New file.\n+\t* doc/invoke.texi: Document CDE options +cdecp[0-7].\n+\t* doc/sourcebuild.texi (arm_v8m_main_cde_ok): Document new target\n+\tsupports option.\n+\t(arm_v8m_main_cde_fp, arm_v8_1m_main_cde_mve): Likewise.\n+\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/94516"}, {"sha": "7624c654c513187934d301b7da8c87e073097ad0", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -346,7 +346,7 @@ arc*-*-*)\n arm*-*-*)\n \tcpu_type=arm\n \textra_objs=\"arm-builtins.o aarch-common.o\"\n-\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h arm_bf16.h arm_mve.h\"\n+\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h arm_fp16.h arm_cmse.h arm_bf16.h arm_mve.h arm_cde.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\""}, {"sha": "7e92e8a83aed262c03129cc8e565b8beef6cd3b5", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -237,6 +237,12 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n       builtin_define_with_int_value (\"__ARM_FEATURE_COPROC\", coproc_level);\n     }\n \n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_CDE\", TARGET_CDE);\n+  cpp_undef (pfile, \"__ARM_FEATURE_CDE_COPROC\");\n+  if (TARGET_CDE)\n+    builtin_define_with_int_value (\"__ARM_FEATURE_CDE_COPROC\",\n+\t\t\t\t   arm_arch_cde_coproc);\n+\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_MATMUL_INT8\", TARGET_I8MM);\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC\",\n \t\t      TARGET_BF16_FP);"}, {"sha": "fba34e556fbe6285a6c07e50e1dad188e16a44ec", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -211,6 +211,16 @@ define feature i8mm\n # Brain half-precision floating-point extension. Optional from v8.2-A.\n define feature bf16\n \n+# Arm Custom Datapath Extension (CDE).\n+define feature cdecp0\n+define feature cdecp1\n+define feature cdecp2\n+define feature cdecp3\n+define feature cdecp4\n+define feature cdecp5\n+define feature cdecp6\n+define feature cdecp7\n+\n # Feature groups.  Conventionally all (or mostly) upper case.\n # ALL_FPU lists all the feature bits associated with the floating-point\n # unit; these will all be removed if the floating-point unit is disabled\n@@ -676,6 +686,14 @@ begin arch armv8-m.main\n  option fp.dp add FPv5 FP_DBL\n  option nofp remove ALL_FP\n  option nodsp remove armv7em\n+ option cdecp0 add cdecp0\n+ option cdecp1 add cdecp1\n+ option cdecp2 add cdecp2\n+ option cdecp3 add cdecp3\n+ option cdecp4 add cdecp4\n+ option cdecp5 add cdecp5\n+ option cdecp6 add cdecp6\n+ option cdecp7 add cdecp7\n end arch armv8-m.main\n \n begin arch armv8-r\n@@ -707,6 +725,14 @@ begin arch armv8.1-m.main\n  option nofp remove ALL_FP\n  option mve add MVE\n  option mve.fp add MVE_FP\n+ option cdecp0 add cdecp0\n+ option cdecp1 add cdecp1\n+ option cdecp2 add cdecp2\n+ option cdecp3 add cdecp3\n+ option cdecp4 add cdecp4\n+ option cdecp5 add cdecp5\n+ option cdecp6 add cdecp6\n+ option cdecp7 add cdecp7\n end arch armv8.1-m.main\n \n begin arch iwmmxt"}, {"sha": "da0bfbc35501ba40324a38ee9ebc194f43196837", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -1021,6 +1021,13 @@ int arm_arch_i8mm = 0;\n /* Nonzero if chip supports the BFloat16 instructions.  */\n int arm_arch_bf16 = 0;\n \n+/* Nonzero if chip supports the Custom Datapath Extension.  */\n+int arm_arch_cde = 0;\n+int arm_arch_cde_coproc = 0;\n+const int arm_arch_cde_coproc_bits[] = {\n+  0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80\n+};\n+\n /* The condition codes of the ARM, and the inverse function.  */\n static const char * const arm_condition_codes[] =\n {\n@@ -3740,6 +3747,21 @@ arm_option_reconfigure_globals (void)\n       arm_fp16_format = ARM_FP16_FORMAT_IEEE;\n     }\n \n+  arm_arch_cde = 0;\n+  arm_arch_cde_coproc = 0;\n+  int cde_bits[] = {isa_bit_cdecp0, isa_bit_cdecp1, isa_bit_cdecp2,\n+\t\t    isa_bit_cdecp3, isa_bit_cdecp4, isa_bit_cdecp5,\n+\t\t    isa_bit_cdecp6, isa_bit_cdecp7};\n+  for (int i = 0, e = ARRAY_SIZE (cde_bits); i < e; i++)\n+    {\n+      int cde_bit = bitmap_bit_p (arm_active_target.isa, cde_bits[i]);\n+      if (cde_bit)\n+\t{\n+\t  arm_arch_cde |= cde_bit;\n+\t  arm_arch_cde_coproc |= arm_arch_cde_coproc_bits[i];\n+\t}\n+    }\n+\n   /* And finally, set up some quirks.  */\n   arm_arch_no_volatile_ce\n     = bitmap_bit_p (arm_active_target.isa, isa_bit_quirk_no_volatile_ce);"}, {"sha": "343235d0cbc0be4fa7c773da71567d4ae267494b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -354,6 +354,9 @@ emission of floating point pcs attributes.  */\n /* Nonzero if disallow volatile memory access in IT block.  */\n #define TARGET_NO_VOLATILE_CE\t\t(arm_arch_no_volatile_ce)\n \n+/* Nonzero if chip supports the Custom Datapath Extension.  */\n+#define TARGET_CDE\t(arm_arch_cde && arm_arch8 && !arm_arch_notm)\n+\n /* Should constant I be slplit for OP.  */\n #define DONT_EARLY_SPLIT_CONSTANT(i, op) \\\n \t\t\t\t((optimize >= 2) \\\n@@ -568,6 +571,11 @@ extern int arm_arch_i8mm;\n /* Nonzero if chip supports the BFloat16 instructions.  */\n extern int arm_arch_bf16;\n \n+/* Nonzero if chip supports the Custom Datapath Extension.  */\n+extern int arm_arch_cde;\n+extern int arm_arch_cde_coproc;\n+extern const int arm_arch_cde_coproc_bits[];\n+\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif"}, {"sha": "f975754632f6e87da331a19a63300c4de3c1f033", "filename": "gcc/config/arm/arm_cde.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm_cde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fconfig%2Farm%2Farm_cde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_cde.h?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -0,0 +1,40 @@\n+/* Arm Custom Datapath Extension (CDE) intrinsics include file.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Arm Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_ARM_CDE_H\n+#define _GCC_ARM_CDE_H 1\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#include <stdint.h>\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"}, {"sha": "be7b5bb7d718fd8113b7a04794b6aa0054a8be80", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -18679,6 +18679,10 @@ The single- and double-precision floating-point instructions.\n \n @item +nofp\n Disable the floating-point extension.\n+\n+@item +cdecp0, +cdecp1, ... , +cdecp7\n+Enable the Custom Datapath Extension (CDE) on selected coprocessors according\n+to the numbers given in the options in the range 0 to 7.\n @end table\n \n @item  armv8-m.main\n@@ -18697,6 +18701,10 @@ The single- and double-precision floating-point instructions.\n \n @item +nofp\n Disable the floating-point extension.\n+\n+@item +cdecp0, +cdecp1, ... , +cdecp7\n+Enable the Custom Datapath Extension (CDE) on selected coprocessors according\n+to the numbers given in the options in the range 0 to 7.\n @end table\n \n @item armv8-r"}, {"sha": "26a57e3199b885e895bb14d28d3f9e97bfb3c100", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -1904,6 +1904,21 @@ ARM target supports options to generate instructions from ARMv8.1-M with\n the M-Profile Vector Extension (MVE). Some multilibs may be incompatible\n with these options.\n \n+@item arm_v8m_main_cde\n+ARM target supports options to generate instructions from ARMv8-M with\n+the Custom Datapath Extension (CDE). Some multilibs may be incompatible\n+with these options.\n+\n+@item arm_v8m_main_cde_fp\n+ARM target supports options to generate instructions from ARMv8-M with\n+the Custom Datapath Extension (CDE) and floating-point (VFP).\n+Some multilibs may be incompatible with these options.\n+\n+@item arm_v8_1m_main_cde_mve\n+ARM target supports options to generate instructions from ARMv8.1-M with\n+the Custom Datapath Extension (CDE) and M-Profile Vector Extension (MVE).\n+Some multilibs may be incompatible with these options.\n+\n @item arm_prefer_ldrd_strd\n ARM target prefers @code{LDRD} and @code{STRD} instructions over\n @code{LDM} and @code{STM} instructions."}, {"sha": "c69c8ce11c010053f8da96fa3dc45935ef808b9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -1,3 +1,10 @@\n+2020-04-08  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/arm/pragma_cde.c: New test.\n+\t* lib/target-supports.exp (arm_v8m_main_cde_ok): New target support\n+\toption.\n+\t(arm_v8m_main_cde_fp, arm_v8_1m_main_cde_mve): Likewise.\n+\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94325"}, {"sha": "b66e22d08cf452a293f4cd497d3620d8dbb05f6f", "filename": "gcc/testsuite/gcc.target/arm/pragma_cde.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_cde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_cde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpragma_cde.c?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -0,0 +1,98 @@\n+/* Test for CDE #pragma target macros.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8m_main_cde_ok } */\n+/* { dg-add-options arm_v8m_main_cde } */\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main\")\n+#ifdef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is defined but should not be\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp0\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x1\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp1\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x2\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp2\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x4\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp3\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x8\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp4\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x10\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp5\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x20\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp6\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x40\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp7\")\n+#ifndef __ARM_FEATURE_CDE\n+#error \"__ARM_FEATURE_CDE is not defined but should be\"\n+#endif\n+#if __ARM_FEATURE_CDE_COPROC != 0x80\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8-m.main+cdecp0+cdecp1\")\n+#if __ARM_FEATURE_CDE_COPROC != 0x3\n+#error \"__ARM_FEATURE_CDE_COPROC is not defined as configured\"\n+#endif\n+#pragma GCC pop_options"}, {"sha": "050b4ba452fda03bb13c3722e6edc313b25fb1eb", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975e6670c428b032aa6ec600f57082d3cfb57393/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=975e6670c428b032aa6ec600f57082d3cfb57393", "patch": "@@ -5103,6 +5103,65 @@ proc add_options_for_arm_v8_2a_bf16_neon { flags } {\n     return \"$flags $et_arm_v8_2a_bf16_neon_flags\"\n }\n \n+# A series of routines are created to 1) check if a given architecture is\n+# effective (check_effective_target_*_ok) and then 2) give the corresponding\n+# flags that enable the architecture (add_options_for_*).\n+# The series includes:\n+#   arm_v8m_main_cde: Armv8-m CDE (Custom Datapath Extension).\n+#   arm_v8m_main_cde_fp: Armv8-m CDE with FP registers.\n+#   arm_v8_1m_main_cde_mve: Armv8.1-m CDE with MVE.\n+# Usage:\n+#   /* { dg-require-effective-target arm_v8m_main_cde_ok } */\n+#   /* { dg-add-options arm_v8m_main_cde } */\n+# The tests are valid for Arm.\n+\n+foreach { armfunc armflag armdef } {\n+\tarm_v8m_main_cde\n+\t\t\"-march=armv8-m.main+cdecp0 -mthumb\"\n+\t\t\"defined (__ARM_FEATURE_CDE)\"\n+\tarm_v8m_main_cde_fp\n+\t\t\"-march=armv8-m.main+fp+cdecp0 -mthumb\"\n+\t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FP)\"\n+\tarm_v8_1m_main_cde_mve\n+\t\t\"-march=armv8.1-m.main+mve+cdecp0 -mthumb\"\n+\t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FEATURE_MVE)\"\n+\t} {\n+    eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n+\tproc check_effective_target_FUNC_ok_nocache { } {\n+\t    global et_FUNC_flags\n+\t    set et_FUNC_flags \"\"\n+\n+\t    if { ![istarget arm*-*-*] } {\n+\t\treturn 0;\n+\t    }\n+\n+\t    if { [check_no_compiler_messages_nocache FUNC_ok assembly {\n+\t\t#if !(DEF)\n+\t\t#error \"DEF failed\"\n+\t\t#endif\n+\t    } \"FLAG\"] } {\n+\t\t    set et_FUNC_flags \"FLAG\"\n+\t\t    return 1\n+\t    }\n+\n+\t    return 0;\n+\t}\n+\n+\tproc check_effective_target_FUNC_ok { } {\n+\t    return [check_cached_effective_target FUNC_ok \\\n+\t\t    check_effective_target_FUNC_ok_nocache]\n+\t}\n+\n+\tproc add_options_for_FUNC { flags } {\n+\t    if { ! [check_effective_target_FUNC_ok] } {\n+\t\treturn \"$flags\"\n+\t    }\n+\t    global et_FUNC_flags\n+\t    return \"$flags $et_FUNC_flags\"\n+\t}\n+    }]\n+}\n+\n # Return 1 if the target supports executing ARMv8 NEON instructions, 0\n # otherwise.\n "}]}