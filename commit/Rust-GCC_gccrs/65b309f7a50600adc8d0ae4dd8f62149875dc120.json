{"sha": "65b309f7a50600adc8d0ae4dd8f62149875dc120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViMzA5ZjdhNTA2MDBhZGM4ZDBhZTRkZDhmNjIxNDk4NzVkYzEyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-02-27T10:02:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-02-27T10:02:23Z"}, "message": "re PR c++/89488 (ICE in merge_exception_specifiers, at cp/typeck2.c:2395)\n\n/cp\n2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/89488\n\t* method.c (process_subob_fn): When maybe_instantiate_noexcept\n\treturns false don't call merge_exception_specifiers.\n\n/testsuite\n2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/89488\n\t* g++.dg/cpp0x/nsdmi15.C: New.\n\n/cp\n2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/88987\n\t* parser.c (cp_parser_noexcept_specification_opt): Return NULL_TREE\n\tfor a non-constant parsed expression.\n\n/testsuite\n2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/88987\n\t* g++.dg/cpp0x/pr88987.C: New.\n\nFrom-SVN: r269245", "tree": {"sha": "b9f5e6de9b53bfd1b62b774be877aa9f9bb5c263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9f5e6de9b53bfd1b62b774be877aa9f9bb5c263"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65b309f7a50600adc8d0ae4dd8f62149875dc120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b309f7a50600adc8d0ae4dd8f62149875dc120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b309f7a50600adc8d0ae4dd8f62149875dc120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b309f7a50600adc8d0ae4dd8f62149875dc120/comments", "author": null, "committer": null, "parents": [{"sha": "f86624d85f937e03110eb044e438d8316d860501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86624d85f937e03110eb044e438d8316d860501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f86624d85f937e03110eb044e438d8316d860501"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "1ce758b15f668605d565ed4fc4158ec3c8136a40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65b309f7a50600adc8d0ae4dd8f62149875dc120", "patch": "@@ -1,3 +1,15 @@\n+2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/89488\n+\t* method.c (process_subob_fn): When maybe_instantiate_noexcept\n+\treturns false don't call merge_exception_specifiers.\n+\n+2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/88987\n+\t* parser.c (cp_parser_noexcept_specification_opt): Return NULL_TREE\n+\tfor a non-constant parsed expression.\n+\n 2019-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89481"}, {"sha": "477d3271f59709ab01f6b643cc92bc80eee865bb", "filename": "gcc/cp/method.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=65b309f7a50600adc8d0ae4dd8f62149875dc120", "patch": "@@ -1256,9 +1256,13 @@ process_subob_fn (tree fn, tree *spec_p, bool *trivial_p,\n \n   if (spec_p)\n     {\n-      maybe_instantiate_noexcept (fn);\n-      tree raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n-      *spec_p = merge_exception_specifiers (*spec_p, raises);\n+      if (!maybe_instantiate_noexcept (fn))\n+\t*spec_p = error_mark_node;\n+      else\n+\t{\n+\t  tree raises = TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn));\n+\t  *spec_p = merge_exception_specifiers (*spec_p, raises);\n+\t}\n     }\n \n   if (!trivial_fn_p (fn) && !dtor_from_ctor)"}, {"sha": "d9824e40803e728a20b49453121ff224eb1c4e33", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65b309f7a50600adc8d0ae4dd8f62149875dc120", "patch": "@@ -25143,7 +25143,17 @@ cp_parser_noexcept_specification_opt (cp_parser* parser,\n \t      parser->type_definition_forbidden_message\n \t      = G_(\"types may not be defined in an exception-specification\");\n \n-\t      expr = cp_parser_constant_expression (parser);\n+\t      bool non_constant_p;\n+\t      expr\n+\t\t= cp_parser_constant_expression (parser,\n+\t\t\t\t\t\t /*allow_non_constant=*/true,\n+\t\t\t\t\t\t &non_constant_p);\n+\t      if (non_constant_p\n+\t\t  && !require_potential_rvalue_constant_expression (expr))\n+\t\t{\n+\t\t  expr = NULL_TREE;\n+\t\t  return_cond = true;\n+\t\t}\n \n \t      /* Restore the saved message.  */\n \t      parser->type_definition_forbidden_message = saved_message;"}, {"sha": "2365a4f8736d2b129f7633303e46bec6a2196826", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65b309f7a50600adc8d0ae4dd8f62149875dc120", "patch": "@@ -1,3 +1,13 @@\n+2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/89488\n+\t* g++.dg/cpp0x/nsdmi15.C: New.\n+\n+2019-02-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/88987\n+\t* g++.dg/cpp0x/pr88987.C: New.\n+\n 2019-02-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/89280"}, {"sha": "32bdad00962a2ffe48d8abdd5b01d00bb4db9d82", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi15.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi15.C?ref=65b309f7a50600adc8d0ae4dd8f62149875dc120", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/89488\n+// { dg-do compile { target c++11 } }\n+\n+struct zl {\n+  struct {\n+    int x2 = zl ();  // { dg-error \"default member\" }\n+  } fx;\n+};"}, {"sha": "c26b571f559a3194991d383f8846f25e6af836b2", "filename": "gcc/testsuite/g++.dg/cpp0x/pr88987.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr88987.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b309f7a50600adc8d0ae4dd8f62149875dc120/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr88987.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr88987.C?ref=65b309f7a50600adc8d0ae4dd8f62149875dc120", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++11 } }\n+\n+int sm;\n+\n+template <typename T> T\n+pk () noexcept (sm)  // { dg-error \"constant expression\" }\n+{\n+  return 0;\n+}"}]}