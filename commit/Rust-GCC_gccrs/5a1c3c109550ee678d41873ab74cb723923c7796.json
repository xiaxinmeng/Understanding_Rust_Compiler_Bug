{"sha": "5a1c3c109550ee678d41873ab74cb723923c7796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExYzNjMTA5NTUwZWU2NzhkNDE4NzNhYjc0Y2I3MjM5MjNjNzc5Ng==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-11-25T22:08:13Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2008-11-25T22:08:13Z"}, "message": "m68k.md (extendsidi2, [...]): Merge, clean up.\n\n\t* config/m68k/m68k.md (extendsidi2, extendsidi2_mem): Merge, clean up.\n\tDisable unsupported alternative for ColdFire,\n\tadd new alternative that ColdFire can handle.\n\n\t* gcc.c-torture/compile/20080929-1.c: New.\n\nFrom-SVN: r142205", "tree": {"sha": "ff2d4a695c4f30a3f1121a340e1919d0fe5e6177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff2d4a695c4f30a3f1121a340e1919d0fe5e6177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1c3c109550ee678d41873ab74cb723923c7796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1c3c109550ee678d41873ab74cb723923c7796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1c3c109550ee678d41873ab74cb723923c7796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1c3c109550ee678d41873ab74cb723923c7796/comments", "author": null, "committer": null, "parents": [{"sha": "32fc3abf0ed64ed30346eac9ba6e28f8fe9df11f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fc3abf0ed64ed30346eac9ba6e28f8fe9df11f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fc3abf0ed64ed30346eac9ba6e28f8fe9df11f"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "b29e61178a34081bab2b2ee0395c303957052771", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a1c3c109550ee678d41873ab74cb723923c7796", "patch": "@@ -1,3 +1,9 @@\n+2008-11-25  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* config/m68k/m68k.md (extendsidi2, extendsidi2_mem): Merge, clean up.\n+\tDisable unsupported alternative for ColdFire,\n+\tadd new alternative that ColdFire can handle.\n+\n 2008-11-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* regrename.c (merge_overlapping_regs): Add registers artificially"}, {"sha": "782c7ccd7fe579d11edfb27364897139077486e5", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=5a1c3c109550ee678d41873ab74cb723923c7796", "patch": "@@ -1703,32 +1703,35 @@\n })\n \n (define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_src_operand\" \"rm\")))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,o,o,<\")\n+\t(sign_extend:DI\n+\t (match_operand:SI 1 \"nonimmediate_src_operand\" \"rm,rm,r<Q>,rm\")))\n+   (clobber (match_scratch:SI 2 \"=X,d,d,d\"))]\n   \"\"\n {\n   CC_STATUS_INIT;\n-  if (TARGET_68020 || TARGET_COLDFIRE)\n-    return \"move%.l %1,%R0\\;smi %0\\;extb%.l %0\";\n-  else\n-    return \"move%.l %1,%R0\\;smi %0\\;ext%.w %0\\;ext%.l %0\";\n-})\n \n-(define_insn \"*extendsidi2_mem\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=o,<\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_src_operand\" \"rm,rm\")))\n-   (clobber (match_scratch:SI 2 \"=d,d\"))]\n-   \"\"\n-{\n-  CC_STATUS_INIT;\n+  if (which_alternative == 0)\n+    /* Handle alternative 0.  */\n+    {\n+      if (TARGET_68020 || TARGET_COLDFIRE)\n+        return \"move%.l %1,%R0\\;smi %0\\;extb%.l %0\";\n+      else\n+        return \"move%.l %1,%R0\\;smi %0\\;ext%.w %0\\;ext%.l %0\";\n+    }\n+\n+  /* Handle alternatives 1, 2 and 3.  We don't need to adjust address by 4\n+     in alternative 3 because autodecrement will do that for us.  */\n   operands[3] = adjust_address (operands[0], SImode,\n-\t\t\t\twhich_alternative == 0 ? 4 : 0);\n+\t\t\t\twhich_alternative == 3 ? 0 : 4);\n   operands[0] = adjust_address (operands[0], SImode, 0);\n+\n   if (TARGET_68020 || TARGET_COLDFIRE)\n     return \"move%.l %1,%3\\;smi %2\\;extb%.l %2\\;move%.l %2,%0\";\n   else\n     return \"move%.l %1,%3\\;smi %2\\;ext%.w %2\\;ext%.l %2\\;move%.l %2,%0\";\n-})\n+}\n+  [(set_attr \"ok_for_coldfire\" \"yes,no,yes,yes\")])\n \n ;; Special case when one can avoid register clobbering, copy and test\n ;; Maybe there is a way to make that the general case, by forcing the"}, {"sha": "a508f752d13f6af0067e79f1b9e1296c2d64e086", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a1c3c109550ee678d41873ab74cb723923c7796", "patch": "@@ -1,3 +1,7 @@\n+2008-11-25  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* gcc.c-torture/compile/20080929-1.c: New.\n+\n 2008-11-25  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gfortran.dg/default_format_denormal_1.f90: Fix xfail for darwin."}, {"sha": "1aa868ca224f3a6cd51a1e3074a98fe773d5c96a", "filename": "gcc/testsuite/gcc.c-torture/compile/20080929-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080929-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1c3c109550ee678d41873ab74cb723923c7796/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080929-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20080929-1.c?ref=5a1c3c109550ee678d41873ab74cb723923c7796", "patch": "@@ -0,0 +1,39 @@\n+struct option {\n+  const char *name;\n+  int has_arg;\n+  int *flag;\n+  int val;\n+};\n+enum {\n+  UBI_DYNAMIC_VOLUME = 3,  UBI_STATIC_VOLUME = 4, };\n+typedef void * libubi_t;\n+struct ubi_dev_info {\n+  int leb_size;\n+};\n+struct args {\n+  int vol_id;\n+  int vol_type;\n+  long long bytes;\n+  int lebs;\n+  int alignment;\n+  const char *node;\n+  int maxavs;\n+  int devn;\n+};\n+static struct args args = {\n+  .vol_type = UBI_DYNAMIC_VOLUME,  .bytes = -1,  .lebs = -1,  .alignment = 1,  .vol_id = (-1),  .devn = -1, };\n+extern libubi_t libubi_open (int);\n+extern int ubi_get_dev_info (libubi_t, const char *, struct ubi_dev_info *);\n+int main(int argc, char * const argv[]) {\n+  int err;\n+  libubi_t libubi;\n+  struct ubi_dev_info dev_info;\n+  libubi = libubi_open(1);\n+  if (!libubi)\n+    return 0;\n+  err = ubi_get_dev_info(libubi, args.node, &dev_info);\n+  if (args.maxavs) {\n+    args.bytes = dev_info.leb_size;\n+  }\n+  return 0;\n+}"}]}