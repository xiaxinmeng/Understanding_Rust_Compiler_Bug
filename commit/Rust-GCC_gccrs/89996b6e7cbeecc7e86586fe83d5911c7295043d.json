{"sha": "89996b6e7cbeecc7e86586fe83d5911c7295043d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5OTZiNmU3Y2JlZWNjN2U4NjU4NmZlODNkNTkxMWM3Mjk1MDQzZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T07:08:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T07:08:57Z"}, "message": "function.h (struct function): Move all boolean valued fields to single bit fields at the end of the struct.\n\n        * function.h (struct function): Move all boolean valued fields\n        to single bit fields at the end of the struct.\n\nFrom-SVN: r40911", "tree": {"sha": "79248b96ecec183798db7a12378689016fb3822e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79248b96ecec183798db7a12378689016fb3822e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89996b6e7cbeecc7e86586fe83d5911c7295043d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89996b6e7cbeecc7e86586fe83d5911c7295043d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89996b6e7cbeecc7e86586fe83d5911c7295043d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89996b6e7cbeecc7e86586fe83d5911c7295043d/comments", "author": null, "committer": null, "parents": [{"sha": "2f2ee4bba2ea908f7676672935a81f8df590feb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2ee4bba2ea908f7676672935a81f8df590feb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2ee4bba2ea908f7676672935a81f8df590feb3"}], "stats": {"total": 175, "additions": 92, "deletions": 83}, "files": [{"sha": "44cdd0edc16700512cd9cc42485929ec4e05c2ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89996b6e7cbeecc7e86586fe83d5911c7295043d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89996b6e7cbeecc7e86586fe83d5911c7295043d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89996b6e7cbeecc7e86586fe83d5911c7295043d", "patch": "@@ -1,5 +1,8 @@\n 2001-03-27  Richard Henderson  <rth@redhat.com>\n \n+\t* function.h (struct function): Move all boolean valued fields\n+\tto single bit fields at the end of the struct.\n+\n \t* bb-reorder.c, dwarf2out.c, except.c, except.h, flow.c,\n \tjump.c, toplev.c:\n \tRename asynchronous_exceptions to flag_non_call_exceptions."}, {"sha": "bd4f38ca0aafaf93dcc421dea91193608553bc90", "filename": "gcc/function.h", "status": "modified", "additions": 89, "deletions": 83, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89996b6e7cbeecc7e86586fe83d5911c7295043d/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89996b6e7cbeecc7e86586fe83d5911c7295043d/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=89996b6e7cbeecc7e86586fe83d5911c7295043d", "patch": "@@ -191,6 +191,7 @@ struct function\n \n   /* Name of this function.  */\n   const char *name;\n+\n   /* Points to the FUNCTION_DECL of this function. */\n   tree decl;\n \n@@ -199,50 +200,6 @@ struct function\n      May affect compilation of return insn or of function epilogue.  */\n   int pops_args;\n \n-  /* Nonzero if function being compiled needs to be given an address\n-     where the value should be stored.  */\n-  int returns_struct;\n-\n-  /* Nonzero if function being compiled needs to\n-     return the address of where it has put a structure value.  */\n-  int returns_pcc_struct;\n-  \n-  /* Nonzero if the current function returns a pointer type.  */\n-  int returns_pointer;\n-\n-  /* Nonzero if function being compiled needs to be passed a static chain.  */\n-  int needs_context;\n-\n-  /* Nonzero if function being compiled can call setjmp.  */\n-  int calls_setjmp;\n-\n-  /* Nonzero if function being compiled can call longjmp.  */\n-  int calls_longjmp;\n-  \n-  /* Nonzero if function being compiled can call alloca,\n-     either as a subroutine or builtin.  */\n-  int calls_alloca;\n-\n-  /* Nonzero if function being compiled receives nonlocal gotos\n-     from nested functions.  */\n-\n-  int has_nonlocal_label;\n-\n-  /* Nonzero if function being compiled has nonlocal gotos to parent\n-     function.  */\n-  int has_nonlocal_goto;\n-\n-  /* Nonzero if function being compiled contains nested functions.  */\n-  int contains_functions;\n-\n-  /* Nonzero if the function being compiled issues a computed jump.  */\n-  int has_computed_jump;\n-\n-  /* Nonzero if the current function is a thunk (a lightweight function that\n-     just adjusts one of its arguments and forwards to another function), so\n-     we should try to cut corners where we can.  */\n-  int is_thunk;\n-\n   /* If function's args have a fixed size, this is that size, in bytes.\n      Otherwise, it is -1.\n      May affect compilation of return insn or of function epilogue.  */\n@@ -261,14 +218,6 @@ struct function\n      anonymous arg can be found, if there is one.  */\n   rtx arg_offset_rtx;\n \n-  /* Nonzero if current function uses varargs.h or equivalent.\n-     Zero for functions that use stdarg.h.  */\n-  int varargs;\n-\n-  /* Nonzero if current function uses stdarg.h or equivalent.\n-     Zero for functions that use varargs.h.  */\n-  int stdarg;\n-\n   /* Quantities of various kinds of registers\n      used for the current function's args.  */\n   CUMULATIVE_ARGS args_info;\n@@ -286,35 +235,9 @@ struct function\n      inline.  */\n   const char *cannot_inline;\n \n-  /* Nonzero if instrumentation calls for function entry and exit should be\n-     generated.  */\n-  int instrument_entry_exit;\n-\n-  /* Nonzero if memory access checking be enabled in the current function.  */\n-  int check_memory_usage;\n-\n-  /* Nonzero if stack limit checking should be enabled in the current\n-     function.  */\n-  int limit_stack;\n-\n   /* Number of function calls seen so far in current function.  */\n   int x_function_call_count;\n \n-  /* Nonzero if this function is being processed in function-at-a-time\n-     mode.  In other words, if all tree structure for this function,\n-     including the BLOCK tree, is created before RTL generation\n-     commences.  */\n-  int x_whole_function_mode_p;\n-\n-  /* Nonzero if the back-end should not keep track of expressions that\n-     determine the size of variable-sized objects.  Normally, such\n-     expressions are saved away, and then expanded when the next\n-     function is started.  For example, if a parameter has a\n-     variable-sized type, then the size of the parameter is computed\n-     when the function body is entered.  However, some front-ends do\n-     not desire this behavior.  */\n-  int x_dont_save_pending_sizes_p;\n-\n   /* List (chain of TREE_LIST) of LABEL_DECLs for all nonlocal labels\n      (labels to which there can be nonlocal gotos from nested functions)\n      in this function.  */\n@@ -442,13 +365,8 @@ struct function\n   /* Highest label number in current function.  */\n   int inl_max_label_num;\n \n-  /* Nonzero if the current function uses the constant pool.  */\n-  int uses_const_pool;\n-\n   /* For md files.  */\n \n-  /* Nonzero if the current function uses pic_offset_table_rtx.  */\n-  int uses_pic_offset_table;\n   /* tm.h can use this to store whatever it likes.  */\n   struct machine_function *machine;\n   /* The largest alignment of slot allocated on the stack.  */\n@@ -464,6 +382,94 @@ struct function\n   /* If some insns can be deferred to the delay slots of the epilogue, the\n      delay list for them is recorded here.  */\n   rtx epilogue_delay_list;\n+\n+  /* Collected bit flags.  */\n+\n+  /* Nonzero if function being compiled needs to be given an address\n+     where the value should be stored.  */\n+  unsigned int returns_struct : 1;\n+\n+  /* Nonzero if function being compiled needs to\n+     return the address of where it has put a structure value.  */\n+  unsigned int returns_pcc_struct : 1;\n+  \n+  /* Nonzero if the current function returns a pointer type.  */\n+  unsigned int returns_pointer : 1;\n+\n+  /* Nonzero if function being compiled needs to be passed a static chain.  */\n+  unsigned int needs_context : 1;\n+\n+  /* Nonzero if function being compiled can call setjmp.  */\n+  unsigned int calls_setjmp : 1;\n+\n+  /* Nonzero if function being compiled can call longjmp.  */\n+  unsigned int calls_longjmp : 1;\n+  \n+  /* Nonzero if function being compiled can call alloca,\n+     either as a subroutine or builtin.  */\n+  unsigned int calls_alloca : 1;\n+\n+  /* Nonzero if function being compiled receives nonlocal gotos\n+     from nested functions.  */\n+  unsigned int has_nonlocal_label : 1;\n+\n+  /* Nonzero if function being compiled has nonlocal gotos to parent\n+     function.  */\n+  unsigned int has_nonlocal_goto : 1;\n+\n+  /* Nonzero if function being compiled contains nested functions.  */\n+  unsigned int contains_functions : 1;\n+\n+  /* Nonzero if the function being compiled issues a computed jump.  */\n+  unsigned int has_computed_jump : 1;\n+\n+  /* Nonzero if the current function is a thunk (a lightweight function that\n+     just adjusts one of its arguments and forwards to another function), so\n+     we should try to cut corners where we can.  */\n+  unsigned int is_thunk : 1;\n+\n+  /* Nonzero if instrumentation calls for function entry and exit should be\n+     generated.  */\n+  unsigned int instrument_entry_exit : 1;\n+\n+  /* Nonzero if memory access checking be enabled in the current function.  */\n+  unsigned int check_memory_usage : 1;\n+\n+  /* Nonzero if stack limit checking should be enabled in the current\n+     function.  */\n+  unsigned int limit_stack : 1;\n+\n+  /* Nonzero if current function uses varargs.h or equivalent.\n+     Zero for functions that use stdarg.h.  */\n+  unsigned int varargs : 1;\n+\n+  /* Nonzero if current function uses stdarg.h or equivalent.\n+     Zero for functions that use varargs.h.  */\n+  unsigned int stdarg : 1;\n+\n+  /* Nonzero if this function is being processed in function-at-a-time\n+     mode.  In other words, if all tree structure for this function,\n+     including the BLOCK tree, is created before RTL generation\n+     commences.  */\n+  unsigned int x_whole_function_mode_p : 1;\n+\n+  /* Nonzero if the back-end should not keep track of expressions that\n+     determine the size of variable-sized objects.  Normally, such\n+     expressions are saved away, and then expanded when the next\n+     function is started.  For example, if a parameter has a\n+     variable-sized type, then the size of the parameter is computed\n+     when the function body is entered.  However, some front-ends do\n+     not desire this behavior.  */\n+  unsigned int x_dont_save_pending_sizes_p : 1;\n+\n+  /* Nonzero if the current function uses the constant pool.  */\n+  unsigned int uses_const_pool : 1;\n+\n+  /* Nonzero if the current function uses pic_offset_table_rtx.  */\n+  unsigned int uses_pic_offset_table : 1;\n+\n+  /* Nonzero if the current function needs an lsda for exception handling.  */\n+  unsigned int uses_eh_lsda : 1;\n };\n \n /* The function currently being compiled.  */"}]}