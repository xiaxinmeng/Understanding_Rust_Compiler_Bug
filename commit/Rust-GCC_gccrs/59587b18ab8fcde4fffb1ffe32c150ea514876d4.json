{"sha": "59587b18ab8fcde4fffb1ffe32c150ea514876d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk1ODdiMThhYjhmY2RlNGZmZmIxZmZlMzJjMTUwZWE1MTQ4NzZkNA==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2004-06-03T15:01:08Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-06-03T15:01:08Z"}, "message": "Makefile.in (RA_H, [...]): New.\n\n2004-06-03  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* Makefile.in (RA_H, RESOURCE_H, SCHED_INT_H, CFGLAYOUT_H,\n\tCFGLOOP_H, DF_H, DDG_H, TREE_SSA_LIVE_H): New.\n\t(TARGET_H): Add insn-modes.h.\n\t(tree-ssa.o, tree-cfg.o, tree-ssa-loop.o, toplev.o, passes.o,\n\tloop.o, loop-doloop.o, unroll.o, cfgloop.o, cfgloopanal.o,\n\tloop-iv.o, cfgloopmanip.o, loop-init.o, loop-unswitch.o,\n\tloop-unroll.o, ddg.o, modulo-sched.o, predict.o,\n\tcfglayout.o, ifcvt.o): Replace cfgloop.h with CFGLOOP_H.\n\t(toplev.o, passes.o, cfghooks.o, cfgloopmanip.o, loop-init.o,\n\tloop-unswitch.o, loop-unroll.o, ddg.o, modulo-sched.o,\n\tbb-reorder.o, tracer.o, cfglayout.o): Replace cfglayout.h with\n\tCFGLAYOUT_H.\n\t(ra.o, ra-build.o, ra-colorize.o, ra-debug.o, ra-rewrite.o):\n\tReplace ra.h with RA_H.\n\t(resource.o, regrename.o, insn-conditions.o, insn-emit.o,\n\tinsn-recog.o): Replace resource.h with RESOURCE_H.\n\t(ddg.o, modulo-sched.o, haifa-sched.o, sched-deps.o, sched-rgn.o,\n\tsched-ebb.o, sched-vis.o, out_object_file):  Replace sched-int.h\n\twith SCHED_INT_H.\n\t(web.o, lcm.o, df.o, ra.o, ra-build.o, ra-colorize.o, ra-debug.o,\n\tra-rewrite.o): Replace df.h with DF_H.\n\t(ddg.o, modulo-sched.o): Replace ddf.h with DDG_H.\n\t(tree-outof-ssa.o, tree-ssa-live.o, tree-ssa-copyrename.o):\n\tReplace tree-ssa-live.h with TREE_SSA_LIVE_H.\n\t(insn-conditions.o): Remove unused reload.h.\n\t* cfglayout.h: Add include guard.  Include basic-block.h.\n\t* cfgloop.h: Add include guard.  Include basic-block.h, rtl.h.\n\t* ddg.h: Include sbitmap.h, basic-block.h, df.h.\n\t* df.h: Add include guard.  Include bitmap.h, sbitmap.h,\n\tbasic-block.h.\n\t* genconditions.c:  Remove reload.h.\n\t* ra.h: Add include guard.  Include bitmap.h, sbitmap.h,\n\thard-reg-set.h, insn-modes.h.\n\t* resource.h: Add include guard.  Include hard-reg-set.h.\n\t* sched-int.h:  Add include guard.  Include insn-attr.h,\n\tbasic-block.h, rtl.h.\n\t* target.h: Add include guard.  Include insn-modes.h.\n\t* tree-ssa-live.h: Include partition.h.\n\nFrom-SVN: r82600", "tree": {"sha": "0b78df616b863331362c88f3923d82088bb9b594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b78df616b863331362c88f3923d82088bb9b594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59587b18ab8fcde4fffb1ffe32c150ea514876d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59587b18ab8fcde4fffb1ffe32c150ea514876d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59587b18ab8fcde4fffb1ffe32c150ea514876d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59587b18ab8fcde4fffb1ffe32c150ea514876d4/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95eec0d671ffda4b666c138d426c503548981ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95eec0d671ffda4b666c138d426c503548981ed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95eec0d671ffda4b666c138d426c503548981ed8"}], "stats": {"total": 225, "additions": 170, "deletions": 55}, "files": [{"sha": "9b520696a4fb6f70d2ce3f639c76795d6a37aa42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -1,3 +1,44 @@\n+2004-06-03  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* Makefile.in (RA_H, RESOURCE_H, SCHED_INT_H, CFGLAYOUT_H,\n+\tCFGLOOP_H, DF_H, DDG_H, TREE_SSA_LIVE_H): New.\n+\t(TARGET_H): Add insn-modes.h.\n+\t(tree-ssa.o, tree-cfg.o, tree-ssa-loop.o, toplev.o, passes.o,\n+\tloop.o, loop-doloop.o, unroll.o, cfgloop.o, cfgloopanal.o,\n+\tloop-iv.o, cfgloopmanip.o, loop-init.o, loop-unswitch.o,\n+\tloop-unroll.o, ddg.o, modulo-sched.o, predict.o,\n+\tcfglayout.o, ifcvt.o): Replace cfgloop.h with CFGLOOP_H.\n+\t(toplev.o, passes.o, cfghooks.o, cfgloopmanip.o, loop-init.o,\n+\tloop-unswitch.o, loop-unroll.o, ddg.o, modulo-sched.o,\n+\tbb-reorder.o, tracer.o, cfglayout.o): Replace cfglayout.h with\n+\tCFGLAYOUT_H.\n+\t(ra.o, ra-build.o, ra-colorize.o, ra-debug.o, ra-rewrite.o):\n+\tReplace ra.h with RA_H.\n+\t(resource.o, regrename.o, insn-conditions.o, insn-emit.o,\n+\tinsn-recog.o): Replace resource.h with RESOURCE_H.\n+\t(ddg.o, modulo-sched.o, haifa-sched.o, sched-deps.o, sched-rgn.o,\n+\tsched-ebb.o, sched-vis.o, out_object_file):  Replace sched-int.h\n+\twith SCHED_INT_H.\n+\t(web.o, lcm.o, df.o, ra.o, ra-build.o, ra-colorize.o, ra-debug.o,\n+\tra-rewrite.o): Replace df.h with DF_H.\n+\t(ddg.o, modulo-sched.o): Replace ddf.h with DDG_H.\n+\t(tree-outof-ssa.o, tree-ssa-live.o, tree-ssa-copyrename.o):\n+\tReplace tree-ssa-live.h with TREE_SSA_LIVE_H.\n+\t(insn-conditions.o): Remove unused reload.h.\n+\t* cfglayout.h: Add include guard.  Include basic-block.h.\n+\t* cfgloop.h: Add include guard.  Include basic-block.h, rtl.h.\n+\t* ddg.h: Include sbitmap.h, basic-block.h, df.h.\n+\t* df.h: Add include guard.  Include bitmap.h, sbitmap.h,\n+\tbasic-block.h.\n+\t* genconditions.c:  Remove reload.h.\n+\t* ra.h: Add include guard.  Include bitmap.h, sbitmap.h,\n+\thard-reg-set.h, insn-modes.h.\n+\t* resource.h: Add include guard.  Include hard-reg-set.h.\n+\t* sched-int.h:  Add include guard.  Include insn-attr.h,\n+\tbasic-block.h, rtl.h.\n+\t* target.h: Add include guard.  Include insn-modes.h.\n+\t* tree-ssa-live.h: Include partition.h.\n+\n 2004-06-03  Daniel Berlin  <dberlin@dberlin.org>\n \t\tKenneth Zadeck <zadeck@naturalbridge.com>\n "}, {"sha": "4e16eaa643fc255c7b277b4ad6451367ac4dc3b5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 60, "deletions": 53, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -675,7 +675,7 @@ TM_P_H    = tm_p.h    $(tm_p_file_list)\n GTM_H     = tm.h      $(tm_file_list)\n TM_H      = $(GTM_H) insn-constants.h insn-flags.h\n \n-TARGET_H = $(TM_H) target.h\n+TARGET_H = $(TM_H) target.h insn-modes.h\n HOOKS_H = hooks.h\n LANGHOOKS_DEF_H = langhooks-def.h $(HOOKS_H)\n TARGET_DEF_H = target-def.h $(HOOKS_H)\n@@ -695,8 +695,15 @@ EMIT_RTL_H = emit-rtl.h\n EXPR_H = expr.h insn-config.h function.h $(RTL_H) flags.h $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n REGS_H = regs.h varray.h $(MACHMODE_H)\n+RA_H = ra.h bitmap.h sbitmap.h hard-reg-set.h insn-modes.h\n+RESOURCE_H = resource.h hard-reg-set.h\n+SCHED_INT_H = sched-int.h $(INSN_ATTR_H) $(BASIC_BLOCK_H) $(RTL_H)\n INTEGRATE_H = integrate.h varray.h\n LOOP_H = loop.h varray.h bitmap.h\n+CFGLAYOUT_H = cfglayout.h $(BASIC_BLOCK_H)\n+CFGLOOP_H = cfgloop.h $(BASIC_BLOCK_H) $(RTL_H)\n+DF_H = df.h bitmap.h sbitmap.h $(BASIC_BLOCK_H)\n+DDG_H = ddg.h sbitmap.h $(DF_H)\n GCC_H = gcc.h version.h\n GGC_H = ggc.h gtype-desc.h\n TIMEVAR_H = timevar.h timevar.def\n@@ -713,6 +720,7 @@ TREE_GIMPLE_H = tree-gimple.h tree-iterator.h\n TREE_FLOW_H = tree-flow.h tree-flow-inline.h tree-ssa-operands.h \\\n \t\tbitmap.h $(BASIC_BLOCK_H) hard-reg-set.h $(TREE_GIMPLE_H) \\\n \t\t$(HASHTAB_H)\n+TREE_SSA_LIVE_H = tree-ssa-live.h $(PARTITION_H)\n PRETTY_PRINT_H = pretty-print.h input.h $(OBSTACK_H)\n DIAGNOSTIC_H = diagnostic.h diagnostic.def $(PRETTY_PRINT_H)\n C_PRETTY_PRINT_H = $(PRETTY_PRINT_H) $(C_COMMON_H) $(TREE_H)\n@@ -1571,7 +1579,7 @@ tree-alias-common.o: tree-alias-common.c tree-alias-common.h $(SYSTEM_H) \\\n tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h diagnostic.h \\\n    errors.h toplev.h function.h $(TIMEVAR_H) tree-alias-common.h \\\n-   $(TM_H) coretypes.h $(TREE_DUMP_H) langhooks.h cfgloop.h \\\n+   $(TM_H) coretypes.h $(TREE_DUMP_H) langhooks.h $(CFGLOOP_H) \\\n    tree-pass.h\n tree-into-ssa.o : tree-into-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h diagnostic.h \\\n@@ -1581,7 +1589,7 @@ tree-outof-ssa.o : tree-outof-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h diagnostic.h \\\n    errors.h toplev.h function.h $(TIMEVAR_H) tree-alias-common.h \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) langhooks.h domwalk.h \\\n-   tree-pass.h tree-ssa-live.h\n+   tree-pass.h $(TREE_SSA_LIVE_H)\n tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) errors.h $(GGC_H) $(TREE_H) $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) tree-pass.h $(TREE_DUMP_H) domwalk.h flags.h\n@@ -1613,19 +1621,19 @@ domwalk.o : domwalk.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tree-ssa-live.o : tree-ssa-live.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h diagnostic.h \\\n    errors.h toplev.h function.h $(TIMEVAR_H) tree-alias-common.h \\\n-   $(TM_H) coretypes.h $(TREE_DUMP_H) tree-ssa-live.h\n+   $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_SSA_LIVE_H)\n tree-ssa-copyrename.o : tree-ssa-copyrename.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h \\\n    diagnostic.h errors.h toplev.h function.h $(TIMEVAR_H) tree-pass.h \\\n-   tree-alias-common.h $(TM_H) coretypes.h $(TREE_DUMP_H) tree-ssa-live.h\n+   tree-alias-common.h $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_SSA_LIVE_H)\n tree-ssa-pre.o : tree-ssa-pre.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) \\\n    $(GGC_H) output.h diagnostic.h errors.h toplev.h $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) tree-pass.h flags.h\n tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) flags.h output.h \\\n    diagnostic.h errors.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\\n-   $(TREE_DUMP_H) except.h langhooks.h cfgloop.h gt-tree-cfg.h tree-pass.h\n+   $(TREE_DUMP_H) except.h langhooks.h $(CFGLOOP_H) gt-tree-cfg.h tree-pass.h\n tree-tailcall.o : tree-tailcall.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) function.h $(TM_H) coretypes.h \\\n    $(TREE_DUMP_H) diagnostic.h except.h tree-pass.h flags.h langhooks.h\n@@ -1646,7 +1654,7 @@ tree-eh.o : tree-eh.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_H) flags.h function.h except.h langhooks.h \\\n    $(GGC_H) tree-pass.h gt-tree-eh.h\n tree-ssa-loop.o : tree-ssa-loop.c $(TREE_FLOW_H) $(CONFIG_H) \\\n-   $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) cfgloop.h \\\n+   $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    output.h diagnostic.h $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\\n    tree-pass.h flags.h tree-inline.h\n tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n@@ -1708,7 +1716,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(RTL_\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n-   langhooks.h insn-flags.h cfglayout.h real.h cfgloop.h \\\n+   langhooks.h insn-flags.h $(CFGLAYOUT_H) real.h $(CFGLOOP_H) \\\n    hosthooks.h $(LANGHOOKS_DEF_H) cgraph.h $(COVERAGE_H) alloc-pool.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DTARGET_NAME=\\\"$(target_noncanonical)\\\" \\\n@@ -1720,7 +1728,7 @@ passes.o : passes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) value-prof.h \\\n    $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h $(TARGET_H) \\\n-   langhooks.h insn-flags.h cfglayout.h real.h cfgloop.h \\\n+   langhooks.h insn-flags.h $(CFGLAYOUT_H) real.h $(CFGLOOP_H) \\\n    hosthooks.h $(LANGHOOKS_DEF_H) cgraph.h $(COVERAGE_H) alloc-pool.h\n \n main.o : main.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h\n@@ -1843,17 +1851,17 @@ cse.o : cse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    output.h function.h $(BASIC_BLOCK_H) $(GGC_H) $(TM_P_H) $(TIMEVAR_H) \\\n    except.h $(TARGET_H) $(PARAMS_H) rtlhooks-def.h\n web.o : web.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n-   hard-reg-set.h flags.h $(BASIC_BLOCK_H) function.h output.h toplev.h df.h\n+   hard-reg-set.h flags.h $(BASIC_BLOCK_H) function.h output.h toplev.h $(DF_H)\n gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(GGC_H) $(RECOG_H) $(EXPR_H) \\\n    $(BASIC_BLOCK_H) function.h output.h toplev.h $(TM_P_H) $(PARAMS_H) \\\n    except.h gt-gcse.h $(TREE_H) cselib.h\n resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h resource.h function.h toplev.h \\\n+   $(TM_H) $(BASIC_BLOCK_H) $(REGS_H) flags.h output.h $(RESOURCE_H) function.h toplev.h \\\n    $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(INSN_ATTR_H) $(RECOG_H) $(EXPR_H) \\\n-   $(BASIC_BLOCK_H) $(TM_P_H) df.h function.h\n+   $(BASIC_BLOCK_H) $(TM_P_H) $(DF_H) function.h\n tree-ssa-dce.o : tree-ssa-dce.c $(CONFIG_H) system.h errors.h $(TREE_H) \\\n     $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) diagnostic.h $(TIMEVAR_H) $(TM_H) \\\n     coretypes.h $(TREE_DUMP_H) tree-pass.h flags.h\n@@ -1870,7 +1878,7 @@ tree-complex.o : tree-complex.c $(CONFIG_H) system.h $(TREE_H) \\\n     flags.h\n df.o : df.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(RECOG_H) function.h $(REGS_H) alloc-pool.h hard-reg-set.h \\\n-   $(BASIC_BLOCK_H) df.h $(FIBHEAP_H)\n+   $(BASIC_BLOCK_H) $(DF_H) $(FIBHEAP_H)\n var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h flags.h \\\n    $(BASIC_BLOCK_H) output.h sbitmap.h alloc-pool.h $(FIBHEAP_H) $(HASHTAB_H)\n@@ -1891,15 +1899,15 @@ value-prof.o : value-prof.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H)\n    $(RECOG_H) insn-config.h $(OPTABS_H) $(REGS_H)\n loop.o : loop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h $(LOOP_H) \\\n    insn-config.h $(REGS_H) hard-reg-set.h $(RECOG_H) $(EXPR_H) \\\n-   real.h $(PREDICT_H) $(BASIC_BLOCK_H) function.h cfgloop.h \\\n+   real.h $(PREDICT_H) $(BASIC_BLOCK_H) function.h $(CFGLOOP_H) \\\n    toplev.h varray.h except.h cselib.h $(OPTABS_H) $(TM_P_H) $(GGC_H)\n loop-doloop.o : loop-doloop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) flags.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) $(TM_P_H) \\\n-   toplev.h cfgloop.h output.h $(PARAMS_H)\n+   toplev.h $(CFGLOOP_H) output.h $(PARAMS_H)\n unroll.o : unroll.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n    function.h $(INTEGRATE_H) $(REGS_H) $(RECOG_H) flags.h $(EXPR_H) $(LOOP_H) toplev.h \\\n    hard-reg-set.h varray.h $(BASIC_BLOCK_H) $(TM_P_H) $(PREDICT_H) $(PARAMS_H) \\\n-   cfgloop.h\n+   $(CFGLOOP_H)\n alloc-pool.o : alloc-pool.c $(CONFIG_H) $(SYSTEM_H) alloc-pool.h $(HASHTAB_H)\n flow.o : flow.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n@@ -1908,7 +1916,7 @@ cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h insn-\n    $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    function.h except.h $(GGC_H) $(TM_P_H) alloc-pool.h $(TIMEVAR_H) \n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   $(BASIC_BLOCK_H) cfglayout.h $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h\n+   $(BASIC_BLOCK_H) $(CFGLAYOUT_H) $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h\n cfgrtl.o : cfgrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h $(RECOG_H) \\\n    function.h except.h $(GGC_H) $(TM_P_H) insn-config.h $(EXPR_H)\n@@ -1922,21 +1930,21 @@ cfgcleanup.o : cfgcleanup.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RECOG_H) toplev.h $(GGC_H) insn-config.h cselib.h $(TARGET_H) $(TM_P_H) \\\n    $(PARAMS_H) $(REGS_H) $(EMIT_RTL_H)\n cfgloop.o : cfgloop.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) coretypes.h $(TM_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h flags.h\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) flags.h\n cfgloopanal.o : cfgloopanal.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h $(EXPR_H) coretypes.h $(TM_H)\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H)\n loop-iv.o : loop-iv.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(GGC_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h $(EXPR_H) coretypes.h $(TM_H)\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(EXPR_H) coretypes.h $(TM_H)\n cfgloopmanip.o : cfgloopmanip.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h cfglayout.h output.h coretypes.h $(TM_H)\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) output.h coretypes.h $(TM_H)\n loop-init.o : loop-init.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h cfglayout.h \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) \\\n    coretypes.h $(TM_H)\n loop-unswitch.o : loop-unswitch.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h cfglayout.h $(PARAMS_H) \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) $(PARAMS_H) \\\n    output.h $(EXPR_H) coretypes.h $(TM_H)\n loop-unroll.o: loop-unroll.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TM_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h cfgloop.h cfglayout.h $(PARAMS_H) \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h $(CFGLOOP_H) $(CFGLAYOUT_H) $(PARAMS_H) \\\n    output.h $(EXPR_H) coretypes.h $(TM_H)\n dominance.o : dominance.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    hard-reg-set.h $(BASIC_BLOCK_H) et-forest.h\n@@ -1960,18 +1968,18 @@ varray.o : varray.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) varray.h $(GGC_H\n    $(HASHTAB_H)\n ra.o : ra.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TM_P_H) insn-config.h \\\n    $(RECOG_H) $(INTEGRATE_H) function.h $(REGS_H) $(OBSTACK_H) hard-reg-set.h \\\n-   $(BASIC_BLOCK_H) df.h $(EXPR_H) output.h toplev.h flags.h reload.h ra.h\n+   $(BASIC_BLOCK_H) $(DF_H) $(EXPR_H) output.h toplev.h flags.h reload.h $(RA_H)\n ra-build.o : ra-build.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TM_P_H) \\\n    insn-config.h $(RECOG_H) function.h $(REGS_H) hard-reg-set.h \\\n-   $(BASIC_BLOCK_H) df.h output.h $(GGC_H) ra.h gt-ra-build.h reload.h\n+   $(BASIC_BLOCK_H) $(DF_H) output.h $(GGC_H) $(RA_H) gt-ra-build.h reload.h\n ra-colorize.o : ra-colorize.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-    $(TM_P_H) function.h $(REGS_H) hard-reg-set.h $(BASIC_BLOCK_H) df.h output.h ra.h\n+    $(TM_P_H) function.h $(REGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) output.h $(RA_H)\n ra-debug.o : ra-debug.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   insn-config.h $(RECOG_H) function.h hard-reg-set.h $(BASIC_BLOCK_H) df.h output.h \\\n-   ra.h $(TM_P_H) $(REGS_H)\n+   insn-config.h $(RECOG_H) function.h hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) output.h \\\n+   $(RA_H) $(TM_P_H) $(REGS_H)\n ra-rewrite.o : ra-rewrite.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   $(TM_P_H) function.h $(REGS_H) hard-reg-set.h $(BASIC_BLOCK_H) df.h $(EXPR_H) \\\n-   output.h except.h ra.h reload.h insn-config.h\n+   $(TM_P_H) function.h $(REGS_H) hard-reg-set.h $(BASIC_BLOCK_H) $(DF_H) $(EXPR_H) \\\n+   output.h except.h $(RA_H) reload.h insn-config.h\n reload.o : reload.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h output.h \\\n    $(EXPR_H) $(OPTABS_H) reload.h $(RECOG_H) hard-reg-set.h insn-config.h \\\n    $(REGS_H) function.h real.h toplev.h $(TM_P_H) $(PARAMS_H)\n@@ -2001,29 +2009,29 @@ alias.o : alias.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n regmove.o : regmove.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) insn-config.h \\\n    $(RECOG_H) output.h $(REGS_H) hard-reg-set.h flags.h function.h \\\n    $(EXPR_H) $(BASIC_BLOCK_H) toplev.h $(TM_P_H) except.h reload.h\n-ddg.o : ddg.c ddg.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n+ddg.o : ddg.c $(DDG_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n    toplev.h $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) regs.h function.h flags.h \\\n-   insn-config.h insn-attr.h except.h $(RECOG_H) sched-int.h \\\n-   cfglayout.h cfgloop.h $(EXPR_H)\n-modulo-sched.o : modulo-sched.c ddg.h cfgloop.h $(CONFIG_H) \\\n+   insn-config.h insn-attr.h except.h $(RECOG_H) $(SCHED_INT_H) \\\n+   $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H)\n+modulo-sched.o : modulo-sched.c $(DDG_H) $(CONFIG_H) \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) \\\n    toplev.h $(RTL_H) $(TM_P_H) $(BASIC_BLOCK_H) regs.h function.h flags.h \\\n-   insn-config.h insn-attr.h except.h $(RECOG_H) sched-int.h \\\n-   cfglayout.h cfgloop.h $(EXPR_H) params.h $(COVERAGE_H)\n+   insn-config.h insn-attr.h except.h $(RECOG_H) $(SCHED_INT_H) \\\n+   $(CFGLAYOUT_H) $(CFGLOOP_H) $(EXPR_H) params.h $(COVERAGE_H)\n haifa-sched.o : haifa-sched.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(TARGET_H)\n sched-deps.o : sched-deps.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h cselib.h $(PARAMS_H) $(TM_P_H)\n sched-rgn.o : sched-rgn.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(PARAMS_H) $(TM_P_H) $(TARGET_H)\n sched-ebb.o : sched-ebb.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   sched-int.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n+   $(SCHED_INT_H) $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h flags.h insn-config.h function.h \\\n    $(INSN_ATTR_H) toplev.h $(RECOG_H) except.h $(TM_P_H) $(PARAMS_H)\n sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n-   sched-int.h hard-reg-set.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(REGS_H) $(TM_P_H) \\\n+   $(SCHED_INT_H) hard-reg-set.h $(BASIC_BLOCK_H) $(INSN_ATTR_H) $(REGS_H) $(TM_P_H) \\\n    $(TARGET_H) real.h\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h intl.h $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) \\\n@@ -2040,34 +2048,34 @@ sreal.o: sreal.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) sreal.h\n predict.o: predict.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n    flags.h insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h toplev.h \\\n    $(RECOG_H) function.h except.h $(EXPR_H) $(TM_P_H) $(PREDICT_H) sreal.h \\\n-   $(PARAMS_H) $(TARGET_H) cfgloop.h $(COVERAGE_H)\n+   $(PARAMS_H) $(TARGET_H) $(CFGLOOP_H) $(COVERAGE_H)\n lists.o: lists.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) toplev.h $(RTL_H) $(GGC_H)\n bb-reorder.o : bb-reorder.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n-   $(RTL_H) $(BASIC_BLOCK_H) flags.h timevar.h output.h cfglayout.h $(FIBHEAP_H) \\\n+   $(RTL_H) $(BASIC_BLOCK_H) flags.h timevar.h output.h $(CFGLAYOUT_H) $(FIBHEAP_H) \\\n    $(TARGET_H)\n tracer.o : tracer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(TREE_H) \\\n-   $(BASIC_BLOCK_H) hard-reg-set.h output.h cfglayout.h flags.h timevar.h \\\n+   $(BASIC_BLOCK_H) hard-reg-set.h output.h $(CFGLAYOUT_H) flags.h timevar.h \\\n    $(PARAMS_H) $(COVERAGE_H)\n cfglayout.o : cfglayout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) insn-config.h $(BASIC_BLOCK_H) hard-reg-set.h output.h \\\n-   function.h cfglayout.h cfgloop.h $(TARGET_H) gt-cfglayout.h $(GGC_H)\n+   function.h $(CFGLAYOUT_H) $(CFGLOOP_H) $(TARGET_H) gt-cfglayout.h $(GGC_H)\n timevar.o : timevar.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TIMEVAR_H) flags.h \\\n    intl.h toplev.h\n regrename.o : regrename.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    insn-config.h $(BASIC_BLOCK_H) $(REGS_H) hard-reg-set.h output.h $(RECOG_H) function.h \\\n-   resource.h $(OBSTACK_H) flags.h $(TM_P_H)\n+   $(RESOURCE_H) $(OBSTACK_H) flags.h $(TM_P_H)\n ifcvt.o : ifcvt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) toplev.h flags.h insn-config.h function.h $(RECOG_H) $(TARGET_H) \\\n    $(BASIC_BLOCK_H) $(EXPR_H) output.h except.h $(TM_P_H) real.h $(OPTABS_H) \\\n-   cfgloop.h\n+   $(CFGLOOP_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) pretty-print.c $(PRETTY_PRINT_H)\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n    output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) libfuncs.h \\\n-   $(TARGET_DEF_H) function.h sched-int.h $(TM_P_H) $(EXPR_H) $(OPTABS_H) \\\n+   $(TARGET_DEF_H) function.h $(SCHED_INT_H) $(TM_P_H) $(EXPR_H) $(OPTABS_H) \\\n    langhooks.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n@@ -2133,8 +2141,7 @@ s-conditions : $(md_file) genconditions$(build_exeext)\n \n insn-conditions.o : insn-conditions.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(GTM_H) $(RTL_H) $(TM_P_H) $(REGS_H) function.h $(RECOG_H) real.h output.h \\\n-  flags.h hard-reg-set.h resource.h toplev.h reload.h gensupport.h \\\n-  insn-constants.h\n+  flags.h hard-reg-set.h $(RESOURCE_H) toplev.h gensupport.h insn-constants.h\n \t$(CC_FOR_BUILD) -c $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) $(INCLUDES) insn-conditions.c\n \n dummy-conditions.o : dummy-conditions.c $(BCONFIG_H) $(SYSTEM_H) \\\n@@ -2160,7 +2167,7 @@ s-constants : $(md_file) genconstants$(build_exeext)\n \n insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) $(EXPR_H) real.h output.h insn-config.h $(OPTABS_H) reload.h \\\n-  $(RECOG_H) toplev.h function.h flags.h hard-reg-set.h resource.h $(TM_P_H)\n+  $(RECOG_H) toplev.h function.h flags.h hard-reg-set.h $(RESOURCE_H) $(TM_P_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-emit.c \\\n \t  $(OUTPUT_OPTION)\n \n@@ -2172,7 +2179,7 @@ s-emit : $(md_file) genemit$(build_exeext)\n \n insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(RTL_H) insn-config.h $(RECOG_H) real.h output.h flags.h  function.h \\\n-  hard-reg-set.h resource.h $(TM_P_H) toplev.h reload.h\n+  hard-reg-set.h $(RESOURCE_H) $(TM_P_H) toplev.h reload.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c insn-recog.c \\\n \t  $(OUTPUT_OPTION)\n "}, {"sha": "4216fbbf54a9de5c0f58da0af9839b76ae925c11", "filename": "gcc/cfglayout.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fcfglayout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fcfglayout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -18,6 +18,11 @@\n    Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    02111-1307, USA.  */\n \n+#ifndef GCC_CFGLAYOUT_H\n+#define GCC_CFGLAYOUT_H\n+\n+#include \"basic-block.h\"\n+\n extern rtx cfg_layout_function_footer;\n \n extern void cfg_layout_initialize (void);\n@@ -29,3 +34,5 @@ extern void copy_bbs (basic_block *, unsigned, basic_block *,\n \t\t      edge *, unsigned, edge *, struct loop *);\n extern bool scan_ahead_for_unlikely_executed_note (rtx);\n extern rtx duplicate_insn_chain (rtx, rtx);\n+\n+#endif /* GCC_CFGLAYOUT_H */"}, {"sha": "e3ac448f3713fc03d499b168c28529fd98a23039", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -19,6 +19,13 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_CFGLOOP_H\n+#define GCC_CFGLOOP_H\n+\n+#include \"basic-block.h\"\n+/* For rtx_code.  */\n+#include \"rtl.h\"\n+\n /* Structure to hold decision about unrolling/peeling.  */\n enum lpt_dec\n {\n@@ -420,3 +427,5 @@ enum\n \n extern void unroll_and_peel_loops (struct loops *, int);\n extern void doloop_optimize_loops (struct loops *);\n+\n+#endif /* GCC_CFGLOOP_H */"}, {"sha": "b524d7b8da28881a3d8225b8fd0e2d2ab98bdf89", "filename": "gcc/ddg.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fddg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fddg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -23,7 +23,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_DDG_H\n #define GCC_DDG_H\n \n-\n+/* For sbitmap.  */\n+#include \"sbitmap.h\"\n+/* For basic_block.  */\n+#include \"basic-block.h\"\n+/* For struct df.  */\n+#include \"df.h\"\n+ \n typedef struct ddg_node *ddg_node_ptr;\n typedef struct ddg_edge *ddg_edge_ptr;\n typedef struct ddg *ddg_ptr;"}, {"sha": "ef946565fdcf97c68e1099e291ff797898bf7963", "filename": "gcc/df.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -20,6 +20,13 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_DF_H\n+#define GCC_DF_H\n+\n+#include \"bitmap.h\"\n+#include \"sbitmap.h\"\n+#include \"basic-block.h\"\n+\n #define DF_RD\t\t1\t/* Reaching definitions.  */\n #define DF_RU\t\t2\t/* Reaching uses.  */\n #define DF_LR\t\t4\t/* Live registers.  */\n@@ -358,3 +365,5 @@ extern void iterative_dataflow_bitmap (bitmap *, bitmap *, bitmap *,\n \t\t\t\t       transfer_function_bitmap,\n \t\t\t\t       int *, void *);\n extern bool read_modify_subreg_p (rtx);\n+\n+#endif /* GCC_DF_H */"}, {"sha": "a0ef056e53b6042812a9c5f01562ada5eb3b6005", "filename": "gcc/genconditions.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -107,7 +107,6 @@ write_header (void)\n #include \\\"hard-reg-set.h\\\"\\n\\\n #include \\\"resource.h\\\"\\n\\\n #include \\\"toplev.h\\\"\\n\\\n-#include \\\"reload.h\\\"\\n\\\n #include \\\"gensupport.h\\\"\\n\");\n \n   if (saw_eh_return)"}, {"sha": "19a627d1930987b20239520f6ad35c4b4fdc54f8", "filename": "gcc/ra.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fra.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fra.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -18,6 +18,14 @@\n    with GCC; see the file COPYING.  If not, write to the Free Software\n    Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n+#ifndef GCC_RA_H\n+#define GCC_RA_H\n+\n+#include \"bitmap.h\"\n+#include \"sbitmap.h\"\n+#include \"hard-reg-set.h\"\n+#include \"insn-modes.h\"\n+\n /* Double linked list to implement the per-type lists of webs\n    and moves.  */\n struct dlist\n@@ -627,3 +635,5 @@ extern void emit_colors (struct df *);\n extern void delete_moves (void);\n extern void setup_renumber (int);\n extern void remove_suspicious_death_notes (void);\n+\n+#endif /* GCC_RA_H */"}, {"sha": "7ca055a1eff38d158f5e0111b9080dc2d11a5f73", "filename": "gcc/resource.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fresource.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fresource.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -18,6 +18,11 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_RESOURCE_H\n+#define GCC_RESOURCE_H\n+\n+#include \"hard-reg-set.h\"\n+\n /* Macro to clear all resources.  */\n #define CLEAR_RESOURCE(RES)\t\\\n  do { (RES)->memory = (RES)->unch_memory = (RES)->volatil = (RES)->cc = 0; \\\n@@ -49,3 +54,5 @@ extern void incr_ticks_for_insn (rtx);\n extern void mark_end_of_function_resources (rtx, int);\n extern void init_resource_info (rtx);\n extern void free_resource_info (void);\n+\n+#endif /* GCC_RESOURCE_H */"}, {"sha": "6387227f1dd96a2e4ea2bef2a6f1f86127b846ba", "filename": "gcc/sched-int.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -20,6 +20,16 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n+#ifndef GCC_SCHED_INT_H\n+#define GCC_SCHED_INT_H\n+\n+/* For state_t.  */\n+#include \"insn-attr.h\"\n+/* For regset_head.  */\n+#include \"basic-block.h\"\n+/* For reg_note.  */\n+#include \"rtl.h\"\n+\n /* Pointer to data describing the current DFA state.  */\n extern state_t curr_state;\n \n@@ -394,3 +404,5 @@ extern int insn_cost (rtx, rtx, rtx);\n extern rtx get_unit_last_insn (int);\n extern int actual_hazard_this_instance (int, int, rtx, int, int);\n extern void print_insn (char *, rtx, int);\n+\n+#endif /* GCC_SCHED_INT_H */"}, {"sha": "a7eb743b7d15dfccf6157230158505ea06a7dfa2", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -44,7 +44,11 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    to gradually reduce the amount of conditional compilation that is\n    scattered throughout GCC.  */\n \n+#ifndef GCC_TARGET_H\n+#define GCC_TARGET_H\n+\n #include \"tm.h\"\n+#include \"insn-modes.h\"\n \n struct gcc_target\n {\n@@ -498,3 +502,5 @@ struct gcc_target\n };\n \n extern struct gcc_target targetm;\n+\n+#endif /* GCC_TARGET_H */"}, {"sha": "59967eef3dfd3b5dc0b9c755c71b5cc75bb98988", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59587b18ab8fcde4fffb1ffe32c150ea514876d4/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=59587b18ab8fcde4fffb1ffe32c150ea514876d4", "patch": "@@ -23,6 +23,8 @@ Boston, MA 02111-1307, USA.  */\n #ifndef _TREE_SSA_LIVE_H\n #define _TREE_SSA_LIVE_H 1\n \n+#include \"partition.h\"\n+\n /* Used to create the variable mapping when we go out of SSA form.  */\n typedef struct _var_map\n {"}]}