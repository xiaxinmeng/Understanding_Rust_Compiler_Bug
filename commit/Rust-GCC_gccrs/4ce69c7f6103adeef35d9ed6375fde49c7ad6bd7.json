{"sha": "4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNlNjljN2Y2MTAzYWRlZWYzNWQ5ZWQ2Mzc1ZmRlNDljN2FkNmJkNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-11-23T06:46:31Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-23T06:46:31Z"}, "message": "Make deprecated strstream header consistent with new and new.h.\n\n\n2000-11-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tMake deprecated strstream header consistent with new and new.h.\n\t* include/backward/strstream.h: Add. Use using declarations to\n\tscope strstreambuf, istrstream, ostrstream, strstream to global\n\tscope.\n\t* include/backward/strstream: Remove using declarations.\n\t* src/Makefile.am (base_headers): Add strstream.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/backward/new.h (_CPP_BACKWARD_NEW_H): Change macro guard\n\tto be consistent with other headers.\n\nFrom-SVN: r37692", "tree": {"sha": "460707dbf5281a7245c428190428cb6342e5cd80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/460707dbf5281a7245c428190428cb6342e5cd80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/comments", "author": null, "committer": null, "parents": [{"sha": "422be3c3ccc0a941ea3a0a40c339322681b28b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422be3c3ccc0a941ea3a0a40c339322681b28b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422be3c3ccc0a941ea3a0a40c339322681b28b2b"}], "stats": {"total": 218, "additions": 53, "deletions": 165}, "files": [{"sha": "da450846aa1547036c261ccaba540dba940ffe61", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "patch": "@@ -10,6 +10,19 @@\n \t* src/ios.cc (ios_base::failure::~failure): ... here.\n \tsrc/ios.cc (ios::failure::what): Likewise.\n \n+2000-11-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tMake deprecated strstream header consistent with new and new.h.\n+\t* include/backward/strstream.h: Add. Use using declarations to\n+\tscope strstreambuf, istrstream, ostrstream, strstream to global\n+\tscope.\n+\t* include/backward/strstream: Remove using declarations.\n+\t* src/Makefile.am (base_headers): Add strstream.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* include/backward/new.h (_CPP_BACKWARD_NEW_H): Change macro guard\n+\tto be consistent with other headers.\n+\n 2000-11-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/os/bsd/bits/ctype_inline.h (is): Fix order of expressions."}, {"sha": "e888126cf7775866b824843f0bcfca6bbaa25261", "filename": "libstdc++-v3/include/backward/new.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h?ref=4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef __NEW_H__\n-#define __NEW_H__\n+#ifndef _CPP_BACKWARD_NEW_H\n+#define _CPP_BACKWARD_NEW_H 1\n \n #include <new>\n \n@@ -38,4 +38,4 @@ using std::nothrow;\n using std::new_handler;\n using std::set_new_handler;\n \n-#endif // __NEW_H__\n+#endif "}, {"sha": "72fe529cfea43ecfac0b3ee21bcb15eab4e89f2a", "filename": "libstdc++-v3/include/backward/strstream.h", "status": "modified", "additions": 34, "deletions": 159, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h?ref=4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "patch": "@@ -1,166 +1,41 @@\n-/*\n- * Copyright (c) 1998\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-// WARNING: The classes defined in this header are DEPRECATED.  This\n-// header is defined in section D.7.1 of the C++ standard, and it\n-// MAY BE REMOVED in a future standard revision.  You should use the\n-// header <sstream> instead.\n-\n-#ifndef __SGI_STL_STRSTREAM\n-#define __SGI_STL_STRSTREAM\n-\n-#if defined(__sgi) && !defined(__GNUC__) && !defined(_STANDARD_C_PLUS_PLUS)\n-#error This header file requires the -LANG:std option\n-#endif\n-\n-#include <bits/std_iosfwd.h>\n-#include <bits/std_ios.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_string.h>\n-\n-__STL_BEGIN_NAMESPACE\n-\n-//----------------------------------------------------------------------\n-// Class strstreambuf, a streambuf class that manages an array of char.\n-// Note that this class is not a template.\n-\n-class strstreambuf : public basic_streambuf<char, char_traits<char> >\n-{\n-public:                         // Types.\n-  typedef char_traits<char>              _Traits;\n-  typedef basic_streambuf<char, _Traits> _Base;\n-\n-public:                         // Constructor, destructor\n-  explicit strstreambuf(streamsize __initial_capacity = 0);\n-  strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));\n-\n-  strstreambuf(char* __get, streamsize __n, char* __put = 0);\n-  strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0);\n-  strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0);\n-\n-  strstreambuf(const char* __get, streamsize __n);\n-  strstreambuf(const signed char* __get, streamsize __n);\n-  strstreambuf(const unsigned char* __get, streamsize __n);\n-\n-  virtual ~strstreambuf();\n-\n-public:                         // strstreambuf operations.\n-  void freeze(bool = true);\n-  char* str();\n-  int pcount() const;\n-\n-protected:                      // Overridden virtual member functions.\n-  virtual int_type overflow(int_type __c  = _Traits::eof());\n-  virtual int_type pbackfail(int_type __c = _Traits::eof());\n-  virtual int_type underflow();\n-  virtual _Base* setbuf(char* __buf, streamsize __n);\n-  virtual pos_type seekoff(off_type __off, ios_base::seekdir __dir,\n-                           ios_base::openmode __mode\n-                                      = ios_base::in | ios_base::out);\n-  virtual pos_type seekpos(pos_type __pos, ios_base::openmode __mode\n-                                      = ios_base::in | ios_base::out);\n-\n-private:                        // Helper functions.\n-  // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n-  char* _M_alloc(size_t);\n-  void  _M_free(char*);\n-\n-  // Helper function used in constructors.\n-  void _M_setup(char* __get, char* __put, streamsize __n);\n-\n-private:                        // Data members.\n-  void* (*_M_alloc_fun)(size_t);\n-  void  (*_M_free_fun)(void*);\n-\n-  bool _M_dynamic  : 1;\n-  bool _M_frozen   : 1;\n-  bool _M_constant : 1;\n-};\n-\n-//----------------------------------------------------------------------\n-// Class istrstream, an istream that manages a strstreambuf.\n-\n-class istrstream : public basic_istream<char>\n-{\n-public:\n-  explicit istrstream(char*);\n-  explicit istrstream(const char*);\n-  istrstream(char* , streamsize);\n-  istrstream(const char*, streamsize);\n-  virtual ~istrstream();\n-\n-  strstreambuf* rdbuf() const;\n-  char* str();\n-\n-private:\n-  strstreambuf _M_buf;\n-};\n-\n-//----------------------------------------------------------------------\n-// Class ostrstream\n-\n-class ostrstream : public basic_ostream<char>\n-{\n-public:\n-  ostrstream();\n-  ostrstream(char*, int, ios_base::openmode = ios_base::out);\n-  virtual ~ostrstream();\n-\n-  strstreambuf* rdbuf() const;\n-  void freeze(bool = true);\n-  char* str();\n-  int pcount() const;\n-\n-private:\n-  strstreambuf _M_buf;\n-};\n-\n-//----------------------------------------------------------------------\n-// Class strstream\n-\n-class strstream : public basic_iostream<char>\n-{\n-public:\n-  typedef char                        char_type;\n-  typedef char_traits<char>::int_type int_type;\n-  typedef char_traits<char>::pos_type pos_type;\n-  typedef char_traits<char>::off_type off_type;\n-\n-  strstream();\n-  strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);\n-  virtual ~strstream();\n-\n-  strstreambuf* rdbuf() const;\n-  void freeze(bool = true);\n-  int pcount() const;\n-  char* str();\n-\n-private:\n-  strstreambuf _M_buf;\n-};\n-\n-__STL_END_NAMESPACE\n+// -*- C++ -*- forwarding header.\n+// Copyright (C) 2000 Free Software Foundation\n+\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+// \n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+// \n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_BACKWARD_STRSTREAM_H\n+#define _CPP_BACKWARD_STRSTREAM_H 1\n+\n+#include <backward/strstream>\n \n using std::strstreambuf;\n using std::istrstream;\n using std::ostrstream;\n using std::strstream;\n \n-#endif /* __SGI_STL_STRSTREAM */\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n-\n+#endif \n "}, {"sha": "b40864df86d4f1c410bbdd458842de6fbeeab52d", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.49 2000/11/22 00:05:16 bkoz Exp $\n+## $Id: Makefile.am,v 1.50 2000/11/22 17:55:06 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -103,7 +103,7 @@ base_headers = \\\n \tbackward/multiset.h backward/pair.h backward/iostream.h \\\n \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n \tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n-\tbackward/fstream.h backward/strstream.h \\\n+\tbackward/fstream.h backward/strstream.h backward/strstream \\\n \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n \tbits/std_iterator.h bits/std_list.h \\\n \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\"}, {"sha": "71f8fcbf2d42659fbb121773a7acb644effe02e8", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=4ce69c7f6103adeef35d9ed6375fde49c7ad6bd7", "patch": "@@ -147,7 +147,7 @@ CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n \n \n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n \n \n c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h "}]}