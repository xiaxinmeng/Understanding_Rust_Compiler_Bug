{"sha": "5e2d7d0d833d0ca558ccda8701dcab29a190d773", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyZDdkMGQ4MzNkMGNhNTU4Y2NkYTg3MDFkY2FiMjlhMTkwZDc3Mw==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-08-26T12:55:15Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-08-26T12:55:15Z"}, "message": "arm-cores.def: Add FL_FOR_ARCH flag for each ARM_CORE entry.\n\n2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc/config/arm/arm-cores.def: Add FL_FOR_ARCH flag for each\n\tARM_CORE entry.  Fix some white-space.\n\t* gcc/config/arm/arm.c: Remove FL_FOR_ARCH derivation from\n\tARM_CORE definition.\n\nFrom-SVN: r227211", "tree": {"sha": "f557636b97ea62e226ea8780b19c84bc90838fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f557636b97ea62e226ea8780b19c84bc90838fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e2d7d0d833d0ca558ccda8701dcab29a190d773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2d7d0d833d0ca558ccda8701dcab29a190d773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2d7d0d833d0ca558ccda8701dcab29a190d773", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2d7d0d833d0ca558ccda8701dcab29a190d773/comments", "author": null, "committer": null, "parents": [{"sha": "ed019753cb56d0f1b770bcb386e840c9785949d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed019753cb56d0f1b770bcb386e840c9785949d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed019753cb56d0f1b770bcb386e840c9785949d5"}], "stats": {"total": 209, "additions": 108, "deletions": 101}, "files": [{"sha": "670924932d7f5c110636ae52d9d04dd521044454", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2d7d0d833d0ca558ccda8701dcab29a190d773/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2d7d0d833d0ca558ccda8701dcab29a190d773/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e2d7d0d833d0ca558ccda8701dcab29a190d773", "patch": "@@ -1,3 +1,10 @@\n+2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc/config/arm/arm-cores.def: Add FL_FOR_ARCH flag for each\n+\tARM_CORE entry.  Fix some white-space.\n+\t* gcc/config/arm/arm.c: Remove FL_FOR_ARCH derivation from\n+\tARM_CORE definition.\n+\n 2015-08-26  Naveen H.S  <Naveen.Hurugalawadi@caviumnetworks.com>\n \n \t* fold-const.c (fold_binary_loc) : Move Optimize "}, {"sha": "26a6b4b454fa72d1c4a21ef347d9a3553b4ef42d", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 100, "deletions": 100, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2d7d0d833d0ca558ccda8701dcab29a190d773/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2d7d0d833d0ca558ccda8701dcab29a190d773/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=5e2d7d0d833d0ca558ccda8701dcab29a190d773", "patch": "@@ -43,134 +43,134 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\", \tarm2, arm2,\t2, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm250\", \tarm250, arm250,\t2, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm3\",\tarm3, arm3,\t2, FL_CO_PROC | FL_MODE26, slowmul)\n+ARM_CORE(\"arm2\",\tarm2, arm2,\t2, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, slowmul)\n+ARM_CORE(\"arm250\",\tarm250, arm250,\t2, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, slowmul)\n+ARM_CORE(\"arm3\",\tarm3, arm3,\t2, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",\tarm6, arm6,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm60\",\tarm60, arm60,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm600\",\tarm600, arm600,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm610\",\tarm610, arm610,\t\t3, FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm620\",\tarm620, arm620,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm7\",\tarm7, arm7,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm70\",\tarm70, arm70,\t\t3, FL_CO_PROC | FL_MODE26, slowmul)\n-ARM_CORE(\"arm700\",\tarm700, arm700,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm710\",\tarm710, arm710,\t\t3, FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm720\",\tarm720, arm720,\t\t3, FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm710c\",\tarm710c, arm710c,\t3, FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm7100\",\tarm7100, arm7100,\t3, FL_MODE26 | FL_WBUF, slowmul)\n-ARM_CORE(\"arm7500\",\tarm7500, arm7500,\t3, FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm6\",\tarm6, arm6,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm60\",\tarm60, arm60,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm600\",\tarm600, arm600,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm610\",\tarm610, arm610,\t\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm620\",\tarm620, arm620,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm7\",\tarm7, arm7,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm70\",\tarm70, arm70,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm700\",\tarm700, arm700,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm710\",\tarm710, arm710,\t\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm720\",\tarm720, arm720,\t\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm710c\",\tarm710c, arm710c,\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm7100\",\tarm7100, arm7100,\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm7500\",\tarm7500, arm7500,\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa. */\n-ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF, slowmul)\n+ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",   arm7m, arm7m,\t3M, FL_CO_PROC | FL_MODE26, fastmul)\n-ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t3M, FL_CO_PROC | FL_MODE26, fastmul)\n-ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t3M, FL_CO_PROC | FL_MODE26, fastmul)\n+ARM_CORE(\"arm7m\",   arm7m, arm7m,\t3M, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, fastmul)\n+ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t3M, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, fastmul)\n+ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t3M, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",          arm8, arm8,\t\t\t4, FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm810\",        arm810, arm810,\t\t4, FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n-ARM_CORE(\"fa526\",         fa526, fa526,\t\t\t4, FL_LDSCHED, fastmul)\n-ARM_CORE(\"fa626\",         fa626, fa626,\t\t\t4, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm8\",          arm8, arm8,\t\t\t4, FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n+ARM_CORE(\"arm810\",        arm810, arm810,\t\t4, FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n+ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n+ARM_CORE(\"fa526\",         fa526, fa526,\t\t\t4, FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n+ARM_CORE(\"fa626\",         fa626, fa626,\t\t\t4, FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\t4T, FL_CO_PROC, fastmul)\n-ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\t4T, FL_CO_PROC, fastmul)\n-ARM_CORE(\"arm710t\",\tarm710t, arm710t,\t4T, FL_WBUF,    fastmul)\n-ARM_CORE(\"arm720t\",\tarm720t, arm720t,\t4T, FL_WBUF,    fastmul)\n-ARM_CORE(\"arm740t\",\tarm740t, arm740t,\t4T, FL_WBUF,    fastmul)\n-ARM_CORE(\"arm9\",\tarm9, arm9,\t\t4T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\t4T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm920\",\tarm920, arm920,\t\t4T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm920t\",\tarm920t, arm920t,\t4T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm922t\",\tarm922t, arm922t,\t4T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm940t\",\tarm940t, arm940t,\t4T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\t4T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\t4T, FL_CO_PROC | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\t4T, FL_CO_PROC | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm710t\",\tarm710t, arm710t,\t4T, FL_WBUF | FL_FOR_ARCH4T,    fastmul)\n+ARM_CORE(\"arm720t\",\tarm720t, arm720t,\t4T, FL_WBUF | FL_FOR_ARCH4T,    fastmul)\n+ARM_CORE(\"arm740t\",\tarm740t, arm740t,\t4T, FL_WBUF | FL_FOR_ARCH4T,    fastmul)\n+ARM_CORE(\"arm9\",\tarm9, arm9,\t\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm920\",\tarm920, arm920,\t\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm920t\",\tarm920t, arm920t,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm922t\",\tarm922t, arm922t,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm940t\",\tarm940t, arm940t,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\t5T, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\t5T, FL_LDSCHED, fastmul)\n+ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\t5T, FL_LDSCHED | FL_FOR_ARCH5T, fastmul)\n+ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\t5T, FL_LDSCHED | FL_FOR_ARCH5T, fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\t5TE, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\t5TE, FL_LDSCHED, fastmul)\n-ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\t5TE, FL_LDSCHED, fastmul)\n-ARM_CORE(\"xscale\",\txscale, xscale,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE, xscale)\n-ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT, xscale)\n-ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2, xscale)\n-ARM_CORE(\"fa606te\",\tfa606te, fa606te,\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"fa626te\",\tfa626te, fa626te,\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\t5TE, FL_LDSCHED, 9e)\n-ARM_CORE(\"fa726te\",\tfa726te, fa726te,\t5TE, FL_LDSCHED, fa726te)\n+ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fastmul)\n+ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fastmul)\n+ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fastmul)\n+ARM_CORE(\"xscale\",\txscale, xscale,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_FOR_ARCH5TE, xscale)\n+ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE, xscale)\n+ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE, xscale)\n+ARM_CORE(\"fa606te\",\tfa606te, fa606te,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"fa626te\",\tfa626te, fa626te,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n+ARM_CORE(\"fa726te\",\tfa726te, fa726te,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fa726te)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\t5TEJ, FL_LDSCHED, 9e)\n-ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\t5TEJ, FL_LDSCHED, 9e)\n+ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\t5TEJ, FL_LDSCHED | FL_FOR_ARCH5TEJ, 9e)\n+ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\t5TEJ, FL_LDSCHED | FL_FOR_ARCH5TEJ, 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\t6J,  FL_LDSCHED, 9e)\n-ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\t6J,  FL_LDSCHED | FL_VFPV2, 9e)\n-ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\t6KZ, FL_LDSCHED, 9e)\n-ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\t6KZ, FL_LDSCHED | FL_VFPV2, 9e)\n-ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\t6K,  FL_LDSCHED, 9e)\n-ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\t6K,  FL_LDSCHED | FL_VFPV2, 9e)\n-ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\t6T2, FL_LDSCHED, v6t2)\n-ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\t6T2, FL_LDSCHED | FL_VFPV2, v6t2)\n+ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\t6J,  FL_LDSCHED | FL_FOR_ARCH6J, 9e)\n+ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\t6J,  FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6J, 9e)\n+ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\t6KZ, FL_LDSCHED | FL_FOR_ARCH6KZ, 9e)\n+ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\t6KZ, FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6KZ, 9e)\n+ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\t6K,  FL_LDSCHED | FL_FOR_ARCH6K, 9e)\n+ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\t6K,  FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6K, 9e)\n+ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\t6T2, FL_LDSCHED | FL_FOR_ARCH6T2, v6t2)\n+ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\t6T2, FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6T2, v6t2)\n \n /* V6M Architecture Processors */\n-ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\t6M, FL_LDSCHED, v6m)\n-ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\t6M, FL_LDSCHED, v6m)\n-ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M, FL_LDSCHED, v6m)\n+ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\t6M, FL_LDSCHED | FL_FOR_ARCH6M, v6m)\n+ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\t6M, FL_LDSCHED | FL_FOR_ARCH6M, v6m)\n+ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M, FL_LDSCHED | FL_FOR_ARCH6M, v6m)\n \n /* V6M Architecture Processors for small-multiply implementations.  */\n-ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t6M, FL_LDSCHED | FL_SMALLMUL, v6m)\n-ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t6M, FL_LDSCHED | FL_SMALLMUL, v6m)\n-ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus,6M, FL_LDSCHED | FL_SMALLMUL, v6m)\n+ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t6M, FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M, v6m)\n+ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t6M, FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M, v6m)\n+ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus,6M, FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M, v6m)\n \n /* V7 Architecture Processors */\n-ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,  FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,  FL_LDSCHED, cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,  FL_LDSCHED, cortex_a8)\n-ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,  FL_LDSCHED, cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t  \tcortexa12, cortexa17,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a15)\n-ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a12)\n-ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,  FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,  FL_LDSCHED, cortex)\n-ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,  FL_LDSCHED | FL_ARM_DIV, cortex)\n-ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,  FL_LDSCHED | FL_ARM_DIV, cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM, FL_LDSCHED | FL_NO_VOLATILE_CE, cortex_m7)\n-ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM, FL_LDSCHED, v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,  FL_LDSCHED, v7m)\n-ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,  FL_LDSCHED, marvell_pj4)\n+ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex)\n+ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex_a5)\n+ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a7)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex_a8)\n+ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex_a9)\n+ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a12)\n+ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a15)\n+ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a12)\n+ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,  FL_LDSCHED | FL_FOR_ARCH7R, cortex)\n+ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,  FL_LDSCHED | FL_FOR_ARCH7R, cortex)\n+ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,  FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R, cortex)\n+ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,  FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R, cortex)\n+ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM, FL_LDSCHED | FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM, cortex_m7)\n+ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM, FL_LDSCHED | FL_FOR_ARCH7EM, v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,  FL_LDSCHED | FL_FOR_ARCH7M, v7m)\n+ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, marvell_pj4)\n \n /* V7 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a15)\n-ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV, cortex_a12)\n+ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a15)\n+ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a12)\n \n /* V8 Architecture Processors */\n-ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A, FL_LDSCHED | FL_CRC32, cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A, FL_LDSCHED | FL_CRC32, cortex_a57)\n-ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A, FL_LDSCHED | FL_CRC32, cortex_a57)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  cortexa57,\t8A, FL_LDSCHED | FL_CRC32, cortex_a57)\n-ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A, FL_LDSCHED,            xgene1)\n+ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a53)\n+ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n+ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n+ARM_CORE(\"exynos-m1\",\texynosm1,  cortexa57,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n+ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A, FL_LDSCHED | FL_FOR_ARCH8A,            xgene1)\n \n /* V8 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32, cortex_a57)\n-ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32, cortex_a57)\n+ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n+ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)"}, {"sha": "22908bb5c1c0b49cd78ff6fac60a684cb86c1d86", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2d7d0d833d0ca558ccda8701dcab29a190d773/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2d7d0d833d0ca558ccda8701dcab29a190d773/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5e2d7d0d833d0ca558ccda8701dcab29a190d773", "patch": "@@ -2196,7 +2196,7 @@ static const struct processors all_cores[] =\n   /* ARM Cores */\n #define ARM_CORE(NAME, X, IDENT, ARCH, FLAGS, COSTS) \\\n   {NAME, IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n-    FLAGS | FL_FOR_ARCH##ARCH, &arm_##COSTS##_tune},\n+    FLAGS, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   {NULL, arm_none, NULL, BASE_ARCH_0, 0, NULL}"}]}