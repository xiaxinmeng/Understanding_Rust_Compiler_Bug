{"sha": "f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "node_id": "C_kwDOANBUbNoAKGY2ZDY1ZTgwMzYyM2M3YmE2YzhlYjkyY2U1OTc1ZmMxYjkwY2Q5MWU", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-03-31T14:50:24Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-03-31T14:51:07Z"}, "message": "ipa: Create LOAD references when necessary during inlining (PR 103171)\n\nin r12-2523-g13586172d0b70c ipa-prop tracking of jump functions during\ninlining got the ability to remove ADDR references when inlining\ndiscovered that they were not necessary or turn them into LOAD\nreferences when we know that what was a function call argument passed\nby reference will end up as a load (one or more).\n\nUnfortunately, the code only creates the LOAD references when\nreplacing removed ADDR references and PR 103171 showed that with some\nordering of inlining, we need to add the LOAD reference before we know\nwe can remove the ADDR one - or the reference will be lost, leading to\nlink errors or even ICEs.\n\nSpecifically in testcase gcc.dg/lto/pr103171_1.c added in this patch,\nif foo() is inlined to entry(), we need to create the LOAD reference\nso that when later bar() is inlined into foo() and we discover that\nthe paameter is unused, we can remove the ADDR reference and still\nkeep the varaible around for the load.\n\nMartin\n\ngcc/ChangeLog:\n\n2022-01-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103171\n\t* ipa-prop.cc (propagate_controlled_uses): Add a LOAD reference\n\talways when an ADDR_EXPR constant is known to reach a load because\n\tof inlining, not just when removing an ADDR reference.\n\ngcc/testsuite/ChangeLog:\n\n2022-01-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103171\n\t* gcc.dg/ipa/remref-6.c: Adjust dump scan string.\n\t* gcc.dg/ipa/remref-7.c: New test.\n\t* gcc.dg/lto/pr103171_0.c: New test.\n\t* gcc.dg/lto/pr103171_1.c: Likewise.", "tree": {"sha": "5c505fe4264fc1c244428d915ddcbb45d27c3020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c505fe4264fc1c244428d915ddcbb45d27c3020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmJFv9sACgkQv2PBvD+k\nNUB17BAAp3DDENKhiiOaD0ZBKNQ1eT1xxHFnhWXP/QTZy09pXZ3Sxx0wdqhSbqnp\n/93ogqpL6aG/zEWfRDM/NcpFPS+wxvWgbP53bjGW3LVuuFRDCTUrr24qCQL5ZNh3\ni5ERGidCc09aVjonNiMsapMpy/NkcRLhfRm2/M1tEHF7U/tOsgd9y2lMQGvmPPU1\nHLxvZWHdNT8u8SbDC9/W2me561xkjExCZQosYP+Ut+T9QevtnXYeHwK7TXCrU0iG\n25XjvnerZWsezQHo9srcQinwC/ydx/uUKPQ1lA/5EjzcSv6A5z8SnDAhGuHJ0N6m\nNpZ+0VibEX+SoPk2mlWS1zbtBzHghWRjbhJtW5cmeXLunYwgDDmnt70I1pDVlRci\n+MTZ9wclCNIHo16hNM/ydCjYgwu+8XKXvWbkzF1j/fMxTW20rsEswzXK9YJADotf\nYGT/B7dWlSWyInIziJOejFmZPdZ8PKIKvxn0QU4uC0mUUD46y/caXi/6M0gNCFkY\n4N6NpJqIxGD5zhRn2lppypi0wVo5pSAa07KEbG39tWkuUeQvoymr+yVTWicASggf\nhey4YL4n6eK/V0CNVIPde+sp8voei5l2sriWu+cYvpvE5q+3Sab4/jO70LbAzMy8\ntDMB8YPpVlMUVanAq+vqnBusvdAx7ExTH4aZxw3b5gDtcAaPjDQ=\n=8Qqa\n-----END PGP SIGNATURE-----", "payload": "tree 5c505fe4264fc1c244428d915ddcbb45d27c3020\nparent 90533de067d12159b3fbc847e5397033384f7484\nauthor Martin Jambor <mjambor@suse.cz> 1648738224 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1648738267 +0200\n\nipa: Create LOAD references when necessary during inlining (PR 103171)\n\nin r12-2523-g13586172d0b70c ipa-prop tracking of jump functions during\ninlining got the ability to remove ADDR references when inlining\ndiscovered that they were not necessary or turn them into LOAD\nreferences when we know that what was a function call argument passed\nby reference will end up as a load (one or more).\n\nUnfortunately, the code only creates the LOAD references when\nreplacing removed ADDR references and PR 103171 showed that with some\nordering of inlining, we need to add the LOAD reference before we know\nwe can remove the ADDR one - or the reference will be lost, leading to\nlink errors or even ICEs.\n\nSpecifically in testcase gcc.dg/lto/pr103171_1.c added in this patch,\nif foo() is inlined to entry(), we need to create the LOAD reference\nso that when later bar() is inlined into foo() and we discover that\nthe paameter is unused, we can remove the ADDR reference and still\nkeep the varaible around for the load.\n\nMartin\n\ngcc/ChangeLog:\n\n2022-01-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103171\n\t* ipa-prop.cc (propagate_controlled_uses): Add a LOAD reference\n\talways when an ADDR_EXPR constant is known to reach a load because\n\tof inlining, not just when removing an ADDR reference.\n\ngcc/testsuite/ChangeLog:\n\n2022-01-28  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/103171\n\t* gcc.dg/ipa/remref-6.c: Adjust dump scan string.\n\t* gcc.dg/ipa/remref-7.c: New test.\n\t* gcc.dg/lto/pr103171_0.c: New test.\n\t* gcc.dg/lto/pr103171_1.c: Likewise.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90533de067d12159b3fbc847e5397033384f7484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90533de067d12159b3fbc847e5397033384f7484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90533de067d12159b3fbc847e5397033384f7484"}], "stats": {"total": 111, "additions": 96, "deletions": 15}, "files": [{"sha": "72aa3e2f60dbba6d0cffcd25275f50a7f85273e5", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "patch": "@@ -4181,6 +4181,20 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t  int d = ipa_get_controlled_uses (old_root_info, i);\n \t  int c = rdesc->refcount;\n \t  rdesc->refcount = combine_controlled_uses_counters (c, d);\n+\t  if (rdesc->refcount != IPA_UNDESCRIBED_USE\n+\t      && ipa_get_param_load_dereferenced (old_root_info, i))\n+\t    {\n+\t      tree cst = ipa_get_jf_constant (jf);\n+\t      gcc_checking_assert (TREE_CODE (cst) == ADDR_EXPR\n+\t\t\t\t   && (TREE_CODE (TREE_OPERAND (cst, 0))\n+\t\t\t\t       == VAR_DECL));\n+\t      symtab_node *n = symtab_node::get (TREE_OPERAND (cst, 0));\n+\t      new_root->create_reference (n, IPA_REF_LOAD, NULL);\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"ipa-prop: Address IPA constant will reach \"\n+\t\t\t \"a load so adding LOAD reference from %s to %s.\\n\",\n+\t\t\t new_root->dump_name (), n->dump_name ());\n+\t    }\n \t  if (rdesc->refcount == 0)\n \t    {\n \t      tree cst = ipa_get_jf_constant (jf);\n@@ -4193,20 +4207,8 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t      symtab_node *n = symtab_node::get (TREE_OPERAND (cst, 0));\n \t      if (n)\n \t\t{\n-\t\t  struct cgraph_node *clone;\n-\t\t  bool removed = remove_described_reference (n, rdesc);\n-\t\t  /* The reference might have been removed by IPA-CP.  */\n-\t\t  if (removed\n-\t\t      && ipa_get_param_load_dereferenced (old_root_info, i))\n-\t\t    {\n-\t\t      new_root->create_reference (n, IPA_REF_LOAD, NULL);\n-\t\t      if (dump_file)\n-\t\t\tfprintf (dump_file, \"ipa-prop: ...replaced it with \"\n-\t\t\t\t \"LOAD one from %s to %s.\\n\",\n-\t\t\t\t new_root->dump_name (), n->dump_name ());\n-\t\t    }\n-\n-\t\t  clone = cs->caller;\n+\t\t  remove_described_reference (n, rdesc);\n+\t\t  cgraph_node *clone = cs->caller;\n \t\t  while (clone->inlined_to\n \t\t\t && clone->ipcp_clone\n \t\t\t && clone != rdesc->cs->caller)"}, {"sha": "f31f4c143196789fab70d740230b27c32aec2bbe", "filename": "gcc/testsuite/gcc.dg/ipa/remref-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fremref-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fremref-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fremref-6.c?ref=f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "patch": "@@ -20,5 +20,5 @@ void entry()\n }\n \n /* { dg-final { scan-ipa-dump \"Removed a reference\"  \"inline\" } }  */\n-/* { dg-final { scan-ipa-dump \"replaced it with LOAD\"  \"inline\"  } } */\n+/* { dg-final { scan-ipa-dump \"adding LOAD reference\"  \"inline\"  } } */\n /* { dg-final { scan-tree-dump-not \"builtin_exp\"  \"optimized\"  } } */"}, {"sha": "b2c26ab7fd573f6027a412089f72db9c61ab7c67", "filename": "gcc/testsuite/gcc.dg/ipa/remref-7.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fremref-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fremref-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fremref-7.c?ref=f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-early-inlining -fno-ipa-sra -fdump-ipa-inline\"  }  */\n+\n+int rglobal = 0;\n+int g;\n+\n+int c;\n+double *array;\n+\n+/* unused parameter */\n+static void bar(int *p)\n+{\n+  int i;\n+  for (i = 0; i < c; i++)\n+    {\n+      /* something big so that it is inlined second. */\n+      array[i] = __builtin_exp(array[i]+1)*2;\n+    }\n+}\n+\n+void foo(int *p) {\n+  g = *p;\n+  bar(p);\n+}\n+\n+void entry()\n+{\n+  foo(&rglobal);\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Removed a reference\"  \"inline\" } }  */\n+/* { dg-final { scan-ipa-dump \"adding LOAD reference\"  \"inline\"  } } */\n+"}, {"sha": "5dc17d6c6c88b9613a7f0bbc2f9a06b22b91e415", "filename": "gcc/testsuite/gcc.dg/lto/pr103171_0.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr103171_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr103171_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr103171_0.c?ref=f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-lto-do link } */\n+/* { dg-lto-options { { -O2 -flto -flto-partition=1to1 -fno-early-inlining -fno-ipa-sra -w } } } */\n+\n+extern void __attribute__((noinline)) entry(void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  entry();\n+  return 0;\n+}"}, {"sha": "39aed25daf7a3244795a08bd0bac68f7e69ed292", "filename": "gcc/testsuite/gcc.dg/lto/pr103171_1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr103171_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr103171_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr103171_1.c?ref=f6d65e803623c7ba6c8eb92ce5975fc1b90cd91e", "patch": "@@ -0,0 +1,35 @@\n+int rglobal = 0;\n+\n+volatile int g;\n+volatile int c;\n+volatile double *array;\n+\n+/* unused parameter */\n+static void\n+bar(int *p)\n+{\n+  int i;\n+  for (i = 0; i < c; i++)\n+    {\n+      /* something big so that it is inlined second. */\n+      array[i] = (array[i+1]+array[i]+1)*2;\n+    }\n+}\n+\n+void foo(int *p) {\n+  g = *p;\n+  bar(p);\n+}\n+\n+void __attribute__((noinline))\n+entry(void)\n+{\n+  foo(&rglobal);\n+}\n+\n+void __attribute__((used))\n+blah(int *p)\n+{\n+  bar(p);\n+}\n+"}]}