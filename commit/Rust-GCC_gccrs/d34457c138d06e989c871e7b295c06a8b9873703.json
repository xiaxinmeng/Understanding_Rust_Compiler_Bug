{"sha": "d34457c138d06e989c871e7b295c06a8b9873703", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0NDU3YzEzOGQwNmU5ODljODcxZTdiMjk1YzA2YThiOTg3MzcwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:17:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:17:18Z"}, "message": "poly_int: folding BIT_FIELD_REFs on vectors\n\nThis patch makes the:\n\n  (BIT_FIELD_REF CONSTRUCTOR@0 @1 @2)\n\nfolder cope with polynomial numbers of elements.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* match.pd: Cope with polynomial numbers of vector elements.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256147", "tree": {"sha": "c6778566a2e3b2d38ff05041a41dc94a6d331a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6778566a2e3b2d38ff05041a41dc94a6d331a69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34457c138d06e989c871e7b295c06a8b9873703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34457c138d06e989c871e7b295c06a8b9873703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34457c138d06e989c871e7b295c06a8b9873703", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34457c138d06e989c871e7b295c06a8b9873703/comments", "author": null, "committer": null, "parents": [{"sha": "fece509bf196d58d9b31e04d816bb4ecd3f73e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fece509bf196d58d9b31e04d816bb4ecd3f73e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fece509bf196d58d9b31e04d816bb4ecd3f73e89"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "ae13a2f68d393df3d7c2c29a1e24eb48583f512f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34457c138d06e989c871e7b295c06a8b9873703/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34457c138d06e989c871e7b295c06a8b9873703/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d34457c138d06e989c871e7b295c06a8b9873703", "patch": "@@ -1,3 +1,9 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* match.pd: Cope with polynomial numbers of vector elements.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a2a1b8f4c9517ef6e1ef00f0834e0cc4e5009d9b", "filename": "gcc/match.pd", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34457c138d06e989c871e7b295c06a8b9873703/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34457c138d06e989c871e7b295c06a8b9873703/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d34457c138d06e989c871e7b295c06a8b9873703", "patch": "@@ -4530,46 +4530,43 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        idx = idx / width;\n        n = n / width;\n        /* Constructor elements can be subvectors.  */\n-       unsigned HOST_WIDE_INT k = 1;\n+       poly_uint64 k = 1;\n        if (CONSTRUCTOR_NELTS (ctor) != 0)\n          {\n            tree cons_elem = TREE_TYPE (CONSTRUCTOR_ELT (ctor, 0)->value);\n \t   if (TREE_CODE (cons_elem) == VECTOR_TYPE)\n \t     k = TYPE_VECTOR_SUBPARTS (cons_elem);\n \t }\n+       unsigned HOST_WIDE_INT elt, count, const_k;\n      }\n      (switch\n       /* We keep an exact subset of the constructor elements.  */\n-      (if ((idx % k) == 0 && (n % k) == 0)\n+      (if (multiple_p (idx, k, &elt) && multiple_p (n, k, &count))\n        (if (CONSTRUCTOR_NELTS (ctor) == 0)\n         { build_constructor (type, NULL); }\n-\t(with\n+\t(if (count == 1)\n+\t (if (elt < CONSTRUCTOR_NELTS (ctor))\n+\t  { CONSTRUCTOR_ELT (ctor, elt)->value; }\n+\t  { build_zero_cst (type); })\n \t {\n-\t   idx /= k;\n-\t   n /= k;\n-\t }\n-\t (if (n == 1)\n-\t  (if (idx < CONSTRUCTOR_NELTS (ctor))\n-\t   { CONSTRUCTOR_ELT (ctor, idx)->value; }\n-\t   { build_zero_cst (type); })\n-\t  {\n-\t    vec<constructor_elt, va_gc> *vals;\n-\t    vec_alloc (vals, n);\n-\t    for (unsigned i = 0;\n-\t         i < n && idx + i < CONSTRUCTOR_NELTS (ctor); ++i)\n-\t      CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n-\t\t\t\t      CONSTRUCTOR_ELT (ctor, idx + i)->value);\n-\t    build_constructor (type, vals);\n-\t  }))))\n+\t   vec<constructor_elt, va_gc> *vals;\n+\t   vec_alloc (vals, count);\n+\t   for (unsigned i = 0;\n+\t\ti < count && elt + i < CONSTRUCTOR_NELTS (ctor); ++i)\n+\t     CONSTRUCTOR_APPEND_ELT (vals, NULL_TREE,\n+\t\t\t\t     CONSTRUCTOR_ELT (ctor, elt + i)->value);\n+\t   build_constructor (type, vals);\n+\t })))\n       /* The bitfield references a single constructor element.  */\n-      (if (idx + n <= (idx / k + 1) * k)\n+      (if (k.is_constant (&const_k)\n+\t   && idx + n <= (idx / const_k + 1) * const_k)\n        (switch\n-        (if (CONSTRUCTOR_NELTS (ctor) <= idx / k)\n+\t(if (CONSTRUCTOR_NELTS (ctor) <= idx / const_k)\n \t { build_zero_cst (type); })\n-\t(if (n == k)\n-\t { CONSTRUCTOR_ELT (ctor, idx / k)->value; })\n-\t(BIT_FIELD_REF { CONSTRUCTOR_ELT (ctor, idx / k)->value; }\n-\t\t       @1 { bitsize_int ((idx % k) * width); })))))))))\n+\t(if (n == const_k)\n+\t { CONSTRUCTOR_ELT (ctor, idx / const_k)->value; })\n+\t(BIT_FIELD_REF { CONSTRUCTOR_ELT (ctor, idx / const_k)->value; }\n+\t\t       @1 { bitsize_int ((idx % const_k) * width); })))))))))\n \n /* Simplify a bit extraction from a bit insertion for the cases with\n    the inserted element fully covering the extraction or the insertion"}]}