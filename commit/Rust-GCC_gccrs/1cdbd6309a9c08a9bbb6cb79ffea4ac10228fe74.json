{"sha": "1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNkYmQ2MzA5YTljMDhhOWJiYjZjYjc5ZmZlYTRhYzEwMjI4ZmU3NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-16T19:53:13Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-16T19:53:13Z"}, "message": "ia64.c (sdata_symbolic_operand): Use SYMBOL_REF_SMALL_P and SYMBOL_REF_LOCAL_P.\n\n        * config/ia64/ia64.c (sdata_symbolic_operand): Use\n        SYMBOL_REF_SMALL_P and SYMBOL_REF_LOCAL_P.\n        (tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n        (function_operand): Use SYMBOL_REF_FUNCTION_P.\n        (ia64_expand_load_address): Likewise.\n        (ia64_assemble_integer): Likewise.\n        (ia64_encode_section_info): Remove.\n        (ia64_strip_name_encoding): Remove.\n        * config/ia64/ia64.h (ENCODE_SECTION_INFO_CHAR): Remove.\n        * config/ia64/sysv4.h (ASM_OUTPUT_LABELREF): Don't strip it.\n\nFrom-SVN: r65697", "tree": {"sha": "226904135fbdddf7135a1604f1efef8acad0e692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226904135fbdddf7135a1604f1efef8acad0e692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/comments", "author": null, "committer": null, "parents": [{"sha": "d055668e809b15b17f53124efd6a093c3b97ec2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d055668e809b15b17f53124efd6a093c3b97ec2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d055668e809b15b17f53124efd6a093c3b97ec2e"}], "stats": {"total": 142, "additions": 20, "deletions": 122}, "files": [{"sha": "a7d59b8f15444a5abb88ef5ce047a75cde642069", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "patch": "@@ -1,3 +1,16 @@\n+2003-04-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (sdata_symbolic_operand): Use\n+\tSYMBOL_REF_SMALL_P and SYMBOL_REF_LOCAL_P.\n+\t(tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n+\t(function_operand): Use SYMBOL_REF_FUNCTION_P.\n+\t(ia64_expand_load_address): Likewise.\n+\t(ia64_assemble_integer): Likewise.\n+\t(ia64_encode_section_info): Remove.\n+\t(ia64_strip_name_encoding): Remove.\n+\t* config/ia64/ia64.h (ENCODE_SECTION_INFO_CHAR): Remove.\n+\t* config/ia64/sysv4.h (ASM_OUTPUT_LABELREF): Don't strip it.\n+\n 2003-04-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (SYMBOL_FLAG_NEAR, SYMBOL_FLAG_SAMEGP): New."}, {"sha": "d7aadb3283fab97945eb6d4c5ad11da8e0b7c36b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 7, "deletions": 118, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -190,8 +190,6 @@ static void emit_all_insn_group_barriers PARAMS ((FILE *, rtx));\n static void final_emit_insn_group_barriers PARAMS ((FILE *));\n static void emit_predicate_relation_info PARAMS ((void));\n static bool ia64_in_small_data_p PARAMS ((tree));\n-static void ia64_encode_section_info PARAMS ((tree, int));\n-static const char *ia64_strip_name_encoding PARAMS ((const char *));\n static void process_epilogue PARAMS ((void));\n static int process_set PARAMS ((FILE *, rtx));\n \n@@ -302,10 +300,6 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P  ia64_in_small_data_p\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO ia64_encode_section_info\n-#undef TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING ia64_strip_name_encoding\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST ia64_adjust_cost\n@@ -397,10 +391,7 @@ sdata_symbolic_operand (op, mode)\n       if (CONSTANT_POOL_ADDRESS_P (op))\n \treturn GET_MODE_SIZE (get_pool_mode (op)) <= ia64_section_threshold;\n       else\n-\t{\n-\t  const char *str = XSTR (op, 0);\n-          return (str[0] == ENCODE_SECTION_INFO_CHAR && str[1] == 's');\n-\t}\n+\treturn SYMBOL_REF_LOCAL_P (op) && SYMBOL_REF_SMALL_P (op);\n \n     default:\n       break;\n@@ -481,25 +472,9 @@ tls_symbolic_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  const char *str;\n-\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n-  str = XSTR (op, 0);\n-  if (str[0] != ENCODE_SECTION_INFO_CHAR)\n-    return 0;\n-  switch (str[1])\n-    {\n-    case 'G':\n-      return TLS_MODEL_GLOBAL_DYNAMIC;\n-    case 'L':\n-      return TLS_MODEL_LOCAL_DYNAMIC;\n-    case 'i':\n-      return TLS_MODEL_INITIAL_EXEC;\n-    case 'l':\n-      return TLS_MODEL_LOCAL_EXEC;\n-    }\n-  return 0;\n+  return SYMBOL_REF_TLS_MODEL (op);\n }\n \n \n@@ -510,7 +485,7 @@ function_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  if (GET_CODE (op) == SYMBOL_REF && SYMBOL_REF_FLAG (op))\n+  if (GET_CODE (op) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (op))\n     return 1;\n   else\n     return 0;\n@@ -1124,7 +1099,7 @@ ia64_expand_load_address (dest, src)\n       emit_insn (gen_load_gprel64 (dest, src));\n       return;\n     }\n-  else if (GET_CODE (src) == SYMBOL_REF && SYMBOL_REF_FLAG (src))\n+  else if (GET_CODE (src) == SYMBOL_REF && SYMBOL_REF_FUNCTION_P (src))\n     {\n       emit_insn (gen_load_fptr (dest, src));\n       return;\n@@ -3001,7 +2976,7 @@ ia64_assemble_integer (x, size, aligned_p)\n       && aligned_p\n       && !(TARGET_NO_PIC || TARGET_AUTO_PIC)\n       && GET_CODE (x) == SYMBOL_REF\n-      && SYMBOL_REF_FLAG (x))\n+      && SYMBOL_REF_FUNCTION_P (x))\n     {\n       if (TARGET_ILP32)\n \tfputs (\"\\tdata4\\t@fptr(\", asm_out_file);\n@@ -7400,18 +7375,7 @@ ia64_eh_uses (regno)\n   return 0;\n }\n \f\n-/* For ia64, SYMBOL_REF_FLAG set means that it is a function.\n-\n-   We add @ to the name if this goes in small data/bss.  We can only put\n-   a variable in small data/bss if it is defined in this module or a module\n-   that we are statically linked with.  We can't check the second condition,\n-   but TREE_STATIC gives us the first one.  */\n-\n-/* ??? If we had IPA, we could check the second condition.  We could support\n-   programmer added section attributes if the variable is not defined in this\n-   module.  */\n-\n-/* ??? See the v850 port for a cleaner way to do this.  */\n+/* Return true if this goes in small data/bss.  */\n \n /* ??? We could also support own long data here.  Generating movl/add/ld8\n    instead of addl,ld8/ld8.  This makes the code bigger, but should make the\n@@ -7444,81 +7408,6 @@ ia64_in_small_data_p (exp)\n \n   return false;\n }\n-\n-static void\n-ia64_encode_section_info (decl, first)\n-     tree decl;\n-     int first ATTRIBUTE_UNUSED;\n-{\n-  const char *symbol_str;\n-  bool is_local;\n-  rtx symbol;\n-  char encoding = 0;\n-\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n-    {\n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-      return;\n-    }\n-\n-  /* Careful not to prod global register variables.  */\n-  if (TREE_CODE (decl) != VAR_DECL\n-      || GET_CODE (DECL_RTL (decl)) != MEM\n-      || GET_CODE (XEXP (DECL_RTL (decl), 0)) != SYMBOL_REF)\n-    return;\n-\n-  symbol = XEXP (DECL_RTL (decl), 0);\n-  symbol_str = XSTR (symbol, 0);\n-\n-  is_local = (*targetm.binds_local_p) (decl);\n-\n-  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n-    encoding = \" GLil\"[decl_tls_model (decl)];\n-  /* Determine if DECL will wind up in .sdata/.sbss.  */\n-  else if (is_local && ia64_in_small_data_p (decl))\n-    encoding = 's';\n-\n-  /* Finally, encode this into the symbol string.  */\n-  if (encoding)\n-    {\n-      char *newstr;\n-      size_t len;\n-\n-      if (symbol_str[0] == ENCODE_SECTION_INFO_CHAR)\n-\t{\n-\t  if (encoding == symbol_str[1])\n-\t    return;\n-\t  /* ??? Sdata became thread or thread becaome not thread.  Lose.  */\n-\t  abort ();\n-\t}\n-\n-      len = strlen (symbol_str);\n-      newstr = alloca (len + 3);\n-      newstr[0] = ENCODE_SECTION_INFO_CHAR;\n-      newstr[1] = encoding;\n-      memcpy (newstr + 2, symbol_str, len + 1);\n-\n-      XSTR (symbol, 0) = ggc_alloc_string (newstr, len + 2);\n-    }\n-\n-  /* This decl is marked as being in small data/bss but it shouldn't be;\n-     one likely explanation for this is that the decl has been moved into\n-     a different section from the one it was in when encode_section_info\n-     was first called.  Remove the encoding.  */\n-  else if (symbol_str[0] == ENCODE_SECTION_INFO_CHAR)\n-    XSTR (symbol, 0) = ggc_strdup (symbol_str + 2);\n-}\n-\n-static const char *\n-ia64_strip_name_encoding (str)\n-     const char *str;\n-{\n-  if (str[0] == ENCODE_SECTION_INFO_CHAR)\n-    str += 2;\n-  if (str[0] == '*')\n-    str++;\n-  return str;\n-}\n \f\n /* Output assembly directives for prologue regions.  */\n "}, {"sha": "b6f86d10b620590a2b4be6903e6b035bb15f1023", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "patch": "@@ -1725,8 +1725,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define BSS_SECTION_ASM_OP \"\\t.bss\"\n \n-#define ENCODE_SECTION_INFO_CHAR '@'\n-\n #define IA64_DEFAULT_GVALUE 8\n \f\n /* Position Independent Code.  */"}, {"sha": "39809cf360d0b5129971f65d54eda90d9af8d046", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=1cdbd6309a9c08a9bbb6cb79ffea4ac10228fe74", "patch": "@@ -61,8 +61,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_LABELREF(STREAM, NAME)\t\\\n do {\t\t\t\t\t\t\\\n   const char *name_ = NAME;\t\t\t\\\n-  if (*name_ == ENCODE_SECTION_INFO_CHAR)\t\\\n-    name_ += 2;\t\t\t\t\t\\\n   if (*name_ == '*')\t\t\t\t\\\n     name_++;\t\t\t\t\t\\\n   else\t\t\t\t\t\t\\"}]}