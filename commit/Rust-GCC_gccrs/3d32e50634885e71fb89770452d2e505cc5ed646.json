{"sha": "3d32e50634885e71fb89770452d2e505cc5ed646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzMmU1MDYzNDg4NWU3MWZiODk3NzA0NTJkMmU1MDVjYzVlZDY0Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-02T00:46:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-09-02T00:46:23Z"}, "message": "compiler: Accept out of range integer -> unicode conversions.\n\n    \n    When converting a signed or unsigned integer value into a constant\n    string, if the integer does not fit into the Go \"int\" type, the string\n    will become \"\\uFFFD.\"\n    \n    Fixes golang/go#11525.\n    \n    Reviewed-on: https://go-review.googlesource.com/13906\n\nFrom-SVN: r227395", "tree": {"sha": "d35f1fc3146eb671bd7ecf797b5b7d6484018c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d35f1fc3146eb671bd7ecf797b5b7d6484018c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d32e50634885e71fb89770452d2e505cc5ed646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d32e50634885e71fb89770452d2e505cc5ed646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d32e50634885e71fb89770452d2e505cc5ed646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d32e50634885e71fb89770452d2e505cc5ed646/comments", "author": null, "committer": null, "parents": [{"sha": "ad47aff5c541cffd3ad733688945f9d1c05ae633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad47aff5c541cffd3ad733688945f9d1c05ae633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad47aff5c541cffd3ad733688945f9d1c05ae633"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "5fcf1bd796109ad2691b4be66ca99431f05c0bcf", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d32e50634885e71fb89770452d2e505cc5ed646/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d32e50634885e71fb89770452d2e505cc5ed646/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3d32e50634885e71fb89770452d2e505cc5ed646", "patch": "@@ -1,4 +1,4 @@\n-65672c16004c6d6d0247b6691881d282ffca89e3\n+a63e173b20baa1a48470dd31a1fb1f2704b37011\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1df9f326561a9bbcec0de2c1deac57b9aa696290", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d32e50634885e71fb89770452d2e505cc5ed646/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d32e50634885e71fb89770452d2e505cc5ed646/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3d32e50634885e71fb89770452d2e505cc5ed646", "patch": "@@ -3039,6 +3039,25 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n \t}\n     }\n \n+  // According to the language specification on string conversions\n+  // (http://golang.org/ref/spec#Conversions_to_and_from_a_string_type):\n+  // When converting an integer into a string, the string will be a UTF-8\n+  // representation of the integer and integers \"outside the range of valid\n+  // Unicode code points are converted to '\\uFFFD'.\"\n+  if (type->is_string_type())\n+    {\n+      Numeric_constant nc;\n+      if (val->numeric_constant_value(&nc) && nc.is_int())\n+        {\n+          // An integer value doesn't fit in the Unicode code point range if it\n+          // overflows the Go \"int\" type or is negative.\n+          unsigned long ul;\n+          if (!nc.set_type(Type::lookup_integer_type(\"int\"), false, location)\n+              || nc.to_unsigned_long(&ul) == Numeric_constant::NC_UL_NEGATIVE)\n+            return Expression::make_string(\"\\ufffd\", location);\n+        }\n+    }\n+\n   if (type->is_slice_type())\n     {\n       Type* element_type = type->array_type()->element_type()->forwarded();"}]}