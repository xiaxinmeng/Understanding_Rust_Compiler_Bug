{"sha": "c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkNDJhYmI5NGQ0MjNlNjVhMmNiYzczMzRiN2NhODFjM2ZmNmY1Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-06-24T16:17:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-06-24T16:17:55Z"}, "message": "profiler_trace.h (__warning_data:: __warning_message): Change to std::string...\n\n2010-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/profile/impl/profiler_trace.h (__warning_data::\n\t__warning_message): Change to std::string; clean-up includes,\n\tqualify size_t, fprintf, etc, with std everywhere.\n\t(struct __warn::operator()): Adjust.\n\t* include/profile/impl/profiler_list_to_slist.h\n\t(__list2slist_info::__advice): Change to return a std::string;\n\tclean-up includes, qualify size_t, fprintf, etc, with std.\n\t* include/profile/impl/profiler_container_size.h\n\t(__container_size_info::__advice): Likewise.\n\t* include/profile/impl/profiler_hash_func.h (__hashfunc_info::\n\t__advice): Likewise.\n\t* include/profile/impl/profiler_list_to_vector.h\n\t(__list2vector_info::__advice): Likewise.\n\t* include/profile/impl/profiler_vector_to_list.h\n\t(__vector2list_info::__advice): Likewise.\n\t* include/profile/impl/profiler_map_to_unordered_map.h\n\t(__map2umap_info::__advice): Likewise.\n\t* include/profile/impl/profiler.h: Likewise.\n\t* include/profile/impl/profiler_hashtable_size.h: Likewise.\n\t* include/profile/impl/profiler_node.h: Likewise.\n\t* include/profile/impl/profiler_vector_size.h: Likewise.\n\n\t* include/profile/iterator_tracker.h: Formatting and stylistic\n\ttweaks.\n\t* include/profile/base.h: Likewise.\n\t* include/profile/map.h: Likewise.\n\nFrom-SVN: r161325", "tree": {"sha": "6208db384d43533a3f71fac5e5be63ea26bfffcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6208db384d43533a3f71fac5e5be63ea26bfffcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/comments", "author": null, "committer": null, "parents": [{"sha": "4f8f9b8fa57454daf5e1755764858ae9c7f6395b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8f9b8fa57454daf5e1755764858ae9c7f6395b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8f9b8fa57454daf5e1755764858ae9c7f6395b"}], "stats": {"total": 1127, "additions": 531, "deletions": 596}, "files": [{"sha": "7b73831efff34522b0949b4fdd0fca1dd12da72f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -1,3 +1,32 @@\n+2010-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/profile/impl/profiler_trace.h (__warning_data::\n+\t__warning_message): Change to std::string; clean-up includes,\n+\tqualify size_t, fprintf, etc, with std everywhere.\n+\t(struct __warn::operator()): Adjust.\n+\t* include/profile/impl/profiler_list_to_slist.h\n+\t(__list2slist_info::__advice): Change to return a std::string;\n+\tclean-up includes, qualify size_t, fprintf, etc, with std.\n+\t* include/profile/impl/profiler_container_size.h\n+\t(__container_size_info::__advice): Likewise.\n+\t* include/profile/impl/profiler_hash_func.h (__hashfunc_info::\n+\t__advice): Likewise.\n+\t* include/profile/impl/profiler_list_to_vector.h\n+\t(__list2vector_info::__advice): Likewise.\n+\t* include/profile/impl/profiler_vector_to_list.h\n+\t(__vector2list_info::__advice): Likewise.\n+\t* include/profile/impl/profiler_map_to_unordered_map.h\n+\t(__map2umap_info::__advice): Likewise.\n+\t* include/profile/impl/profiler.h: Likewise.\n+\t* include/profile/impl/profiler_hashtable_size.h: Likewise.\n+\t* include/profile/impl/profiler_node.h: Likewise.\n+\t* include/profile/impl/profiler_vector_size.h: Likewise.\n+\n+\t* include/profile/iterator_tracker.h: Formatting and stylistic\n+\ttweaks.\n+\t* include/profile/base.h: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\n 2010-06-23  Paolo Carlini <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_tree.h (erase(iterator), erase(const_iterator)):"}, {"sha": "88dd0b1f1971f757b544e7ba479bd6b4bd27e188", "filename": "libstdc++-v3/include/profile/base.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbase.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -38,9 +38,7 @@\n #ifndef _GLIBCXX_PROFILE_BASE_H\n #define _GLIBCXX_PROFILE_BASE_H 1\n \n-#include <cstdio>\n #include <functional>\n-#include <bits/c++config.h>\n #include <profile/impl/profiler.h>\n \n // Profiling mode namespaces."}, {"sha": "ab9cd9030302a56173207f57b4c3d15eec873870", "filename": "libstdc++-v3/include/profile/impl/profiler.h", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,11 +37,7 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_H\n #define _GLIBCXX_PROFILE_PROFILER_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstddef>\n-#else\n-#include <stddef.h>\n-#endif\n+#include <bits/c++config.h>\n \n // Mechanism to define data with inline linkage.\n #define _GLIBCXX_PROFILE_DEFINE_UNINIT_DATA(__type, __name)             \\\n@@ -109,47 +105,50 @@ namespace __gnu_profile\n   bool __is_on();\n   bool __is_off();\n   void __report(void);\n-  void __trace_hashtable_size_resize(const void*, size_t, size_t);\n-  void __trace_hashtable_size_destruct(const void*, size_t, size_t);\n-  void __trace_hashtable_size_construct(const void*, size_t);\n-  void __trace_vector_size_resize(const void*, size_t, size_t);\n-  void __trace_vector_size_destruct(const void*, size_t, size_t);\n-  void __trace_vector_size_construct(const void*, size_t);\n-  void __trace_hash_func_destruct(const void*, size_t, size_t, size_t);\n+  void __trace_hashtable_size_resize(const void*, std::size_t, std::size_t);\n+  void __trace_hashtable_size_destruct(const void*, std::size_t, std::size_t);\n+  void __trace_hashtable_size_construct(const void*, std::size_t);\n+  void __trace_vector_size_resize(const void*, std::size_t, std::size_t);\n+  void __trace_vector_size_destruct(const void*, std::size_t, std::size_t);\n+  void __trace_vector_size_construct(const void*, std::size_t);\n+  void __trace_hash_func_destruct(const void*, std::size_t, std::size_t,\n+\t\t\t\t  std::size_t);\n   void __trace_hash_func_construct(const void*);\n   void __trace_vector_to_list_destruct(const void*);\n   void __trace_vector_to_list_construct(const void*);\n-  void __trace_vector_to_list_insert(const void*, size_t, size_t);\n-  void __trace_vector_to_list_iterate(const void*, size_t);\n+  void __trace_vector_to_list_insert(const void*, std::size_t, std::size_t);\n+  void __trace_vector_to_list_iterate(const void*, std::size_t);\n   void __trace_vector_to_list_invalid_operator(const void*);\n-  void __trace_vector_to_list_resize(const void*, size_t, size_t);\n-  void __trace_vector_to_list_find(const void*, size_t);\n+  void __trace_vector_to_list_resize(const void*, std::size_t, std::size_t);\n+  void __trace_vector_to_list_find(const void*, std::size_t);\n \n   void __trace_list_to_slist_destruct(const void*);\n   void __trace_list_to_slist_construct(const void*);\n-  void __trace_list_to_slist_rewind(const void*); \n+  void __trace_list_to_slist_rewind(const void*);\n   void __trace_list_to_slist_operation(const void*);\n \n   void __trace_list_to_vector_destruct(const void*);\n   void __trace_list_to_vector_construct(const void*);\n-  void __trace_list_to_vector_insert(const void*, size_t, size_t); \n-  void __trace_list_to_vector_iterate(const void*, size_t);\n+  void __trace_list_to_vector_insert(const void*, std::size_t, std::size_t);\n+  void __trace_list_to_vector_iterate(const void*, std::size_t);\n   void __trace_list_to_vector_invalid_operator(const void*);\n-  void __trace_list_to_vector_resize(const void*, size_t, size_t); \n+  void __trace_list_to_vector_resize(const void*, std::size_t, std::size_t);\n \n   void __trace_list_to_set_destruct(const void*);\n   void __trace_list_to_set_construct(const void*);\n-  void __trace_list_to_set_insert(const void*, size_t, size_t); \n-  void __trace_list_to_set_iterate(const void*, size_t);\n+  void __trace_list_to_set_insert(const void*, std::size_t, std::size_t); \n+  void __trace_list_to_set_iterate(const void*, std::size_t);\n   void __trace_list_to_set_invalid_operator(const void*);\n-  void __trace_list_to_set_find(const void*, size_t); \n+  void __trace_list_to_set_find(const void*, std::size_t); \n \n   void __trace_map_to_unordered_map_construct(const void*);\n   void __trace_map_to_unordered_map_invalidate(const void*);\n-  void __trace_map_to_unordered_map_insert(const void*, size_t, size_t);\n-  void __trace_map_to_unordered_map_erase(const void*, size_t, size_t);\n-  void __trace_map_to_unordered_map_iterate(const void*, size_t);\n-  void __trace_map_to_unordered_map_find(const void*, size_t);\n+  void __trace_map_to_unordered_map_insert(const void*, std::size_t,\n+\t\t\t\t\t   std::size_t);\n+  void __trace_map_to_unordered_map_erase(const void*, std::size_t,\n+\t\t\t\t\t  std::size_t);\n+  void __trace_map_to_unordered_map_iterate(const void*, std::size_t);\n+  void __trace_map_to_unordered_map_find(const void*, std::size_t);\n   void __trace_map_to_unordered_map_destruct(const void*);\n } // namespace __gnu_profile\n "}, {"sha": "aceef914c54aac3f3832c2e8f5ee3b5c5e65ccd6", "filename": "libstdc++-v3/include/profile/impl/profiler_container_size.h", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_container_size.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,16 +37,6 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_CONTAINER_SIZE_H\n #define _GLIBCXX_PROFILE_PROFILER_CONTAINER_SIZE_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdlib>\n-#include <cstdio>\n-#include <cstring>\n-#else\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <string.h>\n-#endif\n-\n #include <sstream>\n \n #include \"profile/impl/profiler.h\"\n@@ -56,7 +46,7 @@\n namespace __gnu_profile\n {\n   /** @brief A container size instrumentation line in the object table.  */\n-  class __container_size_info \n+  class __container_size_info\n   : public __object_info_base \n   {\n   public:\n@@ -73,7 +63,7 @@ namespace __gnu_profile\n       _M_resize(__o._M_resize), _M_cost(__o._M_cost)\n     { }\n \n-    __container_size_info(__stack_t __stack, size_t __num)\n+    __container_size_info(__stack_t __stack, std::size_t __num)\n     : __object_info_base(__stack), _M_init(__num), _M_max(__num),\n       _M_min(0), _M_total(0), _M_item_min(0), _M_item_max(0),\n       _M_item_total(0), _M_count(0), _M_resize(0), _M_cost(0)\n@@ -84,23 +74,23 @@ namespace __gnu_profile\n     void\n     __write(FILE* __f) const\n     {\n-      fprintf(__f, \"%Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu\\n\", \n-\t      _M_init, _M_count, _M_cost, _M_resize, _M_min, _M_max, _M_total,\n-\t      _M_item_min, _M_item_max, _M_item_total);\n+      std::fprintf(__f, \"%Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu %Zu\\n\", \n+\t\t   _M_init, _M_count, _M_cost, _M_resize, _M_min, _M_max,\n+\t\t   _M_total, _M_item_min, _M_item_max, _M_item_total);\n     }\n \n     float\n     __magnitude() const\n     { return static_cast<float>(_M_cost); }\n \n-    const char*\n+    std::string\n     __advice() const\n     {\n       std::stringstream __message;\n       if (_M_init < _M_item_max)\n \t__message << \"change initial container size from \" << _M_init\n \t\t  << \" to \" << _M_item_max;\n-      return strdup(__message.str().c_str());\n+      return __message.str();\n     }\n \n     void\n@@ -120,7 +110,7 @@ namespace __gnu_profile\n \n     // Call if a container is destructed or cleaned.\n     void\n-    __destruct(size_t __num, size_t __inum)\n+    __destruct(std::size_t __num, std::size_t __inum)\n     {\n       _M_max = std::max(_M_max, __num);\n       _M_item_max = std::max(_M_item_max, __inum);\n@@ -141,29 +131,29 @@ namespace __gnu_profile\n \n     // Estimate the cost of resize/rehash. \n     float\n-    __resize_cost(size_t __from, size_t)\n+    __resize_cost(std::size_t __from, std::size_t)\n     { return __from; }\n \n     // Call if container is resized.\n     void\n-    __resize(size_t __from, size_t __to)\n+    __resize(std::size_t __from, std::size_t __to)\n     {\n       _M_cost += this->__resize_cost(__from, __to);\n       _M_resize += 1;\n       _M_max = std::max(_M_max, __to);\n     }\n \n   private:\n-    size_t _M_init;\n-    size_t _M_max;  // range of # buckets\n-    size_t _M_min;\n-    size_t _M_total;\n-    size_t _M_item_min;  // range of # items\n-    size_t _M_item_max;\n-    size_t _M_item_total;\n-    size_t _M_count;\n-    size_t _M_resize;\n-    size_t _M_cost;\n+    std::size_t _M_init;\n+    std::size_t _M_max;  // range of # buckets\n+    std::size_t _M_min;\n+    std::size_t _M_total;\n+    std::size_t _M_item_min;  // range of # items\n+    std::size_t _M_item_max;\n+    std::size_t _M_item_total;\n+    std::size_t _M_count;\n+    std::size_t _M_resize;\n+    std::size_t _M_cost;\n   };\n \n "}, {"sha": "b02f453f9aea19445d465e16389a025dc72ca4dd", "filename": "libstdc++-v3/include/profile/impl/profiler_hash_func.h", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hash_func.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,23 +37,14 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_HASH_FUNC_H\n #define _GLIBCXX_PROFILE_PROFILER_HASH_FUNC_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdlib>\n-#include <cstdio>\n-#include <cstring>\n-#else\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <string.h>\n-#endif\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n namespace __gnu_profile\n {\n   /** @brief A hash performance instrumentation line in the object table.  */\n-  class __hashfunc_info \n+  class __hashfunc_info\n   : public __object_info_base\n   {\n   public:\n@@ -66,9 +57,9 @@ namespace __gnu_profile\n   \n     __hashfunc_info(__stack_t __stack)\n     : __object_info_base(__stack),\n-      _M_longest_chain(0), _M_accesses(0), _M_hops(0){ }\n+      _M_longest_chain(0), _M_accesses(0), _M_hops(0) { }\n  \n-    virtual ~__hashfunc_info() {}\n+    virtual ~__hashfunc_info() { }\n \n     void\n     __merge(const __hashfunc_info& __o)\n@@ -79,7 +70,8 @@ namespace __gnu_profile\n     }\n \n     void\n-    __destruct(size_t __chain, size_t __accesses, size_t __hops)\n+    __destruct(std::size_t __chain, std::size_t __accesses,\n+\t       std::size_t __hops)\n     { \n       _M_longest_chain  = std::max(_M_longest_chain, __chain);\n       _M_accesses      += __accesses;\n@@ -88,20 +80,21 @@ namespace __gnu_profile\n \n     void\n     __write(FILE* __f) const\n-    { fprintf(__f, \"%Zu %Zu %Zu\\n\", _M_hops, _M_accesses, _M_longest_chain); }\n+    { std::fprintf(__f, \"%Zu %Zu %Zu\\n\", _M_hops,\n+\t\t   _M_accesses, _M_longest_chain); }\n \n     float\n     __magnitude() const\n     { return static_cast<float>(_M_hops); }\n \n-    const char*\n+    std::string\n     __advice() const\n-    { return strdup(\"change hash function\"); }\n+    { return \"change hash function\"; }\n \n   private:\n-    size_t _M_longest_chain;\n-    size_t _M_accesses;\n-    size_t _M_hops;\n+    std::size_t _M_longest_chain;\n+    std::size_t _M_accesses;\n+    std::size_t _M_hops;\n   };\n \n \n@@ -133,8 +126,8 @@ namespace __gnu_profile\n \n     // Call at destruction/clean to set container final size.\n     void\n-    __destruct(const void* __obj, size_t __chain,\n-\t       size_t __accesses, size_t __hops)\n+    __destruct(const void* __obj, std::size_t __chain,\n+\t       std::size_t __accesses, std::size_t __hops)\n     {\n       if (!__is_on())\n \treturn;\n@@ -174,14 +167,14 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_hash_func_destruct(const void* __obj, size_t __chain,\n-\t\t\t     size_t __accesses, size_t __hops)\n+  __trace_hash_func_destruct(const void* __obj, std::size_t __chain,\n+\t\t\t     std::size_t __accesses, std::size_t __hops)\n   {\n     if (!__profcxx_init())\n       return;\n \n-    _GLIBCXX_PROFILE_DATA(_S_hash_func)->__destruct(__obj, __chain, __accesses, \n-\t\t\t\t\t\t    __hops);\n+    _GLIBCXX_PROFILE_DATA(_S_hash_func)->__destruct(__obj, __chain,\n+\t\t\t\t\t\t    __accesses, __hops);\n   }\n \n } // namespace __gnu_profile"}, {"sha": "9d5cbc793ef925a03b11f5a388e4dc164c520da5", "filename": "libstdc++-v3/include/profile/impl/profiler_hashtable_size.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_hashtable_size.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,15 +37,6 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_HASHTABLE_SIZE_H\n #define _GLIBCXX_PROFILE_PROFILER_HASHTABLE_SIZE_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdlib>\n-#include <cstdio>\n-#include <cstring>\n-#else\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <string.h>\n-#endif\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n@@ -80,7 +71,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_hashtable_size_construct(const void* __obj, size_t __num)\n+  __trace_hashtable_size_construct(const void* __obj, std::size_t __num)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -90,8 +81,8 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_hashtable_size_destruct(const void* __obj, size_t __num, \n-\t\t\t\t  size_t __inum)\n+  __trace_hashtable_size_destruct(const void* __obj, std::size_t __num, \n+\t\t\t\t  std::size_t __inum)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -100,8 +91,8 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_hashtable_size_resize(const void* __obj, size_t __from, \n-\t\t\t\tsize_t __to)\n+  __trace_hashtable_size_resize(const void* __obj, std::size_t __from, \n+\t\t\t\tstd::size_t __to)\n   {\n     if (!__profcxx_init())\n       return;"}, {"sha": "9b5a5b28047b560bc3da65133b97096a67ad0f75", "filename": "libstdc++-v3/include/profile/impl/profiler_list_to_slist.h", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_slist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_slist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_slist.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,22 +37,13 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_LIST_TO_SLIST_H\n #define _GLIBCXX_PROFILE_PROFILER_LIST_TO_SLIST_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdlib>\n-#include <cstdio>\n-#include <cstring>\n-#else\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <string.h>\n-#endif\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n namespace __gnu_profile\n {\n-  class __list2slist_info \n+  class __list2slist_info\n   : public __object_info_base\n   {\n   public:\n@@ -90,11 +81,11 @@ namespace __gnu_profile\n \n     void\n     __write(FILE* __f) const\n-    { fprintf(__f, \"%s\\n\", _M_rewind ? \"invalid\" : \"valid\"); }\n+    { std::fprintf(__f, \"%s\\n\", _M_rewind ? \"invalid\" : \"valid\"); }\n \n-    const char*\n+    std::string\n     __advice() const\n-    { return strdup(\"change std::list to std::forward_list\"); }\n+    { return \"change std::list to std::forward_list\"; }\n \n     void\n     __opr_rewind()\n@@ -113,7 +104,7 @@ namespace __gnu_profile\n \n   private:\n     bool _M_rewind;\n-    size_t _M_operations;\n+    std::size_t _M_operations;\n   };\n \n   class __list2slist_stack_info"}, {"sha": "df03267bd44acea6deb471a59661463f2863d6d4", "filename": "libstdc++-v3/include/profile/impl/profiler_list_to_vector.h", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_list_to_vector.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,25 +37,16 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_LIST_TO_VECTOR_H\n #define _GLIBCXX_PROFILE_PROFILER_LIST_TO_VECTOR_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdio>\n-#include <cstdlib>\n-#include <cstring>\n-#else\n-#include <stdio.h>\n-#include <stdint.h>\n-#include <string.h>\n-#endif\n-#include <string>\n #include <sstream>\n+\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n namespace __gnu_profile\n {\n   /** @brief A list-to-vector instrumentation line in the object table.  */\n-  class __list2vector_info \n+  class __list2vector_info\n   : public __object_info_base\n   {\n   public:\n@@ -91,37 +82,37 @@ namespace __gnu_profile\n     void\n     __write(FILE* __f) const\n     {\n-      fprintf(__f, \"%Zu %Zu %Zu %.0f %.0f\\n\", _M_shift_count, _M_resize,\n-\t      _M_iterate, _M_vector_cost, _M_list_cost);\n+      std::fprintf(__f, \"%Zu %Zu %Zu %.0f %.0f\\n\", _M_shift_count,\n+\t\t   _M_resize, _M_iterate, _M_vector_cost, _M_list_cost);\n     }\n \n     float\n     __magnitude() const\n     { return _M_list_cost - _M_vector_cost; }\n   \n-    const char*\n+    std::string\n     __advice() const\n     {\n       std::stringstream __sstream;\n       __sstream \n \t<< \"change std::list to std::vector and its initial size from 0 to \"\n \t<< _M_max_size;\n-      return strdup(__sstream.str().c_str());\n+      return __sstream.str();\n     }\n \n-    size_t\n+    std::size_t\n     __shift_count()\n     { return _M_shift_count; }\n   \n-    size_t\n+    std::size_t\n     __iterate()\n     { return _M_iterate; }\n   \n     float\n     __list_cost()\n     { return _M_list_cost; }\n   \n-    size_t\n+    std::size_t\n     __resize()\n     { return _M_resize; }\n   \n@@ -142,28 +133,28 @@ namespace __gnu_profile\n     { _M_valid = false; }\n \n     void\n-    __opr_insert(size_t __shift, size_t __size)\n+    __opr_insert(std::size_t __shift, std::size_t __size)\n     {\n       _M_shift_count += __shift;\n       _M_max_size = std::max(_M_max_size, __size);\n     }\n \n     void\n-    __opr_iterate(size_t __num)\n+    __opr_iterate(std::size_t __num)\n     { _M_iterate += __num;}\n \n     void\n-    __resize(size_t __from, size_t)\n+    __resize(std::size_t __from, std::size_t)\n     { _M_resize += __from; }\n \n   private:\n-    size_t _M_shift_count;\n-    size_t _M_iterate;\n-    size_t _M_resize;\n+    std::size_t _M_shift_count;\n+    std::size_t _M_iterate;\n+    std::size_t _M_resize;\n     float _M_list_cost;\n     float _M_vector_cost;\n     bool  _M_valid;\n-    size_t _M_max_size;\n+    std::size_t _M_max_size;\n   };\n \n   class __list2vector_stack_info \n@@ -212,15 +203,15 @@ namespace __gnu_profile\n \n     // Collect cost of operations.\n     void\n-    __opr_insert(const void* __obj, size_t __shift, size_t __size)\n+    __opr_insert(const void* __obj, std::size_t __shift, std::size_t __size)\n     {\n       __list2vector_info* __res = __get_object_info(__obj);\n       if (__res)\n \t__res->__opr_insert(__shift, __size);\n     }\n \n     void\n-    __opr_iterate(const void* __obj, size_t __num)\n+    __opr_iterate(const void* __obj, std::size_t __num)\n     {\n       __list2vector_info* __res = __get_object_info(__obj);\n       if (__res)\n@@ -236,15 +227,15 @@ namespace __gnu_profile\n     }\n \n     void\n-    __resize(const void* __obj, size_t __from, size_t __to)\n+    __resize(const void* __obj, std::size_t __from, std::size_t __to)\n     {\n       __list2vector_info* __res = __get_object_info(__obj);\n       if (__res)\n \t__res->__resize(__from, __to);\n     }\n \n     float\n-    __vector_cost(size_t __shift, size_t __iterate)\n+    __vector_cost(std::size_t __shift, std::size_t __iterate)\n     {\n       // The resulting vector will use a 'reserve' method.\n       return (__shift\n@@ -254,7 +245,7 @@ namespace __gnu_profile\n     }\n \n     float\n-    __list_cost(size_t __shift, size_t __iterate)\n+    __list_cost(std::size_t __shift, std::size_t __iterate)\n     {\n       return (__shift\n \t      * _GLIBCXX_PROFILE_DATA(__list_shift_cost_factor).__value\n@@ -299,7 +290,7 @@ namespace __gnu_profile\n \n   inline void\n   __trace_list_to_vector_insert(const void* __obj, \n-\t\t\t\tsize_t __shift, size_t __size)\n+\t\t\t\tstd::size_t __shift, std::size_t __size)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -309,7 +300,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_list_to_vector_iterate(const void* __obj, size_t __num = 1)\n+  __trace_list_to_vector_iterate(const void* __obj, std::size_t __num = 1)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -328,7 +319,7 @@ namespace __gnu_profile\n \n   inline void\n   __trace_list_to_vector_resize(const void* __obj, \n-\t\t\t\tsize_t __from, size_t __to)\n+\t\t\t\tstd::size_t __from, std::size_t __to)\n   {\n     if (!__profcxx_init())\n       return;"}, {"sha": "cc7c849a42206f669d7c09abfd9e07f48dcbee10", "filename": "libstdc++-v3/include/profile/impl/profiler_map_to_unordered_map.h", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_map_to_unordered_map.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,49 +37,40 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_MAP_TO_UNORDERED_MAP_H\n #define _GLIBCXX_PROFILE_PROFILER_MAP_TO_UNORDERED_MAP_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdlib>\n-#include <cstdio>\n-#include <cstring>\n-#else\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <string.h>\n-#endif\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n namespace __gnu_profile\n {\n   inline int\n-  __log2(size_t __size)\n+  __log2(std::size_t __size)\n   {\n-    for (int __bit_count = sizeof(size_t) - 1; __bit_count >= 0;\n+    for (int __bit_count = sizeof(std::size_t) - 1; __bit_count >= 0;\n \t -- __bit_count) \n       if ((2 << __bit_count) & __size)\n \treturn __bit_count;\n     return 0;\n   }\n \n   inline float\n-  __map_insert_cost(size_t __size)\n+  __map_insert_cost(std::size_t __size)\n   { return (_GLIBCXX_PROFILE_DATA(__map_insert_cost_factor).__value \n \t    * static_cast<float>(__log2(__size))); }\n \n   inline float\n-  __map_erase_cost(size_t __size)\n+  __map_erase_cost(std::size_t __size)\n   { return (_GLIBCXX_PROFILE_DATA(__map_erase_cost_factor).__value\n \t    * static_cast<float>(__log2(__size))); }\n \n   inline float\n-  __map_find_cost(size_t __size)\n+  __map_find_cost(std::size_t __size)\n   { return (_GLIBCXX_PROFILE_DATA(__map_find_cost_factor).__value\n \t    * static_cast<float>(__log2(__size))); }\n \n   /** @brief A map-to-unordered_map instrumentation line in the \n       object table.  */\n-  class __map2umap_info \n+  class __map2umap_info\n   : public __object_info_base\n   {\n   public:\n@@ -113,21 +104,21 @@ namespace __gnu_profile\n     void\n     __write(FILE* __f) const\n     {\n-      fprintf(__f, \"%Zu %Zu %Zu %Zu %.0f %.0f %s\\n\",\n-\t      _M_insert, _M_erase, _M_find, _M_iterate, _M_map_cost,\n-\t      _M_umap_cost, _M_valid ? \"valid\" : \"invalid\");\n+      std::fprintf(__f, \"%Zu %Zu %Zu %Zu %.0f %.0f %s\\n\",\n+\t\t   _M_insert, _M_erase, _M_find, _M_iterate, _M_map_cost,\n+\t\t   _M_umap_cost, _M_valid ? \"valid\" : \"invalid\");\n     }\n-    \n+\n     float\n     __magnitude() const\n     { return _M_map_cost - _M_umap_cost; }\n \n-    const char*\n+    std::string\n     __advice() const\n-    { return strdup(\"change std::map to std::unordered_map\"); }\n+    { return \"change std::map to std::unordered_map\"; }\n \n     void\n-    __record_insert(size_t __size, size_t __count)\n+    __record_insert(std::size_t __size, std::size_t __count)\n     {\n       _M_insert += __count;\n       _M_map_cost += __count * __map_insert_cost(__size);\n@@ -137,7 +128,7 @@ namespace __gnu_profile\n     }\n \n     void\n-    __record_erase(size_t __size, size_t __count)\n+    __record_erase(std::size_t __size, std::size_t __count)\n     {\n       _M_erase += __count;\n       _M_map_cost += __count * __map_erase_cost(__size);\n@@ -147,15 +138,15 @@ namespace __gnu_profile\n     }\n \n     void\n-    __record_find(size_t __size)\n+    __record_find(std::size_t __size)\n     {\n       _M_find += 1;\n       _M_map_cost += __map_find_cost(__size);\n       _M_umap_cost += _GLIBCXX_PROFILE_DATA(__umap_find_cost_factor).__value;\n     }\n \n     void\n-    __record_iterate(size_t __count)\n+    __record_iterate(std::size_t __count)\n     {\n       _M_iterate += __count;\n       _M_map_cost\n@@ -171,10 +162,10 @@ namespace __gnu_profile\n     { _M_valid = false; }\n \n   private:\n-    size_t _M_insert;\n-    size_t _M_erase;\n-    size_t _M_find;\n-    size_t _M_iterate;\n+    std::size_t _M_insert;\n+    std::size_t _M_erase;\n+    std::size_t _M_find;\n+    std::size_t _M_iterate;\n     float _M_umap_cost;\n     float _M_map_cost;\n     bool  _M_valid;\n@@ -237,7 +228,7 @@ namespace __gnu_profile\n \n   inline void\n   __trace_map_to_unordered_map_insert(const void* __obj, \n-\t\t\t\t      size_t __size, size_t __count)\n+\t\t\t\t      std::size_t __size, std::size_t __count)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -251,7 +242,7 @@ namespace __gnu_profile\n \n   inline void\n   __trace_map_to_unordered_map_erase(const void* __obj, \n-\t\t\t\t     size_t __size, size_t __count)\n+\t\t\t\t     std::size_t __size, std::size_t __count)\n   {\n     if (!__profcxx_init()) \n       return;\n@@ -264,7 +255,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_find(const void* __obj, size_t __size)\n+  __trace_map_to_unordered_map_find(const void* __obj, std::size_t __size)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -277,7 +268,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_map_to_unordered_map_iterate(const void* __obj, size_t __count)\n+  __trace_map_to_unordered_map_iterate(const void* __obj, std::size_t __count)\n   {\n     if (!__profcxx_init())\n       return;"}, {"sha": "d22a3e16b48dd4b101171d17430fcd90912f35a1", "filename": "libstdc++-v3/include/profile/impl/profiler_node.h", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_node.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,15 +37,8 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_NODE_H\n #define _GLIBCXX_PROFILE_PROFILER_NODE_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdio>\n-#include <cstdint>\n-#include <cstring>\n-#else\n-#include <stdio.h>\n-#include <stdint.h>\n-#include <string.h>\n-#endif\n+#include <cstdio> // FILE, fprintf\n+\n #include <vector>\n #if defined _GLIBCXX_HAVE_EXECINFO_H\n #include <execinfo.h>\n@@ -58,26 +51,27 @@ namespace __gnu_profile\n   typedef std::_GLIBCXX_STD_PR::vector<__instruction_address_t> __stack_npt;\n   typedef __stack_npt* __stack_t;\n \n-  size_t __stack_max_depth();\n+  std::size_t __stack_max_depth();\n \n   inline __stack_t\n   __get_stack()\n   {\n #if defined _GLIBCXX_HAVE_EXECINFO_H\n-    size_t __max_depth = __stack_max_depth();\n+    std::size_t __max_depth = __stack_max_depth();\n     if (__max_depth == 0)\n       return 0;\n     __stack_npt __buffer(__max_depth);\n     int __depth = backtrace(&__buffer[0], __max_depth);\n     __stack_t __stack = new __stack_npt(__depth);\n-    memcpy(&(*__stack)[0], &__buffer[0], __depth * sizeof(__object_t));\n+    __builtin_memcpy(&(*__stack)[0], &__buffer[0],\n+\t\t     __depth * sizeof(__object_t));\n     return __stack;\n #else\n     return 0;\n #endif\n   }\n \n-  inline size_t\n+  inline std::size_t\n   __size(__stack_t __stack)\n   {\n     if (!__stack)\n@@ -95,23 +89,23 @@ namespace __gnu_profile\n   \n     __stack_npt::const_iterator __it;\n     for (__it = __stack->begin(); __it != __stack->end(); ++__it)\n-      fprintf(__f, \"%p \", *__it);\n+      std::fprintf(__f, \"%p \", *__it);\n   }\n \n   /** @brief Hash function for summary trace using call stack as index.  */\n   class __stack_hash \n   {\n   public:\n-    size_t\n+    std::size_t\n     operator()(__stack_t __s) const\n     {\n       if (!__s) \n \treturn 0;\n \n-      uintptr_t __index = 0;\n+      __UINTPTR_TYPE__ __index = 0;\n       __stack_npt::const_iterator __it;\n       for (__it = __s->begin(); __it != __s->end(); ++__it)\n-\t__index += reinterpret_cast<uintptr_t>(*__it);\n+\t__index += reinterpret_cast<__UINTPTR_TYPE__>(*__it);\n       return __index;\n     }\n \n@@ -124,8 +118,10 @@ namespace __gnu_profile\n       if (__stack1->size() != __stack2->size())\n \treturn false;\n \n-      size_t __byte_size = __stack1->size() * sizeof(__stack_npt::value_type);\n-      return memcmp(&(*__stack1)[0], &(*__stack2)[0], __byte_size) == 0;\n+      std::size_t __byte_size\n+\t= __stack1->size() * sizeof(__stack_npt::value_type);\n+      return __builtin_memcmp(&(*__stack1)[0], &(*__stack2)[0],\n+\t\t\t      __byte_size) == 0;\n     }\n   };\n "}, {"sha": "ce1964a95b0259ac03ea6fcd95a2ff56e343d170", "filename": "libstdc++-v3/include/profile/impl/profiler_trace.h", "status": "modified", "additions": 97, "deletions": 90, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_trace.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,18 +37,14 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_TRACE_H\n #define _GLIBCXX_PROFILE_PROFILER_TRACE_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <cstdio>  // fopen, fclose, fprintf, FILE\n #include <cerrno>\n-#include <cstdint>\n-#include <cstdio>\n-#include <cstdlib>\n+#include <cstdlib> // atof, atoi, strtol, getenv, atexit, abort\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n #define _GLIBCXX_IMPL_UNORDERED_MAP std::_GLIBCXX_STD_PR::unordered_map\n #include <unordered_map>\n #else\n-#include <errno.h>\n-#include <stdint.h>\n-#include <stdio.h>\n-#include <stdlib.h>\n #include <tr1/unordered_map>\n #define _GLIBCXX_IMPL_UNORDERED_MAP std::tr1::unordered_map\n #endif\n@@ -86,18 +82,18 @@ namespace __gnu_profile\n     float __magnitude;\n     __stack_t __context;\n     const char* __warning_id;\n-    const char* __warning_message;\n+    std::string __warning_message;\n+\n     __warning_data()\n-    : __magnitude(0.0), __context(0), __warning_id(0),\n-    \n-    __warning_message(0) { }\n+    : __magnitude(0.0), __context(0), __warning_id(0) { }\n+\n     __warning_data(float __m, __stack_t __c, const char* __id, \n-\t\t   const char* __msg)\n+\t\t   const std::string& __msg)\n     : __magnitude(__m), __context(__c), __warning_id(__id), \n       __warning_message(__msg) { }\n-    \n+\n     bool\n-    operator<(const struct __warning_data& __other) const\n+    operator<(const __warning_data& __other) const\n     { return __magnitude < __other.__magnitude; }\n   };\n \n@@ -174,18 +170,18 @@ namespace __gnu_profile\n \n   _GLIBCXX_PROFILE_DEFINE_DATA(const char*, _S_trace_file_name,\n \t\t\t       _GLIBCXX_PROFILE_TRACE_PATH_ROOT);\n-  _GLIBCXX_PROFILE_DEFINE_DATA(size_t, _S_max_warn_count,\n+  _GLIBCXX_PROFILE_DEFINE_DATA(std::size_t, _S_max_warn_count,\n \t\t\t       _GLIBCXX_PROFILE_MAX_WARN_COUNT);\n-  _GLIBCXX_PROFILE_DEFINE_DATA(size_t, _S_max_stack_depth,\n+  _GLIBCXX_PROFILE_DEFINE_DATA(std::size_t, _S_max_stack_depth,\n \t\t\t       _GLIBCXX_PROFILE_MAX_STACK_DEPTH);\n-  _GLIBCXX_PROFILE_DEFINE_DATA(size_t, _S_max_mem,\n+  _GLIBCXX_PROFILE_DEFINE_DATA(std::size_t, _S_max_mem,\n \t\t\t       _GLIBCXX_PROFILE_MEM_PER_DIAGNOSTIC);\n \n-  inline size_t\n+  inline std::size_t\n   __stack_max_depth()\n   { return _GLIBCXX_PROFILE_DATA(_S_max_stack_depth); }\n \n-  inline size_t\n+  inline std::size_t\n   __max_mem()\n   { return _GLIBCXX_PROFILE_DATA(_S_max_mem); }\n \n@@ -200,7 +196,7 @@ namespace __gnu_profile\n       void __add_object(__object_t object, __object_info __info);\n       __object_info* __get_object_info(__object_t __object);\n       void __retire_object(__object_t __object);\n-      void __write(FILE* f);\n+      void __write(FILE* __f);\n       void __collect_warnings(__warning_vector_t& __warnings);\n \n     private:\n@@ -213,7 +209,7 @@ namespace __gnu_profile\n \t\t\t\t\t  __stack_hash> __stack_table_t;\n       __object_table_t __object_table;\n       __stack_table_t __stack_table;\n-      size_t __stack_table_byte_size;\n+      std::size_t __stack_table_byte_size;\n \n     protected:\n       const char* __id;\n@@ -336,30 +332,32 @@ namespace __gnu_profile\n \t{\n \t  if (__it->second.__is_valid())\n \t    {\n-\t      fprintf(__f, __id);\n-\t      fprintf(__f, \"|\");\n+\t      std::fprintf(__f, __id);\n+\t      std::fprintf(__f, \"|\");\n \t      __gnu_profile::__write(__f, __it->first);\n-\t      fprintf(__f, \"|\");\n+\t      std::fprintf(__f, \"|\");\n \t      __it->second.__write(__f);\n \t    }\n \t}\n     }\n \n-  inline size_t\n-  __env_to_size_t(const char* __env_var, size_t __default_value)\n+  inline std::size_t\n+  __env_to_size_t(const char* __env_var, std::size_t __default_value)\n   {\n-    char* __env_value = getenv(__env_var);\n+    char* __env_value = std::getenv(__env_var);\n     if (__env_value)\n       {\n-\tlong __converted_value = strtol(__env_value, 0, 10);\n+\terrno = 0;\n+\tlong __converted_value = std::strtol(__env_value, 0, 10);\n \tif (errno || __converted_value < 0)\n \t  {\n-\t    fprintf(stderr, \"Bad value for environment variable '%s'.\\n\",\n-\t\t    __env_var);\n-\t    abort();\n+\t    std::fprintf(stderr,\n+\t\t\t \"Bad value for environment variable '%s'.\\n\",\n+\t\t\t __env_var);\n+\t    std::abort();\n \t  }\n \telse\n-\t  return static_cast<size_t>(__converted_value);\n+\t  return static_cast<std::size_t>(__converted_value);\n       }\n     else\n       return __default_value;\n@@ -406,39 +404,47 @@ namespace __gnu_profile\n   __open_output_file(const char* __extension)\n   {\n     // The path is made of _S_trace_file_name + \".\" + extension.\n-    size_t __root_len = strlen(_GLIBCXX_PROFILE_DATA(_S_trace_file_name));\n-    size_t __ext_len = strlen(__extension);\n+    std::size_t __root_len \n+      = __builtin_strlen(_GLIBCXX_PROFILE_DATA(_S_trace_file_name));\n+    std::size_t __ext_len = __builtin_strlen(__extension);\n     char* __file_name = new char[__root_len + 1 + __ext_len + 1];\n-    memcpy(__file_name, _GLIBCXX_PROFILE_DATA(_S_trace_file_name),\n-\t   __root_len);\n+    __builtin_memcpy(__file_name,\n+\t\t     _GLIBCXX_PROFILE_DATA(_S_trace_file_name),\n+\t\t     __root_len);\n     *(__file_name + __root_len) = '.';\n-    memcpy(__file_name + __root_len + 1, __extension, __ext_len + 1);\n-    FILE* __out_file = fopen(__file_name, \"w\");\n-    if (__out_file) \n-      return __out_file;\n+    __builtin_memcpy(__file_name + __root_len + 1,\n+\t\t     __extension, __ext_len + 1);\n+    FILE* __out_file = std::fopen(__file_name, \"w\");\n+    if (__out_file)\n+      {\n+\tdelete[] __file_name;\n+\treturn __out_file;\n+      }\n     else\n       {\n-\tfprintf(stderr, \"Could not open trace file '%s'.\\n\", __file_name);\n-\tabort();\n+\tstd::fprintf(stderr, \"Could not open trace file '%s'.\\n\",\n+\t\t     __file_name);\n+\tstd::abort();\n       }\n   }\n \n   struct __warn\n   {\n     FILE* __file;\n-    __warn(FILE* __f) { __file = __f; }\n+\n+    __warn(FILE* __f)\n+    { __file = __f; }\n \n     void\n-    operator() (const __warning_data& __info)\n+    operator()(const __warning_data& __info)\n     {\n-      fprintf(__file,  __info.__warning_id);\n-      fprintf(__file, \": improvement = %d\",\n-\t      __log_magnitude(__info.__magnitude));\n-      fprintf(__file, \": call stack = \");\n+      std::fprintf(__file,  __info.__warning_id);\n+      std::fprintf(__file, \": improvement = %d\",\n+\t\t   __log_magnitude(__info.__magnitude));\n+      std::fprintf(__file, \": call stack = \");\n       __gnu_profile::__write(__file, __info.__context);\n-      fprintf(__file, \": advice = %s\\n\", __info.__warning_message);\n-      free(const_cast<void*>\n-\t   (reinterpret_cast<const void*>(__info.__warning_message)));\n+      std::fprintf(__file, \": advice = %s\\n\",\n+\t\t   __info.__warning_message.c_str());\n     }\n   };\n \n@@ -464,7 +470,7 @@ namespace __gnu_profile\n     __trace_list_to_slist_report(__raw_file, __warnings);\n     __trace_list_to_vector_report(__raw_file, __warnings);\n     __trace_map_to_unordered_map_report(__raw_file, __warnings);\n-    fclose(__raw_file);\n+    std::fclose(__raw_file);\n \n     // Sort data by magnitude, keeping just top N.\n     size_t __cutoff = std::min(_GLIBCXX_PROFILE_DATA(_S_max_warn_count),\n@@ -474,32 +480,32 @@ namespace __gnu_profile\n     FILE* __warn_file = __open_output_file(\"txt\");\n     __for_each(__top_warnings.begin(), __top_warnings.end(),\n \t       __warn(__warn_file));\n-    fclose(__warn_file);\n+    std::fclose(__warn_file);\n \n     _GLIBCXX_PROFILE_DATA(__global_lock).unlock();\n   }\n \n   inline void\n   __set_trace_path()\n   {\n-    char* __env_trace_file_name = getenv(_GLIBCXX_PROFILE_TRACE_ENV_VAR);\n+    char* __env_trace_file_name = std::getenv(_GLIBCXX_PROFILE_TRACE_ENV_VAR);\n \n     if (__env_trace_file_name)\n       _GLIBCXX_PROFILE_DATA(_S_trace_file_name) = __env_trace_file_name;\n \n     // Make sure early that we can create the trace file.\n-    fclose(__open_output_file(\"txt\"));\n+    std::fclose(__open_output_file(\"txt\"));\n   }\n \n   inline void\n   __set_max_warn_count()\n   {\n     char* __env_max_warn_count_str\n-      = getenv(_GLIBCXX_PROFILE_MAX_WARN_COUNT_ENV_VAR);\n+      = std::getenv(_GLIBCXX_PROFILE_MAX_WARN_COUNT_ENV_VAR);\n \n     if (__env_max_warn_count_str)\n       _GLIBCXX_PROFILE_DATA(_S_max_warn_count)\n-\t= static_cast<size_t>(atoi(__env_max_warn_count_str));\n+\t= static_cast<std::size_t>(std::atoi(__env_max_warn_count_str));\n   }\n \n   inline void\n@@ -542,7 +548,8 @@ namespace __gnu_profile\n   \n     void\n     operator() (const __cost_factor* __factor)\n-    { fprintf(__file, \"%s = %f\\n\", __factor->__env_var, __factor->__value); }\n+    { std::fprintf(__file, \"%s = %f\\n\", __factor->__env_var,\n+\t\t   __factor->__value); }\n   };\n \n   inline void\n@@ -552,7 +559,7 @@ namespace __gnu_profile\n     __for_each(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin(),\n \t       _GLIBCXX_PROFILE_DATA(__cost_factors)->end(),\n \t       __cost_factor_writer(__file));\n-    fclose(__file);\n+    std::fclose(__file);\n   }\n \n   struct __cost_factor_setter\n@@ -561,7 +568,7 @@ namespace __gnu_profile\n     operator() (__cost_factor* __factor)\n     {\n       // Look it up in the process environment first.\n-      const char* __env_value = getenv(__factor->__env_var);\n+      const char* __env_value = std::getenv(__factor->__env_var);\n \n       if (!__env_value)\n         {\n@@ -573,7 +580,7 @@ namespace __gnu_profile\n         }\n \n       if (__env_value)\n-        __factor->__value = atof(__env_value);\n+        __factor->__value = std::atof(__env_value);\n     }\n   };\n \n@@ -585,33 +592,33 @@ namespace __gnu_profile\n       push_back(&_GLIBCXX_PROFILE_DATA(__vector_shift_cost_factor));\n     _GLIBCXX_PROFILE_DATA(__cost_factors)->\n       push_back(&_GLIBCXX_PROFILE_DATA(__vector_iterate_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__vector_resize_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__list_shift_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__list_iterate_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__list_resize_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__map_insert_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__map_erase_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__map_find_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__map_iterate_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__umap_insert_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__umap_erase_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__umap_find_cost_factor));\n-  _GLIBCXX_PROFILE_DATA(__cost_factors)->\n-    push_back(&_GLIBCXX_PROFILE_DATA(__umap_iterate_cost_factor));\n-  __for_each(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin(),\n-             _GLIBCXX_PROFILE_DATA(__cost_factors)->end(),\n-             __cost_factor_setter());\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__vector_resize_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__list_shift_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__list_iterate_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__list_resize_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__map_insert_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__map_erase_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__map_find_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__map_iterate_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__umap_insert_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__umap_erase_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__umap_find_cost_factor));\n+    _GLIBCXX_PROFILE_DATA(__cost_factors)->\n+      push_back(&_GLIBCXX_PROFILE_DATA(__umap_iterate_cost_factor));\n+    __for_each(_GLIBCXX_PROFILE_DATA(__cost_factors)->begin(),\n+\t       _GLIBCXX_PROFILE_DATA(__cost_factors)->end(),\n+\t       __cost_factor_setter());\n   }\n \n   inline void\n@@ -642,7 +649,7 @@ namespace __gnu_profile\n \t    __trace_list_to_vector_init();\n \t    __trace_map_to_unordered_map_init();\n \n-\t    atexit(__report);\n+\t    std::atexit(__report);\n \n \t    __turn_on();\n \t  }"}, {"sha": "0af384f4ecb28e51b731894b5248fababcecace5", "filename": "libstdc++-v3/include/profile/impl/profiler_vector_size.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_size.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,15 +37,6 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_VECTOR_SIZE_H\n #define _GLIBCXX_PROFILE_PROFILER_VECTOR_SIZE_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdlib>\n-#include <cstdio>\n-#include <cstring>\n-#else\n-#include <stdlib.h>\n-#include <stdio.h>\n-#include <string.h>\n-#endif\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n@@ -79,7 +70,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_size_construct(const void* __obj, size_t __num)\n+  __trace_vector_size_construct(const void* __obj, std::size_t __num)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -89,7 +80,8 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_size_destruct(const void* __obj, size_t __num, size_t __inum)\n+  __trace_vector_size_destruct(const void* __obj, std::size_t __num,\n+\t\t\t       std::size_t __inum)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -98,7 +90,8 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_size_resize(const void* __obj, size_t __from, size_t __to)\n+  __trace_vector_size_resize(const void* __obj, std::size_t __from,\n+\t\t\t     std::size_t __to)\n   {\n     if (!__profcxx_init())\n       return;"}, {"sha": "01c7a19f1471978a716544553d48b16626ff45ac", "filename": "libstdc++-v3/include/profile/impl/profiler_vector_to_list.h", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fimpl%2Fprofiler_vector_to_list.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -37,23 +37,14 @@\n #ifndef _GLIBCXX_PROFILE_PROFILER_VECTOR_TO_LIST_H\n #define _GLIBCXX_PROFILE_PROFILER_VECTOR_TO_LIST_H 1\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdio>\n-#include <cstdlib>\n-#include <cstring>\n-#else\n-#include <stdio.h>\n-#include <stdint.h>\n-#include <string.h>\n-#endif\n #include \"profile/impl/profiler.h\"\n #include \"profile/impl/profiler_node.h\"\n #include \"profile/impl/profiler_trace.h\"\n \n namespace __gnu_profile\n {\n   /** @brief A vector-to-list instrumentation line in the object table.  */\n-  class __vector2list_info \n+  class __vector2list_info\n   : public __object_info_base\n   {\n   public:\n@@ -87,29 +78,30 @@ namespace __gnu_profile\n     void\n     __write(FILE* __f) const\n     {\n-      fprintf(__f, \"%Zu %Zu %Zu %.0f %.0f\\n\", _M_shift_count, _M_resize,\n-\t      _M_iterate, _M_vector_cost, _M_list_cost);\n+      std::fprintf(__f, \"%Zu %Zu %Zu %.0f %.0f\\n\", _M_shift_count,\n+\t\t   _M_resize, _M_iterate, _M_vector_cost, _M_list_cost);\n     }\n \n     float\n     __magnitude() const\n     { return _M_vector_cost - _M_list_cost; }\n \n-    const char* __advice() const \n-    { return strdup(\"change std::vector to std::list\"); }\n+    std::string\n+    __advice() const \n+    { return \"change std::vector to std::list\"; }\n \n-    size_t\n+    std::size_t\n     __shift_count()\n     { return _M_shift_count; }\n \n-    size_t\n+    std::size_t\n     __iterate()\n     { return _M_iterate; }\n \n     float __list_cost()\n     { return _M_list_cost; }\n \n-    size_t\n+    std::size_t\n     __resize()\n     { return _M_resize; }\n \n@@ -130,27 +122,28 @@ namespace __gnu_profile\n     { _M_valid = false; }\n \n     void\n-    __opr_insert(size_t __pos, size_t __num)\n+    __opr_insert(std::size_t __pos, std::size_t __num)\n     { _M_shift_count += __num - __pos; }\n \n     void\n-    __opr_iterate(size_t __num)\n+    __opr_iterate(std::size_t __num)\n     { _M_iterate += __num; }\n \n     void\n-    __resize(size_t __from, size_t)\n+    __resize(std::size_t __from, std::size_t)\n     { _M_resize += __from; }\n \n-    void __opr_find(size_t __size)\n+    void\n+    __opr_find(std::size_t __size)\n     {\n       // Use average case complexity.\n       _M_iterate += 3.0 / 4.0 * __size;\n     }\n \n   private:\n-    size_t _M_shift_count;\n-    size_t _M_iterate;\n-    size_t _M_resize;\n+    std::size_t _M_shift_count;\n+    std::size_t _M_iterate;\n+    std::size_t _M_resize;\n     float _M_list_cost;\n     float _M_vector_cost;\n     bool  _M_valid;\n@@ -210,15 +203,15 @@ namespace __gnu_profile\n \n     // Collect cost of operations.\n     void\n-    __opr_insert(const void* __obj, size_t __pos, size_t __num)\n+    __opr_insert(const void* __obj, std::size_t __pos, std::size_t __num)\n     {\n       __vector2list_info* __res = __get_object_info(__obj);\n       if (__res)\n \t__res->__opr_insert(__pos, __num);\n     }\n \n     void\n-    __opr_iterate(const void* __obj, size_t __num)\n+    __opr_iterate(const void* __obj, std::size_t __num)\n     {\n       __vector2list_info* __res = __get_object_info(__obj);\n       if (__res)\n@@ -234,15 +227,16 @@ namespace __gnu_profile\n     }\n \n     void\n-    __resize(const void* __obj, size_t __from, size_t __to)\n+    __resize(const void* __obj, std::size_t __from, std::size_t __to)\n     {\n       __vector2list_info* __res = __get_object_info(__obj);\n       if (__res)\n \t__res->__resize(__from, __to);\n     }\n \n     float\n-    __vector_cost(size_t __shift, size_t __iterate, size_t __resize)\n+    __vector_cost(std::size_t __shift, std::size_t __iterate,\n+\t\t  std::size_t __resize)\n     {\n       return (__shift\n \t      * _GLIBCXX_PROFILE_DATA(__vector_shift_cost_factor).__value\n@@ -253,7 +247,8 @@ namespace __gnu_profile\n     }\n \n     float\n-    __list_cost(size_t __shift, size_t __iterate, size_t __resize)\n+    __list_cost(std::size_t __shift, std::size_t __iterate,\n+\t\tstd::size_t __resize)\n     {\n       return (__shift\n \t      * _GLIBCXX_PROFILE_DATA(__list_shift_cost_factor).__value\n@@ -264,7 +259,7 @@ namespace __gnu_profile\n     }\n \n     void\n-    __opr_find(const void* __obj, size_t __size)\n+    __opr_find(const void* __obj, std::size_t __size)\n     {\n       __vector2list_info* __res = __get_object_info(__obj);\n       if (__res)\n@@ -307,7 +302,8 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_to_list_insert(const void* __obj, size_t __pos, size_t __num)\n+  __trace_vector_to_list_insert(const void* __obj, std::size_t __pos,\n+\t\t\t\tstd::size_t __num)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -317,7 +313,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_to_list_iterate(const void* __obj, size_t __num = 1)\n+  __trace_vector_to_list_iterate(const void* __obj, std::size_t __num = 1)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -335,7 +331,8 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_to_list_resize(const void* __obj, size_t __from, size_t __to)\n+  __trace_vector_to_list_resize(const void* __obj, std::size_t __from,\n+\t\t\t\tstd::size_t __to)\n   {\n     if (!__profcxx_init())\n       return;\n@@ -344,7 +341,7 @@ namespace __gnu_profile\n   }\n \n   inline void\n-  __trace_vector_to_list_find(const void* __obj, size_t __size)\n+  __trace_vector_to_list_find(const void* __obj, std::size_t __size)\n   {\n     if (!__profcxx_init())\n       return;"}, {"sha": "faad9e572797f57898a4e46c1cf34a7f147dffd6", "filename": "libstdc++-v3/include/profile/iterator_tracker.h", "status": "modified", "additions": 219, "deletions": 246, "changes": 465, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fiterator_tracker.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -36,266 +36,239 @@ namespace std\n namespace __profile\n {\n \n-template<typename _Iterator, typename _Sequence>\n-class __iterator_tracker \n-{\n-  typedef __iterator_tracker _Self;\n-  // The underlying iterator\n-  _Iterator _M_current;\n-  // The underlying data structure\n-  const _Sequence* _M_ds;\n-  typedef std::iterator_traits<_Iterator> _Traits;\n-\n- public:\n-  typedef _Iterator\t\t              _Base_iterator;\n-  typedef typename _Traits::iterator_category iterator_category; \n-  typedef typename _Traits::value_type        value_type;\n-  typedef typename _Traits::difference_type   difference_type;\n-  typedef typename _Traits::reference         reference;\n-  typedef typename _Traits::pointer           pointer;\n-\n-  __iterator_tracker() : _M_current(), _M_ds(0) { }\n-  __iterator_tracker(const _Iterator& __i, const _Sequence* seq) \n-      : _M_current(__i), _M_ds(seq) { }\n-  __iterator_tracker(const __iterator_tracker& __x) \n-      : _M_current(__x._M_current), _M_ds(__x._M_ds) { }\n-  template<typename _MutableIterator>\n-  __iterator_tracker(const __iterator_tracker<_MutableIterator, typename __gnu_cxx::__enable_if<(std::__are_same<_MutableIterator, typename _Sequence::iterator::_Base_iterator>::__value), _Sequence>::__type>& __x)\n-      :  _M_current(__x.base()), _M_ds(__x._M_get_sequence()) { }\n-\n-  _Iterator\n-  base() const { return _M_current; }\n-  /**\n-   * @brief Conversion to underlying non-debug iterator to allow\n-   * better interaction with non-profile containers.\n-   */\n-  operator _Iterator() const { return _M_current; }\n-\n-  pointer\n-  operator->() const { return &*_M_current; }\n-\n-  __iterator_tracker&\n-  operator++()\n-  {\n-    _M_ds->_M_profile_iterate();\n-    ++_M_current;\n-    return *this;\n-  }\n-\n-  __iterator_tracker&\n-  operator++(int)\n-  {\n-    _M_ds->_M_profile_iterate();\n-    __iterator_tracker __tmp(*this);\n-    ++_M_current;\n-    return __tmp;\n-  }\n-\n-  __iterator_tracker&\n-  operator--()\n-  {\n-    _M_ds->_M_profile_iterate(1);\n-    --_M_current;\n-    return *this;\n-  }\n-\n-  __iterator_tracker&\n-  operator--(int)\n-  {\n-    _M_ds->_M_profile_iterate(1);\n-    __iterator_tracker __tmp(*this);\n-    --_M_current;\n-    return __tmp;\n-  }\n-\n-  __iterator_tracker&\n-  operator=(const __iterator_tracker& __x)\n-  {\n-    _M_current = __x._M_current;\n-    return *this;\n-  }\n-\n-  reference\n-  operator*() const\n-  {\n-    return *_M_current;\n-  }\n-\n- // ------ Random access iterator requirements ------\n-  reference\n-  operator[](const difference_type& __n) const \n-  {\n-    return _M_current[__n];\n-  }\n-\n-  __iterator_tracker&\n-  operator+=(const difference_type& __n)\n-  {\n-    _M_current += __n;\n-    return *this;\n-  }\n-\n-  __iterator_tracker\n-  operator+(const difference_type& __n) const\n-  {\n-    __iterator_tracker __tmp(*this);\n-    __tmp += __n;\n-    return __tmp;\n-  }\n-\n-  __iterator_tracker&\n-  operator-=(const difference_type& __n)\n-  {\n-    _M_current += -__n;\n-    return *this;\n-  }\n-\n-  __iterator_tracker\n-  operator-(const difference_type& __n) const\n-  {\n-    __iterator_tracker __tmp(*this);\n-    __tmp -= __n;\n-    return __tmp;\n-  }\n-\n-  void\n-  _M_find()\n-  {\n-    _M_ds->_M_profile_find();\n-  }\n-\n-  const _Sequence*\n-  _M_get_sequence() const\n-  {\n-    return static_cast<const _Sequence*>(_M_ds);\n-  }\n-};\n-\n-template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-inline bool\n-operator==(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-           const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() == __rhs.base();\n-}\n+  template<typename _Iterator, typename _Sequence>\n+    class __iterator_tracker \n+    {\n+      typedef __iterator_tracker _Self;\n \n-template<typename _Iterator, typename _Sequence>\n-inline bool\n-operator==(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-           const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() == __rhs.base();\n-}\n+      // The underlying iterator\n+      _Iterator _M_current;\n \n-template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-inline bool\n-operator!=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-           const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() != __rhs.base();\n-}\n+      // The underlying data structure\n+      const _Sequence* _M_ds;\n+      typedef std::iterator_traits<_Iterator> _Traits;\n \n-template<typename _Iterator, typename _Sequence>\n-inline bool\n-operator!=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-               const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() != __rhs.base();\n-}\n+    public:\n+      typedef _Iterator\t\t              _Base_iterator;\n+      typedef typename _Traits::iterator_category iterator_category; \n+      typedef typename _Traits::value_type        value_type;\n+      typedef typename _Traits::difference_type   difference_type;\n+      typedef typename _Traits::reference         reference;\n+      typedef typename _Traits::pointer           pointer;\n \n-template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-inline bool\n-operator<(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-          const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() < __rhs.base();\n-}\n+      __iterator_tracker()\n+      : _M_current(), _M_ds(0) { }\n \n-template<typename _Iterator, typename _Sequence>\n-inline bool\n-operator<(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-          const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() < __rhs.base();\n-}\n+      __iterator_tracker(const _Iterator& __i, const _Sequence* __seq) \n+      : _M_current(__i), _M_ds(__seq) { }\n \n-template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-inline bool\n-operator<=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-           const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() <= __rhs.base();\n-}\n+      __iterator_tracker(const __iterator_tracker& __x) \n+      : _M_current(__x._M_current), _M_ds(__x._M_ds) { }\n \n-template<typename _Iterator, typename _Sequence>\n-inline bool\n-operator<=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-           const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() <= __rhs.base();\n-}\n+      template<typename _MutableIterator>\n+        __iterator_tracker(const __iterator_tracker<_MutableIterator,\n+\t\t\t   typename __gnu_cxx::__enable_if\n+\t\t\t   <(std::__are_same<_MutableIterator, typename\n+\t\t\t     _Sequence::iterator::_Base_iterator>::__value),\n+\t\t\t   _Sequence>::__type>& __x)\n+\t:  _M_current(__x.base()), _M_ds(__x._M_get_sequence()) { }\n+\n+      _Iterator\n+      base() const { return _M_current; }\n+  \n+      /**\n+       * @brief Conversion to underlying non-debug iterator to allow\n+       * better interaction with non-profile containers.\n+       */\n+      operator _Iterator() const { return _M_current; }\n+\n+      pointer\n+      operator->() const { return &*_M_current; }\n+\n+      __iterator_tracker&\n+      operator++()\n+      {\n+\t_M_ds->_M_profile_iterate();\n+\t++_M_current;\n+\treturn *this;\n+      }\n+\n+      __iterator_tracker&\n+      operator++(int)\n+      {\n+\t_M_ds->_M_profile_iterate();\n+\t__iterator_tracker __tmp(*this);\n+\t++_M_current;\n+\treturn __tmp;\n+      }\n+\n+      __iterator_tracker&\n+      operator--()\n+      {\n+\t_M_ds->_M_profile_iterate(1);\n+\t--_M_current;\n+\treturn *this;\n+      }\n+\n+      __iterator_tracker&\n+      operator--(int)\n+      {\n+\t_M_ds->_M_profile_iterate(1);\n+\t__iterator_tracker __tmp(*this);\n+\t--_M_current;\n+\treturn __tmp;\n+      }\n+\n+      __iterator_tracker&\n+      operator=(const __iterator_tracker& __x)\n+      {\n+\t_M_current = __x._M_current;\n+\treturn *this;\n+      }\n+\n+      reference\n+      operator*() const\n+      { return *_M_current; }\n+\n+      // ------ Random access iterator requirements ------\n+      reference\n+      operator[](const difference_type& __n) const \n+      { return _M_current[__n]; }\n+\n+      __iterator_tracker&\n+      operator+=(const difference_type& __n)\n+      {\n+\t_M_current += __n;\n+\treturn *this;\n+      }\n+\n+      __iterator_tracker\n+      operator+(const difference_type& __n) const\n+      {\n+\t__iterator_tracker __tmp(*this);\n+\t__tmp += __n;\n+\treturn __tmp;\n+      }\n+\n+      __iterator_tracker&\n+      operator-=(const difference_type& __n)\n+      {\n+\t_M_current += -__n;\n+\treturn *this;\n+      }\n+\n+      __iterator_tracker\n+      operator-(const difference_type& __n) const\n+      {\n+\t__iterator_tracker __tmp(*this);\n+\t__tmp -= __n;\n+\treturn __tmp;\n+      }\n+\n+      void\n+      _M_find()\n+      { _M_ds->_M_profile_find(); }\n+\n+      const _Sequence*\n+      _M_get_sequence() const\n+      { return static_cast<const _Sequence*>(_M_ds); }\n+  };\n \n-template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-inline bool\n-operator>(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-          const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() > __rhs.base();\n-}\n+  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n+    inline bool\n+    operator==(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() == __rhs.base(); }\n \n-template<typename _Iterator, typename _Sequence>\n-inline bool\n-operator>(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-          const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() > __rhs.base();\n-}\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    operator==(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() == __rhs.base(); }\n \n-template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-inline bool\n-operator>=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-           const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() >= __rhs.base();\n-}\n+  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n+    inline bool\n+    operator!=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() != __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    operator!=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+               const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() != __rhs.base(); }\n \n-template<typename _Iterator, typename _Sequence>\n-inline bool\n-operator>=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-           const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() >= __rhs.base();\n-}\n+  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n+    inline bool\n+    operator<(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t      const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() < __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    operator<(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+\t      const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() < __rhs.base(); }\n \n-// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// According to the resolution of DR179 not only the various comparison\n-// operators but also operator- must accept mixed iterator/const_iterator\n-// parameters.\n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n-  inline typename __iterator_tracker<_IteratorL, _Sequence>::difference_type\n-  operator-(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n-            const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n-{\n-  return __lhs.base() - __rhs.base();\n-}\n+    inline bool\n+    operator<=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() <= __rhs.base(); }\n \n-template<typename _Iterator, typename _Sequence>\n-inline typename __iterator_tracker<_Iterator, _Sequence>::difference_type\n-operator-(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n-          const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n-{\n-  return __lhs.base() - __rhs.base();\n-}\n-\n-template<typename _Iterator, typename _Sequence>\n-inline __iterator_tracker<_Iterator, _Sequence>\n-operator+(typename __iterator_tracker<_Iterator,_Sequence>::difference_type\n-          __n,\n-          const __iterator_tracker<_Iterator, _Sequence>& __i)\n-{\n-  return __i + __n;\n-}\n-\t\t\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    operator<=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() <= __rhs.base(); }\n+\n+  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n+    inline bool\n+    operator>(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t      const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() > __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    operator>(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+\t      const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() > __rhs.base(); }\n+\n+  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n+    inline bool\n+    operator>=(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() >= __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline bool\n+    operator>=(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+\t       const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() >= __rhs.base(); }\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // According to the resolution of DR179 not only the various comparison\n+  // operators but also operator- must accept mixed iterator/const_iterator\n+  // parameters.\n+  template<typename _IteratorL, typename _IteratorR, typename _Sequence>\n+    inline typename __iterator_tracker<_IteratorL, _Sequence>::difference_type\n+    operator-(const __iterator_tracker<_IteratorL, _Sequence>& __lhs,\n+\t      const __iterator_tracker<_IteratorR, _Sequence>& __rhs)\n+    { return __lhs.base() - __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline typename __iterator_tracker<_Iterator, _Sequence>::difference_type\n+    operator-(const __iterator_tracker<_Iterator, _Sequence>& __lhs,\n+\t      const __iterator_tracker<_Iterator, _Sequence>& __rhs)\n+    { return __lhs.base() - __rhs.base(); }\n+\n+  template<typename _Iterator, typename _Sequence>\n+    inline __iterator_tracker<_Iterator, _Sequence>\n+    operator+(typename __iterator_tracker<_Iterator,_Sequence>::difference_type\n+\t      __n,\n+\t      const __iterator_tracker<_Iterator, _Sequence>& __i)\n+    { return __i + __n; }\n+\t\n }  // namespace __profile\n }  // namespace std\n #endif"}, {"sha": "8a3a8e45c8f5e9c4f8e6b6d4bb4e97c650c87791", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "patch": "@@ -71,29 +71,26 @@ namespace __profile\n       using _Base::value_compare;\n \n       // 23.3.1.1 construct/copy/destroy:\n-      explicit map(const _Compare& __comp = _Compare(),\n-\t\t   const _Allocator& __a = _Allocator())\n-      : _Base(__comp, __a) {\n-          __profcxx_map_to_unordered_map_construct(this);\n-      }\n+      explicit\n+      map(const _Compare& __comp = _Compare(),\n+\t  const _Allocator& __a = _Allocator())\n+      : _Base(__comp, __a)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n \n       template<typename _InputIterator>\n         map(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp = _Compare(),\n \t    const _Allocator& __a = _Allocator())\n-\t: _Base(__first, __last, __comp, __a) {\n-          __profcxx_map_to_unordered_map_construct(this);\n-        }\n+\t: _Base(__first, __last, __comp, __a)\n+        { __profcxx_map_to_unordered_map_construct(this); }\n \n       map(const map& __x)\n-      : _Base(__x) {\n-          __profcxx_map_to_unordered_map_construct(this);\n-      }\n+      : _Base(__x)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n \n       map(const _Base& __x)\n-      : _Base(__x) {\n-          __profcxx_map_to_unordered_map_construct(this);\n-      }\n+      : _Base(__x)\n+      { __profcxx_map_to_unordered_map_construct(this); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       map(map&& __x)\n@@ -106,9 +103,8 @@ namespace __profile\n       : _Base(__l, __c, __a) { }\n #endif\n \n-      ~map() {\n-          __profcxx_map_to_unordered_map_destruct(this);\n-      }\n+      ~map()\n+      { __profcxx_map_to_unordered_map_destruct(this); }\n \n       map&\n       operator=(const map& __x)"}]}