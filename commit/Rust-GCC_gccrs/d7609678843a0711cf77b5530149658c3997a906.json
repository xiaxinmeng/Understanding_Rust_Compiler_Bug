{"sha": "d7609678843a0711cf77b5530149658c3997a906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2MDk2Nzg4NDNhMDcxMWNmNzdiNTUzMDE0OTY1OGMzOTk3YTkwNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:25:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:25:35Z"}, "message": "[33/46] Use stmt_vec_infos instead of vec_info/gimple stmt pairs\n\nThis patch makes vect_record_max_nunits and vect_record_base_alignment\ntake a stmt_vec_info instead of a vec_info/gimple pair.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_record_base_alignment): Replace vec_info\n\tand gimple stmt arguments with a stmt_vec_info.\n\t(vect_record_base_alignments): Update calls accordingly.\n\t* tree-vect-slp.c (vect_record_max_nunits): Replace vec_info\n\tand gimple stmt arguments with a stmt_vec_info.\n\t(vect_build_slp_tree_1): Remove vinfo argument and update call\n\tto vect_record_max_nunits.\n\t(vect_build_slp_tree_2): Update calls to vect_build_slp_tree_1\n\tand vect_record_max_nunits.\n\nFrom-SVN: r263148", "tree": {"sha": "43accf7beeacb7cbe3c38566062902ee84b9ebb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43accf7beeacb7cbe3c38566062902ee84b9ebb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7609678843a0711cf77b5530149658c3997a906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7609678843a0711cf77b5530149658c3997a906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7609678843a0711cf77b5530149658c3997a906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7609678843a0711cf77b5530149658c3997a906/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32e8e429c685629fc4363138f564f41de47aa7a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e8e429c685629fc4363138f564f41de47aa7a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e8e429c685629fc4363138f564f41de47aa7a2"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "2caade9e0a3a7ecbff05ca052b2f1e73a1f3429e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7609678843a0711cf77b5530149658c3997a906/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7609678843a0711cf77b5530149658c3997a906/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7609678843a0711cf77b5530149658c3997a906", "patch": "@@ -1,3 +1,15 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_record_base_alignment): Replace vec_info\n+\tand gimple stmt arguments with a stmt_vec_info.\n+\t(vect_record_base_alignments): Update calls accordingly.\n+\t* tree-vect-slp.c (vect_record_max_nunits): Replace vec_info\n+\tand gimple stmt arguments with a stmt_vec_info.\n+\t(vect_build_slp_tree_1): Remove vinfo argument and update call\n+\tto vect_record_max_nunits.\n+\t(vect_build_slp_tree_2): Update calls to vect_build_slp_tree_1\n+\tand vect_record_max_nunits.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (nested_in_vect_loop_p): Move further down"}, {"sha": "f3cf4404bbd75c332833124f5d2dcbe0c25c9719", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7609678843a0711cf77b5530149658c3997a906/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7609678843a0711cf77b5530149658c3997a906/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=d7609678843a0711cf77b5530149658c3997a906", "patch": "@@ -794,14 +794,14 @@ vect_slp_analyze_instance_dependence (slp_instance instance)\n   return res;\n }\n \n-/* Record in VINFO the base alignment guarantee given by DRB.  STMT is\n-   the statement that contains DRB, which is useful for recording in the\n-   dump file.  */\n+/* Record the base alignment guarantee given by DRB, which occurs\n+   in STMT_INFO.  */\n \n static void\n-vect_record_base_alignment (vec_info *vinfo, gimple *stmt,\n+vect_record_base_alignment (stmt_vec_info stmt_info,\n \t\t\t    innermost_loop_behavior *drb)\n {\n+  vec_info *vinfo = stmt_info->vinfo;\n   bool existed;\n   innermost_loop_behavior *&entry\n     = vinfo->base_alignments.get_or_insert (drb->base_address, &existed);\n@@ -820,7 +820,7 @@ vect_record_base_alignment (vec_info *vinfo, gimple *stmt,\n \t\t\t   \"  misalignment: %d\\n\", drb->base_misalignment);\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t   \"  based on:     \");\n-\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 0);\n+\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt_info->stmt, 0);\n \t}\n     }\n }\n@@ -847,13 +847,13 @@ vect_record_base_alignments (vec_info *vinfo)\n \t  && STMT_VINFO_VECTORIZABLE (stmt_info)\n \t  && !STMT_VINFO_GATHER_SCATTER_P (stmt_info))\n \t{\n-\t  vect_record_base_alignment (vinfo, stmt_info, &DR_INNERMOST (dr));\n+\t  vect_record_base_alignment (stmt_info, &DR_INNERMOST (dr));\n \n \t  /* If DR is nested in the loop that is being vectorized, we can also\n \t     record the alignment of the base wrt the outer loop.  */\n \t  if (loop && nested_in_vect_loop_p (loop, stmt_info))\n \t    vect_record_base_alignment\n-\t\t(vinfo, stmt_info, &STMT_VINFO_DR_WRT_VEC_LOOP (stmt_info));\n+\t      (stmt_info, &STMT_VINFO_DR_WRT_VEC_LOOP (stmt_info));\n \t}\n     }\n }"}, {"sha": "07f10c0d2bfb6a28c66767fb83922db01f8692cf", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7609678843a0711cf77b5530149658c3997a906/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7609678843a0711cf77b5530149658c3997a906/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=d7609678843a0711cf77b5530149658c3997a906", "patch": "@@ -609,14 +609,14 @@ compatible_calls_p (gcall *call1, gcall *call2)\n }\n \n /* A subroutine of vect_build_slp_tree for checking VECTYPE, which is the\n-   caller's attempt to find the vector type in STMT with the narrowest\n+   caller's attempt to find the vector type in STMT_INFO with the narrowest\n    element type.  Return true if VECTYPE is nonnull and if it is valid\n-   for VINFO.  When returning true, update MAX_NUNITS to reflect the\n-   number of units in VECTYPE.  VINFO, GORUP_SIZE and MAX_NUNITS are\n-   as for vect_build_slp_tree.  */\n+   for STMT_INFO.  When returning true, update MAX_NUNITS to reflect the\n+   number of units in VECTYPE.  GROUP_SIZE and MAX_NUNITS are as for\n+   vect_build_slp_tree.  */\n \n static bool\n-vect_record_max_nunits (vec_info *vinfo, gimple *stmt, unsigned int group_size,\n+vect_record_max_nunits (stmt_vec_info stmt_info, unsigned int group_size,\n \t\t\ttree vectype, poly_uint64 *max_nunits)\n {\n   if (!vectype)\n@@ -625,7 +625,8 @@ vect_record_max_nunits (vec_info *vinfo, gimple *stmt, unsigned int group_size,\n \t{\n \t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t   \"Build SLP failed: unsupported data-type in \");\n-\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM, stmt, 0);\n+\t  dump_gimple_stmt (MSG_MISSED_OPTIMIZATION, TDF_SLIM,\n+\t\t\t    stmt_info->stmt, 0);\n \t  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t}\n       /* Fatal mismatch.  */\n@@ -636,7 +637,7 @@ vect_record_max_nunits (vec_info *vinfo, gimple *stmt, unsigned int group_size,\n      before adjusting *max_nunits for basic-block vectorization.  */\n   poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   unsigned HOST_WIDE_INT const_nunits;\n-  if (is_a <bb_vec_info> (vinfo)\n+  if (STMT_VINFO_BB_VINFO (stmt_info)\n       && (!nunits.is_constant (&const_nunits)\n \t  || const_nunits > group_size))\n     {\n@@ -696,7 +697,7 @@ vect_two_operations_perm_ok_p (vec<stmt_vec_info> stmts,\n    to (B1 <= A1 ? X1 : Y1); or be inverted to (A1 < B1) ? Y1 : X1.  */\n \n static bool\n-vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n+vect_build_slp_tree_1 (unsigned char *swap,\n \t\t       vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t       poly_uint64 *max_nunits, bool *matches,\n \t\t       bool *two_operators)\n@@ -763,7 +764,7 @@ vect_build_slp_tree_1 (vec_info *vinfo, unsigned char *swap,\n       if (!vect_get_vector_types_for_stmt (stmt_info, &vectype,\n \t\t\t\t\t   &nunits_vectype)\n \t  || (nunits_vectype\n-\t      && !vect_record_max_nunits (vinfo, stmt_info, group_size,\n+\t      && !vect_record_max_nunits (stmt_info, group_size,\n \t\t\t\t\t  nunits_vectype, max_nunits)))\n \t{\n \t  /* Fatal mismatch.  */\n@@ -1207,8 +1208,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n     {\n       tree scalar_type = TREE_TYPE (PHI_RESULT (stmt));\n       tree vectype = get_vectype_for_scalar_type (scalar_type);\n-      if (!vect_record_max_nunits (vinfo, stmt_info, group_size, vectype,\n-\t\t\t\t   max_nunits))\n+      if (!vect_record_max_nunits (stmt_info, group_size, vectype, max_nunits))\n \treturn NULL;\n \n       vect_def_type def_type = STMT_VINFO_DEF_TYPE (stmt_info);\n@@ -1241,7 +1241,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \n   bool two_operators = false;\n   unsigned char *swap = XALLOCAVEC (unsigned char, group_size);\n-  if (!vect_build_slp_tree_1 (vinfo, swap, stmts, group_size,\n+  if (!vect_build_slp_tree_1 (swap, stmts, group_size,\n \t\t\t      &this_max_nunits, matches, &two_operators))\n     return NULL;\n "}]}