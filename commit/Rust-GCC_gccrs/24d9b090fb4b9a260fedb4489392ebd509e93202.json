{"sha": "24d9b090fb4b9a260fedb4489392ebd509e93202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkOWIwOTBmYjRiOWEyNjBmZWRiNDQ4OTM5MmViZDUwOWU5MzIwMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-28T15:27:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-28T15:27:11Z"}, "message": "PR libstdc++/83306 make filesystem_error no-throw copyable\n\nThe class API provides no way to modify the members, so we can share\nthem between copies of the same object. Copying becomes a simple\nreference count update, which doesn't throw.\n\nAlso adjust the what() string to allow distinguishing between an empty\npath passed to the constructor, and no path.\n\n\tPR libstdc++/83306\n\t* include/bits/fs_path.h (filesystem_error): Move data members into\n\tpimpl class owned by shared_ptr. Remove inline definitions of member\n\tfunctions.\n\t* src/filesystem/std-path.cc (filesystem_error::_Impl): Define.\n\t(filesystem_error): Define member functions.\n\t* testsuite/27_io/filesystem/filesystem_error/cons.cc: New test.\n\t* testsuite/27_io/filesystem/filesystem_error/copy.cc: New test.\n\nFrom-SVN: r266565", "tree": {"sha": "7ddbccf4a6ee351ff8e14101617b9248b3e46049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ddbccf4a6ee351ff8e14101617b9248b3e46049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d9b090fb4b9a260fedb4489392ebd509e93202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d9b090fb4b9a260fedb4489392ebd509e93202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d9b090fb4b9a260fedb4489392ebd509e93202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d9b090fb4b9a260fedb4489392ebd509e93202/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b4be50093f6b2afb337bc7dded0274b46ce9b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4be50093f6b2afb337bc7dded0274b46ce9b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4be50093f6b2afb337bc7dded0274b46ce9b31"}], "stats": {"total": 354, "additions": 302, "deletions": 52}, "files": [{"sha": "fe0d1652c2ccc5f1d2fcead0da00dac2c0362516", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=24d9b090fb4b9a260fedb4489392ebd509e93202", "patch": "@@ -1,5 +1,14 @@\n 2018-11-28  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/83306\n+\t* include/bits/fs_path.h (filesystem_error): Move data members into\n+\tpimpl class owned by shared_ptr. Remove inline definitions of member\n+\tfunctions.\n+\t* src/filesystem/std-path.cc (filesystem_error::_Impl): Define.\n+\t(filesystem_error): Define member functions.\n+\t* testsuite/27_io/filesystem/filesystem_error/cons.cc: New test.\n+\t* testsuite/27_io/filesystem/filesystem_error/copy.cc: New test.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Update C++17 status.\n \t* doc/html/*: Regenerate.\n "}, {"sha": "0eee684a2f6f41c47d8c4dedbc0b203c07fd9b76", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=24d9b090fb4b9a260fedb4489392ebd509e93202", "patch": "@@ -43,6 +43,8 @@\n #include <system_error>\n #include <bits/stl_algobase.h>\n #include <bits/locale_conv.h>\n+#include <ext/concurrence.h>\n+#include <bits/shared_ptr.h>\n \n #if defined(_WIN32) && !defined(__CYGWIN__)\n # define _GLIBCXX_FILESYSTEM_IS_WINDOWS 1\n@@ -575,30 +577,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   class filesystem_error : public std::system_error\n   {\n   public:\n-    filesystem_error(const string& __what_arg, error_code __ec)\n-    : system_error(__ec, __what_arg) { }\n+    filesystem_error(const string& __what_arg, error_code __ec);\n \n     filesystem_error(const string& __what_arg, const path& __p1,\n-\t\t     error_code __ec)\n-    : system_error(__ec, __what_arg), _M_path1(__p1) { }\n+\t\t     error_code __ec);\n \n     filesystem_error(const string& __what_arg, const path& __p1,\n-\t\t     const path& __p2, error_code __ec)\n-    : system_error(__ec, __what_arg), _M_path1(__p1), _M_path2(__p2)\n-    { }\n+\t\t     const path& __p2, error_code __ec);\n+\n+    filesystem_error(const filesystem_error&) = default;\n+    filesystem_error& operator=(const filesystem_error&) = default;\n+\n+    // No move constructor or assignment operator.\n+    // Copy rvalues instead, so that _M_impl is not left empty.\n \n     ~filesystem_error();\n \n-    const path& path1() const noexcept { return _M_path1; }\n-    const path& path2() const noexcept { return _M_path2; }\n-    const char* what() const noexcept { return _M_what.c_str(); }\n+    const path& path1() const noexcept;\n+    const path& path2() const noexcept;\n+    const char* what() const noexcept;\n \n   private:\n-    std::string _M_gen_what();\n-\n-    path _M_path1;\n-    path _M_path2;\n-    std::string _M_what = _M_gen_what();\n+    struct _Impl;\n+    std::__shared_ptr<const _Impl> _M_impl;\n   };\n \n   struct path::_Cmpt : path\n@@ -1158,6 +1159,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace filesystem\n \n+extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "fb8898d904033fe99b82329147159a96f0f1cdff", "filename": "libstdc++-v3/src/filesystem/std-path.cc", "status": "modified", "additions": 71, "deletions": 37, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-path.cc?ref=24d9b090fb4b9a260fedb4489392ebd509e93202", "patch": "@@ -34,8 +34,6 @@\n namespace fs = std::filesystem;\n using fs::path;\n \n-fs::filesystem_error::~filesystem_error() = default;\n-\n constexpr path::value_type path::preferred_separator;\n \n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n@@ -741,47 +739,83 @@ fs::hash_value(const path& p) noexcept\n   return seed;\n }\n \n-namespace std\n+struct fs::filesystem_error::_Impl\n {\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-namespace filesystem\n-{\n-  string\n-  fs_err_concat(const string& __what, const string& __path1,\n-\t\t  const string& __path2)\n+  _Impl(const string& what_arg, const path& p1, const path& p2)\n+  : path1(p1), path2(p2), what(make_what(what_arg, &p1, &p2))\n+  { }\n+\n+  _Impl(const string& what_arg, const path& p1)\n+  : path1(p1), path2(), what(make_what(what_arg, &p1, nullptr))\n+  { }\n+\n+  _Impl(const string& what_arg)\n+  : what(make_what(what_arg, nullptr, nullptr))\n+  { }\n+\n+  static std::string\n+  make_what(const std::string& s, const path* p1, const path* p2)\n   {\n-    const size_t __len = 18 + __what.length()\n-      + (__path1.length() ? __path1.length() + 3 : 0)\n-      + (__path2.length() ? __path2.length() + 3 : 0);\n-    string __ret;\n-    __ret.reserve(__len);\n-    __ret = \"filesystem error: \";\n-    __ret += __what;\n-    if (!__path1.empty())\n-      {\n-\t__ret += \" [\";\n-\t__ret += __path1;\n-\t__ret += ']';\n-      }\n-    if (!__path2.empty())\n+    const std::string pstr1 = p1 ? p1->u8string() : std::string{};\n+    const std::string pstr2 = p2 ? p2->u8string() : std::string{};\n+    const size_t len = 18 + s.length()\n+      + (pstr1.length() ? pstr1.length() + 3 : 0)\n+      + (pstr2.length() ? pstr2.length() + 3 : 0);\n+    std::string w;\n+    w.reserve(len);\n+    w = \"filesystem error: \";\n+    w += s;\n+    if (p1)\n       {\n-\t__ret += \" [\";\n-\t__ret += __path2;\n-\t__ret += ']';\n+\tw += \" [\";\n+\tw += pstr1;\n+\tw += ']';\n+\tif (p2)\n+\t  {\n+\t    w += \" [\";\n+\t    w += pstr2;\n+\t    w += ']';\n+\t  }\n       }\n-    return __ret;\n+    return w;\n   }\n \n-_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  path path1;\n+  path path2;\n+  std::string what;\n+};\n \n-  std::string filesystem_error::_M_gen_what()\n-  {\n-    return fs_err_concat(system_error::what(), _M_path1.u8string(),\n-\t\t\t _M_path2.u8string());\n-  }\n+template class std::__shared_ptr<const fs::filesystem_error::_Impl>;\n+\n+fs::filesystem_error::\n+filesystem_error(const string& what_arg, error_code ec)\n+: system_error(ec, what_arg),\n+  _M_impl(std::__make_shared<_Impl>(what_arg))\n+{ }\n+\n+fs::filesystem_error::\n+filesystem_error(const string& what_arg, const path& p1, error_code ec)\n+: system_error(ec, what_arg),\n+  _M_impl(std::__make_shared<_Impl>(what_arg, p1))\n+{ }\n+\n+fs::filesystem_error::\n+filesystem_error(const string& what_arg, const path& p1, const path& p2,\n+\t\t error_code ec)\n+: system_error(ec, what_arg),\n+  _M_impl(std::__make_shared<_Impl>(what_arg, p1, p2))\n+{ }\n+\n+fs::filesystem_error::~filesystem_error() = default;\n+\n+const fs::path&\n+fs::filesystem_error::path1() const noexcept\n+{ return _M_impl->path1; }\n \n-_GLIBCXX_END_NAMESPACE_CXX11\n+const fs::path&\n+fs::filesystem_error::path2() const noexcept\n+{ return _M_impl->path2; }\n \n-} // filesystem\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // std\n+const char*\n+fs::filesystem_error::what() const noexcept\n+{ return _M_impl->what.c_str(); }"}, {"sha": "ddaaf44d1a5a8d1c5917201e7a5212c32cf7f403", "filename": "libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/cons.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcons.cc?ref=24d9b090fb4b9a260fedb4489392ebd509e93202", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+using std::filesystem::filesystem_error;\n+\n+bool contains(std::string_view what_str, std::string_view expected)\n+{\n+  return what_str.find(expected) != std::string_view::npos;\n+}\n+\n+void\n+test01()\n+{\n+  const char* const str = \"error test\";\n+  const std::error_code ec = make_error_code(std::errc::is_a_directory);\n+  const std::filesystem::path p1 = \"test/path/one\";\n+  const std::filesystem::path p2 = \"/test/path/two\";\n+\n+  const filesystem_error e1(str, ec);\n+  VERIFY( contains(e1.what(), str) );\n+  VERIFY( !contains(e1.what(), \"[]\") ); // no \"empty path\" in the string\n+  VERIFY( e1.path1().empty() );\n+  VERIFY( e1.path2().empty() );\n+  VERIFY( e1.code() == ec );\n+\n+  const filesystem_error e2(str, p1, ec);\n+  VERIFY( e2.path1() == p1 );\n+  VERIFY( e2.path2().empty() );\n+  VERIFY( contains(e2.what(), str) );\n+  VERIFY( contains(e2.what(), p1.string()) );\n+  VERIFY( !contains(e2.what(), \"[]\") );\n+  VERIFY( e2.code() == ec );\n+\n+  const filesystem_error e3(str, std::filesystem::path{}, ec);\n+  VERIFY( e3.path1().empty() );\n+  VERIFY( e3.path2().empty() );\n+  VERIFY( contains(e3.what(), str) );\n+  VERIFY( contains(e3.what(), \"[]\") );\n+  VERIFY( !contains(e3.what(), \"[] []\") );\n+  VERIFY( e3.code() == ec );\n+\n+  const filesystem_error e4(str, p1, p2, ec);\n+  VERIFY( e4.path1() == p1 );\n+  VERIFY( e4.path2() == p2 );\n+  VERIFY( contains(e4.what(), str) );\n+  VERIFY( contains(e4.what(), p1.string()) );\n+  VERIFY( contains(e4.what(), p2.string()) );\n+  VERIFY( !contains(e4.what(), \"[]\") );\n+  VERIFY( e4.code() == ec );\n+\n+  const filesystem_error e5(str, p1, std::filesystem::path{}, ec);\n+  VERIFY( e5.path1() == p1 );\n+  VERIFY( e5.path2().empty() );\n+  VERIFY( contains(e5.what(), str) );\n+  VERIFY( contains(e5.what(), p1.string()) );\n+  VERIFY( contains(e5.what(), \"[]\") );\n+  VERIFY( e5.code() == ec );\n+\n+  const filesystem_error e6(str, std::filesystem::path{}, p2, ec);\n+  VERIFY( e6.path1().empty() );\n+  VERIFY( e6.path2() == p2 );\n+  VERIFY( contains(e6.what(), str) );\n+  VERIFY( contains(e6.what(), \"[]\") );\n+  VERIFY( contains(e6.what(), p2.string()) );\n+  VERIFY( e6.code() == ec );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "f085f9d6794a99063c43bb3f57a27c8072c3dd1e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/copy.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d9b090fb4b9a260fedb4489392ebd509e93202/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcopy.cc?ref=24d9b090fb4b9a260fedb4489392ebd509e93202", "patch": "@@ -0,0 +1,111 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+using std::filesystem::filesystem_error;\n+\n+// PR libstdc++/83306\n+static_assert(std::is_nothrow_copy_constructible_v<filesystem_error>);\n+static_assert(std::is_nothrow_copy_assignable_v<filesystem_error>);\n+\n+void\n+test01()\n+{\n+  const char* const str = \"error test\";\n+  const std::error_code ec = make_error_code(std::errc::is_a_directory);\n+  const filesystem_error e1(str, ec);\n+  auto e2 = e1;\n+  VERIFY( e2.path1().empty() );\n+  VERIFY( e2.path2().empty() );\n+  VERIFY( std::string_view(e2.what()).find(str) != std::string_view::npos );\n+  VERIFY( e2.code() == ec );\n+\n+  const filesystem_error e3(str, \"test/path/one\", ec);\n+  auto e4 = e3;\n+  VERIFY( e4.path1() == \"test/path/one\" );\n+  VERIFY( e4.path2().empty() );\n+  VERIFY( std::string_view(e4.what()).find(str) != std::string_view::npos );\n+  VERIFY( e2.code() == ec );\n+\n+  const filesystem_error e5(str, \"test/path/one\", \"/test/path/two\", ec);\n+  auto e6 = e5;\n+  VERIFY( e6.path1() == \"test/path/one\" );\n+  VERIFY( e6.path2() == \"/test/path/two\" );\n+  VERIFY( std::string_view(e6.what()).find(str) != std::string_view::npos );\n+  VERIFY( e2.code() == ec );\n+}\n+\n+void\n+test02()\n+{\n+  const char* const str = \"error test\";\n+  const std::error_code ec = make_error_code(std::errc::is_a_directory);\n+  const filesystem_error e1(str, ec);\n+  filesystem_error e2(\"\", {});\n+  e2 = e1;\n+  VERIFY( e2.path1().empty() );\n+  VERIFY( e2.path2().empty() );\n+  VERIFY( std::string_view(e2.what()).find(str) != std::string_view::npos );\n+  VERIFY( e2.code() == ec );\n+\n+  const filesystem_error e3(str, \"test/path/one\", ec);\n+  filesystem_error e4(\"\", {});\n+  e4 = e3;\n+  VERIFY( e4.path1() == \"test/path/one\" );\n+  VERIFY( e4.path2().empty() );\n+  VERIFY( std::string_view(e4.what()).find(str) != std::string_view::npos );\n+  VERIFY( e2.code() == ec );\n+\n+  const filesystem_error e5(str, \"test/path/one\", \"/test/path/two\", ec);\n+  filesystem_error e6(\"\", {});\n+  e6 = e5;\n+  VERIFY( e6.path1() == \"test/path/one\" );\n+  VERIFY( e6.path2() == \"/test/path/two\" );\n+  VERIFY( std::string_view(e6.what()).find(str) != std::string_view::npos );\n+  VERIFY( e2.code() == ec );\n+}\n+\n+void\n+test03()\n+{\n+  filesystem_error e(\"test\", std::error_code());\n+  VERIFY( e.path1().empty() );\n+  VERIFY( e.path2().empty() );\n+  auto e2 = std::move(e);\n+  // Observers must still be usable on moved-from object:\n+  VERIFY( e.path1().empty() );\n+  VERIFY( e.path2().empty() );\n+  VERIFY( e.what() != nullptr );\n+  e2 = std::move(e);\n+  VERIFY( e.path1().empty() );\n+  VERIFY( e.path2().empty() );\n+  VERIFY( e.what() != nullptr );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}