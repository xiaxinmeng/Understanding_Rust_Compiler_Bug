{"sha": "071af74db674f3dc462ab8a25e091b74830fda2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxYWY3NGRiNjc0ZjNkYzQ2MmFiOGEyNWUwOTFiNzQ4MzBmZGEyZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-11-10T22:45:39Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-11-10T22:45:39Z"}, "message": "combine: Do not call simplify from inside change_zero_ext (PR78232)\n\nWhen combine splits a three-insn combination into two instructions it\ncan reuse i2dest for the temporary result of the first new instruction.\nHowever all information it has in reg_stat about that register will be\nstale.  This results in the simplify_gen_binary calls in change_zero_ext\nusing out-of-date information, which makes it think one of the ANDs\ngenerated there always results in 0, and it doesn't get better from there.\n\nThis can also happen if a splitter in the MD uses nonzero_bits (for\nexample).  I tried to make the splitting code in combine save and restore\nthe i2dest reg_stat info, but that causes one of the acats tests to fail.\n\nThis whole reg_stat thing needs an overhaul, and/or we shouldn't reuse\ni2dest for unrelated purposes when splitting.\n\nThis patch changes change_zero_ext to do the expected simplifications\nitself and not call simplify_gen_*.\n\n\n\tPR rtl-optimization/78232\n\t* combine.c (try_combine): Add a big comment about why reusing i2dest\n\tis undesirable.\n\t(change_zero_ext): Do not call simplify_gen_binary, do the\n\tsimplifications manually.\n\nFrom-SVN: r242059", "tree": {"sha": "f4dd580ff3206cc32f7ebf4f180b9306bacfe206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4dd580ff3206cc32f7ebf4f180b9306bacfe206"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/071af74db674f3dc462ab8a25e091b74830fda2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071af74db674f3dc462ab8a25e091b74830fda2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071af74db674f3dc462ab8a25e091b74830fda2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071af74db674f3dc462ab8a25e091b74830fda2d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94903212646d0b90a92afc0ca47a348ab92719c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94903212646d0b90a92afc0ca47a348ab92719c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94903212646d0b90a92afc0ca47a348ab92719c1"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "761896fe6c5da638861bebb67662e4270f11c4aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071af74db674f3dc462ab8a25e091b74830fda2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071af74db674f3dc462ab8a25e091b74830fda2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=071af74db674f3dc462ab8a25e091b74830fda2d", "patch": "@@ -1,3 +1,11 @@\n+2016-11-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/78232\n+\t* combine.c (try_combine): Add a big comment about why reusing i2dest\n+\tis undesirable.\n+\t(change_zero_ext): Do not call simplify_gen_binary, do the\n+\tsimplifications manually.\n+\n 2016-11-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): If ISA 3.0,"}, {"sha": "6ffa387a95cbbf710c5e321cd1d2c157e840d478", "filename": "gcc/combine.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071af74db674f3dc462ab8a25e091b74830fda2d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071af74db674f3dc462ab8a25e091b74830fda2d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=071af74db674f3dc462ab8a25e091b74830fda2d", "patch": "@@ -3528,6 +3528,15 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t{\n \t  machine_mode new_mode = GET_MODE (SET_DEST (newpat));\n \n+\t  /* ??? Reusing i2dest without resetting the reg_stat entry for it\n+\t     (temporarily, until we are committed to this instruction\n+\t     combination) does not work: for example, any call to nonzero_bits\n+\t     on the register (from a splitter in the MD file, for example)\n+\t     will get the old information, which is invalid.\n+\n+\t     Since nowadays we can create registers during combine just fine,\n+\t     we should just create a new one here, not reuse i2dest.  */\n+\n \t  /* First try to split using the original register as a\n \t     scratch register.  */\n \t  parallel = gen_rtx_PARALLEL (VOIDmode,\n@@ -11133,8 +11142,10 @@ change_zero_ext (rtx pat)\n \t  if (BITS_BIG_ENDIAN)\n \t    start = GET_MODE_PRECISION (mode) - size - start;\n \n-\t  x = simplify_gen_binary (LSHIFTRT, mode,\n-\t\t\t\t   XEXP (x, 0), GEN_INT (start));\n+\t  if (start)\n+\t    x = gen_rtx_LSHIFTRT (mode, XEXP (x, 0), GEN_INT (start));\n+\t  else\n+\t    x = XEXP (x, 0);\n \t}\n       else if (GET_CODE (x) == ZERO_EXTEND\n \t       && SCALAR_INT_MODE_P (mode)\n@@ -11190,16 +11201,18 @@ change_zero_ext (rtx pat)\n       if (BITS_BIG_ENDIAN)\n \toffset = reg_width - width - offset;\n \n+      rtx x, y, z, w;\n       wide_int mask = wi::shifted_mask (offset, width, true, reg_width);\n-      rtx x = gen_rtx_AND (mode, reg, immed_wide_int_const (mask, mode));\n-      rtx y = simplify_gen_binary (ASHIFT, mode, SET_SRC (pat),\n-\t\t\t\t   GEN_INT (offset));\n       wide_int mask2 = wi::shifted_mask (offset, width, false, reg_width);\n-      y = simplify_gen_binary (AND, mode, y,\n-\t\t\t       immed_wide_int_const (mask2, mode));\n-      rtx z = simplify_gen_binary (IOR, mode, x, y);\n+      x = gen_rtx_AND (mode, reg, immed_wide_int_const (mask, mode));\n+      if (offset)\n+\ty = gen_rtx_ASHIFT (mode, SET_SRC (pat), GEN_INT (offset));\n+      else\n+\ty = SET_SRC (pat);\n+      z = gen_rtx_AND (mode, y, immed_wide_int_const (mask2, mode));\n+      w = gen_rtx_IOR (mode, x, z);\n       SUBST (SET_DEST (pat), reg);\n-      SUBST (SET_SRC (pat), z);\n+      SUBST (SET_SRC (pat), w);\n \n       changed = true;\n     }"}]}