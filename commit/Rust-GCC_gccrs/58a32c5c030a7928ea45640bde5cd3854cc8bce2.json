{"sha": "58a32c5c030a7928ea45640bde5cd3854cc8bce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhMzJjNWMwMzBhNzkyOGVhNDU2NDBiZGU1Y2QzODU0Y2M4YmNlMg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-04-13T23:29:50Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-04-13T23:29:50Z"}, "message": "* expr.c (move_block_from_reg): Try using an integral mov operation first.\n\nFrom-SVN: r13897", "tree": {"sha": "eba52ea5e0ab3092ee11bd2595f7cbb3fab063c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba52ea5e0ab3092ee11bd2595f7cbb3fab063c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a32c5c030a7928ea45640bde5cd3854cc8bce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a32c5c030a7928ea45640bde5cd3854cc8bce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a32c5c030a7928ea45640bde5cd3854cc8bce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a32c5c030a7928ea45640bde5cd3854cc8bce2/comments", "author": null, "committer": null, "parents": [{"sha": "ad5780142a62bf2937d21341b3c488c9d143449f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5780142a62bf2937d21341b3c488c9d143449f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5780142a62bf2937d21341b3c488c9d143449f"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "7a855ad1475f00fa194e984f66e6196febf4a010", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a32c5c030a7928ea45640bde5cd3854cc8bce2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a32c5c030a7928ea45640bde5cd3854cc8bce2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=58a32c5c030a7928ea45640bde5cd3854cc8bce2", "patch": "@@ -1717,9 +1717,21 @@ move_block_from_reg (regno, x, nregs, size)\n {\n   int i;\n   rtx pat, last;\n+  enum machine_mode mode;\n \n+  /* If SIZE is that of a mode no bigger than a word, just use that\n+     mode's store operation.  */\n+  if (size <= UNITS_PER_WORD\n+      && (mode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0)) != BLKmode)\n+    {\n+      emit_move_insn (change_address (x, mode, NULL),\n+\t\t      gen_rtx (REG, mode, regno));\n+      return;\n+    }\n+    \n   /* Blocks smaller than a word on a BYTES_BIG_ENDIAN machine must be aligned\n-     to the left before storing to memory.  */\n+     to the left before storing to memory.  Note that the previous test\n+     doesn't handle all cases (e.g. SIZE == 3).  */\n   if (size < UNITS_PER_WORD && BYTES_BIG_ENDIAN)\n     {\n       rtx tem = operand_subword (x, 0, 1, BLKmode);"}]}