{"sha": "e57b9d65666b9440d13ebb601254a9d53f772714", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3YjlkNjU2NjZiOTQ0MGQxM2ViYjYwMTI1NGE5ZDUzZjc3MjcxNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-06-27T17:36:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-06-27T17:36:59Z"}, "message": "ia64.c (emit_insn_group_barriers): Special case epilogue_deallocate_stack.\n\n        * config/ia64/ia64.c (emit_insn_group_barriers): Special case\n        epilogue_deallocate_stack.\n\n        * config/ia64/ia64.c (ia64_print_operand) [case D]: Emit\n        completers for UNORDERED and ORDERED as well.\n        * config/ia64/ia64.md (bunordered, bordered): New.\n        (sunordered, sordered): New.\n\nFrom-SVN: r34734", "tree": {"sha": "f70edf0a3b2db01a7bccd6bd237fe3275752f90c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f70edf0a3b2db01a7bccd6bd237fe3275752f90c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e57b9d65666b9440d13ebb601254a9d53f772714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57b9d65666b9440d13ebb601254a9d53f772714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57b9d65666b9440d13ebb601254a9d53f772714", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57b9d65666b9440d13ebb601254a9d53f772714/comments", "author": null, "committer": null, "parents": [{"sha": "d4826ded629b2c343c4b12e69f20bf1a785d6e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4826ded629b2c343c4b12e69f20bf1a785d6e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4826ded629b2c343c4b12e69f20bf1a785d6e4c"}], "stats": {"total": 107, "additions": 102, "deletions": 5}, "files": [{"sha": "ce47a96b677a680bde438afaee65809bab8a221e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57b9d65666b9440d13ebb601254a9d53f772714/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57b9d65666b9440d13ebb601254a9d53f772714/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e57b9d65666b9440d13ebb601254a9d53f772714", "patch": "@@ -1,3 +1,13 @@\n+2000-06-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* config/ia64/ia64.c (emit_insn_group_barriers): Special case\n+\tepilogue_deallocate_stack.\n+\n+\t* config/ia64/ia64.c (ia64_print_operand) [case D]: Emit\n+\tcompleters for UNORDERED and ORDERED as well.\n+\t* config/ia64/ia64.md (bunordered, bordered): New.\n+\t(sunordered, sordered): New.\n+\n Tue Jun 27 12:14:12 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* genattrtab.c (write_attr_value): Do not abort for CONST_INT operands."}, {"sha": "ca6ee297d065ba96d593746af7d42684b68e84cb", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57b9d65666b9440d13ebb601254a9d53f772714/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57b9d65666b9440d13ebb601254a9d53f772714/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e57b9d65666b9440d13ebb601254a9d53f772714", "patch": "@@ -1777,6 +1777,8 @@ ia64_print_operand (file, x, code)\n      rtx    x;\n      int    code;\n {\n+  const char *str;\n+\n   switch (code)\n     {\n     case 0:\n@@ -1796,7 +1798,22 @@ ia64_print_operand (file, x, code)\n       }\n \n     case 'D':\n-      fputs (GET_CODE (x) == NE ? \"neq\" : GET_RTX_NAME (GET_CODE (x)), file);\n+      switch (GET_CODE (x))\n+\t{\n+\tcase NE:\n+\t  str = \"neq\";\n+\t  break;\n+\tcase UNORDERED:\n+\t  str = \"unord\";\n+\t  break;\n+\tcase ORDERED:\n+\t  str = \"ord\";\n+\t  break;\n+\tdefault:\n+\t  str = GET_RTX_NAME (GET_CODE (x));\n+\t  break;\n+\t}\n+      fputs (str, file);\n       return;\n \n     case 'E':\n@@ -1805,13 +1822,14 @@ ia64_print_operand (file, x, code)\n \n     case 'F':\n       if (x == CONST0_RTX (GET_MODE (x)))\n-\tfputs (reg_names [FR_REG (0)], file);\n+\tstr = reg_names [FR_REG (0)];\n       else if (x == CONST1_RTX (GET_MODE (x)))\n-\tfputs (reg_names [FR_REG (1)], file);\n+\tstr = reg_names [FR_REG (1)];\n       else if (GET_CODE (x) == REG)\n-\tfputs (reg_names [REGNO (x)], file);\n+\tstr = reg_names [REGNO (x)];\n       else\n \tabort ();\n+      fputs (str, file);\n       return;\n \n     case 'I':\n@@ -2834,8 +2852,15 @@ emit_insn_group_barriers (insns)\n \t    break;\n \t  else\n \t    {\n+\t      rtx pat = PATTERN (insn);\n+\n+\t      /* We play dependency tricks with the epilogue in order to\n+\t\t get proper schedules.  Undo this for dv analysis.  */\n+\t      if (INSN_CODE (insn) == CODE_FOR_epilogue_deallocate_stack)\n+\t\tpat = XVECEXP (pat, 0, 0);\n+\n \t      memset (rws_insn, 0, sizeof (rws_insn));\n-\t      need_barrier |= rtx_needs_barrier (PATTERN (insn), flags, 0);\n+\t      need_barrier |= rtx_needs_barrier (pat, flags, 0);\n \n \t      /* Check to see if the previous instruction was a volatile\n \t\t asm.  */"}, {"sha": "bb9c3f328407cd73b349d929d36416aaa714692d", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e57b9d65666b9440d13ebb601254a9d53f772714/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e57b9d65666b9440d13ebb601254a9d53f772714/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=e57b9d65666b9440d13ebb601254a9d53f772714", "patch": "@@ -2153,6 +2153,40 @@\n   operands[3] = ia64_compare_op1;\n }\")\n \n+(define_expand \"bunordered\"\n+  [(set (match_dup 1)\n+\t(unordered:CC (match_dup 2)\n+\t\t      (match_dup 3)))\n+   (set (pc)\n+\t(if_then_else (ne:CC (match_dup 1)\n+\t\t\t     (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  operands[1] = gen_reg_rtx (CCmode);\n+  operands[2] = ia64_compare_op0;\n+  operands[3] = ia64_compare_op1;\n+}\")\n+\n+(define_expand \"bordered\"\n+  [(set (match_dup 1)\n+\t(ordered:CC (match_dup 2)\n+\t\t      (match_dup 3)))\n+   (set (pc)\n+\t(if_then_else (ne:CC (match_dup 1)\n+\t\t\t     (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  operands[1] = gen_reg_rtx (CCmode);\n+  operands[2] = ia64_compare_op0;\n+  operands[3] = ia64_compare_op1;\n+}\")\n+\n (define_insn \"*br_true\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"predicate_operator\"\n@@ -2323,6 +2357,34 @@\n   operands[3] = ia64_compare_op1;\n }\")\n \n+(define_expand \"sunordered\"\n+  [(set (match_dup 1)\n+\t(unordered:CC (match_dup 2)\n+\t\t      (match_dup 3)))\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ne:DI (match_dup 1) (const_int 0)))]\n+  \"\"\n+  \"\n+{\n+  operands[1] = gen_reg_rtx (CCmode);\n+  operands[2] = ia64_compare_op0;\n+  operands[3] = ia64_compare_op1;\n+}\")\n+\n+(define_expand \"sordered\"\n+  [(set (match_dup 1)\n+\t(ordered:CC (match_dup 2)\n+\t\t      (match_dup 3)))\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ne:DI (match_dup 1) (const_int 0)))]\n+  \"\"\n+  \"\n+{\n+  operands[1] = gen_reg_rtx (CCmode);\n+  operands[2] = ia64_compare_op0;\n+  operands[3] = ia64_compare_op1;\n+}\")\n+\n ;; Don't allow memory as destination here, because cmov/cmov/st is more\n ;; efficient than mov/mov/cst/cst.\n "}]}