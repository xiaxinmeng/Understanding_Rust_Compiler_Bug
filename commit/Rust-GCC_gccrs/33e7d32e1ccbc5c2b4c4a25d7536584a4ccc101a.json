{"sha": "33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNlN2QzMmUxY2NiYzVjMmI0YzRhMjVkNzUzNjU4NGE0Y2NjMTAxYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:47:26Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:47:26Z"}, "message": "Change use to type-based pool allocator in\n\n\t* tree-ssa-strlen.c (new_strinfo): Use new type-based pool allocator.\n\t(free_strinfo): Likewise.\n\t(pass_strlen::execute): Likewise.\n\nFrom-SVN: r223966", "tree": {"sha": "e74d53f34740663ff3abfce1a870f483a2fdbb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e74d53f34740663ff3abfce1a870f483a2fdbb6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af6a6eec326cb37d60ed94ba19479f13685601c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6a6eec326cb37d60ed94ba19479f13685601c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6a6eec326cb37d60ed94ba19479f13685601c1"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "9f979d4048f679a501075de610c44035fdd42e7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-strlen.c (new_strinfo): Use new type-based pool allocator.\n+\t(free_strinfo): Likewise.\n+\t(pass_strlen::execute): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-sccvn.c (vn_reference_insert): Use new type-based pool allocator."}, {"sha": "26641895d4888df6d5f7e5d257153c02ff0c660c", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=33e7d32e1ccbc5c2b4c4a25d7536584a4ccc101a", "patch": "@@ -142,7 +142,7 @@ typedef struct strinfo_struct\n } *strinfo;\n \n /* Pool for allocating strinfo_struct entries.  */\n-static alloc_pool strinfo_pool;\n+static pool_allocator<strinfo_struct> strinfo_pool (\"strinfo_struct pool\", 64);\n \n /* Vector mapping positive string indexes to strinfo, for the\n    current basic block.  The first pointer in the vector is special,\n@@ -431,7 +431,7 @@ new_addr_stridx (tree exp)\n static strinfo\n new_strinfo (tree ptr, int idx, tree length)\n {\n-  strinfo si = (strinfo) pool_alloc (strinfo_pool);\n+  strinfo si = strinfo_pool.allocate ();\n   si->length = length;\n   si->ptr = ptr;\n   si->stmt = NULL;\n@@ -452,7 +452,7 @@ static inline void\n free_strinfo (strinfo si)\n {\n   if (si && --si->refcount == 0)\n-    pool_free (strinfo_pool, si);\n+    strinfo_pool.remove (si);\n }\n \n /* Set strinfo in the vector entry IDX to SI.  */\n@@ -2400,8 +2400,6 @@ pass_strlen::execute (function *fun)\n {\n   ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n   max_stridx = 1;\n-  strinfo_pool = create_alloc_pool (\"strinfo_struct pool\",\n-\t\t\t\t    sizeof (struct strinfo_struct), 64);\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n@@ -2410,7 +2408,7 @@ pass_strlen::execute (function *fun)\n   strlen_dom_walker (CDI_DOMINATORS).walk (fun->cfg->x_entry_block_ptr);\n \n   ssa_ver_to_stridx.release ();\n-  free_alloc_pool (strinfo_pool);\n+  strinfo_pool.release ();\n   if (decl_to_stridxlist_htab)\n     {\n       obstack_free (&stridx_obstack, NULL);"}]}