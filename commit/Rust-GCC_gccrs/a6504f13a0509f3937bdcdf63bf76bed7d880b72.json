{"sha": "a6504f13a0509f3937bdcdf63bf76bed7d880b72", "node_id": "C_kwDOANBUbNoAKGE2NTA0ZjEzYTA1MDlmMzkzN2JkY2RmNjNiZjc2YmVkN2Q4ODBiNzI", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-12-10T11:31:26Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-12-20T19:31:47Z"}, "message": "coroutines: Accept 'extern \"C\"' coroutines.\n\n'extern \"C\"' coroutines are permitted by the standard and expected to work\n(although constructing useful cases could be challenging). In order to\npermit this we need to arrange for the outlined helper functions to be\nnamed properly, even when no mangling is required.  To do this, we append\nthe actor and destroy suffixes in all cases.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\ngcc/cp/ChangeLog:\n\n\t* mangle.cc (write_mangled_name): Append the helper function\n\tsuffixes here...\n\t(write_encoding): ... rather than here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/torture/extern-c-coroutine.C: New test.", "tree": {"sha": "164d61bea4ad68da6ac0ba0308f8ed39a0220440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/164d61bea4ad68da6ac0ba0308f8ed39a0220440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6504f13a0509f3937bdcdf63bf76bed7d880b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6504f13a0509f3937bdcdf63bf76bed7d880b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6504f13a0509f3937bdcdf63bf76bed7d880b72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6504f13a0509f3937bdcdf63bf76bed7d880b72/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b6b7ac3314843466395c4a194aa178c80e64f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b6b7ac3314843466395c4a194aa178c80e64f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49b6b7ac3314843466395c4a194aa178c80e64f5"}], "stats": {"total": 112, "additions": 101, "deletions": 11}, "files": [{"sha": "5789adcf680f5790b3acfc8c8543ed7c4e9b4049", "filename": "gcc/cp/mangle.cc", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6504f13a0509f3937bdcdf63bf76bed7d880b72/gcc%2Fcp%2Fmangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6504f13a0509f3937bdcdf63bf76bed7d880b72/gcc%2Fcp%2Fmangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.cc?ref=a6504f13a0509f3937bdcdf63bf76bed7d880b72", "patch": "@@ -805,6 +805,18 @@ write_mangled_name (const tree decl, bool top_level)\n     write_string (\".pre\");\n   else if (DECL_IS_POST_FN_P (decl))\n     write_string (\".post\");\n+\n+  /* If this is a coroutine helper, then append an appropriate string to\n+     identify which.  */\n+  if (tree ramp = DECL_RAMP_FN (decl))\n+    {\n+      if (DECL_ACTOR_FN (ramp) == decl)\n+\twrite_string (JOIN_STR \"actor\");\n+      else if (DECL_DESTROY_FN (ramp) == decl)\n+\twrite_string (JOIN_STR \"destroy\");\n+      else\n+\tgcc_unreachable ();\n+    }\n }\n \n /* Returns true if the return type of DECL is part of its signature, and\n@@ -863,17 +875,6 @@ write_encoding (const tree decl)\n \t\t\t\tmangle_return_type_p (decl),\n \t\t\t\td);\n \n-      /* If this is a coroutine helper, then append an appropriate string to\n-\t identify which.  */\n-      if (tree ramp = DECL_RAMP_FN (decl))\n-\t{\n-\t  if (DECL_ACTOR_FN (ramp) == decl)\n-\t    write_string (JOIN_STR \"actor\");\n-\t  else if (DECL_DESTROY_FN (ramp) == decl)\n-\t    write_string (JOIN_STR \"destroy\");\n-\t  else\n-\t    gcc_unreachable ();\n-\t}\n     }\n }\n "}, {"sha": "c178a80ee4b5abe172b9140d07132461009c8c03", "filename": "gcc/testsuite/g++.dg/coroutines/torture/extern-c-coroutine.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6504f13a0509f3937bdcdf63bf76bed7d880b72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fextern-c-coroutine.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6504f13a0509f3937bdcdf63bf76bed7d880b72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fextern-c-coroutine.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fextern-c-coroutine.C?ref=a6504f13a0509f3937bdcdf63bf76bed7d880b72", "patch": "@@ -0,0 +1,89 @@\n+#include <coroutine>\n+#include <cstdio>\n+\n+#ifndef OUTPUT\n+#  define PRINT(X)\n+#  define PRINTF(X,...)\n+#else\n+#  define PRINT(X) puts(X)\n+#  define PRINTF printf\n+#endif\n+\n+struct future {\n+  struct promise_type;\n+  using handle_type = std::coroutine_handle<future::promise_type>;\n+  handle_type handle;\n+  future () : handle(0) {}\n+  future (handle_type _handle)\n+    : handle(_handle) {\n+        PRINT(\"Created future object from handle\");\n+  }\n+  future (const future &) = delete; // no copying\n+  future (future &&s) : handle(s.handle) {\n+\ts.handle = nullptr;\n+\tPRINT(\"future mv ctor \");\n+  }\n+  future &operator = (future &&s) {\n+\thandle = s.handle;\n+\ts.handle = nullptr;\n+\tPRINT(\"future op=  \");\n+\treturn *this;\n+  }\n+  ~future() {\n+        PRINT(\"Destroyed future\");\n+        if ( handle )\n+          handle.destroy();\n+  }\n+\n+  struct promise_type {\n+    void return_value (int v) {\n+      PRINTF (\"return_value (%d)\\n\", v);\n+      vv = v;\n+    }\n+\n+    std::suspend_always initial_suspend() noexcept { return {}; }\n+    std::suspend_always final_suspend() noexcept { return {}; }\n+    void unhandled_exception() {}\n+    auto get_return_object() {return handle_type::from_promise (*this);}\n+    \n+    int get_value () { return vv; }\n+  private:\n+    int vv;\n+  };\n+  bool await_ready() { return false; }\n+  void await_suspend(std::coroutine_handle<>) {}\n+  void await_resume() {}\n+};\n+\n+extern \"C\" future\n+test () {\n+  co_return 22;\n+}\n+\n+extern \"C\" future\n+f () noexcept\n+{\n+  PRINT (\"future: about to return\");\n+  co_return 42;\n+}\n+\n+int main ()\n+{\n+  PRINT (\"main: create future\");\n+  future x = f ();\n+  PRINT (\"main: got future - resuming\");\n+  if (x.handle.done())\n+    __builtin_abort ();\n+  x.handle.resume();\n+  PRINT (\"main: after resume\");\n+  int y = x.handle.promise().get_value();\n+  if ( y != 42 )\n+    __builtin_abort ();\n+  if (!x.handle.done())\n+    {\n+      PRINT (\"main: apparently not done...\");\n+      __builtin_abort ();\n+    }\n+  PRINT (\"main: returning\");\n+  return 0;\n+}"}]}