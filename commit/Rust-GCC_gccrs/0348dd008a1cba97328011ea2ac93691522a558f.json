{"sha": "0348dd008a1cba97328011ea2ac93691522a558f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0OGRkMDA4YTFjYmE5NzMyODAxMWVhMmFjOTM2OTE1MjJhNTU4Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-27T12:01:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-27T12:01:49Z"}, "message": "Define std::filesystem::path::format enum (P0430R2)\n\n\t* include/bits/fs_path.h (path::format): Define new enumeration type.\n\t(path(string_type&&), path<Source>(const Source&))\n\t(path<InputIterator>(InputIterator, InputIterator))\n\t(path<Source>(const Source&, const locale&))\n\t(path<InputIterator>(InputIterator, InputIterator, const locale&)):\n\tAdd format parameter.\n\t* testsuite/27_io/filesystem/path/construct/format.cc: New test.\n\nFrom-SVN: r254144", "tree": {"sha": "e453bf34346834a8780cb54ab9df22fd8ca63c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e453bf34346834a8780cb54ab9df22fd8ca63c14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0348dd008a1cba97328011ea2ac93691522a558f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0348dd008a1cba97328011ea2ac93691522a558f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0348dd008a1cba97328011ea2ac93691522a558f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0348dd008a1cba97328011ea2ac93691522a558f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e7db041f0eb98fae437ab2519eeac06dbb5999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e7db041f0eb98fae437ab2519eeac06dbb5999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e7db041f0eb98fae437ab2519eeac06dbb5999"}], "stats": {"total": 137, "additions": 132, "deletions": 5}, "files": [{"sha": "ea6b509577eb344d75bf79120646ca2f57960ec9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0348dd008a1cba97328011ea2ac93691522a558f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0348dd008a1cba97328011ea2ac93691522a558f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0348dd008a1cba97328011ea2ac93691522a558f", "patch": "@@ -1,5 +1,13 @@\n 2017-10-27  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/fs_path.h (path::format): Define new enumeration type.\n+\t(path(string_type&&), path<Source>(const Source&))\n+\t(path<InputIterator>(InputIterator, InputIterator))\n+\t(path<Source>(const Source&, const locale&))\n+\t(path<InputIterator>(InputIterator, InputIterator, const locale&)):\n+\tAdd format parameter.\n+\t* testsuite/27_io/filesystem/path/construct/format.cc: New test.\n+\n \t* include/bits/stl_algo.h (__find_if_not_n, generate_n): Cast to void\n \tto ensure overloaded comma not used.\n \t* include/bits/stl_algobase.h (__fill_n_a, equal): Likewise."}, {"sha": "7d97cdfbb81ef580b98f10348a974ae102b2885c", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0348dd008a1cba97328011ea2ac93691522a558f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0348dd008a1cba97328011ea2ac93691522a558f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=0348dd008a1cba97328011ea2ac93691522a558f", "patch": "@@ -156,6 +156,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n     typedef std::basic_string<value_type>\tstring_type;\n \n+    enum format { native_format, generic_format, auto_format };\n+\n     // constructors and destructor\n \n     path() noexcept { }\n@@ -169,35 +171,36 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       __p.clear();\n     }\n \n-    path(string_type&& __source)\n+    path(string_type&& __source, format = auto_format)\n     : _M_pathname(std::move(__source))\n     { _M_split_cmpts(); }\n \n     template<typename _Source,\n \t     typename _Require = _Path<_Source>>\n-      path(_Source const& __source)\n+      path(_Source const& __source, format = auto_format)\n       : _M_pathname(_S_convert(_S_range_begin(__source),\n \t\t\t       _S_range_end(__source)))\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n \t     typename _Require = _Path<_InputIterator, _InputIterator>>\n-      path(_InputIterator __first, _InputIterator __last)\n+      path(_InputIterator __first, _InputIterator __last, format = auto_format)\n       : _M_pathname(_S_convert(__first, __last))\n       { _M_split_cmpts(); }\n \n     template<typename _Source,\n \t     typename _Require = _Path<_Source>,\n \t     typename _Require2 = __value_type_is_char<_Source>>\n-      path(_Source const& __source, const locale& __loc)\n+      path(_Source const& __source, const locale& __loc, format = auto_format)\n       : _M_pathname(_S_convert_loc(_S_range_begin(__source),\n \t\t\t\t   _S_range_end(__source), __loc))\n       { _M_split_cmpts(); }\n \n     template<typename _InputIterator,\n \t     typename _Require = _Path<_InputIterator, _InputIterator>,\n \t     typename _Require2 = __value_type_is_char<_InputIterator>>\n-      path(_InputIterator __first, _InputIterator __last, const locale& __loc)\n+      path(_InputIterator __first, _InputIterator __last, const locale& __loc,\n+\t   format = auto_format)\n       : _M_pathname(_S_convert_loc(__first, __last, __loc))\n       { _M_split_cmpts(); }\n "}, {"sha": "e7ed19cafe9dd0d34f3748d743a09c33dd6aeaba", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/construct/format.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0348dd008a1cba97328011ea2ac93691522a558f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0348dd008a1cba97328011ea2ac93691522a558f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fconstruct%2Fformat.cc?ref=0348dd008a1cba97328011ea2ac93691522a558f", "patch": "@@ -0,0 +1,116 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <filesystem>\n+#include <testsuite_hooks.h>\n+\n+using std::filesystem::path;\n+\n+void\n+test01()\n+{\n+  auto s = [&]() -> path::string_type { return \"foo/bar\"; };\n+  path p0(s());\n+  path p1(s(), path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(s(), path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(s(), path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test02()\n+{\n+  path::string_type s = \"foo/bar\";\n+  path p0(s);\n+  path p1(s, path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(s, path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(s, path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test03()\n+{\n+  const char* s = \"foo/bar\";\n+  path p0(s);\n+  path p1(s, path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(s, path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(s, path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test04()\n+{\n+  const char s[] = \"foo/bar\";\n+  path p0(std::begin(s), std::end(s));\n+  path p1(std::begin(s), std::end(s), path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(std::begin(s), std::end(s), path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(std::begin(s), std::end(s), path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test05()\n+{\n+  const char* s = \"foo/bar\";\n+  std::locale loc;\n+  path p0(s, loc);\n+  path p1(s, loc, path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(s, loc, path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(s, loc, path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+void\n+test06()\n+{\n+  const char s[] = \"foo/bar\";\n+  std::locale loc;\n+  path p0(std::begin(s), std::end(s), loc);\n+  path p1(std::begin(s), std::end(s), loc, path::auto_format);\n+  VERIFY( p1 == p0 );\n+  path p2(std::begin(s), std::end(s), loc, path::native_format);\n+  VERIFY( p2 == p0 );\n+  path p3(std::begin(s), std::end(s), loc, path::generic_format);\n+  VERIFY( p3 == p0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+}"}]}