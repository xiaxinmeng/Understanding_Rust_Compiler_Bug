{"sha": "3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IyNDg4Y2E2ZWNlMTgyZjIxMzZhMjBlZTVmYTBiYjkyZjkzNWIwZg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-07-30T19:24:02Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-07-30T19:24:02Z"}, "message": "func-vararg-alternate-d128-2.c: New.\n\n2008-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Joey Ye  <joey.ye@intel.com>\n\n\t* gcc.dg/dfp/func-vararg-alternate-d128-2.c: New.\n\t* gcc.dg/dfp/func-vararg-mixed-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/alloca-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/builtin-apply-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/builtin-apply-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/builtin-apply-4.c: Likewise.\n\t* gcc.dg/torture/stackalign/builtin-return-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/check.h: Likewise.\n\t* gcc.dg/torture/stackalign/comp-goto-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/fastcall-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/global-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/inline-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/inline-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/nested-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/nested-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/nested-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/nested-4.c: Likewise.\n\t* gcc.dg/torture/stackalign/nested-5.c: Likewise.\n\t* gcc.dg/torture/stackalign/nested-6.c: Likewise.\n\t* gcc.dg/torture/stackalign/non-local-goto-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/non-local-goto-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/non-local-goto-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/non-local-goto-4.c: Likewise.\n\t* gcc.dg/torture/stackalign/non-local-goto-5.c: Likewise.\n\t* gcc.dg/torture/stackalign/pr16660-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/pr16660-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/pr16660-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/regparm-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/ret-struct-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/setjmp-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/setjmp-2.c: Likewise.\n\t* gcc.dg/torture/stackalign/setjmp-3.c: Likewise.\n\t* gcc.dg/torture/stackalign/setjmp-4.c: Likewise.\n\t* gcc.dg/torture/stackalign/sibcall-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/stackalign.exp: Likewise.\n\t* gcc.dg/torture/stackalign/struct-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/vararg-1.c: Likewise.\n\t* gcc.dg/torture/stackalign/vararg-2.c: Likewise.\n\t* gcc.target/i386/align-main-1.c: Likewise.\n\t* gcc.target/i386/align-main-2.c: Likewise.\n\t* gcc.target/i386/pr32000-2.c: Likewise.\n\t* gcc.target/i386/stackalign/asm-1.c: Likewise.\n\t* gcc.target/i386/stackalign/return-1.c: Likewise.\n\t* gcc.target/i386/stackalign/return-2.c: Likewise.\n\t* gcc.target/i386/stackalign/return-3.c: Likewise.\n\t* gcc.target/i386/stackalign/return-4.c: Likewise.\n\t* gcc.target/i386/stackalign/return-5.c: Likewise.\n\t* gcc.target/i386/stackalign/return-6.c: Likewise.\n\t* gcc.target/i386/stackalign/stackalign.exp: Likewise.\n\t* g++.dg/torture/stackalign/check.h: Likewise.\n\t* g++.dg/torture/stackalign/eh-alloca-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-fastcall-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-global-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-inline-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-inline-2.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-vararg-1.C: Likewise.\n\t* g++.dg/torture/stackalign/eh-vararg-2.C: Likewise.\n\t* g++.dg/torture/stackalign/stackalign.exp: Likewise.\n\t* g++.dg/torture/stackalign/stdcall-1.C: Likewise.\n\t* g++.dg/torture/stackalign/test-unwind.h: Likewise.\n\t* g++.dg/torture/stackalign/throw-1.C: Likewise.\n\t* g++.dg/torture/stackalign/throw-2.C: Likewise.\n\t* g++.dg/torture/stackalign/throw-3.C: Likewise.\n\t* g++.dg/torture/stackalign/throw-4.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-0.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-1.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-2.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-3.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-4.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-5.C: Likewise.\n\t* g++.dg/torture/stackalign/unwind-6.C: Likewise.\n\n\t* gcc.target/i386/20060512-1.c: Add -mpreferred-stack-boundary=4.\n\t(main): Move \"popl\" after check.\n\t* gcc.target/i386/20060512-3.c: Likewise.\n\n\t* gcc.target/i386/20060512-2.c: Add -mpreferred-stack-boundary=4.\n\tRemove dg-error.\n\n\t* gcc.target/i386/20060512-4.c: Add -mpreferred-stack-boundary=4.\n\tRemove dg-warning.\n\n\t* lib/target-supports.exp (check_effective_target_unaligned_stack):\n\tAlways return 0.\n\t(check_effective_target_automatic_stack_alignment): New.\n\nCo-Authored-By: Joey Ye <joey.ye@intel.com>\n\nFrom-SVN: r138336", "tree": {"sha": "0bf9678f2841a89de2991818fa345b90ea12378d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf9678f2841a89de2991818fa345b90ea12378d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e3f842fe69ce4e74cfe18493429b807af271083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3f842fe69ce4e74cfe18493429b807af271083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3f842fe69ce4e74cfe18493429b807af271083"}], "stats": {"total": 2840, "additions": 2828, "deletions": 12}, "files": [{"sha": "ab4b945f30d490612279a2e4e2cc2d99c0490df9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -1,3 +1,93 @@\n+2008-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Joey Ye  <joey.ye@intel.com>\n+\n+\t* gcc.dg/dfp/func-vararg-alternate-d128-2.c: New.\n+\t* gcc.dg/dfp/func-vararg-mixed-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/alloca-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-apply-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-apply-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-apply-4.c: Likewise.\n+\t* gcc.dg/torture/stackalign/builtin-return-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/check.h: Likewise.\n+\t* gcc.dg/torture/stackalign/comp-goto-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/fastcall-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/global-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/inline-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/inline-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/nested-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/nested-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/nested-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/nested-4.c: Likewise.\n+\t* gcc.dg/torture/stackalign/nested-5.c: Likewise.\n+\t* gcc.dg/torture/stackalign/nested-6.c: Likewise.\n+\t* gcc.dg/torture/stackalign/non-local-goto-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/non-local-goto-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/non-local-goto-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/non-local-goto-4.c: Likewise.\n+\t* gcc.dg/torture/stackalign/non-local-goto-5.c: Likewise.\n+\t* gcc.dg/torture/stackalign/pr16660-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/pr16660-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/pr16660-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/regparm-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/ret-struct-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/setjmp-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/setjmp-2.c: Likewise.\n+\t* gcc.dg/torture/stackalign/setjmp-3.c: Likewise.\n+\t* gcc.dg/torture/stackalign/setjmp-4.c: Likewise.\n+\t* gcc.dg/torture/stackalign/sibcall-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/stackalign.exp: Likewise.\n+\t* gcc.dg/torture/stackalign/struct-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/vararg-1.c: Likewise.\n+\t* gcc.dg/torture/stackalign/vararg-2.c: Likewise.\n+\t* gcc.target/i386/align-main-1.c: Likewise.\n+\t* gcc.target/i386/align-main-2.c: Likewise.\n+\t* gcc.target/i386/pr32000-2.c: Likewise.\n+\t* gcc.target/i386/stackalign/asm-1.c: Likewise.\n+\t* gcc.target/i386/stackalign/return-1.c: Likewise.\n+\t* gcc.target/i386/stackalign/return-2.c: Likewise.\n+\t* gcc.target/i386/stackalign/return-3.c: Likewise.\n+\t* gcc.target/i386/stackalign/return-4.c: Likewise.\n+\t* gcc.target/i386/stackalign/return-5.c: Likewise.\n+\t* gcc.target/i386/stackalign/return-6.c: Likewise.\n+\t* gcc.target/i386/stackalign/stackalign.exp: Likewise.\n+\t* g++.dg/torture/stackalign/check.h: Likewise.\n+\t* g++.dg/torture/stackalign/eh-alloca-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-fastcall-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-global-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-inline-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-inline-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-vararg-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/eh-vararg-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/stackalign.exp: Likewise.\n+\t* g++.dg/torture/stackalign/stdcall-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/test-unwind.h: Likewise.\n+\t* g++.dg/torture/stackalign/throw-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/throw-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/throw-3.C: Likewise.\n+\t* g++.dg/torture/stackalign/throw-4.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-0.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-1.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-2.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-3.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-4.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-5.C: Likewise.\n+\t* g++.dg/torture/stackalign/unwind-6.C: Likewise.\n+\n+\t* gcc.target/i386/20060512-1.c: Add -mpreferred-stack-boundary=4.\n+\t(main): Move \"popl\" after check.\n+\t* gcc.target/i386/20060512-3.c: Likewise.\n+\n+\t* gcc.target/i386/20060512-2.c: Add -mpreferred-stack-boundary=4.\n+\tRemove dg-error.\n+\n+\t* gcc.target/i386/20060512-4.c: Add -mpreferred-stack-boundary=4.\n+\tRemove dg-warning.\n+\n+\t* lib/target-supports.exp (check_effective_target_unaligned_stack):\n+\tAlways return 0.\n+\t(check_effective_target_automatic_stack_alignment): New.\n+\n 2008-07-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36967"}, {"sha": "af1988512740960e1e1f9c2a751aa6e0e8331b60", "filename": "gcc/testsuite/g++.dg/torture/stackalign/check.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fcheck.h?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,36 @@\n+#include <stddef.h>\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#ifdef  __cplusplus\n+extern \"C\" void abort (void);\n+#else\n+extern void abort (void);\n+#endif\n+\n+int\n+check_int (int *i, int align)\n+{\n+  *i = 20;\n+  if ((((ptrdiff_t) i) & (align - 1)) != 0)\n+    {\n+#ifdef DEBUG\n+      printf (\"\\nUnalign address (%d): %p!\\n\", align, i);\n+#endif\n+      abort ();\n+    }\n+  return *i;\n+}\n+\n+void\n+check (void *p, int align)\n+{\n+  if ((((ptrdiff_t) p) & (align - 1)) != 0)\n+    {\n+#ifdef DEBUG\n+      printf (\"\\nUnalign address (%d): %p!\\n\", align, p);\n+#endif\n+      abort ();\n+    }\n+}"}, {"sha": "a20f074bcd20b8b74939283e6edda1fd922fbf41", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-alloca-1.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-alloca-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-alloca-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-alloca-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+void\n+foo (int size) throw (B,A)\n+{\n+  char *p = (char*) __builtin_alloca (size + 1);\n+  aligned i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  throw A();\n+}\n+\n+int\n+main()\n+{\n+  try {\tfoo (5); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "4b849a2e42e63300cd1a14f659696365158a00f7", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-fastcall-1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-fastcall-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-fastcall-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-fastcall-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+__attribute__ ((fastcall))\n+void\n+foo (int j, int k, int m, int n, int o) throw (B,A)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  if (i != 20 || j != 1 || k != 2 || m != 3 || n != 4 || o != 5)\n+    abort ();\n+\n+  throw A();\n+}\n+\n+int\n+main()\n+{\n+  try { foo (1, 2, 3, 4, 5); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "2692f947c7bb046fb50f8a3d1d748e7c6c34eb27", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-global-1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-global-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-global-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-global-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+void\n+foo (void) throw (B,A)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  throw A();\n+}\n+\n+int\n+main()\n+{\n+  try {\tfoo (); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "72ac7fd24431ea37cb7596e114094a2f5e31c1b4", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-inline-1.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+static void\n+inline __attribute__((always_inline))\n+foo (void) throw (B,A)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+  throw A();\n+}\n+\n+int\n+main()\n+{\n+  try {\tfoo (); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "4feb3f09fc7c8e589142ad3844fc54d0432cdcc8", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-inline-2.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-inline-2.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+static void\n+inline __attribute__((always_inline))\n+foo (int size) throw (B,A)\n+{\n+  char *p = (char *) __builtin_alloca (size + 1);\n+  aligned i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  throw A();\n+}\n+\n+int\n+main()\n+{\n+  try {\tfoo (5); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "74b48faa599383adaede113634fd6483a4049975", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-vararg-1.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+\n+#include <stdarg.h>\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+void\n+foo (const char *fmt, ...) throw (B,A)\n+{\n+  va_list arg;\n+  char *p;\n+  aligned i;\n+  int size;\n+  double x;\n+\n+  va_start (arg, fmt);\n+  size = va_arg (arg, int);\n+  if (size != 5)\n+    abort ();\n+  p = (char *) __builtin_alloca (size + 1);\n+\n+  x = va_arg (arg, double);\n+  if (x != 5.0)\n+    abort ();\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  throw A();\n+\n+  va_end (arg);\n+}\n+\n+int\n+main()\n+{\n+  try {\tfoo (\"foo\", 5, 5.0); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "719c839a74857610e33e0ffd5816ddeac2917e22", "filename": "gcc/testsuite/g++.dg/torture/stackalign/eh-vararg-2.C", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Feh-vararg-2.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+\n+#include <stdarg.h>\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+class Base {};\n+\n+struct A : virtual public Base\n+{\n+  A() {}\n+};\n+\n+struct B {};\n+\n+void\n+test (va_list arg) throw (B,A)\n+{\n+  char *p;\n+  aligned i;\n+  int size;\n+  double x;\n+\n+  size = va_arg (arg, int);\n+  if (size != 5)\n+    abort ();\n+\n+  p = (char *) __builtin_alloca (size + 1);\n+\n+  x = va_arg (arg, double);\n+  if (x != 5.0)\n+    abort ();\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  throw A();\n+}\n+\n+void\n+foo (const char *fmt, ...)\n+{\n+  va_list arg;\n+  va_start (arg, fmt);\n+  test (arg);\n+  va_end (arg);\n+}\n+int\n+main()\n+{\n+  try {\tfoo (\"foo\", 5, 5.0); }\n+  catch (A& a) { }\n+  return 0;\n+}"}, {"sha": "bfa413eab483bca6a4ed0fb6e4f2912094b97639", "filename": "gcc/testsuite/g++.dg/torture/stackalign/stackalign.exp", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstackalign.exp?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,39 @@\n+# Copyright (C) 2008\n+# Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib g++-dg.exp\n+\n+# Only run on targets which support automatic stack alignment.\n+if { ![check_effective_target_automatic_stack_alignment] } then {\n+    return\n+}\n+\n+set additional_flags \"\"\n+if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+    lappend additional_flags \"-mstackrealign\"\n+    lappend additional_flags \"-mpreferred-stack-boundary=5\"\n+}\n+\n+dg-init\n+gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.C]] $additional_flags\n+if { [check_effective_target_fpic] } then {\n+    lappend additional_flags \"-fpic\"\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.C]] $additional_flags\n+}\n+dg-finish"}, {"sha": "393b37e7b6b9e74fa4ace8ccccf7b82f6de6dce5", "filename": "gcc/testsuite/g++.dg/torture/stackalign/stdcall-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstdcall-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstdcall-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fstdcall-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target { { i?86-*-* x86_64-*-* } && ilp32 } } }\n+\n+// This case is to detect an assertion failure in stack branch development.\n+\n+bool f();\n+struct S {\n+    __attribute__ ((stdcall)) ~S();\n+};\n+void g() {\n+    for (;;) {\n+        S s1, s2, s3;\n+        if (f())\n+            continue;\n+        if (f())\n+            return;\n+    }\n+}"}, {"sha": "e6493ffedb2c5aaf253fd0ac0d148fc5db1f5394", "filename": "gcc/testsuite/g++.dg/torture/stackalign/test-unwind.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Ftest-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Ftest-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Ftest-unwind.h?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,132 @@\n+#include \"check.h\"\n+\n+#ifdef  __cplusplus\n+extern \"C\" void abort (void);\n+#else\n+extern void abort (void);\n+#endif\n+\n+extern void foo(void);\n+\n+#define INIT_EDI 1\n+#define INIT_ESI 2\n+#define INIT_EBX 3\n+\n+/* Set DI/SI/BX to wrong value\n+   Use following template so that RA will save/restore callee\n+   save registers in prologue/epilogue */\n+#define ALTER_REGS() \\\n+  { \\\n+        int dummy;      \\\n+        __asm__  __volatile__ (\\\n+        \"movl %1, %0\" : \"=D\" (dummy) : \"i\" (-INIT_EDI)\\\n+        );\\\n+        __asm__  __volatile__ (\\\n+        \"movl %1, %0\" : \"=S\" (dummy) : \"i\" (-INIT_ESI)\\\n+        );\\\n+        __asm__  __volatile__ (\\\n+        \"movl %1, %0\" : \"=b\" (dummy) : \"i\" (-INIT_EBX)\\\n+        );\\\n+  }\n+\n+#ifdef __PIC__\n+int\n+main ()\n+{\n+  return 0;\n+}\n+#else\n+void __attribute__ ((noinline))\n+copy (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+int g_edi=INIT_EDI, g_esi=INIT_ESI, g_ebx=INIT_EBX; \n+int g_ebp, g_ebp_save, g_esp, g_esp_save;\n+int n_error;\n+\n+int\n+main()\n+{\n+        int dummy;\n+\t// Init registers to correct value.\n+        // Use following template so that RA will save/restore callee\n+\t// save registers in prologue/epilogue\n+\t__asm__  __volatile__ (\n+\t\"movl %1, %0\"\n+\t: \"=D\" (dummy)\n+\t: \"i\" (INIT_EDI)\n+\t);\n+\t__asm__  __volatile__ (\n+\t\"movl %1, %0\"\n+\t: \"=S\" (dummy)\n+\t: \"i\" (INIT_ESI)\n+\t);\n+\t__asm__  __volatile__ (\n+\t\"movl %1, %0\"\n+\t: \"=b\" (dummy)\n+\t: \"i\" (INIT_EBX)\n+\t);\n+\t__asm__ __volatile__ (\n+\t\"movl %ebp, g_ebp_save\\n\\t\"\n+\t\"movl %esp, g_esp_save\\n\\t\"\n+\t);\n+\ttry {\n+\t\tfoo();\n+\t}\n+\tcatch (...)\n+\t{\n+\t}\n+\n+\t// Get DI/SI/BX register value after exception caught\n+\t__asm__ __volatile__ (\n+\t\"movl %edi, g_edi\\n\\t\"\n+\t\"movl %esi, g_esi\\n\\t\"\n+\t\"movl %ebx, g_ebx\\n\\t\"\n+\t\"movl %ebp, g_ebp\\n\\t\"\n+\t\"movl %esp, g_esp\\n\\t\"\n+\t);\n+\n+\t// Check if DI/SI/BX register value are the same as before calling\n+        // foo.\n+\tif (g_edi != INIT_EDI)\n+\t{\n+\t\tn_error++;\n+#ifdef DEBUG\n+\t\tprintf(\"edi=%d, correct value:%d\\n\", g_edi, INIT_EDI);\n+#endif\n+\t}\n+\tif (g_esi != INIT_ESI)\n+\t{\n+\t\tn_error++;\n+#ifdef DEBUG\n+\t\tprintf(\"esi=%d, correct value:%d\\n\", g_esi, INIT_ESI);\n+#endif\n+\t}\n+\tif (g_ebx != INIT_EBX)\n+\t{\n+\t\tn_error++;\n+#ifdef DEBUG\n+\t\tprintf(\"ebx=%d, correct value:%d\\n\", g_ebx, INIT_EBX);\n+#endif\n+\t}\n+\tif (g_ebp != g_ebp_save)\n+\t{\n+\t\tn_error++;\n+#ifdef DEBUG\n+\t\tprintf(\"ebp=0x%x, correct value:0x%x\\n\", g_ebp, g_ebp_save);\n+#endif\n+\t}\n+\tif (g_esp != g_esp_save)\n+\t{\n+\t\tn_error++;\n+#ifdef DEBUG\n+\t\tprintf(\"esp=0x%x, correct value:0x%x\\n\", g_esp, g_esp_save);\n+#endif\n+\t}\n+\tif (n_error !=0)\n+\t\tabort();\n+\treturn 0;\n+}\n+#endif"}, {"sha": "b1d2e2789535a0700dc73ba1d52859ccfd2b958b", "filename": "gcc/testsuite/g++.dg/torture/stackalign/throw-1.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT       64\n+#endif\n+\n+typedef int t_align __attribute__((aligned(ALIGNMENT)));\n+\n+\n+int global, global2;\n+void bar()\n+{\n+\tvolatile t_align a = 1;\n+        int i,j,k,l,m,n;\n+        i=j=k=0;\n+  \tfor (i=0; i < global; i++)\n+\t  for (j=0; j < i; j++)\n+\t  for (k=0; k < j; k++)\n+\t  for (l=0; l < k; l++)\n+\t  for (m=0; m < l; m++)\n+\t  for (n=0; n < m; n++)\n+     \t\tglobal2 = k;\n+\tif (check_int ((int *) &a,  __alignof__(a)) != a)\n+\t  abort ();\n+\tthrow 0;\n+}\n+\n+void foo()\n+{\n+\tbar();\n+}\n+\n+int main()\n+{\n+\tint ll = 1;\n+        int i = 0,j = 1,k = 2,l = 3,m = 4,n = 5;\n+\ttry {\n+  \t  for (; i < global; i++)\n+\t  for (; j < i; j++)\n+\t  for (; k < j; k++)\n+\t  for (; l < k; l++)\n+\t  for (; m < l; m++)\n+\t  for (; n < m; n++)\n+     \t\tglobal2 = k;\n+\t  foo();\n+\t}\n+\tcatch (...)\n+\t{\n+\t}\n+\tll = i+j+k+l+m+n;\n+\tif (ll != 15)\n+\t{\n+#ifdef DEBUG\n+\t\tprintf(\"FAIL: sum %d != 15\\n\", ll);\n+#endif\n+\t\tabort();\n+\t}\n+\treturn 0;\n+}"}, {"sha": "5f3f1dc073705ecd841da36be86726bce8e47e38", "filename": "gcc/testsuite/g++.dg/torture/stackalign/throw-2.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-2.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT       64\n+#endif\n+\n+typedef int t_align __attribute__((aligned(ALIGNMENT)));\n+\n+\n+int global, global2;\n+void bar()\n+{\n+\tvolatile t_align a = 1;\n+        int i,j,k;\n+        i=j=k=0;\n+  \tfor (i=0; i < global; i++)\n+\t  for (j=0; j < i; j++)\n+     \t\tglobal2 = k;\n+\tif (check_int ((int *) &a,  __alignof__(a)) != a)\n+\t  abort ();\n+\tthrow 0;\n+}\n+\n+int main()\n+{\n+\tint ll = 1;\n+        int i = 0,j = 1,k = 2,l = 3,m = 4,n = 5;\n+\ttry {\n+  \t  for (; i < global; i++)\n+\t  for (; j < i; j++)\n+\t  for (; k < j; k++)\n+\t  for (; l < k; l++)\n+\t  for (; m < l; m++)\n+\t  for (; n < m; n++)\n+     \t\tglobal2 = k;\n+\t  bar ();\n+\t}\n+\tcatch (...)\n+\t{\n+\t}\n+\tll = i+j+k+l+m+n;\n+\tif (ll != 15)\n+\t{\n+#ifdef DEBUG\n+\t\tprintf(\"FAIL: sum %d != 15\\n\", ll);\n+#endif\n+\t\tabort();\n+\t}\n+\treturn 0;\n+}"}, {"sha": "d3e53b8292df356b2847801ef9b1e642a4a62069", "filename": "gcc/testsuite/g++.dg/torture/stackalign/throw-3.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-3.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT       64\n+#endif\n+\n+typedef int t_align __attribute__((aligned(ALIGNMENT)));\n+\n+\n+int global, global2;\n+void bar()\n+{\n+\tvolatile t_align a = 1;\n+        int i,j,k;\n+        i=j=k=0;\n+  \tfor (i=0; i < global; i++)\n+\t  for (j=0; j < i; j++)\n+     \t\tglobal2 = k;\n+\tthrow 0;\n+\tif (check_int ((int *) &a,  __alignof__(a)) != a)\n+\t  abort ();\n+}\n+\n+int main()\n+{\n+\tint ll = 1;\n+        int i = 0,j = 1,k = 2,l = 3,m = 4,n = 5;\n+\ttry {\n+  \t  for (; i < global; i++)\n+\t  for (; j < i; j++)\n+\t  for (; k < j; k++)\n+\t  for (; l < k; l++)\n+\t  for (; m < l; m++)\n+\t  for (; n < m; n++)\n+     \t\tglobal2 = k;\n+\t  bar ();\n+\t}\n+\tcatch (...)\n+\t{\n+\t}\n+\tll = i+j+k+l+m+n;\n+\tif (ll != 15)\n+\t{\n+#ifdef DEBUG\n+\t\tprintf(\"FAIL: sum %d != 15\\n\", ll);\n+#endif\n+\t\tabort();\n+\t}\n+\treturn 0;\n+}"}, {"sha": "a9c15bd43c9a4ee53b83b8931463bfe0ba601fa0", "filename": "gcc/testsuite/g++.dg/torture/stackalign/throw-4.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Fthrow-4.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT       64\n+#endif\n+\n+typedef int t_align __attribute__((aligned(ALIGNMENT)));\n+\n+\n+int global, global2;\n+void bar()\n+{\n+\tvolatile t_align a = 1;\n+        int i,j,k;\n+        i=j=k=0;\n+  \tfor (i=0; i < global; i++)\n+\t  for (j=0; j < i; j++)\n+\t    {\n+\t      global2 = k;\n+\t      throw 0;\n+\t    }\n+\tif (check_int ((int *) &a,  __alignof__(a)) != a)\n+\t  abort ();\n+}\n+\n+int main()\n+{\n+\tint ll = 1;\n+        int i = 0,j = 1,k = 2,l = 3,m = 4,n = 5;\n+\ttry {\n+  \t  for (; i < global; i++)\n+\t  for (; j < i; j++)\n+\t  for (; k < j; k++)\n+\t  for (; l < k; l++)\n+\t  for (; m < l; m++)\n+\t  for (; n < m; n++)\n+     \t\tglobal2 = k;\n+\t  bar ();\n+\t}\n+\tcatch (...)\n+\t{\n+\t}\n+\tll = i+j+k+l+m+n;\n+\tif (ll != 15)\n+\t{\n+#ifdef DEBUG\n+\t\tprintf(\"FAIL: sum %d != 15\\n\", ll);\n+#endif\n+\t\tabort();\n+\t}\n+\treturn 0;\n+}"}, {"sha": "546123bdd0e98301914f8f142849091d988b8fdc", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-0.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-0.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+void __attribute__ ((noinline)) foo()\n+{\n+        ALTER_REGS();\n+        // Throw the except and expect returning to main\n+        throw 1;\n+}\n+#endif"}, {"sha": "3b809642ab73824c58090ac3fbcaa8919589a2c5", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-1.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+/* Test situation 1: Stack really realign without DRAP */\n+void __attribute__ ((noinline))\n+foo ()\n+{\n+  int __attribute__ ((aligned(64))) a=1;\n+  if (check_int (&a,  __alignof__(a)) != a)\n+    abort ();\n+  ALTER_REGS();\n+  throw a;\n+}\n+#endif"}, {"sha": "1569ed84b7d1b42924fa260bbe82dd6dd99a4526", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-2.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-2.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+/* Test situation 2: stack really realign with DRAP reg CX */\n+void __attribute__ ((noinline))\n+foo ()\n+{\n+  int __attribute__ ((aligned(64))) a=4;\n+  char * s = (char *) __builtin_alloca (a + 1);\n+\n+  copy (s, a);\n+  if (__builtin_strncmp (s, \"good\", a) != 0)\n+    {\n+#ifdef DEBUG\n+      s[a] = '\\0';\n+      printf (\"Failed: %s != good\\n\", s);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&a,  __alignof__(a)) != a)\n+    abort ();\n+\n+  ALTER_REGS();\n+  throw a;\n+}\n+#endif"}, {"sha": "48eddaf5565e8f9a0ec8bcbedc1feae10bb57b47", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-3.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-3.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+/* Test situation 3: Stack realign really happen with DRAP reg DI */\n+void __attribute__ ((noinline)) __attribute__ ((regparm(3))) \n+bar (int arg1, int arg2, int arg3)\n+{\n+  int __attribute__ ((aligned(64))) a=1;\n+  char * s = (char *) __builtin_alloca (arg3 + 1);\n+\n+  copy (s, arg3);\n+  if (__builtin_strncmp (s, \"good\", arg3) != 0)\n+    {\n+#ifdef DEBUG\n+      s[arg3] = '\\0';\n+      printf (\"Failed: %s != good\\n\", s);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&a,  __alignof__(a)) != a)\n+    abort ();\n+\n+  ALTER_REGS();\n+  throw arg1+arg2+arg3+a;\n+}\n+\n+void\n+foo()\n+{\n+  bar (1,2,3);\n+}\n+#endif"}, {"sha": "dacbd3dede98b6a974fcfbae57ac7a383ce4ac13", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-4.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+volatile int __attribute__ ((aligned(32))) g_a=1;\n+/* Test situation 4: no Drap and stack realign doesn't really happen */\n+void __attribute__ ((noinline))\n+foo()\n+{\n+\tint i;\n+\tALTER_REGS();\n+\tfor (i=0; i < 10; i++)\n+\t\tg_a++;\n+\tthrow g_a;\n+}\n+#endif"}, {"sha": "fde430bfb72a55e57101e55bb426486df0684fdf", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-5.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-5.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+double g_f=1.0;\n+/* Test situation 5: Stack realign dosn't really happen with DRAP reg CX */\n+void __attribute__ ((noinline)) __attribute__ ((regparm(2))) \n+bar(int arg1, int arg2, int arg3, int arg4)\n+{\n+  char * s = (char *) __builtin_alloca (arg4 + 1);\n+\n+  copy (s, arg4);\n+  if (__builtin_strncmp (s, \"good\", arg4) != 0)\n+    {\n+#ifdef DEBUG\n+      s[arg4] = '\\0';\n+      printf (\"Failed: %s != good\\n\", s);\n+#endif\n+      abort ();\n+    }\n+  ALTER_REGS();\n+  if (g_f) throw arg1+arg2+arg3+ g_f;\n+}\n+\n+void __attribute__((noinline))\n+foo()\n+{\n+  bar(1,2,3,4);\n+}\n+#endif"}, {"sha": "7c9dee13338199fb72dca62346b6b77c5dbfe5e7", "filename": "gcc/testsuite/g++.dg/torture/stackalign/unwind-6.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fstackalign%2Funwind-6.C?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"test-unwind.h\"\n+\n+#ifndef __PIC__\n+double g_f=1.0;\n+/* Test situation 6: Stack realign dosn't really happen with DRAP reg DI */\n+void __attribute__ ((noinline)) __attribute__ ((regparm(3))) \n+bar(int arg1, int arg2, int arg3, int arg4)\n+{\n+  char * s = (char *) __builtin_alloca (arg4 + 1);\n+\n+  copy (s, arg4);\n+  if (__builtin_strncmp (s, \"good\", arg4) != 0)\n+    {\n+#ifdef DEBUG\n+      s[arg4] = '\\0';\n+      printf (\"Failed: %s != good\\n\", s);\n+#endif\n+      abort ();\n+    }\n+  ALTER_REGS();\n+  if (g_f) throw arg1+arg2+arg3+ g_f;\n+}\n+\n+void __attribute__((noinline))\n+foo()\n+{\n+  bar(1,2,3,4);\n+}\n+#endif"}, {"sha": "167da24b8898d432c610c030640fb904a3e0dfec", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d128-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-std=gnu99 -mpreferred-stack-boundary=2\" } */\n+\n+/* Simple test of vararg passing for problematic types with and without\n+   double values passed between them.  */\n+\n+#define DTYPE _Decimal128\n+#define ONE 1.0dl\n+#define THREE 3.0dl\n+#define SEVEN 7.0dl\n+#define ELEVEN 11.0dl\n+#define INTS 4\n+\n+#include \"func-vararg-alternate.h\"\n+\n+int\n+main ()\n+{\n+  doit ();\n+  return 0;\n+}"}, {"sha": "c1b349c672872dab693911ff4ad4a8cfad18707a", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-mixed-2.c", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,118 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-std=gnu99 -mpreferred-stack-boundary=2\" } */\n+\n+/* C99 6.5.2.2 Function calls.\n+   Test passing varargs of the combination of decimal float types and\n+   other types.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+static int failcnt = 0;\n+                                                                                \n+/* Support compiling the test to report individual failures; default is\n+   to abort as soon as a check fails.  */\n+#ifdef DBG\n+#include <stdio.h>\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n+#else\n+#define FAILURE abort ();\n+#endif\n+\n+/* Supposing the list of varying number of arguments is:\n+   unsigned int, _Decimal128, double, _Decimal32, _Decimal64.  */\n+\n+static _Decimal32\n+vararg_d32 (unsigned arg, ...)\n+{\n+  va_list ap;\n+  _Decimal32 result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  va_arg (ap, _Decimal128);\n+  va_arg (ap, double);\n+  result = va_arg (ap, _Decimal32);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static _Decimal32\n+vararg_d64 (unsigned arg, ...)\n+{\n+  va_list ap;\n+  _Decimal64 result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  va_arg (ap, _Decimal128);\n+  va_arg (ap, double);\n+  va_arg (ap, _Decimal32);\n+  result = va_arg (ap, _Decimal64);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static _Decimal128\n+vararg_d128 (unsigned arg, ...)\n+{\n+  va_list ap;\n+  _Decimal128 result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  result = va_arg (ap, _Decimal128);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static unsigned int\n+vararg_int (unsigned arg, ...)\n+{\n+  va_list ap;\n+  unsigned int result;\n+\n+  va_start (ap, arg);\n+\n+  result = va_arg (ap, unsigned int);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+static double\n+vararg_double (unsigned arg, ...)\n+{\n+  va_list ap;\n+  float result;\n+\n+  va_start (ap, arg);\n+\n+  va_arg (ap, unsigned int);\n+  va_arg (ap, _Decimal128);\n+  result = va_arg (ap, double);\n+\n+  va_end (ap);\n+  return result;\n+}\n+\n+\n+int\n+main ()\n+{\n+  if (vararg_d32 (3, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 3.0df) FAILURE\n+  if (vararg_d64 (4, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 4.0dd) FAILURE\n+  if (vararg_d128 (1, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 1.0dl) FAILURE\n+  if (vararg_int (0, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 0) FAILURE\n+  if (vararg_double (2, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 2.0) FAILURE\n+\n+  if (failcnt != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1370f63c292b25631b0ab70bd961e954009004f5", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/alloca-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Falloca-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+foo (int size)\n+{\n+  char *p = __builtin_alloca (size + 1);\n+  aligned i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo (5);\n+  return 0;\n+}"}, {"sha": "38b384e7ccaa762830096bb6868cabfb582aec71", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,9 @@\n+/* PR 11184 */\n+/* Origin:  Dara Hazeghi <dhazeghi@yahoo.com> */\n+\n+void *\n+objc_msg_sendv (char * arg_frame, void (*foo)())\n+{\n+  return __builtin_apply ( foo, arg_frame, 4);\n+}\n+"}, {"sha": "a1ba20fce531e34db487e929070b8473263b5a2f", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/12503 */\n+/* Origin: <pierre.nguyen-tuong@asim.lip6.fr> */\n+\n+/* Verify that __builtin_apply behaves correctly on targets\n+   with pre-pushed arguments (e.g. SPARC).  */\n+\n+/* { dg-do run } */\n+   \n+\n+#define INTEGER_ARG  5\n+\n+extern void abort(void);\n+\n+void foo(char *name, double d, double e, double f, int g)\n+{\n+  if (g != INTEGER_ARG)\n+    abort();\n+}\n+\n+void bar(char *name, ...)\n+{\n+  __builtin_apply(foo, __builtin_apply_args(), 64);\n+}\n+\n+int main(void)\n+{\n+  bar(\"eeee\", 5.444567, 8.90765, 4.567789, INTEGER_ARG);\n+\n+  return 0;\n+}"}, {"sha": "1335d09022a9d6518301591cb77d3ccbf1f202fe", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,31 @@\n+/* PR middle-end/12210 */\n+/* Origin: Ossadchy Yury A. <waspcoder@mail.ru> */\n+\n+/* This used to fail on i686 because the argument was not copied\n+   to the right location by __builtin_apply after the direct call.  */\n+\n+/* { dg-do run } */\n+\n+\n+#define INTEGER_ARG  5\n+\n+extern void abort(void);\n+\n+void foo(int arg)\n+{\n+  if (arg != INTEGER_ARG)\n+    abort();\n+}\n+\n+void bar(int arg)\n+{\n+  foo(arg);\n+  __builtin_apply(foo, __builtin_apply_args(), 16);\n+}\n+\n+int main(void)\n+{\n+  bar(INTEGER_ARG);\n+\n+  return 0;\n+}"}, {"sha": "28dc6106d074e97819eb44468d6f9b2be2db14a5", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-4.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/20076 */\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+double\n+foo (int arg)\n+{\n+  if (arg != 116)\n+    abort();\n+  return arg + 1;\n+}\n+\n+inline double\n+bar (int arg)\n+{\n+  foo (arg);\n+  __builtin_return (__builtin_apply ((void (*) ()) foo,\n+\t\t\t\t     __builtin_apply_args (), 16));\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (bar (116) != 117.0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "75c9acdf72a581ba88c155c1238a1d2bd99b7509", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-return-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-return-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,34 @@\n+/* PR middle-end/11151 */\n+/* Originator: Andrew Church <gcczilla@achurch.org> */\n+/* { dg-do run } */\n+\n+/* This used to fail on SPARC because the (undefined) return\n+   value of 'bar' was overwriting that of 'foo'.  */\n+\n+extern void abort(void);\n+\n+int foo(int n)\n+{\n+  return n+1;\n+}\n+\n+int bar(int n)\n+{\n+  __builtin_return(__builtin_apply((void (*)(void))foo, __builtin_apply_args(), 64));\n+}\n+\n+char *g;\n+\n+int main(void)\n+{\n+  /* Allocate 64 bytes on the stack to make sure that __builtin_apply\n+     can read at least 64 bytes above the return address.  */\n+  char dummy[64];\n+\n+  g = dummy;\n+\n+  if (bar(1) != 2)\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "af1988512740960e1e1f9c2a751aa6e0e8331b60", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/check.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fcheck.h?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,36 @@\n+#include <stddef.h>\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#ifdef  __cplusplus\n+extern \"C\" void abort (void);\n+#else\n+extern void abort (void);\n+#endif\n+\n+int\n+check_int (int *i, int align)\n+{\n+  *i = 20;\n+  if ((((ptrdiff_t) i) & (align - 1)) != 0)\n+    {\n+#ifdef DEBUG\n+      printf (\"\\nUnalign address (%d): %p!\\n\", align, i);\n+#endif\n+      abort ();\n+    }\n+  return *i;\n+}\n+\n+void\n+check (void *p, int align)\n+{\n+  if ((((ptrdiff_t) p) & (align - 1)) != 0)\n+    {\n+#ifdef DEBUG\n+      printf (\"\\nUnalign address (%d): %p!\\n\", align, p);\n+#endif\n+      abort ();\n+    }\n+}"}, {"sha": "7558f01e2e85f2f729fb021b15a6a6f841426966", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/comp-goto-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fcomp-goto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fcomp-goto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fcomp-goto-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+\n+#ifdef STACK_SIZE\n+#define DEPTH ((STACK_SIZE) / 512 + 1)\n+#else\n+#define DEPTH 1000\n+#endif\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#if ! defined (NO_LABEL_VALUES) && !defined (NO_TRAMPOLINES)\n+int\n+x(a)\n+{\n+  __label__ xlab;\n+  void y(a)\n+    {\n+      void *x = &&llab;\n+      if (a==-1)\n+\tgoto *x;\n+      if (a==0)\n+\tgoto xlab;\n+    llab:\n+      y (a-1);\n+    }\n+  y (a);\n+ xlab:;\n+  return a;\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+#if ! defined (NO_LABEL_VALUES) && !defined (NO_TRAMPOLINES)\n+  if (x (DEPTH) != DEPTH)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "d1cda10103b4af3914ec9d3dad900eee2ab6d1e7", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/fastcall-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Ffastcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Ffastcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Ffastcall-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+__attribute__ ((fastcall))\n+void\n+foo (int j, int k, int m, int n, int o)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+\n+  if (i != 20 || j != 1 || k != 2 || m != 3 || n != 4 || o != 5)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo (1, 2, 3, 4, 5);\n+  return 0;\n+}"}, {"sha": "284daad0eafe59f7b4f67a33f7a72bf39784bd99", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/global-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fglobal-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fglobal-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fglobal-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+foo (void)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "11e71c60a4cfff1572350aefc6e87e73a4272b59", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/inline-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Finline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Finline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Finline-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+static void\n+inline __attribute__((always_inline))\n+foo (void)\n+{\n+  aligned i;\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "fd51b5f7110931be3b2bd91269131a827a222c91", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/inline-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Finline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Finline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Finline-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+static void\n+inline __attribute__((always_inline))\n+foo (int size)\n+{\n+  char *p = __builtin_alloca (size + 1);\n+  aligned i;\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo (5);\n+  return 0;\n+}"}, {"sha": "4e2c8729af02c871d962929004b4c5089ab31432", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/nested-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+foo (void)\n+{\n+  aligned j;\n+\n+  void bar ()\n+    {\n+      aligned i;\n+\n+      if (check_int (&i,  __alignof__(i)) != i)\n+\tabort ();\n+\n+      if (check_int (&j,  __alignof__(j)) != j)\n+\tabort ();\n+\n+      j = -20;\n+    }\n+  bar ();\n+\n+  if (j != -20)\n+    abort ();\n+\n+  if (check_int (&j,  __alignof__(j)) != j)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "d54e3b92c9f8598c4e319ae78ca0656fd9495a53", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/nested-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+foo (void)\n+{\n+  aligned j;\n+\n+   __attribute__ ((__noinline__))\n+  void bar ()\n+    {\n+      aligned i;\n+\n+      if (check_int (&i,  __alignof__(i)) != i)\n+\tabort ();\n+\n+      if (check_int (&j,  __alignof__(j)) != j)\n+\tabort ();\n+\n+      j = -20;\n+    }\n+  bar ();\n+\n+  if (j != -20)\n+    abort ();\n+\n+  if (check_int (&j,  __alignof__(j)) != j)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "373299185a840847313879347c24aedb659a89f8", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/nested-3.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+copy (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+foo (int size)\n+{\n+  aligned j;\n+\n+   __attribute__ ((__noinline__))\n+  void bar (int size)\n+    {\n+      char *p = __builtin_alloca (size + 1);\n+      aligned i;\n+\n+      copy (p, size);\n+      if (strncmp (p, \"good\", size) != 0)\n+\t{\n+#ifdef DEBUG\n+\t  p[size] = '\\0';\n+\t  printf (\"Failed: %s != good\\n\", p);\n+#endif\n+\t  abort ();\n+\t}\n+\n+      if (check_int (&i,  __alignof__(i)) != i)\n+\tabort ();\n+\n+      if (check_int (&j,  __alignof__(j)) != j)\n+\tabort ();\n+\n+      j = -20;\n+    }\n+  bar (size);\n+\n+  if (j != -20)\n+    abort ();\n+\n+  if (check_int (&j,  __alignof__(j)) != j)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo (5);\n+  return 0;\n+}"}, {"sha": "60322fc62b67d38a785821116fdf485a08c14d4c", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/nested-4.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-4.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int n;\n+\n+void\n+g (void)\n+{\n+  __label__ lab;\n+  void h (void)\n+    {\n+      aligned t;\n+      if (check_int (&t,  __alignof__(t)) != t)\n+\tabort ();\n+      if (n+t == 0) goto lab;\n+    }\n+  h();\n+lab:\n+  return;\n+}\n+\n+int main()\n+{\n+  g();\n+  return 0;\n+}"}, {"sha": "95eba0482f671a4df9b38ed098f3b2c8dd43caf4", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/nested-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-5.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#ifndef NO_TRAMPOLINES\n+static void recursive (int n, void (*proc) (void))\n+{\n+  __label__ l1;\n+\n+  void do_goto (void)\n+  {\n+    goto l1;\n+  }\n+\n+  if (n == 3)\n+      recursive (n - 1, do_goto);\n+  else if (n > 0)\n+    recursive (n - 1, proc);\n+  else\n+    (*proc) ();\n+  return;\n+\n+l1:\n+  if (n == 3)\n+    exit (0);\n+  else\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  recursive (10, abort);\n+  abort ();\n+}\n+#else\n+int main () { return 0; }\n+#endif"}, {"sha": "d853825feb75cd36fd55c484f3d70e25d4a3fd92", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/nested-6.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnested-6.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+#ifndef NO_TRAMPOLINES\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern void exit (int);\n+extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));\n+\n+int main ()\n+{\n+  __label__ nonlocal;\n+  int compare (const void *a, const void *b)\n+  {\n+    goto nonlocal;\n+  }\n+\n+  char array[3];\n+  qsort (array, 3, 1, compare);\n+  abort ();\n+\n+ nonlocal:\n+  exit (0);\n+}\n+\n+#else\n+int main() { return 0; }\n+#endif"}, {"sha": "263d4486cf72cc2ec742a6a49302b2529b6f47ca", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/non-local-goto-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+int global;\n+\n+static void foo(void) __attribute__((noinline));\n+\n+static void foo(void)\n+{\n+  global = 1;\n+}\n+\n+static void bar(void)\n+{\n+  foo ();\n+}\n+\n+int execute(int cmd)\n+{\n+  __label__ start;\n+\n+  void raise(void)\n+  {\n+    goto start;\n+  }\n+\n+  int last = -1;\n+\n+  bar ();\n+\n+  last = 0;\n+\n+start:\n+\n+  if (last == 0)\n+    while (1)\n+      {\n+        last = 1;\n+        raise ();\n+      }\n+\n+  if (last == 0)\n+    return 0;\n+  else\n+    return cmd;\n+}\n+\n+int main(void)\n+{\n+  if (execute (1) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "5a64d5419649fbde4e5830e8c7b8d6ea5d3c6d99", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/non-local-goto-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+int global;\n+\n+static void foo(void) __attribute__((noinline));\n+\n+static void foo(void)\n+{\n+  global = 1;\n+}\n+\n+static void bar(void)\n+{\n+  foo ();\n+  global = 0;\n+}\n+\n+int execute(int cmd)\n+{\n+  __label__ start;\n+\n+  void raise(void)\n+  {\n+    goto start;\n+  }\n+\n+  int last = -1;\n+\n+  bar ();\n+\n+  last = 0;\n+\n+start:\n+\n+  if (last == 0)\n+    while (1)\n+      {\n+        last = 1;\n+        raise ();\n+      }\n+\n+  if (last == 0)\n+    return 0;\n+  else\n+    return cmd;\n+}\n+\n+int main(void)\n+{\n+  if (execute (1) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "3afc8cc6a313bdffd0da3287ee6501ea17e3c8a0", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/non-local-goto-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+\n+#ifndef NO_TRAMPOLINES\n+extern void abort (void);\n+\n+int x(int a, int b)\n+{\n+  __label__ xlab;\n+\n+  void y(int b)\n+    {\n+       switch (b)\n+        {\n+          case 1: goto xlab;\n+          case 2: goto xlab;\n+        }\n+    }\n+\n+  a = a + 2;\n+  y (b);\n+\n+ xlab:\n+  return a;\n+}\n+\n+int main ()\n+{\n+  int i, j;\n+\n+  for (j = 1; j <= 2; ++j)\n+    for (i = 1; i <= 2; ++i)\n+      {\n+\tint a = x (j, i);\n+\tif (a != 2 + j)\n+\t  abort ();\n+      }\n+\n+  return 0;\n+}\n+#else\n+int main() { return 0; }\n+#endif"}, {"sha": "3673f1ac337803dfc3585532a00beaa9babfe6f8", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/non-local-goto-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-4.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#ifdef STACK_SIZE\n+#define DEPTH ((STACK_SIZE) / 512 + 1)\n+#else\n+#define DEPTH 1000\n+#endif\n+\n+#if ! defined (NO_LABEL_VALUES) && !defined (NO_TRAMPOLINES)\n+int\n+\n+x(a)\n+{\n+  __label__ xlab;\n+  void y(a)\n+    {\n+      if (a==0)\n+\tgoto xlab;\n+      y (a-1);\n+    }\n+  y (a);\n+ xlab:;\n+  return a;\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+#if ! defined (NO_LABEL_VALUES) && !defined (NO_TRAMPOLINES)\n+  if (x (DEPTH) != DEPTH)\n+    abort ();\n+#endif\n+  exit (0);\n+}"}, {"sha": "08ca95d765cf9be5f46c79c3f5eebda95a446f8e", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/non-local-goto-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fnon-local-goto-5.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+#if !defined (NO_LABEL_VALUES) && !defined (NO_TRAMPOLINES)\n+extern void abort (void);\n+extern void exit (int);\n+int s(i){if(i>0){__label__ l1;int f(int i){if(i==2)goto l1;return 0;}return f(i);l1:;}return 1;}\n+int x(){return s(0)==1&&s(1)==0&&s(2)==1;}\n+int main(){if(x()!=1)abort();exit(0);}\n+#else\n+int main(){ exit (0); }\n+#endif"}, {"sha": "b68c3d07ec151799a00c9d9aaadd48f7c5128066", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/pr16660-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+\n+void\n+f ()\n+{\n+  unsigned long tmp[4] __attribute__((aligned(16)));\n+  asm(\"movaps %%xmm0, (%0)\" : : \"r\" (tmp) : \"memory\");\n+}\n+\n+int\n+main()\n+{\n+  f();\n+  return 0;\n+}"}, {"sha": "9a039eb2bf50f33c8258fc45d9e45a0807ed5749", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/pr16660-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+#define ALIGNMENT 256\n+int main(void)\n+{\n+  int a[ALIGNMENT/sizeof(int)] __attribute__((aligned(ALIGNMENT)));\n+  check (&a, ALIGNMENT);\n+  return 0;\n+}"}, {"sha": "1c1ddd1dd74c48e0ba84baf2a4bf0fddc1bc245c", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/pr16660-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fpr16660-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+#define ALIGNMENT 256\n+int main(void)\n+{\n+  int a[ALIGNMENT/sizeof(int)] __attribute__((aligned(ALIGNMENT)));\n+  check (&a, ALIGNMENT);\n+  int b[ALIGNMENT/sizeof(int)] __attribute__((aligned(ALIGNMENT)));\n+  check (&b, ALIGNMENT);\n+  return 0;\n+}"}, {"sha": "9dac024cc1b36eed6fb76f717a0fc354c101694f", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/regparm-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fregparm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fregparm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fregparm-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int test_nested (int i)\n+{\n+  aligned y;\n+\n+  int __attribute__ ((__noinline__, __regparm__(2))) foo (int j, int k, int l)\n+  {\n+    aligned x;\n+\n+    if (check_int (&x,  __alignof__(x)) != x)\n+      abort ();\n+\n+    if (x != 20)\n+      abort ();\n+\n+    return i + j + k + l;\n+  }\n+\n+  if (check_int (&y,  __alignof__(y)) != y)\n+    abort ();\n+\n+  if (y != 20)\n+    abort ();\n+\n+  return foo(i, i+1, i+2) * i;\n+}\n+\n+int __attribute__ ((__noinline__, __regparm__(3), __force_align_arg_pointer__))\n+test_realigned (int j, int k, int l)\n+{\n+  aligned y;\n+\n+  if (check_int (&y,  __alignof__(y)) != y)\n+    abort ();\n+\n+  if (y != 20)\n+    abort ();\n+\n+  return j + k + l;\n+}\n+\n+int main ()\n+{\n+  if (test_nested(10) != 430)\n+    abort ();\n+\n+  if (test_realigned(10, 11, 12) != 33)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "163e54c5908f6019e75239b5fd7be86509e4a28d", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/ret-struct-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fret-struct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fret-struct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fret-struct-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT       64\n+#endif\n+\n+extern void abort();\n+typedef struct my_struct\n+{\n+\tchar str[31];\n+} stype ;\n+\n+stype g_s;\n+\n+stype __attribute__((noinline))\n+foo (char arg1, char arg2, char arg3)\n+{\n+\tstype __attribute__((aligned(ALIGNMENT))) s;\n+\ts.str[0] = arg1;\n+\ts.str[1] = arg2;\n+\ts.str[30] = arg3;\n+\tcheck(&s, ALIGNMENT);\n+\treturn s;\n+}\n+\n+int main()\n+{\n+\tg_s = foo(1,2,3);\n+\n+\tif (g_s.str[0] != 1 || g_s.str[1] != 2 || g_s.str[30] !=3)\n+\t  abort();\n+\treturn 0;\n+}"}, {"sha": "6ab67e395fbe923e9753c2c2df982a74b097f9a1", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/setjmp-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+\n+extern int strcmp(const char *, const char *);\n+extern char *strcpy(char *, const char *);\n+extern void abort(void);\n+extern void exit(int);\n+\n+void *buf[20];\n+\n+void __attribute__((noinline))\n+sub2 (void)\n+{\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+int\n+main ()\n+{\n+  char *p = 0;\n+  \n+  p = (char *) __builtin_alloca (20);\n+\n+  strcpy (p, \"test\");\n+\n+  if (__builtin_setjmp (buf))\n+    {\n+      if (strcmp (p, \"test\") != 0)\n+\tabort ();\n+\n+      exit (0);\n+    }\n+\n+  {\n+    int *q = (int *) __builtin_alloca (p[2] * sizeof (int));\n+    int i;\n+    \n+    for (i = 0; i < p[2]; i++)\n+      q[i] = 0;\n+\n+    while (1)\n+      sub2 ();\n+  }\n+}"}, {"sha": "c93ffa8673e02d32aa416b5830dfb14d9bfd6dce", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/setjmp-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+\n+#include <setjmp.h>\n+#include <signal.h>\n+\n+#ifndef NULL\n+#define NULL ((void *)0)\n+#endif\n+static jmp_buf segv_jmpbuf;\n+\n+static void segv_handler(int seg)\n+{\n+   __builtin_longjmp(segv_jmpbuf, 1);\n+}\n+\n+static int is_addressable(void *p, size_t size)\n+{\n+   volatile char * volatile cp = (volatile char *)p;\n+   volatile int ret;\n+   struct sigaction sa, origsa;\n+   sigset_t mask;\n+   \n+   sa.sa_handler = segv_handler;\n+   sa.sa_flags = 0;\n+   sigfillset(&sa.sa_mask);\n+   sigaction(SIGSEGV, &sa, &origsa);\n+   sigprocmask(SIG_SETMASK, NULL, &mask);\n+\n+   if (__builtin_setjmp(segv_jmpbuf) == 0) {\n+      while(size--)\n+\t *cp++;\n+      ret = 1;\n+    } else\n+      ret = 0;\n+\n+   sigaction(SIGSEGV, &origsa, NULL);\n+   sigprocmask(SIG_SETMASK, &mask, NULL);\n+\n+   return ret;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+   is_addressable(0x0, 1);\n+   return 0;\n+}"}, {"sha": "fee0d281ffaef91bb001a4441fdc6e6a61613d49", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/setjmp-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+\n+#include <setjmp.h>\n+\n+extern void abort (void);\n+\n+jmp_buf buf;\n+\n+void raise0(void)\n+{\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+int execute(int cmd)\n+{\n+  int last = 0;\n+\n+  if (__builtin_setjmp (buf) == 0)\n+    while (1)\n+      {\n+\tlast = 1;\n+\traise0 ();\n+      }\n+\n+  if (last == 0)\n+    return 0;\n+  else\n+    return cmd;\n+}\n+\n+int main(void)\n+{\n+  if (execute (1) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "d1671223adb020d048842c15482247777eaae81c", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/setjmp-4.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsetjmp-4.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+#include <setjmp.h>\n+\n+extern void abort (void);\n+\n+jmp_buf buf;\n+\n+void raise0(void)\n+{\n+  __builtin_longjmp (buf, 1);\n+}\n+\n+int execute(int cmd)\n+{\n+  int last = 0;\n+\n+  __builtin_setjmp (buf);\n+\n+  if (last == 0)\n+    while (1)\n+      {\n+\tlast = 1;\n+\traise0 ();\n+      }\n+\n+  if (last == 0)\n+    return 0;\n+  else\n+    return cmd;\n+}\n+\n+int main(void)\n+{\n+  if (execute (1) == 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "8c174758fc1e497909f1927d4f6df2a9ef2d76d1", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/sibcall-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsibcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsibcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fsibcall-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+\n+extern int ok (int);\n+extern void exit ();\n+static int gen_x86_64_shrd (int);\n+static int\n+gen_x86_64_shrd(int a __attribute__ ((__unused__)))\n+{\n+  return 0;\n+}\n+\n+extern int gen_x86_shrd_1 (int);\n+extern void ix86_split_ashr (int);\n+\n+void\n+ix86_split_ashr (int mode)\n+{\n+          (mode != 0\n+                      ? ok\n+                      : gen_x86_64_shrd) (0);\n+}\n+\n+volatile int one = 1;\n+int\n+main (void)\n+{\n+  ix86_split_ashr (one);\n+  return 1;\n+}\n+\n+int\n+ok (int i)\n+{\n+  exit (i);\n+}"}, {"sha": "3574e4dc891dcf70bfb5c58eb9f0ba24ed6127d2", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/stackalign.exp", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstackalign.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstackalign.exp?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,52 @@\n+# Copyright (C) 2008\n+# Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib gcc-dg.exp\n+\n+# Only run on targets which support automatic stack alignment.\n+if { ![check_effective_target_automatic_stack_alignment] } then {\n+    return\n+}\n+\n+set additional_flags \"\"\n+if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+    lappend additional_flags \"-mstackrealign\"\n+    lappend additional_flags \"-mpreferred-stack-boundary=5\"\n+}\n+\n+dg-init\n+\n+gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $additional_flags\n+if { [check_effective_target_fpic] } then {\n+    set pic_additional_flags $additional_flags\n+    lappend pic_additional_flags \"-fpic\"\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $pic_additional_flags\n+}\n+\n+if { [istarget i?86*-*-*] || [istarget x86_64-*-*] } then {\n+    lappend additional_flags \"-mforce-drap\"\n+    gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $additional_flags\n+    if { [check_effective_target_fpic] } then {\n+\tset pic_additional_flags $additional_flags\n+\tlappend pic_additional_flags \"-fpic\"\n+\tgcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $pic_additional_flags\n+    }\n+}\n+\n+dg-finish"}, {"sha": "79e3733484be1b47defbe511a5036b79b29f22f8", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/struct-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fstruct-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+void\n+foo (void)\n+{\n+  struct i\n+    {\n+      aligned i;\n+    } i;\n+\n+  if (check_int (&i.i,  __alignof__(i.i)) != i.i)\n+    abort ();\n+}\n+\n+int\n+main()\n+{\n+  foo ();\n+  return 0;\n+}"}, {"sha": "62b236522ec9e92d0edb30f6832897b058b3aa7d", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/vararg-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+\n+#include <stdarg.h>\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+foo (const char *fmt, ...)\n+{\n+  va_list arg;\n+  char *p;\n+  aligned i;\n+  int size;\n+  double x;\n+\n+  va_start (arg, fmt);\n+  size = va_arg (arg, int);\n+  if (size != 5)\n+    abort ();\n+  p = __builtin_alloca (size + 1);\n+\n+  x = va_arg (arg, double);\n+  if (x != 5.0)\n+    abort ();\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+  va_end (arg);\n+}\n+\n+int\n+main()\n+{\n+  foo (\"foo\", 5, 5.0);\n+  return 0;\n+}"}, {"sha": "00b723b0dc4ed70491e6e8657bcdf3fc4f950955", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/vararg-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fvararg-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+\n+#include <stdarg.h>\n+#include \"check.h\"\n+\n+#ifndef ALIGNMENT\n+#define ALIGNMENT\t64\n+#endif\n+\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+\n+int global;\n+\n+void\n+bar (char *p, int size)\n+{\n+  __builtin_strncpy (p, \"good\", size);\n+}\n+\n+void\n+test (va_list arg)\n+{\n+  char *p;\n+  aligned i;\n+  int size;\n+  double x;\n+\n+  size = va_arg (arg, int);\n+  if (size != 5)\n+    abort ();\n+\n+  p = __builtin_alloca (size + 1);\n+\n+  x = va_arg (arg, double);\n+  if (x != 5.0)\n+    abort ();\n+\n+  bar (p, size);\n+  if (__builtin_strncmp (p, \"good\", size) != 0)\n+    {\n+#ifdef DEBUG\n+      p[size] = '\\0';\n+      printf (\"Failed: %s != good\\n\", p);\n+#endif\n+      abort ();\n+    }\n+\n+  if (check_int (&i,  __alignof__(i)) != i)\n+    abort ();\n+}\n+\n+void\n+foo (const char *fmt, ...)\n+{\n+  va_list arg;\n+  va_start (arg, fmt);\n+  test (arg);\n+  va_end (arg);\n+}\n+int\n+main()\n+{\n+  foo (\"foo\", 5, 5.0);\n+  return 0;\n+}"}, {"sha": "8109f94b75cea5b5addd6ac5453ea58d3dc14330", "filename": "gcc/testsuite/gcc.target/i386/20060512-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-std=gnu99 -msse2\" } */\n+/* { dg-options \"-std=gnu99 -msse2 -mpreferred-stack-boundary=4\" } */\n \n #include \"sse2-check.h\"\n \n@@ -28,7 +28,7 @@ sse2_test (void)\n   int result;\n   asm (\"pushl %esi\");\t\t/* Disalign runtime stack.  */\n   result = self_aligning_function (g_1, g_2);\n-  asm (\"popl %esi\");\n   if (result != 42)\n     abort ();\n+  asm (\"popl %esi\");\n }"}, {"sha": "fe1af563578e2e75733eaae17f4ed6ca695b25fa", "filename": "gcc/testsuite/gcc.target/i386/20060512-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99 -mpreferred-stack-boundary=4\" } */\n int\n outer_function (int x, int y)\n {\n   int __attribute__ ((__noinline__, __force_align_arg_pointer__))\n   nested_function (int x, int y)\n-    { /* { dg-error \"force_align_arg_pointer not supported for nested functions\" } */\n+    {\n       return (x + y);\n     }\n   return (3 + nested_function (x, y));"}, {"sha": "847f0eb6d35a318599b541ea76f6baa98fe30457", "filename": "gcc/testsuite/gcc.target/i386/20060512-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-std=gnu99 -msse2 -mstackrealign\" } */\n+/* { dg-options \"-std=gnu99 -msse2 -mstackrealign -mpreferred-stack-boundary=4\" } */\n \n #include \"sse2-check.h\"\n \n@@ -28,7 +28,7 @@ sse2_test (void)\n   int result;\n   asm (\"pushl %esi\");\t\t/* Disalign runtime stack.  */\n   result = self_aligning_function (g_1, g_2);\n-  asm (\"popl %esi\");\n   if (result != 42)\n     abort ();\n+  asm (\"popl %esi\");\n }"}, {"sha": "ee7b8a4ad88663c3c064b4b62f5157bb5d422857", "filename": "gcc/testsuite/gcc.target/i386/20060512-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060512-4.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-mstackrealign\" } */\n+/* { dg-options \"-mstackrealign -mpreferred-stack-boundary=4\" } */\n int\n outer_function (int x, int y)\n {\n   int __attribute__ ((__noinline__))\n   nested_function (int x, int y)\n-    { /* { dg-warning \"-mstackrealign ignored for nested functions\" } */\n+    {\n       return (x + y);\n     }\n   return (3 + nested_function (x, y));"}, {"sha": "5bbc101c0c7381a5954f97f5777a216f178b81b3", "filename": "gcc/testsuite/gcc.target/i386/align-main-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-main-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-main-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-main-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,25 @@\n+/* Test for stack alignment when PREFERRED_STACK_BOUNDARY < alignment\n+   of local variable.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mpreferred-stack-boundary=6 -mincoming-stack-boundary=6\" } */\n+/* { dg-final { scan-assembler \"and\\[lq\\]?\\[\\\\t \\]*\\\\$-128,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]?\\[\\\\t \\]*\\\\$-64,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+\n+#include <stddef.h>\n+\n+#define ALIGNMENT 128\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+extern void abort(void);\n+\n+void check(void * a)\n+{\n+  if (((ptrdiff_t)a & (ALIGNMENT-1)) != 0)\n+    abort();\n+}\n+\n+int main()\n+{\n+  aligned a = 1;\n+  check(&a);\n+  return 0;\n+}"}, {"sha": "df45f0e5106b6854ab65ccb5c380870dce214de6", "filename": "gcc/testsuite/gcc.target/i386/align-main-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-main-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-main-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-main-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,25 @@\n+/* Test for stack alignment when PREFERRED_STACK_BOUNDARY > alignment\n+   of local variable.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mpreferred-stack-boundary=6 -mincoming-stack-boundary=6\" } */\n+/* { dg-final { scan-assembler \"and\\[lq\\]?\\[\\\\t \\]*\\\\$-64,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]?\\[\\\\t \\]*\\\\$-128,\\[\\\\t \\]*%\\[re\\]?sp\" } } */\n+\n+#include <stddef.h>\n+\n+#define ALIGNMENT 32\n+typedef int aligned __attribute__((aligned(ALIGNMENT)));\n+extern void abort(void);\n+\n+void check(void * a)\n+{\n+  if (((ptrdiff_t)a & (ALIGNMENT-1)) != 0)\n+    abort();\n+}\n+\n+int main()\n+{\n+  aligned a = 1;\n+  check(&a);\n+  return 0;\n+}"}, {"sha": "7230258045d83787e87fd0b197227b53f45eca6a", "filename": "gcc/testsuite/gcc.target/i386/pr32000-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32000-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32000-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32000-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ilp32 && dfp } */\n+/* { dg-options \"-O -msse2 -std=gnu99 -mpreferred-stack-boundary=2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef struct { _Decimal128 f __attribute__((packed)); } packed;\n+\n+_Decimal128 __attribute__((noinline))\n+foo (_Decimal128 a1, _Decimal128 a2, _Decimal128 a3, _Decimal128 a4,\n+     _Decimal128 a5, _Decimal128 a6, _Decimal128 a7, _Decimal128 a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, packed y)\n+{\n+  return y.f;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  packed x;\n+  _Decimal128 y = -1;\n+  x.f = y;\n+  y = foo (0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x.f, sizeof (y)))\n+    abort ();\n+}"}, {"sha": "e4d4f20bb18e2053aa0bfb1580847d064ab5b2e8", "filename": "gcc/testsuite/gcc.target/i386/stackalign/asm-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Fasm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Fasm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Fasm-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" } */\n+\n+/* This case is to detect a compile time regression introduced in stack\n+   branch development. */\n+f(){asm(\"%0\"::\"r\"(1.5F));}g(){asm(\"%0\"::\"r\"(1.5));}"}, {"sha": "c5b32e5c4216650bce03708ee3b38e6f67ad5047", "filename": "gcc/testsuite/gcc.target/i386/stackalign/return-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-1.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" } */\n+\n+/* This compile only test is to detect an assertion failure in stack branch\n+   development.  */\n+\n+double\n+foo (void)\n+{\n+}"}, {"sha": "113e71b80da78b4cd172ea84cf24d31960a89ec0", "filename": "gcc/testsuite/gcc.target/i386/stackalign/return-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-2.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" } */\n+\n+/* This compile only test is to detect an assertion failure in stack branch\n+   development.  */\n+void baz (void);\n+                       \n+double foo (void)\n+{\n+  baz ();\n+  return;\n+}\n+\n+double bar (void)\n+{\n+  baz ();\n+}"}, {"sha": "d8ab69bbea001ddcd50ddc60c63aa3ec84bbe305", "filename": "gcc/testsuite/gcc.target/i386/stackalign/return-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-3.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 && dfp } */\n+/* { dg-options \"-msse -std=gnu99 -mpreferred-stack-boundary=2\" } */\n+\n+/* This compile only test is to detect an assertion failure in stack branch\n+   development.  */\n+_Decimal128 test (void)\n+{\n+  return 1234123412341234.123412341234dl;\n+}"}, {"sha": "c66c369c8fc83b65aa152be38eb31059d75c766c", "filename": "gcc/testsuite/gcc.target/i386/stackalign/return-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-4.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpreferred-stack-boundary=4\" } */\n+/* { dg-final { scan-assembler-not \"andl\\[^\\\\n\\]*-64,\\[^\\\\n\\]*sp\" } } */\n+\n+/* This compile only test is to detect an assertion failure in stack branch\n+   development.  */\n+typedef int aligned __attribute__((aligned(64)));\n+\n+aligned\n+foo (void) { }"}, {"sha": "84531ddfe293dba5480470060aac2a07eeebe757", "filename": "gcc/testsuite/gcc.target/i386/stackalign/return-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-5.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpreferred-stack-boundary=4\" } */\n+/* { dg-final { scan-assembler-not \"andl\\[^\\\\n\\]*-64,\\[^\\\\n\\]*sp\" } } */\n+\n+/* This compile only test is to detect an assertion failure in stack branch\n+   development.  */\n+struct bar\n+{\n+  int x;\n+} __attribute__((aligned(64)));\n+\n+\n+struct bar\n+foo (void) { }"}, {"sha": "ceadbad1acf468689ac5865d11fe1f429d77775e", "filename": "gcc/testsuite/gcc.target/i386/stackalign/return-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Freturn-6.c?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mpreferred-stack-boundary=4\" } */\n+/* { dg-final { scan-assembler-not \"andl\\[^\\\\n\\]*-64,\\[^\\\\n\\]*sp\" } } */\n+\n+/* This compile only test is to detect an assertion failure in stack branch\n+   development.  */\n+struct bar\n+{\n+  int x __attribute__((aligned(64)));\n+};\n+\n+\n+struct bar\n+foo (void) { }"}, {"sha": "463ba612e0f249fc6b524e4a209e137aecbf34d1", "filename": "gcc/testsuite/gcc.target/i386/stackalign/stackalign.exp", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Fstackalign.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Fstackalign.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fstackalign%2Fstackalign.exp?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -0,0 +1,47 @@\n+# Copyright (C) 2008\n+# Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Exit immediately if this isn't a x86 target.\n+if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n+  return\n+}\n+\n+load_lib gcc-dg.exp\n+\n+# Only run on targets which support automatic stack alignment.\n+if { ![check_effective_target_automatic_stack_alignment] } then {\n+    return\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"-w\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+set additional_flags \"-mstackrealign\"\n+\n+dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $additional_flags $DEFAULT_CFLAGS\n+\n+set additional_flags \"-mno-stackrealign\"\n+\n+dg-runtest [lsort [glob $srcdir/$subdir/*.c]] $additional_flags $DEFAULT_CFLAGS\n+\n+dg-finish"}, {"sha": "f56b3f4f21265662528950a2964e58f979c8d803", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2488ca6ece182f2136a20ee5fa0bb92f935b0f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=3b2488ca6ece182f2136a20ee5fa0bb92f935b0f", "patch": "@@ -1841,10 +1841,6 @@ proc check_effective_target_unaligned_stack { } {\n         verbose \"check_effective_target_unaligned_stack: using cached result\" 2\n     } else {\n         set et_unaligned_stack_saved 0\n-        if { ( [istarget i?86-*-*] || [istarget x86_64-*-*] )\n-          && (! [istarget *-*-darwin*] ) } {\n-            set et_unaligned_stack_saved 1\n-        }\n     }\n     verbose \"check_effective_target_unaligned_stack: returning $et_unaligned_stack_saved\" 2\n     return $et_unaligned_stack_saved\n@@ -2466,3 +2462,14 @@ proc check_effective_target_4byte_wchar_t { } {\n \tint dummy[sizeof (__WCHAR_TYPE__) >= 4 ? 1 : -1];\n     }]\n }\n+\n+# Return 1 if the target supports automatic stack alignment.\n+\n+proc check_effective_target_automatic_stack_alignment  { } {\n+    if { [istarget i?86*-*-*]\n+\t || [istarget x86_64-*-*] } then {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}"}]}