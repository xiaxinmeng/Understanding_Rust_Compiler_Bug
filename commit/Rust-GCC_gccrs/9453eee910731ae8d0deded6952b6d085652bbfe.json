{"sha": "9453eee910731ae8d0deded6952b6d085652bbfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1M2VlZTkxMDczMWFlOGQwZGVkZWQ2OTUyYjZkMDg1NjUyYmJmZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-09-13T13:15:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-09-13T13:15:39Z"}, "message": "Trying again to fix aligned-new on m68k.\n\n\t* c-common.c (check_cxx_fundamental_alignment_constraints): Don't\n\tlimit types at all.\n\nFrom-SVN: r240110", "tree": {"sha": "94b2e8f118f88ba1a6f3338702d44559bd39da2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94b2e8f118f88ba1a6f3338702d44559bd39da2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9453eee910731ae8d0deded6952b6d085652bbfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9453eee910731ae8d0deded6952b6d085652bbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9453eee910731ae8d0deded6952b6d085652bbfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9453eee910731ae8d0deded6952b6d085652bbfe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c13ba175ad537e6b0809f721a5450e7df76423b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c13ba175ad537e6b0809f721a5450e7df76423b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c13ba175ad537e6b0809f721a5450e7df76423b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "d7b95dec3249cad852e26363fbca7354b529000b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9453eee910731ae8d0deded6952b6d085652bbfe/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9453eee910731ae8d0deded6952b6d085652bbfe/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9453eee910731ae8d0deded6952b6d085652bbfe", "patch": "@@ -1,3 +1,8 @@\n+2016-09-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-common.c (check_cxx_fundamental_alignment_constraints): Don't\n+\tlimit types at all.\n+\n 2016-09-12  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (check_cxx_fundamental_alignment_constraints): Fix"}, {"sha": "9fec2cfbc50b7d9226d2b76892e0c5c906948f14", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9453eee910731ae8d0deded6952b6d085652bbfe/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9453eee910731ae8d0deded6952b6d085652bbfe/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9453eee910731ae8d0deded6952b6d085652bbfe", "patch": "@@ -7905,13 +7905,8 @@ check_cxx_fundamental_alignment_constraints (tree node,\n     }\n   else if (TYPE_P (node))\n     {\n-      /* Let's be liberal for types.  BIGGEST_ALIGNMENT is the largest\n-\t alignment a built-in type can require, MAX_OFILE_ALIGNMENT is the\n-\t largest alignment the object file can represent, but a type that is\n-\t only allocated dynamically could request even larger alignment.  So\n-\t only limit type alignment to what TYPE_ALIGN can represent.  */\n-      if (requested_alignment > (max_align = 8U << 28))\n-\talignment_too_large_p = true;\n+      /* Let's be liberal for types; don't limit their alignment any more than\n+\t check_user_alignment already did.  */\n     }\n \n   if (alignment_too_large_p)"}]}