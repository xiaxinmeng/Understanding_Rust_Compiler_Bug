{"sha": "cce62625025380c2ea2a220deb10f8f355f83abf", "node_id": "C_kwDOANBUbNoAKGNjZTYyNjI1MDI1MzgwYzJlYTJhMjIwZGViMTBmOGYzNTVmODNhYmY", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-10T22:26:57Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-15T00:04:18Z"}, "message": "c++: fix ICE in joust_maybe_elide_copy [PR106675]\n\njoust_maybe_elide_copy checks that the last conversion in the ICS for\nthe first argument is ck_ref_bind, which is reasonable, because we've\nchecked that we're dealing with a copy/move constructor.  But it can\nalso happen that we couldn't figure out which conversion function is\nbetter to convert the argument, as in this testcase: joust couldn't\ndecide if we should go with\n\n  operator foo &()\n\nor\n\n  operator foo const &()\n\nso we get a ck_ambig, which then upsets joust_maybe_elide_copy.  Since\na ck_ambig can validly occur, I think we should just return early, as\nin the patch below.\n\n\tPR c++/106675\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (joust_maybe_elide_copy): Return false for ck_ambig.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/overload-conv-5.C: New test.", "tree": {"sha": "0bb7a000f2f53141df2652505404211d3cc1ea15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bb7a000f2f53141df2652505404211d3cc1ea15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cce62625025380c2ea2a220deb10f8f355f83abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce62625025380c2ea2a220deb10f8f355f83abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce62625025380c2ea2a220deb10f8f355f83abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce62625025380c2ea2a220deb10f8f355f83abf/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c348a717213b03c6661878934f197f4d261f0e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c348a717213b03c6661878934f197f4d261f0e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c348a717213b03c6661878934f197f4d261f0e56"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "048b2b052f8fd760493a838d5f9a1aa4de2dee22", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce62625025380c2ea2a220deb10f8f355f83abf/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce62625025380c2ea2a220deb10f8f355f83abf/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=cce62625025380c2ea2a220deb10f8f355f83abf", "patch": "@@ -12542,6 +12542,8 @@ joust_maybe_elide_copy (z_candidate *&cand)\n   if (!DECL_COPY_CONSTRUCTOR_P (fn) && !DECL_MOVE_CONSTRUCTOR_P (fn))\n     return false;\n   conversion *conv = cand->convs[0];\n+  if (conv->kind == ck_ambig)\n+    return false;\n   gcc_checking_assert (conv->kind == ck_ref_bind);\n   conv = next_conversion (conv);\n   if (conv->kind == ck_user && !TYPE_REF_P (conv->type))"}, {"sha": "b1e7766e42b48bcbcf4d669a565b4ae934412220", "filename": "gcc/testsuite/g++.dg/cpp0x/overload-conv-5.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cce62625025380c2ea2a220deb10f8f355f83abf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cce62625025380c2ea2a220deb10f8f355f83abf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-5.C?ref=cce62625025380c2ea2a220deb10f8f355f83abf", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/106675\n+// { dg-do compile { target c++11 } }\n+\n+struct foo {\n+    int n_;\n+    foo(int n) : n_(n) {}\n+};\n+\n+struct bar {\n+    int n_;\n+\n+    operator foo() const {\n+        return foo(n_);\n+    }\n+    operator foo &() { return *reinterpret_cast<foo *>(n_); }\n+    operator foo const &() = delete;\n+\n+    void crashgcc() {\n+        foo tmp(*this); // { dg-error \"ambiguous\" }\n+    }\n+};"}]}