{"sha": "d210653f3907ac1829fd275d067b2855ea53da24", "node_id": "C_kwDOANBUbNoAKGQyMTA2NTNmMzkwN2FjMTgyOWZkMjc1ZDA2N2IyODU1ZWE1M2RhMjQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-18T21:22:55Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-04-18T21:22:55Z"}, "message": "libstdc++: Micro-optimize __from_chars_pow2_base\n\nIn the first iteration of __from_chars_pow2_base's main loop, we need\nto remember the value of the leading significant digit for sake of the\noverflow check at the end (for base > 2).\n\nThis patch manually unrolls this first iteration so as to not encumber\nthe entire loop with logic that only the first iteration needs.  This\nseems to significantly improve performance:\n\nBase  Before  After (seconds, lower is better)\n   2    9.36   9.37\n   8    3.66   2.93\n  16    2.93   1.91\n  32    2.39   2.24\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/charconv (__from_chars_pow2_base): Manually\n\tunroll the first iteration of the main loop and simplify\n\taccordingly.", "tree": {"sha": "6e394b80ee6b02b74647c5a1a7220d4a2477c6d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e394b80ee6b02b74647c5a1a7220d4a2477c6d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d210653f3907ac1829fd275d067b2855ea53da24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d210653f3907ac1829fd275d067b2855ea53da24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d210653f3907ac1829fd275d067b2855ea53da24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d210653f3907ac1829fd275d067b2855ea53da24/comments", "author": null, "committer": null, "parents": [{"sha": "021b51814d67bedd8f41ac07edfd05654140c6e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021b51814d67bedd8f41ac07edfd05654140c6e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021b51814d67bedd8f41ac07edfd05654140c6e5"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "f1ace406017fe47eb253b4a94bd42af7037b3cf9", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d210653f3907ac1829fd275d067b2855ea53da24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d210653f3907ac1829fd275d067b2855ea53da24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=d210653f3907ac1829fd275d067b2855ea53da24", "patch": "@@ -469,25 +469,37 @@ namespace __detail\n       while (__i < __len && __first[__i] == '0')\n \t++__i;\n       const ptrdiff_t __leading_zeroes = __i;\n+      if (__i >= __len) [[__unlikely__]]\n+\t{\n+\t  __first += __i;\n+\t  return true;\n+\t}\n \n+      // Remember the leading significant digit value if necessary.\n       unsigned char __leading_c = 0;\n+      if (__base != 2)\n+\t{\n+\t  __leading_c = __from_chars_alnum_to_val<_DecOnly>(__first[__i]);\n+\t  // __glibcxx_assert(__leading_c != 0);\n+\t  if (__leading_c >= __base) [[__unlikely__]]\n+\t    {\n+\t      __first += __i;\n+\t      return true;\n+\t    }\n+\t  __val = __leading_c;\n+\t  ++__i;\n+\t}\n+\n       for (; __i < __len; ++__i)\n \t{\n \t  const unsigned char __c = __from_chars_alnum_to_val<_DecOnly>(__first[__i]);\n \t  if (__c >= __base)\n \t    break;\n \t  __val = (__val << __log2_base) | __c;\n-\n-\t  if (__i == __leading_zeroes)\n-\t    {\n-\t      // At the first iteration, remember the leading significant digit.\n-\t      // __glibcxx_assert(__leading_c == 0 && __c != 0);\n-\t      __leading_c = __c;\n-\t    }\n \t}\n       __first += __i;\n       auto __significant_bits = (__i - __leading_zeroes) * __log2_base;\n-      if (__base != 2 && __leading_c != 0)\n+      if (__base != 2)\n \t// Compensate for a leading significant digit that didn't use all\n \t// of its available bits.\n \t__significant_bits -= __log2_base - __bit_width(__leading_c);"}]}