{"sha": "00182e1edccfe503b6a28319215123d35b07af19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxODJlMWVkY2NmZTUwM2I2YTI4MzE5MjE1MTIzZDM1YjA3YWYxOQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-05-31T02:21:31Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-05-31T02:21:31Z"}, "message": "expr.c (expand_expr): Output partially zeroed out vectors with output_constant_def.\n\n2002-05-31  Aldy Hernandez  <aldyh@redhat.com>\n\n        * expr.c (expand_expr): Output partially zeroed out vectors with\n        output_constant_def.\n\nFrom-SVN: r54080", "tree": {"sha": "0cc15e47f21164650f205cb28792b9e1e8005076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc15e47f21164650f205cb28792b9e1e8005076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00182e1edccfe503b6a28319215123d35b07af19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00182e1edccfe503b6a28319215123d35b07af19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00182e1edccfe503b6a28319215123d35b07af19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00182e1edccfe503b6a28319215123d35b07af19/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4eb03fef0038be54957aea4e18b2e79c4452937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4eb03fef0038be54957aea4e18b2e79c4452937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4eb03fef0038be54957aea4e18b2e79c4452937"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "3e6bc49bef776539bb765d3c10daeb0c3ab4e6fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00182e1edccfe503b6a28319215123d35b07af19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00182e1edccfe503b6a28319215123d35b07af19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00182e1edccfe503b6a28319215123d35b07af19", "patch": "@@ -1,3 +1,8 @@\n+2002-05-31  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * expr.c (expand_expr): Output partially zeroed out vectors with\n+        output_constant_def.\n+\n 2002-05-30  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config.gcc (sh[123456789l]*-*-*): Set cpu_type to sh."}, {"sha": "b373ad2e6d4e1e3404ca840e3ac6ebc6cecfa60b", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00182e1edccfe503b6a28319215123d35b07af19/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00182e1edccfe503b6a28319215123d35b07af19/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=00182e1edccfe503b6a28319215123d35b07af19", "patch": "@@ -6758,7 +6758,13 @@ expand_expr (exp, target, tmode, modifier)\n \t fold.  Likewise, if we have a target we can use, it is best to\n \t store directly into the target unless the type is large enough\n \t that memcpy will be used.  If we are making an initializer and\n-\t all operands are constant, put it in memory as well.  */\n+\t all operands are constant, put it in memory as well.\n+\n+\tFIXME: Avoid trying to fill vector constructors piece-meal.\n+\tOutput them with output_constant_def below unless we're sure\n+\tthey're zeros.  This should go away when vector initializers\n+\tare treated like VECTOR_CST instead of arrays.\n+      */\n       else if ((TREE_STATIC (exp)\n \t\t&& ((mode == BLKmode\n \t\t     && ! (target != 0 && safe_from_p (target, exp, 1)))\n@@ -6767,7 +6773,9 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t&& (! MOVE_BY_PIECES_P\n \t\t\t    (tree_low_cst (TYPE_SIZE_UNIT (type), 1),\n \t\t\t     TYPE_ALIGN (type)))\n-\t\t\t&& ! mostly_zeros_p (exp))))\n+ \t\t\t&& ((TREE_CODE (type) == VECTOR_TYPE\n+ \t\t\t     && !is_zeros_p (exp))\n+ \t\t\t    || ! mostly_zeros_p (exp)))))\n \t       || (modifier == EXPAND_INITIALIZER && TREE_CONSTANT (exp)))\n \t{\n \t  rtx constructor = output_constant_def (exp, 1);"}]}