{"sha": "c621016bc82b5cec8d34a0646a8b533f65880297", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyMTAxNmJjODJiNWNlYzhkMzRhMDY0NmE4YjUzM2Y2NTg4MDI5Nw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-11-30T03:11:28Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-11-30T03:11:28Z"}, "message": "re PR pch/14940 (PCH largefile test fails on various platforms)\n\n\tPR pch/14940\n\t* config/pa/pa-host.c, config/pa/x-hpux, config/pa/x-linux: New files.\n\t* config.host (hppa*-*-hpux*, hppa*-*-linux): Define out_host_hook_obj\n\tand host_xmake_file using new host configuration files.\n\nFrom-SVN: r91509", "tree": {"sha": "7e3f02313f962f526878e9aed5f21a242f594b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e3f02313f962f526878e9aed5f21a242f594b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c621016bc82b5cec8d34a0646a8b533f65880297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c621016bc82b5cec8d34a0646a8b533f65880297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c621016bc82b5cec8d34a0646a8b533f65880297", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c621016bc82b5cec8d34a0646a8b533f65880297/comments", "author": null, "committer": null, "parents": [{"sha": "57ab8ba918ed0490ab5a9e3659ce297ee71578ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ab8ba918ed0490ab5a9e3659ce297ee71578ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ab8ba918ed0490ab5a9e3659ce297ee71578ef"}], "stats": {"total": 149, "additions": 148, "deletions": 1}, "files": [{"sha": "c51e0e2e1c1337635ac208ed8e200547cbc351af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c621016bc82b5cec8d34a0646a8b533f65880297", "patch": "@@ -1,3 +1,10 @@\n+2004-11-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR pch/14940\n+\t* config/pa/pa-host.c, config/pa/x-hpux, config/pa/x-linux: New files.\n+\t* config.host (hppa*-*-hpux*, hppa*-*-linux): Define out_host_hook_obj\n+\tand host_xmake_file using new host configuration files.\n+\n 2004-11-29  Roger Sayle  <roger@eyesopen.com>\n \n \t* reg-stack.c (change_stack): Improve algorithm used to pop regs"}, {"sha": "9024ec1c5e859c7d2a6d0c17ddcac10e443f92b4", "filename": "gcc/config.host", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=c621016bc82b5cec8d34a0646a8b533f65880297", "patch": "@@ -113,7 +113,12 @@ case ${host} in\n   hppa1.0-*-hpux10* | hppa1.1-*-hpux10* | hppa2*-*-hpux10* | \\\n   hppa1.0-*-hpux11* | hppa1.1-*-hpux11* | hppa2*-*-hpux11* | \\\n   hppa*64*-*-hpux11*)\n-    host_xmake_file=\"pa/x-ada\"\n+    out_host_hook_obj=pa-host.o\n+    host_xmake_file=pa/x-hpux\n+    ;;\n+  hppa*-*-linux*)\n+    out_host_hook_obj=pa-host.o\n+    host_xmake_file=pa/x-linux\n     ;;\n   i370-*-opened* | i370-*-mvs* ) # IBM 360/370/390 Architecture\n     host_xm_defines='FATAL_EXIT_CODE=12'"}, {"sha": "14f587cb81237e109366ce9bd33f8b24b47fed44", "filename": "gcc/config/pa/pa-host.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig%2Fpa%2Fpa-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig%2Fpa%2Fpa-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-host.c?ref=c621016bc82b5cec8d34a0646a8b533f65880297", "patch": "@@ -0,0 +1,122 @@\n+/* PA host-specific hook definitions.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the\n+   Free Software Foundation, 59 Temple Place - Suite 330, Boston,\n+   MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include <sys/mman.h>\n+#include \"hosthooks.h\"\n+#include \"hosthooks-def.h\"\n+\n+static void *pa_gt_pch_get_address (size_t, int);\n+static int pa_gt_pch_use_address (void *, size_t, int, size_t);\n+\n+#undef HOST_HOOKS_GT_PCH_GET_ADDRESS\n+#define HOST_HOOKS_GT_PCH_GET_ADDRESS pa_gt_pch_get_address\n+#undef HOST_HOOKS_GT_PCH_USE_ADDRESS\n+#define HOST_HOOKS_GT_PCH_USE_ADDRESS pa_gt_pch_use_address\n+\n+/* For various ports, try to guess a fixed spot in the vm space\n+   that's probably free.  */\n+#if defined(__hppa__) && defined(__LP64__)\n+# define TRY_EMPTY_VM_SPACE\t0x8000000000000000\n+#elif defined(__hppa__)\n+# define TRY_EMPTY_VM_SPACE\t0x60000000\n+#else\n+# define TRY_EMPTY_VM_SPACE\t0\n+#endif\n+\n+/* Determine a location where we might be able to reliably allocate\n+   SIZE bytes.  FD is the PCH file, though we should return with the\n+   file unmapped.  */\n+\n+static void *\n+pa_gt_pch_get_address (size_t size, int fd)\n+{\n+  void *addr;\n+\n+  addr = mmap ((void *)TRY_EMPTY_VM_SPACE, size, PROT_READ | PROT_WRITE,\n+\t       MAP_PRIVATE, fd, 0);\n+\n+  /* If we failed the map, that means there's *no* free space.  */\n+  if (addr == (void *) MAP_FAILED)\n+    return NULL;\n+  /* Unmap the area before returning.  */\n+  munmap (addr, size);\n+\n+  return addr;\n+}\n+\n+/* Map SIZE bytes of FD+OFFSET at BASE.  Return 1 if we succeeded at\n+   mapping the data at BASE, -1 if we couldn't.\n+\n+   It's not possibly to reliably mmap a file using MAP_PRIVATE to\n+   a specific START address on either hpux or linux.  First we see\n+   if mmap with MAP_PRIVATE works.  If it does, we are off to the\n+   races.  If it doesn't, we try an anonymous MAP_PRIVATE since the\n+   kernel is more likely to honor the BASE address in anonymous maps.\n+   We then mmap the file to an arbitrary location and copy the data\n+   to the anonymous private map.  This assumes of course that we\n+   don't need to change the PCH data after the file is created.\n+\n+   This approach obviously causes a performance penalty but there is\n+   little else we can do given the current PCH implementation.  */\n+\n+static int\n+pa_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n+{\n+  void *addr, *faddr;\n+\n+  /* We're called with size == 0 if we're not planning to load a PCH\n+     file at all.  This allows the hook to free any static space that\n+     we might have allocated at link time.  */\n+  if (size == 0)\n+    return -1;\n+\n+  /* Try to map the file with MAP_PRIVATE.  */\n+  addr = mmap (base, size, PROT_READ | PROT_WRITE,\n+\t       MAP_PRIVATE, fd, offset);\n+\n+  if (addr == base)\n+    return 1;\n+\n+  if (addr != (void *) MAP_FAILED)\n+    munmap (addr, size);\n+\n+  addr = mmap (base, size, PROT_READ | PROT_WRITE,\n+\t       MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+\n+  if (addr != base)\n+    return -1;\n+\n+  faddr = mmap (NULL, size, PROT_READ, MAP_PRIVATE,\n+\t\tfd, offset);\n+\n+  if (faddr == (void *) MAP_FAILED)\n+    return -1;\n+\n+  memcpy (addr, faddr, size);\n+  munmap (faddr, size);\n+\n+  return 1;\n+}\n+\n+\f\n+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "2f16d3170394b2f487f80983b75563535352ca6f", "filename": "gcc/config/pa/x-hpux", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig%2Fpa%2Fx-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig%2Fpa%2Fx-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fx-hpux?ref=c621016bc82b5cec8d34a0646a8b533f65880297", "patch": "@@ -0,0 +1,9 @@\n+# The ada virtual array implementation requires that indexing be disabled on\n+# hosts such as hpux that use a segmented memory architecture.  Both the c\n+# and ada files need to be compiled with this option for correct operation.\n+X_ADA_CFLAGS=-mdisable-indexing\n+\n+pa-host.o : $(srcdir)/config/pa/pa-host.c $(CONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h hosthooks.h hosthooks-def.h $(HOOKS_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/pa/pa-host.c"}, {"sha": "8a5bc6fcf3606fa770a04a46f691fd1a45a800b0", "filename": "gcc/config/pa/x-linux", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig%2Fpa%2Fx-linux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c621016bc82b5cec8d34a0646a8b533f65880297/gcc%2Fconfig%2Fpa%2Fx-linux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fx-linux?ref=c621016bc82b5cec8d34a0646a8b533f65880297", "patch": "@@ -0,0 +1,4 @@\n+pa-host.o : $(srcdir)/config/pa/pa-host.c $(CONFIG_H) $(SYSTEM_H) \\\n+  coretypes.h hosthooks.h hosthooks-def.h $(HOOKS_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/pa/pa-host.c"}]}