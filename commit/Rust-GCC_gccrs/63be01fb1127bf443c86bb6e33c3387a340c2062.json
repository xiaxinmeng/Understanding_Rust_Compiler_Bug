{"sha": "63be01fb1127bf443c86bb6e33c3387a340c2062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiZTAxZmIxMTI3YmY0NDNjODZiYjZlMzNjMzM4N2EzNDBjMjA2Mg==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-02-26T02:58:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-02-26T02:58:08Z"}, "message": "* rtlanal.c (find_last_value): Allow NULL_RTX for valid_to.\n\nFrom-SVN: r32163", "tree": {"sha": "31cc4a10bd8b654226036c4fd73abe8905b111cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31cc4a10bd8b654226036c4fd73abe8905b111cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63be01fb1127bf443c86bb6e33c3387a340c2062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be01fb1127bf443c86bb6e33c3387a340c2062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63be01fb1127bf443c86bb6e33c3387a340c2062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63be01fb1127bf443c86bb6e33c3387a340c2062/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44a76fc8563b63bbd0ce06e607136746841f4d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a76fc8563b63bbd0ce06e607136746841f4d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a76fc8563b63bbd0ce06e607136746841f4d8f"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "9edbc2ac3c913113dd4918b16a266830ee162374", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be01fb1127bf443c86bb6e33c3387a340c2062/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be01fb1127bf443c86bb6e33c3387a340c2062/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63be01fb1127bf443c86bb6e33c3387a340c2062", "patch": "@@ -1,3 +1,7 @@\n+2000-02-25  John Wehle  (john@feith.com)\n+\n+\t* rtlanal.c (find_last_value): Allow NULL_RTX for valid_to.\n+\n 2000-02-25  Anthony Green  <green@cygnus.com>\n \n \t* toplev.c (rest_of_compilation): Rebuild jump labels if"}, {"sha": "a1d42a6349ee331ba6b9c5e75e55a53e5aab59d7", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63be01fb1127bf443c86bb6e33c3387a340c2062/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63be01fb1127bf443c86bb6e33c3387a340c2062/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=63be01fb1127bf443c86bb6e33c3387a340c2062", "patch": "@@ -750,11 +750,12 @@ multiple_sets (insn)\n   return 0;\n }\n \f\n-/* Return the last thing that X was assigned from before *PINSN.  Verify that\n-   the object is not modified up to VALID_TO.  If it was, if we hit\n-   a partial assignment to X, or hit a CODE_LABEL first, return X.  If we\n-   found an assignment, update *PINSN to point to it.  \n-   ALLOW_HWREG is set to 1 if hardware registers are allowed to be the src.  */\n+/* Return the last thing that X was assigned from before *PINSN.  If VALID_TO\n+   is not NULL_RTX then verify that the object is not modified up to VALID_TO.\n+   If the object was modified, if we hit a partial assignment to X, or hit a\n+   CODE_LABEL first, return X.  If we found an assignment, update *PINSN to\n+   point to it.  ALLOW_HWREG is set to 1 if hardware registers are allowed to\n+   be the src.  */\n \n rtx\n find_last_value (x, pinsn, valid_to, allow_hwreg)\n@@ -779,7 +780,8 @@ find_last_value (x, pinsn, valid_to, allow_hwreg)\n \t    if (note && GET_CODE (XEXP (note, 0)) != EXPR_LIST)\n \t      src = XEXP (note, 0);\n \n-\t    if (! modified_between_p (src, PREV_INSN (p), valid_to)\n+\t    if ((valid_to == NULL_RTX\n+\t\t || ! modified_between_p (src, PREV_INSN (p), valid_to))\n \t\t/* Reject hard registers because we don't usually want\n \t\t   to use them; we'd rather use a pseudo.  */\n \t\t&& (! (GET_CODE (src) == REG"}]}