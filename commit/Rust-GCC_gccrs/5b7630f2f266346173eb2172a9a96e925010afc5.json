{"sha": "5b7630f2f266346173eb2172a9a96e925010afc5", "node_id": "C_kwDOANBUbNoAKDViNzYzMGYyZjI2NjM0NjE3M2ViMjE3MmE5YTk2ZTkyNTAxMGFmYzU", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-04-19T12:37:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-30T08:29:01Z"}, "message": "[Ada] PR ada/105303 Fix use of Assertion_Policy in internal generics unit\n\nThe internal unit System.Generic_Array_Operations defines only generic\nsubprograms. Thus, pragma Assertion_Policy inside the spec has no\neffect, as each instantiation is only subject to the assertion policy at\nthe program point of the instantiation. Remove this confusing pragma,\nand add the pragma inside each generic body making use of additional\nassertions or ghost code, so that running time of instantiations is not\nimpacted by assertions meant for formal verification.\n\ngcc/ada/\n\n\tPR ada/105303\n\t* libgnat/s-gearop.adb: Add pragma Assertion_Policy in generic\n\tbodies making use of additional assertions or ghost code.\n\t* libgnat/s-gearop.ads: Remove confusing Assertion_Policy.", "tree": {"sha": "889dbf90ca325cfd1b07387625fb105d5a5fd02c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889dbf90ca325cfd1b07387625fb105d5a5fd02c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b7630f2f266346173eb2172a9a96e925010afc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7630f2f266346173eb2172a9a96e925010afc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7630f2f266346173eb2172a9a96e925010afc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7630f2f266346173eb2172a9a96e925010afc5/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55c19dda8c6c5fd40f1ec7ea4dd2f0c12d8c309f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55c19dda8c6c5fd40f1ec7ea4dd2f0c12d8c309f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55c19dda8c6c5fd40f1ec7ea4dd2f0c12d8c309f"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "78f4ba8b92ffd5f480d1a84015a81f5fe276dd9a", "filename": "gcc/ada/libgnat/s-gearop.adb", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7630f2f266346173eb2172a9a96e925010afc5/gcc%2Fada%2Flibgnat%2Fs-gearop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7630f2f266346173eb2172a9a96e925010afc5/gcc%2Fada%2Flibgnat%2Fs-gearop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-gearop.adb?ref=5b7630f2f266346173eb2172a9a96e925010afc5", "patch": "@@ -32,7 +32,8 @@\n --  Preconditions, postconditions, ghost code, loop invariants and assertions\n --  in this unit are meant for analysis only, not for run-time checking, as it\n --  would be too costly otherwise. This is enforced by setting the assertion\n---  policy to Ignore.\n+--  policy to Ignore, here for non-generic code, and inside the generic for\n+--  generic code.\n \n pragma Assertion_Policy (Pre            => Ignore,\n                          Post           => Ignore,\n@@ -72,6 +73,12 @@ is\n    --------------\n \n    function Diagonal (A : Matrix) return Vector is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n+\n       N : constant Natural := Natural'Min (A'Length (1), A'Length (2));\n    begin\n       return R : Vector (A'First (1) .. A'First (1) + (N - 1))\n@@ -126,6 +133,11 @@ is\n    ---------------------\n \n    procedure Back_Substitute (M, N : in out Matrix) is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n       pragma Assert (M'First (1) = N'First (1)\n                        and then\n                      M'Last  (1) = N'Last (1));\n@@ -215,6 +227,11 @@ is\n       N   : in out Matrix;\n       Det : out Scalar)\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n       pragma Assert (M'First (1) = N'First (1)\n                        and then\n                      M'Last  (1) = N'Last (1));\n@@ -460,6 +477,11 @@ is\n    -------------\n \n    function L2_Norm (X : X_Vector) return Result_Real'Base is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n       Sum : Result_Real'Base := 0.0;\n \n    begin\n@@ -479,6 +501,11 @@ is\n    ----------------------------------\n \n    function Matrix_Elementwise_Operation (X : X_Matrix) return Result_Matrix is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Result_Matrix (X'Range (1), X'Range (2))\n         with Relaxed_Initialization\n@@ -524,6 +551,11 @@ is\n      (Left  : Left_Matrix;\n       Right : Right_Matrix) return Result_Matrix\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Result_Matrix (Left'Range (1), Left'Range (2))\n         with Relaxed_Initialization\n@@ -570,6 +602,11 @@ is\n       Y : Y_Matrix;\n       Z : Z_Scalar) return Result_Matrix\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Result_Matrix (X'Range (1), X'Range (2))\n         with Relaxed_Initialization\n@@ -657,6 +694,11 @@ is\n      (Left  : Left_Matrix;\n       Right : Right_Scalar) return Result_Matrix\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Result_Matrix (Left'Range (1), Left'Range (2))\n         with Relaxed_Initialization\n@@ -705,6 +747,11 @@ is\n      (Left  : Left_Scalar;\n       Right : Right_Matrix) return Result_Matrix\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Result_Matrix (Right'Range (1), Right'Range (2))\n         with Relaxed_Initialization\n@@ -811,6 +858,11 @@ is\n      (Left  : Left_Matrix;\n       Right : Right_Matrix) return Result_Matrix\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Result_Matrix (Left'Range (1), Right'Range (2))\n         with Relaxed_Initialization\n@@ -856,6 +908,11 @@ is\n    ----------------------------\n \n    function Matrix_Vector_Solution (A : Matrix; X : Vector) return Vector is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n \n       procedure Ignore (M : Matrix)\n       with\n@@ -917,6 +974,11 @@ is\n    ----------------------------\n \n    function Matrix_Matrix_Solution (A, X : Matrix) return Matrix is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n \n       procedure Ignore (M : Matrix)\n       with\n@@ -1035,6 +1097,11 @@ is\n      (Left  : Left_Vector;\n       Right : Right_Vector) return Matrix\n    is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       return R : Matrix (Left'Range, Right'Range)\n         with Relaxed_Initialization\n@@ -1078,6 +1145,11 @@ is\n    ---------------\n \n    procedure Transpose (A : Matrix; R : out Matrix) is\n+      pragma Assertion_Policy (Pre            => Ignore,\n+                               Post           => Ignore,\n+                               Ghost          => Ignore,\n+                               Loop_Invariant => Ignore,\n+                               Assert         => Ignore);\n    begin\n       for J in R'Range (1) loop\n          for K in R'Range (2) loop"}, {"sha": "f5ee8bc87e630d257e4aa53caedfddadbcc3f2c9", "filename": "gcc/ada/libgnat/s-gearop.ads", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7630f2f266346173eb2172a9a96e925010afc5/gcc%2Fada%2Flibgnat%2Fs-gearop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7630f2f266346173eb2172a9a96e925010afc5/gcc%2Fada%2Flibgnat%2Fs-gearop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-gearop.ads?ref=5b7630f2f266346173eb2172a9a96e925010afc5", "patch": "@@ -36,16 +36,10 @@\n --  overflows in arithmetic operations passed on as formal generic subprogram\n --  parameters.\n \n---  Preconditions in this unit are meant for analysis only, not for run-time\n---  checking, so that the expected exceptions are raised. This is enforced\n---  by setting the corresponding assertion policy to Ignore. Postconditions\n---  and contract cases should not be executed at runtime as well, in order\n---  not to slow down the execution of these functions.\n-\n-pragma Assertion_Policy (Pre            => Ignore,\n-                         Post           => Ignore,\n-                         Contract_Cases => Ignore,\n-                         Ghost          => Ignore);\n+--  Preconditions in this unit are meant mostly for analysis, but will be\n+--  activated at runtime depending on the assertion policy for preconditions at\n+--  the program point of instantiation. These preconditions are simply checking\n+--  bounds, so should not impact running time.\n \n package System.Generic_Array_Operations\n   with SPARK_Mode"}]}