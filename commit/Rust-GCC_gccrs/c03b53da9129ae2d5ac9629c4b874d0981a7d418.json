{"sha": "c03b53da9129ae2d5ac9629c4b874d0981a7d418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzYjUzZGE5MTI5YWUyZDVhYzk2MjljNGI4NzRkMDk4MWE3ZDQxOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T14:30:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T15:11:04Z"}, "message": "libstdc++: Add lightweight replacement for std::numeric_limits (PR 92546)\n\nMany uses of std::numeric_limits in C++17 and C++20 features only really\nneed the min(), max() and digits constants for integral types. By adding\n__detail::__int_limits we can avoid including the whole <limits> header.\n\nThe <limits> header isn't especially large, but avoiding it still gives\nsmall savings in compilation time and memory usage for the compiler.\n\nThere are also C++11 features that could benefit from this change (e.g.\n<bits/hashtable_policy.h> and <bits/uniform_int_dist.h>) but I won't\nchange those until stage 1.\n\nThe implementation of __int_limits assumes two's complement integers,\nwhich is true for all targets supported by GCC.\n\n\tPR libstdc++/92546 (partial)\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/int_limits.h: New header.\n\t* include/bits/parse_numbers.h (__select_int::_Select_int): Replace\n\tnumeric_limits with __detail::__int_limits.\n\t* include/std/bit (__rotl, __rotr, __countl_zero, __countl_one)\n\t(__countr_zero, __countr_one, __popcount, __ceil2, __floor2, __log2p1):\n\tLikewise.\n\t* include/std/charconv (__to_chars_8, __from_chars_binary)\n\t(__from_chars_alpha_to_num, from_chars): Likewise.\n\t* include/std/memory_resource (polymorphic_allocator::allocate)\n\t(polymorphic_allocator::allocate_object): Likewise.\n\t* include/std/string_view (basic_string_view::_S_compare): Likewise.\n\t* include/std/utility (in_range): Likewise.\n\t* testsuite/20_util/integer_comparisons/in_range_neg.cc: Adjust for\n\textra error about incomplete type __int_limits<bool>.\n\t* testsuite/26_numerics/bit/bit.count/countl_one.cc: Include <limits>.\n\t* testsuite/26_numerics/bit/bit.count/countl_zero.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/countr_one.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/countr_zero.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.count/popcount.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/ceil2_neg.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/floor2.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/ispow2.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/log2p1.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.rotate/rotl.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.rotate/rotr.cc: Likewise.", "tree": {"sha": "c93017e5e0b7094038b5b8d282aa3e243e557f07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93017e5e0b7094038b5b8d282aa3e243e557f07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c03b53da9129ae2d5ac9629c4b874d0981a7d418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03b53da9129ae2d5ac9629c4b874d0981a7d418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03b53da9129ae2d5ac9629c4b874d0981a7d418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03b53da9129ae2d5ac9629c4b874d0981a7d418/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4540ef781bcefffe779a8b31950ea737733f06a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4540ef781bcefffe779a8b31950ea737733f06a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4540ef781bcefffe779a8b31950ea737733f06a4"}], "stats": {"total": 224, "additions": 174, "deletions": 50}, "files": [{"sha": "954eb673184e3d89beb176d6fd3d72bf9347e07a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -1,5 +1,35 @@\n 2020-02-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/92546 (partial)\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/int_limits.h: New header.\n+\t* include/bits/parse_numbers.h (__select_int::_Select_int): Replace\n+\tnumeric_limits with __detail::__int_limits.\n+\t* include/std/bit (__rotl, __rotr, __countl_zero, __countl_one)\n+\t(__countr_zero, __countr_one, __popcount, __ceil2, __floor2, __log2p1):\n+\tLikewise.\n+\t* include/std/charconv (__to_chars_8, __from_chars_binary)\n+\t(__from_chars_alpha_to_num, from_chars): Likewise.\n+\t* include/std/memory_resource (polymorphic_allocator::allocate)\n+\t(polymorphic_allocator::allocate_object): Likewise.\n+\t* include/std/string_view (basic_string_view::_S_compare): Likewise.\n+\t* include/std/utility (in_range): Likewise.\n+\t* testsuite/20_util/integer_comparisons/in_range_neg.cc: Adjust for\n+\textra error about incomplete type __int_limits<bool>.\n+\t* testsuite/26_numerics/bit/bit.count/countl_one.cc: Include <limits>.\n+\t* testsuite/26_numerics/bit/bit.count/countl_zero.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/countr_one.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/countr_zero.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.count/popcount.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/ceil2_neg.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/floor2.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/ispow2.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/log2p1.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.rotate/rotl.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.rotate/rotr.cc: Likewise.\n+\n \t* python/libstdcxx/v6/printers.py (StdCmpCatPrinter.to_string): Update\n \tvalue for partial_ordering::unordered.\n "}, {"sha": "80aeb3f8959518d8f20b31c3de667dfa9daf3599", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -129,6 +129,7 @@ bits_headers = \\\n \t${bits_srcdir}/hashtable.h \\\n \t${bits_srcdir}/hashtable_policy.h \\\n \t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/int_limits.h \\\n \t${bits_srcdir}/invoke.h \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\"}, {"sha": "eb437ad8d8d4a6642afd43ce12578c964f3ff959", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -474,6 +474,7 @@ bits_headers = \\\n \t${bits_srcdir}/hashtable.h \\\n \t${bits_srcdir}/hashtable_policy.h \\\n \t${bits_srcdir}/indirect_array.h \\\n+\t${bits_srcdir}/int_limits.h \\\n \t${bits_srcdir}/invoke.h \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\"}, {"sha": "7ae34377331dc1e87f540254e33bb64c92ff913a", "filename": "libstdc++-v3/include/bits/int_limits.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fint_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fint_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fint_limits.h?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -0,0 +1,74 @@\n+// Minimal replacement for numeric_limits of integers. -*- C++ -*-\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/int_limits.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{limits}\n+ */\n+\n+#ifndef _GLIBCXX_INT_LIMITS_H\n+#define _GLIBCXX_INT_LIMITS_H 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus >= 201103L\n+#include <bits/c++config.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+namespace __detail\n+{\n+  // This template is used for arbitrary signed and unsigned integer types\n+  // (by headers <bit> and <charconv>) and for specific integer types\n+  // (by <memory_resource> and <string_view>) but also for char (<charconv>).\n+  // For simplicity's sake, all integral types except bool are supported.\n+\n+  // Lightweight alternative to numeric_limits<signed integer type>.\n+  template<typename _Tp, bool = is_signed<_Tp>::value>\n+    struct __int_limits\n+    {\n+      static_assert(is_integral<_Tp>::value, \"unsupported specialization\");\n+      using _Up = typename make_unsigned<_Tp>::type;\n+      static constexpr int digits = sizeof(_Tp) * __CHAR_BIT__ - 1;\n+      static constexpr _Tp min() noexcept { return _Tp(_Up(1) << digits); }\n+      static constexpr _Tp max() noexcept { return _Tp(_Up(~_Up(0)) >> 1); }\n+    };\n+\n+  // Lightweight alternative to numeric_limits<unsigned integer type>.\n+  template<typename _Tp>\n+    struct __int_limits<_Tp, false>\n+    {\n+      static_assert(is_integral<_Tp>::value, \"unsupported specialization\");\n+      static constexpr int digits = sizeof(_Tp) * __CHAR_BIT__;\n+      static constexpr _Tp min() noexcept { return 0; }\n+      static constexpr _Tp max() noexcept { return _Tp(-1); }\n+    };\n+\n+  template<> struct __int_limits<bool>; // not defined\n+}\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif // C++11\n+#endif // _GLIBCXX_INT_LIMITS_H"}, {"sha": "6a75d00277437816d5803b050bc686f27e95dce4", "filename": "libstdc++-v3/include/bits/parse_numbers.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fparse_numbers.h?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -34,9 +34,9 @@\n \n // From n3642.pdf except I added binary literals and digit separator '\\''.\n \n-#if __cplusplus > 201103L\n+#if __cplusplus >= 201402L\n \n-#include <limits>\n+#include <bits/int_limits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -265,7 +265,7 @@ namespace __select_int\n \n   template<unsigned long long _Val, typename _IntType, typename... _Ints>\n     struct _Select_int_base<_Val, _IntType, _Ints...>\n-    : conditional_t<(_Val <= std::numeric_limits<_IntType>::max()),\n+    : conditional_t<(_Val <= __detail::__int_limits<_IntType>::max()),\n \t\t    integral_constant<_IntType, _Val>,\n \t\t    _Select_int_base<_Val, _Ints...>>\n     { };\n@@ -289,6 +289,6 @@ namespace __select_int\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif // __cplusplus > 201103L\n+#endif // C++14\n \n #endif // _GLIBCXX_PARSE_NUMBERS_H"}, {"sha": "dc0a77e1a5f3aef715e961175dd25395364287e5", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -34,7 +34,7 @@\n #if __cplusplus >= 201402L\n \n #include <type_traits>\n-#include <limits>\n+#include <bits/int_limits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -55,7 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __rotl(_Tp __x, int __s) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n       const int __r = __s % _Nd;\n       if (__r == 0)\n \treturn __x;\n@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __rotr(_Tp __x, int __s) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n       const int __r = __s % _Nd;\n       if (__r == 0)\n \treturn __x;\n@@ -83,14 +83,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countl_zero(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      using std::__detail::__int_limits;\n+      constexpr auto _Nd = __int_limits<_Tp>::digits;\n \n       if (__x == 0)\n         return _Nd;\n \n-      constexpr auto _Nd_ull = numeric_limits<unsigned long long>::digits;\n-      constexpr auto _Nd_ul = numeric_limits<unsigned long>::digits;\n-      constexpr auto _Nd_u = numeric_limits<unsigned>::digits;\n+      constexpr auto _Nd_ull = __int_limits<unsigned long long>::digits;\n+      constexpr auto _Nd_ul = __int_limits<unsigned long>::digits;\n+      constexpr auto _Nd_u = __int_limits<unsigned>::digits;\n \n       if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \t{\n@@ -118,7 +119,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      constexpr int __diff = (2 * _Nd_ull) - _Nd;\n \t      return __builtin_clzll(__high) - __diff;\n \t    }\n-\t  constexpr auto __max_ull = numeric_limits<unsigned long long>::max();\n+\t  constexpr auto __max_ull = __int_limits<unsigned long long>::max();\n \t  unsigned long long __low = __x & __max_ull;\n \t  return (_Nd - _Nd_ull) + __builtin_clzll(__low);\n \t}\n@@ -128,23 +129,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countl_one(_Tp __x) noexcept\n     {\n-      if (__x == numeric_limits<_Tp>::max())\n-        return numeric_limits<_Tp>::digits;\n+      if (__x == __detail::__int_limits<_Tp>::max())\n+\treturn __detail::__int_limits<_Tp>::digits;\n       return std::__countl_zero<_Tp>((_Tp)~__x);\n     }\n \n   template<typename _Tp>\n     constexpr int\n     __countr_zero(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      using std::__detail::__int_limits;\n+      constexpr auto _Nd = __int_limits<_Tp>::digits;\n \n       if (__x == 0)\n         return _Nd;\n \n-      constexpr auto _Nd_ull = numeric_limits<unsigned long long>::digits;\n-      constexpr auto _Nd_ul = numeric_limits<unsigned long>::digits;\n-      constexpr auto _Nd_u = numeric_limits<unsigned>::digits;\n+      constexpr auto _Nd_ull = __int_limits<unsigned long long>::digits;\n+      constexpr auto _Nd_ul = __int_limits<unsigned long>::digits;\n+      constexpr auto _Nd_u = __int_limits<unsigned>::digits;\n \n       if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \treturn __builtin_ctz(__x);\n@@ -157,7 +159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  constexpr auto __max_ull = numeric_limits<unsigned long long>::max();\n+\t  constexpr auto __max_ull = __int_limits<unsigned long long>::max();\n \t  unsigned long long __low = __x & __max_ull;\n \t  if (__low != 0)\n \t    return __builtin_ctzll(__low);\n@@ -170,23 +172,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr int\n     __countr_one(_Tp __x) noexcept\n     {\n-      if (__x == numeric_limits<_Tp>::max())\n-        return numeric_limits<_Tp>::digits;\n+      if (__x == __detail::__int_limits<_Tp>::max())\n+\treturn __detail::__int_limits<_Tp>::digits;\n       return std::__countr_zero((_Tp)~__x);\n     }\n \n   template<typename _Tp>\n     constexpr int\n     __popcount(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      using std::__detail::__int_limits;\n+      constexpr auto _Nd = __int_limits<_Tp>::digits;\n \n       if (__x == 0)\n         return 0;\n \n-      constexpr auto _Nd_ull = numeric_limits<unsigned long long>::digits;\n-      constexpr auto _Nd_ul = numeric_limits<unsigned long>::digits;\n-      constexpr auto _Nd_u = numeric_limits<unsigned>::digits;\n+      constexpr auto _Nd_ull = __int_limits<unsigned long long>::digits;\n+      constexpr auto _Nd_ul = __int_limits<unsigned long>::digits;\n+      constexpr auto _Nd_u = __int_limits<unsigned>::digits;\n \n       if _GLIBCXX17_CONSTEXPR (_Nd <= _Nd_u)\n \treturn __builtin_popcount(__x);\n@@ -199,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  static_assert(_Nd <= (2 * _Nd_ull),\n \t\t\t\"Maximum supported integer size is 128-bit\");\n \n-\t  constexpr auto __max_ull = numeric_limits<unsigned long long>::max();\n+\t  constexpr auto __max_ull = __int_limits<unsigned long long>::max();\n \t  unsigned long long __low = __x & __max_ull;\n \t  unsigned long long __high = __x >> _Nd_ull;\n \t  return __builtin_popcountll(__low) + __builtin_popcountll(__high);\n@@ -215,7 +218,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __ceil2(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      using std::__detail::__int_limits;\n+      constexpr auto _Nd = __int_limits<_Tp>::digits;\n       if (__x == 0 || __x == 1)\n         return 1;\n       auto __shift_exponent = _Nd - std::__countl_zero((_Tp)(__x - 1u));\n@@ -226,7 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n       if (!__builtin_is_constant_evaluated())\n \t{\n-\t  __glibcxx_assert( __shift_exponent != numeric_limits<_Tp>::digits );\n+\t  __glibcxx_assert( __shift_exponent != __int_limits<_Tp>::digits );\n \t}\n #endif\n       using __promoted_type = decltype(__x << 1);\n@@ -247,7 +251,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __floor2(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n       if (__x == 0)\n         return 0;\n       return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));\n@@ -257,7 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr _Tp\n     __log2p1(_Tp __x) noexcept\n     {\n-      constexpr auto _Nd = numeric_limits<_Tp>::digits;\n+      constexpr auto _Nd = __detail::__int_limits<_Tp>::digits;\n       return _Nd - std::__countl_zero(__x);\n     }\n "}, {"sha": "9b5a1f7cab8af951ce54dd57d4608f032decb517", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -34,11 +34,11 @@\n #if __cplusplus >= 201402L\n \n #include <type_traits>\n-#include <limits>\n #include <bit>\t\t\t// for __log2p1\n #include <cctype>\t\t// for isdigit\n #include <bits/charconv.h>\t// for __to_chars_len, __to_chars_10_impl\n #include <bits/error_constants.h> // for std::errc\n+#include <bits/int_limits.h>\n \n // Define when floating point is supported: #define __cpp_lib_to_chars 201611L\n \n@@ -222,7 +222,7 @@ namespace __detail\n       to_chars_result __res;\n       unsigned __len;\n \n-      if _GLIBCXX17_CONSTEXPR (numeric_limits<_Tp>::digits <= 16)\n+      if _GLIBCXX17_CONSTEXPR (__detail::__int_limits<_Tp>::digits <= 16)\n \t{\n \t  __len = __val > 077777u ? 6u\n \t    : __val > 07777u ? 5u\n@@ -410,7 +410,7 @@ namespace __detail\n \t  __i++;\n \t}\n       __first += __i;\n-      return __i <= numeric_limits<_Tp>::digits;\n+      return __i <= __detail::__int_limits<_Tp>::digits;\n     }\n \n   /// std::from_chars implementation for integers in bases 3 to 10.\n@@ -529,7 +529,7 @@ namespace __detail\n     case 'Z':\n       return 35;\n     }\n-    return std::numeric_limits<unsigned char>::max();\n+    return __detail::__int_limits<unsigned char>::max();\n   }\n \n   /// std::from_chars implementation for integers in bases 11 to 26.\n@@ -616,10 +616,10 @@ namespace __detail\n \t\t}\n \t      else\n \t\t{\n-\t\t  if _GLIBCXX17_CONSTEXPR\n-\t\t    (numeric_limits<_Up>::max() > numeric_limits<_Tp>::max())\n+\t\t  if _GLIBCXX17_CONSTEXPR (__detail::__int_limits<_Up>::max()\n+\t\t      > __detail::__int_limits<_Tp>::max())\n \t\t    {\n-\t\t      if (__val > numeric_limits<_Tp>::max())\n+\t\t      if (__val > __detail::__int_limits<_Tp>::max())\n \t\t\t__res.ec = errc::result_out_of_range;\n \t\t      else\n \t\t\t__value = __val;"}, {"sha": "70c56d1d7e6ca8987684e8f408191f236ad641d3", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -33,13 +33,13 @@\n \n #if __cplusplus >= 201703L\n \n-#include <limits>\t\t\t// numeric_limits\n #include <memory>\t\t\t// align, allocator_arg_t, __uses_alloc\n #include <utility>\t\t\t// pair, index_sequence\n #include <vector>\t\t\t// vector\n #include <cstddef>\t\t\t// size_t, max_align_t, byte\n #include <shared_mutex>\t\t\t// shared_mutex\n #include <bits/functexcept.h>\n+#include <bits/int_limits.h>\n #include <debug/assertions.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -166,7 +166,7 @@ namespace pmr\n       allocate(size_t __n)\n       __attribute__((__returns_nonnull__))\n       {\n-\tif (__n > (numeric_limits<size_t>::max() / sizeof(_Tp)))\n+\tif (__n > (__detail::__int_limits<size_t>::max() / sizeof(_Tp)))\n \t  std::__throw_bad_alloc();\n \treturn static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\n \t\t\t\t\t\t       alignof(_Tp)));\n@@ -192,7 +192,7 @@ namespace pmr\n \t_Up*\n \tallocate_object(size_t __n = 1)\n \t{\n-\t  if ((std::numeric_limits<size_t>::max() / sizeof(_Up)) < __n)\n+\t  if ((__detail::__int_limits<size_t>::max() / sizeof(_Up)) < __n)\n \t    __throw_length_error(\"polymorphic_allocator::allocate_object\");\n \t  return static_cast<_Up*>(allocate_bytes(__n * sizeof(_Up),\n \t\t\t\t\t\t  alignof(_Up)));"}, {"sha": "bedad24979e24aa4845768597819cf29a29ebe93", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -37,10 +37,10 @@\n \n #if __cplusplus >= 201703L\n \n-#include <limits>\n #include <iosfwd>\n #include <bits/char_traits.h>\n #include <bits/functional_hash.h>\n+#include <bits/int_limits.h>\n #include <bits/range_access.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -456,10 +456,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_compare(size_type __n1, size_type __n2) noexcept\n       {\n \tconst difference_type __diff = __n1 - __n2;\n-\tif (__diff > std::numeric_limits<int>::max())\n-\t  return std::numeric_limits<int>::max();\n-\tif (__diff < std::numeric_limits<int>::min())\n-\t  return std::numeric_limits<int>::min();\n+\tif (__diff > __detail::__int_limits<int>::max())\n+\t  return __detail::__int_limits<int>::max();\n+\tif (__diff < __detail::__int_limits<int>::min())\n+\t  return __detail::__int_limits<int>::min();\n \treturn static_cast<int>(__diff);\n       }\n "}, {"sha": "dc6e8468af55aa6ce4d15b5335673829caa5a9af", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -76,7 +76,7 @@\n #include <initializer_list>\n \n #if __cplusplus > 201703L\n-#include <limits>\n+#include <bits/int_limits.h>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -460,15 +460,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       static_assert(__is_standard_integer<_Up>::value);\n       static_assert(__is_standard_integer<_Tp>::value);\n+      using std::__detail::__int_limits;\n \n       if constexpr (is_signed_v<_Tp> == is_signed_v<_Up>)\n-\treturn numeric_limits<_Up>::min() <= __t\n-\t  && __t <= numeric_limits<_Up>::max();\n+\treturn __int_limits<_Up>::min() <= __t\n+\t  && __t <= __int_limits<_Up>::max();\n       else if constexpr (is_signed_v<_Tp>)\n \treturn __t >= 0\n-\t  && make_unsigned_t<_Tp>(__t) <= numeric_limits<_Up>::max();\n+\t  && make_unsigned_t<_Tp>(__t) <= __int_limits<_Up>::max();\n       else\n-\treturn __t <= make_unsigned_t<_Up>(numeric_limits<_Up>::max());\n+\treturn __t <= make_unsigned_t<_Up>(__int_limits<_Up>::max());\n     }\n #endif // C++20\n #endif // C++17"}, {"sha": "077d9818dc807df539d3199347667398da04149a", "filename": "libstdc++-v3/testsuite/20_util/integer_comparisons/in_range_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_comparisons%2Fin_range_neg.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -34,3 +34,4 @@ bool k = std::in_range<int>(U'a'); // { dg-error \"here\" }\n bool l = std::in_range<char32_t>(97); // { dg-error \"here\" }\n \n // { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"incomplete type\" }"}, {"sha": "1e9b8983ed6f276bb72239bbd8b6bfc856a8b30b", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countl_one.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_one.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_one.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_one.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "8e2f42ab6ba9235a8516eac83d09cc3ea73abcf7", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countl_zero.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_zero.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_zero.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountl_zero.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "7f53b7116d1611c449aec979a062d5484e19f791", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countr_one.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_one.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_one.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_one.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "132722f037baf38c8e0ac388833d2b6dbfd2d60e", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/countr_zero.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_zero.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_zero.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fcountr_zero.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "62007ed6aeb7ed92e0980747b05f690e4d7c8182", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.count/popcount.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fpopcount.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fpopcount.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.count%2Fpopcount.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "f917efb5ef3927501b107b8f8318a990f28fa2c8", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/ceil2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename T>\n   constexpr T max = std::numeric_limits<T>::max();"}, {"sha": "b5391936e3deaded1722cef662cf5e8a0527df13", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/ceil2_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2_neg.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -20,6 +20,7 @@\n // { dg-xfail-run-if \"__glibcxx_assert in ceil2 should fail\" { *-*-* } }\n \n #include <bit>\n+#include <limits>\n \n // P1355R2: not a constant expression if the result is not representable\n "}, {"sha": "7d2321d6acf88edb7067a1049d58799ce361a0cb", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/floor2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Ffloor2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Ffloor2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Ffloor2.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "a0a4d89a54f575540337828e47df5217b1eee1e1", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/ispow2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fispow2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fispow2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fispow2.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "6f32d4afc1bfc512d8c3fc34e453a9a4021984e5", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/log2p1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Flog2p1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Flog2p1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Flog2p1.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr auto"}, {"sha": "b2525050e095db7d50aa7c6930f09f80add647f7", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.rotate/rotl.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotl.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr bool"}, {"sha": "bebf79d5d96171678b39faf31bac8091ef38eabc", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.rotate/rotr.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c03b53da9129ae2d5ac9629c4b874d0981a7d418/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.rotate%2Frotr.cc?ref=c03b53da9129ae2d5ac9629c4b874d0981a7d418", "patch": "@@ -19,6 +19,7 @@\n // { dg-do compile { target c++2a } }\n \n #include <bit>\n+#include <limits>\n \n template<typename UInt>\n constexpr bool"}]}