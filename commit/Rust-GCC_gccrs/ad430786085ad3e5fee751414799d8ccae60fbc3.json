{"sha": "ad430786085ad3e5fee751414799d8ccae60fbc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0MzA3ODYwODVhZDNlNWZlZTc1MTQxNDc5OWQ4Y2NhZTYwZmJjMw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-12T09:01:25Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-12T09:01:25Z"}, "message": "[Ada] Do not suppress checks in instances of internal generics\n\nThis patch removes suppression of checks in nested instances of internal\npackages. No test.\n\nThis was inconsistent: only for packages, not for subprograms. Only for\nnested instantiations, not library level ones. Not for GNAT units.\n\nFurthermore, the user should have control via pragma Suppress or\nswitches.\n\nFurthermore, without this change, there could be missing tampering\nchecks in Ada.Containers.\n\n2019-08-12  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch12.adb (Instantiate_Package_Body): Remove suppression of\n\tchecks in instances of internal units.\n\t* sem_ch6.adb (Analyze_Function_Return): Do not generate a\n\tconstraint check on an extended_return_statement if the subtype\n\tof the return object in the statement is identical to the return\n\tsubtype of the function.\n\nFrom-SVN: r274302", "tree": {"sha": "39ce70b3b644b915d3037da0176c43437c1eb356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39ce70b3b644b915d3037da0176c43437c1eb356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad430786085ad3e5fee751414799d8ccae60fbc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad430786085ad3e5fee751414799d8ccae60fbc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad430786085ad3e5fee751414799d8ccae60fbc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad430786085ad3e5fee751414799d8ccae60fbc3/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39571eeaeb6e993f259cc603c64d5483be5afc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39571eeaeb6e993f259cc603c64d5483be5afc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39571eeaeb6e993f259cc603c64d5483be5afc65"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "f2870e8dbc0dd1302ffb58f1902800947aba744a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad430786085ad3e5fee751414799d8ccae60fbc3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad430786085ad3e5fee751414799d8ccae60fbc3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad430786085ad3e5fee751414799d8ccae60fbc3", "patch": "@@ -1,3 +1,12 @@\n+2019-08-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Remove suppression of\n+\tchecks in instances of internal units.\n+\t* sem_ch6.adb (Analyze_Function_Return): Do not generate a\n+\tconstraint check on an extended_return_statement if the subtype\n+\tof the return object in the statement is identical to the return\n+\tsubtype of the function.\n+\n 2019-08-12  Bob Duff  <duff@adacore.com>\n \n \t* libgnat/a-cbmutr.adb (Is_Reachable): Declare Idx to be of the"}, {"sha": "1f3a397e6e40ed764256846921ef78801d6dab2c", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad430786085ad3e5fee751414799d8ccae60fbc3/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad430786085ad3e5fee751414799d8ccae60fbc3/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=ad430786085ad3e5fee751414799d8ccae60fbc3", "patch": "@@ -11601,25 +11601,7 @@ package body Sem_Ch12 is\n             --  indicate that the body instance is to be delayed.\n \n             Install_Body (Act_Body, Inst_Node, Gen_Body, Gen_Decl);\n-\n-            --  Now analyze the body. We turn off all checks if this is an\n-            --  internal unit, since there is no reason to have checks on for\n-            --  any predefined run-time library code. All such code is designed\n-            --  to be compiled with checks off.\n-\n-            --  Note that we do NOT apply this criterion to children of GNAT\n-            --  The latter units must suppress checks explicitly if needed.\n-\n-            --  We also do not suppress checks in CodePeer mode where we are\n-            --  interested in finding possible runtime errors.\n-\n-            if not CodePeer_Mode\n-              and then In_Predefined_Unit (Gen_Decl)\n-            then\n-               Analyze (Act_Body, Suppress => All_Checks);\n-            else\n-               Analyze (Act_Body);\n-            end if;\n+            Analyze (Act_Body);\n          end if;\n \n          Inherit_Context (Gen_Body, Inst_Node);"}, {"sha": "e176535dec63c53a7fabb27afd468929c2ce54a5", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad430786085ad3e5fee751414799d8ccae60fbc3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad430786085ad3e5fee751414799d8ccae60fbc3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ad430786085ad3e5fee751414799d8ccae60fbc3", "patch": "@@ -1056,9 +1056,17 @@ package body Sem_Ch6 is\n          --  Apply constraint check. Note that this is done before the implicit\n          --  conversion of the expression done for anonymous access types to\n          --  ensure correct generation of the null-excluding check associated\n-         --  with null-excluding expressions found in return statements.\n-\n-         Apply_Constraint_Check (Expr, R_Type);\n+         --  with null-excluding expressions found in return statements. We\n+         --  don't need a check if the subtype of the return object is the\n+         --  same as the result subtype of the function.\n+\n+         if Nkind (N) /= N_Extended_Return_Statement\n+           or else Nkind (Obj_Decl) /= N_Object_Declaration\n+           or else Nkind (Object_Definition (Obj_Decl)) not in N_Has_Entity\n+           or else Entity (Object_Definition (Obj_Decl)) /= R_Type\n+         then\n+            Apply_Constraint_Check (Expr, R_Type);\n+         end if;\n \n          --  The return value is converted to the return type of the function,\n          --  which implies a predicate check if the return type is predicated."}]}