{"sha": "ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5ZGQ5MmVlYWY2Y2MzOGJjZjE0Yjc1YzJhZmViODI1ZDVhYTNhNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-28T14:30:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-28T14:30:34Z"}, "message": "sse.md (extsuffix): New code attribute.\n\n\t* config/i386/sse.md (extsuffix): New code attribute.\n\t(sse4_1_<code>v8qiv8hi2): Macroize insn from sse4_1_extendv8qiv8hi2\n\tand sse4_1_zero_extendv8qiv8hi2 using any_extend code iterator.\n\t(sse4_1_<code>v4qiv4si2): Ditto from sse4_1_extendv4qiv4si2\n\tand sse4_1_zero_extendv4qiv4si2.\n\t(sse4_1_<code>v2qiv2di2): Ditto from sse4_1_extendv2qiv2di2\n\tand sse4_1_zero_extendv2qiv2di2.\n\t(sse4_1_<code>v4hiv4si2): Ditto from sse4_1_extendv4hiv4si2\n\tand sse4_1_zero_extendv4hiv4si2.\n\t(sse4_1_<code>v2hiv2di2): Ditto from sse4_1_extendv2hiv2di2\n\tand sse4_1_zero_extendv2hiv2di2.\n\t(sse4_1_extendv2siv2di2): Ditto from sse4_1_extendv2siv2di2\n\tand sse4_1_zero_extendv2siv2di2\n\n\t(<s>mulv8hi3_highpart): Macroize expander from {u,s}mulv8hi3_highpart\n\tusing any_extend code iterator.\n\t(*avx_<s>mulv8hi3_highpart): Macroize insn from\n\t*avx_{u,s}mulv8hi3_highpart using any_extend code iterator.\n\t(*<s>mulv8hi3_highpart): Ditto from *{u,s}mulv8hi3_highpart.\n\n\t* config/i386/i386.c (ix86_expand_sse4_unpack): Update for renamed\n\tgen_sse4_1_sign_extend* functions.\n\t(struct builtin_description bdesc_args): Ditto.\n\nFrom-SVN: r163616", "tree": {"sha": "e195c4a34dc951323daa4f7a5838452dd9e51a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e195c4a34dc951323daa4f7a5838452dd9e51a02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/comments", "author": null, "committer": null, "parents": [{"sha": "4c6e913ce840bc2007c5dc55ea8b11a442dde091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6e913ce840bc2007c5dc55ea8b11a442dde091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6e913ce840bc2007c5dc55ea8b11a442dde091"}], "stats": {"total": 248, "additions": 69, "deletions": 179}, "files": [{"sha": "196b4269534c108aa16351ab7b05e2900b8c9589", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "patch": "@@ -1,3 +1,29 @@\n+2010-08-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (extsuffix): New code attribute.\n+\t(sse4_1_<code>v8qiv8hi2): Macroize insn from sse4_1_extendv8qiv8hi2\n+\tand sse4_1_zero_extendv8qiv8hi2 using any_extend code iterator.\n+\t(sse4_1_<code>v4qiv4si2): Ditto from sse4_1_extendv4qiv4si2\n+\tand sse4_1_zero_extendv4qiv4si2.\n+\t(sse4_1_<code>v2qiv2di2): Ditto from sse4_1_extendv2qiv2di2\n+\tand sse4_1_zero_extendv2qiv2di2.\n+\t(sse4_1_<code>v4hiv4si2): Ditto from sse4_1_extendv4hiv4si2\n+\tand sse4_1_zero_extendv4hiv4si2.\n+\t(sse4_1_<code>v2hiv2di2): Ditto from sse4_1_extendv2hiv2di2\n+\tand sse4_1_zero_extendv2hiv2di2.\n+\t(sse4_1_extendv2siv2di2): Ditto from sse4_1_extendv2siv2di2\n+\tand sse4_1_zero_extendv2siv2di2\n+\n+\t(<s>mulv8hi3_highpart): Macroize expander from {u,s}mulv8hi3_highpart\n+\tusing any_extend code iterator.\n+\t(*avx_<s>mulv8hi3_highpart): Macroize insn from\n+\t*avx_{u,s}mulv8hi3_highpart using any_extend code iterator.\n+\t(*<s>mulv8hi3_highpart): Ditto from *{u,s}mulv8hi3_highpart.\n+\n+\t* config/i386/i386.c (ix86_expand_sse4_unpack): Update for renamed\n+\tgen_sse4_1_sign_extend* functions.\n+\t(struct builtin_description bdesc_args): Ditto.\n+\n 2010-08-27  Xinliang David Li  <davidxl@google.com>\n \n \tPR/45422\n@@ -245,10 +271,10 @@\n 2010-08-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.md (enabled): Test the value of arch_enabled\n-        rather than just using it.\n+\trather than just using it.\n \n 2010-08-27  Olivier Hainque  <hainque@adacore.com>\n-            Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dse.c (group_info.base_mem, get_group_info): Use BLKmode to\n \tcover all the possible offsets from this base."}, {"sha": "db08244b11d57ad0fe9307115ed8ab3220d08633", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "patch": "@@ -17397,19 +17397,19 @@ ix86_expand_sse4_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n       if (unsigned_p)\n \tunpack = gen_sse4_1_zero_extendv8qiv8hi2;\n       else\n-\tunpack = gen_sse4_1_extendv8qiv8hi2;\n+\tunpack = gen_sse4_1_sign_extendv8qiv8hi2;\n       break;\n     case V8HImode:\n       if (unsigned_p)\n \tunpack = gen_sse4_1_zero_extendv4hiv4si2;\n       else\n-\tunpack = gen_sse4_1_extendv4hiv4si2;\n+\tunpack = gen_sse4_1_sign_extendv4hiv4si2;\n       break;\n     case V4SImode:\n       if (unsigned_p)\n \tunpack = gen_sse4_1_zero_extendv2siv2di2;\n       else\n-\tunpack = gen_sse4_1_extendv2siv2di2;\n+\tunpack = gen_sse4_1_sign_extendv2siv2di2;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -23075,12 +23075,12 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendvb, \"__builtin_ia32_pblendvb128\", IX86_BUILTIN_PBLENDVB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_pblendw, \"__builtin_ia32_pblendw128\", IX86_BUILTIN_PBLENDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT },\n \n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv8qiv8hi2, \"__builtin_ia32_pmovsxbw128\", IX86_BUILTIN_PMOVSXBW128, UNKNOWN, (int) V8HI_FTYPE_V16QI },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv4qiv4si2, \"__builtin_ia32_pmovsxbd128\", IX86_BUILTIN_PMOVSXBD128, UNKNOWN, (int) V4SI_FTYPE_V16QI },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2qiv2di2, \"__builtin_ia32_pmovsxbq128\", IX86_BUILTIN_PMOVSXBQ128, UNKNOWN, (int) V2DI_FTYPE_V16QI },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv4hiv4si2, \"__builtin_ia32_pmovsxwd128\", IX86_BUILTIN_PMOVSXWD128, UNKNOWN, (int) V4SI_FTYPE_V8HI },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2hiv2di2, \"__builtin_ia32_pmovsxwq128\", IX86_BUILTIN_PMOVSXWQ128, UNKNOWN, (int) V2DI_FTYPE_V8HI },\n-  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_extendv2siv2di2, \"__builtin_ia32_pmovsxdq128\", IX86_BUILTIN_PMOVSXDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_sign_extendv8qiv8hi2, \"__builtin_ia32_pmovsxbw128\", IX86_BUILTIN_PMOVSXBW128, UNKNOWN, (int) V8HI_FTYPE_V16QI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_sign_extendv4qiv4si2, \"__builtin_ia32_pmovsxbd128\", IX86_BUILTIN_PMOVSXBD128, UNKNOWN, (int) V4SI_FTYPE_V16QI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_sign_extendv2qiv2di2, \"__builtin_ia32_pmovsxbq128\", IX86_BUILTIN_PMOVSXBQ128, UNKNOWN, (int) V2DI_FTYPE_V16QI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_sign_extendv4hiv4si2, \"__builtin_ia32_pmovsxwd128\", IX86_BUILTIN_PMOVSXWD128, UNKNOWN, (int) V4SI_FTYPE_V8HI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_sign_extendv2hiv2di2, \"__builtin_ia32_pmovsxwq128\", IX86_BUILTIN_PMOVSXWQ128, UNKNOWN, (int) V2DI_FTYPE_V8HI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_sign_extendv2siv2di2, \"__builtin_ia32_pmovsxdq128\", IX86_BUILTIN_PMOVSXDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv8qiv8hi2, \"__builtin_ia32_pmovzxbw128\", IX86_BUILTIN_PMOVZXBW128, UNKNOWN, (int) V8HI_FTYPE_V16QI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv4qiv4si2, \"__builtin_ia32_pmovzxbd128\", IX86_BUILTIN_PMOVZXBD128, UNKNOWN, (int) V4SI_FTYPE_V16QI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_zero_extendv2qiv2di2, \"__builtin_ia32_pmovzxbq128\", IX86_BUILTIN_PMOVZXBQ128, UNKNOWN, (int) V2DI_FTYPE_V16QI },"}, {"sha": "a3488cf4b7411b2f2e12cadcf5eb83664dbc161d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 168, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ee9dd92eeaf6cc38bcf14b75c2afeb825d5aa3a4", "patch": "@@ -19,6 +19,9 @@\n ;; <http://www.gnu.org/licenses/>.\n \n \n+;; Instruction suffix for sign and zero extensions.\n+(define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n+\n ;; 16 byte integral modes handled by SSE\n (define_mode_iterator SSEMODEI [V16QI V8HI V4SI V2DI])\n \n@@ -5243,92 +5246,47 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"smulv8hi3_highpart\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-        (truncate:V8HI\n-          (lshiftrt:V8SI\n-            (mult:V8SI\n-              (sign_extend:V8SI\n-                (match_operand:V8HI 1 \"nonimmediate_operand\" \"\"))\n-              (sign_extend:V8SI\n-                (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))\n-            (const_int 16))))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n-\n-(define_insn \"*avxv8hi3_highpart\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(truncate:V8HI\n-\t  (lshiftrt:V8SI\n-\t    (mult:V8SI\n-\t      (sign_extend:V8SI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\"))\n-\t      (sign_extend:V8SI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n-\t    (const_int 16))))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"vpmulhw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*smulv8hi3_highpart\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(truncate:V8HI\n-\t  (lshiftrt:V8SI\n-\t    (mult:V8SI\n-\t      (sign_extend:V8SI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\"))\n-\t      (sign_extend:V8SI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n-\t    (const_int 16))))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"pmulhw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_expand \"umulv8hi3_highpart\"\n+(define_expand \"<s>mulv8hi3_highpart\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n         (truncate:V8HI\n           (lshiftrt:V8SI\n             (mult:V8SI\n-              (zero_extend:V8SI\n+              (any_extend:V8SI\n                 (match_operand:V8HI 1 \"nonimmediate_operand\" \"\"))\n-              (zero_extend:V8SI\n+              (any_extend:V8SI\n                 (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))\n             (const_int 16))))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n \n-(define_insn \"*avx_umulv8hi3_highpart\"\n+(define_insn \"*avx_<s>mulv8hi3_highpart\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(truncate:V8HI\n \t  (lshiftrt:V8SI\n \t    (mult:V8SI\n-\t      (zero_extend:V8SI\n+\t      (any_extend:V8SI\n \t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\"))\n-\t      (zero_extend:V8SI\n+\t      (any_extend:V8SI\n \t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n \t    (const_int 16))))]\n   \"TARGET_AVX && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"vpmulhuw\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"vpmulh<u>w\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*umulv8hi3_highpart\"\n+(define_insn \"*<s>mulv8hi3_highpart\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(truncate:V8HI\n \t  (lshiftrt:V8SI\n \t    (mult:V8SI\n-\t      (zero_extend:V8SI\n+\t      (any_extend:V8SI\n \t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\"))\n-\t      (zero_extend:V8SI\n+\t      (any_extend:V8SI\n \t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n \t    (const_int 16))))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"pmulhuw\\t{%2, %0|%0, %2}\"\n+  \"pmulh<u>w\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n@@ -9592,9 +9550,9 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_extendv8qiv8hi2\"\n+(define_insn \"sse4_1_<code>v8qiv8hi2\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(sign_extend:V8HI\n+\t(any_extend:V8HI\n \t  (vec_select:V8QI\n \t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n@@ -9606,175 +9564,81 @@\n \t\t       (const_int 6)\n \t\t       (const_int 7)]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpmovsxbw\\t{%1, %0|%0, %1}\"\n+  \"%vpmov<extsuffix>bw\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_extendv4qiv4si2\"\n+(define_insn \"sse4_1_<code>v4qiv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(sign_extend:V4SI\n+\t(any_extend:V4SI\n \t  (vec_select:V4QI\n \t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 1)\n \t\t       (const_int 2)\n \t\t       (const_int 3)]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpmovsxbd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_extendv2qiv2di2\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(sign_extend:V2DI\n-\t  (vec_select:V2QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 1)]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpmovsxbq\\t{%1, %0|%0, %1}\"\n+  \"%vpmov<extsuffix>bd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_extendv4hiv4si2\"\n+(define_insn \"sse4_1_<code>v4hiv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(sign_extend:V4SI\n+\t(any_extend:V4SI\n \t  (vec_select:V4HI\n \t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 1)\n \t\t       (const_int 2)\n \t\t       (const_int 3)]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpmovsxwd\\t{%1, %0|%0, %1}\"\n+  \"%vpmov<extsuffix>wd\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_extendv2hiv2di2\"\n+(define_insn \"sse4_1_<code>v2qiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(sign_extend:V2DI\n-\t  (vec_select:V2HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 1)]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpmovsxwq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_extendv2siv2di2\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(sign_extend:V2DI\n-\t  (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 1)]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpmovsxdq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_zero_extendv8qiv8hi2\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(zero_extend:V8HI\n-\t  (vec_select:V8QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 1)\n-\t\t       (const_int 2)\n-\t\t       (const_int 3)\n-\t\t       (const_int 4)\n-\t\t       (const_int 5)\n-\t\t       (const_int 6)\n-\t\t       (const_int 7)]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpmovzxbw\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_zero_extendv4qiv4si2\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(zero_extend:V4SI\n-\t  (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 1)\n-\t\t       (const_int 2)\n-\t\t       (const_int 3)]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpmovzxbd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_zero_extendv2qiv2di2\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(zero_extend:V2DI\n+\t(any_extend:V2DI\n \t  (vec_select:V2QI\n \t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 1)]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpmovzxbq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_1_zero_extendv4hiv4si2\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(zero_extend:V4SI\n-\t  (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 1)\n-\t\t       (const_int 2)\n-\t\t       (const_int 3)]))))]\n-  \"TARGET_SSE4_1\"\n-  \"%vpmovzxwd\\t{%1, %0|%0, %1}\"\n+  \"%vpmov<extsuffix>bq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_zero_extendv2hiv2di2\"\n+(define_insn \"sse4_1_<code>v2hiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(zero_extend:V2DI\n+\t(any_extend:V2DI\n \t  (vec_select:V2HI\n \t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 1)]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpmovzxwq\\t{%1, %0|%0, %1}\"\n+  \"%vpmov<extsuffix>wq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_zero_extendv2siv2di2\"\n+(define_insn \"sse4_1_<code>v2siv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(zero_extend:V2DI\n+\t(any_extend:V2DI\n \t  (vec_select:V2SI\n \t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 1)]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpmovzxdq\\t{%1, %0|%0, %1}\"\n+  \"%vpmov<extsuffix>dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")"}]}