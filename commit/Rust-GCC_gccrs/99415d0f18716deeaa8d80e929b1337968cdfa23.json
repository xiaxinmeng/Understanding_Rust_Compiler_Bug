{"sha": "99415d0f18716deeaa8d80e929b1337968cdfa23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0MTVkMGYxODcxNmRlZWFhOGQ4MGU5MjliMTMzNzk2OGNkZmEyMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-15T12:44:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-15T15:00:20Z"}, "message": "tree-optimization/98834 - fix optimization regression with _b_c_p\n\nThe following makes FRE optimize a load we formerly required\nSRA + CCP for which now run after we get rid of all __builtin_constant_p\ncalls.\n\n2021-03-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98834\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle missing\n\tsubsetting by truncating the access size.\n\n\t* g++.dg/opt/pr98834.C: New testcase.", "tree": {"sha": "60084803a0a4462c80258b679890806c159408f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60084803a0a4462c80258b679890806c159408f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99415d0f18716deeaa8d80e929b1337968cdfa23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99415d0f18716deeaa8d80e929b1337968cdfa23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99415d0f18716deeaa8d80e929b1337968cdfa23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99415d0f18716deeaa8d80e929b1337968cdfa23/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce586ff83e5bf86956cb24e646c7b9a21283ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce586ff83e5bf86956cb24e646c7b9a21283ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce586ff83e5bf86956cb24e646c7b9a21283ce4"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "fafd3227181d37ae8c569cf1ab6e3897a3acd437", "filename": "gcc/testsuite/g++.dg/opt/pr98834.C", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99415d0f18716deeaa8d80e929b1337968cdfa23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr98834.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99415d0f18716deeaa8d80e929b1337968cdfa23/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr98834.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr98834.C?ref=99415d0f18716deeaa8d80e929b1337968cdfa23", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target c++17 } */\n+/* { dg-options \"-O2 -fdump-tree-fre3\" } */\n+\n+struct _Base\n+{ \n+  int _M_data = 0;\n+};\n+\n+struct _Wrapper : _Base\n+{ \n+  _Wrapper(int) {}\n+\n+  bool _M_is_constprop() { return __builtin_constant_p(_M_data); }\n+};\n+\n+struct _Impl\n+{ \n+  _Wrapper _S_multiplies(_Wrapper __x, _Wrapper __y)\n+  { \n+    if (__x._M_is_constprop() || __y._M_is_constprop())\n+      return __y;\n+    return 0;\n+  }\n+};\n+\n+struct _TupleData\n+{ \n+  _Wrapper first;\n+  int second;\n+};\n+\n+struct _Tuple : _TupleData\n+{ \n+  template <typename _Fp>\n+    _Tuple _M_apply_per_chunk(_Fp __fun, _Tuple __y)\n+    { \n+      return {__fun(first, __y.first), second};\n+    }\n+};\n+\n+struct _ImplFixed\n+{ \n+  static _Tuple _S_multiplies(_Tuple __x, _Tuple __y)\n+  { \n+    return __x._M_apply_per_chunk(\n+             []( auto __xx, auto __yy) {\n+               return _Impl()._S_multiplies(__xx, __yy);\n+             },\n+             __y);\n+  }\n+};\n+\n+class simd\n+{\n+public:\n+  [[__gnu__::__always_inline__]] friend simd operator*(simd __x, simd __y)\n+  { return _ImplFixed::_S_multiplies(__x._M_data, __y._M_data); }\n+\n+  simd(_Tuple __init) : _M_data(__init) {}\n+\n+  _Tuple _M_data;\n+};\n+\n+int main()\n+{ \n+  simd({0, 0}) * simd({0, 0});\n+}\n+\n+/* FRE3 should elide all conditionals in the remaining main.  */\n+/* { dg-final { scan-tree-dump-times \"<bb\" 1 \"fre3\" } } */"}, {"sha": "99759a8744a8781c4d699f03d510add45765c23a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99415d0f18716deeaa8d80e929b1337968cdfa23/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99415d0f18716deeaa8d80e929b1337968cdfa23/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=99415d0f18716deeaa8d80e929b1337968cdfa23", "patch": "@@ -3215,7 +3215,17 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \treturn (void *)-1;\n       /* This can happen with bitfields.  */\n       if (maybe_ne (ref->size, r.size))\n-\treturn (void *)-1;\n+\t{\n+\t  /* If the access lacks some subsetting simply apply that by\n+\t     shortening it.  That in the end can only be successful\n+\t     if we can pun the lookup result which in turn requires\n+\t     exact offsets.  */\n+\t  if (known_eq (r.size, r.max_size)\n+\t      && known_lt (ref->size, r.size))\n+\t    r.size = r.max_size = ref->size;\n+\t  else\n+\t    return (void *)-1;\n+\t}\n       *ref = r;\n \n       /* Do not update last seen VUSE after translating.  */"}]}