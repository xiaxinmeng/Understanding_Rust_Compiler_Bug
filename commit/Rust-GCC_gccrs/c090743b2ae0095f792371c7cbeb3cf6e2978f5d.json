{"sha": "c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "node_id": "C_kwDOANBUbNoAKGMwOTA3NDNiMmFlMDA5NWY3OTIzNzFjN2NiZWIzY2Y2ZTI5NzhmNWQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-11T10:18:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-29T10:13:48Z"}, "message": "Fix is_gimple_condexpr vs is_gimple_condexpr_for_cond\n\nThe following fixes wrongly used is_gimple_condexpr and makes\ncanonicalize_cond_expr_cond honor either, delaying final checking\nto callers where all but two in ifcombine are doing the correct\nthing already.\n\nThis fixes bugs but is now mainly in preparation for making\nCOND_EXPRs in GIMPLE assignments no longer have a GENERIC expression\nas condition operand like we already transitioned VEC_COND_EXPR earlier.\n\n2022-04-11  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-expr.cc (is_gimple_condexpr): Adjust comment.\n\t(canonicalize_cond_expr_cond): Move here from gimple.cc,\n\tallow both COND_EXPR and GIMPLE_COND forms.\n\t* gimple-expr.h (canonicalize_cond_expr_cond): Declare.\n\t* gimple.cc (canonicalize_cond_expr_cond): Remove here.\n\t* gimple.h (canonicalize_cond_expr_cond): Likewise.\n\t* gimple-loop-versioning.cc (loop_versioning::version_loop):\n\tUse is_gimple_condexpr_for_cond.\n\t* tree-parloops.cc (gen_parallel_loop): Likewise.\n\t* tree-ssa-ifcombine.cc (ifcombine_ifandif): Check for\n\ta proper cond expr after canonicalize_cond_expr_cond.\n\tUse is_gimple_condexpr_for_cond where appropriate.\n\t* tree-ssa-loop-manip.cc (determine_exit_conditions): Likewise.\n\t* tree-vect-loop-manip.cc (slpeel_add_loop_guard): Likewise.", "tree": {"sha": "3526e923d4e83fd10ccb3f13dc23214b24203c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3526e923d4e83fd10ccb3f13dc23214b24203c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aa61e08ade43fa1e94dc0e951f11739bbd2ae40"}], "stats": {"total": 124, "additions": 70, "deletions": 54}, "files": [{"sha": "5d10c24ed1b26dbd091a35f9c4216c301f0a6a2d", "filename": "gcc/gimple-expr.cc", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -614,7 +614,8 @@ is_gimple_condexpr_1 (tree t, bool allow_traps, bool allow_cplx)\n \t      && is_gimple_val (TREE_OPERAND (t, 1))));\n }\n \n-/* Return true if T is a GIMPLE condition.  */\n+/* Return true if T is a condition operand in a GIMPLE assignment\n+   with a COND_EXPR RHS.  */\n \n bool\n is_gimple_condexpr (tree t)\n@@ -632,6 +633,50 @@ is_gimple_condexpr_for_cond (tree t)\n   return is_gimple_condexpr_1 (t, false, true);\n }\n \n+/* Canonicalize a tree T for use in a COND_EXPR as conditional.  Returns\n+   a canonicalized tree that is valid for a COND_EXPR or NULL_TREE, if\n+   we failed to create one.  */\n+\n+tree\n+canonicalize_cond_expr_cond (tree t)\n+{\n+  /* Strip conversions around boolean operations.  */\n+  if (CONVERT_EXPR_P (t)\n+      && (truth_value_p (TREE_CODE (TREE_OPERAND (t, 0)))\n+\t  || TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0)))\n+\t     == BOOLEAN_TYPE))\n+    t = TREE_OPERAND (t, 0);\n+\n+  /* For !x use x == 0.  */\n+  if (TREE_CODE (t) == TRUTH_NOT_EXPR)\n+    {\n+      tree top0 = TREE_OPERAND (t, 0);\n+      t = build2 (EQ_EXPR, TREE_TYPE (t),\n+\t\t  top0, build_int_cst (TREE_TYPE (top0), 0));\n+    }\n+  /* For cmp ? 1 : 0 use cmp.  */\n+  else if (TREE_CODE (t) == COND_EXPR\n+\t   && COMPARISON_CLASS_P (TREE_OPERAND (t, 0))\n+\t   && integer_onep (TREE_OPERAND (t, 1))\n+\t   && integer_zerop (TREE_OPERAND (t, 2)))\n+    {\n+      tree top0 = TREE_OPERAND (t, 0);\n+      t = build2 (TREE_CODE (top0), TREE_TYPE (t),\n+\t\t  TREE_OPERAND (top0, 0), TREE_OPERAND (top0, 1));\n+    }\n+  /* For x ^ y use x != y.  */\n+  else if (TREE_CODE (t) == BIT_XOR_EXPR)\n+    t = build2 (NE_EXPR, TREE_TYPE (t),\n+\t\tTREE_OPERAND (t, 0), TREE_OPERAND (t, 1));\n+\n+  /* We don't know where this will be used so allow both traps and\n+     _Complex.  The caller is responsible for more precise checking.  */\n+  if (is_gimple_condexpr_1 (t, true, true))\n+    return t;\n+\n+  return NULL_TREE;\n+}\n+\n /* Return true if T is a gimple address.  */\n \n bool"}, {"sha": "ba53b80843709da52faac4df828bab81d57c147b", "filename": "gcc/gimple-expr.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.h?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -56,6 +56,7 @@ extern bool is_gimple_mem_ref_addr (tree);\n extern void flush_mark_addressable_queue (void);\n extern void mark_addressable (tree);\n extern bool is_gimple_reg_rhs (tree);\n+extern tree canonicalize_cond_expr_cond (tree);\n \n /* Return true if a conversion from either type of TYPE1 and TYPE2\n    to the other is not required.  Otherwise return false.  */"}, {"sha": "5838ce733eb0c491e1599e81a2b1a4baaad34932", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -1681,7 +1681,8 @@ loop_versioning::version_loop (class loop *loop)\n \n   /* Convert the condition into a suitable gcond.  */\n   gimple_seq stmts = NULL;\n-  cond = force_gimple_operand_1 (cond, &stmts, is_gimple_condexpr, NULL_TREE);\n+  cond = force_gimple_operand_1 (cond, &stmts, is_gimple_condexpr_for_cond,\n+\t\t\t\t NULL_TREE);\n \n   /* Version the loop.  */\n   initialize_original_copy_tables ();"}, {"sha": "b70ab4d25230374f0c90f93d77f9caf8d57587ee", "filename": "gcc/gimple.cc", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -2380,48 +2380,6 @@ const unsigned char gimple_rhs_class_table[] = {\n #undef DEFTREECODE\n #undef END_OF_BASE_TREE_CODES\n \n-/* Canonicalize a tree T for use in a COND_EXPR as conditional.  Returns\n-   a canonicalized tree that is valid for a COND_EXPR or NULL_TREE, if\n-   we failed to create one.  */\n-\n-tree\n-canonicalize_cond_expr_cond (tree t)\n-{\n-  /* Strip conversions around boolean operations.  */\n-  if (CONVERT_EXPR_P (t)\n-      && (truth_value_p (TREE_CODE (TREE_OPERAND (t, 0)))\n-          || TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0)))\n-\t     == BOOLEAN_TYPE))\n-    t = TREE_OPERAND (t, 0);\n-\n-  /* For !x use x == 0.  */\n-  if (TREE_CODE (t) == TRUTH_NOT_EXPR)\n-    {\n-      tree top0 = TREE_OPERAND (t, 0);\n-      t = build2 (EQ_EXPR, TREE_TYPE (t),\n-\t\t  top0, build_int_cst (TREE_TYPE (top0), 0));\n-    }\n-  /* For cmp ? 1 : 0 use cmp.  */\n-  else if (TREE_CODE (t) == COND_EXPR\n-\t   && COMPARISON_CLASS_P (TREE_OPERAND (t, 0))\n-\t   && integer_onep (TREE_OPERAND (t, 1))\n-\t   && integer_zerop (TREE_OPERAND (t, 2)))\n-    {\n-      tree top0 = TREE_OPERAND (t, 0);\n-      t = build2 (TREE_CODE (top0), TREE_TYPE (t),\n-\t\t  TREE_OPERAND (top0, 0), TREE_OPERAND (top0, 1));\n-    }\n-  /* For x ^ y use x != y.  */\n-  else if (TREE_CODE (t) == BIT_XOR_EXPR)\n-    t = build2 (NE_EXPR, TREE_TYPE (t),\n-\t\tTREE_OPERAND (t, 0), TREE_OPERAND (t, 1));\n-  \n-  if (is_gimple_condexpr (t))\n-    return t;\n-\n-  return NULL_TREE;\n-}\n-\n /* Build a GIMPLE_CALL identical to STMT but skipping the arguments in\n    the positions marked by the set ARGS_TO_SKIP.  */\n "}, {"sha": "6b1e89ad74e6b22dd534ff48e48fef688032f844", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -1611,7 +1611,6 @@ bool gimple_could_trap_p (const gimple *);\n bool gimple_assign_rhs_could_trap_p (gimple *);\n extern void dump_gimple_statistics (void);\n unsigned get_gimple_rhs_num_ops (enum tree_code);\n-extern tree canonicalize_cond_expr_cond (tree);\n gcall *gimple_call_copy_skip_args (gcall *, bitmap);\n extern bool gimple_compare_field_offset (tree, tree);\n extern tree gimple_unsigned_type (tree);"}, {"sha": "da1069683a3edd1c435074fb170668c6547eeb1d", "filename": "gcc/tree-parloops.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-parloops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-parloops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -3070,7 +3070,7 @@ gen_parallel_loop (class loop *loop,\n \t= force_gimple_operand (many_iterations_cond, &stmts, false, NULL_TREE);\n       if (stmts)\n \tgsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n-      if (!is_gimple_condexpr (many_iterations_cond))\n+      if (!is_gimple_condexpr_for_cond (many_iterations_cond))\n \t{\n \t  many_iterations_cond\n \t    = force_gimple_operand (many_iterations_cond, &stmts,"}, {"sha": "3a4ab694b7172e4c5cdb2a26cd8517437aa40f47", "filename": "gcc/tree-ssa-ifcombine.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-ssa-ifcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-ssa-ifcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -432,6 +432,12 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       t = canonicalize_cond_expr_cond (t);\n       if (!t)\n \treturn false;\n+      if (!is_gimple_condexpr_for_cond (t))\n+\t{\n+\t  gsi = gsi_for_stmt (inner_cond);\n+\t  t = force_gimple_operand_gsi_1 (&gsi, t, is_gimple_condexpr_for_cond,\n+\t\t\t\t\t  NULL, true, GSI_SAME_STMT);\n+\t}\n       gimple_cond_set_condition_from_tree (inner_cond, t);\n       update_stmt (inner_cond);\n \n@@ -512,6 +518,12 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       t = canonicalize_cond_expr_cond (t);\n       if (!t)\n \treturn false;\n+      if (!is_gimple_condexpr_for_cond (t))\n+\t{\n+\t  gsi = gsi_for_stmt (inner_cond);\n+\t  t = force_gimple_operand_gsi_1 (&gsi, t, is_gimple_condexpr_for_cond,\n+\t\t\t\t\t  NULL, true, GSI_SAME_STMT);\n+\t}\n       gimple_cond_set_condition_from_tree (inner_cond, t);\n       update_stmt (inner_cond);\n \n@@ -593,8 +605,8 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n \t      result_inv = false;\n \t    }\n \t  gsi = gsi_for_stmt (inner_cond);\n-\t  t = force_gimple_operand_gsi_1 (&gsi, t, is_gimple_condexpr, NULL, true,\n-\t\t\t\t\t  GSI_SAME_STMT);\n+\t  t = force_gimple_operand_gsi_1 (&gsi, t, is_gimple_condexpr_for_cond,\n+\t\t\t\t\t  NULL, true, GSI_SAME_STMT);\n         }\n       if (result_inv)\n \tt = fold_build1 (TRUTH_NOT_EXPR, TREE_TYPE (t), t);"}, {"sha": "66964254cb5a489358b34a30827e50f625020f38", "filename": "gcc/tree-ssa-loop-manip.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-ssa-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-ssa-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -1096,7 +1096,7 @@ determine_exit_conditions (class loop *loop, class tree_niter_desc *desc,\n   /* cond now may be a gimple comparison, which would be OK, but also any\n      other gimple rhs (say a && b).  In this case we need to force it to\n      operand.  */\n-  if (!is_gimple_condexpr (cond))\n+  if (!is_gimple_condexpr_for_cond (cond))\n     {\n       cond = force_gimple_operand (cond, &stmts, true, NULL_TREE);\n       if (stmts)"}, {"sha": "1d4337eb2612f8e5d6eccb84c34578c219f66bbb", "filename": "gcc/tree-vect-loop-manip.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-vect-loop-manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c090743b2ae0095f792371c7cbeb3cf6e2978f5d/gcc%2Ftree-vect-loop-manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.cc?ref=c090743b2ae0095f792371c7cbeb3cf6e2978f5d", "patch": "@@ -1260,8 +1260,8 @@ slpeel_add_loop_guard (basic_block guard_bb, tree cond,\n   enter_e->flags |= EDGE_FALSE_VALUE;\n   gsi = gsi_last_bb (guard_bb);\n \n-  cond = force_gimple_operand_1 (cond, &gimplify_stmt_list, is_gimple_condexpr,\n-\t\t\t\t NULL_TREE);\n+  cond = force_gimple_operand_1 (cond, &gimplify_stmt_list,\n+\t\t\t\t is_gimple_condexpr_for_cond, NULL_TREE);\n   if (gimplify_stmt_list)\n     gsi_insert_seq_after (&gsi, gimplify_stmt_list, GSI_NEW_STMT);\n \n@@ -3478,8 +3478,8 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n     {\n       gimple_seq tem = NULL;\n       cond_expr = force_gimple_operand_1 (unshare_expr (cond_expr),\n-\t\t\t\t\t  &tem,\n-\t\t\t\t\t  is_gimple_condexpr, NULL_TREE);\n+\t\t\t\t\t  &tem, is_gimple_condexpr_for_cond,\n+\t\t\t\t\t  NULL_TREE);\n       gimple_seq_add_seq (&cond_expr_stmt_list, tem);\n     }\n \n@@ -3521,7 +3521,7 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n \n   cond_expr = force_gimple_operand_1 (unshare_expr (cond_expr),\n \t\t\t\t      &gimplify_stmt_list,\n-\t\t\t\t      is_gimple_condexpr, NULL_TREE);\n+\t\t\t\t      is_gimple_condexpr_for_cond, NULL_TREE);\n   gimple_seq_add_seq (&cond_expr_stmt_list, gimplify_stmt_list);\n \n   /* Compute the outermost loop cond_expr and cond_expr_stmt_list are"}]}