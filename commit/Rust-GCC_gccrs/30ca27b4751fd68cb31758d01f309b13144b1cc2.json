{"sha": "30ca27b4751fd68cb31758d01f309b13144b1cc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjYTI3YjQ3NTFmZDY4Y2IzMTc1OGQwMWYzMDliMTMxNDRiMWNjMg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@cygnus.com", "date": "1999-03-08T13:34:12Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-03-08T13:34:12Z"}, "message": "lex.c (java_parse_end_comment): Take extra parameter (next char).\n\n\ufffd\n\t* lex.c (java_parse_end_comment):  Take extra parameter (next char).\n\t* class.c (build_utf8_ref):  Fix possible name class/ambiguity.\n\t* class.c (layout_class_method):  A static method in a base class\n\tis never overridden, so treat it like it doesn't exist.\n\tHowever, do complain about private non-static method overriding\n\tpublic static method.\n\t* parse.y:  Don't set unused INITIALIZED_P flag.\n\t* java-tree.h (INITIALIZED_P):  Removed no-longer needed flag.\n\t* parse.y (find_expr_with_wfl):  Optimize tail-calls.\n\t(build_array_from_name):  Re-order &index[string] to &string[index].\n\t* parse.y (java_complete_tree):  Don't call patch_assignment if rhs is\n\terror_mark (it might catch more errors, but it is more likely to lose).\n\nFrom-SVN: r25641", "tree": {"sha": "d51147db527f31da8d998c1a963c2cbb9027228f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51147db527f31da8d998c1a963c2cbb9027228f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30ca27b4751fd68cb31758d01f309b13144b1cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ca27b4751fd68cb31758d01f309b13144b1cc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ca27b4751fd68cb31758d01f309b13144b1cc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ca27b4751fd68cb31758d01f309b13144b1cc2/comments", "author": null, "committer": null, "parents": [{"sha": "c0d87ff6f9eaecba3c1e1936cd52074385131a96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d87ff6f9eaecba3c1e1936cd52074385131a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d87ff6f9eaecba3c1e1936cd52074385131a96"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "db553f28ad1ee3f95679b92354f84d242aebf165", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=30ca27b4751fd68cb31758d01f309b13144b1cc2", "patch": "@@ -1,3 +1,23 @@\n+Fri Mar  5 15:17:29 1999  Per Bothner  <bothner@cygnus.com>\n+\n+\t* lex.c (java_parse_end_comment):  Take extra parameter (next char).\n+\n+\t* class.c (build_utf8_ref):  Fix possible name class/ambiguity.\n+\n+\t* class.c (layout_class_method):  A static method in a base class\n+\tis never overridden, so treat it like it doesn't exist.\n+\tHowever, do complain about private non-static method overriding\n+\tpublic static method.\n+\n+\t* parse.y:  Don't set unused INITIALIZED_P flag.\n+\t* java-tree.h (INITIALIZED_P):  Removed no-longer needed flag.\n+\n+\t* parse.y (find_expr_with_wfl):  Optimize tail-calls.\n+\t(build_array_from_name):  Re-order &index[string] to &string[index].\n+\n+\t* parse.y (java_complete_tree):  Don't call patch_assignment if rhs is\n+\terror_mark (it might catch more errors, but it is more likely to lose).\n+\n Sat Mar  6 11:17:16 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (jcf-parse.o): Depend on $(PARSE_H)."}, {"sha": "e4f4224b415ed309e31e7e2046e76d7ffd43067d", "filename": "gcc/java/class.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=30ca27b4751fd68cb31758d01f309b13144b1cc2", "patch": "@@ -569,6 +569,8 @@ build_utf8_ref (name)\n   /* Build a unique identifier based on buf. */\n   sprintf(buf, \"_Utf%d\", ++utf8_count);\n   buf_ptr = &buf[strlen (buf)];\n+  if (name_len > 0 && name_ptr[0] >= '0' && name_ptr[0] <= '9')\n+    *buf_ptr++ = '_';\n   while (--name_len >= 0)\n     {\n       unsigned char c = *name_ptr++;\n@@ -1627,11 +1629,10 @@ layout_class_method (this_class, super_class, method_decl, dtable_count)\n \tbuild_java_argument_signature (TREE_TYPE (method_decl));\n       tree super_method = lookup_argument_method (super_class, method_name,\n \t\t\t\t\t\t  method_sig);\n-      if (super_method != NULL_TREE)\n+      if (super_method != NULL_TREE && ! METHOD_PRIVATE (super_method))\n \t{\n \t  DECL_VINDEX (method_decl) = DECL_VINDEX (super_method);\n-\t  if (DECL_VINDEX (method_decl) == NULL_TREE &&\n-\t      ! TREE_PRIVATE (method_decl))\n+\t  if (DECL_VINDEX (method_decl) == NULL_TREE)\n \t    error_with_decl (method_decl,\n \t\t\t     \"non-static method '%s' overrides static method\");\n #if 0"}, {"sha": "62b69f4f72541d9b2a5916c756f680371dc6c3af", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=30ca27b4751fd68cb31758d01f309b13144b1cc2", "patch": "@@ -90,7 +90,6 @@ struct JCF;\n    6: METHOD_TRANSIENT (in FUNCTION_DECL)\n       LABEL_CHANGED (in LABEL_DECL)\n       CLASS_SUPER (in TYPE_DECL, ACC_SUPER flag)\n-      INITIALIZED_P (in FIELD_DECL, VAR_DECL, PARM_DECL)\n    7: DECL_CONSTRUCTOR_P (in FUNCTION_DECL).\n */\n \n@@ -634,10 +633,6 @@ extern int encode_newarray_type PROTO ((tree));\n #define FIELD_VOLATILE(DECL) DECL_LANG_FLAG_4 (DECL)\n #define FIELD_TRANSIENT(DECL) DECL_LANG_FLAG_5 (DECL)\n \n-/* Initialized flag on variable/field/parm decl */\n-\n-#define INITIALIZED_P(DECL) DECL_LANG_FLAG_6 (DECL)\n-\n /* Access flags etc for a class (a TYPE_DECL): */\n \n #define CLASS_PUBLIC(DECL) DECL_LANG_FLAG_1 (DECL)"}, {"sha": "8c40d47ac69eae7b843cf3c8cc08d847f505b15f", "filename": "gcc/java/lex.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30ca27b4751fd68cb31758d01f309b13144b1cc2/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=30ca27b4751fd68cb31758d01f309b13144b1cc2", "patch": "@@ -64,7 +64,7 @@ static void java_store_unicode PROTO ((struct java_line *, unicode_t, int));\n static unicode_t java_parse_escape_sequence PROTO (());\n static int java_letter_or_digit_p PROTO ((unicode_t));\n static int java_parse_doc_section PROTO ((unicode_t));\n-static void java_parse_end_comment PROTO (());\n+static void java_parse_end_comment PROTO ((unicode_t));\n static unicode_t java_get_unicode PROTO (());\n static unicode_t java_read_unicode PROTO ((int, int *));\n static void java_store_unicode PROTO ((struct java_line *, unicode_t, int));\n@@ -366,13 +366,14 @@ java_lineterminator (c)\n     return 0;\n }\n \n-/* Parse the end of a C style comment */\n+/* Parse the end of a C style comment.\n+ * C is the first character after the '/*'. */\n static void\n-java_parse_end_comment ()\n+java_parse_end_comment (c)\n+     unicode_t c;\n {\n-  unicode_t c;\n \n-  for (c = java_get_unicode ();; c = java_get_unicode ())\n+  for ( ;; c = java_get_unicode ())\n     {\n       switch (c)\n \t{\n@@ -559,8 +560,9 @@ java_lex (java_lval)\n       switch (c = java_get_unicode ())\n \t{\n \tcase '/':\n-\t  for (c = java_get_unicode ();;c = java_get_unicode ())\n+\t  for (;;)\n \t    {\n+\t      c = java_get_unicode ();\n \t      if (c == UEOF)\n \t\tjava_lex_error (\"Comment not terminated at end of input\", 0);\n \t      if (c == '\\n')\t/* ULT */\n@@ -576,10 +578,8 @@ java_lex (java_lval)\n \t      else if (java_parse_doc_section (c))\n \t\tgoto step1;\n \t    }\n-\t  else\n-\t    java_unget_unicode ();\n \n-\t  java_parse_end_comment ();\n+\t  java_parse_end_comment (c);\n \t  goto step1;\n \t  break;\n \tdefault:"}]}