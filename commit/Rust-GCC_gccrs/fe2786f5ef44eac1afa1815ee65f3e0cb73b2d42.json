{"sha": "fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyNzg2ZjVlZjQ0ZWFjMWFmYTE4MTVlZTY1ZjNlMGNiNzNiMmQ0Mg==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2009-08-10T03:56:39Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-08-10T03:56:39Z"}, "message": "alpha.c (alpha_initialize_trampoline): Initialize VMS trampoline IAW ABI for bounded procedure calls.\n\n\n\t* config/alpha/alpha.c (alpha_initialize_trampoline):\n\tInitialize VMS trampoline IAW ABI for bounded procedure calls.\n\t(alpha_start_function): Emit transfer address on nested functions\n\tfor VMS trampoline call.\n\t* config/alpha/t-vms (LIB2FUNCS_EXTRA): Remove vms_tramp.asm\n\tsince no longer used.\n\t* config/alpha/vms-tramp.asm: Remove.\n\t* config/alpha/vms.h (TRAMPOLINE_TEMPLATE): Leave undefined\n\tsince now only data initialized at runtime.\n\nFrom-SVN: r150609", "tree": {"sha": "b448869639596c5864567fc6f5cdb61760df170f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b448869639596c5864567fc6f5cdb61760df170f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/comments", "author": null, "committer": null, "parents": [{"sha": "c889a16f4bc05169d3b3bbdea5ab4c024e516a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c889a16f4bc05169d3b3bbdea5ab4c024e516a57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c889a16f4bc05169d3b3bbdea5ab4c024e516a57"}], "stats": {"total": 118, "additions": 56, "deletions": 62}, "files": [{"sha": "d49ba9c81f6a20015a921e2d576647c8a4c1ed49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "patch": "@@ -1,3 +1,15 @@\n+2009-08-09  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c (alpha_initialize_trampoline):\n+\tInitialize VMS trampoline IAW ABI for bounded procedure calls.\n+\t(alpha_start_function): Emit transfer address on nested functions\n+\tfor VMS trampoline call.\n+\t* config/alpha/t-vms (LIB2FUNCS_EXTRA): Remove vms_tramp.asm\n+\tsince no longer used.\n+\t* config/alpha/vms-tramp.asm: Remove.\n+\t* config/alpha/vms.h (TRAMPOLINE_TEMPLATE): Leave undefined\n+\tsince now only data initialized at runtime.\n+\n 2009-08-09  Douglas B Rupp  <rupp@gnat.com>\n \n \t* config/alpha/vms.h (HANDLE_SYSV_PRAGMA): Define."}, {"sha": "7658a02c87f4696cd75d52fb3859664c4b135064", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "patch": "@@ -5491,6 +5491,35 @@ alpha_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt,\n   cxt = convert_memory_address (mode, cxt);\n #endif\n \n+  if (TARGET_ABI_OPEN_VMS)\n+    {\n+      rtx temp1, traddr;\n+      const char *fnname;\n+      char *trname;\n+\n+      /* Construct the name of the trampoline entry point.  */\n+      fnname = XSTR (fnaddr, 0);\n+      trname = (char *) alloca (strlen (fnname) + 5);\n+      strcpy (trname, fnname);\n+      strcat (trname, \"..tr\");\n+      traddr = gen_rtx_SYMBOL_REF\n+\t(mode, ggc_alloc_string (trname, strlen (trname) + 1));\n+\n+      /* Trampoline (or \"bounded\") procedure descriptor is constructed from\n+\t the function's procedure descriptor with certain fields zeroed IAW\n+\t the VMS calling standard. This is stored in the first quadword.  */\n+      temp1 = force_reg (DImode, gen_rtx_MEM (DImode, fnaddr));\n+      temp1 = expand_and (DImode, temp1,\n+\t\t\t  GEN_INT (0xffff0fff0000fff0), NULL_RTX);\n+      addr = memory_address (mode, plus_constant (tramp, 0));\n+      emit_move_insn (gen_rtx_MEM (DImode, addr), temp1);\n+\n+      /* Trampoline transfer address is stored in the second quadword\n+\t of the trampoline.  */\n+      addr = memory_address (mode, plus_constant (tramp, 8));\n+      emit_move_insn (gen_rtx_MEM (mode, addr), traddr);\n+    }\n+\n   /* Store function address and CXT.  */\n   addr = memory_address (mode, plus_constant (tramp, fnofs));\n   emit_move_insn (gen_rtx_MEM (mode, addr), fnaddr);\n@@ -7838,6 +7867,7 @@ alpha_start_function (FILE *file, const char *fnname,\n   /* Offset from base reg to register save area.  */\n   HOST_WIDE_INT reg_offset;\n   char *entry_label = (char *) alloca (strlen (fnname) + 6);\n+  char *tramp_label = (char *) alloca (strlen (fnname) + 6);\n   int i;\n \n   /* Don't emit an extern directive for functions defined in the same file.  */\n@@ -7926,6 +7956,20 @@ alpha_start_function (FILE *file, const char *fnname,\n \t  fputs (\"..ng:\\n\", file);\n \t}\n     }\n+  /* Nested functions on VMS that are potentially called via trampoline\n+     get a special transfer entry point that loads the called functions\n+     procedure descriptor and static chain.  */\n+   if (TARGET_ABI_OPEN_VMS\n+       && !TREE_PUBLIC (decl)\n+       && DECL_CONTEXT (decl)\n+       && !TYPE_P (DECL_CONTEXT (decl)))\n+     {\n+\tstrcpy (tramp_label, fnname);\n+\tstrcat (tramp_label, \"..tr\");\n+\tASM_OUTPUT_LABEL (file, tramp_label);\n+\tfprintf (file, \"\\tldq $1,24($27)\\n\");\n+\tfprintf (file, \"\\tldq $27,16($27)\\n\");\n+     }\n \n   strcpy (entry_label, fnname);\n   if (TARGET_ABI_OPEN_VMS)"}, {"sha": "a323a646ff66f8c6a59f61818a16419cf5d05e2d", "filename": "gcc/config/alpha/t-vms", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms?ref=fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "patch": "@@ -17,8 +17,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB2FUNCS_EXTRA = $(srcdir)/config/alpha/vms_tramp.asm\n-\n # VMS_EXTRA_PARTS is defined in x-vms and represent object files that\n # are only needed for VMS targets, but can only be compiled on a VMS host\n # (because they need DEC C)."}, {"sha": "8238fbb20311239ead199568f5d73d90f2ccc3a9", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=fe2786f5ef44eac1afa1815ee65f3e0cb73b2d42", "patch": "@@ -235,21 +235,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n \f\n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.\n-\n-   The trampoline should set the static chain pointer to value placed\n-   into the trampoline and should branch to the specified routine.  \n-   Note that $27 has been set to the address of the trampoline, so we can\n-   use it for addressability of the two data items.  */\n-\n #undef TRAMPOLINE_TEMPLATE\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n-{\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.quad 0\\n\");\t\t\\\n-  fprintf (FILE, \"\\t.linkage __tramp\\n\");\t\\\n-  fprintf (FILE, \"\\t.quad 0\\n\");\t\t\\\n-}\n \n /* Length in units of the trampoline for entering a nested function.  */\n "}, {"sha": "84a4e9cfab9ba8262d5b46a1ad505e5f2378cfda", "filename": "gcc/config/alpha/vms_tramp.asm", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c889a16f4bc05169d3b3bbdea5ab4c024e516a57/gcc%2Fconfig%2Falpha%2Fvms_tramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c889a16f4bc05169d3b3bbdea5ab4c024e516a57/gcc%2Fconfig%2Falpha%2Fvms_tramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms_tramp.asm?ref=c889a16f4bc05169d3b3bbdea5ab4c024e516a57", "patch": "@@ -1,46 +0,0 @@\n-/* VMS trampoline for nested functions\n-   Copyright (C) 2001, 2008, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-;# Alpha OpenVMS trampoline\n-;#\n-\t.set noreorder\n-\t.set volatile\n-\t.set noat\n-.text\n-\t.align 3\n-\t.globl __tramp\n-\t.ent __tramp\n-__tramp..en:\n-\n-.link\n-\t.align 3\n-__tramp:\n-\t.pdesc __tramp..en,null\n-.text\n-\tldq $1,24($27)\n-\tldq $27,16($27)\n-\tldq $28,8($27)\n-\tjmp $31,($28),0\n-\t.end __tramp"}]}