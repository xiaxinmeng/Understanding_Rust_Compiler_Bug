{"sha": "e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjNjRjN2RjMTU0YjlhMDE4YjEzN2Q3Njc5Y2QzY2Q4ZTRkNTY4ZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-08T17:39:49Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-08T17:39:49Z"}, "message": "rs6000.c (branch_island): Define.\n\n\t* config/rs6000/rs6000.c (branch_island): Define.  Define a VEC of it.\n\t(branch_island_list): Delete.\n\t(branch_islands): Declare.\n\t(add_compiler_branch_island): Adjust for branch_islands instead of\n\tbranch_island_list.\n\t(macho_branch_islands): Likewise.\n\t(no_previous_def): Likewise.\n\t(get_prev_label): Likewise.\n\nFrom-SVN: r163011", "tree": {"sha": "8f3daa27d33b9bbe2bc5a94b4c007f4b427137aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f3daa27d33b9bbe2bc5a94b4c007f4b427137aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d/comments", "author": null, "committer": null, "parents": [{"sha": "b4a4e6ae0e06179b1ab6f91af0f6a60ca301aa75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4e6ae0e06179b1ab6f91af0f6a60ca301aa75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a4e6ae0e06179b1ab6f91af0f6a60ca301aa75"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "4c565b3fd05144c51a9474dfd7de5fb041782ac2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "patch": "@@ -1,3 +1,14 @@\n+2010-08-08  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (branch_island): Define.  Define a VEC of it.\n+\t(branch_island_list): Delete.\n+\t(branch_islands): Declare.\n+\t(add_compiler_branch_island): Adjust for branch_islands instead of\n+\tbranch_island_list.\n+\t(macho_branch_islands): Likewise.\n+\t(no_previous_def): Likewise.\n+\t(get_prev_label): Likewise.\n+\n 2010-08-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR boehm-gc/34544"}, {"sha": "5d465b89449d01b645d1c4152cca1f8aa32a75d0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7c64c7dc154b9a018b137d7679cd3cd8e4d568d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e7c64c7dc154b9a018b137d7679cd3cd8e4d568d", "patch": "@@ -24499,7 +24499,16 @@ rs6000_fatal_bad_address (rtx op)\n \n #if TARGET_MACHO\n \n-static tree branch_island_list = 0;\n+typedef struct branch_island_d {\n+  tree function_name;\n+  tree label_name;\n+  int line_number;\n+} branch_island;\n+\n+DEF_VEC_O(branch_island);\n+DEF_VEC_ALLOC_O(branch_island,gc);\n+\n+static VEC(branch_island,gc) *branch_islands;\n \n /* Remember to generate a branch island for far calls to the given\n    function.  */\n@@ -24508,37 +24517,29 @@ static void\n add_compiler_branch_island (tree label_name, tree function_name,\n \t\t\t    int line_number)\n {\n-  tree branch_island = build_tree_list (function_name, label_name);\n-  TREE_TYPE (branch_island) = build_int_cst (NULL_TREE, line_number);\n-  TREE_CHAIN (branch_island) = branch_island_list;\n-  branch_island_list = branch_island;\n-}\n+  branch_island *bi = VEC_safe_push (branch_island, gc, branch_islands, NULL);\n \n-#define BRANCH_ISLAND_LABEL_NAME(BRANCH_ISLAND)     TREE_VALUE (BRANCH_ISLAND)\n-#define BRANCH_ISLAND_FUNCTION_NAME(BRANCH_ISLAND)  TREE_PURPOSE (BRANCH_ISLAND)\n-#define BRANCH_ISLAND_LINE_NUMBER(BRANCH_ISLAND)    \\\n-\t\tTREE_INT_CST_LOW (TREE_TYPE (BRANCH_ISLAND))\n+  bi->function_name = function_name;\n+  bi->label_name = label_name;\n+  bi->line_number = line_number;\n+}\n \n-/* Generate far-jump branch islands for everything on the\n-   branch_island_list.  Invoked immediately after the last instruction\n-   of the epilogue has been emitted; the branch-islands must be\n-   appended to, and contiguous with, the function body.  Mach-O stubs\n-   are generated in machopic_output_stub().  */\n+/* Generate far-jump branch islands for everything recorded in\n+   branch_islands.  Invoked immediately after the last instruction of\n+   the epilogue has been emitted; the branch islands must be appended\n+   to, and contiguous with, the function body.  Mach-O stubs are\n+   generated in machopic_output_stub().  */\n \n static void\n macho_branch_islands (void)\n {\n   char tmp_buf[512];\n-  tree branch_island;\n \n-  for (branch_island = branch_island_list;\n-       branch_island;\n-       branch_island = TREE_CHAIN (branch_island))\n+  while (!VEC_empty (branch_island, branch_islands))\n     {\n-      const char *label =\n-\tIDENTIFIER_POINTER (BRANCH_ISLAND_LABEL_NAME (branch_island));\n-      const char *name  =\n-\tIDENTIFIER_POINTER (BRANCH_ISLAND_FUNCTION_NAME (branch_island));\n+      branch_island *bi = VEC_last (branch_island, branch_islands);\n+      const char *label = IDENTIFIER_POINTER (bi->label_name);\n+      const char *name = IDENTIFIER_POINTER (bi->function_name);\n       char name_buf[512];\n       /* Cheap copy of the details from the Darwin ASM_OUTPUT_LABELREF().  */\n       if (name[0] == '*' || name[0] == '&')\n@@ -24552,7 +24553,7 @@ macho_branch_islands (void)\n       strcat (tmp_buf, label);\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n       if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\tdbxout_stabd (N_SLINE, BRANCH_ISLAND_LINE_NUMBER (branch_island));\n+\tdbxout_stabd (N_SLINE, bi->line_number);\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n       if (flag_pic)\n \t{\n@@ -24589,11 +24590,10 @@ macho_branch_islands (void)\n       output_asm_insn (tmp_buf, 0);\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n       if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\tdbxout_stabd (N_SLINE, BRANCH_ISLAND_LINE_NUMBER (branch_island));\n+\tdbxout_stabd (N_SLINE, bi->line_number);\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n+      VEC_pop (branch_island, branch_islands);\n     }\n-\n-  branch_island_list = 0;\n }\n \n /* NO_PREVIOUS_DEF checks in the link list whether the function name is\n@@ -24602,11 +24602,11 @@ macho_branch_islands (void)\n static int\n no_previous_def (tree function_name)\n {\n-  tree branch_island;\n-  for (branch_island = branch_island_list;\n-       branch_island;\n-       branch_island = TREE_CHAIN (branch_island))\n-    if (function_name == BRANCH_ISLAND_FUNCTION_NAME (branch_island))\n+  branch_island *bi;\n+  unsigned ix;\n+\n+  for (ix = 0; VEC_iterate (branch_island, branch_islands, ix, bi); ix++)\n+    if (function_name == bi->function_name)\n       return 0;\n   return 1;\n }\n@@ -24617,13 +24617,13 @@ no_previous_def (tree function_name)\n static tree\n get_prev_label (tree function_name)\n {\n-  tree branch_island;\n-  for (branch_island = branch_island_list;\n-       branch_island;\n-       branch_island = TREE_CHAIN (branch_island))\n-    if (function_name == BRANCH_ISLAND_FUNCTION_NAME (branch_island))\n-      return BRANCH_ISLAND_LABEL_NAME (branch_island);\n-  return 0;\n+  branch_island *bi;\n+  unsigned ix;\n+\n+  for (ix = 0; VEC_iterate (branch_island, branch_islands, ix, bi); ix++)\n+    if (function_name == bi->function_name)\n+      return bi->label_name;\n+  return NULL_TREE;\n }\n \n /* INSN is either a function call or a millicode call.  It may have an"}]}