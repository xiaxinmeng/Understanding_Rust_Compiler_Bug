{"sha": "642dc602f89b2c11d5d833a52f37b04427a27cab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyZGM2MDJmODliMmMxMWQ1ZDgzM2E1MmYzN2IwNDQyN2EyN2NhYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-15T21:54:05Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-18T19:47:30Z"}, "message": "c++: Regenerate cp/cfns.h.\n\nCurrent cfns.h includes register-qualified variables and that wouldn't\nplay well when bootstrapping with GCC that uses the C++17 dialect,\nbecause 'register' was removed in C++17.  Regenerating it using the\ncommand specified in cfns.h luckily cleaned this up.\n\n\t* cfns.h: Regenerated.", "tree": {"sha": "8ebc8fda44868ef698ab5ecc97aa5923eddfe75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebc8fda44868ef698ab5ecc97aa5923eddfe75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/642dc602f89b2c11d5d833a52f37b04427a27cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642dc602f89b2c11d5d833a52f37b04427a27cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642dc602f89b2c11d5d833a52f37b04427a27cab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642dc602f89b2c11d5d833a52f37b04427a27cab/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c917584aa9ec32934acf0082ed383b04f49fd174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c917584aa9ec32934acf0082ed383b04f49fd174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c917584aa9ec32934acf0082ed383b04f49fd174"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "98c2823f9c3e820eb7118b2c0639cb5c931b40c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642dc602f89b2c11d5d833a52f37b04427a27cab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642dc602f89b2c11d5d833a52f37b04427a27cab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=642dc602f89b2c11d5d833a52f37b04427a27cab", "patch": "@@ -1,3 +1,7 @@\n+2020-05-17  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cfns.h: Regenerated.\n+\n 2020-05-17  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (morph_fn_to_coro): Initialize the gro variable."}, {"sha": "26d90c26497ebedde8d863fc2e4b6956b078462d", "filename": "gcc/cp/cfns.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642dc602f89b2c11d5d833a52f37b04427a27cab/gcc%2Fcp%2Fcfns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642dc602f89b2c11d5d833a52f37b04427a27cab/gcc%2Fcp%2Fcfns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.h?ref=642dc602f89b2c11d5d833a52f37b04427a27cab", "patch": "@@ -1,4 +1,4 @@\n-/* C++ code produced by gperf version 3.0.4 */\n+/* C++ code produced by gperf version 3.1 */\n /* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p -L C++ --output-file cfns.h cfns.gperf  */\n \n #if !((' ' == 32) && ('!' == 33) && ('\"' == 34) && ('#' == 35) \\\n@@ -25,7 +25,7 @@\n       && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \\\n       && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))\n /* The character set is not based on ISO-646.  */\n-#error \"gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>.\"\n+#error \"gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>.\"\n #endif\n \n #line 4 \"cfns.gperf\"\n@@ -54,13 +54,13 @@ struct libc_name_struct { const char *name; int c_ver; };\n class libc_name\n {\n private:\n-  static inline unsigned int hash (const char *str, unsigned int len);\n+  static inline unsigned int hash (const char *str, size_t len);\n public:\n-  static const struct libc_name_struct *libc_name_p (const char *str, unsigned int len);\n+  static const struct libc_name_struct *libc_name_p (const char *str, size_t len);\n };\n \n inline unsigned int\n-libc_name::hash (register const char *str, register unsigned int len)\n+libc_name::hash (const char *str, size_t len)\n {\n   static const unsigned short asso_values[] =\n     {\n@@ -91,34 +91,34 @@ libc_name::hash (register const char *str, register unsigned int len)\n       1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,\n       1488, 1488, 1488, 1488, 1488, 1488, 1488\n     };\n-  register int hval = len;\n+  unsigned int hval = len;\n \n   switch (hval)\n     {\n       default:\n-        hval += asso_values[(unsigned char)str[5]+1];\n+        hval += asso_values[static_cast<unsigned char>(str[5]+1)];\n       /*FALLTHROUGH*/\n       case 5:\n-        hval += asso_values[(unsigned char)str[4]];\n+        hval += asso_values[static_cast<unsigned char>(str[4])];\n       /*FALLTHROUGH*/\n       case 4:\n-        hval += asso_values[(unsigned char)str[3]];\n+        hval += asso_values[static_cast<unsigned char>(str[3])];\n       /*FALLTHROUGH*/\n       case 3:\n-        hval += asso_values[(unsigned char)str[2]];\n+        hval += asso_values[static_cast<unsigned char>(str[2])];\n       /*FALLTHROUGH*/\n       case 2:\n-        hval += asso_values[(unsigned char)str[1]+1];\n+        hval += asso_values[static_cast<unsigned char>(str[1]+1)];\n       /*FALLTHROUGH*/\n       case 1:\n-        hval += asso_values[(unsigned char)str[0]];\n+        hval += asso_values[static_cast<unsigned char>(str[0])];\n         break;\n     }\n-  return hval + asso_values[(unsigned char)str[len - 1]];\n+  return hval + asso_values[static_cast<unsigned char>(str[len - 1])];\n }\n \n const struct libc_name_struct *\n-libc_name::libc_name_p (register const char *str, register unsigned int len)\n+libc_name::libc_name_p (const char *str, size_t len)\n {\n   enum\n     {\n@@ -1116,15 +1116,15 @@ libc_name::libc_name_p (register const char *str, register unsigned int len)\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)\n     {\n-      register int key = hash (str, len);\n+      unsigned int key = hash (str, len);\n \n-      if (key <= MAX_HASH_VALUE && key >= 0)\n+      if (key <= MAX_HASH_VALUE)\n         {\n-          register int index = lookup[key];\n+          int index = lookup[key];\n \n           if (index >= 0)\n             {\n-              register const char *s = wordlist[index].name;\n+              const char *s = wordlist[index].name;\n \n               if (*str == *s && !strcmp (str + 1, s + 1))\n                 return &wordlist[index];"}]}