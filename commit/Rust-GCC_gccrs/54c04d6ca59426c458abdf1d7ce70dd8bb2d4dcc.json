{"sha": "54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjMDRkNmNhNTk0MjZjNDU4YWJkZjFkN2NlNzBkZDhiYjJkNGRjYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-20T13:47:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-20T13:47:44Z"}, "message": "[multiple changes]\n\n2011-12-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_ch5.adb, s-diinio.adb, s-diinio.ads, sem_dim.adb,\n\tsem_dim.ads, sem_res.adb, s-stposu.adb, s-stposu.ads, sem_ch4.adb,\n\ts-diflio.adb, s-diflio.ads, exp_disp.adb, s-llflex.ads: Minor\n\treformatting.\n\t* aspects.ads: Dimension[_Aspects] are GNAT defined.\n\n2011-12-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Check\n\trenaming case.\n\n2011-12-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_cat.adb, sem_ch10.adb (Analyze_With_Clause): For a WITH clause on\n\ta child unit that is an illegal instantiation, mark the WITH clause in\n\terror.\n\t(Install_Siblings, Validate_Categorization_Dependency): Guard\n\tagainst WITH clause marked as in error.\n\nFrom-SVN: r182534", "tree": {"sha": "15af7387df12f47ba864c16fa622b467a31c568a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15af7387df12f47ba864c16fa622b467a31c568a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/comments", "author": null, "committer": null, "parents": [{"sha": "7b2aafc959f1ef24f111eb0d56b393bb2d315bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2aafc959f1ef24f111eb0d56b393bb2d315bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b2aafc959f1ef24f111eb0d56b393bb2d315bbf"}], "stats": {"total": 486, "additions": 264, "deletions": 222}, "files": [{"sha": "dda4bac929fdb15e25f5f15c5dffa8267e6a229d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -1,3 +1,24 @@\n+2011-12-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_ch5.adb, s-diinio.adb, s-diinio.ads, sem_dim.adb,\n+\tsem_dim.ads, sem_res.adb, s-stposu.adb, s-stposu.ads, sem_ch4.adb,\n+\ts-diflio.adb, s-diflio.ads, exp_disp.adb, s-llflex.ads: Minor\n+\treformatting.\n+\t* aspects.ads: Dimension[_Aspects] are GNAT defined.\n+\n+2011-12-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Check\n+\trenaming case.\n+\n+2011-12-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_cat.adb, sem_ch10.adb (Analyze_With_Clause): For a WITH clause on\n+\ta child unit that is an illegal instantiation, mark the WITH clause in\n+\terror.\n+\t(Install_Siblings, Validate_Categorization_Dependency): Guard\n+\tagainst WITH clause marked as in error.\n+\n 2011-12-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Resolve_Allocator): Warning on allocation"}, {"sha": "fe50df79421cbe7d9eaebc3c7cf2d660715b9479", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -54,8 +54,8 @@ package Aspects is\n       Aspect_Default_Component_Value,\n       Aspect_Default_Iterator,\n       Aspect_Default_Value,\n-      Aspect_Dimension,\n-      Aspect_Dimension_System,\n+      Aspect_Dimension,                     -- GNAT\n+      Aspect_Dimension_System,              -- GNAT\n       Aspect_Dispatching_Domain,\n       Aspect_Dynamic_Predicate,\n       Aspect_External_Tag,\n@@ -150,27 +150,29 @@ package Aspects is\n    --  The following array identifies all implementation defined aspects\n \n    Impl_Defined_Aspects : constant array (Aspect_Id) of Boolean :=\n-                            (Aspect_Object_Size          => True,\n-                             Aspect_Predicate            => True,\n-                             Aspect_Test_Case            => True,\n-                             Aspect_Value_Size           => True,\n-                             Aspect_Compiler_Unit        => True,\n-                             Aspect_Preelaborate_05      => True,\n-                             Aspect_Pure_05              => True,\n-                             Aspect_Pure_12              => True,\n-                             Aspect_Universal_Data       => True,\n-                             Aspect_Ada_2005             => True,\n+                            (Aspect_Ada_2005             => True,\n                              Aspect_Ada_2012             => True,\n+                             Aspect_Compiler_Unit        => True,\n+                             Aspect_Dimension            => True,\n+                             Aspect_Dimension_System     => True,\n                              Aspect_Favor_Top_Level      => True,\n                              Aspect_Inline_Always        => True,\n+                             Aspect_Object_Size          => True,\n                              Aspect_Persistent_BSS       => True,\n+                             Aspect_Predicate            => True,\n+                             Aspect_Preelaborate_05      => True,\n+                             Aspect_Pure_05              => True,\n+                             Aspect_Pure_12              => True,\n                              Aspect_Pure_Function        => True,\n                              Aspect_Shared               => True,\n                              Aspect_Suppress_Debug_Info  => True,\n+                             Aspect_Test_Case            => True,\n+                             Aspect_Universal_Data       => True,\n                              Aspect_Universal_Aliasing   => True,\n                              Aspect_Unmodified           => True,\n                              Aspect_Unreferenced         => True,\n                              Aspect_Unreferenced_Objects => True,\n+                             Aspect_Value_Size           => True,\n                              others                      => False);\n \n    --  The following array indicates aspects for which multiple occurrences of"}, {"sha": "23ffe90c5fd9186060917a4b8b6b649405ab84f2", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6512,7 +6512,7 @@ package body Exp_Disp is\n       --  Alignment\n \n       --  For CPP types we cannot rely on the value of 'Alignment provided\n-      --  by the backend to initialize this TSD field.\n+      --  by the backend to initialize this TSD field. Why not???\n \n       if Convention (Typ) = Convention_CPP\n         or else Is_CPP_Class (Root_Type (Typ))"}, {"sha": "46b24cd8d24319549a5df6e5e5ef5540daee5a92", "filename": "gcc/ada/s-diflio.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diflio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diflio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,9 +41,9 @@ package body System.Dim_Float_IO is\n      (File : File_Type;\n       Item : Num_Dim_Float;\n       Unit : String := \"\";\n-      Fore : Field := Default_Fore;\n-      Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp)\n+      Fore : Field  := Default_Fore;\n+      Aft  : Field  := Default_Aft;\n+      Exp  : Field  := Default_Exp)\n    is\n    begin\n       Num_Dim_Float_IO.Put (File, Item, Fore, Aft, Exp);\n@@ -53,9 +53,9 @@ package body System.Dim_Float_IO is\n    procedure Put\n      (Item : Num_Dim_Float;\n       Unit : String := \"\";\n-      Fore : Field := Default_Fore;\n-      Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp)\n+      Fore : Field  := Default_Fore;\n+      Aft  : Field  := Default_Aft;\n+      Exp  : Field  := Default_Exp)\n    is\n    begin\n       Num_Dim_Float_IO.Put (Item, Fore, Aft, Exp);\n@@ -66,8 +66,8 @@ package body System.Dim_Float_IO is\n      (To   : out String;\n       Item : Num_Dim_Float;\n       Unit : String := \"\";\n-      Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp)\n+      Aft  : Field  := Default_Aft;\n+      Exp  : Field  := Default_Exp)\n    is\n    begin\n       Num_Dim_Float_IO.Put (To, Item, Aft, Exp);"}, {"sha": "1b00d2774be00b5874f55495c4841201de653d93", "filename": "gcc/ada/s-diflio.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.ads?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,7 @@\n ------------------------------------------------------------------------------\n \n --  Note that this package should only be instantiated with a float dimensioned\n---  type.\n+--  type. Shouldn't this be checked???\n \n --  This package is a generic package that provides IO facilities for float\n --  dimensioned types.\n@@ -54,23 +54,23 @@ package System.Dim_Float_IO is\n      (File : File_Type;\n       Item : Num_Dim_Float;\n       Unit : String := \"\";\n-      Fore : Field := Default_Fore;\n-      Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Fore : Field  := Default_Fore;\n+      Aft  : Field  := Default_Aft;\n+      Exp  : Field  := Default_Exp);\n \n    procedure Put\n      (Item : Num_Dim_Float;\n       Unit : String := \"\";\n-      Fore : Field := Default_Fore;\n-      Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Fore : Field  := Default_Fore;\n+      Aft  : Field  := Default_Aft;\n+      Exp  : Field  := Default_Exp);\n \n    procedure Put\n      (To   : out String;\n       Item : Num_Dim_Float;\n       Unit : String := \"\";\n-      Aft  : Field := Default_Aft;\n-      Exp  : Field := Default_Exp);\n+      Aft  : Field  := Default_Aft;\n+      Exp  : Field  := Default_Exp);\n \n    pragma Inline (Put);\n "}, {"sha": "75f5768b71076ca2e414e83bd44ffce2c2e21741", "filename": "gcc/ada/s-diinio.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diinio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diinio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diinio.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,10 +38,10 @@ package body System.Dim_Integer_IO is\n    ---------\n \n    procedure Put\n-     (File : File_Type;\n-      Item : Num_Dim_Integer;\n-      Unit : String := \"\";\n-      Width : Field := Default_Width;\n+     (File  : File_Type;\n+      Item  : Num_Dim_Integer;\n+      Unit  : String      := \"\";\n+      Width : Field       := Default_Width;\n       Base  : Number_Base := Default_Base)\n \n    is\n@@ -51,9 +51,9 @@ package body System.Dim_Integer_IO is\n    end Put;\n \n    procedure Put\n-     (Item : Num_Dim_Integer;\n-      Unit : String := \"\";\n-      Width : Field := Default_Width;\n+     (Item  : Num_Dim_Integer;\n+      Unit  : String      := \"\";\n+      Width : Field       := Default_Width;\n       Base  : Number_Base := Default_Base)\n \n    is\n@@ -63,9 +63,9 @@ package body System.Dim_Integer_IO is\n    end Put;\n \n    procedure Put\n-     (To   : out String;\n-      Item : Num_Dim_Integer;\n-      Unit : String := \"\";\n+     (To    : out String;\n+      Item  : Num_Dim_Integer;\n+      Unit  : String      := \"\";\n       Base  : Number_Base := Default_Base)\n \n    is"}, {"sha": "ca29d3cec65b73aa726f39891bd4e0c379407362", "filename": "gcc/ada/s-diinio.ads", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diinio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-diinio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diinio.ads?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,7 @@\n ------------------------------------------------------------------------------\n \n --  Note that this package should only be instantiated with an integer\n---  dimensioned type\n+--  dimensioned type. Shouldn't this be checked ???\n \n --  This package is a generic package that provides IO facilities for integer\n --  dimensioned types.\n@@ -46,26 +46,26 @@ generic\n \n package System.Dim_Integer_IO is\n \n-   Default_Width : Field := Num_Dim_Integer'Width;\n+   Default_Width : Field       := Num_Dim_Integer'Width;\n    Default_Base  : Number_Base := 10;\n \n    procedure Put\n-     (File : File_Type;\n-      Item : Num_Dim_Integer;\n-      Unit : String := \"\";\n-      Width : Field := Default_Width;\n+     (File  : File_Type;\n+      Item  : Num_Dim_Integer;\n+      Unit  : String      := \"\";\n+      Width : Field       := Default_Width;\n       Base  : Number_Base := Default_Base);\n \n    procedure Put\n-     (Item : Num_Dim_Integer;\n-      Unit : String := \"\";\n-      Width : Field := Default_Width;\n+     (Item  : Num_Dim_Integer;\n+      Unit  : String      := \"\";\n+      Width : Field       := Default_Width;\n       Base  : Number_Base := Default_Base);\n \n    procedure Put\n-     (To   : out String;\n-      Item : Num_Dim_Integer;\n-      Unit : String := \"\";\n+     (To    : out String;\n+      Item  : Num_Dim_Integer;\n+      Unit  : String      := \"\";\n       Base  : Number_Base := Default_Base);\n \n    pragma Inline (Put);"}, {"sha": "bd6d8b290043c94c170705c7bae5d4773c57c735", "filename": "gcc/ada/s-llflex.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-llflex.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-llflex.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-llflex.ads?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--             Copyright (C) 2011, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "5ee3f2d5804f5cc5cc05070ab84bb71e386506c0", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -440,7 +440,6 @@ package body System.Storage_Pools.Subpools is\n    is\n    begin\n       raise Program_Error;\n-\n       return Pool.Subpools.Subpool;\n    end Default_Subpool_For_Pool;\n \n@@ -552,9 +551,7 @@ package body System.Storage_Pools.Subpools is\n    begin\n       --  Do nothing if the subpool was never used\n \n-      if Subpool.Owner = null\n-        or else Subpool.Node = null\n-      then\n+      if Subpool.Owner = null or else Subpool.Node = null then\n          return;\n       end if;\n \n@@ -619,8 +616,9 @@ package body System.Storage_Pools.Subpools is\n    -- Pool_Of_Subpool --\n    ---------------------\n \n-   function Pool_Of_Subpool (Subpool : not null Subpool_Handle)\n-     return access Root_Storage_Pool_With_Subpools'Class\n+   function Pool_Of_Subpool\n+     (Subpool : not null Subpool_Handle)\n+      return access Root_Storage_Pool_With_Subpools'Class\n    is\n    begin\n       return Subpool.Owner;"}, {"sha": "47099d290e82fc36a1ae5ee685e7c6568d640045", "filename": "gcc/ada/s-stposu.ads", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-stposu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fs-stposu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.ads?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -38,7 +38,7 @@ with System.Finalization_Masters;\n with System.Storage_Elements;\n \n package System.Storage_Pools.Subpools is\n-   pragma Preelaborate (Subpools);\n+   pragma Preelaborate;\n \n    type Root_Storage_Pool_With_Subpools is abstract\n      new Root_Storage_Pool with private;\n@@ -74,12 +74,13 @@ package System.Storage_Pools.Subpools is\n \n    --  ??? This precondition causes errors in simple tests, disabled for now\n \n---      with Pre'Class => Pool_Of_Subpool (Subpool) = Pool'Access;\n+   --      with Pre'Class => Pool_Of_Subpool (Subpool) = Pool'Access;\n    --  This routine requires implementation. Allocate an object described by\n    --  Size_In_Storage_Elements and Alignment on a subpool.\n \n-   function Create_Subpool (Pool : in out Root_Storage_Pool_With_Subpools)\n-     return not null Subpool_Handle is abstract;\n+   function Create_Subpool\n+     (Pool : in out Root_Storage_Pool_With_Subpools)\n+      return not null Subpool_Handle is abstract;\n    --  This routine requires implementation. Create a subpool within the given\n    --  pool_with_subpools.\n \n@@ -88,15 +89,16 @@ package System.Storage_Pools.Subpools is\n       Storage_Address          : System.Address;\n       Size_In_Storage_Elements : System.Storage_Elements.Storage_Count;\n       Alignment                : System.Storage_Elements.Storage_Count)\n-      is null;\n+   is null;\n \n    procedure Deallocate_Subpool\n      (Pool    : in out Root_Storage_Pool_With_Subpools;\n-      Subpool : in out Subpool_Handle) is abstract;\n+      Subpool : in out Subpool_Handle)\n+   is abstract;\n \n    --  ??? This precondition causes errors in simple tests, disabled for now\n \n---      with Pre'Class => Pool_Of_Subpool (Subpool) = Pool'Access;\n+   --      with Pre'Class => Pool_Of_Subpool (Subpool) = Pool'Access;\n    --  This routine requires implementation. Reclaim the storage a particular\n    --  subpool occupies in a pool_with_subpools. This routine is called by\n    --  Ada.Unchecked_Deallocate_Subpool.\n@@ -107,8 +109,9 @@ package System.Storage_Pools.Subpools is\n    --  Subpool_Handle_name in the allocator. The default implementation of this\n    --  routine raises Program_Error.\n \n-   function Pool_Of_Subpool (Subpool : not null Subpool_Handle)\n-     return access Root_Storage_Pool_With_Subpools'Class;\n+   function Pool_Of_Subpool\n+     (Subpool : not null Subpool_Handle)\n+      return access Root_Storage_Pool_With_Subpools'Class;\n    --  Return the owner of the subpool\n \n    procedure Set_Pool_Of_Subpool\n@@ -118,9 +121,11 @@ package System.Storage_Pools.Subpools is\n    --  Create_Subpool or similar subpool constructors. Raises Program_Error\n    --  if the subpool already belongs to a pool.\n \n-   overriding function Storage_Size (Pool : Root_Storage_Pool_With_Subpools)\n-     return System.Storage_Elements.Storage_Count is\n-       (System.Storage_Elements.Storage_Count'Last);\n+   overriding function Storage_Size\n+     (Pool : Root_Storage_Pool_With_Subpools)\n+      return System.Storage_Elements.Storage_Count\n+   is\n+      (System.Storage_Elements.Storage_Count'Last);\n \n private\n    --  Model"}, {"sha": "8ac23de0666562691f4f8e45f0d98c2db4e5de0c", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -972,7 +972,13 @@ package body Sem_Cat is\n          while Present (Item) loop\n             if Nkind (Item) = N_With_Clause\n               and then not (Implicit_With (Item)\n-                              or else Limited_Present (Item))\n+                              or else Limited_Present (Item)\n+\n+                              --  Skip if error already posted on the WITH\n+                              --  clause (in which case the Name attribute\n+                              --  may be invalid).\n+\n+                              or else Error_Posted (Item))\n             then\n                Entity_Of_Withed := Entity (Name (Item));\n                Check_Categorization_Dependencies"}, {"sha": "b4c42ee6d3764a93388f84f9920fdfca76e478dd", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -2678,7 +2678,14 @@ package body Sem_Ch10 is\n             Generate_Reference (Par_Name, Pref);\n \n          else\n-            Set_Name (N, Make_Null (Sloc (N)));\n+            pragma Assert (Serious_Errors_Detected /= 0);\n+\n+            --  Mark the node to indicate that a related error has been posted.\n+            --  This defends further compilation passes against cascaded errors\n+            --  caused by the invalid WITH clause node.\n+\n+            Set_Error_Posted (N);\n+            Set_Name (N, Error);\n             return;\n          end if;\n       end if;\n@@ -4100,6 +4107,7 @@ package body Sem_Ch10 is\n          if Nkind (Item) /= N_With_Clause\n            or else Implicit_With (Item)\n            or else Limited_Present (Item)\n+           or else Error_Posted (Item)\n          then\n             null;\n "}, {"sha": "22b2bec7be4ccb5b67259fd30bf0aa3ca0b1d388", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -2184,18 +2184,41 @@ package body Sem_Ch13 is\n          U_Ent := Underlying_Type (Ent);\n       end if;\n \n-      --  Complete other routine error checks\n+      --  Avoid cascaded error\n \n       if Etype (Nam) = Any_Type then\n          return;\n \n+      --  Must be declared in current scope\n+\n       elsif Scope (Ent) /= Current_Scope then\n          Error_Msg_N (\"entity must be declared in this scope\", Nam);\n          return;\n \n+      --  Must not be a source renaming (we do have some cases where the\n+      --  expander generates a renaming, and those cases are OK, in such\n+      --  cases any attribute applies to the renamed object as well.\n+\n+      elsif Is_Object (Ent)\n+        and then Present (Renamed_Object (Ent))\n+        and then Comes_From_Source (Renamed_Object (Ent))\n+      then\n+         Get_Name_String (Chars (N));\n+         Error_Msg_Strlen := Name_Len;\n+         Error_Msg_String (1 .. Name_Len) := Name_Buffer (1 .. Name_Len);\n+         Error_Msg_N\n+           (\"~ clause not allowed for a renaming declaration (RM 13.1(6))\",\n+            Nam);\n+         return;\n+\n+      --  If no underlying entity, use entity itself, applies to some\n+      --  previously detected error cases ???\n+\n       elsif No (U_Ent) then\n          U_Ent := Ent;\n \n+      --  Cannot specify for a subtype (exception Object/Value_Size)\n+\n       elsif Is_Type (U_Ent)\n         and then not Is_First_Subtype (U_Ent)\n         and then Id /= Attribute_Object_Size\n@@ -2367,12 +2390,6 @@ package body Sem_Ch13 is\n                   then\n                      Error_Msg_N (\"constant overlays a variable?\", Expr);\n \n-                  elsif Present (Renamed_Object (U_Ent)) then\n-                     Error_Msg_N\n-                       (\"address clause not allowed\"\n-                          & \" for a renaming declaration (RM 13.1(6))\", Nam);\n-                     return;\n-\n                   --  Imported variables can have an address clause, but then\n                   --  the import is pretty meaningless except to suppress\n                   --  initializations, so we do not need such variables to\n@@ -2523,10 +2540,16 @@ package body Sem_Ch13 is\n             elsif Align /= No_Uint then\n                Set_Has_Alignment_Clause (U_Ent);\n \n+               --  Tagged type case, check for attempt to set alignment to a\n+               --  value greater than Max_Align, and reset if so.\n+\n                if Is_Tagged_Type (U_Ent) and then Align > Max_Align then\n                   Error_Msg_N\n                     (\"?alignment for & set to Maximum_Aligment\", Nam);\n-                  Set_Alignment (U_Ent, Max_Align);\n+                     Set_Alignment (U_Ent, Max_Align);\n+\n+               --  All other cases\n+\n                else\n                   Set_Alignment (U_Ent, Align);\n                end if;\n@@ -6057,7 +6080,7 @@ package body Sem_Ch13 is\n               Aspect_Type_Invariant    =>\n             T := Standard_Boolean;\n \n-         when Aspect_Dimension |\n+         when Aspect_Dimension        |\n               Aspect_Dimension_System =>\n             raise Program_Error;\n \n@@ -8792,8 +8815,8 @@ package body Sem_Ch13 is\n             Source : constant Entity_Id  := T.Source;\n             Target : constant Entity_Id  := T.Target;\n \n-            Source_Siz    : Uint;\n-            Target_Siz    : Uint;\n+            Source_Siz : Uint;\n+            Target_Siz : Uint;\n \n          begin\n             --  This validation check, which warns if we have unequal sizes for"}, {"sha": "d468c731887d465b6e549ba545d465eaff1578a5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -2037,6 +2037,7 @@ package body Sem_Ch3 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n+\n       Analyze_Dimension (N);\n    end Analyze_Component_Declaration;\n \n@@ -3780,6 +3781,7 @@ package body Sem_Ch3 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n+\n       Analyze_Dimension (N);\n    end Analyze_Object_Declaration;\n \n@@ -4579,6 +4581,7 @@ package body Sem_Ch3 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n+\n       Analyze_Dimension (N);\n    end Analyze_Subtype_Declaration;\n "}, {"sha": "97a8771f38979a98290bcc872043883ea91bb39f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6045,12 +6045,13 @@ package body Sem_Ch4 is\n                  and then Is_Dimensioned_Type (Etype (L))\n                then\n                   Error_Msg_NE\n-                    (\"exponent for dimensioned type must be a Rational\" &\n+                    (\"exponent for dimensioned type must be a rational\" &\n                      \", found}\", R, Etype (R));\n                else\n                   Error_Msg_NE\n                     (\"exponent must be of type Natural, found}\", R, Etype (R));\n                end if;\n+\n                return;\n             end if;\n "}, {"sha": "54819b8f0f2ad257ee0933838fc0b6579c503517", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -827,7 +827,6 @@ package body Sem_Ch5 is\n \n       declare\n          Ent : constant Entity_Id := Get_Enclosing_Object (Lhs);\n-\n       begin\n          if Present (Ent)\n            and then Safe_To_Capture_Value (N, Ent)\n@@ -840,6 +839,7 @@ package body Sem_Ch5 is\n             Set_Last_Assignment (Ent, Lhs);\n          end if;\n       end;\n+\n       Analyze_Dimension (N);\n    end Analyze_Assignment;\n "}, {"sha": "4f20e456d1e7e28834df907a159730785b2dde10", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 82, "deletions": 109, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,16 +51,15 @@ with GNAT.HTable;\n \n package body Sem_Dim is\n \n-   --  Maximum number of dimensions in a dimension system\n-\n    Max_Dimensions : constant Int := 7;\n+   --  Maximum number of dimensions in a dimension system\n \n+   subtype Dim_Id is Pos range 1 .. Max_Dimensions;\n    --  Dim_Id values are used to identify dimensions in a dimension system\n    --  Note that the highest value of Dim_Id is Max_Dimensions\n \n-   subtype Dim_Id is Pos range 1 .. Max_Dimensions;\n-\n    --  Record type for dimension system\n+\n    --  A dimension system is defined by the number and the names of its\n    --  dimensions and its base type.\n \n@@ -144,10 +143,12 @@ package body Sem_Dim is\n    ---------\n \n    function GCD (Left, Right : Whole) return Int is\n-      L : Whole := Left;\n-      R : Whole := Right;\n+      L : Whole;\n+      R : Whole;\n \n    begin\n+      L := Left;\n+      R := Right;\n       while R /= 0 loop\n          L := L mod R;\n \n@@ -194,7 +195,6 @@ package body Sem_Dim is\n             Rational'(Numerator   => Left.Numerator * Right.Denominator +\n                                        Left.Denominator * Right.Numerator,\n                       Denominator => Left.Denominator * Right.Denominator);\n-\n    begin\n       return Reduce (R);\n    end \"+\";\n@@ -263,6 +263,7 @@ package body Sem_Dim is\n    --  The following table provides a relation between nodes and its dimension\n    --  (if not dimensionless). If a node is not stored in the Hash Table, the\n    --  node is considered to be dimensionless.\n+\n    --  A dimension is represented by an array of Max_Dimensions Rationals.\n    --  If the corresponding dimension system has less than Max_Dimensions\n    --  dimensions, the array is filled by as many as Zero_Rationals needed to\n@@ -301,6 +302,10 @@ package body Sem_Dim is\n \n    function AD_Hash (F : Node_Id) return AD_Hash_Range;\n \n+   -------------\n+   -- AD_Hash --\n+   -------------\n+\n    function AD_Hash (F : Node_Id) return AD_Hash_Range is\n    begin\n       return AD_Hash_Range (F mod 512);\n@@ -442,8 +447,9 @@ package body Sem_Dim is\n       Id   : Node_Id;\n       Expr : Node_Id)\n    is\n-      Def_Id   : constant Entity_Id := Defining_Identifier (N);\n-      N_Kind   : constant Node_Kind := Nkind (N);\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n+      N_Kind : constant Node_Kind := Nkind (N);\n+\n       Analyzed : array (Dimensions'Range) of Boolean := (others => False);\n       --  This array has been defined in order to deals with Others_Choice\n       --  It is a reminder of the dimensions in the aggregate that have already\n@@ -496,6 +502,7 @@ package body Sem_Dim is\n       is\n          B_Typ   : Node_Id;\n          Sub_Ind : Node_Id;\n+\n       begin\n          --  Aspect_Dimension can only apply for subtypes\n \n@@ -508,7 +515,6 @@ package body Sem_Dim is\n             if Nkind (Sub_Ind) /= N_Subtype_Indication then\n                B_Typ := Etype (Sub_Ind);\n                return Get_Dimension_System_Id (B_Typ);\n-\n             else\n                return No_Dim_Sys;\n             end if;\n@@ -529,7 +535,6 @@ package body Sem_Dim is\n          Typ      : Entity_Id;\n \n       begin\n-\n          --  Check the type is dimensionless before assigning a dimension\n \n          if Nkind (N) = N_Subtype_Declaration then\n@@ -580,9 +585,8 @@ package body Sem_Dim is\n \n          if Present (Component_Associations (Expr)) then\n \n-            --  If the aggregate is a positional aggregate with an\n-            --  Others_Choice, the number of expressions must be less than or\n-            --  equal to N_Of_Dims - 1.\n+            --  For a positional aggregate with an Others_Choice, the number\n+            --  of expressions must be less than or equal to N_Of_Dims - 1.\n \n             if Present (Comp_Expr) then\n                N_Dims_Aggr := List_Length (Expressions (Expr)) - 1;\n@@ -711,7 +715,6 @@ package body Sem_Dim is\n             if Dim_Name = Na_Id then\n                Dim := D;\n             end if;\n-\n          end loop;\n \n          return Dim;\n@@ -728,14 +731,14 @@ package body Sem_Dim is\n          Comp_Expr : Node_Id;\n \n       begin\n-         Comp_Expr := First (Expressions (Expr));\n-         Next (Comp_Expr);\n \n+         Comp_Expr := Next (First (Expressions (Expr)));\n          while Present (Comp_Expr) loop\n \n             --  First, analyze the expression\n \n             Analyze_And_Resolve (Comp_Expr);\n+\n             if not Compile_Time_Known_Value (Comp_Expr) then\n                return False;\n             end if;\n@@ -744,7 +747,6 @@ package body Sem_Dim is\n          end loop;\n \n          Comp_Assn := First (Component_Associations (Expr));\n-\n          while Present (Comp_Assn) loop\n             Comp_Expr := Expression (Comp_Assn);\n \n@@ -823,7 +825,6 @@ package body Sem_Dim is\n       Comp_Assn := First (Component_Associations (Expr));\n \n       if Present (Comp_Expr) then\n-\n          if List_Length (Component_Associations (Expr)) > 1 then\n             Error_Msg_N (\"named association cannot follow \" &\n                          \"positional association for aspect%\", Expr);\n@@ -927,10 +928,10 @@ package body Sem_Dim is\n                   return;\n                end if;\n \n-               --  End the filling of Dims by the Others_Choice value\n-               --  If N_Of_Dims < Max_Dimensions then only the\n-               --  positions that haven't been already analyzed from\n-               --  Dim_Id'First to N_Of_Dims are filled.\n+               --  End the filling of Dims by the Others_Choice value. If\n+               --  N_Of_Dims < Max_Dimensions then only the positions that\n+               --  haven't been already analyzed from Dim_Id'First to N_Of_Dims\n+               --  are filled.\n \n                for Dim in Dim_Id'First .. N_Of_Dims loop\n                   if not Analyzed (Dim) then\n@@ -1011,7 +1012,8 @@ package body Sem_Dim is\n    -- Analyze_Aspect_Dimension_System --\n    -------------------------------------\n \n-   --    with Dimension_System => DIMENSION_PAIRS\n+   --  with Dimension_System => DIMENSION_PAIRS\n+\n    --  DIMENSION_PAIRS ::=\n    --    (DIMENSION_PAIR\n    --      [, DIMENSION_PAIR]\n@@ -1033,9 +1035,9 @@ package body Sem_Dim is\n       Dim_Node   : Node_Id;\n       Dim_Symbol : Node_Id;\n       D_Sys      : Dimension_System := No_Dimension_System;\n-      Names      : Name_Array := No_Names;\n+      Names      : Name_Array       := No_Names;\n       N_Of_Dims  : N_Of_Dimensions;\n-      Symbols    : Symbol_Array := No_Symbols;\n+      Symbols    : Symbol_Array     := No_Symbols;\n \n       function Derived_From_Numeric_Type (N : Node_Id) return Boolean;\n       --  Return True if the node is a derived type declaration from any\n@@ -1091,16 +1093,17 @@ package body Sem_Dim is\n       function Check_Dimension_System_Syntax (N : Node_Id) return Boolean is\n          Dim_Node : Node_Id;\n          Expr_Dim : Node_Id;\n+\n       begin\n          --  Chek that the aggregate is a positional array\n \n          if Present (Component_Associations (N)) then\n             return False;\n-         else\n-            Dim_Node := First (Expressions (N));\n \n+         else\n             --  Check that each component of the aggregate is an aggregate\n \n+            Dim_Node := First (Expressions (N));\n             while Present (Dim_Node) loop\n \n                --  Verify that the aggregate is a pair of identifier and string\n@@ -1161,7 +1164,8 @@ package body Sem_Dim is\n \n       begin\n          if List_Length (List_Expr) < Dim_Id'First\n-           or else List_Length (List_Expr) > Max_Dimensions then\n+           or else List_Length (List_Expr) > Max_Dimensions\n+         then\n             return False;\n          else\n             return True;\n@@ -1181,8 +1185,8 @@ package body Sem_Dim is\n       end if;\n \n       if not Derived_From_Numeric_Type (N) then\n-         Error_Msg_N (\"aspect% only apply for type derived from numeric type\",\n-                      Id);\n+         Error_Msg_N\n+           (\"aspect% only apply for type derived from numeric type\", Id);\n          return;\n       end if;\n \n@@ -1325,16 +1329,14 @@ package body Sem_Dim is\n          --  Check the lhs and the rhs have the same dimension\n \n          if not Present (Dim_Lhs) then\n-\n             if Present (Dim_Rhs) then\n                Error_Msg_N (\"?dimensions missmatch in assignment\", N);\n             end if;\n-         else\n \n+         else\n             if Dim_Lhs /= Dim_Rhs then\n                Error_Msg_N (\"?dimensions missmatch in assignment\", N);\n             end if;\n-\n          end if;\n       end Analyze_Dimensions_In_Assignment;\n \n@@ -1366,7 +1368,6 @@ package body Sem_Dim is\n             Dims              : Dimensions := Zero_Dimensions;\n \n          begin\n-\n             if Nkind_In (N, N_Op_Add, N_Op_Mod, N_Op_Rem, N_Op_Subtract) then\n                Error_Msg_Name_1 := Chars (N);\n \n@@ -1397,7 +1398,6 @@ package body Sem_Dim is\n                end if;\n \n             elsif Nkind_In (N_Kind, N_Op_Multiply, N_Op_Divide) then\n-\n                if L_Has_Dimensions and R_Has_Dimensions then\n \n                   --  Get both operands dimension and add them\n@@ -1419,7 +1419,6 @@ package body Sem_Dim is\n                   Dims := L_Dims;\n \n                elsif not L_Has_Dimensions and R_Has_Dimensions then\n-\n                   if N_Kind = N_Op_Multiply then\n                      Dims := R_Dims;\n                   else\n@@ -1499,8 +1498,7 @@ package body Sem_Dim is\n                end;\n \n             --  For relational operations, only a dimension checking is\n-            --  performed.\n-            --  No propagation\n+            --  performed (no propagation).\n \n             elsif N_Kind in N_Op_Compare then\n                Error_Msg_Name_1 := Chars (N);\n@@ -1525,9 +1523,9 @@ package body Sem_Dim is\n    ---------------------------------------------\n \n    procedure Analyze_Dimension_Component_Declaration (N : Node_Id) is\n-      Expr   : constant Node_Id   := Expression (N);\n-      Id     : constant Entity_Id := Defining_Identifier (N);\n-      E_Typ  : constant Entity_Id := Etype (Id);\n+      Expr   : constant Node_Id    := Expression (N);\n+      Id     : constant Entity_Id  := Defining_Identifier (N);\n+      E_Typ  : constant Entity_Id  := Etype (Id);\n       Dim_T  : constant Dimensions := Get_Dimensions (E_Typ);\n       Dim_E  : Dimensions;\n \n@@ -1541,6 +1539,7 @@ package body Sem_Dim is\n             Dim_E := Get_Dimensions (Expr);\n \n             if Present (Dim_E) then\n+\n                --  Return an error if the dimension of the expression and the\n                --  dimension of the type missmatch.\n \n@@ -1549,7 +1548,7 @@ package body Sem_Dim is\n                                \"declaration\", N);\n                end if;\n \n-            --  If the expression is dimensionless\n+               --  Case of dimensionless expression\n \n             else\n                Error_Msg_N\n@@ -1580,7 +1579,6 @@ package body Sem_Dim is\n    begin\n       if Present (Obj_Decls) then\n          Obj_Decl := First (Obj_Decls);\n-\n          while Present (Obj_Decl) loop\n             if Nkind (Obj_Decl) = N_Object_Declaration then\n                Obj_Id := Defining_Identifier (Obj_Decl);\n@@ -1676,7 +1674,6 @@ package body Sem_Dim is\n \n          else\n             Param := First (Par_Ass);\n-\n             while Present (Param) loop\n                Dims_Param := Get_Dimensions (Param);\n \n@@ -1726,7 +1723,6 @@ package body Sem_Dim is\n          begin\n             if Present (Exprs) then\n                Expr := First (Exprs);\n-\n                while Present (Expr) loop\n                   Remove_Dimensions (Expr);\n                   Next (Expr);\n@@ -1754,7 +1750,6 @@ package body Sem_Dim is\n    procedure Analyze_Dimension_Identifier (N : Node_Id) is\n       Ent  : constant Entity_Id := Entity (N);\n       Dims : constant Dimensions := Get_Dimensions (Ent);\n-\n    begin\n       if Present (Dims) then\n          Set_Dimensions (N, Dims);\n@@ -1776,12 +1771,14 @@ package body Sem_Dim is\n \n    begin\n       if Present (Dim_T) then\n+\n          --  Expression is present\n \n          if Present (Expr) then\n             Dim_E := Get_Dimensions (Expr);\n \n             if Present (Dim_E) then\n+\n                --  Return an error if the dimension of the expression and the\n                --  dimension of the type missmatch.\n \n@@ -1797,13 +1794,12 @@ package body Sem_Dim is\n                --  (depending on the dimensioned numeric type), return an error\n                --  message.\n \n-               if not Nkind_In\n-                        (Original_Node (Expr),\n-                         N_Real_Literal,\n-                         N_Integer_Literal)\n+               if not Nkind_In (Original_Node (Expr),\n+                                N_Real_Literal,\n+                                N_Integer_Literal)\n                then\n-                  Error_Msg_N (\"?dimensions missmatch in object \" &\n-                               \"declaration\", N);\n+                  Error_Msg_N\n+                    (\"?dimensions missmatch in object declaration\", N);\n                end if;\n             end if;\n \n@@ -1824,7 +1820,6 @@ package body Sem_Dim is\n       Ren_Id   : constant Node_Id   := Name (N);\n       E_Typ    : constant Entity_Id := Etype (Ren_Id);\n       Dims_Typ : constant Dimensions := Get_Dimensions (E_Typ);\n-\n    begin\n       if Present (Dims_Typ) then\n          Copy_Dimensions (E_Typ, Id);\n@@ -1841,7 +1836,6 @@ package body Sem_Dim is\n       R_Ent     : constant Entity_Id := Return_Statement_Entity (N);\n       R_Etyp    : constant Entity_Id := Etype (Return_Applies_To (R_Ent));\n       Dims_R    : constant Dimensions := Get_Dimensions (R_Etyp);\n-\n    begin\n       if Dims_R /= Dims_Expr then\n          Error_Msg_N (\"?dimensions missmatch in return statement\", N);\n@@ -1867,9 +1861,8 @@ package body Sem_Dim is\n          begin\n             if Present (Dims_Typ) then\n \n-               --  If the subtype already has a dimension (from\n-               --  Aspect_Dimension), it cannot inherit a dimension from its\n-               --  subtype.\n+               --  If subtype already has a dimension (from Aspect_Dimension),\n+               --  it cannot inherit a dimension from its subtype.\n \n                if Present (Dims_Ent) then\n                   Error_Msg_N (\"?subtype& already has a dimension\", N);\n@@ -1890,9 +1883,8 @@ package body Sem_Dim is\n          begin\n             if Present (Dims_Typ) then\n \n-               --  If the subtype already has a dimension (from\n-               --  Aspect_Dimension), it cannot inherit a dimension from its\n-               --  subtype.\n+               --  If subtype already has a dimension (from Aspect_Dimension),\n+               --  it cannot inherit a dimension from its subtype.\n \n                if Present (Dims_Ent) then\n                   Error_Msg_N (\"?subtype& already has a dimension\", N);\n@@ -1959,9 +1951,8 @@ package body Sem_Dim is\n       Rtype        : Entity_Id;\n \n    begin\n-      --  A rational number is any number that can be expressed as the quotient\n-      --  or fraction a/b of two integers, with the denominator b not equal to\n-      --  zero.\n+      --  A rational number is a number that can be expressed as the quotient\n+      --  or fraction a/b of two integers, where b is non-zero.\n \n       --  Check the expression is either a division of two integers or an\n       --  integer itself. The check applies to the original node since the\n@@ -1975,16 +1966,13 @@ package body Sem_Dim is\n          Right := Right_Opnd (Or_N);\n          Rtype := Etype (Right);\n \n-         if Is_Integer_Type (Ltype)\n-           and then Is_Integer_Type (Rtype)\n-         then\n+         if Is_Integer_Type (Ltype) and then Is_Integer_Type (Rtype) then\n             Left_Int  := UI_To_Int (Expr_Value (Left));\n             Right_Int := UI_To_Int (Expr_Value (Right));\n \n             --  Verify that the denominator of the rational is positive\n \n             if Right_Int > 0 then\n-\n                if Left_Int mod Right_Int = 0 then\n                   R := +Whole (UI_To_Int (Expr_Value (Expr)));\n                else\n@@ -2020,7 +2008,6 @@ package body Sem_Dim is\n             --  Verify that the denominator of the rational is positive\n \n             if Right_Int > 0 then\n-\n                if Left_Int mod Right_Int = 0 then\n                   R := +Whole (-UI_To_Int (Expr_Value (Expr)));\n                else\n@@ -2042,6 +2029,7 @@ package body Sem_Dim is\n          if Is_Integer_Type (Etype (Expr)) then\n             Right_Int := UI_To_Int (Expr_Value (Expr));\n             R         :=  +Whole (Right_Int);\n+\n          else\n             Error_Msg_N (\"must be a rational\", Expr);\n          end if;\n@@ -2054,21 +2042,17 @@ package body Sem_Dim is\n \n    --  Eval the expon operator for dimensioned type\n \n-   --  Note that if the exponent is an integer (denominator equals to 1) the\n-   --  node is not evaluated here and must be evaluated by the Eval_Op_Expon\n-   --  routine.\n+   --  Note that if the exponent is an integer (denominator = 1) the node is\n+   --  not evaluated here and must be evaluated by the Eval_Op_Expon routine.\n \n    procedure Eval_Op_Expon_For_Dimensioned_Type\n      (N : Node_Id;\n       B_Typ : Entity_Id)\n    is\n       R   : constant Node_Id := Right_Opnd (N);\n       Rat : Rational := Zero_Rational;\n-\n    begin\n-      if Compile_Time_Known_Value (R)\n-        and then Is_Real_Type (B_Typ)\n-      then\n+      if Compile_Time_Known_Value (R) and then Is_Real_Type (B_Typ) then\n          Create_Rational_From_Expr (R, Rat);\n          Eval_Op_Expon_With_Rational_Exponent (N, Rat);\n       end if;\n@@ -2105,8 +2089,7 @@ package body Sem_Dim is\n \n    begin\n       --  If Rat.Denominator = 1 that means the exponent is an Integer so\n-      --  nothing has to be changed.\n-      --  Note that the node must come from source\n+      --  nothing has to be changed. Note that the node must come from source.\n \n       if Comes_From_Source (N)\n         and then Rat.Denominator /= 1\n@@ -2143,6 +2126,7 @@ package body Sem_Dim is\n \n             --  for Dim in Dims'First .. N_Dims loop\n             --     Dim_Value := Dims (Dim);\n+\n             --     if Dim_Value.Denominator /= 1 then\n             --        Append (Dim_Value.Numerator / Dim_Value.Denominator,\n             --                Aspect_Dim_Expr);\n@@ -2162,33 +2146,30 @@ package body Sem_Dim is\n \n             for Dim in Dims'First .. Dim_Systems.Table (Sys).N_Of_Dims loop\n                Dim_Value := Dims (Dim);\n+\n                if Dim_Value.Denominator /= 1 then\n-                  Append (\n+                  Append_To (List_Of_Dims,\n                      Make_Op_Divide (Loc,\n                        Left_Opnd  =>\n                          Make_Integer_Literal (Loc,\n                            Int (Dim_Value.Numerator)),\n                        Right_Opnd =>\n                          Make_Integer_Literal (Loc,\n-                           Int (Dim_Value.Denominator))),\n-                     List_Of_Dims);\n+                           Int (Dim_Value.Denominator))));\n+\n                else\n-                  Append (\n-                    Make_Integer_Literal (Loc,\n-                      Int (Dim_Value.Numerator)),\n-                    List_Of_Dims);\n+                  Append_To (List_Of_Dims,\n+                    Make_Integer_Literal (Loc, Int (Dim_Value.Numerator)));\n                end if;\n             end loop;\n \n             --  Step 1b: Create the new Aspect_Dimension\n \n             New_Aspect :=\n               Make_Aspect_Specification (Loc,\n-                Identifier =>\n-                  Make_Identifier (Loc, Name_Dimension),\n+                Identifier => Make_Identifier (Loc, Name_Dimension),\n                 Expression =>\n-                  Make_Aggregate (Loc,\n-                    Expressions => List_Of_Dims));\n+                  Make_Aggregate (Loc, Expressions => List_Of_Dims));\n \n             --  Step 1c: New identifier for the subtype\n \n@@ -2200,8 +2181,7 @@ package body Sem_Dim is\n             New_Typ_L :=\n                Make_Subtype_Declaration (Loc,\n                   Defining_Identifier => New_E,\n-                  Subtype_Indication  =>\n-                     New_Occurrence_Of (Base_Typ, Loc));\n+                  Subtype_Indication  => New_Occurrence_Of (Base_Typ, Loc));\n \n             Append (New_Aspect, New_Aspects);\n             Set_Parent (New_Aspects, New_Typ_L);\n@@ -2269,9 +2249,9 @@ package body Sem_Dim is\n    -- Expand_Put_Call_With_Dimension_String --\n    -------------------------------------------\n \n-   --  For procedure Put defined in System.Dim_Float_IO and\n-   --  System.Dim_Integer_IO, the default string parameter must be rewritten to\n-   --  include the dimension symbols in the output of a dimensioned object.\n+   --  For procedure Put defined in System.Dim_Float_IO/System.Dim_Integer_IO,\n+   --  the default string parameter must be rewritten to include the dimension\n+   --  symbols in the output of a dimensioned object.\n \n    --  There are two different cases:\n \n@@ -2286,9 +2266,9 @@ package body Sem_Dim is\n    --  Put (v) returns:\n    --  > 2.1 speed\n \n-   --  2) If the parameter is an expression, the procedure\n+   --  2) If the parameter is an expression, then we call the procedure\n    --  Expand_Put_Call_With_Dimension_String creates the string (for instance\n-   --  \"m.s**(-1)\") and rewrites the default string parameter of Put with the\n+   --  \"m.s**(-1)\") and rewrite the default string parameter of Put with the\n    --  corresponding the String_Id.\n \n    procedure Expand_Put_Call_With_Dimension_String (N : Node_Id) is\n@@ -2472,7 +2452,6 @@ package body Sem_Dim is\n       Store_String_Char (' ');\n \n       for Dim in Dimensions'Range loop\n-\n          Dim_Rat := Dims (Dim);\n          if Dim_Rat /= Zero_Rational then\n \n@@ -2485,7 +2464,6 @@ package body Sem_Dim is\n             --  Positive dimension case\n \n             if Dim_Rat.Numerator > 0 then\n-\n                if Dim_Systems.Table (Sys).Symbols (Dim) = No_String then\n                   Store_String_Chars\n                     (Get_Name_String (Dim_Systems.Table (Sys).Names (Dim)));\n@@ -2496,7 +2474,6 @@ package body Sem_Dim is\n                --  Integer case\n \n                if Dim_Rat.Denominator = 1 then\n-\n                   if Dim_Rat.Numerator /= 1 then\n                      Store_String_Chars (\"**\");\n                      Store_String_Int (Int (Dim_Rat.Numerator));\n@@ -2574,6 +2551,7 @@ package body Sem_Dim is\n \n    begin\n       --  Scan the Table in order to find N\n+      --  What is N??? no sign of anything called N here ???\n \n       for Dim_Sys in 1 .. Dim_Systems.Last loop\n          if Parent (E) = Dim_Systems.Table (Dim_Sys).Base_Type then\n@@ -2588,14 +2566,13 @@ package body Sem_Dim is\n    -- Is_Dimensioned_Type --\n    --------------------------\n \n-   function Is_Dimensioned_Type (E : Entity_Id) return Boolean\n-   is\n+   function Is_Dimensioned_Type (E : Entity_Id) return Boolean is\n    begin\n       if Get_Dimension_System_Id (E) /= No_Dim_Sys then\n          return True;\n+      else\n+         return False;\n       end if;\n-\n-      return False;\n    end Is_Dimensioned_Type;\n \n    ---------------------\n@@ -2606,8 +2583,7 @@ package body Sem_Dim is\n       Dims : constant Dimensions := Get_Dimensions (From);\n \n    begin\n-      --  Copy the dimension of 'From to 'To' and remove the dimension of\n-      --  'From'.\n+      --  Copy the dimension of 'From to 'To' and remove dimension of 'From'\n \n       if Present (Dims) then\n          Set_Dimensions (To, Dims);\n@@ -2669,7 +2645,6 @@ package body Sem_Dim is\n \n    procedure Remove_Dimensions (N : Node_Id) is\n       Dims : constant Dimensions := Get_Dimensions (N);\n-\n    begin\n       if Present (Dims) then\n          Aspect_Dimension_Hash_Table.Remove (N);\n@@ -2691,7 +2666,6 @@ package body Sem_Dim is\n \n       if Present (Par_Ass) then\n          Actual := First (Par_Ass);\n-\n          while Present (Actual) loop\n             Remove_Dimensions (Actual);\n             Next (Actual);\n@@ -2740,7 +2714,6 @@ package body Sem_Dim is\n       if S_Kind = N_Accept_Statement then\n          declare\n             Param : Node_Id := First (Parameter_Specifications (S));\n-\n          begin\n             while Present (Param) loop\n                Remove_Dimensions (Param);"}, {"sha": "cda1135024e5d75697c100b0dd03af490ee08911", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2011, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -26,33 +26,37 @@\n --  This new package of the GNAT compiler has been created in order to enable\n --  any user of the GNAT compiler to deal with physical issues.\n \n---  Indeed, the user is now able to create his own dimension system and to\n+--  Indeed, the user is now able to create their own dimension system and to\n --  assign a dimension, defined from the MKS system (package System.Dim_Mks)\n---  or his own dimension systems, with any item and to run operations with\n+--  or their own dimension systems, with any item and to run operations with\n --  dimensionned entities.\n---  In that case, a dimensionnality checking will be performed at compile time.\n+\n+--  In that case, a dimensionality checking will be performed at compile time.\n --  If no dimension has been assigned, the compiler assumes that the item is\n --  dimensionless.\n \n -----------------------------\n -- Aspect_Dimension_System --\n -----------------------------\n \n---  In order to enable the user to create his own dimension system, a new\n+--  In order to enable the user to create their own dimension system, a new\n --  aspect: Aspect_Dimension_System has been created.\n+\n --  Note that this aspect applies for type declaration of type derived from any\n --  numeric type.\n \n---  It defines the names of each dimension.\n+--  It defines the names of each dimension\n \n ----------------------\n -- Aspect_Dimension --\n ----------------------\n \n --  This new aspect applies for subtype and object declarations in order to\n --  define new dimensions.\n+\n --  Using this aspect, the user is able to create new subtype/object with any\n --  dimension needed.\n+\n --  Note that the base type of the subtype/object must be the type that defines\n --  the corresponding dimension system.\n \n@@ -75,14 +79,15 @@\n \n --  Depending on the node kind, either none, one phase or two phases are\n --  executed.\n+\n --  Phase 2 is called only when the node allows a dimension (see body of\n --  Sem_Dim to get the list of nodes that permit dimensions).\n \n ------------------\n -- Dimension_IO --\n ------------------\n \n---  This section contains the routine used for IO purposes.\n+--  This section contains the routine used for IO purposes\n \n with Types; use Types;\n \n@@ -103,8 +108,8 @@ package Sem_Dim is\n    ----------------------\n \n    procedure Analyze_Aspect_Dimension\n-     (N : Node_Id;\n-      Id : Node_Id;\n+     (N    : Node_Id;\n+      Id   : Node_Id;\n       Expr : Node_Id);\n    --  Analyzes the aggregate of Aspect_Dimension and attaches the\n    --  corresponding dimension to N.\n@@ -118,17 +123,17 @@ package Sem_Dim is\n    --  when needed.\n \n    procedure Eval_Op_Expon_For_Dimensioned_Type\n-     (N : Node_Id;\n+     (N     : Node_Id;\n       B_Typ : Entity_Id);\n-   --  Eval the Expon operator for dimensioned type with rational exponent\n+   --  Evaluate the Expon operator for dimensioned type with rational exponent\n \n    function Is_Dimensioned_Type (E : Entity_Id) return Boolean;\n    --  Return True if the type is a dimensioned type (i.e: a type which has an\n    --  aspect Dimension_System)\n \n    procedure Remove_Dimension_In_Call (N : Node_Id);\n    --  At the end of the Expand_Call routine, remove the dimensions of every\n-   --  parameters in the call N.\n+   --  parameter in the call N.\n \n    procedure Remove_Dimension_In_Declaration (D : Node_Id);\n    --  At the end of Analyze_Declarations routine (see Sem_Ch3), removes the"}, {"sha": "3ebd88fe8c7ec100a71d521a7e48f63141d7c32c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=54c04d6ca59426c458abdf1d7ce70dd8bb2d4dcc", "patch": "@@ -5814,8 +5814,6 @@ package body Sem_Res is\n          end;\n       end if;\n \n-      --  dimension analysis\n-\n       Analyze_Dimension (N);\n \n       --  All done, evaluate call and deal with elaboration issues\n@@ -8015,12 +8013,10 @@ package body Sem_Res is\n \n       Analyze_Dimension (N);\n \n-      --  Evaluate the Expon operator for dimensioned type with rational\n-      --  exponent.\n+      --  Evaluate the exponentiation operator for dimensioned type with\n+      --  rational exponent.\n \n-      if Ada_Version >= Ada_2012\n-        and then Is_Dimensioned_Type (B_Typ)\n-      then\n+      if Ada_Version >= Ada_2012 and then Is_Dimensioned_Type (B_Typ) then\n          Eval_Op_Expon_For_Dimensioned_Type (N, B_Typ);\n \n          --  Skip the Eval_Op_Expon if the node has already been evaluated\n@@ -8657,11 +8653,12 @@ package body Sem_Res is\n         and then Is_Packed (T)\n         and then Is_LHS (N)\n       then\n-         Error_Msg_N (\"?assignment to component of packed atomic record\",\n-                      Prefix (N));\n-         Error_Msg_N (\"?\\may cause unexpected accesses to atomic object\",\n-                      Prefix (N));\n+         Error_Msg_N\n+           (\"?assignment to component of packed atomic record\", Prefix (N));\n+         Error_Msg_N\n+           (\"?\\may cause unexpected accesses to atomic object\", Prefix (N));\n       end if;\n+\n       Analyze_Dimension (N);\n    end Resolve_Selected_Component;\n "}]}