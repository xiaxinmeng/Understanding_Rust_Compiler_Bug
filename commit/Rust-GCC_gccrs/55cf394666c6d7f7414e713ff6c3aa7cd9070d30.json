{"sha": "55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVjZjM5NDY2NmM2ZDdmNzQxNGU3MTNmZjZjM2FhN2NkOTA3MGQzMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-15T12:25:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-15T12:25:57Z"}, "message": "fold-const.c (fold_binary_loc): Move bool_var != 0 -> bool_var and bool_var == 1 -> bool_var simplifications ...\n\n2015-07-15  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Move bool_var != 0 -> bool_var\n\tand bool_var == 1 -> bool_var simplifications ...\n\t* match.pd: ... to patterns here.  Factor out negate_expr_p\n\tcases from the A - B -> A + (-B) patterns as negate_expr_p\n\tpredicate and add a -(A + B) -> (-B) - A pattern.\n\nFrom-SVN: r225825", "tree": {"sha": "7143082c63e1d891da81c791a4f63d5f0b8bc17b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7143082c63e1d891da81c791a4f63d5f0b8bc17b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa6cf07ea94c44e79b9473564b2a3bb818f820b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa6cf07ea94c44e79b9473564b2a3bb818f820b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa6cf07ea94c44e79b9473564b2a3bb818f820b4"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "675082087351b3b0cb718f2f9395d70bfa0461de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "patch": "@@ -1,3 +1,11 @@\n+2015-07-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Move bool_var != 0 -> bool_var\n+\tand bool_var == 1 -> bool_var simplifications ...\n+\t* match.pd: ... to patterns here.  Factor out negate_expr_p\n+\tcases from the A - B -> A + (-B) patterns as negate_expr_p\n+\tpredicate and add a -(A + B) -> (-B) - A pattern.\n+\n 2015-07-15  Robert Suchanek  <robert.suchanek@imgtec.com>\n \n \t* config/mips/mips.c (mips_emit_save_slot_move): Fix typo."}, {"sha": "acccb3c6007119a62db61b63845364524be26827", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "patch": "@@ -11245,16 +11245,6 @@ fold_binary_loc (location_t loc,\n       if (tem != NULL_TREE)\n \treturn tem;\n \n-      /* bool_var != 0 becomes bool_var. */\n-      if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_zerop (arg1)\n-          && code == NE_EXPR)\n-        return non_lvalue_loc (loc, fold_convert_loc (loc, type, arg0));\n-\n-      /* bool_var == 1 becomes bool_var. */\n-      if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_onep (arg1)\n-          && code == EQ_EXPR)\n-        return non_lvalue_loc (loc, fold_convert_loc (loc, type, arg0));\n-\n       /* bool_var != 1 becomes !bool_var. */\n       if (TREE_CODE (TREE_TYPE (arg0)) == BOOLEAN_TYPE && integer_onep (arg1)\n           && code == NE_EXPR)"}, {"sha": "a3fba51969e80625ddaa79fc5e00a920a9acbc20", "filename": "gcc/match.pd", "status": "modified", "additions": 41, "deletions": 12, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55cf394666c6d7f7414e713ff6c3aa7cd9070d30/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=55cf394666c6d7f7414e713ff6c3aa7cd9070d30", "patch": "@@ -479,23 +479,38 @@ along with GCC; see the file COPYING3.  If not see\n  (abs tree_expr_nonnegative_p@0)\n  @0)\n \n-/* A - B -> A + (-B) if B is easily negatable.  This just covers\n-   very few cases of \"easily negatable\", effectively inlining negate_expr_p.  */\n-(simplify\n- (minus @0 INTEGER_CST@1)\n+/* A few cases of fold-const.c negate_expr_p predicate.  */\n+(match negate_expr_p\n+ INTEGER_CST\n  (if ((INTEGRAL_TYPE_P (type)\n        && TYPE_OVERFLOW_WRAPS (type))\n       || (!TYPE_OVERFLOW_SANITIZED (type)\n-\t  && may_negate_without_overflow_p (@1)))\n-  (plus @0 (negate @1))))\n+\t  && may_negate_without_overflow_p (t)))))\n+(match negate_expr_p\n+ FIXED_CST)\n+(match negate_expr_p\n+ (negate @0)\n+ (if (!TYPE_OVERFLOW_SANITIZED (type))))\n+(match negate_expr_p\n+ REAL_CST\n+ (if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (t)))))\n+/* VECTOR_CST handling of non-wrapping types would recurse in unsupported\n+   ways.  */\n+(match negate_expr_p\n+ VECTOR_CST\n+ (if (FLOAT_TYPE_P (TREE_TYPE (type)) || TYPE_OVERFLOW_WRAPS (type))))\n+ \n+/* -(A + B) -> (-B) - A.  */\n (simplify\n- (minus @0 REAL_CST@1)\n- (if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (@1)))\n-  (plus @0 (negate @1))))\n+ (negate (plus:c @0 negate_expr_p@1))\n+ (if (!HONOR_SIGN_DEPENDENT_ROUNDING (element_mode (type))\n+      && !HONOR_SIGNED_ZEROS (element_mode (type)))\n+  (minus (negate @1) @0)))\n+\n+/* A - B -> A + (-B) if B is easily negatable.  */\n (simplify\n- (minus @0 VECTOR_CST@1)\n- (if (FLOAT_TYPE_P (type) || TYPE_OVERFLOW_WRAPS (type))\n-  (plus @0 (negate @1))))\n+ (minus @0 negate_expr_p@1)\n+ (plus @0 (negate @1)))\n \n \n /* Try to fold (type) X op CST -> (type) (X op ((type-x) CST))\n@@ -1678,6 +1693,20 @@ along with GCC; see the file COPYING3.  If not see\n   (if (tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@0)))\n    (cmp @0 (bit_xor @1 (convert @2))))))\n \n+/* bool_var != 0 becomes bool_var.  */\n+(simplify\n+ (ne @0 integer_zerop@1)\n+ (if (TREE_CODE (TREE_TYPE (@0)) == BOOLEAN_TYPE\n+      && types_match (type, TREE_TYPE (@0)))\n+  (non_lvalue @0)))\n+/* bool_var == 1 becomes bool_var.  */\n+(simplify\n+ (eq @0 integer_onep@1)\n+ (if (TREE_CODE (TREE_TYPE (@0)) == BOOLEAN_TYPE\n+      && types_match (type, TREE_TYPE (@0)))\n+  (non_lvalue @0)))\n+\n+\n /* Simplification of math builtins.  */\n \n /* fold_builtin_logarithm */"}]}