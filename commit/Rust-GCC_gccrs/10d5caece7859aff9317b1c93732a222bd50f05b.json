{"sha": "10d5caece7859aff9317b1c93732a222bd50f05b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkNWNhZWNlNzg1OWFmZjkzMTdiMWM5MzczMmEyMjJiZDUwZjA1Yg==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-07-02T01:26:01Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-07-02T01:26:01Z"}, "message": "(c_sizeof, build_c_cast): Set TREE_OVERFLOW in addition to TREE_CONSTANT_OVERFLOW.\n\n(c_sizeof, build_c_cast): Set TREE_OVERFLOW in addition\nto TREE_CONSTANT_OVERFLOW.\n(store_init_value): STRIP_TYPE_NOPS is required before\nconstant_expression_warning.\n\nFrom-SVN: r4825", "tree": {"sha": "a83ba9eafcc53d125d54db3a08b47691344879a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a83ba9eafcc53d125d54db3a08b47691344879a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d5caece7859aff9317b1c93732a222bd50f05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d5caece7859aff9317b1c93732a222bd50f05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d5caece7859aff9317b1c93732a222bd50f05b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d5caece7859aff9317b1c93732a222bd50f05b/comments", "author": null, "committer": null, "parents": [{"sha": "2ac3624babf6a0c25c55f9a4963f0133205792d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ac3624babf6a0c25c55f9a4963f0133205792d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ac3624babf6a0c25c55f9a4963f0133205792d7"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "00de4cbddbbce84fb7fa6e026b350268c4e82872", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d5caece7859aff9317b1c93732a222bd50f05b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d5caece7859aff9317b1c93732a222bd50f05b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=10d5caece7859aff9317b1c93732a222bd50f05b", "patch": "@@ -761,8 +761,8 @@ c_sizeof (type)\n   t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type), \n \t\t  size_int (TYPE_PRECISION (char_type_node)));\n   /* size_binop does not put the constant in range, so do it now.  */\n-  if (TREE_CODE (t) == INTEGER_CST)\n-    TREE_CONSTANT_OVERFLOW (t) |= force_fit_type (t, 0);\n+  if (TREE_CODE (t) == INTEGER_CST && force_fit_type (t, 0))\n+    TREE_CONSTANT_OVERFLOW (t) = TREE_OVERFLOW (t) = 1;\n   return t;\n }\n \n@@ -3870,7 +3870,7 @@ build_c_cast (type, expr)\n     }\n   else\n     {\n-      tree otype;\n+      tree otype, ovalue;\n \n       /* If casting to void, avoid the error that would come\n \t from default_conversion in the case of a non-lvalue array.  */\n@@ -3925,11 +3925,15 @@ build_c_cast (type, expr)\n \t  && !TREE_CONSTANT (value))\n \twarning (\"cast to pointer from integer of different size\");\n \n+      ovalue = value;\n       value = convert (type, value);\n \n       /* Ignore any integer overflow caused by the cast.  */\n       if (TREE_CODE (value) == INTEGER_CST)\n-\tTREE_CONSTANT_OVERFLOW (value) = 0;\n+\t{\n+\t  TREE_OVERFLOW (value) = TREE_OVERFLOW (ovalue);\n+\t  TREE_CONSTANT_OVERFLOW (value) = TREE_CONSTANT_OVERFLOW (ovalue);\n+\t}\n     }\n \n   if (value == expr && pedantic)\n@@ -4535,10 +4539,11 @@ store_init_value (decl, init)\n     }\n #endif\n \n+  DECL_INITIAL (decl) = value;\n+\n   /* ANSI wants warnings about out-of-range constant initializers.  */\n+  STRIP_TYPE_NOPS (value);\n   constant_expression_warning (value);\n-\n-  DECL_INITIAL (decl) = value;\n }\n \f\n /* Methods for storing and printing names for error messages.  */"}]}