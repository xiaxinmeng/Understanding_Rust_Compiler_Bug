{"sha": "7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkNjYzZjU0N2I5YjY5NzU1YmE5YjNiY2FkY2M5NmY4MmU4MzBlNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-25T14:21:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-25T14:21:25Z"}, "message": "re PR middle-end/68528 ([5 Only] Wrong constant folding)\n\n2015-11-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/68528\n\t* fold-const.c (fold_binary_loc): Do not call negate_expr_p\n\ton stripped operands.\n\n\t* gcc.dg/torture/pr68528.c: New testcase.\n\nFrom-SVN: r230870", "tree": {"sha": "d9ddc59b42ea01fae75000cf1c225f2de9467eb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ddc59b42ea01fae75000cf1c225f2de9467eb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ab662d507d1576731e25013c7134c670daf40eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab662d507d1576731e25013c7134c670daf40eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab662d507d1576731e25013c7134c670daf40eb"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "d6b749be7faddb4d11482517e5872105617e2223", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "patch": "@@ -1,3 +1,9 @@\n+2015-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/68528\n+\t* fold-const.c (fold_binary_loc): Do not call negate_expr_p\n+\ton stripped operands.\n+\n 2015-11-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx.c (walk_args_for_params): Delete."}, {"sha": "16bff5f07be9f249e21325b08087f9e8141bdd57", "filename": "gcc/fold-const.c", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "patch": "@@ -9681,13 +9681,12 @@ fold_binary_loc (location_t loc,\n     case MINUS_EXPR:\n       /* (-A) - B -> (-B) - A  where B is easily negated and we can swap.  */\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && negate_expr_p (arg1)\n+\t  && negate_expr_p (op1)\n \t  && reorder_operands_p (arg0, arg1))\n \treturn fold_build2_loc (loc, MINUS_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      negate_expr (arg1)),\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      TREE_OPERAND (arg0, 0)));\n+\t\t\t\tnegate_expr (op1),\n+\t\t\t\tfold_convert_loc (loc, type,\n+\t\t\t\t\t\t  TREE_OPERAND (arg0, 0)));\n \n       /* Fold __complex__ ( x, 0 ) - __complex__ ( 0, y ) to\n \t __complex__ ( x, -y ).  This is not the same for SNaNs or if\n@@ -9727,17 +9726,16 @@ fold_binary_loc (location_t loc,\n \t}\n \n       /* A - B -> A + (-B) if B is easily negatable.  */\n-      if (negate_expr_p (arg1)\n-\t  && !TYPE_OVERFLOW_SANITIZED (type)\n+      if (negate_expr_p (op1)\n+\t  && ! TYPE_OVERFLOW_SANITIZED (type)\n \t  && ((FLOAT_TYPE_P (type)\n                /* Avoid this transformation if B is a positive REAL_CST.  */\n-\t       && (TREE_CODE (arg1) != REAL_CST\n-\t\t   ||  REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1))))\n+\t       && (TREE_CODE (op1) != REAL_CST\n+\t\t   || REAL_VALUE_NEGATIVE (TREE_REAL_CST (op1))))\n \t      || INTEGRAL_TYPE_P (type)))\n \treturn fold_build2_loc (loc, PLUS_EXPR, type,\n-\t\t\t    fold_convert_loc (loc, type, arg0),\n-\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t      negate_expr (arg1)));\n+\t\t\t\tfold_convert_loc (loc, type, arg0),\n+\t\t\t\tnegate_expr (op1));\n \n       /* Fold &a[i] - &a[j] to i-j.  */\n       if (TREE_CODE (arg0) == ADDR_EXPR\n@@ -9781,15 +9779,14 @@ fold_binary_loc (location_t loc,\n       if (! FLOAT_TYPE_P (type))\n \t{\n \t  /* Transform x * -C into -x * C if x is easily negatable.  */\n-\t  if (TREE_CODE (arg1) == INTEGER_CST\n-\t      && tree_int_cst_sgn (arg1) == -1\n-\t      && negate_expr_p (arg0)\n-\t      && (tem = negate_expr (arg1)) != arg1\n-\t      && !TREE_OVERFLOW (tem))\n+\t  if (TREE_CODE (op1) == INTEGER_CST\n+\t      && tree_int_cst_sgn (op1) == -1\n+\t      && negate_expr_p (op0)\n+\t      && (tem = negate_expr (op1)) != op1\n+\t      && ! TREE_OVERFLOW (tem))\n \t    return fold_build2_loc (loc, MULT_EXPR, type,\n-\t    \t\t\tfold_convert_loc (loc, type,\n-\t\t\t\t\t\t  negate_expr (arg0)),\n-\t\t\t\ttem);\n+\t\t\t\t    fold_convert_loc (loc, type,\n+\t\t\t\t\t\t      negate_expr (op0)), tem);\n \n \t  /* (A + A) * C -> A * 2 * C  */\n \t  if (TREE_CODE (arg0) == PLUS_EXPR\n@@ -10259,33 +10256,31 @@ fold_binary_loc (location_t loc,\n \t undefined.  */\n       if ((!INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))\n \t  && TREE_CODE (arg0) == NEGATE_EXPR\n-\t  && negate_expr_p (arg1))\n+\t  && negate_expr_p (op1))\n \t{\n \t  if (INTEGRAL_TYPE_P (type))\n \t    fold_overflow_warning ((\"assuming signed overflow does not occur \"\n \t\t\t\t    \"when distributing negation across \"\n \t\t\t\t    \"division\"),\n \t\t\t\t   WARN_STRICT_OVERFLOW_MISC);\n \t  return fold_build2_loc (loc, code, type,\n-\t\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\t\tTREE_OPERAND (arg0, 0)),\n-\t\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\t\tnegate_expr (arg1)));\n+\t\t\t\t  fold_convert_loc (loc, type,\n+\t\t\t\t\t\t    TREE_OPERAND (arg0, 0)),\n+\t\t\t\t  negate_expr (op1));\n \t}\n       if ((!INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))\n \t  && TREE_CODE (arg1) == NEGATE_EXPR\n-\t  && negate_expr_p (arg0))\n+\t  && negate_expr_p (op0))\n \t{\n \t  if (INTEGRAL_TYPE_P (type))\n \t    fold_overflow_warning ((\"assuming signed overflow does not occur \"\n \t\t\t\t    \"when distributing negation across \"\n \t\t\t\t    \"division\"),\n \t\t\t\t   WARN_STRICT_OVERFLOW_MISC);\n \t  return fold_build2_loc (loc, code, type,\n-\t\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\t\tnegate_expr (arg0)),\n-\t\t\t      fold_convert_loc (loc, type,\n-\t\t\t\t\t\tTREE_OPERAND (arg1, 0)));\n+\t\t\t\t  negate_expr (op0),\n+\t\t\t\t  fold_convert_loc (loc, type,\n+\t\t\t\t\t\t    TREE_OPERAND (arg1, 0)));\n \t}\n \n       /* If arg0 is a multiple of arg1, then rewrite to the fastest div"}, {"sha": "47ed2acef54596bbac0ee44bc058b9ceeb7a4bb2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "patch": "@@ -1,3 +1,8 @@\n+2015-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/68528\n+\t* gcc.dg/torture/pr68528.c: New testcase.\n+\n 2015-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58910"}, {"sha": "d69d600f43bdeb46c5eb9b5067add6fa0390e502", "filename": "gcc/testsuite/gcc.dg/torture/pr68528.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68528.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd663f547b9b69755ba9b3bcadcc96f82e830e4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68528.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68528.c?ref=7dd663f547b9b69755ba9b3bcadcc96f82e830e4", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+\n+#define INT_MIN ( -__INT_MAX__ - 1 )\n+\n+extern void abort (void);\n+\n+int main (void)\n+{\n+  int  x0 = INT_MIN;\n+  long x1 = 0L;\n+  int  x2 = 0;\n+  int  t  = ( 0 || ( INT_MIN - (int) ( x0 - x1 ) ) );\n+\n+  if ( t != 0 ) { x2 = t; abort(); }\n+\n+  return 0;\n+}"}]}