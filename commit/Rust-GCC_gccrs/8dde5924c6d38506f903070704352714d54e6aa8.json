{"sha": "8dde5924c6d38506f903070704352714d54e6aa8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkZTU5MjRjNmQzODUwNmY5MDMwNzA3MDQzNTI3MTRkNTRlNmFhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-03-26T08:34:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-03-26T08:34:01Z"}, "message": "reg-stack.c (replace_reg): Use IN_RANGE macro in gcc_assert().\n\n\t* reg-stack.c (replace_reg): Use IN_RANGE macro in gcc_assert().\n        * config/i386/constraints.md\n\t(define_constraint \"I\"): Use IN_RANGE macro.\n\t(define_constraint \"J\"): Ditto.\n\t(define_constraint \"K\"): Ditto.\n\t(define_constraint \"M\"): Ditto.\n\t(define_constraint \"N\"): Ditto.\n\t(define_constraint \"O\"): Ditto.\n\t* config/i386/predicates.md\n\t(define_predicate \"register_no_elim_operand\"): Use IN_RANGE macro.\n\t(define_predicate \"const_0_to_3_operand\"): Ditto.\n\t(define_predicate \"const_0_to_7_operand\"): Ditto.\n\t(define_predicate \"const_0_to_15_operand\"): Ditto.\n\t(define_predicate \"const_0_to_63_operand\"): Ditto.\n\t(define_predicate \"const_0_to_255_operand\"): Ditto.\n\t(define_predicate \"const_1_to_31_operand\"): Ditto.\n\t(define_predicate \"const_2_to_3_operand\"): Ditto.\n\t(define_predicate \"const_4_to_7_operand\"): Ditto.\n\nFrom-SVN: r123210", "tree": {"sha": "497c4155e0c61defa1e0d4948f2dfccb6efb8afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/497c4155e0c61defa1e0d4948f2dfccb6efb8afd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dde5924c6d38506f903070704352714d54e6aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dde5924c6d38506f903070704352714d54e6aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dde5924c6d38506f903070704352714d54e6aa8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dde5924c6d38506f903070704352714d54e6aa8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04375334a4faf46528727cb54400e7d60aa80e22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04375334a4faf46528727cb54400e7d60aa80e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04375334a4faf46528727cb54400e7d60aa80e22"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "8adcaefdc3240ee571779f153cb7de9b626a9864", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dde5924c6d38506f903070704352714d54e6aa8", "patch": "@@ -1,3 +1,24 @@\n+2007-03-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* reg-stack.c (replace_reg): Use IN_RANGE macro in gcc_assert().\n+\t* config/i386/constraints.md\n+\t(define_constraint \"I\"): Use IN_RANGE macro.\n+\t(define_constraint \"J\"): Ditto.\n+\t(define_constraint \"K\"): Ditto.\n+\t(define_constraint \"M\"): Ditto.\n+\t(define_constraint \"N\"): Ditto.\n+\t(define_constraint \"O\"): Ditto.\n+\t* config/i386/predicates.md\n+\t(define_predicate \"register_no_elim_operand\"): Use IN_RANGE macro.\n+\t(define_predicate \"const_0_to_3_operand\"): Ditto.\n+\t(define_predicate \"const_0_to_7_operand\"): Ditto.\n+\t(define_predicate \"const_0_to_15_operand\"): Ditto.\n+\t(define_predicate \"const_0_to_63_operand\"): Ditto.\n+\t(define_predicate \"const_0_to_255_operand\"): Ditto.\n+\t(define_predicate \"const_1_to_31_operand\"): Ditto.\n+\t(define_predicate \"const_2_to_3_operand\"): Ditto.\n+\t(define_predicate \"const_4_to_7_operand\"): Ditto.\n+\n 2007-03-25  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_prologue): Always clobber LR"}, {"sha": "da700219ed85109b521c5b952aa56bd7afdcd981", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=8dde5924c6d38506f903070704352714d54e6aa8", "patch": "@@ -103,17 +103,17 @@\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 31\")))\n+       (match_test \"IN_RANGE (ival, 0, 31)\")))\n \n (define_constraint \"J\"\n   \"Integer constant in the range 0 @dots{} 63, for 64-bit shifts.\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 63\")))\n+       (match_test \"IN_RANGE (ival, 0, 63)\")))\n \n (define_constraint \"K\"\n   \"Signed 8-bit integer constant.\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= -128 && ival <= 127\")))\n+       (match_test \"IN_RANGE (ival, -128, 127)\")))\n \n (define_constraint \"L\"\n   \"@code{0xFF} or @code{0xFFFF}, for andsi as a zero-extending move.\"\n@@ -123,18 +123,18 @@\n (define_constraint \"M\"\n   \"0, 1, 2, or 3 (shifts for the @code{lea} instruction).\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 3\")))\n+       (match_test \"IN_RANGE (ival, 0, 3)\")))\n \n (define_constraint \"N\"\n   \"Unsigned 8-bit integer constant (for @code{in} and @code{out} \n    instructions).\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 255\")))\n+       (match_test \"IN_RANGE (ival, 0, 255)\")))\n \n (define_constraint \"O\"\n   \"@internal Integer constant in the range 0 @dots{} 127, for 128-bit shifts.\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 127\")))\n+       (match_test \"IN_RANGE (ival, 0, 127)\")))\n \n ;; Floating-point constant constraints.\n ;; We allow constants even if TARGET_80387 isn't set, because the"}, {"sha": "86b6774d0623e0d1f593e21c006470221c85b181", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=8dde5924c6d38506f903070704352714d54e6aa8", "patch": "@@ -497,8 +497,8 @@\n     op = SUBREG_REG (op);\n   return !(op == arg_pointer_rtx\n \t   || op == frame_pointer_rtx\n-\t   || (REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t       && REGNO (op) <= LAST_VIRTUAL_REGISTER));\n+\t   || IN_RANGE (REGNO (op),\n+\t\t\tFIRST_PSEUDO_REGISTER, LAST_VIRTUAL_REGISTER));\n })\n \n ;; Similarly, but include the stack pointer.  This is used to prevent esp\n@@ -572,27 +572,27 @@\n ;; Match 0 to 3.\n (define_predicate \"const_0_to_3_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 3\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 3)\")))\n \n ;; Match 0 to 7.\n (define_predicate \"const_0_to_7_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 7\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 7)\")))\n \n ;; Match 0 to 15.\n (define_predicate \"const_0_to_15_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 15\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 15)\")))\n \n ;; Match 0 to 63.\n (define_predicate \"const_0_to_63_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 63\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 63)\")))\n \n ;; Match 0 to 255.\n (define_predicate \"const_0_to_255_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 0 && INTVAL (op) <= 255\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 255)\")))\n \n ;; Match (0 to 255) * 8\n (define_predicate \"const_0_to_255_mul_8_operand\"\n@@ -606,17 +606,17 @@\n ;; for shift & compare patterns, as shifting by 0 does not change flags).\n (define_predicate \"const_1_to_31_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 1 && INTVAL (op) <= 31\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 31)\")))\n \n ;; Match 2 or 3.\n (define_predicate \"const_2_to_3_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) == 2 || INTVAL (op) == 3\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 2, 3)\")))\n \n ;; Match 4 to 7.\n (define_predicate \"const_4_to_7_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 4 && INTVAL (op) <= 7\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 4, 7)\")))\n \n ;; Match exactly one bit in 4-bit mask.\n (define_predicate \"const_pow2_1_to_8_operand\""}, {"sha": "933bff2545677d597d762782d88ae88cca0e52f8", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dde5924c6d38506f903070704352714d54e6aa8/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=8dde5924c6d38506f903070704352714d54e6aa8", "patch": "@@ -695,8 +695,7 @@ stack_result (tree decl)\n static void\n replace_reg (rtx *reg, int regno)\n {\n-  gcc_assert (regno >= FIRST_STACK_REG);\n-  gcc_assert (regno <= LAST_STACK_REG);\n+  gcc_assert (IN_RANGE (regno, FIRST_STACK_REG, LAST_STACK_REG));\n   gcc_assert (STACK_REG_P (*reg));\n \n   gcc_assert (SCALAR_FLOAT_MODE_P (GET_MODE (*reg))"}]}