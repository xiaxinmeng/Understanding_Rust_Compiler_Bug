{"sha": "7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzMzk3YzczOWYzODhjYTRmZThmZDZhMzFjZTNlMjViMDc3NWE2ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-28T11:06:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-28T11:06:31Z"}, "message": "cp-tree.h (begin_compound_stmt): No scope arg is a bool.\n\n\t* cp-tree.h (begin_compound_stmt): No scope arg is a bool.\n\t(finish_compound_stmt): Remove no scope arg.\n\t* decl.c (register_dtor_fn): Adjust begin_compound_stmt and\n\tend_compound_stmt calls.\n\t(expand_static_init, begin_destructor_body, begin_function_body,\n\tfinish_function_body): Likewise.\n\t* decl2.c (start_objects, finish_objects,\n\tstart_static_storage_duration_function,\n\tfinish_static_storage_duration_function): Likewise.\n\t* init.c (begin_init_stmts, finish_init_stmts,\n\tconstruct_virtual_base, build_vec_init): Likewise.\n\t* method.c (do_build_assign_ref, synthesize_method): Likewise.\n\t* parser.c (cp_parser_compound_statement,\n\tcp_parser_implicitly_scoped_statement,\n\tcp_parser_already_scoped_statement): Likewise.\n\t* pt.c (tsubst_expr): Likewise.\n\t* semantics.c (begin_compound_stmt): No scope arg is a bool.\n\t(finish_compound_stmt): Remove no scope arg.\n\n\t* error.c (dump_expr) <COMPOUND_EXPR case>: A compound expr is\n\talways dyadic.\n\nFrom-SVN: r69882", "tree": {"sha": "2905486e57c07a0e41481caa221009f8bef001fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2905486e57c07a0e41481caa221009f8bef001fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/comments", "author": null, "committer": null, "parents": [{"sha": "8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8376cf3db9e7e822da905f72dab50c2eb2b7b4a4"}], "stats": {"total": 125, "additions": 68, "deletions": 57}, "files": [{"sha": "1ca63044dcfa71d82315d91e7f7e547b03f09c09", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -1,3 +1,27 @@\n+2003-07-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (begin_compound_stmt): No scope arg is a bool.\n+\t(finish_compound_stmt): Remove no scope arg.\n+\t* decl.c (register_dtor_fn): Adjust begin_compound_stmt and\n+\tend_compound_stmt calls.\n+\t(expand_static_init, begin_destructor_body, begin_function_body,\n+\tfinish_function_body): Likewise.\n+\t* decl2.c (start_objects, finish_objects,\n+\tstart_static_storage_duration_function,\n+\tfinish_static_storage_duration_function): Likewise.\n+\t* init.c (begin_init_stmts, finish_init_stmts,\n+\tconstruct_virtual_base, build_vec_init): Likewise.\n+\t* method.c (do_build_assign_ref, synthesize_method): Likewise.\n+\t* parser.c (cp_parser_compound_statement,\n+\tcp_parser_implicitly_scoped_statement,\n+\tcp_parser_already_scoped_statement): Likewise.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t* semantics.c (begin_compound_stmt): No scope arg is a bool.\n+\t(finish_compound_stmt): Remove no scope arg.\n+\n+\t* error.c (dump_expr) <COMPOUND_EXPR case>: A compound expr is\n+\talways dyadic.\n+\n 2003-07-27  Mark Mitchell  <mark@codesourcery.com>\n \n \t* call.c (standard_conversion): Tweak handling of"}, {"sha": "0ee47d9b9d93d7e1915ad288ec149e1d2d1e48e1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -4126,8 +4126,8 @@ extern void finish_handler_parms                (tree, tree);\n extern void begin_catch_block                   (tree);\n extern void finish_handler                      (tree);\n extern void finish_cleanup                      (tree, tree);\n-extern tree begin_compound_stmt                 (int);\n-extern tree finish_compound_stmt                (int, tree);\n+extern tree begin_compound_stmt                 (bool);\n+extern tree finish_compound_stmt                (tree);\n extern tree finish_asm_stmt                     (tree, tree, tree, tree, tree);\n extern tree finish_label_stmt                   (tree);\n extern void finish_label_decl                   (tree);"}, {"sha": "4e6da3f5f33d8e7b365263653674909b2f5ae32a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -8475,9 +8475,9 @@ register_dtor_fn (tree decl)\n   pop_deferring_access_checks ();\n \n   /* Create the body of the anonymous function.  */\n-  compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n+  compound_stmt = begin_compound_stmt (/*has_no_scope=*/false);\n   finish_expr_stmt (fcall);\n-  finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n+  finish_compound_stmt (compound_stmt);\n   end_cleanup_fn ();\n \n   /* Call atexit with the cleanup function.  */\n@@ -8562,7 +8562,7 @@ expand_static_init (tree decl, tree init)\n       /* Begin the conditional initialization.  */\n       if_stmt = begin_if_stmt ();\n       finish_if_stmt_cond (get_guard_cond (guard), if_stmt);\n-      then_clause = begin_compound_stmt (/*has_no_scope=*/0);\n+      then_clause = begin_compound_stmt (/*has_no_scope=*/false);\n \n       /* Do the initialization itself.  */\n       assignment = init ? init : NULL_TREE;\n@@ -8586,7 +8586,7 @@ expand_static_init (tree decl, tree init)\n \t variable.  */\n       register_dtor_fn (decl);\n \n-      finish_compound_stmt (/*has_no_scope=*/0, then_clause);\n+      finish_compound_stmt (then_clause);\n       finish_then_clause (if_stmt);\n       finish_if_stmt ();\n     }\n@@ -13840,14 +13840,14 @@ begin_destructor_body (void)\n      initialize the vtables.)  */\n   finish_if_stmt_cond (boolean_true_node, if_stmt);\n \n-  compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n+  compound_stmt = begin_compound_stmt (/*has_no_scope=*/false);\n \n   /* Make all virtual function table pointers in non-virtual base\n      classes point to CURRENT_CLASS_TYPE's virtual function\n      tables.  */\n   initialize_vtbl_ptrs (current_class_ptr);\n \n-  finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n+  finish_compound_stmt (compound_stmt);\n   finish_then_clause (if_stmt);\n   finish_if_stmt ();\n \n@@ -13914,7 +13914,7 @@ begin_function_body (void)\n        operation of dwarfout.c.  */\n     keep_next_level (1);\n \n-  stmt = begin_compound_stmt (0);\n+  stmt = begin_compound_stmt (/*has_no_scope=*/false);\n   COMPOUND_STMT_BODY_BLOCK (stmt) = 1;\n \n   if (processing_template_decl)\n@@ -13940,7 +13940,7 @@ void\n finish_function_body (tree compstmt)\n {\n   /* Close the block.  */\n-  finish_compound_stmt (0, compstmt);\n+  finish_compound_stmt (compstmt);\n \n   if (processing_template_decl)\n     /* Do nothing now.  */;"}, {"sha": "a9f8fa88b5cadcd622ca0416f2bdcc026c1befcd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -2025,7 +2025,7 @@ start_objects (int method_type, int initp)\n     DECL_GLOBAL_DTOR_P (current_function_decl) = 1;\n   DECL_LANG_SPECIFIC (current_function_decl)->decl_flags.u2sel = 1;\n \n-  body = begin_compound_stmt (/*has_no_scope=*/0);\n+  body = begin_compound_stmt (/*has_no_scope=*/false);\n \n   /* We cannot allow these functions to be elided, even if they do not\n      have external linkage.  And, there's no point in deferring\n@@ -2046,7 +2046,7 @@ finish_objects (int method_type, int initp, tree body)\n   tree fn;\n \n   /* Finish up.  */\n-  finish_compound_stmt (/*has_no_scope=*/0, body);\n+  finish_compound_stmt (body);\n   fn = finish_function (0);\n   expand_or_defer_fn (fn);\n \n@@ -2182,7 +2182,7 @@ start_static_storage_duration_function (unsigned count)\n \t\t  SF_PRE_PARSED);\n \n   /* Set up the scope of the outermost block in the function.  */\n-  body = begin_compound_stmt (/*has_no_scope=*/0);\n+  body = begin_compound_stmt (/*has_no_scope=*/false);\n \n   /* This function must not be deferred because we are depending on\n      its compilation to tell us what is TREE_SYMBOL_REFERENCED.  */\n@@ -2200,7 +2200,7 @@ static void\n finish_static_storage_duration_function (tree body)\n {\n   /* Close out the function.  */\n-  finish_compound_stmt (/*has_no_scope=*/0, body);\n+  finish_compound_stmt (body);\n   expand_or_defer_fn (finish_function (0));\n }\n "}, {"sha": "491e56a862cbd76dc087c2bfc2aa6ff136c7f135", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -1491,20 +1491,9 @@ dump_expr (tree t, int flags)\n \n     case COMPOUND_EXPR:\n       pp_left_paren (cxx_pp);\n-      /* Within templates, a COMPOUND_EXPR has only one operand,\n-         containing a TREE_LIST of the two operands.  */\n-      if (TREE_CODE (TREE_OPERAND (t, 0)) == TREE_LIST)\n-      {\n-        if (TREE_OPERAND (t, 1))\n-          abort();\n-        dump_expr_list (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n-      }\n-      else\n-      {\n-        dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n-        pp_separate_with_comma (cxx_pp);\n-        dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n-      }\n+      dump_expr (TREE_OPERAND (t, 0), flags | TFF_EXPR_IN_PARENS);\n+      pp_separate_with_comma (cxx_pp);\n+      dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n       pp_right_paren (cxx_pp);\n       break;\n "}, {"sha": "1774af4ae30d5be5b750ec3cc8dbba6b1516b10c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -72,7 +72,7 @@ begin_init_stmts (tree *stmt_expr_p, tree *compound_stmt_p)\n   bool is_global = !building_stmt_tree ();\n   \n   *stmt_expr_p = begin_stmt_expr ();\n-  *compound_stmt_p = begin_compound_stmt (/*has_no_scope=*/1);\n+  *compound_stmt_p = begin_compound_stmt (/*has_no_scope=*/true);\n \n   return is_global;\n }\n@@ -83,7 +83,7 @@ begin_init_stmts (tree *stmt_expr_p, tree *compound_stmt_p)\n static tree\n finish_init_stmts (bool is_global, tree stmt_expr, tree compound_stmt)\n {  \n-  finish_compound_stmt (/*has_no_scope=*/1, compound_stmt);\n+  finish_compound_stmt (compound_stmt);\n   \n   stmt_expr = finish_stmt_expr (stmt_expr);\n   STMT_EXPR_NO_SCOPE (stmt_expr) = true;\n@@ -842,7 +842,7 @@ construct_virtual_base (tree vbase, tree arguments)\n   flag = TREE_CHAIN (DECL_ARGUMENTS (current_function_decl));\n   inner_if_stmt = begin_if_stmt ();\n   finish_if_stmt_cond (flag, inner_if_stmt);\n-  compound_stmt = begin_compound_stmt (/*has_no_scope=*/1);\n+  compound_stmt = begin_compound_stmt (/*has_no_scope=*/true);\n \n   /* Compute the location of the virtual base.  If we're\n      constructing virtual bases, then we must be the most derived\n@@ -852,7 +852,7 @@ construct_virtual_base (tree vbase, tree arguments)\n \n   expand_aggr_init_1 (vbase, current_class_ref, exp, arguments, \n \t\t      LOOKUP_COMPLAIN);\n-  finish_compound_stmt (/*has_no_scope=*/1, compound_stmt);\n+  finish_compound_stmt (compound_stmt);\n   finish_then_clause (inner_if_stmt);\n   finish_if_stmt ();\n \n@@ -2485,7 +2485,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n       && from_array != 2)\n     {\n       try_block = begin_try_block ();\n-      try_body = begin_compound_stmt (/*has_no_scope=*/1);\n+      try_body = begin_compound_stmt (/*has_no_scope=*/true);\n     }\n \n   if (init != NULL_TREE && TREE_CODE (init) == CONSTRUCTOR)\n@@ -2564,7 +2564,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n \t\t       for_stmt);\n \n       /* Otherwise, loop through the elements.  */\n-      for_body = begin_compound_stmt (/*has_no_scope=*/1);\n+      for_body = begin_compound_stmt (/*has_no_scope=*/true);\n \n       if (from_array)\n \t{\n@@ -2605,7 +2605,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n       if (base2)\n \tfinish_expr_stmt (build_unary_op (PREINCREMENT_EXPR, base2, 0));\n \n-      finish_compound_stmt (/*has_no_scope=*/1, for_body);\n+      finish_compound_stmt (for_body);\n       finish_for_stmt (for_stmt);\n     }\n \n@@ -2625,7 +2625,7 @@ build_vec_init (tree base, tree maxindex, tree init, int from_array)\n \t  type = strip_array_types (type);\n \t}\n \n-      finish_compound_stmt (/*has_no_scope=*/1, try_body);\n+      finish_compound_stmt (try_body);\n       finish_cleanup_try_block (try_block);\n       e = build_vec_delete_1 (rval, m,\n \t\t\t      type,"}, {"sha": "1a2f7b05161105ae99c7e62a1062003770ca9483", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -587,7 +587,7 @@ do_build_assign_ref (tree fndecl)\n   tree parm = TREE_CHAIN (DECL_ARGUMENTS (fndecl));\n   tree compound_stmt;\n \n-  compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n+  compound_stmt = begin_compound_stmt (/*has_no_scope=*/false);\n   parm = convert_from_reference (parm);\n \n   if (TYPE_HAS_TRIVIAL_ASSIGN_REF (current_class_type)\n@@ -680,7 +680,7 @@ do_build_assign_ref (tree fndecl)\n \t}\n     }\n   finish_return_stmt (current_class_ref);\n-  finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n+  finish_compound_stmt (compound_stmt);\n }\n \n void\n@@ -744,8 +744,8 @@ synthesize_method (tree fndecl)\n   if (need_body)\n     {\n       tree compound_stmt;\n-      compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n-      finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n+      compound_stmt = begin_compound_stmt (/*has_no_scope=*/false);\n+      finish_compound_stmt (compound_stmt);\n     }\n \n   finish_function_body (stmt);"}, {"sha": "1b7b3def8b792e91d835e56087ba0fa57103e4e3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -5280,11 +5280,11 @@ cp_parser_compound_statement (cp_parser *parser)\n   if (!cp_parser_require (parser, CPP_OPEN_BRACE, \"`{'\"))\n     return error_mark_node;\n   /* Begin the compound-statement.  */\n-  compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n+  compound_stmt = begin_compound_stmt (/*has_no_scope=*/false);\n   /* Parse an (optional) statement-seq.  */\n   cp_parser_statement_seq_opt (parser);\n   /* Finish the compound-statement.  */\n-  finish_compound_stmt (/*has_no_scope=*/0, compound_stmt);\n+  finish_compound_stmt (compound_stmt);\n   /* Consume the `}'.  */\n   cp_parser_require (parser, CPP_CLOSE_BRACE, \"`}'\");\n \n@@ -5762,11 +5762,11 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser)\n   if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))\n     {\n       /* Create a compound-statement.  */\n-      statement = begin_compound_stmt (/*has_no_scope=*/0);\n+      statement = begin_compound_stmt (/*has_no_scope=*/false);\n       /* Parse the dependent-statement.  */\n       cp_parser_statement (parser);\n       /* Finish the dummy compound-statement.  */\n-      finish_compound_stmt (/*has_no_scope=*/0, statement);\n+      finish_compound_stmt (statement);\n     }\n   /* Otherwise, we simply parse the statement directly.  */\n   else\n@@ -5790,11 +5790,11 @@ cp_parser_already_scoped_statement (cp_parser* parser)\n       tree statement;\n \n       /* Create a compound-statement.  */\n-      statement = begin_compound_stmt (/*has_no_scope=*/1);\n+      statement = begin_compound_stmt (/*has_no_scope=*/true);\n       /* Parse the dependent-statement.  */\n       cp_parser_statement (parser);\n       /* Finish the dummy compound-statement.  */\n-      finish_compound_stmt (/*has_no_scope=*/1, statement);\n+      finish_compound_stmt (statement);\n     }\n   /* Otherwise, we simply parse the statement directly.  */\n   else"}, {"sha": "31bde1a9a0cedd4e81263fe8428a59d268b841fb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -7732,7 +7732,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \tif (COMPOUND_STMT_BODY_BLOCK (t))\n \t  finish_function_body (stmt);\n \telse\n-\t  finish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t), stmt);\n+\t  finish_compound_stmt (stmt);\n       }\n       break;\n "}, {"sha": "abfe08633d6f9b90812f86f548015ae4ca79a9d0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7a3397c739f388ca4fe8fd6a31ce3e25b0775a6e", "patch": "@@ -985,12 +985,12 @@ finish_handler (tree handler)\n   RECHAIN_STMTS (handler, HANDLER_BODY (handler));\n }\n \n-/* Begin a compound-statement.  If HAS_NO_SCOPE is nonzero, the\n+/* Begin a compound-statement.  If HAS_NO_SCOPE is true, the\n    compound-statement does not define a scope.  Returns a new\n-   COMPOUND_STMT if appropriate.  */\n+   COMPOUND_STMT.  */\n \n tree\n-begin_compound_stmt (int has_no_scope)\n+begin_compound_stmt (bool has_no_scope)\n {\n   tree r; \n   int is_try = 0;\n@@ -1018,20 +1018,18 @@ begin_compound_stmt (int has_no_scope)\n   return r;\n }\n \n-/* Finish a compound-statement, which may be given by COMPOUND_STMT.\n-   If HAS_NO_SCOPE is nonzero, the compound statement does not define\n-   a scope.  */\n+/* Finish a compound-statement, which is given by COMPOUND_STMT. */\n \n tree\n-finish_compound_stmt (int has_no_scope, tree compound_stmt)\n+finish_compound_stmt (tree compound_stmt)\n {\n   tree r;\n   tree t;\n \n-  if (!has_no_scope)\n-    r = do_poplevel ();\n-  else\n+  if (COMPOUND_STMT_NO_SCOPE (compound_stmt))\n     r = NULL_TREE;\n+  else\n+    r = do_poplevel ();\n \n   RECHAIN_STMTS (compound_stmt, COMPOUND_BODY (compound_stmt));\n "}]}