{"sha": "c812785aaaabb3012c848a9e9febb019eff62cdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgxMjc4NWFhYWFiYjMwMTJjODQ4YTllOWZlYmIwMTllZmY2MmNkYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-11-27T21:59:38Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-11-27T21:59:38Z"}, "message": "internal.h: Replace all uses of uchar with unsigned char.\n\n\n\t* internal.h: Replace all uses of uchar with unsigned char.\n\t* include/cpp-id-data.h: Likewise.  Guard typedef of uchar\n\twith !IN_GCC, so uchar is only defined whilst building libcpp.\n\nCo-Authored-By: Zack Weinberg <zack@codesourcery.com>\n\nFrom-SVN: r91394", "tree": {"sha": "25e1fb0626b94baa0060522367379a530b0650f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e1fb0626b94baa0060522367379a530b0650f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c812785aaaabb3012c848a9e9febb019eff62cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c812785aaaabb3012c848a9e9febb019eff62cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c812785aaaabb3012c848a9e9febb019eff62cdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c812785aaaabb3012c848a9e9febb019eff62cdc/comments", "author": null, "committer": null, "parents": [{"sha": "38318b7342286bdb454b869ed2278c3d088392d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38318b7342286bdb454b869ed2278c3d088392d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38318b7342286bdb454b869ed2278c3d088392d6"}], "stats": {"total": 105, "additions": 59, "deletions": 46}, "files": [{"sha": "2b709b418a2c625f8e618c984838bdc614004649", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c812785aaaabb3012c848a9e9febb019eff62cdc/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c812785aaaabb3012c848a9e9febb019eff62cdc/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c812785aaaabb3012c848a9e9febb019eff62cdc", "patch": "@@ -1,3 +1,10 @@\n+2004-11-27  Roger Sayle  <roger@eyesopen.com>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* internal.h: Replace all uses of uchar with unsigned char.\n+\t* include/cpp-id-data.h: Likewise.  Guard typedef of uchar\n+\twith !IN_GCC, so uchar is only defined whilst building libcpp.\n+\n 2004-11-24  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* aclocal.m4: Regenerate."}, {"sha": "23fef1afbba143ef97d9f2183104a9edb830d80d", "filename": "libcpp/include/cpp-id-data.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c812785aaaabb3012c848a9e9febb019eff62cdc/libcpp%2Finclude%2Fcpp-id-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c812785aaaabb3012c848a9e9febb019eff62cdc/libcpp%2Finclude%2Fcpp-id-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpp-id-data.h?ref=c812785aaaabb3012c848a9e9febb019eff62cdc", "patch": "@@ -18,10 +18,11 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #include \"cpplib.h\"\n \n-#ifndef HAVE_UCHAR\n+#if !defined (HAVE_UCHAR) && !defined (IN_GCC)\n typedef unsigned char uchar;\n #endif\n-#define U (const uchar *)  /* Intended use: U\"string\" */\n+\n+#define U (const unsigned char *)  /* Intended use: U\"string\" */\n \n /* Chained list of answers to an assertion.  */\n struct answer GTY(())\n@@ -48,7 +49,7 @@ struct cpp_macro GTY(())\n   union cpp_macro_u\n   {\n     cpp_token * GTY ((tag (\"0\"), length (\"%0.count\"))) tokens;\n-    const uchar * GTY ((tag (\"1\"))) text;\n+    const unsigned char * GTY ((tag (\"1\"))) text;\n   } GTY ((desc (\"%1.traditional\"))) exp;\n \n   /* Definition line number.  */"}, {"sha": "32e938c5c54ec46cd7ec3b05c28bed55a6536d13", "filename": "libcpp/internal.h", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c812785aaaabb3012c848a9e9febb019eff62cdc/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c812785aaaabb3012c848a9e9febb019eff62cdc/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=c812785aaaabb3012c848a9e9febb019eff62cdc", "patch": "@@ -157,8 +157,8 @@ struct cpp_context\n     /* For traditional macro expansion.  */\n     struct\n     {\n-      const uchar *cur;\n-      const uchar *rlimit;\n+      const unsigned char *cur;\n+      const unsigned char *rlimit;\n     } trad;\n   } u;\n \n@@ -232,7 +232,7 @@ typedef struct _cpp_line_note _cpp_line_note;\n struct _cpp_line_note\n {\n   /* Location in the clean line the note refers to.  */\n-  const uchar *pos;\n+  const unsigned char *pos;\n \n   /* Type of note.  The 9 'from' trigraph characters represent those\n      trigraphs, '\\\\' an escaped newline, ' ' an escaped newline with\n@@ -243,17 +243,17 @@ struct _cpp_line_note\n /* Represents the contents of a file cpplib has read in.  */\n struct cpp_buffer\n {\n-  const uchar *cur;\t\t/* Current location.  */\n-  const uchar *line_base;\t/* Start of current physical line.  */\n-  const uchar *next_line;\t/* Start of to-be-cleaned logical line.  */\n+  const unsigned char *cur;        /* Current location.  */\n+  const unsigned char *line_base;  /* Start of current physical line.  */\n+  const unsigned char *next_line;  /* Start of to-be-cleaned logical line.  */\n \n-  const uchar *buf;\t\t/* Entire character buffer.  */\n-  const uchar *rlimit;\t\t/* Writable byte at end of file.  */\n+  const unsigned char *buf;        /* Entire character buffer.  */\n+  const unsigned char *rlimit;     /* Writable byte at end of file.  */\n \n-  _cpp_line_note *notes;\t/* Array of notes.  */\n-  unsigned int cur_note;\t/* Next note to process.  */\n-  unsigned int notes_used;\t/* Number of notes.  */\n-  unsigned int notes_cap;\t/* Size of allocated array.  */\n+  _cpp_line_note *notes;           /* Array of notes.  */\n+  unsigned int cur_note;           /* Next note to process.  */\n+  unsigned int notes_used;         /* Number of notes.  */\n+  unsigned int notes_cap;          /* Size of allocated array.  */\n \n   struct cpp_buffer *prev;\n \n@@ -385,8 +385,8 @@ struct cpp_reader\n   struct cset_converter wide_cset_desc;\n \n   /* Date and time text.  Calculated together if either is requested.  */\n-  const uchar *date;\n-  const uchar *time;\n+  const unsigned char *date;\n+  const unsigned char *time;\n \n   /* EOF token, and a token forcing paste avoidance.  */\n   cpp_token avoid_paste;\n@@ -429,14 +429,14 @@ struct cpp_reader\n   /* Traditional preprocessing output buffer (a logical line).  */\n   struct\n   {\n-    uchar *base;\n-    uchar *limit;\n-    uchar *cur;\n+    unsigned char *base;\n+    unsigned char *limit;\n+    unsigned char *cur;\n     source_location first_line;\n   } out;\n \n   /* Used for buffer overlays by cpptrad.c.  */\n-  const uchar *saved_cur, *saved_rlimit, *saved_line_base;\n+  const unsigned char *saved_cur, *saved_rlimit, *saved_line_base;\n \n   /* A saved list of the defined macros, for dependency checking\n      of precompiled headers.  */\n@@ -490,11 +490,12 @@ extern void _cpp_free_definition (cpp_hashnode *);\n extern bool _cpp_create_definition (cpp_reader *, cpp_hashnode *);\n extern void _cpp_pop_context (cpp_reader *);\n extern void _cpp_push_text_context (cpp_reader *, cpp_hashnode *,\n-\t\t\t\t    const uchar *, size_t);\n+\t\t\t\t    const unsigned char *, size_t);\n extern bool _cpp_save_parameter (cpp_reader *, cpp_macro *, cpp_hashnode *);\n extern bool _cpp_arguments_ok (cpp_reader *, cpp_macro *, const cpp_hashnode *,\n \t\t\t       unsigned int);\n-extern const uchar *_cpp_builtin_macro_text (cpp_reader *, cpp_hashnode *);\n+extern const unsigned char *_cpp_builtin_macro_text (cpp_reader *,\n+\t\t\t\t\t\t     cpp_hashnode *);\n int _cpp_warn_if_unused_macro (cpp_reader *, cpp_hashnode *, void *);\n /* In cpphash.c */\n extern void _cpp_init_hashtable (cpp_reader *, hash_table *);\n@@ -552,66 +553,70 @@ extern void _cpp_pop_buffer (cpp_reader *);\n /* In cpptrad.c.  */\n extern bool _cpp_scan_out_logical_line (cpp_reader *, cpp_macro *);\n extern bool _cpp_read_logical_line_trad (cpp_reader *);\n-extern void _cpp_overlay_buffer (cpp_reader *pfile, const uchar *, size_t);\n+extern void _cpp_overlay_buffer (cpp_reader *pfile, const unsigned char *,\n+\t\t\t\t size_t);\n extern void _cpp_remove_overlay (cpp_reader *);\n extern bool _cpp_create_trad_definition (cpp_reader *, cpp_macro *);\n extern bool _cpp_expansions_different_trad (const cpp_macro *,\n \t\t\t\t\t    const cpp_macro *);\n-extern uchar *_cpp_copy_replacement_text (const cpp_macro *, uchar *);\n+extern unsigned char *_cpp_copy_replacement_text (const cpp_macro *,\n+\t\t\t\t\t\t  unsigned char *);\n extern size_t _cpp_replacement_text_len (const cpp_macro *);\n \n /* In cppcharset.c.  */\n-extern cppchar_t _cpp_valid_ucn (cpp_reader *, const uchar **,\n-\t\t\t\t const uchar *, int);\n+extern cppchar_t _cpp_valid_ucn (cpp_reader *, const unsigned char **,\n+\t\t\t\t const unsigned char *, int);\n extern void _cpp_destroy_iconv (cpp_reader *);\n-extern uchar *_cpp_convert_input (cpp_reader *, const char *, uchar *,\n-\t\t\t\t  size_t, size_t, off_t *);\n+extern unsigned char *_cpp_convert_input (cpp_reader *, const char *,\n+\t\t\t\t\t  unsigned char *, size_t, size_t,\n+\t\t\t\t\t  off_t *);\n extern const char *_cpp_default_encoding (void);\n \n /* Utility routines and macros.  */\n-#define DSC(str) (const uchar *)str, sizeof str - 1\n+#define DSC(str) (const unsigned char *)str, sizeof str - 1\n \n /* These are inline functions instead of macros so we can get type\n    checking.  */\n-static inline int ustrcmp (const uchar *, const uchar *);\n-static inline int ustrncmp (const uchar *, const uchar *, size_t);\n-static inline size_t ustrlen (const uchar *);\n-static inline uchar *uxstrdup (const uchar *);\n-static inline uchar *ustrchr (const uchar *, int);\n-static inline int ufputs (const uchar *, FILE *);\n+static inline int ustrcmp (const unsigned char *, const unsigned char *);\n+static inline int ustrncmp (const unsigned char *, const unsigned char *,\n+\t\t\t    size_t);\n+static inline size_t ustrlen (const unsigned char *);\n+static inline unsigned char *uxstrdup (const unsigned char *);\n+static inline unsigned char *ustrchr (const unsigned char *, int);\n+static inline int ufputs (const unsigned char *, FILE *);\n \n static inline int\n-ustrcmp (const uchar *s1, const uchar *s2)\n+ustrcmp (const unsigned char *s1, const unsigned char *s2)\n {\n   return strcmp ((const char *)s1, (const char *)s2);\n }\n \n static inline int\n-ustrncmp (const uchar *s1, const uchar *s2, size_t n)\n+ustrncmp (const unsigned char *s1, const unsigned char *s2, size_t n)\n {\n   return strncmp ((const char *)s1, (const char *)s2, n);\n }\n \n static inline size_t\n-ustrlen (const uchar *s1)\n+ustrlen (const unsigned char *s1)\n {\n   return strlen ((const char *)s1);\n }\n \n-static inline uchar *\n-uxstrdup (const uchar *s1)\n+static inline unsigned char *\n+uxstrdup (const unsigned char *s1)\n {\n-  return (uchar *) xstrdup ((const char *)s1);\n+  return (unsigned char *) xstrdup ((const char *)s1);\n }\n \n-static inline uchar *\n-ustrchr (const uchar *s1, int c)\n+static inline unsigned char *\n+ustrchr (const unsigned char *s1, int c)\n {\n-  return (uchar *) strchr ((const char *)s1, c);\n+  return (unsigned char *) strchr ((const char *)s1, c);\n }\n \n static inline int\n-ufputs (const uchar *s, FILE *f)\n+ufputs (const unsigned char *s, FILE *f)\n {\n   return fputs ((const char *)s, f);\n }"}]}