{"sha": "0b1d67d23b3498243272f751414b157054be4515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxZDY3ZDIzYjM0OTgyNDMyNzJmNzUxNDE0YjE1NzA1NGJlNDUxNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-03T00:22:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-03T00:22:05Z"}, "message": "re PR libstdc++/14320 (istreambuf_iterator::difference_type is not a signed integral type)\n\n2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/14320\n\t* include/bits/postypes.h (class streamoff): Remove, now\n\tstreamoff is just typedef a 64 bit signed integer type.\n\t(class fpos): Tweak consistently.\n\t* testsuite/27_io/fpos/14320-1.cc: New.\n\t* testsuite/27_io/fpos/14320-2.cc: New.\n\t* testsuite/27_io/fpos/14320-3.cc: New.\n\t* testsuite/27_io/fpos/14320-4.cc: New.\n\t* testsuite/27_io/fpos/14320-5.cc: New.\n\t* testsuite/27_io/fpos/mbstate_t/4_neg.cc: xfail for now.\n\nFrom-SVN: r78799", "tree": {"sha": "facba5f352496caa2ec5d778e2625a680ec40fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/facba5f352496caa2ec5d778e2625a680ec40fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1d67d23b3498243272f751414b157054be4515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d67d23b3498243272f751414b157054be4515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1d67d23b3498243272f751414b157054be4515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1d67d23b3498243272f751414b157054be4515/comments", "author": null, "committer": null, "parents": [{"sha": "0eadce5226808dfd6180effb4de3ad794d72c84d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eadce5226808dfd6180effb4de3ad794d72c84d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eadce5226808dfd6180effb4de3ad794d72c84d"}], "stats": {"total": 408, "additions": 281, "deletions": 127}, "files": [{"sha": "e6c8a2ee4f0967864647d994ec8b44c0db07e7cb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -1,3 +1,16 @@\n+2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/14320\n+\t* include/bits/postypes.h (class streamoff): Remove, now\n+\tstreamoff is just typedef a 64 bit signed integer type.\n+\t(class fpos): Tweak consistently.\n+\t* testsuite/27_io/fpos/14320-1.cc: New.\n+\t* testsuite/27_io/fpos/14320-2.cc: New.\n+\t* testsuite/27_io/fpos/14320-3.cc: New.\n+\t* testsuite/27_io/fpos/14320-4.cc: New.\n+\t* testsuite/27_io/fpos/14320-5.cc: New.\n+\t* testsuite/27_io/fpos/mbstate_t/4_neg.cc: xfail for now.\n+\n 2004-03-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get<>::_M_extract):"}, {"sha": "0cfb61b2df2e99b8d920591a4facf3f3e7986fc9", "filename": "libstdc++-v3/include/bits/postypes.h", "status": "modified", "additions": 21, "deletions": 125, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpostypes.h?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -58,10 +58,20 @@ namespace std\n   // unspecified. The behaviour in this implementation is as noted\n   // below.\n \n+  /**\n+   *  @brief  Type used by fpos, char_traits<char>, and char_traits<wchar_t>.\n+   *\n+   *  @if maint\n+   *  In clauses 21.1.3.1 and 27.4.1 streamoff is described as an\n+   *  implementation defined type.\n+   *  Note: In versions of GCC up to and including GCC 3.3, streamoff\n+   *  was typedef long.\n+   *  @endif\n+  */  \n #ifdef _GLIBCXX_HAVE_INT64_T\n-  typedef int64_t       __streamoff_base_type;\n+  typedef int64_t       streamoff;\n #else\n-  typedef long long     __streamoff_base_type;\n+  typedef long long     streamoff;\n #endif\n \n   /// Integral type for I/O operation counts and buffer sizes.\n@@ -70,107 +80,6 @@ namespace std\n   template<typename _StateT>\n     class fpos;\n \n-  // Class streamoff is an implementation defined type that meets the\n-  // requirements for streamoff. It stores an offset as a signed\n-  // integer.  Note: this class is an implementation detail.\n-  class streamoff\n-  {\n-  private:\n-    __streamoff_base_type _M_off;\n-\n-  public:\n-    // Nothing in the standard requires that streamoff can be default\n-    // constructed. In this implementation a default constructor that\n-    // stores the value 0 is provided.\n-    streamoff()\n-    : _M_off(0) { }\n-\n-    // The standard only requires that streamoff can be constructed\n-    // from streamsize using the constructor syntax. This\n-    // implementation also allows implicit conversion from integer\n-    // types to streamoff.\n-    streamoff(__streamoff_base_type __off)\n-    : _M_off(__off) { }\n-\n-    // The standard requires that streamoff can be constructed from\n-    // instances of fpos using the constructor syntax, but gives no\n-    // semantics for this construction. In this implementation it\n-    // extracts the offset stored by the fpos object.\n-    // Note: In versions of GCC up to and including GCC 3.3, implicit\n-    // conversion from fpos to streamoff was allowed. This constructor\n-    // has now been made explicit to improve type safety.\n-    template<typename _StateT>\n-      explicit\n-      streamoff(const fpos<_StateT>&);\n-\n-    // The standard requires that streamsize can be constructed from\n-    // streamoff using the constructor syntax. This implementation\n-    // also allows implicit conversion. This allows streamoff objects\n-    // to be used in arithmetic expressions and to be compared against\n-    // each other and integer types.\n-    operator __streamoff_base_type() const\n-    { return _M_off; }\n-\n-    // This implementation allows the use of operators +=, -=, ++ and\n-    // -- on streamoff objects.\n-    streamoff&\n-    operator+=(__streamoff_base_type __off)\n-    {\n-      _M_off += __off;\n-      return *this;\n-    }\n-\n-    streamoff&\n-    operator-=(__streamoff_base_type __off)\n-    {\n-      _M_off -= __off;\n-      return *this;\n-    }\n-\n-    streamoff&\n-    operator++()\n-    {\n-      ++_M_off;\n-      return *this;\n-    }\n-\n-    streamoff\n-    operator++(int)\n-    {\n-      const streamoff __tmp(*this);\n-      ++_M_off;\n-      return __tmp;\n-    }\n-\n-    streamoff&\n-    operator--()\n-    {\n-      --_M_off;\n-      return *this;\n-    }\n-\n-    streamoff\n-    operator--(int)\n-    {\n-      const streamoff __tmp(*this);\n-      --_M_off;\n-      return __tmp;\n-    }\n-  };\n-\n-  /**\n-   *  @brief  Type used by fpos, char_traits<char>, and char_traits<wchar_t>.\n-   *\n-   *  @if maint\n-   *  In clauses 21.1.3.1 and 27.4.1 streamoff is described as an\n-   *  implementation defined type. In this implementation it is a\n-   *  distinct class type.\n-   *  Note: In versions of GCC up to and including GCC 3.3, streamoff\n-   *  was typedef long.\n-   *  @endif\n-  */\n-  typedef class streamoff streamoff;\n-\n   /**\n    *  @brief  Class representing stream positions.\n    *\n@@ -186,9 +95,7 @@ namespace std\n     class fpos\n     {\n     private:\n-      friend class streamoff;\n-\n-      __streamoff_base_type\t_M_off;\n+      streamoff\t                _M_off;\n       _StateT\t\t\t_M_state;\n \n     public:\n@@ -199,24 +106,19 @@ namespace std\n       fpos()\n       : _M_off(0), _M_state() { }\n \n-      // The standard requires implicit conversion from integers to\n-      // fpos, but gives no meaningful semantics for this\n-      // conversion. In this implementation this constructor stores\n-      // the integer as the offset and default constructs the state.\n-      /// Construct position from integer.\n-      fpos(__streamoff_base_type __off)\n-      : _M_off(__off), _M_state() { }\n-\n       // The standard requires that fpos objects can be constructed\n       // from streamoff objects using the constructor syntax, and\n       // fails to give any meaningful semantics. In this\n       // implementation implicit conversion is also allowed, and this\n       // constructor stores the streamoff as the offset and default\n       // constructs the state.\n       /// Construct position from offset.\n-      fpos(const streamoff& __off)\n+      fpos(streamoff __off)\n       : _M_off(__off), _M_state() { }\n \n+      /// Convert to streamoff.\n+      operator streamoff() const { return _M_off; }\n+\n       /// Remember the value of @a st.\n       void\n       state(_StateT __st)\n@@ -246,7 +148,7 @@ namespace std\n       // argument to the stored offset and returns *this.\n       /// Add offset to this position.\n       fpos&\n-      operator+=(const streamoff& __off)\n+      operator+=(streamoff __off)\n       {\n \t_M_off += __off;\n \treturn *this;\n@@ -257,7 +159,7 @@ namespace std\n       // it's argument from the stored offset and returns *this.\n       /// Subtract offset from this position.\n       fpos&\n-      operator-=(const streamoff& __off)\n+      operator-=(streamoff __off)\n       {\n \t_M_off -= __off;\n \treturn *this;\n@@ -270,7 +172,7 @@ namespace std\n       // copy.\n       /// Add position and offset.\n       fpos\n-      operator+(const streamoff& __off) const\n+      operator+(streamoff __off) const\n       {\n \tfpos __pos(*this);\n \t__pos += __off;\n@@ -284,7 +186,7 @@ namespace std\n       // copy.\n       /// Subtract offset from position.\n       fpos\n-      operator-(const streamoff& __off) const\n+      operator-(streamoff __off) const\n       {\n \tfpos __pos(*this);\n \t__pos -= __off;\n@@ -301,12 +203,6 @@ namespace std\n       { return _M_off - __other._M_off; }\n     };\n \n-  /// Construct offset from position.\n-  template<typename _StateT>\n-    inline\n-    streamoff::streamoff(const fpos<_StateT>& __pos)\n-    : _M_off(__pos._M_off) { }\n-\n   // Clauses 21.1.3.1 and 21.1.3.2 describe streampos and wstreampos\n   // as implementation defined types, but clause 27.2 requires that\n   // they must both be typedefs for fpos<mbstate_t>"}, {"sha": "71a4d7a5c206514b7b2c086b3b6d6864b0f37271", "filename": "libstdc++-v3/testsuite/27_io/fpos/14320-1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-1.cc?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -0,0 +1,61 @@\n+// 2004-03-02  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <typeinfo>\n+#include <limits>\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/14320\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char>::difference_type Distance;\n+\n+  bool found = false;\n+  if (typeid(Distance) == typeid(long int))\n+    found = true;\n+  if (typeid(Distance) == typeid(int))\n+    found = true;\n+  if (typeid(Distance) == typeid(short int))\n+    found = true;\n+  if (typeid(Distance) == typeid(signed char))\n+    found = true;\n+  if (numeric_limits<char>::is_signed &&\n+      typeid(Distance) == typeid(char))\n+    found = true;\n+  if (numeric_limits<wchar_t>::is_signed &&\n+      typeid(Distance) == typeid(wchar_t))\n+    found = true;\n+  \n+  VERIFY( found );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a60daf94c15efa9e1ebdb4d5fc36f26fd70b1282", "filename": "libstdc++-v3/testsuite/27_io/fpos/14320-2.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-2.cc?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -0,0 +1,44 @@\n+// 2004-03-02  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+// { dg-do run { xfail *-*-* } } \n+\n+#include <iterator>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;  \n+\n+  typedef istreambuf_iterator<char>::difference_type Distance;\n+  typedef numeric_limits<Distance> Limits;\n+\n+  VERIFY( Limits::is_specialized );\n+  VERIFY( Limits::is_signed );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "19c839e2f7447e04ec1c5226f92304574ba406ac", "filename": "libstdc++-v3/testsuite/27_io/fpos/14320-3.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-3.cc?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -0,0 +1,43 @@\n+// 2004-03-02  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/14320\n+int test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::istreambuf_iterator<char>::difference_type Distance;\n+  Distance d = 2;\n+  Distance e = 3;\n+  d *= e;\n+  VERIFY( static_cast<int>(d) == 6 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "591bb4f7a692ca88628ea47b4664e6599fc6a7ca", "filename": "libstdc++-v3/testsuite/27_io/fpos/14320-4.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-4.cc?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -0,0 +1,52 @@\n+// 2004-03-02  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+class Fred\n+{\n+public:\n+  Fred(bool)\n+  { }\n+};\n+\n+void barney(Fred)\n+{ }\n+\n+// libstdc++/14320\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char>::difference_type Distance;\n+  \n+  Distance d = 0;\n+  barney(d);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7c15620e3451a1da155f1b5cdb00cda25401d6fd", "filename": "libstdc++-v3/testsuite/27_io/fpos/14320-5.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-5.cc?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -0,0 +1,45 @@\n+// 2004-03-02  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.4.3 fpos\n+\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/14320\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char>::difference_type Distance;\n+\t\n+  Distance d;\n+  istringstream in(\"5\");\n+  in >> d;\n+  VERIFY( d == 5 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0db4772acd7e50c173ef4ca8bd3fce242aed0ea5", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/4_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1d67d23b3498243272f751414b157054be4515/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F4_neg.cc?ref=0b1d67d23b3498243272f751414b157054be4515", "patch": "@@ -29,10 +29,10 @@ void test04()\n   long n;\n \n   // Implicit conversion\n-  n = pos; // { dg-error \"cannot convert\" }\n+  n = pos; // { dg-error \"cannot convert\" \"\" { xfail *-*-* } }\n \n   // Explicit conversion\n-  n = static_cast<long>(pos); // { dg-error \"invalid static_cast\" }\n+  n = static_cast<long>(pos); // { dg-error \"invalid static_cast\" \"\" { xfail *-*-* } }\n }\n \n int main()"}]}