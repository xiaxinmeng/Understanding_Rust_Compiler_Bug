{"sha": "bd741f34c92ccea7a44b4ba632ed7e648e662708", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ3NDFmMzRjOTJjY2VhN2E0NGI0YmE2MzJlZDdlNjQ4ZTY2MjcwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2006-07-21T21:00:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2006-07-21T21:00:20Z"}, "message": "decl2.c (determine_visibility): Don't propagate visibility from type to decl.\n\n        * decl2.c (determine_visibility): Don't propagate visibility from\n        type to decl.\n        (constrain_class_visibility): Don't warn in system headers.\n        Don't warn about pointer fields.\n\nFrom-SVN: r115651", "tree": {"sha": "4358496ac7765b7190f74685463f436591717ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4358496ac7765b7190f74685463f436591717ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd741f34c92ccea7a44b4ba632ed7e648e662708", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd741f34c92ccea7a44b4ba632ed7e648e662708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd741f34c92ccea7a44b4ba632ed7e648e662708", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd741f34c92ccea7a44b4ba632ed7e648e662708/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "505692b0cd8319bb23012fd510d0f26cebccea87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/505692b0cd8319bb23012fd510d0f26cebccea87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/505692b0cd8319bb23012fd510d0f26cebccea87"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "d8af506844282a0c783717ea93152818e6818c2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd741f34c92ccea7a44b4ba632ed7e648e662708", "patch": "@@ -14,6 +14,7 @@\n 2006-07-20  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (remove_attribute): New fn.\n+\t* tree.h: Declare it.\n \n 2006-07-20  Paul Brook  <paul@codesourcery.com>\n "}, {"sha": "50f8381f94617538438864b9b2125de849884f43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd741f34c92ccea7a44b4ba632ed7e648e662708", "patch": "@@ -1,3 +1,10 @@\n+2006-07-21  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl2.c (determine_visibility): Don't propagate visibility from\n+\ttype to decl.\n+\t(constrain_class_visibility): Don't warn in system headers.\n+\tDon't warn about pointer fields.\n+\n 2006-07-20  Mike Stump  <mrs@apple.com>\n \n \t* decl2.c (determine_visibility_from_class): Don't use hidden"}, {"sha": "faee0aaf693dec0459e95d1c2f26aa4e9fca6a09", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=bd741f34c92ccea7a44b4ba632ed7e648e662708", "patch": "@@ -1775,17 +1775,17 @@ determine_visibility (tree decl)\n   if (class_type)\n     determine_visibility_from_class (decl, class_type);\n \n-  /* Don't let it have more visibility than its type.  */\n-  if (TREE_CODE (decl) != TYPE_DECL)\n-    if (constrain_visibility (decl, type_visibility (TREE_TYPE (decl))))\n-      warning (OPT_Wattributes, \"\\\n-lowering visibility of %q+D to match its type\",\n-\t       decl);\n-\n   if (decl_anon_ns_mem_p (decl))\n     /* Names in an anonymous namespace get internal linkage.\n        This might change once we implement export.  */\n     constrain_visibility (decl, VISIBILITY_ANON);\n+  else if (TREE_CODE (decl) != TYPE_DECL)\n+    {\n+      /* Propagate anonymity from type to decl.  */\n+      int tvis = type_visibility (TREE_TYPE (decl));\n+      if (tvis == VISIBILITY_ANON)\n+\tconstrain_visibility (decl, tvis);\n+    }\n }\n \n /* By default, static data members and function members receive\n@@ -1841,7 +1841,8 @@ constrain_class_visibility (tree type)\n \n   int vis = type_visibility (type);\n \n-  if (vis == VISIBILITY_ANON)\n+  if (vis == VISIBILITY_ANON\n+      || DECL_IN_SYSTEM_HEADER (TYPE_MAIN_DECL (type)))\n     return;\n \n   /* Don't warn about visibility if the class has explicit visibility.  */\n@@ -1851,13 +1852,15 @@ constrain_class_visibility (tree type)\n   for (t = TYPE_FIELDS (type); t; t = TREE_CHAIN (t))\n     if (TREE_CODE (t) == FIELD_DECL && TREE_TYPE (t) != error_mark_node)\n       {\n-\tint subvis = type_visibility (TREE_TYPE (t));\n+\ttree ftype = strip_array_types (TREE_TYPE (t));\n+\tint subvis = type_visibility (ftype);\n \n \tif (subvis == VISIBILITY_ANON)\n \t  warning (0, \"\\\n %qT has a field %qD whose type uses the anonymous namespace\",\n \t\t   type, t);\n-\telse if (vis < VISIBILITY_HIDDEN\n+\telse if (IS_AGGR_TYPE (ftype)\n+\t\t && vis < VISIBILITY_HIDDEN\n \t\t && subvis >= VISIBILITY_HIDDEN)\n \t  warning (OPT_Wattributes, \"\\\n %qT declared with greater visibility than the type of its field %qD\","}, {"sha": "9197589d45871ddba334ae7ea2ee3fc567eae202", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bd741f34c92ccea7a44b4ba632ed7e648e662708", "patch": "@@ -1625,7 +1625,8 @@ the function is defined in only one shared object.\n You may mark a method as having a visibility explicitly to negate the\n effect of the switch for that method.  For example, if you do want to\n compare pointers to a particular inline method, you might mark it as\n-having default visibility.\n+having default visibility.  Marking the enclosing class with explicit\n+visibility will have no effect.\n \n Explicitly instantiated inline methods are unaffected by this option\n as their linkage might otherwise cross a shared library boundary."}, {"sha": "3b6b85f365af122a611984b037e50866460e5123", "filename": "gcc/testsuite/g++.dg/ext/visibility/warn1.C", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/505692b0cd8319bb23012fd510d0f26cebccea87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/505692b0cd8319bb23012fd510d0f26cebccea87/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn1.C?ref=505692b0cd8319bb23012fd510d0f26cebccea87", "patch": "@@ -1,13 +0,0 @@\n-// Warn when a declaration is specified with greater visibility than that\n-// of its type.\n-\n-// { dg-do compile }\n-// { dg-require-visibility \"\" }\n-// { dg-final { scan-hidden \"_Z1fv\" } }\n-\n-namespace N __attribute ((__visibility__ (\"hidden\")))\n-{\n-  struct A { };\n-}\n-\n-N::A f() { } // { dg-warning \"visibility\" \"\" }"}, {"sha": "3a9637db3c7a2a8af4a5f8854dea532ef5fdaf08", "filename": "gcc/testsuite/g++.dg/ext/visibility/warn2.C", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn2.C?ref=bd741f34c92ccea7a44b4ba632ed7e648e662708", "patch": "@@ -1,6 +1,5 @@\n // Complain when a class is specified with greater visibility than one of\n-// its members' types or bases, and when a declaration has greater\n-// visibility than its type.\n+// its members' types or bases.\n \n // { dg-require-visibility \"\" }\n \n@@ -14,6 +13,4 @@ struct B\n   N::A a;\n };\n \n-N::A f () { }\t\t\t// { dg-warning \"visibility\" }\n-\n struct C: public N::A { };\t// { dg-warning \"visibility\" }"}, {"sha": "2d4ec402127cf86e0389cd9f5fa08698bec78880", "filename": "gcc/testsuite/g++.dg/ext/visibility/warn3.C", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd741f34c92ccea7a44b4ba632ed7e648e662708/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fwarn3.C?ref=bd741f34c92ccea7a44b4ba632ed7e648e662708", "patch": "@@ -12,14 +12,8 @@ struct __attribute ((visibility (\"hidden\"))) A\n \n void A::f() { }\n \n-// This gets a warning; it should have explicit visibility of some sort.\n-A* afactory1() { return new A; }\t// { dg-warning \"visibility\" }\n-\n-// This is OK.\n-__attribute ((visibility (\"default\"))) A*\n-afactory2 () { return new A; }\n-\n-// This gets a warning.\n+// This gets a warning because B objects might rely\n+// on hidden symbols from A.\n struct B\n {\t\t\t\t// { dg-warning \"visibility\" }\n   A a;"}]}