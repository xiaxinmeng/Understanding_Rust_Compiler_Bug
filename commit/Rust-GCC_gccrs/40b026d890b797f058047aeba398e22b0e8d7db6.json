{"sha": "40b026d890b797f058047aeba398e22b0e8d7db6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiMDI2ZDg5MGI3OTdmMDU4MDQ3YWViYTM5OGUyMmIwZThkN2RiNg==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-11-16T02:02:37Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-11-16T02:02:37Z"}, "message": "re PR fortran/13010 (seg fault on valid code)\n\n\tPR fortran/13010\n\t* trans-array.c (gfc_trans_allocate_temp_array): Use gfc_get_dtype.\n\t(gfc_array_init_size, gfc_conv_expr_descriptor): Ditto.\n\t* trans-types.c (gfc_get_dtype): Accept array type rather than element\n\ttype.\n\t(gfc_get_nodesc_array_type): Don't set GFC_TYPE_ARRAY_DTYPE.\n\t(gfc_get_array_type_bounds): Ditto.\n\t(gfc_get_derived_type): Recurse into derived type pointers.\n\t* trans-types.h (gfc_get_dtype): Add prototype.\n\t* trans.h (GFC_TYPE_ARRAY_DTYPE): Add comment.\ntestsuite/\n\t* gfortran.dg/der_pointer_1.f90: New test.\n\nFrom-SVN: r90714", "tree": {"sha": "0b302faf5d83b8618c58bea7ea7eb3ca99221e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b302faf5d83b8618c58bea7ea7eb3ca99221e10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b026d890b797f058047aeba398e22b0e8d7db6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b026d890b797f058047aeba398e22b0e8d7db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b026d890b797f058047aeba398e22b0e8d7db6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b026d890b797f058047aeba398e22b0e8d7db6/comments", "author": null, "committer": null, "parents": [{"sha": "e61ec2dd124a3ef737fabc2686a862c76bdb91db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61ec2dd124a3ef737fabc2686a862c76bdb91db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61ec2dd124a3ef737fabc2686a862c76bdb91db"}], "stats": {"total": 94, "additions": 72, "deletions": 22}, "files": [{"sha": "86ddef6d504310c24ae343f11c2ec78c4c9e45f4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -1,3 +1,16 @@\n+2004-11-16  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/13010\n+\t* trans-array.c (gfc_trans_allocate_temp_array): Use gfc_get_dtype.\n+\t(gfc_array_init_size, gfc_conv_expr_descriptor): Ditto.\n+\t* trans-types.c (gfc_get_dtype): Accept array type rather than element\n+\ttype.\n+\t(gfc_get_nodesc_array_type): Don't set GFC_TYPE_ARRAY_DTYPE.\n+\t(gfc_get_array_type_bounds): Ditto.\n+\t(gfc_get_derived_type): Recurse into derived type pointers.\n+\t* trans-types.h (gfc_get_dtype): Add prototype.\n+\t* trans.h (GFC_TYPE_ARRAY_DTYPE): Add comment.\n+\n 2004-11-15  Paul Brook  <paul@codesourcery.com>\n \n \t* trans-types.c (gfc_get_dtype): Remove obsolete TODO."}, {"sha": "330c34b204895632b8b22727a5f6ccdb72cb36cb", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -569,8 +569,7 @@ gfc_trans_allocate_temp_array (gfc_loopinfo * loop, gfc_ss_info * info,\n \n   /* Fill in the array dtype.  */\n   tmp = gfc_conv_descriptor_dtype (desc);\n-  gfc_add_modify_expr (&loop->pre, tmp,\n-\t\t       GFC_TYPE_ARRAY_DTYPE (TREE_TYPE (desc)));\n+  gfc_add_modify_expr (&loop->pre, tmp, gfc_get_dtype (TREE_TYPE (desc)));\n \n   /*\n      Fill in the bounds and stride.  This is a packed array, so:\n@@ -2658,8 +2657,7 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n \n   /* Set the dtype.  */\n   tmp = gfc_conv_descriptor_dtype (descriptor);\n-  gfc_add_modify_expr (pblock, tmp,\n-                       GFC_TYPE_ARRAY_DTYPE (TREE_TYPE (descriptor)));\n+  gfc_add_modify_expr (pblock, tmp, gfc_get_dtype (TREE_TYPE (descriptor)));\n \n   for (n = 0; n < rank; n++)\n     {\n@@ -3771,7 +3769,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \n       /* Set the dtype.  */\n       tmp = gfc_conv_descriptor_dtype (parm);\n-      gfc_add_modify_expr (&loop.pre, tmp, GFC_TYPE_ARRAY_DTYPE (parmtype));\n+      gfc_add_modify_expr (&loop.pre, tmp, gfc_get_dtype (parmtype));\n \n       if (se->direct_byref)\n \tbase = gfc_index_zero_node;"}, {"sha": "92b362516fa374bce914ebbc93e08fb3564d696a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -848,19 +848,32 @@ gfc_get_desc_dim_type (void)\n   return type;\n }\n \n-static tree\n-gfc_get_dtype (tree type, int rank)\n+\n+/* Return the DTYPE for an array.  This desribes the type and type parameters\n+   of the array.  */\n+/* TODO: Only call this when the value is actually used, and make all the\n+   unknown cases abort.  */\n+\n+tree\n+gfc_get_dtype (tree type)\n {\n   tree size;\n   int n;\n   HOST_WIDE_INT i;\n   tree tmp;\n   tree dtype;\n+  tree etype;\n+  int rank;\n+\n+  gcc_assert (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type));\n+\n+  if (GFC_TYPE_ARRAY_DTYPE (type))\n+    return GFC_TYPE_ARRAY_DTYPE (type);\n \n-  if (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type))\n-    return (GFC_TYPE_ARRAY_DTYPE (type));\n+  rank = GFC_TYPE_ARRAY_RANK (type);\n+  etype = gfc_get_element_type (type);\n \n-  switch (TREE_CODE (type))\n+  switch (TREE_CODE (etype))\n     {\n     case INTEGER_TYPE:\n       n = GFC_DTYPE_INTEGER;\n@@ -878,7 +891,7 @@ gfc_get_dtype (tree type, int rank)\n       n = GFC_DTYPE_COMPLEX;\n       break;\n \n-    /* Arrays have already been dealt with.  */\n+    /* We will never have arrays of arrays.  */\n     case RECORD_TYPE:\n       n = GFC_DTYPE_DERIVED;\n       break;\n@@ -894,7 +907,7 @@ gfc_get_dtype (tree type, int rank)\n     }\n \n   gcc_assert (rank <= GFC_DTYPE_RANK_MASK);\n-  size = TYPE_SIZE_UNIT (type);\n+  size = TYPE_SIZE_UNIT (etype);\n \n   i = rank | (n << GFC_DTYPE_TYPE_SHIFT);\n   if (size && INTEGER_CST_P (size))\n@@ -917,6 +930,7 @@ gfc_get_dtype (tree type, int rank)\n   /* TODO: Check this is actually true, particularly when repacking\n      assumed size parameters.  */\n \n+  GFC_TYPE_ARRAY_DTYPE (type) = dtype;\n   return dtype;\n }\n \n@@ -1027,8 +1041,8 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n   else\n     GFC_TYPE_ARRAY_SIZE (type) = NULL_TREE;\n \n-  GFC_TYPE_ARRAY_DTYPE (type) = gfc_get_dtype (etype, as->rank);\n   GFC_TYPE_ARRAY_RANK (type) = as->rank;\n+  GFC_TYPE_ARRAY_DTYPE (type) = NULL_TREE;\n   range = build_range_type (gfc_array_index_type, gfc_index_zero_node,\n \t\t\t    NULL_TREE);\n   /* TODO: use main type if it is unbounded.  */\n@@ -1091,7 +1105,7 @@ gfc_get_array_type_bounds (tree etype, int dimen, tree * lbound,\n   TYPE_LANG_SPECIFIC (fat_type) = (struct lang_type *)\n     ggc_alloc_cleared (sizeof (struct lang_type));\n   GFC_TYPE_ARRAY_RANK (fat_type) = dimen;\n-  GFC_TYPE_ARRAY_DTYPE (fat_type) = gfc_get_dtype (etype, dimen);\n+  GFC_TYPE_ARRAY_DTYPE (fat_type) = NULL_TREE;\n \n   tmp = TYPE_NAME (etype);\n   if (tmp && TREE_CODE (tmp) == TYPE_DECL)\n@@ -1369,15 +1383,12 @@ gfc_get_derived_type (gfc_symbol * derived)\n       if (c->ts.type == BT_DERIVED && c->pointer)\n         {\n           if (c->ts.derived->backend_decl)\n-            field_type = c->ts.derived->backend_decl;\n+\t    /* We already saw this derived type so use the exiting type.\n+\t       It doesn't matter if it is incomplete.  */\n+\t    field_type = c->ts.derived->backend_decl;\n           else\n-            {\n-              /* Build the type node.  */\n-              field_type = make_node (RECORD_TYPE);\n-              TYPE_NAME (field_type) = get_identifier (c->ts.derived->name);\n-              TYPE_PACKED (field_type) = gfc_option.flag_pack_derived;\n-              c->ts.derived->backend_decl = field_type;\n-            }\n+\t    /* Recurse into the type.  */\n+\t    field_type = gfc_get_derived_type (c->ts.derived);\n         }\n       else\n \t{"}, {"sha": "647a62abc9ae4162be9c06ef73c71c8ac03a58f9", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -92,4 +92,7 @@ int gfc_return_by_reference (gfc_symbol *);\n /* Returns true if the array sym does not require a descriptor.  */\n int gfc_is_nodesc_array (gfc_symbol *);\n \n+/* Return the DTYPE for an array.  */\n+tree gfc_get_dtype (tree);\n+\n #endif"}, {"sha": "f347724a047ebc0258a11ad7700193c7b89503c4", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -553,6 +553,8 @@ struct lang_decl\t\tGTY(())\n #define GFC_TYPE_ARRAY_RANK(node) (TYPE_LANG_SPECIFIC(node)->rank)\n #define GFC_TYPE_ARRAY_SIZE(node) (TYPE_LANG_SPECIFIC(node)->size)\n #define GFC_TYPE_ARRAY_OFFSET(node) (TYPE_LANG_SPECIFIC(node)->offset)\n+/* Code should use gfc_get_dtype instead of accesig this directly.  It may\n+   not be known when the type is created.  */\n #define GFC_TYPE_ARRAY_DTYPE(node) (TYPE_LANG_SPECIFIC(node)->dtype)\n #define GFC_TYPE_ARRAY_DATAPTR_TYPE(node) \\\n   (TYPE_LANG_SPECIFIC(node)->dataptr_type)"}, {"sha": "b14148da1f1d2bc4e239589ca194fc976d6e08c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -1,3 +1,8 @@\n+2004-11-16  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/13010\n+\t* gfortran.dg/der_pointer_1.f90: New test.\n+\n 2004-11-15  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/18498"}, {"sha": "bf4ffc320f61b6d95533ec49c3b762fb6c93bc37", "filename": "gcc/testsuite/gfortran.dg/der_pointer_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_pointer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b026d890b797f058047aeba398e22b0e8d7db6/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_pointer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fder_pointer_1.f90?ref=40b026d890b797f058047aeba398e22b0e8d7db6", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! PR13010\n+! Arrays of self-referential pointers\n+module test\n+   type list_t\n+      type(list_t), pointer :: next\n+   end type list_t\n+\n+   type listptr_t\n+      type(list_t), pointer :: this\n+   end type listptr_t\n+\n+   type x_t\n+      type(listptr_t), pointer :: arr(:)\n+   end type x_t\n+\n+   type(x_t), pointer :: x\n+end module test"}]}