{"sha": "6c1a482c9b6162f31270f35a95a6e4cf19195232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxYTQ4MmM5YjYxNjJmMzEyNzBmMzVhOTVhNmU0Y2YxOTE5NTIzMg==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-09-16T21:51:10Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-09-18T08:29:06Z"}, "message": "v0-mangling: Add type prefixing for simple types", "tree": {"sha": "fabae2cca23c44bb458ea10d3de963fb11d2df2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fabae2cca23c44bb458ea10d3de963fb11d2df2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1a482c9b6162f31270f35a95a6e4cf19195232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a482c9b6162f31270f35a95a6e4cf19195232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1a482c9b6162f31270f35a95a6e4cf19195232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a482c9b6162f31270f35a95a6e4cf19195232/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384cc64dab40edca1f59f369e162df89aa1e91f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384cc64dab40edca1f59f369e162df89aa1e91f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/384cc64dab40edca1f59f369e162df89aa1e91f8"}], "stats": {"total": 109, "additions": 97, "deletions": 12}, "files": [{"sha": "840acb992e00a7e9e723b20d5bc231fe4fdd22b3", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 97, "deletions": 12, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a482c9b6162f31270f35a95a6e4cf19195232/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a482c9b6162f31270f35a95a6e4cf19195232/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=6c1a482c9b6162f31270f35a95a6e4cf19195232", "patch": "@@ -79,6 +79,92 @@ legacy_mangle_self (const TyTy::BaseType *self)\n   return legacy_mangle_name (buf);\n }\n \n+static std::string\n+v0_tuple_prefix (const TyTy::BaseType *ty)\n+{\n+  if (ty->is_unit ())\n+    return \"u\";\n+\n+  // FIXME: ARTHUR: Add rest of algorithm\n+  return \"\";\n+}\n+\n+static std::string\n+v0_numeric_prefix (const TyTy::BaseType *ty)\n+{\n+  static const std::map<std::string, std::string> num_prefixes = {\n+    {\"[i8]\", \"a\"},    {\"[u8]\", \"h\"},\t{\"[i16]\", \"s\"}, {\"[u16]\", \"t\"},\n+    {\"[i32]\", \"l\"},   {\"[u32]\", \"m\"},\t{\"[i64]\", \"x\"}, {\"[u64]\", \"y\"},\n+    {\"[isize]\", \"i\"}, {\"[usize]\", \"j\"}, {\"[f32]\", \"f\"}, {\"[f64]\", \"d\"},\n+  };\n+\n+  auto ty_kind = ty->get_kind ();\n+  auto ty_str = ty->as_string ();\n+  auto numeric_iter = num_prefixes.end ();\n+\n+  // Special numeric types\n+  if (ty_kind == TyTy::TypeKind::ISIZE)\n+    return \"i\";\n+  else if (ty_kind == TyTy::TypeKind::USIZE)\n+    return \"j\";\n+\n+  numeric_iter = num_prefixes.find (ty_str);\n+  if (numeric_iter != num_prefixes.end ())\n+    return numeric_iter->second;\n+\n+  return \"\";\n+}\n+\n+static std::string\n+v0_simple_type_prefix (const TyTy::BaseType *ty)\n+{\n+  switch (ty->get_kind ())\n+    {\n+    case TyTy::TypeKind::BOOL:\n+      return \"b\";\n+    case TyTy::TypeKind::CHAR:\n+      return \"c\";\n+    case TyTy::TypeKind::STR:\n+      return \"e\";\n+    case TyTy::TypeKind::NEVER:\n+      return \"z\";\n+\n+      // Placeholder types\n+    case TyTy::TypeKind::ERROR:\t      // Fallthrough\n+    case TyTy::TypeKind::INFER:\t      // Fallthrough\n+    case TyTy::TypeKind::PLACEHOLDER: // Fallthrough\n+    case TyTy::TypeKind::PARAM:\n+      // FIXME: TyTy::TypeKind::BOUND is also a valid variant in rustc\n+      return \"p\";\n+\n+    case TyTy::TypeKind::TUPLE:\n+      return v0_tuple_prefix (ty);\n+\n+    case TyTy::TypeKind::UINT:\t// Fallthrough\n+    case TyTy::TypeKind::INT:\t// Fallthrough\n+    case TyTy::TypeKind::FLOAT: // Fallthrough\n+    case TyTy::TypeKind::ISIZE: // Fallthrough\n+    case TyTy::TypeKind::USIZE: // Fallthrough\n+      return v0_numeric_prefix (ty);\n+\n+    default:\n+      return \"\";\n+    }\n+\n+  gcc_unreachable ();\n+}\n+\n+static std::string\n+v0_type_prefix (const TyTy::BaseType *ty)\n+{\n+  auto ty_prefix = v0_simple_type_prefix (ty);\n+  if (!ty_prefix.empty ())\n+    return ty_prefix;\n+\n+  // FIXME: We need to fetch more type prefixes\n+  gcc_unreachable ();\n+}\n+\n static std::string\n legacy_mangle_item (const TyTy::BaseType *ty,\n \t\t    const Resolver::CanonicalPath &path,\n@@ -104,17 +190,16 @@ legacy_mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n \t + kMangledSymbolDelim;\n }\n \n-// FIXME: Uncomment once v0 mangling is implemented\n-// static std::string\n-// Mangler::v0_mangle_item (const TyTy::BaseType *ty,\n-// \t\t\t const std::string &name)\n-// {}\n-//\n-// static std::string\n-// Mangler::v0_mangle_impl_item (const TyTy::BaseType *self,\n-// \t\t\t      const TyTy::BaseType *ty,\n-// \t\t\t      const std::string &name)\n-// {}\n+static std::string\n+v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n+\t\tconst std::string &crate_name)\n+{\n+  auto ty_prefix = v0_type_prefix (ty);\n+}\n+\n+static std::string\n+v0_mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n+\t\t     const std::string &name, const std::string &crate_name);\n \n std::string\n Mangler::mangle_item (const TyTy::BaseType *ty,\n@@ -126,7 +211,7 @@ Mangler::mangle_item (const TyTy::BaseType *ty,\n     case Mangler::MangleVersion::LEGACY:\n       return legacy_mangle_item (ty, path, crate_name);\n     case Mangler::MangleVersion::V0:\n-      gcc_unreachable ();\n+      return v0_mangle_item (ty, path, crate_name);\n     default:\n       gcc_unreachable ();\n     }"}]}