{"sha": "9bdca184d65ece8fb958b736d092e65a72f114d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJkY2ExODRkNjVlY2U4ZmI5NThiNzM2ZDA5MmU2NWE3MmYxMTRkMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-09-11T13:41:56Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-09-11T13:41:56Z"}, "message": "re PR fortran/11522 (g77 dwarf-2 ICE in add_abstract_origin_attribute)\n\nPR fortran/11522\n* dwarf2out.c (gen_inlined_subroutine_die): Emit abstract function\nfor ultimate origin even if block is abstract.\n\nFrom-SVN: r71301", "tree": {"sha": "2d7032427ea9d4d5a68342d331cd26a21f04cb38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d7032427ea9d4d5a68342d331cd26a21f04cb38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bdca184d65ece8fb958b736d092e65a72f114d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdca184d65ece8fb958b736d092e65a72f114d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bdca184d65ece8fb958b736d092e65a72f114d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bdca184d65ece8fb958b736d092e65a72f114d0/comments", "author": null, "committer": null, "parents": [{"sha": "aa16693981db4d4ef9e8420c639ade115c76b973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa16693981db4d4ef9e8420c639ade115c76b973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa16693981db4d4ef9e8420c639ade115c76b973"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "0c7f82b405c6e3214f11d9cc88f4b723d798722f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdca184d65ece8fb958b736d092e65a72f114d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdca184d65ece8fb958b736d092e65a72f114d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bdca184d65ece8fb958b736d092e65a72f114d0", "patch": "@@ -1,3 +1,9 @@\n+2003-09-11  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR fortran/11522\n+\t* dwarf2out.c (gen_inlined_subroutine_die): Emit abstract function\n+\tfor ultimate origin even if block is abstract.\n+\n 2003-09-11  Roger Sayle  <roger@eyesopen.com>\n \n \t* combine.c (combine_simplify_rtx): Move several NOT and NEG"}, {"sha": "5fa730e1b55c5f0fe5c3ad66439e3f35219bc31d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bdca184d65ece8fb958b736d092e65a72f114d0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bdca184d65ece8fb958b736d092e65a72f114d0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9bdca184d65ece8fb958b736d092e65a72f114d0", "patch": "@@ -10990,16 +10990,20 @@ gen_lexical_block_die (tree stmt, dw_die_ref context_die, int depth)\n static void\n gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die, int depth)\n {\n+  tree decl = block_ultimate_origin (stmt);\n+\n+  /* Emit info for the abstract instance first, if we haven't yet.  We\n+     must emit this even if the block is abstract, otherwise when we\n+     emit the block below (or elsewhere), we may end up trying to emit\n+     a die whose origin die hasn't been emitted, and crashing.  */\n+  dwarf2out_abstract_function (decl);\n+\n   if (! BLOCK_ABSTRACT (stmt))\n     {\n       dw_die_ref subr_die\n \t= new_die (DW_TAG_inlined_subroutine, context_die, stmt);\n-      tree decl = block_ultimate_origin (stmt);\n       char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n-      /* Emit info for the abstract instance first, if we haven't yet.  */\n-      dwarf2out_abstract_function (decl);\n-\n       add_abstract_origin_attribute (subr_die, decl);\n       ASM_GENERATE_INTERNAL_LABEL (label, BLOCK_BEGIN_LABEL,\n \t\t\t\t   BLOCK_NUMBER (stmt));"}]}