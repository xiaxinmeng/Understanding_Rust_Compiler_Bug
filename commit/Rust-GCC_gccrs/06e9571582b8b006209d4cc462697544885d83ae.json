{"sha": "06e9571582b8b006209d4cc462697544885d83ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZlOTU3MTU4MmI4YjAwNjIwOWQ0Y2M0NjI2OTc1NDQ4ODVkODNhZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-01-11T15:21:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-01-11T15:21:26Z"}, "message": "[arm][2/3] Implement fp16fml extension for ARMv8.4-A\n\nThis patch adds the +fp16fml extension that enables some\nhalf-precision floating-point Advanced SIMD instructions,\navailable through arm_neon.h intrinsics.\n\nThis extension is on by default for armv8.4-a\nif fp16 is available, so it can be enabled by -march=armv8.4-a+fp16.\n\nfp16fml is also available for armv8.2-a and armv8.3-a through the\n+fp16fml option that is added for these architectures.\n\nThe new instructions that this patch adds support for are:\nvfmal.f16 Dr, Sm, Sn\nvfmal.f16 Qr, Dm, Dn\nvfmsl.f16 Dr, Sm, Sn\nvfmsl.f16 Qr, Dm, Dn\n\nThey interpret their input registers as a vector of half-precision\nfloating-point values, extend them to single-precision vectors\nand perform a fused multiply-add or subtract of them with the\ndestination vector.\n\nThis patch exposes these instructions through arm_neon.h intrinsics.\nThe set of intrinsics allows us to do stuff such as perform\nthe multiply-add/subtract operation on the low or top half of\nfloat16x4_t and float16x8_t values.  This maps naturally in aarch64\nto the FMLAL and FMLAL2 instructions but on arm we have to use the\nfact that consecutive NEON registers overlap the wider register\n(i.e. d0 is s0 plus s1, q0 is d0 plus d1 etc). This just means\nwe have to be careful to use the right subreg operand print code.\n\nNew arm-specific builtins are defined to expand to the new patterns.\nI've managed to compress the define_expands using code, mode and int\niterators but the define_insns don't compress very well without two-tiered\niterators (iterator attributes expanding to iterators) which we\ndon't support.\n\nBootstrapped and tested on arm-none-linux-gnueabihf and also on\narmeb-none-eabi.\n\n\t* config/arm/arm-cpus.in (fp16fml): New feature.\n\t(ALL_SIMD): Add fp16fml.\n\t(armv8.2-a): Add fp16fml as an option.\n\t(armv8.3-a): Likewise.\n\t(armv8.4-a): Add fp16fml as part of fp16.\n\t* config/arm/arm.h (TARGET_FP16FML): Define.\n\t* config/arm/arm-c.c (arm_cpu_builtins): Define __ARM_FEATURE_FP16_FML\n\twhen appropriate.\n\t* config/arm/arm-modes.def (V2HF): Define.\n\t* config/arm/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,\n\tvfmlal_high_u32, vfmlsl_high_u32, vfmlalq_low_u32,\n\tvfmlslq_low_u32, vfmlalq_high_u32, vfmlslq_high_u32): Define.\n\t* config/arm/arm_neon_builtins.def (vfmal_low, vfmal_high,\n\tvfmsl_low, vfmsl_high): New set of builtins.\n\t* config/arm/iterators.md (PLUSMINUS): New code iterator.\n\t(vfml_op): New code attribute.\n\t(VFMLHALVES): New int iterator.\n\t(VFML, VFMLSEL): New mode attributes.\n\t(V_reg): Define mapping for V2HF.\n\t(V_hi, V_lo): New mode attributes.\n\t(VF_constraint): Likewise.\n\t(vfml_half, vfml_half_selector): New int attributes.\n\t* config/arm/neon.md (neon_vfm<vfml_op>l_<vfml_half><mode>): New\n\tdefine_expand.\n\t(vfmal_low<mode>_intrinsic, vfmsl_high<mode>_intrinsic,\n\tvfmal_high<mode>_intrinsic, vfmsl_low<mode>_intrinsic):\n\tNew define_insn.\n\t* config/arm/t-arm-elf (v8_fps): Add fp16fml.\n\t* config/arm/t-multilib (v8_2_a_simd_variants): Add fp16fml.\n\t* config/arm/unspecs.md (UNSPEC_VFML_LO, UNSPEC_VFML_HI): New unspecs.\n\t* doc/invoke.texi (ARM Options): Document fp16fml.  Update armv8.4-a\n\tdocumentation.\n\t* doc/sourcebuild.texi (arm_fp16fml_neon_ok, arm_fp16fml_neon):\n\tDocument new effective target and option set.\n\n\t* gcc.target/arm/multilib.exp: Add combination tests for fp16fml.\n\t* gcc.target/arm/simd/fp16fml_high.c: New test.\n\t* gcc.target/arm/simd/fp16fml_low.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_fp16fml_neon_ok_nocache,\n\tcheck_effective_target_arm_fp16fml_neon_ok,\n\tadd_options_for_arm_fp16fml_neon): New procedures.\n\nFrom-SVN: r256539", "tree": {"sha": "12a8a50e491d739c0bc45f3b71d52fc0d243884a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12a8a50e491d739c0bc45f3b71d52fc0d243884a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06e9571582b8b006209d4cc462697544885d83ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e9571582b8b006209d4cc462697544885d83ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e9571582b8b006209d4cc462697544885d83ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e9571582b8b006209d4cc462697544885d83ae/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "946c6c45122d8a4053bf464b09e0f78d3875ae59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946c6c45122d8a4053bf464b09e0f78d3875ae59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946c6c45122d8a4053bf464b09e0f78d3875ae59"}], "stats": {"total": 403, "additions": 395, "deletions": 8}, "files": [{"sha": "f8767cc1416571f477229ccd09177fa394d7e0da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -1,3 +1,40 @@\n+2018-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm-cpus.in (fp16fml): New feature.\n+\t(ALL_SIMD): Add fp16fml.\n+\t(armv8.2-a): Add fp16fml as an option.\n+\t(armv8.3-a): Likewise.\n+\t(armv8.4-a): Add fp16fml as part of fp16.\n+\t* config/arm/arm.h (TARGET_FP16FML): Define.\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Define __ARM_FEATURE_FP16_FML\n+\twhen appropriate.\n+\t* config/arm/arm-modes.def (V2HF): Define.\n+\t* config/arm/arm_neon.h (vfmlal_low_u32, vfmlsl_low_u32,\n+\tvfmlal_high_u32, vfmlsl_high_u32, vfmlalq_low_u32,\n+\tvfmlslq_low_u32, vfmlalq_high_u32, vfmlslq_high_u32): Define.\n+\t* config/arm/arm_neon_builtins.def (vfmal_low, vfmal_high,\n+\tvfmsl_low, vfmsl_high): New set of builtins.\n+\t* config/arm/iterators.md (PLUSMINUS): New code iterator.\n+\t(vfml_op): New code attribute.\n+\t(VFMLHALVES): New int iterator.\n+\t(VFML, VFMLSEL): New mode attributes.\n+\t(V_reg): Define mapping for V2HF.\n+\t(V_hi, V_lo): New mode attributes.\n+\t(VF_constraint): Likewise.\n+\t(vfml_half, vfml_half_selector): New int attributes.\n+\t* config/arm/neon.md (neon_vfm<vfml_op>l_<vfml_half><mode>): New\n+\tdefine_expand.\n+\t(vfmal_low<mode>_intrinsic, vfmsl_high<mode>_intrinsic,\n+\tvfmal_high<mode>_intrinsic, vfmsl_low<mode>_intrinsic):\n+\tNew define_insn.\n+\t* config/arm/t-arm-elf (v8_fps): Add fp16fml.\n+\t* config/arm/t-multilib (v8_2_a_simd_variants): Add fp16fml.\n+\t* config/arm/unspecs.md (UNSPEC_VFML_LO, UNSPEC_VFML_HI): New unspecs.\n+\t* doc/invoke.texi (ARM Options): Document fp16fml.  Update armv8.4-a\n+\tdocumentation.\n+\t* doc/sourcebuild.texi (arm_fp16fml_neon_ok, arm_fp16fml_neon):\n+\tDocument new effective target and option set.\n+\n 2017-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm-cpus.in (armv8_4): New feature."}, {"sha": "486cbd132974aba6ac12fa221ed7322d8d54039d", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -160,6 +160,7 @@ arm_cpu_builtins (struct cpp_reader* pfile)\n \t\t      TARGET_VFP_FP16INST);\n   def_or_undef_macro (pfile, \"__ARM_FEATURE_FP16_VECTOR_ARITHMETIC\",\n \t\t      TARGET_NEON_FP16INST);\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_FP16_FML\", TARGET_FP16FML);\n \n   def_or_undef_macro (pfile, \"__ARM_FEATURE_FMA\", TARGET_FMA);\n   def_or_undef_macro (pfile, \"__ARM_NEON__\", TARGET_NEON);"}, {"sha": "cc08f5a5192fb968d0909773c134944d14013d65", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -165,6 +165,9 @@ define feature fp16\n # Dot Product instructions extension to ARMv8.2-a.\n define feature dotprod\n \n+# Half-precision floating-point instructions in ARMv8.4-A.\n+define feature fp16fml\n+\n # ISA Quirks (errata?).  Don't forget to add this to the fgroup\n # ALL_QUIRKS below.\n \n@@ -202,7 +205,7 @@ define fgroup ALL_CRYPTO\tcrypto\n # strip off 32 D-registers, but does not remove support for\n # double-precision FP.\n define fgroup ALL_SIMD_INTERNAL\tfp_d32 neon ALL_CRYPTO\n-define fgroup ALL_SIMD\tALL_SIMD_INTERNAL dotprod\n+define fgroup ALL_SIMD\tALL_SIMD_INTERNAL dotprod fp16fml\n \n # List of all FPU bits to strip out if -mfpu is used to override the\n # default.  fp16 is deliberately missing from this list.\n@@ -581,6 +584,7 @@ begin arch armv8.2-a\n  isa ARMv8_2a\n  option simd add FP_ARMv8 NEON\n  option fp16 add fp16 FP_ARMv8 NEON\n+ option fp16fml add fp16fml fp16 FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n  option nocrypto remove ALL_CRYPTO\n  option nofp remove ALL_FP\n@@ -595,6 +599,7 @@ begin arch armv8.3-a\n  isa ARMv8_3a\n  option simd add FP_ARMv8 NEON\n  option fp16 add fp16 FP_ARMv8 NEON\n+ option fp16fml add fp16fml fp16 FP_ARMv8 NEON\n  option crypto add FP_ARMv8 CRYPTO\n  option nocrypto remove ALL_CRYPTO\n  option nofp remove ALL_FP\n@@ -608,7 +613,7 @@ begin arch armv8.4-a\n  profile A\n  isa ARMv8_4a\n  option simd add FP_ARMv8 DOTPROD\n- option fp16 add fp16 FP_ARMv8 DOTPROD\n+ option fp16 add fp16 fp16fml FP_ARMv8 DOTPROD\n  option crypto add FP_ARMv8 CRYPTO DOTPROD\n  option nocrypto remove ALL_CRYPTO\n  option nofp remove ALL_FP"}, {"sha": "4dc7517e8530e2225a79e03fe1064c5cade14e54", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -67,6 +67,7 @@ VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI */\n VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI */\n VECTOR_MODES (FLOAT, 8);      /*            V4HF V2SF */\n VECTOR_MODES (FLOAT, 16);     /*       V8HF V4SF V2DF */\n+VECTOR_MODE (FLOAT, HF, 2);   /*                 V2HF */\n \n /* Fraction and accumulator vector modes.  */\n VECTOR_MODES (FRACT, 4);      /* V4QQ  V2HQ */"}, {"sha": "6f3c4f461b9b22e3587d93142a04d6f74a8aa2d5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -216,10 +216,18 @@ extern tree arm_fp16_type_node;\n \t\t\t\t\tisa_bit_dotprod)\t\t\\\n \t\t\t&& arm_arch8_2)\n \n-/* FPU supports the floating point FP16 instructions for ARMv8.2 and later.  */\n+/* FPU supports the floating point FP16 instructions for ARMv8.2-A\n+   and later.  */\n #define TARGET_VFP_FP16INST \\\n   (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP5 && arm_fp16_inst)\n \n+/* Target supports the floating point FP16 instructions from ARMv8.2-A\n+   and later.  */\n+#define TARGET_FP16FML (TARGET_NEON\t\t\t\t\t\\\n+\t\t\t&& bitmap_bit_p (arm_active_target.isa,\t\\\n+\t\t\t\t\tisa_bit_fp16fml)\t\t\\\n+\t\t\t&& arm_arch8_2)\n+\n /* FPU supports the AdvSIMD FP16 instructions for ARMv8.2 and later.  */\n #define TARGET_NEON_FP16INST (TARGET_VFP_FP16INST && TARGET_NEON_RDMA)\n "}, {"sha": "954193cee5a7c49ae34660cbdd94686edbbd65fe", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -18100,6 +18100,69 @@ vdotq_lane_s32 (int32x4_t __r, int8x16_t __a, int8x8_t __b, const int __index)\n #pragma GCC pop_options\n #endif\n \n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+fp16fml\")\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_neon_vfmal_lowv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_low_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_neon_vfmsl_lowv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlal_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_neon_vfmal_highv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlsl_high_u32 (float32x2_t __r, float16x4_t __a, float16x4_t __b)\n+{\n+  return __builtin_neon_vfmsl_highv2sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_neon_vfmal_lowv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_low_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_neon_vfmsl_lowv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlalq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_neon_vfmal_highv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vfmlslq_high_u32 (float32x4_t __r, float16x8_t __a, float16x8_t __b)\n+{\n+  return __builtin_neon_vfmsl_highv4sf (__r, __a, __b);\n+}\n+\n+#pragma GCC pop_options\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "2a165c6266572b8d26ace3a3b0d0747ca43a541e", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -51,6 +51,10 @@ VAR2 (TERNOP, vqdmlal, v4hi, v2si)\n VAR2 (TERNOP, vqdmlsl, v4hi, v2si)\n VAR4 (TERNOP, vqrdmlah, v4hi, v2si, v8hi, v4si)\n VAR4 (TERNOP, vqrdmlsh, v4hi, v2si, v8hi, v4si)\n+VAR2 (TERNOP, vfmal_low, v2sf, v4sf)\n+VAR2 (TERNOP, vfmal_high, v2sf, v4sf)\n+VAR2 (TERNOP, vfmsl_low, v2sf, v4sf)\n+VAR2 (TERNOP, vfmsl_high, v2sf, v4sf)\n VAR3 (BINOP, vmullp, v8qi, v4hi, v2si)\n VAR3 (BINOP, vmulls, v8qi, v4hi, v2si)\n VAR3 (BINOP, vmullu, v8qi, v4hi, v2si)"}, {"sha": "ea0836b45bc7d833757d30eeada15419852bc3fe", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -247,6 +247,9 @@\n ;; Operations on the sign of a number.\n (define_code_iterator ABSNEG [abs neg])\n \n+;; The PLUS and MINUS operators.\n+(define_code_iterator PLUSMINUS [plus minus])\n+\n ;; Conversions.\n (define_code_iterator FCVT [unsigned_float float])\n \n@@ -266,6 +269,8 @@\n \n (define_code_attr cmp_type [(eq \"i\") (gt \"s\") (ge \"s\") (lt \"s\") (le \"s\")])\n \n+(define_code_attr vfml_op [(plus \"a\") (minus \"s\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Int iterators\n ;;----------------------------------------------------------------------------\n@@ -412,6 +417,8 @@\n \n (define_int_iterator DOTPROD [UNSPEC_DOT_S UNSPEC_DOT_U])\n \n+(define_int_iterator VFMLHALVES [UNSPEC_VFML_LO UNSPEC_VFML_HI])\n+\n ;;----------------------------------------------------------------------------\n ;; Mode attributes\n ;;----------------------------------------------------------------------------\n@@ -471,6 +478,12 @@\n                               (V2SF \"V2SF\") (V4SF \"V2SF\")\n                               (DI \"V2DI\")   (V2DI \"V2DI\")])\n \n+;; Mode mapping for VFM[A,S]L instructions.\n+(define_mode_attr VFML [(V2SF \"V4HF\") (V4SF \"V8HF\")])\n+\n+;; Mode mapping for VFM[A,S]L instructions for the vec_select result.\n+(define_mode_attr VFMLSEL [(V2SF \"V2HF\") (V4SF \"V4HF\")])\n+\n ;; Similar, for three elements.\n (define_mode_attr V_three_elem [(V8QI \"BLK\") (V16QI \"BLK\")\n                                 (V4HI \"BLK\") (V8HI \"BLK\")\n@@ -494,8 +507,14 @@\n \t\t\t (V2SI \"P\") (V4SI  \"q\")\n \t\t\t (V2SF \"P\") (V4SF  \"q\")\n \t\t\t (DI   \"P\") (V2DI  \"q\")\n-\t\t\t (SF   \"\")  (DF    \"P\")\n-\t\t\t (HF   \"\")])\n+\t\t\t (V2HF \"\") (SF   \"\")\n+\t\t\t (DF    \"P\") (HF   \"\")])\n+\n+;; Output template to select the high VFP register of a mult-register value.\n+(define_mode_attr V_hi [(V2SF \"p\") (V4SF  \"f\")])\n+\n+;; Output template to select the low VFP register of a mult-register value.\n+(define_mode_attr V_lo [(V2SF \"\") (V4SF  \"e\")])\n \n ;; Wider modes with the same number of elements.\n (define_mode_attr V_widen [(V8QI \"V8HI\") (V4HI \"V4SI\") (V2SI \"V2DI\")])\n@@ -708,6 +727,7 @@\n (define_mode_attr F_constraint [(SF \"t\") (DF \"w\")])\n (define_mode_attr vfp_type [(SF \"s\") (DF \"d\")])\n (define_mode_attr vfp_double_cond [(SF \"\") (DF \"&& TARGET_VFP_DOUBLE\")])\n+(define_mode_attr VF_constraint [(V2SF \"t\") (V4SF \"w\")])\n \n ;; Mode attribute used to build the \"type\" attribute.\n (define_mode_attr q [(V8QI \"\") (V16QI \"_q\")\n@@ -824,6 +844,12 @@\n   (UNSPEC_DOT_S \"s\") (UNSPEC_DOT_U \"u\")\n ])\n \n+(define_int_attr vfml_half\n+ [(UNSPEC_VFML_HI \"high\") (UNSPEC_VFML_LO \"low\")])\n+\n+(define_int_attr vfml_half_selector\n+ [(UNSPEC_VFML_HI \"true\") (UNSPEC_VFML_LO \"false\")])\n+\n (define_int_attr vcvth_op\n  [(UNSPEC_VCVTA_S \"a\") (UNSPEC_VCVTA_U \"a\")\n   (UNSPEC_VCVTM_S \"m\") (UNSPEC_VCVTM_U \"m\")"}, {"sha": "236793579813f869e1c29ac3d24ee64cc9a9c9eb", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -2290,6 +2290,98 @@\n   DONE;\n })\n \n+;; The expand RTL structure here is not important.\n+;; We use the gen_* functions anyway.\n+;; We just need something to wrap the iterators around.\n+\n+(define_expand \"neon_vfm<vfml_op>l_<vfml_half><mode>\"\n+  [(set (match_operand:VCVTF 0 \"s_register_operand\")\n+     (unspec:VCVTF\n+\t[(match_operand:VCVTF 1 \"s_register_operand\")\n+\t   (PLUSMINUS:<VFML>\n+\t     (match_operand:<VFML> 2 \"s_register_operand\")\n+\t     (match_operand:<VFML> 3 \"s_register_operand\"))] VFMLHALVES))]\n+  \"TARGET_FP16FML\"\n+{\n+  rtx half = arm_simd_vect_par_cnst_half (<VFML>mode, <vfml_half_selector>);\n+  emit_insn (gen_vfm<vfml_op>l_<vfml_half><mode>_intrinsic (operands[0],\n+\t\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t\t     operands[3],\n+\t\t\t\t\t\t\t     half, half));\n+  DONE;\n+})\n+\n+(define_insn \"vfmal_low<mode>_intrinsic\"\n+ [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n+\t(fma:VCVTF\n+\t (float_extend:VCVTF\n+\t  (vec_select:<VFMLSEL>\n+\t   (match_operand:<VFML> 2 \"s_register_operand\" \"<VF_constraint>\")\n+\t   (match_operand:<VFML> 4 \"vect_par_constant_low\" \"\")))\n+\t (float_extend:VCVTF\n+\t  (vec_select:<VFMLSEL>\n+\t   (match_operand:<VFML> 3 \"s_register_operand\" \"<VF_constraint>\")\n+\t   (match_operand:<VFML> 5 \"vect_par_constant_low\" \"\")))\n+\t (match_operand:VCVTF 1 \"s_register_operand\" \"0\")))]\n+ \"TARGET_FP16FML\"\n+ \"vfmal.f16\\\\t%<V_reg>0, %<V_lo>2, %<V_lo>3\"\n+ [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n+)\n+\n+(define_insn \"vfmsl_high<mode>_intrinsic\"\n+ [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n+\t(fma:VCVTF\n+\t (float_extend:VCVTF\n+\t  (neg:<VFMLSEL>\n+\t    (vec_select:<VFMLSEL>\n+\t      (match_operand:<VFML> 2 \"s_register_operand\" \"<VF_constraint>\")\n+\t      (match_operand:<VFML> 4 \"vect_par_constant_high\" \"\"))))\n+\t (float_extend:VCVTF\n+\t  (vec_select:<VFMLSEL>\n+\t   (match_operand:<VFML> 3 \"s_register_operand\" \"<VF_constraint>\")\n+\t   (match_operand:<VFML> 5 \"vect_par_constant_high\" \"\")))\n+\t (match_operand:VCVTF 1 \"s_register_operand\" \"0\")))]\n+ \"TARGET_FP16FML\"\n+ \"vfmsl.f16\\\\t%<V_reg>0, %<V_hi>2, %<V_hi>3\"\n+ [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n+)\n+\n+(define_insn \"vfmal_high<mode>_intrinsic\"\n+ [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n+\t(fma:VCVTF\n+\t (float_extend:VCVTF\n+\t  (vec_select:<VFMLSEL>\n+\t   (match_operand:<VFML> 2 \"s_register_operand\" \"<VF_constraint>\")\n+\t   (match_operand:<VFML> 4 \"vect_par_constant_high\" \"\")))\n+\t (float_extend:VCVTF\n+\t  (vec_select:<VFMLSEL>\n+\t   (match_operand:<VFML> 3 \"s_register_operand\" \"<VF_constraint>\")\n+\t   (match_operand:<VFML> 5 \"vect_par_constant_high\" \"\")))\n+\t (match_operand:VCVTF 1 \"s_register_operand\" \"0\")))]\n+ \"TARGET_FP16FML\"\n+ \"vfmal.f16\\\\t%<V_reg>0, %<V_hi>2, %<V_hi>3\"\n+ [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n+)\n+\n+(define_insn \"vfmsl_low<mode>_intrinsic\"\n+ [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n+\t(fma:VCVTF\n+\t (float_extend:VCVTF\n+\t  (neg:<VFMLSEL>\n+\t    (vec_select:<VFMLSEL>\n+\t      (match_operand:<VFML> 2 \"s_register_operand\" \"<VF_constraint>\")\n+\t      (match_operand:<VFML> 4 \"vect_par_constant_low\" \"\"))))\n+\t (float_extend:VCVTF\n+\t  (vec_select:<VFMLSEL>\n+\t   (match_operand:<VFML> 3 \"s_register_operand\" \"<VF_constraint>\")\n+\t   (match_operand:<VFML> 5 \"vect_par_constant_low\" \"\")))\n+\t (match_operand:VCVTF 1 \"s_register_operand\" \"0\")))]\n+ \"TARGET_FP16FML\"\n+ \"vfmsl.f16\\\\t%<V_reg>0, %<V_lo>2, %<V_lo>3\"\n+ [(set_attr \"type\" \"neon_fp_mla_s<q>\")]\n+)\n+\n ; Used for intrinsics when flag_unsafe_math_optimizations is false.\n \n (define_insn \"neon_vmla<mode>_unspec\""}, {"sha": "9ec5bf065acecff4787a3e59b5f8305bf3b715e7", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -36,7 +36,7 @@ v7ve_fps\t:= vfpv3-d16 vfpv3 vfpv3-d16-fp16 vfpv3-fp16 vfpv4 neon \\\n \n # Not all these permutations exist for all architecture variants, but\n # it seems to work ok.\n-v8_fps\t\t:= simd fp16 crypto fp16+crypto dotprod\n+v8_fps\t\t:= simd fp16 crypto fp16+crypto dotprod fp16fml\n \n # We don't do anything special with these.  Pre-v4t probably doesn't work.\n all_early_nofp\t:= armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5t"}, {"sha": "2f790097670e1bf81b56b069a6b1582763aab6e9", "filename": "gcc/config/arm/t-multilib", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-multilib?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -68,7 +68,7 @@ v7ve_vfpv4_simd_variants := +simd\n v8_a_nosimd_variants\t:= +crc\n v8_a_simd_variants\t:= $(call all_feat_combs, simd crypto)\n v8_1_a_simd_variants\t:= $(call all_feat_combs, simd crypto)\n-v8_2_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto dotprod)\n+v8_2_a_simd_variants\t:= $(call all_feat_combs, simd fp16 fp16fml crypto dotprod)\n v8_4_a_simd_variants\t:= $(call all_feat_combs, simd fp16 crypto)\n \n ifneq (,$(HAS_APROFILE))"}, {"sha": "b05f85e10e47e4df1cf8f0c39a56789795a2da8b", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -412,4 +412,6 @@\n   UNSPEC_VRNDX\n   UNSPEC_DOT_S\n   UNSPEC_DOT_U\n+  UNSPEC_VFML_LO\n+  UNSPEC_VFML_HI\n ])"}, {"sha": "c443c668c8509420056322f1a8ee100cd6fb708c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -15881,6 +15881,11 @@ Disable the floating-point, Advanced SIMD and cryptographic instructions.\n The half-precision floating-point data processing instructions.\n This also enables the Advanced SIMD and floating-point instructions.\n \n+@item +fp16fml\n+The half-precision floating-point fmla extension.  This also enables\n+the half-precision floating-point extension and Advanced SIMD and\n+floating-point instructions.\n+\n @item +simd\n The ARMv8.1-A Advanced SIMD and floating-point instructions.\n \n@@ -15903,7 +15908,8 @@ Disable the floating-point, Advanced SIMD and cryptographic instructions.\n @item +fp16\n The half-precision floating-point data processing instructions.\n This also enables the Advanced SIMD and floating-point instructions as well\n-as the Dot Product extension.\n+as the Dot Product extension and the half-precision floating-point fmla\n+extension.\n \n @item +simd\n The ARMv8.3-A Advanced SIMD and floating-point instructions as well as the"}, {"sha": "f7de713f1f3031b0b2d3799848f4051b55548f59", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -1769,6 +1769,12 @@ ARM target supports executing instructions from ARMv8.2-A with the Dot\n Product extension. Some multilibs may be incompatible with these options.\n Implies arm_v8_2a_dotprod_neon_ok.\n \n+@item arm_fp16fml_neon_ok\n+@anchor{arm_fp16fml_neon_ok}\n+ARM target supports extensions to generate the @code{VFMAL} and @code{VFMLS}\n+half-precision floating-point instructions available from ARMv8.2-A and\n+onwards.  Some multilibs may be incompatible with these options.\n+\n @item arm_prefer_ldrd_strd\n ARM target prefers @code{LDRD} and @code{STRD} instructions over\n @code{LDM} and @code{STM} instructions.\n@@ -2384,6 +2390,11 @@ Add options for ARMv8.2-A with Adv.SIMD Dot Product support, if this is\n supported by the target; see the\n @ref{arm_v8_2a_dotprod_neon_ok} effective target keyword.\n \n+@item arm_fp16fml_neon\n+Add options to enable generation of the @code{VFMAL} and @code{VFMSL}\n+instructions, if this is supported by the target; see the\n+@ref{arm_fp16fml_neon_ok} effective target keyword.\n+\n @item bind_pic_locally\n Add the target-specific flags needed to enable functions to bind\n locally when using pic/PIC passes in the testsuite."}, {"sha": "f49b068645d852ad10c72d7e92f04a514f6eaccc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -1,3 +1,13 @@\n+2018-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/multilib.exp: Add combination tests for fp16fml.\n+\t* gcc.target/arm/simd/fp16fml_high.c: New test.\n+\t* gcc.target/arm/simd/fp16fml_low.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_fp16fml_neon_ok_nocache,\n+\tcheck_effective_target_arm_fp16fml_neon_ok,\n+\tadd_options_for_arm_fp16fml_neon): New procedures.\n+\n 2017-01-11  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/multilib.exp: Add some -march=armv8.4-a"}, {"sha": "c54bca85fd95e31ac5910d9ea95d3faf737d9c91", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -92,6 +92,14 @@ if {[multilib_config \"aprofile\"] } {\n \t{-march=armv8.3-a+simd+dotprod -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-march=armv8.3-a+simd+dotprod+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n \t{-march=armv8.3-a+simd+nofp+dotprod -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.2-a+fp16fml -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.2-a+simd+fp16fml -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.2-a+simd+fp16fml+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.2-a+simd+nofp+fp16fml -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.3-a+fp16fml -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.3-a+simd+fp16fml -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n+\t{-march=armv8.3-a+simd+fp16fml+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\"\n+\t{-march=armv8.3-a+simd+nofp+fp16fml -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-march=armv8.4-a+crypto -mfloat-abi=soft} \"thumb/v8-a/nofp\"\n \t{-march=armv8.4-a+simd+crypto -mfloat-abi=softfp} \"thumb/v8-a+simd/softfp\"\n \t{-march=armv8.4-a+simd+crypto+nofp -mfloat-abi=softfp} \"thumb/v8-a/nofp\""}, {"sha": "0f50a57f42836dfd93d9dd2b52001fc6d6356744", "filename": "gcc/testsuite/gcc.target/arm/simd/fp16fml_high.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_high.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_high.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_high.c?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_fp16fml_neon_ok } */\n+/* { dg-add-options arm_fp16fml_neon }  */\n+\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vfmlal_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlal_high_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlalq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlalq_high_u32 (r, a, b);\n+}\n+\n+float32x2_t\n+test_vfmlsl_high_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlsl_high_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlslq_high_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlslq_high_u32 (r, a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times {vfmal.f16\\td[0-9]+, s[123]?[13579], s[123]?[13579]} 1 } } */\n+/* { dg-final { scan-assembler-times {vfmal.f16\\tq[0-9]+, d[123]?[13579], d[123]?[13579]} 1 } } */\n+/* { dg-final { scan-assembler-times {vfmsl.f16\\td[0-9]+, s[123]?[13579], s[123]?[13579]} 1 } } */\n+/* { dg-final { scan-assembler-times {vfmsl.f16\\tq[0-9]+, d[123]?[13579], d[123]?[13579]} 1 } } */"}, {"sha": "427331c8684ca5f0cc47272e4c30e23908995f33", "filename": "gcc/testsuite/gcc.target/arm/simd/fp16fml_low.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Ffp16fml_low.c?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_fp16fml_neon_ok } */\n+/* { dg-add-options arm_fp16fml_neon }  */\n+\n+#include \"arm_neon.h\"\n+\n+float32x2_t\n+test_vfmlal_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlal_low_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlalq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlalq_low_u32 (r, a, b);\n+}\n+\n+float32x2_t\n+test_vfmlsl_low_u32 (float32x2_t r, float16x4_t a, float16x4_t b)\n+{\n+  return vfmlsl_low_u32 (r, a, b);\n+}\n+\n+float32x4_t\n+test_vfmlslq_low_u32 (float32x4_t r, float16x8_t a, float16x8_t b)\n+{\n+  return vfmlslq_low_u32 (r, a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times {vfmal.f16\\td[0-9]+, s[123]?[02468], s[123]?[02468]} 1 } } */\n+/* { dg-final { scan-assembler-times {vfmal.f16\\tq[0-9]+, d[123]?[02468], d[123]?[02468]} 1 } } */\n+/* { dg-final { scan-assembler-times {vfmsl.f16\\td[0-9]+, s[123]?[02468], s[123]?[02468]} 1 } } */\n+/* { dg-final { scan-assembler-times {vfmsl.f16\\tq[0-9]+, d[123]?[02468], d[123]?[02468]} 1 } } */"}, {"sha": "10d547db2577c77e85140732471ea22a6dae2a3d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06e9571582b8b006209d4cc462697544885d83ae/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=06e9571582b8b006209d4cc462697544885d83ae", "patch": "@@ -4442,6 +4442,51 @@ proc add_options_for_arm_v8_2a_dotprod_neon { flags } {\n     return \"$flags $et_arm_v8_2a_dotprod_neon_flags\"\n }\n \n+# Return 1 if the target supports FP16 VFMAL and VFMSL\n+# instructions, 0 otherwise.\n+# Record the command line options needed.\n+\n+proc check_effective_target_arm_fp16fml_neon_ok_nocache { } {\n+    global et_arm_fp16fml_neon_flags\n+    set et_arm_fp16fml_neon_flags \"\"\n+\n+    if { ![istarget arm*-*-*] } {\n+        return 0;\n+    }\n+\n+    # Iterate through sets of options to find the compiler flags that\n+    # need to be added to the -march option.\n+    foreach flags {\"\" \"-mfloat-abi=softfp -mfpu=neon-fp-armv8\" \"-mfloat-abi=hard -mfpu=neon-fp-armv8\"} {\n+        if { [check_no_compiler_messages_nocache \\\n+                  arm_fp16fml_neon_ok assembly {\n+\t\t#include <arm_neon.h>\n+\t\tfloat32x2_t\n+\t\tfoo (float32x2_t r, float16x4_t a, float16x4_t b)\n+\t\t{\n+\t\t  return vfmlal_high_u32 (r, a, b);\n+\t\t}\n+        } \"$flags -march=armv8.2-a+fp16fml\"] } {\n+            set et_arm_fp16fml_neon_flags \"$flags -march=armv8.2-a+fp16fml\"\n+            return 1\n+        }\n+    }\n+\n+    return 0;\n+}\n+\n+proc check_effective_target_arm_fp16fml_neon_ok { } {\n+    return [check_cached_effective_target arm_fp16fml_neon_ok \\\n+                check_effective_target_arm_fp16fml_neon_ok_nocache]\n+}\n+\n+proc add_options_for_arm_fp16fml_neon { flags } {\n+    if { ! [check_effective_target_arm_fp16fml_neon_ok] } {\n+        return \"$flags\"\n+    }\n+    global et_arm_fp16fml_neon_flags\n+    return \"$flags $et_arm_fp16fml_neon_flags\"\n+}\n+\n # Return 1 if the target supports executing ARMv8 NEON instructions, 0\n # otherwise.\n "}]}