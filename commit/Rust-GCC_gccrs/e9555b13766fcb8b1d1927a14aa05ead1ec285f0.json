{"sha": "e9555b13766fcb8b1d1927a14aa05ead1ec285f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1NTViMTM3NjZmY2I4YjFkMTkyN2ExNGFhMDVlYWQxZWMyODVmMA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-09-01T01:52:26Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-09-01T01:52:26Z"}, "message": "m32c.c (m32c_valid_pointer_mode): New.\n\n* config/m32c/m32c.c (m32c_valid_pointer_mode): New.\n(m32c_asm_integer): Add support for 32 bit pointers.\n\nFrom-SVN: r103715", "tree": {"sha": "0c900b728b76f46d95b866ca310672ead5ae01e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c900b728b76f46d95b866ca310672ead5ae01e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9555b13766fcb8b1d1927a14aa05ead1ec285f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9555b13766fcb8b1d1927a14aa05ead1ec285f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9555b13766fcb8b1d1927a14aa05ead1ec285f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9555b13766fcb8b1d1927a14aa05ead1ec285f0/comments", "author": null, "committer": null, "parents": [{"sha": "8476af981ecf1cebb425bc3d710fb5c75107d306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8476af981ecf1cebb425bc3d710fb5c75107d306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8476af981ecf1cebb425bc3d710fb5c75107d306"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "e08bd7ef9f6042ee0b1748283359b7ec6f85d39d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9555b13766fcb8b1d1927a14aa05ead1ec285f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9555b13766fcb8b1d1927a14aa05ead1ec285f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9555b13766fcb8b1d1927a14aa05ead1ec285f0", "patch": "@@ -1,3 +1,8 @@\n+2005-08-31  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/m32c.c (m32c_valid_pointer_mode): New.\n+\t(m32c_asm_integer): Add support for 32 bit pointers.\n+\n 2005-08-31  Richard Henderson  <rth@redhat.com>\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Look through"}, {"sha": "c89a6a6198a451f39dfea4a4fb81ac6f24d3a003", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9555b13766fcb8b1d1927a14aa05ead1ec285f0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9555b13766fcb8b1d1927a14aa05ead1ec285f0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=e9555b13766fcb8b1d1927a14aa05ead1ec285f0", "patch": "@@ -1503,6 +1503,23 @@ m32c_function_arg_regno_p (int r)\n   return (r == R1_REGNO || r == R2_REGNO);\n }\n \n+/* HImode and PSImode are the two \"native\" modes as far as GCC is\n+   concerned, but the chips also support a 32 bit mode which is used\n+   for some opcodes in R8C/M16C and for reset vectors and such.  */\n+#undef TARGET_VALID_POINTER_MODE\n+#define TARGET_VALID_POINTER_MODE m32c_valid_pointer_mode\n+bool\n+m32c_valid_pointer_mode (enum machine_mode mode)\n+{\n+  fprintf(stderr, \"valid_pointer_mode: %s\\n\", mode_name[mode]);\n+  if (mode == HImode\n+      || mode == PSImode\n+      || mode == SImode\n+      )\n+    return 1;\n+  return 0;\n+}\n+\n /* How Scalar Function Values Are Returned */\n \n /* Implements LIBCALL_VALUE.  Most values are returned in $r0, or some\n@@ -1972,6 +1989,15 @@ m32c_asm_integer (rtx x, unsigned int size, int aligned_p)\n       output_addr_const (asm_out_file, x);\n       fputc ('\\n', asm_out_file);\n       return true;\n+    case 4:\n+      if (GET_CODE (x) == SYMBOL_REF)\n+\t{\n+\t  fprintf (asm_out_file, \"\\t.long\\t\");\n+\t  output_addr_const (asm_out_file, x);\n+\t  fputc ('\\n', asm_out_file);\n+\t  return true;\n+\t}\n+      break;\n     }\n   return default_assemble_integer (x, size, aligned_p);\n }"}]}