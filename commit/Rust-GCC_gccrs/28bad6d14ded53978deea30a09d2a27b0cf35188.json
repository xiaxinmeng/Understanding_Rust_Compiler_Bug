{"sha": "28bad6d14ded53978deea30a09d2a27b0cf35188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiYWQ2ZDE0ZGVkNTM5NzhkZWVhMzBhMDlkMmEyN2IwY2YzNTE4OA==", "commit": {"author": {"name": "Peter Barada", "email": "peter@the-baradas.com", "date": "2004-05-29T15:17:50Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-05-29T15:17:50Z"}, "message": "m68k.c (CONST_METHOD): Add MVZ, MVS.\n\n\t* config/m68k/m68k.c (CONST_METHOD): Add MVZ, MVS.\n\t* config/m68k/m68k.c (const_method): Likewise.\n\t* config/m68k/m68k.c (const_int_cost): Likewise.\n\t* config/m68k/m68k.c (const_int_cost): Likewise.\n\t* config/m68k/m68k.c (output_move_const_into_data_reg): Likewise.\n\nFrom-SVN: r82421", "tree": {"sha": "b715490bc817f20b6f9abd58bc2c76176f83e271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b715490bc817f20b6f9abd58bc2c76176f83e271"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28bad6d14ded53978deea30a09d2a27b0cf35188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bad6d14ded53978deea30a09d2a27b0cf35188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28bad6d14ded53978deea30a09d2a27b0cf35188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bad6d14ded53978deea30a09d2a27b0cf35188/comments", "author": null, "committer": null, "parents": [{"sha": "d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1fe6168c0c4a9c5bba9e04afea5aad5cc7dc2bb"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "3573ee2b56cd624130bd384e4ce7380b4b686103", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bad6d14ded53978deea30a09d2a27b0cf35188/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bad6d14ded53978deea30a09d2a27b0cf35188/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28bad6d14ded53978deea30a09d2a27b0cf35188", "patch": "@@ -1,6 +1,14 @@\n 2004-05-29  Peter Barada  <peter@the-baradas.com>\n \n-\t* config/m68k/m68k.h(EXTRA_CONSTRAINT): add 'U' for register offset\n+\t* config/m68k/m68k.c (CONST_METHOD): Add MVZ, MVS.\n+\t* config/m68k/m68k.c (const_method): Likewise.\n+\t* config/m68k/m68k.c (const_int_cost): Likewise.\n+\t* config/m68k/m68k.c (const_int_cost): Likewise.\n+\t* config/m68k/m68k.c (output_move_const_into_data_reg): Likewise.\n+\n+2004-05-29  Peter Barada  <peter@the-baradas.com>\n+\n+\t* config/m68k/m68k.h (EXTRA_CONSTRAINT): add 'U' for register offset\n \taddressing.\n \t* config/m68k/m68k.md: Add 'U,U' alternative to ColdFire variants of\n \tmovsi,movhi,movqi insn patterns."}, {"sha": "89af89e5a8321586c5af6a05e27829c5e41bcb9a", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bad6d14ded53978deea30a09d2a27b0cf35188/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bad6d14ded53978deea30a09d2a27b0cf35188/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=28bad6d14ded53978deea30a09d2a27b0cf35188", "patch": "@@ -1470,7 +1470,7 @@ legitimize_pic_address (rtx orig, enum machine_mode mode ATTRIBUTE_UNUSED,\n }\n \n \f\n-typedef enum { MOVL, SWAP, NEGW, NOTW, NOTB, MOVQ } CONST_METHOD;\n+typedef enum { MOVL, SWAP, NEGW, NOTW, NOTB, MOVQ, MVS, MVZ } CONST_METHOD;\n \n static CONST_METHOD const_method (rtx);\n \n@@ -1505,6 +1505,16 @@ const_method (rtx constant)\n       if (USE_MOVQ ((u >> 16) | (u << 16)))\n \treturn SWAP;\n     }\n+\n+  if (TARGET_CFV4)\n+    {\n+      /* Try using MVZ/MVS with an immedaite value to load constants.   */\n+      if (i >= 0 && i <= 65535)\n+\treturn MVZ;\n+      if (i >= -32768 && i <= 32767)\n+\treturn MVS;\n+    }\n+\n   /* Otherwise, use move.l */\n   return MOVL;\n }\n@@ -1517,6 +1527,8 @@ const_int_cost (rtx constant)\n       case MOVQ :\n       /* Constants between -128 and 127 are cheap due to moveq */\n \treturn 0;\n+      case MVZ:\n+      case MVS:\n       case NOTB :\n       case NOTW :\n       case NEGW :\n@@ -1661,6 +1673,10 @@ output_move_const_into_data_reg (rtx *operands)\n   i = INTVAL (operands[1]);\n   switch (const_method (operands[1]))\n     {\n+    case MVZ:\n+      return \"mvsw %1,%0\";\n+    case MVS:\n+      return \"mvzw %1,%0\";\n     case MOVQ :\n       return \"moveq %1,%0\";\n     case NOTB :"}]}