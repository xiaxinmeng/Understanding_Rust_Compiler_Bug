{"sha": "e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNlMDhhMWRiNWQzNWY3ODcyNjgzZDZlYjVhYzhlMDhkOWM5MTY4Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-03-25T23:16:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-03-25T23:16:09Z"}, "message": "future (future::share): Add.\n\n2011-03-25  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/future (future::share): Add.\n\t(packaged_task::result_type): Remove as per LWG 2030.\n\t(packaged_task::packaged_task): Remove redundant constructors, as per\n\tLWG 1514.\n\t* testsuite/30_threads/future/members/share.cc: New.\n\t* testsuite/30_threads/packaged_task/requirements/typedefs.cc: Remove.\n\nFrom-SVN: r171531", "tree": {"sha": "122d1cff1303b85f00d089a935b05395e07fa4b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/122d1cff1303b85f00d089a935b05395e07fa4b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be2a0816895b102b529286e1371ee0935b3c8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be2a0816895b102b529286e1371ee0935b3c8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be2a0816895b102b529286e1371ee0935b3c8b1"}], "stats": {"total": 143, "additions": 96, "deletions": 47}, "files": [{"sha": "7a62d5ecf2835ef6b6ae3e439cc8ea43195ccf6e", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "patch": "@@ -618,6 +618,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         typename _Base_type::_Reset __reset(*this);\n         return std::move(this->_M_get_result()._M_value());\n       }\n+\n+      shared_future<_Res> share();\n     };\n  \n   /// Partial specialization for future<R&>\n@@ -659,6 +661,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         typename _Base_type::_Reset __reset(*this);\n         return this->_M_get_result()._M_get();\n       }\n+\n+      shared_future<_Res&> share();\n     };\n \n   /// Explicit specialization for future<void>\n@@ -700,6 +704,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         typename _Base_type::_Reset __reset(*this);\n         this->_M_get_result();\n       }\n+\n+      shared_future<void> share();\n     };\n \n \n@@ -844,6 +850,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : _M_state(std::move(__uf._M_state))\n     { }\n \n+  template<typename _Res>\n+    inline shared_future<_Res>\n+    future<_Res>::share()\n+    { return shared_future<_Res>(std::move(*this)); }\n+\n+  template<typename _Res>\n+    inline shared_future<_Res&>\n+    future<_Res&>::share()\n+    { return shared_future<_Res&>(std::move(*this)); }\n+\n+  inline shared_future<void>\n+  future<void>::share()\n+  { return shared_future<void>(std::move(*this)); }\n \n   /// Primary template for promise\n   template<typename _Res>\n@@ -1198,32 +1217,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       shared_ptr<_State_type>                   _M_state;\n \n     public:\n-      typedef _Res result_type;\n-\n       // Construction and destruction\n       packaged_task() { }\n \n-      template<typename _Fn>\n-        explicit\n-        packaged_task(const _Fn& __fn)\n-        : _M_state(std::make_shared<_State_type>(__fn))\n-        { }\n-\n       template<typename _Fn>\n         explicit\n         packaged_task(_Fn&& __fn)\n-        : _M_state(std::make_shared<_State_type>(std::move(__fn)))\n+        : _M_state(std::make_shared<_State_type>(std::forward<_Fn>(__fn)))\n         { }\n \n-      explicit\n-      packaged_task(_Res(*__fn)(_ArgTypes...))\n-      : _M_state(std::make_shared<_State_type>(__fn))\n-      { }\n-\n       template<typename _Fn, typename _Allocator>\n         explicit\n-        packaged_task(allocator_arg_t __tag, const _Allocator& __a, _Fn __fn)\n-        : _M_state(std::allocate_shared<_State_type>(__a, std::move(__fn)))\n+        packaged_task(allocator_arg_t, const _Allocator& __a, _Fn&& __fn)\n+        : _M_state(std::allocate_shared<_State_type>(__a,\n+                                                     std::forward<_Fn>(__fn)))\n         { }\n \n       ~packaged_task()"}, {"sha": "e37cb776b36fad2ed10f9054180ccfaaa49eb29e", "filename": "libstdc++-v3/testsuite/30_threads/future/members/share.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fshare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fshare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fshare.cc?ref=e3e08a1db5d35f7872683d6eb5ac8e08d9c9168c", "patch": "@@ -0,0 +1,73 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <future>\n+#include <testsuite_hooks.h>\n+\n+int value = 99;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int> p1;\n+  std::future<int> f1(p1.get_future());\n+  std::shared_future<int> f2 = f1.share();\n+\n+  p1.set_value(value);\n+  VERIFY( f2.get() == value );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::promise<int&> p1;\n+  std::future<int&> f1(p1.get_future());\n+  std::shared_future<int&> f2 = f1.share();\n+\n+  p1.set_value(value);\n+  VERIFY( &f2.get() == &value );\n+}\n+\n+void test03()\n+{\n+  std::promise<void> p1;\n+  std::future<void> f1(p1.get_future());\n+  std::shared_future<void> f2 = f1.share();\n+\n+  p1.set_value();\n+  f2.get();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+\n+  return 0;\n+}"}, {"sha": "3c83a3fe7d9061b7153d20021fb03c20f9bbfd81", "filename": "libstdc++-v3/testsuite/30_threads/packaged_task/requirements/typedefs.cc", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be2a0816895b102b529286e1371ee0935b3c8b1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be2a0816895b102b529286e1371ee0935b3c8b1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpackaged_task%2Frequirements%2Ftypedefs.cc?ref=4be2a0816895b102b529286e1371ee0935b3c8b1", "patch": "@@ -1,31 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-std=gnu++0x\" }\n-// { dg-require-cstdint \"\" }\n-// { dg-require-gthreads \"\" }\n-// { dg-require-atomic-builtins \"\" }\n-\n-// Copyright (C) 2009 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <future>\n-\n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::packaged_task<int()>\ttest_type;\n-  typedef test_type::result_type\tresult_type;\n-}"}]}