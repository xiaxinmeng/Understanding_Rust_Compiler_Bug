{"sha": "63d195d54831cf004606e99dff8ca706939635f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkMTk1ZDU0ODMxY2YwMDQ2MDZlOTlkZmY4Y2E3MDY5Mzk2MzVmNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-05T19:33:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-05T19:33:55Z"}, "message": "tree-ssa-structalias.c (get_constraint_for_component_ref): Use ranges_overlap_p.\n\n2008-03-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (get_constraint_for_component_ref):\n\tUse ranges_overlap_p.\n\t(offset_overlaps_with_access): Rename\n\tto ranges_overlap_p and move ...\n\t* tree-flow-inline.h (ranges_overlap_p): ... here.\n\n\t* tree.h (get_inner_reference, handled_component_p): Update\n\tcomments.\n\n\t* tree.h (record_component_aliases, get_alias_set,\n\talias_sets_conflict_p, alias_sets_must_conflict_p,\n\tobjects_must_conflict_p): Move declarations ...\n\t* alias.h (record_component_aliases, get_alias_set,\n\talias_sets_conflict_p, alias_sets_must_conflict_p,\n\tobjects_must_conflict_p): ... here.\n\tInclude coretypes.h.\n\t* Makefile.in (ALIAS_H): Add coretypes.h dependency.\n\nFrom-SVN: r132950", "tree": {"sha": "42fdab63279de985eda1b5dc05468e61bbddbb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42fdab63279de985eda1b5dc05468e61bbddbb5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d195d54831cf004606e99dff8ca706939635f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d195d54831cf004606e99dff8ca706939635f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d195d54831cf004606e99dff8ca706939635f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d195d54831cf004606e99dff8ca706939635f4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "d53c99461c8e125e85306aaa77f44c7417a8b6ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d195d54831cf004606e99dff8ca706939635f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d195d54831cf004606e99dff8ca706939635f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63d195d54831cf004606e99dff8ca706939635f4", "patch": "@@ -1,3 +1,23 @@\n+2008-03-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (get_constraint_for_component_ref):\n+\tUse ranges_overlap_p.\n+\t(offset_overlaps_with_access): Rename\n+\tto ranges_overlap_p and move ...\n+\t* tree-flow-inline.h (ranges_overlap_p): ... here.\n+\n+\t* tree.h (get_inner_reference, handled_component_p): Update\n+\tcomments.\n+\n+\t* tree.h (record_component_aliases, get_alias_set,\n+\talias_sets_conflict_p, alias_sets_must_conflict_p,\n+\tobjects_must_conflict_p): Move declarations ...\n+\t* alias.h (record_component_aliases, get_alias_set,\n+\talias_sets_conflict_p, alias_sets_must_conflict_p,\n+\tobjects_must_conflict_p): ... here.\n+\tInclude coretypes.h.\n+\t* Makefile.in (ALIAS_H): Add coretypes.h dependency.\n+\n 2008-03-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* cfg.c: Include tree-flow.h."}, {"sha": "8e4daf52edade737859e56605ec04c097082e5df", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d195d54831cf004606e99dff8ca706939635f4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d195d54831cf004606e99dff8ca706939635f4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=63d195d54831cf004606e99dff8ca706939635f4", "patch": "@@ -790,7 +790,7 @@ GCOV_IO_H = gcov-io.h gcov-iov.h auto-host.h\n COVERAGE_H = coverage.h $(GCOV_IO_H)\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n-ALIAS_H = alias.h\n+ALIAS_H = alias.h coretypes.h\n EMIT_RTL_H = emit-rtl.h\n FLAGS_H = flags.h options.h\n FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H)"}, {"sha": "b9d954eea023180aaf821ad78dc734155e554e19", "filename": "gcc/alias.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=63d195d54831cf004606e99dff8ca706939635f4", "patch": "@@ -20,14 +20,21 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_ALIAS_H\n #define GCC_ALIAS_H\n \n+#include \"coretypes.h\"\n+\n /* The type of an alias set.  */\n typedef HOST_WIDE_INT alias_set_type;\n \n extern alias_set_type new_alias_set (void);\n+extern alias_set_type get_alias_set (tree);\n extern alias_set_type get_varargs_alias_set (void);\n extern alias_set_type get_frame_alias_set (void);\n extern bool component_uses_parent_alias_set (const_tree);\n extern bool alias_set_subset_of (alias_set_type, alias_set_type);\n+extern void record_component_aliases (tree);\n+extern int alias_sets_conflict_p (alias_set_type, alias_set_type);\n+extern int alias_sets_must_conflict_p (alias_set_type, alias_set_type);\n+extern int objects_must_conflict_p (tree, tree);\n extern int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n \n /* This alias set can be used to force a memory to conflict with all"}, {"sha": "d8593bd19d3cc3bac38fdab8b64b5c0f7b34bf26", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=63d195d54831cf004606e99dff8ca706939635f4", "patch": "@@ -1725,7 +1725,30 @@ var_can_have_subvars (const_tree v)\n   return false;\n }\n \n-  \n+\n+/* Return true, if the two ranges [POS1, SIZE1] and [POS2, SIZE2]\n+   overlap.  SIZE1 and/or SIZE2 can be (unsigned)-1 in which case the\n+   range is open-ended.  Otherwise return false.  */\n+\n+static inline bool\n+ranges_overlap_p (unsigned HOST_WIDE_INT pos1,\n+\t\t  unsigned HOST_WIDE_INT size1,\n+\t\t  unsigned HOST_WIDE_INT pos2,\n+\t\t  unsigned HOST_WIDE_INT size2)\n+{\n+  if (pos1 >= pos2\n+      && (size2 == (unsigned HOST_WIDE_INT)-1\n+\t  || pos1 < (pos2 + size2)))\n+    return true;\n+  if (pos2 >= pos1\n+      && (size1 == (unsigned HOST_WIDE_INT)-1\n+\t  || pos2 < (pos1 + size1)))\n+    return true;\n+\n+  return false;\n+}\n+\n+\n /* Return true if OFFSET and SIZE define a range that overlaps with some\n    portion of the range of SV, a subvar.  If there was an exact overlap,\n    *EXACT will be set to true upon return. */"}, {"sha": "31ab38f8cfa18e33cb844f873e48efd71fc75cb2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=63d195d54831cf004606e99dff8ca706939635f4", "patch": "@@ -2630,25 +2630,6 @@ bitpos_of_field (const tree fdecl)\n }\n \n \n-/* Return true if an access to [ACCESSPOS, ACCESSSIZE]\n-   overlaps with a field at [FIELDPOS, FIELDSIZE] */\n-\n-static bool\n-offset_overlaps_with_access (const unsigned HOST_WIDE_INT fieldpos,\n-\t\t\t     const unsigned HOST_WIDE_INT fieldsize,\n-\t\t\t     const unsigned HOST_WIDE_INT accesspos,\n-\t\t\t     const unsigned HOST_WIDE_INT accesssize)\n-{\n-  if (fieldpos == accesspos && fieldsize == accesssize)\n-    return true;\n-  if (accesspos >= fieldpos && accesspos < (fieldpos + fieldsize))\n-    return true;\n-  if (accesspos < fieldpos && (accesspos + accesssize > fieldpos))\n-    return true;\n-\n-  return false;\n-}\n-\n /* Given a COMPONENT_REF T, return the constraint_expr for it.  */\n \n static void\n@@ -2713,8 +2694,8 @@ get_constraint_for_component_ref (tree t, VEC(ce_s, heap) **results)\n \t  varinfo_t curr;\n \t  for (curr = get_varinfo (result->var); curr; curr = curr->next)\n \t    {\n-\t      if (offset_overlaps_with_access (curr->offset, curr->size,\n-\t\t\t\t\t       result->offset, bitmaxsize))\n+\t      if (ranges_overlap_p (curr->offset, curr->size,\n+\t\t\t\t    result->offset, bitmaxsize))\n \t\t{\n \t\t  result->var = curr->id;\n \t\t  break;"}, {"sha": "d59d3fa9a3b14469c01c44f842c140884a7155c0", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d195d54831cf004606e99dff8ca706939635f4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=63d195d54831cf004606e99dff8ca706939635f4", "patch": "@@ -4564,9 +4564,13 @@ extern tree get_unwidened (tree, tree);\n \n extern tree get_narrower (tree, int *);\n \n-/* Given an expression EXP that may be a COMPONENT_REF or an ARRAY_REF,\n-   look for nested component-refs or array-refs at constant positions\n-   and find the ultimate containing object, which is returned.  */\n+/* Return true if T is an expression that get_inner_reference handles.  */\n+\n+extern int handled_component_p (const_tree);\n+\n+/* Given an expression EXP that is a handled_component_p,\n+   look for the ultimate containing object, which is returned and specify\n+   the access position and size.  */\n \n extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t tree *, enum machine_mode *, int *, int *,\n@@ -4578,10 +4582,6 @@ extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \n extern bool contains_packed_reference (const_tree exp);\n \n-/* Return 1 if T is an expression that get_inner_reference handles.  */\n-\n-extern int handled_component_p (const_tree);\n-\n /* Return a tree of sizetype representing the size, in bytes, of the element\n    of EXP, an ARRAY_REF.  */\n \n@@ -4875,13 +4875,6 @@ extern int get_pointer_alignment (tree, unsigned int);\n /* In convert.c */\n extern tree strip_float_extensions (tree);\n \n-/* In alias.c */\n-extern void record_component_aliases (tree);\n-extern alias_set_type get_alias_set (tree);\n-extern int alias_sets_conflict_p (alias_set_type, alias_set_type);\n-extern int alias_sets_must_conflict_p (alias_set_type, alias_set_type);\n-extern int objects_must_conflict_p (tree, tree);\n-\n /* In tree.c */\n extern int really_constant_p (const_tree);\n extern int int_fits_type_p (const_tree, const_tree);"}]}