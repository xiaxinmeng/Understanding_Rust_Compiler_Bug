{"sha": "b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJjMDZkMDUzMDA5ZDUzYmUwZDliMzA3ZTBjYTAyOTc1YzlmZmJiNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-01-20T04:43:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-01-20T04:43:19Z"}, "message": "US 20 - forwarding references and class template argument deduction\n\n\t* cp-tree.h (TEMPLATE_TYPE_PARM_FOR_CLASS): New.\n\t* pt.c (push_template_decl_real): Set it.\n\t(maybe_adjust_types_for_deduction): Check it.\n\t(rewrite_template_parm): Copy it.\n\nFrom-SVN: r244682", "tree": {"sha": "c680dd849d5d50b23e638fa82ee29cef46a5a8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c680dd849d5d50b23e638fa82ee29cef46a5a8c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "689f867c9c8668f864520372562f8e1b3ca7137c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689f867c9c8668f864520372562f8e1b3ca7137c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689f867c9c8668f864520372562f8e1b3ca7137c"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "bfd898d874bc574a328cdc7a79c99317d00ff625", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "patch": "@@ -1,5 +1,11 @@\n 2017-01-19  Jason Merrill  <jason@redhat.com>\n \n+\tUS 20 - forwarding references and class template argument deduction\n+\t* cp-tree.h (TEMPLATE_TYPE_PARM_FOR_CLASS): New.\n+\t* pt.c (push_template_decl_real): Set it.\n+\t(maybe_adjust_types_for_deduction): Check it.\n+\t(rewrite_template_parm): Copy it.\n+\n \tUS 19 - deduction guides and constructors\n \t* call.c (joust): Prefer deduction guides to constructors.\n \t* pt.c (build_deduction_guide): Set DECL_ARTIFICIAL."}, {"sha": "f7c7a359a48d1690a2dc16b9221518ea0bc60e1e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "patch": "@@ -146,6 +146,7 @@ operator == (const cp_expr &lhs, tree rhs)\n       BLOCK_OUTER_CURLY_BRACE_P (in BLOCK)\n       FOLD_EXPR_MODOP_P (*_FOLD_EXPR)\n       IF_STMT_CONSTEXPR_P (IF_STMT)\n+      TEMPLATE_TYPE_PARM_FOR_CLASS (TEMPLATE_TYPE_PARM)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -5207,6 +5208,11 @@ enum auto_deduction_context\n   adc_decomp_type    /* Decomposition declaration initializer deduction */\n };\n \n+/* True if this type-parameter belongs to a class template, used by C++17\n+   class template argument deduction.  */\n+#define TEMPLATE_TYPE_PARM_FOR_CLASS(NODE) \\\n+  (TREE_LANG_FLAG_0 (TEMPLATE_TYPE_PARM_CHECK (NODE)))\n+\n /* True iff this TEMPLATE_TYPE_PARM represents decltype(auto).  */\n #define AUTO_IS_DECLTYPE(NODE) \\\n   (TYPE_LANG_FLAG_5 (TEMPLATE_TYPE_PARM_CHECK (NODE)))"}, {"sha": "8c920c3644236517a8ee1dfb3b10f9f9c1da4838", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "patch": "@@ -5263,7 +5263,18 @@ push_template_decl_real (tree decl, bool is_friend)\n \t}\n       else if (DECL_IMPLICIT_TYPEDEF_P (decl)\n \t       && CLASS_TYPE_P (TREE_TYPE (decl)))\n-\t/* OK */;\n+\t{\n+\t  /* Class template, set TEMPLATE_TYPE_PARM_FOR_CLASS.  */\n+\t  tree parms = INNERMOST_TEMPLATE_PARMS (current_template_parms);\n+\t  for (int i = 0; i < TREE_VEC_LENGTH (parms); ++i)\n+\t    {\n+\t      tree t = TREE_VALUE (TREE_VEC_ELT (parms, i));\n+\t      if (TREE_CODE (t) == TYPE_DECL)\n+\t\tt = TREE_TYPE (t);\n+\t      if (TREE_CODE (t) == TEMPLATE_TYPE_PARM)\n+\t\tTEMPLATE_TYPE_PARM_FOR_CLASS (t) = true;\n+\t    }\n+\t}\n       else if (TREE_CODE (decl) == TYPE_DECL\n \t       && TYPE_DECL_ALIAS_P (decl))\n \t/* alias-declaration */\n@@ -18649,12 +18660,16 @@ maybe_adjust_types_for_deduction (unification_kind_t strict,\n \t*arg = TYPE_MAIN_VARIANT (*arg);\n     }\n \n-  /* From C++0x [14.8.2.1/3 temp.deduct.call] (after DR606), \"If P is\n-     of the form T&&, where T is a template parameter, and the argument\n-     is an lvalue, T is deduced as A& */\n+  /* [14.8.2.1/3 temp.deduct.call], \"A forwarding reference is an rvalue\n+     reference to a cv-unqualified template parameter that does not represent a\n+     template parameter of a class template (during class template argument\n+     deduction (13.3.1.8)). If P is a forwarding reference and the argument is\n+     an lvalue, the type \"lvalue reference to A\" is used in place of A for type\n+     deduction. */\n   if (TREE_CODE (*parm) == REFERENCE_TYPE\n       && TYPE_REF_IS_RVALUE (*parm)\n       && TREE_CODE (TREE_TYPE (*parm)) == TEMPLATE_TYPE_PARM\n+      && !TEMPLATE_TYPE_PARM_FOR_CLASS (TREE_TYPE (*parm))\n       && cp_type_quals (TREE_TYPE (*parm)) == TYPE_UNQUALIFIED\n       && (arg_expr ? lvalue_p (arg_expr)\n \t  /* try_one_overload doesn't provide an arg_expr, but\n@@ -24798,8 +24813,12 @@ rewrite_template_parm (tree olddecl, unsigned index, unsigned level,\n   if (TREE_CODE (olddecl) == TYPE_DECL\n       || TREE_CODE (olddecl) == TEMPLATE_DECL)\n     {\n-      newtype = cxx_make_type (TREE_CODE (TREE_TYPE (olddecl)));\n+      tree oldtype = TREE_TYPE (olddecl);\n+      newtype = cxx_make_type (TREE_CODE (oldtype));\n       TYPE_MAIN_VARIANT (newtype) = newtype;\n+      if (TREE_CODE (oldtype) == TEMPLATE_TYPE_PARM)\n+\tTEMPLATE_TYPE_PARM_FOR_CLASS (newtype)\n+\t  = TEMPLATE_TYPE_PARM_FOR_CLASS (oldtype);\n     }\n   else\n     newtype = tsubst (TREE_TYPE (olddecl), tsubst_args,"}, {"sha": "ea58af75de8bacaff3e9f444180b2de7b9117bc0", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction26.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2c06d053009d53be0d9b307e0ca02975c9ffbb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction26.C?ref=b2c06d053009d53be0d9b307e0ca02975c9ffbb6", "patch": "@@ -0,0 +1,23 @@\n+// Testcase from P0512R0 for C++17 NB comment US 20\n+// { dg-options -std=c++1z }\n+\n+template <class,class> struct same;\n+template <class T> struct same<T,T> {};\n+\n+template<class T> struct A {\n+  template<class U>\n+  A(T&&, U&&, int*); // #1: T&& is not a forwarding reference\n+                     //     U&& is a forwarding reference\n+  A(T&&, int*);\t     // #2\n+};\n+template<class T>\n+A(T&&, int*) -> A<T>; // #3: T&& is a forwarding reference\n+\n+int i;\n+int *ip;\n+A a0{0, 0, ip}; // uses #1 to deduce A<int> and #1 to initialize\n+same<decltype(a0),A<int>> s1;\n+A a2{i, ip};    // uses #3 to deduce A<int&> and #2 to initialize\n+same<decltype(a2),A<int&>> s2;\n+\n+A a{i, 0, ip};  // { dg-error \"\" } cannot deduce from #1"}]}