{"sha": "19525b57d1b46595e853e610669cd40f367f26e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk1MjViNTdkMWI0NjU5NWU4NTNlNjEwNjY5Y2Q0MGYzNjdmMjZlNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-14T04:05:40Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-14T04:05:40Z"}, "message": "m32r.md, [...]: Fix comment typos.\n\n\t* config/m32r/m32r.md, config/m68k/m68kelf.h,\n\tconfig/mcore/mcore.md, config/rs6000/linux64.h,\n\tconfig/rs6000/rs6000.c, config/sparc/sparc.c: Fix comment\n\ttypos.\n\nFrom-SVN: r87481", "tree": {"sha": "67f3a13e0d747fcade03caf5fdbb195186bd0681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67f3a13e0d747fcade03caf5fdbb195186bd0681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19525b57d1b46595e853e610669cd40f367f26e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19525b57d1b46595e853e610669cd40f367f26e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19525b57d1b46595e853e610669cd40f367f26e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19525b57d1b46595e853e610669cd40f367f26e5/comments", "author": null, "committer": null, "parents": [{"sha": "a140c081d1130e37116f5465d8db6eb58d7b0a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a140c081d1130e37116f5465d8db6eb58d7b0a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a140c081d1130e37116f5465d8db6eb58d7b0a60"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "28457ba782419103be72af5718b01acbc975fc19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -1,3 +1,10 @@\n+2004-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/m32r/m32r.md, config/m68k/m68kelf.h,\n+\tconfig/mcore/mcore.md, config/rs6000/linux64.h,\n+\tconfig/rs6000/rs6000.c, config/sparc/sparc.c: Fix comment\n+\ttypos.\n+\n 2004-09-13  James E Wilson  <wilson@specifixinc.com>\n \n \t* Makefile.in (GEN_PROTOS_OBJS): Add $(BUILD_ERRORS)."}, {"sha": "f1236d4dbb25422ef47901b9d42f6f686252a0dd", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -169,7 +169,7 @@\n \n ;; Load/store instructions do 6 stages: IF D E MEM1 MEM2 WB.\n ;; MEM1 may require more than one cycle depending on locality.  We\n-;; optimistically assume all memory is nearby, ie. MEM1 takes only\n+;; optimistically assume all memory is nearby, i.e. MEM1 takes only\n ;; one cycle.  Hence, ready latency is 3.\n \n ;; The M32Rx can do short load/store only on the left pipe."}, {"sha": "51d0641501fda2550edf3e0ab6800e0930efde0b", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -159,7 +159,7 @@ do {\t\t\t\t\t\t\t\t\\\n #endif\n \n /* The `string' directive on m68k svr4 does not handle string with\n-   escape char (ie., `\\') right. Use normal way to output ASCII bytes\n+   escape char (i.e., `\\') right. Use normal way to output ASCII bytes\n    seems to be safer.  */\n #undef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\t\\"}, {"sha": "ab3ce8aff689043539a986937b1914ab0695e1eb", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -3157,7 +3157,7 @@\n }\")\n \n ; experimental - do the constant folding ourselves.  note that this isn't\n-;   re-applied like we'd really want.  ie., four ands collapse into two\n+;   re-applied like we'd really want.  i.e., four ands collapse into two\n ;   instead of one.  this is because peepholes are applied as a sliding\n ;   window.  the peephole does not generate new rtl's, but instead slides\n ;   across the rtl's generating machine instructions.  it would be nice"}, {"sha": "68a9955a4fdd72788da438f0261f357156641ff0", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -258,7 +258,7 @@ extern int dot_symbols;\n    than a doubleword should be padded upward or downward.  You could\n    reasonably assume that they follow the normal rules for structure\n    layout treating the parameter area as any other block of memory,\n-   then map the reg param area to registers.  ie. pad updard.\n+   then map the reg param area to registers.  i.e. pad upward.\n    Setting both of the following defines results in this behavior.\n    Setting just the first one will result in aggregates that fit in a\n    doubleword being padded downward, and others being padded upward."}, {"sha": "b47ccf0857572c18bde1c6066c7a25ed1e3f809e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -4619,7 +4619,7 @@ function_arg_padding (enum machine_mode mode, tree type)\n     {\n       /* GCC used to pass structures of the same size as integer types as\n \t if they were in fact integers, ignoring FUNCTION_ARG_PADDING.\n-\t ie. Structures of size 1 or 2 (or 4 when TARGET_64BIT) were\n+\t i.e. Structures of size 1 or 2 (or 4 when TARGET_64BIT) were\n \t passed padded downward, except that -mstrict-align further\n \t muddied the water in that multi-component structures of 2 and 4\n \t bytes in size were passed padded upward."}, {"sha": "708894d601cf19f084748d89883e2ed91c81e939", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19525b57d1b46595e853e610669cd40f367f26e5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=19525b57d1b46595e853e610669cd40f367f26e5", "patch": "@@ -4609,7 +4609,7 @@ sparc_asm_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n   /* If code does not drop into the epilogue, we have to still output\n      a dummy nop for the sake of sane backtraces.  Otherwise, if the\n      last two instructions of a function were \"call foo; dslot;\" this\n-     can make the return PC of foo (ie. address of call instruction\n+     can make the return PC of foo (i.e. address of call instruction\n      plus 8) point to the first instruction in the next function.  */\n \n   rtx insn, last_real_insn;"}]}