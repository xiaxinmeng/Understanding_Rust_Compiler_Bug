{"sha": "26c68b8c31f637cc01f4bf511f9a0ca714231161", "node_id": "C_kwDOANBUbNoAKDI2YzY4YjhjMzFmNjM3Y2MwMWY0YmY1MTFmOWEwY2E3MTQyMzExNjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-18T13:09:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-18T21:47:58Z"}, "message": "libstdc++: Fix std::random_device::entropy() for non-posix targets\n\nSince the r12-4515-g58f339fc5eaae7 change std::random_device::entropy()\nreturns non-zero for hardware sources such as RDRAND. However, the call\nto the underlying _M_getentropy function is conditionally compiled\naccording to #if _GLIBCXX_USE_DEV_RANDOM which means it only happens for\ntargets that support /dev/random and /dev/urandom. This means entropy()\nalways returns zero for x86 Windows, even though the RDRAND and RDSEED\nsources work there.\n\nThe _M_getentropy() function is always compiled into the library, it\njust doesn't get called for targets without /dev/random. We can change\nthat just by removing the #if conditional. This is not an ABI change,\nbecause new code will just start calling the existing _M_getentropy\nfunction, old code that has inlined entropy() will not call it.\n\nSimilarly, the std::random_device destructor doesn't call the underlying\n_M_fini function unless _GLIBCXX_USE_DEV_RANDOM is defined. That's less\nof a problem because it's still true that the only resources that need\nto be freed are when one of /dev/random or /dev/urandom has been opened\nfor reading, which is only possible when _GLIBCXX_USE_DEV_RANDOM is\ndefined. The _M_fini function does also destroy a random engine object\nif a std::linear_congruential_engine object is used, but that destructor\nis trivial and so no resources are leaked if it's not called. Remove the\npreprocessor condition in the destructor too, so that we always call the\n_M_fini function even if it doesn't have side effects. This makes the\ndestructor non-trivial for Windows and bare metal targets, but as the\nclass is non-copyable that shouldn't cause any ABI change in practice.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/random.h (random_device) [!_GLIBCXX_USE_DEV_RANDOM]:\n\tAlways call _M_fini and _M_getentropy.", "tree": {"sha": "3accec80df0d313ce7aac8bdd72c5bdc8195d7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3accec80df0d313ce7aac8bdd72c5bdc8195d7b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26c68b8c31f637cc01f4bf511f9a0ca714231161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c68b8c31f637cc01f4bf511f9a0ca714231161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c68b8c31f637cc01f4bf511f9a0ca714231161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c68b8c31f637cc01f4bf511f9a0ca714231161/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7881e07631fc1c61deb307119f7cabdd4094a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7881e07631fc1c61deb307119f7cabdd4094a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7881e07631fc1c61deb307119f7cabdd4094a1"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "42f37c1e77e127972aaac56649d4250ac368d1a6", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c68b8c31f637cc01f4bf511f9a0ca714231161/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c68b8c31f637cc01f4bf511f9a0ca714231161/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=26c68b8c31f637cc01f4bf511f9a0ca714231161", "patch": "@@ -1639,10 +1639,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit\n     random_device(const std::string& __token) { _M_init(__token); }\n \n-#if defined _GLIBCXX_USE_DEV_RANDOM\n     ~random_device()\n     { _M_fini(); }\n-#endif\n \n     static constexpr result_type\n     min()\n@@ -1654,13 +1652,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     double\n     entropy() const noexcept\n-    {\n-#ifdef _GLIBCXX_USE_DEV_RANDOM\n-      return this->_M_getentropy();\n-#else\n-      return 0.0;\n-#endif\n-    }\n+    { return this->_M_getentropy(); }\n \n     result_type\n     operator()()"}]}