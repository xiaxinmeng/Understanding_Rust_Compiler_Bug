{"sha": "deb5e2801f7c307c0c0d225fd244741c7635deeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGViNWUyODAxZjdjMzA3YzBjMGQyMjVmZDI0NDc0MWM3NjM1ZGVlYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-04T09:32:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-04T09:32:35Z"}, "message": "stmt.c (is_body_block): Move...\n\n        * stmt.c (is_body_block): Move...\n        * dwarfout.c, dwarf2out.c: ...from here.\n        * tree.h: Declare it.\n        * emit-rtl.c (remove_unncessary_notes): Don't remove the body block.\n        * final.c (final_start_function): Do call remove_unnecessary_notes\n        when scheduling.\n\nFrom-SVN: r32324", "tree": {"sha": "7dbe32baf99950bdd8c71c770cc96d2bfec358e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dbe32baf99950bdd8c71c770cc96d2bfec358e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deb5e2801f7c307c0c0d225fd244741c7635deeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb5e2801f7c307c0c0d225fd244741c7635deeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb5e2801f7c307c0c0d225fd244741c7635deeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb5e2801f7c307c0c0d225fd244741c7635deeb/comments", "author": null, "committer": null, "parents": [{"sha": "e8965a187162a2da95e059a6ef3d16a68258d046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8965a187162a2da95e059a6ef3d16a68258d046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8965a187162a2da95e059a6ef3d16a68258d046"}], "stats": {"total": 123, "additions": 52, "deletions": 71}, "files": [{"sha": "752fbb900acd8274feaa5d6c51fa4ed504c4f46d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -1,3 +1,12 @@\n+2000-03-04  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* stmt.c (is_body_block): Move...\n+\t* dwarfout.c, dwarf2out.c: ...from here.\n+\t* tree.h: Declare it.\n+\t* emit-rtl.c (remove_unncessary_notes): Don't remove the body block.\n+\t* final.c (final_start_function): Do call remove_unnecessary_notes\n+\twhen scheduling.\n+\n 2000-03-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* config/vax/xm-vms.h: Define OBJECT_SUFFIX and EXECUTABLE_SUFFIX."}, {"sha": "26bb09b054488dd1ef57a05f4b38eeb729957975", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -2436,7 +2436,6 @@ static void output_pubnames\t\tPARAMS ((void));\n static void add_arange\t\t\tPARAMS ((tree, dw_die_ref));\n static void output_aranges\t\tPARAMS ((void));\n static void output_line_info\t\tPARAMS ((void));\n-static int is_body_block\t\tPARAMS ((tree));\n static dw_die_ref base_type_die\t\tPARAMS ((tree));\n static tree root_type\t\t\tPARAMS ((tree));\n static int is_base_type\t\t\tPARAMS ((tree));\n@@ -5924,36 +5923,6 @@ output_line_info ()\n   ASM_OUTPUT_LABEL (asm_out_file, \".LTEND\");\n }\n \f\n-/* Given a pointer to a BLOCK node return non-zero if (and only if) the node\n-   in question represents the outermost pair of curly braces (i.e. the \"body\n-   block\") of a function or method.\n-\n-   For any BLOCK node representing a \"body block\" of a function or method, the\n-   BLOCK_SUPERCONTEXT of the node will point to another BLOCK node which\n-   represents the outermost (function) scope for the function or method (i.e.\n-   the one which includes the formal parameters).  The BLOCK_SUPERCONTEXT of\n-   *that* node in turn will point to the relevant FUNCTION_DECL node. */\n-\n-static inline int\n-is_body_block (stmt)\n-     register tree stmt;\n-{\n-  if (TREE_CODE (stmt) == BLOCK)\n-    {\n-      register tree parent = BLOCK_SUPERCONTEXT (stmt);\n-\n-      if (TREE_CODE (parent) == BLOCK)\n-\t{\n-\t  register tree grandparent = BLOCK_SUPERCONTEXT (parent);\n-\n-\t  if (TREE_CODE (grandparent) == FUNCTION_DECL)\n-\t    return 1;\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n /* Given a pointer to a tree node for some base type, return a pointer to\n    a DIE that describes the given type.\n "}, {"sha": "9d4137915b13ae94235f28dabb9cfeff207ddd0c", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -318,7 +318,6 @@ static tree decl_class_context \t\tPARAMS ((tree));\n static void output_unsigned_leb128\tPARAMS ((unsigned long));\n static void output_signed_leb128\tPARAMS ((long));\n #endif\n-static inline int is_body_block\t\tPARAMS ((tree));\n static int fundamental_type_code\tPARAMS ((tree));\n static tree root_type_1\t\t\tPARAMS ((tree, int));\n static tree root_type\t\t\tPARAMS ((tree));\n@@ -1282,37 +1281,6 @@ output_signed_leb128 (value)\n \f\n /**************** utility functions for attribute functions ******************/\n \n-/* Given a pointer to a BLOCK node return non-zero if (and only if) the\n-   node in question represents the outermost pair of curly braces (i.e.\n-   the \"body block\") of a function or method.\n-\n-   For any BLOCK node representing a \"body block\" of a function or method,\n-   the BLOCK_SUPERCONTEXT of the node will point to another BLOCK node\n-   which represents the outermost (function) scope for the function or\n-   method (i.e. the one which includes the formal parameters).  The\n-   BLOCK_SUPERCONTEXT of *that* node in turn will point to the relevant\n-   FUNCTION_DECL node.\n-*/\n-\n-static inline int\n-is_body_block (stmt)\n-     register tree stmt;\n-{\n-  if (TREE_CODE (stmt) == BLOCK)\n-    {\n-      register tree parent = BLOCK_SUPERCONTEXT (stmt);\n-\n-      if (TREE_CODE (parent) == BLOCK)\n-\t{\n-\t  register tree grandparent = BLOCK_SUPERCONTEXT (parent);\n-\n-\t  if (TREE_CODE (grandparent) == FUNCTION_DECL)\n-\t    return 1;\n-\t}\n-    }\n-  return 0;\n-}\n-\n /* Given a pointer to a tree node for some type, return a Dwarf fundamental\n    type code for the given type.\n "}, {"sha": "27b837447f0c57d70a71b5faffc0d1e253286476", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -2711,10 +2711,16 @@ remove_unncessary_notes ()\n \t\t  if (NOTE_BLOCK (prev) != NOTE_BLOCK (insn))\n \t\t    abort ();\n \n-\t\t  debug_ignore_block (NOTE_BLOCK (insn));\n-\t\t  \n-\t\t  remove_insn (prev);\n-\t\t  remove_insn (insn);\n+\t\t  /* Never delete the BLOCK for the outermost scope\n+\t\t     of the function; we can refer to names from\n+\t\t     that scope even if the block notes are messed up.  */\n+\t\t  if (! is_body_block (NOTE_BLOCK (insn)))\n+\t\t    {\n+\t\t      debug_ignore_block (NOTE_BLOCK (insn));\n+\n+\t\t      remove_insn (prev);\n+\t\t      remove_insn (insn);\n+\t\t    }\n \t\t  break;\n \t\t}\n \t      else if (NOTE_LINE_NUMBER (prev) == NOTE_INSN_BLOCK_END)"}, {"sha": "948ecd33e5ddc6109993da209942d51bf4e940ac", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -1644,10 +1644,7 @@ final_start_function (first, file, optimize)\n   if (write_symbols)\n     {\n       number_blocks (current_function_decl);\n-      /* Scheduling packs block notes together at the top of a basic block,\n-\t so we can't learn anything from them.  */\n-      if (! flag_schedule_insns && ! flag_schedule_insns_after_reload)\n-\tremove_unncessary_notes ();\n+      remove_unncessary_notes ();\n       /* We never actually put out begin/end notes for the top-level\n \t block in the function.  But, conceptually, that block is\n \t always needed.  */"}, {"sha": "cd5277eb1aefc2ba4cfd0244d350f5d8e4f98baa", "filename": "gcc/stmt.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -3310,6 +3310,36 @@ expand_end_target_temps ()\n   pop_temp_slots ();\n }\n \n+/* Given a pointer to a BLOCK node return non-zero if (and only if) the node\n+   in question represents the outermost pair of curly braces (i.e. the \"body\n+   block\") of a function or method.\n+\n+   For any BLOCK node representing a \"body block\" of a function or method, the\n+   BLOCK_SUPERCONTEXT of the node will point to another BLOCK node which\n+   represents the outermost (function) scope for the function or method (i.e.\n+   the one which includes the formal parameters).  The BLOCK_SUPERCONTEXT of\n+   *that* node in turn will point to the relevant FUNCTION_DECL node. */\n+\n+int\n+is_body_block (stmt)\n+     register tree stmt;\n+{\n+  if (TREE_CODE (stmt) == BLOCK)\n+    {\n+      tree parent = BLOCK_SUPERCONTEXT (stmt);\n+\n+      if (parent && TREE_CODE (parent) == BLOCK)\n+\t{\n+\t  tree grandparent = BLOCK_SUPERCONTEXT (parent);\n+\n+\t  if (grandparent && TREE_CODE (grandparent) == FUNCTION_DECL)\n+\t    return 1;\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n /* Mark top block of block_stack as an implicit binding for an\n    exception region.  This is used to prevent infinite recursion when\n    ending a binding with expand_end_bindings.  It is only ever called"}, {"sha": "4c9fc7311a462a5b664d98f97f8e514199493938", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deb5e2801f7c307c0c0d225fd244741c7635deeb/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=deb5e2801f7c307c0c0d225fd244741c7635deeb", "patch": "@@ -2178,6 +2178,8 @@ extern void expand_end_bindings\t\t\tPARAMS ((tree, int, int));\n extern void warn_about_unused_variables         PARAMS ((tree));\n extern void start_cleanup_deferral\t\tPARAMS ((void));\n extern void end_cleanup_deferral\t\tPARAMS ((void));\n+extern int is_body_block\t\t\tPARAMS ((tree));\n+\n extern void mark_block_as_eh_region\t\tPARAMS ((void));\n extern void mark_block_as_not_eh_region\t\tPARAMS ((void));\n extern int is_eh_region\t\t\t\tPARAMS ((void));"}]}