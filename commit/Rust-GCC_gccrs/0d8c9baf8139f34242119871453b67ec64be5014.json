{"sha": "0d8c9baf8139f34242119871453b67ec64be5014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4YzliYWY4MTM5ZjM0MjQyMTE5ODcxNDUzYjY3ZWM2NGJlNTAxNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-04-21T14:06:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-04-21T14:06:00Z"}, "message": "deque.tcc: Trivial formatting fixes.\n\n2004-04-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/deque.tcc: Trivial formatting fixes.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_list.h: Likewise.\n\t* include/bits/stl_tree.h: Likewise.\n\nFrom-SVN: r80960", "tree": {"sha": "b768990dd5e240d9a0337687df104033310a54f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b768990dd5e240d9a0337687df104033310a54f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d8c9baf8139f34242119871453b67ec64be5014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8c9baf8139f34242119871453b67ec64be5014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d8c9baf8139f34242119871453b67ec64be5014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8c9baf8139f34242119871453b67ec64be5014/comments", "author": null, "committer": null, "parents": [{"sha": "6e90ed190e76ce61bf121046e9dc16bf89b051ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e90ed190e76ce61bf121046e9dc16bf89b051ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e90ed190e76ce61bf121046e9dc16bf89b051ff"}], "stats": {"total": 147, "additions": 94, "deletions": 53}, "files": [{"sha": "74d29494afb2b6d7d8319b86387db76cacebd840", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0d8c9baf8139f34242119871453b67ec64be5014", "patch": "@@ -1,3 +1,10 @@\n+2004-04-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/deque.tcc: Trivial formatting fixes.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_list.h: Likewise.\n+\t* include/bits/stl_tree.h: Likewise.\n+\n 2004-04-21  Paolo Carlini  <pcarlini@suse.de>\n \t    Andrew Pinski  <pinskia@physics.uc.edu>\n "}, {"sha": "84191f5d91a9f42bb6fe559d30bce57b65e54120", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 52, "deletions": 29, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=0d8c9baf8139f34242119871453b67ec64be5014", "patch": "@@ -131,21 +131,24 @@ namespace _GLIBCXX_STD\n     deque<_Tp,_Alloc>::\n     erase(iterator __first, iterator __last)\n     {\n-      if (__first == this->_M_impl._M_start && __last == this->_M_impl._M_finish)\n+      if (__first == this->_M_impl._M_start\n+\t  && __last == this->_M_impl._M_finish)\n \t{\n \t  clear();\n \t  return this->_M_impl._M_finish;\n \t}\n       else\n \t{\n \t  const difference_type __n = __last - __first;\n-\t  const difference_type __elems_before = __first - this->_M_impl._M_start;\n+\t  const difference_type __elems_before = (__first\n+\t\t\t\t\t\t  - this->_M_impl._M_start);\n \t  if (static_cast<size_type>(__elems_before) < (size() - __n) / 2)\n \t    {\n \t      std::copy_backward(this->_M_impl._M_start, __first, __last);\n \t      iterator __new_start = this->_M_impl._M_start + __n;\n \t      std::_Destroy(this->_M_impl._M_start, __new_start);\n-\t      _M_destroy_nodes(this->_M_impl._M_start._M_node, __new_start._M_node);\n+\t      _M_destroy_nodes(this->_M_impl._M_start._M_node,\n+\t\t\t       __new_start._M_node);\n \t      this->_M_impl._M_start = __new_start;\n \t    }\n \t  else\n@@ -176,12 +179,15 @@ namespace _GLIBCXX_STD\n \n       if (this->_M_impl._M_start._M_node != this->_M_impl._M_finish._M_node)\n \t{\n-\t  std::_Destroy(this->_M_impl._M_start._M_cur, this->_M_impl._M_start._M_last);\n-\t  std::_Destroy(this->_M_impl._M_finish._M_first, this->_M_impl._M_finish._M_cur);\n+\t  std::_Destroy(this->_M_impl._M_start._M_cur,\n+\t\t\tthis->_M_impl._M_start._M_last);\n+\t  std::_Destroy(this->_M_impl._M_finish._M_first,\n+\t\t\tthis->_M_impl._M_finish._M_cur);\n \t  _M_deallocate_node(this->_M_impl._M_finish._M_first);\n \t}\n       else\n-        std::_Destroy(this->_M_impl._M_start._M_cur, this->_M_impl._M_finish._M_cur);\n+        std::_Destroy(this->_M_impl._M_start._M_cur,\n+\t\t      this->_M_impl._M_finish._M_cur);\n \n       this->_M_impl._M_finish = this->_M_impl._M_start;\n     }\n@@ -217,7 +223,8 @@ namespace _GLIBCXX_STD\n \t    }\n \t  catch(...)\n \t    {\n-\t      _M_destroy_nodes(__new_start._M_node, this->_M_impl._M_start._M_node);\n+\t      _M_destroy_nodes(__new_start._M_node,\n+\t\t\t       this->_M_impl._M_start._M_node);\n \t      __throw_exception_again;\n \t    }\n \t}\n@@ -226,7 +233,8 @@ namespace _GLIBCXX_STD\n \t  iterator __new_finish = _M_reserve_elements_at_back(__n);\n \t  try\n \t    {\n-\t      std::uninitialized_fill(this->_M_impl._M_finish, __new_finish, __x);\n+\t      std::uninitialized_fill(this->_M_impl._M_finish,\n+\t\t\t\t      __new_finish, __x);\n \t      this->_M_impl._M_finish = __new_finish;\n \t    }\n \t  catch(...)\n@@ -305,11 +313,13 @@ namespace _GLIBCXX_STD\n               std::uninitialized_copy(__first, __mid, *__cur_node);\n               __first = __mid;\n             }\n-            std::uninitialized_copy(__first, __last, this->_M_impl._M_finish._M_first);\n+            std::uninitialized_copy(__first, __last,\n+\t\t\t\t    this->_M_impl._M_finish._M_first);\n           }\n         catch(...)\n           {\n-            std::_Destroy(this->_M_impl._M_start, iterator(*__cur_node, __cur_node));\n+            std::_Destroy(this->_M_impl._M_start,\n+\t\t\t  iterator(*__cur_node, __cur_node));\n             __throw_exception_again;\n           }\n       }\n@@ -326,7 +336,8 @@ namespace _GLIBCXX_STD\n       try\n         {\n           std::_Construct(this->_M_impl._M_finish._M_cur, __t_copy);\n-          this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node + 1);\n+          this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node\n+\t\t\t\t\t      + 1);\n           this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;\n         }\n       catch(...)\n@@ -347,7 +358,8 @@ namespace _GLIBCXX_STD\n       *(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();\n       try\n         {\n-          this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node - 1);\n+          this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node\n+\t\t\t\t\t     - 1);\n           this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;\n           std::_Construct(this->_M_impl._M_start._M_cur, __t_copy);\n         }\n@@ -370,10 +382,11 @@ namespace _GLIBCXX_STD\n       std::_Destroy(this->_M_impl._M_finish._M_cur);\n     }\n \n-  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_last - 1.  Note that\n-  // if the deque has at least one element (a precondition for this member\n-  // function), and if _M_impl._M_start._M_cur == _M_impl._M_start._M_last, then the deque\n-  // must have at least two nodes.\n+  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_last - 1.\n+  // Note that if the deque has at least one element (a precondition for this\n+  // member function), and if\n+  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,\n+  // then the deque must have at least two nodes.\n   template <typename _Tp, typename _Alloc>\n     void deque<_Tp,_Alloc>::\n     _M_pop_front_aux()\n@@ -412,7 +425,8 @@ namespace _GLIBCXX_STD\n \t      }\n \t    catch(...)\n \t      {\n-\t\t_M_destroy_nodes(__new_start._M_node, this->_M_impl._M_start._M_node);\n+\t\t_M_destroy_nodes(__new_start._M_node,\n+\t\t\t\t this->_M_impl._M_start._M_node);\n \t\t__throw_exception_again;\n \t      }\n \t  }\n@@ -421,7 +435,8 @@ namespace _GLIBCXX_STD\n \t    iterator __new_finish = _M_reserve_elements_at_back(__n);\n \t    try\n \t      {\n-\t\tstd::uninitialized_copy(__first, __last, this->_M_impl._M_finish);\n+\t\tstd::uninitialized_copy(__first, __last,\n+\t\t\t\t\tthis->_M_impl._M_finish);\n \t\tthis->_M_impl._M_finish = __new_finish;\n \t      }\n \t    catch(...)\n@@ -485,7 +500,8 @@ namespace _GLIBCXX_STD\n \t    {\n \t      if (__elems_before >= difference_type(__n))\n \t\t{\n-\t\t  iterator __start_n = this->_M_impl._M_start + difference_type(__n);\n+\t\t  iterator __start_n = (this->_M_impl._M_start\n+\t\t\t\t\t+ difference_type(__n));\n \t\t  std::uninitialized_copy(this->_M_impl._M_start, __start_n,\n \t\t\t\t\t  __new_start);\n \t\t  this->_M_impl._M_start = __new_start;\n@@ -494,16 +510,18 @@ namespace _GLIBCXX_STD\n \t\t}\n \t      else\n \t\t{\n-\t\t  std::__uninitialized_copy_fill(this->_M_impl._M_start, __pos,\n-\t\t\t\t\t\t __new_start,\n-\t\t\t\t\t\t this->_M_impl._M_start, __x_copy);\n+\t\t  std::__uninitialized_copy_fill(this->_M_impl._M_start,\n+\t\t\t\t\t\t __pos, __new_start,\n+\t\t\t\t\t\t this->_M_impl._M_start,\n+\t\t\t\t\t\t __x_copy);\n \t\t  this->_M_impl._M_start = __new_start;\n \t\t  std::fill(__old_start, __pos, __x_copy);\n \t\t}\n \t    }\n \t  catch(...)\n \t    {\n-\t      _M_destroy_nodes(__new_start._M_node, this->_M_impl._M_start._M_node);\n+\t      _M_destroy_nodes(__new_start._M_node,\n+\t\t\t       this->_M_impl._M_start._M_node);\n \t      __throw_exception_again;\n \t    }\n \t}\n@@ -518,7 +536,8 @@ namespace _GLIBCXX_STD\n \t    {\n \t      if (__elems_after > difference_type(__n))\n \t\t{\n-\t\t  iterator __finish_n = this->_M_impl._M_finish - difference_type(__n);\n+\t\t  iterator __finish_n = (this->_M_impl._M_finish\n+\t\t\t\t\t - difference_type(__n));\n \t\t  std::uninitialized_copy(__finish_n, this->_M_impl._M_finish,\n \t\t\t\t\t  this->_M_impl._M_finish);\n \t\t  this->_M_impl._M_finish = __new_finish;\n@@ -563,7 +582,8 @@ namespace _GLIBCXX_STD\n \t      {\n \t\tif (__elemsbefore >= difference_type(__n))\n \t\t  {\n-\t\t    iterator __start_n = this->_M_impl._M_start + difference_type(__n);\n+\t\t    iterator __start_n = (this->_M_impl._M_start\n+\t\t\t\t\t  + difference_type(__n));\n \t\t    std::uninitialized_copy(this->_M_impl._M_start, __start_n,\n \t\t\t\t\t    __new_start);\n \t\t    this->_M_impl._M_start = __new_start;\n@@ -574,15 +594,17 @@ namespace _GLIBCXX_STD\n \t\t  {\n \t\t    _ForwardIterator __mid = __first;\n \t\t    std::advance(__mid, difference_type(__n) - __elemsbefore);\n-\t\t    std::__uninitialized_copy_copy(this->_M_impl._M_start, __pos,\n-\t\t\t\t\t\t   __first, __mid, __new_start);\n+\t\t    std::__uninitialized_copy_copy(this->_M_impl._M_start,\n+\t\t\t\t\t\t   __pos, __first, __mid,\n+\t\t\t\t\t\t   __new_start);\n \t\t    this->_M_impl._M_start = __new_start;\n \t\t    std::copy(__mid, __last, __old_start);\n \t\t  }\n \t      }\n \t    catch(...)\n \t      {\n-\t\t_M_destroy_nodes(__new_start._M_node, this->_M_impl._M_start._M_node);\n+\t\t_M_destroy_nodes(__new_start._M_node,\n+\t\t\t\t this->_M_impl._M_start._M_node);\n \t\t__throw_exception_again;\n \t      }\n \t  }\n@@ -597,7 +619,8 @@ namespace _GLIBCXX_STD\n             {\n               if (__elemsafter > difference_type(__n))\n \t\t{\n-\t\t  iterator __finish_n = this->_M_impl._M_finish - difference_type(__n);\n+\t\t  iterator __finish_n = (this->_M_impl._M_finish\n+\t\t\t\t\t - difference_type(__n));\n \t\t  std::uninitialized_copy(__finish_n,\n \t\t\t\t\t  this->_M_impl._M_finish,\n \t\t\t\t\t  this->_M_impl._M_finish);"}, {"sha": "a3d9f51ea39a675e5ca9137a1e987459448fa7b7", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=0d8c9baf8139f34242119871453b67ec64be5014", "patch": "@@ -359,15 +359,15 @@ namespace _GLIBCXX_STD\n       get_allocator() const\n       { return *static_cast<const _Alloc*>(&this->_M_impl); }\n \n-      typedef _Deque_iterator<_Tp,_Tp&,_Tp*>             iterator;\n-      typedef _Deque_iterator<_Tp,const _Tp&,const _Tp*> const_iterator;\n+      typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;\n+      typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;\n \n       _Deque_base(const allocator_type& __a, size_t __num_elements)\n-\t: _M_impl(__a)\n+      : _M_impl(__a)\n       { _M_initialize_map(__num_elements); }\n \n       _Deque_base(const allocator_type& __a)\n-\t: _M_impl(__a)\n+      : _M_impl(__a)\n       { }\n \n       ~_Deque_base();\n@@ -377,14 +377,15 @@ namespace _GLIBCXX_STD\n       //standard container and at the same time makes use of the EBO\n       //for empty allocators.\n       struct _Deque_impl\n-\t: public _Alloc {\n+      : public _Alloc\n+      {\n \t_Tp** _M_map;\n \tsize_t _M_map_size;\n \titerator _M_start;\n \titerator _M_finish;\n \n \t_Deque_impl(const _Alloc& __a)\n-\t  : _Alloc(__a), _M_map(0), _M_map_size(0), _M_start(), _M_finish()\n+\t: _Alloc(__a), _M_map(0), _M_map_size(0), _M_start(), _M_finish()\n \t{ }\n       };\n \n@@ -422,7 +423,8 @@ namespace _GLIBCXX_STD\n   {\n     if (this->_M_impl._M_map)\n     {\n-      _M_destroy_nodes(this->_M_impl._M_start._M_node, this->_M_impl._M_finish._M_node + 1);\n+      _M_destroy_nodes(this->_M_impl._M_start._M_node,\n+\t\t       this->_M_impl._M_finish._M_node + 1);\n       _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);\n     }\n   }\n@@ -452,7 +454,8 @@ namespace _GLIBCXX_STD\n       // the beginning of _M_map, but for small maps it may be as far in as\n       // _M_map+3.\n \n-      _Tp** __nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size - __num_nodes) / 2;\n+      _Tp** __nstart = (this->_M_impl._M_map\n+\t\t\t+ (this->_M_impl._M_map_size - __num_nodes) / 2);\n       _Tp** __nfinish = __nstart + __num_nodes;\n \n       try\n@@ -468,8 +471,9 @@ namespace _GLIBCXX_STD\n       this->_M_impl._M_start._M_set_node(__nstart);\n       this->_M_impl._M_finish._M_set_node(__nfinish - 1);\n       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;\n-      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first + __num_elements\n-\t                 % __deque_buf_size(sizeof(_Tp));\n+      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first\n+\t\t\t\t\t+ __num_elements\n+\t\t\t\t\t% __deque_buf_size(sizeof(_Tp)));\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -668,7 +672,8 @@ namespace _GLIBCXX_STD\n        */\n       deque(const deque& __x)\n       : _Base(__x.get_allocator(), __x.size())\n-      { std::uninitialized_copy(__x.begin(), __x.end(), this->_M_impl._M_start); }\n+      { std::uninitialized_copy(__x.begin(), __x.end(),\n+\t\t\t\tthis->_M_impl._M_start); }\n \n       /**\n        *  @brief  Builds a %deque from a range.\n@@ -1009,7 +1014,8 @@ namespace _GLIBCXX_STD\n       void\n       push_back(const value_type& __x)\n       {\n-\tif (this->_M_impl._M_finish._M_cur != this->_M_impl._M_finish._M_last - 1)\n+\tif (this->_M_impl._M_finish._M_cur\n+\t    != this->_M_impl._M_finish._M_last - 1)\n \t  {\n \t    std::_Construct(this->_M_impl._M_finish._M_cur, __x);\n \t    ++this->_M_impl._M_finish._M_cur;\n@@ -1029,7 +1035,8 @@ namespace _GLIBCXX_STD\n       void\n       pop_front()\n       {\n-\tif (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_last - 1)\n+\tif (this->_M_impl._M_start._M_cur\n+\t    != this->_M_impl._M_start._M_last - 1)\n \t  {\n \t    std::_Destroy(this->_M_impl._M_start._M_cur);\n \t    ++this->_M_impl._M_start._M_cur;\n@@ -1049,7 +1056,8 @@ namespace _GLIBCXX_STD\n       void\n       pop_back()\n       {\n-\tif (this->_M_impl._M_finish._M_cur != this->_M_impl._M_finish._M_first)\n+\tif (this->_M_impl._M_finish._M_cur\n+\t    != this->_M_impl._M_finish._M_first)\n \t  {\n \t    --this->_M_impl._M_finish._M_cur;\n \t    std::_Destroy(this->_M_impl._M_finish._M_cur);\n@@ -1418,7 +1426,8 @@ namespace _GLIBCXX_STD\n       void\n       _M_reserve_map_at_front (size_type __nodes_to_add = 1)\n       {\n-\tif (__nodes_to_add > size_type(this->_M_impl._M_start._M_node - this->_M_impl._M_map))\n+\tif (__nodes_to_add > size_type(this->_M_impl._M_start._M_node\n+\t\t\t\t       - this->_M_impl._M_map))\n \t  _M_reallocate_map(__nodes_to_add, true);\n       }\n "}, {"sha": "f55915b1e2c54d56efde7ef9687a1387524f079b", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0d8c9baf8139f34242119871453b67ec64be5014", "patch": "@@ -295,10 +295,11 @@ namespace _GLIBCXX_STD\n       _Node_Alloc_type;\n \n       struct _List_impl \n-\t: public _Node_Alloc_type {\n+      : public _Node_Alloc_type\n+      {\n \t_List_node_base _M_node;\n \t_List_impl (const _Node_Alloc_type& __a)\n-\t  : _Node_Alloc_type(__a)\n+\t: _Node_Alloc_type(__a)\n \t{ }\n       };\n \n@@ -317,10 +318,11 @@ namespace _GLIBCXX_STD\n \n       allocator_type\n       get_allocator() const\n-      { return allocator_type(*static_cast<const _Node_Alloc_type*>(&this->_M_impl)); }\n+      { return allocator_type(*static_cast<\n+\t\t\t      const _Node_Alloc_type*>(&this->_M_impl)); }\n \n       _List_base(const allocator_type& __a)\n-\t: _M_impl(__a)\n+      : _M_impl(__a)\n       { _M_init(); }\n \n       // This is what actually destroys the list."}, {"sha": "fdc2ea6077241f4c7283dee6d44db570264f6009", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8c9baf8139f34242119871453b67ec64be5014/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=0d8c9baf8139f34242119871453b67ec64be5014", "patch": "@@ -461,7 +461,8 @@ namespace std\n \n       _Const_Link_type\n       _M_begin() const\n-      { return static_cast<_Const_Link_type>(this->_M_impl._M_header._M_parent); }\n+      { return static_cast<\n+\t  _Const_Link_type>(this->_M_impl._M_header._M_parent); }\n \n       _Link_type\n       _M_end()\n@@ -999,9 +1000,9 @@ namespace std\n     inline void\n     _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::erase(iterator __position)\n     {\n-      _Link_type __y =\n-\tstatic_cast<_Link_type>(_Rb_tree_rebalance_for_erase(__position._M_node,\n-\t\t\t\t\t\t\t     this->_M_impl._M_header));\n+      _Link_type __y = static_cast<\n+\t_Link_type>(_Rb_tree_rebalance_for_erase(__position._M_node,\n+\t\t\t\t\t\t this->_M_impl._M_header));\n       destroy_node(__y);\n       --_M_impl._M_node_count;\n     }\n@@ -1278,4 +1279,3 @@ namespace std\n } // namespace std\n \n #endif\n-"}]}