{"sha": "9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjZjJhMGJkYzc4ZmJiMjViMmViMmZlYjdiZDE5Y2FlYmNjODJiZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:09:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:09:46Z"}, "message": "[multiple changes]\n\n2009-04-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat_ugn.texi: Fix typos.\n\n2009-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb, gnat1drv.adb, sem_ch13.adb: Add circuitry to\n\tValidate_Unchecked_Warnings to suppress warnings about size or\n\talignment or extra bits if either type involved has pragma Warnings\n\t(Off) set for the type entity.\n\nFrom-SVN: r146366", "tree": {"sha": "26fe5909b88075a83feafb678723b646d2d2aaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26fe5909b88075a83feafb678723b646d2d2aaaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/comments", "author": null, "committer": null, "parents": [{"sha": "76974327ad34d419acb37750c67e73b801aea984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76974327ad34d419acb37750c67e73b801aea984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76974327ad34d419acb37750c67e73b801aea984"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "ca9d4a8059a316421080afe35048349a915c467b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "patch": "@@ -1,3 +1,14 @@\n+2009-04-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix typos.\n+\n+2009-04-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb, gnat1drv.adb, sem_ch13.adb: Add circuitry to\n+\tValidate_Unchecked_Warnings to suppress warnings about size or\n+\talignment or extra bits if either type involved has pragma Warnings\n+\t(Off) set for the type entity.\n+\n 2009-04-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gigi): Make the special IA-64 descriptor type"}, {"sha": "0ce0db632e6a3a6b4e932fe9553e1dba91cb43a9", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "patch": "@@ -91,7 +91,7 @@ package body Debug is\n    --  dY   Enable configurable run-time mode\n    --  dZ   Generate listing showing the contents of the dispatch tables\n \n-   --  d.a\n+   --  d.a  Force Target_Strict_Alignment mode to True\n    --  d.b\n    --  d.c  Generate inline concatenation, do not call procedure\n    --  d.d\n@@ -498,6 +498,10 @@ package body Debug is\n    --         - In case of abstract subprograms the text \"is abstract\" is\n    --           added at the end of the line.\n \n+   --  d.a  Force Target_Strict_Alignment to True, even on targets where it\n+   --       would normally be false. Can be used for testing strict alignment\n+   --       circuitry in the compiler.\n+\n    --  d.c  Generate inline concatenation, instead of calling one of the\n    --       System.Concat_n.Str_Concat_n routines in cases where the latter\n    --       routines would normally be called."}, {"sha": "3d495ce3c8bed4b0519975da0cdef978fa1a7761", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "patch": "@@ -339,6 +339,12 @@ begin\n          List_Representation_Info_Mechanisms := True;\n       end if;\n \n+      --  Force Target_Strict_Alignment true if debug flag -gnatd.a is set\n+\n+      if Debug_Flag_Dot_A then\n+         Ttypes.Target_Strict_Alignment := True;\n+      end if;\n+\n       --  Disable static allocation of dispatch tables if -gnatd.t or if layout\n       --  is enabled. The front end's layout phase currently treats types that\n       --  have discriminant-dependent arrays as not being static even when a"}, {"sha": "70022f30c6e70c0bb1fdda6d6191557e4be01eeb", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "patch": "@@ -22263,8 +22263,8 @@ headers which is intended to do 95% of the tedious work of generating\n Ada specs from C or C++ header files. Note that this still is a work in\n progress, not designed to generate 100% correct Ada specs.\n \n-Note that the code generated is using the Ada 2005 syntax, which makes it\n-easier to inteface with other languages than previous versions of Ada.\n+The code generated is using the Ada 2005 syntax, which makes it\n+easier to interface with other languages than previous versions of Ada.\n \n @menu\n * Running the binding generator::\n@@ -22286,8 +22286,8 @@ $ g++ -c -fdump-ada-spec -C /usr/include/time.h\n $ gcc -c -gnat05 *.ads\n @end smallexample\n \n-will generate, under GNU/Linux, the following files: @file{bits_time_h.ads},\n-@code{bits_types_h.ads}, @code{stddef_h.ads}, @code{time_h.ads} which\n+will generate, under GNU/Linux, the following files: @file{time_h.ads},\n+@file{bits_time_h.ads}, @file{stddef_h.ads}, @file{bits_types_h.ads} which\n correspond to the files @file{/usr/include/time.h},\n @file{/usr/include/bits/time.h}, etc@dots{}, and will then compile in Ada 2005\n mode these Ada specs.\n@@ -22333,7 +22333,7 @@ procedure foo (variable : int);\n @end smallexample\n \n In some cases, the generated bindings will be more complete or more meaningful\n-when defining some macros, which you can do via the @option{-D} switch. this\n+when defining some macros, which you can do via the @option{-D} switch. This\n is for example the case with @file{Xlib.h} under GNU/Linux:\n \n @smallexample\n@@ -22347,7 +22347,7 @@ In other cases, it is not possible to parse a header file in a stand alone\n manner, because other include files need to be included first. In this\n case, the solution is to create a small header file including the needed\n @code{#include} and possible @code{#define} directives. For example, to\n-generate Ada bindings for @file{readline/readlin.h}, you need to first\n+generate Ada bindings for @file{readline/readline.h}, you need to first\n include @file{stdio.h}, so you can create a file with the following two\n lines in e.g. @file{readline1.h}:\n \n@@ -22390,7 +22390,7 @@ Generate Ada spec files for the header files specified on the command line\n only.\n \n @item -C\n-@item @option{-C} (@command{gcc})\n+@cindex @option{-C} (@command{gcc})\n Extract comments from headers and generate Ada comments in the Ada spec files.\n @end table\n "}, {"sha": "b5a3c6bdbfa69cc650fb981f2638a6be2a5c31ad", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9fcf2a0bdc78fbb25b2eb2feb7bd19caebcc82bf", "patch": "@@ -4476,6 +4476,14 @@ package body Sem_Ch13 is\n             if Serious_Errors_Detected = 0\n               and then Known_Static_RM_Size (Source)\n               and then Known_Static_RM_Size (Target)\n+\n+              --  Don't do the check if warnings off for either type, note the\n+              --  deliberate use of OR here instead of OR ELSE to get the flag\n+              --  Warnings_Off_Used set for both types if appropriate.\n+\n+              and then not (Has_Warnings_Off (Source)\n+                              or\n+                            Has_Warnings_Off (Target))\n             then\n                Source_Siz := RM_Size (Source);\n                Target_Siz := RM_Size (Target);\n@@ -4568,6 +4576,20 @@ package body Sem_Ch13 is\n                      begin\n                         if Source_Align < Target_Align\n                           and then not Is_Tagged_Type (D_Source)\n+\n+                          --  Suppress warning if warnings suppressed on either\n+                          --  type or either designated type. Note the use of\n+                          --  OR here instead of OR ELSE. That is intentional,\n+                          --  we would like to set flag Warnings_Off_Used in\n+                          --  all types for which warnings are suppressed.\n+\n+                          and then not (Has_Warnings_Off (D_Source)\n+                                          or\n+                                        Has_Warnings_Off (D_Target)\n+                                          or\n+                                        Has_Warnings_Off (Source)\n+                                          or\n+                                        Has_Warnings_Off (Target))\n                         then\n                            Error_Msg_Uint_1 := Target_Align;\n                            Error_Msg_Uint_2 := Source_Align;\n@@ -4576,12 +4598,9 @@ package body Sem_Ch13 is\n                            Error_Msg\n                              (\"?alignment of & (^) is stricter than \" &\n                               \"alignment of & (^)!\", Eloc);\n-\n-                           if All_Errors_Mode then\n-                              Error_Msg\n-                                (\"\\?resulting access value may have invalid \" &\n-                                 \"alignment!\", Eloc);\n-                           end if;\n+                           Error_Msg\n+                             (\"\\?resulting access value may have invalid \" &\n+                              \"alignment!\", Eloc);\n                         end if;\n                      end;\n                   end if;"}]}