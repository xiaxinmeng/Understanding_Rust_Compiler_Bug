{"sha": "778d120f731f303c243b8a440c0cdfdf6b91339b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4ZDEyMGY3MzFmMzAzYzI0M2I4YTQ0MGMwY2RmZGY2YjkxMzM5Yg==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2019-06-28T13:21:53Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2019-06-28T13:21:53Z"}, "message": "x86: improve GFNI insns\n\nThere's no need for three alternatives: \"v\" without TARGET_AVX512F is\nthe same as \"x\".\n\nFrom-SVN: r272784", "tree": {"sha": "60ee96d018817b24084bf8fd7f0ed8ea657bdcea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ee96d018817b24084bf8fd7f0ed8ea657bdcea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/778d120f731f303c243b8a440c0cdfdf6b91339b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778d120f731f303c243b8a440c0cdfdf6b91339b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778d120f731f303c243b8a440c0cdfdf6b91339b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778d120f731f303c243b8a440c0cdfdf6b91339b/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0569d342ca43a2e90f1fd823dada3364705e5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0569d342ca43a2e90f1fd823dada3364705e5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0569d342ca43a2e90f1fd823dada3364705e5a9"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "9cc900d2f1dc3d9686ba5bc04b357f689e648741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778d120f731f303c243b8a440c0cdfdf6b91339b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778d120f731f303c243b8a440c0cdfdf6b91339b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=778d120f731f303c243b8a440c0cdfdf6b91339b", "patch": "@@ -1,3 +1,9 @@\n+2019-06-28  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/i386/sse.md (vgf2p8affineinvqb_<mode><mask_name>,\n+\tvgf2p8affineqb_<mode><mask_name>, vgf2p8mulb_<mode><mask_name>):\n+\tEliminate redundant alternative.\n+\n 2019-06-28  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/i386/sse.md (vgf2p8affineinvqb_<mode><mask_name>,"}, {"sha": "6831487139d975f78e2f5e555fff309691c51fa8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778d120f731f303c243b8a440c0cdfdf6b91339b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778d120f731f303c243b8a440c0cdfdf6b91339b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=778d120f731f303c243b8a440c0cdfdf6b91339b", "patch": "@@ -22110,56 +22110,53 @@\n   \"vpopcnt<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")\n \n (define_insn \"vgf2p8affineinvqb_<mode><mask_name>\"\n-  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n+  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,v\")\n \t(unspec:VI1_AVX512F\n-\t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,x,v\")\n-\t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")\n-\t   (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,v\")\n+\t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")\n+\t   (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_GF2P8AFFINEINV))]\n   \"TARGET_GFNI\"\n   \"@\n    gf2p8affineinvqb\\t{%3, %2, %0| %0, %2, %3}\n-   vgf2p8affineinvqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\n    vgf2p8affineinvqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512f\")\n-   (set_attr \"prefix_data16\" \"1,*,*\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vgf2p8affineqb_<mode><mask_name>\"\n-  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n+  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,v\")\n \t(unspec:VI1_AVX512F\n-\t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,x,v\")\n-\t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")\n-\t   (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,v\")\n+\t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")\n+\t   (match_operand:QI 3 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_GF2P8AFFINE))]\n   \"TARGET_GFNI\"\n   \"@\n    gf2p8affineqb\\t{%3, %2, %0| %0, %2, %3}\n-   vgf2p8affineqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\n    vgf2p8affineqb\\t{%3, %2, %1, %0<mask_operand4>| %0<mask_operand4>, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512f\")\n-   (set_attr \"prefix_data16\" \"1,*,*\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vgf2p8mulb_<mode><mask_name>\"\n-  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,x,v\")\n+  [(set (match_operand:VI1_AVX512F 0 \"register_operand\" \"=x,v\")\n \t(unspec:VI1_AVX512F\n-\t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"%0,x,v\")\n-\t   (match_operand:VI1_AVX512F 2 \"nonimmediate_operand\" \"xBm,xm,vm\")]\n+\t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"%0,v\")\n+\t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")]\n \t  UNSPEC_GF2P8MUL))]\n   \"TARGET_GFNI\"\n   \"@\n    gf2p8mulb\\t{%2, %0| %0, %2}\n-   vgf2p8mulb\\t{%2, %1, %0<mask_operand3>| %0<mask_operand3>, %1, %2}\n    vgf2p8mulb\\t{%2, %1, %0<mask_operand3>| %0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx,avx512f\")\n-   (set_attr \"prefix_data16\" \"1,*,*\")\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"vpshrd_<mode><mask_name>\""}]}