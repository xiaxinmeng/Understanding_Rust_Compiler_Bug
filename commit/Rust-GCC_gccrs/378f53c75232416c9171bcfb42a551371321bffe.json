{"sha": "378f53c75232416c9171bcfb42a551371321bffe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4ZjUzYzc1MjMyNDE2YzkxNzFiY2ZiNDJhNTUxMzcxMzIxYmZmZQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-18T18:28:58Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-02-18T18:28:58Z"}, "message": "re PR fortran/87689 (PowerPC64 ELFv2 function parameter passing violation)\n\n2019-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/87689\n    * trans-decl.c (gfc_get_extern_function_decl): Add argument\n    actual_args and pass it through to gfc_get_function_type.\n    * trans-expr.c (conv_function_val): Add argument actual_args\n    and pass it on to gfc_get_extern_function_decl.\n    (conv_procedure_call): Pass actual arguments to conv_function_val.\n    * trans-types.c (get_formal_from_actual_arglist): New function.\n    (gfc_get_function_type): Add argument actual_args.  Generate\n    formal args from actual args if necessary.\n    * trans-types.h (gfc_get_function_type): Add optional argument.\n    * trans.h (gfc_get_extern_function_decl): Add optional argument.\n\n2019-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n    PR fortran/87689\n    * gfortran.dg/lto/20091028-1_0.f90: Add -Wno-lto-type-mismatch to\n    options.\n    * gfortran.dg/lto/20091028-2_0.f90: Likewise.\n    * gfortran.dg/lto/pr87689_0.f: New file.\n    * gfortran.dg/lto/pr87689_1.f: New file.\n\nFrom-SVN: r268992", "tree": {"sha": "e1b9c5e9aba98b7ee97c1db32ec84d400da32f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1b9c5e9aba98b7ee97c1db32ec84d400da32f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378f53c75232416c9171bcfb42a551371321bffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378f53c75232416c9171bcfb42a551371321bffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378f53c75232416c9171bcfb42a551371321bffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378f53c75232416c9171bcfb42a551371321bffe/comments", "author": null, "committer": null, "parents": [{"sha": "7a247605d892747ccc9216ffc047c73bd688ac36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a247605d892747ccc9216ffc047c73bd688ac36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a247605d892747ccc9216ffc047c73bd688ac36"}], "stats": {"total": 118, "additions": 108, "deletions": 10}, "files": [{"sha": "43eda8c56d754aadc88145395333a6bb7662a4ef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -1,3 +1,17 @@\n+2019-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/87689\n+\t* trans-decl.c (gfc_get_extern_function_decl): Add argument\n+\tactual_args and pass it through to gfc_get_function_type.\n+\t* trans-expr.c (conv_function_val): Add argument actual_args\n+\tand pass it on to gfc_get_extern_function_decl.\n+\t(conv_procedure_call): Pass actual arguments to conv_function_val.\n+\t* trans-types.c (get_formal_from_actual_arglist): New function.\n+\t(gfc_get_function_type): Add argument actual_args.  Generate\n+\tformal args from actual args if necessary.\n+\t* trans-types.h (gfc_get_function_type): Add optional argument.\n+\t* trans.h (gfc_get_extern_function_decl): Add optional argument.\n+\n 2019-02-18  Martin Liska  <mliska@suse.cz>\n \n \t* decl.c (gfc_match_gcc_builtin): Add support for filtering"}, {"sha": "3604cfcf5cb3e2858da27ef7dd33cee2f27e7722", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -1962,7 +1962,7 @@ get_proc_pointer_decl (gfc_symbol *sym)\n /* Get a basic decl for an external function.  */\n \n tree\n-gfc_get_extern_function_decl (gfc_symbol * sym)\n+gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n {\n   tree type;\n   tree fndecl;\n@@ -2135,7 +2135,7 @@ gfc_get_extern_function_decl (gfc_symbol * sym)\n       mangled_name = gfc_sym_mangled_function_id (sym);\n     }\n \n-  type = gfc_get_function_type (sym);\n+  type = gfc_get_function_type (sym, actual_args);\n   fndecl = build_decl (input_location,\n \t\t       FUNCTION_DECL, name, type);\n "}, {"sha": "a75f8a7c250a19cdb1c90ccefe12cefdbeaddb92", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -3895,7 +3895,8 @@ conv_base_obj_fcn_val (gfc_se * se, tree base_object, gfc_expr * expr)\n \n \n static void\n-conv_function_val (gfc_se * se, gfc_symbol * sym, gfc_expr * expr)\n+conv_function_val (gfc_se * se, gfc_symbol * sym, gfc_expr * expr,\n+\t\t   gfc_actual_arglist *actual_args)\n {\n   tree tmp;\n \n@@ -3913,7 +3914,7 @@ conv_function_val (gfc_se * se, gfc_symbol * sym, gfc_expr * expr)\n   else\n     {\n       if (!sym->backend_decl)\n-\tsym->backend_decl = gfc_get_extern_function_decl (sym);\n+\tsym->backend_decl = gfc_get_extern_function_decl (sym, actual_args);\n \n       TREE_USED (sym->backend_decl) = 1;\n \n@@ -6580,7 +6581,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n   /* Generate the actual call.  */\n   if (base_object == NULL_TREE)\n-    conv_function_val (se, sym, expr);\n+    conv_function_val (se, sym, expr, args);\n   else\n     conv_base_obj_fcn_val (se, base_object, expr);\n "}, {"sha": "2115db23f2cb9372bebaeaf7835838b72567f56f", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -2970,9 +2970,54 @@ create_fn_spec (gfc_symbol *sym, tree fntype)\n   return build_type_attribute_variant (fntype, tmp);\n }\n \n+/* Helper function - if we do not find an interface for a procedure,\n+   construct it from the actual arglist.  Luckily, this can only\n+   happen for call by reference, so the information we actually need\n+   to provide (and which would be impossible to guess from the call\n+   itself) is not actually needed.  */\n+\n+static void\n+get_formal_from_actual_arglist (gfc_symbol *sym, gfc_actual_arglist *actual_args)\n+{\n+  gfc_actual_arglist *a;\n+  gfc_formal_arglist **f;\n+  gfc_symbol *s;\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  static int var_num;\n+\n+  f = &sym->formal;\n+  for (a = actual_args; a != NULL; a = a->next)\n+    {\n+      if (a->expr)\n+\t{\n+\t  (*f) = gfc_get_formal_arglist ();\n+\t  snprintf (name, GFC_MAX_SYMBOL_LEN, \"_formal_%d\", var_num ++);\n+\t  gfc_get_symbol (name, NULL, &s);\n+\t  if (a->expr->ts.type == BT_PROCEDURE)\n+\t    {\n+\t      s->attr.flavor = FL_PROCEDURE;\n+\t    }\n+\t  else\n+\t    {\n+\t      s->ts = a->expr->ts;\n+\t      s->attr.flavor = FL_VARIABLE;\n+\t      if (a->expr->rank > 0)\n+\t\t{\n+\t\t  s->attr.dimension = 1;\n+\t\t  s->as = gfc_get_array_spec ();\n+\t\t  s->as->type = AS_ASSUMED_SIZE;\n+\t\t}\n+\t    }\n+\t  s->attr.dummy = 1;\n+\t  s->attr.intent = INTENT_UNKNOWN;\n+\t  (*f)->sym = s;\n+\t}\n+      f = &((*f)->next);\n+    }\n+}\n \n tree\n-gfc_get_function_type (gfc_symbol * sym)\n+gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n {\n   tree type;\n   vec<tree, va_gc> *typelist = NULL;\n@@ -3030,6 +3075,10 @@ gfc_get_function_type (gfc_symbol * sym)\n \t    vec_safe_push (typelist, build_pointer_type(gfc_charlen_type_node));\n \t}\n     }\n+  if (sym->backend_decl == error_mark_node && actual_args != NULL\n+      && sym->formal == NULL && (sym->attr.proc == PROC_EXTERNAL\n+\t\t\t\t || sym->attr.proc == PROC_UNKNOWN))\n+    get_formal_from_actual_arglist (sym, actual_args);\n \n   /* Build the argument types for the function.  */\n   for (f = gfc_sym_get_dummy_args (sym); f; f = f->next)"}, {"sha": "7d591bac63a6c4ba4b1df75bdd6216674124e66e", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -88,7 +88,7 @@ tree gfc_sym_type (gfc_symbol *);\n tree gfc_typenode_for_spec (gfc_typespec *, int c = 0);\n int gfc_copy_dt_decls_ifequal (gfc_symbol *, gfc_symbol *, bool);\n \n-tree gfc_get_function_type (gfc_symbol *);\n+tree gfc_get_function_type (gfc_symbol *, gfc_actual_arglist *args = NULL);\n \n tree gfc_type_for_size (unsigned, int);\n tree gfc_type_for_mode (machine_mode, int);"}, {"sha": "7d46684e2a453c80f4b1b2317c6ce0f9995165b4", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -580,7 +580,8 @@ void gfc_merge_block_scope (stmtblock_t * block);\n tree gfc_get_label_decl (gfc_st_label *);\n \n /* Return the decl for an external function.  */\n-tree gfc_get_extern_function_decl (gfc_symbol *);\n+tree gfc_get_extern_function_decl (gfc_symbol *,\n+\t\t\t\t   gfc_actual_arglist *args = NULL);\n \n /* Return the decl for a function.  */\n tree gfc_get_function_decl (gfc_symbol *);"}, {"sha": "04f60aa0a8924afe416fa023db272a3c2f80dca3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -1,3 +1,12 @@\n+2019-02-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/87689\n+\t* gfortran.dg/lto/20091028-1_0.f90: Add -Wno-lto-type-mismatch to\n+\toptions.\n+\t* gfortran.dg/lto/20091028-2_0.f90: Likewise.\n+\t* gfortran.dg/lto/pr87689_0.f: New file.\n+\t* gfortran.dg/lto/pr87689_1.f: New file.\n+\n 2019-02-18  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* g++.dg/wrappers/pr88680.C: Add -fno-short-enums."}, {"sha": "b83cf6d196c1492de4a03db8b0fdf9639a023eeb", "filename": "gcc/testsuite/gfortran.dg/lto/20091028-1_0.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_0.f90?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -1,5 +1,5 @@\n ! { dg-lto-do link }\n-! { dg-extra-ld-options \"-r -nostdlib -finline-functions -flinker-output=nolto-rel\" }\n+! { dg-extra-ld-options \"-r -nostdlib -finline-functions -flinker-output=nolto-rel -Wno-lto-type-mismatch\" }\n \n SUBROUTINE int_gen_ti_header_char( hdrbuf, hdrbufsize, itypesize, &\n                               DataHandle, Element, VarName, Data, code )"}, {"sha": "b83cf6d196c1492de4a03db8b0fdf9639a023eeb", "filename": "gcc/testsuite/gfortran.dg/lto/20091028-2_0.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_0.f90?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -1,5 +1,5 @@\n ! { dg-lto-do link }\n-! { dg-extra-ld-options \"-r -nostdlib -finline-functions -flinker-output=nolto-rel\" }\n+! { dg-extra-ld-options \"-r -nostdlib -finline-functions -flinker-output=nolto-rel -Wno-lto-type-mismatch\" }\n \n SUBROUTINE int_gen_ti_header_char( hdrbuf, hdrbufsize, itypesize, &\n                               DataHandle, Element, VarName, Data, code )"}, {"sha": "5beee9391c64618dd015903e0e0d9658406f1a40", "filename": "gcc/testsuite/gfortran.dg/lto/pr87689_0.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fpr87689_0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fpr87689_0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fpr87689_0.f?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -0,0 +1,13 @@\n+! { dg-lto-run }\n+! PR 87689 - this used to fail for POWER, plus it used to\n+! give warnings about mismatches with LTO.\n+! Original test case by Judica\u00ebl Grasset.\n+      program main\n+        implicit none\n+        character :: c\n+        character(len=20) :: res, doesntwork_p8\n+        external doesntwork_p8\n+        c = 'o'\n+        res = doesntwork_p8(c,1,2,3,4,5,6)\n+        if (res /= 'foo') stop 3\n+      end program main"}, {"sha": "f293a0054bd94da2c8af02c873a5f9daa454f8b0", "filename": "gcc/testsuite/gfortran.dg/lto/pr87689_1.f", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fpr87689_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378f53c75232416c9171bcfb42a551371321bffe/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fpr87689_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2Fpr87689_1.f?ref=378f53c75232416c9171bcfb42a551371321bffe", "patch": "@@ -0,0 +1,11 @@\n+      function doesntwork_p8(c,a1,a2,a3,a4,a5,a6)\n+        implicit none\n+        character(len=20) :: doesntwork_p8\n+        character :: c\n+        integer :: a1,a2,a3,a4,a5,a6\n+        if (a1 /= 1 .or. a2 /= 2 .or. a3 /= 3 .or. a4 /= 4 .or. a5 /= 5\n+     &       .or. a6 /= 6) stop 1\n+       if (c /= 'o ') stop 2\n+       doesntwork_p8 = 'foo'\n+       return\n+       end"}]}