{"sha": "2c838a3e4ea06c69c856d074ae5b0400e08ae3c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM4MzhhM2U0ZWEwNmM2OWM4NTZkMDc0YWU1YjA0MDBlMDhhZTNjMg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-04T14:13:35Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-04T17:29:27Z"}, "message": "[OpenACC 'exit data'] Evaluate 'copyfrom' individually for 'GOMP_MAP_STRUCT' entries\n\nCurrently, we don't at all evaluate 'copyfrom' for 'GOMP_MAP_STRUCT' entries.\nFix this by copying/adapting the corresponding non-'GOMP_MAP_STRUCT' code.\n\n\tlibgomp/\n\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:\n\tEvaluate 'copyfrom' individually for each entry.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-1.c: Update.", "tree": {"sha": "36185d623c6b89469d77b9304cb8e536edda2c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36185d623c6b89469d77b9304cb8e536edda2c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a02f1adbfe619ab19cf142438e0a02950d3594da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02f1adbfe619ab19cf142438e0a02950d3594da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02f1adbfe619ab19cf142438e0a02950d3594da"}], "stats": {"total": 109, "additions": 83, "deletions": 26}, "files": [{"sha": "11419e692aa2e7f0967bec4f1eff70bca6d69665", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=2c838a3e4ea06c69c856d074ae5b0400e08ae3c2", "patch": "@@ -1194,6 +1194,12 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n \t\t    || kind == GOMP_MAP_FORCE_DETACH)\n \t\t  finalize = true;\n \n+\t\tcopyfrom = false;\n+\t\tif (kind == GOMP_MAP_FROM\n+\t\t    || kind == GOMP_MAP_FORCE_FROM\n+\t\t    || kind == GOMP_MAP_ALWAYS_FROM)\n+\t\t  copyfrom = true;\n+\n \t\tstruct splay_tree_key_s k;\n \t\tk.host_start = (uintptr_t) hostaddrs[i + j];\n \t\tk.host_end = k.host_start + sizes[i + j];\n@@ -1216,6 +1222,16 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n \t\t    else if (str->refcount > 0\n \t\t\t     && str->refcount != REFCOUNT_INFINITY)\n \t\t      str->refcount--;\n+\n+\t\t    if (copyfrom\n+\t\t\t&& (kind != GOMP_MAP_FROM || str->refcount == 0))\n+\t\t      gomp_copy_dev2host (acc_dev, aq, (void *) k.host_start,\n+\t\t\t\t\t  (void *) (str->tgt->tgt_start\n+\t\t\t\t\t\t    + str->tgt_offset\n+\t\t\t\t\t\t    + k.host_start\n+\t\t\t\t\t\t    - str->host_start),\n+\t\t\t\t\t  k.host_end - k.host_start);\n+\n \t\t    if (str->refcount == 0)\n \t\t      {\n \t\t\tif (aq)"}, {"sha": "543aaa153064683ec22d10ef02b0bfa562edba5f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-1.c", "status": "modified", "additions": 67, "deletions": 26, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c838a3e4ea06c69c856d074ae5b0400e08ae3c2/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-1.c?ref=2c838a3e4ea06c69c856d074ae5b0400e08ae3c2", "patch": "@@ -1,4 +1,4 @@\n-/* Test dynamic refcount of separate structure members.  */\n+/* Test dynamic refcount and copy behavior of separate structure members.  */\n \n #include <assert.h>\n #include <stdbool.h>\n@@ -12,41 +12,45 @@ struct s\n \n static void test(unsigned variant)\n {\n-  struct s s;\n+  struct s s = { .a = 73, .b = -22 };\n \n-#pragma acc enter data create(s.a, s.b)\n+#pragma acc enter data copyin(s.a, s.b)\n   assert(acc_is_present(&s.a, sizeof s.a));\n   assert(acc_is_present(&s.b, sizeof s.b));\n \n+  /* To verify that any following 'copyin' doesn't 'copyin' again.  */\n+  s.a = -s.a;\n+  s.b = -s.b;\n+\n   if (variant & 4)\n     {\n       if (variant & 8)\n \t{\n-#pragma acc enter data create(s.b)\n+#pragma acc enter data copyin(s.b)\n \t}\n       else\n-\tacc_create(&s.b, sizeof s.b);\n+\tacc_copyin(&s.b, sizeof s.b);\n       assert(acc_is_present(&s.a, sizeof s.a));\n       assert(acc_is_present(&s.b, sizeof s.b));\n \n       if (variant & 16)\n \t{\n-#pragma acc enter data create(s.a)\n+#pragma acc enter data copyin(s.a)\n \t}\n       else\n-\tacc_create(&s.a, sizeof s.a);\n+\tacc_copyin(&s.a, sizeof s.a);\n       assert(acc_is_present(&s.a, sizeof s.a));\n       assert(acc_is_present(&s.b, sizeof s.b));\n \n       if (variant & 32)\n \t{\n-#pragma acc enter data create(s.a)\n-\t  acc_create(&s.b, sizeof s.b);\n-#pragma acc enter data create(s.b)\n-#pragma acc enter data create(s.b)\n-\t  acc_create(&s.a, sizeof s.a);\n-\t  acc_create(&s.a, sizeof s.a);\n-\t  acc_create(&s.a, sizeof s.a);\n+#pragma acc enter data copyin(s.a)\n+\t  acc_copyin(&s.b, sizeof s.b);\n+#pragma acc enter data copyin(s.b)\n+#pragma acc enter data copyin(s.b)\n+\t  acc_copyin(&s.a, sizeof s.a);\n+\t  acc_copyin(&s.a, sizeof s.a);\n+\t  acc_copyin(&s.a, sizeof s.a);\n \t}\n       assert(acc_is_present(&s.a, sizeof s.a));\n       assert(acc_is_present(&s.b, sizeof s.b));\n@@ -55,85 +59,122 @@ static void test(unsigned variant)\n #pragma acc parallel \\\n   copy(s.a, s.b)\n   {\n+#if ACC_MEM_SHARED\n+    if (s.a++ != -73)\n+      __builtin_abort();\n+    if (s.b-- != 22)\n+      __builtin_abort();\n+#else\n+    if (s.a++ != 73)\n+      __builtin_abort();\n+    if (s.b-- != -22)\n+      __builtin_abort();\n+#endif\n   }\n+#if ACC_MEM_SHARED\n+  assert(s.a == -72);\n+  assert(s.b == 21);\n+#else\n+  assert(s.a == -73);\n+  assert(s.b == 22);\n+#endif\n \n   if (variant & 32)\n     {\n       if (variant & 1)\n \t{\n-#pragma acc exit data delete(s.a) finalize\n+#pragma acc exit data copyout(s.a) finalize\n \t}\n       else\n-\tacc_delete_finalize(&s.a, sizeof s.a);\n+\tacc_copyout_finalize(&s.a, sizeof s.a);\n     }\n   else\n     {\n       if (variant & 1)\n \t{\n-#pragma acc exit data delete(s.a)\n+#pragma acc exit data copyout(s.a)\n \t}\n       else\n-\tacc_delete(&s.a, sizeof s.a);\n+\tacc_copyout(&s.a, sizeof s.a);\n       if (variant & 4)\n \t{\n \t  assert(acc_is_present(&s.a, sizeof s.a));\n \t  assert(acc_is_present(&s.b, sizeof s.b));\n+#if ACC_MEM_SHARED\n+\t  assert(s.a == -72);\n+\t  assert(s.b == 21);\n+#else\n+\t  assert(s.a == -73);\n+\t  assert(s.b == 22);\n+#endif\n \t  if (variant & 1)\n \t    {\n-#pragma acc exit data delete(s.a)\n+#pragma acc exit data copyout(s.a)\n \t    }\n \t  else\n-\t    acc_delete(&s.a, sizeof s.a);\n+\t    acc_copyout(&s.a, sizeof s.a);\n \t}\n     }\n #if ACC_MEM_SHARED\n   assert(acc_is_present(&s.a, sizeof s.a));\n   assert(acc_is_present(&s.b, sizeof s.b));\n+  assert(s.a == -72);\n+  assert(s.b == 21);\n #else\n   assert(!acc_is_present(&s.a, sizeof s.a));\n   assert(acc_is_present(&s.b, sizeof s.b));\n+  assert(s.a == 74);\n+  assert(s.b == 22);\n #endif\n \n   if (variant & 32)\n     {\n       if (variant & 2)\n \t{\n-#pragma acc exit data delete(s.b) finalize\n+#pragma acc exit data copyout(s.b) finalize\n \t}\n       else\n-\tacc_delete_finalize(&s.b, sizeof s.b);\n+\tacc_copyout_finalize(&s.b, sizeof s.b);\n     }\n   else\n     {\n       if (variant & 2)\n \t{\n-#pragma acc exit data delete(s.b)\n+#pragma acc exit data copyout(s.b)\n \t}\n       else\n-\tacc_delete(&s.b, sizeof s.b);\n+\tacc_copyout(&s.b, sizeof s.b);\n       if (variant & 4)\n \t{\n #if ACC_MEM_SHARED\n \t  assert(acc_is_present(&s.a, sizeof s.a));\n \t  assert(acc_is_present(&s.b, sizeof s.b));\n+\t  assert(s.a == -72);\n+\t  assert(s.b == 21);\n #else\n \t  assert(!acc_is_present(&s.a, sizeof s.a));\n \t  assert(acc_is_present(&s.b, sizeof s.b));\n+\t  assert(s.a == 74);\n+\t  assert(s.b == 22);\n #endif\n \t  if (variant & 2)\n \t    {\n-#pragma acc exit data delete(s.b)\n+#pragma acc exit data copyout(s.b)\n \t    }\n \t  else\n-\t    acc_delete(&s.b, sizeof s.b);\n+\t    acc_copyout(&s.b, sizeof s.b);\n \t}\n     }\n #if ACC_MEM_SHARED\n   assert(acc_is_present(&s.a, sizeof s.a));\n   assert(acc_is_present(&s.b, sizeof s.b));\n+  assert(s.a == -72);\n+  assert(s.b == 21);\n #else\n   assert(!acc_is_present(&s.a, sizeof s.a));\n   assert(!acc_is_present(&s.b, sizeof s.b));\n+  assert(s.a == 74);\n+  assert(s.b == -23);\n #endif\n }\n "}]}