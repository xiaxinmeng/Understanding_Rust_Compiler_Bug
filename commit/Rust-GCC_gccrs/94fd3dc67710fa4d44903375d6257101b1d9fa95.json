{"sha": "94fd3dc67710fa4d44903375d6257101b1d9fa95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmZDNkYzY3NzEwZmE0ZDQ0OTAzMzc1ZDYyNTcxMDFiMWQ5ZmE5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-08T13:54:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-08T13:54:32Z"}, "message": "[multiple changes]\n\n2009-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Add documentation for pragma Thread_Local_Storage\n\n\t* sem_ch3.adb: Minor comment updates\n\n2009-04-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* inline.adb (Back_End_Cannot_Inline): restrict warning to subprograms\n\tthat come from source.\n\nFrom-SVN: r145732", "tree": {"sha": "4e1e065070a8b339462faa75aeb7ed75439b045a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1e065070a8b339462faa75aeb7ed75439b045a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94fd3dc67710fa4d44903375d6257101b1d9fa95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94fd3dc67710fa4d44903375d6257101b1d9fa95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94fd3dc67710fa4d44903375d6257101b1d9fa95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94fd3dc67710fa4d44903375d6257101b1d9fa95/comments", "author": null, "committer": null, "parents": [{"sha": "d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d1c602b81789f09e2e35ce2b5c01c13bcebb34"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "b6d0aca4a093f3fbc2b1653d0c7c5dfd5ea426dc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=94fd3dc67710fa4d44903375d6257101b1d9fa95", "patch": "@@ -1,3 +1,14 @@\n+2009-04-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Add documentation for pragma Thread_Local_Storage\n+\n+\t* sem_ch3.adb: Minor comment updates\n+\n+2009-04-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb (Back_End_Cannot_Inline): restrict warning to subprograms\n+\tthat come from source.\n+\n 2009-04-08  Tristan Gingold  <gingold@adacore.com>\n \n \t* gcc-interface/utils.c, gcc-interface/decl.c, gcc-interface/gigi.h:"}, {"sha": "f72a0d16093767f3f98946739def7fa4e3ed7662", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=94fd3dc67710fa4d44903375d6257101b1d9fa95", "patch": "@@ -194,6 +194,7 @@ Implementation Defined Pragmas\n * Pragma Task_Info::\n * Pragma Task_Name::\n * Pragma Task_Storage::\n+* Pragma Thread_Local_Storage::\n * Pragma Time_Slice::\n * Pragma Title::\n * Pragma Unchecked_Union::\n@@ -683,8 +684,7 @@ compiler system.\n @noindent\n Ada defines a set of pragmas that can be used to supply additional\n information to the compiler.  These language defined pragmas are\n-implemented in GNAT and work as described in the Ada Reference\n-Manual.\n+implemented in GNAT and work as described in the Ada Reference Manual.\n \n In addition, Ada allows implementations to define additional pragmas\n whose meaning is defined by the implementation.  GNAT provides a number\n@@ -797,6 +797,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Task_Info::\n * Pragma Task_Name::\n * Pragma Task_Storage::\n+* Pragma Thread_Local_Storage::\n * Pragma Time_Slice::\n * Pragma Title::\n * Pragma Unchecked_Union::\n@@ -4656,6 +4657,35 @@ created, depending on the target.  This pragma can appear anywhere a\n @code{Storage_Size} attribute definition clause is allowed for a task\n type.\n \n+@node Pragma Thread_Local_Storage\n+@unnumberedsec Pragma Thread_Local_Storage\n+@findex Thread_Local_Storage\n+@cindex Task specific storage\n+@cindex TLS (Thread Local Storage)\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Thread_Local_Storage ([Entity =>] LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma specifies that the specified entity, which must be\n+a variable declared in a library level package, is to be marked as\n+\"Thread Local Storage\" (@code{TLS}). On systems supporting this (which\n+include Solaris, GNU/Linux and VxWorks 6), this causes each thread\n+(and hence each Ada task) to see a distinct copy of the variable.\n+\n+The variable may not have default initialization, and if there is\n+an explicit initialization, it must be either @code{null} for an\n+access variable, or a static expression for a scalar variable.\n+This provides a low level mechanism similar to that provided by\n+the @code{Ada.Task_Attributes} package, but much more efficient\n+and is also useful in writing interface code that will interact\n+with foreign threads.\n+\n+If this pragma is used on a system where @code{TLS} is not supported,\n+then an error message will be generated and the program will be rejected.\n+\n @node Pragma Time_Slice\n @unnumberedsec Pragma Time_Slice\n @findex Time_Slice"}, {"sha": "4a9b1f61e051fd8b27021abb7ad9ee397ec9c885", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=94fd3dc67710fa4d44903375d6257101b1d9fa95", "patch": "@@ -403,6 +403,7 @@ package body Inline is\n               or else Nkind (N) = N_Function_Call\n             then\n                if Is_Entity_Name (Name (N))\n+                 and then Comes_From_Source (Entity (Name (N)))\n                  and then\n                     Nkind (Unit_Declaration_Node (Entity (Name (N))))\n                       = N_Subprogram_Body"}, {"sha": "106acec064eb3c38d9f50c16b0688dc764b06b27", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fd3dc67710fa4d44903375d6257101b1d9fa95/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=94fd3dc67710fa4d44903375d6257101b1d9fa95", "patch": "@@ -140,7 +140,7 @@ package body Sem_Ch3 is\n       Derived_Type : Entity_Id);\n    --  Subsidiary procedure to Build_Derived_Type. For a derived enumeration\n    --  type, we must create a new list of literals. Types derived from\n-   --  Character and Wide_Character are special-cased.\n+   --  Character and [Wide_]Wide_Character are special-cased.\n \n    procedure Build_Derived_Numeric_Type\n      (N            : Node_Id;\n@@ -4962,7 +4962,7 @@ package body Sem_Ch3 is\n       Rang_Expr     : Node_Id;\n \n    begin\n-      --  Since types Standard.Character and Standard.Wide_Character do\n+      --  Since types Standard.Character and Standard.[Wide_]Wide_Character do\n       --  not have explicit literals lists we need to process types derived\n       --  from them specially. This is handled by Derived_Standard_Character.\n       --  If the parent type is a generic type, there are no literals either,"}]}