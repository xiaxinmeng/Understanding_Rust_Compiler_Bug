{"sha": "dfe1fe91dbc7f068bb3efcee40237caacc0c53ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlMWZlOTFkYmM3ZjA2OGJiM2VmY2VlNDAyMzdjYWFjYzBjNTNhZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-08T11:07:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-12-08T11:07:53Z"}, "message": "re PR rtl-optimization/88390 (g++.dg/tree-prof/pr57451.C FAILs)\n\n\tPR rtl-optimization/88390\n\t* dwarf2cfi.c (struct dw_cfi_row): Add window_save field.\n\t(cfi_row_equal_p): Compare it.\n\t(dwarf2out_frame_debug_cfa_window_save): Add FAKE parameter.\n\tIf FAKE is false, set window_save of the current row.\n\t(dwarf2out_frame_debug) <REG_CFA_TOGGLE_RA_MANGLE>: Call above\n\tfunction with FAKE parameter set to true.\n\t<REG_CFA_WINDOW_SAVE>: Likewise but with FAKE parameter set to false.\n\t(change_cfi_row): Emit a DW_CFA_GNU_window_save if necessary.\n\nFrom-SVN: r266906", "tree": {"sha": "d9c0f861ed8e80b9ab7a6935fb0f36e8b0817472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9c0f861ed8e80b9ab7a6935fb0f36e8b0817472"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae/comments", "author": null, "committer": null, "parents": [{"sha": "0a6ac1b2894303138d74e82935cda17010e2763e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6ac1b2894303138d74e82935cda17010e2763e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6ac1b2894303138d74e82935cda17010e2763e"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "3da7dbe97e8e28d7d78fefc161574397c484cb4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfe1fe91dbc7f068bb3efcee40237caacc0c53ae", "patch": "@@ -1,3 +1,15 @@\n+2018-12-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/88390\n+\t* dwarf2cfi.c (struct dw_cfi_row): Add window_save field.\n+\t(cfi_row_equal_p): Compare it.\n+\t(dwarf2out_frame_debug_cfa_window_save): Add FAKE parameter.\n+\tIf FAKE is false, set window_save of the current row.\n+\t(dwarf2out_frame_debug) <REG_CFA_TOGGLE_RA_MANGLE>: Call above\n+\tfunction with FAKE parameter set to true.\n+\t<REG_CFA_WINDOW_SAVE>: Likewise but with FAKE parameter set to false.\n+\t(change_cfi_row): Emit a DW_CFA_GNU_window_save if necessary.\n+\n 2018-12-07  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR target/87496"}, {"sha": "44dd76d1ada0e68e63776af95092a1dcdd259692", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe1fe91dbc7f068bb3efcee40237caacc0c53ae/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=dfe1fe91dbc7f068bb3efcee40237caacc0c53ae", "patch": "@@ -68,6 +68,9 @@ struct GTY(()) dw_cfi_row\n \n   /* The expressions for any register column that is saved.  */\n   cfi_vec reg_save;\n+\n+  /* True if the register window is saved.  */\n+  bool window_save;\n };\n \n /* The caller's ORIG_REG is saved in SAVED_IN_REG.  */\n@@ -766,6 +769,9 @@ cfi_row_equal_p (dw_cfi_row *a, dw_cfi_row *b)\n         return false;\n     }\n \n+  if (a->window_save != b->window_save)\n+    return false;\n+\n   return true;\n }\n \n@@ -1364,16 +1370,20 @@ dwarf2out_frame_debug_cfa_restore (rtx reg)\n }\n \n /* A subroutine of dwarf2out_frame_debug, process a REG_CFA_WINDOW_SAVE.\n-   ??? Perhaps we should note in the CIE where windows are saved (instead of\n-   assuming 0(cfa)) and what registers are in the window.  */\n+   FAKE is true if this is not really a window save but something else.\n+\n+   ??? Perhaps we should note in the CIE where windows are saved (instead\n+   of assuming 0(cfa)) and what registers are in the window.  */\n \n static void\n-dwarf2out_frame_debug_cfa_window_save (void)\n+dwarf2out_frame_debug_cfa_window_save (bool fake)\n {\n   dw_cfi_ref cfi = new_cfi ();\n \n   cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n   add_cfi (cfi);\n+  if (!fake)\n+    cur_row->window_save = true;\n }\n \n /* Record call frame debugging information for an expression EXPR,\n@@ -2133,9 +2143,13 @@ dwarf2out_frame_debug (rtx_insn *insn)\n \tbreak;\n \n       case REG_CFA_TOGGLE_RA_MANGLE:\n+\t/* This uses the same DWARF opcode as the next operation.  */\n+\tdwarf2out_frame_debug_cfa_window_save (true);\n+\thandled_one = true;\n+\tbreak;\n+\n       case REG_CFA_WINDOW_SAVE:\n-\t/* We overload both of these operations onto the same DWARF opcode.  */\n-\tdwarf2out_frame_debug_cfa_window_save ();\n+\tdwarf2out_frame_debug_cfa_window_save (false);\n \thandled_one = true;\n \tbreak;\n \n@@ -2199,6 +2213,14 @@ change_cfi_row (dw_cfi_row *old_row, dw_cfi_row *new_row)\n       else if (!cfi_equal_p (r_old, r_new))\n         add_cfi (r_new);\n     }\n+\n+  if (!old_row->window_save && new_row->window_save)\n+    {\n+      dw_cfi_ref cfi = new_cfi ();\n+\n+      cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n+      add_cfi (cfi);\n+    }\n }\n \n /* Examine CFI and return true if a cfi label and set_loc is needed"}]}