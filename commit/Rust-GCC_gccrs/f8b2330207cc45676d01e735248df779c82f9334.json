{"sha": "f8b2330207cc45676d01e735248df779c82f9334", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiMjMzMDIwN2NjNDU2NzZkMDFlNzM1MjQ4ZGY3NzljODJmOTMzNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T15:33:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T15:33:04Z"}, "message": "except.*: Use rtx_insn  (also touches function.h)\n\ngcc/\n\t* except.h (sjlj_emit_function_exit_after): Strengthen param\n\t\"after\" from rtx to rtx_insn *.  This is only called with\n\tresult of get_last_insn (in function.c) so type-change should be\n\tself-contained.\n\n\t* function.h (struct rtl_eh): Strengthen field \"ehr_label\" from\n\trtx to rtx_code_label *, and field \"sjlj_exit_after\" from rtx\n\tto rtx_insn *.  These fields are only used from except.c so this\n\ttype-change should be self-contained to this patch.\n\n\t* except.c (emit_to_new_bb_before): Strengthen param \"seq\" and\n\tlocal \"last\" from rtx to rtx_insn *.\n\t(dw2_build_landing_pads): Likewise for local \"seq\".\n\t(sjlj_mark_call_sites): Likewise for locals \"insn\", \"before\", p\".\n\t(sjlj_emit_function_enter): Strengthen param \"dispatch_label\" from\n\trtx to rtx_code_label *.  Strengthen locals \"fn_begin\", \"seq\" from\n\trtx to rtx_insn *.\n\t(sjlj_emit_function_exit_after): Strengthen param \"after\" from rtx\n\tto rtx_insn *.\n\t(sjlj_emit_function_exit): Likewise for locals \"seq\", \"insn\".\n\t(sjlj_emit_dispatch_table): Likewise for locals \"seq\", \"seq2\".\n\t(sjlj_build_landing_pads): Replace NULL_RTX with NULL when\n\treferring to an insn.  Strengthen local \"dispatch_label\" from\n\trtx to rtx_code_label *.\n\t(set_nothrow_function_flags): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t(expand_eh_return): Strengthen local \"around_label\" from\n\trtx to rtx_code_label *.\n\t(convert_to_eh_region_ranges): Strengthen locals \"iter\",\n\t\"last_action_insn\", \"first_no_action_insn\",\n\t\"first_no_action_insn_before_switch\",\n\t\"last_no_action_insn_before_switch\", from rtx to rtx_insn *.\n\nFrom-SVN: r214321", "tree": {"sha": "cf51321fcf641f7446cbb0a9a2fd82780c685714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf51321fcf641f7446cbb0a9a2fd82780c685714"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b2330207cc45676d01e735248df779c82f9334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b2330207cc45676d01e735248df779c82f9334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b2330207cc45676d01e735248df779c82f9334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b2330207cc45676d01e735248df779c82f9334/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cff08b2b91cf10f7168730e19ad6c292acb846fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff08b2b91cf10f7168730e19ad6c292acb846fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff08b2b91cf10f7168730e19ad6c292acb846fc"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "8962bf2ca7ebb70a384a45a5d8933455e8500f3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b2330207cc45676d01e735248df779c82f9334/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b2330207cc45676d01e735248df779c82f9334/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8b2330207cc45676d01e735248df779c82f9334", "patch": "@@ -1,3 +1,38 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* except.h (sjlj_emit_function_exit_after): Strengthen param\n+\t\"after\" from rtx to rtx_insn *.  This is only called with\n+\tresult of get_last_insn (in function.c) so type-change should be\n+\tself-contained.\n+\n+\t* function.h (struct rtl_eh): Strengthen field \"ehr_label\" from\n+\trtx to rtx_code_label *, and field \"sjlj_exit_after\" from rtx\n+\tto rtx_insn *.  These fields are only used from except.c so this\n+\ttype-change should be self-contained to this patch.\n+\n+\t* except.c (emit_to_new_bb_before): Strengthen param \"seq\" and\n+\tlocal \"last\" from rtx to rtx_insn *.\n+\t(dw2_build_landing_pads): Likewise for local \"seq\".\n+\t(sjlj_mark_call_sites): Likewise for locals \"insn\", \"before\", p\".\n+\t(sjlj_emit_function_enter): Strengthen param \"dispatch_label\" from\n+\trtx to rtx_code_label *.  Strengthen locals \"fn_begin\", \"seq\" from\n+\trtx to rtx_insn *.\n+\t(sjlj_emit_function_exit_after): Strengthen param \"after\" from rtx\n+\tto rtx_insn *.\n+\t(sjlj_emit_function_exit): Likewise for locals \"seq\", \"insn\".\n+\t(sjlj_emit_dispatch_table): Likewise for locals \"seq\", \"seq2\".\n+\t(sjlj_build_landing_pads): Replace NULL_RTX with NULL when\n+\treferring to an insn.  Strengthen local \"dispatch_label\" from\n+\trtx to rtx_code_label *.\n+\t(set_nothrow_function_flags): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t(expand_eh_return): Strengthen local \"around_label\" from\n+\trtx to rtx_code_label *.\n+\t(convert_to_eh_region_ranges): Strengthen locals \"iter\",\n+\t\"last_action_insn\", \"first_no_action_insn\",\n+\t\"first_no_action_insn_before_switch\",\n+\t\"last_no_action_insn_before_switch\", from rtx to rtx_insn *.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dwarf2out.c (last_var_location_insn): Strengthen this variable"}, {"sha": "0b0b6465229e152f83288a51cabea4e5f86ec339", "filename": "gcc/except.c", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b2330207cc45676d01e735248df779c82f9334/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b2330207cc45676d01e735248df779c82f9334/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=f8b2330207cc45676d01e735248df779c82f9334", "patch": "@@ -950,9 +950,9 @@ assign_filter_values (void)\n    first instruction of some existing BB and return the newly\n    produced block.  */\n static basic_block\n-emit_to_new_bb_before (rtx seq, rtx insn)\n+emit_to_new_bb_before (rtx_insn *seq, rtx insn)\n {\n-  rtx last;\n+  rtx_insn *last;\n   basic_block bb;\n   edge e;\n   edge_iterator ei;\n@@ -1021,7 +1021,7 @@ dw2_build_landing_pads (void)\n   for (i = 1; vec_safe_iterate (cfun->eh->lp_array, i, &lp); ++i)\n     {\n       basic_block bb;\n-      rtx seq;\n+      rtx_insn *seq;\n       edge e;\n \n       if (lp == NULL || lp->post_landing_pad == NULL)\n@@ -1107,15 +1107,16 @@ static void\n sjlj_mark_call_sites (void)\n {\n   int last_call_site = -2;\n-  rtx insn, mem;\n+  rtx_insn *insn;\n+  rtx mem;\n \n   for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n     {\n       eh_landing_pad lp;\n       eh_region r;\n       bool nothrow;\n       int this_call_site;\n-      rtx before, p;\n+      rtx_insn *before, *p;\n \n       /* Reset value tracking at extended basic block boundaries.  */\n       if (LABEL_P (insn))\n@@ -1168,9 +1169,10 @@ sjlj_mark_call_sites (void)\n /* Construct the SjLj_Function_Context.  */\n \n static void\n-sjlj_emit_function_enter (rtx dispatch_label)\n+sjlj_emit_function_enter (rtx_code_label *dispatch_label)\n {\n-  rtx fn_begin, fc, mem, seq;\n+  rtx_insn *fn_begin, *seq;\n+  rtx fc, mem;\n   bool fn_begin_outside_block;\n   rtx personality = get_personality_function (current_function_decl);\n \n@@ -1248,15 +1250,15 @@ sjlj_emit_function_enter (rtx dispatch_label)\n    the call to unwind_sjlj_unregister_libfunc if needed.  */\n \n void\n-sjlj_emit_function_exit_after (rtx after)\n+sjlj_emit_function_exit_after (rtx_insn *after)\n {\n   crtl->eh.sjlj_exit_after = after;\n }\n \n static void\n sjlj_emit_function_exit (void)\n {\n-  rtx seq, insn;\n+  rtx_insn *seq, *insn;\n \n   start_sequence ();\n \n@@ -1283,7 +1285,8 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n   enum machine_mode unwind_word_mode = targetm.unwind_word_mode ();\n   enum machine_mode filter_mode = targetm.eh_return_filter_mode ();\n   eh_landing_pad lp;\n-  rtx mem, seq, fc, before, exc_ptr_reg, filter_reg;\n+  rtx mem, fc, before, exc_ptr_reg, filter_reg;\n+  rtx_insn *seq;\n   rtx first_reachable_label;\n   basic_block bb;\n   eh_region r;\n@@ -1341,7 +1344,8 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n   for (i = 1; vec_safe_iterate (cfun->eh->lp_array, i, &lp); ++i)\n     if (lp && lp->post_landing_pad)\n       {\n-\trtx seq2, label;\n+\trtx_insn *seq2;\n+\trtx label;\n \n \tstart_sequence ();\n \n@@ -1455,7 +1459,7 @@ sjlj_build_landing_pads (void)\n   num_dispatch = sjlj_assign_call_site_values ();\n   if (num_dispatch > 0)\n     {\n-      rtx dispatch_label = gen_label_rtx ();\n+      rtx_code_label *dispatch_label = gen_label_rtx ();\n       int align = STACK_SLOT_ALIGNMENT (sjlj_fc_type_node,\n \t\t\t\t\tTYPE_MODE (sjlj_fc_type_node),\n \t\t\t\t\tTYPE_ALIGN (sjlj_fc_type_node));\n@@ -1483,7 +1487,7 @@ sjlj_build_landing_pads (void)\n \t\t\t      align);\n \n       sjlj_mark_call_sites ();\n-      sjlj_emit_function_enter (NULL_RTX);\n+      sjlj_emit_function_enter (NULL);\n       sjlj_emit_function_exit ();\n     }\n \n@@ -1950,7 +1954,7 @@ can_nonlocal_goto (const_rtx insn)\n static unsigned int\n set_nothrow_function_flags (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   crtl->nothrow = 1;\n \n@@ -2248,7 +2252,7 @@ expand_builtin_eh_return (tree stackadj_tree ATTRIBUTE_UNUSED,\n void\n expand_eh_return (void)\n {\n-  rtx around_label;\n+  rtx_code_label *around_label;\n \n   if (! crtl->eh.ehr_label)\n     return;\n@@ -2479,18 +2483,19 @@ emit_note_eh_region_end (rtx insn)\n static unsigned int\n convert_to_eh_region_ranges (void)\n {\n-  rtx insn, iter;\n+  rtx insn;\n+  rtx_insn *iter;\n   rtx_note *note;\n   action_hash_type ar_hash (31);\n   int last_action = -3;\n-  rtx last_action_insn = NULL_RTX;\n+  rtx_insn *last_action_insn = NULL;\n   rtx last_landing_pad = NULL_RTX;\n-  rtx first_no_action_insn = NULL_RTX;\n+  rtx_insn *first_no_action_insn = NULL;\n   int call_site = 0;\n   int cur_sec = 0;\n   rtx section_switch_note = NULL_RTX;\n-  rtx first_no_action_insn_before_switch = NULL_RTX;\n-  rtx last_no_action_insn_before_switch = NULL_RTX;\n+  rtx_insn *first_no_action_insn_before_switch = NULL;\n+  rtx_insn *last_no_action_insn_before_switch = NULL;\n   int saved_call_site_base = call_site_base;\n \n   vec_alloc (crtl->eh.action_record_data, 64);\n@@ -2557,8 +2562,8 @@ convert_to_eh_region_ranges (void)\n \t\tgcc_assert (last_action != -3\n \t\t\t    || (last_action_insn\n \t\t\t\t== last_no_action_insn_before_switch));\n-\t\tfirst_no_action_insn_before_switch = NULL_RTX;\n-\t\tlast_no_action_insn_before_switch = NULL_RTX;\n+\t\tfirst_no_action_insn_before_switch = NULL;\n+\t\tlast_no_action_insn_before_switch = NULL;\n \t\tcall_site_base++;\n \t      }\n \t    /* If we'd not seen a previous action (-3) or the previous\n@@ -2573,7 +2578,7 @@ convert_to_eh_region_ranges (void)\n \t\t    note = emit_note_before (NOTE_INSN_EH_REGION_BEG,\n \t\t\t\t\t     first_no_action_insn);\n \t\t    NOTE_EH_HANDLER (note) = call_site;\n-\t\t    first_no_action_insn = NULL_RTX;\n+\t\t    first_no_action_insn = NULL;\n \t\t  }\n \n \t\tnote = emit_note_eh_region_end (last_action_insn);\n@@ -2606,7 +2611,7 @@ convert_to_eh_region_ranges (void)\n \t  {\n \t    first_no_action_insn_before_switch = first_no_action_insn;\n \t    last_no_action_insn_before_switch = last_action_insn;\n-\t    first_no_action_insn = NULL_RTX;\n+\t    first_no_action_insn = NULL;\n \t    gcc_assert (last_action == -1);\n \t    last_action = -3;\n \t  }"}, {"sha": "24008e342831a0386439de81575cb650036b75a5", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b2330207cc45676d01e735248df779c82f9334/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b2330207cc45676d01e735248df779c82f9334/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=f8b2330207cc45676d01e735248df779c82f9334", "patch": "@@ -252,7 +252,7 @@ typedef tree (*duplicate_eh_regions_map) (tree, void *);\n extern hash_map<void *, void *> *duplicate_eh_regions\n   (struct function *, eh_region, int, duplicate_eh_regions_map, void *);\n \n-extern void sjlj_emit_function_exit_after (rtx);\n+extern void sjlj_emit_function_exit_after (rtx_insn *);\n \n extern eh_region gen_eh_region_cleanup (eh_region);\n extern eh_region gen_eh_region_try (eh_region);"}, {"sha": "14d1b2c926a2af528de6e287b86a70a19daae7cb", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b2330207cc45676d01e735248df779c82f9334/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b2330207cc45676d01e735248df779c82f9334/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=f8b2330207cc45676d01e735248df779c82f9334", "patch": "@@ -144,10 +144,10 @@ typedef struct call_site_record_d *call_site_record;\n struct GTY(()) rtl_eh {\n   rtx ehr_stackadj;\n   rtx ehr_handler;\n-  rtx ehr_label;\n+  rtx_code_label *ehr_label;\n \n   rtx sjlj_fc;\n-  rtx sjlj_exit_after;\n+  rtx_insn *sjlj_exit_after;\n \n   vec<uchar, va_gc> *action_record_data;\n "}]}