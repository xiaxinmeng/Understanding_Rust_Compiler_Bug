{"sha": "7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlZmRmZDVhYTI3N2ZlMDk2Y2NlOTljOWRjN2FmYjE2NjlhYjRlMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2017-01-16T11:12:57Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2017-01-16T11:12:57Z"}, "message": "Powerpc bootstrap failure due to duplicate case value\n\n\tPR target/79098\n\t* config/rs6000/rs6000.c (rs6000_legitimate_combined_insn): Don't\n\tuse a switch.\n\nFrom-SVN: r244489", "tree": {"sha": "5ad410c18aa61aab554518c9acfea81afaa7d717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ad410c18aa61aab554518c9acfea81afaa7d717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1bcd0192bf2b9adbdf0fab7ab8f245d6f68aea71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bcd0192bf2b9adbdf0fab7ab8f245d6f68aea71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bcd0192bf2b9adbdf0fab7ab8f245d6f68aea71"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "c109ca7ae7c6f5c8548f0997c9046fe63387ea7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2", "patch": "@@ -1,3 +1,9 @@\n+2017-01-16  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/79098\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_combined_insn): Don't\n+\tuse a switch.\n+\n 2017-01-16  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.h (BRANCH_COST) [reload_completed]: Increase by 4."}, {"sha": "f1d5d9d1f9d7c85262b12ebfad6c68f10884415d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7cefdfd5aa277fe096cce99c9dc7afb1669ab4e2", "patch": "@@ -9085,40 +9085,41 @@ rs6000_const_not_ok_for_debug_p (rtx x)\n static bool\n rs6000_legitimate_combined_insn (rtx_insn *insn)\n {\n-  switch (INSN_CODE (insn))\n-    {\n-      /* Reject creating doloop insns.  Combine should not be allowed\n-\t to create these for a number of reasons:\n-\t 1) In a nested loop, if combine creates one of these in an\n-\t outer loop and the register allocator happens to allocate ctr\n-\t to the outer loop insn, then the inner loop can't use ctr.\n-\t Inner loops ought to be more highly optimized.\n-\t 2) Combine often wants to create one of these from what was\n-\t originally a three insn sequence, first combining the three\n-\t insns to two, then to ctrsi/ctrdi.  When ctrsi/ctrdi is not\n-\t allocated ctr, the splitter takes use back to the three insn\n-\t sequence.  It's better to stop combine at the two insn\n-\t sequence.\n-\t 3) Faced with not being able to allocate ctr for ctrsi/crtdi\n-\t insns, the register allocator sometimes uses floating point\n-\t or vector registers for the pseudo.  Since ctrsi/ctrdi is a\n-\t jump insn and output reloads are not implemented for jumps,\n-\t the ctrsi/ctrdi splitters need to handle all possible cases.\n-\t That's a pain, and it gets to be seriously difficult when a\n-\t splitter that runs after reload needs memory to transfer from\n-\t a gpr to fpr.  See PR70098 and PR71763 which are not fixed\n-\t for the difficult case.  It's better to not create problems\n-\t in the first place.  */\n-    case CODE_FOR_ctrsi_internal1:\n-    case CODE_FOR_ctrdi_internal1:\n-    case CODE_FOR_ctrsi_internal2:\n-    case CODE_FOR_ctrdi_internal2:\n-    case CODE_FOR_ctrsi_internal3:\n-    case CODE_FOR_ctrdi_internal3:\n-    case CODE_FOR_ctrsi_internal4:\n-    case CODE_FOR_ctrdi_internal4:\n-      return false;\n-    }\n+  int icode = INSN_CODE (insn);\n+\n+  /* Reject creating doloop insns.  Combine should not be allowed\n+     to create these for a number of reasons:\n+     1) In a nested loop, if combine creates one of these in an\n+     outer loop and the register allocator happens to allocate ctr\n+     to the outer loop insn, then the inner loop can't use ctr.\n+     Inner loops ought to be more highly optimized.\n+     2) Combine often wants to create one of these from what was\n+     originally a three insn sequence, first combining the three\n+     insns to two, then to ctrsi/ctrdi.  When ctrsi/ctrdi is not\n+     allocated ctr, the splitter takes use back to the three insn\n+     sequence.  It's better to stop combine at the two insn\n+     sequence.\n+     3) Faced with not being able to allocate ctr for ctrsi/crtdi\n+     insns, the register allocator sometimes uses floating point\n+     or vector registers for the pseudo.  Since ctrsi/ctrdi is a\n+     jump insn and output reloads are not implemented for jumps,\n+     the ctrsi/ctrdi splitters need to handle all possible cases.\n+     That's a pain, and it gets to be seriously difficult when a\n+     splitter that runs after reload needs memory to transfer from\n+     a gpr to fpr.  See PR70098 and PR71763 which are not fixed\n+     for the difficult case.  It's better to not create problems\n+     in the first place.  */\n+  if (icode != CODE_FOR_nothing\n+      && (icode == CODE_FOR_ctrsi_internal1\n+\t  || icode == CODE_FOR_ctrdi_internal1\n+\t  || icode == CODE_FOR_ctrsi_internal2\n+\t  || icode == CODE_FOR_ctrdi_internal2\n+\t  || icode == CODE_FOR_ctrsi_internal3\n+\t  || icode == CODE_FOR_ctrdi_internal3\n+\t  || icode == CODE_FOR_ctrsi_internal4\n+\t  || icode == CODE_FOR_ctrdi_internal4))\n+    return false;\n+\n   return true;\n }\n "}]}