{"sha": "53605f35cddd3c353ae9f7db1aaf9565a08826ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM2MDVmMzVjZGRkM2MzNTNhZTlmN2RiMWFhZjk1NjVhMDg4MjZlYQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-06-24T21:55:40Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-06-24T21:55:40Z"}, "message": "rs6000-builtin.def (BU_FLOAT128_2): New #define.\n\n[gcc]\n\n2016-06-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def (BU_FLOAT128_2): New #define.\n\t(BU_FLOAT128_1): Likewise.\n\t(FABSQ): Likewise.\n\t(COPYSIGNQ): Likewise.\n\t(RS6000_BUILTIN_NANQ): Likewise.\n\t(RS6000_BUILTIN_NANSQ): Likewise.\n\t(RS6000_BUILTIN_INFQ): Likewise.\n\t(RS6000_BUILTIN_HUGE_VALQ): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_fold_builtin): New prototype.\n\t(TARGET_FOLD_BUILTIN): New #define.\n\t(rs6000_builtin_mask_calculate): Add TARGET_FLOAT128 entry.\n\t(rs6000_invalid_builtin): Add handling for RS6000_BTM_FLOAT128.\n\t(rs6000_fold_builtin): New target hook implementation, handling\n\tfolding of 128-bit NaNs and infinities.\n\t(rs6000_init_builtins): Initialize const_str_type_node; ensure all\n\tentries are filled in to avoid problems during bootstrap\n\tself-test; define builtins for 128-bit NaNs and infinities.\n\t(rs6000_opt_mask): Add entry for float128.\n\t* config/rs6000/rs6000.h (RS6000_BTM_FLOAT128): New #define.\n\t(RS6000_BTM_COMMON): Include RS6000_BTM_FLOAT128.\n\t(rs6000_builtin_type_index): Add RS6000_BTI_const_str.\n\t(const_str_type_node): New #define.\n\t* config/rs6000/rs6000.md (copysign<mode>3 for IEEE128): Convert\n\tto a define_expand that dispatches to either copysign<mode>3_soft\n\tor copysign<mode>3_hard.\n\t(copysign<mode>3_hard): Rename from copysign<mode>3.\n\t(copysign<mode>3_soft): New define_insn.\n\t* doc/extend.texi: Document new builtins.\n\n[gcc/testsuite]\n\n2016-06-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/abs128-1.c: New.\n\t* gcc.target/powerpc/copysign128-1.c: New.\n\t* gcc.target/powerpc/inf128-1.c: New.\n\t* gcc.target/powerpc/nan128-1.c: New.\n\nFrom-SVN: r237774", "tree": {"sha": "3e89260f0904d7fe783bd918b831130450b1f0d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e89260f0904d7fe783bd918b831130450b1f0d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53605f35cddd3c353ae9f7db1aaf9565a08826ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53605f35cddd3c353ae9f7db1aaf9565a08826ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53605f35cddd3c353ae9f7db1aaf9565a08826ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53605f35cddd3c353ae9f7db1aaf9565a08826ea/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e085858a266dfeb0b335e8cd876872c633c2634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e085858a266dfeb0b335e8cd876872c633c2634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e085858a266dfeb0b335e8cd876872c633c2634"}], "stats": {"total": 467, "additions": 464, "deletions": 3}, "files": [{"sha": "a88fd1824f780329f966f839f9c66714bee15c17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -1,3 +1,34 @@\n+2016-06-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (BU_FLOAT128_2): New #define.\n+\t(BU_FLOAT128_1): Likewise.\n+\t(FABSQ): Likewise.\n+\t(COPYSIGNQ): Likewise.\n+\t(RS6000_BUILTIN_NANQ): Likewise.\n+\t(RS6000_BUILTIN_NANSQ): Likewise.\n+\t(RS6000_BUILTIN_INFQ): Likewise.\n+\t(RS6000_BUILTIN_HUGE_VALQ): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_fold_builtin): New prototype.\n+\t(TARGET_FOLD_BUILTIN): New #define.\n+\t(rs6000_builtin_mask_calculate): Add TARGET_FLOAT128 entry.\n+\t(rs6000_invalid_builtin): Add handling for RS6000_BTM_FLOAT128.\n+\t(rs6000_fold_builtin): New target hook implementation, handling\n+\tfolding of 128-bit NaNs and infinities.\n+\t(rs6000_init_builtins): Initialize const_str_type_node; ensure all\n+\tentries are filled in to avoid problems during bootstrap\n+\tself-test; define builtins for 128-bit NaNs and infinities.\n+\t(rs6000_opt_mask): Add entry for float128.\n+\t* config/rs6000/rs6000.h (RS6000_BTM_FLOAT128): New #define.\n+\t(RS6000_BTM_COMMON): Include RS6000_BTM_FLOAT128.\n+\t(rs6000_builtin_type_index): Add RS6000_BTI_const_str.\n+\t(const_str_type_node): New #define.\n+\t* config/rs6000/rs6000.md (copysign<mode>3 for IEEE128): Convert\n+\tto a define_expand that dispatches to either copysign<mode>3_soft\n+\tor copysign<mode>3_hard.\n+\t(copysign<mode>3_hard): Rename from copysign<mode>3.\n+\t(copysign<mode>3_soft): New define_insn.\n+\t* doc/extend.texi: Document new builtins.\n+\n 2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cfgloop.c (flow_loop_dump): Cast nit to uint64_t and print it using"}, {"sha": "533f77120d3da9a1130c50b627bc91c6c772839b", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -652,6 +652,22 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* IEEE 128-bit floating-point builtins.  */\n+#define BU_FLOAT128_2(ENUM, NAME, ATTR, ICODE)                          \\\n+  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n+\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n+\t\t    RS6000_BTM_FLOAT128,                /* MASK */      \\\n+\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n+\t\t     | RS6000_BTC_BINARY),                              \\\n+\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n+\n+#define BU_FLOAT128_1(ENUM, NAME, ATTR, ICODE)                          \\\n+  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n+\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n+\t\t    RS6000_BTM_FLOAT128,                /* MASK */      \\\n+\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n+\t\t     | RS6000_BTC_UNARY),                               \\\n+\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n \n /* Miscellaneous builtins for instructions added in ISA 3.0.  These\n    instructions don't require either the DFP or VSX options, just the basic\n@@ -1814,6 +1830,11 @@ BU_P9V_OVERLOAD_1 (VPRTYBD,\t\"vprtybd\")\n BU_P9V_OVERLOAD_1 (VPRTYBQ,\t\"vprtybq\")\n BU_P9V_OVERLOAD_1 (VPRTYBW,\t\"vprtybw\")\n \n+/* 1 argument IEEE 128-bit floating-point functions.  */\n+BU_FLOAT128_1 (FABSQ,\t\t\"fabsq\",       CONST, abskf2)\n+\n+/* 2 argument IEEE 128-bit floating-point functions.  */\n+BU_FLOAT128_2 (COPYSIGNQ,\t\"copysignq\",   CONST, copysignkf3)\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox)\n@@ -2191,6 +2212,18 @@ BU_SPECIAL_X (RS6000_BUILTIN_CPU_IS, \"__builtin_cpu_is\",\n BU_SPECIAL_X (RS6000_BUILTIN_CPU_SUPPORTS, \"__builtin_cpu_supports\",\n \t      RS6000_BTM_ALWAYS, RS6000_BTC_MISC)\n \n+BU_SPECIAL_X (RS6000_BUILTIN_NANQ, \"__builtin_nanq\",\n+\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+\n+BU_SPECIAL_X (RS6000_BUILTIN_NANSQ, \"__builtin_nansq\",\n+\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+\n+BU_SPECIAL_X (RS6000_BUILTIN_INFQ, \"__builtin_infq\",\n+\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+\n+BU_SPECIAL_X (RS6000_BUILTIN_HUGE_VALQ, \"__builtin_huge_valq\",\n+\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+\n /* Darwin CfString builtin.  */\n BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n \t      RS6000_BTC_MISC)"}, {"sha": "4c239613b89c64cdb2aa3e1484a969922602728e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -1328,6 +1328,7 @@ static bool rs6000_secondary_reload_move (enum rs6000_reg_type,\n \t\t\t\t\t  bool);\n rtl_opt_pass *make_pass_analyze_swaps (gcc::context*);\n static bool rs6000_keep_leaf_when_profiled () __attribute__ ((unused));\n+static tree rs6000_fold_builtin (tree, int, tree *, bool);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -1602,6 +1603,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_BUILTIN_DECL\n #define TARGET_BUILTIN_DECL rs6000_builtin_decl\n \n+#undef TARGET_FOLD_BUILTIN\n+#define TARGET_FOLD_BUILTIN rs6000_fold_builtin\n+\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n \n@@ -3682,7 +3686,8 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n \t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n \t  | ((TARGET_HARD_FLOAT)\t    ? RS6000_BTM_HARD_FLOAT : 0)\n-\t  | ((TARGET_LONG_DOUBLE_128)\t    ? RS6000_BTM_LDBL128 : 0));\n+\t  | ((TARGET_LONG_DOUBLE_128)\t    ? RS6000_BTM_LDBL128   : 0)\n+\t  | ((TARGET_FLOAT128)\t\t    ? RS6000_BTM_FLOAT128  : 0));\n }\n \n /* Implement TARGET_MD_ASM_ADJUST.  All asm statements are considered\n@@ -15503,11 +15508,57 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n \t   \" -mlong-double-128 options\", name);\n   else if ((fnmask & RS6000_BTM_HARD_FLOAT) != 0)\n     error (\"Builtin function %s requires the -mhard-float option\", name);\n+  else if ((fnmask & RS6000_BTM_FLOAT128) != 0)\n+    error (\"Builtin function %s requires the -mfloat128 option\", name);\n   else\n     error (\"Builtin function %s is not supported with the current options\",\n \t   name);\n }\n \n+/* Target hook for early folding of built-ins, shamelessly stolen\n+   from ia64.c.  */\n+\n+static tree\n+rs6000_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n+\t\t     tree *args, bool ignore ATTRIBUTE_UNUSED)\n+{\n+  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n+    {\n+      enum rs6000_builtins fn_code\n+\t= (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n+      switch (fn_code)\n+\t{\n+\tcase RS6000_BUILTIN_NANQ:\n+\tcase RS6000_BUILTIN_NANSQ:\n+\t  {\n+\t    tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\t    const char *str = c_getstr (*args);\n+\t    int quiet = fn_code == RS6000_BUILTIN_NANQ;\n+\t    REAL_VALUE_TYPE real;\n+\n+\t    if (str && real_nan (&real, str, quiet, TYPE_MODE (type)))\n+\t      return build_real (type, real);\n+\t    return NULL_TREE;\n+\t  }\n+\tcase RS6000_BUILTIN_INFQ:\n+\tcase RS6000_BUILTIN_HUGE_VALQ:\n+\t  {\n+\t    tree type = TREE_TYPE (TREE_TYPE (fndecl));\n+\t    REAL_VALUE_TYPE inf;\n+\t    real_inf (&inf);\n+\t    return build_real (type, inf);\n+\t  }\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+#ifdef SUBTARGET_FOLD_BUILTIN\n+  return SUBTARGET_FOLD_BUILTIN (fndecl, n_args, args, ignore);\n+#else\n+  return NULL_TREE;\n+#endif\n+}\n+\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -15762,6 +15813,10 @@ rs6000_init_builtins (void)\n   opaque_p_V2SI_type_node = build_pointer_type (opaque_V2SI_type_node);\n   opaque_V4SI_type_node = build_opaque_vector_type (intSI_type_node, 4);\n \n+  const_str_type_node\n+    = build_pointer_type (build_qualified_type (char_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_CONST));\n+\n   /* We use V1TI mode as a special container to hold __int128_t items that\n      must live in VSX registers.  */\n   if (intTI_type_node)\n@@ -15824,6 +15879,12 @@ rs6000_init_builtins (void)\n       lang_hooks.types.register_builtin_type (ibm128_float_type_node,\n \t\t\t\t\t      \"__ibm128\");\n     }\n+  else\n+    {\n+      /* All types must be nonzero, or self-test barfs during bootstrap.  */\n+      ieee128_float_type_node = long_double_type_node;\n+      ibm128_float_type_node = long_double_type_node;\n+    }\n \n   /* Initialize the modes for builtin_function_type, mapping a machine mode to\n      tree type node.  */\n@@ -15965,6 +16026,15 @@ rs6000_init_builtins (void)\n   if (TARGET_EXTRA_BUILTINS || TARGET_SPE || TARGET_PAIRED_FLOAT)\n     rs6000_common_init_builtins ();\n \n+  ftype = build_function_type_list (ieee128_float_type_node,\n+\t\t\t\t    const_str_type_node, NULL_TREE);\n+  def_builtin (\"__builtin_nanq\", ftype, RS6000_BUILTIN_NANQ);\n+  def_builtin (\"__builtin_nansq\", ftype, RS6000_BUILTIN_NANSQ);\n+\n+  ftype = build_function_type_list (ieee128_float_type_node, NULL_TREE);\n+  def_builtin (\"__builtin_infq\", ftype, RS6000_BUILTIN_INFQ);\n+  def_builtin (\"__builtin_huge_valq\", ftype, RS6000_BUILTIN_HUGE_VALQ);\n+\n   ftype = builtin_function_type (DFmode, DFmode, DFmode, VOIDmode,\n \t\t\t\t RS6000_BUILTIN_RECIP, \"__builtin_recipdiv\");\n   def_builtin (\"__builtin_recipdiv\", ftype, RS6000_BUILTIN_RECIP);\n@@ -35562,6 +35632,7 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"hard-dfp\",\t\t RS6000_BTM_DFP,\tfalse, false },\n   { \"hard-float\",\t RS6000_BTM_HARD_FLOAT,\tfalse, false },\n   { \"long-double-128\",\t RS6000_BTM_LDBL128,\tfalse, false },\n+  { \"float128\",\t\t RS6000_BTM_FLOAT128,   false, false },\n };\n \n /* Option variables that we want to support inside attribute((target)) and"}, {"sha": "604d560718d4b2e2ea78606a3f1929a836943f17", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -2709,6 +2709,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_HARD_FLOAT\tMASK_SOFT_FLOAT\t/* Hardware floating point.  */\n #define RS6000_BTM_LDBL128\tMASK_MULTIPLE\t/* 128-bit long double.  */\n #define RS6000_BTM_64BIT\tMASK_64BIT\t/* 64-bit addressing.  */\n+#define RS6000_BTM_FLOAT128\tMASK_P9_VECTOR\t/* IEEE 128-bit float.  */\n \n #define RS6000_BTM_COMMON\t(RS6000_BTM_ALTIVEC\t\t\t\\\n \t\t\t\t | RS6000_BTM_VSX\t\t\t\\\n@@ -2725,7 +2726,8 @@ extern int frame_pointer_needed;\n \t\t\t\t | RS6000_BTM_CELL\t\t\t\\\n \t\t\t\t | RS6000_BTM_DFP\t\t\t\\\n \t\t\t\t | RS6000_BTM_HARD_FLOAT\t\t\\\n-\t\t\t\t | RS6000_BTM_LDBL128)\n+\t\t\t\t | RS6000_BTM_LDBL128\t\t\t\\\n+\t\t\t\t | RS6000_BTM_FLOAT128)\n \n /* Define builtin enum index.  */\n \n@@ -2829,6 +2831,7 @@ enum rs6000_builtin_type_index\n   RS6000_BTI_void,\t         /* void_type_node */\n   RS6000_BTI_ieee128_float,\t /* ieee 128-bit floating point */\n   RS6000_BTI_ibm128_float,\t /* IBM 128-bit floating point */\n+  RS6000_BTI_const_str,\t\t /* pointer to const char * */\n   RS6000_BTI_MAX\n };\n \n@@ -2885,6 +2888,7 @@ enum rs6000_builtin_type_index\n #define void_type_internal_node\t\t (rs6000_builtin_types[RS6000_BTI_void])\n #define ieee128_float_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ieee128_float])\n #define ibm128_float_type_node\t\t (rs6000_builtin_types[RS6000_BTI_ibm128_float])\n+#define const_str_type_node\t\t (rs6000_builtin_types[RS6000_BTI_const_str])\n \n extern GTY(()) tree rs6000_builtin_types[RS6000_BTI_MAX];\n extern GTY(()) tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];"}, {"sha": "5a5635ab245215a5b6c5fe7f6f1a351e2011651c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -13326,7 +13326,25 @@\n    \"xssqrtqp %0,%1\"\n   [(set_attr \"type\" \"vecdiv\")])\n \n-(define_insn \"copysign<mode>3\"\n+(define_expand \"copysign<mode>3\"\n+  [(use (match_operand:IEEE128 0 \"altivec_register_operand\"))\n+   (use (match_operand:IEEE128 1 \"altivec_register_operand\"))\n+   (use (match_operand:IEEE128 2 \"altivec_register_operand\"))]\n+  \"FLOAT128_IEEE_P (<MODE>mode)\"\n+{\n+  if (TARGET_FLOAT128_HW)\n+    emit_insn (gen_copysign<mode>3_hard (operands[0], operands[1],\n+\t\t\t\t\t operands[2]));\n+  else\n+    {\n+      rtx tmp = gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_copysign<mode>3_soft (operands[0], operands[1],\n+\t\t\t\t\t   operands[2], tmp));\n+    }\n+  DONE;\n+})\n+\n+(define_insn \"copysign<mode>3_hard\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n \t(unspec:IEEE128\n \t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n@@ -13336,6 +13354,18 @@\n    \"xscpsgnqp %0,%2,%1\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"copysign<mode>3_soft\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:IEEE128 3 \"altivec_register_operand\" \"+v\")]\n+\t UNSPEC_COPYSIGN))]\n+  \"!TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+   \"xscpsgndp %x3,%x2,%x1\\;xxpermdi %x0,%x3,%x1,1\"\n+  [(set_attr \"type\" \"veccomplex\")\n+   (set_attr \"length\" \"8\")])\n+\n (define_insn \"neg<mode>2_hw\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n \t(neg:IEEE128"}, {"sha": "9c8ea8374562915d48a3365e51802dd7c1fdf038", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -14782,6 +14782,40 @@ The @code{__builtin_ppc_mftb} function always generates one instruction and\n returns the Time Base Register value as an unsigned long, throwing away\n the most significant word on 32-bit environments.\n \n+Additional built-in functions are available for the 64-bit PowerPC\n+family of processors, for efficient use of 128-bit floating point\n+(@code{__float128}) values.\n+\n+The following floating-point built-in functions are available with\n+@code{-mfloat128} and Altivec support.  All of them implement the\n+function that is part of the name.\n+\n+@smallexample\n+__float128 __builtin_fabsq (__float128)\n+__float128 __builtin_copysignq (__float128, __float128)\n+@end smallexample\n+\n+The following built-in functions are available with @code{-mfloat128}\n+and Altivec support.\n+\n+@table @code\n+@item __float128 __builtin_infq (void)\n+Similar to @code{__builtin_inf}, except the return type is @code{__float128}.\n+@findex __builtin_infq\n+\n+@item __float128 __builtin_huge_valq (void)\n+Similar to @code{__builtin_huge_val}, except the return type is @code{__float128}.\n+@findex __builtin_huge_valq\n+\n+@item __float128 __builtin_nanq (void)\n+Similar to @code{__builtin_nan}, except the return type is @code{__float128}.\n+@findex __builtin_nanq\n+\n+@item __float128 __builtin_nansq (void)\n+Similar to @code{__builtin_nans}, except the return type is @code{__float128}.\n+@findex __builtin_nansq\n+@end table\n+\n The following built-in functions are available for the PowerPC family\n of processors, starting with ISA 2.06 or later (@option{-mcpu=power7}\n or @option{-mpopcntd}):"}, {"sha": "f373b0e27745b7195a98f9c62acc558b93f936d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -1,3 +1,10 @@\n+2016-06-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/abs128-1.c: New.\n+\t* gcc.target/powerpc/copysign128-1.c: New.\n+\t* gcc.target/powerpc/inf128-1.c: New.\n+\t* gcc.target/powerpc/nan128-1.c: New.\n+\n 2016-06-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gfortran.dg/pr71642.f90: New test."}, {"sha": "e4b0c291e855eff669a413fd82c848c476b42247", "filename": "gcc/testsuite/gcc.target/powerpc/abs128-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fabs128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fabs128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fabs128-1.c?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target { powerpc64*-*-* && vmx_hw } } } */\n+/* { dg-options \"-mfloat128\" } */\n+\n+void abort ();\n+\n+typedef unsigned long long int uint64_t;\n+\n+typedef union\n+{\n+  __float128 value;\n+\n+  struct\n+  {\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+    unsigned negative:1;\n+    unsigned exponent:15;\n+    unsigned quiet_nan:1;\n+    uint64_t mant_high:47;\n+    uint64_t mant_low:64;\n+#else\n+    uint64_t mant_low:64;\n+    uint64_t mant_high:47;\n+    unsigned quiet_nan:1;\n+    unsigned exponent:15;\n+    unsigned negative:1;\n+#endif\n+  } nan;\n+\n+} ieee854_float128;\n+\n+int\n+main (int argc, int *argv[])\n+{\n+  ieee854_float128 x, z;\n+\n+  x.nan.negative = 1;\n+  x.nan.exponent = 0x22;\n+  x.nan.quiet_nan = 0;\n+  x.nan.mant_high = 0x1234;\n+  x.nan.mant_low = 0xabcdef;\n+\n+  z.value = __builtin_fabsq (x.value);\n+\n+  if (z.nan.negative != 0\n+      || z.nan.exponent != 0x22\n+      || z.nan.quiet_nan != 0\n+      || z.nan.mant_high != 0x1234\n+      || z.nan.mant_low != 0xabcdef)\n+    abort ();\n+\n+  z.value = __builtin_fabsq (z.value);\n+\n+  if (z.nan.negative != 0\n+      || z.nan.exponent != 0x22\n+      || z.nan.quiet_nan != 0\n+      || z.nan.mant_high != 0x1234\n+      || z.nan.mant_low != 0xabcdef)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0d7b7e546fbeb24c6a4f7eaf5815c06f1bf55fe2", "filename": "gcc/testsuite/gcc.target/powerpc/copysign128-1.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcopysign128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcopysign128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcopysign128-1.c?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target { powerpc64*-*-* && vmx_hw } } } */\n+/* { dg-options \"-mfloat128\" } */\n+\n+void abort ();\n+\n+typedef unsigned long long int uint64_t;\n+\n+typedef union\n+{\n+  __float128 value;\n+\n+  struct\n+  {\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+    unsigned negative:1;\n+    unsigned exponent:15;\n+    unsigned quiet_nan:1;\n+    uint64_t mant_high:47;\n+    uint64_t mant_low:64;\n+#else\n+    uint64_t mant_low:64;\n+    uint64_t mant_high:47;\n+    unsigned quiet_nan:1;\n+    unsigned exponent:15;\n+    unsigned negative:1;\n+#endif\n+  } nan;\n+\n+} ieee854_float128;\n+\n+int\n+main (int argc, int *argv[])\n+{\n+  ieee854_float128 x, y, z;\n+\n+  x.nan.negative = 0;\n+  x.nan.exponent = 0x22;\n+  x.nan.quiet_nan = 0;\n+  x.nan.mant_high = 0x1234;\n+  x.nan.mant_low = 0xabcdef;\n+\n+  y.nan.negative = 1;\n+  y.nan.exponent = 0;\n+  y.nan.quiet_nan = 0;\n+  y.nan.mant_high = 0;\n+  y.nan.mant_low = 0;\n+\n+  z.value = __builtin_copysignq (x.value, y.value);\n+\n+  if (z.nan.negative != 1\n+      || z.nan.exponent != 0x22\n+      || z.nan.quiet_nan != 0\n+      || z.nan.mant_high != 0x1234\n+      || z.nan.mant_low != 0xabcdef)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "b8df25ba82e18cc274761252f577bb257ac75004", "filename": "gcc/testsuite/gcc.target/powerpc/inf128-1.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Finf128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Finf128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Finf128-1.c?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run { target { powerpc64*-*-* && vmx_hw } } } */\n+/* { dg-options \"-mfloat128\" } */\n+\n+void abort ();\n+\n+typedef unsigned long long int uint64_t;\n+\n+typedef union\n+{\n+  __float128 value;\n+\n+  struct\n+  {\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+    unsigned negative:1;\n+    unsigned exponent:15;\n+    unsigned quiet_nan:1;\n+    uint64_t mant_high:47;\n+    uint64_t mant_low:64;\n+#else\n+    uint64_t mant_low:64;\n+    uint64_t mant_high:47;\n+    unsigned quiet_nan:1;\n+    unsigned exponent:15;\n+    unsigned negative:1;\n+#endif\n+  } nan;\n+\n+} ieee854_float128;\n+\n+int\n+main (int argc, int *argv[])\n+{\n+  ieee854_float128 y;\n+\n+  y.value = __builtin_infq ();\n+\n+  if (y.nan.negative != 0\n+      || y.nan.exponent != 0x7fff\n+      || y.nan.quiet_nan != 0\n+      || y.nan.mant_high != 0\n+      || y.nan.mant_low != 0)\n+    abort ();\n+\n+  y.value = __builtin_huge_valq ();\n+\n+  if (y.nan.negative != 0\n+      || y.nan.exponent != 0x7fff\n+      || y.nan.quiet_nan != 0\n+      || y.nan.mant_high != 0\n+      || y.nan.mant_low != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6fc00ecade0321cc3be042f9dc32c69c95202ca3", "filename": "gcc/testsuite/gcc.target/powerpc/nan128-1.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fnan128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53605f35cddd3c353ae9f7db1aaf9565a08826ea/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fnan128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fnan128-1.c?ref=53605f35cddd3c353ae9f7db1aaf9565a08826ea", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target { powerpc64*-*-* && vmx_hw } } } */\n+/* { dg-options \"-mfloat128\" } */\n+\n+#include <stdio.h>\n+\n+void abort ();\n+\n+typedef unsigned long long int uint64_t;\n+\n+typedef union\n+{\n+  __float128 value;\n+\n+  struct\n+  {\n+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+    unsigned negative:1;\n+    unsigned exponent:15;\n+    unsigned quiet_nan:1;\n+    uint64_t mant_high:47;\n+    uint64_t mant_low:64;\n+#else\n+    uint64_t mant_low:64;\n+    uint64_t mant_high:47;\n+    unsigned quiet_nan:1;\n+    unsigned exponent:15;\n+    unsigned negative:1;\n+#endif\n+  } nan;\n+\n+} ieee854_float128;\n+\n+int\n+main (int argc, int *argv[])\n+{\n+  ieee854_float128 y;\n+\n+  y.value = __builtin_nanq (\"1\");\n+\n+  if (y.nan.negative != 0\n+      || y.nan.exponent != 0x7fff\n+      || y.nan.quiet_nan != 1\n+      || y.nan.mant_high != 0\n+      || y.nan.mant_low != 1)\n+    abort ();\n+\n+  y.value = __builtin_nanq (\"0x2ab3c\");\n+\n+  if (y.nan.negative != 0\n+      || y.nan.exponent != 0x7fff\n+      || y.nan.quiet_nan != 1\n+      || y.nan.mant_high != 0\n+      || y.nan.mant_low != 0x2ab3c)\n+    abort ();\n+\n+  y.value = __builtin_nansq (\"1\");\n+\n+  if (\n+      y.nan.negative != 0\n+      || y.nan.exponent != 0x7fff\n+      || y.nan.quiet_nan != 0\n+      || y.nan.mant_high != 0\n+      || y.nan.mant_low != 1\n+      )\n+    abort ();\n+\n+  y.value = __builtin_nansq (\"0x2ab3c\");\n+\n+  if (y.nan.negative != 0\n+      || y.nan.exponent != 0x7fff\n+      || y.nan.quiet_nan != 0\n+      || y.nan.mant_high != 0\n+      || y.nan.mant_low != 0x2ab3c)\n+    abort ();\n+\n+  return 0;\n+}"}]}