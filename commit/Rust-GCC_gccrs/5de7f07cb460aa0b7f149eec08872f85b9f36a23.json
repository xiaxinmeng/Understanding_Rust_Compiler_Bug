{"sha": "5de7f07cb460aa0b7f149eec08872f85b9f36a23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlN2YwN2NiNDYwYWEwYjdmMTQ5ZWVjMDg4NzJmODViOWYzNmEyMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-07-14T05:50:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-14T05:50:06Z"}, "message": "target-supports.exp (check_effective_target_vect_aligned_arrays): New procedure to check if arrays are naturally aligned to the vector alignment...\n\n        * lib/target-supports.exp (check_effective_target_vect_aligned_arrays):\n        New procedure to check if arrays are naturally aligned to the vector\n        alignment boundary.\n        * gcc.dg/vect/pr25413a.c: Do not include stdarg.h.  Use __SIZE_TYPE__\n        in size_t typedef.  Adjust tree dump scan results according to\n        vect_aligned_arrays target check.\n        * gcc.dg/vect/pr25413.c: Adjust tree dump scan results according to\n        vect_aligned_arrays target check.\n        * gcc.dg/vect/pr31699.c: Ditto.\n\nFrom-SVN: r126636", "tree": {"sha": "cd0a7e94f83630d0ea64e01a97e6f591bfea68bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd0a7e94f83630d0ea64e01a97e6f591bfea68bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5de7f07cb460aa0b7f149eec08872f85b9f36a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de7f07cb460aa0b7f149eec08872f85b9f36a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de7f07cb460aa0b7f149eec08872f85b9f36a23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de7f07cb460aa0b7f149eec08872f85b9f36a23/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6343c8d29b3cafa776d70a9239d893da574cbe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6343c8d29b3cafa776d70a9239d893da574cbe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6343c8d29b3cafa776d70a9239d893da574cbe4"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "f84bffc47e67f888158da6f583bddcd6e39c8aaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5de7f07cb460aa0b7f149eec08872f85b9f36a23", "patch": "@@ -1,3 +1,15 @@\n+2007-07-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_aligned_arrays):\n+\tNew procedure to check if arrays are naturally aligned to the vector\n+\talignment boundary.\n+\t* gcc.dg/vect/pr25413a.c: Do not include stdarg.h.  Use __SIZE_TYPE__\n+\tin size_t typedef.  Adjust tree dump scan results according to\n+\tvect_aligned_arrays target check.\n+\t* gcc.dg/vect/pr25413.c: Adjust tree dump scan results according to\n+\tvect_aligned_arrays target check.\n+\t* gcc.dg/vect/pr31699.c: Ditto.\n+\n 2007-07-13  Sa Liu  <saliu@de.ibm.com>\n \n \t* gcc.dg/vect/fast-math-vect-reduc-7.c: Switch on test"}, {"sha": "744472518ebfef6fbe8d381c739c82088895b7a1", "filename": "gcc/testsuite/gcc.dg/vect/pr25413.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413.c?ref=5de7f07cb460aa0b7f149eec08872f85b9f36a23", "patch": "@@ -31,7 +31,8 @@ int main (void)\n   return 0;\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"not vectorized: unsupported unaligned store\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_aligned_arrays } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_aligned_arrays } } } } */\n+/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" { target { ! vect_aligned_arrays } } } } */\n+/* { dg-final { scan-tree-dump-times \"not vectorized: unsupported unaligned store\" 1 \"vect\" { target { ! vect_aligned_arrays } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "89291c6dc3059dd5736dbd52d04d693d13ac4a31", "filename": "gcc/testsuite/gcc.dg/vect/pr25413a.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr25413a.c?ref=5de7f07cb460aa0b7f149eec08872f85b9f36a23", "patch": "@@ -1,13 +1,13 @@\n /* { dg-require-effective-target vect_double } */\n \n-#include <stdarg.h>\n #include \"tree-vect.h\"\n \n #define N 8\n \n-typedef unsigned int size_t;\n+typedef __SIZE_TYPE__ size_t;\n \n-extern void *malloc (size_t __size) __attribute__ ((__nothrow__)) __attribute__ ((__malloc__));\n+extern void *malloc (size_t __size) __attribute__ ((__nothrow__,\n+\t\t\t\t\t\t    __malloc__));\n \n typedef double num_t;\n static const num_t num__infty = ((num_t)1.0)/((num_t)0.0);\n@@ -124,6 +124,6 @@ int main (void)\n } \n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" { target { ! vect_aligned_arrays  } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { ! vect_aligned_arrays } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d1e396ed7dc6d5f8be8986ba1293c7550616b234", "filename": "gcc/testsuite/gcc.dg/vect/pr31699.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr31699.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr31699.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr31699.c?ref=5de7f07cb460aa0b7f149eec08872f85b9f36a23", "patch": "@@ -31,6 +31,6 @@ int main()\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target vect_intfloat_cvt } } } */\n-/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vector alignment may not be reachable\" 1 \"vect\" { target { ! vect_aligned_arrays } } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" { target { ! vect_aligned_arrays } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "212995b949cb5571ab8aa35ce1d57b2990c148e6", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de7f07cb460aa0b7f149eec08872f85b9f36a23/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5de7f07cb460aa0b7f149eec08872f85b9f36a23", "patch": "@@ -2010,6 +2010,27 @@ proc check_effective_target_vect_no_align { } {\n     return $et_vect_no_align_saved\n }\n \n+# Return 1 if arrays are naturally aligned to the vector\n+# alignment boundary, 0 otherwise.\n+#\n+# This won't change for different subtargets so cache the result.\n+\n+proc check_effective_target_vect_aligned_arrays { } {\n+    global et_vect_aligned_arrays\n+\n+    if [info exists et_vect_aligned_arrays_saved] {\n+\tverbose \"check_effective_target_vect_aligned_arrays: using cached result\" 2\n+    } else {\n+\tset et_vect_aligned_arrays_saved 0\n+\tif { ([istarget x86_64-*-*]\n+\t      || [istarget i?86-*-*]) && [is-effective-target lp64] } {\n+\t    set et_vect_aligned_arrays_saved 1\n+\t}\n+    }\n+    verbose \"check_effective_target_vect_aligned_arrays: returning $et_vect_aligned_arrays_saved\" 2\n+    return $et_vect_aligned_arrays_saved\n+}\n+\n # Return 1 if the target supports vector conditional operations, 0 otherwise.\n \n proc check_effective_target_vect_condition { } {"}]}