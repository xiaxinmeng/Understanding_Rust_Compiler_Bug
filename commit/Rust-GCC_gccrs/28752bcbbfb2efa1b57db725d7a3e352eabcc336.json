{"sha": "28752bcbbfb2efa1b57db725d7a3e352eabcc336", "node_id": "C_kwDOANBUbNoAKDI4NzUyYmNiYmZiMmVmYTFiNTdkYjcyNWQ3YTNlMzUyZWFiY2MzMzY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T15:52:15Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-02-03T15:52:15Z"}, "message": "libstdc++: Implement ranges::iota from P2440R1\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h (out_value_result): Define.\n\t(iota_result): Define.\n\t(__iota_fn, iota): Define.\n\t* testsuite/25_algorithms/iota/1.cc: New test.", "tree": {"sha": "8981ecf930add5bc6243de5911decda553dca98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8981ecf930add5bc6243de5911decda553dca98d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28752bcbbfb2efa1b57db725d7a3e352eabcc336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28752bcbbfb2efa1b57db725d7a3e352eabcc336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28752bcbbfb2efa1b57db725d7a3e352eabcc336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28752bcbbfb2efa1b57db725d7a3e352eabcc336/comments", "author": null, "committer": null, "parents": [{"sha": "6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6716822c541bfd5e4bb91a39c0cb2c85b70f83de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6716822c541bfd5e4bb91a39c0cb2c85b70f83de"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "8f9e1f8bcc39a3428ff2a631bd6d416714907c16", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28752bcbbfb2efa1b57db725d7a3e352eabcc336/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28752bcbbfb2efa1b57db725d7a3e352eabcc336/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=28752bcbbfb2efa1b57db725d7a3e352eabcc336", "patch": "@@ -3517,6 +3517,54 @@ namespace ranges\n   };\n \n   inline constexpr __contains_subrange_fn contains_subrange{};\n+\n+  template<typename _Out, typename _Tp>\n+    struct out_value_result\n+    {\n+      [[no_unique_address]] _Out out;\n+      [[no_unique_address]] _Tp value;\n+\n+      template<typename _Out2, typename _Tp2>\n+\trequires convertible_to<const _Out&, _Out2>\n+\t  && convertible_to<const _Tp&, _Tp2>\n+\tconstexpr\n+\toperator out_value_result<_Out2, _Tp2>() const &\n+\t{ return {out, value}; }\n+\n+      template<typename _Out2, typename _Tp2>\n+\trequires convertible_to<_Out, _Out2>\n+\t  && convertible_to<_Tp, _Tp2>\n+\tconstexpr\n+\toperator out_value_result<_Out2, _Tp2>() &&\n+\t{ return {std::move(out), std::move(value)}; }\n+    };\n+\n+  template<typename _Out, typename _Tp>\n+    using iota_result = out_value_result<_Out, _Tp>;\n+\n+  struct __iota_fn\n+  {\n+    template<input_or_output_iterator _Out, sentinel_for<_Out> _Sent, weakly_incrementable _Tp>\n+      requires indirectly_writable<_Out, const _Tp&>\n+      constexpr iota_result<_Out, _Tp>\n+      operator()(_Out __first, _Sent __last, _Tp __value) const\n+      {\n+\twhile (__first != __last)\n+\t  {\n+\t    *__first = static_cast<const _Tp&>(__value);\n+\t    ++__first;\n+\t    ++__value;\n+\t  }\n+\treturn {std::move(__first), std::move(__value)};\n+      }\n+\n+    template<weakly_incrementable _Tp, output_range<const _Tp&> _Range>\n+      constexpr iota_result<borrowed_iterator_t<_Range>, _Tp>\n+      operator()(_Range&& __r, _Tp __value) const\n+      { return (*this)(ranges::begin(__r), ranges::end(__r), std::move(__value)); }\n+  };\n+\n+  inline constexpr __iota_fn iota{};\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "ad2bf08adf5704ca6662cf0f76d3b1de91694a65", "filename": "libstdc++-v3/testsuite/25_algorithms/iota/1.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28752bcbbfb2efa1b57db725d7a3e352eabcc336/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiota%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28752bcbbfb2efa1b57db725d7a3e352eabcc336/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiota%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fiota%2F1.cc?ref=28752bcbbfb2efa1b57db725d7a3e352eabcc336", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+\n+void\n+test01()\n+{\n+  int x[3] = {};\n+  __gnu_test::test_output_range<int> rx(x);\n+  auto r0 = ranges::iota(rx, 0);\n+  VERIFY( r0.out.ptr == x+3 );\n+  VERIFY( r0.value == 3 );\n+  VERIFY( ranges::equal(x, (int[]){0,1,2}) );\n+  auto r1 = ranges::iota(x, x+2, 5);\n+  VERIFY( r1.out == x+2 );\n+  VERIFY( r1.value == 7 );\n+  VERIFY( ranges::equal(x, (int[]){5,6,2}) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}