{"sha": "ee61ea3844e8deee83cee22e037b15339f823171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2MWVhMzg0NGU4ZGVlZTgzY2VlMjJlMDM3YjE1MzM5ZjgyMzE3MQ==", "commit": {"author": {"name": "David Holsgrove", "email": "david.holsgrove@xilinx.com", "date": "2013-03-05T19:34:25Z"}, "committer": {"name": "Michael Eager", "email": "eager@gcc.gnu.org", "date": "2013-03-05T19:34:25Z"}, "message": "Add fast interrupt.\n\n\t*  config/microblaze/microblaze-protos.h: Rename\n\tmicroblaze_is_interrupt_handler to microblaze_is_interrupt_variant.\n\t*  config/microblaze/microblaze.c (microblaze_attribute_table): Add\n\tfast_interrupt.\n\t(microblaze_fast_interrupt_function_p): New function.\n\t(microblaze_is_interrupt_handler): Rename to\n\tmicroblaze_is_interrupt_variant and add fast_interrupt check.\n\t(microblaze_must_save_register): Use microblaze_is_interrupt_variant.\n\t(save_restore_insns): Likewise.\n\t(compute_frame_size): Likewise.\n\t(microblaze_function_prologue): Add FAST_INTERRUPT_NAME.\n\t(microblaze_globalize_label): Likewise.\n\t*  config/microblaze/microblaze.h: Define FAST_INTERRUPT_NAME.\n\t*  config/microblaze/microblaze.md: Use wrapper\n\tmicroblaze_is_interrupt_variant.\n\nFrom-SVN: r196474", "tree": {"sha": "c4a63e2bb0be3c0472bbea65f4a0a3f85051f9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a63e2bb0be3c0472bbea65f4a0a3f85051f9be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee61ea3844e8deee83cee22e037b15339f823171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee61ea3844e8deee83cee22e037b15339f823171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee61ea3844e8deee83cee22e037b15339f823171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee61ea3844e8deee83cee22e037b15339f823171/comments", "author": {"login": "davidholsgrove", "id": 4031547, "node_id": "MDQ6VXNlcjQwMzE1NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4031547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidholsgrove", "html_url": "https://github.com/davidholsgrove", "followers_url": "https://api.github.com/users/davidholsgrove/followers", "following_url": "https://api.github.com/users/davidholsgrove/following{/other_user}", "gists_url": "https://api.github.com/users/davidholsgrove/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidholsgrove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidholsgrove/subscriptions", "organizations_url": "https://api.github.com/users/davidholsgrove/orgs", "repos_url": "https://api.github.com/users/davidholsgrove/repos", "events_url": "https://api.github.com/users/davidholsgrove/events{/privacy}", "received_events_url": "https://api.github.com/users/davidholsgrove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "887a780fb659d2e71fc8cd3db5ff911f15423326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887a780fb659d2e71fc8cd3db5ff911f15423326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887a780fb659d2e71fc8cd3db5ff911f15423326"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "453c57b042fb1a8df73e619e04438bbcb9b80789", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee61ea3844e8deee83cee22e037b15339f823171", "patch": "@@ -1,3 +1,21 @@\n+2013-03-05  David Holsgrove <david.holsgrove@xilinx.com>\n+\n+\t*  config/microblaze/microblaze-protos.h: Rename\n+\tmicroblaze_is_interrupt_handler to microblaze_is_interrupt_variant.\n+\t*  config/microblaze/microblaze.c (microblaze_attribute_table): Add\n+\tfast_interrupt.\n+\t(microblaze_fast_interrupt_function_p): New function.\n+\t(microblaze_is_interrupt_handler): Rename to\n+\tmicroblaze_is_interrupt_variant and add fast_interrupt check.\n+\t(microblaze_must_save_register): Use microblaze_is_interrupt_variant.\n+\t(save_restore_insns): Likewise.\n+\t(compute_frame_size): Likewise.\n+\t(microblaze_function_prologue): Add FAST_INTERRUPT_NAME.\n+\t(microblaze_globalize_label): Likewise.\n+\t*  config/microblaze/microblaze.h: Define FAST_INTERRUPT_NAME.\n+\t*  config/microblaze/microblaze.md: Use wrapper\n+\tmicroblaze_is_interrupt_variant.\n+\n 2013-03-05  Kai Tietz  <ktietz@redhat.com>\n \n \t* sdbout.c (sdbout_one_type): Switch to current function's section"}, {"sha": "e19939f0930757bc56eef8dcff35d167504c99c9", "filename": "gcc/config/microblaze/microblaze-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze-protos.h?ref=ee61ea3844e8deee83cee22e037b15339f823171", "patch": "@@ -39,7 +39,7 @@ extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n extern void init_cumulative_args (CUMULATIVE_ARGS *,tree, rtx);\n extern bool microblaze_legitimate_address_p (enum machine_mode, rtx, bool);\n-extern int microblaze_is_interrupt_handler (void);\n+extern int microblaze_is_interrupt_variant (void);\n extern rtx microblaze_return_addr (int, rtx);\n extern int simple_memory_operand (rtx, enum machine_mode);\n extern int double_memory_operand (rtx, enum machine_mode);"}, {"sha": "3a5299410b9651119fe86f9ab88e24f6162a162e", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=ee61ea3844e8deee83cee22e037b15339f823171", "patch": "@@ -195,13 +195,16 @@ enum reg_class microblaze_regno_to_class[] =\n \t\t       and epilogue and use appropriate interrupt return.\n    save_volatiles    - Similar to interrupt handler, but use normal return.  */\n int interrupt_handler;\n+int fast_interrupt;\n int save_volatiles;\n \n const struct attribute_spec microblaze_attribute_table[] = {\n   /* name         min_len, max_len, decl_req, type_req, fn_type, req_handler,\n      affects_type_identity */\n   {\"interrupt_handler\", 0,       0,     true,    false,   false,        NULL,\n     false },\n+  {\"fast_interrupt\",    0,       0,     true,    false,   false,        NULL,\n+    false },\n   {\"save_volatiles\"   , 0,       0,     true,    false,   false,        NULL,\n     false },\n   { NULL,        \t0,       0,    false,    false,   false,        NULL,\n@@ -1506,6 +1509,18 @@ microblaze_interrupt_function_p (tree func)\n   return a != NULL_TREE;\n }\n \n+static int\n+microblaze_fast_interrupt_function_p (tree func)\n+{\n+  tree a;\n+\n+  if (TREE_CODE (func) != FUNCTION_DECL)\n+    return 0;\n+\n+  a = lookup_attribute (\"fast_interrupt\", DECL_ATTRIBUTES (func));\n+  return a != NULL_TREE;\n+}\n+\n /* Return true if FUNC is an interrupt function which uses\n    normal return, indicated by the \"save_volatiles\" attribute.  */\n \n@@ -1522,12 +1537,13 @@ microblaze_save_volatiles (tree func)\n }\n \n /* Return whether function is tagged with 'interrupt_handler'\n-   attribute.  Return true if function should use return from\n-   interrupt rather than normal function return.  */\n+   or 'fast_interrupt' attribute.  Return true if function\n+   should use return from interrupt rather than normal\n+   function return.  */\n int\n-microblaze_is_interrupt_handler (void)\n+microblaze_is_interrupt_variant (void)\n {\n-  return interrupt_handler;\n+  return (interrupt_handler || fast_interrupt);\n }\n \n /* Determine of register must be saved/restored in call.  */\n@@ -1548,17 +1564,18 @@ microblaze_must_save_register (int regno)\n     {\n       if (regno == MB_ABI_SUB_RETURN_ADDR_REGNUM)\n \treturn 1;\n-      if ((interrupt_handler || save_volatiles) &&\n+      if ((microblaze_is_interrupt_variant () || save_volatiles) &&\n \t  (regno >= 3 && regno <= 12))\n \treturn 1;\n     }\n \n-  if (interrupt_handler)\n+  if (microblaze_is_interrupt_variant ())\n     {\n       if (df_regs_ever_live_p (regno) \n \t  || regno == MB_ABI_MSR_SAVE_REG\n-\t  || regno == MB_ABI_ASM_TEMP_REGNUM\n-\t  || regno == MB_ABI_EXCEPTION_RETURN_ADDR_REGNUM)\n+\t  || (interrupt_handler\n+              && (regno == MB_ABI_ASM_TEMP_REGNUM\n+\t          || regno == MB_ABI_EXCEPTION_RETURN_ADDR_REGNUM)))\n \treturn 1;\n     }\n \n@@ -1631,6 +1648,8 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   interrupt_handler =\n     microblaze_interrupt_function_p (current_function_decl);\n+  fast_interrupt =\n+    microblaze_fast_interrupt_function_p (current_function_decl);\n   save_volatiles = microblaze_save_volatiles (current_function_decl);\n \n   gp_reg_size = 0;\n@@ -1664,7 +1683,7 @@ compute_frame_size (HOST_WIDE_INT size)\n   total_size += gp_reg_size;\n \n   /* Add 4 bytes for MSR.  */\n-  if (interrupt_handler)\n+  if (microblaze_is_interrupt_variant ())\n     total_size += 4;\n \n   /* No space to be allocated for link register in leaf functions with no other\n@@ -2156,7 +2175,7 @@ save_restore_insns (int prologue)\n   base_reg_rtx = stack_pointer_rtx;\n \n   /* For interrupt_handlers, need to save/restore the MSR.  */\n-  if (interrupt_handler)\n+  if (microblaze_is_interrupt_variant ())\n     {\n       isr_mem_rtx = gen_rtx_MEM (SImode,\n \t\t\t\t gen_rtx_PLUS (Pmode, base_reg_rtx,\n@@ -2170,7 +2189,7 @@ save_restore_insns (int prologue)\n       isr_msr_rtx = gen_rtx_REG (SImode, ST_REG);\n     }\n \n-  if (interrupt_handler && !prologue)\n+  if (microblaze_is_interrupt_variant () && !prologue)\n     {\n       emit_move_insn (isr_reg_rtx, isr_mem_rtx);\n       emit_move_insn (isr_msr_rtx, isr_reg_rtx);\n@@ -2190,7 +2209,7 @@ save_restore_insns (int prologue)\n \t  reg_rtx = gen_rtx_REG (SImode, regno);\n \t  insn = gen_rtx_PLUS (Pmode, base_reg_rtx, GEN_INT (gp_offset));\n \t  mem_rtx = gen_rtx_MEM (SImode, insn);\n-\t  if (interrupt_handler || save_volatiles)\n+\t  if (microblaze_is_interrupt_variant () || save_volatiles)\n \t    /* Do not optimize in flow analysis.  */\n \t    MEM_VOLATILE_P (mem_rtx) = 1;\n \n@@ -2208,7 +2227,7 @@ save_restore_insns (int prologue)\n \t}\n     }\n \n-  if (interrupt_handler && prologue)\n+  if (microblaze_is_interrupt_variant () && prologue)\n     {\n       emit_move_insn (isr_reg_rtx, isr_msr_rtx);\n       emit_move_insn (isr_mem_rtx, isr_reg_rtx);\n@@ -2238,10 +2257,12 @@ microblaze_function_prologue (FILE * file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n       fputs (\"\\t.ent\\t\", file);\n       if (interrupt_handler && strcmp (INTERRUPT_HANDLER_NAME, fnname))\n \tfputs (\"_interrupt_handler\", file);\n+      else if (fast_interrupt && strcmp (FAST_INTERRUPT_NAME, fnname))\n+\tfputs (\"_fast_interrupt\", file);\n       else\n \tassemble_name (file, fnname);\n       fputs (\"\\n\", file);\n-      if (!interrupt_handler)\n+      if (!microblaze_is_interrupt_variant ())\n \tASM_OUTPUT_TYPE_DIRECTIVE (file, fnname, \"function\");\n     }\n \n@@ -2593,9 +2614,12 @@ static void\n microblaze_globalize_label (FILE * stream, const char *name)\n {\n   fputs (\"\\t.globl\\t\", stream);\n-  if (interrupt_handler && strcmp (name, INTERRUPT_HANDLER_NAME))\n+  if (microblaze_is_interrupt_variant ())\n     {\n-      fputs (INTERRUPT_HANDLER_NAME, stream);\n+      if (interrupt_handler && strcmp (name, INTERRUPT_HANDLER_NAME))\n+        fputs (INTERRUPT_HANDLER_NAME, stream);\n+      else if (fast_interrupt && strcmp (name, FAST_INTERRUPT_NAME))\n+        fputs (FAST_INTERRUPT_NAME, stream);\n       fputs (\"\\n\\t.globl\\t\", stream);\n     }\n   assemble_name (stream, name);"}, {"sha": "8fbe5bf8085b9c179a873f35b86ebea774f1ba1f", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=ee61ea3844e8deee83cee22e037b15339f823171", "patch": "@@ -756,9 +756,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Handle interrupt attribute.  */\n extern int interrupt_handler;\n+extern int fast_interrupt;\n extern int save_volatiles;\n \n #define INTERRUPT_HANDLER_NAME \"_interrupt_handler\"\n+#define FAST_INTERRUPT_NAME \"_fast_interrupt\"\n \n /* The following #defines are used in the headers files. Always retain these.  */\n "}, {"sha": "02857875022f9b79ecf84dd50b7092d683b3b7bd", "filename": "gcc/config/microblaze/microblaze.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee61ea3844e8deee83cee22e037b15339f823171/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.md?ref=ee61ea3844e8deee83cee22e037b15339f823171", "patch": "@@ -961,7 +961,7 @@\n (define_insn \"movsi_status\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,z\")\n         (match_operand:SI 1 \"register_operand\" \"z,d,d\"))]\n-  \"interrupt_handler\"\n+  \"microblaze_is_interrupt_variant ()\"\n   \"@\n \tmfs\\t%0,%1  #mfs\n \taddk\\t%0,%1,r0 #add movsi\n@@ -1918,7 +1918,7 @@\n   [(any_return)]\n   \"\"\n   { \n-    if (microblaze_is_interrupt_handler ())\n+    if (microblaze_is_interrupt_variant ())\n         return \"rtid\\tr14, 0\\;%#\";\n     else\n         return \"rtsd\\tr15, 8\\;%#\";\n@@ -1935,7 +1935,7 @@\n    (use (match_operand:SI 0 \"register_operand\" \"\"))]\n   \"\"\n   {\t\n-    if (microblaze_is_interrupt_handler ())\n+    if (microblaze_is_interrupt_variant ())\n         return \"rtid\\tr14,0 \\;%#\";\n     else\n         return \"rtsd\\tr15,8 \\;%#\";"}]}