{"sha": "e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmZWE2ZWUwYmMyZmY3MGQwN2U3OWFiOWNmMGY1NDViNWJhNmI3Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-04-01T16:26:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-04-01T16:26:37Z"}, "message": "* i386.md (test patterns):  Allow memory operand in operand1.\n\nFrom-SVN: r65132", "tree": {"sha": "539bf53d711757b1a895c67daadfaa38e8882d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/539bf53d711757b1a895c67daadfaa38e8882d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72/comments", "author": null, "committer": null, "parents": [{"sha": "d744e06e5edeb7dca7bf021559b3bdfdabe12a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d744e06e5edeb7dca7bf021559b3bdfdabe12a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d744e06e5edeb7dca7bf021559b3bdfdabe12a28"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "03b97444fde5d5d33c1fdec225e73e8c96203d8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72", "patch": "@@ -1,3 +1,7 @@\n+Tue Apr  1 18:18:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (test patterns):  Allow memory operand in operand1.\n+\n 2003-02-31  Aldy Hernandez  <aldyh@redhat.com>\n \n         * testsuite/gcc.c-torture/execute/simd-3.c: New."}, {"sha": "0c5c127260186b6e94235e1eb107e2dbc630cb7d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e1fea6ee0bc2ff70d07e79ab9cf0f545b5ba6b72", "patch": "@@ -8074,9 +8074,10 @@\n   [(set (reg 17)\n \t(compare\n \t  (and:DI (match_operand:DI 0 \"nonimmediate_operand\" \"%!*a,r,!*a,r,rm\")\n-\t\t  (match_operand:DI 1 \"x86_64_szext_nonmemory_operand\" \"Z,Z,e,e,re\"))\n+\t\t  (match_operand:DI 1 \"x86_64_szext_general_operand\" \"Z,Z,e,e,re\"))\n \t  (const_int 0)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n    test{l}\\t{%k1, %k0|%k0, %k1} \n    test{l}\\t{%k1, %k0|%k0, %k1} \n@@ -8092,9 +8093,10 @@\n   [(set (reg 17)\n \t(compare\n \t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%!*a,r,rm\")\n-\t\t  (match_operand:SI 1 \"nonmemory_operand\" \"in,in,rin\"))\n+\t\t  (match_operand:SI 1 \"general_operand\" \"in,in,rin\"))\n \t  (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"test{l}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"modrm\" \"0,1,1\")\n@@ -8113,9 +8115,10 @@\n (define_insn \"*testhi_1\"\n   [(set (reg 17)\n         (compare (and:HI (match_operand:HI 0 \"nonimmediate_operand\" \"%!*a,r,rm\")\n-\t\t\t (match_operand:HI 1 \"nonmemory_operand\" \"n,n,rn\"))\n+\t\t\t (match_operand:HI 1 \"general_operand\" \"n,n,rn\"))\n \t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"test{w}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"modrm\" \"0,1,1\")\n@@ -8133,9 +8136,10 @@\n (define_insn \"*testqi_1\"\n   [(set (reg 17)\n         (compare (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%!*a,q,qm,r\")\n-\t\t\t (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn,n\"))\n+\t\t\t (match_operand:QI 1 \"general_operand\" \"n,n,qn,n\"))\n \t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   if (which_alternative == 3)\n     {\n@@ -8190,9 +8194,10 @@\n \t      (const_int 8)\n \t      (const_int 8))\n \t    (zero_extend:SI\n-\t      (match_operand:QI 1 \"nonimmediate_operand\" \"Qm\")))\n+\t      (match_operand:QI 1 \"general_operand\" \"Qm\")))\n \t  (const_int 0)))]\n-  \"!TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"!TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"test{b}\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")])"}]}