{"sha": "640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwYmE0YzFhMzNjYjdlNGFkODU0OTg1ZjdkOTU4ODJmOGVkMjI2MA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-05-28T13:01:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-09T12:35:25Z"}, "message": "[Ada] Avoid repeated computing of type of expression functions\n\ngcc/ada/\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Add variable to\n\tavoid repeated calls to Etype.", "tree": {"sha": "df309e7b1eadb704fdae908e5021d26cdf475609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df309e7b1eadb704fdae908e5021d26cdf475609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ba4c1a33cb7e4ad854985f7d95882f8ed2260/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e437dd45e78c810b4ebf6bab1e5f3751a59338e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e437dd45e78c810b4ebf6bab1e5f3751a59338e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e437dd45e78c810b4ebf6bab1e5f3751a59338e3"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "a3240143702a73e6278e788e69122eba9760a495", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640ba4c1a33cb7e4ad854985f7d95882f8ed2260/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640ba4c1a33cb7e4ad854985f7d95882f8ed2260/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "patch": "@@ -300,6 +300,7 @@ package body Sem_Ch6 is\n       New_Spec : Node_Id;\n       Orig_N   : Node_Id;\n       Ret      : Node_Id;\n+      Typ      : Entity_Id;\n \n       Def_Id : Entity_Id := Empty;\n       Prev   : Entity_Id;\n@@ -333,6 +334,8 @@ package body Sem_Ch6 is\n          Def_Id := Analyze_Subprogram_Specification (Spec);\n          Prev   := Find_Corresponding_Spec (N);\n \n+         Typ := Etype (Def_Id);\n+\n          --  The previous entity may be an expression function as well, in\n          --  which case the redeclaration is illegal.\n \n@@ -406,7 +409,7 @@ package body Sem_Ch6 is\n          if not Inside_A_Generic then\n             Freeze_Expr_Types\n               (Def_Id => Def_Id,\n-               Typ    => Etype (Def_Id),\n+               Typ    => Typ,\n                Expr   => Expr,\n                N      => N);\n          end if;\n@@ -496,6 +499,8 @@ package body Sem_Ch6 is\n          Def_Id := Defining_Entity (N);\n          Set_Is_Inlined (Def_Id);\n \n+         Typ := Etype (Def_Id);\n+\n          --  Establish the linkages between the spec and the body. These are\n          --  used when the expression function acts as the prefix of attribute\n          --  'Access in order to freeze the original expression which has been\n@@ -517,7 +522,7 @@ package body Sem_Ch6 is\n             Set_Has_Completion (Def_Id, not Is_Ignored_Ghost_Entity (Def_Id));\n             Push_Scope (Def_Id);\n             Install_Formals (Def_Id);\n-            Preanalyze_Spec_Expression (Expr, Etype (Def_Id));\n+            Preanalyze_Spec_Expression (Expr, Typ);\n             End_Scope;\n          end if;\n \n@@ -531,9 +536,8 @@ package body Sem_Ch6 is\n          --  place at the point of declaration.\n \n          declare\n-            Decls : List_Id            := List_Containing (N);\n-            Par   : constant Node_Id   := Parent (Decls);\n-            Typ   : constant Entity_Id := Etype (Def_Id);\n+            Decls : List_Id          := List_Containing (N);\n+            Par   : constant Node_Id := Parent (Decls);\n \n          begin\n             --  If this is a wrapper created in an instance for a formal\n@@ -624,12 +628,11 @@ package body Sem_Ch6 is\n       --  nodes that don't come from source.\n \n       if Present (Def_Id)\n-        and then Nkind (Def_Id) in N_Has_Etype\n-        and then Is_Tagged_Type (Etype (Def_Id))\n+        and then Is_Tagged_Type (Typ)\n       then\n          Check_Dynamically_Tagged_Expression\n            (Expr        => Expr,\n-            Typ         => Etype (Def_Id),\n+            Typ         => Typ,\n             Related_Nod => Orig_N);\n       end if;\n "}]}