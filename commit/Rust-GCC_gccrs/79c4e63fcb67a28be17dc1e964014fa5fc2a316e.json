{"sha": "79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljNGU2M2ZjYjY3YTI4YmUxN2RjMWU5NjQwMTRmYTVmYzJhMzE2ZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-03-01T06:00:38Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-03-01T06:00:38Z"}, "message": "tm.texi (ASM_WEAKEN_DECL): Document.\n\n\t* doc/tm.texi (ASM_WEAKEN_DECL): Document.\n\t(ASM_WEAKEN_LABEL): Mention ASM_WEAKEN_DECL.\n\t(SUPPORTS_WEAK): Likewise.\n\t* output.h (add_weak): Add tree param.\n\t* varasm.c (add_weak): Likewise.  Save decl.\n\t(struct weak_syms): Add decl field.\n\t(mark_weak_decls): New function.\n\t(init_varasm_once): ggc_add_root mark_weak_decls.\n\t(assemble_start_function): Use ASM_WEAKEN_DECL.\n\t(assemble_variable): Likewise.\n\t(assemble_alias): Likewise.\n\t(declare_weak): Pass decl to add_weak.\n\t(weak_finish): Use ASM_WEAKEN_DECL. Try to find decl.\n\t(remove_from_pending_weak_list): Declare and define for\n\tASM_WEAKEN_DECL.\n\t* c-pragma.c (handle_pragma_weak): Adjust add_weak call.\n\t* c-pragma.h (HANDLE_PRAGMA_WEAK): Define if ASM_WEAKEN_DECL too.\n\t* defaults.h (SUPPORTS_WEAK): Likewise.\n\t* config/rs6000/linux64.h (ASM_DECLARE_FUNCTION_NAME): Don't emit\n\t.weak for code sym.  Do emit .size for descriptor sym.\n\t(ASM_DECLARE_FUNCTION_SIZE): Define.\n\t* config/rs6000/rs6000.h (ASM_WEAKEN_DECL): Define.\n\t(ASM_OUTPUT_DEF_FROM_DECLS): Don't emit .weak here.  Don't output\n\t.lglobl unless TARGET_XCOFF.  Formatting fixes.\n\t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Don't emit\n\t.weak for code sym.\n\t(HANDLE_PRAGMA_WEAK): Remove.\n\t(ASM_WEAKEN_LABEL): Remove.\n\t* config/rs6000/aix.h (HANDLE_SYSV_PRAGMA): Define.\n\nCo-Authored-By: David Edelsohn <edelsohn@gnu.org>\n\nFrom-SVN: r50181", "tree": {"sha": "146341b9078d1b8ac0de9b80ea4f78629e3a7048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/146341b9078d1b8ac0de9b80ea4f78629e3a7048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/comments", "author": null, "committer": null, "parents": [{"sha": "562ff1637faf0ce60e65c13a9a7c27015b6226bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562ff1637faf0ce60e65c13a9a7c27015b6226bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562ff1637faf0ce60e65c13a9a7c27015b6226bc"}], "stats": {"total": 315, "additions": 211, "deletions": 104}, "files": [{"sha": "00ced4e93b3655b702818a54b9a7339ada986893", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -1,3 +1,36 @@\n+2002-03-01  Alan Modra  <amodra@bigpond.net.au>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* doc/tm.texi (ASM_WEAKEN_DECL): Document.\n+\t(ASM_WEAKEN_LABEL): Mention ASM_WEAKEN_DECL.\n+\t(SUPPORTS_WEAK): Likewise.\n+\t* output.h (add_weak): Add tree param.\n+\t* varasm.c (add_weak): Likewise.  Save decl.\n+\t(struct weak_syms): Add decl field.\n+\t(mark_weak_decls): New function.\n+\t(init_varasm_once): ggc_add_root mark_weak_decls.\n+\t(assemble_start_function): Use ASM_WEAKEN_DECL.\n+\t(assemble_variable): Likewise.\n+\t(assemble_alias): Likewise.\n+\t(declare_weak): Pass decl to add_weak.\n+\t(weak_finish): Use ASM_WEAKEN_DECL. Try to find decl.\n+\t(remove_from_pending_weak_list): Declare and define for\n+\tASM_WEAKEN_DECL.\n+\t* c-pragma.c (handle_pragma_weak): Adjust add_weak call.\n+\t* c-pragma.h (HANDLE_PRAGMA_WEAK): Define if ASM_WEAKEN_DECL too.\n+\t* defaults.h (SUPPORTS_WEAK): Likewise.\n+\t* config/rs6000/linux64.h (ASM_DECLARE_FUNCTION_NAME): Don't emit\n+\t.weak for code sym.  Do emit .size for descriptor sym.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Define.\n+\t* config/rs6000/rs6000.h (ASM_WEAKEN_DECL): Define.\n+\t(ASM_OUTPUT_DEF_FROM_DECLS): Don't emit .weak here.  Don't output\n+\t.lglobl unless TARGET_XCOFF.  Formatting fixes.\n+\t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Don't emit\n+\t.weak for code sym.\n+\t(HANDLE_PRAGMA_WEAK): Remove.\n+\t(ASM_WEAKEN_LABEL): Remove.\n+\t* config/rs6000/aix.h (HANDLE_SYSV_PRAGMA): Define.\n+\n 2002-03-01  Jason Merrill  <jason@redhat.com>\n \n \t* tree.h (TARGET_EXPR_SLOT, TARGET_EXPR_INITIAL): New macros."}, {"sha": "26bf27735f14d0bf848ed5a6966fb566a8b8ccdc", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -1,5 +1,5 @@\n /* Handle #pragma, system V.4 style.  Supports #pragma weak and #pragma pack.\n-   Copyright (C) 1992, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1992, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -298,7 +298,8 @@ handle_pragma_weak (dummy)\n   if (t != CPP_EOF)\n     warning (\"junk at end of #pragma weak\");\n \n-  add_weak (IDENTIFIER_POINTER (name), value ? IDENTIFIER_POINTER (value) : 0);\n+  add_weak (NULL_TREE, IDENTIFIER_POINTER (name),\n+\t    value ? IDENTIFIER_POINTER (value) : NULL);\n }\n #endif\n "}, {"sha": "8d0c4f585019ffd15047c68fc3a9c44bec33d9dd", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -23,9 +23,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_C_PRAGMA_H\n \n #ifdef HANDLE_SYSV_PRAGMA\n-/* Support #pragma weak iff ASM_WEAKEN_LABEL and ASM_OUTPUT_WEAK_ALIAS are\n-   defined.  */\n-#if defined (ASM_WEAKEN_LABEL) && defined (ASM_OUTPUT_WEAK_ALIAS)\n+#if ((defined (ASM_WEAKEN_LABEL) && defined (ASM_OUTPUT_WEAK_ALIAS)) \\\n+     || defined (ASM_WEAKEN_DECL))\n #define HANDLE_PRAGMA_WEAK SUPPORTS_WEAK\n #endif\n "}, {"sha": "d8dde5bbba815ed66311606a1964ad9e7297fb53", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -27,6 +27,9 @@ Boston, MA 02111-1307, USA.  */\n    collect has a chance to see them, so scan the object files directly.  */\n #define COLLECT_EXPORT_LIST\n \n+/* Handle #pragma weak and #pragma pack.  */\n+#define HANDLE_SYSV_PRAGMA\n+\n /* This is the only version of nm that collect2 can work with.  */\n #define REAL_NM_FILE_NAME \"/usr/ucb/nm\"\n "}, {"sha": "40b64dc3f9e7b801c2d90b46ad6312470ee86c86", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for 64 bit powerpc linux.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -250,32 +250,39 @@ do {\t\t\t\t\t\t\\\n       fputs (DOUBLE_INT_ASM_OP, (FILE));\t\t\t\t\\\n       putc ('.', (FILE));\t\t\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      putc ('\\n', (FILE));\t\t\t\t\t\t\\\n-      fputs (DOUBLE_INT_ASM_OP, (FILE));\t\t\t\t\\\n-      fputs (\".TOC.@tocbase, 0\\n\\t.previous\\n\", (FILE));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_PUBLIC (DECL))\t\t\t\t\t\t\\\n+      fputs (\",.TOC.@tocbase,0\\n\\t.previous\\n\\t.size\\t\", (FILE));\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fputs (\",24\\n\\t.type\\t.\", (FILE));\t\t\t\t\\\n+      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+      fputs (\",@function\\n\", (FILE));\t\t\t\t\t\\\n+      if (TREE_PUBLIC (DECL) && ! DECL_WEAK (DECL))\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n-\t  if (DECL_WEAK (DECL))\t\t\t\t\t\t\\\n-\t    fputs (\"\\t.weak\\t\", (FILE));\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    fputs (\"\\t.globl\\t\", (FILE));\t\t\t\t\\\n-\t  putc ('.', (FILE));\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.globl\\t.\", (FILE));\t\t\t\t\\\n \t  assemble_name ((FILE), (NAME));\t\t\t\t\\\n \t  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n         }\t\t\t\t\t\t\t\t\\\n-      fputs (TYPE_ASM_OP, (FILE));\t\t\t\t\t\\\n-      putc ('.', (FILE));\t\t\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      putc (',', (FILE));\t\t\t\t\t\t\\\n-      fprintf ((FILE), TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n-      putc ('\\n', (FILE));\t\t\t\t\t\t\\\n       ASM_DECLARE_RESULT ((FILE), DECL_RESULT (DECL));\t\t\t\\\n       putc ('.', (FILE));\t\t\t\t\t\t\\\n       ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* This is how to declare the size of a function.  */\n+#undef\tASM_DECLARE_FUNCTION_SIZE\n+#define\tASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.size\\t.\", (FILE));\t\t\t\t\t\\\n+\t  assemble_name ((FILE), (FNAME));\t\t\t\t\\\n+\t  fputs (\",.-.\", (FILE));\t\t\t\t\t\\\n+\t  assemble_name ((FILE), (FNAME));\t\t\t\t\\\n+\t  putc ('\\n', (FILE));\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /* Return non-zero if this entry is to be written into the constant\n    pool in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF\n    or a CONST containing one of them.  If -mfp-in-toc (the default),"}, {"sha": "dbb14746652359a4db51c778744fc35b98ea8d59", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -2422,43 +2422,71 @@ extern int toc_initialized;\n #define RS6000_WEAK 0\n #endif\n \n-/* This implementes the `alias' attribute.  */\n-#define ASM_OUTPUT_DEF_FROM_DECLS(FILE,decl,target)\t\\\n-do {\t\t\t\t\t\t\t\\\n-  const char * alias = XSTR (XEXP (DECL_RTL (decl), 0), 0); \\\n-  const char * name = IDENTIFIER_POINTER (target);\t\\\n-  if (TREE_CODE (decl) == FUNCTION_DECL\t\t\t\\\n-      && DEFAULT_ABI == ABI_AIX)\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (TREE_PUBLIC (decl))\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  if (RS6000_WEAK && DECL_WEAK (decl))\t\t\\\n-\t    {\t\t\t\t\t\t\\\n-\t      fputs (\"\\t.weak .\", FILE);\t\t\\\n-\t      assemble_name (FILE, alias);\t\t\\\n-\t      putc ('\\n', FILE);\t\t\t\\\n-\t    }\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\\\n-\t      fputs (\"\\t.globl .\", FILE);\t\t\\\n-\t      assemble_name (FILE, alias);\t\t\\\n-\t      putc ('\\n', FILE);\t\t\t\\\n-\t    }\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  fputs (\"\\t.lglobl .\", FILE);\t\t\t\\\n-\t  assemble_name (FILE, alias);\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-      fputs (\"\\t.set .\", FILE);\t\t\t\t\\\n-      assemble_name (FILE, alias);\t\t\t\\\n-      fputs (\",.\", FILE);\t\t\t\t\\\n-      assemble_name (FILE, name);\t\t\t\\\n-      fputc ('\\n', FILE);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_DEF (FILE, alias, name);\t\t\t\\\n-} while (0)\n+#if RS6000_WEAK\n+/* Used in lieu of ASM_WEAKEN_LABEL.  */\n+#define\tASM_WEAKEN_DECL(FILE, DECL, NAME, VAL)\t\t\t \t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fputs (\"\\t.weak\\t\", (FILE));\t\t\t\t\t\\\n+      assemble_name ((FILE), (NAME)); \t\t\t\t\t\\\n+      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n+\t  && DEFAULT_ABI == ABI_AIX)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fputs (\",.\", (FILE));\t\t\t\t\t\t\\\n+\t  assemble_name ((FILE), (NAME)); \t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n+      if (VAL)\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  ASM_OUTPUT_DEF ((FILE), (NAME), (VAL));\t\t\t\\\n+\t  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL\t\t\\\n+\t      && DEFAULT_ABI == ABI_AIX)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      fputs (\"\\t.set\\t.\", (FILE));\t\t\t\t\\\n+\t      assemble_name ((FILE), (NAME));\t\t\t\t\\\n+\t      fputs (\",.\", (FILE));\t\t\t\t\t\\\n+\t      assemble_name ((FILE), (VAL));\t\t\t\t\\\n+\t      fputc ('\\n', (FILE));\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n+\n+/* This implements the `alias' attribute.  */\n+#undef\tASM_OUTPUT_DEF_FROM_DECLS\n+#define\tASM_OUTPUT_DEF_FROM_DECLS(FILE, DECL, TARGET)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      const char *alias = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n+      const char *name = IDENTIFIER_POINTER (TARGET);\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\t\\\n+\t  && DEFAULT_ABI == ABI_AIX)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      if (!RS6000_WEAK || !DECL_WEAK (DECL))\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  fputs (\"\\t.globl\\t.\", FILE);\t\t\t\t\\\n+\t\t  assemble_name (FILE, alias);\t\t\t\t\\\n+\t\t  putc ('\\n', FILE);\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else if (TARGET_XCOFF)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      fputs (\"\\t.lglobl\\t.\", FILE);\t\t\t\t\\\n+\t      assemble_name (FILE, alias);\t\t\t\t\\\n+\t      putc ('\\n', FILE);\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  fputs (\"\\t.set\\t.\", FILE);\t\t\t\t\t\\\n+\t  assemble_name (FILE, alias);\t\t\t\t\t\\\n+\t  fputs (\",.\", FILE);\t\t\t\t\t\t\\\n+\t  assemble_name (FILE, name);\t\t\t\t\t\\\n+\t  fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_DEF (FILE, alias, name);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+   while (0)\n \n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */"}, {"sha": "a2ef6ec4ad410e55f557b945fa18d7fb5aa12dc8", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for some generic XCOFF file format\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -345,13 +345,7 @@ toc_section ()\t\t\t\t\t\t\\\n     SYMBOL_REF_FLAG (sym_ref) = 1;\t\t\t\t\\\n   if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      if (RS6000_WEAK && DECL_WEAK (decl))\t\t\t\\\n-\t{\t\t\t\t\t\t\t\\\n-\t  fputs (\"\\t.weak .\", FILE);\t\t\t\t\\\n-\t  RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n-\t  putc ('\\n', FILE);\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n+      if (!RS6000_WEAK || !DECL_WEAK (decl))\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  fputs (\"\\t.globl .\", FILE);\t\t\t\t\\\n \t  RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n@@ -464,20 +458,6 @@ toc_section ()\t\t\t\t\t\t\\\n \t\txcoff_bss_section_name);\t\t\\\n      } while (0)\n \n-/* Output a weak symbol, if weak support present.  */\n-#ifdef HAVE_GAS_WEAK\n-#define HANDLE_PRAGMA_WEAK 1\n-\n-#define ASM_WEAKEN_LABEL(FILE, NAME)\t\\\n-  do\t\t\t\t\t\\\n-    {\t\t\t\t\t\\\n-      fputs (\"\\t.weak \", (FILE));\t\\\n-      assemble_name ((FILE), (NAME));\t\\\n-      fputc ('\\n', (FILE));\t\t\\\n-    }\t\t\t\t\t\\\n-  while (0)\n-#endif /* HAVE_GAS_WEAK */\n-\n /* This is how we tell the assembler that two symbols have the same value.  */\n #define SET_ASM_OP \"\\t.set \"\n "}, {"sha": "3071f1f35cd92001c1fff175b9de314a19ffaa56", "filename": "gcc/defaults.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of various defaults for tm.h macros.\n-   Copyright (C) 1992, 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1992, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com)\n \n@@ -158,7 +158,7 @@ do { ASM_OUTPUT_LABEL(FILE,LABEL_ALTERNATE_NAME (INSN)); } while (0)\n \n /* This determines whether or not we support weak symbols.  */\n #ifndef SUPPORTS_WEAK\n-#ifdef ASM_WEAKEN_LABEL\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n #define SUPPORTS_WEAK 1\n #else\n #define SUPPORTS_WEAK 0"}, {"sha": "dd22fd0ab06b2d8faa288467408a1d73abdc254d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -6169,7 +6169,7 @@ itself; before and after that, output the additional assembler syntax\n for making that name global, and a newline.\n \n @findex ASM_WEAKEN_LABEL\n-@item ASM_WEAKEN_LABEL\n+@item ASM_WEAKEN_LABEL (@var{stream}, @var{name})\n A C statement (sans semicolon) to output to the stdio stream\n @var{stream} some commands that will make the label @var{name} weak;\n that is, available for reference from other files but only used if\n@@ -6178,18 +6178,29 @@ no other definition is available.  Use the expression\n itself; before and after that, output the additional assembler syntax\n for making that name weak, and a newline.\n \n-If you don't define this macro, GCC will not support weak\n-symbols and you should not define the @code{SUPPORTS_WEAK} macro.\n+If you don't define this macro or @code{ASM_WEAKEN_DECL}, GCC will not\n+support weak symbols and you should not define the @code{SUPPORTS_WEAK}\n+macro.\n+\n+@findex ASM_WEAKEN_DECL\n+@item ASM_WEAKEN_DECL (@var{stream}, @var{decl}, @var{name}, @var{value})\n+Combines (and replaces) the function of @code{ASM_WEAKEN_LABEL} and\n+@code{ASM_OUTPUT_WEAK_ALIAS}, allowing access to the associated function\n+or variable decl.  If @var{value} is not @code{NULL}, this C statement\n+should output to the stdio stream @var{stream} assembler code which\n+defines (equates) the weak symbol @var{name} to have the value\n+@var{value}.  If @var{value} is @code{NULL}, it should output commands\n+to make @var{name} weak.\n \n @findex SUPPORTS_WEAK\n @item SUPPORTS_WEAK\n A C expression which evaluates to true if the target supports weak symbols.\n \n If you don't define this macro, @file{defaults.h} provides a default\n-definition.  If @code{ASM_WEAKEN_LABEL} is defined, the default\n-definition is @samp{1}; otherwise, it is @samp{0}.  Define this macro if\n-you want to control weak symbol support with a compiler flag such as\n-@option{-melf}.\n+definition.  If either @code{ASM_WEAKEN_LABEL} or @code{ASM_WEAKEN_DECL}\n+is defined, the default definition is @samp{1}; otherwise, it is\n+@samp{0}.  Define this macro if you want to control weak symbol support\n+with a compiler flag such as @option{-melf}.\n \n @findex MAKE_DECL_ONE_ONLY (@var{decl})\n @item MAKE_DECL_ONE_ONLY"}, {"sha": "9c7adaff98c4b49c4f37c033a609fd4d430d77ab", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -137,7 +137,7 @@ extern const char *get_insn_template PARAMS ((int, rtx));\n \n /* Add function NAME to the weak symbols list.  VALUE is a weak alias\n    associated with NAME.  */\n-extern int add_weak PARAMS ((const char *, const char *));\n+extern int add_weak PARAMS ((tree, const char *, const char *));\n \n /* Functions in flow.c */\n extern void allocate_for_life_analysis\tPARAMS ((void));"}, {"sha": "f8fb16cc88032dd6553963298fc2261be0e893d0", "filename": "gcc/varasm.c", "status": "modified", "additions": 57, "deletions": 12, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79c4e63fcb67a28be17dc1e964014fa5fc2a316e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=79c4e63fcb67a28be17dc1e964014fa5fc2a316e", "patch": "@@ -42,6 +42,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"obstack.h\"\n #include \"hashtab.h\"\n #include \"c-pragma.h\"\n+#include \"c-tree.h\"\n #include \"ggc.h\"\n #include \"langhooks.h\"\n #include \"tm_p.h\"\n@@ -166,7 +167,8 @@ static unsigned HOST_WIDE_INT array_size_for_constructor PARAMS ((tree));\n static unsigned min_align\t\tPARAMS ((unsigned, unsigned));\n static void output_constructor\t\tPARAMS ((tree, HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned int));\n-#ifdef ASM_WEAKEN_LABEL\n+static void mark_weak_decls\t\tPARAMS ((void *));\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n static void remove_from_pending_weak_list\tPARAMS ((const char *));\n #endif\n static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n@@ -1237,10 +1239,14 @@ assemble_start_function (decl, fnname)\n \t    weak_global_object_name = name;\n \t}\n \n-#ifdef ASM_WEAKEN_LABEL\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n       if (DECL_WEAK (decl))\n \t{\n+#ifdef ASM_WEAKEN_DECL\n+\t  ASM_WEAKEN_DECL (asm_out_file, decl, fnname, 0);\n+#else\n \t  ASM_WEAKEN_LABEL (asm_out_file, fnname);\n+#endif\n \t  /* Remove this function from the pending weak list so that\n \t     we do not emit multiple .weak directives for it.  */\n \t  remove_from_pending_weak_list\n@@ -1644,10 +1650,14 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   /* First make the assembler name(s) global if appropriate.  */\n   if (TREE_PUBLIC (decl) && DECL_NAME (decl))\n     {\n-#ifdef ASM_WEAKEN_LABEL\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n       if (DECL_WEAK (decl))\n \t{\n+#ifdef ASM_WEAKEN_DECL\n+\t  ASM_WEAKEN_DECL (asm_out_file, decl, name, 0);\n+#else\n \t  ASM_WEAKEN_LABEL (asm_out_file, name);\n+#endif\n \t   /* Remove this variable from the pending weak list so that\n \t      we do not emit multiple .weak directives for it.  */\n \t  remove_from_pending_weak_list\n@@ -5012,17 +5022,31 @@ output_constructor (exp, size, align)\n struct weak_syms\n {\n   struct weak_syms * next;\n+  tree decl;\n   const char * name;\n   const char * value;\n };\n \n static struct weak_syms * weak_decls;\n \n+/* Mark weak_decls for garbage collection.  */\n+\n+static void\n+mark_weak_decls (arg)\n+     void *arg;\n+{\n+  struct weak_syms *t;\n+\n+  for (t = *(struct weak_syms **) arg; t != NULL; t = t->next)\n+    ggc_mark_tree (t->decl);\n+}\n+\n /* Add function NAME to the weak symbols list.  VALUE is a weak alias\n    associated with NAME.  */\n \n int\n-add_weak (name, value)\n+add_weak (decl, name, value)\n+     tree decl;\n      const char *name;\n      const char *value;\n {\n@@ -5034,6 +5058,7 @@ add_weak (name, value)\n     return 0;\n \n   weak->next = weak_decls;\n+  weak->decl = decl;\n   weak->name = name;\n   weak->value = value;\n   weak_decls = weak;\n@@ -5052,7 +5077,7 @@ declare_weak (decl)\n   else if (TREE_ASM_WRITTEN (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must precede definition\");\n   else if (SUPPORTS_WEAK)\n-    add_weak (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), NULL);\n+    add_weak (decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), NULL);\n   else\n     warning_with_decl (decl, \"weak declaration of `%s' not supported\");\n \n@@ -5067,8 +5092,18 @@ weak_finish ()\n   if (SUPPORTS_WEAK)\n     {\n       struct weak_syms *t;\n-      for (t = weak_decls; t; t = t->next)\n+      for (t = weak_decls; t != NULL; t = t->next)\n \t{\n+#ifdef ASM_WEAKEN_DECL\n+\t  tree decl = t->decl;\n+\t  if (decl == NULL_TREE)\n+\t    {\n+\t      tree name = get_identifier (t->name);\n+\t      if (name)\n+\t\tdecl = lookup_name (name);\n+\t    }\n+\t  ASM_WEAKEN_DECL (asm_out_file, decl, t->name, t->value);\n+#else\n #ifdef ASM_OUTPUT_WEAK_ALIAS\n \t  ASM_OUTPUT_WEAK_ALIAS (asm_out_file, t->name, t->value);\n #else\n@@ -5077,6 +5112,7 @@ weak_finish ()\n \t    abort ();\n \t  ASM_WEAKEN_LABEL (asm_out_file, t->name);\n #endif\n+#endif\n #endif\n \t}\n     }\n@@ -5085,7 +5121,7 @@ weak_finish ()\n /* Remove NAME from the pending list of weak symbols.  This prevents\n    the compiler from emitting multiple .weak directives which confuses\n    some assemblers.  */\n-#ifdef ASM_WEAKEN_LABEL\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n static void\n remove_from_pending_weak_list (name)\n      const char *name;\n@@ -5105,7 +5141,7 @@ remove_from_pending_weak_list (name)\n         p = &(t->next);\n     }\n }\n-#endif /* ASM_WEAKEN_LABEL */\n+#endif /* defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL) */\n \n /* Emit an assembler directive to make the symbol for DECL an alias to\n    the symbol for TARGET.  */\n@@ -5127,10 +5163,14 @@ assemble_alias (decl, target)\n \n   if (TREE_PUBLIC (decl))\n     {\n-#ifdef ASM_WEAKEN_LABEL\n+#if defined (ASM_WEAKEN_LABEL) || defined (ASM_WEAKEN_DECL)\n       if (DECL_WEAK (decl))\n- \t{\n+\t{\n+#ifdef ASM_WEAKEN_DECL\n+\t  ASM_WEAKEN_DECL (asm_out_file, decl, name, 0);\n+#else\n \t  ASM_WEAKEN_LABEL (asm_out_file, name);\n+#endif\n \t  /* Remove this function from the pending weak list so that\n \t     we do not emit multiple .weak directives for it.  */\n \t  remove_from_pending_weak_list\n@@ -5147,12 +5187,16 @@ assemble_alias (decl, target)\n   ASM_OUTPUT_DEF (asm_out_file, name, IDENTIFIER_POINTER (target));\n #endif\n   TREE_ASM_WRITTEN (decl) = 1;\n-#else\n-#ifdef ASM_OUTPUT_WEAK_ALIAS\n+#else /* !ASM_OUTPUT_DEF */\n+#if defined (ASM_OUTPUT_WEAK_ALIAS) || defined (ASM_WEAKEN_DECL)\n   if (! DECL_WEAK (decl))\n     warning (\"only weak aliases are supported in this configuration\");\n \n+#ifdef ASM_WEAKEN_DECL\n+  ASM_WEAKEN_DECL (asm_out_file, decl, name, IDENTIFIER_POINTER (target));\n+#else\n   ASM_OUTPUT_WEAK_ALIAS (asm_out_file, name, IDENTIFIER_POINTER (target));\n+#endif\n   TREE_ASM_WRITTEN (decl) = 1;\n #else\n   warning (\"alias definitions not supported in this configuration; ignored\");\n@@ -5232,6 +5276,7 @@ init_varasm_once ()\n \t\tmark_const_hash_entry);\n   ggc_add_root (&const_str_htab, 1, sizeof const_str_htab,\n \t\tmark_const_str_htab);\n+  ggc_add_root (&weak_decls, 1, sizeof weak_decls, mark_weak_decls);\n \n   const_alias_set = new_alias_set ();\n }"}]}