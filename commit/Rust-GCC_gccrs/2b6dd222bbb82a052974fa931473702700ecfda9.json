{"sha": "2b6dd222bbb82a052974fa931473702700ecfda9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2ZGQyMjJiYmI4MmEwNTI5NzRmYTkzMTQ3MzcwMjcwMGVjZmRhOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2006-01-20T21:00:03Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2006-01-20T21:00:03Z"}, "message": "re PR libstdc++/25524 (libstdc++ headers should go in multilib directories)\n\n\tPR libstdc++/25524\n\t* cppdefault.h (struct default_include): Add multilib flag.\n\t* cppdefault.c (cpp_include_defaults): Set it.\n\t* c.opt (-imultilib): New option.\n\t* c-opts.c (imultilib): New.\n\t(c_common_handle_option): Handle -imultilib.\n\t(c_common_post_options): Likewise.\n\t* c-incpath.c (add_standard_paths, register_include_chains):\n\tLikewise.\n\t* c-incpath.h (register_include_chains): Add extra parameter.\n\t* gcc.c (do_spec_1): Generate -imultilib option.\n\t(The Specs Language): Update %I description.\n\t(process_command): Update copyright notice.\n\t* doc/cppopts.texi (-imultilib): Document.\n\t* doc/invoke.texi (-imultilib): Include in option summary.\n\t(%I): Update specs documentation.\n\nlibstdc++-v3:\n\t* include/Makefile.am: Install host-specific headers in multilib\n\tsubdirectory.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r110037", "tree": {"sha": "f48eda30525ee2ab01e82568bb55e5e407a8a604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48eda30525ee2ab01e82568bb55e5e407a8a604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b6dd222bbb82a052974fa931473702700ecfda9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6dd222bbb82a052974fa931473702700ecfda9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b6dd222bbb82a052974fa931473702700ecfda9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6dd222bbb82a052974fa931473702700ecfda9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6018b746be62c693c34c10e760172d34a1dfc4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6018b746be62c693c34c10e760172d34a1dfc4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6018b746be62c693c34c10e760172d34a1dfc4f9"}], "stats": {"total": 163, "additions": 116, "deletions": 47}, "files": [{"sha": "c41ef43e98cef62aec1bb53bd5b255f4c8267655", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,3 +1,22 @@\n+2006-01-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR libstdc++/25524\n+\t* cppdefault.h (struct default_include): Add multilib flag.\n+\t* cppdefault.c (cpp_include_defaults): Set it.\n+\t* c.opt (-imultilib): New option.\n+\t* c-opts.c (imultilib): New.\n+\t(c_common_handle_option): Handle -imultilib.\n+\t(c_common_post_options): Likewise.\n+\t* c-incpath.c (add_standard_paths, register_include_chains):\n+\tLikewise.\n+\t* c-incpath.h (register_include_chains): Add extra parameter.\n+\t* gcc.c (do_spec_1): Generate -imultilib option.\n+\t(The Specs Language): Update %I description.\n+\t(process_command): Update copyright notice.\n+\t* doc/cppopts.texi (-imultilib): Document.\n+\t* doc/invoke.texi (-imultilib): Include in option summary.\n+\t(%I): Update specs documentation.\n+\n 2006-01-20  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* loop-iv.c (iv_analysis_loop_init): Use df in more conservative way."}, {"sha": "fc1e3149bb24d2d669427f0c25e75a2dbe794f68", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,6 +1,7 @@\n /* Set up combined include path chain for the preprocessor.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n    Broken out of cppinit.c and cppfiles.c and rewritten Mar 2003.\n \n@@ -45,8 +46,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n # define INO_T_COPY(DEST, SRC) (DEST) = (SRC)\n #endif\n \n+static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n+\n static void add_env_var_paths (const char *, int);\n-static void add_standard_paths (const char *, const char *, int);\n+static void add_standard_paths (const char *, const char *, const char *, int);\n static void free_path (struct cpp_dir *, int);\n static void merge_include_chains (cpp_reader *, int);\n static struct cpp_dir *remove_duplicates (cpp_reader *, struct cpp_dir *,\n@@ -120,7 +123,8 @@ add_env_var_paths (const char *env_var, int chain)\n \n /* Append the standard include chain defined in cppdefault.c.  */\n static void\n-add_standard_paths (const char *sysroot, const char *iprefix, int cxx_stdinc)\n+add_standard_paths (const char *sysroot, const char *iprefix,\n+\t\t    const char *imultilib, int cxx_stdinc)\n {\n   const struct default_include *p;\n   size_t len;\n@@ -142,6 +146,8 @@ add_standard_paths (const char *sysroot, const char *iprefix, int cxx_stdinc)\n \t      if (!strncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))\n \t\t{\n \t\t  char *str = concat (iprefix, p->fname + len, NULL);\n+\t\t  if (p->multilib && imultilib)\n+\t\t    str = concat (str, dir_separator_str, imultilib, NULL);\n \t\t  add_path (str, SYSTEM, p->cxx_aware, false);\n \t\t}\n \t    }\n@@ -160,6 +166,9 @@ add_standard_paths (const char *sysroot, const char *iprefix, int cxx_stdinc)\n \t  else\n \t    str = update_path (p->fname, p->component);\n \n+\t  if (p->multilib && imultilib)\n+\t    str = concat (str, dir_separator_str, imultilib, NULL);\n+\n \t  add_path (str, SYSTEM, p->cxx_aware, false);\n \t}\n     }\n@@ -357,8 +366,8 @@ add_path (char *path, int chain, int cxx_aware, bool user_supplied_p)\n    removal, and registration with cpplib.  */\n void\n register_include_chains (cpp_reader *pfile, const char *sysroot,\n-\t\t\t const char *iprefix, int stdinc, int cxx_stdinc,\n-\t\t\t int verbose)\n+\t\t\t const char *iprefix, const char *imultilib,\n+\t\t\t int stdinc, int cxx_stdinc, int verbose)\n {\n   static const char *const lang_env_vars[] =\n     { \"C_INCLUDE_PATH\", \"CPLUS_INCLUDE_PATH\",\n@@ -380,7 +389,7 @@ register_include_chains (cpp_reader *pfile, const char *sysroot,\n \n   /* Finally chain on the standard directories.  */\n   if (stdinc)\n-    add_standard_paths (sysroot, iprefix, cxx_stdinc);\n+    add_standard_paths (sysroot, iprefix, imultilib, cxx_stdinc);\n \n   target_c_incpath.extra_includes (sysroot, iprefix, stdinc);\n "}, {"sha": "3f268b79d57996754a0dd16f7b037781bc1fd83c", "filename": "gcc/c-incpath.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc-incpath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc-incpath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.h?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,5 +1,5 @@\n /* Set up combined include path for the preprocessor.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -18,7 +18,8 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */\n extern void split_quote_chain (void);\n extern void add_path (char *, int, int, bool);\n extern void register_include_chains (cpp_reader *, const char *,\n-\t\t\t\t     const char *, int, int, int);\n+\t\t\t\t     const char *, const char *,\n+\t\t\t\t     int, int, int);\n extern void add_cpp_dir_path (struct cpp_dir *, int);\n \n struct target_c_incpath_s {"}, {"sha": "f508e4e0481a5e26c28e1a87eeaf106b8035dae3", "filename": "gcc/c-opts.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,5 +1,5 @@\n /* C/ObjC/C++ command line option handling.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Neil Booth.\n \n This file is part of GCC.\n@@ -79,6 +79,9 @@ static const char *deps_file;\n /* The prefix given by -iprefix, if any.  */\n static const char *iprefix;\n \n+/* The multilib directory given by -imultilib, if any.  */\n+static const char *imultilib;\n+\n /* The system root, if any.  Overridden by -isysroot.  */\n static const char *sysroot = TARGET_SYSTEM_ROOT;\n \n@@ -815,6 +818,10 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       defer_opt (code, arg);\n       break;\n \n+    case OPT_imultilib:\n+      imultilib = arg;\n+      break;\n+\n     case OPT_iprefix:\n       iprefix = arg;\n       break;\n@@ -967,7 +974,7 @@ c_common_post_options (const char **pfilename)\n \n   sanitize_cpp_opts ();\n \n-  register_include_chains (parse_in, sysroot, iprefix,\n+  register_include_chains (parse_in, sysroot, iprefix, imultilib,\n \t\t\t   std_inc, std_cxx_inc && c_dialect_cxx (), verbose);\n \n   flag_inline_trees = 1;"}, {"sha": "a37f4982b73edaba6623e867ea0c91ee8e7420ba", "filename": "gcc/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,5 +1,5 @@\n ; Options for the C, ObjC, C++ and ObjC++ front ends.\n-; Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+; Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -757,6 +757,10 @@ imacros\n C ObjC C++ ObjC++ Joined Separate\n -imacros <file>\tAccept definition of macros in <file>\n \n+imultilib\n+C ObjC C++ ObjC++ Joined Separate\n+-imultilib <dir> Set <dir> to be the multilib include subdirectory\n+\n include\n C ObjC C++ ObjC++ Joined Separate\n -include <file>\tInclude the contents of <file> before other files"}, {"sha": "d040558b54c9ec12471e623941b252df13b6138a", "filename": "gcc/cppdefault.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fcppdefault.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fcppdefault.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.c?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2003, 2004, 2006 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -48,44 +48,44 @@ const struct default_include cpp_include_defaults[]\n = {\n #ifdef GPLUSPLUS_INCLUDE_DIR\n     /* Pick up GNU C++ generic include files.  */\n-    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1, 0 },\n+    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1, 0, 0 },\n #endif\n #ifdef GPLUSPLUS_TOOL_INCLUDE_DIR\n     /* Pick up GNU C++ target-dependent include files.  */\n-    { GPLUSPLUS_TOOL_INCLUDE_DIR, \"G++\", 1, 1, 0 },\n+    { GPLUSPLUS_TOOL_INCLUDE_DIR, \"G++\", 1, 1, 0, 1 },\n #endif\n #ifdef GPLUSPLUS_BACKWARD_INCLUDE_DIR\n     /* Pick up GNU C++ backward and deprecated include files.  */\n-    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, \"G++\", 1, 1, 0 },\n+    { GPLUSPLUS_BACKWARD_INCLUDE_DIR, \"G++\", 1, 1, 0, 0 },\n #endif\n #ifdef LOCAL_INCLUDE_DIR\n     /* /usr/local/include comes before the fixincluded header files.  */\n-    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1 },\n+    { LOCAL_INCLUDE_DIR, 0, 0, 1, 1, 0 },\n #endif\n #ifdef PREFIX_INCLUDE_DIR\n-    { PREFIX_INCLUDE_DIR, 0, 0, 1, 0 },\n+    { PREFIX_INCLUDE_DIR, 0, 0, 1, 0, 0 },\n #endif\n #ifdef GCC_INCLUDE_DIR\n     /* This is the dir for fixincludes and for gcc's private headers.  */\n-    { GCC_INCLUDE_DIR, \"GCC\", 0, 0, 0 },\n+    { GCC_INCLUDE_DIR, \"GCC\", 0, 0, 0, 0 },\n #endif\n #ifdef CROSS_INCLUDE_DIR\n     /* One place the target system's headers might be.  */\n-    { CROSS_INCLUDE_DIR, \"GCC\", 0, 0, 0 },\n+    { CROSS_INCLUDE_DIR, \"GCC\", 0, 0, 0, 0 },\n #endif\n #ifdef TOOL_INCLUDE_DIR\n     /* Another place the target system's headers might be.  */\n-    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1, 0 },\n+    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 1, 0, 0 },\n #endif\n #ifdef SYSTEM_INCLUDE_DIR\n     /* Some systems have an extra dir of include files.  */\n-    { SYSTEM_INCLUDE_DIR, 0, 0, 0, 1 },\n+    { SYSTEM_INCLUDE_DIR, 0, 0, 0, 1, 0 },\n #endif\n #ifdef STANDARD_INCLUDE_DIR\n     /* /usr/include comes dead last.  */\n-    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0, 1 },\n+    { STANDARD_INCLUDE_DIR, STANDARD_INCLUDE_COMPONENT, 0, 0, 1, 0 },\n #endif\n-    { 0, 0, 0, 0, 0 }\n+    { 0, 0, 0, 0, 0, 0 }\n   };\n #endif /* no INCLUDE_DEFAULTS */\n "}, {"sha": "a3a2416955475f1f5cfdcb16ce45d5b6fa371617", "filename": "gcc/cppdefault.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fcppdefault.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fcppdefault.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.h?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,6 +1,6 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2003, 2004 Free Software Foundation, Inc.\n+   1999, 2000, 2003, 2004, 2006 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -43,6 +43,9 @@ struct default_include\n \t\t\t\t   C++.  */\n   const char add_sysroot;\t/* FNAME should be prefixed by\n \t\t\t\t   cpp_SYSROOT.  */\n+  const char multilib;\t\t/* FNAME should have the multilib path\n+\t\t\t\t   specified with -imultilib\n+\t\t\t\t   appended.  */\n };\n \n extern const struct default_include cpp_include_defaults[];"}, {"sha": "06ca0b908801c87ce4ea42d53f48358bcaaec93d", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+@c Copyright (c) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n @c Free Software Foundation, Inc.\n @c This is part of the CPP and GCC manuals.\n @c For copying conditions, see the file gcc.texi.\n@@ -483,6 +483,11 @@ would; @option{-iwithprefix} puts it where @option{-idirafter} would.\n This option is like the @option{--sysroot} option, but applies only to\n header files.  See the @option{--sysroot} option for more information.\n \n+@item -imultilib @var{dir}\n+@opindex imultilib\n+Use @var{dir} as a subdirectory of the directory containing\n+target-specific C++ headers.\n+\n @item -isystem @var{dir}\n @opindex isystem\n Search @var{dir} for header files, after all directories specified by"}, {"sha": "1e5a21670777f851882095ea911b189bf50d5891", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -9,8 +9,8 @@\n @c man end\n \n @c man begin COPYRIGHT\n-Copyright @copyright{} 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+Copyright @copyright{} 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.2 or\n@@ -358,7 +358,7 @@ Objective-C and Objective-C++ Dialects}.\n -include @var{file}  -imacros @var{file} @gol\n -iprefix @var{file}  -iwithprefix @var{dir} @gol\n -iwithprefixbefore @var{dir}  -isystem @var{dir} @gol\n--isysroot @var{dir} @gol\n+-imultilib @var{dir} -isysroot @var{dir} @gol\n -M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  @gol\n -P  -fworking-directory  -remap @gol\n -trigraphs  -undef  -U@var{macro}  -Wp,@var{option} @gol\n@@ -6862,9 +6862,9 @@ C@.\n \n @item %I\n Substitute any of @option{-iprefix} (made from @env{GCC_EXEC_PREFIX}),\n-@option{-isysroot} (made from @env{TARGET_SYSTEM_ROOT}), and\n+@option{-isysroot} (made from @env{TARGET_SYSTEM_ROOT}),\n @option{-isystem} (made from @env{COMPILER_PATH} and @option{-B} options)\n-as necessary.\n+and @option{-imultilib} as necessary.\n \n @item %s\n Current argument is the name of a library or startup file of some sort."}, {"sha": "0bd34eea40cddcf0b94529998011f25b8ebdd08a", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,6 +1,6 @@\n /* Compiler driver program that can handle many languages.\n    Copyright (C) 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation,\n    Inc.\n \n This file is part of GCC.\n@@ -441,8 +441,8 @@ or with constant text in a single argument.\n \tSUFFIX characters following %O as they would following, for\n \texample, `.o'.\n  %I\tSubstitute any of -iprefix (made from GCC_EXEC_PREFIX), -isysroot\n-\t(made from TARGET_SYSTEM_ROOT), and -isystem (made from COMPILER_PATH\n-\tand -B options) as necessary.\n+\t(made from TARGET_SYSTEM_ROOT), -isystem (made from COMPILER_PATH\n+\tand -B options) and -imultilib as necessary.\n  %s     current argument is the name of a library or startup file of some sort.\n         Search for that file in a standard list of directories\n \tand substitute the full name found.\n@@ -3535,7 +3535,7 @@ process_command (int argc, const char **argv)\n \t{\n \t  /* translate_options () has turned --version into -fversion.  */\n \t  printf (_(\"%s (GCC) %s\\n\"), programname, version_string);\n-\t  printf (\"Copyright %s 2005 Free Software Foundation, Inc.\\n\",\n+\t  printf (\"Copyright %s 2006 Free Software Foundation, Inc.\\n\",\n \t\t  _(\"(C)\"));\n \t  fputs (_(\"This is free software; see the source for copying conditions.  There is NO\\n\\\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"),\n@@ -4947,6 +4947,15 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    {\n \t      struct spec_path_info info;\n \n+\t      if (multilib_dir)\n+\t\t{\n+\t\t  do_spec_1 (\"-imultilib\", 1, NULL);\n+\t\t  /* Make this a separate argument.  */\n+\t\t  do_spec_1 (\" \", 0, NULL);\n+\t\t  do_spec_1 (multilib_dir, 1, NULL);\n+\t\t  do_spec_1 (\" \", 0, NULL);\n+\t\t}\n+\n \t      if (gcc_exec_prefix)\n \t\t{\n \t\t  do_spec_1 (\"-iprefix\", 1, NULL);"}, {"sha": "b88a3b6f7c95451bb2f93ea82c0ab66b7a7b9794", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,3 +1,10 @@\n+2006-01-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR libstdc++/25524\n+\t* include/Makefile.am: Install host-specific headers in multilib\n+\tsubdirectory.\n+\t* include/Makefile.in: Regenerate.\n+\n 2006-01-19  Paolo Carlini  <pcarlini@suse.de>\n \n \tImplement list::splice (and merge) bits of N1599"}, {"sha": "046207501e59b70fc173fdeac657dfe108d1824d", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -1,6 +1,7 @@\n ## Makefile for the include subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+## Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ## Process this file with automake to produce Makefile.in.\n@@ -614,6 +615,7 @@ endif\n \n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits\n+host_installdir = ${gxx_include_dir}/${host_alias}$(MULTISUBDIR)/bits\n host_headers = \\\n \t${host_srcdir}/ctype_base.h \\\n \t${host_srcdir}/ctype_inline.h \\\n@@ -648,6 +650,7 @@ thread_host_headers = \\\n \n pch_input = ${host_builddir}/stdc++.h\n pch_output_builddir = ${host_builddir}/stdc++.h.gch\n+pch_output_installdir = ${host_installdir}/stdc++.h.gch\n pch_source = ${glibcxx_srcdir}/include/stdc++.h\n PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n if GLIBCXX_BUILD_PCH\n@@ -920,9 +923,9 @@ endif\n # are copied here.\n install-freestanding-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${host_installdir}\n \tfor file in ${host_srcdir}/os_defines.h ${host_builddir}/c++config.h; do \\\n-\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n \t$(INSTALL_DATA) ${std_builddir}/limits $(DESTDIR)${gxx_include_dir}/${std_builddir}\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n@@ -982,15 +985,15 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${debug_builddir}\n \tfor file in ${debug_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${debug_builddir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${host_installdir}\n \tfor file in ${host_headers} ${host_headers_extra} \\\n \t ${thread_host_headers}; do \\\n-\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \n install-pch:\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${pch_output_installdir}\n \tfor file in ${pch_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}; done\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch_output_installdir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = ${pch_input} ${pch_output_builddir}/*"}, {"sha": "49a0f48ab651335fce6d8d3291b6a0495bec502c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6dd222bbb82a052974fa931473702700ecfda9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6dd222bbb82a052974fa931473702700ecfda9/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2b6dd222bbb82a052974fa931473702700ecfda9", "patch": "@@ -828,6 +828,7 @@ debug_headers = \\\n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits\n+host_installdir = ${gxx_include_dir}/${host_alias}$(MULTISUBDIR)/bits\n host_headers = \\\n \t${host_srcdir}/ctype_base.h \\\n \t${host_srcdir}/ctype_inline.h \\\n@@ -864,6 +865,7 @@ thread_host_headers = \\\n \n pch_input = ${host_builddir}/stdc++.h\n pch_output_builddir = ${host_builddir}/stdc++.h.gch\n+pch_output_installdir = ${host_installdir}/stdc++.h.gch\n pch_source = ${glibcxx_srcdir}/include/stdc++.h\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n @GLIBCXX_BUILD_PCH_FALSE@pch_build = \n@@ -1293,9 +1295,9 @@ ${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n # are copied here.\n install-freestanding-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${host_installdir}\n \tfor file in ${host_srcdir}/os_defines.h ${host_builddir}/c++config.h; do \\\n-\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${std_builddir}\n \t$(INSTALL_DATA) ${std_builddir}/limits $(DESTDIR)${gxx_include_dir}/${std_builddir}\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${c_base_builddir}\n@@ -1355,15 +1357,15 @@ install-headers:\n \t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${debug_builddir}\n \tfor file in ${debug_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${debug_builddir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${host_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${host_installdir}\n \tfor file in ${host_headers} ${host_headers_extra} \\\n \t ${thread_host_headers}; do \\\n-\t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${host_builddir}; done\n+\t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \n install-pch:\n-\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${pch_output_installdir}\n \tfor file in ${pch_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}; done\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch_output_installdir}; done\n \n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled"}]}