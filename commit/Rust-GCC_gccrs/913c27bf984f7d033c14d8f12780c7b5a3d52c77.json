{"sha": "913c27bf984f7d033c14d8f12780c7b5a3d52c77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzYzI3YmY5ODRmN2QwMzNjMTRkOGYxMjc4MGM3YjVhM2Q1MmM3Nw==", "commit": {"author": {"name": "Brent Verner", "email": "brent@rcfile.org", "date": "2000-06-26T20:21:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-26T20:21:34Z"}, "message": "string.tcc (string::rfind): Fix.\n\n\n2000-06-13  Brent Verner <brent@rcfile.org>\n\n\t* bits/string.tcc (string::rfind): Fix.\n\t* testsuite/21_strings/rfind.cc: New file.\n\nFrom-SVN: r34718", "tree": {"sha": "7c409926fcd6a060ac324d60607f904a62b55d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c409926fcd6a060ac324d60607f904a62b55d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/913c27bf984f7d033c14d8f12780c7b5a3d52c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913c27bf984f7d033c14d8f12780c7b5a3d52c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913c27bf984f7d033c14d8f12780c7b5a3d52c77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913c27bf984f7d033c14d8f12780c7b5a3d52c77/comments", "author": null, "committer": null, "parents": [{"sha": "7d9d8943c9a920f25b1b0319dc201de1a280c412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9d8943c9a920f25b1b0319dc201de1a280c412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9d8943c9a920f25b1b0319dc201de1a280c412"}], "stats": {"total": 126, "additions": 126, "deletions": 0}, "files": [{"sha": "eb54295ee7dae3d59ca9a4a16201d93f68d44b6f", "filename": "libstdc++-v3/testsuite/21_strings/rfind.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913c27bf984f7d033c14d8f12780c7b5a3d52c77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Frfind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913c27bf984f7d033c14d8f12780c7b5a3d52c77/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Frfind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Frfind.cc?ref=913c27bf984f7d033c14d8f12780c7b5a3d52c77", "patch": "@@ -0,0 +1,126 @@\n+// 2000-06-22 -=dbv=-  (shamelessy copied from bkoz' find.cc)\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <string>\n+#include <stdexcept>\n+#ifdef DEBUG_ASSERT\n+#include <assert.h>\n+#endif\n+\n+// 21.3.6.2 basic_string rfind\n+bool test01(void)\n+{\n+  bool test = true;\n+  typedef std::string::size_type csize_type;\n+  typedef std::string::const_reference cref;\n+  typedef std::string::reference ref;\n+  csize_type npos = std::string::npos;\n+  csize_type csz01, csz02;\n+\n+  const char str_lit01[] = \"mave\";\n+  const std::string str01(\"mavericks, santa cruz\");\n+  std::string str02(str_lit01);\n+  std::string str03(\"s, s\");\n+  std::string str04;\n+\n+  // size_type rfind(const string&, size_type pos = 0) const;\n+  csz01 = str01.rfind(str01);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str01, 4);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str02,3);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str02);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str03);\n+  test &= csz01 == 8;\n+  csz01 = str01.rfind(str03, 3);\n+  test &= csz01 == npos;\n+  csz01 = str01.rfind(str03, 12);\n+  test &= csz01 == 8;\n+\n+  // An empty string consists of no characters\n+  // therefore it should be found at every point in a string,\n+  // except beyond the end\n+  csz01 = str01.rfind(str04, 0);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str04, 5);\n+  test &= csz01 == 5;\n+  csz01 = str01.rfind(str04, str01.size());\n+  test &= csz01 == str01.size();\n+  csz01 = str01.rfind(str04, str01.size()+1);\n+  test &= csz01 == str01.size();\n+\n+  // size_type rfind(const char* s, size_type pos, size_type n) const;\n+  csz01 = str01.rfind(str_lit01, 0, 3);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str_lit01, 3, 0);\n+  test &= csz01 == 3;\n+\n+  // size_type rfind(const char* s, size_type pos = 0) const;\n+  csz01 = str01.rfind(str_lit01);\n+  test &= csz01 == 0;\n+  csz01 = str01.rfind(str_lit01, 3);\n+  test &= csz01 == 0;\n+\n+  // size_type rfind(char c, size_type pos = 0) const;\n+  csz01 = str01.rfind('z');\n+  csz02 = str01.size() - 1;\n+  test &= csz01 == csz02;\n+  csz01 = str01.rfind('/');\n+  test &= csz01 == npos;\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+// 21.3.6.4 basic_string::find_last_of\n+bool test02()\n+{\n+  bool test = true;\n+\n+  // test find_last_of\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n+// 21.3.6.6 basic_string::find_last_not_of\n+bool test03()\n+{\n+  bool test = true;\n+\n+  // test find_last_not_of\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}