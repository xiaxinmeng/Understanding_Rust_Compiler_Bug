{"sha": "e069285cdf457cc85070e522380c4e25b0d2ed25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2OTI4NWNkZjQ1N2NjODUwNzBlNTIyMzgwYzRlMjViMGQyZWQyNQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-29T13:44:09Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-29T13:44:09Z"}, "message": "c++: constexpr ctor with RANGE_EXPR index [PR95241]\n\nIn the testcase below, the CONSTRUCTOR for 'field' contains a RANGE_EXPR\nindex:\n\n  {{aggr_init_expr<...>, [1...2]={.off=1}}}\n\nbut get_or_insert_ctor_field isn't prepared to handle looking up a\nRANGE_EXPR index.\n\nThis patch adds limited support to get_or_insert_ctor_field for looking\nup a RANGE_EXPR index.  The limited scope of this patch should make it\nmore suitable for backporting, and more extensive support would be\nneeded only to handle self-modifying CONSTRUCTORs that contain a\nRANGE_EXPR index, but I haven't yet been able to come up with a testcase\nthat actually creates such a CONSTRUCTOR.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95241\n\t* constexpr.c (get_or_insert_ctor_field): Add limited support\n\tfor RANGE_EXPR index lookups.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95241\n\t* g++.dg/cpp0x/constexpr-array25.C: New test.", "tree": {"sha": "8995b8d5e7269134952bc3393cbdc82250e983d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8995b8d5e7269134952bc3393cbdc82250e983d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e069285cdf457cc85070e522380c4e25b0d2ed25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e069285cdf457cc85070e522380c4e25b0d2ed25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e069285cdf457cc85070e522380c4e25b0d2ed25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e069285cdf457cc85070e522380c4e25b0d2ed25/comments", "author": null, "committer": null, "parents": [{"sha": "c92716b2b1d117a803775a2e2336b751050ff7c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92716b2b1d117a803775a2e2336b751050ff7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92716b2b1d117a803775a2e2336b751050ff7c2"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "959f0254d09d7f38c4609454b817e66fbd2ae178", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e069285cdf457cc85070e522380c4e25b0d2ed25/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e069285cdf457cc85070e522380c4e25b0d2ed25/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e069285cdf457cc85070e522380c4e25b0d2ed25", "patch": "@@ -3299,6 +3299,22 @@ get_or_insert_ctor_field (tree ctor, tree index, int pos_hint = -1)\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE || TREE_CODE (type) == VECTOR_TYPE)\n     {\n+      if (TREE_CODE (index) == RANGE_EXPR)\n+\t{\n+\t  /* Support for RANGE_EXPR index lookups is currently limited to\n+\t     accessing an existing element via POS_HINT, or appending a new\n+\t     element to the end of CTOR.  ??? Support for other access\n+\t     patterns may also be needed.  */\n+\t  vec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (ctor);\n+\t  if (vec_safe_length (elts))\n+\t    {\n+\t      tree lo = TREE_OPERAND (index, 0);\n+\t      gcc_assert (array_index_cmp (elts->last().index, lo) < 0);\n+\t    }\n+\t  CONSTRUCTOR_APPEND_ELT (elts, index, NULL_TREE);\n+\t  return &elts->last();\n+\t}\n+\n       HOST_WIDE_INT i = find_array_ctor_elt (ctor, index, /*insert*/true);\n       gcc_assert (i >= 0);\n       constructor_elt *cep = CONSTRUCTOR_ELT (ctor, i);"}, {"sha": "9162943249f09ab5c5ddfb72177701a1891eddca", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array25.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e069285cdf457cc85070e522380c4e25b0d2ed25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e069285cdf457cc85070e522380c4e25b0d2ed25/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array25.C?ref=e069285cdf457cc85070e522380c4e25b0d2ed25", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/95241\n+// { dg-do compile { target c++11 } }\n+\n+struct Fragment\n+{\n+  int off;\n+  constexpr Fragment(int _off) : off(_off) { }\n+  constexpr Fragment() : Fragment(1) { }\n+};\n+\n+struct Field\n+{\n+  Fragment fragments[3];\n+  constexpr Field(int off) : fragments{{off}} { }\n+};\n+\n+constexpr Field field{0};\n+\n+static_assert(field.fragments[0].off == 0\n+\t      && field.fragments[1].off == 1\n+\t      && field.fragments[2].off == 1, \"\");"}]}