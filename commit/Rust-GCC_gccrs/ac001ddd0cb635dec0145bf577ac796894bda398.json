{"sha": "ac001ddd0cb635dec0145bf577ac796894bda398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwMDFkZGQwY2I2MzVkZWMwMTQ1YmY1NzdhYzc5Njg5NGJkYTM5OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-12T00:45:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-12T02:30:24Z"}, "message": "c++: variadic lambda template and empty pack [PR97246]\n\nIn get<0>, Is is empty, so the first parameter pack of the lambda is empty,\nbut after the fix for PR94546 we were wrongly associating it with the\npartial instantiation of 'v'.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97246\n\tPR c++/94546\n\t* pt.c (extract_fnparm_pack): Check DECL_PACK_P here.\n\t(register_parameter_specializations): Not here.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97246\n\t* g++.dg/cpp2a/lambda-generic-variadic21.C: New test.", "tree": {"sha": "b2dd09bcb741231c42f1e6065a6d61c9ed0b566d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2dd09bcb741231c42f1e6065a6d61c9ed0b566d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac001ddd0cb635dec0145bf577ac796894bda398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac001ddd0cb635dec0145bf577ac796894bda398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac001ddd0cb635dec0145bf577ac796894bda398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac001ddd0cb635dec0145bf577ac796894bda398/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2f329e94830e7c1861c590f661c25f7465bb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2f329e94830e7c1861c590f661c25f7465bb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2f329e94830e7c1861c590f661c25f7465bb7c"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "50cdb00310f67b618cbdc27bac3f03f229282e12", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac001ddd0cb635dec0145bf577ac796894bda398/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac001ddd0cb635dec0145bf577ac796894bda398/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ac001ddd0cb635dec0145bf577ac796894bda398", "patch": "@@ -12302,29 +12302,40 @@ extract_fnparm_pack (tree tmpl_parm, tree *spec_p)\n {\n   /* Collect all of the extra \"packed\" parameters into an\n      argument pack.  */\n-  tree parmvec;\n-  tree argpack = make_node (NONTYPE_ARGUMENT_PACK);\n+  tree argpack;\n   tree spec_parm = *spec_p;\n-  int i, len;\n+  int len;\n \n   for (len = 0; spec_parm; ++len, spec_parm = TREE_CHAIN (spec_parm))\n     if (tmpl_parm\n \t&& !function_parameter_expanded_from_pack_p (spec_parm, tmpl_parm))\n       break;\n \n-  /* Fill in PARMVEC and PARMTYPEVEC with all of the parameters.  */\n-  parmvec = make_tree_vec (len);\n   spec_parm = *spec_p;\n-  for (i = 0; i < len; i++, spec_parm = DECL_CHAIN (spec_parm))\n+  if (len == 1 && DECL_PACK_P (spec_parm))\n     {\n-      tree elt = spec_parm;\n-      if (DECL_PACK_P (elt))\n-\telt = make_pack_expansion (elt);\n-      TREE_VEC_ELT (parmvec, i) = elt;\n+      /* The instantiation is still a parameter pack; don't wrap it in a\n+\t NONTYPE_ARGUMENT_PACK.  */\n+      argpack = spec_parm;\n+      spec_parm = DECL_CHAIN (spec_parm);\n     }\n+  else\n+    {\n+      /* Fill in PARMVEC with all of the parameters.  */\n+      tree parmvec = make_tree_vec (len);\n+      argpack = make_node (NONTYPE_ARGUMENT_PACK);\n+      for (int i = 0; i < len; i++)\n+\t{\n+\t  tree elt = spec_parm;\n+\t  if (DECL_PACK_P (elt))\n+\t    elt = make_pack_expansion (elt);\n+\t  TREE_VEC_ELT (parmvec, i) = elt;\n+\t  spec_parm = DECL_CHAIN (spec_parm);\n+\t}\n \n-  /* Build the argument packs.  */\n-  SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n+      /* Build the argument packs.  */\n+      SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n+    }\n   *spec_p = spec_parm;\n \n   return argpack;\n@@ -25716,8 +25727,7 @@ register_parameter_specializations (tree pattern, tree inst)\n     }\n   for (; tmpl_parm; tmpl_parm = DECL_CHAIN (tmpl_parm))\n     {\n-      if (!DECL_PACK_P (tmpl_parm)\n-\t  || (spec_parm && DECL_PACK_P (spec_parm)))\n+      if (!DECL_PACK_P (tmpl_parm))\n \t{\n \t  register_local_specialization (spec_parm, tmpl_parm);\n \t  spec_parm = DECL_CHAIN (spec_parm);"}, {"sha": "d6b5656e5dbfc97e1b095899bcd82b0d91313000", "filename": "gcc/testsuite/g++.dg/cpp2a/lambda-generic-variadic21.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac001ddd0cb635dec0145bf577ac796894bda398/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac001ddd0cb635dec0145bf577ac796894bda398/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Flambda-generic-variadic21.C?ref=ac001ddd0cb635dec0145bf577ac796894bda398", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/97246\n+// { dg-do compile { target c++20 } }\n+\n+template <int... Is, typename T>\n+T arg_T(decltype(Is)..., T, ...);\n+\n+template <int I, int... Is>\n+inline constexpr auto get =\n+ []<typename... T>(decltype(Is)..., T... v, ...) {\n+   static_assert( sizeof...(T) == sizeof...(v) );\n+   if constexpr ( sizeof...(T) == 1 )\n+     return (v,...);\n+   else {\n+     using V = decltype(arg_T<__integer_pack(I)...>(v...));\n+     return get<I,__integer_pack(I)...>.template operator()<V>(v...);\n+   }\n+ };\n+\n+static_assert( get<0>('\\0', short{1}, 2, long{3}) == 0 );"}]}