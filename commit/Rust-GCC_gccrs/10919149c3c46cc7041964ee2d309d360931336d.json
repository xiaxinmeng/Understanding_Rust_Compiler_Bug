{"sha": "10919149c3c46cc7041964ee2d309d360931336d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5MTkxNDljM2M0NmNjNzA0MTk2NGVlMmQzMDlkMzYwOTMxMzM2ZA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-03-15T13:09:32Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-03-15T13:09:32Z"}, "message": "class.c (make_class): Don't set CLASS_P here (because this function is also called by...\n\nT\n\t* class.c (make_class):  Don't set CLASS_P here (because\n\tthis function is also called by build_java_array_type).\n\t(push_class):  Set CLASS_P here instead.\n\t* parse.h (TYPE_CLASS_P):  Check for TYPE_ARRAY_P is redundant.\n\t* jcf-dump.c (print_access_flags):  Take extra parameter to indicate\n\tcontext.  If the context is class, perfer \"super\" over \"synchronized\".\n\t* jcf-write.c (generate_classfile):  Don't add ACC_SUPER if interface.\n\t* parse.y (create_class):  Don't call parser_check_super here;\n\tit is not robust.  Always wait until later.\n\t* parse.y (method_header):  For interfaces, set ACC_ABSTRACT (to\n\tmatch what JDK 1.2 does), but don't set ACC_PUBLIC.\n\nFrom-SVN: r25782", "tree": {"sha": "331d8a0faeead45fd6b4528fac827387144307c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/331d8a0faeead45fd6b4528fac827387144307c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10919149c3c46cc7041964ee2d309d360931336d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10919149c3c46cc7041964ee2d309d360931336d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10919149c3c46cc7041964ee2d309d360931336d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10919149c3c46cc7041964ee2d309d360931336d/comments", "author": null, "committer": null, "parents": [{"sha": "b5d51daa7ebfe61e0d7f7d1893f43cc56221da22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d51daa7ebfe61e0d7f7d1893f43cc56221da22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d51daa7ebfe61e0d7f7d1893f43cc56221da22"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "1ab753a7da2abbbec9a1762b3e5d624d2973f662", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10919149c3c46cc7041964ee2d309d360931336d/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10919149c3c46cc7041964ee2d309d360931336d/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=10919149c3c46cc7041964ee2d309d360931336d", "patch": "@@ -128,7 +128,6 @@ make_class ()\n #else\n   TYPE_BINFO (type) = make_tree_vec (6);\n #endif\n-  CLASS_P (type) = 1;\n   pop_obstacks ();\n \n   return type;\n@@ -157,6 +156,7 @@ push_class (class_type, class_name)\n   int save_lineno = lineno;\n   tree source_name = identifier_subst (class_name, \"\", '.', '/', \".java\");\n   push_obstacks (&permanent_obstack, &permanent_obstack);\n+  CLASS_P (class_type) = 1;\n   input_filename = IDENTIFIER_POINTER (source_name);\n   lineno = 0;\n   decl = build_decl (TYPE_DECL, class_name, class_type);"}]}