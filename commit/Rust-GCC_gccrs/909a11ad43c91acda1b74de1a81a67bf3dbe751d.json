{"sha": "909a11ad43c91acda1b74de1a81a67bf3dbe751d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5YTExYWQ0M2M5MWFjZGExYjc0ZGUxYTgxYTY3YmYzZGJlNzUxZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-06-04T07:10:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-06-04T07:10:58Z"}, "message": "re PR c++/70202 (ICE on invalid code on x86_64-linux-gnu in build_simple_base_path, at cp/class.c:579)\n\n/cp\n2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70202\n\t* parser.c (cp_parser_class_head): When xref_basetypes fails and\n\temits an error do not zero the type.\n\n/testsuite\n2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/70202\n\t* g++.dg/inherit/crash5.C: New.\n\t* g++.dg/inherit/virtual1.C: Adjust.\n\nFrom-SVN: r237089", "tree": {"sha": "37289a706dfdb57baeedcfe25a9a8a3bfb1970af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37289a706dfdb57baeedcfe25a9a8a3bfb1970af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/909a11ad43c91acda1b74de1a81a67bf3dbe751d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909a11ad43c91acda1b74de1a81a67bf3dbe751d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909a11ad43c91acda1b74de1a81a67bf3dbe751d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909a11ad43c91acda1b74de1a81a67bf3dbe751d/comments", "author": null, "committer": null, "parents": [{"sha": "c389d3496ad217dbce58cc90c7cc7c7d31b40d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c389d3496ad217dbce58cc90c7cc7c7d31b40d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c389d3496ad217dbce58cc90c7cc7c7d31b40d81"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "b6c0c98310b21bf2ca1c9f676b5c423fbdabfcf1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=909a11ad43c91acda1b74de1a81a67bf3dbe751d", "patch": "@@ -1,3 +1,9 @@\n+2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70202\n+\t* parser.c (cp_parser_class_head): When xref_basetypes fails and\n+\temits an error do not zero the type.\n+\n 2016-06-03  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/27100"}, {"sha": "2fccc5acf01c6ec05dd38ee9647b12205c47a916", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=909a11ad43c91acda1b74de1a81a67bf3dbe751d", "patch": "@@ -22050,9 +22050,8 @@ cp_parser_class_head (cp_parser* parser,\n \n   /* If we're really defining a class, process the base classes.\n      If they're invalid, fail.  */\n-  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)\n-      && !xref_basetypes (type, bases))\n-    type = NULL_TREE;\n+  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n+    xref_basetypes (type, bases);\n \n  done:\n   /* Leave the scope given by the nested-name-specifier.  We will"}, {"sha": "94b4a33dd41ed5aa46ba058e55cdd985deb306c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=909a11ad43c91acda1b74de1a81a67bf3dbe751d", "patch": "@@ -1,3 +1,9 @@\n+2016-06-04  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/70202\n+\t* g++.dg/inherit/crash5.C: New.\n+\t* g++.dg/inherit/virtual1.C: Adjust.\n+\n 2016-06-03  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/71316"}, {"sha": "bce999ccbe5a40aef42d4883b6eca607fc666036", "filename": "gcc/testsuite/g++.dg/inherit/crash5.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fcrash5.C?ref=909a11ad43c91acda1b74de1a81a67bf3dbe751d", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/70202\n+\n+class A\n+{\n+  virtual void foo () { }\n+};\n+class B : public A, A { };  // { dg-error \"duplicate base type\" }\n+\n+B b1, &b2 = b1;\n+A a = b2;"}, {"sha": "1199b815f569a24a2cef2765e0e766c105af810a", "filename": "gcc/testsuite/g++.dg/inherit/virtual1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909a11ad43c91acda1b74de1a81a67bf3dbe751d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual1.C?ref=909a11ad43c91acda1b74de1a81a67bf3dbe751d", "patch": "@@ -5,8 +5,8 @@ struct A\n     virtual ~A() {}\n };\n \n-struct B : A, virtual A {};     // { dg-error \"duplicate base|forward declaration\" }\n+struct B : A, virtual A {};     // { dg-error \"duplicate base\" }\n \n-struct C : A, B {};             // { dg-error \"duplicate base|invalid use\" }\n+struct C : A, B {};             // { dg-error \"duplicate base\" }\n \n-C c;                            // { dg-error \"aggregate\" }\n+C c;"}]}