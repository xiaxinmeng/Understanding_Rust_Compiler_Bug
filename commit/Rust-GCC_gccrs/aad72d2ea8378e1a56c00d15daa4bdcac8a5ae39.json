{"sha": "aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkNzJkMmVhODM3OGUxYTU2YzAwZDE1ZGFhNGJkY2FjOGE1YWUzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-06-22T08:09:01Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-07T09:47:57Z"}, "message": "inline: do not einline when no_profile_instrument_function is different\n\n\tPR gcov-profile/80223\n\ngcc/ChangeLog:\n\n\t* ipa-inline.c (can_inline_edge_p): Similarly to sanitizer\n\toptions, do not inline when no_profile_instrument_function\n\tattributes are different in early inliner. It's fine to inline\n\tit after PGO instrumentation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/no_profile_instrument_function-attr-2.c: New test.", "tree": {"sha": "014cea958a00d2af2df6d7a5fa2e79925068c582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/014cea958a00d2af2df6d7a5fa2e79925068c582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f387ff788f63c1974479644edae728047f843ec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f387ff788f63c1974479644edae728047f843ec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f387ff788f63c1974479644edae728047f843ec4"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "012b326b5e9fdc2c6cedb7a9fce57978012a94dd", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "patch": "@@ -396,6 +396,23 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_SANITIZE_ATTRIBUTE_MISMATCH;\n       inlinable = false;\n     }\n+  else if (profile_arc_flag\n+\t   && (lookup_attribute (\"no_profile_instrument_function\",\n+\t\t\t\t DECL_ATTRIBUTES (caller->decl)) == NULL_TREE)\n+\t   != (lookup_attribute (\"no_profile_instrument_function\",\n+\t\t\t\t DECL_ATTRIBUTES (callee->decl)) == NULL_TREE))\n+    {\n+      cgraph_node *origin = caller;\n+      while (origin->clone_of)\n+\torigin = origin->clone_of;\n+\n+      if (!DECL_STRUCT_FUNCTION (origin->decl)->always_inline_functions_inlined)\n+\t{\n+\t  e->inline_failed = CIF_UNSPECIFIED;\n+\t  inlinable = false;\n+\t}\n+    }\n+\n   if (!inlinable && report)\n     report_inline_failed_reason (e);\n   return inlinable;"}, {"sha": "472eca88efdda9e9e59b303dffe48da3122e2cc1", "filename": "gcc/testsuite/gcc.dg/no_profile_instrument_function-attr-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fno_profile_instrument_function-attr-2.c?ref=aad72d2ea8378e1a56c00d15daa4bdcac8a5ae39", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-require-effective-target global_constructor } */\n+/* { dg-options \"-O2 -fprofile-generate -fprofile-update=single -fdump-tree-optimized\" } */\n+\n+__attribute__ ((no_profile_instrument_function))\n+int foo()\n+{\n+  return 0;\n+}\n+\n+int bar()\n+{\n+  return foo();\n+}\n+\n+/* { dg-final { scan-tree-dump-not\" = foo \\\\(\\\\)\" \"optimized\"} } */"}]}