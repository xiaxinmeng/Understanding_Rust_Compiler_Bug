{"sha": "6f7ccafa919acbae98e82871e122fb39593cc52a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3Y2NhZmE5MTlhY2JhZTk4ZTgyODcxZTEyMmZiMzk1OTNjYzUyYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-21T18:22:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-21T18:22:05Z"}, "message": "runtime: GOARCH values for ppc64 BE & LE\n\nppc64 for BE\nppc64le for LE\nissue 8654\n\nFrom-SVN: r217941", "tree": {"sha": "cc0447c3026814b91fce5321db5213fb5eeea0f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0447c3026814b91fce5321db5213fb5eeea0f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f7ccafa919acbae98e82871e122fb39593cc52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7ccafa919acbae98e82871e122fb39593cc52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7ccafa919acbae98e82871e122fb39593cc52a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7ccafa919acbae98e82871e122fb39593cc52a/comments", "author": null, "committer": null, "parents": [{"sha": "12829505f233db52f7f552f1a104ecd3cac8de88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12829505f233db52f7f552f1a104ecd3cac8de88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12829505f233db52f7f552f1a104ecd3cac8de88"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "ae98e3d187db6ed9053fbceaa9927719a5ec88ba", "filename": "libgo/configure", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=6f7ccafa919acbae98e82871e122fb39593cc52a", "patch": "@@ -637,6 +637,8 @@ LIBGO_IS_S390X_FALSE\n LIBGO_IS_S390X_TRUE\n LIBGO_IS_S390_FALSE\n LIBGO_IS_S390_TRUE\n+LIBGO_IS_PPC64LE_FALSE\n+LIBGO_IS_PPC64LE_TRUE\n LIBGO_IS_PPC64_FALSE\n LIBGO_IS_PPC64_TRUE\n LIBGO_IS_PPC_FALSE\n@@ -11119,7 +11121,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11122 \"configure\"\n+#line 11124 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11225,7 +11227,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11228 \"configure\"\n+#line 11230 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13622,6 +13624,7 @@ is_m68k=no\n mips_abi=unknown\n is_ppc=no\n is_ppc64=no\n+is_ppc64le=no\n is_s390=no\n is_s390x=no\n is_sparc=no\n@@ -13733,14 +13736,28 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n _ACEOF\n if ac_fn_c_try_compile \"$LINENO\"; then :\n   is_ppc=yes\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#if defined(_BIG_ENDIAN) || defined(__BIG_ENDIAN__)\n+#error 64be\n+#endif\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  is_ppc64le=yes\n else\n   is_ppc64=yes\n fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     if test \"$is_ppc\" = \"yes\"; then\n       GOARCH=ppc\n-    else\n+    elif test \"$is_ppc64\" = \"yes\"; then\n       GOARCH=ppc64\n+    else\n+      GOARCH=ppc64le\n     fi\n     ;;\n   s390*-*-*)\n@@ -13880,6 +13897,14 @@ else\n   LIBGO_IS_PPC64_FALSE=\n fi\n \n+ if test $is_ppc64le = yes; then\n+  LIBGO_IS_PPC64LE_TRUE=\n+  LIBGO_IS_PPC64LE_FALSE='#'\n+else\n+  LIBGO_IS_PPC64LE_TRUE='#'\n+  LIBGO_IS_PPC64LE_FALSE=\n+fi\n+\n  if test $is_s390 = yes; then\n   LIBGO_IS_S390_TRUE=\n   LIBGO_IS_S390_FALSE='#'\n@@ -15691,6 +15716,10 @@ if test -z \"${LIBGO_IS_PPC64_TRUE}\" && test -z \"${LIBGO_IS_PPC64_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_PPC64\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${LIBGO_IS_PPC64LE_TRUE}\" && test -z \"${LIBGO_IS_PPC64LE_FALSE}\"; then\n+  as_fn_error \"conditional \\\"LIBGO_IS_PPC64LE\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${LIBGO_IS_S390_TRUE}\" && test -z \"${LIBGO_IS_S390_FALSE}\"; then\n   as_fn_error \"conditional \\\"LIBGO_IS_S390\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "6f2c6653130fa02bc5416ff595fb02d7f2a378bd", "filename": "libgo/configure.ac", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=6f7ccafa919acbae98e82871e122fb39593cc52a", "patch": "@@ -194,6 +194,7 @@ is_m68k=no\n mips_abi=unknown\n is_ppc=no\n is_ppc64=no\n+is_ppc64le=no\n is_s390=no\n is_s390x=no\n is_sparc=no\n@@ -266,11 +267,18 @@ changequote([,])dnl\n #ifdef _ARCH_PPC64\n #error 64-bit\n #endif],\n-[is_ppc=yes], [is_ppc64=yes])\n+[is_ppc=yes],\n+    [AC_COMPILE_IFELSE([\n+#if defined(_BIG_ENDIAN) || defined(__BIG_ENDIAN__)\n+#error 64be\n+#endif],\n+[is_ppc64le=yes],[is_ppc64=yes])])\n     if test \"$is_ppc\" = \"yes\"; then\n       GOARCH=ppc\n-    else\n+    elif test \"$is_ppc64\" = \"yes\"; then\n       GOARCH=ppc64\n+    else\n+      GOARCH=ppc64le\n     fi\n     ;;\n   s390*-*-*)\n@@ -310,6 +318,7 @@ AM_CONDITIONAL(LIBGO_IS_MIPSN64, test $mips_abi = n64)\n AM_CONDITIONAL(LIBGO_IS_MIPSO64, test $mips_abi = o64)\n AM_CONDITIONAL(LIBGO_IS_PPC, test $is_ppc = yes)\n AM_CONDITIONAL(LIBGO_IS_PPC64, test $is_ppc64 = yes)\n+AM_CONDITIONAL(LIBGO_IS_PPC64LE, test $is_ppc64le = yes)\n AM_CONDITIONAL(LIBGO_IS_S390, test $is_s390 = yes)\n AM_CONDITIONAL(LIBGO_IS_S390X, test $is_s390x = yes)\n AM_CONDITIONAL(LIBGO_IS_SPARC, test $is_sparc = yes)"}, {"sha": "bde12a553443245d041ea8d4adb1a1961d2b6d2c", "filename": "libgo/go/go/build/syslist.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Fbuild%2Fsyslist.go?ref=6f7ccafa919acbae98e82871e122fb39593cc52a", "patch": "@@ -5,4 +5,4 @@\n package build\n \n const goosList = \"darwin dragonfly freebsd linux nacl netbsd openbsd plan9 solaris windows \"\n-const goarchList = \"386 amd64 amd64p32 arm arm64 alpha m68k mipso32 mipsn32 mipsn64 mipso64 ppc ppc64 s390 s390x sparc sparc64 \"\n+const goarchList = \"386 amd64 amd64p32 arm arm64 alpha m68k mipso32 mipsn32 mipsn64 mipso64 ppc ppc64 ppc64le s390 s390x sparc sparc64 \""}, {"sha": "1bcd4b9d31305956614e39d829ebc58caf9423eb", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7ccafa919acbae98e82871e122fb39593cc52a/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=6f7ccafa919acbae98e82871e122fb39593cc52a", "patch": "@@ -379,7 +379,7 @@ localname() {\n {\n \ttext=\"T\"\n \tcase \"$GOARCH\" in\n-\tppc64) text=\"[TD]\" ;;\n+\tppc64*) text=\"[TD]\" ;;\n \tesac\n \n \tsymtogo='sed -e s/_test/XXXtest/ -e s/.*_\\([^_]*\\.\\)/\\1/ -e s/XXXtest/_test/'"}]}