{"sha": "be7341a882e4ee6d493b2b2940f9cbb37b15d515", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3MzQxYTg4MmU0ZWU2ZDQ5M2IyYjI5NDBmOWNiYjM3YjE1ZDUxNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-04-17T19:27:22Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-04-17T19:27:22Z"}, "message": "re PR go/60870 (go interface methods broken on ppc64le (bug296.go))\n\n\tPR go/60870\n\ncompiler: Don't convert function type for an interface method.\n\nFor an interface method the function type is the type without\nthe receiver, which is wrong since we are passing a receiver.\nThe interface method will always have the correct type in this\ncase, so no type conversion is necessary.\n\nAlso don't do the type conversion when calling a named\nfunction, since in that case the type is also always correct.\n\nThe type can be wrong, and the conversion required, when the\nfunction type refers to itself recursively.\n\nFrom-SVN: r209494", "tree": {"sha": "110581ad40858479d1ae14c54edc2b918166c587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/110581ad40858479d1ae14c54edc2b918166c587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be7341a882e4ee6d493b2b2940f9cbb37b15d515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7341a882e4ee6d493b2b2940f9cbb37b15d515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7341a882e4ee6d493b2b2940f9cbb37b15d515", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7341a882e4ee6d493b2b2940f9cbb37b15d515/comments", "author": null, "committer": null, "parents": [{"sha": "39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39be2171e0fa8da0d5bbfd3aecd11f5709f8f309"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "25718944b7173f58cf7104d345c837afcc178a47", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be7341a882e4ee6d493b2b2940f9cbb37b15d515/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be7341a882e4ee6d493b2b2940f9cbb37b15d515/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=be7341a882e4ee6d493b2b2940f9cbb37b15d515", "patch": "@@ -9619,9 +9619,20 @@ Call_expression::do_get_tree(Translate_context* context)\n       fn = Expression::make_compound(set_closure, fn, location);\n     }\n \n-  Btype* bft = fntype->get_backend_fntype(gogo);\n   Bexpression* bfn = tree_to_expr(fn->get_tree(context));\n-  bfn = gogo->backend()->convert_expression(bft, bfn, location);\n+\n+  // When not calling a named function directly, use a type conversion\n+  // in case the type of the function is a recursive type which refers\n+  // to itself.  We don't do this for an interface method because 1)\n+  // an interface method never refers to itself, so we always have a\n+  // function type here; 2) we pass an extra first argument to an\n+  // interface method, so fntype is not correct.\n+  if (func == NULL && !is_interface_method)\n+    {\n+      Btype* bft = fntype->get_backend_fntype(gogo);\n+      bfn = gogo->backend()->convert_expression(bft, bfn, location);\n+    }\n+\n   Bexpression* call = gogo->backend()->call_expression(bfn, fn_args, location);\n \n   if (this->results_ != NULL)"}]}