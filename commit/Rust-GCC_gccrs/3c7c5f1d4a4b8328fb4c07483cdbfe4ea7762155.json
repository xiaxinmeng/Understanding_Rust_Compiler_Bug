{"sha": "3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3YzVmMWQ0YTRiODMyOGZiNGMwNzQ4M2NkYmZlNGVhNzc2MjE1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-09-18T15:55:45Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-09-18T15:55:45Z"}, "message": "ira: Fix elimination for global hard FPs [PR91957]\n\nIf the hard frame pointer is being used as a global register,\nwe should skip the usual handling for eliminations.  As the\ncomment says, the register cannot in that case be eliminated\n(or eliminated to) and is already marked live where appropriate.\n\nDoing this removes the duplicate error for gcc.target/i386/pr82673.c.\nThe \u201ccannot be used in 'asm' here\u201d message is meant to be for asm\nstatements rather than register asms, and the function that the\nerror is reported against doesn't use asm.\n\ngcc/\n2020-09-18  Richard Sandiford  <richard.sandiford@arm.com>\n\n\tPR middle-end/91957\n\t* ira.c (ira_setup_eliminable_regset): Skip the special elimination\n\thandling of the hard frame pointer if the hard frame pointer is fixed.\n\ngcc/testsuite/\n2020-09-18  H.J. Lu  <hjl.tools@gmail.com>\n\t    Richard Sandiford  <richard.sandiford@arm.com>\n\n\tPR middle-end/91957\n\t* g++.target/i386/pr97054.C: New test.\n\t* gcc.target/i386/pr82673.c: Remove redundant extra message.", "tree": {"sha": "0f8006892f070e8f42d6c46084958d9cf64b5320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8006892f070e8f42d6c46084958d9cf64b5320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89e9bfac36d45dcf82c462ce51163b0b196cc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89e9bfac36d45dcf82c462ce51163b0b196cc45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89e9bfac36d45dcf82c462ce51163b0b196cc45"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "27d1b3c857d5d399062bffedffd56c6e7b2df3b4", "filename": "gcc/ira.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "patch": "@@ -2310,8 +2310,12 @@ ira_setup_eliminable_regset (void)\n   if (!HARD_FRAME_POINTER_IS_FRAME_POINTER)\n     {\n       for (i = 0; i < fp_reg_count; i++)\n-\tif (!TEST_HARD_REG_BIT (crtl->asm_clobbers,\n-\t\t\t\tHARD_FRAME_POINTER_REGNUM + i))\n+\tif (global_regs[HARD_FRAME_POINTER_REGNUM + i])\n+\t  /* Nothing to do: the register is already treated as live\n+\t     where appropriate, and cannot be eliminated.  */\n+\t  ;\n+\telse if (!TEST_HARD_REG_BIT (crtl->asm_clobbers,\n+\t\t\t\t     HARD_FRAME_POINTER_REGNUM + i))\n \t  {\n \t    SET_HARD_REG_BIT (eliminable_regset,\n \t\t\t      HARD_FRAME_POINTER_REGNUM + i);"}, {"sha": "d0693af2a42cb0d2578b00727b20e7a6e1e03bb6", "filename": "gcc/testsuite/g++.target/i386/pr97054.C", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr97054.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr97054.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr97054.C?ref=3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "patch": "@@ -0,0 +1,96 @@\n+// { dg-do run { target { ! ia32 } } }\n+// { dg-require-effective-target fstack_protector }\n+// { dg-options \"-O2 -fno-strict-aliasing -msse4.2 -mfpmath=sse -fPIC -fstack-protector-strong -O2\" }\n+\n+struct p2_icode *ipc;\n+register int pars asm(\"r13\");\n+register struct processor *cur_pro asm(\"rbp\");\n+register int a asm(\"rbx\");\n+register int c asm(\"r14\");\n+typedef long lina_t;\n+typedef long la_t;\n+typedef processor processor_t;\n+typedef p2_icode p2_icode_t;\n+typedef enum {\n+  P2_Return_Action_Next,\n+} p2_return_action_t;\n+typedef struct p2_icode {\n+  int ic_Parameters;\n+}  icode_t;\n+extern \"C\" icode_t *x86_log_to_icode_exec(processor_t *, la_t);\n+typedef struct {\n+  icode_t *ipc;\n+} b;\n+typedef struct {\n+  char ma_thread_signal;\n+  int event_counter;\n+  b instrumentation;\n+} d;\n+\n+extern \"C\" lina_t int2linaddr(processor_t *cpu, const p2_icode_t *ic)\n+{\n+  return 0;\n+}\n+\n+typedef struct e {\n+  long i64;\n+  char LMA;\n+} f;\n+\n+struct processor {\n+  d common;\n+  e pc_RIP;\n+  f pc_EFER;\n+  p2_icode_t *saved_ipc;\n+};\n+inline la_t code_lin_to_log(processor_t *, long) { return 0; }\n+void turbo_clear(processor_t *) {}\n+\n+p2_return_action_t p2_ep_REBIND_IPC(void)\n+{\n+  processor_t *cpu = cur_pro;\n+  la_t vaddr = cpu->pc_RIP.i64;\n+  cur_pro->saved_ipc = (p2_icode_t *) ipc;\n+  cur_pro->common.instrumentation.ipc = ipc;\n+  cur_pro->pc_RIP.i64 = code_lin_to_log(cur_pro, int2linaddr(cur_pro, ipc));\n+  turbo_clear(cur_pro);\n+\n+  cpu->saved_ipc = x86_log_to_icode_exec(cur_pro, vaddr);\n+  ipc++;\n+  (cur_pro->common.event_counter -= (1));\n+  if (__builtin_expect((!((cur_pro->common.event_counter <= 0)\n+\t\t\t  | cur_pro->common.ma_thread_signal)), 1))\n+    {\n+      ((pars = ((ipc)->ic_Parameters)));\n+      return P2_Return_Action_Next;\n+    } else {\n+      return (p2_return_action_t) 0;\n+    }\n+  return P2_Return_Action_Next;\n+}\n+\n+struct p2_icode fake_ipc = { 0 };\n+struct processor fake_proc ={{ 0 } };\n+\n+extern \"C\" icode_t *\n+x86_log_to_icode_exec(processor_t *cpu, la_t la)\n+{\n+  return 0;\n+}\n+\n+extern \"C\" void\n+turbo_threshold_reached(processor_t *c, p2_icode_t *i, int s)\n+{\n+}\n+\n+int main()\n+{\n+  if (!__builtin_cpu_supports (\"sse4.2\"))\n+    return 0;\n+  fake_proc.pc_RIP.i64 = 0xbaadc0de;\n+  fake_proc.pc_EFER.LMA = 0xf;\n+  ipc = &fake_ipc;\n+  cur_pro = &fake_proc;\n+  p2_ep_REBIND_IPC();\n+  return 0;\n+}"}, {"sha": "2248295a087e81f72b6067157c15a0bf3ee8470a", "filename": "gcc/testsuite/gcc.target/i386/pr82673.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82673.c?ref=3c7c5f1d4a4b8328fb4c07483cdbfe4ea7762155", "patch": "@@ -9,4 +9,4 @@ void\n bar (void) /* { dg-error \"frame pointer required, but reserved\" } */\n {\n   B = &y;\n-} /* { dg-error \"bp cannot be used in 'asm' here\" } */\n+}"}]}