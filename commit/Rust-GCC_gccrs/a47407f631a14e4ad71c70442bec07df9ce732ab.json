{"sha": "a47407f631a14e4ad71c70442bec07df9ce732ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3NDA3ZjYzMWExNGU0YWQ3MWM3MDQ0MmJlYzA3ZGY5Y2U3MzJhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-04-25T23:04:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-04-25T23:04:16Z"}, "message": "type_traits (struct underlying_type): Add.\n\n2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (struct underlying_type): Add.\n\t* testsuite/20_util/underlying_type/requirements/typedefs-1.cc: New.\n\t* testsuite/20_util/underlying_type/requirements/typedefs-2.cc:\n\tLikewise.\n\t* testsuite/20_util/underlying_type/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline number.\n\nFrom-SVN: r172944", "tree": {"sha": "48945cd71bd2a84817000d24b34676f06c3e713a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48945cd71bd2a84817000d24b34676f06c3e713a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a47407f631a14e4ad71c70442bec07df9ce732ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47407f631a14e4ad71c70442bec07df9ce732ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a47407f631a14e4ad71c70442bec07df9ce732ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47407f631a14e4ad71c70442bec07df9ce732ab/comments", "author": null, "committer": null, "parents": [{"sha": "a0d260fcc5f6fe1a246e8ee40235a825369f3627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d260fcc5f6fe1a246e8ee40235a825369f3627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d260fcc5f6fe1a246e8ee40235a825369f3627"}], "stats": {"total": 146, "additions": 144, "deletions": 2}, "files": [{"sha": "9f39823f149f6be8138e9e25a08f3fe1fd2102c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a47407f631a14e4ad71c70442bec07df9ce732ab", "patch": "@@ -1,3 +1,14 @@\n+2011-04-25  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (struct underlying_type): Add.\n+\t* testsuite/20_util/underlying_type/requirements/typedefs-1.cc: New.\n+\t* testsuite/20_util/underlying_type/requirements/typedefs-2.cc:\n+\tLikewise.\n+\t* testsuite/20_util/underlying_type/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2011-04-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/parallel/multiway_merge.h: Uglify equally_split"}, {"sha": "6d33416c330fdb065dce12a799748d786dd92553", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=a47407f631a14e4ad71c70442bec07df9ce732ab", "patch": "@@ -1581,7 +1581,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;\n     };\n \n-  /// underlying_type (still unimplemented)\n+  /// underlying_type\n+  template<typename _Tp>\n+    struct underlying_type\n+    {\n+      typedef __underlying_type(_Tp) type;\n+    };\n \n   /// declval\n   template<typename _Tp>"}, {"sha": "af1522b7a40ac13a082cf3a10e93e8227c997a59", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=a47407f631a14e4ad71c70442bec07df9ce732ab", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1598 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1603 }\n \n #include <utility>\n "}, {"sha": "159e9bd352c24b508b32dd8bafd3882fe96e2799", "filename": "libstdc++-v3/testsuite/20_util/underlying_type/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Fexplicit_instantiation.cc?ref=a47407f631a14e4ad71c70442bec07df9ce732ab", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef enum E1 : unsigned { }                     test_type1;\n+  typedef enum E2 : char { }                         test_type2;\n+  typedef enum class E3 { }                          test_type3;\n+  typedef enum class E4 : unsigned char { c = 1 }    test_type4;\n+  typedef enum class E5 : int { a = -1, b = 1 }      test_type5;\n+  typedef enum class E6 : long { c = __LONG_MAX__ }  test_type6;  \n+\n+  template struct underlying_type<test_type1>;\n+  template struct underlying_type<test_type2>;\n+  template struct underlying_type<test_type3>;\n+  template struct underlying_type<test_type4>;\n+  template struct underlying_type<test_type5>;\n+  template struct underlying_type<test_type6>;\n+}"}, {"sha": "777a646845eef9a3563c7ad730f38ab23d6e7110", "filename": "libstdc++-v3/testsuite/20_util/underlying_type/requirements/typedefs-1.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-1.cc?ref=a47407f631a14e4ad71c70442bec07df9ce732ab", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  typedef enum E1 : unsigned { }                     test_type1;\n+  typedef enum E2 : char { }                         test_type2;\n+  typedef enum class E3 { }                          test_type3;\n+  typedef enum class E4 : unsigned char { c = 1 }    test_type4;\n+  typedef enum class E5 : int { a = -1, b = 1 }      test_type5;\n+  typedef enum class E6 : long { c = __LONG_MAX__ }  test_type6;  \n+\n+  // Check for required typedef\n+  typedef std::underlying_type<test_type1>::type  type1;\n+  typedef std::underlying_type<test_type2>::type  type2;\n+  typedef std::underlying_type<test_type3>::type  type3;\n+  typedef std::underlying_type<test_type4>::type  type4;\n+  typedef std::underlying_type<test_type5>::type  type5;\n+  typedef std::underlying_type<test_type6>::type  type6;\n+}"}, {"sha": "b204a4f20a5e1de96cb0dffd185251d529399046", "filename": "libstdc++-v3/testsuite/20_util/underlying_type/requirements/typedefs-2.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47407f631a14e4ad71c70442bec07df9ce732ab/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-2.cc?ref=a47407f631a14e4ad71c70442bec07df9ce732ab", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  enum E1 : unsigned { };\n+  enum E2 : char { };\n+  enum class E3 { };\n+  enum class E4 : unsigned char { c = 1 };\n+  enum class E5 : int { a = -1, b = 1 };\n+  enum class E6 : long { c = __LONG_MAX__ };  \n+\n+  static_assert(is_same<underlying_type<E1>::type, unsigned>::value, \"Error\");\n+  static_assert(is_same<underlying_type<E2>::type, char>::value, \"Error\");\n+  static_assert(is_same<underlying_type<E3>::type, int>::value, \"Error\");\n+  static_assert(is_same<underlying_type<E4>::type,\n+\t\t\tunsigned char>::value, \"Error\");\n+  static_assert(is_same<underlying_type<E5>::type, int>::value, \"Error\");\n+  static_assert(is_same<underlying_type<E6>::type, long>::value, \"Error\");\n+}"}]}