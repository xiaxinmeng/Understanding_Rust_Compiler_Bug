{"sha": "e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0OTE3NDRjY2I0ZmM3ZGJjNTNhYTAwZWU4OGZhZTIxZTY0N2YxZg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2009-06-29T23:21:49Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2009-06-29T23:21:49Z"}, "message": "extend.texi: Add MeP attributes and pragmas.\n\n* doc/extend.texi: Add MeP attributes and pragmas.\n* doc/invoke.text: Add MeP Options.\n* doc/contrib.texi: Add MeP contribution.\n* doc/md.texi: Add MeP constraints.\n* doc/install.texi: Add MeP target.\n\nFrom-SVN: r149068", "tree": {"sha": "57886145c28f2cefad3a8d758e0f1de46c81a394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57886145c28f2cefad3a8d758e0f1de46c81a394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/comments", "author": null, "committer": null, "parents": [{"sha": "2fcefcb2adf350d3163866e5754e4569f41551fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fcefcb2adf350d3163866e5754e4569f41551fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fcefcb2adf350d3163866e5754e4569f41551fd"}], "stats": {"total": 457, "additions": 455, "deletions": 2}, "files": [{"sha": "60d689ed143112b0169dc3d0325bdbb986a19ae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "patch": "@@ -1,3 +1,11 @@\n+2009-06-29  DJ Delorie  <dj@redhat.com>\n+\n+\t* doc/extend.texi: Add MeP attributes and pragmas.\n+\t* doc/invoke.text: Add MeP Options.\n+\t* doc/contrib.texi: Add MeP contribution.\n+\t* doc/md.texi: Add MeP constraints.\n+\t* doc/install.texi: Add MeP target.\n+\n 2009-06-30  Anatoly Sokolov  <aesok@post.ru>\n \n \t* target.h (struct gcc_target): Add frame_pointer_required field."}, {"sha": "d2d1673cc3b09eba5ec1732dc80bc54a877fa041", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "patch": "@@ -215,7 +215,7 @@ Mo DeJong for GCJ and libgcj bug fixes.\n \n @item\n DJ Delorie for the DJGPP port, build and libiberty maintenance,\n-various bug fixes, and the M32C port.\n+various bug fixes, and the M32C and MeP ports.\n \n @item\n Arnaud Desitter for helping to debug GNU Fortran."}, {"sha": "06bacec765d2bb573991d5c8df2c352b0eb405b9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 161, "deletions": 1, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "patch": "@@ -2137,6 +2137,12 @@ present.\n The @code{deprecated} attribute can also be used for variables and\n types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n \n+@item disinterrupt\n+@cindex @code{disinterrupt} attribute\n+On MeP targets, this attribute causes the compiler to emit\n+instructions to disable interrupts for the duration of the given\n+function.\n+\n @item dllexport\n @cindex @code{__declspec(dllexport)}\n On Microsoft Windows targets and Symbian OS targets the\n@@ -2263,6 +2269,10 @@ At the end of a function, it will jump to a board-specific routine\n instead of using @code{rts}.  The board-specific return routine simulates\n the @code{rtc}.\n \n+On MeP targets this causes the compiler to use a calling convention\n+which assumes the called function is too far away for the built-in\n+addressing modes.\n+\n @item fastcall\n @cindex functions that pop the argument stack on the 386\n On the Intel 386, the @code{fastcall} attribute causes the compiler to\n@@ -2450,7 +2460,7 @@ This attribute is ignored for R8C target.\n \n @item interrupt\n @cindex interrupt handler functions\n-Use this attribute on the ARM, AVR, CRX, M32C, M32R/D, m68k, MIPS\n+Use this attribute on the ARM, AVR, CRX, M32C, M32R/D, m68k, MeP, MIPS\n and Xstormy16 ports to indicate that the specified function is an\n interrupt handler.  The compiler will generate function entry and exit\n sequences suitable for use in an interrupt handler when this attribute\n@@ -2669,6 +2679,10 @@ use the normal calling convention based on @code{jsr} and @code{rts}.\n This attribute can be used to cancel the effect of the @option{-mlong-calls}\n option.\n \n+On MeP targets this attribute causes the compiler to assume the called\n+function is close enough to use the normal calling convention,\n+overriding the @code{-mtf} command line option.\n+\n @item nesting\n @cindex Allow nesting in an interrupt handler on the Blackfin processor.\n Use this attribute together with @code{interrupt_handler},\n@@ -3323,6 +3337,13 @@ visibility of their template.\n If both the template and enclosing class have explicit visibility, the\n visibility from the template is used.\n \n+@item vliw\n+@cindex @code{vliw} attribute\n+On MeP, the @code{vliw} attribute tells the compiler to emit\n+instructions in VLIW mode instead of core mode.  Note that this\n+attribute is not allowed unless a VLIW coprocessor has been configured\n+and enabled through command line options.\n+\n @item warn_unused_result\n @cindex @code{warn_unused_result} attribute\n The @code{warn_unused_result} attribute causes a warning to be emitted\n@@ -4150,6 +4171,64 @@ Medium and large model objects may live anywhere in the 32-bit address space\n addresses).\n @end table\n \n+@anchor{MeP Variable Attributes}\n+@subsection MeP Variable Attributes\n+\n+The MeP target has a number of addressing modes and busses.  The\n+@code{near} space spans the standard memory space's first 16 megabytes\n+(24 bits).  The @code{far} space spans the entire 32-bit memory space.\n+The @code{based} space is a 128 byte region in the memory space which\n+is addressed relative to the @code{$tp} register.  The @code{tiny}\n+space is a 65536 byte region relative to the @code{$gp} register.  In\n+addition to these memory regions, the MeP target has a separate 16-bit\n+control bus which is specified with @code{cb} attributes.\n+\n+@table @code\n+\n+@item based\n+Any variable with the @code{based} attribute will be assigned to the\n+@code{.based} section, and will be accessed with relative to the\n+@code{$tp} register.\n+\n+@item tiny\n+Likewise, the @code{tiny} attribute assigned variables to the\n+@code{.tiny} section, relative to the @code{$gp} register.\n+\n+@item near\n+Variables with the @code{near} attribute are assumed to have addresses\n+that fit in a 24-bit addressing mode.  This is the default for large\n+variables (@code{-mtiny=4} is the default) but this attribute can\n+override @code{-mtiny=} for small variables, or override @code{-ml}.\n+\n+@item far\n+Variables with the @code{far} attribute are addressed using a full\n+32-bit address.  Since this covers the entire memory space, this\n+allows modules to make no assumptions about where variables might be\n+stored.\n+\n+@item io\n+@item io (@var{addr})\n+Variables with the @code{io} attribute are used to address\n+memory-mapped peripherals.  If an address is specified, the variable\n+is assigned that address, else it is not assigned an address (it is\n+assumed some other module will assign an address).  Example:\n+\n+@example\n+int timer_count __attribute__((io(0x123)));\n+@end example\n+\n+@item cb\n+@item cb (@var{addr})\n+Variables with the @code{cb} attribute are used to access the control\n+bus, using special instructions.  @code{addr} indicates the control bus\n+address.  Example:\n+\n+@example\n+int cpu_clock __attribute__((cb(0x123)));\n+@end example\n+\n+@end table\n+\n @anchor{i386 Variable Attributes}\n @subsection i386 Variable Attributes\n \n@@ -4652,6 +4731,14 @@ virtual table for @code{C} is not exported.  (You can use\n @code{__attribute__} instead of @code{__declspec} if you prefer, but\n most Symbian OS code uses @code{__declspec}.)\n \n+@anchor{MeP Type Attributes}\n+@subsection MeP Type Attributes\n+\n+Many of the MeP variable attributes may be applied to types as well.\n+Specifically, the @code{based}, @code{tiny}, @code{near}, and\n+@code{far} attributes may be applied to either.  The @code{io} and\n+@code{cb} attributes may not be applied to types.\n+\n @anchor{i386 Type Attributes}\n @subsection i386 Type Attributes\n \n@@ -11703,6 +11790,7 @@ for further explanation.\n @menu\n * ARM Pragmas::\n * M32C Pragmas::\n+* MeP Pragmas::\n * RS/6000 and PowerPC Pragmas::\n * Darwin Pragmas::\n * Solaris Pragmas::\n@@ -11753,6 +11841,78 @@ as it may allow you to reduce the number of memregs used.\n \n @end table\n \n+@node MeP Pragmas\n+@subsection MeP Pragmas\n+\n+@table @code\n+\n+@item custom io_volatile (on|off)\n+@cindex pragma, custom io_volatile\n+Overrides the command line option @code{-mio-volatile} for the current\n+file.  Note that for compatibility with future GCC releases, this\n+option should only be used once before any @code{io} variables in each\n+file.\n+\n+@item GCC coprocessor available @var{registers}\n+@cindex pragma, coprocessor available\n+Specifies which coprocessor registers are available to the register\n+allocator.  @var{registers} may be a single register, register range\n+separated by ellipses, or comma-separated list of those.  Example:\n+\n+@example\n+#pragma GCC coprocessor available $c0...$c10, $c28\n+@end example\n+\n+@item GCC coprocessor call_saved @var{registers}\n+@cindex pragma, coprocessor call_saved\n+Specifies which coprocessor registers are to be saved and restored by\n+any function using them.  @var{registers} may be a single register,\n+register range separated by ellipses, or comma-separated list of\n+those.  Example:\n+\n+@example\n+#pragma GCC coprocessor call_saved $c4...$c6, $c31\n+@end example\n+\n+@item GCC coprocessor subclass '(A|B|C|D)' = @var{registers}\n+@cindex pragma, coprocessor subclass\n+Creates and defines a register class.  These register classes can be\n+used by inline @code{asm} constructs.  @var{registers} may be a single\n+register, register range separated by ellipses, or comma-separated\n+list of those.  Example:\n+\n+@example\n+#pragma GCC coprocessor subclass 'B' = $c2, $c4, $c6\n+\n+asm (\"cpfoo %0\" : \"=B\" (x));\n+@end example\n+\n+@item GCC disinterrupt @var{name} , @var{name} @dots{}\n+@cindex pragma, disinterrupt\n+For the named functions, the compiler adds code to disable interrupts\n+for the duration of those functions.  Any functions so named, which\n+are not encountered in the source, cause a warning that the pragma was\n+not used.  Examples:\n+\n+@example\n+#pragma disinterrupt foo\n+#pragma disinterrupt bar, grill\n+int foo () { @dots{} }\n+@end example\n+\n+@item GCC call @var{name} , @var{name} @dots{}\n+@cindex pragma, call\n+For the named functions, the compiler always uses a register-indirect\n+call model when calling the named functions.  Examples:\n+\n+@example\n+extern int foo ();\n+#pragma call foo\n+@end example\n+\n+@end table\n+\n+\n @node RS/6000 and PowerPC Pragmas\n @subsection RS/6000 and PowerPC Pragmas\n "}, {"sha": "908ac8d32231247a39bf88ec5a53643cfa840228", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "patch": "@@ -2785,6 +2785,8 @@ information are.\n @item\n @uref{#m68k-uclinux,,m68k-uclinux}\n @item\n+@uref{#mep-x-elf,,mep-*-elf}\n+@item\n @uref{#mips-x-x,,mips-*-*}\n @item\n @uref{#mips-sgi-irix5,,mips-sgi-irix5}\n@@ -3624,6 +3626,14 @@ both of which were ABI changes.  However, you can still use the\n original ABI by configuring for @samp{m68k-uclinuxoldabi} or\n @samp{m68k-@var{vendor}-uclinuxoldabi}.\n \n+\n+@html\n+<hr />\n+@end html\n+@heading @anchor{mep-x-elf}mep-*-elf\n+Toshiba Media Processor.\n+This configuration is intended for embedded systems.\n+\n @html\n <hr />\n @end html"}, {"sha": "34bc48c87df8bcb954926662cff694d44501941e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "patch": "@@ -656,6 +656,13 @@ Objective-C and Objective-C++ Dialects}.\n -mno-callgraph-data  -mslow-bytes  -mno-slow-bytes  -mno-lsim @gol\n -mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment}\n \n+@emph{MeP Options}\n+@gccoptlist{-mabsdiff -mall-opts -maverage -mbased=@var{n} -mbitops @gol\n+-mc=@var{n} -mclip -mconfig=@var{name} -mcop -mcop32 -mcop64 -mivc2 @gol\n+-mdc -mdiv -meb -mel -mio-volatile -ml -mleadz -mm -mminmax @gol\n+-mmult -mno-opts -mrepeat -ms -msatur -msdram -msim -msimnovec -mtf @gol\n+-mtiny=@var{n}}\n+\n @emph{MIPS Options}\n @gccoptlist{-EL  -EB  -march=@var{arch}  -mtune=@var{arch} @gol\n -mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2 @gol\n@@ -9069,6 +9076,7 @@ platform.\n * M680x0 Options::\n * M68hc1x Options::\n * MCore Options::\n+* MeP Options::\n * MIPS Options::\n * MMIX Options::\n * MN10300 Options::\n@@ -12754,6 +12762,170 @@ value is 0x1000.\n \n @end table\n \n+@node MeP Options\n+@subsection MeP Options\n+@cindex MeP options\n+\n+@table @gcctabopt\n+\n+@item -mabsdiff\n+@opindex mabsdiff\n+Enables the @code{abs} instruction, which is the absolute difference\n+between two registers.\n+\n+@item -mall-opts\n+@opindex mall-opts\n+Enables all the optional instructions - average, multiply, divide, bit\n+operations, leading zero, absolute difference, min/max, clip, and\n+saturation.\n+\n+\n+@item -maverage\n+@opindex maverage\n+Enables the @code{ave} instruction, which computes the average of two\n+registers.\n+\n+@item -mbased=@var{n}\n+@opindex mbased=\n+Variables of size @var{n} bytes or smaller will be placed in the\n+@code{.based} section by default.  Based variables use the @code{$tp}\n+register as a base register, and there is a 128 byte limit to the\n+@code{.based} section.\n+\n+@item -mbitops\n+@opindex mbitops\n+Enables the bit operation instructions - bit test (@code{btstm}), set\n+(@code{bsetm}), clear (@code{bclrm}), invert (@code{bnotm}), and\n+test-and-set (@code{tas}).\n+\n+@item -mc=@var{name}\n+@opindex mc=\n+Selects which section constant data will be placed in.  @var{name} may\n+be @code{tiny}, @code{near}, or @code{far}.\n+\n+@item -mclip\n+@opindex mclip\n+Enables the @code{clip} instruction.  Note that @code{-mclip} is not\n+useful unless you also provide @code{-mminmax}.\n+\n+@item -mconfig=@var{name}\n+@opindex mconfig=\n+Selects one of the build-in core configurations.  Each MeP chip has\n+one or more modules in it; each module has a core CPU and a variety of\n+coprocessors, optional instructions, and peripherals.  The\n+@code{MeP-Integrator} tool, not part of GCC, provides these\n+configurations through this option; using this option is the same as\n+using all the corresponding command line options.  The default\n+configuration is @code{default}.\n+\n+@item -mcop\n+@opindex mcop\n+Enables the coprocessor instructions.  By default, this is a 32-bit\n+coprocessor.  Note that the coprocessor is normally enabled via the\n+@code{-mconfig=} option.\n+\n+@item -mcop32\n+@opindex mcop32\n+Enables the 32-bit coprocessor's instructions.\n+\n+@item -mcop64\n+@opindex mcop64\n+Enables the 64-bit coprocessor's instructions.\n+\n+@item -mivc2\n+@opindex mivc2\n+Enables IVC2 scheduling.  IVC2 is a 64-bit VLIW coprocessor.\n+\n+@item -mdc\n+@opindex mdc\n+Causes constant variables to be placed in the @code{.near} section.\n+\n+@item -mdiv\n+@opindex mdiv\n+Enables the @code{div} and @code{divu} instructions.\n+\n+@item -meb\n+@opindex meb\n+Generate big-endian code.\n+\n+@item -mel\n+@opindex mel\n+Generate little-endian code.\n+\n+@item -mio-volatile\n+@opindex mio-volatile\n+Tells the compiler that any variable marked with the @code{io}\n+attribute is to be considered volatile.\n+\n+@item -ml\n+@opindex ml\n+Causes variables to be assigned to the @code{.far} section by default.\n+\n+@item -mleadz\n+@opindex mleadz\n+Enables the @code{leadz} (leading zero) instruction.\n+\n+@item -mm\n+@opindex mm\n+Causes variables to be assigned to the @code{.near} section by default.\n+\n+@item -mminmax\n+@opindex mminmax\n+Enables the @code{min} and @code{max} instructions.\n+\n+@item -mmult\n+@opindex mmult\n+Enables the multiplication and multiply-accumulate instructions.\n+\n+@item -mno-opts\n+@opindex mno-opts\n+Disables all the optional instructions enabled by @code{-mall-opts}.\n+\n+@item -mrepeat\n+@opindex mrepeat\n+Enables the @code{repeat} and @code{erepeat} instructions, used for\n+low-overhead looping.\n+\n+@item -ms\n+@opindex ms\n+Causes all variables to default to the @code{.tiny} section.  Note\n+that there is a 65536 byte limit to this section.  Accesses to these\n+variables use the @code{%gp} base register.\n+\n+@item -msatur\n+@opindex msatur\n+Enables the saturation instructions.  Note that the compiler does not\n+currently generate these itself, but this option is included for\n+compatibility with other tools, like @code{as}.\n+\n+@item -msdram\n+@opindex msdram\n+Link the SDRAM-based runtime instead of the default ROM-based runtime.\n+\n+@item -msim\n+@opindex msim\n+Link the simulator runtime libraries.\n+\n+@item -msimnovec\n+@opindex msimnovec\n+Link the simulator runtime libraries, excluding built-in support\n+for reset and exception vectors and tables.\n+\n+@item -mtf\n+@opindex mtf\n+Causes all functions to default to the @code{.far} section.  Without\n+this option, functions default to the @code{.near} section.\n+\n+@item -mtiny=@var{n}\n+@opindex mtiny=\n+Variables that are @var{n} bytes or smaller will be allocated to the\n+@code{.tiny} section.  These variables use the @code{$gp} base\n+register.  The default for this option is 4, but note that there's a\n+65536 byte limit to the @code{.tiny} section.\n+\n+@end table\n+\n+\n @node MIPS Options\n @subsection MIPS Options\n @cindex MIPS options"}, {"sha": "f4ca2b032ff1eb8106afe07a296f3d59d9e85a00", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2491744ccb4fc7dbc53aa00ee88fae21e647f1f/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e2491744ccb4fc7dbc53aa00ee88fae21e647f1f", "patch": "@@ -2518,6 +2518,109 @@ Memory addressed using the small base register ($sb).\n \n @item S1\n $r1h\n+@end table\n+\n+@item MeP---@file{config/mep/constraints.md}\n+@table @code\n+\n+@item a\n+The $sp register.\n+\n+@item b\n+The $tp register.\n+\n+@item c\n+Any control register.\n+\n+@item d\n+Either the $hi or the $lo register.\n+\n+@item em\n+Coprocessor registers that can be directly loaded ($c0-$c15).\n+\n+@item ex\n+Coprocessor registers that can be moved to each other.\n+\n+@item er\n+Coprocessor registers that can be moved to core registers.\n+\n+@item h\n+The $hi register.\n+\n+@item j\n+The $rpc register.\n+\n+@item l\n+The $lo register.\n+\n+@item t\n+Registers which can be used in $tp-relative addressing.\n+\n+@item v\n+The $gp register.\n+\n+@item x\n+The coprocessor registers.\n+\n+@item y\n+The coprocessor control registers.\n+\n+@item z\n+The $0 register.\n+\n+@item A\n+User-defined register set A.\n+\n+@item B\n+User-defined register set B.\n+\n+@item C\n+User-defined register set C.\n+\n+@item D\n+User-defined register set D.\n+\n+@item I\n+Offsets for $gp-rel addressing.\n+\n+@item J\n+Constants that can be used directly with boolean insns.\n+\n+@item K\n+Constants that can be moved directly to registers.\n+\n+@item L\n+Small constants that can be added to registers.\n+\n+@item M\n+Long shift counts.\n+\n+@item N\n+Small constants that can be compared to registers.\n+\n+@item O\n+Constants that can be loaded into the top half of registers.\n+\n+@item S\n+Signed 8-bit immediates.\n+\n+@item T\n+Symbols encoded for $tp-rel or $gp-rel addressing.\n+\n+@item U\n+Non-constant addresses for loading/saving coprocessor registers.\n+\n+@item W\n+The top half of a symbol's value.\n+\n+@item Y\n+A register indirect address without offset.\n+\n+@item Z\n+Symbolic references to the control bus.\n+\n+\n+\n @end table\n \n @item MIPS---@file{config/mips/constraints.md}"}]}