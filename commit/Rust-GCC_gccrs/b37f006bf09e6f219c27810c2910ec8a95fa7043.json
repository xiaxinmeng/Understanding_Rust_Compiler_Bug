{"sha": "b37f006bf09e6f219c27810c2910ec8a95fa7043", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3ZjAwNmJmMDllNmYyMTljMjc4MTBjMjkxMGVjOGE5NWZhNzA0Mw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1998-11-05T05:34:01Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1998-11-05T05:34:01Z"}, "message": "except.c (expand_fixup_region_end): Make sure outer context labels are not issued in an inner context during cleanups.\n\nThu Nov  5 07:57:45 EST 1998  Andrew MacLeod  <amacleod@cygnus.com>\n      * except.c (expand_fixup_region_end): Make sure outer context labels\n      are not issued in an inner context during cleanups.\n\nFrom-SVN: r23538", "tree": {"sha": "7f5a66e9719a548fa337cf27d1b6e87b9494cd7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5a66e9719a548fa337cf27d1b6e87b9494cd7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37f006bf09e6f219c27810c2910ec8a95fa7043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37f006bf09e6f219c27810c2910ec8a95fa7043", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37f006bf09e6f219c27810c2910ec8a95fa7043", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37f006bf09e6f219c27810c2910ec8a95fa7043/comments", "author": null, "committer": null, "parents": [{"sha": "6c61c2bba11355ba204a14ea196235d5eeeb1e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c61c2bba11355ba204a14ea196235d5eeeb1e1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c61c2bba11355ba204a14ea196235d5eeeb1e1e"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "431f4b6837f655eb889ae1ee64a08ed0b32247d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37f006bf09e6f219c27810c2910ec8a95fa7043/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37f006bf09e6f219c27810c2910ec8a95fa7043/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b37f006bf09e6f219c27810c2910ec8a95fa7043", "patch": "@@ -1,3 +1,8 @@\n+Thu Nov  5 07:57:45 EST 1998  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* except.c (expand_fixup_region_end): Make sure outer context labels\n+\tare not issued in an inner context during cleanups.\n+\n Thu Nov  5 04:03:06 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (addsi3, subsi3): No new temporaries once cse is"}, {"sha": "6fa37f09718f1dbbca6811ffadd2160814fdfc96", "filename": "gcc/except.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37f006bf09e6f219c27810c2910ec8a95fa7043/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37f006bf09e6f219c27810c2910ec8a95fa7043/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b37f006bf09e6f219c27810c2910ec8a95fa7043", "patch": "@@ -1476,6 +1476,7 @@ expand_fixup_region_end (cleanup)\n      tree cleanup;\n {\n   struct eh_node *node;\n+  int dont_issue;\n \n   if (! doing_eh (0) || exceptions_via_longjmp)\n     return;\n@@ -1488,10 +1489,31 @@ expand_fixup_region_end (cleanup)\n   if (node == 0)\n     abort ();\n \n+  /* If the outer context label has not been issued yet, we don't want\n+     to issue it as a part of this region, unless this is the\n+     correct region for the outer context. If we did, then the label for\n+     the outer context will be WITHIN the begin/end labels, \n+     and we could get an infinte loop when it tried to rethrow, or just\n+     generally incorrect execution following a throw. */\n+\n+  dont_issue = ((INSN_UID (node->entry->outer_context) == 0) \n+            && (ehstack.top->entry != node->entry));\n+\n   ehstack.top->entry->outer_context = node->entry->outer_context;\n \n+  /* Since we are rethrowing to the OUTER region, we know we don't need\n+     a jump around sequence for this region, so we'll pretend the outer \n+     context label has been issued by setting INSN_UID to 1, then clearing\n+     it again afterwards. */\n+\n+  if (dont_issue)\n+    INSN_UID (node->entry->outer_context) = 1;\n+\n   /* Just rethrow.  size_zero_node is just a NOP.  */\n   expand_eh_region_end (size_zero_node);\n+\n+  if (dont_issue)\n+    INSN_UID (node->entry->outer_context) = 0;\n }\n \n /* If we are using the setjmp/longjmp EH codegen method, we emit a"}]}