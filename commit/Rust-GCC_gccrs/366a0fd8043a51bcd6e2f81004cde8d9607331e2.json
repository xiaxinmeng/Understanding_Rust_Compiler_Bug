{"sha": "366a0fd8043a51bcd6e2f81004cde8d9607331e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2YTBmZDgwNDNhNTFiY2Q2ZTJmODEwMDRjZGU4ZDk2MDczMzFlMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-08-11T03:07:59Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-08-11T03:07:59Z"}, "message": "natPlainSocketImpl.cc (bind): Don't go to error case when errno not set.\n\n\t* java/net/natPlainSocketImpl.cc (bind): Don't go to error case\n\twhen errno not set.\n\t(connect): Likewise.\n\t(accept): Likewise.\n\t(getOption): Likewise.\n\t* java/net/natPlainDatagramSocketImpl.cc (bind): Don't go to error\n\tcase when errno not set.\n\t(peek): Likewise.\n\t(send): Likewise.\n\t(receive): Likewise.\n\t(mcastGrp): Likewise.\n\t(setOption): Likewise.\n\t(getOption): Likewise.\n\nFrom-SVN: r35617", "tree": {"sha": "bb40296aa76ff73c6371d67ebd7120a12196a32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb40296aa76ff73c6371d67ebd7120a12196a32b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/366a0fd8043a51bcd6e2f81004cde8d9607331e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366a0fd8043a51bcd6e2f81004cde8d9607331e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366a0fd8043a51bcd6e2f81004cde8d9607331e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366a0fd8043a51bcd6e2f81004cde8d9607331e2/comments", "author": null, "committer": null, "parents": [{"sha": "edd71f0f6cd9a303874d4a3e604a5f5fe760a975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edd71f0f6cd9a303874d4a3e604a5f5fe760a975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edd71f0f6cd9a303874d4a3e604a5f5fe760a975"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "8d3756fa3a4b579caa139dbe69c85f84158d03dd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366a0fd8043a51bcd6e2f81004cde8d9607331e2/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366a0fd8043a51bcd6e2f81004cde8d9607331e2/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=366a0fd8043a51bcd6e2f81004cde8d9607331e2", "patch": "@@ -1,3 +1,19 @@\n+2000-08-10  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/net/natPlainSocketImpl.cc (bind): Don't go to error case\n+\twhen errno not set.\n+\t(connect): Likewise.\n+\t(accept): Likewise.\n+\t(getOption): Likewise.\n+\t* java/net/natPlainDatagramSocketImpl.cc (bind): Don't go to error\n+\tcase when errno not set.\n+\t(peek): Likewise.\n+\t(send): Likewise.\n+\t(receive): Likewise.\n+\t(mcastGrp): Likewise.\n+\t(setOption): Likewise.\n+\t(getOption): Likewise.\n+\n 2000-08-10  Bryce McKinlay  <bryce@albatross.co.nz>\n \t    John Stracke <francis@ecal.com>\n "}, {"sha": "2fac17ed8286b666aecf2b559f200ff418fa4080", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366a0fd8043a51bcd6e2f81004cde8d9607331e2/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366a0fd8043a51bcd6e2f81004cde8d9607331e2/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=366a0fd8043a51bcd6e2f81004cde8d9607331e2", "patch": "@@ -199,7 +199,8 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n+\n   if (::bind (fnum, ptr, len) == 0)\n     {\n       socklen_t addrlen = sizeof(u);\n@@ -245,7 +246,8 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid family\"));\n+\n   i->address = raddr;\n   return rport;\n  error:\n@@ -281,7 +283,8 @@ java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *p)\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n+\n   if (::sendto (fnum, (char *) dbytes, p->getLength(), 0, ptr, len) >= 0)\n     return;\n  error:\n@@ -337,7 +340,8 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid family\"));\n+\n   p->setAddress (new InetAddress (raddr, NULL));\n   p->setPort (rport);\n   p->setLength ((jint) retlen);\n@@ -412,7 +416,8 @@ java::net::PlainDatagramSocketImpl::mcastGrp (java::net::InetAddress *inetaddr,\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n+\n   if (::setsockopt (fnum, level, opname, ptr, len) == 0)\n     return;\n  error:\n@@ -507,7 +512,9 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n \t  }\n #endif\n \telse\n-\t  goto error;\n+\t  throw\n+\t    new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n+\n \tif (::setsockopt (fnum, level, opname, ptr, len) != 0)\n \t  goto error;\n         return;\n@@ -576,7 +583,7 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n \t      }\n #endif\n \t    else\n-\t      goto error;\n+\t      throw new java::net::SocketException (JvNewStringUTF (\"invalid family\"));\n \t    localAddress = new java::net::InetAddress (laddr, NULL);\n \t  }\n \treturn localAddress;  "}, {"sha": "66cbf97db1b64d1b8487f8fb3e276399d0661a52", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366a0fd8043a51bcd6e2f81004cde8d9607331e2/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366a0fd8043a51bcd6e2f81004cde8d9607331e2/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=366a0fd8043a51bcd6e2f81004cde8d9607331e2", "patch": "@@ -153,7 +153,7 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n \n   // Enable SO_REUSEADDR, so that servers can reuse ports left in TIME_WAIT.\n   ::setsockopt(fnum, SOL_SOCKET, SO_REUSEADDR, (char *) &i, sizeof(i));\n@@ -201,17 +201,20 @@ java::net::PlainSocketImpl::connect (java::net::InetAddress *host, jint rport)\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n+\n   if (::connect (fnum, ptr, len) != 0)\n     goto error;\n   address = host;\n   port = rport;\n   // A bind may not have been done on this socket; if so, set localport now.\n   if (localport == 0)\n-    if (::getsockname (fnum, (sockaddr*) &u, &addrlen) == 0)\n-      localport = ntohs (u.address.sin_port);\n-    else\n-      goto error;\n+    {\n+      if (::getsockname (fnum, (sockaddr*) &u, &addrlen) == 0)\n+\tlocalport = ntohs (u.address.sin_port);\n+      else\n+\tgoto error;\n+    }\n   return;  \n  error:\n   char* strerr = strerror (errno);\n@@ -272,7 +275,8 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n     }\n #endif\n   else\n-    goto error;\n+    throw new java::net::SocketException (JvNewStringUTF (\"invalid family\"));\n+\n   s->fnum = new_socket;\n   s->localport = localport;\n   s->address = new InetAddress (raddr, NULL);\n@@ -445,7 +449,8 @@ java::net::PlainSocketImpl::getOption (jint optID)\n \t      }\n #endif\n \t    else\n-\t      goto error;\n+\t      throw\n+\t\tnew java::net::SocketException (JvNewStringUTF (\"invalid family\"));\n \t    localAddress = new java::net::InetAddress (laddr, NULL);\n \t  }\n \treturn localAddress;"}]}