{"sha": "8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "node_id": "C_kwDOANBUbNoAKDg4MDllZThjNmE1NjIxZTgzMGYzY2ZlNjZjMzgxZjk4NmU2M2M3ZjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-29T16:27:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-29T16:27:22Z"}, "message": "Merge #1427\n\n1427: unsafe: Check for unsafe function/method calls r=CohenArthur a=CohenArthur\n\nAddresses #1411 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "e2faec377641b1cadb98f4941339a6d6c38a4c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2faec377641b1cadb98f4941339a6d6c38a4c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5ApqCRBK7hj4Ov3rIwAAbEsIAIU9wH1vajNZ0eIntZjz+GOE\n1IOAN0u5xwtzERFFtH+Ri8KNm3V+Wn7u39MrdoYcHBWkVBFzEJsfxNpFAxnaCRZ6\nvSyhDtkqcp1cYI68Hgv/U6OtiXv+NcWVq1mpDa9gj9xeApOtNBSEvpYMhEsL5or/\nFrF3yFV9mb3iVHj5tQLJaLhmcAGYL2j918RVRv3R0Bji64p5nlsWDFTAaURfGPmq\nuVesKm3vQlqGN2d7S144tqfs4cFvrmByTQl2BV8G9xpOmCTC+tqfwz8SFw1r8QG1\nnaXyQLWJkPyK+4JbofXUucd+eIKK7dvC3MvQN/7J8Kpy7NReAgFW8pAJyNPNIOM=\n=kPFv\n-----END PGP SIGNATURE-----\n", "payload": "tree e2faec377641b1cadb98f4941339a6d6c38a4c17\nparent 2d824b796cde571d270f4c20af8183dbd93614d5\nparent f742538d13375aa90ccaa787b06e07835bba5887\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1659112042 +0000\ncommitter GitHub <noreply@github.com> 1659112042 +0000\n\nMerge #1427\n\n1427: unsafe: Check for unsafe function/method calls r=CohenArthur a=CohenArthur\n\nAddresses #1411 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d824b796cde571d270f4c20af8183dbd93614d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d824b796cde571d270f4c20af8183dbd93614d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d824b796cde571d270f4c20af8183dbd93614d5"}, {"sha": "f742538d13375aa90ccaa787b06e07835bba5887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742538d13375aa90ccaa787b06e07835bba5887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f742538d13375aa90ccaa787b06e07835bba5887"}], "stats": {"total": 650, "additions": 460, "deletions": 190}, "files": [{"sha": "b5bfa3c21bff573184c4b6334dca56a9261bcd00", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -159,8 +159,9 @@ HIRCompileBase::query_compile (HirId ref, TyTy::BaseType *lookup,\n \t\t\t       Location expr_locus, bool is_qualified_path)\n {\n   HIR::Item *resolved_item = ctx->get_mappings ()->lookup_hir_item (ref);\n+  HirId parent_block;\n   HIR::ExternalItem *resolved_extern_item\n-    = ctx->get_mappings ()->lookup_hir_extern_item (ref);\n+    = ctx->get_mappings ()->lookup_hir_extern_item (ref, &parent_block);\n   bool is_hir_item = resolved_item != nullptr;\n   bool is_hir_extern_item = resolved_extern_item != nullptr;\n   if (is_hir_item)"}, {"sha": "174901f04492ad05f2b3b7670936972e3e46e904", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -69,7 +69,10 @@ UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n     return;\n \n   auto maybe_static_mut = mappings.lookup_hir_item (node_id);\n-  auto maybe_extern_static = mappings.lookup_hir_extern_item (node_id);\n+\n+  HirId extern_block;\n+  auto maybe_extern_static\n+    = mappings.lookup_hir_extern_item (node_id, &extern_block);\n \n   if (maybe_static_mut)\n     check_static_mut (maybe_static_mut, locus);\n@@ -79,6 +82,52 @@ UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n \t\t\t locus);\n }\n \n+static void\n+check_unsafe_call (HIR::Function *fn, Location locus, const std::string &kind)\n+{\n+  if (fn->get_qualifiers ().is_unsafe ())\n+    rust_error_at (locus, \"call to unsafe %s requires unsafe function or block\",\n+\t\t   kind.c_str ());\n+}\n+\n+static void\n+check_extern_call (HIR::ExternalItem *maybe_fn, HIR::ExternBlock *parent_block,\n+\t\t   Location locus)\n+{\n+  // We have multiple operations to perform here\n+  //     1. Is the item an actual function we're calling\n+  //     2. Is the block it's defined in an FFI block or an `extern crate` block\n+  //\n+  // It is not unsafe to call into other crates, so items defined in an `extern\n+  // crate` must be callable without being in an unsafe context. On the other\n+  // hand, any function defined in a block with a specific ABI (even `extern\n+  // \"Rust\"` blocks) is unsafe to call\n+\n+  if (maybe_fn->get_extern_kind () == ExternalItem::ExternKind::Function)\n+    rust_error_at (locus,\n+\t\t   \"call to extern function requires unsafe function or block\");\n+}\n+\n+void\n+UnsafeChecker::check_function_call (HirId node_id, Location locus)\n+{\n+  if (unsafe_context.is_in_context ())\n+    return;\n+\n+  HirId parent_extern_block;\n+  auto maybe_fn = mappings.lookup_hir_item (node_id);\n+  auto maybe_extern\n+    = mappings.lookup_hir_extern_item (node_id, &parent_extern_block);\n+\n+  if (maybe_fn && maybe_fn->get_item_kind () == Item::ItemKind::Function)\n+    check_unsafe_call (static_cast<Function *> (maybe_fn), locus, \"function\");\n+\n+  if (maybe_extern)\n+    check_extern_call (static_cast<ExternalItem *> (maybe_extern),\n+\t\t       mappings.lookup_hir_extern_block (parent_extern_block),\n+\t\t       locus);\n+}\n+\n void\n UnsafeChecker::visit (IdentifierExpr &ident_expr)\n {\n@@ -297,14 +346,52 @@ UnsafeChecker::visit (StructExprStructBase &expr)\n void\n UnsafeChecker::visit (CallExpr &expr)\n {\n+  auto fn = expr.get_fnexpr ();\n+  if (!fn)\n+    return;\n+\n+  NodeId ast_node_id = fn->get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  // There are no unsafe types, and functions are defined in the name resolver.\n+  // If we can't find the name, then we're dealing with a type and should return\n+  // early.\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  // At this point we have the function's HIR Id. There are two checks we\n+  // must perform:\n+  //     1. The function is an unsafe one\n+  //     2. The function is an extern one\n+  check_function_call (definition_id, expr.get_locus ());\n+\n   if (expr.has_params ())\n     for (auto &arg : expr.get_arguments ())\n       arg->accept_vis (*this);\n }\n \n void\n UnsafeChecker::visit (MethodCallExpr &expr)\n-{}\n+{\n+  TyTy::BaseType *method_type;\n+  context.lookup_type (expr.get_method_name ().get_mappings ().get_hirid (),\n+\t\t       &method_type);\n+\n+  auto fn = *static_cast<TyTy::FnType *> (method_type);\n+  auto method = mappings.lookup_hir_implitem (fn.get_ref (), nullptr);\n+\n+  if (!unsafe_context.is_in_context () && method)\n+    check_unsafe_call (static_cast<Function *> (method), expr.get_locus (),\n+\t\t       \"method\");\n+\n+  expr.get_receiver ()->accept_vis (*this);\n+\n+  for (auto &arg : expr.get_arguments ())\n+    arg->accept_vis (*this);\n+}\n \n void\n UnsafeChecker::visit (FieldAccessExpr &expr)"}, {"sha": "087bdb77b56a9115f9b43093e5764f33eb1a3c7b", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -40,7 +40,14 @@ class UnsafeChecker : public HIRFullVisitor\n    */\n   void check_use_of_static (HirId node_id, Location locus);\n \n+  /**\n+   * Check if a call to an unsafe or external function is outside of an unsafe\n+   * context\n+   */\n+  void check_function_call (HirId node_id, Location locus);\n+\n   StackedContexts<HirId> unsafe_context;\n+\n   Resolver::TypeCheckContext &context;\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;"}, {"sha": "a67461791d750a084ca65f6e0eb51e68f365946d", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1038,14 +1038,19 @@ ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n {\n   HIR::Visibility vis = translate_visibility (extern_block.get_visibility ());\n \n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n   std::vector<std::unique_ptr<HIR::ExternalItem>> extern_items;\n   for (auto &item : extern_block.get_extern_items ())\n     {\n       if (item->is_marked_for_strip ())\n \tcontinue;\n \n       HIR::ExternalItem *lowered\n-\t= ASTLoweringExternItem::translate (item.get ());\n+\t= ASTLoweringExternItem::translate (item.get (), mapping.get_hirid ());\n       extern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));\n     }\n \n@@ -1058,17 +1063,14 @@ ASTLoweringBase::lower_extern_block (AST::ExternBlock &extern_block)\n \trust_error_at (extern_block.get_locus (), \"unknown ABI option\");\n     }\n \n-  auto crate_num = mappings->get_current_crate ();\n-  Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n-\t\t\t\t mappings->get_next_hir_id (crate_num),\n-\t\t\t\t mappings->get_next_localdef_id (crate_num));\n-\n   HIR::ExternBlock *hir_extern_block\n     = new HIR::ExternBlock (mapping, abi, std::move (extern_items),\n \t\t\t    std::move (vis), extern_block.get_inner_attrs (),\n \t\t\t    extern_block.get_outer_attrs (),\n \t\t\t    extern_block.get_locus ());\n \n+  mappings->insert_hir_extern_block (hir_extern_block);\n+\n   return hir_extern_block;\n }\n "}, {"sha": "eeb59c9c5d6f75111a3d2eca18a629bf97a3f0af", "filename": "gcc/rust/hir/rust-ast-lower-extern.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-extern.h?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -31,13 +31,15 @@ class ASTLoweringExternItem : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::ExternalItem *translate (AST::ExternalItem *item)\n+  static HIR::ExternalItem *translate (AST::ExternalItem *item,\n+\t\t\t\t       HirId parent_hirid)\n   {\n     ASTLoweringExternItem resolver;\n     item->accept_vis (resolver);\n \n     rust_assert (resolver.translated != nullptr);\n-    resolver.mappings->insert_hir_extern_item (resolver.translated);\n+    resolver.mappings->insert_hir_extern_item (resolver.translated,\n+\t\t\t\t\t       parent_hirid);\n     resolver.mappings->insert_location (\n       resolver.translated->get_mappings ().get_hirid (),\n       resolver.translated->get_locus ());"}, {"sha": "6a6deebf944a68f4c9eb99daab9adf321026325e", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -371,23 +371,45 @@ Mappings::lookup_hir_trait_item (HirId id)\n }\n \n void\n-Mappings::insert_hir_extern_item (HIR::ExternalItem *item)\n+Mappings::insert_hir_extern_block (HIR::ExternBlock *block)\n+{\n+  auto id = block->get_mappings ().get_hirid ();\n+  rust_assert (lookup_hir_extern_block (id) == nullptr);\n+\n+  hirExternBlockMappings[id] = block;\n+  insert_node_to_hir (block->get_mappings ().get_nodeid (), id);\n+}\n+\n+HIR::ExternBlock *\n+Mappings::lookup_hir_extern_block (HirId id)\n+{\n+  auto it = hirExternBlockMappings.find (id);\n+  if (it == hirExternBlockMappings.end ())\n+    return nullptr;\n+\n+  return it->second;\n+}\n+\n+void\n+Mappings::insert_hir_extern_item (HIR::ExternalItem *item, HirId parent_block)\n {\n   auto id = item->get_mappings ().get_hirid ();\n-  rust_assert (lookup_hir_extern_item (id) == nullptr);\n+  rust_assert (lookup_hir_extern_item (id, nullptr) == nullptr);\n \n-  hirExternItemMappings[id] = item;\n+  hirExternItemMappings[id] = {item, parent_block};\n   insert_node_to_hir (item->get_mappings ().get_nodeid (), id);\n }\n \n HIR::ExternalItem *\n-Mappings::lookup_hir_extern_item (HirId id)\n+Mappings::lookup_hir_extern_item (HirId id, HirId *parent_block)\n {\n   auto it = hirExternItemMappings.find (id);\n   if (it == hirExternItemMappings.end ())\n     return nullptr;\n \n-  return it->second;\n+  *parent_block = it->second.second;\n+\n+  return it->second.first;\n }\n \n void"}, {"sha": "98fcfe6a6a741e9d768853113019b0530ebc090c", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -115,8 +115,11 @@ class Mappings\n   void insert_hir_trait_item (HIR::TraitItem *item);\n   HIR::TraitItem *lookup_hir_trait_item (HirId id);\n \n-  void insert_hir_extern_item (HIR::ExternalItem *item);\n-  HIR::ExternalItem *lookup_hir_extern_item (HirId id);\n+  void insert_hir_extern_block (HIR::ExternBlock *block);\n+  HIR::ExternBlock *lookup_hir_extern_block (HirId id);\n+\n+  void insert_hir_extern_item (HIR::ExternalItem *item, HirId parent_block);\n+  HIR::ExternalItem *lookup_hir_extern_item (HirId id, HirId *parent_block);\n \n   void insert_hir_impl_block (HIR::ImplBlock *item);\n   HIR::ImplBlock *lookup_hir_impl_block (HirId id);\n@@ -312,7 +315,8 @@ class Mappings\n   std::map<HirId, HIR::ImplBlock *> hirImplItemsToImplMappings;\n   std::map<HirId, HIR::ImplBlock *> hirImplBlockMappings;\n   std::map<HirId, HIR::TraitItem *> hirTraitItemMappings;\n-  std::map<HirId, HIR::ExternalItem *> hirExternItemMappings;\n+  std::map<HirId, HIR::ExternBlock *> hirExternBlockMappings;\n+  std::map<HirId, std::pair<HIR::ExternalItem *, HirId>> hirExternItemMappings;\n   std::map<HirId, HIR::PathExprSegment *> hirPathSegMappings;\n   std::map<HirId, HIR::GenericParam *> hirGenericParamMappings;\n   std::map<HirId, HIR::Trait *> hirTraitItemsToTraitMappings;"}, {"sha": "5c2a9173241d38fdb45d78cda9aeae4b2b363067", "filename": "gcc/testsuite/rust/compile/issue-1173.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,14 +1,17 @@\n // { dg-additional-options \"-w\" }\n+\n+#![feature(intrinsics)]\n+\n mod mem {\n     extern \"rust-intrinsic\" {\n-        fn transmute<U, V>(_: U) -> V;\n+        pub fn transmute<U, V>(_: U) -> V;\n     }\n }\n \n pub trait Hasher {\n     fn write(&mut self, bytes: &[u8]);\n     fn write_u16(&mut self, i: u16) {\n-        self.write(&mem::transmute::<_, [u8; 2]>(i))\n+        self.write(unsafe { &mem::transmute::<_, [u8; 2]>(i) })\n     }\n }\n "}, {"sha": "6704c0210d1a2484feb2bd7c231601918a1ac4c7", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-1.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,16 +1,22 @@\n // { dg-additional-options -fdump-tree-original }\n \n+#![feature(intrinsics)]\n+\n extern \"rust-intrinsic\" {\n     pub fn sqrtf32(x: f32) -> f32;\n     pub fn sinf32(x: f32) -> f32;\n }\n \n fn main() {\n-    let mut f32;\n+    unsafe fn foo() {\n+        let mut f32;\n+\n+        f32 = sqrtf32(5f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_sqrtf \\(5\\.0e\\+0\\);$} 1 original } }\n \n-    f32 = sqrtf32(5f32);\n-    // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_sqrtf \\(5\\.0e\\+0\\);$} 1 original } }\n+        f32 = sinf32(39f32);\n+        // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_sinf \\(3\\.9e\\+1\\);$} 1 original } }\n+    }\n \n-    f32 = sinf32(39f32);\n-    // { dg-final { scan-tree-dump-times {(?n)f32 = __builtin_sinf \\(3\\.9e\\+1\\);$} 1 original } }\n+    unsafe { foo() };\n }"}, {"sha": "461a35de8efd9a42de498b4f4961cd1a2bab3ea7", "filename": "gcc/testsuite/rust/compile/torture/transmute-size-check-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -7,5 +7,5 @@ mod mem {\n \n fn main() {\n     let a = 123;\n-    let _b: [u32; mem::size_of::<i32>()] = mem::transmute(a);\n+    let _b: [u32; mem::size_of::<i32>()] = unsafe { mem::transmute(a) };\n }"}, {"sha": "af9a55d1b978e377609bc7d4e6a790136ad2f63b", "filename": "gcc/testsuite/rust/compile/torture/transmute1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -7,5 +7,5 @@ mod mem {\n \n fn main() {\n     let a = 123;\n-    let _b: [u8; mem::size_of::<i32>()] = mem::transmute(a);\n+    let _b: [u8; mem::size_of::<i32>()] = unsafe { mem::transmute(a) };\n }"}, {"sha": "cf4b75456e4d5dc4055614f2d89c957530b204f5", "filename": "gcc/testsuite/rust/compile/unsafe6.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe6.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -0,0 +1,14 @@\n+unsafe fn foo() {}\n+unsafe fn bar() {\n+    foo();\n+}\n+\n+fn main() {\n+    foo(); // { dg-error \"call to unsafe function\" }\n+    bar(); // { dg-error \"call to unsafe function\" }\n+\n+    unsafe {\n+        foo();\n+        bar();\n+    }\n+}"}, {"sha": "a6b69e1ac37505310a934b2b1c22f27ee9503ac3", "filename": "gcc/testsuite/rust/compile/unsafe7.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe7.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -0,0 +1,9 @@\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn main() {\n+    let s = \"hey\\0\";\n+\n+    printf(s as *const str as *const i8); // { dg-error \"call to extern function\" }\n+}"}, {"sha": "03fe4910c979cc9c0b96e546fe8eb3dab110fdfe", "filename": "gcc/testsuite/rust/compile/unsafe8.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe8.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -0,0 +1,14 @@\n+struct S;\n+\n+impl S {\n+    unsafe fn foo(self) {}\n+}\n+\n+fn main() {\n+    let s = S;\n+    s.foo(); // { dg-error \"call to unsafe method\" }\n+\n+    unsafe {\n+        s.foo();\n+    }\n+}"}, {"sha": "9fa5222d61f5dd81eacade8d17fd26d5e00b1622", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_cfg.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_cfg.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -9,10 +9,14 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n-\n fn main() -> i32 {\n     let cfg = cfg!(A);\n     if cfg {"}, {"sha": "555d49caf606303e0a3939212d367b816fc08090", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_concat.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_concat.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -8,7 +8,12 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n fn main() -> i32 {"}, {"sha": "211ddfc26f207349361e04edef2cd4da74c55dbd", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_env.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -10,7 +10,12 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n fn main() -> i32 {"}, {"sha": "49da09300a0265332438d68f4af4563be195cfe5", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_include_bytes.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_bytes.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,7 +1,7 @@\n // { dg-output \"104\\n33\\n1\\n\" }\n \n macro_rules! include_bytes {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n@@ -10,35 +10,37 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n fn main() -> i32 {\n-  let bytes = include_bytes! (\"include.txt\");\n-\n-  print_int (bytes[0] as i32);\n-  print_int (bytes[14] as i32);\n-\n-  let the_bytes = b\"hello, include!\\n\";\n-\n-  let x = bytes[0] == the_bytes[0]\n-    && bytes[1] == the_bytes [1]\n-    && bytes[2] == the_bytes [2]\n-    && bytes[3] == the_bytes [3]\n-    && bytes[4] == the_bytes [4]\n-    && bytes[5] == the_bytes [5]\n-    && bytes[6] == the_bytes [6]\n-    && bytes[7] == the_bytes [7]\n-    && bytes[8] == the_bytes [8]\n-    && bytes[9] == the_bytes [9]\n-    && bytes[10] == the_bytes [10]\n-    && bytes[11] == the_bytes [11]\n-    && bytes[12] == the_bytes [12]\n-    && bytes[13] == the_bytes [13]\n-    && bytes[14] == the_bytes [14]\n-    && bytes[15] == the_bytes [15];\n-\n-  print_int (x as i32);\n-\n-  0\n+    let bytes = include_bytes!(\"include.txt\");\n+\n+    print_int(bytes[0] as i32);\n+    print_int(bytes[14] as i32);\n+\n+    let the_bytes = b\"hello, include!\\n\";\n+\n+    let x = bytes[0] == the_bytes[0]\n+        && bytes[1] == the_bytes[1]\n+        && bytes[2] == the_bytes[2]\n+        && bytes[3] == the_bytes[3]\n+        && bytes[4] == the_bytes[4]\n+        && bytes[5] == the_bytes[5]\n+        && bytes[6] == the_bytes[6]\n+        && bytes[7] == the_bytes[7]\n+        && bytes[8] == the_bytes[8]\n+        && bytes[9] == the_bytes[9]\n+        && bytes[10] == the_bytes[10]\n+        && bytes[11] == the_bytes[11]\n+        && bytes[12] == the_bytes[12]\n+        && bytes[13] == the_bytes[13]\n+        && bytes[14] == the_bytes[14]\n+        && bytes[15] == the_bytes[15];\n+\n+    print_int(x as i32);\n+\n+    0\n }"}, {"sha": "334b9c6f17e908543b9867b4ba354a316faef8f0", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_include_str.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_include_str.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,23 +1,27 @@\n // { dg-output \"hello, include!\\n\" }\n \n macro_rules! include_str {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n     fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: &str) {\n-  printf(\"%s\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n-\n fn main() -> i32 {\n-  // include_str! (and include_bytes!) allow for an optional trailing comma.\n-  let my_str = include_str! (\"include.txt\",);\n+    // include_str! (and include_bytes!) allow for an optional trailing comma.\n+    let my_str = include_str!(\"include.txt\",);\n \n-  print (my_str);\n+    print(my_str);\n \n-  0\n+    0\n }"}, {"sha": "6153bf5968cd3116402ee986d34850a80007cbeb", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_line.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_line.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,10 +1,12 @@\n-// { dg-output \"15\\n18\\n\" }\n+// { dg-output \"17\\n20\\n\" }\n extern \"C\" {\n     fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: u32) {\n-    printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n macro_rules! line {"}, {"sha": "6f52c37150ffc39fab9ed22b179e3e2f3c78b672", "filename": "gcc/testsuite/rust/execute/torture/builtin_macros1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -8,7 +8,9 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%s\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n fn main() -> i32 {"}, {"sha": "6c0facb3d6aa3b22aa7c8b5bcbfac7734819e2e2", "filename": "gcc/testsuite/rust/execute/torture/builtin_macros3.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macros3.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -8,7 +8,9 @@ extern \"C\" {\n }\n \n fn print(s: u32) {\n-    printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n fn main() -> i32 {\n@@ -21,4 +23,5 @@ fn main() -> i32 {\n     print(c1);\n \n     0\n-}\n\\ No newline at end of file\n+}\n+"}, {"sha": "155a440ee04c7e225803b39e4aa5875937688894", "filename": "gcc/testsuite/rust/execute/torture/macros10.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros10.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "d310dff9ba85dbf2c43370942a3c5d45f5533a5b", "filename": "gcc/testsuite/rust/execute/torture/macros12.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros12.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "afb20264625e953b4f875e59d4cf7277e242acef", "filename": "gcc/testsuite/rust/execute/torture/macros13.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros13.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "00656546d4c5254fa1856f7d296e0d8536c8881a", "filename": "gcc/testsuite/rust/execute/torture/macros14.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -5,7 +5,9 @@ extern \"C\" {\n \n fn print_int(value: i32) {\n     let s = \"%d\\n\\0\" as *const str as *const i8;\n-    printf(s, value);\n+    unsafe {\n+        printf(s, value);\n+    }\n }\n \n macro_rules! add_exprs {"}, {"sha": "3f291ace98ed77703b9ffa1a8a678f0583cd21e2", "filename": "gcc/testsuite/rust/execute/torture/macros22.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros22.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,9 +1,11 @@\n // { dg-output \"1\\n2\\nNaN\\n3\\n\" }\n \n macro_rules! print_num {\n-    ($l:literal) => {\n-        printf(\"%d\\n\\0\" as *const str as *const i8, $l);\n-    };\n+    ($l:literal) => {{\n+        unsafe {\n+            printf(\"%d\\n\\0\" as *const str as *const i8, $l);\n+        }\n+    }};\n }\n \n extern \"C\" {\n@@ -15,7 +17,9 @@ fn main() -> i32 {\n     print_num!(1);\n     print_num!(2);\n \n-    printf(\"NaN\\n\\0\" as *const str as *const i8);\n+    unsafe {\n+        printf(\"NaN\\n\\0\" as *const str as *const i8);\n+    }\n \n     print_num!(3);\n "}, {"sha": "506d660d6aa14b3beab0ea737842a4bd709fa9d9", "filename": "gcc/testsuite/rust/execute/torture/macros29.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros29.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,21 +1,23 @@\n // { dg-output \"1\\n\" }\n macro_rules! concat {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n-  fn printf(fmt: *const i8, ...);\n+    fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: u32) {\n-  printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n-fn main () -> i32 {\n-  let res = concat!(\"test2\") == \"test3\";\n-  if !res {\n-    print(1);\n-  }\n+fn main() -> i32 {\n+    let res = concat!(\"test2\") == \"test3\";\n+    if !res {\n+        print(1);\n+    }\n \n-  0\n+    0\n }"}, {"sha": "8f54b05be7d22f83db218d3df4f6105939de38f7", "filename": "gcc/testsuite/rust/execute/torture/macros30.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros30.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -1,22 +1,24 @@\n // { dg-output \"1\\n\" }\n macro_rules! concat {\n-  () => {{}};\n+    () => {{}};\n }\n \n extern \"C\" {\n-  fn printf(fmt: *const i8, ...);\n+    fn printf(fmt: *const i8, ...);\n }\n \n fn print(s: u32) {\n-  printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    unsafe {\n+        printf(\"%u\\n\\0\" as *const str as *const i8, s);\n+    }\n }\n \n-fn main () -> i32 {\n-  let mut x = concat!(\"x\");\n-  x = concat!(\"y\");\n-  if x == \"y\" {\n-    print(1);\n-  }\n+fn main() -> i32 {\n+    let mut x = concat!(\"x\");\n+    x = concat!(\"y\");\n+    if x == \"y\" {\n+        print(1);\n+    }\n \n-  0\n+    0\n }"}, {"sha": "6ad6d7e3c9978ad50f3c683c311ff30081bb5d63", "filename": "gcc/testsuite/rust/execute/torture/macros31.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros31.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -9,10 +9,14 @@ extern \"C\" {\n }\n \n fn print(s: &str) {\n-    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+    unsafe {\n+        printf(\n+            \"%s\\n\" as *const str as *const i8,\n+            s as *const str as *const i8,\n+        );\n+    }\n }\n \n-\n fn main() -> i32 {\n     let cfg = cfg!(A) || cfg!(B);\n     if cfg {"}, {"sha": "101dbb5857141d3a675c342a601264bbcf3cbd24", "filename": "gcc/testsuite/rust/execute/torture/match_bool1.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_bool1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -4,41 +4,46 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo (x: bool) -> i32 {\n+fn foo(x: bool) -> i32 {\n     match x {\n-        true => { return 182; },\n-        false => { return 55; },\n+        true => {\n+            return 182;\n+        }\n+        false => {\n+            return 55;\n+        }\n     }\n }\n \n-fn bar (y: i32) {\n-\n+fn bar(y: i32) {\n     match y < 100 {\n         true => {\n             let a = \"%i is less than 100\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n \n-            printf (c, y);\n+            unsafe {\n+                printf(c, y);\n+            }\n         }\n         _ => {\n             let a = \"%i is more than 100\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n \n-            printf (c, y);\n+            unsafe {\n+                printf(c, y);\n+            }\n         }\n     }\n }\n \n+fn main() -> i32 {\n+    let a = foo(true);\n+    let b = foo(false);\n \n-fn main () -> i32 {\n-\n-    let a = foo (true);\n-    let b = foo (false);\n-\n-    bar (a);\n-    bar (b);\n+    bar(a);\n+    bar(b);\n \n     0\n }"}, {"sha": "3546cfb9d8b203bd5265b7ae9ff8674d37d1c044", "filename": "gcc/testsuite/rust/execute/torture/match_byte1.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_byte1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -4,46 +4,53 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo (x: u8) {\n+fn foo(x: u8) {\n     match x {\n         b'a' => {\n             let a = \"a\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         b'\\x07' => {\n             let a = \"seven\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         b'\\'' => {\n             let a = \"quote\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"else\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-\n+fn main() -> i32 {\n     let x: u8 = 7;\n \n-    foo (b'a');\n-    foo (x);\n-    foo (b'\\'');\n-    foo (b'\\\\');\n+    foo(b'a');\n+    foo(x);\n+    foo(b'\\'');\n+    foo(b'\\\\');\n \n     0\n }"}, {"sha": "fa65876a9077af2723f4d5df0384118d86ddc7e0", "filename": "gcc/testsuite/rust/execute/torture/match_char1.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_char1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -4,46 +4,53 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo (x: char) {\n+fn foo(x: char) {\n     match x {\n         'a' => {\n             let a = \"amazing\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         'c' => {\n             let a = \"compiler\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         'p' => {\n             let a = \"productivity\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"wildcard\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-\n+fn main() -> i32 {\n     let p = 'p';\n \n-    foo ('a');\n-    foo ('b');\n-    foo ('c');\n-    foo (p);\n+    foo('a');\n+    foo('b');\n+    foo('c');\n+    foo(p);\n \n     0\n }"}, {"sha": "209429added14d06cf297a2fd1a3521f81c2e720", "filename": "gcc/testsuite/rust/execute/torture/match_int1.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_int1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -4,91 +4,106 @@ extern \"C\" {\n     fn printf(s: *const i8, ...);\n }\n \n-fn foo_i32 (x: i32) {\n+fn foo_i32(x: i32) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn foo_isize (x: isize) {\n+fn foo_isize(x: isize) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn foo_u32 (x: u32) {\n+fn foo_u32(x: u32) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn foo_usize (x: usize) {\n+fn foo_usize(x: usize) {\n     match x {\n         15 => {\n             let a = \"fifteen!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"other!\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-\n-fn main () -> i32 {\n+fn main() -> i32 {\n     let x = -2;\n-    foo_i32 (x);\n-    foo_i32 (334);\n-    foo_isize (-4768);\n-    foo_isize (15);\n+    foo_i32(x);\n+    foo_i32(334);\n+    foo_isize(-4768);\n+    foo_isize(15);\n \n     let y = 127;\n-    foo_u32 (15);\n-    foo_u32 (y);\n-    foo_usize (2394);\n-    foo_usize (15);\n+    foo_u32(15);\n+    foo_u32(y);\n+    foo_usize(2394);\n+    foo_usize(15);\n \n     0\n }"}, {"sha": "bb6aee946f6fefce0ba92ac16233e35cb5b51c62", "filename": "gcc/testsuite/rust/execute/torture/match_loop1.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_loop1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -7,10 +7,10 @@ extern \"C\" {\n enum E {\n     One,\n     Two,\n-    Other\n+    Other,\n }\n \n-fn foo () {\n+fn foo() {\n     let mut x = E::One;\n \n     loop {\n@@ -19,33 +19,38 @@ fn foo () {\n                 let a = \"E::One\\n\\0\";\n                 let b = a as *const str;\n                 let c = b as *const i8;\n-                printf (c);\n+                unsafe {\n+                    printf(c);\n+                }\n \n                 x = E::Two;\n             }\n             E::Two => {\n                 let a = \"E::Two\\n\\0\";\n                 let b = a as *const str;\n                 let c = b as *const i8;\n-                printf (c);\n+                unsafe {\n+                    printf(c);\n+                }\n \n                 x = E::Other;\n             }\n             _ => {\n                 let a = \"break!\\n\\0\";\n                 let b = a as *const str;\n                 let c = b as *const i8;\n-                printf (c);\n+                unsafe {\n+                    printf(c);\n+                }\n \n                 break;\n             }\n         }\n     }\n }\n \n-\n-fn main () -> i32 {\n-    foo ();\n+fn main() -> i32 {\n+    foo();\n \n     0\n }"}, {"sha": "82e9e34a989c7ecdafbb300c8053b835a86a8bec", "filename": "gcc/testsuite/rust/execute/torture/match_range1.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -6,29 +6,32 @@ extern \"C\" {\n \n const END_RANGE: i32 = 15;\n \n-fn foo (x: i32) {\n+fn foo(x: i32) {\n     match x {\n         0..=END_RANGE => {\n             let a = \"zero to END_RANGE\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n \n         _ => {\n             let a = \"else\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-\n-    foo (11);\n-    foo (15);\n-    foo (21);\n+fn main() -> i32 {\n+    foo(11);\n+    foo(15);\n+    foo(21);\n \n     0\n }"}, {"sha": "8153f9e1c7ecc171d1ef456801dbd8148019d583", "filename": "gcc/testsuite/rust/execute/torture/match_range2.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_range2.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -7,34 +7,39 @@ extern \"C\" {\n const BIG_A: char = 'A';\n const BIG_Z: char = 'Z';\n \n-fn bar (x: char) {\n+fn bar(x: char) {\n     match x {\n-\n         'a'..='z' => {\n             let a = \"lowercase\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n         BIG_A..=BIG_Z => {\n             let a = \"uppercase\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n         _ => {\n             let a = \"other\\n\\0\";\n             let b = a as *const str;\n             let c = b as *const i8;\n-            printf (c);\n+            unsafe {\n+                printf(c);\n+            }\n         }\n     }\n }\n \n-fn main () -> i32 {\n-    bar ('b');\n-    bar ('X');\n-    bar ('!');\n+fn main() -> i32 {\n+    bar('b');\n+    bar('X');\n+    bar('!');\n \n     0\n }"}, {"sha": "cb61cc0847c05e10bcbab3a3b90617ff9a3a5c29", "filename": "gcc/testsuite/rust/execute/torture/match_tuple1.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch_tuple1.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -30,12 +30,16 @@ fn inspect(f: Foo, g: u8) -> i32 {\n     return 25;\n }\n \n-fn main () -> i32 {\n-    let x = inspect (Foo::B, 2);\n-    let y = inspect (Foo::B, 1);\n+fn main() -> i32 {\n+    let x = inspect(Foo::B, 2);\n+    let y = inspect(Foo::B, 1);\n \n-    printf (\"x:%d\\n\" as *const str as *const i8, x);\n-    printf (\"y:%d\\n\" as *const str as *const i8, y);\n+    unsafe {\n+        printf(\"x:%d\\n\" as *const str as *const i8, x);\n+    }\n+    unsafe {\n+        printf(\"y:%d\\n\" as *const str as *const i8, y);\n+    }\n \n     y - x - 5\n }"}, {"sha": "5bd4926def85a07ab7e450454d8635ab11f2c9ec", "filename": "gcc/testsuite/rust/link/simple_function_0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8809ee8c6a5621e830f3cfe66c381f986e63c7f2/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs?ref=8809ee8c6a5621e830f3cfe66c381f986e63c7f2", "patch": "@@ -3,5 +3,6 @@ use simple_function_1::test_func;\n \n fn main() -> i32 {\n     let a = test_func(123);\n+    // { dg-bogus \"call to extern function\" \"\" { xfail *-*-* } .-1 }\n     a - 124\n }"}]}