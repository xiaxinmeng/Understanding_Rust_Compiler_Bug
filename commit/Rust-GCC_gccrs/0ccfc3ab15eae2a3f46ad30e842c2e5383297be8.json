{"sha": "0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNjZmMzYWIxNWVhZTJhM2Y0NmFkMzBlODQyYzJlNTM4MzI5N2JlOA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-11-28T15:36:13Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-11-28T15:36:13Z"}, "message": "predicates.md (move_double_src_operand): Check that misaligned addresses are offsettable.\n\n        * config/epiphany/predicates.md (move_double_src_operand):\n        Check that misaligned addresses are offsettable.\n        (move_dest_operand): Likewise.\n        * config/epiphany/epiphany.c (REG_OK_FOR_BASE_P): Don't force a\n        misaligned stack address to reg+index.\n\nFrom-SVN: r193894", "tree": {"sha": "553566056bb1c37042263ab1106cfb344e9ba0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/553566056bb1c37042263ab1106cfb344e9ba0a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3000ffecd7fbbbf9175fcfe88e3d236c6454ae68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3000ffecd7fbbbf9175fcfe88e3d236c6454ae68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3000ffecd7fbbbf9175fcfe88e3d236c6454ae68"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "ef32e39178a35488ff6ca8927044310c70d36673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "patch": "@@ -1,3 +1,11 @@\n+2012-11-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/epiphany/predicates.md (move_double_src_operand):\n+\tCheck that misaligned addresses are offsettable.\n+\t(move_dest_operand): Likewise.\n+\t* config/epiphany/epiphany.c (REG_OK_FOR_BASE_P): Don't force a\n+\tmisaligned stack address to reg+index.\n+\n 2012-11-28  Oleg Raikhman  <oleg@adapteva.com>\n \n \t* config/epiphany/epiphany.h (ASM_OUTPUT_ALIGN_WITH_NOP): Define."}, {"sha": "8901c4acc8cdb3fb050864e2570c0c39ab121e3e", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "patch": "@@ -1963,6 +1963,14 @@ epiphany_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n     return true;\n   if (LEGITIMATE_OFFSET_ADDRESS_P (mode, x))\n     return true;\n+  /* If this is a misaligned stack access, don't force it to reg+index.  */\n+  if (GET_MODE_SIZE (mode) == 8\n+      && GET_CODE (x) == PLUS && XEXP (x, 0) == stack_pointer_rtx\n+      /* Decomposed to SImode; GET_MODE_SIZE (SImode) == 4 */\n+      && !(INTVAL (XEXP (x, 1)) & 3)\n+      && INTVAL (XEXP (x, 1)) >= -2047 * 4\n+      && INTVAL (XEXP (x, 1)) <=  2046 * 4)\n+    return true;\n   if (TARGET_POST_INC\n       && (GET_CODE (x) == POST_DEC || GET_CODE (x) == POST_INC)\n       && RTX_OK_FOR_BASE_P (XEXP ((x), 0)))"}, {"sha": "f47f832c6e377782547234fdd37664af64f977e7", "filename": "gcc/config/epiphany/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccfc3ab15eae2a3f46ad30e842c2e5383297be8/gcc%2Fconfig%2Fepiphany%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fpredicates.md?ref=0ccfc3ab15eae2a3f46ad30e842c2e5383297be8", "patch": "@@ -164,6 +164,9 @@\n (define_predicate \"move_double_src_operand\"\n   (match_code \"reg,subreg,mem,const_int,const_double,const_vector\")\n {\n+  if (GET_CODE (op) == MEM && misaligned_operand (op, mode)\n+      && !address_operand (plus_constant (XEXP (op, 0), 4), SImode))\n+    return 0;\n   return general_operand (op, mode);\n })\n \n@@ -188,6 +191,9 @@\n \t  return register_operand (op, mode);\n \t}\n     case MEM :\n+      if (GET_MODE_SIZE (mode) == 8 && misaligned_operand (op, mode)\n+\t  && !address_operand (plus_constant (XEXP (op, 0), 4), SImode))\n+\treturn 0;\n       return address_operand (XEXP (op, 0), mode);\n     default :\n       return 0;"}]}