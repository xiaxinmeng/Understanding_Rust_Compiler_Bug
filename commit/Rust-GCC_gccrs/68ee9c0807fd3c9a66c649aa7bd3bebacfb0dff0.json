{"sha": "68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlZTljMDgwN2ZkM2M5YTY2YzY0OWFhN2JkM2JlYmFjZmIwZGZmMA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-05-05T06:30:51Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-05-05T06:30:51Z"}, "message": "Fix handling of temporary files.\n\n2012-05-05  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        * gfortran.texi (GFORTRAN_TMPDIR): Rename to TMPDIR, explain\n        algorithm for choosing temp directory.\n\n\n2012-05-05  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        * config.h.in: Regenerated.\n        * configure: Regenerated.\n        * configure.ac: Add checks for getegid and __secure_getenv.\n        * io/unix.c (P_tmpdir): Fallback definition for macro.\n        (tempfile_open): New function.\n        (tempfile): Use secure_getenv, call tempfile_open to try each\n        directory in turn.\n        * libgfortran.h (DEFAULT_TMPDIR): Remove macro.\n        (secure_getenv): New macro/prototype.\n        * runtime/environ.c (secure_getenv): New function.\n        (variable_table): Rename GFORTRAN_TMPDIR to TMPDIR.\n        * runtime/main.c (find_addr2line): Use secure_getenv.\n\nFrom-SVN: r187190", "tree": {"sha": "ac63807666eaf2ebc05379c848806981ba536332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac63807666eaf2ebc05379c848806981ba536332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/comments", "author": null, "committer": null, "parents": [{"sha": "9154c66213636f44954feb8d73257560370c11c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9154c66213636f44954feb8d73257560370c11c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9154c66213636f44954feb8d73257560370c11c2"}], "stats": {"total": 230, "additions": 163, "deletions": 67}, "files": [{"sha": "d1cb4294be6f8bfd321b3681271dc224923af6bd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -1,3 +1,8 @@\n+2012-05-05  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * gfortran.texi (GFORTRAN_TMPDIR): Rename to TMPDIR, explain\n+        algorithm for choosing temp directory.\n+\n 2012-05-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53175"}, {"sha": "96662c49423fb7205ee801a486138c67772ed941", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -576,10 +576,10 @@ environment variables.\n Malformed environment variables are silently ignored.\n \n @menu\n+* TMPDIR:: Directory for scratch files\n * GFORTRAN_STDIN_UNIT:: Unit number for standard input\n * GFORTRAN_STDOUT_UNIT:: Unit number for standard output\n * GFORTRAN_STDERR_UNIT:: Unit number for standard error\n-* GFORTRAN_TMPDIR:: Directory for scratch files\n * GFORTRAN_UNBUFFERED_ALL:: Do not buffer I/O for all units.\n * GFORTRAN_UNBUFFERED_PRECONNECTED:: Do not buffer I/O for preconnected units.\n * GFORTRAN_SHOW_LOCUS::  Show location for runtime errors\n@@ -590,6 +590,27 @@ Malformed environment variables are silently ignored.\n * GFORTRAN_ERROR_BACKTRACE:: Show backtrace on run-time errors\n @end menu\n \n+@node TMPDIR\n+@section @env{TMPDIR}---Directory for scratch files\n+\n+When opening a file with @code{STATUS='SCRATCH'}, GNU Fortran tries to\n+create the file in one of the potential directories by testing each\n+directory in the order below.\n+\n+@enumerate\n+@item\n+The environment variable @env{TMPDIR}, if it exists.\n+\n+@item\n+On the MinGW target, the directory returned by the @code{GetTempPath}\n+function. Alternatively, on the Cygwin target, the @env{TMP} and\n+@env{TEMP} environment variables, if they exist, in that order.\n+\n+@item\n+The @code{P_tmpdir} macro if it is defined, otherwise the directory\n+@file{/tmp}.\n+@end enumerate\n+\n @node GFORTRAN_STDIN_UNIT\n @section @env{GFORTRAN_STDIN_UNIT}---Unit number for standard input\n \n@@ -611,14 +632,6 @@ This environment variable can be used to select the unit number\n preconnected to standard error.  This must be a positive integer.\n The default value is 0.\n \n-@node GFORTRAN_TMPDIR\n-@section @env{GFORTRAN_TMPDIR}---Directory for scratch files\n-\n-This environment variable controls where scratch files are\n-created.  If this environment variable is missing,\n-GNU Fortran searches for the environment variable @env{TMP}, then @env{TEMP}.\n-If these are missing, the default is @file{/tmp}.\n-\n @node GFORTRAN_UNBUFFERED_ALL\n @section @env{GFORTRAN_UNBUFFERED_ALL}---Do not buffer I/O on all units\n "}, {"sha": "46f2cf4185324a207c0539da5c41100e7f249c59", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -1,3 +1,18 @@\n+2012-05-05  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * config.h.in: Regenerated.\n+        * configure: Regenerated.\n+        * configure.ac: Add checks for getegid and __secure_getenv.\n+        * io/unix.c (P_tmpdir): Fallback definition for macro.\n+        (tempfile_open): New function.\n+        (tempfile): Use secure_getenv, call tempfile_open to try each\n+        directory in turn.\n+        * libgfortran.h (DEFAULT_TMPDIR): Remove macro.\n+        (secure_getenv): New macro/prototype.\n+        * runtime/environ.c (secure_getenv): New function.\n+        (variable_table): Rename GFORTRAN_TMPDIR to TMPDIR.\n+        * runtime/main.c (find_addr2line): Use secure_getenv.\n+\n 2012-04-22  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/53051"}, {"sha": "b75fa968023a5f2271d34318ed7c989038aeb923", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -426,6 +426,9 @@\n /* Define to 1 if you have the `getcwd' function. */\n #undef HAVE_GETCWD\n \n+/* Define to 1 if you have the `getegid' function. */\n+#undef HAVE_GETEGID\n+\n /* Define to 1 if you have the `geteuid' function. */\n #undef HAVE_GETEUID\n \n@@ -834,6 +837,9 @@\n /* Define to 1 if you have the `ynl' function. */\n #undef HAVE_YNL\n \n+/* Define to 1 if you have the `__secure_getenv' function. */\n+#undef HAVE___SECURE_GETENV\n+\n /* Define to the sub-directory in which libtool stores uninstalled libraries.\n    */\n #undef LT_OBJDIR"}, {"sha": "e2db9ea25373806d811db3bea51ca9a893aaf272", "filename": "libgfortran/configure", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -2592,6 +2592,8 @@ as_fn_append ac_func_list \" getppid\"\n as_fn_append ac_func_list \" getuid\"\n as_fn_append ac_func_list \" geteuid\"\n as_fn_append ac_func_list \" umask\"\n+as_fn_append ac_func_list \" getegid\"\n+as_fn_append ac_func_list \" __secure_getenv\"\n as_fn_append ac_header_list \" math.h\"\n # Check that the precious variables saved in the cache have kept the same\n # value.\n@@ -12319,7 +12321,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12322 \"configure\"\n+#line 12324 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12425,7 +12427,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12428 \"configure\"\n+#line 12430 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16531,6 +16533,10 @@ done\n \n \n \n+\n+\n+\n+\n \n \n "}, {"sha": "41bef720234297aa855274400c4536a6bb7863bb", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -266,7 +266,7 @@ ftruncate chsize chdir getlogin gethostname kill link symlink sleep ttyname \\\n alarm access fork execl wait setmode execve pipe dup2 close \\\n strcasestr getrlimit gettimeofday stat fstat lstat getpwuid vsnprintf dup \\\n getcwd localtime_r gmtime_r strerror_r getpwuid_r ttyname_r clock_gettime \\\n-readlink getgid getpid getppid getuid geteuid umask)\n+readlink getgid getpid getppid getuid geteuid umask getegid __secure_getenv)\n \n # Check for C99 (and other IEEE) math functions\n GCC_CHECK_MATH_FUNC([acosf])"}, {"sha": "c81163f25635145f3df3d3661fb716ecd94eb149", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 78, "deletions": 47, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -176,6 +176,17 @@ fallback_access (const char *path, int mode)\n #endif\n \n \n+/* Fallback directory for creating temporary files.  P_tmpdir is\n+   defined on many POSIX platforms.  */\n+#ifndef P_tmpdir\n+#ifdef _P_tmpdir\n+#define P_tmpdir _P_tmpdir  /* MinGW */\n+#else\n+#define P_tmpdir \"/tmp\"\n+#endif\n+#endif\n+\n+\n /* Unix and internal stream I/O module */\n \n static const int BUFFER_SIZE = 8192;\n@@ -1026,54 +1037,23 @@ unpack_filename (char *cstring, const char *fstring, int len)\n }\n \n \n-/* tempfile()-- Generate a temporary filename for a scratch file and\n- * open it.  mkstemp() opens the file for reading and writing, but the\n- * library mode prevents anything that is not allowed.  The descriptor\n- * is returned, which is -1 on error.  The template is pointed to by \n- * opp->file, which is copied into the unit structure\n- * and freed later. */\n+/* Helper function for tempfile(). Tries to open a temporary file in\n+   the directory specified by tempdir. If successful, the file name is\n+   stored in fname and the descriptor returned. Returns -1 on\n+   failure.  */\n \n static int\n-tempfile (st_parameter_open *opp)\n+tempfile_open (const char *tempdir, char **fname)\n {\n-  const char *tempdir;\n-  char *template;\n-  const char *slash = \"/\";\n   int fd;\n-  size_t tempdirlen;\n-\n-#ifndef HAVE_MKSTEMP\n-  int count;\n-  size_t slashlen;\n-#endif\n+  const char *slash = \"/\";\n \n-  tempdir = getenv (\"GFORTRAN_TMPDIR\");\n-#ifdef __MINGW32__\n-  if (tempdir == NULL)\n-    {\n-      char buffer[MAX_PATH + 1];\n-      DWORD ret;\n-      ret = GetTempPath (MAX_PATH, buffer);\n-      /* If we are not able to get a temp-directory, we use\n-\t current directory.  */\n-      if (ret > MAX_PATH || !ret)\n-        buffer[0] = 0;\n-      else\n-        buffer[ret] = 0;\n-      tempdir = strdup (buffer);\n-    }\n-#else\n-  if (tempdir == NULL)\n-    tempdir = getenv (\"TMP\");\n-  if (tempdir == NULL)\n-    tempdir = getenv (\"TEMP\");\n-  if (tempdir == NULL)\n-    tempdir = DEFAULT_TEMPDIR;\n-#endif\n+  if (!tempdir)\n+    return -1;\n \n-  /* Check for special case that tempdir contains slash\n-     or backslash at end.  */\n-  tempdirlen = strlen (tempdir);\n+  /* Check for the special case that tempdir ends with a slash or\n+     backslash.  */\n+  size_t tempdirlen = strlen (tempdir);\n   if (*tempdir == 0 || tempdir[tempdirlen - 1] == '/'\n #ifdef __MINGW32__\n       || tempdir[tempdirlen - 1] == '\\\\'\n@@ -1082,7 +1062,7 @@ tempfile (st_parameter_open *opp)\n     slash = \"\";\n \n   // Take care that the template is longer in the mktemp() branch.\n-  template = xmalloc (tempdirlen + 23);\n+  char * template = xmalloc (tempdirlen + 23);\n \n #ifdef HAVE_MKSTEMP\n   snprintf (template, tempdirlen + 23, \"%s%sgfortrantmpXXXXXX\", \n@@ -1092,8 +1072,8 @@ tempfile (st_parameter_open *opp)\n \n #else /* HAVE_MKSTEMP */\n   fd = -1;\n-  count = 0;\n-  slashlen = strlen (slash);\n+  int count = 0;\n+  size_t slashlen = strlen (slash);\n   do\n     {\n       snprintf (template, tempdirlen + 23, \"%s%sgfortrantmpaaaXXXXXX\", \n@@ -1127,8 +1107,59 @@ tempfile (st_parameter_open *opp)\n   while (fd == -1 && errno == EEXIST);\n #endif /* HAVE_MKSTEMP */\n \n-  opp->file = template;\n-  opp->file_len = strlen (template);\t/* Don't include trailing nul */\n+  *fname = template;\n+  return fd;\n+}\n+\n+\n+/* tempfile()-- Generate a temporary filename for a scratch file and\n+ * open it.  mkstemp() opens the file for reading and writing, but the\n+ * library mode prevents anything that is not allowed.  The descriptor\n+ * is returned, which is -1 on error.  The template is pointed to by \n+ * opp->file, which is copied into the unit structure\n+ * and freed later. */\n+\n+static int\n+tempfile (st_parameter_open *opp)\n+{\n+  const char *tempdir;\n+  char *fname;\n+  int fd = -1;\n+\n+  tempdir = secure_getenv (\"TMPDIR\");\n+  fd = tempfile_open (tempdir, &fname);\n+#ifdef __MINGW32__\n+  if (fd == -1)\n+    {\n+      char buffer[MAX_PATH + 1];\n+      DWORD ret;\n+      ret = GetTempPath (MAX_PATH, buffer);\n+      /* If we are not able to get a temp-directory, we use\n+\t current directory.  */\n+      if (ret > MAX_PATH || !ret)\n+        buffer[0] = 0;\n+      else\n+        buffer[ret] = 0;\n+      tempdir = strdup (buffer);\n+      fd = tempfile_open (tempdir, &fname);\n+    }\n+#elif defined(__CYGWIN__)\n+  if (fd == -1)\n+    {\n+      tempdir = secure_getenv (\"TMP\");\n+      fd = tempfile_open (tempdir, &fname);\n+    }\n+  if (fd == -1)\n+    {\n+      tempdir = secure_getenv (\"TEMP\");\n+      fd = tempfile_open (tempdir, &fname);\n+    }\n+#endif\n+  if (fd == -1)\n+    fd = tempfile_open (P_tmpdir, &fname);\n+ \n+  opp->file = fname;\n+  opp->file_len = strlen (fname);\t/* Don't include trailing nul */\n \n   return fd;\n }"}, {"sha": "051e2e85a1eceb6f2a8856f401c1e9d5faecb557", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -584,10 +584,6 @@ iexport_data_proto(filename);\n #define gfc_alloca(x)  __builtin_alloca(x)\n \n \n-/* Directory for creating temporary files.  Only used when none of the\n-   following environment variables exist: GFORTRAN_TMPDIR, TMP and TEMP.  */\n-#define DEFAULT_TEMPDIR \"/tmp\"\n-\n /* The default value of record length for preconnected units is defined\n    here. This value can be overriden by an environment variable.\n    Default value is 1 Gb.  */\n@@ -776,6 +772,18 @@ internal_proto(show_variables);\n unit_convert get_unformatted_convert (int);\n internal_proto(get_unformatted_convert);\n \n+/* Secure getenv() which returns NULL if running as SUID/SGID.  */\n+#ifdef HAVE___SECURE_GETENV\n+#define secure_getenv __secure_getenv\n+#elif defined(HAVE_GETUID) && defined(HAVE_GETEUID) \\\n+  && defined(HAVE_GETGID) && defined(HAVE_GETEGID)\n+#define FALLBACK_SECURE_GETENV\n+extern char *secure_getenv (const char *);\n+internal_proto(secure_getenv);\n+#else\n+#define secure_getenv getenv\n+#endif\n+\n /* string.c */\n \n extern int find_option (st_parameter_common *, const char *, gfc_charlen_type,"}, {"sha": "bcb91f44613a8103b798b3bc9f72727fce10242a", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -56,6 +56,19 @@ variable;\n \n static void init_unformatted (variable *);\n \n+\n+#ifdef FALLBACK_SECURE_GETENV\n+char *\n+secure_getenv (const char *name)\n+{\n+  if ((getuid () == geteuid ()) && (getgid () == getegid ()))\n+    return getenv (name);\n+  else\n+    return NULL;\n+}\n+#endif\n+\n+\n /* print_spaces()-- Print a particular number of spaces.  */\n \n static void\n@@ -285,9 +298,8 @@ static variable variable_table[] = {\n    \"Unit number that will be preconnected to standard error\\n\"\n    \"(No preconnection if negative)\", 0},\n \n-  {\"GFORTRAN_TMPDIR\", 0, NULL, init_string, show_string,\n-   \"Directory for scratch files.  Overrides the TMP environment variable\\n\"\n-   \"If TMP is not set \" DEFAULT_TEMPDIR \" is used.\", 0},\n+  {\"TMPDIR\", 0, NULL, init_string, show_string,\n+   \"Directory for scratch files.\", 0},\n \n   {\"GFORTRAN_UNBUFFERED_ALL\", 0, &options.all_unbuffered, init_boolean,\n    show_boolean,"}, {"sha": "72c32fc2e1bee2c949300a04d2c3727d0fcf679e", "filename": "libgfortran/runtime/main.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fruntime%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0/libgfortran%2Fruntime%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmain.c?ref=68ee9c0807fd3c9a66c649aa7bd3bebacfb0dff0", "patch": "@@ -163,7 +163,7 @@ find_addr2line (void)\n {\n #ifdef HAVE_ACCESS\n #define A2L_LEN 10\n-  char *path = getenv (\"PATH\");\n+  char *path = secure_getenv (\"PATH\");\n   if (!path)\n     return;\n   size_t n = strlen (path);"}]}