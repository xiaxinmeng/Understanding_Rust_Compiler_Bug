{"sha": "92355a9cf2a71640db076953161aab1b1595d92b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIzNTVhOWNmMmE3MTY0MGRiMDc2OTUzMTYxYWFiMWIxNTk1ZDkyYg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-07-02T11:23:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-07-02T11:23:23Z"}, "message": "expmed.c (emit_cstore, [...]): Accept target_mode instead of recomputing it.\n\n2009-07-02  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* expmed.c (emit_cstore, emit_store_flag_1): Accept target_mode\n\tinstead of recomputing it.  Adjust calls.\n\t(emit_store_flag): Adjust recursive calls.\n\nFrom-SVN: r149171", "tree": {"sha": "b638678f94228e389a1922ad2184bba3e3be68df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b638678f94228e389a1922ad2184bba3e3be68df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92355a9cf2a71640db076953161aab1b1595d92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92355a9cf2a71640db076953161aab1b1595d92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92355a9cf2a71640db076953161aab1b1595d92b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92355a9cf2a71640db076953161aab1b1595d92b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91deb93712047ca1b5d3d5ddf8b0f12b4a164ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91deb93712047ca1b5d3d5ddf8b0f12b4a164ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91deb93712047ca1b5d3d5ddf8b0f12b4a164ef8"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "d57902b386d4931d7de1625770ac33be19dc9a4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92355a9cf2a71640db076953161aab1b1595d92b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92355a9cf2a71640db076953161aab1b1595d92b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92355a9cf2a71640db076953161aab1b1595d92b", "patch": "@@ -1,3 +1,9 @@\n+2009-07-02  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* expmed.c (emit_cstore, emit_store_flag_1): Accept target_mode\n+\tinstead of recomputing it.  Adjust calls.\n+\t(emit_store_flag): Adjust recursive calls.\n+\n 2009-07-02  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-live.c (remove_unused_locals): Do not remove"}, {"sha": "aa8d02d0e83a3354f762b1faf6de4d7bae8c3d09", "filename": "gcc/expmed.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92355a9cf2a71640db076953161aab1b1595d92b/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92355a9cf2a71640db076953161aab1b1595d92b/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=92355a9cf2a71640db076953161aab1b1595d92b", "patch": "@@ -5128,10 +5128,10 @@ expand_and (enum machine_mode mode, rtx op0, rtx op1, rtx target)\n static rtx\n emit_cstore (rtx target, enum insn_code icode, enum rtx_code code,\n \t     enum machine_mode mode, enum machine_mode compare_mode,\n-\t     int unsignedp, rtx x, rtx y, int normalizep)\n+\t     int unsignedp, rtx x, rtx y, int normalizep,\n+\t     enum machine_mode target_mode)\n {\n   rtx op0, last, comparison, subtarget, pattern;\n-  enum machine_mode target_mode;\n   enum machine_mode result_mode = insn_data[(int) icode].operand[0].mode;\n \n   last = get_last_insn ();\n@@ -5149,8 +5149,12 @@ emit_cstore (rtx target, enum insn_code icode, enum rtx_code code,\n       return NULL_RTX;\n     }\n \n-  if (!target\n-      || optimize\n+  if (target_mode == VOIDmode)\n+    target_mode = result_mode;\n+  if (!target)\n+    target = gen_reg_rtx (target_mode);\n+  \n+  if (optimize\n       || !(insn_data[(int) icode].operand[0].predicate (target, result_mode)))\n     subtarget = gen_reg_rtx (result_mode);\n   else\n@@ -5161,10 +5165,6 @@ emit_cstore (rtx target, enum insn_code icode, enum rtx_code code,\n     return NULL_RTX;\n   emit_insn (pattern);\n \n-  if (!target)\n-    target = gen_reg_rtx (GET_MODE (subtarget));\n-  target_mode = GET_MODE (target);\n-  \n   /* If we are converting to a wider mode, first convert to\n      TARGET_MODE, then normalize.  This produces better combining\n      opportunities on machines that have a SIGN_EXTRACT when we are\n@@ -5235,12 +5235,12 @@ emit_cstore (rtx target, enum insn_code icode, enum rtx_code code,\n \n static rtx\n emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n-\t\t   enum machine_mode mode, int unsignedp, int normalizep)\n+\t\t   enum machine_mode mode, int unsignedp, int normalizep,\n+\t\t   enum machine_mode target_mode)\n {\n   rtx subtarget;\n   enum insn_code icode;\n   enum machine_mode compare_mode;\n-  enum machine_mode target_mode = target ? GET_MODE (target) : VOIDmode;\n   enum mode_class mclass;\n   enum rtx_code scode;\n   rtx tem;\n@@ -5319,7 +5319,7 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \n \t  if (tem != 0)\n \t    tem = emit_store_flag (NULL_RTX, code, tem, op1, word_mode,\n-\t\t\t\t    unsignedp, normalizep);\n+\t\t\t\t   unsignedp, normalizep);\n \t}\n       else if ((code == LT || code == GE) && op1 == const0_rtx)\n \t{\n@@ -5337,8 +5337,10 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \n       if (tem)\n \t{\n-\t  if (target_mode == VOIDmode)\n+\t  if (target_mode == VOIDmode || GET_MODE (tem) == target_mode)\n \t    return tem;\n+\t  if (!target)\n+\t    target = gen_reg_rtx (target_mode);\n \n \t  convert_move (target, tem,\n \t\t\t0 == (STORE_FLAG_VALUE\n@@ -5404,14 +5406,14 @@ emit_store_flag_1 (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t{\n \t  do_pending_stack_adjust ();\n \t  tem = emit_cstore (target, icode, code, mode, compare_mode,\n-\t\t\t     unsignedp, op0, op1, normalizep);\n+\t\t\t     unsignedp, op0, op1, normalizep, target_mode);\n \t  if (tem)\n \t    return tem;\n \n \t  if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t    {\n \t      tem = emit_cstore (target, icode, scode, mode, compare_mode,\n-\t\t\t\t unsignedp, op1, op0, normalizep);\n+\t\t\t\t unsignedp, op1, op0, normalizep, target_mode);\n \t      if (tem)\n \t        return tem;\n \t    }\n@@ -5446,7 +5448,8 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n   rtx subtarget;\n   rtx tem, last, trueval;\n \n-  tem = emit_store_flag_1 (target, code, op0, op1, mode, unsignedp, normalizep);\n+  tem = emit_store_flag_1 (target, code, op0, op1, mode, unsignedp, normalizep,\n+\t\t\t   target_mode);\n   if (tem)\n     return tem;\n \n@@ -5499,7 +5502,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t      || (STORE_FLAG_VALUE == -1 && normalizep == 1))\n \t    {\n \t      tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n-\t\t\t\t       STORE_FLAG_VALUE);\n+\t\t\t\t       STORE_FLAG_VALUE, target_mode);\n \t      if (tem)\n                 return expand_binop (target_mode, add_optab, tem,\n \t\t\t\t     GEN_INT (normalizep),\n@@ -5508,7 +5511,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t  else\n \t    {\n \t      tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n-\t\t\t\t       normalizep);\n+\t\t\t\t       normalizep, target_mode);\n \t      if (tem)\n                 return expand_binop (target_mode, xor_optab, tem, trueval,\n \t\t\t\t     target, INTVAL (trueval) >= 0, OPTAB_WIDEN);\n@@ -5528,13 +5531,15 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n       if (!HONOR_NANS (mode))\n \t{\n           gcc_assert (first_code == (and_them ? ORDERED : UNORDERED));\n-\t  return emit_store_flag_1 (target, code, op0, op1, mode, 0, normalizep);\n+\t  return emit_store_flag_1 (target, code, op0, op1, mode, 0, normalizep,\n+\t\t\t\t    target_mode);\n \t}\n \n #ifdef HAVE_conditional_move\n       /* Try using a setcc instruction for ORDERED/UNORDERED, followed by a\n \t conditional move.  */\n-      tem = emit_store_flag_1 (subtarget, first_code, op0, op1, mode, 0, normalizep);\n+      tem = emit_store_flag_1 (subtarget, first_code, op0, op1, mode, 0,\n+\t\t\t       normalizep, target_mode);\n       if (tem == 0)\n \treturn 0;\n \n@@ -5573,7 +5578,7 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t\t\t    OPTAB_WIDEN);\n       if (tem != 0)\n \ttem = emit_store_flag_1 (target, code, tem, const0_rtx,\n-\t\t\t         mode, unsignedp, normalizep);\n+\t\t\t         mode, unsignedp, normalizep, target_mode);\n       if (tem != 0)\n \treturn tem;\n \n@@ -5595,15 +5600,15 @@ emit_store_flag (rtx target, enum rtx_code code, rtx op0, rtx op1,\n \t  || (STORE_FLAG_VALUE == -1 && normalizep == 1))\n \t{\n \t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n-\t\t\t\t   STORE_FLAG_VALUE);\n+\t\t\t\t   STORE_FLAG_VALUE, target_mode);\n \t  if (tem != 0)\n             tem = expand_binop (target_mode, add_optab, tem,\n \t\t\t\tGEN_INT (normalizep), target, 0, OPTAB_WIDEN);\n \t}\n       else\n \t{\n \t  tem = emit_store_flag_1 (subtarget, rcode, op0, op1, mode, 0,\n-\t\t\t\t   normalizep);\n+\t\t\t\t   normalizep, target_mode);\n \t  if (tem != 0)\n             tem = expand_binop (target_mode, xor_optab, tem, trueval, target,\n \t\t\t\tINTVAL (trueval) >= 0, OPTAB_WIDEN);"}]}