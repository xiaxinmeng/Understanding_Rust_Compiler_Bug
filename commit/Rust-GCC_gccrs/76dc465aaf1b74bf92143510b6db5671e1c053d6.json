{"sha": "76dc465aaf1b74bf92143510b6db5671e1c053d6", "node_id": "C_kwDOANBUbNoAKDc2ZGM0NjVhYWYxYjc0YmY5MjE0MzUxMGI2ZGI1NjcxZTFjMDUzZDY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-31T20:27:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-31T20:27:58Z"}, "message": "c++: CTAD for class tmpl defined inside partial spec [PR104294]\n\nHere during deduction guide generation for the nested class template\nB<char(int)>::C, the computation of outer_args yields the template\narguments relative to the primary template for B (i.e. {char(int)})\nbut what we really want is those relative to C's enclosing scope, the\npartial specialization of B (i.e. {char, int}).\n\n\tPR c++/104294\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (ctor_deduction_guides_for): Correct computation of\n\touter_args.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction106.C: New test.", "tree": {"sha": "765baee05b57613c7113197944dd3f6661ce9253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765baee05b57613c7113197944dd3f6661ce9253"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76dc465aaf1b74bf92143510b6db5671e1c053d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dc465aaf1b74bf92143510b6db5671e1c053d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76dc465aaf1b74bf92143510b6db5671e1c053d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dc465aaf1b74bf92143510b6db5671e1c053d6/comments", "author": null, "committer": null, "parents": [{"sha": "0eb06ee9a40a09d2f492461289d69aa39f757e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb06ee9a40a09d2f492461289d69aa39f757e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb06ee9a40a09d2f492461289d69aa39f757e66"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "feee629f1dd16f07e4d511befd3a30ac0a0a4a70", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dc465aaf1b74bf92143510b6db5671e1c053d6/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dc465aaf1b74bf92143510b6db5671e1c053d6/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=76dc465aaf1b74bf92143510b6db5671e1c053d6", "patch": "@@ -29563,7 +29563,9 @@ ctor_deduction_guides_for (tree tmpl, tsubst_flags_t complain)\n   if (DECL_CLASS_SCOPE_P (tmpl)\n       && CLASSTYPE_TEMPLATE_INSTANTIATION (DECL_CONTEXT (tmpl)))\n     {\n-      outer_args = CLASSTYPE_TI_ARGS (DECL_CONTEXT (tmpl));\n+      outer_args = copy_node (CLASSTYPE_TI_ARGS (type));\n+      gcc_assert (TMPL_ARGS_DEPTH (outer_args) > 1);\n+      --TREE_VEC_LENGTH (outer_args);\n       type = TREE_TYPE (most_general_template (tmpl));\n     }\n "}, {"sha": "b4c4d262f44cf08153108b853e7ee0205138a200", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction106.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dc465aaf1b74bf92143510b6db5671e1c053d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dc465aaf1b74bf92143510b6db5671e1c053d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction106.C?ref=76dc465aaf1b74bf92143510b6db5671e1c053d6", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/104294\n+// { dg-do compile { target c++17 } }\n+\n+template<class> struct B;\n+\n+template<class R, class... Args>\n+struct B<R(Args...)> {\n+  template<class T> struct C { C(T); };\n+  C(decltype(nullptr)) -> C<void*>;\n+};\n+\n+using ty1 = decltype(B<char(int)>::C{0});\n+using ty1 = B<char(int)>::C<int>;\n+\n+using ty2 = decltype(B<char(int)>::C{nullptr});\n+using ty2 = B<char(int)>::C<void*>;"}]}