{"sha": "1aad71067c3ed227a9fce0e50c1818250eef6f92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhZDcxMDY3YzNlZDIyN2E5ZmNlMGU1MGMxODE4MjUwZWVmNmY5Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-07-04T11:48:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-07-04T11:48:44Z"}, "message": "PR 81292: ICE on related strlens after r249880\n\nr249880 installed the result of a strlen in a strinfo if the strinfo\nwasn't previously a full string.  But as Jakub says in the PR comments,\nwe can't just do that in isolation, because there are no vdefs on the\ncall that would invalidate any related strinfos.\n\nThis patch updates the related strinfos if the adjustment is simple and\ninvalidates them otherwise.  As elsewhere, we treat adjustments of the\nform strlen +/- INTEGER_CST as simple but anything else as too complex.\n\n2017-07-04  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/81292\n\t* tree-ssa-strlen.c (handle_builtin_strlen): When setting\n\tfull_string_p, also call adjust_related_strinfos if the adjustment\n\tis simple, otherwise invalidate related strinfos.\n\ngcc/testsuite/\n\tPR tree-optimization/81292\n\t* gcc.dg/pr81292-1.c: New test.\n\t* gcc.dg/pr81292-2.c: Likewise.\n\nFrom-SVN: r249961", "tree": {"sha": "12020e076b3b67d0a74a4361ec63a0c71c1b88e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12020e076b3b67d0a74a4361ec63a0c71c1b88e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aad71067c3ed227a9fce0e50c1818250eef6f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aad71067c3ed227a9fce0e50c1818250eef6f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aad71067c3ed227a9fce0e50c1818250eef6f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aad71067c3ed227a9fce0e50c1818250eef6f92/comments", "author": null, "committer": null, "parents": [{"sha": "7c819e8ae28435601df531215419957814990cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c819e8ae28435601df531215419957814990cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c819e8ae28435601df531215419957814990cd5"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "b262a646aec6e9a1279727e0219881cd75b0394d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aad71067c3ed227a9fce0e50c1818250eef6f92", "patch": "@@ -1,3 +1,10 @@\n+2017-07-04  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/81292\n+\t* tree-ssa-strlen.c (handle_builtin_strlen): When setting\n+\tfull_string_p, also call adjust_related_strinfos if the adjustment\n+\tis simple, otherwise invalidate related strinfos.\n+\n 2017-07-04  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/81040"}, {"sha": "74f9ee6ab97f733ca5b969acb571c17f55d12889", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aad71067c3ed227a9fce0e50c1818250eef6f92", "patch": "@@ -1,3 +1,9 @@\n+2017-07-04  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/81292\n+\t* gcc.dg/pr81292-1.c: New test.\n+\t* gcc.dg/pr81292-2.c: Likewise.\n+\n 2017-07-04  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/81040"}, {"sha": "931e4c37c171f7c7d2cad5f766bc6123002f8189", "filename": "gcc/testsuite/gcc.dg/pr81292-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81292-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81292-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81292-1.c?ref=1aad71067c3ed227a9fce0e50c1818250eef6f92", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+#include \"strlenopt.h\"\n+\n+char a[10];\n+\n+int __attribute__ ((noinline, noclone))\n+f1 (int n)\n+{\n+  a[0] = '1';\n+  a[1] = '2';\n+  return strlen (a + 1) < n ? strlen (a) : 100;\n+}\n+\n+int __attribute__ ((noinline, noclone))\n+f2 (char *a, int n)\n+{\n+  a[0] = '1';\n+  a[1] = '2';\n+  return strlen (a + 1) < n ? strlen (a) : 100;\n+}\n+\n+int\n+main (void)\n+{\n+  char b[10];\n+  strcpy (a + 2, \"345\");\n+  strcpy (b + 2, \"34567\");\n+  if (f1 (100) != 5 || f2 (b, 100) != 7)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 2 \"strlen\" } } */"}, {"sha": "c1c507f982e94ef224dcf82a66a36e2f4408af60", "filename": "gcc/testsuite/gcc.dg/pr81292-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81292-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81292-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81292-2.c?ref=1aad71067c3ed227a9fce0e50c1818250eef6f92", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+#include \"strlenopt.h\"\n+\n+char a[] = { 0, 'a', 0, 'b', 'c', 0, 'd', 'e', 'f', 0 };\n+\n+int __attribute__ ((noinline, noclone))\n+f1 (void)\n+{\n+  a[0] = '1';\n+  a[strlen (a)] = '2';\n+  a[strlen (a)] = '3';\n+  return strlen (a);\n+}\n+\n+int __attribute__ ((noinline, noclone))\n+f2 (char *a)\n+{\n+  a[0] = '1';\n+  a[strlen (a)] = '2';\n+  a[strlen (a)] = '3';\n+  return strlen (a);\n+}\n+\n+int\n+main (void)\n+{\n+  char b[] = { 0, 0, 'a', 'b', 0, 0 };\n+  if (f1 () != 9 || f2 (b) != 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 6 \"strlen\" } } */"}, {"sha": "b0563fe7c324001bc606b680e5ac24856b7d1d86", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aad71067c3ed227a9fce0e50c1818250eef6f92/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=1aad71067c3ed227a9fce0e50c1818250eef6f92", "patch": "@@ -1214,8 +1214,23 @@ handle_builtin_strlen (gimple_stmt_iterator *gsi)\n \t      /* Until now we only had a lower bound on the string length.\n \t\t Install LHS as the actual length.  */\n \t      si = unshare_strinfo (si);\n+\t      tree old = si->nonzero_chars;\n \t      si->nonzero_chars = lhs;\n \t      si->full_string_p = true;\n+\t      if (TREE_CODE (old) == INTEGER_CST)\n+\t\t{\n+\t\t  location_t loc = gimple_location (stmt);\n+\t\t  old = fold_convert_loc (loc, TREE_TYPE (lhs), old);\n+\t\t  tree adj = fold_build2_loc (loc, MINUS_EXPR,\n+\t\t\t\t\t      TREE_TYPE (lhs), lhs, old);\n+\t\t  adjust_related_strinfos (loc, si, adj);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  si->first = 0;\n+\t\t  si->prev = 0;\n+\t\t  si->next = 0;\n+\t\t}\n \t    }\n \t  return;\n \t}"}]}