{"sha": "7677ffa441be09b532d01eb5b0ee6cc5c2322375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3N2ZmYTQ0MWJlMDliNTMyZDAxZWI1YjBlZTZjYzVjMjMyMjM3NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-29T18:13:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-05-29T18:13:55Z"}, "message": "(operand_subword): Correctly handle case when\nREAL_VALUE_TO_TARGET_DOUBLE is used on a 64-bit machine.\n\nFrom-SVN: r4593", "tree": {"sha": "7bd29990524d37fb97cc4b584910fa0f2e92fb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd29990524d37fb97cc4b584910fa0f2e92fb5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7677ffa441be09b532d01eb5b0ee6cc5c2322375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7677ffa441be09b532d01eb5b0ee6cc5c2322375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7677ffa441be09b532d01eb5b0ee6cc5c2322375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7677ffa441be09b532d01eb5b0ee6cc5c2322375/comments", "author": null, "committer": null, "parents": [{"sha": "71ae9cc6ce74e853c802bb5ec8dad7704f53ce41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71ae9cc6ce74e853c802bb5ec8dad7704f53ce41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71ae9cc6ce74e853c802bb5ec8dad7704f53ce41"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "afa0601b8bfbeeed7bc879f92f906641f4558640", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7677ffa441be09b532d01eb5b0ee6cc5c2322375/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7677ffa441be09b532d01eb5b0ee6cc5c2322375/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=7677ffa441be09b532d01eb5b0ee6cc5c2322375", "patch": "@@ -921,19 +921,33 @@ operand_subword (op, i, validate_address, mode)\n \n   /* The only remaining cases are when OP is a constant.  If the host and\n      target floating formats are the same, handling two-word floating\n-     constants are easy.  */\n+     constants are easy.  Note that REAL_VALUE_TO_TARGET_{SINGLE,DOUBLE}\n+     are defined as returning 32 bit and 64-bit values, respectively,\n+     and not values of BITS_PER_WORD and 2 * BITS_PER_WORD bits.  */\n #ifdef REAL_ARITHMETIC\n   if ((HOST_BITS_PER_WIDE_INT == BITS_PER_WORD)\n       && GET_MODE_CLASS (mode) == MODE_FLOAT\n-      && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n+      && GET_MODE_BITSIZE (mode) == 64\n       && GET_CODE (op) == CONST_DOUBLE)\n     {\n       HOST_WIDE_INT k[2];\n       REAL_VALUE_TYPE rv;\n \n       REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n       REAL_VALUE_TO_TARGET_DOUBLE (rv, k);\n-      return GEN_INT (k[i]);\n+\n+      /* We handle 32-bit and 64-bit host words here.  Note that the order in\n+\t which the words are written depends on the word endianness.\n+\n+\t ??? This is a potential portability problem and should\n+\t be fixed at some point.  */\n+      if (HOST_BITS_PER_WIDE_INT == 32)\n+\treturn GEN_INT (k[i]);\n+      else if (HOST_BITS_PER_WIDE_INT == 64 && i == 0)\n+\treturn GEN_INT ((k[! WORDS_BIG_ENDIAN] << 32)\n+\t\t\t| k[WORDS_BIG_ENDIAN]);\n+      else\n+\tabort ();\n     }\n #else /* no REAL_ARITHMETIC */\n   if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n@@ -963,7 +977,7 @@ operand_subword (op, i, validate_address, mode)\n #ifdef REAL_ARITHMETIC\n   if ((HOST_BITS_PER_WIDE_INT == BITS_PER_WORD)\n       && GET_MODE_CLASS (mode) == MODE_FLOAT\n-      && GET_MODE_SIZE (mode) == UNITS_PER_WORD\n+      && GET_MODE_BITSIZE (mode) == 32\n       && GET_CODE (op) == CONST_DOUBLE)\n     {\n       HOST_WIDE_INT l;"}]}