{"sha": "cd259a9825b53a8eb04b4849dc7b92b293902d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QyNTlhOTgyNWI1M2E4ZWIwNGI0ODQ5ZGM3YjkyYjI5MzkwMmQ1Nw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-01-25T16:58:26Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-25T16:58:26Z"}, "message": "decl.c (gnat_to_gnu_entity): Use TREE_OVERFLOW instead of TREE_CONSTANT_OVERFLOW.\n\n\n\t* decl.c (gnat_to_gnu_entity): Use TREE_OVERFLOW instead of\n\tTREE_CONSTANT_OVERFLOW.\n\t(allocatable_size_p, annotate_value): Likewise.\n\t* trans.c (gnat_to_gnu): Likewise.\n\t* utils.c (unchecked_convert): Likewise.\n\t* utils2.c (build_simple_component_ref): Likewise.\n\nFrom-SVN: r121177", "tree": {"sha": "b5e617dbc41beab543899b216efc6fdc63f80bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e617dbc41beab543899b216efc6fdc63f80bc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd259a9825b53a8eb04b4849dc7b92b293902d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd259a9825b53a8eb04b4849dc7b92b293902d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd259a9825b53a8eb04b4849dc7b92b293902d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd259a9825b53a8eb04b4849dc7b92b293902d57/comments", "author": null, "committer": null, "parents": [{"sha": "d6efbf5a8848a406f10a68fd6cf77c03fb5859ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6efbf5a8848a406f10a68fd6cf77c03fb5859ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6efbf5a8848a406f10a68fd6cf77c03fb5859ce"}], "stats": {"total": 53, "additions": 28, "deletions": 25}, "files": [{"sha": "183a7fb9b0af361bcf0b4c998c6be05e3542ad97", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cd259a9825b53a8eb04b4849dc7b92b293902d57", "patch": "@@ -1,3 +1,12 @@\n+2007-01-24  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* decl.c (gnat_to_gnu_entity): Use TREE_OVERFLOW instead of\n+\tTREE_CONSTANT_OVERFLOW.\n+\t(allocatable_size_p, annotate_value): Likewise.\n+\t* trans.c (gnat_to_gnu): Likewise.\n+\t* utils.c (unchecked_convert): Likewise.\n+\t* utils2.c (build_simple_component_ref): Likewise.\n+\n 2007-01-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR bootstrap/30541"}, {"sha": "a7ee5ce2be8fc0dd610db69cf51c45ffed4acc5e", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=cd259a9825b53a8eb04b4849dc7b92b293902d57", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1044,7 +1044,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t  }\n \n \t\tif (TREE_CODE (TYPE_SIZE_UNIT (gnu_alloc_type)) == INTEGER_CST\n-\t\t    && TREE_CONSTANT_OVERFLOW (TYPE_SIZE_UNIT (gnu_alloc_type))\n+\t\t    && TREE_OVERFLOW (TYPE_SIZE_UNIT (gnu_alloc_type))\n \t\t    && !Is_Imported (gnat_entity))\n \t\t  post_error (\"Storage_Error will be raised at run-time?\",\n \t\t\t      gnat_entity);\n@@ -1907,9 +1907,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t      (fold (build2 (MINUS_EXPR, gnu_index_subtype,\n \t\t\t\t     TYPE_MAX_VALUE (gnu_index_subtype),\n \t\t\t\t     TYPE_MIN_VALUE (gnu_index_subtype))))))\n-\t\tTREE_OVERFLOW (gnu_min) = TREE_OVERFLOW (gnu_max)\n-\t\t  = TREE_CONSTANT_OVERFLOW (gnu_min)\n-\t\t  = TREE_CONSTANT_OVERFLOW (gnu_max) = 0;\n+\t\tTREE_OVERFLOW (gnu_min) = TREE_OVERFLOW (gnu_max) = 0;\n \n \t      /* Similarly, if the range is null, use bounds of 1..0 for\n \t\t the sizetype bounds.  */\n@@ -1939,8 +1937,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t code below to malfunction if we don't handle it specially.  */\n \t      if (TREE_CODE (gnu_base_min) == INTEGER_CST\n \t\t  && TREE_CODE (gnu_base_max) == INTEGER_CST\n-\t\t  && !TREE_CONSTANT_OVERFLOW (gnu_base_min)\n-\t\t  && !TREE_CONSTANT_OVERFLOW (gnu_base_max)\n+\t\t  && !TREE_OVERFLOW (gnu_base_min)\n+\t\t  && !TREE_OVERFLOW (gnu_base_max)\n \t\t  && tree_int_cst_lt (gnu_base_max, gnu_base_min))\n \t\tgnu_high = size_zero_node, gnu_min = size_one_node;\n \n@@ -1986,10 +1984,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\tgnu_base_max = gnu_max;\n \n \t      if ((TREE_CODE (gnu_base_min) == INTEGER_CST\n-\t\t   && TREE_CONSTANT_OVERFLOW (gnu_base_min))\n+\t\t   && TREE_OVERFLOW (gnu_base_min))\n \t\t  || operand_equal_p (gnu_base_min, gnu_base_base_min, 0)\n \t\t  || (TREE_CODE (gnu_base_max) == INTEGER_CST\n-\t\t      && TREE_CONSTANT_OVERFLOW (gnu_base_max))\n+\t\t      && TREE_OVERFLOW (gnu_base_max))\n \t\t  || operand_equal_p (gnu_base_max, gnu_base_base_max, 0))\n \t\tmax_overflow = true;\n \n@@ -2004,7 +2002,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t      size_zero_node);\n \n \t      if (TREE_CODE (gnu_this_max) == INTEGER_CST\n-\t\t  && TREE_CONSTANT_OVERFLOW (gnu_this_max))\n+\t\t  && TREE_OVERFLOW (gnu_this_max))\n \t\tmax_overflow = true;\n \n \t      gnu_max_size\n@@ -4590,7 +4588,7 @@ allocatable_size_p (tree gnu_size, bool static_p)\n      Storage_Error.  */\n   if (!static_p)\n     return !(TREE_CODE (gnu_size) == INTEGER_CST\n-\t     && TREE_CONSTANT_OVERFLOW (gnu_size));\n+\t     && TREE_OVERFLOW (gnu_size));\n \n   /* Otherwise, we need to deal with both variable sizes and constant\n      sizes that won't fit in a host int.  We use int instead of HOST_WIDE_INT\n@@ -5906,7 +5904,7 @@ annotate_value (tree gnu_size)\n \t  bool adjust = false;\n \t  tree temp;\n \n-\t  if (TREE_CONSTANT_OVERFLOW (negative_size))\n+\t  if (TREE_OVERFLOW (negative_size))\n \t    {\n \t      negative_size\n \t\t= size_binop (MINUS_EXPR, bitsize_zero_node,"}, {"sha": "eee950b541ec08fdc21987177a9ddae8a89b74e9", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=cd259a9825b53a8eb04b4849dc7b92b293902d57", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -2714,7 +2714,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t   of the subtype, but that causes problems with subtypes whose usage\n \t   will raise Constraint_Error and with biased representation, so\n \t   we don't.  */\n-\tgcc_assert (!TREE_CONSTANT_OVERFLOW (gnu_result));\n+\tgcc_assert (!TREE_OVERFLOW (gnu_result));\n       }\n       break;\n \n@@ -2741,7 +2741,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  gnu_result_type = get_unpadded_type (Etype (gnat_node));\n \t  gnu_result = UI_To_gnu (Corresponding_Integer_Value (gnat_node),\n \t\t\t\t  gnu_result_type);\n-\t  gcc_assert (!TREE_CONSTANT_OVERFLOW (gnu_result));\n+\t  gcc_assert (!TREE_OVERFLOW (gnu_result));\n \t}\n \n       /* We should never see a Vax_Float type literal, since the front end\n@@ -3440,11 +3440,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    tree gnu_old_lhs = gnu_lhs;\n \t    gnu_lhs = convert (gnu_type, gnu_lhs);\n \t    if (TREE_CODE (gnu_lhs) == INTEGER_CST && ignore_lhs_overflow)\n-\t      {\n-\t\tTREE_OVERFLOW (gnu_lhs) = TREE_OVERFLOW (gnu_old_lhs);\n-\t\tTREE_CONSTANT_OVERFLOW (gnu_lhs)\n-\t\t  = TREE_CONSTANT_OVERFLOW (gnu_old_lhs);\n-\t      }\n+\t      TREE_OVERFLOW (gnu_lhs) = TREE_OVERFLOW (gnu_old_lhs);\n \t    gnu_rhs = convert (gnu_type, gnu_rhs);\n \t  }\n \n@@ -4343,7 +4339,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n   /* If the result is a constant that overflows, raise constraint error.  */\n   else if (TREE_CODE (gnu_result) == INTEGER_CST\n-      && TREE_CONSTANT_OVERFLOW (gnu_result))\n+      && TREE_OVERFLOW (gnu_result))\n     {\n       post_error (\"Constraint_Error will be raised at run-time?\", gnat_node);\n "}, {"sha": "52bc6636eec38d060d817ab1e5a459a0b65cca74", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=cd259a9825b53a8eb04b4849dc7b92b293902d57", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -3680,7 +3680,7 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n      when it is false, we can rely on the fact that such conversions are\n      erroneous anyway.  */\n   if (TREE_CODE (expr) == INTEGER_CST)\n-    TREE_OVERFLOW (expr) = TREE_CONSTANT_OVERFLOW (expr) = 0;\n+    TREE_OVERFLOW (expr) = 0;\n \n   /* If the sizes of the types differ and this is an VIEW_CONVERT_EXPR,\n      show no longer constant.  */"}, {"sha": "04e968ec8ad6c0b03d4b4683b41a671bb4dfb2cb", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd259a9825b53a8eb04b4849dc7b92b293902d57/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=cd259a9825b53a8eb04b4849dc7b92b293902d57", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1649,7 +1649,7 @@ build_simple_component_ref (tree record_variable, tree component,\n      Note that we don't need to warn since this will be done on trying\n      to declare the object.  */\n   if (TREE_CODE (DECL_FIELD_OFFSET (field)) == INTEGER_CST\n-      && TREE_CONSTANT_OVERFLOW (DECL_FIELD_OFFSET (field)))\n+      && TREE_OVERFLOW (DECL_FIELD_OFFSET (field)))\n     return NULL_TREE;\n \n   /* It would be nice to call \"fold\" here, but that can lose a type"}]}