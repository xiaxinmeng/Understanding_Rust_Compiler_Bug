{"sha": "4a5eab38a41b2750c849bcf504e6e21cce281be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1ZWFiMzhhNDFiMjc1MGM4NDliY2Y1MDRlNmUyMWNjZTI4MWJlMQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-03-16T20:37:31Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-03-16T20:37:31Z"}, "message": "c-common.c (c_common_type_for_mode): Build vector types on demand.\n\ngcc/ChangeLog\n2004-03-16  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* c-common.c (c_common_type_for_mode): Build vector types on\n\tdemand.\n\t(handle_mode_attribute): Deprecate using the mode attribute\n\tto create vector types.  Fix indentation.\n\t(vector_type_node_list): Remove.\n\t(handle_vector_size_attribute): Create vector types on demand.\n\tStrip a NON_LVALUE_EXPR from the attribute if there is one.\n\t* c-typeck.c (comptypes): Make vector types compatible if they\n\thave the same underlying mode.\n\t(convert_for_assignment): Use comptypes to convert between\n\tvector types.\n\t* tree.c (build_common_tree_nodes_2): Do not create vector types.\n\t* config/arm/arm.c (arm_init_iwmmxt_builtins): Create necessary\n\tvector types.\n\t* tree.h: Remove vector types.\n\t* config/i386/i386.c (i386_init_mmx_sse_builtins): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_init_builtins): Likewise.\n\t(V16QI_type_node, V2SI_type_node, V2SF_type_node, V4HI_type_node,\n\tV4SI_type_node, V4SF_type_node, V8HI_type_node): New globals.\n\t* doc/extend.texi (Vector Types): Document how to use the\n\tvector_size attribute to create vectors, rather than mode.\n\n\t* config/arm/mmintrin.h: Use vector_size attribute, not mode.\n\t* config/i386/emmintrin.h: Likewise.\n\t* config/i386/mmintrin.h: Likewise.\n\t* config/i386/xmmintrin.h: Likewise.\n\t* config/sh/ushmedia.h: Likwise.\n\ntestsuite/ChangeLog\n2004-03-16  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* g++.dg/eh/simd-1.C: Use vector_size attribute, not mode.\n\t* g++.dg/eh/simd-2.C: Likewise.\n\t* g++.dg/init/array10.C: Likewise.\n\t* gcc.c-torture/compile/simd-1.c: Likewise.\n\t* gcc.c-torture/compile/simd-2.c: Likewise.\n\t* gcc.c-torture/compile/simd-3.c: Likewise.\n\t* gcc.c-torture/compile/simd-4.c: Likewise.\n\t* gcc.c-torture/compile/simd-6.c: Likewise.\n\t* gcc.c-torture/execute/simd-1.c: Likewise.\n\t* gcc.c-torture/execute/simd-2.c: Likewise.\n\t* gcc.dg/compat/vector-defs.h: Likewise.\n\t* gcc.dg/20020531-1.c: Likewise.\n\t* gcc.dg/altivec-3.c: Likewise.\n\t* gcc.dg/altivec-4.c: Likewise.\n\t* gcc.dg/altivec-varargs-1.c: Likewise.\n\t* testsuite/gcc.dg/compat/vector-defs.h: Likewise.\n\t* gcc.dg/i386-mmx-3.c: Likewise.\n\t* gcc.dg/i386-sse-4.c: Likewise.\n\t* gcc.dg/i386-sse-5.c: Likewise.\n\t* gcc.dg/i386-sse-8.c: Likewise.\n\t* gcc.dg/simd-1.c: Likewise.\n\t* gcc.dg/20030218-1.c: Likewise.  Plus, do not declare\n\t__ev64_opaque__ since the machine description provides it.\n\nIndex: c-common.c\n===================================================================\nRCS file: /cvs/gcc/gcc/gcc/c-common.c,v\nretrieving revision 1.487\ndiff -u -r1.487 c-common.c\n--- c-common.c\t26 Feb 2004 01:24:37 -0000\t1.487\n+++ c-common.c\t10 Mar 2004 10:25:28 -0000\n@@ -1874,38 +1874,12 @@\n   if (mode == TYPE_MODE (build_pointer_type (integer_type_node)))\n     return unsignedp ? make_unsigned_type (mode) : make_signed_type (mode);\n\n-  switch (mode)\n+  if (VECTOR_MODE_P (mode))\n     {\n-    case V16QImode:\n\nFrom-SVN: r79544", "tree": {"sha": "05a7ca68f6fe2a4b712b3767d14e66338ca08ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05a7ca68f6fe2a4b712b3767d14e66338ca08ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a5eab38a41b2750c849bcf504e6e21cce281be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5eab38a41b2750c849bcf504e6e21cce281be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5eab38a41b2750c849bcf504e6e21cce281be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5eab38a41b2750c849bcf504e6e21cce281be1/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7de53bcaa3ef7dadb3b2b151e3c416c7713f159e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de53bcaa3ef7dadb3b2b151e3c416c7713f159e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de53bcaa3ef7dadb3b2b151e3c416c7713f159e"}], "stats": {"total": 587, "additions": 276, "deletions": 311}, "files": [{"sha": "7804831584d1bd4c239a6fdd0804b7ec2a06dcc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,3 +1,33 @@\n+2004-03-16  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* c-common.c (c_common_type_for_mode): Build vector types on\n+\tdemand.\n+\t(handle_mode_attribute): Deprecate using the mode attribute\n+\tto create vector types.  Fix indentation.\n+\t(vector_type_node_list): Remove.\n+\t(handle_vector_size_attribute): Create vector types on demand.\n+\tStrip a NON_LVALUE_EXPR from the attribute if there is one.\n+\t* c-typeck.c (comptypes): Make vector types compatible if they\n+\thave the same underlying mode.\n+\t(convert_for_assignment): Use comptypes to convert between\n+\tvector types.\n+\t* tree.c (build_common_tree_nodes_2): Do not create vector types.\n+\t* config/arm/arm.c (arm_init_iwmmxt_builtins): Create necessary\n+\tvector types.\n+\t* tree.h: Remove vector types.\n+\t* config/i386/i386.c (i386_init_mmx_sse_builtins): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Likewise.\n+\t(V16QI_type_node, V2SI_type_node, V2SF_type_node, V4HI_type_node,\n+\tV4SI_type_node, V4SF_type_node, V8HI_type_node): New globals.\n+\t* doc/extend.texi (Vector Types): Document how to use the\n+\tvector_size attribute to create vectors, rather than mode.\n+\n+\t* config/arm/mmintrin.h: Use vector_size attribute, not mode.\n+\t* config/i386/emmintrin.h: Likewise.\n+\t* config/i386/mmintrin.h: Likewise.\n+\t* config/i386/xmmintrin.h: Likewise.\n+\t* config/sh/ushmedia.h: Likewise.\n+\n 2004-03-16  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/freebsd-spec.h, config/arc/arc-protos.h,"}, {"sha": "057ebeeeaf5e838506748bd5b11c236bd057366e", "filename": "gcc/c-common.c", "status": "modified", "additions": 33, "deletions": 109, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1874,38 +1874,12 @@ c_common_type_for_mode (enum machine_mode mode, int unsignedp)\n   if (mode == TYPE_MODE (build_pointer_type (integer_type_node)))\n     return unsignedp ? make_unsigned_type (mode) : make_signed_type (mode);\n \n-  switch (mode)\n-    {\n-    case V16QImode:\n-      return unsignedp ? unsigned_V16QI_type_node : V16QI_type_node;\n-    case V8HImode:\n-      return unsignedp ? unsigned_V8HI_type_node : V8HI_type_node;\n-    case V4SImode:\n-      return unsignedp ? unsigned_V4SI_type_node : V4SI_type_node;\n-    case V2DImode:\n-      return unsignedp ? unsigned_V2DI_type_node : V2DI_type_node;\n-    case V2SImode:\n-      return unsignedp ? unsigned_V2SI_type_node : V2SI_type_node;\n-    case V2HImode:\n-      return unsignedp ? unsigned_V2HI_type_node : V2HI_type_node;\n-    case V4HImode:\n-      return unsignedp ? unsigned_V4HI_type_node : V4HI_type_node;\n-    case V8QImode:\n-      return unsignedp ? unsigned_V8QI_type_node : V8QI_type_node;\n-    case V1DImode:\n-      return unsignedp ? unsigned_V1DI_type_node : V1DI_type_node;\n-    case V16SFmode:\n-      return V16SF_type_node;\n-    case V4SFmode:\n-      return V4SF_type_node;\n-    case V2SFmode:\n-      return V2SF_type_node;\n-    case V2DFmode:\n-      return V2DF_type_node;\n-    case V4DFmode:\n-      return V4DF_type_node;\n-    default:\n-      break;\n+  if (VECTOR_MODE_P (mode))\n+    {\n+      enum machine_mode inner_mode = GET_MODE_INNER (mode);\n+      tree inner_type = c_common_type_for_mode (inner_mode, unsignedp);\n+      if (inner_type != NULL_TREE)\n+\treturn build_vector_type_for_mode (inner_type, mode);\n     }\n \n   for (t = registered_builtin_types; t; t = TREE_CHAIN (t))\n@@ -4628,10 +4602,22 @@ handle_mode_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \t    mode = (enum machine_mode) j;\n \n       if (mode == VOIDmode)\n-\terror (\"unknown machine mode `%s'\", p);\n-      else if (0 == (typefm = lang_hooks.types.type_for_mode\n-\t\t     (mode, TREE_UNSIGNED (type))))\n+\t{\n+\t  error (\"unknown machine mode `%s'\", p);\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (VECTOR_MODE_P (mode))\n+\t{\n+\t  warning (\"specifying vector types with __attribute__ ((mode)) \"\n+\t\t   \"is deprecated\");\n+\t  warning (\"use __attribute__ ((vector_size)) instead\");\n+\t}\n+\n+      typefm = lang_hooks.types.type_for_mode (mode, TREE_UNSIGNED (type));\n+      if (typefm == NULL_TREE)\n \terror (\"no data type for mode `%s'\", p);\n+\n       else if ((TREE_CODE (type) == POINTER_TYPE\n \t\t|| TREE_CODE (type) == REFERENCE_TYPE)\n \t       && !(*targetm.valid_pointer_mode) (mode))\n@@ -4659,7 +4645,7 @@ handle_mode_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n \t      *node = ptr_type;\n \t    }\n \t  else\n-\t  *node = typefm;\n+\t    *node = typefm;\n \t  /* No need to layout the type here.  The caller should do this.  */\n \t}\n     }\n@@ -5090,13 +5076,6 @@ handle_deprecated_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n-/* Keep a list of vector type nodes we created in handle_vector_size_attribute,\n-   to prevent us from duplicating type nodes unnecessarily.\n-   The normal mechanism to prevent duplicates is to use type_hash_canon, but\n-   since we want to distinguish types that are essentially identical (except\n-   for their debug representation), we use a local list here.  */\n-static GTY(()) tree vector_type_node_list = 0;\n-\n /* Handle a \"vector_size\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n@@ -5107,19 +5086,24 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n {\n   unsigned HOST_WIDE_INT vecsize, nunits;\n   enum machine_mode mode, orig_mode, new_mode;\n-  tree type = *node, new_type = NULL_TREE;\n-  tree type_list_node;\n+  tree type = *node, new_type, size;\n \n   *no_add_attrs = true;\n \n-  if (! host_integerp (TREE_VALUE (args), 1))\n+  /* Stripping NON_LVALUE_EXPR allows declarations such as\n+     typedef short v4si __attribute__((vector_size (4 * sizeof(short)))).  */\n+  size = TREE_VALUE (args);\n+  if (TREE_CODE (size) == NON_LVALUE_EXPR)\n+    size = TREE_OPERAND (size, 0);\n+\n+  if (! host_integerp (size, 1))\n     {\n       warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n       return NULL_TREE;\n     }\n \n   /* Get the vector size (in bytes).  */\n-  vecsize = tree_low_cst (TREE_VALUE (args), 1);\n+  vecsize = tree_low_cst (size, 1);\n \n   /* We need to provide for vector pointers, vector arrays, and\n      functions returning vectors.  For example:\n@@ -5165,73 +5149,13 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \tbreak;\n       }\n \n-    if (new_mode == VOIDmode)\n+  if (new_mode == VOIDmode)\n     {\n       error (\"no vector mode with the size and type specified could be found\");\n       return NULL_TREE;\n     }\n \n-  for (type_list_node = vector_type_node_list; type_list_node;\n-       type_list_node = TREE_CHAIN (type_list_node))\n-    {\n-      tree other_type = TREE_VALUE (type_list_node);\n-      tree record = TYPE_DEBUG_REPRESENTATION_TYPE (other_type);\n-      tree fields = TYPE_FIELDS (record);\n-      tree field_type = TREE_TYPE (fields);\n-      tree array_type = TREE_TYPE (field_type);\n-      if (TREE_CODE (fields) != FIELD_DECL\n-\t  || TREE_CODE (field_type) != ARRAY_TYPE)\n-\tabort ();\n-\n-      if (TYPE_MODE (other_type) == mode && type == array_type)\n-\t{\n-\t  new_type = other_type;\n-\t  break;\n-\t}\n-    }\n-\n-  if (new_type == NULL_TREE)\n-    {\n-      tree index, array, rt, list_node;\n-\n-      new_type = lang_hooks.types.type_for_mode (new_mode,\n-\t\t\t\t\t\t TREE_UNSIGNED (type));\n-\n-      if (!new_type)\n-\t{\n-\t  error (\"no vector mode with the size and type specified could be found\");\n-\t  return NULL_TREE;\n-\t}\n-\n-      new_type = build_type_copy (new_type);\n-\n-      /* If this is a vector, make sure we either have hardware\n-         support, or we can emulate it.  */\n-      if ((GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n-\t   || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n-\t  && !vector_mode_valid_p (mode))\n-\t{\n-\t  error (\"unable to emulate '%s'\", GET_MODE_NAME (mode));\n-\t  return NULL_TREE;\n-\t}\n-\n-      /* Set the debug information here, because this is the only\n-\t place where we know the underlying type for a vector made\n-\t with vector_size.  For debugging purposes we pretend a vector\n-\t is an array within a structure.  */\n-      index = build_int_2 (TYPE_VECTOR_SUBPARTS (new_type) - 1, 0);\n-      array = build_array_type (type, build_index_type (index));\n-      rt = make_node (RECORD_TYPE);\n-\n-      TYPE_FIELDS (rt) = build_decl (FIELD_DECL, get_identifier (\"f\"), array);\n-      DECL_CONTEXT (TYPE_FIELDS (rt)) = rt;\n-      layout_type (rt);\n-      TYPE_DEBUG_REPRESENTATION_TYPE (new_type) = rt;\n-\n-      list_node = build_tree_list (NULL, new_type);\n-      TREE_CHAIN (list_node) = vector_type_node_list;\n-      vector_type_node_list = list_node;\n-    }\n+  new_type = build_vector_type_for_mode (type, new_mode);\n \n   /* Build back pointers if needed.  */\n   *node = reconstruct_complex_type (*node, new_type);"}, {"sha": "c532cc6eb69d09f76db61b43f59d857c4ff9ed72", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -578,7 +578,8 @@ comptypes (tree type1, tree type2, int flags)\n     case VECTOR_TYPE:\n       /* The target might allow certain vector types to be compatible.  */\n       val = (*targetm.vector_opaque_p) (t1)\n-\t|| (*targetm.vector_opaque_p) (t2);\n+\t|| (*targetm.vector_opaque_p) (t2)\n+\t|| TYPE_MODE (t1) == TYPE_MODE (t2);\n       break;\n \n     default:\n@@ -3277,9 +3278,8 @@ convert_for_assignment (tree type, tree rhs, const char *errtype,\n       return rhs;\n     }\n   /* Some types can interconvert without explicit casts.  */\n-  else if (codel == VECTOR_TYPE && coder == VECTOR_TYPE\n-\t   && ((*targetm.vector_opaque_p) (type)\n-\t       || (*targetm.vector_opaque_p) (rhstype)))\n+  else if (codel == VECTOR_TYPE\n+           && comptypes (type, TREE_TYPE (rhs), COMPARE_STRICT) == 1)\n     return convert (type, rhs);\n   /* Arithmetic types all interconvert, and enum is treated like int.  */\n   else if ((codel == INTEGER_TYPE || codel == REAL_TYPE"}, {"sha": "6358e4bff0f11e45f7659cd12aea905cd8585921", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -11519,6 +11519,10 @@ arm_init_iwmmxt_builtins (void)\n   size_t i;\n   tree endlink = void_list_node;\n \n+  tree V2SI_type_node = build_vector_type_for_mode (intSI_type_node, V2SImode);\n+  tree V4HI_type_node = build_vector_type_for_mode (intHI_type_node, V4HImode);\n+  tree V8QI_type_node = build_vector_type_for_mode (intQI_type_node, V8QImode);\n+\n   tree int_ftype_int\n     = build_function_type (integer_type_node,\n \t\t\t   tree_cons (NULL_TREE, integer_type_node, endlink));"}, {"sha": "eee9360afbf122f81715462d58b1955b21bbfff3", "filename": "gcc/config/arm/mmintrin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Farm%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Farm%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmmintrin.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -31,9 +31,9 @@\n typedef unsigned long long __m64, __int64;\n \n /* Internal data types for implementing the intrinsics.  */\n-typedef int __v2si __attribute__ ((__mode__ (__V2SI__)));\n-typedef int __v4hi __attribute__ ((__mode__ (__V4HI__)));\n-typedef int __v8qi __attribute__ ((__mode__ (__V8QI__)));\n+typedef int __v2si __attribute__ ((vector_size (8)));\n+typedef short __v4hi __attribute__ ((vector_size (8)));\n+typedef char __v8qi __attribute__ ((vector_size (8)));\n \n /* \"Convert\" __m64 and __int64 into each other.  */\n static __inline __m64 "}, {"sha": "49f0542a8be50bbfabb81ca300638af6ca998253", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -34,11 +34,11 @@\n #include <xmmintrin.h>\n \n /* SSE2 */\n-typedef int __v2df __attribute__ ((mode (V2DF)));\n-typedef int __v2di __attribute__ ((mode (V2DI)));\n-typedef int __v4si __attribute__ ((mode (V4SI)));\n-typedef int __v8hi __attribute__ ((mode (V8HI)));\n-typedef int __v16qi __attribute__ ((mode (V16QI)));\n+typedef double __v2df __attribute__ ((vector_size (16)));\n+typedef long long __v2di __attribute__ ((vector_size (16)));\n+typedef int __v4si __attribute__ ((vector_size (16)));\n+typedef short __v8hi __attribute__ ((vector_size (16)));\n+typedef char __v16qi __attribute__ ((vector_size (16)));\n \n /* Create a selector for use with the SHUFPD instruction.  */\n #define _MM_SHUFFLE2(fp1,fp0) \\"}, {"sha": "814a5f7bf5b043952961fe93246aa14ca3c0fecb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 54, "deletions": 14, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -12932,6 +12932,17 @@ ix86_init_mmx_sse_builtins (void)\n   const struct builtin_description * d;\n   size_t i;\n \n+  tree V16QI_type_node = build_vector_type_for_mode (intQI_type_node, V16QImode);\n+  tree V2SI_type_node = build_vector_type_for_mode (intSI_type_node, V2SImode);\n+  tree V2SF_type_node = build_vector_type_for_mode (float_type_node, V2SFmode);\n+  tree V2DI_type_node = build_vector_type_for_mode (intDI_type_node, V2DImode);\n+  tree V2DF_type_node = build_vector_type_for_mode (double_type_node, V2DFmode);\n+  tree V4SF_type_node = build_vector_type_for_mode (float_type_node, V4SFmode);\n+  tree V4SI_type_node = build_vector_type_for_mode (intSI_type_node, V4SImode);\n+  tree V4HI_type_node = build_vector_type_for_mode (intHI_type_node, V4HImode);\n+  tree V8QI_type_node = build_vector_type_for_mode (intQI_type_node, V8QImode);\n+  tree V8HI_type_node = build_vector_type_for_mode (intHI_type_node, V8HImode);\n+\n   tree pchar_type_node = build_pointer_type (char_type_node);\n   tree pcchar_type_node = build_pointer_type (\n \t\t\t     build_type_variant (char_type_node, 1, 0));\n@@ -14877,25 +14888,54 @@ ix86_rtx_costs (rtx x, int code, int outer_code, int *total)\n \n     case MULT:\n       if (FLOAT_MODE_P (mode))\n-\t*total = COSTS_N_INSNS (ix86_cost->fmul);\n-      else if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n \t{\n-\t  unsigned HOST_WIDE_INT value = INTVAL (XEXP (x, 1));\n-\t  int nbits;\n-\n-\t  for (nbits = 0; value != 0; value >>= 1)\n-\t    nbits++;\n-\n-\t  *total = COSTS_N_INSNS (ix86_cost->mult_init[MODE_INDEX (mode)]\n-\t\t\t          + nbits * ix86_cost->mult_bit);\n+\t  *total = COSTS_N_INSNS (ix86_cost->fmul);\n+\t  return false;\n \t}\n       else\n \t{\n-\t  /* This is arbitrary */\n-\t  *total = COSTS_N_INSNS (ix86_cost->mult_init[MODE_INDEX (mode)]\n-\t\t\t          + 7 * ix86_cost->mult_bit);\n+\t  rtx op0 = XEXP (x, 0);\n+\t  rtx op1 = XEXP (x, 1);\n+\t  int nbits;\n+\t  if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n+\t    {\n+\t      unsigned HOST_WIDE_INT value = INTVAL (XEXP (x, 1));\n+\t      for (nbits = 0; value != 0; value &= value - 1)\n+\t        nbits++;\n+\t    }\n+\t  else\n+\t    /* This is arbitrary.  */\n+\t    nbits = 7;\n+\n+\t  /* Compute costs correctly for widening multiplication.  */\n+\t  if ((GET_CODE (op0) == SIGN_EXTEND || GET_CODE (op1) == ZERO_EXTEND)\n+\t      && GET_MODE_SIZE (GET_MODE (XEXP (op0, 0))) * 2\n+\t         == GET_MODE_SIZE (mode))\n+\t    {\n+\t      int is_mulwiden = 0;\n+\t      enum machine_mode inner_mode = GET_MODE (op0);\n+\n+\t      if (GET_CODE (op0) == GET_CODE (op1))\n+\t\tis_mulwiden = 1, op1 = XEXP (op1, 0);\n+\t      else if (GET_CODE (op1) == CONST_INT)\n+\t\t{\n+\t\t  if (GET_CODE (op0) == SIGN_EXTEND)\n+\t\t    is_mulwiden = trunc_int_for_mode (INTVAL (op1), inner_mode)\n+\t\t\t          == INTVAL (op1);\n+\t\t  else\n+\t\t    is_mulwiden = !(INTVAL (op1) & ~GET_MODE_MASK (inner_mode));\n+\t        }\n+\n+\t      if (is_mulwiden)\n+\t        op0 = XEXP (op0, 0), mode = GET_MODE (op0);\n+\t    }\n+  \n+  \t  *total = COSTS_N_INSNS (ix86_cost->mult_init[MODE_INDEX (mode)]\n+\t\t\t          + nbits * ix86_cost->mult_bit)\n+\t           + rtx_cost (op0, outer_code) + rtx_cost (op1, outer_code);\n+\n+          return true;\n \t}\n-      return false;\n \n     case DIV:\n     case UDIV:"}, {"sha": "2f3c4e26aa65ef0eda1cbe798ac22ba6f7daff62", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -34,12 +34,12 @@\n # error \"MMX instruction set not enabled\"\n #else\n /* The data type intended for user use.  */\n-typedef int __m64 __attribute__ ((__mode__ (__V2SI__)));\n+typedef int __m64 __attribute__ ((vector_size (8)));\n \n /* Internal data types for implementing the intrinsics.  */\n-typedef int __v2si __attribute__ ((__mode__ (__V2SI__)));\n-typedef int __v4hi __attribute__ ((__mode__ (__V4HI__)));\n-typedef int __v8qi __attribute__ ((__mode__ (__V8QI__)));\n+typedef int __v2si __attribute__ ((vector_size (8)));\n+typedef short __v4hi __attribute__ ((vector_size (8)));\n+typedef char __v8qi __attribute__ ((vector_size (8)));\n \n /* Empty the multimedia state.  */\n static __inline void"}, {"sha": "4271f03ab38d1fce1e4a9f048fa5f36bbe2dfa67", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -38,10 +38,10 @@\n #include <mmintrin.h>\n \n /* The data type intended for user use.  */\n-typedef int __m128 __attribute__ ((__mode__(__V4SF__)));\n+typedef float __m128 __attribute__ ((vector_size (16)));\n \n /* Internal data types for implementing the intrinsics.  */\n-typedef int __v4sf __attribute__ ((__mode__(__V4SF__)));\n+typedef float __v4sf __attribute__ ((vector_size (16)));\n \n /* Create a selector for use with the SHUFPS instruction.  */\n #define _MM_SHUFFLE(fp3,fp2,fp1,fp0) \\"}, {"sha": "08a720996f91d8065acd71e283f2a17253c1c18a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -216,9 +216,16 @@ int rs6000_debug_arg;\t\t/* debug argument handling */\n static GTY(()) tree opaque_V2SI_type_node;\n static GTY(()) tree opaque_V2SF_type_node;\n static GTY(()) tree opaque_p_V2SI_type_node;\n-\n-/* AltiVec requires a few more basic types in addition to the vector\n-   types already defined in tree.c.  */\n+static GTY(()) tree V16QI_type_node;\n+static GTY(()) tree V2SI_type_node;\n+static GTY(()) tree V2SF_type_node;\n+static GTY(()) tree V4HI_type_node;\n+static GTY(()) tree V4SI_type_node;\n+static GTY(()) tree V4SF_type_node;\n+static GTY(()) tree V8HI_type_node;\n+static GTY(()) tree unsigned_V16QI_type_node;\n+static GTY(()) tree unsigned_V8HI_type_node;\n+static GTY(()) tree unsigned_V4SI_type_node;\n static GTY(()) tree bool_char_type_node;\t/* __bool char */\n static GTY(()) tree bool_short_type_node;\t/* __bool short */\n static GTY(()) tree bool_int_type_node;\t\t/* __bool int */\n@@ -6568,6 +6575,18 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n static void\n rs6000_init_builtins (void)\n {\n+  V2SI_type_node = build_vector_type (intSI_type_node, 2);\n+  V2SF_type_node = build_vector_type (float_type_node, 2);\n+  V4HI_type_node = build_vector_type (intHI_type_node, 4);\n+  V4SI_type_node = build_vector_type (intSI_type_node, 4);\n+  V4SF_type_node = build_vector_type (float_type_node, 4);\n+  V8HI_type_node = build_vector_type (intQI_type_node, 8);\n+  V16QI_type_node = build_vector_type (intQI_type_node, 16);\n+\n+  unsigned_V16QI_type_node = build_vector_type (unsigned_intQI_type_node, 16);\n+  unsigned_V8HI_type_node = build_vector_type (unsigned_intHI_type_node, 8);\n+  unsigned_V4SI_type_node = build_vector_type (unsigned_intSI_type_node, 4);\n+\n   opaque_V2SI_type_node = copy_node (V2SI_type_node);\n   opaque_V2SF_type_node = copy_node (V2SF_type_node);\n   opaque_p_V2SI_type_node = build_pointer_type (opaque_V2SI_type_node);\n@@ -6598,10 +6617,10 @@ rs6000_init_builtins (void)\n \t\t\t\t\t    get_identifier (\"__pixel\"),\n \t\t\t\t\t    pixel_type_node));\n \n-  bool_V16QI_type_node = make_vector (V16QImode, bool_char_type_node, 1);\n-  bool_V8HI_type_node = make_vector (V8HImode, bool_short_type_node, 1);\n-  bool_V4SI_type_node = make_vector (V4SImode, bool_int_type_node, 1);\n-  pixel_V8HI_type_node = make_vector (V8HImode, pixel_type_node, 1);\n+  bool_V16QI_type_node = build_vector_type (bool_char_type_node, 16);\n+  bool_V8HI_type_node = build_vector_type (bool_short_type_node, 8);\n+  bool_V4SI_type_node = build_vector_type (bool_int_type_node, 4);\n+  pixel_V8HI_type_node = build_vector_type (pixel_type_node, 8);\n \n   (*lang_hooks.decls.pushdecl) (build_decl (TYPE_DECL,\n \t\t\t\t\t    get_identifier (\"__vector unsigned char\"),"}, {"sha": "3d707c9efaa5c2adc09bacfff9e27158e23991af", "filename": "gcc/config/sh/ushmedia.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fsh%2Fushmedia.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fconfig%2Fsh%2Fushmedia.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fushmedia.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -32,8 +32,8 @@ Boston, MA 02111-1307, USA.  */\n \n #if __SHMEDIA__\n #if ! __SH4_NO_FPU\n-typedef float __GCC_FV __attribute__ ((mode (V4SF)));\n-typedef float __GCC_MTRX __attribute__ ((mode (V16SF)));\n+typedef float __GCC_FV __attribute__ ((vector_size (4 * sizeof (float))));\n+typedef float __GCC_MTRX __attribute__ ((vector_size (16 * sizeof (float))));\n #endif\n \n __inline__ static"}, {"sha": "05c77979dd7969ef35f36c9130ef64aa4d23c68f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -4631,30 +4631,24 @@ The first step in using these extensions is to provide the necessary data\n types.  This should be done using an appropriate @code{typedef}:\n \n @smallexample\n-typedef int v4si __attribute__ ((mode(V4SI)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n @end smallexample\n \n-The base type @code{int} is effectively ignored by the compiler, the\n-actual properties of the new type @code{v4si} are defined by the\n-@code{__attribute__}.  It defines the machine mode to be used; for vector\n-types these have the form @code{V@var{n}@var{B}}; @var{n} should be the\n-number of elements in the vector, and @var{B} should be the base mode of the\n-individual elements.  The following can be used as base modes:\n+The @code{int} type specifies the base type, while the attribute specifies\n+the vector size for the variable, measured in bytes.  For example, the\n+declaration above causes the compiler to set the mode for the @code{v4si}\n+type to be 16 bytes wide and divided into @code{int} sized units.  For\n+a 32-bit @code{int} this means a vector of 4 units of 4 bytes, and the\n+corresponding mode of @code{foo} will be @acronym{V4SI}.\n \n-@table @code\n-@item QI\n-An integer that is as wide as the smallest addressable unit, usually 8 bits.\n-@item HI\n-An integer, twice as wide as a QI mode integer, usually 16 bits.\n-@item SI\n-An integer, four times as wide as a QI mode integer, usually 32 bits.\n-@item DI\n-An integer, eight times as wide as a QI mode integer, usually 64 bits.\n-@item SF\n-A floating point value, as wide as a SI mode integer, usually 32 bits.\n-@item DF\n-A floating point value, as wide as a DI mode integer, usually 64 bits.\n-@end table\n+The @code{vector_size} attribute is only applicable to integral and\n+float scalars, although arrays, pointers, and function return values\n+are allowed in conjunction with this construct.\n+\n+All the basic integer types can be used as base types, both as signed\n+and as unsigned: @code{char}, @code{short}, @code{int}, @code{long},\n+@code{long long}.  In addition, @code{float} and @code{double} can be\n+used to build floating-point vector types.\n \n Specifying a combination that is not valid for the current architecture\n will cause GCC to synthesize the instructions using a narrower mode.\n@@ -4673,7 +4667,7 @@ added to the corresponding 4 elements in @var{b} and the resulting\n vector will be stored in @var{c}.\n \n @smallexample\n-typedef int v4si __attribute__ ((mode(V4SI)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n \n v4si a, b, c;\n "}, {"sha": "62764c2f3f98a612f3d4a67b0c68b30625e2cfef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,3 +1,29 @@\n+2004-03-16  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* g++.dg/eh/simd-1.C: Use vector_size attribute, not mode.\n+\t* g++.dg/eh/simd-2.C: Likewise.\n+\t* g++.dg/init/array10.C: Likewise.\n+\t* gcc.c-torture/compile/simd-1.c: Likewise.\n+\t* gcc.c-torture/compile/simd-2.c: Likewise.\n+\t* gcc.c-torture/compile/simd-3.c: Likewise.\n+\t* gcc.c-torture/compile/simd-4.c: Likewise.\n+\t* gcc.c-torture/compile/simd-6.c: Likewise.\n+\t* gcc.c-torture/execute/simd-1.c: Likewise.\n+\t* gcc.c-torture/execute/simd-2.c: Likewise.\n+\t* gcc.dg/compat/vector-defs.h: Likewise.\n+\t* gcc.dg/20020531-1.c: Likewise.\n+\t* gcc.dg/altivec-3.c: Likewise.\n+\t* gcc.dg/altivec-4.c: Likewise.\n+\t* gcc.dg/altivec-varargs-1.c: Likewise.\n+\t* testsuite/gcc.dg/compat/vector-defs.h: Likewise.\n+\t* gcc.dg/i386-mmx-3.c: Likewise.\n+\t* gcc.dg/i386-sse-4.c: Likewise.\n+\t* gcc.dg/i386-sse-5.c: Likewise.\n+\t* gcc.dg/i386-sse-8.c: Likewise.\n+\t* gcc.dg/simd-1.c: Likewise.\n+\t* gcc.dg/20030218-1.c: Likewise.  Plus, do not declare\n+\t__ev64_opaque__ since the machine description provides it.\n+\n 2004-03-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* lib/compat.exp (skip_list): New global variable."}, {"sha": "fe71b78043f30c9e7cc4784777b14b7856dcb727", "filename": "gcc/testsuite/g++.dg/eh/simd-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-1.C?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -4,7 +4,7 @@\n // { dg-options \"-O -w\" { target i?86-*-* } }\n // { dg-do run }\n \n-typedef int __attribute__((mode(V2SI))) vecint;\n+typedef int __attribute__((vector_size (8))) vecint;\n \n vecint vecfunc (vecint beachbum)\n {"}, {"sha": "5b37f3ef53486e98d5bd51bdacc27e11d6940239", "filename": "gcc/testsuite/g++.dg/eh/simd-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-2.C?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -5,7 +5,7 @@\n // { dg-options \"-O -w -maltivec\" { target powerpc64-*-linux* } }\n // { dg-do run { xfail \"powerpc64-*-linux*\"}  }\n \n-typedef int __attribute__((mode(V4SI))) vecint;\n+typedef int __attribute__((vector_size (16))) vecint;\n \n vecint vecfunc (vecint beachbum)\n {"}, {"sha": "41121055e2357a71480d6ef9d1b50884b78d54d7", "filename": "gcc/testsuite/g++.dg/init/array10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray10.C?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-typedef int __attribute__((mode(V2SI))) vec;\n+typedef int __attribute__((vector_size (8))) vec;\n \n vec foo[] = { (vec) {1, 2} };"}, {"sha": "6a07bbb6ac6b492e8df5d33f259a8a8d6740bf60", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-1.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,4 +1,4 @@\n-typedef int v2si __attribute__ ((mode(V2SI)));\n+typedef int v2si __attribute__ ((vector_size (8)));\n typedef unsigned di __attribute__ ((mode(DI)));\n void foo(unsigned long);\n void bar() {"}, {"sha": "480c712c023a79038edd4164d682c9de08aed242", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-2.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,4 +1,4 @@\n-typedef float floatvect2 __attribute__((mode(V2SF)));\n+typedef float floatvect2 __attribute__((vector_size (8)));\n \n typedef union\n {"}, {"sha": "42a38ae56e6519d02e2978c1c90601aece328b30", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-3.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -3,7 +3,7 @@\n /* If double is not wider than float, we probably don't have DFmode,\n    or at least it's not as wide as double.  */\n #if DBL_MANT_DIG > FLT_MANT_DIG\n-typedef float floatvect2 __attribute__((mode(V2DF)));\n+typedef double floatvect2 __attribute__((vector_size (16)));\n \n typedef union\n {"}, {"sha": "6329fc0968f966e3c45db903d4f556bc5bfcc013", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-4.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,4 +1,4 @@\n-typedef float floatvect2 __attribute__((mode(V4SF)));\n+typedef float floatvect2 __attribute__((vector_size (16)));\n \n typedef union\n {"}, {"sha": "7998e152f89c3f7af60a7443550377d8f5491c61", "filename": "gcc/testsuite/gcc.c-torture/compile/simd-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fsimd-6.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,3 +1,3 @@\n-typedef int __attribute__((mode(V2SI))) vec;\n+typedef int __attribute__((vector_size (8))) vec;\n \n vec a[] = {(vec) {1, 2}, {3, 4}};"}, {"sha": "df9f1a907985f67cbd5fc12b99ccc0ead114c93b", "filename": "gcc/testsuite/gcc.c-torture/execute/simd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-1.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -4,7 +4,7 @@\n    regardless of if the target has SIMD instructions.\n */\n \n-typedef int __attribute__((mode(V4SI))) vecint;\n+typedef int __attribute__((vector_size (16))) vecint;\n typedef int __attribute__((mode(SI))) siint;\n \n vecint i = { 150, 100, 150, 200 };"}, {"sha": "d4f506a7641931c6b6354a022efed80f355b4500", "filename": "gcc/testsuite/gcc.c-torture/execute/simd-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-2.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -3,7 +3,7 @@\n    regardless of if the target has SIMD instructions.\n */\n \n-typedef int __attribute__((mode(V8HI))) vecint;\n+typedef short __attribute__((vector_size (16))) vecint;\n \n vecint i = { 150, 100, 150, 200, 0, 0, 0, 0 };\n vecint j = { 10, 13, 20, 30, 1, 1, 1, 1 };"}, {"sha": "19f198fcac1129f645158916f9595126c04681b1", "filename": "gcc/testsuite/gcc.dg/20020531-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2F20020531-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2F20020531-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020531-1.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target i?86-*-* } } */\n /* { dg-options \"-O2 -mmmx\" } */\n \n-typedef int __v8qi __attribute__ ((__mode__ (__V8QI__)));\n+typedef unsigned char __v8qi __attribute__ ((vector_size (8)));\n extern void abort (void);\n extern void exit (int);\n "}, {"sha": "6296d31bfcefcc9bef6e6f27119d04ec69464518", "filename": "gcc/testsuite/gcc.dg/20030218-1.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2F20030218-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2F20030218-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20030218-1.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,14 +1,12 @@\n /* { dg-do compile { target powerpc-*-eabi* } } */\n-/* { dg-options \"-mcpu=8540\" } */\n+/* { dg-options \"-mspe=yes\" } */\n \n /* Test vectors that can interconvert without a cast.  */\n \n-typedef int __attribute__((mode(V2SI))) __ev64_opaque__;\n-\n __ev64_opaque__ opp;\n-int vint   __attribute__((mode(V2SI)));\n-int vshort __attribute__((mode(V4HI)));\n-int vfloat __attribute__((mode(V2SF)));\n+int vint   __attribute__((vector_size (8)));\n+short vshort __attribute__((vector_size (8)));\n+float vfloat __attribute__((vector_size (8)));\n \n int\n main (void)"}, {"sha": "91fa8f296b95d305c73ce2c00da853333d46d843", "filename": "gcc/testsuite/gcc.dg/altivec-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-3.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -3,8 +3,8 @@\n \n #include \"altivec_check.h\"\n \n-typedef int int4 __attribute__ ((mode(V4SI)));\n-typedef float float4 __attribute__ ((mode(V4SF)));\n+typedef int int4 __attribute__ ((vector_size (16)));\n+typedef float float4 __attribute__ ((vector_size (16)));\n \n int4 a1 = (int4) { 100, 200, 300, 400 };\n int4 a2 = (int4) { 500, 600, 700, 800 };"}, {"sha": "78dc815d3e4a6ffd3e55a633c5dcf38e60ae9c5d", "filename": "gcc/testsuite/gcc.dg/altivec-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-4.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -3,7 +3,7 @@\n \n #define vector __attribute__((vector_size(16)))\n \n-static int __attribute__((mode(V4SI))) x, y;\n+static int vector x, y;\n \n static vector signed int i,j;\n static vector signed short s,t;"}, {"sha": "fd2b74f85e22fdddee6618035ccdd5a412168fcc", "filename": "gcc/testsuite/gcc.dg/altivec-varargs-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-varargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-varargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faltivec-varargs-1.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -6,7 +6,7 @@\n \n #include \"altivec_check.h\"\n \n-#define vector __attribute__((mode(V4SI)))\n+#define vector __attribute__((vector_size (16)))\n \n const vector unsigned int v1 = {10,11,12,13};\n const vector unsigned int v2 = {20,21,22,23};"}, {"sha": "ecb39603c73343c3a770a0d4d5adf341a3c87228", "filename": "gcc/testsuite/gcc.dg/compat/vector-defs.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fvector-defs.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -2,45 +2,45 @@\n    c_common_type_for_mode, grouped by base mode.  */\n \n typedef int __attribute__((mode(QI))) qi;\n-typedef int __attribute__((mode(V8QI))) v8qi;\n-typedef int __attribute__((mode(V16QI))) v16qi;\n+typedef qi __attribute__((vector_size (8))) v8qi;\n+typedef qi __attribute__((vector_size (16))) v16qi;\n \n typedef union U8QI { v8qi v; qi a[8]; } u8qi;\n typedef union U16QI { v16qi v; qi a[16]; } u16qi;\n \n typedef int __attribute__((mode(HI))) hi;\n-typedef int __attribute__((mode(V2HI))) v2hi;\n-typedef int __attribute__((mode(V4HI))) v4hi;\n-typedef int __attribute__((mode(V8HI))) v8hi;\n+typedef hi __attribute__((vector_size (4))) v2hi;\n+typedef hi __attribute__((vector_size (8))) v4hi;\n+typedef hi __attribute__((vector_size (16))) v8hi;\n \n typedef union U2HI { v2hi v; hi a[2]; } u2hi;\n typedef union U4HI { v4hi v; hi a[4]; } u4hi;\n typedef union U8HI { v8hi v; hi a[8]; } u8hi;\n \n typedef int __attribute__((mode(SI))) si;\n-typedef int __attribute__((mode(V2SI))) v2si;\n-typedef int __attribute__((mode(V4SI))) v4si;\n+typedef si __attribute__((vector_size (8))) v2si;\n+typedef si __attribute__((vector_size (16))) v4si;\n \n typedef union U2SI { v2si v; si a[2]; } u2si;\n typedef union U4SI { v4si v; si a[4]; } u4si;\n \n typedef int __attribute__((mode(DI))) di;\n-typedef int __attribute__((mode(V1DI))) v1di;\n-typedef int __attribute__((mode(V2DI))) v2di;\n+typedef di __attribute__((vector_size (8))) v1di;\n+typedef di __attribute__((vector_size (16))) v2di;\n \n typedef union U1DI { v1di v; di a[1]; } u1di;\n typedef union U2DI { v2di v; di a[2]; } u2di;\n \n typedef float __attribute__((mode(SF))) sf;\n-typedef float __attribute__((mode(V2SF))) v2sf;\n-typedef float __attribute__((mode(V4SF))) v4sf;\n-typedef float __attribute__((mode(V16SF))) v16sf;\n+typedef sf __attribute__((vector_size (8))) v2sf;\n+typedef sf __attribute__((vector_size (16))) v4sf;\n+typedef sf __attribute__((vector_size (64))) v16sf;\n \n typedef union U2SF { v2sf v; sf a[2]; } u2sf;\n typedef union U4SF { v4sf v; sf a[4]; } u4sf;\n typedef union U16SF { v16sf v; sf a[16]; } u16sf;\n \n typedef float __attribute__((mode(DF))) df;\n-typedef float __attribute__((mode(V2DF))) v2df;\n+typedef df __attribute__((vector_size (16))) v2df;\n \n typedef union U2DF { v2df v; df a[2]; } u2df;"}, {"sha": "d4d61095c8ae55b5b032f09e46a46520832a74df", "filename": "gcc/testsuite/gcc.dg/i386-mmx-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-mmx-3.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-*} } */\n /* { dg-options \"-O1 -mmmx -march=k8\" } */\n \n-typedef int v4hi __attribute__ ((mode (V4HI)));\n+typedef short v4hi __attribute__ ((vector_size (8)));\n \n static inline v4hi cvtsi_v4hi (int i)\n {"}, {"sha": "7f6d817f4d6db6e6c93621df2b1e06f668ac77cf", "filename": "gcc/testsuite/gcc.dg/i386-sse-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-4.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-options \"-O0 -msse\" } */\n \n-typedef void __vr __attribute__ ((__mode__ (__V4SF__)));\n+typedef float __vr __attribute__ ((vector_size (16)));\n \n struct vector\n {"}, {"sha": "81184fcb67e9f80d45aa3464af5788379fb1534d", "filename": "gcc/testsuite/gcc.dg/i386-sse-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-5.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target i?86-*-* } } */\n /* { dg-options \"-Winline -O2 -march=i386\" } */\n-typedef int v2df __attribute__ ((mode(V2DF)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n v2df p;\n q(v2df t)\n {\t\t\t /* { dg-warning \"SSE\" \"\" } */"}, {"sha": "c415de90999e939df79a15450ef61be71eb39af5", "filename": "gcc/testsuite/gcc.dg/i386-sse-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-8.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -6,7 +6,7 @@\n \n int main() \n { \n-  typedef int v __attribute__ ((mode(V2DI))); \n+  typedef long long int v __attribute__ ((vector_size (16))); \n   v a, b; \n   a = b; \n   return 0; "}, {"sha": "43e63e4a40e83e40bc65ac233aed1039e9c4b52d", "filename": "gcc/testsuite/gcc.dg/simd-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsimd-1.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -4,10 +4,10 @@\n /* Origin: Aldy Hernandez <aldyh@redhat.com>.  */\n /* Purpose: Program to test generic SIMD support.  */\n \n-typedef int __attribute__((mode(V4SI))) v4si;\n-typedef int __attribute__((mode(V8HI))) v8hi;\n-typedef int __attribute__((mode(V2SI))) v2si;\n-typedef unsigned int __attribute__((mode(V4SI))) uv4si;\n+typedef int __attribute__((vector_size (16))) v4si;\n+typedef short __attribute__((vector_size (16))) v8hi;\n+typedef int __attribute__((vector_size (8))) v2si;\n+typedef unsigned int __attribute__((vector_size (16))) uv4si;\n \n v4si a, b;\n v2si c, d;\n@@ -16,7 +16,7 @@ uv4si f;\n \n int foo __attribute__((mode(DI)));\n int foo1 __attribute__((mode(SI)));\n-int foo2 __attribute__((mode(V4HI)));\n+short foo2 __attribute__((vector_size (8)));\n \n void\n hanneke ()\n@@ -32,7 +32,7 @@ hanneke ()\n   e = (typeof (e)) a;\n \n   /* Different signed SIMD assignment.  */\n-  f = a; /* { dg-error \"incompatible types in assignment\" } */\n+  f = a;\n \n   /* Casted different signed SIMD assignment.  */\n   f = (uv4si) a;"}, {"sha": "6a62e7183d69581eed0fb07d85ef1fb1ac3a8d01", "filename": "gcc/tree.c", "status": "modified", "additions": 23, "deletions": 42, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -5115,40 +5115,6 @@ build_common_tree_nodes_2 (int short_double)\n \n     va_list_type_node = t;\n   }\n-\n-  unsigned_V4SI_type_node\n-    = make_vector (V4SImode, unsigned_intSI_type_node, 1);\n-  unsigned_V2HI_type_node\n-    = make_vector (V2HImode, unsigned_intHI_type_node, 1);\n-  unsigned_V2SI_type_node\n-    = make_vector (V2SImode, unsigned_intSI_type_node, 1);\n-  unsigned_V2DI_type_node\n-    = make_vector (V2DImode, unsigned_intDI_type_node, 1);\n-  unsigned_V4HI_type_node\n-    = make_vector (V4HImode, unsigned_intHI_type_node, 1);\n-  unsigned_V8QI_type_node\n-    = make_vector (V8QImode, unsigned_intQI_type_node, 1);\n-  unsigned_V8HI_type_node\n-    = make_vector (V8HImode, unsigned_intHI_type_node, 1);\n-  unsigned_V16QI_type_node\n-    = make_vector (V16QImode, unsigned_intQI_type_node, 1);\n-  unsigned_V1DI_type_node\n-    = make_vector (V1DImode, unsigned_intDI_type_node, 1);\n-\n-  V16SF_type_node = make_vector (V16SFmode, float_type_node, 0);\n-  V4SF_type_node = make_vector (V4SFmode, float_type_node, 0);\n-  V4SI_type_node = make_vector (V4SImode, intSI_type_node, 0);\n-  V2HI_type_node = make_vector (V2HImode, intHI_type_node, 0);\n-  V2SI_type_node = make_vector (V2SImode, intSI_type_node, 0);\n-  V2DI_type_node = make_vector (V2DImode, intDI_type_node, 0);\n-  V4HI_type_node = make_vector (V4HImode, intHI_type_node, 0);\n-  V8QI_type_node = make_vector (V8QImode, intQI_type_node, 0);\n-  V8HI_type_node = make_vector (V8HImode, intHI_type_node, 0);\n-  V2SF_type_node = make_vector (V2SFmode, float_type_node, 0);\n-  V2DF_type_node = make_vector (V2DFmode, double_type_node, 0);\n-  V16QI_type_node = make_vector (V16QImode, intQI_type_node, 0);\n-  V1DI_type_node = make_vector (V1DImode, intDI_type_node, 0);\n-  V4DF_type_node = make_vector (V4DFmode, double_type_node, 0);\n }\n \n /* HACK.  GROSS.  This is absolutely disgusting.  I wish there was a\n@@ -5197,26 +5163,41 @@ reconstruct_complex_type (tree type, tree bottom)\n   return outer;\n }\n \n-/* Returns a vector tree node given a vector mode, the inner type, and\n-   the signness.  */\n-\n+/* Returns a vector tree node given a vector mode and inner type.  */\n tree\n-make_vector (enum machine_mode mode, tree innertype, int unsignedp)\n+build_vector_type_for_mode (tree innertype, enum machine_mode mode)\n {\n   tree t;\n-\n   t = make_node (VECTOR_TYPE);\n   TREE_TYPE (t) = innertype;\n   TYPE_MODE (t) = mode;\n-  TREE_UNSIGNED (TREE_TYPE (t)) = unsignedp;\n+  TREE_UNSIGNED (t) = TREE_UNSIGNED (innertype);\n   finish_vector_type (t);\n-\n   return t;\n }\n \n+/* Similarly, but takes inner type and units.  */\n+\n+tree\n+build_vector_type (tree innertype, int nunits)\n+{\n+  enum machine_mode innermode = TYPE_MODE (innertype);\n+  enum machine_mode mode;\n+\n+  if (GET_MODE_CLASS (innermode) == MODE_FLOAT)\n+    mode = MIN_MODE_VECTOR_FLOAT;\n+  else\n+    mode = MIN_MODE_VECTOR_INT;\n+\n+  for (; mode != VOIDmode ; mode = GET_MODE_WIDER_MODE (mode))\n+    if (GET_MODE_NUNITS (mode) == nunits && GET_MODE_INNER (mode) == innermode)\n+      return build_vector_type_for_mode (innertype, mode);\n+\n+  return NULL_TREE;\n+}\n+\n /* Given an initializer INIT, return TRUE if INIT is zero or some\n    aggregate of zeros.  Otherwise return FALSE.  */\n-\n bool\n initializer_zerop (tree init)\n {"}, {"sha": "a923048fcf53dc684682b47004269717aa066132", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 53, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5eab38a41b2750c849bcf504e6e21cce281be1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4a5eab38a41b2750c849bcf504e6e21cce281be1", "patch": "@@ -1871,33 +1871,6 @@ enum tree_index\n \n   TI_VOID_LIST_NODE,\n \n-  TI_UV4SF_TYPE,\n-  TI_UV4SI_TYPE,\n-  TI_UV8HI_TYPE,\n-  TI_UV8QI_TYPE,\n-  TI_UV4HI_TYPE,\n-  TI_UV2HI_TYPE,\n-  TI_UV2SI_TYPE,\n-  TI_UV2SF_TYPE,\n-  TI_UV2DI_TYPE,\n-  TI_UV1DI_TYPE,\n-  TI_UV16QI_TYPE,\n-\n-  TI_V4SF_TYPE,\n-  TI_V16SF_TYPE,\n-  TI_V4SI_TYPE,\n-  TI_V8HI_TYPE,\n-  TI_V8QI_TYPE,\n-  TI_V4HI_TYPE,\n-  TI_V2HI_TYPE,\n-  TI_V2SI_TYPE,\n-  TI_V2SF_TYPE,\n-  TI_V2DF_TYPE,\n-  TI_V2DI_TYPE,\n-  TI_V1DI_TYPE,\n-  TI_V16QI_TYPE,\n-  TI_V4DF_TYPE,\n-\n   TI_MAIN_IDENTIFIER,\n \n   TI_MAX\n@@ -1973,31 +1946,6 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define main_identifier_node\t\tglobal_trees[TI_MAIN_IDENTIFIER]\n #define MAIN_NAME_P(NODE) (IDENTIFIER_NODE_CHECK (NODE) == main_identifier_node)\n \n-#define unsigned_V16QI_type_node\tglobal_trees[TI_UV16QI_TYPE]\n-#define unsigned_V4SI_type_node\t\tglobal_trees[TI_UV4SI_TYPE]\n-#define unsigned_V8QI_type_node\t\tglobal_trees[TI_UV8QI_TYPE]\n-#define unsigned_V8HI_type_node\t\tglobal_trees[TI_UV8HI_TYPE]\n-#define unsigned_V4HI_type_node\t\tglobal_trees[TI_UV4HI_TYPE]\n-#define unsigned_V2HI_type_node\t\tglobal_trees[TI_UV2HI_TYPE]\n-#define unsigned_V2SI_type_node\t\tglobal_trees[TI_UV2SI_TYPE]\n-#define unsigned_V2DI_type_node\t\tglobal_trees[TI_UV2DI_TYPE]\n-#define unsigned_V1DI_type_node\t\tglobal_trees[TI_UV1DI_TYPE]\n-\n-#define V16QI_type_node\t\t\tglobal_trees[TI_V16QI_TYPE]\n-#define V4SF_type_node\t\t\tglobal_trees[TI_V4SF_TYPE]\n-#define V4SI_type_node\t\t\tglobal_trees[TI_V4SI_TYPE]\n-#define V8QI_type_node\t\t\tglobal_trees[TI_V8QI_TYPE]\n-#define V8HI_type_node\t\t\tglobal_trees[TI_V8HI_TYPE]\n-#define V4HI_type_node\t\t\tglobal_trees[TI_V4HI_TYPE]\n-#define V2HI_type_node\t\t\tglobal_trees[TI_V2HI_TYPE]\n-#define V2SI_type_node\t\t\tglobal_trees[TI_V2SI_TYPE]\n-#define V2SF_type_node\t\t\tglobal_trees[TI_V2SF_TYPE]\n-#define V2DI_type_node\t\t\tglobal_trees[TI_V2DI_TYPE]\n-#define V2DF_type_node\t\t\tglobal_trees[TI_V2DF_TYPE]\n-#define V16SF_type_node\t\t\tglobal_trees[TI_V16SF_TYPE]\n-#define V1DI_type_node\t\t\tglobal_trees[TI_V1DI_TYPE]\n-#define V4DF_type_node\t\t\tglobal_trees[TI_V4DF_TYPE]\n-\n /* An enumeration of the standard C integer types.  These must be\n    ordered so that shorter types appear before longer ones, and so\n    that signed types appear before unsigned ones, for the correct\n@@ -2186,6 +2134,8 @@ extern tree build_pointer_type_for_mode (tree, enum machine_mode);\n extern tree build_pointer_type (tree);\n extern tree build_reference_type_for_mode (tree, enum machine_mode);\n extern tree build_reference_type (tree);\n+extern tree build_vector_type_for_mode (tree, enum machine_mode);\n+extern tree build_vector_type (tree innertype, int nunits);\n extern tree build_type_no_quals (tree);\n extern tree build_index_type (tree);\n extern tree build_index_2_type (tree, tree);\n@@ -2909,7 +2859,6 @@ extern void dump_tree_statistics (void);\n extern void expand_function_end (void);\n extern void expand_function_start (tree, int);\n extern void expand_pending_sizes (tree);\n-extern tree make_vector (enum machine_mode, tree, int);\n extern tree reconstruct_complex_type (tree, tree);\n \n extern int real_onep (tree);"}]}