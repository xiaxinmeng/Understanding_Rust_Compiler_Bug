{"sha": "5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjOTZkNjBlMWJkNWE5YmIzZjRmMTAwYzk0ZDJhMmRiNzFiOTE1ZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-03-21T21:47:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-03-21T21:47:04Z"}, "message": "re PR inline-asm/7916 (ICE in instantiate_virtual_register_1)\n\n\tPR inline-asm/7916\n\t* function.c (instantiate_virtual_regs_lossage): New function.\n\t(instantiate_virtual_regs_1): Use it.\n\t(instantiate_virtual_regs): Do not continue in substition when insn has\n\tbeen deleted.\n\nFrom-SVN: r64681", "tree": {"sha": "85521224b29a75e5d6c51aa82fd088ec855cc50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85521224b29a75e5d6c51aa82fd088ec855cc50f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d/comments", "author": null, "committer": null, "parents": [{"sha": "c5c15353f373bed7d000d2ce24f4ca6622cc7461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c15353f373bed7d000d2ce24f4ca6622cc7461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c15353f373bed7d000d2ce24f4ca6622cc7461"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "e8045ca4ad6815dc1522bdb6076e0927cf9bb677", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d", "patch": "@@ -1,3 +1,11 @@\n+Fri Mar 21 22:44:33 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR inline-asm/7916\n+\t* function.c (instantiate_virtual_regs_lossage): New function.\n+\t(instantiate_virtual_regs_1): Use it.\n+\t(instantiate_virtual_regs): Do not continue in substition when insn has\n+\tbeen deleted.\n+\n 2003-03-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* combine.c (make_field_assignment): Fix a warning."}, {"sha": "56f2eccdb0700a7b34b06bc05251da8ecd3c8cb8", "filename": "gcc/function.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5dc96d60e1bd5a9bb3f4f100c94d2a2db71b915d", "patch": "@@ -295,6 +295,7 @@ static void compute_insns_for_mem PARAMS ((rtx, rtx, htab_t));\n static void prepare_function_start PARAMS ((void));\n static void do_clobber_return_reg PARAMS ((rtx, void *));\n static void do_use_return_reg PARAMS ((rtx, void *));\n+static void instantiate_virtual_regs_lossage PARAMS ((rtx));\n \f\n /* Pointer to chain of `struct function' for containing functions.  */\n static GTY(()) struct function *outer_function_chain;\n@@ -3540,6 +3541,8 @@ instantiate_virtual_regs (fndecl, insns)\n \t|| GET_CODE (insn) == CALL_INSN)\n       {\n \tinstantiate_virtual_regs_1 (&PATTERN (insn), insn, 1);\n+\tif (INSN_DELETED_P (insn))\n+\t  continue;\n \tinstantiate_virtual_regs_1 (&REG_NOTES (insn), NULL_RTX, 0);\n \t/* Instantiate any virtual registers in CALL_INSN_FUNCTION_USAGE.  */\n \tif (GET_CODE (insn) == CALL_INSN)\n@@ -3712,6 +3715,22 @@ instantiate_new_reg (x, poffset)\n   return new;\n }\n \f\n+\n+/* Called when instantiate_virtual_regs has failed to update the instruction.\n+   Usually this means that non-matching instruction has been emit, however for\n+   asm statements it may be the problem in the constraints.  */\n+static void\n+instantiate_virtual_regs_lossage (insn)\n+     rtx insn;\n+{\n+  if (asm_noperands (PATTERN (insn)) >= 0)\n+    {\n+      error_for_asm (insn, \"impossible constraint in `asm'\");\n+      delete_insn (insn);\n+    }\n+  else\n+    abort ();\n+}\n /* Given a pointer to a piece of rtx and an optional pointer to the\n    containing object, instantiate any virtual registers present in it.\n \n@@ -3748,6 +3767,10 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n   if (x == 0)\n     return 1;\n \n+  /* We may have detected and deleted invalid asm statements.  */\n+  if (object && INSN_P (object) && INSN_DELETED_P (object))\n+    return 1;\n+\n   code = GET_CODE (x);\n \n   /* Check for some special cases.  */\n@@ -3785,7 +3808,10 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t  /* The only valid sources here are PLUS or REG.  Just do\n \t     the simplest possible thing to handle them.  */\n \t  if (GET_CODE (src) != REG && GET_CODE (src) != PLUS)\n-\t    abort ();\n+\t    {\n+\t      instantiate_virtual_regs_lossage (object);\n+\t      return 1;\n+\t    }\n \n \t  start_sequence ();\n \t  if (GET_CODE (src) != REG)\n@@ -3801,7 +3827,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \n \t  if (! validate_change (object, &SET_SRC (x), temp, 0)\n \t      || ! extra_insns)\n-\t    abort ();\n+\t    instantiate_virtual_regs_lossage (object);\n \n \t  return 1;\n \t}\n@@ -3911,7 +3937,10 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t\t  emit_insn_before (seq, object);\n \t\t  if (! validate_change (object, loc, temp, 0)\n \t\t      && ! validate_replace_rtx (x, temp, object))\n-\t\t    abort ();\n+\t\t    {\n+\t\t      instantiate_virtual_regs_lossage (object);\n+\t\t      return 1;\n+\t\t    }\n \t\t}\n \t    }\n \n@@ -4067,7 +4096,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t      emit_insn_before (seq, object);\n \t      if (! validate_change (object, loc, temp, 0)\n \t\t  && ! validate_replace_rtx (x, temp, object))\n-\t\tabort ();\n+\t        instantiate_virtual_regs_lossage (object);\n \t    }\n \t}\n "}]}