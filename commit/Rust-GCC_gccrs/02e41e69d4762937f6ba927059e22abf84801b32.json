{"sha": "02e41e69d4762937f6ba927059e22abf84801b32", "node_id": "C_kwDOANBUbNoAKDAyZTQxZTY5ZDQ3NjI5MzdmNmJhOTI3MDU5ZTIyYWJmODQ4MDFiMzI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-26T11:34:55Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-04T07:45:55Z"}, "message": "[Ada] Do not use front-end build-in-place mechanism for nonlimited types\n\nIt was only used in specific cases for controlled types but no longer\nprovides any significant benefit in practice.\n\ngcc/ada/\n\n\t* debug.adb (d.9): Remove usage.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Remove redundant\n\ttest on Debug_Flag_Dot_L.\n\t(Is_Build_In_Place_Result_Type): Return false for nonlimited types.\n\t(Is_Build_In_Place_Function): Tidy up and remove redundant test on\n\tDebug_Flag_Dot_L.", "tree": {"sha": "7b5b52d3ff4e61e57af57d18de59a702074c96b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b5b52d3ff4e61e57af57d18de59a702074c96b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02e41e69d4762937f6ba927059e22abf84801b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e41e69d4762937f6ba927059e22abf84801b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e41e69d4762937f6ba927059e22abf84801b32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e41e69d4762937f6ba927059e22abf84801b32/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c901877facf9635149ed69cabd88c871f60931fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c901877facf9635149ed69cabd88c871f60931fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c901877facf9635149ed69cabd88c871f60931fe"}], "stats": {"total": 104, "additions": 17, "deletions": 87}, "files": [{"sha": "d0bcdb0c34d90b2a5fe5a1a990d64d3a98032372", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e41e69d4762937f6ba927059e22abf84801b32/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e41e69d4762937f6ba927059e22abf84801b32/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=02e41e69d4762937f6ba927059e22abf84801b32", "patch": "@@ -211,7 +211,7 @@ package body Debug is\n    --  d.6  Do not avoid declaring unreferenced types in C code\n    --  d.7  Disable unsound heuristics in gnat2scil (for CP as SPARK prover)\n    --  d.8  Disable unconditional inlining of expression functions\n-   --  d.9  Disable build-in-place for nonlimited types\n+   --  d.9\n \n    --  d_1\n    --  d_2\n@@ -1125,9 +1125,6 @@ package body Debug is\n    --       This debug flag turns off this behavior, making them subject\n    --       to the usual inlining heuristics of the code generator.\n \n-   --  d.9  Disable build-in-place for function calls returning nonlimited\n-   --       types.\n-\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "14e0498e2acd10f2f7109d83fcbe9a177f586dfd", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 16, "deletions": 83, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02e41e69d4762937f6ba927059e22abf84801b32/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02e41e69d4762937f6ba927059e22abf84801b32/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=02e41e69d4762937f6ba927059e22abf84801b32", "patch": "@@ -7252,7 +7252,6 @@ package body Exp_Ch6 is\n \n       if not Comes_From_Extended_Return_Statement (N)\n         and then Is_Build_In_Place_Function (Scope_Id)\n-        and then not Debug_Flag_Dot_L\n \n          --  The functionality of interface thunks is simple and it is always\n          --  handled by means of simple return statements. This leaves their\n@@ -8534,72 +8533,9 @@ package body Exp_Ch6 is\n       --  of a function with a limited interface result, where the function\n       --  may return objects of nonlimited descendants.\n \n-      if Is_Limited_View (Typ) then\n-         return Ada_Version >= Ada_2005 and then not Debug_Flag_Dot_L;\n-\n-      else\n-         if Debug_Flag_Dot_9 then\n-            return False;\n-         end if;\n-\n-         if Has_Interfaces (Typ) then\n-            return False;\n-         end if;\n-\n-         declare\n-            T : Entity_Id := Typ;\n-         begin\n-            --  For T'Class, return True if it's True for T. This is necessary\n-            --  because a class-wide function might say \"return F (...)\", where\n-            --  F returns the corresponding specific type. We need a loop in\n-            --  case T is a subtype of a class-wide type.\n-\n-            while Is_Class_Wide_Type (T) loop\n-               T := Etype (T);\n-            end loop;\n-\n-            --  If this is a generic formal type in an instance, return True if\n-            --  it's True for the generic actual type.\n-\n-            if Nkind (Parent (T)) = N_Subtype_Declaration\n-              and then Present (Generic_Parent_Type (Parent (T)))\n-            then\n-               T := Entity (Subtype_Indication (Parent (T)));\n-\n-               if Present (Full_View (T)) then\n-                  T := Full_View (T);\n-               end if;\n-            end if;\n-\n-            if Present (Underlying_Type (T)) then\n-               T := Underlying_Type (T);\n-            end if;\n-\n-            declare\n-               Result : Boolean;\n-               --  So we can stop here in the debugger\n-            begin\n-               --  ???For now, enable build-in-place for a very narrow set of\n-               --  controlled types. Change \"if True\" to \"if False\" to\n-               --  experiment with more controlled types. Eventually, we might\n-               --  like to enable build-in-place for all tagged types, all\n-               --  types that need finalization, and all caller-unknown-size\n-               --  types.\n-\n-               if True then\n-                  Result := Is_Controlled (T)\n-                    and then not Is_Generic_Actual_Type (T)\n-                    and then Present (Enclosing_Subprogram (T))\n-                    and then not Is_Compilation_Unit (Enclosing_Subprogram (T))\n-                    and then Ekind (Enclosing_Subprogram (T)) = E_Procedure;\n-               else\n-                  Result := Is_Controlled (T);\n-               end if;\n-\n-               return Result;\n-            end;\n-         end;\n-      end if;\n+      return Is_Limited_View (Typ)\n+        and then Ada_Version >= Ada_2005\n+        and then not Debug_Flag_Dot_L;\n    end Is_Build_In_Place_Result_Type;\n \n    ------------------------------\n@@ -8635,6 +8571,9 @@ package body Exp_Ch6 is\n    --------------------------------\n \n    function Is_Build_In_Place_Function (E : Entity_Id) return Boolean is\n+      Kind : constant Entity_Kind := Ekind (E);\n+      Typ  : constant Entity_Id   := Etype (E);\n+\n    begin\n       --  This function is called from Expand_Subtype_From_Expr during\n       --  semantic analysis, even when expansion is off. In those cases\n@@ -8644,22 +8583,16 @@ package body Exp_Ch6 is\n          return False;\n       end if;\n \n-      if Ekind (E) in E_Function | E_Generic_Function\n-        or else (Ekind (E) = E_Subprogram_Type\n-                  and then Etype (E) /= Standard_Void_Type)\n-      then\n-         --  If the function is imported from a foreign language, we don't do\n-         --  build-in-place. Note that Import (Ada) functions can do\n-         --  build-in-place. Note that it is OK for a build-in-place function\n-         --  to return a type with a foreign convention; the build-in-place\n-         --  machinery will ensure there is no copying.\n-\n-         return Is_Build_In_Place_Result_Type (Etype (E))\n-           and then not (Has_Foreign_Convention (E) and then Is_Imported (E))\n-           and then not Debug_Flag_Dot_L;\n-      else\n-         return False;\n-      end if;\n+      --  If the function is imported from a foreign language, we don't do\n+      --  build-in-place, whereas Import (Ada) functions can do it. Note also\n+      --  that it is OK for a build-in-place function to return a type with a\n+      --  foreign convention because the machinery ensures there is no copying.\n+\n+      return (Kind in E_Function | E_Generic_Function\n+               or else\n+             (Kind = E_Subprogram_Type and then Typ /= Standard_Void_Type))\n+        and then Is_Build_In_Place_Result_Type (Typ)\n+        and then not (Is_Imported (E) and then Has_Foreign_Convention (E));\n    end Is_Build_In_Place_Function;\n \n    -------------------------------------"}]}