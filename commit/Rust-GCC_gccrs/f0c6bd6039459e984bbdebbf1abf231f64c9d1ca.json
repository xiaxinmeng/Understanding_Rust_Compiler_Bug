{"sha": "f0c6bd6039459e984bbdebbf1abf231f64c9d1ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjNmJkNjAzOTQ1OWU5ODRiYmRlYmJmMWFiZjIzMWY2NGM5ZDFjYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-04-01T10:29:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:34:53Z"}, "message": "[Ada] AI12-0376 Relax RM 13.1(10) rule wrt primitive operations\n\ngcc/ada/\n\n\t* aspects.ads (Is_Representation_Aspect):\n\tDefault_Component_Value is a representation aspect.\n\t* sem_ch13.adb (Check_Aspect_Too_Late, Rep_Item_Too_Late): Relax\n\tRM 13.1(10) rule wrt primitive operations for Ada 202x.", "tree": {"sha": "385e66ba8b9cfd96997c5d1938c2278b823b28d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/385e66ba8b9cfd96997c5d1938c2278b823b28d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fedcc18cb4a3c2dec2c658a975deb30cc821537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fedcc18cb4a3c2dec2c658a975deb30cc821537", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fedcc18cb4a3c2dec2c658a975deb30cc821537"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "a418957c57c3f794d7641110fa4f633127d5d3bb", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=f0c6bd6039459e984bbdebbf1abf231f64c9d1ca", "patch": "@@ -454,7 +454,7 @@ package Aspects is\n       Aspect_Contract_Cases               => False,\n       Aspect_Convention                   => True,\n       Aspect_CPU                          => False,\n-      Aspect_Default_Component_Value      => False,\n+      Aspect_Default_Component_Value      => True,\n       Aspect_Default_Initial_Condition    => False,\n       Aspect_Default_Iterator             => False,\n       Aspect_Default_Storage_Pool         => True,"}, {"sha": "a0e5146e59472115f2a43eb226358e14820a57f6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c6bd6039459e984bbdebbf1abf231f64c9d1ca/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f0c6bd6039459e984bbdebbf1abf231f64c9d1ca", "patch": "@@ -952,7 +952,6 @@ package body Sem_Ch13 is\n       procedure Check_Aspect_Too_Late (N : Node_Id) is\n          Typ  : constant Entity_Id := Entity (N);\n          Expr : constant Node_Id   := Expression (N);\n-         A_Id : constant Aspect_Id := Get_Aspect_Id (N);\n \n          function Find_Type_Reference\n            (Typ : Entity_Id; Expr : Node_Id) return Boolean;\n@@ -995,42 +994,44 @@ package body Sem_Ch13 is\n          Parent_Type : Entity_Id;\n \n       begin\n-         if A_Id /= Aspect_Default_Value then\n+         --  Ensure Expr is analyzed so that e.g. all types are properly\n+         --  resolved for Find_Type_Reference.\n \n-            --  Ensure Expr is analyzed so that e.g. all types are properly\n-            --  resolved for Find_Type_Reference.\n-\n-            Analyze (Expr);\n+         Analyze (Expr);\n \n-            --  A self-referential aspect is illegal if it forces freezing the\n-            --  entity before the corresponding aspect has been analyzed.\n+         --  A self-referential aspect is illegal if it forces freezing the\n+         --  entity before the corresponding aspect has been analyzed.\n \n-            if Find_Type_Reference (Typ, Expr) then\n-               Error_Msg_NE\n-                 (\"aspect specification causes premature freezing of&\",\n-                  N, Typ);\n-            end if;\n+         if Find_Type_Reference (Typ, Expr) then\n+            Error_Msg_NE\n+              (\"aspect specification causes premature freezing of&\", N, Typ);\n          end if;\n \n          --  For representation aspects, check for case of untagged derived\n-         --  type whose parent either has primitive operations, or is a by\n-         --  reference type (RM 13.1(10)).\n+         --  type whose parent either has primitive operations (pre Ada 202x),\n+         --  or is a by-reference type (RM 13.1(10)).\n+         --  Strictly speaking the check also applies to Ada 2012 but it is\n+         --  really too constraining for existing code already, so relax it.\n+         --  ??? Confirming aspects should be allowed here.\n \n-         if Is_Representation_Aspect (A_Id)\n+         if Is_Representation_Aspect (Get_Aspect_Id (N))\n            and then Is_Derived_Type (Typ)\n            and then not Is_Tagged_Type (Typ)\n          then\n             Parent_Type := Etype (Base_Type (Typ));\n \n-            if Has_Primitive_Operations (Parent_Type) then\n-               No_Type_Rep_Item (N);\n+            if Ada_Version <= Ada_2012\n+              and then Has_Primitive_Operations (Parent_Type)\n+            then\n+               Error_Msg_N\n+                 (\"|representation aspect not permitted before Ada 202x!\", N);\n                Error_Msg_NE\n                  (\"\\parent type & has primitive operations!\", N, Parent_Type);\n \n             elsif Is_By_Reference_Type (Parent_Type) then\n                No_Type_Rep_Item (N);\n                Error_Msg_NE\n-                 (\"\\parent type & is a by reference type!\", N, Parent_Type);\n+                 (\"\\parent type & is a by-reference type!\", N, Parent_Type);\n             end if;\n          end if;\n       end Check_Aspect_Too_Late;\n@@ -13868,9 +13869,11 @@ package body Sem_Ch13 is\n          return True;\n \n       --  Check for case of untagged derived type whose parent either has\n-      --  primitive operations, or is a by reference type (RM 13.1(10)). In\n-      --  this case we do not output a Too_Late message, since there is no\n-      --  earlier point where the rep item could be placed to make it legal.\n+      --  primitive operations (pre Ada 202x), or is a by-reference type (RM\n+      --  13.1(10)). In this case we do not output a Too_Late message, since\n+      --  there is no earlier point where the rep item could be placed to make\n+      --  it legal.\n+      --  ??? Confirming representation clauses should be allowed here.\n \n       elsif Is_Type (T)\n         and then not FOnly\n@@ -13879,24 +13882,22 @@ package body Sem_Ch13 is\n       then\n          Parent_Type := Etype (Base_Type (T));\n \n-         if Has_Primitive_Operations (Parent_Type) then\n-            No_Type_Rep_Item (N);\n-\n-            if not Relaxed_RM_Semantics then\n-               Error_Msg_NE\n-                 (\"\\parent type & has primitive operations!\", N, Parent_Type);\n-            end if;\n+         if Relaxed_RM_Semantics then\n+            null;\n \n+         elsif Ada_Version <= Ada_2012\n+           and then Has_Primitive_Operations (Parent_Type)\n+         then\n+            Error_Msg_N\n+              (\"|representation item not permitted before Ada 202x!\", N);\n+            Error_Msg_NE\n+              (\"\\parent type & has primitive operations!\", N, Parent_Type);\n             return True;\n \n          elsif Is_By_Reference_Type (Parent_Type) then\n             No_Type_Rep_Item (N);\n-\n-            if not Relaxed_RM_Semantics then\n-               Error_Msg_NE\n-                 (\"\\parent type & is a by reference type!\", N, Parent_Type);\n-            end if;\n-\n+            Error_Msg_NE\n+              (\"\\parent type & is a by-reference type!\", N, Parent_Type);\n             return True;\n          end if;\n       end if;"}]}