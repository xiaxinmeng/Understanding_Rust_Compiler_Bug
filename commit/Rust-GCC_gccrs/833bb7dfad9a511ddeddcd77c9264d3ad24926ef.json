{"sha": "833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzYmI3ZGZhZDlhNTExZGRlZGRjZDc3YzkyNjRkM2FkMjQ5MjZlZg==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2010-08-06T20:02:41Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2010-08-06T20:02:41Z"}, "message": "Add missing commit from patch earlier today\n\nFrom-SVN: r162958", "tree": {"sha": "8fc0a2d72c975670b962a0dda245fa9c93f04145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc0a2d72c975670b962a0dda245fa9c93f04145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833bb7dfad9a511ddeddcd77c9264d3ad24926ef/comments", "author": null, "committer": null, "parents": [{"sha": "6a57b9eeeab1231ac967dc0a17eb177aba2f3777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a57b9eeeab1231ac967dc0a17eb177aba2f3777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a57b9eeeab1231ac967dc0a17eb177aba2f3777"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "23be1e30ea92a5e7a8ffdc3ad8afc7d5ad558c32", "filename": "libffi/msvcc.sh", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/833bb7dfad9a511ddeddcd77c9264d3ad24926ef/libffi%2Fmsvcc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/833bb7dfad9a511ddeddcd77c9264d3ad24926ef/libffi%2Fmsvcc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fmsvcc.sh?ref=833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "patch": "@@ -0,0 +1,182 @@\n+#!/bin/sh\n+\n+# ***** BEGIN LICENSE BLOCK *****\n+# Version: MPL 1.1/GPL 2.0/LGPL 2.1\n+#\n+# The contents of this file are subject to the Mozilla Public License Version\n+# 1.1 (the \"License\"); you may not use this file except in compliance with\n+# the License. You may obtain a copy of the License at\n+# http://www.mozilla.org/MPL/\n+#\n+# Software distributed under the License is distributed on an \"AS IS\" basis,\n+# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+# for the specific language governing rights and limitations under the\n+# License.\n+#\n+# The Original Code is the MSVC wrappificator.\n+#\n+# The Initial Developer of the Original Code is\n+# Timothy Wall <twalljava@dev.java.net>.\n+# Portions created by the Initial Developer are Copyright (C) 2009\n+# the Initial Developer. All Rights Reserved.\n+#\n+# Contributor(s):\n+#   Daniel Witte <dwitte@mozilla.com>\n+#\n+# Alternatively, the contents of this file may be used under the terms of\n+# either the GNU General Public License Version 2 or later (the \"GPL\"), or\n+# the GNU Lesser General Public License Version 2.1 or later (the \"LGPL\"),\n+# in which case the provisions of the GPL or the LGPL are applicable instead\n+# of those above. If you wish to allow use of your version of this file only\n+# under the terms of either the GPL or the LGPL, and not to allow others to\n+# use your version of this file under the terms of the MPL, indicate your\n+# decision by deleting the provisions above and replace them with the notice\n+# and other provisions required by the GPL or the LGPL. If you do not delete\n+# the provisions above, a recipient may use your version of this file under\n+# the terms of any one of the MPL, the GPL or the LGPL.\n+#\n+# ***** END LICENSE BLOCK *****\n+\n+#\n+# GCC-compatible wrapper for cl.exe and ml.exe. Arguments are given in GCC\n+# format and translated into something sensible for cl or ml.\n+#\n+\n+args=\"-nologo -W3\"\n+md=-MD\n+cl=\"cl\"\n+ml=\"ml\"\n+output=\n+\n+while [ $# -gt 0 ]\n+do\n+  case $1\n+  in\n+    -fexceptions)\n+      # Don't enable exceptions for now.\n+      #args=\"$args -EHac\"\n+      shift 1\n+    ;;\n+    -m32)\n+      shift 1\n+    ;;\n+    -m64)\n+      cl=\"cl\"   # \"$MSVC/x86_amd64/cl\"\n+      ml=\"ml64\" # \"$MSVC/x86_amd64/ml64\"\n+      shift 1\n+    ;;\n+    -O*)\n+      args=\"$args $1\"\n+      shift 1\n+    ;;\n+    -g)\n+      # Can't specify -RTC1 or -Zi in opt. -Gy is ok. Use -OPT:REF?\n+      args=\"$args -D_DEBUG -RTC1 -Zi\"\n+      md=-MDd\n+      shift 1\n+    ;;\n+    -c)\n+      args=\"$args -c\"\n+      args=\"$(echo $args | sed 's%/Fe%/Fo%g')\"\n+      single=\"-c\"\n+      shift 1\n+    ;;\n+    -D*=*)\n+      name=\"$(echo $1|sed 's/-D\\([^=][^=]*\\)=.*/\\1/g')\"\n+      value=\"$(echo $1|sed 's/-D[^=][^=]*=//g')\"\n+      args=\"$args -D${name}='$value'\"\n+      defines=\"$defines -D${name}='$value'\"\n+      shift 1\n+    ;;\n+    -D*)\n+      args=\"$args $1\"\n+      defines=\"$defines $1\"\n+      shift 1\n+    ;;\n+    -I)\n+      args=\"$args -I$2\"\n+      includes=\"$includes -I$2\"\n+      shift 2\n+    ;;\n+    -I*)\n+      args=\"$args $1\"\n+      includes=\"$includes $1\"\n+      shift 1\n+    ;;\n+    -W|-Wextra)\n+      # TODO map extra warnings\n+      shift 1\n+    ;;\n+    -Wall)\n+      args=\"$args -Wall\"\n+      shift 1\n+    ;;\n+    -Werror)\n+      args=\"$args -WX\"\n+      shift 1\n+    ;;\n+    -W*)\n+      # TODO map specific warnings\n+      shift 1\n+    ;;\n+    -S)\n+      args=\"$args -FAs\"\n+      shift 1\n+    ;;\n+    -o)\n+      outdir=\"$(dirname $2)\"\n+      base=\"$(basename $2|sed 's/\\.[^.]*//g')\"\n+      if [ -n \"$single\" ]; then \n+        output=\"-Fo$2\"\n+      else\n+        output=\"-Fe$2\"\n+      fi\n+      if [ -n \"$assembly\" ]; then\n+        args=\"$args $output\"\n+      else\n+        args=\"$args $output -Fd$outdir/$base -Fp$outdir/$base -Fa$outdir/$base\"\n+      fi\n+      shift 2\n+    ;;\n+    *.S)\n+      src=$1\n+      assembly=\"true\"\n+      shift 1\n+    ;;\n+    *.c)\n+      args=\"$args $1\"\n+      shift 1\n+    ;;\n+    *)\n+      # Assume it's an MSVC argument, and pass it through.\n+      args=\"$args $1\"\n+      shift 1\n+    ;;\n+  esac\n+done\n+\n+if [ -n \"$assembly\" ]; then\n+    if [ -z \"$outdir\" ]; then\n+      outdir=\".\"\n+    fi\n+    ppsrc=\"$outdir/$(basename $src|sed 's/.S$/.asm/g')\"\n+    echo \"$cl -nologo -EP $includes $defines $src > $ppsrc\"\n+    \"$cl\" -nologo -EP $includes $defines $src > $ppsrc || exit $?\n+    output=\"$(echo $output | sed 's%/F[dpa][^ ]*%%g')\"\n+    args=\"-nologo -safeseh $single $output $ppsrc\"\n+\n+    echo \"$ml $args\"\n+    eval \"\\\"$ml\\\" $args\"\n+    result=$?\n+\n+    # required to fix ml64 broken output?\n+    #mv *.obj $outdir\n+else\n+    args=\"$md $args\"\n+    echo \"$cl $args\"\n+    eval \"\\\"$cl\\\" $args\"\n+    result=$?\n+fi\n+\n+exit $result\n+"}]}