{"sha": "f92f47785201d44cef91e2c4a9742fb503ce5316", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyZjQ3Nzg1MjAxZDQ0Y2VmOTFlMmM0YTk3NDJmYjUwM2NlNTMxNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-07T00:16:39Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-07T00:16:39Z"}, "message": "Daily bump.", "tree": {"sha": "e7e211a924ce0357e318d8baf0e8cd8dd8803c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e211a924ce0357e318d8baf0e8cd8dd8803c61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f92f47785201d44cef91e2c4a9742fb503ce5316", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92f47785201d44cef91e2c4a9742fb503ce5316", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92f47785201d44cef91e2c4a9742fb503ce5316", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92f47785201d44cef91e2c4a9742fb503ce5316/comments", "author": null, "committer": null, "parents": [{"sha": "81d6cdd335ffc60c216a020d5c99306f659377a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d6cdd335ffc60c216a020d5c99306f659377a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d6cdd335ffc60c216a020d5c99306f659377a2"}], "stats": {"total": 403, "additions": 402, "deletions": 1}, "files": [{"sha": "3b0d1b06e9cdfe5a21c73988d8a47a21b2c6fd34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1,3 +1,287 @@\n+2021-08-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* builtins.c (expand_builtin_memchr): Move to gimple-ssa-warn-access.cc.\n+\t(expand_builtin_strcat): Same.\n+\t(expand_builtin_stpncpy): Same.\n+\t(expand_builtin_strncat): Same.\n+\t(check_read_access): Same.\n+\t(check_memop_access): Same.\n+\t(expand_builtin_strlen): Move checks to gimple-ssa-warn-access.cc.\n+\t(expand_builtin_strnlen): Same.\n+\t(expand_builtin_memcpy): Same.\n+\t(expand_builtin_memmove): Same.\n+\t(expand_builtin_mempcpy): Same.\n+\t(expand_builtin_strcpy): Same.\n+\t(expand_builtin_strcpy_args): Same.\n+\t(expand_builtin_stpcpy_1): Same.\n+\t(expand_builtin_strncpy): Same.\n+\t(expand_builtin_memset): Same.\n+\t(expand_builtin_bzero): Same.\n+\t(expand_builtin_strcmp): Same.\n+\t(expand_builtin_strncmp): Same.\n+\t(expand_builtin): Remove handlers.\n+\t(fold_builtin_strlen): Add a comment.\n+\t* builtins.h (check_access): Move to gimple-ssa-warn-access.cc.\n+\t* calls.c (maybe_warn_nonstring_arg): Same.\n+\t* diagnostic-spec.c (nowarn_spec_t::nowarn_spec_t): Add warning option.\n+\t* gimple-fold.c (gimple_fold_builtin_strcpy): Pass argument to callee.\n+\t(gimple_fold_builtin_stpcpy): Same.\n+\t* gimple-ssa-warn-access.cc (has_location): New function.\n+\t(get_location): Same.\n+\t(get_callee_fndecl): Same.\n+\t(call_nargs): Same.\n+\t(call_arg): Same.\n+\t(warn_string_no_nul): Define.\n+\t(unterminated_array): Same.\n+\t(check_nul_terminated_array): Same.\n+\t(maybe_warn_nonstring_arg): Same.\n+\t(maybe_warn_for_bound): Same.\n+\t(warn_for_access): Same.\n+\t(check_access): Same.\n+\t(check_memop_access): Same.\n+\t(check_read_access): Same.\n+\t(warn_dealloc_offset): Use helper functions.\n+\t(maybe_emit_free_warning): Same.\n+\t(class pass_waccess): Add members.\n+\t(check_strcat): New function.\n+\t(check_strncat): New function.\n+\t(check_stxcpy): New function.\n+\t(check_stxncpy): New function.\n+\t(check_strncmp): New function.\n+\t(pass_waccess::check_builtin): New function.\n+\t(pass_waccess::check): Call it.\n+\t* gimple-ssa-warn-access.h (warn_string_no_nul): Move here from\n+\tbuiltins.h.\n+\t(maybe_warn_for_bound): Same.\n+\t(check_access): Same.\n+\t(check_memop_access): Same.\n+\t(check_read_access): Same.\n+\t* pointer-query.h (struct access_data): Define a ctor overload.\n+\n+2021-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101801\n+\t* tree-vectorizer.h (vect_worthwhile_without_simd_p): Rename...\n+\t(vect_can_vectorize_without_simd_p): ... to this.\n+\t* tree-vect-loop.c (vect_worthwhile_without_simd_p): Rename...\n+\t(vect_can_vectorize_without_simd_p): ... to this and fold\n+\tin vect_min_worthwhile_factor.\n+\t(vect_min_worthwhile_factor): Remove.\n+\t(vectorizable_reduction): Adjust and remove the cost part.\n+\t* tree-vect-stmts.c (vectorizable_shift): Likewise.\n+\t(vectorizable_operation): Likewise.\n+\n+2021-08-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101797\n+\t* config/i386/i386.md (cmove reg-to-reg move elimination peephole2s):\n+\tAdd general_gr_operand predicate to operand 3.\n+\n+2021-08-06  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-phiopt.c (cond_removal_in_builtin_zero_pattern): Use\n+\tCFN_BUILT_IN_CLRSB* instead of BUILT_IN_CLRSB* for consistency.\n+\n+2021-08-06  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.cc (register_svpattern,\n+\tregister_svprfop): Pass vec<> by pointer.\n+\t* langhooks-def.h (lhd_simulate_enum_decl): Likewise.\n+\t* langhooks.c (lhd_simulate_enum_decl): Likewise.\n+\t* langhooks.h (struct lang_hooks_for_types): Likewise.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vst1_bf16_x2): Use\n+\t__builtin_memcpy instead of constructing an additional\n+\t__builtin_aarch64_simd_oi one vector at a time.\n+\t(vst1q_bf16_x2): Likewise.\n+\t(vst1_bf16_x3): Use __builtin_memcpy instead of constructing\n+\tan additional __builtin_aarch64_simd_ci one vector at a time.\n+\t(vst1q_bf16_x3): Likewise.\n+\t(vst1_bf16_x4): Use __builtin_memcpy instead of a union.\n+\t(vst1q_bf16_x4): Likewise.\n+\t(vst2_bf16): Use __builtin_memcpy instead of constructing an\n+\tadditional __builtin_aarch64_simd_oi one vector at a time.\n+\t(vst2q_bf16): Likewise.\n+\t(vst3_bf16): Use __builtin_memcpy instead of constructing an\n+\tadditional __builtin_aarch64_simd_ci mode one vector at a\n+\ttime.\n+\t(vst3q_bf16): Likewise.\n+\t(vst4_bf16): Use __builtin_memcpy instead of constructing an\n+\tadditional __builtin_aarch64_simd_xi one vector at a time.\n+\t(vst4q_bf16): Likewise.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__ST2_LANE_FUNC): Delete.\n+\t(__ST2Q_LANE_FUNC): Delete.\n+\t(vst2_lane_f16): Use __builtin_memcpy to copy vector\n+\tstructure instead of constructing __builtin_aarch64_simd_oi\n+\tone vector at a time.\n+\t(vst2_lane_f32): Likewise.\n+\t(vst2_lane_f64): Likewise.\n+\t(vst2_lane_p8): Likewise.\n+\t(vst2_lane_p16): Likewise.\n+\t(vst2_lane_p64): Likewise.\n+\t(vst2_lane_s8): Likewise.\n+\t(vst2_lane_s16): Likewise.\n+\t(vst2_lane_s32): Likewise.\n+\t(vst2_lane_s64): Likewise.\n+\t(vst2_lane_u8): Likewise.\n+\t(vst2_lane_u16): Likewise.\n+\t(vst2_lane_u32): Likewise.\n+\t(vst2_lane_u64): Likewise.\n+\t(vst2_lane_bf16): Likewise.\n+\t(vst2q_lane_f16): Use __builtin_memcpy to copy vector\n+\tstructure instead of using a union.\n+\t(vst2q_lane_f32): Likewise.\n+\t(vst2q_lane_f64): Likewise.\n+\t(vst2q_lane_p8): Likewise.\n+\t(vst2q_lane_p16): Likewise.\n+\t(vst2q_lane_p64): Likewise.\n+\t(vst2q_lane_s8): Likewise.\n+\t(vst2q_lane_s16): Likewise.\n+\t(vst2q_lane_s32): Likewise.\n+\t(vst2q_lane_s64): Likewise.\n+\t(vst2q_lane_u8): Likewise.\n+\t(vst2q_lane_u16): Likewise.\n+\t(vst2q_lane_u32): Likewise.\n+\t(vst2q_lane_u64): Likewise.\n+\t(vst2q_lane_bf16): Likewise.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__ST3_LANE_FUNC): Delete.\n+\t(__ST3Q_LANE_FUNC): Delete.\n+\t(vst3_lane_f16): Use __builtin_memcpy to copy vector\n+\tstructure instead of constructing __builtin_aarch64_simd_ci\n+\tone vector at a time.\n+\t(vst3_lane_f32): Likewise.\n+\t(vst3_lane_f64): Likewise.\n+\t(vst3_lane_p8): Likewise.\n+\t(vst3_lane_p16): Likewise.\n+\t(vst3_lane_p64): Likewise.\n+\t(vst3_lane_s8): Likewise.\n+\t(vst3_lane_s16): Likewise.\n+\t(vst3_lane_s32): Likewise.\n+\t(vst3_lane_s64): Likewise.\n+\t(vst3_lane_u8): Likewise.\n+\t(vst3_lane_u16): Likewise.\n+\t(vst3_lane_u32): Likewise.\n+\t(vst3_lane_u64): Likewise.\n+\t(vst3_lane_bf16): Likewise.\n+\t(vst3q_lane_f16): Use __builtin_memcpy to copy vector\n+\tstructure instead of using a union.\n+\t(vst3q_lane_f32): Likewise.\n+\t(vst3q_lane_f64): Likewise.\n+\t(vst3q_lane_p8): Likewise.\n+\t(vst3q_lane_p16): Likewise.\n+\t(vst3q_lane_p64): Likewise.\n+\t(vst3q_lane_s8): Likewise.\n+\t(vst3q_lane_s16): Likewise.\n+\t(vst3q_lane_s32): Likewise.\n+\t(vst3q_lane_s64): Likewise.\n+\t(vst3q_lane_u8): Likewise.\n+\t(vst3q_lane_u16): Likewise.\n+\t(vst3q_lane_u32): Likewise.\n+\t(vst3q_lane_u64): Likewise.\n+\t(vst3q_lane_bf16): Likewise.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__ST4_LANE_FUNC): Delete.\n+\t(__ST4Q_LANE_FUNC): Delete.\n+\t(vst4_lane_f16): Use __builtin_memcpy to copy vector\n+\tstructure instead of constructing __builtin_aarch64_simd_xi\n+\tone vector at a time.\n+\t(vst4_lane_f32): Likewise.\n+\t(vst4_lane_f64): Likewise.\n+\t(vst4_lane_p8): Likewise.\n+\t(vst4_lane_p16): Likewise.\n+\t(vst4_lane_p64): Likewise.\n+\t(vst4_lane_s8): Likewise.\n+\t(vst4_lane_s16): Likewise.\n+\t(vst4_lane_s32): Likewise.\n+\t(vst4_lane_s64): Likewise.\n+\t(vst4_lane_u8): Likewise.\n+\t(vst4_lane_u16): Likewise.\n+\t(vst4_lane_u32): Likewise.\n+\t(vst4_lane_u64): Likewise.\n+\t(vst4_lane_bf16): Likewise.\n+\t(vst4q_lane_f16): Use __builtin_memcpy to copy vector\n+\tstructure instead of using a union.\n+\t(vst4q_lane_f32): Likewise.\n+\t(vst4q_lane_f64): Likewise.\n+\t(vst4q_lane_p8): Likewise.\n+\t(vst4q_lane_p16): Likewise.\n+\t(vst4q_lane_p64): Likewise.\n+\t(vst4q_lane_s8): Likewise.\n+\t(vst4q_lane_s16): Likewise.\n+\t(vst4q_lane_s32): Likewise.\n+\t(vst4q_lane_s64): Likewise.\n+\t(vst4q_lane_u8): Likewise.\n+\t(vst4q_lane_u16): Likewise.\n+\t(vst4q_lane_u32): Likewise.\n+\t(vst4q_lane_u64): Likewise.\n+\t(vst4q_lane_bf16): Likewise.\n+\n+2021-08-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): When\n+\ta target option is restored, it can have\n+\trs6000_long_double_type_size set to FLOAT_PRECISION_TFmode\n+\tand error should not be emitted.\n+\n+2021-08-06  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* gcov-io.h (gcov_write): Declare.\n+\t* gcov-io.c (gcov_write): New.\n+\t(gcov_write_counter): Remove.\n+\t(gcov_write_tag_length): Likewise.\n+\t(gcov_write_summary): Replace gcov_write_tag_length() with calls to\n+\tgcov_write_unsigned().\n+\t* doc/invoke.texi (fprofile-info-section): Mention\n+\t__gcov_info_to_gdca().\n+\n+2021-08-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* dominance.c (prune_bbs_to_update_dominators): Adjust by-value vec\n+\targuments to by-reference.\n+\t(iterate_fix_dominators): Same.\n+\t* dominance.h (iterate_fix_dominators): Same.\n+\t* ipa-prop.h: Call auto_vec::to_vec_legacy.\n+\t* tree-data-ref.c (dump_data_dependence_relation): Adjust by-value vec\n+\targuments to by-reference.\n+\t(debug_data_dependence_relation): Same.\n+\t(dump_data_dependence_relations): Same.\n+\t* tree-data-ref.h (debug_data_dependence_relation): Same.\n+\t(dump_data_dependence_relations): Same.\n+\t* tree-predcom.c (dump_chains): Same.\n+\t(initialize_root_vars_lm): Same.\n+\t(determine_unroll_factor): Same.\n+\t(replace_phis_by_defined_names): Same.\n+\t(insert_init_seqs): Same.\n+\t(pcom_worker::tree_predictive_commoning_loop): Call\n+\t auto_vec::to_vec_legacy.\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Adjust by-value vec\n+\targuments to by-reference.\n+\t* tree-ssa-threadbackward.c (populate_worklist): Same.\n+\t(back_threader::resolve_def): Same.\n+\t* tree-vect-data-refs.c (vect_check_nonzero_value): Same.\n+\t(vect_enhance_data_refs_alignment): Same.\n+\t(vect_check_lower_bound): Same.\n+\t(vect_prune_runtime_alias_test_list): Same.\n+\t(vect_permute_store_chain): Same.\n+\t* tree-vect-slp-patterns.c (vect_normalize_conj_loc): Same.\n+\t* tree-vect-stmts.c (vect_create_vectorized_demotion_stmts): Same.\n+\t* tree-vectorizer.h (vect_permute_store_chain): Same.\n+\t* vec.c (test_init): New function.\n+\t(vec_c_tests): Call new function.\n+\t* vec.h (vec): Declare ctors, dtor, and assignment.\n+\t(auto_vec::vec_to_legacy): New function.\n+\t(vec::copy): Adjust initialization.\n+\n 2021-08-05  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/99744"}, {"sha": "d5d1da952c7e4af4867afe9cd120c59fb0b14feb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1 +1 @@\n-20210806\n+20210807"}, {"sha": "6f15b0fdff34b6828025b271e5d237b152c54b14", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1,3 +1,20 @@\n+2021-08-06  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* c-decl.c (c_simulate_enum_decl): Pass vec<> by pointer.\n+\t* c-tree.h (c_simulate_enum_decl): Likewise.\n+\n+2021-08-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-parser.c (c_parser_declaration_or_fndef): Adjust by-value function\n+\tvec arguments to by-reference.\n+\t(c_finish_omp_declare_simd): Same.\n+\t(c_parser_compound_statement_nostart): Same.\n+\t(c_parser_for_statement): Same.\n+\t(c_parser_objc_methodprotolist): Same.\n+\t(c_parser_oacc_routine): Same.\n+\t(c_parser_omp_for_loop): Same.\n+\t(c_parser_omp_declare_simd): Same.\n+\n 2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "a8f70b02dec1224b1cefb476c70b6c909f7378a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1,3 +1,8 @@\n+2021-08-06  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* cp-objcp-common.h (cxx_simulate_enum_decl): Pass vec<> by pointer.\n+\t* decl.c (cxx_simulate_enum_decl): Likewise.\n+\n 2021-08-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101759"}, {"sha": "661e1cb5e9126c093656ba02776afa54bd207763", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1,3 +1,64 @@\n+2021-08-06  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-c++-common/Wsizeof-pointer-memaccess1.c: Also disable\n+\t-Wstringop-overread.\n+\t* c-c++-common/attr-nonstring-3.c: Adjust pattern of expected message.\n+\t* gcc.dg/Warray-bounds-39.c: Add an xfail due to a known bug.\n+\t* gcc.dg/Wstring-compare-3.c: Also disable -Wstringop-overread.\n+\t* gcc.dg/attr-nonstring-2.c: Adjust pattern of expected message.\n+\t* gcc.dg/attr-nonstring-4.c: Same.\n+\t* gcc.dg/Wstringop-overread-6.c: New test.\n+\t* gcc.dg/sso-14.c: Fix typos to avoid buffer overflow.\n+\n+2021-08-06  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR target/101723\n+\t* gcc.target/arm/pr69245.c: Make sure to emit code for fn1, fix\n+\ttypo.\n+\n+2021-08-06  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR target/101723\n+\t* gcc.target/arm/attr-neon3.c: Fix typo.\n+\t* gcc.target/arm/pragma_fpu_attribute_2.c: Fix typo.\n+\n+2021-08-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/101797\n+\t* gcc.target/i386/pr101797.c: New test.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-08-06  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n+\ttests.\n+\n+2021-08-06  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/powerpc/pragma-optimize.c: New test.\n+\n+2021-08-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* gfortran.dg/vect/vect-8.f90: Simplify aarch64 scanning.\n+\n+2021-08-06  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* gcc.dg/gcov-info-to-gcda.c: New test.\n+\n 2021-08-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* g++.old-deja/g++.other/inline7.C: Cast nodiscard call to void."}, {"sha": "cd7394a778de0ea21f7296e137e140bf24071e7e", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1,3 +1,30 @@\n+2021-08-06  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* libgcov-driver.c (#include <stdint.h>): Remove.\n+\t(write_topn_counters): Use __INTPTR_TYPE__ instead of intptr_t.\n+\n+2021-08-06  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* Makefile.in (LIBGCOV_DRIVER): Add _gcov_info_to_gcda.\n+\t* gcov.h (gcov_info): Declare.\n+\t(__gcov_info_to_gdca): Likewise.\n+\t* libgcov.h (gcov_write_counter): Remove.\n+\t(gcov_write_tag_length): Likewise.\n+\t* libgcov-driver.c (#include <stdint.h>): New.\n+\t(#include <string.h>): Remove.\n+\t(NEED_L_GCOV): Conditionally define.\n+\t(NEED_L_GCOV_INFO_TO_GCDA): Likewise.\n+\t(are_all_counters_zero): New.\n+\t(gcov_dump_handler): Likewise.\n+\t(gcov_allocate_handler): Likewise.\n+\t(dump_unsigned): Likewise.\n+\t(dump_counter): Likewise.\n+\t(write_topn_counters): Add dump_fn, allocate_fn, and arg parameters.\n+\tUse dump_unsigned() and dump_counter().\n+\t(write_one_data): Add dump_fn, allocate_fn, and arg parameters.  Use\n+\tdump_unsigned(), dump_counter(), and are_all_counters_zero().\n+\t(__gcov_info_to_gcda): New.\n+\n 2021-08-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/t-slibgcc (SHLIB_LINK): Add $(LDFLAGS)."}, {"sha": "da75afb8ebcac664cc1459640999fd8d762363c4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f92f47785201d44cef91e2c4a9742fb503ce5316/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f92f47785201d44cef91e2c4a9742fb503ce5316/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f92f47785201d44cef91e2c4a9742fb503ce5316", "patch": "@@ -1,3 +1,10 @@\n+2021-08-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* libsupc++/compare (compare_three_way, strong_order)\n+\t(weak_order, partial_order, compare_strong_order_fallback)\n+\t(compare_weak_order_fallback, compare_partial_order_fallback):\n+\tMove nodiscard attributes to correct location.\n+\n 2021-08-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101782"}]}