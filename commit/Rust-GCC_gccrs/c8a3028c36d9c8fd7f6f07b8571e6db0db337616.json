{"sha": "c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhMzAyOGMzNmQ5YzhmZDdmNmYwN2I4NTcxZTZkYjBkYjMzNzYxNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:14:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-05-21T13:14:06Z"}, "message": "[multiple changes]\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_elab.adb: Minor reformatting.\n\t* s-taprop.ads: Minor comment fix.\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Remove call to\n\tKill_Elaboration_Checks.\n\t* errout.adb, erroutc.adb: Minor reformatting.\n\n2014-05-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_pakd.adb (Byte_Swap): Handle the case of a sub-byte\n\tcomponent. No byte swapping occurs, but this procedure also takes\n\tcare of appropriately justifying the argument.\n\n2014-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb: sem_ch6.adb (Analyze_Aspects_On_Body_Or_Stub):\n\tNew routine.\n\t(Analyze_Subprogram_Body_Helper): Move the\n\tanalysis of aspect specifications and the processing of the\n\tsubprogram body contract after inlining has taken place.\n\t(Diagnose_Misplaced_Aspect_Specifications): Removed.\n\n2014-05-21  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Build_Derived_Record_Type): Revert previous change.\n\n2014-05-21  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.ads, sem_eval.adb (Why_Not_Static): Messages are not\n\tcontinuations any more.\n\n2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb: New flag Needs_Initialized_Actual,\n\tpresent in formal_Private_Definitions and on private extension\n\tdeclarations of a formal derived type. Set when the use of the\n\tformal type in a generic suggests that the actual should be a\n\tfully initialized type.\n\t* sem_warn.adb (May_Need_Initialized_Actual): new subprogram\n\tto indicate that an entity of a generic type has default\n\tinitialization, and that the corresponing actual type in any\n\tsubsequent instantiation should be fully initialized.\n\t* sem_ch12.adb (Check_Initialized_Type): new subprogram,\n\tto emit a warning if the actual for a generic type on which\n\tNeeds_Initialized_Actual is set is not a fully initialized type.\n\nFrom-SVN: r210705", "tree": {"sha": "aba9b3d524f3a98dd1c9d5af5b483425554a6a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aba9b3d524f3a98dd1c9d5af5b483425554a6a99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/comments", "author": null, "committer": null, "parents": [{"sha": "23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e28b42173b30e3ebe2b8e5765b01dc7fd60da2"}], "stats": {"total": 845, "additions": 505, "deletions": 340}, "files": [{"sha": "f09c608ef4a9255bd09d3cd0589163c57df8a1f2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -1,3 +1,50 @@\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_elab.adb: Minor reformatting.\n+\t* s-taprop.ads: Minor comment fix.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Remove call to\n+\tKill_Elaboration_Checks.\n+\t* errout.adb, erroutc.adb: Minor reformatting.\n+\n+2014-05-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_pakd.adb (Byte_Swap): Handle the case of a sub-byte\n+\tcomponent. No byte swapping occurs, but this procedure also takes\n+\tcare of appropriately justifying the argument.\n+\n+2014-05-21  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb: sem_ch6.adb (Analyze_Aspects_On_Body_Or_Stub):\n+\tNew routine.\n+\t(Analyze_Subprogram_Body_Helper): Move the\n+\tanalysis of aspect specifications and the processing of the\n+\tsubprogram body contract after inlining has taken place.\n+\t(Diagnose_Misplaced_Aspect_Specifications): Removed.\n+\n+2014-05-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Record_Type): Revert previous change.\n+\n+2014-05-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.ads, sem_eval.adb (Why_Not_Static): Messages are not\n+\tcontinuations any more.\n+\n+2014-05-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb: New flag Needs_Initialized_Actual,\n+\tpresent in formal_Private_Definitions and on private extension\n+\tdeclarations of a formal derived type. Set when the use of the\n+\tformal type in a generic suggests that the actual should be a\n+\tfully initialized type.\n+\t* sem_warn.adb (May_Need_Initialized_Actual): new subprogram\n+\tto indicate that an entity of a generic type has default\n+\tinitialization, and that the corresponing actual type in any\n+\tsubsequent instantiation should be fully initialized.\n+\t* sem_ch12.adb (Check_Initialized_Type): new subprogram,\n+\tto emit a warning if the actual for a generic type on which\n+\tNeeds_Initialized_Actual is set is not a fully initialized type.\n+\n 2014-05-21  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_elab.adb, prj-dect.adb: Minor reformatting."}, {"sha": "37a1b64d68688edaf84219b3c88098e2a2f173f1", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -1010,14 +1010,11 @@ package body Errout is\n                exit when\n                  Errors.Table (Cur_Msg).Sfile < Errors.Table (Next_Msg).Sfile;\n \n-               if Errors.Table (Cur_Msg).Sfile =\n-                    Errors.Table (Next_Msg).Sfile\n+               if Errors.Table (Cur_Msg).Sfile = Errors.Table (Next_Msg).Sfile\n                then\n                   exit when Sptr < Errors.Table (Next_Msg).Sptr\n-                              or else\n-                                (Sptr = Errors.Table (Next_Msg).Sptr\n-                                   and then\n-                                 Optr < Errors.Table (Next_Msg).Optr);\n+                    or else (Sptr = Errors.Table (Next_Msg).Sptr\n+                              and then Optr < Errors.Table (Next_Msg).Optr);\n                end if;\n \n                Prev_Msg := Next_Msg;"}, {"sha": "4a107d1df10867ac174a3c387f4ccb13c5188179", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -113,13 +113,13 @@ package body Erroutc is\n       N1, N2 : Error_Msg_Id;\n \n       procedure Delete_Msg (Delete, Keep : Error_Msg_Id);\n-      --  Called to delete message Delete, keeping message Keep. Marks all\n-      --  messages of Delete with deleted flag set to True, and also makes sure\n-      --  that for the error messages that are retained the preferred message\n-      --  is the one retained (we prefer the shorter one in the case where one\n-      --  has an Instance tag). Note that we always know that Keep has at least\n-      --  as many continuations as Delete (since we always delete the shorter\n-      --  sequence).\n+      --  Called to delete message Delete, keeping message Keep. Marks msg\n+      --  Delete and all its continuations with deleted flag set to True.\n+      --  Also makes sure that for the error messages that are retained the\n+      --  preferred message is the one retained (we prefer the shorter one in\n+      --  the case where one has an Instance tag). Note that we always know\n+      --  that Keep has at least as many continuations as Delete (since we\n+      --  always delete the shorter sequence).\n \n       ----------------\n       -- Delete_Msg --"}, {"sha": "fcaba801d0d00ab2c63e33db4f594bb16b301db0", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -576,20 +576,26 @@ package body Exp_Pakd is\n       Shift   : Uint;\n \n    begin\n-      pragma Assert (T_Size > 8);\n+      if T_Size <= 8 then\n+         Swap_F := Empty;\n+         Swap_T := RTE (RE_Unsigned_8);\n \n-      if T_Size <= 16 then\n-         Swap_RE := RE_Bswap_16;\n+      else\n+         if T_Size <= 16 then\n+            Swap_RE := RE_Bswap_16;\n+\n+         elsif T_Size <= 32 then\n+            Swap_RE := RE_Bswap_32;\n+\n+         else pragma Assert (T_Size <= 64);\n+            Swap_RE := RE_Bswap_64;\n+         end if;\n \n-      elsif T_Size <= 32 then\n-         Swap_RE := RE_Bswap_32;\n+         Swap_F := RTE (Swap_RE);\n+         Swap_T := Etype (Swap_F);\n \n-      else pragma Assert (T_Size <= 64);\n-         Swap_RE := RE_Bswap_64;\n       end if;\n \n-      Swap_F := RTE (Swap_RE);\n-      Swap_T := Etype (Swap_F);\n       Shift := Esize (Swap_T) - T_Size;\n \n       Arg := RJ_Unchecked_Convert_To (Swap_T, N);\n@@ -601,10 +607,14 @@ package body Exp_Pakd is\n              Right_Opnd => Make_Integer_Literal (Loc, Shift));\n       end if;\n \n-      Swapped :=\n-        Make_Function_Call (Loc,\n-          Name                   => New_Occurrence_Of (Swap_F, Loc),\n-          Parameter_Associations => New_List (Arg));\n+      if Present (Swap_F) then\n+         Swapped :=\n+           Make_Function_Call (Loc,\n+             Name                   => New_Occurrence_Of (Swap_F, Loc),\n+             Parameter_Associations => New_List (Arg));\n+      else\n+         Swapped := Arg;\n+      end if;\n \n       if Right_Justify and then Shift > Uint_0 then\n          Swapped :="}, {"sha": "efe9dd265a16c3931a7579de3afdb9aab27d9dc1", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -324,15 +324,15 @@ package System.Task_Primitives.Operations is\n       Prio : System.Any_Priority;\n       Loss_Of_Inheritance : Boolean := False);\n    pragma Inline (Set_Priority);\n-   --  Set the priority of the task specified by T to T.Current_Priority. The\n-   --  priority set is what would correspond to the Ada concept of \"base\n-   --  priority\" in the terms of the lower layer system, but the operation may\n-   --  be used by the upper layer to implement changes in \"active priority\"\n-   --  that are not due to lock effects. The effect should be consistent with\n-   --  the Ada Reference Manual. In particular, when a task lowers its\n-   --  priority due to the loss of inherited priority, it goes at the head of\n-   --  the queue for its new priority (RM D.2.2 par 9). Loss_Of_Inheritance\n-   --  helps the underlying implementation to do it right when the OS doesn't.\n+   --  Set the priority of the task specified by T to Prio. The priority set\n+   --  is what would correspond to the Ada concept of \"base priority\" in the\n+   --  terms of the lower layer system, but the operation may be used by the\n+   --  upper layer to implement changes in \"active priority\" that are not due\n+   --  to lock effects. The effect should be consistent with the Ada Reference\n+   --  Manual. In particular, when a task lowers its priority due to the loss\n+   --  of inherited priority, it goes at the head of the queue for its new\n+   --  priority (RM D.2.2 par 9). Loss_Of_Inheritance helps the underlying\n+   --  implementation to do it right when the OS doesn't.\n \n    function Get_Priority (T : ST.Task_Id) return System.Any_Priority;\n    pragma Inline (Get_Priority);"}, {"sha": "057f088cd70461f65838dac5419ab7539024b93b", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -9941,6 +9941,58 @@ package body Sem_Ch12 is\n       --  List of primitives made temporarily visible in the instantiation\n       --  to match the visibility of the formal type\n \n+      procedure Check_Initialized_Types;\n+      --  In a generic package body, an entity of a generic private type may\n+      --  appear uninitialized. This is suspicious, unless the actual is a\n+      --  fully initialized type.\n+\n+      procedure Check_Initialized_Types is\n+         Decl   : Node_Id;\n+         Formal : Entity_Id;\n+         Actual : Entity_Id;\n+\n+      begin\n+         Decl := First (Generic_Formal_Declarations (Gen_Decl));\n+         while Present (Decl) loop\n+            if (Nkind (Decl) = N_Private_Extension_Declaration\n+                 and then Needs_Initialized_Actual (Decl))\n+\n+              or else (Nkind (Decl) = N_Formal_Type_Declaration\n+                  and then\n+                    Nkind (Formal_Type_Definition (Decl)) =\n+                      N_Formal_Private_Type_Definition\n+                  and then Needs_Initialized_Actual\n+                     (Formal_Type_Definition (Decl)))\n+            then\n+               Formal := Defining_Identifier (Decl);\n+               Actual := First_Entity (Act_Decl_Id);\n+\n+               --  For each formal there is a subtype declaration that renames\n+               --  the actual and has the same name as the formal.\n+\n+               while Present (Actual) loop\n+                  exit when Ekind (Actual) = E_Package\n+                    and then Present (Renamed_Object (Actual));\n+\n+                  if Chars (Actual) = Chars (Formal)\n+                    and then not Is_Scalar_Type (Actual)\n+                    and then not Is_Fully_Initialized_Type (Actual)\n+                    and then Warn_On_No_Value_Assigned\n+                  then\n+                     Error_Msg_NE\n+                       (\"from its use in generic unit, actual for&\"\n+                          & \" should be fully initialized type?\",\n+                          Actual, Formal);\n+                     exit;\n+                  end if;\n+\n+                  Next_Entity (Actual);\n+               end loop;\n+            end if;\n+\n+            Next (Decl);\n+         end loop;\n+      end Check_Initialized_Types;\n    begin\n       Gen_Body_Id := Corresponding_Body (Gen_Decl);\n \n@@ -10013,6 +10065,7 @@ package body Sem_Ch12 is\n \n          Set_Corresponding_Spec (Act_Body, Act_Decl_Id);\n          Check_Generic_Actuals (Act_Decl_Id, False);\n+         Check_Initialized_Types;\n \n          --  Install primitives hidden at the point of the instantiation but\n          --  visible when processing the generic formals"}, {"sha": "5db4bb76313535f3fc1991253ea41ccf0a8de954", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 34, "deletions": 76, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -919,19 +919,16 @@ package body Sem_Ch3 is\n       --  include an expression that is an allocator, whose expansion needs the\n       --  proper Master for the created tasks.\n \n-      if Nkind (Related_Nod) = N_Object_Declaration\n-        and then Expander_Active\n+      if Nkind (Related_Nod) = N_Object_Declaration and then Expander_Active\n       then\n-         if Is_Interface (Desig_Type)\n-           and then Is_Limited_Record (Desig_Type)\n+         if Is_Interface (Desig_Type) and then Is_Limited_Record (Desig_Type)\n          then\n             Build_Class_Wide_Master (Anon_Type);\n \n          --  Similarly, if the type is an anonymous access that designates\n          --  tasks, create a master entity for it in the current context.\n \n-         elsif Has_Task (Desig_Type)\n-           and then Comes_From_Source (Related_Nod)\n+         elsif Has_Task (Desig_Type) and then Comes_From_Source (Related_Nod)\n          then\n             Build_Master_Entity (Defining_Identifier (Related_Nod));\n             Build_Master_Renaming (Anon_Type);\n@@ -1205,8 +1202,7 @@ package body Sem_Ch3 is\n             --  use previous subprogram type as the designated type, and then\n             --  remove scope added above.\n \n-            if ASIS_Mode\n-              and then Present (Scope (Defining_Identifier (F)))\n+            if ASIS_Mode and then Present (Scope (Defining_Identifier (F)))\n             then\n                Set_Etype                    (T_Name, T_Name);\n                Init_Size_Align              (T_Name);\n@@ -1355,8 +1351,7 @@ package body Sem_Ch3 is\n       --  its own context, allowing the following circularity that cannot be\n       --  detected earlier\n \n-      elsif Is_Class_Wide_Type (Full_Desig)\n-        and then Etype (Full_Desig) = T\n+      elsif Is_Class_Wide_Type (Full_Desig) and then Etype (Full_Desig) = T\n       then\n          Error_Msg_N\n            (\"access type cannot designate its own classwide type\", S);\n@@ -1755,9 +1750,8 @@ package body Sem_Ch3 is\n \n          case Nkind (Constr) is\n             when N_Attribute_Reference =>\n-               return\n-                 Attribute_Name (Constr) = Name_Access\n-                   and then Prefix (Constr) = Scope (Entity (Prefix (Constr)));\n+               return Attribute_Name (Constr) = Name_Access\n+                 and then Prefix (Constr) = Scope (Entity (Prefix (Constr)));\n \n             when N_Discriminant_Association =>\n                return Denotes_Discriminant (Expression (Constr));\n@@ -2319,9 +2313,7 @@ package body Sem_Ch3 is\n             --  ??? a cleaner approach may be possible and/or this solution\n             --  could be extended to general-purpose late primitives, TBD.\n \n-            if not ASIS_Mode\n-              and then not Body_Seen\n-              and then not Is_Body (Decl)\n+            if not ASIS_Mode and then not Body_Seen and then not Is_Body (Decl)\n             then\n                Body_Seen := True;\n \n@@ -2472,8 +2464,7 @@ package body Sem_Ch3 is\n       --  imported through a LIMITED WITH clause, it appears as incomplete\n       --  but has no full view.\n \n-      if Ekind (Prev) = E_Incomplete_Type\n-        and then Present (Full_View (Prev))\n+      if Ekind (Prev) = E_Incomplete_Type and then Present (Full_View (Prev))\n       then\n          T := Full_View (Prev);\n       else\n@@ -3196,7 +3187,6 @@ package body Sem_Ch3 is\n \n          if Present (Prev_Entity)\n            and then\n-\n              --  If the homograph is an implicit subprogram, it is overridden\n              --  by the current declaration.\n \n@@ -3274,12 +3264,11 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute and carry\n       --  out some static checks\n \n-      if Ada_Version >= Ada_2005\n-        and then Can_Never_Be_Null (T)\n-      then\n+      if Ada_Version >= Ada_2005 and then Can_Never_Be_Null (T) then\n+\n          --  In case of aggregates we must also take care of the correct\n          --  initialization of nested aggregates bug this is done at the\n-         --  point of the analysis of the aggregate (see sem_aggr.adb)\n+         --  point of the analysis of the aggregate (see sem_aggr.adb).\n \n          if Present (Expression (N))\n            and then Nkind (Expression (N)) = N_Aggregate\n@@ -3523,9 +3512,7 @@ package body Sem_Ch3 is\n                Set_Current_Value (Id, E);\n             end if;\n \n-         elsif Is_Scalar_Type (T)\n-           and then Is_OK_Static_Expression (E)\n-         then\n+         elsif Is_Scalar_Type (T) and then Is_OK_Static_Expression (E) then\n             Set_Is_Known_Valid (Id);\n          end if;\n \n@@ -3534,9 +3521,7 @@ package body Sem_Ch3 is\n          if Is_Access_Type (T) then\n             if Known_Non_Null (E) then\n                Set_Is_Known_Non_Null (Id, True);\n-            elsif Known_Null (E)\n-              and then not Can_Never_Be_Null (Id)\n-            then\n+            elsif Known_Null (E) and then not Can_Never_Be_Null (Id) then\n                Set_Is_Known_Null (Id, True);\n             end if;\n          end if;\n@@ -3973,9 +3958,7 @@ package body Sem_Ch3 is\n          declare\n             Val : constant Node_Id := Constant_Value (Entity (E));\n          begin\n-            if Present (Val)\n-              and then Nkind (Val) = N_String_Literal\n-            then\n+            if Present (Val) and then Nkind (Val) = N_String_Literal then\n                Rewrite (E, New_Copy (Val));\n             end if;\n          end;\n@@ -4027,8 +4010,7 @@ package body Sem_Ch3 is\n \n       --  Deal with setting In_Private_Part flag if in private part\n \n-      if Ekind (Scope (Id)) = E_Package\n-        and then In_Private_Part (Scope (Id))\n+      if Ekind (Scope (Id)) = E_Package and then In_Private_Part (Scope (Id))\n       then\n          Set_In_Private_Part (Id);\n       end if;\n@@ -4125,8 +4107,8 @@ package body Sem_Ch3 is\n \n             pragma Assert (Prev = T\n               or else (Ekind (Prev) = E_Incomplete_Type\n-                         and then Present (Full_View (Prev))\n-                         and then Full_View (Prev) = T));\n+                        and then Present (Full_View (Prev))\n+                        and then Full_View (Prev) = T));\n          end;\n       end if;\n \n@@ -4211,9 +4193,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-443): Synchronized private extension or a rewritten\n       --  synchronized formal derived type.\n \n-      if Ada_Version >= Ada_2005\n-        and then Synchronized_Present (N)\n-      then\n+      if Ada_Version >= Ada_2005 and then Synchronized_Present (N) then\n          Set_Is_Limited_Record (T);\n \n          --  Formal derived type case\n@@ -4224,9 +4204,9 @@ package body Sem_Ch3 is\n             --  interface.\n \n             if (not Is_Tagged_Type (Parent_Type)\n-                  or else not Is_Limited_Type (Parent_Type))\n+                 or else not Is_Limited_Type (Parent_Type))\n               and then\n-               (not Is_Interface (Parent_Type)\n+                (not Is_Interface (Parent_Type)\n                   or else not Is_Synchronized_Interface (Parent_Type))\n             then\n                Error_Msg_NE (\"parent type of & must be tagged limited \" &\n@@ -4264,8 +4244,7 @@ package body Sem_Ch3 is\n          else\n             if not Is_Interface (Parent_Type)\n               or else (not Is_Limited_Interface (Parent_Type)\n-                         and then\n-                       not Is_Synchronized_Interface (Parent_Type))\n+                        and then not Is_Synchronized_Interface (Parent_Type))\n             then\n                Error_Msg_NE\n                  (\"parent type of & must be limited interface\", N, T);\n@@ -4459,9 +4438,7 @@ package body Sem_Ch3 is\n          --  Subtype of unconstrained array without constraint is not allowed\n          --  in SPARK.\n \n-         if Is_Array_Type (T)\n-           and then not Is_Constrained (T)\n-         then\n+         if Is_Array_Type (T) and then not Is_Constrained (T) then\n             Check_SPARK_Restriction\n               (\"subtype of unconstrained array must have constraint\", N);\n          end if;\n@@ -4748,11 +4725,11 @@ package body Sem_Ch3 is\n \n       if Present (Generic_Parent_Type (N))\n         and then\n-          (Nkind\n-            (Parent (Generic_Parent_Type (N))) /= N_Formal_Type_Declaration\n+          (Nkind (Parent (Generic_Parent_Type (N))) /=\n+                                              N_Formal_Type_Declaration\n             or else Nkind\n-              (Formal_Type_Definition (Parent (Generic_Parent_Type (N))))\n-                /= N_Formal_Private_Type_Definition)\n+              (Formal_Type_Definition (Parent (Generic_Parent_Type (N)))) /=\n+                                              N_Formal_Private_Type_Definition)\n       then\n          if Is_Tagged_Type (Id) then\n \n@@ -4773,9 +4750,7 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      if Is_Private_Type (T)\n-        and then Present (Full_View (T))\n-      then\n+      if Is_Private_Type (T) and then Present (Full_View (T)) then\n          Conditional_Delay (Id, Full_View (T));\n \n       --  The subtypes of components or subcomponents of protected types\n@@ -4807,8 +4782,7 @@ package body Sem_Ch3 is\n \n          --  In the array case, check compatibility for each index\n \n-         elsif Is_Array_Type (Etype (Id))\n-           and then Present (First_Index (Id))\n+         elsif Is_Array_Type (Etype (Id)) and then Present (First_Index (Id))\n          then\n             --  This really should be a subprogram that finds the indications\n             --  to check???\n@@ -4823,7 +4797,7 @@ package body Sem_Ch3 is\n             begin\n                while Present (Subt_Index) loop\n                   if ((Nkind (Subt_Index) = N_Identifier\n-                         and then Ekind (Entity (Subt_Index)) in Scalar_Kind)\n+                        and then Ekind (Entity (Subt_Index)) in Scalar_Kind)\n                        or else Nkind (Subt_Index) = N_Subtype_Indication)\n                     and then\n                       Nkind (Scalar_Range (Etype (Subt_Index))) = N_Range\n@@ -5230,9 +5204,7 @@ package body Sem_Ch3 is\n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute to the\n       --  array type to ensure that objects of this type are initialized.\n \n-      if Ada_Version >= Ada_2005\n-        and then Can_Never_Be_Null (Element_Type)\n-      then\n+      if Ada_Version >= Ada_2005 and then Can_Never_Be_Null (Element_Type) then\n          Set_Can_Never_Be_Null (T);\n \n          if Null_Exclusion_Present (Component_Definition (Def))\n@@ -5292,9 +5264,7 @@ package body Sem_Ch3 is\n       --  types created for packed entities do not need such, they are\n       --  compatible with the user-defined type.\n \n-      if Number_Dimensions (T) = 1\n-         and then not Is_Packed_Array_Type (T)\n-      then\n+      if Number_Dimensions (T) = 1 and then not Is_Packed_Array_Type (T) then\n          New_Concatenation_Op (T);\n       end if;\n \n@@ -5587,6 +5557,8 @@ package body Sem_Ch3 is\n       if Null_Exclusion_Present (Type_Definition (N)) then\n          Set_Can_Never_Be_Null (Derived_Type);\n \n+         --  What is with the \"AND THEN FALSE\" here ???\n+\n          if Can_Never_Be_Null (Parent_Type)\n            and then False\n          then\n@@ -7453,20 +7425,6 @@ package body Sem_Ch3 is\n         and then Has_Discriminants (Parent_Type)\n       then\n          Parent_Base := Base_Type (Full_View (Parent_Type));\n-\n-      --  Handle a derived type which is the full view of a private type not\n-      --  defined in a generic unit which is derived from a private type with\n-      --  discriminants whose full view is a non-tagged record type.\n-\n-      elsif not Inside_A_Generic\n-        and then Ekind (Parent_Type) = E_Private_Type\n-        and then Has_Discriminants (Parent_Type)\n-        and then Present (Full_View (Parent_Type))\n-        and then Is_Record_Type (Full_View (Parent_Type))\n-        and then not Is_Tagged_Type (Full_View (Parent_Type))\n-        and then Has_Private_Declaration (Derived_Type)\n-      then\n-         Parent_Base := Base_Type (Full_View (Parent_Type));\n       else\n          Parent_Base := Base_Type (Parent_Type);\n       end if;"}, {"sha": "5305b31d5feeb6e302b52a9153b9dd00f92d6445", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 152, "deletions": 123, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -2147,6 +2147,10 @@ package body Sem_Ch6 is\n       --  chained beyond that point. It is initialized to Empty to deal with\n       --  the case where there is no separate spec.\n \n+      procedure Analyze_Aspects_On_Body_Or_Stub;\n+      --  Analyze the aspect specifications of a subprogram body [stub]. It is\n+      --  assumed that N has aspects.\n+\n       procedure Check_Anonymous_Return;\n       --  Ada 2005: if a function returns an access type that denotes a task,\n       --  or a type that contains tasks, we must create a master entity for\n@@ -2169,11 +2173,6 @@ package body Sem_Ch6 is\n       --  verify that a function ends with a RETURN and that a procedure does\n       --  not contain any RETURN.\n \n-      procedure Diagnose_Misplaced_Aspect_Specifications;\n-      --  It is known that subprogram body N has aspects, but they are not\n-      --  properly placed. Provide specific error messages depending on the\n-      --  aspects involved.\n-\n       function Disambiguate_Spec return Entity_Id;\n       --  When a primitive is declared between the private view and the full\n       --  view of a concurrent type which implements an interface, a special\n@@ -2203,6 +2202,127 @@ package body Sem_Ch6 is\n       --  indicator, check that it is consistent with the known status of the\n       --  entity.\n \n+      -------------------------------------\n+      -- Analyze_Aspects_On_Body_Or_Stub --\n+      -------------------------------------\n+\n+      procedure Analyze_Aspects_On_Body_Or_Stub is\n+         procedure Diagnose_Misplaced_Aspects;\n+         --  Subprogram body [stub] N has aspects, but they are not properly\n+         --  placed. Provide precise diagnostics depending on the aspects\n+         --  involved.\n+\n+         --------------------------------\n+         -- Diagnose_Misplaced_Aspects --\n+         --------------------------------\n+\n+         procedure Diagnose_Misplaced_Aspects is\n+            Asp     : Node_Id;\n+            Asp_Nam : Name_Id;\n+            Asp_Id  : Aspect_Id;\n+            --  The current aspect along with its name and id\n+\n+            procedure SPARK_Aspect_Error (Ref_Nam : Name_Id);\n+            --  Emit an error message concerning SPARK aspect Asp. Ref_Nam is\n+            --  the name of the refined version of the aspect.\n+\n+            ------------------------\n+            -- SPARK_Aspect_Error --\n+            ------------------------\n+\n+            procedure SPARK_Aspect_Error (Ref_Nam : Name_Id) is\n+            begin\n+               --  The corresponding spec already contains the aspect in\n+               --  question and the one appearing on the body must be the\n+               --  refined form:\n+\n+               --    procedure P with Global ...;\n+               --    procedure P with Global ... is ... end P;\n+               --                     ^\n+               --                     Refined_Global\n+\n+               if Has_Aspect (Spec_Id, Asp_Id) then\n+                  Error_Msg_Name_1 := Asp_Nam;\n+\n+                  --  Subunits cannot carry aspects that apply to a subprogram\n+                  --  declaration.\n+\n+                  if Nkind (Parent (N)) = N_Subunit then\n+                     Error_Msg_N (\"aspect % cannot apply to a subunit\", Asp);\n+\n+                  else\n+                     Error_Msg_Name_2 := Ref_Nam;\n+                     Error_Msg_N (\"aspect % should be %\", Asp);\n+                  end if;\n+\n+               --  Otherwise the aspect must appear in the spec, not in the\n+               --  body:\n+\n+               --    procedure P;\n+               --    procedure P with Global ... is ... end P;\n+\n+               else\n+                  Error_Msg_N\n+                    (\"aspect specification must appear in subprogram \"\n+                     & \"declaration\", Asp);\n+               end if;\n+            end SPARK_Aspect_Error;\n+\n+         --  Start of processing for Diagnose_Misplaced_Aspects\n+\n+         begin\n+            --  Iterate over the aspect specifications and emit specific errors\n+            --  where applicable.\n+\n+            Asp := First (Aspect_Specifications (N));\n+            while Present (Asp) loop\n+               Asp_Nam := Chars (Identifier (Asp));\n+               Asp_Id  := Get_Aspect_Id (Asp_Nam);\n+\n+               --  Do not emit errors on aspects that can appear on a\n+               --  subprogram body. This scenario occurs when the aspect\n+               --  specification list contains both misplaced and properly\n+               --  placed aspects.\n+\n+               if Aspect_On_Body_Or_Stub_OK (Asp_Id) then\n+                  null;\n+\n+               --  Special diagnostics for SPARK aspects\n+\n+               elsif Asp_Nam = Name_Depends then\n+                  SPARK_Aspect_Error (Name_Refined_Depends);\n+\n+               elsif Asp_Nam = Name_Global then\n+                  SPARK_Aspect_Error (Name_Refined_Global);\n+\n+               elsif Asp_Nam = Name_Post then\n+                  SPARK_Aspect_Error (Name_Refined_Post);\n+\n+               else\n+                  Error_Msg_N\n+                    (\"aspect specification must appear in subprogram \"\n+                     & \"declaration\", Asp);\n+               end if;\n+\n+               Next (Asp);\n+            end loop;\n+         end Diagnose_Misplaced_Aspects;\n+\n+      --  Start of processing for Analyze_Aspects_On_Body_Or_Stub\n+\n+      begin\n+         --  Language-defined aspects cannot be associated with a subprogram\n+         --  body [stub] if the subprogram has a spec. Certain implementation\n+         --  defined aspects are allowed to break this rule (for list, see\n+         --  table Aspect_On_Body_Or_Stub_OK).\n+\n+         if Present (Spec_Id) and then not Aspects_On_Body_Or_Stub_OK (N) then\n+            Diagnose_Misplaced_Aspects;\n+         else\n+            Analyze_Aspect_Specifications (N, Body_Id);\n+         end if;\n+      end Analyze_Aspects_On_Body_Or_Stub;\n+\n       ----------------------------\n       -- Check_Anonymous_Return --\n       ----------------------------\n@@ -2455,99 +2575,6 @@ package body Sem_Ch6 is\n          end if;\n       end Check_Missing_Return;\n \n-      ----------------------------------------------\n-      -- Diagnose_Misplaced_Aspect_Specifications --\n-      ----------------------------------------------\n-\n-      procedure Diagnose_Misplaced_Aspect_Specifications is\n-         Asp     : Node_Id;\n-         Asp_Nam : Name_Id;\n-         Asp_Id  : Aspect_Id;\n-         --  The current aspect along with its name and id\n-\n-         procedure SPARK_Aspect_Error (Ref_Nam : Name_Id);\n-         --  Emit an error message concerning SPARK aspect Asp. Ref_Nam is the\n-         --  name of the refined version of the aspect.\n-\n-         ------------------------\n-         -- SPARK_Aspect_Error --\n-         ------------------------\n-\n-         procedure SPARK_Aspect_Error (Ref_Nam : Name_Id) is\n-         begin\n-            --  The corresponding spec already contains the aspect in question\n-            --  and the one appearing on the body must be the refined form:\n-\n-            --    procedure P with Global ...;\n-            --    procedure P with Global ... is ... end P;\n-            --                     ^\n-            --                     Refined_Global\n-\n-            if Has_Aspect (Spec_Id, Asp_Id) then\n-               Error_Msg_Name_1 := Asp_Nam;\n-\n-               --  Subunits cannot carry aspects that apply to a subprogram\n-               --  declaration.\n-\n-               if Nkind (Parent (N)) = N_Subunit then\n-                  Error_Msg_N (\"aspect % cannot apply to a subunit\", Asp);\n-\n-               else\n-                  Error_Msg_Name_2 := Ref_Nam;\n-                  Error_Msg_N (\"aspect % should be %\", Asp);\n-               end if;\n-\n-            --  Otherwise the aspect must appear in the spec, not in the body:\n-\n-            --    procedure P;\n-            --    procedure P with Global ... is ... end P;\n-\n-            else\n-               Error_Msg_N\n-                 (\"aspect specification must appear in subprogram declaration\",\n-                  Asp);\n-            end if;\n-         end SPARK_Aspect_Error;\n-\n-      --  Start of processing for Diagnose_Misplaced_Aspect_Specifications\n-\n-      begin\n-         --  Iterate over the aspect specifications and emit specific errors\n-         --  where applicable.\n-\n-         Asp := First (Aspect_Specifications (N));\n-         while Present (Asp) loop\n-            Asp_Nam := Chars (Identifier (Asp));\n-            Asp_Id  := Get_Aspect_Id (Asp_Nam);\n-\n-            --  Do not emit errors on aspects that can appear on a subprogram\n-            --  body. This scenario occurs when the aspect specification list\n-            --  contains both misplaced and properly placed aspects.\n-\n-            if Aspect_On_Body_Or_Stub_OK (Asp_Id) then\n-               null;\n-\n-            --  Special diagnostics for SPARK aspects\n-\n-            elsif Asp_Nam = Name_Depends then\n-               SPARK_Aspect_Error (Name_Refined_Depends);\n-\n-            elsif Asp_Nam = Name_Global then\n-               SPARK_Aspect_Error (Name_Refined_Global);\n-\n-            elsif Asp_Nam = Name_Post then\n-               SPARK_Aspect_Error (Name_Refined_Post);\n-\n-            else\n-               Error_Msg_N\n-                 (\"aspect specification must appear in subprogram declaration\",\n-                  Asp);\n-            end if;\n-\n-            Next (Asp);\n-         end loop;\n-      end Diagnose_Misplaced_Aspect_Specifications;\n-\n       -----------------------\n       -- Disambiguate_Spec --\n       -----------------------\n@@ -2948,21 +2975,6 @@ package body Sem_Ch6 is\n          end if;\n       end if;\n \n-      --  Language-defined aspects cannot appear on a subprogram body [stub] if\n-      --  the subprogram has a spec. Certain implementation-defined aspects are\n-      --  allowed to break this rule (see table Aspect_On_Body_Or_Stub_OK).\n-\n-      if Has_Aspects (N) then\n-         if Present (Spec_Id)\n-           and then not Aspects_On_Body_Or_Stub_OK (N)\n-         then\n-            Diagnose_Misplaced_Aspect_Specifications;\n-\n-         else\n-            Analyze_Aspect_Specifications (N, Body_Id);\n-         end if;\n-      end if;\n-\n       --  Previously we scanned the body to look for nested subprograms, and\n       --  rejected an inline directive if nested subprograms were present,\n       --  because the back-end would generate conflicting symbols for the\n@@ -3299,6 +3311,17 @@ package body Sem_Ch6 is\n       Check_Eliminated (Body_Id);\n \n       if Nkind (N) = N_Subprogram_Body_Stub then\n+\n+         --  Analyze any aspect specifications that appear on the subprogram\n+         --  body stub.\n+\n+         if Has_Aspects (N) then\n+            Analyze_Aspects_On_Body_Or_Stub;\n+         end if;\n+\n+         --  Stop the analysis now as the stub cannot be inlined, plus it does\n+         --  not have declarative or statement lists.\n+\n          return;\n       end if;\n \n@@ -3372,16 +3395,6 @@ package body Sem_Ch6 is\n       HSS := Handled_Statement_Sequence (N);\n       Set_Actual_Subtypes (N, Current_Scope);\n \n-      --  Deal with [refined] preconditions, postconditions, Contract_Cases,\n-      --  invariants and predicates associated with the body and its spec.\n-      --  Note that this is not pure expansion as Expand_Subprogram_Contract\n-      --  prepares the contract assertions for generic subprograms or for ASIS.\n-      --  Do not generate contract checks in SPARK mode.\n-\n-      if not GNATprove_Mode then\n-         Expand_Subprogram_Contract (N, Spec_Id, Body_Id);\n-      end if;\n-\n       --  Add a declaration for the Protection object, renaming declarations\n       --  for discriminals and privals and finally a declaration for the entry\n       --  family index (if applicable). This form of early expansion is done\n@@ -3409,6 +3422,22 @@ package body Sem_Ch6 is\n          Exchange_Limited_Views (Spec_Id);\n       end if;\n \n+      --  Analyze any aspect specifications that appear on the subprogram body\n+\n+      if Has_Aspects (N) then\n+         Analyze_Aspects_On_Body_Or_Stub;\n+      end if;\n+\n+      --  Deal with [refined] preconditions, postconditions, Contract_Cases,\n+      --  invariants and predicates associated with the body and its spec.\n+      --  Note that this is not pure expansion as Expand_Subprogram_Contract\n+      --  prepares the contract assertions for generic subprograms or for ASIS.\n+      --  Do not generate contract checks in SPARK mode.\n+\n+      if not GNATprove_Mode then\n+         Expand_Subprogram_Contract (N, Spec_Id, Body_Id);\n+      end if;\n+\n       --  Analyze the declarations (this call will analyze the precondition\n       --  Check pragmas we prepended to the list, as well as the declaration\n       --  of the _Postconditions procedure)."}, {"sha": "4c5147c9a7609a239f97dabeecfe627d988dae0c", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -2505,12 +2505,18 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n+      --  At this point, we used to have the following, but we removed it\n+      --  because it was certainly wrong for generic formal parameters in\n+      --  at least some cases, causing elaboration checks to be skipped.\n+      --  Possibly it is helpful in some other cases, but it caused no\n+      --  regressions to remove it completely.\n+\n       --  There is no need for elaboration checks on the new entity, which may\n       --  be called before the next freezing point where the body will appear.\n       --  Elaboration checks refer to the real entity, not the one created by\n       --  the renaming declaration.\n \n-      Set_Kill_Elaboration_Checks (New_S, True);\n+      --  Set_Kill_Elaboration_Checks (New_S, True);\n \n       if Etype (Nam) = Any_Type then\n          Set_Has_Completion (New_S);"}, {"sha": "fa39312a8ef38a4bf66b32522617940a2095fae9", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 42, "deletions": 65, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -578,16 +578,15 @@ package body Sem_Elab is\n       if Nkind (Decl) = N_Subprogram_Body then\n          Body_Acts_As_Spec := True;\n \n-      elsif Nkind (Decl) = N_Subprogram_Declaration\n-        or else Nkind (Decl) = N_Subprogram_Body_Stub\n+      elsif Nkind_In (Decl, N_Subprogram_Declaration, N_Subprogram_Body_Stub)\n         or else Inst_Case\n       then\n          Body_Acts_As_Spec := False;\n \n-      --  If we have none of an instantiation, subprogram body or\n-      --  subprogram declaration, then it is not a case that we want\n-      --  to check. (One case is a call to a generic formal subprogram,\n-      --  where we do not want the check in the template).\n+      --  If we have none of an instantiation, subprogram body or subprogram\n+      --  declaration, then it is not a case that we want to check. (One case\n+      --  is a call to a generic formal subprogram, where we do not want the\n+      --  check in the template).\n \n       else\n          return;\n@@ -605,7 +604,7 @@ package body Sem_Elab is\n \n          exit when Is_Compilation_Unit (E_Scope)\n            and then (Is_Child_Unit (E_Scope)\n-                       or else Scope (E_Scope) = Standard_Standard);\n+                      or else Scope (E_Scope) = Standard_Standard);\n \n          --  If we did not find a compilation unit, other than standard,\n          --  then nothing to check (happens in some instantiation cases)\n@@ -633,17 +632,15 @@ package body Sem_Elab is\n       --  However, this assumption is only valid if we are in static mode.\n \n       if not Dynamic_Elaboration_Checks\n-        and then Instantiation_Depth (Sloc (Ent)) >\n-                 Instantiation_Depth (Sloc (N))\n+        and then\n+          Instantiation_Depth (Sloc (Ent)) > Instantiation_Depth (Sloc (N))\n       then\n          return;\n       end if;\n \n       --  Do not give a warning for a package with no body\n \n-      if Ekind (Ent) = E_Generic_Package\n-        and then not Has_Generic_Body (N)\n-      then\n+      if Ekind (Ent) = E_Generic_Package and then not Has_Generic_Body (N) then\n          return;\n       end if;\n \n@@ -738,7 +735,7 @@ package body Sem_Elab is\n          --  the sgi build and storage errors. To be resolved later ???\n \n          if (Callee_Unit_Internal and Caller_Unit_Internal)\n-            and then not Debug_Flag_EE\n+           and then not Debug_Flag_EE\n          then\n             return;\n          end if;\n@@ -776,7 +773,14 @@ package body Sem_Elab is\n          if Unit_Caller /= No_Unit\n            and then Unit_Callee /= Unit_Caller\n            and then not Dynamic_Elaboration_Checks\n+\n+            --  This is an attempt to solve the problem of mishandling of\n+            --  generic formal parameters, but it does not work right yet ???\n+\n+            --  and then not Used_As_Generic_Actual (Ent)\n          then\n+            --  It is here that things go wrong for calling a generic formal???\n+\n             E_Scope := Spec_Entity (Cunit_Entity (Unit_Caller));\n \n             --  If we don't get a spec entity, just ignore call. Not quite\n@@ -802,9 +806,7 @@ package body Sem_Elab is\n             --  Loop to carefully follow renamings and derivations one step\n             --  outside the current unit, but not further.\n \n-            if not Inst_Case\n-              and then Present (Alias (Ent))\n-            then\n+            if not Inst_Case and then Present (Alias (Ent)) then\n                E_Scope := Alias (Ent);\n             else\n                E_Scope := Ent;\n@@ -1182,7 +1184,7 @@ package body Sem_Elab is\n       --  For an entry call, check relevant restriction\n \n       if Nkind (N) = N_Entry_Call_Statement\n-         and then not In_Subprogram_Or_Concurrent_Unit\n+        and then not In_Subprogram_Or_Concurrent_Unit\n       then\n          Check_Restriction (No_Entry_Calls_In_Elaboration_Code, N);\n \n@@ -1339,9 +1341,8 @@ package body Sem_Elab is\n                   --  Filter out case of default expressions, where we do not\n                   --  do the check at this stage.\n \n-                  if Nkind (P) = N_Parameter_Specification\n-                       or else\n-                     Nkind (P) = N_Component_Declaration\n+                  if Nkind_In (P, N_Parameter_Specification,\n+                                  N_Component_Declaration)\n                   then\n                      return;\n                   end if;\n@@ -1352,13 +1353,10 @@ package body Sem_Elab is\n                   if Nkind (P) = N_Protected_Body then\n                      return;\n \n-                  elsif Nkind (P) = N_Subprogram_Body\n-                       or else\n-                     Nkind (P) = N_Task_Body\n-                       or else\n-                     Nkind (P) = N_Block_Statement\n-                       or else\n-                     Nkind (P) = N_Entry_Body\n+                  elsif Nkind_In (P, N_Subprogram_Body,\n+                                     N_Task_Body,\n+                                     N_Block_Statement,\n+                                     N_Entry_Body)\n                   then\n                      if L = Declarations (P) then\n                         exit;\n@@ -1499,9 +1497,7 @@ package body Sem_Elab is\n       --  treat the current node as a call to each of these functions, to check\n       --  their elaboration impact.\n \n-      if Is_Init_Proc (Ent)\n-        and then From_Elab_Code\n-      then\n+      if Is_Init_Proc (Ent) and then From_Elab_Code then\n          Process_Init_Proc : declare\n             Unit_Decl : constant Node_Id := Unit_Declaration_Node (Ent);\n \n@@ -1713,7 +1709,7 @@ package body Sem_Elab is\n          begin\n             if Nkind (Decl) = N_Object_Declaration\n               and then (Present (Expression (Decl))\n-                          or else No_Initialization (Decl))\n+                         or else No_Initialization (Decl))\n             then\n                return;\n             end if;\n@@ -1842,9 +1838,7 @@ package body Sem_Elab is\n \n       C_Scope := Current_Scope;\n \n-      if Present (Outer_Scope)\n-        and then Within (Scope (Ent), Outer_Scope)\n-      then\n+      if Present (Outer_Scope) and then Within (Scope (Ent), Outer_Scope) then\n          Set_C_Scope;\n          Check_A_Call (N, Ent, Outer_Scope, Inter_Unit_Only => False);\n \n@@ -1992,8 +1986,8 @@ package body Sem_Elab is\n          --  code, do not trace past an accept statement, because the rendez-\n          --  vous will happen after elaboration.\n \n-         if (Nkind (Original_Node (N)) = N_Accept_Statement\n-              or else Nkind (Original_Node (N)) = N_Selective_Accept)\n+         if Nkind_In (Original_Node (N), N_Accept_Statement,\n+                                         N_Selective_Accept)\n            and then Restriction_Active (No_Entry_Calls_In_Elaboration_Code)\n          then\n             return Abandon;\n@@ -2021,8 +2015,8 @@ package body Sem_Elab is\n \n             return OK;\n \n-         --  If we have an access attribute for a subprogram, check\n-         --  it. Suppress this behavior under debug flag.\n+         --  If we have an access attribute for a subprogram, check it.\n+         --  Suppress this behavior under debug flag.\n \n          elsif not Debug_Flag_Dot_UU\n            and then Nkind (N) = N_Attribute_Reference\n@@ -2086,10 +2080,7 @@ package body Sem_Elab is\n \n       Sbody := Unit_Declaration_Node (E);\n \n-      if Nkind (Sbody) /= N_Subprogram_Body\n-           and then\n-         Nkind (Sbody) /= N_Package_Body\n-      then\n+      if not Nkind_In (Sbody, N_Subprogram_Body, N_Package_Body) then\n          Ebody := Corresponding_Body (Sbody);\n \n          if No (Ebody) then\n@@ -2406,8 +2397,7 @@ package body Sem_Elab is\n                if No (Corresponding_Body (Unit_Declaration_Node (Proc)))\n                  and then\n                    (not Is_Generic_Instance (Scope (Proc))\n-                      or else\n-                    Scope (Proc) = Scope (Defining_Identifier (Decl)))\n+                     or else Scope (Proc) = Scope (Defining_Identifier (Decl)))\n                then\n                   Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_N\n@@ -2636,9 +2626,8 @@ package body Sem_Elab is\n       --  that is, on which we need to place to elaboration flag. This happens\n       --  with init proc calls.\n \n-      if Is_Init_Proc (Subp)\n-        or else Init_Call\n-      then\n+      if Is_Init_Proc (Subp) or else Init_Call then\n+\n          --  The initialization call is on an object whose type is not declared\n          --  in the same scope as the subprogram. The type of the object must\n          --  be a subtype of the type of operation. This object is the first\n@@ -2996,9 +2985,7 @@ package body Sem_Elab is\n    begin\n       --  Check whether Id is a procedure with at least one parameter\n \n-      if Ekind (Id) = E_Procedure\n-        and then Present (First_Formal (Id))\n-      then\n+      if Ekind (Id) = E_Procedure and then Present (First_Formal (Id)) then\n          declare\n             Typ      : constant Entity_Id := Etype (First_Formal (Id));\n             Deep_Fin : Entity_Id := Empty;\n@@ -3025,10 +3012,8 @@ package body Sem_Elab is\n                Fin := Find_Prim_Op (Typ, Name_Finalize);\n             end if;\n \n-            return\n-                (Present (Deep_Fin) and then Id = Deep_Fin)\n-              or else\n-                (Present (Fin) and then Id = Fin);\n+            return    (Present (Deep_Fin) and then Id = Deep_Fin)\n+              or else (Present (Fin)      and then Id = Fin);\n          end;\n       end if;\n \n@@ -3100,11 +3085,7 @@ package body Sem_Elab is\n       S1 := Scop1;\n       while S1 /= Standard_Standard\n         and then not Is_Compilation_Unit (S1)\n-        and then (Ekind (S1) = E_Package\n-                    or else\n-                  Ekind (S1) = E_Protected_Type\n-                    or else\n-                  Ekind (S1) = E_Block)\n+        and then Ekind_In (S1, E_Package, E_Protected_Type, E_Block)\n       loop\n          S1 := Scope (S1);\n       end loop;\n@@ -3114,11 +3095,7 @@ package body Sem_Elab is\n       S2 := Scop2;\n       while S2 /= Standard_Standard\n         and then not Is_Compilation_Unit (S2)\n-        and then (Ekind (S2) = E_Package\n-                    or else\n-                  Ekind (S2) = E_Protected_Type\n-                    or else\n-                  Ekind (S2) = E_Block)\n+        and then Ekind_In (S2, E_Package, E_Protected_Type, E_Block)\n       loop\n          S2 := Scope (S2);\n       end loop;\n@@ -3172,8 +3149,8 @@ package body Sem_Elab is\n       if Nkind (N) = N_Subprogram_Declaration then\n          declare\n             Ent : constant Entity_Id := Defining_Unit_Name (Specification (N));\n-         begin\n \n+         begin\n             --  Internal subprograms will already have a generated body, so\n             --  there is no need to provide a stub for them.\n "}, {"sha": "3c06188b97e1055e3bcad64c7b6f4e596de6c7eb", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -5530,7 +5530,7 @@ package body Sem_Eval is\n \n          if Raises_Constraint_Error (Expr) then\n             Error_Msg_N\n-              (\"\\expression raises exception, cannot be static \" &\n+              (\"!expression raises exception, cannot be static \" &\n                \"(RM 4.9(34))\", N);\n             return;\n          end if;\n@@ -5551,7 +5551,7 @@ package body Sem_Eval is\n            and then not Is_RTE (Typ, RE_Bignum)\n          then\n             Error_Msg_N\n-              (\"\\static expression must have scalar or string type \" &\n+              (\"!static expression must have scalar or string type \" &\n                \"(RM 4.9(2))\", N);\n             return;\n          end if;\n@@ -5615,17 +5615,17 @@ package body Sem_Eval is\n                                           or else\n                                         Is_Aggregate (Right_Opnd (CO))))\n                   then\n-                     Error_Msg_N (\"\\aggregate (#) is never static\", N);\n+                     Error_Msg_N (\"!aggregate (#) is never static\", N);\n \n                   elsif No (CV) or else not Is_Static_Expression (CV) then\n                      Error_Msg_NE\n-                       (\"\\& is not a static constant (RM 4.9(5))\", N, E);\n+                       (\"!& is not a static constant (RM 4.9(5))\", N, E);\n                   end if;\n                end Entity_Case;\n \n             else\n                Error_Msg_NE\n-                 (\"\\& is not static constant or named number \"\n+                 (\"!& is not static constant or named number \"\n                   & \"(RM 4.9(5))\", N, E);\n             end if;\n \n@@ -5634,7 +5634,7 @@ package body Sem_Eval is\n          when N_Binary_Op | N_Short_Circuit | N_Membership_Test =>\n             if Nkind (N) in N_Op_Shift then\n                Error_Msg_N\n-                (\"\\shift functions are never static (RM 4.9(6,18))\", N);\n+                (\"!shift functions are never static (RM 4.9(6,18))\", N);\n \n             else\n                Why_Not_Static (Left_Opnd (N));\n@@ -5661,7 +5661,7 @@ package body Sem_Eval is\n \n             if Attribute_Name (N) = Name_Size then\n                Error_Msg_N\n-                 (\"\\size attribute is only static for static scalar type \"\n+                 (\"!size attribute is only static for static scalar type \"\n                   & \"(RM 4.9(7,8))\", N);\n \n             --  Flag array cases\n@@ -5674,15 +5674,15 @@ package body Sem_Eval is\n                   Attribute_Name (N) /= Name_Length\n                then\n                   Error_Msg_N\n-                    (\"\\static array attribute must be Length, First, or Last \"\n+                    (\"!static array attribute must be Length, First, or Last \"\n                      & \"(RM 4.9(8))\", N);\n \n                --  Since we know the expression is not-static (we already\n                --  tested for this, must mean array is not static).\n \n                else\n                   Error_Msg_N\n-                    (\"\\prefix is non-static array (RM 4.9(8))\", Prefix (N));\n+                    (\"!prefix is non-static array (RM 4.9(8))\", Prefix (N));\n                end if;\n \n                return;\n@@ -5695,34 +5695,34 @@ package body Sem_Eval is\n                   Is_Generic_Type (E)\n             then\n                Error_Msg_N\n-                 (\"\\attribute of generic type is never static \"\n+                 (\"!attribute of generic type is never static \"\n                   & \"(RM 4.9(7,8))\", N);\n \n             elsif Is_Static_Subtype (E) then\n                null;\n \n             elsif Is_Scalar_Type (E) then\n                Error_Msg_N\n-                 (\"\\prefix type for attribute is not static scalar subtype \"\n+                 (\"!prefix type for attribute is not static scalar subtype \"\n                   & \"(RM 4.9(7))\", N);\n \n             else\n                Error_Msg_N\n-                 (\"\\static attribute must apply to array/scalar type \"\n+                 (\"!static attribute must apply to array/scalar type \"\n                   & \"(RM 4.9(7,8))\", N);\n             end if;\n \n          --  String literal\n \n          when N_String_Literal =>\n             Error_Msg_N\n-              (\"\\subtype of string literal is non-static (RM 4.9(4))\", N);\n+              (\"!subtype of string literal is non-static (RM 4.9(4))\", N);\n \n          --  Explicit dereference\n \n          when N_Explicit_Dereference =>\n             Error_Msg_N\n-              (\"\\explicit dereference is never static (RM 4.9)\", N);\n+              (\"!explicit dereference is never static (RM 4.9)\", N);\n \n          --  Function call\n \n@@ -5734,7 +5734,7 @@ package body Sem_Eval is\n             --  scalar arithmetic operation.\n \n             if not Is_RTE (Typ, RE_Bignum) then\n-               Error_Msg_N (\"\\non-static function call (RM 4.9(6,18))\", N);\n+               Error_Msg_N (\"!non-static function call (RM 4.9(6,18))\", N);\n             end if;\n \n          --  Parameter assocation (test actual parameter)\n@@ -5745,12 +5745,12 @@ package body Sem_Eval is\n          --  Indexed component\n \n          when N_Indexed_Component =>\n-            Error_Msg_N (\"\\indexed component is never static (RM 4.9)\", N);\n+            Error_Msg_N (\"!indexed component is never static (RM 4.9)\", N);\n \n          --  Procedure call\n \n          when N_Procedure_Call_Statement =>\n-            Error_Msg_N (\"\\procedure call is never static (RM 4.9)\", N);\n+            Error_Msg_N (\"!procedure call is never static (RM 4.9)\", N);\n \n          --  Qualified expression (test expression)\n \n@@ -5760,7 +5760,7 @@ package body Sem_Eval is\n          --  Aggregate\n \n          when N_Aggregate | N_Extension_Aggregate =>\n-            Error_Msg_N (\"\\an aggregate is never static (RM 4.9)\", N);\n+            Error_Msg_N (\"!an aggregate is never static (RM 4.9)\", N);\n \n          --  Range\n \n@@ -5781,12 +5781,12 @@ package body Sem_Eval is\n          --  Selected component\n \n          when N_Selected_Component =>\n-            Error_Msg_N (\"\\selected component is never static (RM 4.9)\", N);\n+            Error_Msg_N (\"!selected component is never static (RM 4.9)\", N);\n \n          --  Slice\n \n          when N_Slice =>\n-            Error_Msg_N (\"\\slice is never static (RM 4.9)\", N);\n+            Error_Msg_N (\"!slice is never static (RM 4.9)\", N);\n \n          when N_Type_Conversion =>\n             Why_Not_Static (Expression (N));\n@@ -5795,15 +5795,15 @@ package body Sem_Eval is\n               or else not Is_Static_Subtype (Entity (Subtype_Mark (N)))\n             then\n                Error_Msg_N\n-                 (\"\\static conversion requires static scalar subtype result \"\n+                 (\"!static conversion requires static scalar subtype result \"\n                   & \"(RM 4.9(9))\", N);\n             end if;\n \n          --  Unchecked type conversion\n \n          when N_Unchecked_Type_Conversion =>\n             Error_Msg_N\n-              (\"\\unchecked type conversion is never static (RM 4.9)\", N);\n+              (\"!unchecked type conversion is never static (RM 4.9)\", N);\n \n          --  All other cases, no reason to give\n "}, {"sha": "7d8779d373a025e54be3d2449d066a491e9f3f9c", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -470,17 +470,23 @@ package Sem_Eval is\n \n    procedure Why_Not_Static (Expr : Node_Id);\n    --  This procedure may be called after generating an error message that\n-   --  complains that something is non-static. If it finds good reasons,\n-   --  it generates one or more continuation error messages pointing the\n-   --  appropriate offending component of the expression. If no good reasons\n-   --  can be figured out, then no messages are generated. The expectation here\n-   --  is that the caller has already issued a message complaining that the\n-   --  expression is non-static. Note that this message should be placed using\n-   --  Error_Msg_F or Error_Msg_FE, so that it will sort before any messages\n-   --  placed by this call. Note that it is fine to call Why_Not_Static with\n-   --  something that is not an expression, and usually this has no effect, but\n-   --  in some cases (N_Parameter_Association or N_Range), it makes sense for\n-   --  the internal recursive calls.\n+   --  complains that something is non-static. If it finds good reasons, it\n+   --  generates one or more error messages pointing the appropriate offending\n+   --  component of the expression. If no good reasons can be figured out, then\n+   --  no messages are generated. The expectation here is that the caller has\n+   --  already issued a message complaining that the expression is non-static.\n+   --  Note that this message should be placed using Error_Msg_F or\n+   --  Error_Msg_FE, so that it will sort before any messages placed by this\n+   --  call. Note that it is fine to call Why_Not_Static with something that\n+   --  is not an expression, and usually this has no effect, but in some cases\n+   --  (N_Parameter_Association or N_Range), it makes sense for the internal\n+   --  recursive calls.\n+   --\n+   --  Note that these messages are not continuation messages, instead they are\n+   --  separate unconditional messages, marked with '!'. The reason for this is\n+   --  that they can be posted at a different location from the maim message as\n+   --  documented above (\"appropriate offending component\"), and continuation\n+   --  messages must always point to the same location as the parent message.\n \n    procedure Initialize;\n    --  Initializes the internal data structures. Must be called before each"}, {"sha": "012345ee7efee6f984f39b93d61fd7cdcba3c172", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -766,6 +766,14 @@ package body Sem_Warn is\n       --  For an entry formal entity from an entry declaration, find the\n       --  corresponding body formal from the given accept statement.\n \n+      function May_Need_Initialized_Actual (Ent : Entity_Id) return Boolean;\n+      --  If an entity of a generic type has default initialization, then the\n+      --  corresponding actual type should be fully initialized, or else there\n+      --  will be uninitialized components in the instantiation, that might go\n+      --  unreported. This predicate allows the compiler to emit an appropriate\n+      --  warning in the generic itself. In a sense, the use of a type that\n+      --  requires full initialization is a weak part of the generic contract.\n+\n       function Missing_Subunits return Boolean;\n       --  We suppress warnings when there are missing subunits, because this\n       --  may generate too many false positives: entities in a parent may only\n@@ -815,6 +823,44 @@ package body Sem_Warn is\n          raise Program_Error;\n       end Body_Formal;\n \n+      -----------------------------------\n+      --   May_Need_Initialized_Actual --\n+      -----------------------------------\n+\n+      function May_Need_Initialized_Actual (Ent : Entity_Id) return Boolean is\n+         T   : constant Entity_Id := Etype (Ent);\n+         Par : constant Node_Id   := Parent (T);\n+         Res : Boolean;\n+\n+      begin\n+         if not Is_Generic_Type (T) then\n+            Res := False;\n+\n+         elsif (Nkind (Par)) = N_Private_Extension_Declaration then\n+            Set_Needs_Initialized_Actual (Par);\n+            Res := True;\n+\n+         elsif (Nkind (Par)) = N_Formal_Type_Declaration\n+           and then Nkind (Formal_Type_Definition (Par))\n+              = N_Formal_Private_Type_Definition\n+         then\n+            Set_Needs_Initialized_Actual (Formal_Type_Definition (Par));\n+            Res := True;\n+\n+         else\n+            Res := False;\n+         end if;\n+\n+         if Res then\n+            Error_Msg_N (\"?!variable& of a generic type is \"\n+              & \"potentially uninitialized\", Ent);\n+            Error_Msg_NE (\"\\?instantiations must provide fully initialized \"\n+              & \"type for&\", Ent, T);\n+         end if;\n+\n+         return Res;\n+      end May_Need_Initialized_Actual;\n+\n       ----------------------\n       -- Missing_Subunits --\n       ----------------------\n@@ -1266,6 +1312,7 @@ package body Sem_Warn is\n                         if not Has_Unmodified (E1)\n                           and then not Warnings_Off_E1\n                           and then not Is_Junk_Name (Chars (E1))\n+                          and then not May_Need_Initialized_Actual (E1)\n                         then\n                            Output_Reference_Error\n                              (\"?v?variable& is read but never assigned!\");\n@@ -1274,6 +1321,7 @@ package body Sem_Warn is\n                      elsif not Has_Unreferenced (E1)\n                        and then not Warnings_Off_E1\n                        and then not Is_Junk_Name (Chars (E1))\n+                       and then not May_Need_Initialized_Actual (E1)\n                      then\n                         Output_Reference_Error -- CODEFIX\n                           (\"?v?variable& is never read and never assigned!\");\n@@ -1403,6 +1451,7 @@ package body Sem_Warn is\n                   end if;\n \n                   goto Continue;\n+\n                end if;\n             end if;\n "}, {"sha": "c1eaae557930f545f2af22b8899a39af8f182428", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2224,6 +2224,15 @@ package body Sinfo is\n       return List2 (N);\n    end Names;\n \n+   function Needs_Initialized_Actual\n+     (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration);\n+      return Flag18 (N);\n+   end Needs_Initialized_Actual;\n+\n    function Next_Entity\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -5364,6 +5373,15 @@ package body Sinfo is\n       Set_List2_With_Parent (N, Val);\n    end Set_Names;\n \n+   procedure Set_Needs_Initialized_Actual\n+     (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Formal_Private_Type_Definition\n+        or else NT (N).Nkind = N_Private_Extension_Declaration);\n+      Set_Flag18 (N, Val);\n+   end Set_Needs_Initialized_Actual;\n+\n    procedure Set_Next_Entity\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "3f3c312f609e295847f4dfb211fc48ee7e0126a6", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a3028c36d9c8fd7f6f07b8571e6db0db337616/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=c8a3028c36d9c8fd7f6f07b8571e6db0db337616", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1701,6 +1701,12 @@ package Sinfo is\n    --    present in an N_Subtype_Indication node, since we also use these in\n    --    calls to Freeze_Expression.\n \n+   --  Needs_Initialized_Actual (Flag18-Sem)\n+   --    Present in formal_private_type_definitions and on private extension\n+   --    declarations. Set when the use of a formal type in a generic suggests\n+   --    that the actual should be a fully initialized type, to avoid potential\n+   --    use of uninitialized values.\n+\n    --  Next_Entity (Node2-Sem)\n    --    Present in defining identifiers, defining character literals and\n    --    defining operator symbols (i.e. in all entities). The entities of a\n@@ -5280,6 +5286,7 @@ package Sinfo is\n       --  Synchronized_Present (Flag7)\n       --  Subtype_Indication (Node5)\n       --  Interface_List (List2) (set to No_List if none)\n+      --  Needs_Initialized_Actual (Flag18-Sem)\n \n       ---------------------\n       -- 8.4  Use Clause --\n@@ -6705,6 +6712,7 @@ package Sinfo is\n       --  Abstract_Present (Flag4)\n       --  Tagged_Present (Flag15)\n       --  Limited_Present (Flag17)\n+      --  Needs_Initialized_Actual (Flag18-Sem)\n \n       --------------------------------------------\n       -- 12.5.1  Formal Derived Type Definition --\n@@ -8930,7 +8938,6 @@ package Sinfo is\n \n    function Generalized_Indexing\n      (N : Node_Id) return Node_Id;    -- Node4\n-\n    function Generic_Associations\n      (N : Node_Id) return List_Id;    -- List3\n \n@@ -9195,6 +9202,9 @@ package Sinfo is\n    function Names\n      (N : Node_Id) return List_Id;    -- List2\n \n+   function Needs_Initialized_Actual\n+     (N : Node_Id) return Boolean;    -- Flag18\n+\n    function Next_Entity\n      (N : Node_Id) return Node_Id;    -- Node2\n \n@@ -10194,6 +10204,9 @@ package Sinfo is\n    procedure Set_Names\n      (N : Node_Id; Val : List_Id);            -- List2\n \n+   procedure Set_Needs_Initialized_Actual\n+     (N : Node_Id; Val : Boolean := True);    -- Flag18\n+\n    procedure Set_Next_Entity\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n@@ -10940,7 +10953,7 @@ package Sinfo is\n        (1 => True,    --  Expressions (List1)\n         2 => False,   --  unused\n         3 => True,    --  Prefix (Node3)\n-        4 => False,   --  Generalized_Indexing (Node4-Sem)\n+        4 => False,    --  Generalized_Indexing (Node4-Sem)\n         5 => False),  --  Etype (Node5-Sem)\n \n      N_Slice =>\n@@ -12483,6 +12496,7 @@ package Sinfo is\n    pragma Inline (Must_Override);\n    pragma Inline (Name);\n    pragma Inline (Names);\n+   pragma Inline (Needs_Initialized_Actual);\n    pragma Inline (Next_Entity);\n    pragma Inline (Next_Exit_Statement);\n    pragma Inline (Next_Implicit_With);\n@@ -12812,6 +12826,7 @@ package Sinfo is\n    pragma Inline (Set_Must_Override);\n    pragma Inline (Set_Name);\n    pragma Inline (Set_Names);\n+   pragma Inline (Set_Needs_Initialized_Actual);\n    pragma Inline (Set_Next_Entity);\n    pragma Inline (Set_Next_Exit_Statement);\n    pragma Inline (Set_Next_Implicit_With);"}]}