{"sha": "1fa5a44736062eeccd241ebeb1771bd77b7fd168", "node_id": "C_kwDOANBUbNoAKDFmYTVhNDQ3MzYwNjJlZWNjZDI0MWViZWIxNzcxYmQ3N2I3ZmQxNjg", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-10T09:59:58Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:14Z"}, "message": "arm: improve tests and fix vcmp*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (@mve_vcmp<mve_cmp_op>q_<mode>): Fix\n\tspacing.\n\t* config/arm/arm_mve.h (__arm_vcmpgtq_m, __arm_vcmpleq_m)\n\t(__arm_vcmpltq_m, __arm_vcmpneq_m): Add missing defines.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmphiq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpleq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpltq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u8.c: Likewise.", "tree": {"sha": "7ebd3578d02a708428e9ac4d4d939c71b6680f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ebd3578d02a708428e9ac4d4d939c71b6680f93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fa5a44736062eeccd241ebeb1771bd77b7fd168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa5a44736062eeccd241ebeb1771bd77b7fd168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fa5a44736062eeccd241ebeb1771bd77b7fd168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fa5a44736062eeccd241ebeb1771bd77b7fd168/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7827909fb2ffa3517ada8fae6e41873fb1cbe47a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7827909fb2ffa3517ada8fae6e41873fb1cbe47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7827909fb2ffa3517ada8fae6e41873fb1cbe47a"}], "stats": {"total": 4933, "additions": 4512, "deletions": 421}, "files": [{"sha": "684f997520f434b020e718888c467111164ef6a8", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -39229,6 +39229,53 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpgeq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpgeq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2));})\n \n+\n+#define __arm_vcmpgtq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpgtq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpgtq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpgtq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpgtq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2));})\n+\n+#define __arm_vcmpleq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpleq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpleq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpleq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpleq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpleq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpleq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2));})\n+\n+#define __arm_vcmpltq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpltq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpltq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpltq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpltq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpltq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpltq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2));})\n+\n+#define __arm_vcmpneq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpneq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpneq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpneq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vcmpneq_m_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vcmpneq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vcmpneq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8_t), p2), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16_t), p2), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int_n]: __arm_vcmpneq_m_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32_t), p2));})\n+\n #define __arm_vdupq_m(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\"}, {"sha": "3330a220aeae87e411a8f0f279d828c0fde978f9", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -831,7 +831,7 @@\n \t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vcmp.<mve_cmp_type>%#<V_sz_elem>  <mve_cmp_op>, %q1, %q2\"\n+  \"vcmp.<mve_cmp_type>%#<V_sz_elem>\\t<mve_cmp_op>, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "de9fe5e7d01b2515bc1ae5c336291dad81464e5a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m_n_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpcsq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "04df1b2dc61d01962db8645852b8f1f841b0402f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m_n_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpcsq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "34ebadca2488cbb5ad58494b630bd78fed67b827", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_n_u8.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m_n_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vcmpcsq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bc03bf687debe622add340a1d88b89a315c645dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_u16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8e216d49a023abf42567de895587caed0be979a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_u32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ac4196a2e484ba473994f0fac5b5f3557fd2ca3d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_m_u8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_m_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmpcsq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6038f4c8c65f5fb2683e379cd936bdc65ea558d9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_n_u16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u16\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vcmpcsq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u16\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vcmpcsq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.u16\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a)\n+{\n+  return vcmpcsq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f39aa761c8f8c4eed8d35be6bad5828405f301f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_n_u32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u32\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vcmpcsq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u32\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vcmpcsq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.u32\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a)\n+{\n+  return vcmpcsq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0ce2cd13a7bd8f3fd2f72d98cd05008161ab40e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_n_u8.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u8\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vcmpcsq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u8\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vcmpcsq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.u8\tcs, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vcmpcsq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5598d06875ca62a056fae26b6fcaf482e50edc2f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_u16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u16\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vcmpcsq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u16\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vcmpcsq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "99b232b05dd9519fc35c58bf30e1e6b074e605ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_u32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u32\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vcmpcsq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u32\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vcmpcsq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "571e57135ab46b067e27ab3c4bca52d790e4971a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpcsq_u8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpcsq_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u8\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vcmpcsq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u8\tcs, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vcmpcsq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "57b276a1d4c2a2899804b3c5cc40073f6b8500d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_f16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcmpeqq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ab1b25e28883fd8a499471a36b4429a01fbb6a6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_f32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcmpeqq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c5587884d0ecb1c37172b3957c958f628c0f9f8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_f16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "4e9675fff51a99ac5ea0ee86c958d280f34498eb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_f32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a3cae828e7923587a69d685bc09fe9a4264ace7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a7ce9e0c7e32154d9bec90cb731fbaa111d2db67", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_f32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7ba481e169fa961d33401a426315eecfc8f7f5c3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "13c88eaabb58fa7036a5c90933f38d4782a45e03", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "dcf276dee44ef19e850a46ab8a6860ba7891e56e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d59d5149a30c38ea12663921af11fbec59263d58", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1fbf385d030a17e1c9927b976716434493b7e448", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "92758c98c9af452cd94b6290a40fd4521135ab7e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_n_u8.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_n_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vcmpeqq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1ea35ed924bfff62273b2c405019a6dfda15fd7c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a9bc973384254f40c0de1ec9f4c44cf0d109d077", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a9fe771a101d23096850eb4d6e248135a0b57b08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "826901874d7a6cb91c50d705c0a602c444545363", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_u16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "512b7f9c889bb0e1d88505354790ea8881d11980", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_u32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "01b4507ba632bf44f3de4269ab47a3ed36d3743b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_m_u8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_m_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmpeqq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cf2812558ffdbfe3bb0ba02b95378195780a80bd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b)\n {\n   return vcmpeqq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a)\n+{\n+  return vcmpeqq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "138171742824f27e0eaaf2f2c6220f28c800f34c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_f32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b)\n {\n   return vcmpeqq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a)\n+{\n+  return vcmpeqq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bd29828492e56d2f53e2c5219c188e78efe9f2af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b)\n {\n   return vcmpeqq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2a0d84e9b510ca0ba0bf2577eee5e5059e97ca8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b)\n {\n   return vcmpeqq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "524bbe9f3cba6f286dca1a65e8bab97ef748bf04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vcmpeqq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3eeaa49aa97182601cbf1249488239d9abe51071", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_u16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vcmpeqq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a)\n+{\n+  return vcmpeqq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a881bb841af2450d9ca11c4c38f6750692f5ef14", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_u32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vcmpeqq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a)\n+{\n+  return vcmpeqq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "429b2e35eb7afe1f25f325e8c9e9b6dd1a069742", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_n_u8.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vcmpeqq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vcmpeqq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "92a87c087737faf781f7596150838fe4bdd14f8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcmpeqq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d3b87d59bfad61fdf1a83a7fe06184de44577ffa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcmpeqq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2b71bbf75f61cf7fb404399da6d0c5be8caa225b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcmpeqq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1830b667bb620f2b70e4ac9ba829d87dfbac2434", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_u16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vcmpeqq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2b2a5f920f359e9d394ffbd4fe40baded0abd3d1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_u32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vcmpeqq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9450c2033940f07d838d4527069b5427764d2991", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpeqq_u8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpeqq_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vcmpeqq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\teq, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vcmpeqq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fd8bcab4f252f1a8034282a80ed95e03aa5f564d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_f16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcmpgeq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a2d50b580e746a62d85a658e3c71b122613abb0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_f32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcmpgeq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a631825fadd2cf58364b7755b495ad1cc9b25d39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_f16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b94e0738ef04748092063e965484a18d6571c1e2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_f32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f4903d9cfd13e4532cf9e6abfb5b61a47967bb1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "679e644f16538ed715169d82778f8fde94a061ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_f32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpgeq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "45e26d0a77b0c4fa29614c1fe0c4489b7f6daff0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3a6cad921f2691a4b322a208aa995c593674ceef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ce1ca30d6eaafc50332b554b76cbb82faf79774c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "51587a38b72dfdaa103b320a1ebf686dbcac4f80", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3ff0aaaa414883437880a6400ffb3bd1a8857f04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "df71ee5794540a515fe7bd47544bda87b2441670", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_m_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_m_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpgeq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2ca1b9d6684e1fd1495fafcf930e26b10702c7a2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b)\n {\n   return vcmpgeq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a)\n+{\n+  return vcmpgeq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3af110bd2b2a0e74bd9baca2be4d7f3622ee1929", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_f32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b)\n {\n   return vcmpgeq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a)\n+{\n+  return vcmpgeq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3c1af8a93ab13c3fe58f194b8f2e70b835db6019", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b)\n {\n   return vcmpgeq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8b4e0f426e5d9afaf6f7eb796f852a520ce43c8c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b)\n {\n   return vcmpgeq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c1669bcdd904377a2eb68f1aaf85556b75d1b512", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_n_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vcmpgeq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tge, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "593c7410dcb99ace90510013440a2a49373cbaa0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcmpgeq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9e26ea9938ad33f3c6657f088ee5210c244ce476", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcmpgeq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "3cb2832e15924dcce04058752bc09e651b275060", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgeq_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgeq_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcmpgeq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tge, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcmpgeq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8835fe08dba8a8f250106e1038eb1275909f310b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_f16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcmpgtq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e14708847089067e76868b6fc31f2d08f86d66fa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_f32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcmpgtq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cb9d5f4036fdb7908a86d8be1924e666952c11ea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_f16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b249b831782b55b6b5007d91c89a4b6937a295de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_f32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b375983f01e2aa8c7cd444d7cf2c89177e4be026", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "208a285cb393efe24cef43017307cfa79bc67a47", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_f32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpgtq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "248e3093d2a5de2d71bd561172996585e7dbe805", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9843288296ea70aa15ddca234a3878575bcdc7bf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "80f1aa9ead086b52dfb8ebf142dfc7230ac8a819", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9289c00b5afe6da72fad209676f2c1d342355ed8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8a3d7606bb73f6facd098418024bfff3bea2076d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2760795eb860ecf188d8abefc377a34dae1b60c9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_m_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_m_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpgtq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f2a4be319a220fc3c19a0c9aca15704e723207c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b)\n {\n   return vcmpgtq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a)\n+{\n+  return vcmpgtq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bbf18ebe6e7c1d2e9dd64da0a9d3190aa6c78e5f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_f32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b)\n {\n   return vcmpgtq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a)\n+{\n+  return vcmpgtq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d833cb6f58e9a54442013b056accfbe40823a6e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b)\n {\n   return vcmpgtq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "28cd51b9582982fea769db2c8971cdec39c7c593", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b)\n {\n   return vcmpgtq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5a953ca55f42a799aaeea0b9cba3355b65030ebf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_n_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vcmpgtq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tgt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b9c9da486f5b331ea5cc9a5642882d87d03b3b90", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcmpgtq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0f79385358e577b54768d1c0ed73c5383d4bfb26", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcmpgtq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "f59dad94a57f295df84c7ad7d68670e19a0a152c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpgtq_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpgtq_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcmpgtq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tgt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcmpgtq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "136a2e44259d14074261cd5de840259f241c7236", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmphiq_m_n_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmphiq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5640b97afafa1d302c083a745ade9d56f1ca0888", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmphiq_m_n_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmphiq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e6474e4548713701d19df38ef0c64af02219b229", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_n_u8.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmphiq_m_n_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmphiq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vcmphiq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "38b9b90c8030b0962ac8b30de333a171335d90a4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_u16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmphiq_m_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u16\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmphiq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "97c8c1dfe05b7a211b28c2840a086be27d55ddd6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_u32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmphiq_m_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u32\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmphiq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e2024ccda25cf2f4e9c1799fd4686aadfc41e7ac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_m_u8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_m_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmphiq_m_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.u8\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmphiq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "36107fc7b8d4c4d192e835cd5952131bdaee9aed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_n_u16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u16\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vcmphiq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u16\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vcmphiq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.u16\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a)\n+{\n+  return vcmphiq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d34de8f65c7d04943a9cffabc50ec7f78ef8de29", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_n_u32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u32\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vcmphiq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u32\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vcmphiq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.u32\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a)\n+{\n+  return vcmphiq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "93a05b1a85706f1275001847b8f687de5ce72dac", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_n_u8.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u8\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vcmphiq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u8\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vcmphiq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.u8\thi, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vcmphiq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "40e65dc52f43dcff8540fa70be156e3c8d874ab7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_u16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u16\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vcmphiq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u16\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vcmphiq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d87a4185762d3f49be109e4d840325fe9af1a006", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_u32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u32\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vcmphiq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u32\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vcmphiq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "80fd2a40b0fc45a60f003fb75c61dd53cd362e06", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmphiq_u8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmphiq_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.u8\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vcmphiq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.u8\thi, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vcmphiq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "209d81096af63c89b229fe33baa540e80f26fc21", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_f16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcmpleq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b92c5f66fd96bf71d75ff7f080dba7ae52cbbe35", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_f32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcmpleq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e6136898ded99fee3bbd84de010cd4d371c02176", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_f16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2304e98d25312905bcc41215b31efe3c0593601d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_f32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a61db2817c10419c9bf14f7f080e7f576d2e224f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7a2cdb4059dbec8993e32bbd56081409e17cb46b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_f32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpleq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "69fcab15b8a5d6bd9757f7576da19413ba519f0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "617ebd6144f1924f6ee77bc9361589fa0fddf2fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b8ee50dd55c48ec9c7d55d8d41bb6916c7d5f0af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fcc376d6ec364062e119351f1300667959850747", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9983e89d80c890de046b5d31d16a882b73933de2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "504e4feb5d1d13a665ad0845bff20bd2625690e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_m_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_m_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpleq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpleq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cfa6dbc07c79abdff3cf2e0efe424b6b0bb04871", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b)\n {\n   return vcmpleq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a)\n+{\n+  return vcmpleq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c89558f4076247d827119f75835752391740a6f8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_f32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b)\n {\n   return vcmpleq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a)\n+{\n+  return vcmpleq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "da73fc14b77a6ebbd12994257735413e600699dc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b)\n {\n   return vcmpleq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0951a5c13fb9946bd6a1c340ddacdf328d633b8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b)\n {\n   return vcmpleq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e4553354681e236ce190607c755b052ea888353d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_n_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vcmpleq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tle, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "68500da9ddf5f6ace4b4a2eaf2b48d82641e5101", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcmpleq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1966bcd94d3ab5f90a307bb73c94c0b2d733f9b4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcmpleq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e9f6e47e5d6ed44126f5766ea383db6e055ed415", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpleq_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpleq_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcmpleq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tle, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcmpleq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b4958816bd8dba9e5454cea3d11357373375bb24", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_f16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcmpltq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "752ab2b3e49d22f925fec31898ff340b533af82b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_f32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcmpltq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cbaacbe2b47eba4cc3a85a0b006d05f886b7e8e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_f16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "96d0e7c7cc642e72ac94dab712c433e2dd38f4e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_f32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1e5db53198e777de1bcb8009676bbda2ef215c61", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "77de40ade01fc2c0ed3e946d271e25f22a365574", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_f32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpltq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "beebe65a58fd94c37ae9b788499ce4b3d9544ab3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "07260c56ed341a3ffeecf25c3756d83b96d61018", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7d1e9e7fbde5a9a196182aeef5e9359838535c0c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c0f6dfc94321231670efbe6c8965c58e888a8aa3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "b6fc4700e7369078834b61432f5f4575ae70d310", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "545b76359add2cbfa769ad24f17ed9704105981c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_m_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_m_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpltq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.s8\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpltq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "401ef21ba2bc5da13b40188432f0c4dae3e8d83d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b)\n {\n   return vcmpltq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a)\n+{\n+  return vcmpltq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "380f071e5646a90ac40bd397de85c293244878a3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_f32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b)\n {\n   return vcmpltq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a)\n+{\n+  return vcmpltq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a1d12392dd2ab16bae4a38e831c9f2c93c990298", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b)\n {\n   return vcmpltq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6332f75f327f557b96ef9853690d1228b5af1296", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b)\n {\n   return vcmpltq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e0ac80caeb03713260ee33c845b434a22f05b669", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_n_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vcmpltq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tlt, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "23843ad88f3a017975f0ce196fc1b80d1fac7955", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcmpltq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s16\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "aeb7a6f98968fddaf10867b071669291cbbd7bad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcmpltq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s32\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2129b56a5f7da33dc4c2e5c058273deb7b5e6fe8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpltq_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpltq_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.s8\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcmpltq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.s8\tlt, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcmpltq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.s8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "c27ea2f0de8495ac2fead1604b4751841cc1ec49", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_f16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b)\n {\n   return vcmpneq_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "609de44d8e72d1c85126165daa3dca3df81b0337", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_f32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b)\n {\n   return vcmpneq_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "98f22337d61e0c012c48144ac80453e19fac2ee0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_f16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16x8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7f6e96ae47ea5b1c3e25767e1ea85973ece7f272", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_f32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32x4_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "71b3476fb189eef4fb8891bb2bc555bd6b370aaa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_f16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d6dea8db8657cb967989aca4b018c2a81456c75c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_f32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_f32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.f32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 1.1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e72c9b62829bac9e107eda15326e022310423ff2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "47c90e31f49dd6b0c31a80026aedabaf15c7e7fb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9d9da10004618dce27d8f4b90d4855b16155778b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "ea8cf24b3583c174256003493949c582d1e0c1ed", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u16.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "30291dcdd9bc1bf057016d950fcd5b075324f977", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u32.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "be75376a6916d5c36bfc5292da468bdfd94b2b8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_n_u8.c", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,63 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_n_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a, mve_pred16_t p)\n+{\n+  return vcmpneq_m (a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "60e868141d0746995962403527d3b9bc0c8dda0a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_s16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_s16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "780c544bef3d7e0213dc9edff595897f10c699fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_s32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_s32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "15f6d316cba2f5486568d858d50d3f83ed9cc234", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_s8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_s8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "300852ed7b3e258baf36dc1c2e406ef5844f9c9d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_u16.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_u16 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "227b5f01eca11e0489ee151e28a2b816bf68df2c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_u32.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_u32 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cfcb59f49cfd722a074bdc9a4cb66112e449da8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_m_u8.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_m_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m_u8 (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vcmpt.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvcmpt.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n {\n   return vcmpneq_m (a, b, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "29e43f3fdf85ac7e334d835fb9d6f4bb91d716e5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float16x8_t a, float16_t b)\n {\n   return vcmpneq_n_f16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float16x8_t a, float16_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float16x8_t a)\n+{\n+  return vcmpneq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "688e77cd044ef409355a4106bffb1490ab23ad77", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_f32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_f32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.f32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (float32x4_t a, float32_t b)\n {\n   return vcmpneq_n_f32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.f32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (float32x4_t a, float32_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.f32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.f32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (float32x4_t a)\n+{\n+  return vcmpneq (a, 1.1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2afc34d16e5c6c675cfdfd8278c77937a2f4b351", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16_t b)\n {\n   return vcmpneq_n_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6c3231613168be98e239c39647c94cf09f9a3ab8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32_t b)\n {\n   return vcmpneq_n_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "5483d6dd2fe21e82f474cc9bd3b72ede131b4a5b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8_t b)\n {\n   return vcmpneq_n_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d8edfb0d825bea3fd33500c244d64a117fd5f9f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_u16.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16_t b)\n {\n   return vcmpneq_n_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint16x8_t a)\n+{\n+  return vcmpneq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2b7a6b5683078e2071d866fad14b5eaf449ef057", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_u32.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32_t b)\n {\n   return vcmpneq_n_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint32x4_t a)\n+{\n+  return vcmpneq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2dab43af33183d6e2e13efa4c04f0cb04704dfc0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_n_u8.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_n_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,51 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8_t b)\n {\n   return vcmpneq_n_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n+mve_pred16_t\n+foo2 (uint8x16_t a)\n+{\n+  return vcmpneq (a, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d57b607baa9d3119b16b81873ae5269a41eef77f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_s16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int16x8_t a, int16x8_t b)\n {\n   return vcmpneq_s16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int16x8_t a, int16x8_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "e02171f66867569cf76bd709bcfbbc75e074e5d0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_s32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int32x4_t a, int32x4_t b)\n {\n   return vcmpneq_s32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int32x4_t a, int32x4_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "0abef8c3e00f1f6180b8694b48d0135707c361b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_s8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (int8x16_t a, int8x16_t b)\n {\n   return vcmpneq_s8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (int8x16_t a, int8x16_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "7144f3ee2fcc3e7372b226d065413bebc7501552", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_u16.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u16.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint16x8_t a, uint16x8_t b)\n {\n   return vcmpneq_u16 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i16\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint16x8_t a, uint16x8_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "a31134f2f1de14b442aa23f45c1675b6c21f65d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_u32.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u32.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint32x4_t a, uint32x4_t b)\n {\n   return vcmpneq_u32 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i32\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint32x4_t a, uint32x4_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2801c8e3763d7e94be5be43649ca86619c5ab172", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_u8.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fa5a44736062eeccd241ebeb1771bd77b7fd168/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u8.c?ref=1fa5a44736062eeccd241ebeb1771bd77b7fd168", "patch": "@@ -1,21 +1,37 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo (uint8x16_t a, uint8x16_t b)\n {\n   return vcmpneq_u8 (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvcmp.i8\tne, q[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+**\tvmrs\t(?:ip|fp|r[0-9]+), p0(?:\t@.*|)\n+**\t...\n+*/\n mve_pred16_t\n foo1 (uint8x16_t a, uint8x16_t b)\n {\n   return vcmpneq (a, b);\n }\n \n-/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}