{"sha": "14e355df30534b1d07018e2934948a09fa5a8e52", "node_id": "C_kwDOANBUbNoAKDE0ZTM1NWRmMzA1MzRiMWQwNzAxOGUyOTM0OTQ4YTA5ZmE1YThlNTI", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2021-11-02T06:09:32Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2021-11-08T02:48:49Z"}, "message": "Disables gimple folding for VSX_BUILTIN_XVMINDP, VSX_BUILTIN_XVMAXDP,ALTIVEC_BUILTIN_VMINFP and ALTIVEC_BUILTIN_VMAXFP when fast-math is not set.\n\ngcc/\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_builtin): Disable\n\tgimple fold for VSX_BUILTIN_XVMINDP, ALTIVEC_BUILTIN_VMINFP,\n\tVSX_BUILTIN_XVMAXDP, ALTIVEC_BUILTIN_VMAXFP when fast-math is not\n\tset.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/vec-minmax-1.c: New test.\n\t* gcc.target/powerpc/vec-minmax-2.c: Likewise.", "tree": {"sha": "264a260b32fe61e68d12d63ba485af0c61485d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/264a260b32fe61e68d12d63ba485af0c61485d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e355df30534b1d07018e2934948a09fa5a8e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e355df30534b1d07018e2934948a09fa5a8e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e355df30534b1d07018e2934948a09fa5a8e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e355df30534b1d07018e2934948a09fa5a8e52/comments", "author": null, "committer": null, "parents": [{"sha": "ae1de0bf72fca92f94a7e29f51ce4448b877db4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1de0bf72fca92f94a7e29f51ce4448b877db4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae1de0bf72fca92f94a7e29f51ce4448b877db4a"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "c7fdf729d8d96d62c68e763486eeb49d1c2dc749", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e355df30534b1d07018e2934948a09fa5a8e52/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e355df30534b1d07018e2934948a09fa5a8e52/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=14e355df30534b1d07018e2934948a09fa5a8e52", "patch": "@@ -12536,6 +12536,14 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       return true;\n     /* flavors of vec_min.  */\n     case VSX_BUILTIN_XVMINDP:\n+    case ALTIVEC_BUILTIN_VMINFP:\n+      {\n+\tlhs = gimple_call_lhs (stmt);\n+\ttree type = TREE_TYPE (lhs);\n+\tif (HONOR_NANS (type))\n+\t  return false;\n+\tgcc_fallthrough ();\n+      }\n     case P8V_BUILTIN_VMINSD:\n     case P8V_BUILTIN_VMINUD:\n     case ALTIVEC_BUILTIN_VMINSB:\n@@ -12544,7 +12552,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case ALTIVEC_BUILTIN_VMINUB:\n     case ALTIVEC_BUILTIN_VMINUH:\n     case ALTIVEC_BUILTIN_VMINUW:\n-    case ALTIVEC_BUILTIN_VMINFP:\n       arg0 = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n       lhs = gimple_call_lhs (stmt);\n@@ -12554,6 +12561,14 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       return true;\n     /* flavors of vec_max.  */\n     case VSX_BUILTIN_XVMAXDP:\n+    case ALTIVEC_BUILTIN_VMAXFP:\n+      {\n+\tlhs = gimple_call_lhs (stmt);\n+\ttree type = TREE_TYPE (lhs);\n+\tif (HONOR_NANS (type))\n+\t  return false;\n+\tgcc_fallthrough ();\n+      }\n     case P8V_BUILTIN_VMAXSD:\n     case P8V_BUILTIN_VMAXUD:\n     case ALTIVEC_BUILTIN_VMAXSB:\n@@ -12562,7 +12577,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case ALTIVEC_BUILTIN_VMAXUB:\n     case ALTIVEC_BUILTIN_VMAXUH:\n     case ALTIVEC_BUILTIN_VMAXUW:\n-    case ALTIVEC_BUILTIN_VMAXFP:\n       arg0 = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n       lhs = gimple_call_lhs (stmt);"}, {"sha": "3f6e376007596cf1f0eff27876583fa8c9e76af2", "filename": "gcc/testsuite/gcc.target/powerpc/vec-minmax-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e355df30534b1d07018e2934948a09fa5a8e52/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-minmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e355df30534b1d07018e2934948a09fa5a8e52/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-minmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-minmax-1.c?ref=14e355df30534b1d07018e2934948a09fa5a8e52", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9\" } */\n+/* { dg-final { scan-assembler-times {\\mxvmaxdp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmaxsp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvmindp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxvminsp\\M} 1 } } */\n+\n+/* This test verifies that float or double vec_min/max are bound to\n+   xv[min|max][d|s]p instructions when fast-math is not set.  */\n+\n+\n+#include <altivec.h>\n+\n+#ifdef _BIG_ENDIAN\n+   const int PREF_D = 0;\n+#else\n+   const int PREF_D = 1;\n+#endif\n+\n+double vmaxd (double a, double b)\n+{\n+  vector double va = vec_promote (a, PREF_D);\n+  vector double vb = vec_promote (b, PREF_D);\n+  return vec_extract (vec_max (va, vb), PREF_D);\n+}\n+\n+double vmind (double a, double b)\n+{\n+  vector double va = vec_promote (a, PREF_D);\n+  vector double vb = vec_promote (b, PREF_D);\n+  return vec_extract (vec_min (va, vb), PREF_D);\n+}\n+\n+#ifdef _BIG_ENDIAN\n+   const int PREF_F = 0;\n+#else\n+   const int PREF_F = 3;\n+#endif\n+\n+float vmaxf (float a, float b)\n+{\n+  vector float va = vec_promote (a, PREF_F);\n+  vector float vb = vec_promote (b, PREF_F);\n+  return vec_extract (vec_max (va, vb), PREF_F);\n+}\n+\n+float vminf (float a, float b)\n+{\n+  vector float va = vec_promote (a, PREF_F);\n+  vector float vb = vec_promote (b, PREF_F);\n+  return vec_extract (vec_min (va, vb), PREF_F);\n+}"}, {"sha": "b27bebba846587ef56d33409cb0d1886f267e692", "filename": "gcc/testsuite/gcc.target/powerpc/vec-minmax-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e355df30534b1d07018e2934948a09fa5a8e52/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-minmax-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e355df30534b1d07018e2934948a09fa5a8e52/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-minmax-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-minmax-2.c?ref=14e355df30534b1d07018e2934948a09fa5a8e52", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power9 -ffast-math\" } */\n+/* { dg-final { scan-assembler-times {\\mxsmaxcdp\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mxsmincdp\\M} 2 } } */\n+\n+/* This test verifies that float or double vec_min/max can be converted\n+   to scalar comparison when fast-math is set.  */\n+\n+\n+#include <altivec.h>\n+\n+#ifdef _BIG_ENDIAN\n+   const int PREF_D = 0;\n+#else\n+   const int PREF_D = 1;\n+#endif\n+\n+double vmaxd (double a, double b)\n+{\n+  vector double va = vec_promote (a, PREF_D);\n+  vector double vb = vec_promote (b, PREF_D);\n+  return vec_extract (vec_max (va, vb), PREF_D);\n+}\n+\n+double vmind (double a, double b)\n+{\n+  vector double va = vec_promote (a, PREF_D);\n+  vector double vb = vec_promote (b, PREF_D);\n+  return vec_extract (vec_min (va, vb), PREF_D);\n+}\n+\n+#ifdef _BIG_ENDIAN\n+   const int PREF_F = 0;\n+#else\n+   const int PREF_F = 3;\n+#endif\n+\n+float vmaxf (float a, float b)\n+{\n+  vector float va = vec_promote (a, PREF_F);\n+  vector float vb = vec_promote (b, PREF_F);\n+  return vec_extract (vec_max (va, vb), PREF_F);\n+}\n+\n+float vminf (float a, float b)\n+{\n+  vector float va = vec_promote (a, PREF_F);\n+  vector float vb = vec_promote (b, PREF_F);\n+  return vec_extract (vec_min (va, vb), PREF_F);\n+}"}]}