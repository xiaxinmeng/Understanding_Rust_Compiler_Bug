{"sha": "86210f13cdab46fb3ac1327f7e016646684e5709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYyMTBmMTNjZGFiNDZmYjNhYzEzMjdmN2UwMTY2NDY2ODRlNTcwOQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2013-04-23T03:09:47Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2013-04-23T03:09:47Z"}, "message": "Improve pointer hash function to include all bits\n\nThe hashtab pointer hash function is not very good. It throws most of the\nbits in the pointer away.\n\nThis changes pointer_hash to use the mix code from jhash function that mixes\nall the bits on the pointer and makes them dependent on each other, before doing\nthe modulo.\n\nlibiberty/:\n\n2013-04-22  Andi Kleen <ak@linux.intel.com>\n\n\t* hashtab.c (hash_pointer): Move to end of file and reimplement.\n\nFrom-SVN: r198171", "tree": {"sha": "23ffa8b00dd8951c14d347d1ad8327bd887526c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23ffa8b00dd8951c14d347d1ad8327bd887526c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86210f13cdab46fb3ac1327f7e016646684e5709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86210f13cdab46fb3ac1327f7e016646684e5709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86210f13cdab46fb3ac1327f7e016646684e5709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86210f13cdab46fb3ac1327f7e016646684e5709/comments", "author": null, "committer": null, "parents": [{"sha": "7441bd3d2250272fa1dce0bb8eb192c13b824512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7441bd3d2250272fa1dce0bb8eb192c13b824512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7441bd3d2250272fa1dce0bb8eb192c13b824512"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "1420ad402f3be291793250a4bcef62afff2b3206", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86210f13cdab46fb3ac1327f7e016646684e5709/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86210f13cdab46fb3ac1327f7e016646684e5709/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=86210f13cdab46fb3ac1327f7e016646684e5709", "patch": "@@ -1,3 +1,7 @@\n+2013-04-22  Andi Kleen <ak@linux.intel.com>\n+\n+\t* hashtab.c (hash_pointer): Move to end of file and reimplement.\n+\n 2013-04-03  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (cplus_demangle_type): Fix function quals."}, {"sha": "a2fe3ee3bddbff6745024ea3b01df707744574ba", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86210f13cdab46fb3ac1327f7e016646684e5709/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86210f13cdab46fb3ac1327f7e016646684e5709/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=86210f13cdab46fb3ac1327f7e016646684e5709", "patch": "@@ -194,14 +194,6 @@ higher_prime_index (unsigned long n)\n   return low;\n }\n \n-/* Returns a hash code for P.  */\n-\n-static hashval_t\n-hash_pointer (const PTR p)\n-{\n-  return (hashval_t) ((intptr_t)p >> 3);\n-}\n-\n /* Returns non-zero if P1 and P2 are equal.  */\n \n static int\n@@ -988,3 +980,28 @@ iterative_hash (const PTR k_in /* the key */,\n   /*-------------------------------------------- report the result */\n   return c;\n }\n+\n+/* Returns a hash code for pointer P. Simplified version of evahash */\n+\n+static hashval_t\n+hash_pointer (const PTR p)\n+{\n+  intptr_t v = (intptr_t) p;\n+  unsigned a, b, c;\n+\n+  a = b = 0x9e3779b9;\n+  if (sizeof (intptr_t) == 4) \n+    {\n+      /* Mix as 16bit for now */\n+      a += v >> 16;\n+      b += v & 0xffff;\n+    }\n+  else\n+    {\n+      a += v >> 32;\n+      b += v & 0xffffffff;\n+    }\n+  c = 0x42135234;\n+  mix (a, b, c);\n+  return c;\n+}"}]}