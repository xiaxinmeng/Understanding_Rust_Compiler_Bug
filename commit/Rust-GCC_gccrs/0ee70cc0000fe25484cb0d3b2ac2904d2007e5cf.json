{"sha": "0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlNzBjYzAwMDBmZTI1NDg0Y2IwZDNiMmFjMjkwNGQyMDA3ZTVjZg==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2016-09-22T17:02:47Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2016-09-22T17:02:47Z"}, "message": "[ARM] Add support for -mpure-code option\n\ngcc/ChangeLog:\n2016-09-22  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Terry Guo  <terry.guo@arm.com>\n\n    * target.def (elf_flags_numeric): New target hook.\n    * targhooks.h (default_asm_elf_flags_numeric): New.\n    * varasm.c (default_asm_elf_flags_numeric): New.\n    (default_elf_asm_named_section): Use new target hook.\n    * config/arm/arm.opt (mpure-code): New.\n    * config/arm/arm.h (SECTION_ARM_PURECODE): New.\n    * config/arm/arm.c (arm_asm_init_sections): Add section\n    attribute to default text section if -mpure-code.\n    (arm_option_check_internal): Diagnose use of option with\n    non supported targets and/or options.\n    (arm_asm_elf_flags_numeric): New.\n    (arm_function_section): New.\n    (arm_elf_section_type_flags): New.\n    * config/arm/elf.h (JUMP_TABLES_IN_TEXT_SECTION): Disable\n    for -mpure-code.\n    * gcc/doc/texi (TARGET_ASM_ELF_FLAGS_NUMERIC): New.\n    * gcc/doc/texi.in (TARGET_ASM_ELF_FLAGS_NUMERIC): Likewise.\n\ngcc/testsuite/ChangeLog:\n2016-09-22  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Terry Guo  <terry.guo@arm.com>\n\n    * gcc.target/arm/pure-code/ffunction-sections.c: New.\n    * gcc.target/arm/pure-code/no-literal-pool.c: New.\n    * gcc.target/arm/pure-code/pure-code.exp: New.\n\nCo-Authored-By: Terry Guo <terry.guo@arm.com>\n\nFrom-SVN: r240379", "tree": {"sha": "2b6549bc452c8fe8fec854d66c6c770e37be25f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6549bc452c8fe8fec854d66c6c770e37be25f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31e9f857d5408a69bc6c1eac793103c73ce6eed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e9f857d5408a69bc6c1eac793103c73ce6eed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e9f857d5408a69bc6c1eac793103c73ce6eed0"}], "stats": {"total": 287, "additions": 257, "deletions": 30}, "files": [{"sha": "2fbe852ab54c30641a5c3e4770b920260bf4e75c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -1,3 +1,24 @@\n+2016-09-22  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Terry Guo  <terry.guo@arm.com>\n+\n+\t* target.def (elf_flags_numeric): New target hook.\n+\t* targhooks.h (default_asm_elf_flags_numeric): New.\n+\t* varasm.c (default_asm_elf_flags_numeric): New.\n+\t(default_elf_asm_named_section): Use new target hook.\n+\t* config/arm/arm.opt (mpure-code): New.\n+\t* config/arm/arm.h (SECTION_ARM_PURECODE): New.\n+\t* config/arm/arm.c (arm_asm_init_sections): Add section\n+\tattribute to default text section if -mpure-code.\n+\t(arm_option_check_internal): Diagnose use of option with\n+\tnon supported targets and/or options.\n+\t(arm_asm_elf_flags_numeric): New.\n+\t(arm_function_section): New.\n+\t(arm_elf_section_type_flags): New.\n+\t* config/arm/elf.h (JUMP_TABLES_IN_TEXT_SECTION): Disable\n+\tfor -mpure-code.\n+\t* gcc/doc/texi (TARGET_ASM_ELF_FLAGS_NUMERIC): New.\n+\t* gcc/doc/texi.in (TARGET_ASM_ELF_FLAGS_NUMERIC): Likewise.\n+\n 2016-09-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* regcprop.c (copyprop_hardreg_forward_1): Remove noop moves."}, {"sha": "b68e0056d7697de82861cc0f342db6f78c732fae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 139, "deletions": 6, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -214,8 +214,8 @@ static bool arm_return_in_memory (const_tree, const_tree);\n static void arm_unwind_emit (FILE *, rtx_insn *);\n static bool arm_output_ttype (rtx);\n static void arm_asm_emit_except_personality (rtx);\n-static void arm_asm_init_sections (void);\n #endif\n+static void arm_asm_init_sections (void);\n static rtx arm_dwarf_register_span (rtx);\n \n static tree arm_cxx_guard_type (void);\n@@ -299,7 +299,10 @@ static unsigned HOST_WIDE_INT arm_asan_shadow_offset (void);\n static void arm_sched_fusion_priority (rtx_insn *, int, int *, int*);\n static bool arm_can_output_mi_thunk (const_tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t     const_tree);\n-\n+static section *arm_function_section (tree, enum node_frequency, bool, bool);\n+static bool arm_asm_elf_flags_numeric (unsigned int flags, unsigned int *num);\n+static unsigned int arm_elf_section_type_flags (tree decl, const char *name,\n+\t\t\t\t\t\tint reloc);\n \f\n /* Table of machine attributes.  */\n static const struct attribute_spec arm_attribute_table[] =\n@@ -584,8 +587,8 @@ static const struct attribute_spec arm_attribute_table[] =\n #define TARGET_ASM_EMIT_EXCEPT_PERSONALITY arm_asm_emit_except_personality\n \n #undef TARGET_ASM_INIT_SECTIONS\n-#define TARGET_ASM_INIT_SECTIONS arm_asm_init_sections\n #endif /* ARM_UNWIND_INFO */\n+#define TARGET_ASM_INIT_SECTIONS arm_asm_init_sections\n \n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN arm_dwarf_register_span\n@@ -726,6 +729,15 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_SCHED_FUSION_PRIORITY\n #define TARGET_SCHED_FUSION_PRIORITY arm_sched_fusion_priority\n \n+#undef  TARGET_ASM_FUNCTION_SECTION\n+#define TARGET_ASM_FUNCTION_SECTION arm_function_section\n+\n+#undef TARGET_ASM_ELF_FLAGS_NUMERIC\n+#define TARGET_ASM_ELF_FLAGS_NUMERIC arm_asm_elf_flags_numeric\n+\n+#undef TARGET_SECTION_TYPE_FLAGS\n+#define TARGET_SECTION_TYPE_FLAGS arm_elf_section_type_flags\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -2837,6 +2849,12 @@ arm_option_check_internal (struct gcc_options *opts)\n       && ((!(arm_arch7 && !arm_arch_notm) && !arm_arch7em)\n \t  || (TARGET_THUMB1_P (flags) || flag_pic || TARGET_NEON)))\n     error (\"-mslow-flash-data only supports non-pic code on armv7-m targets\");\n+\n+  /* We only support pure-code on Thumb-2 M-profile targets.  */\n+  if (target_pure_code\n+      && (!arm_arch_thumb2 || arm_arch_notm || flag_pic || TARGET_NEON))\n+    error (\"-mpure-code only supports non-pic code on armv7-m targets\");\n+\n }\n \n /* Recompute the global settings depending on target attribute options.  */\n@@ -3487,8 +3505,9 @@ arm_option_override (void)\n \t\t\t global_options.x_param_values,\n \t\t\t global_options_set.x_param_values);\n \n-  /* Currently, for slow flash data, we just disable literal pools.  */\n-  if (target_slow_flash_data)\n+  /* Currently, for slow flash data, we just disable literal pools.  We also\n+     disable it for pure-code.  */\n+  if (target_slow_flash_data || target_pure_code)\n     arm_disable_literal_pool = true;\n \n   /* Disable scheduling fusion by default if it's not armv7 processor\n@@ -27262,17 +27281,24 @@ arm_asm_emit_except_personality (rtx personality)\n   output_addr_const (asm_out_file, personality);\n   fputc ('\\n', asm_out_file);\n }\n+#endif /* ARM_UNWIND_INFO */\n \n /* Implement TARGET_ASM_INITIALIZE_SECTIONS.  */\n \n static void\n arm_asm_init_sections (void)\n {\n+#if ARM_UNWIND_INFO\n   exception_section = get_unnamed_section (0, output_section_asm_op,\n \t\t\t\t\t   \"\\t.handlerdata\");\n-}\n #endif /* ARM_UNWIND_INFO */\n \n+#ifdef OBJECT_FORMAT_ELF\n+  if (target_pure_code)\n+    text_section->unnamed.data = \"\\t.section .text,\\\"0x20000006\\\",%progbits\";\n+#endif\n+}\n+\n /* Output unwind directives for the start/end of a function.  */\n \n void\n@@ -30613,4 +30639,111 @@ arm_gen_unlikely_cbranch (enum rtx_code code, machine_mode cc_mode,\n   emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n }\n \n+/* Implement the TARGET_ASM_ELF_FLAGS_NUMERIC hook.\n+\n+   For pure-code sections there is no letter code for this attribute, so\n+   output all the section flags numerically when this is needed.  */\n+\n+static bool\n+arm_asm_elf_flags_numeric (unsigned int flags, unsigned int *num)\n+{\n+\n+  if (flags & SECTION_ARM_PURECODE)\n+    {\n+      *num = 0x20000000;\n+\n+      if (!(flags & SECTION_DEBUG))\n+\t*num |= 0x2;\n+      if (flags & SECTION_EXCLUDE)\n+\t*num |= 0x80000000;\n+      if (flags & SECTION_WRITE)\n+\t*num |= 0x1;\n+      if (flags & SECTION_CODE)\n+\t*num |= 0x4;\n+      if (flags & SECTION_MERGE)\n+\t*num |= 0x10;\n+      if (flags & SECTION_STRINGS)\n+\t*num |= 0x20;\n+      if (flags & SECTION_TLS)\n+\t*num |= 0x400;\n+      if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n+\t*num |= 0x200;\n+\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Implement the TARGET_ASM_FUNCTION_SECTION hook.\n+\n+   If pure-code is passed as an option, make sure all functions are in\n+   sections that have the SHF_ARM_PURECODE attribute.  */\n+\n+static section *\n+arm_function_section (tree decl, enum node_frequency freq,\n+\t\t      bool startup, bool exit)\n+{\n+  const char * section_name;\n+  section * sec;\n+\n+  if (!decl || TREE_CODE (decl) != FUNCTION_DECL)\n+    return default_function_section (decl, freq, startup, exit);\n+\n+  if (!target_pure_code)\n+    return default_function_section (decl, freq, startup, exit);\n+\n+\n+  section_name = DECL_SECTION_NAME (decl);\n+\n+  /* If a function is not in a named section then it falls under the 'default'\n+     text section, also known as '.text'.  We can preserve previous behavior as\n+     the default text section already has the SHF_ARM_PURECODE section\n+     attribute.  */\n+  if (!section_name)\n+    {\n+      section *default_sec = default_function_section (decl, freq, startup,\n+\t\t\t\t\t\t       exit);\n+\n+      /* If default_sec is not null, then it must be a special section like for\n+\t example .text.startup.  We set the pure-code attribute and return the\n+\t same section to preserve existing behavior.  */\n+      if (default_sec)\n+\t  default_sec->common.flags |= SECTION_ARM_PURECODE;\n+      return default_sec;\n+    }\n+\n+  /* Otherwise look whether a section has already been created with\n+     'section_name'.  */\n+  sec = get_named_section (decl, section_name, 0);\n+  if (!sec)\n+    /* If that is not the case passing NULL as the section's name to\n+       'get_named_section' will create a section with the declaration's\n+       section name.  */\n+    sec = get_named_section (decl, NULL, 0);\n+\n+  /* Set the SHF_ARM_PURECODE attribute.  */\n+  sec->common.flags |= SECTION_ARM_PURECODE;\n+\n+  return sec;\n+}\n+\n+/* Implements the TARGET_SECTION_FLAGS hook.\n+\n+   If DECL is a function declaration and pure-code is passed as an option\n+   then add the SFH_ARM_PURECODE attribute to the section flags.  NAME is the\n+   section's name and RELOC indicates whether the declarations initializer may\n+   contain runtime relocations.  */\n+\n+static unsigned int\n+arm_elf_section_type_flags (tree decl, const char *name, int reloc)\n+{\n+  unsigned int flags = default_section_type_flags (decl, name, reloc);\n+\n+  if (decl && TREE_CODE (decl) == FUNCTION_DECL && target_pure_code)\n+    flags |= SECTION_ARM_PURECODE;\n+\n+  return flags;\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "31eb45a05b0a168c9f27c7c4984b5e9a2718f62f", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -2276,4 +2276,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /* For switching between functions with different target attributes.  */\n #define SWITCHABLE_TARGET 1\n \n+/* Define SECTION_ARM_PURECODE as the ARM specific section attribute\n+   representation for SHF_ARM_PURECODE in GCC.  */\n+#define SECTION_ARM_PURECODE SECTION_MACH_DEP\n+\n #endif /* ! GCC_ARM_H */"}, {"sha": "4df856a98d7934befdd6f9c942763f998c9f0f26", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -8518,7 +8518,7 @@\n    (match_operand:SI 2 \"const_int_operand\" \"\")\t; total range\n    (match_operand:SI 3 \"\" \"\")\t\t\t; table label\n    (match_operand:SI 4 \"\" \"\")]\t\t\t; Out of range label\n-  \"TARGET_32BIT || optimize_size || flag_pic\"\n+  \"(TARGET_32BIT || optimize_size || flag_pic) && !target_pure_code\"\n   \"\n   {\n     enum insn_code code;"}, {"sha": "35f047e2de1659c2b426cf42dbbdae5be62cbfef", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -281,3 +281,7 @@ Assume loading data from flash is slower than fetching instructions.\n masm-syntax-unified\n Target Report Var(inline_asm_unified) Init(0) Save\n Assume unified syntax for inline assembly code.\n+\n+mpure-code\n+Target Report Var(target_pure_code) Init(0)\n+Do not allow constant data to be placed in code sections."}, {"sha": "bc4eb86f1da5beabf32647637eb87a3fc17a6c6a", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -104,7 +104,8 @@\n    the code more efficient, but for Thumb-1 it's better to put them out of\n    band unless we are generating compressed tables.  */\n #define JUMP_TABLES_IN_TEXT_SECTION\t\t\t\t\t\\\n-   (TARGET_32BIT || (TARGET_THUMB && (optimize_size || flag_pic)))\n+   ((TARGET_32BIT || (TARGET_THUMB && (optimize_size || flag_pic))) \\\n+    && !target_pure_code)\n \n #ifndef LINK_SPEC\n #define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} -X\""}, {"sha": "d474da6a39de52f729ccb9887ab9ee00c48e6b5a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -641,7 +641,8 @@ Objective-C and Objective-C++ Dialects}.\n -mneon-for-64bits @gol\n -mslow-flash-data @gol\n -masm-syntax-unified @gol\n--mrestrict-it}\n+-mrestrict-it @gol\n+-mpure-code}\n \n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n@@ -14844,6 +14845,14 @@ Print CPU tuning information as comment in assembler file.  This is\n an option used only for regression testing of the compiler and not\n intended for ordinary use in compiling code.  This option is disabled\n by default.\n+\n+@item -mpure-code\n+@opindex mpure-code\n+Do not allow constant data to be placed in code sections.\n+Additionally, when compiling for ELF object format give all text sections the\n+ELF processor-specific section attribute @code{SHF_ARM_PURECODE}.  This option\n+is only available when generating non-pic code for ARMv7-M targets.\n+\n @end table\n \n @node AVR Options"}, {"sha": "68a77e81aa1e2abcc15bc9088011295df699c4d0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -7568,6 +7568,18 @@ is non-NULL, it is the @code{VAR_DECL} or @code{FUNCTION_DECL} with which\n this section is associated.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_ASM_ELF_FLAGS_NUMERIC (unsigned int @var{flags}, unsigned int *@var{num})\n+This hook can be used to encode ELF section flags for which no letter\n+code has been defined in the assembler.  It is called by\n+@code{default_asm_named_section} whenever the section flags need to be\n+emitted in the assembler output.  If the hook returns true, then the\n+numerical value for ELF section flags should be calculated from\n+@var{flags} and saved in @var{*num}; the value will be printed out\n+instead of the normal sequence of letter codes.  If the hook is not\n+defined, or if it returns false, then @var{num} will be ignored and the\n+traditional letter sequence will be emitted.\n+@end deftypefn\n+\n @deftypefn {Target Hook} {section *} TARGET_ASM_FUNCTION_SECTION (tree @var{decl}, enum node_frequency @var{freq}, bool @var{startup}, bool @var{exit})\n Return preferred text (sub)section for function @var{decl}.\n Main purpose of this function is to separate cold, normal and hot"}, {"sha": "f1cfc863f30d25c5ef3d0bba055205d5280b305d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -5219,6 +5219,8 @@ of the filename using this macro.\n \n @hook TARGET_ASM_NAMED_SECTION\n \n+@hook TARGET_ASM_ELF_FLAGS_NUMERIC\n+\n @hook TARGET_ASM_FUNCTION_SECTION\n \n @hook TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS"}, {"sha": "1e925645c3173f8d97e104b9b2f480fca2ede438", "filename": "gcc/hooks.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -481,3 +481,13 @@ void\n hook_void_gcc_optionsp (struct gcc_options *opts ATTRIBUTE_UNUSED)\n {\n }\n+\n+/* Generic hook that takes an unsigned int, an unsigned int pointer and\n+   returns false.  */\n+\n+bool\n+hook_uint_uintp_false (unsigned int, unsigned int *)\n+{\n+  return false;\n+}\n+"}, {"sha": "ac693318adaaa230ea300f10bc37282881d9da6f", "filename": "gcc/target.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -432,6 +432,22 @@ this section is associated.\",\n  void, (const char *name, unsigned int flags, tree decl),\n  default_no_named_section)\n \n+/* Tell assembler what section attributes to assign this elf section\n+   declaration, using their numerical value.  */\n+DEFHOOK\n+(elf_flags_numeric,\n+ \"This hook can be used to encode ELF section flags for which no letter\\n\\\n+code has been defined in the assembler.  It is called by\\n\\\n+@code{default_asm_named_section} whenever the section flags need to be\\n\\\n+emitted in the assembler output.  If the hook returns true, then the\\n\\\n+numerical value for ELF section flags should be calculated from\\n\\\n+@var{flags} and saved in @var{*num}; the value will be printed out\\n\\\n+instead of the normal sequence of letter codes.  If the hook is not\\n\\\n+defined, or if it returns false, then @var{num} will be ignored and the\\n\\\n+traditional letter sequence will be emitted.\",\n+ bool, (unsigned int flags, unsigned int *num),\n+ hook_uint_uintp_false)\n+\n /* Return preferred text (sub)section for function DECL.\n    Main purpose of this function is to separate cold, normal and hot\n    functions. STARTUP is true when function is known to be used only "}, {"sha": "37e220db058ddb8ddcbb37a0a43b45e3051486f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -1,3 +1,10 @@\n+2016-09-22  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Terry Guo  <terry.guo@arm.com>\n+\n+\t* gcc.target/arm/pure-code/ffunction-sections.c: New.\n+\t* gcc.target/arm/pure-code/no-literal-pool.c: New.\n+\t* gcc.target/arm/pure-code/pure-code.exp: New.\n+\n 2016-09-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/debug/dwarf2/const-2b.c: Also compile for x86_64-*-*."}, {"sha": "72cba8678709f2568372120523a2db4dabf7130d", "filename": "gcc/varasm.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0ee70cc0000fe25484cb0d3b2ac2904d2007e5cf", "patch": "@@ -6256,6 +6256,7 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \t\t\t       tree decl)\n {\n   char flagchars[11], *f = flagchars;\n+  unsigned int numeric_value = 0;\n \n   /* If we have already declared this section, we can use an\n      abbreviated form to switch back to it -- unless this section is\n@@ -6268,31 +6269,38 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n       return;\n     }\n \n-  if (!(flags & SECTION_DEBUG))\n-    *f++ = 'a';\n+  /* If we have a machine specific flag, then use the numeric value to pass\n+     this on to GAS.  */\n+  if (targetm.asm_out.elf_flags_numeric (flags, &numeric_value))\n+      snprintf (f, sizeof (flagchars), \"0x%08x\", numeric_value);\n+  else\n+    {\n+      if (!(flags & SECTION_DEBUG))\n+\t*f++ = 'a';\n #if defined (HAVE_GAS_SECTION_EXCLUDE) && HAVE_GAS_SECTION_EXCLUDE == 1\n-  if (flags & SECTION_EXCLUDE)\n-    *f++ = 'e';\n+      if (flags & SECTION_EXCLUDE)\n+\t*f++ = 'e';\n #endif\n-  if (flags & SECTION_WRITE)\n-    *f++ = 'w';\n-  if (flags & SECTION_CODE)\n-    *f++ = 'x';\n-  if (flags & SECTION_SMALL)\n-    *f++ = 's';\n-  if (flags & SECTION_MERGE)\n-    *f++ = 'M';\n-  if (flags & SECTION_STRINGS)\n-    *f++ = 'S';\n-  if (flags & SECTION_TLS)\n-    *f++ = TLS_SECTION_ASM_FLAG;\n-  if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n-    *f++ = 'G';\n+      if (flags & SECTION_WRITE)\n+\t*f++ = 'w';\n+      if (flags & SECTION_CODE)\n+\t*f++ = 'x';\n+      if (flags & SECTION_SMALL)\n+\t*f++ = 's';\n+      if (flags & SECTION_MERGE)\n+\t*f++ = 'M';\n+      if (flags & SECTION_STRINGS)\n+\t*f++ = 'S';\n+      if (flags & SECTION_TLS)\n+\t*f++ = TLS_SECTION_ASM_FLAG;\n+      if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n+\t*f++ = 'G';\n #ifdef MACH_DEP_SECTION_ASM_FLAG\n-  if (flags & SECTION_MACH_DEP)\n-    *f++ = MACH_DEP_SECTION_ASM_FLAG;\n+      if (flags & SECTION_MACH_DEP)\n+\t*f++ = MACH_DEP_SECTION_ASM_FLAG;\n #endif\n-  *f = '\\0';\n+      *f = '\\0';\n+    }\n \n   fprintf (asm_out_file, \"\\t.section\\t%s,\\\"%s\\\"\", name, flagchars);\n "}]}