{"sha": "38e01f9ec96801f325e382746ba2d424adea5eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlMDFmOWVjOTY4MDFmMzI1ZTM4Mjc0NmJhMmQ0MjRhZGVhNWVlZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-27T17:43:44Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-27T17:43:44Z"}, "message": "move TS_STATEMENT_LIST to be a substructure of TS_TYPED\n\nmove TS_STATEMENT_LIST to be a substructure of TS_TYPED\ngcc/\n\t* c-decl.c (c_push_function_context): Copy the current statement\n\tlist stack.\n\t(add_stmt): Check building_stmt_list_p and push_stmt if necessary.\n\t(finish_struct): Call building_stmt_list_p instead of checking\n\tcur_stmt_list.\n\t* c-parser.c (c_parser_postfix_expression): Likewise.\n\t* c-typeck.c (c_end_compound_stmt): Likewise.\n\t* print-tree.c (print_node) [STATEMENT_LIST]: Don't print TREE_CHAIN.\n\t* tree-iterator.c (stmt_list_cache): Change to a VEC.\n\t(alloc_stmt_list): Adjust for stmt_list_cache's new type.\n\t(free_stmt_list): Likewise.\n\t* tree.h (struct tree_statement_list): Include typed_tree instead\n\tof tree_common.\n\t* tree.c (initialize_tree_contains_struct): Mark TS_STATEMENT_LIST\n\tas TS_TYPED instead of TS_COMMON.\n\ngcc/c-family/\n\t* c-common.h (struct stmt_tree_s) [x_cur_stmt_list]: Change to a VEC.\n\t(stmt_list_stack): Define.\n\t(cur_stmt_list): Adjust for new type of x_cur_stmt_list.\n\t* c-semantics.c (push_stmt_list, pop_stmt_list): Likewise.\n\ngcc/cp/\n\t* cp-tree.h (building_stmt_tree): Delete.\n\t* decl.c (save_function_data): Tweak initializer for x_cur_stmt_list.\n\t(build_aggr_init_full_exprs): Call building_stmt_list_p\n\tinstead of building_stmt_tree.\n\t(initialize_local_var): Likewise.\n\t(finish_function): Likewise.\n\t* decl2.c (finish_anon_union): Likewise.\n\t* init.c (begin_init_stmts): Likewise.\n\t(finish_init_stmts): Likewise.\n\t(expand_aggr_init_1): Likewise.\n\t* name-lookup.c (do_local_using_decl): Likewise.\n\t(do_namespace_alias): Likewise.\n\t(do_using_directive): Likewise.\n\t(cp_emit_debug_info_for_using): Likewise.\n\t* semantics.c (add_stmt): Assert that stmt_list_stack is non-empty.\n\nFrom-SVN: r174343", "tree": {"sha": "308837cc489c3a37ca81ae52d342d7b9bd43b7c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/308837cc489c3a37ca81ae52d342d7b9bd43b7c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e01f9ec96801f325e382746ba2d424adea5eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e01f9ec96801f325e382746ba2d424adea5eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e01f9ec96801f325e382746ba2d424adea5eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e01f9ec96801f325e382746ba2d424adea5eee/comments", "author": null, "committer": null, "parents": [{"sha": "e330aa5b3568877fb26267fa0f277de320821b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e330aa5b3568877fb26267fa0f277de320821b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e330aa5b3568877fb26267fa0f277de320821b14"}], "stats": {"total": 141, "additions": 93, "deletions": 48}, "files": [{"sha": "d0ef664983b736d4abeafe06658296cfeec13355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -1,3 +1,21 @@\n+2011-05-27  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-decl.c (c_push_function_context): Copy the current statement\n+\tlist stack.\n+\t(add_stmt): Check building_stmt_list_p and push_stmt if necessary.\n+\t(finish_struct): Call building_stmt_list_p instead of checking\n+\tcur_stmt_list.\n+\t* c-parser.c (c_parser_postfix_expression): Likewise.\n+\t* c-typeck.c (c_end_compound_stmt): Likewise.\n+\t* print-tree.c (print_node) [STATEMENT_LIST]: Don't print TREE_CHAIN.\n+\t* tree-iterator.c (stmt_list_cache): Change to a VEC.\n+\t(alloc_stmt_list): Adjust for stmt_list_cache's new type.\n+\t(free_stmt_list): Likewise.\n+\t* tree.h (struct tree_statement_list): Include typed_tree instead\n+\tof tree_common.\n+\t* tree.c (initialize_tree_contains_struct): Mark TS_STATEMENT_LIST\n+\tas TS_TYPED instead of TS_COMMON.\n+\n 2011-05-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \t    Uros Bizjak <ubizjak@gmail.com>\n "}, {"sha": "1d43126fd467ffb8369d48b8390bd52afee83e71", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -552,6 +552,8 @@ add_stmt (tree t)\n \n   /* Add T to the statement-tree.  Non-side-effect statements need to be\n      recorded during statement expressions.  */\n+  if (!building_stmt_list_p ())\n+    push_stmt_list ();\n   append_to_statement_list_force (t, &cur_stmt_list);\n \n   return t;\n@@ -7188,7 +7190,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n   /* If we're inside a function proper, i.e. not file-scope and not still\n      parsing parameters, then arrange for the size of a variable sized type\n      to be bound now.  */\n-  if (cur_stmt_list && variably_modified_type_p (t, NULL_TREE))\n+  if (building_stmt_list_p () && variably_modified_type_p (t, NULL_TREE))\n     add_stmt (build_stmt (loc,\n \t\t\t  DECL_EXPR, build_decl (loc, TYPE_DECL, NULL, t)));\n \n@@ -8424,6 +8426,8 @@ c_push_function_context (void)\n   cfun->language = p;\n \n   p->base.x_stmt_tree = c_stmt_tree;\n+  c_stmt_tree.x_cur_stmt_list\n+    = VEC_copy (tree, gc, c_stmt_tree.x_cur_stmt_list);\n   p->x_break_label = c_break_label;\n   p->x_cont_label = c_cont_label;\n   p->x_switch_stack = c_switch_stack;"}, {"sha": "557f89634e9b8dd84b1b3d71fcfea5363bc3ab03", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -1,3 +1,10 @@\n+2011-05-27  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-common.h (struct stmt_tree_s) [x_cur_stmt_list]: Change to a VEC.\n+\t(stmt_list_stack): Define.\n+\t(cur_stmt_list): Adjust for new type of x_cur_stmt_list.\n+\t* c-semantics.c (push_stmt_list, pop_stmt_list): Likewise.\n+\n 2011-05-26  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.c (warning_candidate_p): Check for BLOCKs."}, {"sha": "1b658b131475c138d6fcb270335d8f5f2a5d9698", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -452,8 +452,8 @@ typedef enum ref_operator {\n /* Information about a statement tree.  */\n \n struct GTY(()) stmt_tree_s {\n-  /* The current statement list being collected.  */\n-  tree x_cur_stmt_list;\n+  /* A stack of statement lists being collected.  */\n+  VEC(tree,gc) *x_cur_stmt_list;\n \n   /* In C++, Nonzero if we should treat statements as full\n      expressions.  In particular, this variable is no-zero if at the\n@@ -483,11 +483,17 @@ struct GTY(()) c_language_function {\n   struct stmt_tree_s x_stmt_tree;\n };\n \n+#define stmt_list_stack (current_stmt_tree ()->x_cur_stmt_list)\n+\n /* When building a statement-tree, this is the current statement list\n-   being collected.  It's TREE_CHAIN is a back-pointer to the previous\n-   statement list.  */\n+   being collected.  We define it in this convoluted way, rather than\n+   using VEC_last, because it must be an lvalue.  */\n+\n+#define cur_stmt_list\t\t\t\t\t\t\t\\\n+  (*(VEC_address (tree, stmt_list_stack)\t\t\t\t\\\n+     + VEC_length (tree, stmt_list_stack) - 1))\n \n-#define cur_stmt_list (current_stmt_tree ()->x_cur_stmt_list)\n+#define building_stmt_list_p() (!VEC_empty (tree, stmt_list_stack))\n \n /* Language-specific hooks.  */\n "}, {"sha": "cb0f2be314e8f87be62bdca9a18ef8bb8da4eaa1", "filename": "gcc/c-family/c-semantics.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-family%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-family%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-semantics.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -38,8 +38,7 @@ push_stmt_list (void)\n {\n   tree t;\n   t = alloc_stmt_list ();\n-  TREE_CHAIN (t) = cur_stmt_list;\n-  cur_stmt_list = t;\n+  VEC_safe_push (tree, gc, stmt_list_stack, t);\n   return t;\n }\n \n@@ -48,21 +47,23 @@ push_stmt_list (void)\n tree\n pop_stmt_list (tree t)\n {\n-  tree u = cur_stmt_list, chain;\n+  tree u = NULL_TREE;\n \n   /* Pop statement lists until we reach the target level.  The extra\n      nestings will be due to outstanding cleanups.  */\n   while (1)\n     {\n-      chain = TREE_CHAIN (u);\n-      TREE_CHAIN (u) = NULL_TREE;\n-      if (chain)\n-\tSTATEMENT_LIST_HAS_LABEL (chain) |= STATEMENT_LIST_HAS_LABEL (u);\n+      u = VEC_pop (tree, stmt_list_stack);\n+      if (!VEC_empty (tree, stmt_list_stack))\n+\t{\n+\t  tree x = VEC_last (tree, stmt_list_stack);\n+\t  STATEMENT_LIST_HAS_LABEL (x) |= STATEMENT_LIST_HAS_LABEL (u);\n+\t}\n       if (t == u)\n \tbreak;\n-      u = chain;\n     }\n-  cur_stmt_list = chain;\n+\n+  gcc_assert (u != NULL_TREE);\n \n   /* If the statement list is completely empty, just return it.  This is\n      just as good small as build_empty_stmt, with the advantage that"}, {"sha": "65966a9b50ff0108fe7689f98a53f1ab3f3dccc2", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -6126,7 +6126,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  brace_loc = c_parser_peek_token (parser)->location;\n \t  c_parser_consume_token (parser);\n-\t  if (cur_stmt_list == NULL)\n+\t  if (!building_stmt_list_p ())\n \t    {\n \t      error_at (loc, \"braced-group within expression allowed \"\n \t\t\t\"only inside a function\");"}, {"sha": "a4516064e509f1243d9e1b6ccfb9e5f818caf052", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -9293,7 +9293,7 @@ c_end_compound_stmt (location_t loc, tree stmt, bool do_scope)\n      do the wrong thing for ({ { 1; } }) or ({ 1; { } }).  In particular,\n      STATEMENT_LISTs merge, and thus we can lose track of what statement\n      was really last.  */\n-  if (cur_stmt_list\n+  if (building_stmt_list_p ()\n       && STATEMENT_LIST_STMT_EXPR (cur_stmt_list)\n       && TREE_CODE (stmt) != BIND_EXPR)\n     {"}, {"sha": "9692c40f58eea36fb9de320bbec283572f09c40c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -1,3 +1,21 @@\n+2011-05-27  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cp-tree.h (building_stmt_tree): Delete.\n+\t* decl.c (save_function_data): Tweak initializer for x_cur_stmt_list.\n+\t(build_aggr_init_full_exprs): Call building_stmt_list_p\n+\tinstead of building_stmt_tree.\n+\t(initialize_local_var): Likewise.\n+\t(finish_function): Likewise.\n+\t* decl2.c (finish_anon_union): Likewise.\n+\t* init.c (begin_init_stmts): Likewise.\n+\t(finish_init_stmts): Likewise.\n+\t(expand_aggr_init_1): Likewise.\n+\t* name-lookup.c (do_local_using_decl): Likewise.\n+\t(do_namespace_alias): Likewise.\n+\t(do_using_directive): Likewise.\n+\t(cp_emit_debug_info_for_using): Likewise.\n+\t* semantics.c (add_stmt): Assert that stmt_list_stack is non-empty.\n+\n 2011-05-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/42056"}, {"sha": "0395db7a27d97492ad1cea946f4c18fda9eecd05", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -293,10 +293,6 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define same_type_p(TYPE1, TYPE2) \\\n   comptypes ((TYPE1), (TYPE2), COMPARE_STRICT)\n \n-/* Nonzero if we are presently building a statement tree, rather\n-   than expanding each statement as we encounter it.  */\n-#define building_stmt_tree()  (cur_stmt_list != NULL_TREE)\n-\n /* Returns nonzero iff NODE is a declaration for the global function\n    `main'.  */\n #define DECL_MAIN_P(NODE)\t\t\t\t\\"}, {"sha": "3cc25bdbe332d589b4526f4a7f95fdd94d4bf329", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -5353,13 +5353,13 @@ build_aggr_init_full_exprs (tree decl, tree init, int flags)\n      \n {\n   int saved_stmts_are_full_exprs_p = 0;\n-  if (building_stmt_tree ())\n+  if (building_stmt_list_p ())\n     {\n       saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\n       current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n     }\n   init = build_aggr_init (decl, init, flags, tf_warning_or_error);\n-  if (building_stmt_tree ())\n+  if (building_stmt_list_p ())\n     current_stmt_tree ()->stmts_are_full_exprs_p =\n       saved_stmts_are_full_exprs_p;\n   return init;\n@@ -5752,7 +5752,7 @@ initialize_local_var (tree decl, tree init)\n \t  if (cleanup && TREE_CODE (type) != ARRAY_TYPE)\n \t    wrap_temporary_cleanups (init, cleanup);\n \n-\t  gcc_assert (building_stmt_tree ());\n+\t  gcc_assert (building_stmt_list_p ());\n \t  saved_stmts_are_full_exprs_p = stmts_are_full_exprs_p ();\n \t  current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n \t  finish_expr_stmt (init);\n@@ -12913,7 +12913,7 @@ save_function_data (tree decl)\n   DECL_SAVED_FUNCTION_DATA (decl) = f;\n \n   /* Clear out the bits we don't need.  */\n-  f->base.x_stmt_tree.x_cur_stmt_list = NULL_TREE;\n+  f->base.x_stmt_tree.x_cur_stmt_list = NULL;\n   f->bindings = NULL;\n   f->x_local_names = NULL;\n }\n@@ -13158,7 +13158,7 @@ finish_function (int flags)\n       This caused &foo to be of type ptr-to-const-function\n       which then got a warning when stored in a ptr-to-function variable.  */\n \n-  gcc_assert (building_stmt_tree ());\n+  gcc_assert (building_stmt_list_p ());\n   /* The current function is being defined, so its DECL_INITIAL should\n      be set, and unless there's a multiple definition, it should be\n      error_mark_node.  */"}, {"sha": "9005f7eba40d76a819a8f75f87dd6e863a8711c2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -1437,7 +1437,7 @@ finish_anon_union (tree anon_union_decl)\n     }\n \n   pushdecl (anon_union_decl);\n-  if (building_stmt_tree ()\n+  if (building_stmt_list_p ()\n       && at_function_scope_p ())\n     add_decl_expr (anon_union_decl);\n   else if (!processing_template_decl)"}, {"sha": "d92dacce888a97a42b36e3ae49da912365cff607", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -61,7 +61,7 @@ static int diagnose_uninitialized_cst_or_ref_member_1 (tree, tree, bool, bool);\n static bool\n begin_init_stmts (tree *stmt_expr_p, tree *compound_stmt_p)\n {\n-  bool is_global = !building_stmt_tree ();\n+  bool is_global = !building_stmt_list_p ();\n \n   *stmt_expr_p = begin_stmt_expr ();\n   *compound_stmt_p = begin_compound_stmt (BCS_NO_SCOPE);\n@@ -79,7 +79,7 @@ finish_init_stmts (bool is_global, tree stmt_expr, tree compound_stmt)\n \n   stmt_expr = finish_stmt_expr (stmt_expr, true);\n \n-  gcc_assert (!building_stmt_tree () == is_global);\n+  gcc_assert (!building_stmt_list_p () == is_global);\n \n   return stmt_expr;\n }\n@@ -1552,7 +1552,7 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n   tree type = TREE_TYPE (exp);\n \n   gcc_assert (init != error_mark_node && type != error_mark_node);\n-  gcc_assert (building_stmt_tree ());\n+  gcc_assert (building_stmt_list_p ());\n \n   /* Use a function returning the desired type to initialize EXP for us.\n      If the function is a constructor, and its first argument is"}, {"sha": "0e762fd6aca0e64ee5c59246d30d9d606ecf4ba5", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -2475,7 +2475,7 @@ do_local_using_decl (tree decl, tree scope, tree name)\n   if (decl == NULL_TREE)\n     return;\n \n-  if (building_stmt_tree ()\n+  if (building_stmt_list_p ()\n       && at_function_scope_p ())\n     add_decl_expr (decl);\n \n@@ -3570,7 +3570,7 @@ do_namespace_alias (tree alias, tree name_space)\n   pushdecl (alias);\n \n   /* Emit debug info for namespace alias.  */\n-  if (!building_stmt_tree ())\n+  if (!building_stmt_list_p ())\n     (*debug_hooks->global_decl) (alias);\n }\n \n@@ -3718,7 +3718,7 @@ do_using_directive (tree name_space)\n \n   gcc_assert (TREE_CODE (name_space) == NAMESPACE_DECL);\n \n-  if (building_stmt_tree ())\n+  if (building_stmt_list_p ())\n     add_stmt (build_stmt (input_location, USING_STMT, name_space));\n   name_space = ORIGINAL_NAMESPACE (name_space);\n \n@@ -5890,7 +5890,7 @@ cp_emit_debug_info_for_using (tree t, tree context)\n   for (t = OVL_CURRENT (t); t; t = OVL_NEXT (t))\n     if (TREE_CODE (t) != TEMPLATE_DECL)\n       {\n-\tif (building_stmt_tree ())\n+\tif (building_stmt_list_p ())\n \t  add_stmt (build_stmt (input_location, USING_STMT, t));\n \telse\n \t  (*debug_hooks->imported_module_or_decl) (t, NULL_TREE, context, false);"}, {"sha": "557bf4ce0b1de758b86fbf28effd0589fe58b61c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -393,6 +393,7 @@ add_stmt (tree t)\n \n   /* Add T to the statement-tree.  Non-side-effect statements need to be\n      recorded during statement expressions.  */\n+  gcc_checking_assert (!VEC_empty (tree, stmt_list_stack));\n   append_to_statement_list_force (t, &cur_stmt_list);\n \n   return t;"}, {"sha": "1a1e33f1342c78f220ad3676df3bbb1d236e8951", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -911,7 +911,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t\tprint_node (file, \"stmt\", tsi_stmt (i), indent + 4);\n \t      }\n \t  }\n-\t  print_node (file, \"chain\", TREE_CHAIN (node), indent + 4);\n \t  break;\n \n \tcase BLOCK:"}, {"sha": "44b6bed7ad8bb97f367eecb4f98ec8acb3f0e7bb", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -31,17 +31,16 @@ along with GCC; see the file COPYING3.  If not see\n /* This is a cache of STATEMENT_LIST nodes.  We create and destroy them\n    fairly often during gimplification.  */\n \n-static GTY ((deletable (\"\"))) tree stmt_list_cache;\n+static GTY ((deletable (\"\"))) VEC(tree,gc) *stmt_list_cache;\n \n tree\n alloc_stmt_list (void)\n {\n-  tree list = stmt_list_cache;\n-  if (list)\n+  tree list;\n+  if (!VEC_empty (tree, stmt_list_cache))\n     {\n-      stmt_list_cache = TREE_CHAIN (list);\n-      gcc_assert (stmt_list_cache != list);\n-      memset (list, 0, sizeof(struct tree_common));\n+      list = VEC_pop (tree, stmt_list_cache);\n+      memset (list, 0, sizeof(struct tree_base));\n       TREE_SET_CODE (list, STATEMENT_LIST);\n     }\n   else\n@@ -55,11 +54,7 @@ free_stmt_list (tree t)\n {\n   gcc_assert (!STATEMENT_LIST_HEAD (t));\n   gcc_assert (!STATEMENT_LIST_TAIL (t));\n-  /* If this triggers, it's a sign that the same list is being freed\n-     twice.  */\n-  gcc_assert (t != stmt_list_cache || stmt_list_cache == NULL);\n-  TREE_CHAIN (t) = stmt_list_cache;\n-  stmt_list_cache = t;\n+  VEC_safe_push (tree, gc, stmt_list_cache, t);\n }\n \n /* A subroutine of append_to_statement_list{,_force}.  T is not NULL.  */"}, {"sha": "85c0516081f912cc08453e05f1c6695899d96ac4", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -383,6 +383,7 @@ initialize_tree_contains_struct (void)\n \tcase TS_CONSTRUCTOR:\n \tcase TS_EXP:\n \tcase TS_IDENTIFIER:\n+\tcase TS_STATEMENT_LIST:\n \t  MARK_TS_TYPED (code);\n \t  break;\n \n@@ -391,7 +392,6 @@ initialize_tree_contains_struct (void)\n \tcase TS_LIST:\n \tcase TS_VEC:\n \tcase TS_BINFO:\n-\tcase TS_STATEMENT_LIST:\n \tcase TS_OMP_CLAUSE:\n \tcase TS_OPTIMIZATION:\n \tcase TS_TARGET_OPTION:"}, {"sha": "f63764a56d96fc7d893e0edc57db559add82ea5b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e01f9ec96801f325e382746ba2d424adea5eee/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=38e01f9ec96801f325e382746ba2d424adea5eee", "patch": "@@ -3556,7 +3556,7 @@ struct GTY ((chain_next (\"%h.next\"), chain_prev (\"%h.prev\"))) tree_statement_lis\n \n struct GTY(()) tree_statement_list\n  {\n-  struct tree_common common;\n+  struct tree_typed typed;\n   struct tree_statement_list_node *head;\n   struct tree_statement_list_node *tail;\n };"}]}