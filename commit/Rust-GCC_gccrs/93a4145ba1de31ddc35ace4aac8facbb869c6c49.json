{"sha": "93a4145ba1de31ddc35ace4aac8facbb869c6c49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhNDE0NWJhMWRlMzFkZGMzNWFjZTRhYWM4ZmFjYmI4NjljNmM0OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-26T16:24:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-26T16:24:48Z"}, "message": "i386.md (*cmpqi_ext_1): Merge with *cmpqi_ext_1_rex64 using nox64 isa attribute.\n\n\t* config/i386/i386.md (*cmpqi_ext_1): Merge with *cmpqi_ext_1_rex64\n\tusing nox64 isa attribute.  Use nonimmediate_x86nomem_operand as\n\toperand 0 predicate.\n\t(*cmpqi_ext_3): Merge with *cmpqi_ext_3_rex64 using nox64 isa\n\tattribute.  Use general_x64nomem_operand as operand 1 predicate.\n\t(*movqi_extv_1): Merge with *movqi_extv_1_rex64 using nox64 isa\n\tattribute.  Use nonimmediate_x64nomem_operand as operand 0 predicate.\n\t(*movqi_extzv_2): Merge with *movqi_extzv_2_rex64 using nox64 isa\n\tattribute.  Use nonimmediate_x64nomem_operand as operand 0 predicate.\n\t(mov<mode>_insv_1): Remove expander.  Merge insn with\n\tmovsi_insv_1 using SWI48 mode iterator and nox64 isa attribute.\n\tUse general_x64nomem_operand as operand 1 predicate.\n\t(addqi_ext_1): Merge with *addqi_ext_1_rex64 using nox64 isa attribute.\n\t(*testqi_ext_1): Merge with *testqi_ext_1_rex64 using nox64 isa\n\tattribute.  Use nonimmediate_x64nomem_operand as operand 1 predicate.\n\t(*andqi_ext_1): Merge with *andqi_ext_1_rex64 using nox64 isa\n\tattribute.  Use nonimmediate_x64nomem_operand as operand 2 predicate.\n\t(*<code>qi_ext_1): Merge with *<code>qi_ext_1_rex64 using nox64 isa\n\tattribute.  Use nonimmediate_x64nomem_operand as operand 1 predicate.\n\t(*xorqi_cc_ext_1): Merge with *xorqi_cc_ext_1_rex64 using nox64\n\tisa attribute.  Use general_x64nomem_operand as operand 2 predicate.\n\t* config/i386/predicates.md (nonimmediate_x64nomem_operand): New.\n\t(general_x64nomem_operand): Ditto.\n\nFrom-SVN: r197114", "tree": {"sha": "a7fffe54e49ac1c3934a25efe22e177b202aabd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7fffe54e49ac1c3934a25efe22e177b202aabd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93a4145ba1de31ddc35ace4aac8facbb869c6c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a4145ba1de31ddc35ace4aac8facbb869c6c49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a4145ba1de31ddc35ace4aac8facbb869c6c49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a4145ba1de31ddc35ace4aac8facbb869c6c49/comments", "author": null, "committer": null, "parents": [{"sha": "c6a9ed5a418fc4daabc55d864b791d3886a69fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a9ed5a418fc4daabc55d864b791d3886a69fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a9ed5a418fc4daabc55d864b791d3886a69fe6"}], "stats": {"total": 366, "additions": 99, "deletions": 267}, "files": [{"sha": "6937c44c202b52338b68a4850c0b638d80976096", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a4145ba1de31ddc35ace4aac8facbb869c6c49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a4145ba1de31ddc35ace4aac8facbb869c6c49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93a4145ba1de31ddc35ace4aac8facbb869c6c49", "patch": "@@ -1,13 +1,37 @@\n+2013-03-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*cmpqi_ext_1): Merge with *cmpqi_ext_1_rex64\n+\tusing nox64 isa attribute.  Use nonimmediate_x86nomem_operand as\n+\toperand 0 predicate.\n+\t(*cmpqi_ext_3): Merge with *cmpqi_ext_3_rex64 using nox64 isa\n+\tattribute.  Use general_x64nomem_operand as operand 1 predicate.\n+\t(*movqi_extv_1): Merge with *movqi_extv_1_rex64 using nox64 isa\n+\tattribute.  Use nonimmediate_x64nomem_operand as operand 0 predicate.\n+\t(*movqi_extzv_2): Merge with *movqi_extzv_2_rex64 using nox64 isa\n+\tattribute.  Use nonimmediate_x64nomem_operand as operand 0 predicate.\n+\t(mov<mode>_insv_1): Remove expander.  Merge insn with\n+\tmovsi_insv_1 using SWI48 mode iterator and nox64 isa attribute.\n+\tUse general_x64nomem_operand as operand 1 predicate.\n+\t(addqi_ext_1): Merge with *addqi_ext_1_rex64 using nox64 isa attribute.\n+\t(*testqi_ext_1): Merge with *testqi_ext_1_rex64 using nox64 isa\n+\tattribute.  Use nonimmediate_x64nomem_operand as operand 1 predicate.\n+\t(*andqi_ext_1): Merge with *andqi_ext_1_rex64 using nox64 isa\n+\tattribute.  Use nonimmediate_x64nomem_operand as operand 2 predicate.\n+\t(*<code>qi_ext_1): Merge with *<code>qi_ext_1_rex64 using nox64 isa\n+\tattribute.  Use nonimmediate_x64nomem_operand as operand 1 predicate.\n+\t(*xorqi_cc_ext_1): Merge with *xorqi_cc_ext_1_rex64 using nox64\n+\tisa attribute.  Use general_x64nomem_operand as operand 2 predicate.\n+\t* config/i386/predicates.md (nonimmediate_x64nomem_operand): New.\n+\t(general_x64nomem_operand): Ditto.\n+\n 2013-03-26  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rtems.opt: Add -pthread option.\n \n 2013-03-26  Richard Biener  <rguenther@suse.de>\n \n-\t* alias.c (find_base_term): Avoid redundant and not used\n-\trecursion.\n-\t(base_alias_check): Get the initial base term from the\n-\tcaller.\n+\t* alias.c (find_base_term): Avoid redundant and not used recursion.\n+\t(base_alias_check): Get the initial base term from the caller.\n \t(true_dependence_1): Compute and pass base terms to base_alias_check.\n \t(write_dependence_p): Likewise.\n \t(may_alias_p): Likewise."}, {"sha": "bf0020cf692dc1c312468d61e9939eda74532ee4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 59, "deletions": 263, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a4145ba1de31ddc35ace4aac8facbb869c6c49/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a4145ba1de31ddc35ace4aac8facbb869c6c49/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=93a4145ba1de31ddc35ace4aac8facbb869c6c49", "patch": "@@ -1032,29 +1032,16 @@\n (define_insn \"*cmpqi_ext_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n-\t  (match_operand:QI 0 \"general_operand\" \"Qm\")\n+\t  (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"Q,m\")\n \t  (subreg:QI\n \t    (zero_extract:SI\n-\t      (match_operand 1 \"ext_register_operand\" \"Q\")\n-\t      (const_int 8)\n-\t      (const_int 8)) 0)))]\n-  \"!TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n-  \"cmp{b}\\t{%h1, %0|%0, %h1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*cmpqi_ext_1_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (match_operand:QI 0 \"register_operand\" \"Q\")\n-\t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 1 \"ext_register_operand\" \"Q\")\n+\t      (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n+  \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%h1, %0|%0, %h1}\"\n-  [(set_attr \"type\" \"icmp\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"icmp\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*cmpqi_ext_2\"\n@@ -1080,35 +1067,21 @@\n \t      (match_operand 0 \"ext_register_operand\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"immediate_operand\")))])\n+\t  (match_operand:QI 1 \"const_int_operand\")))])\n \n-(define_insn \"*cmpqi_ext_3_insn\"\n+(define_insn \"*cmpqi_ext_3\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q\")\n+\t      (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"general_operand\" \"Qmn\")))]\n-  \"!TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n+\t  (match_operand:QI 1 \"general_x64nomem_operand\" \"Qn,m\")))]\n+  \"ix86_match_ccmode (insn, CCmode)\"\n   \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"modrm\" \"1\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*cmpqi_ext_3_insn_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (subreg:QI\n-\t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q\")\n-\t      (const_int 8)\n-\t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"nonmemory_operand\" \"Qn\")))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\"\n-  \"cmp{b}\\t{%1, %h0|%h0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"icmp\")\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -2341,37 +2314,12 @@\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movqi_extv_1_rex64\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=Q,?R\")\n-        (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n-                         (const_int 8)\n-                         (const_int 8)))]\n-  \"TARGET_64BIT\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_IMOVX:\n-      return \"movs{bl|x}\\t{%h1, %k0|%k0, %h1}\";\n-    default:\n-      return \"mov{b}\\t{%h1, %0|%0, %h1}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (ior (not (match_operand:QI 0 \"QIreg_operand\"))\n-\t\t\t(match_test \"TARGET_MOVX\"))\n-\t(const_string \"imovx\")\n-\t(const_string \"imov\")))\n-   (set (attr \"mode\")\n-     (if_then_else (eq_attr \"type\" \"imovx\")\n-\t(const_string \"SI\")\n-\t(const_string \"QI\")))])\n-\n (define_insn \"*movqi_extv_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Qm,?r\")\n-        (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n+  [(set (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"=Q,?R,m\")\n+        (sign_extract:QI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n                          (const_int 8)\n                          (const_int 8)))]\n-  \"!TARGET_64BIT\"\n+  \"\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -2381,7 +2329,8 @@\n       return \"mov{b}\\t{%h1, %0|%0, %h1}\";\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"*,*,nox64\")\n+   (set (attr \"type\")\n      (if_then_else (and (match_operand:QI 0 \"register_operand\")\n \t\t\t(ior (not (match_operand:QI 0 \"QIreg_operand\"))\n \t\t\t     (match_test \"TARGET_MOVX\")))\n@@ -2402,39 +2351,13 @@\n   [(set_attr \"type\" \"imovx\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movqi_extzv_2_rex64\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=Q,?R\")\n-        (subreg:QI\n-\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n-\t\t\t   (const_int 8)\n-\t\t\t   (const_int 8)) 0))]\n-  \"TARGET_64BIT\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_IMOVX:\n-      return \"movz{bl|x}\\t{%h1, %k0|%k0, %h1}\";\n-    default:\n-      return \"mov{b}\\t{%h1, %0|%0, %h1}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (ior (not (match_operand:QI 0 \"QIreg_operand\"))\n-\t\t\t(match_test \"TARGET_MOVX\"))\n-\t(const_string \"imovx\")\n-\t(const_string \"imov\")))\n-   (set (attr \"mode\")\n-     (if_then_else (eq_attr \"type\" \"imovx\")\n-\t(const_string \"SI\")\n-\t(const_string \"QI\")))])\n-\n (define_insn \"*movqi_extzv_2\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=Qm,?R\")\n+  [(set (match_operand:QI 0 \"nonimmediate_x64nomem_operand\" \"=Q,?R,m\")\n         (subreg:QI\n-\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q\")\n+\t  (zero_extract:SI (match_operand 1 \"ext_register_operand\" \"Q,Q,Q\")\n \t\t\t   (const_int 8)\n \t\t\t   (const_int 8)) 0))]\n-  \"!TARGET_64BIT\"\n+  \"\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -2444,7 +2367,8 @@\n       return \"mov{b}\\t{%h1, %0|%0, %h1}\";\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"*,*,nox64\")\n+   (set (attr \"type\")\n      (if_then_else (and (match_operand:QI 0 \"register_operand\")\n \t\t\t(ior (not (match_operand:QI 0 \"QIreg_operand\"))\n \t\t\t     (match_test \"TARGET_MOVX\")))\n@@ -2455,38 +2379,19 @@\n \t(const_string \"SI\")\n \t(const_string \"QI\")))])\n \n-(define_expand \"mov<mode>_insv_1\"\n-  [(set (zero_extract:SWI48 (match_operand 0 \"ext_register_operand\")\n-\t\t\t    (const_int 8)\n-\t\t\t    (const_int 8))\n-\t(match_operand:SWI48 1 \"nonmemory_operand\"))])\n-\n-(define_insn \"*mov<mode>_insv_1_rex64\"\n-  [(set (zero_extract:SWI48x (match_operand 0 \"ext_register_operand\" \"+Q\")\n+(define_insn \"mov<mode>_insv_1\"\n+  [(set (zero_extract:SWI48 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8))\n-\t(match_operand:SWI48x 1 \"nonmemory_operand\" \"Qn\"))]\n-  \"TARGET_64BIT\"\n+\t(match_operand:SWI48 1 \"general_x64nomem_operand\" \"Qn,m\"))]\n+  \"\"\n {\n   if (CONST_INT_P (operands[1]))\n     operands[1] = simplify_gen_subreg (QImode, operands[1], <MODE>mode, 0);\n   return \"mov{b}\\t{%b1, %h0|%h0, %b1}\";\n }\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*movsi_insv_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(match_operand:SI 1 \"general_operand\" \"Qmn\"))]\n-  \"!TARGET_64BIT\"\n-{\n-  if (CONST_INT_P (operands[1]))\n-    operands[1] = simplify_gen_subreg (QImode, operands[1], SImode, 0);\n-  return \"mov{b}\\t{%b1, %h0|%h0, %b1}\";\n-}\n-  [(set_attr \"type\" \"imov\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*movqi_insv_2\"\n@@ -5841,53 +5746,18 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*addqi_ext_1_rex64\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(plus:SI\n-\t  (zero_extract:SI\n-\t    (match_operand 1 \"ext_register_operand\" \"0\")\n-\t    (const_int 8)\n-\t    (const_int 8))\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"Qn\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_INCDEC:\n-      if (operands[2] == const1_rtx)\n-\treturn \"inc{b}\\t%h0\";\n-      else\n-        {\n-\t  gcc_assert (operands[2] == constm1_rtx);\n-          return \"dec{b}\\t%h0\";\n-        }\n-\n-    default:\n-      return \"add{b}\\t{%2, %h0|%h0, %2}\";\n-    }\n-}\n-  [(set (attr \"type\")\n-     (if_then_else (match_operand:QI 2 \"incdec_operand\")\n-\t(const_string \"incdec\")\n-\t(const_string \"alu\")))\n-   (set_attr \"modrm\" \"1\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"addqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(plus:SI\n \t  (zero_extract:SI\n-\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t    (const_int 8)\n \t    (const_int 8))\n-\t  (match_operand:QI 2 \"general_operand\" \"Qmn\")))\n+\t  (match_operand:QI 2 \"general_x64nomem_operand\" \"Qn,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\"\n+  \"\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -5898,13 +5768,14 @@\n         {\n \t  gcc_assert (operands[2] == constm1_rtx);\n           return \"dec{b}\\t%h0\";\n-\t}\n+        }\n \n     default:\n       return \"add{b}\\t{%2, %h0|%h0, %2}\";\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set (attr \"type\")\n      (if_then_else (match_operand:QI 2 \"incdec_operand\")\n \t(const_string \"incdec\")\n \t(const_string \"alu\")))\n@@ -7228,36 +7099,21 @@\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"pent_pair\" \"np\")])\n \n-(define_insn \"*testqi_ext_1_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (and:SI\n-\t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q\")\n-\t      (const_int 8)\n-\t      (const_int 8))\n-\t    (zero_extend:SI\n-\t      (match_operand:QI 1 \"register_operand\" \"Q\")))\n-\t  (const_int 0)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n-  \"test{b}\\t{%1, %h0|%h0, %1}\"\n-  [(set_attr \"type\" \"test\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*testqi_ext_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n-\t      (match_operand 0 \"ext_register_operand\" \"Q\")\n+\t      (match_operand 0 \"ext_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8))\n \t    (zero_extend:SI\n-\t      (match_operand:QI 1 \"general_operand\" \"Qm\")))\n+\t      (match_operand:QI 1 \"nonimmediate_x64nomem_operand\" \"Q,m\")))\n \t  (const_int 0)))]\n-  \"!TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\t{%1, %h0|%h0, %1}\"\n-  [(set_attr \"type\" \"test\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*testqi_ext_2\"\n@@ -7824,39 +7680,22 @@\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*andqi_ext_1_rex64\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(and:SI\n-\t  (zero_extract:SI\n-\t    (match_operand 1 \"ext_register_operand\" \"0\")\n-\t    (const_int 8)\n-\t    (const_int 8))\n-\t  (zero_extend:SI\n-\t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"and{b}\\t{%2, %h0|%h0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*andqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(and:SI\n \t  (zero_extract:SI\n-\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t    (const_int 8)\n \t    (const_int 8))\n \t  (zero_extend:SI\n-\t    (match_operand:QI 2 \"general_operand\" \"Qm\"))))\n+\t    (match_operand:QI 2 \"nonimmediate_x64nomem_operand\" \"Q,m\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\"\n+  \"\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -8088,41 +7927,22 @@\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*<code>qi_ext_1_rex64\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(any_or:SI\n-\t  (zero_extract:SI\n-\t    (match_operand 1 \"ext_register_operand\" \"0\")\n-\t    (const_int 8)\n-\t    (const_int 8))\n-\t  (zero_extend:SI\n-\t    (match_operand 2 \"ext_register_operand\" \"Q\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n-  \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*<code>qi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(any_or:SI\n \t  (zero_extract:SI\n-\t    (match_operand 1 \"ext_register_operand\" \"0\")\n+\t    (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t    (const_int 8)\n \t    (const_int 8))\n \t  (zero_extend:SI\n-\t    (match_operand:QI 2 \"general_operand\" \"Qm\"))))\n+\t    (match_operand:QI 2 \"nonimmediate_x64nomem_operand\" \"Q,m\"))))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\n-   && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\"\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n@@ -8197,7 +8017,7 @@\n \t\t(match_operand 1 \"ext_register_operand\")\n \t\t(const_int 8)\n \t\t(const_int 8))\n-\t      (match_operand:QI 2 \"general_operand\"))\n+\t      (match_operand:QI 2 \"const_int_operand\"))\n \t    (const_int 0)))\n      (set (zero_extract:SI (match_operand 0 \"ext_register_operand\")\n \t\t\t   (const_int 8)\n@@ -8209,42 +8029,17 @@\n \t     (const_int 8))\n \t    (match_dup 2)))])])\n \n-(define_insn \"*xorqi_cc_ext_1_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare\n-\t  (xor:SI\n-\t    (zero_extract:SI\n-\t      (match_operand 1 \"ext_register_operand\" \"0\")\n-\t      (const_int 8)\n-\t      (const_int 8))\n-\t    (match_operand:QI 2 \"nonmemory_operand\" \"Qn\"))\n-\t  (const_int 0)))\n-   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n-\t\t\t (const_int 8)\n-\t\t\t (const_int 8))\n-\t(xor:SI\n-\t  (zero_extract:SI\n-\t   (match_dup 1)\n-\t   (const_int 8)\n-\t   (const_int 8))\n-\t  (match_dup 2)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n-  \"xor{b}\\t{%2, %h0|%h0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"modrm\" \"1\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*xorqi_cc_ext_1\"\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (xor:SI\n \t    (zero_extract:SI\n-\t      (match_operand 1 \"ext_register_operand\" \"0\")\n+\t      (match_operand 1 \"ext_register_operand\" \"0,0\")\n \t      (const_int 8)\n \t      (const_int 8))\n-\t    (match_operand:QI 2 \"general_operand\" \"qmn\"))\n+\t    (match_operand:QI 2 \"general_x64nomem_operand\" \"Qn,m\"))\n \t  (const_int 0)))\n-   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=q\")\n+   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(xor:SI\n@@ -8253,9 +8048,10 @@\n \t   (const_int 8)\n \t   (const_int 8))\n \t  (match_dup 2)))]\n-  \"!TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n+  [(set_attr \"isa\" \"*,nox64\")\n+   (set_attr \"type\" \"alu\")\n    (set_attr \"modrm\" \"1\")\n    (set_attr \"mode\" \"QI\")])\n \f"}, {"sha": "2157cb96d0caf1982e4f1451ad5dc31ca0245cc0", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a4145ba1de31ddc35ace4aac8facbb869c6c49/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a4145ba1de31ddc35ace4aac8facbb869c6c49/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=93a4145ba1de31ddc35ace4aac8facbb869c6c49", "patch": "@@ -71,6 +71,18 @@\n \t  && (REGNO (op) > LAST_VIRTUAL_REGISTER || REGNO (op) <= BX_REG));\n })\n \n+;; Match nonimmediate operands, but exclude memory operands on 64bit targets.\n+(define_predicate \"nonimmediate_x64nomem_operand\"\n+  (if_then_else (match_test \"TARGET_64BIT\")\n+    (match_operand 0 \"register_operand\")\n+    (match_operand 0 \"nonimmediate_operand\")))\n+\n+;; Match general operands, but exclude memory operands on 64bit targets.\n+(define_predicate \"general_x64nomem_operand\"\n+  (if_then_else (match_test \"TARGET_64BIT\")\n+    (match_operand 0 \"nonmemory_operand\")\n+    (match_operand 0 \"general_operand\")))\n+\n ;; Return true if op is the AX register.\n (define_predicate \"ax_reg_operand\"\n   (and (match_code \"reg\")"}]}