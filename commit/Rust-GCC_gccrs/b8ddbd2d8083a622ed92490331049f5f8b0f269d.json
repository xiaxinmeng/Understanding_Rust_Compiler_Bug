{"sha": "b8ddbd2d8083a622ed92490331049f5f8b0f269d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkZGJkMmQ4MDgzYTYyMmVkOTI0OTAzMzEwNDlmNWY4YjBmMjY5ZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-21T11:10:54Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-21T11:10:54Z"}, "message": "DateTimeSyntax.java, [...]: New files.\n\n2003-12-21  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/print/attribute/DateTimeSyntax.java,\n\tjavax/print/attribute/DocAttribute.java,\n\tjavax/print/attribute/DocAttributeSet.java,\n\tjavax/print/attribute/IntegerSyntax.java,\n\tjavax/print/attribute/ResolutionSyntax.java,\n\tjavax/print/attribute/Size2DSyntax.java,\n\tjavax/print/attribute/TextSyntax.java,\n\tjavax/print/attribute/URISyntax.java,\n\tjavax/print/attribute/UnmodifiableSetException.java: New files.\n\t* Makefile.am (ordinary_java_source_files): Added new files.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r74904", "tree": {"sha": "8493cf23ea2eb5e49fa07371b3b00ae2ed98f725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8493cf23ea2eb5e49fa07371b3b00ae2ed98f725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ddbd2d8083a622ed92490331049f5f8b0f269d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ddbd2d8083a622ed92490331049f5f8b0f269d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ddbd2d8083a622ed92490331049f5f8b0f269d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ddbd2d8083a622ed92490331049f5f8b0f269d/comments", "author": null, "committer": null, "parents": [{"sha": "3bc5e4eff8af013d48e801ee63d9eee5b5fb275e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc5e4eff8af013d48e801ee63d9eee5b5fb275e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc5e4eff8af013d48e801ee63d9eee5b5fb275e"}], "stats": {"total": 1104, "additions": 1104, "deletions": 0}, "files": [{"sha": "c9188be7c0c1ead7c619b00e963655916a2681f3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -1,3 +1,17 @@\n+2003-12-21  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/print/attribute/DateTimeSyntax.java,\n+\tjavax/print/attribute/DocAttribute.java,\n+\tjavax/print/attribute/DocAttributeSet.java,\n+\tjavax/print/attribute/IntegerSyntax.java,\n+\tjavax/print/attribute/ResolutionSyntax.java,\n+\tjavax/print/attribute/Size2DSyntax.java,\n+\tjavax/print/attribute/TextSyntax.java,\n+\tjavax/print/attribute/URISyntax.java,\n+\tjavax/print/attribute/UnmodifiableSetException.java: New files.\n+\t* Makefile.am (ordinary_java_source_files): Added new files.\n+\t* Makefile.in: Regenerated.\n+\n 2003-12-21  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/net/PlainDatagramSocketImpl.java"}, {"sha": "0f7fab481ee583b3079ef5c84561cdc63393d3ab", "filename": "libjava/Makefile.am", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -1743,7 +1743,16 @@ javax/naming/ldap/UnsolicitedNotificationListener.java \\\n javax/naming/OperationNotSupportedException.java \\\n javax/print/attribute/Attribute.java \\\n javax/print/attribute/AttributeSet.java \\\n+javax/print/attribute/DateTimeSyntax.java \\\n+javax/print/attribute/DocAttribute.java \\\n+javax/print/attribute/DocAttributeSet.java \\\n+javax/print/attribute/IntegerSyntax.java \\\n javax/print/attribute/PrintRequestAttributeSet.java \\\n+javax/print/attribute/ResolutionSyntax.java \\\n+javax/print/attribute/Size2DSyntax.java \\\n+javax/print/attribute/TextSyntax.java \\\n+javax/print/attribute/UnmodifiableSetException.java \\\n+javax/print/attribute/URISyntax.java \\\n javax/security/auth/x500/X500Principal.java \\\n javax/sql/ConnectionEvent.java \\\n javax/sql/ConnectionEventListener.java \\"}, {"sha": "cf4ff1f2857bc85d96ed678243b539ae47c99c04", "filename": "libjava/Makefile.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -1459,7 +1459,16 @@ javax/naming/ldap/UnsolicitedNotificationListener.java \\\n javax/naming/OperationNotSupportedException.java \\\n javax/print/attribute/Attribute.java \\\n javax/print/attribute/AttributeSet.java \\\n+javax/print/attribute/DateTimeSyntax.java \\\n+javax/print/attribute/DocAttribute.java \\\n+javax/print/attribute/DocAttributeSet.java \\\n+javax/print/attribute/IntegerSyntax.java \\\n javax/print/attribute/PrintRequestAttributeSet.java \\\n+javax/print/attribute/ResolutionSyntax.java \\\n+javax/print/attribute/Size2DSyntax.java \\\n+javax/print/attribute/TextSyntax.java \\\n+javax/print/attribute/UnmodifiableSetException.java \\\n+javax/print/attribute/URISyntax.java \\\n javax/security/auth/x500/X500Principal.java \\\n javax/sql/ConnectionEvent.java \\\n javax/sql/ConnectionEventListener.java \\\n@@ -4051,7 +4060,16 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/naming/spi/Resolver.P .deps/javax/naming/spi/StateFactory.P \\\n .deps/javax/print/attribute/Attribute.P \\\n .deps/javax/print/attribute/AttributeSet.P \\\n+.deps/javax/print/attribute/DateTimeSyntax.P \\\n+.deps/javax/print/attribute/DocAttribute.P \\\n+.deps/javax/print/attribute/DocAttributeSet.P \\\n+.deps/javax/print/attribute/IntegerSyntax.P \\\n .deps/javax/print/attribute/PrintRequestAttributeSet.P \\\n+.deps/javax/print/attribute/ResolutionSyntax.P \\\n+.deps/javax/print/attribute/Size2DSyntax.P \\\n+.deps/javax/print/attribute/TextSyntax.P \\\n+.deps/javax/print/attribute/URISyntax.P \\\n+.deps/javax/print/attribute/UnmodifiableSetException.P \\\n .deps/javax/rmi/BAD_OPERATION.P .deps/javax/rmi/CORBA/ClassDesc.P \\\n .deps/javax/rmi/CORBA/ObjectImpl.P \\\n .deps/javax/rmi/CORBA/PortableRemoteObjectDelegate.P \\"}, {"sha": "6880f2bca36451c6e4d3c92d5cef852fd4a1445c", "filename": "libjava/javax/print/attribute/DateTimeSyntax.java", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FDateTimeSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FDateTimeSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FDateTimeSyntax.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,101 @@\n+/* DateTimeSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class DateTimeSyntax implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = -1400819079791208582L;\n+  \n+  private Date value;\n+  \n+  /**\n+   * Creates a <code>DateTimeSyntax</code> with a given value.\n+   *\n+   * @param value the value for this syntax\n+   *\n+   * @exception NullPointerException if value is null\n+   */\n+  protected DateTimeSyntax(Date value)\n+  {\n+    if (value == null)\n+      throw new NullPointerException(\"value may not be null\");\n+\n+    this.value = value;\n+  }\n+\n+  /**\n+   * Returns the date value of this object.\n+   *\n+   * @return the date value\n+   */\n+  public Date getValue()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Tests if the given object is equal to this one.\n+   * \n+   * @param obj the object to test\n+   *\n+   * @return True if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof DateTimeSyntax))\n+      return false;\n+\n+    return value.equals(((DateTimeSyntax) obj).getValue());\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return value.hashCode();\n+  }\n+}"}, {"sha": "077fdaa1479ca36cfafe2fcd678ec0df4488b095", "filename": "libjava/javax/print/attribute/DocAttribute.java", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FDocAttribute.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FDocAttribute.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FDocAttribute.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,45 @@\n+/* DocAttribute.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public interface DocAttribute extends Attribute\n+{\n+}"}, {"sha": "200420b651553e8c44aa6752696ab062fb9b8272", "filename": "libjava/javax/print/attribute/DocAttributeSet.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FDocAttributeSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FDocAttributeSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FDocAttributeSet.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,55 @@\n+/* DocAttributeSet.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public interface DocAttributeSet extends AttributeSet\n+{\n+  /**\n+   * Adds the specified attribute value to this attribute set\n+   * if it is not already present.\n+   */\n+  boolean add (Attribute attribute);\n+\n+  /**\n+   * Adds all of the elements in the specified set to this attribute.\n+   */\n+  boolean addAll (AttributeSet attributes);\n+}"}, {"sha": "2b713bf13a2ec4dc1818769955df204f4eee01e6", "filename": "libjava/javax/print/attribute/IntegerSyntax.java", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FIntegerSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FIntegerSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FIntegerSyntax.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,122 @@\n+/* IntegerSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class IntegerSyntax implements Cloneable, Serializable\n+{\n+  private int value;\n+\n+  /**\n+   * Creates a <code>IntegerSyntax</code> with the given value.\n+   *\n+   * @param value the value to set\n+   */\n+  protected IntegerSyntax(int value)\n+  {\n+    this.value = value;\n+  }\n+\n+  /**\n+   * Creates a <code>IntegerSyntax</code> with the given arguments.\n+   *\n+   * @param value the value to set\n+   * @param lowerBound the lower bound for the value\n+   * @param upperBound the upper bound for the value\n+   *\n+   * @exception IllegalArgumentException if value < lowerBound\n+   * or value > upperBound\n+   */\n+  protected IntegerSyntax(int value, int lowerBound, int upperBound)\n+  {\n+    if (value < lowerBound\n+        || value > upperBound)\n+      throw new IllegalArgumentException(\"value not in range\");\n+\n+    this.value = value;\n+  }\n+\n+  /**\n+   * Returns the value of this object.\n+   *\n+   * @return the value\n+   */\n+  public int getValue()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof IntegerSyntax))\n+      return false;\n+\n+    return value == ((IntegerSyntax) obj).getValue();\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @return the string representation\n+   */\n+  public String toString()\n+  {\n+    return \"\" + value;\n+  }\n+}"}, {"sha": "150e19856b5ba01347efc11031e64c0b11ecefd8", "filename": "libjava/javax/print/attribute/ResolutionSyntax.java", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FResolutionSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FResolutionSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FResolutionSyntax.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,220 @@\n+/* ResolutionSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class ResolutionSyntax\n+  implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = 2706743076526672017L;\n+\n+  /**\n+   * Constant for units of dots per centimeter.\n+   */\n+  public static final int DPCM = 254;\n+\n+  /**\n+   * Constant for units of dots per inch\n+   */\n+  public static final int DPI = 100;\n+\n+  private int crossFeedResolution;\n+  private int feedResolution;\n+  \n+  /**\n+   * Creates a <code>ResolutionSyntax</code> object with the given arguments.\n+   *\n+   * @param crossFeedResolution the cross feed resolution\n+   * @param feedResolution the feed resolution\n+   * @param units the unit to use\n+   *\n+   * @exception IllegalArgumentException if preconditions fail\n+   */\n+  public ResolutionSyntax(int crossFeedResolution, int feedResolution,\n+                          int units)\n+  {\n+    if (crossFeedResolution < 1\n+        || feedResolution < 1\n+        || units < 1)\n+      throw new IllegalArgumentException(\"no argument may be less then 1\");\n+\n+    this.crossFeedResolution = crossFeedResolution * units;\n+    this.feedResolution = feedResolution * units;\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if(! (obj instanceof ResolutionSyntax))\n+      return false;\n+\n+    ResolutionSyntax tmp = (ResolutionSyntax) obj;\n+    \n+    return (crossFeedResolution == tmp.getCrossFeedResolutionDphi()\n+            && feedResolution == tmp.getFeedResolutionDphi());\n+  }\n+\n+  /**\n+   * Returns the cross feed resolution in units.\n+   *\n+   * @return the resolution\n+   *\n+   * @exception IllegalArgumenException if units < 1\n+   */\n+  public int getCrossFeedResolution(int units)\n+  {\n+    if (units < 1)\n+      throw new IllegalArgumentException(\"units may not be less then 1\");\n+\n+    int rount = units / 2;\n+    return (crossFeedResolution + units) / units;\n+  }\n+\n+  /**\n+   * Returns the raw cross feed resolution in units.\n+   *\n+   * @return the raw resolution\n+   */\n+  protected int getCrossFeedResolutionDphi()\n+  {\n+    return crossFeedResolution;\n+  }\n+\n+  /**\n+   * Returns the feed resolution in units.\n+   *\n+   * @return the resolution\n+   *\n+   * @exception IllegalArgumenException if units < 1\n+   */\n+  public int getFeedResolution(int units)\n+  {\n+    if (units < 1)\n+      throw new IllegalArgumentException(\"units may not be less then 1\");\n+\n+    int rount = units / 2;\n+    return (crossFeedResolution + units) / units;\n+  }\n+\n+  /**\n+   * Returns the raw feed resolution in units.\n+   *\n+   * @return the raw resolution\n+   */\n+  protected int getFeedResolutionDphi()\n+  {\n+    return feedResolution;\n+  }\n+  \n+  /**\n+   * Returns the resolution as two field array. Index 0 is the cross feed\n+   * resolution, index 1 the feed resolution.\n+   *\n+   * @param units the units to use\n+   *\n+   * @return the array with the resolutions\n+   */\n+  public int[] getResolution(int units)\n+  {\n+    int[] resolution = new int[2];\n+    resolution[0] = getCrossFeedResolution(units);\n+    resolution[1] = getFeedResolution(units);\n+    return resolution;\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return crossFeedResolution + feedResolution;\n+  }\n+\n+  /**\n+   * Checks of other is a lower or equal resolution.\n+   *\n+   * @param other the resolution to check against\n+   *\n+   * @return true if other describes a lower or equal resolution\n+   */\n+  public boolean lessThanOrEquals(ResolutionSyntax other)\n+  {\n+    if (other == null)\n+      throw new NullPointerException(\"other may not be null\");\n+\n+    return (crossFeedResolution <= other.getCrossFeedResolutionDphi()\n+            && feedResolution <= other.getFeedResolutionDphi());\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @return the string representation\n+   */\n+  public String toString()\n+  {\n+    return toString(1, \"dphi\");\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @param units the units to use\n+   * @param unitsName the name of the units\n+   *\n+   * @return the string representation\n+   */\n+  public String toString(int units, String unitsName)\n+  {\n+    return (\"\" + getCrossFeedResolution(units)\n+            + \"x\" + getFeedResolution(units)\n+            + \" \" + unitsName);\n+  }\n+}"}, {"sha": "94743181a76f74e1980eb15f12e08dc234a870c9", "filename": "libjava/javax/print/attribute/Size2DSyntax.java", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FSize2DSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FSize2DSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FSize2DSyntax.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,225 @@\n+/* Size2DSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class Size2DSyntax implements Cloneable, Serializable\n+{\n+  /**\n+   * Constant for units of dots per mircometer to describe an inch.\n+   */\n+  public static final int INCH = 25400;\n+\n+  /**\n+   * Constant for units of dots per mircometer to describe a centimeter.\n+   */\n+  public static final int MM = 1000;\n+\n+  private int x;\n+  private int y;\n+\n+  /**\n+   * Creates a <code>Size2DSyntax</code> object with the given arguments.\n+   *\n+   * @param x the size in x direction\n+   * @param y the size in y direction\n+   * @param units the units to use for the sizes\n+   *\n+   * @exception IllegalArgumentException if preconditions fail\n+   */\n+  protected Size2DSyntax(float x, float y, int units)\n+  {\n+    if (x < 0.0f || y < 0.0f)\n+      throw new IllegalArgumentException(\"x and/or y may not be less then 0\");\n+\n+    if (units < 1)\n+      throw new IllegalArgumentException(\"units may not be less then 1\");\n+\n+    this.x = (int) (x * units + 0.5f);\n+    this.y = (int) (y * units + 0.5f);\n+  }\n+\n+  /**\n+   * Creates a <code>Size2DSyntax</code> object with the given arguments.\n+   *\n+   * @param x the size in x direction\n+   * @param y the size in y direction\n+   * @param units the units to use for the sizes\n+   *\n+   * @exception IllegalArgumentException if preconditions fail\n+   */\n+  protected Size2DSyntax(int x, int y, int units)\n+  {\n+    if (x < 0 || y < 0)\n+      throw new IllegalArgumentException(\"x and/or y may not be less then 0\");\n+\n+    if (units < 1)\n+      throw new IllegalArgumentException(\"units may not be less then 1\");\n+\n+    this.x = x * units;\n+    this.y = y * units;\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof Size2DSyntax))\n+      return false;\n+\n+    Size2DSyntax tmp = (Size2DSyntax) obj;\n+\n+    return (x == tmp.getXMicrometers()\n+            && y == tmp.getYMicrometers());\n+  }\n+\n+  /**\n+   * Return the size described in this object as a two field array.\n+   * Index 0 contains the size in x direction, index 1 the size in\n+   * y direction.\n+   *\n+   * @param units the units to use\n+   *\n+   * @return the array that describes the size\n+   *\n+   * @exception IllegalArgumentException if units < 1\n+   */\n+  public float[] getSize(int units)\n+  {\n+    float[] size = new float[2];\n+    size[0] = getX(units);\n+    size[1] = getY(units);\n+    return size;\n+  }\n+\n+  /**\n+   * Return the size in x direction.\n+   *\n+   * @param units the units to use\n+   *\n+   * @return the size value\n+   *\n+   * @exception IllegalArgumentException if units < 1\n+   */\n+  public float getX(int units)\n+  {\n+    if (units < 1)\n+      throw new IllegalArgumentException(\"units may not be less then 1\");\n+\n+    return ((float) x) / ((float) units);\n+  }\n+\n+  /**\n+   * Returns the size in x direction in mircometers.\n+   *\n+   * @return the size value\n+   */\n+  protected int getXMicrometers()\n+  {\n+    return x;\n+  }\n+\n+  /**\n+   * Return the size in y direction.\n+   *\n+   * @param units the units to use\n+   *\n+   * @return the size value\n+   *\n+   * @exception IllegalArgumentException if units < 1\n+   */\n+  public float getY(int units)\n+  {\n+    if (units < 1)\n+      throw new IllegalArgumentException(\"units may not be less then 1\");\n+\n+    return ((float) y) / ((float) units);\n+  }\n+  \n+  /**\n+   * Returns the size in y direction in mircometers.\n+   *\n+   * @return the size value\n+   */\n+  protected int getYMicrometers()\n+  {\n+    return y;\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return x + y;\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @return the string representation\n+   */\n+  public String toString()\n+  {\n+    return toString(1, \"um\");\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @param units the units to use\n+   * @param unitsName the name of the units\n+   *\n+   * @return the string representation\n+   */\n+  public String toString(int units, String unitsName)\n+  {\n+    return \"\" + getX(units) + \"x\" + getY(units) + \" \" + unitsName;\n+  }\n+}"}, {"sha": "51909be9803e12bd2307d1399a716726aac530c6", "filename": "libjava/javax/print/attribute/TextSyntax.java", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FTextSyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FTextSyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FTextSyntax.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,118 @@\n+/* TextSyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+import java.util.Locale;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class TextSyntax implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = -8130648736378144102L;\n+  \n+  private String value;\n+  private Locale locale;\n+\n+  /**\n+   * Creates a <code>TextSyntax</code> object with the given value\n+   * and locale.\n+   *\n+   * @param value the value for this syntax\n+   * @param locale the locale to use\n+   *\n+   * @exception NullPointerException if value is null\n+   */\n+  protected TextSyntax(String value, Locale locale)\n+  {\n+    if (value == null)\n+      throw new NullPointerException(\"value may not be null\");\n+\n+    this.value = value;\n+    this.locale = locale;\n+  }\n+\n+  /**\n+   * Returns the value of this syntax object.\n+   *\n+   * @return the value\n+   */\n+  public String getValue()\n+  {\n+    return value;\n+  }\n+\n+  /**\n+   * Returns the locale of this syntax object.\n+   *\n+   * @return the locale\n+   */\n+  public Locale getLocale()\n+  {\n+    return locale;\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return value.hashCode() + locale.hashCode();\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof TextSyntax))\n+      return false;\n+\n+    TextSyntax tmp = (TextSyntax) obj;\n+    \n+    return (value.equals(tmp.getValue())\n+            && locale.equals(tmp.getLocale()));\n+  }\n+}"}, {"sha": "da2667ddc81fe9bbea3d1398cc26ba8e3ccd35dd", "filename": "libjava/javax/print/attribute/URISyntax.java", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FURISyntax.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FURISyntax.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FURISyntax.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,112 @@\n+/* URISyntax.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+import java.io.Serializable;\n+import java.net.URI;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public abstract class URISyntax\n+  implements Cloneable, Serializable\n+{\n+  private static final long serialVersionUID = 3666874174847632203L;\n+\n+  private URI uri;\n+\n+  /**\n+   * Creates a <code>URISyntax</code> object.\n+   *\n+   * @param uri the URI value for the syntax\n+   *\n+   * @exception NullPointerException if uri is null\n+   */\n+  protected URISyntax(URI uri)\n+  {\n+    if (uri == null)\n+      throw new NullPointerException(\"uri may not be null\");\n+\n+    this.uri = uri;\n+  }\n+\n+  /**\n+   * Tests of obj is equal to this object.\n+   *\n+   * @param obj the object to test\n+   *\n+   * @returns true if both objects are equal, false otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (! (obj instanceof URISyntax))\n+      return false;\n+\n+    return uri.equals(((URISyntax) obj).getURI());\n+  }\n+\n+  /**\n+   * Returns the URI value of this syntax object.\n+   *\n+   * @return the URI\n+   */\n+  public URI getURI()\n+  {\n+    return uri;\n+  }\n+\n+  /**\n+   * Returns the hashcode for this object.\n+   *\n+   * @return the hashcode\n+   */\n+  public int hashCode()\n+  {\n+    return uri.hashCode();\n+  }\n+\n+  /**\n+   * Returns the string representation for this object.\n+   *\n+   * @return the string representation\n+   */\n+  public String toString()\n+  {\n+    return uri.toString();\n+  }\n+}"}, {"sha": "83d389d2b2cef69f89b3f85430a47d72b91602aa", "filename": "libjava/javax/print/attribute/UnmodifiableSetException.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FUnmodifiableSetException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ddbd2d8083a622ed92490331049f5f8b0f269d/libjava%2Fjavax%2Fprint%2Fattribute%2FUnmodifiableSetException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fprint%2Fattribute%2FUnmodifiableSetException.java?ref=b8ddbd2d8083a622ed92490331049f5f8b0f269d", "patch": "@@ -0,0 +1,65 @@\n+/* Attribute.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package javax.print.attribute;\n+\n+/**\n+ * @author Michael Koch\n+ *\n+ * @since 1.4\n+ */\n+public class UnmodifiableSetException extends RuntimeException\n+{\n+  /**\n+   * Creates a <code>UnmodifiableSetException</code>.\n+   */\n+  public UnmodifiableSetException()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * Creates a <code>UnmodifiableSetException</code>\n+   * with the given message.\n+   *\n+   * @param message the message for the exception\n+   */\n+  public UnmodifiableSetException(String message)\n+  {\n+    super(message);\n+  }\n+}"}]}