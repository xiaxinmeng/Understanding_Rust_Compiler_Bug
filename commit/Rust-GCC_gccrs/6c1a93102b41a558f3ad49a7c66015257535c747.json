{"sha": "6c1a93102b41a558f3ad49a7c66015257535c747", "node_id": "C_kwDOANBUbNoAKDZjMWE5MzEwMmI0MWE1NThmM2FkNDlhN2M2NjAxNTI1NzUzNWM3NDc", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-01-20T21:36:50Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-01-22T15:09:01Z"}, "message": "Fortran: fix simplification of TRANSFER for zero-sized character array result\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/104127\n\t* simplify.cc (gfc_simplify_transfer): Ensure that the result\n\ttypespec is set up for TRANSFER with MOLD of type CHARACTER\n\tincluding character length even if the result is a zero-sized\n\tarray.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/104127\n\t* gfortran.dg/transfer_simplify_11.f90: Fix logic.\n\t* gfortran.dg/transfer_simplify_13.f90: New test.", "tree": {"sha": "45bbce0696ce79901a139539f912eb7bcd87940d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45bbce0696ce79901a139539f912eb7bcd87940d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1a93102b41a558f3ad49a7c66015257535c747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a93102b41a558f3ad49a7c66015257535c747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1a93102b41a558f3ad49a7c66015257535c747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1a93102b41a558f3ad49a7c66015257535c747/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f4f9c0085eb68e0546804b156aa8bb388f2d3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4f9c0085eb68e0546804b156aa8bb388f2d3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4f9c0085eb68e0546804b156aa8bb388f2d3e0"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "8604162cfd5bed9232fa0636886dfd2a4d10c501", "filename": "gcc/fortran/simplify.cc", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a93102b41a558f3ad49a7c66015257535c747/gcc%2Ffortran%2Fsimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a93102b41a558f3ad49a7c66015257535c747/gcc%2Ffortran%2Fsimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.cc?ref=6c1a93102b41a558f3ad49a7c66015257535c747", "patch": "@@ -8162,7 +8162,18 @@ gfc_simplify_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n      set even for array expressions, in order to pass this information into\n      gfc_target_interpret_expr.  */\n   if (result->ts.type == BT_CHARACTER && gfc_is_constant_expr (mold_element))\n-    result->value.character.length = mold_element->value.character.length;\n+    {\n+      result->value.character.length = mold_element->value.character.length;\n+\n+      /* Let the typespec of the result inherit the string length.\n+\t This is crucial if a resulting array has size zero.  */\n+      if (mold_element->ts.u.cl->length)\n+\tresult->ts.u.cl->length = gfc_copy_expr (mold_element->ts.u.cl->length);\n+      else\n+\tresult->ts.u.cl->length =\n+\t  gfc_get_int_expr (gfc_charlen_int_kind, NULL,\n+\t\t\t    mold_element->value.character.length);\n+    }\n \n   /* Set the number of elements in the result, and determine its size.  */\n "}, {"sha": "409e4768a101e3e9fcb77d5b20687edd98a8d293", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a93102b41a558f3ad49a7c66015257535c747/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a93102b41a558f3ad49a7c66015257535c747/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_11.f90?ref=6c1a93102b41a558f3ad49a7c66015257535c747", "patch": "@@ -4,5 +4,5 @@\n    integer, parameter :: N = 2\n    character(len=1) :: chr(N)\n    chr = transfer(repeat(\"x\",ncopies=N),[character(len=1) ::], N)\n-   if (chr(1) /= 'x' .and. chr(2) /= 'x') STOP 1\n+   if (chr(1) /= 'x' .or. chr(2) /= 'x') STOP 1\n end"}, {"sha": "bafb046afd40006d9f9fa90e163ebb50cb4b8162", "filename": "gcc/testsuite/gfortran.dg/transfer_simplify_13.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1a93102b41a558f3ad49a7c66015257535c747/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1a93102b41a558f3ad49a7c66015257535c747/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_simplify_13.f90?ref=6c1a93102b41a558f3ad49a7c66015257535c747", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+! PR fortran/104127 - ICE in get_array_charlen\n+! Contributed by G.Steinmetz\n+\n+program p\n+  character(4) :: mold = \"XYZ\"\n+  integer      :: i = 0\n+  integer, parameter :: l1 = len  (transfer('ab', 'xyz', size=0))\n+  integer, parameter :: s1 = size (transfer('ab', 'xyz', size=0))\n+  integer, parameter :: l4 = len  (transfer(4_'abcd', 4_'xy', size=0))\n+  integer, parameter :: s4 = size (transfer(4_'abcd', 4_'xy', size=0))\n+  integer, parameter :: l2 = len  (transfer('ab', mold,  size=0))\n+  integer, parameter :: l3 = len  (transfer('ab', mold,  size=1))\n+  integer, parameter :: l5 = len  (transfer('ab',['xyz'], size=0))\n+  integer, parameter :: s5 = size (transfer('ab',['xyz'], size=0))\n+  call sub0 ( transfer('a', 'y', size=0) )\n+  call sub1 ([transfer('a', 'y', size=0)])\n+  call sub2 ([transfer('a',['y'],size=0)])\n+  call sub3 ( transfer('a', 'y', size=1) )\n+  call sub4 ([transfer('a', 'y', size=1)])\n+  call sub5 ( transfer('a', 'y', size=i) )\n+  call sub6 ( transfer(1_'abcd', 1_'xy' , size=0))\n+  call sub7 ( transfer(1_'abcd',[1_'xy'], size=0))\n+  call sub8 ( transfer(4_'abcd', 4_'xy' , size=0))\n+  call sub9 ( transfer(4_'abcd',[4_'xy'], size=0))\n+  print *, transfer('abcd', 'xy', size=0)\n+  if (l1 /= 3 .or. s1 /= 0) stop 1\n+  if (l4 /= 2 .or. s4 /= 0) stop 2\n+  if (l2 /= 4 .or. l3 /= 4) stop 3\n+  if (l5 /= 3 .or. s5 /= 0) stop 4\n+end\n+\n+! { dg-final { scan-tree-dump-not \"_gfortran_stop_numeric\" \"original\" } }"}]}