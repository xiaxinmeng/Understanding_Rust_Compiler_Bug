{"sha": "2045ae1d3f511717c2a1223148ce63f71800e1dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0NWFlMWQzZjUxMTcxN2MyYTEyMjMxNDhjZTYzZjcxODAwZTFkZA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2018-10-11T14:00:20Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2018-10-11T14:00:20Z"}, "message": "Elide repeated RTL elements.\n\nGCN's 64-lane vectors tend to make RTL dumps very long.  This patch makes them\nfar more bearable by eliding long sequences of the same element into \"repeated\"\nmessages.\n\nThis also takes care of reading repeated sequences in the RTL front-end.\n\nThere are self tests for both reading and writing.\n\n2018-10-11  Andrew Stubbs  <ams@codesourcery.com>\n\t    Jan Hubicka  <jh@suse.cz>\n\t    Martin Jambor  <mjambor@suse.cz>\n\n\tgcc/\n\t* print-rtl.c (print_rtx_operand_codes_E_and_V): Print how many times\n\tthe same elements are repeated rather than printing all of them.\n\t* read-rtl.c (rtx_reader::read_rtx_operand): Recognize and expand\n\t\"repeated\" elements.\n\t* read-rtl-function.c (test_loading_repeat): New function.\n\t(read_rtl_function_c_tests): Call test_loading_repeat.\n\t* rtl-tests.c (test_dumping_repeat): New function.\n\t(rtl_tests_c_tests): Call test_dumping_repeat.\n\n\tgcc/testsuite/\n\t* selftests/repeat.rtl: New file.\n\nCo-Authored-By: Jan Hubicka <jh@suse.cz>\nCo-Authored-By: Martin Jambor <mjambor@suse.cz>\n\nFrom-SVN: r265042", "tree": {"sha": "dc74c7785ea195aa9f6861e525f4709cbc23d73e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc74c7785ea195aa9f6861e525f4709cbc23d73e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2045ae1d3f511717c2a1223148ce63f71800e1dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2045ae1d3f511717c2a1223148ce63f71800e1dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2045ae1d3f511717c2a1223148ce63f71800e1dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2045ae1d3f511717c2a1223148ce63f71800e1dd/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9f3b77cf5290a8417cfc450b936039c78f6618b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f3b77cf5290a8417cfc450b936039c78f6618b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f3b77cf5290a8417cfc450b936039c78f6618b"}], "stats": {"total": 113, "additions": 110, "deletions": 3}, "files": [{"sha": "421a4c3ed276227413d06a2efd6899ba07b2a993", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -1,3 +1,16 @@\n+2018-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* print-rtl.c (print_rtx_operand_codes_E_and_V): Print how many times\n+\tthe same elements are repeated rather than printing all of them.\n+\t* read-rtl.c (rtx_reader::read_rtx_operand): Recognize and expand\n+\t\"repeated\" elements.\n+\t* read-rtl-function.c (test_loading_repeat): New function.\n+\t(read_rtl_function_c_tests): Call test_loading_repeat.\n+\t* rtl-tests.c (test_dumping_repeat): New function.\n+\t(rtl_tests_c_tests): Call test_dumping_repeat.\n+\n 2018-10-11  Richard Biener  <rguenther@suse.de>\n \n \t* config/i386/x86-tune-costs.h (bdver?_memcpy, bdver?_memset,"}, {"sha": "7af92e168380c4139893a297226c3e47211d8ed5", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -370,7 +370,20 @@ rtx_writer::print_rtx_operand_codes_E_and_V (const_rtx in_rtx, int idx)\n \tm_sawclose = 1;\n \n       for (int j = 0; j < XVECLEN (in_rtx, idx); j++)\n-\tprint_rtx (XVECEXP (in_rtx, idx, j));\n+\t{\n+\t  int j1;\n+\n+\t  print_rtx (XVECEXP (in_rtx, idx, j));\n+\t  for (j1 = j + 1; j1 < XVECLEN (in_rtx, idx); j1++)\n+\t    if (XVECEXP (in_rtx, idx, j) != XVECEXP (in_rtx, idx, j1))\n+\t      break;\n+\n+\t  if (j1 != j + 1)\n+\t    {\n+\t      fprintf (m_outfile, \" repeated x%i\", j1 - j);\n+\t      j = j1 - 1;\n+\t    }\n+\t}\n \n       m_indent -= 2;\n     }"}, {"sha": "8746f704d03642ad86b4cce1a807ef9f83458205", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -2166,6 +2166,20 @@ test_loading_mem ()\n   ASSERT_EQ (6, MEM_ADDR_SPACE (mem2));\n }\n \n+/* Verify that \"repeated xN\" is read correctly.  */\n+\n+static void\n+test_loading_repeat ()\n+{\n+  rtl_dump_test t (SELFTEST_LOCATION, locate_file (\"repeat.rtl\"));\n+\n+  rtx_insn *insn_1 = get_insn_by_uid (1);\n+  ASSERT_EQ (PARALLEL, GET_CODE (PATTERN (insn_1)));\n+  ASSERT_EQ (64, XVECLEN (PATTERN (insn_1), 0));\n+  for (int i = 0; i < 64; i++)\n+    ASSERT_EQ (const0_rtx, XVECEXP (PATTERN (insn_1), 0, i));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -2187,6 +2201,7 @@ read_rtl_function_c_tests ()\n   test_loading_cfg ();\n   test_loading_bb_index ();\n   test_loading_mem ();\n+  test_loading_repeat ();\n }\n \n } // namespace selftest"}, {"sha": "d698dd4af4d2998f67b1820d9022d36ba5849479", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -1690,6 +1690,7 @@ rtx_reader::read_rtx_operand (rtx return_rtx, int idx)\n \tstruct obstack vector_stack;\n \tint list_counter = 0;\n \trtvec return_vec = NULL_RTVEC;\n+\trtx saved_rtx = NULL_RTX;\n \n \trequire_char_ws ('[');\n \n@@ -1700,8 +1701,34 @@ rtx_reader::read_rtx_operand (rtx return_rtx, int idx)\n \t    if (c == EOF)\n \t      fatal_expected_char (']', c);\n \t    unread_char (c);\n-\t    list_counter++;\n-\t    obstack_ptr_grow (&vector_stack, read_nested_rtx ());\n+\n+\t    rtx value;\n+\t    int repeat_count = 1;\n+\t    if (c == 'r')\n+\t      {\n+\t\t/* Process \"repeated xN\" directive.  */\n+\t\tread_name (&name);\n+\t\tif (strcmp (name.string, \"repeated\"))\n+\t\t  fatal_with_file_and_line (\"invalid directive \\\"%s\\\"\\n\",\n+\t\t\t\t\t    name.string);\n+\t\tread_name (&name);\n+\t\tif (!sscanf (name.string, \"x%d\", &repeat_count))\n+\t\t  fatal_with_file_and_line (\"invalid repeat count \\\"%s\\\"\\n\",\n+\t\t\t\t\t    name.string);\n+\n+\t\t/* We already saw one of the instances.  */\n+\t\trepeat_count--;\n+\t\tvalue = saved_rtx;\n+\t      }\n+\t    else\n+\t      value = read_nested_rtx ();\n+\n+\t    for (; repeat_count > 0; repeat_count--)\n+\t      {\n+\t\tlist_counter++;\n+\t\tobstack_ptr_grow (&vector_stack, value);\n+\t      }\n+\t    saved_rtx = value;\n \t  }\n \tif (list_counter > 0)\n \t  {"}, {"sha": "c684f8e1d74a2aabd2190e2fefb7daa05b9cbc34", "filename": "gcc/rtl-tests.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Frtl-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Frtl-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-tests.c?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -284,6 +284,29 @@ const_poly_int_tests<N>::run ()\n \t     gen_int_mode (poly_int64 (5, -1), QImode));\n }\n \n+/* Check dumping of repeated RTL vectors.  */\n+\n+static void\n+test_dumping_repeat ()\n+{\n+  rtx p = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (3));\n+  XVECEXP (p, 0, 0) = const0_rtx;\n+  XVECEXP (p, 0, 1) = const0_rtx;\n+  XVECEXP (p, 0, 2) = const0_rtx;\n+  ASSERT_RTL_DUMP_EQ (\"(parallel [\\n\"\n+\t\t      \"        (const_int 0) repeated x3\\n\"\n+\t\t      \"    ])\",\n+\t\t      p);\n+\n+  XVECEXP (p, 0, 1) = const1_rtx;\n+  ASSERT_RTL_DUMP_EQ (\"(parallel [\\n\"\n+\t\t      \"        (const_int 0)\\n\"\n+\t\t      \"        (const_int 1)\\n\"\n+\t\t      \"        (const_int 0)\\n\"\n+\t\t      \"    ])\",\n+\t\t      p);\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -295,6 +318,7 @@ rtl_tests_c_tests ()\n   test_single_set ();\n   test_uncond_jump ();\n   const_poly_int_tests<NUM_POLY_INT_COEFFS>::run ();\n+  test_dumping_repeat ();\n \n   /* Purge state.  */\n   set_first_insn (NULL);"}, {"sha": "c5bbaf8df79b427e8163b82a693a1039a1e2176c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -1,3 +1,7 @@\n+2018-10-11  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* selftests/repeat.rtl: New file.\n+\n 2018-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87582"}, {"sha": "5507d33527b07ea14c04d0cd9c6dacde5826f276", "filename": "gcc/testsuite/selftests/repeat.rtl", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Ftestsuite%2Fselftests%2Frepeat.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2045ae1d3f511717c2a1223148ce63f71800e1dd/gcc%2Ftestsuite%2Fselftests%2Frepeat.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fselftests%2Frepeat.rtl?ref=2045ae1d3f511717c2a1223148ce63f71800e1dd", "patch": "@@ -0,0 +1,11 @@\n+(function \"repeat_examples\"\n+  (insn-chain\n+    (block 2\n+      (edge-from entry (flags \"FALLTHRU\"))\n+      (cinsn 1\n+        (parallel [(const_int 0) repeated x64])\n+        \"test.c\":2 (nil))\n+      (edge-to exit (flags \"FALLTHRU\"))\n+    ) ;; block 2\n+  ) ;; insn-chain\n+) ;; function"}]}