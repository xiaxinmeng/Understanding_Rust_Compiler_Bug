{"sha": "d92f4df01a7c59cea958574a7d716661bb96a35b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkyZjRkZjAxYTdjNTljZWE5NTg1NzRhN2Q3MTY2NjFiYjk2YTM1Yg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-02-05T00:43:56Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2014-02-05T00:43:56Z"}, "message": "re PR target/59777 (Incorrect expansion of TLS arguments in a call)\n\n\tPR target/59777\n\t* config/pa/pa.c (legitimize_tls_address): Return original address\n\tif not passed a SYMBOL_REF rtx.\n\t(hppa_legitimize_address): Call legitimize_tls_address for all TLS\n\taddresses.\n\t(pa_emit_move_sequence): Simplify TLS source operands.\n\t(pa_legitimate_constant_p): Reject all TLS constants.\n\t* config/pa/pa.h (PA_SYMBOL_REF_TLS_P): Correct comment.\n\t(CONSTANT_ADDRESS_P): Reject TLS CONST addresses.\n\nFrom-SVN: r207493", "tree": {"sha": "f9b5e9309ea124bd5de8fed7d0b8cf62513e7b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b5e9309ea124bd5de8fed7d0b8cf62513e7b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d92f4df01a7c59cea958574a7d716661bb96a35b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92f4df01a7c59cea958574a7d716661bb96a35b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d92f4df01a7c59cea958574a7d716661bb96a35b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92f4df01a7c59cea958574a7d716661bb96a35b/comments", "author": null, "committer": null, "parents": [{"sha": "ba057b4e87ff844635dddf0d1ced6dcf0d3f80ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba057b4e87ff844635dddf0d1ced6dcf0d3f80ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba057b4e87ff844635dddf0d1ced6dcf0d3f80ac"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "f15e84739ede9f8fb334c5d0e557bcbea8d0c2bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92f4df01a7c59cea958574a7d716661bb96a35b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92f4df01a7c59cea958574a7d716661bb96a35b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d92f4df01a7c59cea958574a7d716661bb96a35b", "patch": "@@ -1,3 +1,15 @@\n+2014-02-04  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR target/59777\n+\t* config/pa/pa.c (legitimize_tls_address): Return original address\n+\tif not passed a SYMBOL_REF rtx.\n+\t(hppa_legitimize_address): Call legitimize_tls_address for all TLS\n+\taddresses.\n+\t(pa_emit_move_sequence): Simplify TLS source operands.\n+\t(pa_legitimate_constant_p): Reject all TLS constants.\n+\t* config/pa/pa.h (PA_SYMBOL_REF_TLS_P): Correct comment.\n+\t(CONSTANT_ADDRESS_P): Reject TLS CONST addresses.\n+\n 2014-02-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa.c (function_and_variable_visibility): Decompose DECL_ONE_ONLY"}, {"sha": "f9d4da0659b306820f6a01745780d5164ec6201d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92f4df01a7c59cea958574a7d716661bb96a35b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92f4df01a7c59cea958574a7d716661bb96a35b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d92f4df01a7c59cea958574a7d716661bb96a35b", "patch": "@@ -916,9 +916,12 @@ static rtx\n legitimize_tls_address (rtx addr)\n {\n   rtx ret, insn, tmp, t1, t2, tp;\n-  enum tls_model model = SYMBOL_REF_TLS_MODEL (addr);\n \n-  switch (model) \n+  /* Currently, we can't handle anything but a SYMBOL_REF.  */\n+  if (GET_CODE (addr) != SYMBOL_REF)\n+    return addr;\n+\n+  switch (SYMBOL_REF_TLS_MODEL (addr)) \n     {\n       case TLS_MODEL_GLOBAL_DYNAMIC:\n \ttmp = gen_reg_rtx (Pmode);\n@@ -1039,7 +1042,7 @@ hppa_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       && !REG_POINTER (XEXP (x, 1)))\n     return gen_rtx_PLUS (Pmode, XEXP (x, 1), XEXP (x, 0));\n \n-  if (PA_SYMBOL_REF_TLS_P (x))\n+  if (pa_tls_referenced_p (x))\n     return legitimize_tls_address (x);\n   else if (flag_pic)\n     return legitimize_pic_address (x, mode, gen_reg_rtx (Pmode));\n@@ -1920,9 +1923,10 @@ pa_emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n      not consider them legitimate constants.  Loop optimizations can\n      call the emit_move_xxx with one as a source.  */\n   if ((GET_CODE (operand1) != HIGH && immediate_operand (operand1, mode))\n-      || function_label_operand (operand1, VOIDmode)\n       || (GET_CODE (operand1) == HIGH\n-\t  && symbolic_operand (XEXP (operand1, 0), mode)))\n+\t  && symbolic_operand (XEXP (operand1, 0), mode))\n+      || function_label_operand (operand1, VOIDmode)\n+      || pa_tls_referenced_p (operand1))\n     {\n       int ishighonly = 0;\n \n@@ -10300,7 +10304,7 @@ pa_legitimate_constant_p (enum machine_mode mode, rtx x)\n   /* TLS_MODEL_GLOBAL_DYNAMIC and TLS_MODEL_LOCAL_DYNAMIC are not\n      legitimate constants.  The other variants can't be handled by\n      the move patterns after reload starts.  */\n-  if (PA_SYMBOL_REF_TLS_P (x))\n+  if (pa_tls_referenced_p (x))\n     return false;\n \n   if (TARGET_64BIT && GET_CODE (x) == CONST_DOUBLE)"}, {"sha": "ac3f0ebe74e9a834c461d50d0424ee5addbb4abd", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d92f4df01a7c59cea958574a7d716661bb96a35b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d92f4df01a7c59cea958574a7d716661bb96a35b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d92f4df01a7c59cea958574a7d716661bb96a35b", "patch": "@@ -784,9 +784,9 @@ extern int may_call_alloca;\n \n #define MAX_REGS_PER_ADDRESS 2\n \n-/* Non-TLS symbolic references.  */\n-#define PA_SYMBOL_REF_TLS_P(RTX) \\\n-  (GET_CODE (RTX) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (RTX) != 0)\n+/* TLS symbolic reference.  */\n+#define PA_SYMBOL_REF_TLS_P(X) \\\n+  (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (X) != 0)\n \n /* Recognize any constant value that is a valid address except\n    for symbolic addresses.  We get better CSE by rejecting them\n@@ -796,7 +796,8 @@ extern int may_call_alloca;\n #define CONSTANT_ADDRESS_P(X) \\\n   ((GET_CODE (X) == LABEL_REF \t\t\t\t\t\t\\\n    || (GET_CODE (X) == SYMBOL_REF && !SYMBOL_REF_TLS_MODEL (X))\t\t\\\n-   || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n+   || GET_CODE (X) == CONST_INT\t\t\t\t\t\t\\\n+   || (GET_CODE (X) == CONST && !pa_tls_referenced_p (X))\t\t\\\n    || GET_CODE (X) == HIGH) \t\t\t\t\t\t\\\n    && (reload_in_progress || reload_completed\t\t\t\t\\\n        || ! pa_symbolic_expression_p (X)))"}]}