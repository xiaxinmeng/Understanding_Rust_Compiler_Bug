{"sha": "2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlODJmMjRiNDE1MGMwYzcxYWU0NWMxN2UxMWE3YTE1OWMyZGNjNA==", "commit": {"author": {"name": "Nala Ginrut", "email": "mulei@gnu.org", "date": "2020-05-18T12:46:00Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:14Z"}, "message": "Add rust-name-resolution", "tree": {"sha": "ff19e07aabef43fdb5fcb5936985ee91130cff64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff19e07aabef43fdb5fcb5936985ee91130cff64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4/comments", "author": {"login": "NalaGinrut", "id": 19734, "node_id": "MDQ6VXNlcjE5NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/19734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NalaGinrut", "html_url": "https://github.com/NalaGinrut", "followers_url": "https://api.github.com/users/NalaGinrut/followers", "following_url": "https://api.github.com/users/NalaGinrut/following{/other_user}", "gists_url": "https://api.github.com/users/NalaGinrut/gists{/gist_id}", "starred_url": "https://api.github.com/users/NalaGinrut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NalaGinrut/subscriptions", "organizations_url": "https://api.github.com/users/NalaGinrut/orgs", "repos_url": "https://api.github.com/users/NalaGinrut/repos", "events_url": "https://api.github.com/users/NalaGinrut/events{/privacy}", "received_events_url": "https://api.github.com/users/NalaGinrut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26ccc9a6e2298fe43a9b83ce1054f5d53379e68"}], "stats": {"total": 816, "additions": 816, "deletions": 0}, "files": [{"sha": "ffe37224dd88f47918be2b79a700aaeb0846eb0d", "filename": "gcc/rust/analysis/rust-name-resolution.cc", "status": "added", "additions": 591, "deletions": 0, "changes": 591, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4/gcc%2Frust%2Fanalysis%2Frust-name-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4/gcc%2Frust%2Fanalysis%2Frust-name-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-name-resolution.cc?ref=2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "patch": "@@ -0,0 +1,591 @@\n+#include \"rust-name-resolution.h\"\n+#include \"rust-diagnostics.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+NameResolution::NameResolution (AST::Crate &crate, TopLevelScan &toplevel)\n+  : Resolution (crate, toplevel)\n+{}\n+\n+NameResolution::~NameResolution ()\n+{\n+  typeScope.Pop ();\n+  scope.Pop ();\n+}\n+\n+bool\n+NameResolution::Resolve (AST::Crate &crate, TopLevelScan &toplevel)\n+{\n+  NameResolution resolver (crate, toplevel);\n+  return resolver.go ();\n+}\n+\n+bool\n+NameResolution::go ()\n+{\n+  for (auto &item : crate.items)\n+    item->accept_vis (*this);\n+\n+  return true;\n+}\n+\n+void\n+NameResolution::visit (AST::Token &tok)\n+{}\n+\n+void\n+NameResolution::visit (AST::DelimTokenTree &delim_tok_tree)\n+{}\n+\n+void\n+NameResolution::visit (AST::AttrInputMetaItemContainer &input)\n+{}\n+\n+void\n+NameResolution::visit (AST::IdentifierExpr &ident_expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::Lifetime &lifetime)\n+{}\n+\n+void\n+NameResolution::visit (AST::LifetimeParam &lifetime_param)\n+{}\n+\n+void\n+NameResolution::visit (AST::MacroInvocationSemi &macro)\n+{}\n+\n+// rust-path.h\n+void\n+NameResolution::visit (AST::PathInExpression &path)\n+{}\n+\n+void\n+NameResolution::visit (AST::TypePathSegment &segment)\n+{}\n+void\n+NameResolution::visit (AST::TypePathSegmentGeneric &segment)\n+{}\n+\n+void\n+NameResolution::visit (AST::TypePathSegmentFunction &segment)\n+{}\n+\n+void\n+NameResolution::visit (AST::TypePath &path)\n+{}\n+\n+void\n+NameResolution::visit (AST::QualifiedPathInExpression &path)\n+{\n+  typeComparisonBuffer.push_back (path.as_string ());\n+}\n+\n+void\n+NameResolution::visit (AST::QualifiedPathInType &path)\n+{}\n+\n+// rust-expr.h\n+void\n+NameResolution::visit (AST::LiteralExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::AttrInputLiteral &attr_input)\n+{}\n+\n+void\n+NameResolution::visit (AST::MetaItemLitExpr &meta_item)\n+{}\n+\n+void\n+NameResolution::visit (AST::MetaItemPathLit &meta_item)\n+{}\n+\n+void\n+NameResolution::visit (AST::BorrowExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::DereferenceExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::ErrorPropagationExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::NegationExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::ArithmeticOrLogicalExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::ComparisonExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::LazyBooleanExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::TypeCastExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::AssignmentExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::CompoundAssignmentExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::GroupedExpr &expr)\n+{}\n+// void NameResolution::visit(ArrayElems& elems) {}\n+void\n+NameResolution::visit (AST::ArrayElemsValues &elems)\n+{}\n+void\n+NameResolution::visit (AST::ArrayElemsCopied &elems)\n+{}\n+void\n+NameResolution::visit (AST::ArrayExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::ArrayIndexExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::TupleExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::TupleIndexExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::StructExprStruct &expr)\n+{}\n+// void NameResolution::visit(StructExprField& field) {}\n+void\n+NameResolution::visit (AST::StructExprFieldIdentifier &field)\n+{}\n+void\n+NameResolution::visit (AST::StructExprFieldIdentifierValue &field)\n+{}\n+void\n+NameResolution::visit (AST::StructExprFieldIndexValue &field)\n+{}\n+void\n+NameResolution::visit (AST::StructExprStructFields &expr)\n+{}\n+void\n+NameResolution::visit (AST::StructExprStructBase &expr)\n+{}\n+void\n+NameResolution::visit (AST::StructExprTuple &expr)\n+{}\n+void\n+NameResolution::visit (AST::StructExprUnit &expr)\n+{}\n+// void NameResolution::visit(EnumExprField& field) {}\n+void\n+NameResolution::visit (AST::EnumExprFieldIdentifier &field)\n+{}\n+void\n+NameResolution::visit (AST::EnumExprFieldIdentifierValue &field)\n+{}\n+void\n+NameResolution::visit (AST::EnumExprFieldIndexValue &field)\n+{}\n+void\n+NameResolution::visit (AST::EnumExprStruct &expr)\n+{}\n+void\n+NameResolution::visit (AST::EnumExprTuple &expr)\n+{}\n+void\n+NameResolution::visit (AST::EnumExprFieldless &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::CallExpr &expr)\n+{}\n+\n+void\n+NameResolution::visit (AST::MethodCallExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::FieldAccessExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::ClosureExprInner &expr)\n+{}\n+void\n+NameResolution::visit (AST::BlockExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::ClosureExprInnerTyped &expr)\n+{}\n+void\n+NameResolution::visit (AST::ContinueExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::BreakExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::RangeFromToExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::RangeFromExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::RangeToExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::RangeFullExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::RangeFromToInclExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::RangeToInclExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::ReturnExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::UnsafeBlockExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::LoopExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::WhileLoopExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::WhileLetLoopExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::ForLoopExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfExprConseqElse &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfExprConseqIf &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfExprConseqIfLet &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfLetExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfLetExprConseqElse &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfLetExprConseqIf &expr)\n+{}\n+void\n+NameResolution::visit (AST::IfLetExprConseqIfLet &expr)\n+{}\n+// void NameResolution::visit(MatchCase& match_case) {}\n+void\n+NameResolution::visit (AST::MatchCaseBlockExpr &match_case)\n+{}\n+void\n+NameResolution::visit (AST::MatchCaseExpr &match_case)\n+{}\n+void\n+NameResolution::visit (AST::MatchExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::AwaitExpr &expr)\n+{}\n+void\n+NameResolution::visit (AST::AsyncBlockExpr &expr)\n+{}\n+\n+// rust-item.h\n+void\n+NameResolution::visit (AST::TypeParam &param)\n+{}\n+// void NameResolution::visit(WhereClauseItem& item) {}\n+void\n+NameResolution::visit (AST::LifetimeWhereClauseItem &item)\n+{}\n+void\n+NameResolution::visit (AST::TypeBoundWhereClauseItem &item)\n+{}\n+void\n+NameResolution::visit (AST::Method &method)\n+{}\n+void\n+NameResolution::visit (AST::ModuleBodied &module)\n+{}\n+void\n+NameResolution::visit (AST::ModuleNoBody &module)\n+{}\n+void\n+NameResolution::visit (AST::ExternCrate &crate)\n+{}\n+// void NameResolution::visit(UseTree& use_tree) {}\n+void\n+NameResolution::visit (AST::UseTreeGlob &use_tree)\n+{}\n+void\n+NameResolution::visit (AST::UseTreeList &use_tree)\n+{}\n+void\n+NameResolution::visit (AST::UseTreeRebind &use_tree)\n+{}\n+void\n+NameResolution::visit (AST::UseDeclaration &use_decl)\n+{}\n+\n+void\n+NameResolution::visit (AST::Function &function)\n+{}\n+\n+void\n+NameResolution::visit (AST::TypeAlias &type_alias)\n+{}\n+void\n+NameResolution::visit (AST::StructStruct &struct_item)\n+{}\n+void\n+NameResolution::visit (AST::TupleStruct &tuple_struct)\n+{}\n+void\n+NameResolution::visit (AST::EnumItem &item)\n+{}\n+void\n+NameResolution::visit (AST::EnumItemTuple &item)\n+{}\n+void\n+NameResolution::visit (AST::EnumItemStruct &item)\n+{}\n+void\n+NameResolution::visit (AST::EnumItemDiscriminant &item)\n+{}\n+void\n+NameResolution::visit (AST::Enum &enum_item)\n+{}\n+void\n+NameResolution::visit (AST::Union &union_item)\n+{}\n+\n+void\n+NameResolution::visit (AST::ConstantItem &const_item)\n+{}\n+\n+void\n+NameResolution::visit (AST::StaticItem &static_item)\n+{}\n+void\n+NameResolution::visit (AST::TraitItemFunc &item)\n+{}\n+void\n+NameResolution::visit (AST::TraitItemMethod &item)\n+{}\n+void\n+NameResolution::visit (AST::TraitItemConst &item)\n+{}\n+void\n+NameResolution::visit (AST::TraitItemType &item)\n+{}\n+void\n+NameResolution::visit (AST::Trait &trait)\n+{}\n+void\n+NameResolution::visit (AST::InherentImpl &impl)\n+{}\n+void\n+NameResolution::visit (AST::TraitImpl &impl)\n+{}\n+// void NameResolution::visit(ExternalItem& item) {}\n+void\n+NameResolution::visit (AST::ExternalStaticItem &item)\n+{}\n+void\n+NameResolution::visit (AST::ExternalFunctionItem &item)\n+{}\n+void\n+NameResolution::visit (AST::ExternBlock &block)\n+{}\n+\n+// rust-macro.h\n+void\n+NameResolution::visit (AST::MacroMatchFragment &match)\n+{}\n+void\n+NameResolution::visit (AST::MacroMatchRepetition &match)\n+{}\n+void\n+NameResolution::visit (AST::MacroMatcher &matcher)\n+{}\n+\n+void\n+NameResolution::visit (AST::MacroRulesDefinition &rules_def)\n+{}\n+\n+void\n+NameResolution::visit (AST::MacroInvocation &macro_invoc)\n+{}\n+void\n+NameResolution::visit (AST::MetaItemPath &meta_item)\n+{}\n+void\n+NameResolution::visit (AST::MetaItemSeq &meta_item)\n+{}\n+void\n+NameResolution::visit (AST::MetaWord &meta_item)\n+{}\n+void\n+NameResolution::visit (AST::MetaNameValueStr &meta_item)\n+{}\n+void\n+NameResolution::visit (AST::MetaListPaths &meta_item)\n+{}\n+void\n+NameResolution::visit (AST::MetaListNameValueStr &meta_item)\n+{}\n+\n+// rust-pattern.h\n+void\n+NameResolution::visit (AST::LiteralPattern &pattern)\n+{}\n+\n+void\n+NameResolution::visit (AST::IdentifierPattern &pattern)\n+{}\n+\n+void\n+NameResolution::visit (AST::WildcardPattern &pattern)\n+{}\n+// void NameResolution::visit(RangePatternBound& bound) {}\n+void\n+NameResolution::visit (AST::RangePatternBoundLiteral &bound)\n+{}\n+void\n+NameResolution::visit (AST::RangePatternBoundPath &bound)\n+{}\n+void\n+NameResolution::visit (AST::RangePatternBoundQualPath &bound)\n+{}\n+void\n+NameResolution::visit (AST::RangePattern &pattern)\n+{}\n+void\n+NameResolution::visit (AST::ReferencePattern &pattern)\n+{}\n+// void NameResolution::visit(StructPatternField& field) {}\n+void\n+NameResolution::visit (AST::StructPatternFieldTuplePat &field)\n+{}\n+void\n+NameResolution::visit (AST::StructPatternFieldIdentPat &field)\n+{}\n+void\n+NameResolution::visit (AST::StructPatternFieldIdent &field)\n+{}\n+void\n+NameResolution::visit (AST::StructPattern &pattern)\n+{}\n+// void NameResolution::visit(TupleStructItems& tuple_items) {}\n+void\n+NameResolution::visit (AST::TupleStructItemsNoRange &tuple_items)\n+{}\n+void\n+NameResolution::visit (AST::TupleStructItemsRange &tuple_items)\n+{}\n+void\n+NameResolution::visit (AST::TupleStructPattern &pattern)\n+{}\n+// void NameResolution::visit(TuplePatternItems& tuple_items) {}\n+void\n+NameResolution::visit (AST::TuplePatternItemsMultiple &tuple_items)\n+{}\n+void\n+NameResolution::visit (AST::TuplePatternItemsRanged &tuple_items)\n+{}\n+void\n+NameResolution::visit (AST::TuplePattern &pattern)\n+{}\n+void\n+NameResolution::visit (AST::GroupedPattern &pattern)\n+{}\n+void\n+NameResolution::visit (AST::SlicePattern &pattern)\n+{}\n+\n+// rust-stmt.h\n+void\n+NameResolution::visit (AST::EmptyStmt &stmt)\n+{}\n+\n+void\n+NameResolution::visit (AST::LetStmt &stmt)\n+{}\n+\n+void\n+NameResolution::visit (AST::ExprStmtWithoutBlock &stmt)\n+{}\n+\n+void\n+NameResolution::visit (AST::ExprStmtWithBlock &stmt)\n+{}\n+\n+// rust-type.h\n+void\n+NameResolution::visit (AST::TraitBound &bound)\n+{}\n+\n+void\n+NameResolution::visit (AST::ImplTraitType &type)\n+{}\n+\n+void\n+NameResolution::visit (AST::TraitObjectType &type)\n+{}\n+void\n+NameResolution::visit (AST::ParenthesisedType &type)\n+{}\n+void\n+NameResolution::visit (AST::ImplTraitTypeOneBound &type)\n+{}\n+void\n+NameResolution::visit (AST::TraitObjectTypeOneBound &type)\n+{}\n+void\n+NameResolution::visit (AST::TupleType &type)\n+{}\n+void\n+NameResolution::visit (AST::NeverType &type)\n+{}\n+void\n+NameResolution::visit (AST::RawPointerType &type)\n+{}\n+void\n+NameResolution::visit (AST::ReferenceType &type)\n+{}\n+void\n+NameResolution::visit (AST::ArrayType &type)\n+{}\n+void\n+NameResolution::visit (AST::SliceType &type)\n+{}\n+void\n+NameResolution::visit (AST::InferredType &type)\n+{}\n+void\n+NameResolution::visit (AST::BareFunctionType &type)\n+{}\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "e82b78920c2c57e823dc70d73bd6baacd4cc7338", "filename": "gcc/rust/analysis/rust-name-resolution.h", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4/gcc%2Frust%2Fanalysis%2Frust-name-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be82f24b4150c0c71ae45c17e11a7a159c2dcc4/gcc%2Frust%2Fanalysis%2Frust-name-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-name-resolution.h?ref=2be82f24b4150c0c71ae45c17e11a7a159c2dcc4", "patch": "@@ -0,0 +1,225 @@\n+#pragma once\n+\n+#include \"rust-resolution.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class NameResolution : public Resolution\n+{\n+public:\n+  ~NameResolution ();\n+  static bool Resolve (AST::Crate &crate, TopLevelScan &toplevel);\n+\n+  // visitor impl\n+  // rust-ast.h\n+  //  void visit(AttrInput& attr_input);\n+  //  void visit(TokenTree& token_tree);\n+  //  void visit(MacroMatch& macro_match);\n+  void visit (AST::Token &tok) override;\n+  void visit (AST::DelimTokenTree &delim_tok_tree) override;\n+  void visit (AST::AttrInputMetaItemContainer &input) override;\n+  //  void visit(MetaItem& meta_item) override;\n+  //  void vsit(Stmt& stmt) override;\n+  //  void visit(Expr& expr) override;\n+  void visit (AST::IdentifierExpr &ident_expr) override;\n+  //  void visit(Pattern& pattern) override;\n+  //  void visit(Type& type) override;\n+  //  void visit(TypeParamBound& type_param_bound) override;\n+  void visit (AST::Lifetime &lifetime) override;\n+  //  void visit(GenericParam& generic_param) override;\n+  void visit (AST::LifetimeParam &lifetime_param) override;\n+  //  void visit(TraitItem& trait_item) override;\n+  //  void visit(InherentImplItem& inherent_impl_item) override;\n+  //  void visit(TraitImplItem& trait_impl_item) override;\n+  void visit (AST::MacroInvocationSemi &macro) override;\n+\n+  // rust-path.h\n+  void visit (AST::PathInExpression &path) override;\n+  void visit (AST::TypePathSegment &segment) override;\n+  void visit (AST::TypePathSegmentGeneric &segment) override;\n+  void visit (AST::TypePathSegmentFunction &segment) override;\n+  void visit (AST::TypePath &path) override;\n+  void visit (AST::QualifiedPathInExpression &path) override;\n+  void visit (AST::QualifiedPathInType &path) override;\n+\n+  // rust-expr.h\n+  void visit (AST::LiteralExpr &expr) override;\n+  void visit (AST::AttrInputLiteral &attr_input) override;\n+  void visit (AST::MetaItemLitExpr &meta_item) override;\n+  void visit (AST::MetaItemPathLit &meta_item) override;\n+  void visit (AST::BorrowExpr &expr) override;\n+  void visit (AST::DereferenceExpr &expr) override;\n+  void visit (AST::ErrorPropagationExpr &expr) override;\n+  void visit (AST::NegationExpr &expr) override;\n+  void visit (AST::ArithmeticOrLogicalExpr &expr) override;\n+  void visit (AST::ComparisonExpr &expr) override;\n+  void visit (AST::LazyBooleanExpr &expr) override;\n+  void visit (AST::TypeCastExpr &expr) override;\n+  void visit (AST::AssignmentExpr &expr) override;\n+  void visit (AST::CompoundAssignmentExpr &expr) override;\n+  void visit (AST::GroupedExpr &expr) override;\n+  //  void visit(ArrayElems& elems) override;\n+  void visit (AST::ArrayElemsValues &elems) override;\n+  void visit (AST::ArrayElemsCopied &elems) override;\n+  void visit (AST::ArrayExpr &expr) override;\n+  void visit (AST::ArrayIndexExpr &expr) override;\n+  void visit (AST::TupleExpr &expr) override;\n+  void visit (AST::TupleIndexExpr &expr) override;\n+  void visit (AST::StructExprStruct &expr) override;\n+  //  void visit(StructExprField& field) override;\n+  void visit (AST::StructExprFieldIdentifier &field) override;\n+  void visit (AST::StructExprFieldIdentifierValue &field) override;\n+  void visit (AST::StructExprFieldIndexValue &field) override;\n+  void visit (AST::StructExprStructFields &expr) override;\n+  void visit (AST::StructExprStructBase &expr) override;\n+  void visit (AST::StructExprTuple &expr) override;\n+  void visit (AST::StructExprUnit &expr) override;\n+  //  void visit(EnumExprField& field) override;\n+  void visit (AST::EnumExprFieldIdentifier &field) override;\n+  void visit (AST::EnumExprFieldIdentifierValue &field) override;\n+  void visit (AST::EnumExprFieldIndexValue &field) override;\n+  void visit (AST::EnumExprStruct &expr) override;\n+  void visit (AST::EnumExprTuple &expr) override;\n+  void visit (AST::EnumExprFieldless &expr) override;\n+  void visit (AST::CallExpr &expr) override;\n+  void visit (AST::MethodCallExpr &expr) override;\n+  void visit (AST::FieldAccessExpr &expr) override;\n+  void visit (AST::ClosureExprInner &expr) override;\n+  void visit (AST::BlockExpr &expr) override;\n+  void visit (AST::ClosureExprInnerTyped &expr) override;\n+  void visit (AST::ContinueExpr &expr) override;\n+  void visit (AST::BreakExpr &expr) override;\n+  void visit (AST::RangeFromToExpr &expr) override;\n+  void visit (AST::RangeFromExpr &expr) override;\n+  void visit (AST::RangeToExpr &expr) override;\n+  void visit (AST::RangeFullExpr &expr) override;\n+  void visit (AST::RangeFromToInclExpr &expr) override;\n+  void visit (AST::RangeToInclExpr &expr) override;\n+  void visit (AST::ReturnExpr &expr) override;\n+  void visit (AST::UnsafeBlockExpr &expr) override;\n+  void visit (AST::LoopExpr &expr) override;\n+  void visit (AST::WhileLoopExpr &expr) override;\n+  void visit (AST::WhileLetLoopExpr &expr) override;\n+  void visit (AST::ForLoopExpr &expr) override;\n+  void visit (AST::IfExpr &expr) override;\n+  void visit (AST::IfExprConseqElse &expr) override;\n+  void visit (AST::IfExprConseqIf &expr) override;\n+  void visit (AST::IfExprConseqIfLet &expr) override;\n+  void visit (AST::IfLetExpr &expr) override;\n+  void visit (AST::IfLetExprConseqElse &expr) override;\n+  void visit (AST::IfLetExprConseqIf &expr) override;\n+  void visit (AST::IfLetExprConseqIfLet &expr) override;\n+  //  void visit(MatchCase& match_case) override;\n+  void visit (AST::MatchCaseBlockExpr &match_case) override;\n+  void visit (AST::MatchCaseExpr &match_case) override;\n+  void visit (AST::MatchExpr &expr) override;\n+  void visit (AST::AwaitExpr &expr) override;\n+  void visit (AST::AsyncBlockExpr &expr) override;\n+\n+  // rust-item.h\n+  void visit (AST::TypeParam &param) override;\n+  //  void visit(WhereClauseItem& item) override;\n+  void visit (AST::LifetimeWhereClauseItem &item) override;\n+  void visit (AST::TypeBoundWhereClauseItem &item) override;\n+  void visit (AST::Method &method) override;\n+  void visit (AST::ModuleBodied &module) override;\n+  void visit (AST::ModuleNoBody &module) override;\n+  void visit (AST::ExternCrate &crate) override;\n+  //  void visit(UseTree& use_tree) override;\n+  void visit (AST::UseTreeGlob &use_tree) override;\n+  void visit (AST::UseTreeList &use_tree) override;\n+  void visit (AST::UseTreeRebind &use_tree) override;\n+  void visit (AST::UseDeclaration &use_decl) override;\n+  void visit (AST::Function &function) override;\n+  void visit (AST::TypeAlias &type_alias) override;\n+  void visit (AST::StructStruct &struct_item) override;\n+  void visit (AST::TupleStruct &tuple_struct) override;\n+  void visit (AST::EnumItem &item) override;\n+  void visit (AST::EnumItemTuple &item) override;\n+  void visit (AST::EnumItemStruct &item) override;\n+  void visit (AST::EnumItemDiscriminant &item) override;\n+  void visit (AST::Enum &enum_item) override;\n+  void visit (AST::Union &union_item) override;\n+  void visit (AST::ConstantItem &const_item) override;\n+  void visit (AST::StaticItem &static_item) override;\n+  void visit (AST::TraitItemFunc &item) override;\n+  void visit (AST::TraitItemMethod &item) override;\n+  void visit (AST::TraitItemConst &item) override;\n+  void visit (AST::TraitItemType &item) override;\n+  void visit (AST::Trait &trait) override;\n+  void visit (AST::InherentImpl &impl) override;\n+  void visit (AST::TraitImpl &impl) override;\n+  //  void visit(ExternalItem& item) override;\n+  void visit (AST::ExternalStaticItem &item) override;\n+  void visit (AST::ExternalFunctionItem &item) override;\n+  void visit (AST::ExternBlock &block) override;\n+\n+  // rust-macro.h\n+  void visit (AST::MacroMatchFragment &match) override;\n+  void visit (AST::MacroMatchRepetition &match) override;\n+  void visit (AST::MacroMatcher &matcher) override;\n+  void visit (AST::MacroRulesDefinition &rules_def) override;\n+  void visit (AST::MacroInvocation &macro_invoc) override;\n+  void visit (AST::MetaItemPath &meta_item) override;\n+  void visit (AST::MetaItemSeq &meta_item) override;\n+  void visit (AST::MetaWord &meta_item) override;\n+  void visit (AST::MetaNameValueStr &meta_item) override;\n+  void visit (AST::MetaListPaths &meta_item) override;\n+  void visit (AST::MetaListNameValueStr &meta_item) override;\n+\n+  // rust-pattern.h\n+  void visit (AST::LiteralPattern &pattern) override;\n+  void visit (AST::IdentifierPattern &pattern) override;\n+  void visit (AST::WildcardPattern &pattern) override;\n+  //  void visit(RangePatternBound& bound) override;\n+  void visit (AST::RangePatternBoundLiteral &bound) override;\n+  void visit (AST::RangePatternBoundPath &bound) override;\n+  void visit (AST::RangePatternBoundQualPath &bound) override;\n+  void visit (AST::RangePattern &pattern) override;\n+  void visit (AST::ReferencePattern &pattern) override;\n+  //  void visit(StructPatternField& field) override;\n+  void visit (AST::StructPatternFieldTuplePat &field) override;\n+  void visit (AST::StructPatternFieldIdentPat &field) override;\n+  void visit (AST::StructPatternFieldIdent &field) override;\n+  void visit (AST::StructPattern &pattern) override;\n+  //  void visit(TupleStructItems& tuple_items) override;\n+  void visit (AST::TupleStructItemsNoRange &tuple_items) override;\n+  void visit (AST::TupleStructItemsRange &tuple_items) override;\n+  void visit (AST::TupleStructPattern &pattern) override;\n+  //  void visit(TuplePatternItems& tuple_items) override;\n+  void visit (AST::TuplePatternItemsMultiple &tuple_items) override;\n+  void visit (AST::TuplePatternItemsRanged &tuple_items) override;\n+  void visit (AST::TuplePattern &pattern) override;\n+  void visit (AST::GroupedPattern &pattern) override;\n+  void visit (AST::SlicePattern &pattern) override;\n+\n+  // rust-stmt.h\n+  void visit (AST::EmptyStmt &stmt) override;\n+  void visit (AST::LetStmt &stmt) override;\n+  void visit (AST::ExprStmtWithoutBlock &stmt) override;\n+  void visit (AST::ExprStmtWithBlock &stmt) override;\n+\n+  // rust-type.h\n+  void visit (AST::TraitBound &bound) override;\n+  void visit (AST::ImplTraitType &type) override;\n+  void visit (AST::TraitObjectType &type) override;\n+  void visit (AST::ParenthesisedType &type) override;\n+  void visit (AST::ImplTraitTypeOneBound &type) override;\n+  void visit (AST::TraitObjectTypeOneBound &type) override;\n+  void visit (AST::TupleType &type) override;\n+  void visit (AST::NeverType &type) override;\n+  void visit (AST::RawPointerType &type) override;\n+  void visit (AST::ReferenceType &type) override;\n+  void visit (AST::ArrayType &type) override;\n+  void visit (AST::SliceType &type) override;\n+  void visit (AST::InferredType &type) override;\n+  void visit (AST::BareFunctionType &type) override;\n+\n+private:\n+  NameResolution (AST::Crate &crate, TopLevelScan &toplevel);\n+  bool go () override;\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust"}]}