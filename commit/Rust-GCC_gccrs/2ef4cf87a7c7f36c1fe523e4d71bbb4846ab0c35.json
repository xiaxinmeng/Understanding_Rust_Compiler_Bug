{"sha": "2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmNGNmODdhN2M3ZjM2YzFmZTUyM2U0ZDcxYmJiNDg0NmFiMGMzNQ==", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-07-21T03:37:30Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2020-07-21T03:37:30Z"}, "message": "rs6000: Define movsf_from_si2 to extract high part SF element from DImode[PR89310]\n\nFor extracting high part element from DImode register like:\n\n{%1:SF=unspec[r122:DI>>0x20#0] 86;clobber scratch;}\n\nsplit it before reload with \"and mask\" to avoid generating shift right\n32 bit then shift left 32 bit.  This pattern also exists in PR42475 and\nPR67741, etc.\n\nsrdi 3,3,32\nsldi 9,3,32\nmtvsrd 1,9\nxscvspdpn 1,1\n\n=>\n\nrldicr 3,3,0,31\nmtvsrd 1,3\nxscvspdpn 1,1\n\nBootstrap and regression tested pass on Power8-LE.\n\ngcc/ChangeLog:\n\n2020-07-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR rtl-optimization/89310\n\t* config/rs6000/rs6000.md (movsf_from_si2): New define_insn_and_split.\n\ngcc/testsuite/ChangeLog:\n\n2020-07-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\tPR rtl-optimization/89310\n\t* gcc.target/powerpc/pr89310.c: New test.", "tree": {"sha": "32c3cc10dbba925faab4cf80396f57ee3929034b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32c3cc10dbba925faab4cf80396f57ee3929034b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41efe9812a5df22201c3a684ff2fb838d6dc9de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41efe9812a5df22201c3a684ff2fb838d6dc9de6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41efe9812a5df22201c3a684ff2fb838d6dc9de6"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "97d690de7f2c4d0a6fafa787d5d1e732cd9c481b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35", "patch": "@@ -7634,6 +7634,37 @@\n \t    \"*,          *,         p9v,       p8v,       *,         *,\n \t     p8v,        p8v,       p8v,       *\")])\n \n+;; For extracting high part element from DImode register like:\n+;;     {%1:SF=unspec[r122:DI>>0x20#0] 86;clobber scratch;}\n+;; split it before reload with \"and mask\" to avoid generating shift right\n+;; 32 bit then shift left 32 bit.\n+(define_insn_and_split \"movsf_from_si2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=wa\")\n+\t    (unspec:SF\n+\t     [(subreg:SI\n+\t       (ashiftrt:DI\n+\t\t(match_operand:DI 1 \"input_operand\" \"r\")\n+\t\t(const_int 32))\n+\t       0)]\n+\t     UNSPEC_SF_FROM_SI))\n+  (clobber (match_scratch:DI 2 \"=r\"))]\n+  \"TARGET_NO_SF_SUBREG\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (GET_CODE (operands[2]) == SCRATCH)\n+    operands[2] = gen_reg_rtx (DImode);\n+\n+  rtx mask = GEN_INT (HOST_WIDE_INT_M1U << 32);\n+  emit_insn (gen_anddi3 (operands[2], operands[1], mask));\n+  emit_insn (gen_p8_mtvsrd_sf (operands[0], operands[2]));\n+  emit_insn (gen_vsx_xscvspdpn_directmove (operands[0], operands[0]));\n+  DONE;\n+}\n+  [(set_attr \"length\" \"12\")\n+  (set_attr \"type\" \"vecfloat\")\n+  (set_attr \"isa\" \"p8v\")])\n \f\n ;; Move 64-bit binary/decimal floating point\n (define_expand \"mov<mode>\""}, {"sha": "8bb1a14082427d3d9f0ffde4e62cb2e92599f700", "filename": "gcc/testsuite/gcc.target/powerpc/pr89310.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr89310.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr89310.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr89310.c?ref=2ef4cf87a7c7f36c1fe523e4d71bbb4846ab0c35", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8 \" } */\n+\n+struct s {\n+  int i;\n+  float f;\n+};\n+\n+float\n+foo (struct s arg)\n+{\n+  return arg.f;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\msrdi\\M} } } */\n+/* { dg-final { scan-assembler-not {\\msldi\\M} {target le} } } */\n+/* { dg-final { scan-assembler-times {\\mrldicr\\M} 1 {target le} } } */"}]}