{"sha": "8556f58f763ab07290b596317c63a26228a18f82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1NmY1OGY3NjNhYjA3MjkwYjU5NjMxN2M2M2EyNjIyOGExOGY4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-12T22:11:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-12T22:11:27Z"}, "message": "tree-vrp.c (simplify_bit_ops_using_ranges): New function.\n\n\t* tree-vrp.c (simplify_bit_ops_using_ranges): New function.\n\t(simplify_stmt_using_ranges): Use it.\n\n\t* gcc.dg/tree-ssa/vrp53.c: New test.\n\nFrom-SVN: r162115", "tree": {"sha": "2ea05cb45ffae6bb753a132c2144022300e03f44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ea05cb45ffae6bb753a132c2144022300e03f44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8556f58f763ab07290b596317c63a26228a18f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8556f58f763ab07290b596317c63a26228a18f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8556f58f763ab07290b596317c63a26228a18f82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8556f58f763ab07290b596317c63a26228a18f82/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "0652932b5f9f05c81fc465689c2d37f558665312", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8556f58f763ab07290b596317c63a26228a18f82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8556f58f763ab07290b596317c63a26228a18f82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8556f58f763ab07290b596317c63a26228a18f82", "patch": "@@ -1,3 +1,8 @@\n+2010-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vrp.c (simplify_bit_ops_using_ranges): New function.\n+\t(simplify_stmt_using_ranges): Use it.\n+\n 2010-07-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.h (struct spu_builtin_description): Remove FNDECL"}, {"sha": "94f7e77f92804b790193f9c6642daaaeee601339", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8556f58f763ab07290b596317c63a26228a18f82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8556f58f763ab07290b596317c63a26228a18f82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8556f58f763ab07290b596317c63a26228a18f82", "patch": "@@ -1,3 +1,7 @@\n+2010-07-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp53.c: New test.\n+\n 2010-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44907"}, {"sha": "66bbfb67b90750902328b6d82094d0d27f8402db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp53.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8556f58f763ab07290b596317c63a26228a18f82/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8556f58f763ab07290b596317c63a26228a18f82/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp53.c?ref=8556f58f763ab07290b596317c63a26228a18f82", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+int\n+f1 (int x)\n+{\n+  x &= 0xff;\n+  x += 0x400;\n+  x &= 0x7ff;\n+  return x;\n+}\n+\n+int\n+f2 (int x)\n+{\n+  x &= 0xff;\n+  x += 0x5400;\n+  x |= 0x4400;\n+  return x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\& (2047|0x7ff)\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\| (17408|0x4400)\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "afe69a3b8a147feaa9371648c75e7955f93ac193", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8556f58f763ab07290b596317c63a26228a18f82/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8556f58f763ab07290b596317c63a26228a18f82/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8556f58f763ab07290b596317c63a26228a18f82", "patch": "@@ -6913,6 +6913,89 @@ simplify_abs_using_ranges (gimple stmt)\n   return false;\n }\n \n+/* Optimize away redundant BIT_AND_EXPR and BIT_IOR_EXPR.\n+   If all the bits that are being cleared by & are already\n+   known to be zero from VR, or all the bits that are being\n+   set by | are already known to be one from VR, the bit\n+   operation is redundant.  */\n+\n+static bool\n+simplify_bit_ops_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n+{\n+  tree op0 = gimple_assign_rhs1 (stmt);\n+  tree op1 = gimple_assign_rhs2 (stmt);\n+  tree op = NULL_TREE;\n+  value_range_t vr0 = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n+  value_range_t vr1 = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n+  double_int may_be_nonzero0, may_be_nonzero1;\n+  double_int must_be_nonzero0, must_be_nonzero1;\n+  double_int mask;\n+\n+  if (TREE_CODE (op0) == SSA_NAME)\n+    vr0 = *(get_value_range (op0));\n+  else if (is_gimple_min_invariant (op0))\n+    set_value_range_to_value (&vr0, op0, NULL);\n+  else\n+    return false;\n+\n+  if (TREE_CODE (op1) == SSA_NAME)\n+    vr1 = *(get_value_range (op1));\n+  else if (is_gimple_min_invariant (op1))\n+    set_value_range_to_value (&vr1, op1, NULL);\n+  else\n+    return false;\n+\n+  if (!zero_nonzero_bits_from_vr (&vr0, &may_be_nonzero0, &must_be_nonzero0))\n+    return false;\n+  if (!zero_nonzero_bits_from_vr (&vr1, &may_be_nonzero1, &must_be_nonzero1))\n+    return false;\n+\n+  switch (gimple_assign_rhs_code (stmt))\n+    {\n+    case BIT_AND_EXPR:\n+      mask = double_int_and (may_be_nonzero0,\n+\t\t\t     double_int_not (must_be_nonzero1));\n+      if (double_int_zero_p (mask))\n+\t{\n+\t  op = op0;\n+\t  break;\n+\t}\n+      mask = double_int_and (may_be_nonzero1,\n+\t\t\t     double_int_not (must_be_nonzero0));\n+      if (double_int_zero_p (mask))\n+\t{\n+\t  op = op1;\n+\t  break;\n+\t}\n+      break;\n+    case BIT_IOR_EXPR:\n+      mask = double_int_and (may_be_nonzero0,\n+\t\t\t     double_int_not (must_be_nonzero1));\n+      if (double_int_zero_p (mask))\n+\t{\n+\t  op = op1;\n+\t  break;\n+\t}\n+      mask = double_int_and (may_be_nonzero1,\n+\t\t\t     double_int_not (must_be_nonzero0));\n+      if (double_int_zero_p (mask))\n+\t{\n+\t  op = op0;\n+\t  break;\n+\t}\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (op == NULL_TREE)\n+    return false;\n+\n+  gimple_assign_set_rhs_with_ops (gsi, TREE_CODE (op), op, NULL);\n+  update_stmt (gsi_stmt (*gsi));\n+  return true;\n+}\n+\n /* We are comparing trees OP0 and OP1 using COND_CODE.  OP0 has\n    a known value range VR.\n \n@@ -7198,6 +7281,15 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t    return simplify_abs_using_ranges (stmt);\n \t  break;\n \n+\tcase BIT_AND_EXPR:\n+\tcase BIT_IOR_EXPR:\n+\t  /* Optimize away BIT_AND_EXPR and BIT_IOR_EXPR\n+\t     if all the bits being cleared are already cleared or\n+\t     all the bits being set are already set.  */\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_rhs1 (stmt))))\n+\t    return simplify_bit_ops_using_ranges (gsi, stmt);\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}]}