{"sha": "59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlkOWFhNmQyZWZlN2M1MmI2YTk4NmViM2UxOTc3YzFmYjNjNTc1Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-13T02:54:55Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-13T02:54:55Z"}, "message": "c++: constraints are unevaluated operands [PR99961]\n\nAccording to [temp.concept]/6 and [temp.pre]/9, a concept definition and\na requires clause are both unevaluated contexts, and hence satisfaction\ndeals only with unevaluated operands, so we should set cp_unevaluated in\nthese three situations.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99961\n\tPR c++/99994\n\t* constraint.cc (satisfy_normalized_constraints): Set\n\tcp_unevaluated.\n\t* parser.c (cp_parser_concept_definition): Likewise.\n\t(cp_parser_requires_clause_opt): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99961\n\tPR c++/99994\n\t* g++.dg/cpp2a/concepts-uneval1.C: New test.\n\t* g++.dg/cpp2a/concepts-uneval2.C: New test.", "tree": {"sha": "1d4c31e21078391baa8efb51ede1013c6034918c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d4c31e21078391baa8efb51ede1013c6034918c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/comments", "author": null, "committer": null, "parents": [{"sha": "07b27384de56ce2f6a93007d018743ef9d5c8cc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b27384de56ce2f6a93007d018743ef9d5c8cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b27384de56ce2f6a93007d018743ef9d5c8cc4"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "0709695fd08fc295212afad788041b68ab85e402", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "patch": "@@ -3066,6 +3066,9 @@ satisfy_normalized_constraints (tree t, tree args, sat_info info)\n   /* We need to check access during satisfaction.  */\n   deferring_access_check_sentinel acs (dk_no_deferred);\n \n+  /* Constraints are unevaluated operands.  */\n+  cp_unevaluated u;\n+\n   return satisfy_constraint_r (t, args, info);\n }\n "}, {"sha": "8b7801b2be73215bfba59e8608507bbcff5748aa", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "patch": "@@ -28353,6 +28353,9 @@ cp_parser_label_declaration (cp_parser* parser)\n static tree\n cp_parser_concept_definition (cp_parser *parser)\n {\n+  /* A concept definition is an unevaluated context.  */\n+  cp_unevaluated u;\n+\n   gcc_assert (cp_lexer_next_token_is_keyword (parser->lexer, RID_CONCEPT));\n   cp_lexer_consume_token (parser->lexer);\n \n@@ -28714,6 +28717,9 @@ cp_parser_constraint_expression (cp_parser *parser)\n static tree\n cp_parser_requires_clause_opt (cp_parser *parser, bool lambda_p)\n {\n+  /* A requires clause is an unevaluated context.  */\n+  cp_unevaluated u;\n+\n   cp_token *tok = cp_lexer_peek_token (parser->lexer);\n   if (tok->keyword != RID_REQUIRES)\n     {"}, {"sha": "4c5f1b5c01919ad90030e48eacba9ee684e02020", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-uneval1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval1.C?ref=59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/99961\n+// { dg-do compile { target c++20 } }\n+\n+struct A { static const int x = 42; bool y; };\n+\n+void f(auto a) requires (a.x == 42) { }\n+template void f(A);\n+\n+template <bool V> concept C = V || A::y;\n+static_assert(C<true>);"}, {"sha": "4793bd6f36d29918677bd405b993985020919b07", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-uneval2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval2.C?ref=59d9aa6d2efe7c52b6a986eb3e1977c1fb3c5753", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/99994\n+// { dg-do compile { target c++20 } }\n+\n+int main() {\n+  auto f = [](int) { return true; };\n+  int n = [&](auto i) requires (f(sizeof(i))) { return 99; }(12);\n+  int m = [](auto i) requires (f(sizeof(i))) { return 99; }(12);\n+}"}]}