{"sha": "a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0NzYxYTNjYWI5MjE4YjdmZDZhZDdmYjZlZjliOGViOTk3YmE4Nw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-01-06T00:00:35Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-01-06T00:00:35Z"}, "message": "Implement __builtin_return_address (0)\n\nFrom-SVN: r38734", "tree": {"sha": "317568ee822f345a94f4188d78f1de88d1b68b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317568ee822f345a94f4188d78f1de88d1b68b82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/comments", "author": null, "committer": null, "parents": [{"sha": "f4cdc368349bc046cd0874408bad7fc6f2104a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4cdc368349bc046cd0874408bad7fc6f2104a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4cdc368349bc046cd0874408bad7fc6f2104a3a"}], "stats": {"total": 100, "additions": 97, "deletions": 3}, "files": [{"sha": "7f280c1f329e886a77b1d101d160386c37bfa448", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "patch": "@@ -1,3 +1,17 @@\n+2001-01-05  DJ Delorie <dj@redhat.com>\n+\n+\t* config/v850/v850.h (RETURN_ADDR_RTX): Define.\n+\t(INIT_EXPANDERS): Define.\n+\n+\t* config/v850/v850.c (struct machine_function): Define.\n+\t(v850_save_machine_status): New function.\n+\t(v850_restore_machine_status): New function.\n+\t(v850_return_addr): New function.\n+\t(v850_init_expanders): New function.\n+\n+\t* config/v850/v850-protos.h: Add prototypes for v850_return_addr\n+\tand v850_init_expanders.\n+\t\n 2001-01-05  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* cpplib.h (struct cpp_reader): Add help_only field."}, {"sha": "f0b7b4ed27f0fef2fa5f8648113631ddb0da5ec7", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "patch": "@@ -39,8 +39,10 @@ extern void   asm_file_start                PARAMS ((FILE *));\n extern void   override_options              PARAMS ((void));\n extern int    compute_register_save_size    PARAMS ((long *));\n extern int    compute_frame_size            PARAMS ((int, long *));\n+extern void   v850_init_expanders           PARAMS ((void));\n \n #ifdef RTX_CODE\n+extern rtx    v850_return_addr              PARAMS ((int));\n extern void   print_operand                 PARAMS ((FILE *, rtx, int ));\n extern void   print_operand_address         PARAMS ((FILE *, rtx));\n extern int    const_costs                   PARAMS ((rtx, enum rtx_code));"}, {"sha": "86c7144206ce2149bbdea2d8be11fbc7034b7d43", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "patch": "@@ -1,5 +1,6 @@\n /* Subroutines for insn-output.c for NEC V850 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -52,6 +53,8 @@ static int  const_costs_int        PARAMS ((HOST_WIDE_INT, int));\n static void substitute_ep_register PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n static int  ep_memory_offset       PARAMS ((enum machine_mode, int));\n static void v850_set_data_area     PARAMS ((tree, v850_data_area));\n+static void v850_save_machine_status    PARAMS ((struct function *));\n+static void v850_restore_machine_status PARAMS ((struct function *));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -2783,3 +2786,74 @@ v850_va_arg (valist, type)\n \n   return addr_rtx;\n }\n+\f\n+/* Functions to save and restore machine-specific function data.  */\n+\n+static rtx ra_rtx;\n+\n+struct machine_function\n+{\n+  /* Records __builtin_return address.  */\n+  struct rtx_def * ra_rtx;\n+};\n+\n+static void\n+v850_save_machine_status (p)\n+     struct function * p;\n+{\n+  p->machine =\n+    (struct machine_function *) xcalloc (1, sizeof (struct machine_function));\n+  p->machine->ra_rtx = ra_rtx;\n+}\n+\n+static void\n+v850_restore_machine_status (p)\n+     struct function * p;\n+{\n+  ra_rtx = p->machine->ra_rtx;\n+  free (p->machine);\n+  p->machine = NULL;\n+}\n+\n+/* Return an RTX indicating where the return address to the\n+   calling function can be found.  */\n+\n+rtx\n+v850_return_addr (count)\n+     int count;\n+{\n+  if (count != 0)\n+    return const0_rtx;\n+\n+  if (ra_rtx == NULL)\n+    {\n+      rtx init;\n+      \n+      /* No rtx yet.  Invent one, and initialize it for r31 (lp) in \n+       the prologue.  */\n+      ra_rtx = gen_reg_rtx (Pmode);\n+      \n+      init = gen_rtx_REG (Pmode, LINK_POINTER_REGNUM);\n+\n+      init = gen_rtx_SET (VOIDmode, ra_rtx, init);\n+\n+      /* Emit the insn to the prologue with the other argument copies.  */\n+      push_topmost_sequence ();\n+      emit_insn_after (init, get_insns ());\n+      pop_topmost_sequence ();\n+    }\n+\n+  debug_rtx (ra_rtx);\n+  return ra_rtx;\n+}\n+\n+/* Do anything needed before RTL is emitted for each function.  */\n+\n+void\n+v850_init_expanders ()\n+{\n+  ra_rtx = NULL;\n+\n+  save_machine_status    = v850_save_machine_status;\n+  restore_machine_status = v850_restore_machine_status;\n+}"}, {"sha": "36bce1a84bb21be1d73c5ca228183095e654379a", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=a64761a3cab9218b7fd6ad7fb6ef9b8eb997ba87", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler. NEC V850 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n This file is part of GNU CC.\n@@ -681,6 +681,7 @@ enum reg_class\n \n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE) 0\n \n+#define RETURN_ADDR_RTX(COUNT, FP) v850_return_addr (COUNT)\n \f\n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should\n@@ -789,6 +790,10 @@ extern int current_function_anonymous_args;\n \n #define EXIT_IGNORE_STACK 1\n \n+/* Initialize data used by insn expanders.  This is called from insn_emit,\n+   once for every function before code is generated.  */\n+#define INIT_EXPANDERS  v850_init_expanders ()\n+\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n@@ -1618,7 +1623,6 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n    matched by the predicate.  The list should have a trailing comma.  */\n \n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n-{ \"ep_memory_operand\",\t\t{ MEM }},\t\t\t\t\\\n { \"reg_or_0_operand\",\t\t{ REG, SUBREG, CONST_INT, CONST_DOUBLE }}, \\\n { \"reg_or_int5_operand\",\t{ REG, SUBREG, CONST_INT }},\t\t\\\n { \"call_address_operand\",\t{ REG, SYMBOL_REF }},\t\t\t\\"}]}