{"sha": "467fc67c47287a490d649ffe03ce8ae432c27a71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY3ZmM2N2M0NzI4N2E0OTBkNjQ5ZmZlMDNjZThhZTQzMmMyN2E3MQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-05-20T16:51:58Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-05-20T16:51:58Z"}, "message": "msp430.c (TARGET_GIMPLIFY_VA_ARG_EXPR): Define.\n\n\t* config/msp430/msp430.c (TARGET_GIMPLIFY_VA_ARG_EXPR): Define.\n\t(msp430_gimplify_va_arg_expr): New function.\n\t(msp430_print_operand): Handle (CONST (ZERO_EXTRACT)).\n\nFrom-SVN: r210648", "tree": {"sha": "f1eabce80c975bb0629a74fa3ea14a230de33846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1eabce80c975bb0629a74fa3ea14a230de33846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/467fc67c47287a490d649ffe03ce8ae432c27a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467fc67c47287a490d649ffe03ce8ae432c27a71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/467fc67c47287a490d649ffe03ce8ae432c27a71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/467fc67c47287a490d649ffe03ce8ae432c27a71/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "512eacee8fc5fd97faf037f45d0781a79db5f3e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512eacee8fc5fd97faf037f45d0781a79db5f3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512eacee8fc5fd97faf037f45d0781a79db5f3e9"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "6f2db11adc0cab34c50f34f3f103f4b603c32552", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467fc67c47287a490d649ffe03ce8ae432c27a71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467fc67c47287a490d649ffe03ce8ae432c27a71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=467fc67c47287a490d649ffe03ce8ae432c27a71", "patch": "@@ -19,6 +19,10 @@\n \n 2014-05-20  Nick Clifton  <nickc@redhat.com>\n \n+\t* config/msp430/msp430.c (TARGET_GIMPLIFY_VA_ARG_EXPR): Define.\n+\t(msp430_gimplify_va_arg_expr): New function.\n+\t(msp430_print_operand): Handle (CONST (ZERO_EXTRACT)).\n+\n \t* config/msp430/msp430.md (zero_extendpsisi2): Use + constraint on\n \toperand 0 in order to prevent confusion about the number of\n \tregisters involved."}, {"sha": "0f6114c1ee8e817006491c4a673d2afea4084bf8", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/467fc67c47287a490d649ffe03ce8ae432c27a71/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/467fc67c47287a490d649ffe03ce8ae432c27a71/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=467fc67c47287a490d649ffe03ce8ae432c27a71", "patch": "@@ -730,6 +730,97 @@ msp430_get_raw_result_mode (int regno ATTRIBUTE_UNUSED)\n {\n   return Pmode;\n }\n+\n+#undef  TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR msp430_gimplify_va_arg_expr\n+\n+#include \"gimplify.h\"\n+#include \"gimple-expr.h\"\n+\n+static tree\n+msp430_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n+\t\t\t  gimple_seq *post_p)\n+{\n+  tree addr, t, type_size, rounded_size, valist_tmp;\n+  unsigned HOST_WIDE_INT align, boundary;\n+  bool indirect;\n+\n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n+\n+  align = PARM_BOUNDARY / BITS_PER_UNIT;\n+  boundary = targetm.calls.function_arg_boundary (TYPE_MODE (type), type);\n+\n+  /* When we align parameter on stack for caller, if the parameter\n+     alignment is beyond MAX_SUPPORTED_STACK_ALIGNMENT, it will be\n+     aligned at MAX_SUPPORTED_STACK_ALIGNMENT.  We will match callee\n+     here with caller.  */\n+  if (boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n+    boundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n+\n+  boundary /= BITS_PER_UNIT;\n+\n+  /* Hoist the valist value into a temporary for the moment.  */\n+  valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);\n+\n+  /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n+     requires greater alignment, we must perform dynamic alignment.  */\n+  if (boundary > align\n+      && !integer_zerop (TYPE_SIZE (type)))\n+    {\n+      /* FIXME: This is where this function diverts from targhooks.c:\n+\t std_gimplify_va_arg_expr().  It works, but I do not know why...  */\n+      if (! POINTER_TYPE_P (type))\n+\t{\n+\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t      fold_build_pointer_plus_hwi (valist_tmp, boundary - 1));\n+\t  gimplify_and_add (t, pre_p);\n+\n+\t  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t      fold_build2 (BIT_AND_EXPR, TREE_TYPE (valist),\n+\t\t\t\t   valist_tmp,\n+\t\t\t\t   build_int_cst (TREE_TYPE (valist), -boundary)));\n+\t  gimplify_and_add (t, pre_p);\n+\t}\n+    }\n+  else\n+    boundary = align;\n+\n+  /* If the actual alignment is less than the alignment of the type,\n+     adjust the type accordingly so that we don't assume strict alignment\n+     when dereferencing the pointer.  */\n+  boundary *= BITS_PER_UNIT;\n+  if (boundary < TYPE_ALIGN (type))\n+    {\n+      type = build_variant_type_copy (type);\n+      TYPE_ALIGN (type) = boundary;\n+    }\n+\n+  /* Compute the rounded size of the type.  */\n+  type_size = size_in_bytes (type);\n+  rounded_size = round_up (type_size, align);\n+\n+  /* Reduce rounded_size so it's sharable with the postqueue.  */\n+  gimplify_expr (&rounded_size, pre_p, post_p, is_gimple_val, fb_rvalue);\n+\n+  /* Get AP.  */\n+  addr = valist_tmp;\n+\n+  /* Compute new value for AP.  */\n+  t = fold_build_pointer_plus (valist_tmp, rounded_size);\n+  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n+  gimplify_and_add (t, pre_p);\n+\n+  addr = fold_convert (build_pointer_type (type), addr);\n+\n+  if (indirect)\n+    addr = build_va_arg_indirect_ref (addr);\n+\n+  addr = build_va_arg_indirect_ref (addr);\n+\n+  return addr;\n+}\n \f\n /* Addressing Modes */\n \n@@ -2308,8 +2399,32 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       msp430_print_operand_addr (file, addr);\n       break;\n \n-    case CONST_INT:\n     case CONST:\n+      if (GET_CODE (XEXP (op, 0)) == ZERO_EXTRACT)\n+\t{\n+\t  op = XEXP (op, 0);\n+\t  switch (INTVAL (XEXP (op, 2)))\n+\t    {\n+\t    case 0:\n+\t      fprintf (file, \"#lo (\");\n+\t      msp430_print_operand_raw (file, XEXP (op, 0));\n+\t      fprintf (file, \")\");\n+\t      break;\n+\t  \n+\t    case 16:\n+\t      fprintf (file, \"#hi (\");\n+\t      msp430_print_operand_raw (file, XEXP (op, 0));\n+\t      fprintf (file, \")\");\n+\t      break;\n+\n+\t    default:\n+\t      output_operand_lossage (\"invalid zero extract\");\n+\t      break;\n+\t    }\n+\t  break;\n+\t}\n+      /* Fall through.  */\n+    case CONST_INT:\n     case SYMBOL_REF:\n     case LABEL_REF:\n       if (letter == 0)"}]}