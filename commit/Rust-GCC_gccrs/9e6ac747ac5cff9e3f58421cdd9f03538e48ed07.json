{"sha": "9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "node_id": "C_kwDOANBUbNoAKDllNmFjNzQ3YWM1Y2ZmOWUzZjU4NDIxY2RkOWYwMzUzOGU0OGVkMDc", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-05T19:49:45Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2023-01-05T19:49:45Z"}, "message": "[Committed] PR rtl-optimization/108292: Revert \"Improve ix86_expand_int_movcc to allow condition (mask) sharing\"\n\nThis reverts commit d0558f420b2a5692fd38ac76ffa97ae6c1726ed9.\n\n2023-01-05  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR rtl-optimization/108292\n\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Revert\n\tprevious changes.\n\ngcc/testsuite/ChangeLog\n\tPR rtl-optimization/108292\n\t* gcc.target/i386/cmov10.c: Remove test case.", "tree": {"sha": "b551e02e15e904bbc388ad151536b57057e1f7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b551e02e15e904bbc388ad151536b57057e1f7c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b0d35ec52375da5652d2b8da74083ab700b9d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b0d35ec52375da5652d2b8da74083ab700b9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b0d35ec52375da5652d2b8da74083ab700b9d7"}], "stats": {"total": 67, "additions": 26, "deletions": 41}, "files": [{"sha": "3eddbc9436093d90f0eb9a1ec8f4011f32a5cbe6", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e6ac747ac5cff9e3f58421cdd9f03538e48ed07/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=9e6ac747ac5cff9e3f58421cdd9f03538e48ed07", "patch": "@@ -3284,8 +3284,8 @@ ix86_expand_int_movcc (rtx operands[])\n \t  || negate_cc_compare_p\n \t  || ix86_expand_carry_flag_compare (code, op0, op1, &compare_op))\n \t{\n-\t  /* Place comparison result in its own pseudo.  */\n-\t  rtx tmp = gen_reg_rtx (mode);\n+\t  /* Detect overlap between destination and compare sources.  */\n+\t  rtx tmp = out;\n \n \t  if (negate_cc_compare_p)\n \t    {\n@@ -3295,6 +3295,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t\temit_insn (gen_x86_negsi_ccc (gen_reg_rtx (SImode),\n \t\t\t\t\t      gen_lowpart (SImode, op0)));\n \n+\t      tmp = gen_reg_rtx (mode);\n \t      if (mode == DImode)\n \t\temit_insn (gen_x86_movdicc_0_m1_neg (tmp));\n \t      else\n@@ -3336,6 +3337,9 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t}\n \t      diff = ct - cf;\n \n+\t      if (reg_overlap_mentioned_p (out, compare_op))\n+\t\ttmp = gen_reg_rtx (mode);\n+\n \t      if (mode == DImode)\n \t\temit_insn (gen_x86_movdicc_0_m1 (tmp, flags, compare_op));\n \t      else\n@@ -3354,11 +3358,6 @@ ix86_expand_int_movcc (rtx operands[])\n \t      tmp = emit_store_flag (tmp, code, op0, op1, VOIDmode, 0, -1);\n \t    }\n \n-\t  /* Add a REG_EQUAL note to allow condition to be shared.  */\n-\t  rtx note = gen_rtx_fmt_ee (code, mode, op0, op1);\n-\t  set_unique_reg_note (get_last_insn (), REG_EQUAL,\n-\t\t\t       gen_rtx_NEG (mode, note));\n-\n \t  if (diff == 1)\n \t    {\n \t      /*\n@@ -3369,8 +3368,9 @@ ix86_expand_int_movcc (rtx operands[])\n \t       * Size 5 - 8.\n \t       */\n \t      if (ct)\n-\t\ttmp = expand_simple_binop (mode, PLUS, tmp, GEN_INT (ct),\n-\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n+\t\ttmp = expand_simple_binop (mode, PLUS,\n+\t\t\t\t\t   tmp, GEN_INT (ct),\n+\t\t\t\t\t   copy_rtx (tmp), 1, OPTAB_DIRECT);\n \t    }\n \t  else if (cf == -1)\n \t    {\n@@ -3381,8 +3381,9 @@ ix86_expand_int_movcc (rtx operands[])\n \t       *\n \t       * Size 8.\n \t       */\n-\t      tmp = expand_simple_binop (mode, IOR, tmp, GEN_INT (ct),\n-\t\t\t\t\t NULL_RTX, 1, OPTAB_DIRECT);\n+\t      tmp = expand_simple_binop (mode, IOR,\n+\t\t\t\t\t tmp, GEN_INT (ct),\n+\t\t\t\t\t copy_rtx (tmp), 1, OPTAB_DIRECT);\n \t    }\n \t  else if (diff == -1 && ct)\n \t    {\n@@ -3394,10 +3395,11 @@ ix86_expand_int_movcc (rtx operands[])\n \t       *\n \t       * Size 8 - 11.\n \t       */\n-\t      tmp = expand_simple_unop (mode, NOT, tmp, NULL_RTX, 1);\n+\t      tmp = expand_simple_unop (mode, NOT, tmp, copy_rtx (tmp), 1);\n \t      if (cf)\n-\t\ttmp = expand_simple_binop (mode, PLUS, tmp, GEN_INT (cf),\n-\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n+\t\ttmp = expand_simple_binop (mode, PLUS,\n+\t\t\t\t\t   copy_rtx (tmp), GEN_INT (cf),\n+\t\t\t\t\t   copy_rtx (tmp), 1, OPTAB_DIRECT);\n \t    }\n \t  else\n \t    {\n@@ -3415,18 +3417,22 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t{\n \t\t  cf = ct;\n \t\t  ct = 0;\n-\t\t  tmp = expand_simple_unop (mode, NOT, tmp, NULL_RTX, 1);\n+\t\t  tmp = expand_simple_unop (mode, NOT, tmp, copy_rtx (tmp), 1);\n \t\t}\n \n-\t      tmp = expand_simple_binop (mode, AND, tmp,\n+\t      tmp = expand_simple_binop (mode, AND,\n+\t\t\t\t\t copy_rtx (tmp),\n \t\t\t\t\t gen_int_mode (cf - ct, mode),\n-\t\t\t\t\t NULL_RTX, 1, OPTAB_DIRECT);\n+\t\t\t\t\t copy_rtx (tmp), 1, OPTAB_DIRECT);\n \t      if (ct)\n-\t\ttmp = expand_simple_binop (mode, PLUS, tmp, GEN_INT (ct),\n-\t\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n+\t\ttmp = expand_simple_binop (mode, PLUS,\n+\t\t\t\t\t   copy_rtx (tmp), GEN_INT (ct),\n+\t\t\t\t\t   copy_rtx (tmp), 1, OPTAB_DIRECT);\n \t    }\n \n-\t  emit_move_insn (out, tmp);\n+\t  if (!rtx_equal_p (tmp, out))\n+\t    emit_move_insn (copy_rtx (out), copy_rtx (tmp));\n+\n \t  return true;\n \t}\n "}, {"sha": "142b4d7d051cf1c840251b85062d7f347d16f91b", "filename": "gcc/testsuite/gcc.target/i386/cmov10.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12b0d35ec52375da5652d2b8da74083ab700b9d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12b0d35ec52375da5652d2b8da74083ab700b9d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcmov10.c?ref=12b0d35ec52375da5652d2b8da74083ab700b9d7", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n-int a, b, c, d;\n-\n-int foo(int x)\n-{\n-    if (x == 0) {\n-        a = 3;\n-        b = 1;\n-        c = 4;\n-        d = 1;\n-    } else {\n-        a = 5;\n-        b = 9;\n-        c = 2;\n-        d = 7;\n-    }\n-    return x;\n-}\n-/* { dg-final { scan-assembler-times \"cmpl\" 1 } } */\n-/* { dg-final { scan-assembler-times \"sbbl\" 1 } } */"}]}