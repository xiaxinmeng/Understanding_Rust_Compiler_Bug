{"sha": "410366864025c2aa6ce1928d1737bc9cc4f752e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwMzY2ODY0MDI1YzJhYTZjZTE5MjhkMTczN2JjOWNjNGY3NTJlNg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-03-25T17:38:17Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-03-25T17:38:17Z"}, "message": "re PR fortran/80156 (Generic DTIO interface reported missing if public statement preceeds the interface block)\n\n2017-03-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/80156\n\tPR fortran/79382\n\t* decl.c (access_attr_decl): Remove the error for an absent\n\tgeneric DTIO interface and ensure that symbol has the flavor\n\tFL_PROCEDURE.\n\n2017-03-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/80156\n\tPR fortran/79382\n\t* gfortran.dg/dtio_23.f90 : Remove the dg-error and add the\n\ttestcase for PR80156. Add a main programme that tests that\n\tthe typebound generic is accessible.\n\nFrom-SVN: r246476", "tree": {"sha": "38bf17a45d44082c070cf7f7752af91231314254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38bf17a45d44082c070cf7f7752af91231314254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410366864025c2aa6ce1928d1737bc9cc4f752e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410366864025c2aa6ce1928d1737bc9cc4f752e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410366864025c2aa6ce1928d1737bc9cc4f752e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410366864025c2aa6ce1928d1737bc9cc4f752e6/comments", "author": null, "committer": null, "parents": [{"sha": "59ba44930fb9d8c1e1c6c3b6de9be7ab77933284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ba44930fb9d8c1e1c6c3b6de9be7ab77933284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ba44930fb9d8c1e1c6c3b6de9be7ab77933284"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "20ad8578bfaf5ceec3bbacc64faa1a83659e1971", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=410366864025c2aa6ce1928d1737bc9cc4f752e6", "patch": "@@ -1,3 +1,11 @@\n+2017-03-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80156\n+\tPR fortran/79382\n+\t* decl.c (access_attr_decl): Remove the error for an absent\n+\tgeneric DTIO interface and ensure that symbol has the flavor\n+\tFL_PROCEDURE.\n+\n 2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/79838"}, {"sha": "5ca664e57a5740a1559480a0c15d5c9b5ebdb16d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=410366864025c2aa6ce1928d1737bc9cc4f752e6", "patch": "@@ -7570,23 +7570,15 @@ access_attr_decl (gfc_statement st)\n \tcase INTERFACE_GENERIC:\n \tcase INTERFACE_DTIO:\n \n-\t  if (type == INTERFACE_DTIO\n-\t      && gfc_current_ns->proc_name\n-\t      && gfc_current_ns->proc_name->attr.flavor == FL_MODULE)\n-\t    {\n-\t      gfc_find_symbol (name, gfc_current_ns, 0, &sym);\n-\t      if (sym == NULL)\n-\t\t{\n-\t\t  gfc_error (\"The GENERIC DTIO INTERFACE at %C is not \"\n-\t\t\t     \"present in the MODULE %qs\",\n-\t\t\t     gfc_current_ns->proc_name->name);\n-\t\t  return MATCH_ERROR;\n-\t\t}\n-\t    }\n-\n \t  if (gfc_get_symbol (name, NULL, &sym))\n \t    goto done;\n \n+\t  if (type == INTERFACE_DTIO\n+\t      && gfc_current_ns->proc_name\n+\t      && gfc_current_ns->proc_name->attr.flavor == FL_MODULE\n+\t      && sym->attr.flavor == FL_UNKNOWN)\n+\t    sym->attr.flavor = FL_PROCEDURE;\n+\n \t  if (!gfc_add_access (&sym->attr,\n \t\t\t       (st == ST_PUBLIC)\n \t\t\t       ? ACCESS_PUBLIC : ACCESS_PRIVATE,"}, {"sha": "8306a1c0c35cf39b9c8842be76d008b14373a45b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=410366864025c2aa6ce1928d1737bc9cc4f752e6", "patch": "@@ -1,3 +1,11 @@\n+2017-03-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80156\n+\tPR fortran/79382\n+\t* gfortran.dg/dtio_23.f90 : Remove the dg-error and add the\n+\ttestcase for PR80156. Add a main programme that tests that\n+\tthe typebound generic is accessible.\n+\n 2017-03-25  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR rtl-optimization/80160"}, {"sha": "bee9acbd6b592c17313a917798e5081af5ce3dcc", "filename": "gcc/testsuite/gfortran.dg/dtio_23.f90", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410366864025c2aa6ce1928d1737bc9cc4f752e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_23.f90?ref=410366864025c2aa6ce1928d1737bc9cc4f752e6", "patch": "@@ -1,8 +1,9 @@\n ! { dg-do compile }\n !\n-! Test fix for the original in PR79832.\n+! Test fix for the original in PR793822 and for PR80156.\n !\n ! Contributed by Walt Brainerd  <walt.brainerd@gmail.com>\n+! and (PR80156)  <pedsxing@gmx.net>\n !\n module dollar_mod\n \n@@ -16,7 +17,7 @@ module dollar_mod\n       generic :: write(formatted) => Write_dollar\n    end type dollar_type\n \n-   PRIVATE :: write (formatted) ! { dg-error \"is not present\" }\n+   PRIVATE :: write (formatted) ! This used to ICE\n \n contains\n \n@@ -35,3 +36,41 @@ subroutine Write_dollar &\n end subroutine Write_dollar\n \n end module dollar_mod\n+\n+module pr80156\n+\n+   implicit none\n+   private\n+\n+   type, public :: String\n+      character(len=:), allocatable :: raw\n+   end type\n+\n+   public :: write(unformatted) ! Gave an error due to the first fix for PR79382.\n+   interface write(unformatted)\n+      module procedure writeUnformatted\n+   end interface\n+\n+contains\n+\n+   subroutine writeUnformatted(self, unit, iostat, iomsg)\n+      class(String)   , intent(in)    :: self\n+      integer         , intent(in)    :: unit\n+      integer         , intent(out)   :: iostat\n+      character(len=*), intent(inout) :: iomsg\n+\n+      if (allocated(self%raw)) then\n+         write (unit, iostat=iostat, iomsg=iomsg) self%raw\n+      else\n+         write (unit, iostat=iostat, iomsg=iomsg) ''\n+      endif\n+\n+   end subroutine\n+\n+end module\n+\n+  use dollar_mod\n+  type(dollar_type) :: money\n+  money = dollar_type(50.0)\n+  print '(DT)', money ! Make sure that the typebound generic is accessible.\n+end"}]}