{"sha": "83ba23b7aa47ed35554dd5654f0e372d824f81e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiYTIzYjdhYTQ3ZWQzNTU1NGRkNTY1NGYwZTM3MmQ4MjRmODFlMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-09-18T18:14:57Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-09-18T18:14:57Z"}, "message": "re PR fortran/43366 ([OOP][F08] Intrinsic assign to polymorphic variable)\n\n2013-09-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43366\n        * primary.c (gfc_variable_attr): Also handle codimension.\n        * resolve.c (resolve_ordinary_assign): Add invalid-diagnostic\n        * for\n        polymorphic assignment.\n\n2013-09-15  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43366\n        * gfortran.dg/class_39.f03: Update dg-error.\n        * gfortran.dg/class_5.f03: Ditto.\n        * gfortran.dg/class_53.f90: Ditto.\n        * gfortran.dg/realloc_on_assign_20.f90: New.\n        * gfortran.dg/realloc_on_assign_21.f90: New.\n        * gfortran.dg/realloc_on_assign_22.f90: New.\n\nFrom-SVN: r202713", "tree": {"sha": "800e25b834dfcf4e2501b24f9bce291d8109d684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/800e25b834dfcf4e2501b24f9bce291d8109d684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ba23b7aa47ed35554dd5654f0e372d824f81e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ba23b7aa47ed35554dd5654f0e372d824f81e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ba23b7aa47ed35554dd5654f0e372d824f81e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ba23b7aa47ed35554dd5654f0e372d824f81e3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f3fd87d46ec45a4894ae9390424bf7663f771e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3fd87d46ec45a4894ae9390424bf7663f771e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3fd87d46ec45a4894ae9390424bf7663f771e4"}], "stats": {"total": 106, "additions": 94, "deletions": 12}, "files": [{"sha": "d236ce3b60c105f9c0aa303886ae70c452e81c44", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -1,3 +1,10 @@\n+2013-09-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43366\n+\t* primary.c (gfc_variable_attr): Also handle codimension.\n+\t* resolve.c (resolve_ordinary_assign): Add invalid-diagnostic for\n+\tpolymorphic assignment.\n+\n 2013-09-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58356"}, {"sha": "80d45eaea12ea36890d75e6a24c395116f88e6d9", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -2134,7 +2134,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n symbol_attribute\n gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n {\n-  int dimension, pointer, allocatable, target;\n+  int dimension, codimension, pointer, allocatable, target;\n   symbol_attribute attr;\n   gfc_ref *ref;\n   gfc_symbol *sym;\n@@ -2149,12 +2149,14 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n   if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n     {\n       dimension = CLASS_DATA (sym)->attr.dimension;\n+      codimension = CLASS_DATA (sym)->attr.codimension;\n       pointer = CLASS_DATA (sym)->attr.class_pointer;\n       allocatable = CLASS_DATA (sym)->attr.allocatable;\n     }\n   else\n     {\n       dimension = attr.dimension;\n+      codimension = attr.codimension;\n       pointer = attr.pointer;\n       allocatable = attr.allocatable;\n     }\n@@ -2209,11 +2211,13 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n \n \tif (comp->ts.type == BT_CLASS)\n \t  {\n+\t    codimension = CLASS_DATA (comp)->attr.codimension;\n \t    pointer = CLASS_DATA (comp)->attr.class_pointer;\n \t    allocatable = CLASS_DATA (comp)->attr.allocatable;\n \t  }\n \telse\n \t  {\n+\t    codimension = comp->attr.codimension;\n \t    pointer = comp->attr.pointer;\n \t    allocatable = comp->attr.allocatable;\n \t  }\n@@ -2228,6 +2232,7 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n       }\n \n   attr.dimension = dimension;\n+  attr.codimension = codimension;\n   attr.pointer = pointer;\n   attr.allocatable = allocatable;\n   attr.target = target;"}, {"sha": "d33fe49b66112ebb7877cbb3fbe3bd6ac5eda161", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -9014,6 +9014,7 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   int rlen = 0;\n   int n;\n   gfc_ref *ref;\n+  symbol_attribute attr;\n \n   if (gfc_extend_assign (code, ns))\n     {\n@@ -9178,14 +9179,35 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \tgfc_current_ns->proc_name->attr.implicit_pure = 0;\n     }\n \n-  /* F03:7.4.1.2.  */\n-  /* FIXME: Valid in Fortran 2008, unless the LHS is both polymorphic\n-     and coindexed; cf. F2008, 7.2.1.2 and PR 43366.  */\n-  if (lhs->ts.type == BT_CLASS)\n+  /* F2008, 7.2.1.2.  */\n+  attr = gfc_expr_attr (lhs);\n+  if (lhs->ts.type == BT_CLASS && attr.allocatable)\n+    {\n+      if (attr.codimension)\n+\t{\n+\t  gfc_error (\"Assignment to polymorphic coarray at %L is not \"\n+\t\t     \"permitted\", &lhs->where);\n+\t  return false;\n+\t}\n+      if (!gfc_notify_std (GFC_STD_F2008, \"Assignment to an allocatable \"\n+\t\t\t   \"polymorphic variable at %L\", &lhs->where))\n+\treturn false;\n+      if (!gfc_option.flag_realloc_lhs)\n+\t{\n+\t  gfc_error (\"Assignment to an allocatable polymorphic variable at %L \"\n+\t\t     \"requires -frealloc-lhs\", &lhs->where);\n+\t  return false;\n+\t}\n+      /* See PR 43366.  */\n+      gfc_error (\"Assignment to an allocatable polymorphic variable at %L \"\n+\t\t \"is not yet supported\", &lhs->where);\n+      return false;\n+    }\n+  else if (lhs->ts.type == BT_CLASS)\n     {\n-      gfc_error (\"Variable must not be polymorphic in intrinsic assignment at \"\n-\t\t \"%L - check that there is a matching specific subroutine \"\n-\t\t \"for '=' operator\", &lhs->where);\n+      gfc_error (\"Nonallocatable variable must not be polymorphic in intrinsic \"\n+\t\t \"assignment at %L - check that there is a matching specific \"\n+\t\t \"subroutine for '=' operator\", &lhs->where);\n       return false;\n     }\n "}, {"sha": "e388eb469e8e4990b6cb05fb7e00de283695c4b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -1,3 +1,13 @@\n+2013-09-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43366\n+\t* gfortran.dg/class_39.f03: Update dg-error.\n+\t* gfortran.dg/class_5.f03: Ditto.\n+\t* gfortran.dg/class_53.f90: Ditto.\n+\t* gfortran.dg/realloc_on_assign_20.f90: New.\n+\t* gfortran.dg/realloc_on_assign_21.f90: New.\n+\t* gfortran.dg/realloc_on_assign_22.f90: New.\n+\n 2013-09-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58457"}, {"sha": "c29a3b06a63ad032d52d003e000975c9ab38b6ab", "filename": "gcc/testsuite/gfortran.dg/class_39.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_39.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_39.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_39.f03?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -8,6 +8,6 @@\n   end type T\n contains\n   class(T) function add()  ! { dg-error \"must be dummy, allocatable or pointer\" }\n-    add = 1  ! { dg-error \"Variable must not be polymorphic in intrinsic assignment\" }\n+    add = 1  ! { dg-error \"Nonallocatable variable must not be polymorphic in intrinsic assignment\" }\n   end function\n end"}, {"sha": "0307cae4f89aee7b151944caac5ec8168c3fe395", "filename": "gcc/testsuite/gfortran.dg/class_5.f03", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_5.f03?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -20,12 +20,11 @@\n  x = t2(45,478)\n  allocate(t2 :: cp)\n \n- cp = x   ! { dg-error \"Variable must not be polymorphic\" }\n+ cp = x   ! { dg-error \"Nonallocatable variable must not be polymorphic\" }\n \n  select type (cp)\n  type is (t2)\n    print *, cp%a, cp%b\n  end select\n \n end\n- \n\\ No newline at end of file"}, {"sha": "83f55712d0b6eb9cecc720f98eaa279ea9f2d1b0", "filename": "gcc/testsuite/gfortran.dg/class_53.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_53.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_53.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_53.f90?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -13,6 +13,6 @@\n type(arr_t) :: this\n class(arr_t) :: elem   ! { dg-error \"must be dummy, allocatable or pointer\" }\n \n-elem = this   ! { dg-error \"Variable must not be polymorphic in intrinsic assignment\" }\n+elem = this   ! { dg-error \"Nonallocatable variable must not be polymorphic in intrinsic assignment\" }\n \n end"}, {"sha": "d4cfaf841c6aea7a6e0dbb1d95285d4d7ec2e52a", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_20.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_20.f90?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/43366\n+!\n+! Invalid assignment to an allocatable polymorphic var.\n+!\n+type t\n+end type t\n+class(t), allocatable :: var\n+\n+var = t() ! { dg-error \"Fortran 2008: Assignment to an allocatable polymorphic variable\" }\n+end"}, {"sha": "fd8f9aca939781b3d668897d4612788a0682975b", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_21.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_21.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_21.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_21.f90?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-fno-realloc-lhs\" }\n+!\n+! PR fortran/43366\n+!\n+! Invalid assignment to an allocatable polymorphic var.\n+!\n+type t\n+end type t\n+class(t), allocatable :: var\n+\n+var = t() ! { dg-error \"Assignment to an allocatable polymorphic variable at .1. requires -frealloc-lhs\" }\n+end"}, {"sha": "f759c6aca001f6498db0900ae347783116fffaf1", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_22.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ba23b7aa47ed35554dd5654f0e372d824f81e3/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_22.f90?ref=83ba23b7aa47ed35554dd5654f0e372d824f81e3", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! PR fortran/43366\n+!\n+! Invalid assignment to an allocatable polymorphic var.\n+!\n+type t\n+end type t\n+class(t), allocatable :: caf[:]\n+\n+caf = t() ! { dg-error \"Assignment to polymorphic coarray at .1. is not permitted\" }\n+end"}]}