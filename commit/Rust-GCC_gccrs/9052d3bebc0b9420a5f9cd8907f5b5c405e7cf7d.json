{"sha": "9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1MmQzYmViYzBiOTQyMGE1ZjljZDg5MDdmNWI1YzQwNWU3Y2Y3ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-08-10T08:19:44Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-08-10T08:19:44Z"}, "message": "c90-array-lval-1.c, [...]: New tests.\n\n\t* gcc.dg/c90-array-lval-1.c, gcc.dg/c90-scope-1.c,\n\tgcc.dg/c99-array-lval-1.c, gcc.dg/c99-const-expr-1.c,\n\tgcc.dg/c99-func-1.c, gcc.dg/c99-func-2.c, gcc.dg/c99-scope-1.c:\n\tNew tests.\n\nFrom-SVN: r35602", "tree": {"sha": "d0cd0063959a5d0dc1fe4a1a374d8ccbb93bffcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0cd0063959a5d0dc1fe4a1a374d8ccbb93bffcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da40cbf67ae68725ec9bbdbccf0275597e51a9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da40cbf67ae68725ec9bbdbccf0275597e51a9b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da40cbf67ae68725ec9bbdbccf0275597e51a9b3"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "15b748e296818f6c3dfea6ec51a6ed32b1988ea4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -1,3 +1,10 @@\n+2000-08-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-array-lval-1.c, gcc.dg/c90-scope-1.c,\n+\tgcc.dg/c99-array-lval-1.c, gcc.dg/c99-const-expr-1.c,\n+\tgcc.dg/c99-func-1.c, gcc.dg/c99-func-2.c, gcc.dg/c99-scope-1.c:\n+\tNew tests.\n+\n 2000-08-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.abi/ptrflags.C: Adjust rtti member names."}, {"sha": "900dd844ea8ff1c45d5c23143f1aa4ca4fbd8799", "filename": "gcc/testsuite/gcc.dg/c90-array-lval-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-array-lval-1.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,21 @@\n+/* Test for non-lvalue arrays decaying to pointers: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+struct s { char c[1]; };\n+\n+extern struct s foo (void);\n+\n+void\n+bar (void)\n+{\n+  char *t;\n+  (foo ()).c[0]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  t = (foo ()).c; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  (foo ()).c + 1; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+}\n+/* { dg-error \"non-lvalue\" \"array not decaying to lvalue\" { target *-*-* } 14 }\n+   { dg-error \"non-lvalue\" \"array not decaying to lvalue\" { target *-*-* } 15 }\n+   { dg-error \"non-lvalue\" \"array not decaying to lvalue\" { target *-*-* } 16 }\n+*/"}, {"sha": "ad36b7063fb1e26fa1dbf3086e23373dd26062cc", "filename": "gcc/testsuite/gcc.dg/c90-scope-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scope-1.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,34 @@\n+/* Test for new block scopes in C99.  Inspired by C99 Rationale (N897).  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+struct foo {\n+  char a;\n+};\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+sfoo (void)\n+{\n+  if (sizeof (struct foo { int a; double b; char *c; void *d; }))\n+    (void) 0;\n+  return sizeof (struct foo);\n+}\n+\n+int\n+main (void)\n+{\n+  int t, u;\n+  t = sfoo ();\n+  u = sizeof (struct foo);\n+  /* With C90 scoping rules the new declaration of struct foo is in scope\n+     above; with C99 it is local to the if.\n+  */\n+  if (t == u)\n+    abort (); /* C99 rules apply.  */\n+  else\n+    exit (0); /* C90 rules apply.  */\n+}"}, {"sha": "831fb54ca0e453f2b25b716e21d3b31f412aba47", "filename": "gcc/testsuite/gcc.dg/c99-array-lval-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-array-lval-1.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,17 @@\n+/* Test for non-lvalue arrays decaying to pointers: in C99 only.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+struct s { char c[1]; };\n+\n+extern struct s foo (void);\n+\n+void\n+bar (void)\n+{\n+  char *t;\n+  (foo ()).c[0]; /* { dg-bogus \"non-lvalue\" \"array not decaying to lvalue\" { xfail *-*-* } } */\n+  t = (foo ()).c; /* { dg-bogus \"non-lvalue\" \"array not decaying to lvalue\" { xfail *-*-* } } */\n+  (foo ()).c + 1; /* { dg-bogus \"non-lvalue\" \"array not decaying to lvalue\" { xfail *-*-* } } */\n+}"}, {"sha": "c3082ee38f78b5cd388bf8f8b95df2513f6e4c2c", "filename": "gcc/testsuite/gcc.dg/c99-const-expr-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-const-expr-1.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,16 @@\n+/* Test for constraints on constant expressions.  In C90 it is clear that\n+   certain constructs are not permitted in unevaluated parts of an\n+   expression (except in sizeof); in C99 it might fall within implementation\n+   latitude; and if the operands are suitable, diagnostics should not be\n+   issued.\n+*/\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk>; inspired by\n+   http://deja.com/getdoc.xp?AN=524271595&fmt=text by Peter Seebach.\n+*/\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+/* The comma operator is in a subexpression that is not evaluated, so OK\n+   by C99.  In C90 a diagnostic is required since it is not in a sizeof.\n+*/\n+int i = (1 ? 0 : (2, 3));"}, {"sha": "43fb0321774f333291538c4c8b271e6d7432d895", "filename": "gcc/testsuite/gcc.dg/c99-func-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-1.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,17 @@\n+/* Test for C99 __func__.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+extern void abort (void);\n+extern int strcmp (const char *, const char *);\n+extern void exit (int);\n+\n+int\n+main (void)\n+{\n+  if (strcmp (__func__, \"main\") || sizeof (__func__) != 5)\n+    abort ();\n+  else\n+    exit (0);\n+}"}, {"sha": "11737d6ce45f8312c535bb8a63afa1bd75c7461f", "filename": "gcc/testsuite/gcc.dg/c99-func-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-func-2.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,11 @@\n+/* Test for C99 __func__: not a string constant.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  __func__ \"foo\"; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+  /* { dg-error \"parse error\" \"__func__ not string constant\" { xfail *-*-* } 9 } */\n+}"}, {"sha": "256b39c115a446752c18e0125409ea62c6ce5281", "filename": "gcc/testsuite/gcc.dg/c99-scope-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scope-1.c?ref=9052d3bebc0b9420a5f9cd8907f5b5c405e7cf7d", "patch": "@@ -0,0 +1,34 @@\n+/* Test for new block scopes in C99.  Inspired by C99 Rationale (N897).  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do run { xfail *-*-* } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+struct foo {\n+  char a;\n+};\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+sfoo (void)\n+{\n+  if (sizeof (struct foo { int a; double b; char *c; void *d; }))\n+    (void) 0;\n+  return sizeof (struct foo);\n+}\n+\n+int\n+main (void)\n+{\n+  int t, u;\n+  t = sfoo ();\n+  u = sizeof (struct foo);\n+  /* With C90 scoping rules the new declaration of struct foo is in scope\n+     above; with C99 it is local to the if.\n+  */\n+  if (t == u)\n+    exit (0); /* C99 rules apply.  */\n+  else\n+    abort (); /* C90 rules apply.  */\n+}"}]}