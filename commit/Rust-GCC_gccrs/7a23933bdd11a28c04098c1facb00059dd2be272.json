{"sha": "7a23933bdd11a28c04098c1facb00059dd2be272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyMzkzM2JkZDExYTI4YzA0MDk4YzFmYWNiMDAwNTlkZDJiZTI3Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-02-13T07:54:40Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-02-13T07:54:40Z"}, "message": "ffi.c (ffi_prep_args, [...]): Add long double handling.\n\n2007-02-13  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* src/s390/ffi.c (ffi_prep_args, ffi_prep_cif_machdep,\n\tffi_closure_helper_SYSV): Add long double handling.\n\nFrom-SVN: r121879", "tree": {"sha": "160ab02005ff98f1643394606e3465ed3aaebca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160ab02005ff98f1643394606e3465ed3aaebca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a23933bdd11a28c04098c1facb00059dd2be272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a23933bdd11a28c04098c1facb00059dd2be272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a23933bdd11a28c04098c1facb00059dd2be272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a23933bdd11a28c04098c1facb00059dd2be272/comments", "author": null, "committer": null, "parents": [{"sha": "9606c9dd5e853ca9e24ffd6aab1b8bdc6f3c9b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9606c9dd5e853ca9e24ffd6aab1b8bdc6f3c9b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9606c9dd5e853ca9e24ffd6aab1b8bdc6f3c9b43"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "5a67ccdda3079aaa959bad3fac40a1dbb5853597", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a23933bdd11a28c04098c1facb00059dd2be272/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a23933bdd11a28c04098c1facb00059dd2be272/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=7a23933bdd11a28c04098c1facb00059dd2be272", "patch": "@@ -1,3 +1,8 @@\n+2007-02-13  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* src/s390/ffi.c (ffi_prep_args, ffi_prep_cif_machdep,\n+\tffi_closure_helper_SYSV): Add long double handling.\n+\n 2007-02-02  Jakub Jelinek  <jakub@redhat.com>\n \n \t* src/powerpc/linux64.S (ffi_call_LINUX64): Move restore of r2"}, {"sha": "2809aa39a336bdc7a9e9531bca204c37c69bea7f", "filename": "libffi/src/s390/ffi.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a23933bdd11a28c04098c1facb00059dd2be272/libffi%2Fsrc%2Fs390%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a23933bdd11a28c04098c1facb00059dd2be272/libffi%2Fsrc%2Fs390%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fs390%2Fffi.c?ref=7a23933bdd11a28c04098c1facb00059dd2be272", "patch": "@@ -207,6 +207,12 @@ ffi_prep_args (unsigned char *stack, extended_cif *ecif)\n       void *arg = *p_argv;\n       int type = (*ptr)->type;\n \n+#if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n+      /* 16-byte long double is passed like a struct.  */\n+      if (type == FFI_TYPE_LONGDOUBLE)\n+\ttype = FFI_TYPE_STRUCT;\n+#endif\n+\n       /* Check how a structure type is passed.  */\n       if (type == FFI_TYPE_STRUCT)\n \t{\n@@ -364,6 +370,12 @@ ffi_prep_cif_machdep(ffi_cif *cif)\n \tcif->flags = FFI390_RET_DOUBLE;\n \tbreak;\n \n+#if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n+      case FFI_TYPE_LONGDOUBLE:\n+\tcif->flags = FFI390_RET_STRUCT;\n+\tn_gpr++;\n+\tbreak;\n+#endif\n       /* Integer values are returned in gpr 2 (and gpr 3\n \t for 64-bit values on 31-bit machines).  */\n       case FFI_TYPE_UINT64:\n@@ -400,6 +412,12 @@ ffi_prep_cif_machdep(ffi_cif *cif)\n     {\n       int type = (*ptr)->type;\n \n+#if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n+      /* 16-byte long double is passed like a struct.  */\n+      if (type == FFI_TYPE_LONGDOUBLE)\n+\ttype = FFI_TYPE_STRUCT;\n+#endif\n+\n       /* Check how a structure type is passed.  */\n       if (type == FFI_TYPE_STRUCT)\n \t{\n@@ -562,6 +580,12 @@ ffi_closure_helper_SYSV (ffi_closure *closure,\n       int deref_struct_pointer = 0;\n       int type = (*ptr)->type;\n \n+#if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n+      /* 16-byte long double is passed like a struct.  */\n+      if (type == FFI_TYPE_LONGDOUBLE)\n+\ttype = FFI_TYPE_STRUCT;\n+#endif\n+\n       /* Check how a structure type is passed.  */\n       if (type == FFI_TYPE_STRUCT)\n \t{\n@@ -662,6 +686,9 @@ ffi_closure_helper_SYSV (ffi_closure *closure,\n       /* Void is easy, and so is struct.  */\n       case FFI_TYPE_VOID:\n       case FFI_TYPE_STRUCT:\n+#if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n+      case FFI_TYPE_LONGDOUBLE:\n+#endif\n \tbreak;\n \n       /* Floating point values are returned in fpr 0.  */"}]}