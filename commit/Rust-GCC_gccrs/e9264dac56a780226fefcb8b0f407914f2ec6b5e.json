{"sha": "e9264dac56a780226fefcb8b0f407914f2ec6b5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyNjRkYWM1NmE3ODAyMjZmZWZjYjhiMGY0MDc5MTRmMmVjNmI1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-10T17:08:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-10T17:08:32Z"}, "message": "2004-03-10  Paolo Carlini  <pcarlini@suse.de>\n\n\tAdd include/bits/valarray_array.tcc changes missing from\n\tJerry's commit to mainline.\n\nFrom-SVN: r79260", "tree": {"sha": "b063734b3df07d5d4d42efa509c70c736b3508c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b063734b3df07d5d4d42efa509c70c736b3508c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9264dac56a780226fefcb8b0f407914f2ec6b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9264dac56a780226fefcb8b0f407914f2ec6b5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9264dac56a780226fefcb8b0f407914f2ec6b5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9264dac56a780226fefcb8b0f407914f2ec6b5e/comments", "author": null, "committer": null, "parents": [{"sha": "452c159ed14cfe15a3bbf76bb988d454be2cb923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452c159ed14cfe15a3bbf76bb988d454be2cb923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452c159ed14cfe15a3bbf76bb988d454be2cb923"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "fac5de6399b178e6e3d76d5bf39a60608abc37f2", "filename": "libstdc++-v3/include/bits/valarray_array.tcc", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9264dac56a780226fefcb8b0f407914f2ec6b5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9264dac56a780226fefcb8b0f407914f2ec6b5e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.tcc?ref=e9264dac56a780226fefcb8b0f407914f2ec6b5e", "patch": "@@ -52,6 +52,12 @@ namespace std\n \t}\n     }\n \n+  // Copy n elements of a into consecutive elements of b.  When m is\n+  // false, the corresponding element of a is skipped.  m must contain\n+  // at least n true elements.  a must contain at least n elements and\n+  // enough elements to match up with m through the nth true element\n+  // of m.  I.e.  if n is 10, m has 15 elements with 5 false followed\n+  // by 10 true, a must have 15 elements.\n   template<typename _Tp>\n     void\n     __valarray_copy(_Array<_Tp> __a, _Array<bool> __m, _Array<_Tp> __b,\n@@ -71,6 +77,12 @@ namespace std\n \t}\n     }\n \n+  // Copy n consecutive elements from a into elements of b.  Elements\n+  // of b are skipped if the corresponding element of m is false.  m\n+  // must contain at least n true elements.  b must have at least as\n+  // many elements as the index of the nth true element of m.  I.e. if\n+  // m has 15 elements with 5 false followed by 10 true, b must have\n+  // at least 15 elements.\n   template<typename _Tp>\n     void\n     __valarray_copy(_Array<_Tp> __a, size_t __n, _Array<_Tp> __b,\n@@ -90,6 +102,39 @@ namespace std\n \t}\n     }\n \n+  // Copy n elements from a into elements of b.  Elements of a are\n+  // skipped if the corresponding element of m is false.  Elements of\n+  // b are skipped if the corresponding element of k is false.  m and\n+  // k must contain at least n true elements.  a and b must have at\n+  // least as many elements as the index of the nth true element of m.\n+  template<typename _Tp>\n+    void\n+    __valarray_copy(_Array<_Tp> __a, _Array<bool> __m, size_t __n,\n+\t\t    _Array<_Tp> __b, _Array<bool> __k)\n+    {\n+      _Tp* __p (__a._M_data);\n+      _Tp* __q (__b._M_data);\n+      bool* __srcok (__m._M_data);\n+      bool* __dstok (__k._M_data);\n+      for (size_t __i = 0; __i < __n;\n+\t   ++__srcok, ++__p, ++__dstok, ++__q, ++__i)\n+\t{\n+\t  while (! *__srcok)\n+\t    {\n+\t      ++__srcok;\n+\t      ++__p;\n+\t    }\n+\t  while (! *__dstok) \n+\t    {\n+\t      ++__dstok;\n+\t      ++__q;\n+\t    }\n+\t  *__q = *__p;\n+\t}\n+    }\n+\n+  // Copy n consecutive elements of e into consecutive elements of a.\n+  // I.e. a[i] = e[i].\n   template<typename _Tp, class _Dom>\n     void\n     __valarray_copy(const _Expr<_Dom, _Tp>& __e, size_t __n, _Array<_Tp> __a)\n@@ -99,6 +144,8 @@ namespace std\n \t*__p = __e[__i];\n     }\n \n+  // Copy n consecutive elements of e into elements of a using stride\n+  // s.  I.e., a[0] = e[0], a[s] = e[1], a[2*s] = e[2].\n   template<typename _Tp, class _Dom>\n     void\n     __valarray_copy(const _Expr<_Dom, _Tp>& __e, size_t __n,\n@@ -109,6 +156,8 @@ namespace std\n \t*__p = __e[__i];\n     }\n \n+  // Copy n consecutive elements of e into elements of a indexed by\n+  // contents of i.  I.e., a[i[0]] = e[0].\n   template<typename _Tp, class _Dom>\n     void\n     __valarray_copy(const _Expr<_Dom, _Tp>& __e, size_t __n,\n@@ -119,6 +168,26 @@ namespace std\n \t__a._M_data[*__j] = __e[__k];\n     }\n \n+  // Copy n elements of e indexed by contents of f into elements of a\n+  // indexed by contents of i.  I.e., a[i[0]] = e[f[0]].\n+  template<typename _Tp>\n+    void\n+    __valarray_copy(_Array<_Tp> __e, _Array<size_t> __f,\n+\t\t    size_t __n, \n+\t\t    _Array<_Tp> __a, _Array<size_t> __i)\n+    {\n+      size_t* __g (__f._M_data);\n+      size_t* __j (__i._M_data);\n+      for (size_t __k = 0; __k < __n; ++__k, ++__j, ++__g) \n+\t__a._M_data[*__j] = __e._M_data[*__g];\n+    }\n+\n+  // Copy n consecutive elements of e into elements of a.  Elements of\n+  // a are skipped if the corresponding element of m is false.  m must\n+  // have at least n true elements and a must have at least as many\n+  // elements as the index of the nth true element of m.  I.e. if m\n+  // has 5 false followed by 10 true elements and n == 10, a must have\n+  // at least 15 elements.\n   template<typename _Tp, class _Dom>\n     void\n     __valarray_copy(const _Expr<_Dom, _Tp>& __e, size_t __n,"}]}