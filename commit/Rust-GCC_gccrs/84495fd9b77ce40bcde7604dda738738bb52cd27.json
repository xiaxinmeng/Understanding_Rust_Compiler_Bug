{"sha": "84495fd9b77ce40bcde7604dda738738bb52cd27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ0OTVmZDliNzdjZTQwYmNkZTc2MDRkZGE3Mzg3MzhiYjUyY2QyNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-02-23T15:24:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-02-23T15:24:02Z"}, "message": "re PR target/22076 (Strange code for MMX register moves)\n\n        PR target/22076\n        PR target/34256\n\n        * config/i386/mmx.md (*mov<mode>_internal_rex64): Use \"!y\" to\n        prevent reload from using MMX registers.\n        (*mov<mode>_internal): Ditto.\n        (*movv2sf_internal_rex64): Ditto.\n        (*movv2sf_internal): Ditto.\n\ntestsuite/ChangeLog:\n\n        PR target/22076\n        PR target/34256\n        * gcc.target/i386/pr22076.c: New test.\n        * gcc.target/i386/pr34256.c: New test.\n        * gcc.target/i386/vecinit-5.c: New test.\n        * gcc.target/i386/vecinit-6.c: New test.\n        * gcc.target/i386/vecinit-[1-4].c: Check that no MMX register is used.\n\n        * g++.dg/compat/struct-layout-1.h: Do not include <mmintrin.h> and\n        <xmmintrin.h>, define __m64 and __m128 directly.\n        * g++.dg/compat/struct-layout-1_generate.c: Add -mno-mmx for x86.\n\nFrom-SVN: r132572", "tree": {"sha": "61717b288287207bcc2612ca43f910d60cae39cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61717b288287207bcc2612ca43f910d60cae39cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84495fd9b77ce40bcde7604dda738738bb52cd27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84495fd9b77ce40bcde7604dda738738bb52cd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84495fd9b77ce40bcde7604dda738738bb52cd27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84495fd9b77ce40bcde7604dda738738bb52cd27/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73c17ad2c832470c7313551258e1c8e2ee0c8bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c17ad2c832470c7313551258e1c8e2ee0c8bb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c17ad2c832470c7313551258e1c8e2ee0c8bb7"}], "stats": {"total": 129, "additions": 119, "deletions": 10}, "files": [{"sha": "9a90b880a2ed7e9a5abc1c440587e6b6fc3e9317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -1,3 +1,13 @@\n+2008-02-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/22076\n+\tPR target/34256\t\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64): Use \"!y\" to\n+\tprevent reload from using MMX registers.\n+\t(*mov<mode>_internal): Ditto.\n+\t(*movv2sf_internal_rex64): Ditto.\n+\t(*movv2sf_internal): Ditto.\n+\n 2008-02-23  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR documentation/31569"}, {"sha": "3371161f82f00758b5e89fd74a88efa5b8694879", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -63,9 +63,9 @@\n \n (define_insn \"*mov<mode>_internal_rex64\"\n   [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,*y,*y ,m ,*y,Y2,x,x ,m,r,x\")\n+\t\t\t\t\"=rm,r,!y,!y ,m ,!y,Y2,x,x ,m,r,x\")\n \t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m,C ,*ym,*y,Y2,*y,C,xm,x,x,r\"))]\n+\t\t\t\t\"Cr ,m,C ,!ym,!y,Y2,!y,C,xm,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -87,9 +87,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\"=*y,*y ,m ,*y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,?r ,?m\")\n+\t\t\t\"=!y,!y ,m ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,?r ,?m\")\n \t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\"C  ,*ym,*y,*Y2,*y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n+\t\t\t\"C  ,!ym,!y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -122,9 +122,9 @@\n \n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,*y ,*y ,m ,*y,Y2,x,x,x,m,r,x\")\n+\t\t\t\t\"=rm,r,!y ,!y ,m ,!y,Y2,x,x,x,m,r,x\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C ,*ym,*y,Y2,*y,C,x,m,x,x,r\"))]\n+\t\t\t\t\"Cr ,m ,C ,!ym,!y,Y2,!y,C,x,m,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -147,9 +147,9 @@\n \n (define_insn \"*movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\"=*y,*y ,m,*y ,*Y2,*x,*x,*x,m ,?r ,?m\")\n+\t\t\t\"=!y,!y ,m,!y ,*Y2,*x,*x,*x,m ,?r ,?m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\"C ,*ym,*y,*Y2,*y ,C ,*x,m ,*x,irm,r\"))]\n+\t\t\t\"C ,!ym,!y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@"}, {"sha": "21776c423cdca99a81cfc44fe430af50544b44db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -1,3 +1,17 @@\n+2008-02-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/22076\n+\tPR target/34256\n+\t* gcc.target/i386/pr22076.c: New test.\n+\t* gcc.target/i386/pr34256.c: New test.\n+\t* gcc.target/i386/vecinit-5.c: New test.\n+\t* gcc.target/i386/vecinit-6.c: New test.\n+\t* gcc.target/i386/vecinit-[1-4].c: Check that no MMX register is used.\n+\n+\t* g++.dg/compat/struct-layout-1.h: Do not include <mmintrin.h> and\n+\t<xmmintrin.h>, define __m64 and __m128 directly.\n+\t* g++.dg/compat/struct-layout-1_generate.c: Add -mno-mmx for x86.\n+\n 2008-02-22  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR C++/34715"}, {"sha": "2b93a72c49d2fe207827d354b51afdca6b48669c", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.h?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -44,12 +44,12 @@ typedef int u2df;\n #endif\n #if (defined __i386__ || defined __x86_64__) && !defined SKIP_ATTRIBUTE\n # ifdef __MMX__\n-#  include <mmintrin.h>\n+typedef int __m64 __attribute__ ((__vector_size__ (8)));\n # else\n typedef int __m64;\n # endif\n # ifdef __SSE__\n-#  include <xmmintrin.h>\n+typedef float __m128 __attribute__ ((__vector_size__ (16)));\n # else\n typedef int __m128;\n # endif"}, {"sha": "0bb70eacc6d713fd7c03026431b0422684b23c7a", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define DG_OPTIONS \"\\\n /* { dg-options \\\"%1$s-I%2$s\\\" } */\\n\\\n+/* { dg-options \\\"%1$s-I%2$s -mno-mmx\\\" { target i?86-*-* x86_64-*-* } } */\\n\\\n /* { dg-options \\\"%1$s-I%2$s -fno-common\\\" { target hppa*-*-hpux* } } */\\n\\\n /* { dg-options \\\"%1$s-I%2$s -mno-base-addresses\\\" { target mmix-*-* } } */\\n\\\n \\n\""}, {"sha": "e77b994846ce5a1fa1aad3cdbc25f892ee35693a", "filename": "gcc/testsuite/gcc.target/i386/pr22076.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr22076.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flax-vector-conversions -mmmx\" } */\n+\n+#include <mmintrin.h>\n+\n+__v8qi test ()\n+{\n+  __v8qi mm0 = {1,2,3,4,5,6,7,8};\n+  __v8qi mm1 = {11,22,33,44,55,66,77,88};\n+  volatile __m64 x;\n+\n+  x = _mm_add_pi8 (mm0, mm1);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\" 3 } } */\n+/* { dg-final { scan-assembler-times \"movl\" 1 { target ilp32 } } } */"}, {"sha": "13628ff8fc9bc8d0063cfa3665f6fc99a893ce72", "filename": "gcc/testsuite/gcc.target/i386/pr34256.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34256.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -march=core2\" } */\n+\n+#include <mmintrin.h>\n+\n+__m64 x;\n+__m64 y;\n+\n+unsigned long long  foo(__m64 m) {\n+  return _mm_cvtm64_si64(_mm_add_pi32(x, y));\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\" 2 } } */"}, {"sha": "8553eb05e4c99d3af5552b3a14377c859899990d", "filename": "gcc/testsuite/gcc.target/i386/vecinit-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-1.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -9,3 +9,4 @@ vector float f3(void) { return (vector float){ 0.0, 0.0, a, 0.0}; }\n vector float f4(void) { return (vector float){ 0.0, 0.0, 0.0, a}; }\n /* { dg-final { scan-assembler-not \"movaps\" } } */\n /* { dg-final { scan-assembler-not \"xor\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}, {"sha": "d6c715fd4f9527603f119838c3b584db567b0229", "filename": "gcc/testsuite/gcc.target/i386/vecinit-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-2.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -9,3 +9,4 @@ vector int f3(void) { return (vector int){ 0, 0, a, 0}; }\n vector int f4(void) { return (vector int){ 0, 0, 0, a}; }\n /* { dg-final { scan-assembler-not \"movaps\" } } */\n /* { dg-final { scan-assembler-not \"xor\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}, {"sha": "053b566fbac01cef9772d888a968d65ddae423e9", "filename": "gcc/testsuite/gcc.target/i386/vecinit-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-3.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -6,3 +6,4 @@ char a;\n vector char f(void) { return (vector char){ a, a, a, a, a, a, a, a,\n \t\t\t\t\t    a, a, a, a, a, a, a, a }; }\n /* { dg-final { scan-assembler-not \"sall\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}, {"sha": "773a3160062f43ed32efcccdc9948b2b809802c2", "filename": "gcc/testsuite/gcc.target/i386/vecinit-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-4.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -5,3 +5,4 @@\n short a;\n vector short f(void) { return (vector short){ a, a, a, a, a, a, a, a }; }\n /* { dg-final { scan-assembler-not \"sall\" } } */\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}, {"sha": "57648897391f8f21d3c8184739d4191bdd556dc2", "filename": "gcc/testsuite/gcc.target/i386/vecinit-5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-5.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+#define vector __attribute__((vector_size(16)))\n+\n+float a, b;\n+vector float f1(void) { return (vector float){ 0.0, 0.0, a, a}; }\n+vector float f2(void) { return (vector float){ a, a, 0.0, 0.0}; }\n+vector float f3(void) { return (vector float){ 0.0, a, 0.0, a}; }\n+vector float f4(void) { return (vector float){ a, 0.0, a, 0.0}; }\n+\n+vector float f5(void) { return (vector float){ 1.0, 1.0, a, a}; }\n+vector float f6(void) { return (vector float){ a, a, 1.0, 1.0}; }\n+vector float f7(void) { return (vector float){ 1.0, a, 1.0, a}; }\n+vector float f8(void) { return (vector float){ a, 1.0, a, 1.0}; }\n+\n+vector float fa(void) { return (vector float){ 1.0, 1.0, 0.0, 0.0}; }\n+vector float fb(void) { return (vector float){ 1.0, 0.0, 1.0, 0.0}; }\n+vector float fc(void) { return (vector float){ 0.0, 1.0, 0.0, 1.0}; }\n+\n+vector float fA(void) { return (vector float){ a, a, b, b}; }\n+vector float fB(void) { return (vector float){ a, b, a, b}; }\n+vector float fC(void) { return (vector float){ a, a, a, a}; }\n+\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}, {"sha": "ba58f12606add2b459fcb14285912175b49a5585", "filename": "gcc/testsuite/gcc.target/i386/vecinit-6.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84495fd9b77ce40bcde7604dda738738bb52cd27/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvecinit-6.c?ref=84495fd9b77ce40bcde7604dda738738bb52cd27", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+#define vector __attribute__((vector_size(16)))\n+\n+int a, b;\n+vector int f1(void) { return (vector int){ 0, 0, a, a}; }\n+vector int f2(void) { return (vector int){ a, a, 0, 0}; }\n+vector int f3(void) { return (vector int){ 0, a, 0, a}; }\n+vector int f4(void) { return (vector int){ a, 0, a, 0}; }\n+\n+vector int f5(void) { return (vector int){ 1, 1, a, a}; }\n+vector int f6(void) { return (vector int){ a, a, 1, 1}; }\n+vector int f7(void) { return (vector int){ 1, a, 1, a}; }\n+vector int f8(void) { return (vector int){ a, 1, a, 1}; }\n+\n+vector int fa(void) { return (vector int){ 1, 1, 0, 0}; }\n+vector int fb(void) { return (vector int){ 1, 0, 1, 0}; }\n+vector int fc(void) { return (vector int){ 0, 1, 0, 1}; }\n+\n+vector int fA(void) { return (vector int){ a, a, b, b}; }\n+vector int fB(void) { return (vector int){ a, b, a, b}; }\n+vector int fC(void) { return (vector int){ a, a, a, a}; }\n+\n+/* { dg-final { scan-assembler-not \"%mm\" } } */"}]}