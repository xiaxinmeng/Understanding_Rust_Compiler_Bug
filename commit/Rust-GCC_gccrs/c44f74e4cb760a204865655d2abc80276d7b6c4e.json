{"sha": "c44f74e4cb760a204865655d2abc80276d7b6c4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ0Zjc0ZTRjYjc2MGEyMDQ4NjU2NTVkMmFiYzgwMjc2ZDdiNmM0ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-10T20:38:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-10T20:38:13Z"}, "message": "re PR go/61316 (gccgo: spurious \"incompatible types in assignment\" error [GoSmith])\n\n\tPR go/61316\ncompiler: Don't lower multi-valued arguments into temporaries.\n\nFrom-SVN: r218606", "tree": {"sha": "55d23d5573be15e9f8432f098d0293e7ef1dc338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d23d5573be15e9f8432f098d0293e7ef1dc338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c44f74e4cb760a204865655d2abc80276d7b6c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44f74e4cb760a204865655d2abc80276d7b6c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44f74e4cb760a204865655d2abc80276d7b6c4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44f74e4cb760a204865655d2abc80276d7b6c4e/comments", "author": null, "committer": null, "parents": [{"sha": "1b457aa45d402df7fbf1dbd818f6d38a4c447aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b457aa45d402df7fbf1dbd818f6d38a4c447aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b457aa45d402df7fbf1dbd818f6d38a4c447aaa"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "4d07c223b34f89f13c6500fb9b07b20e501dbcad", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44f74e4cb760a204865655d2abc80276d7b6c4e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44f74e4cb760a204865655d2abc80276d7b6c4e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=c44f74e4cb760a204865655d2abc80276d7b6c4e", "patch": "@@ -8525,6 +8525,7 @@ Call_expression::do_lower(Gogo* gogo, Named_object* function,\n               || fntype->is_builtin()))\n \t{\n \t  Call_expression* call = this->args_->front()->call_expression();\n+\t  call->set_is_multi_value_arg();\n \t  Expression_list* args = new Expression_list;\n \t  for (size_t i = 0; i < rc; ++i)\n \t    args->push_back(Expression::make_call_result(call, i));"}, {"sha": "398709ee386e90176462dd72eaf924b0537ff048", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44f74e4cb760a204865655d2abc80276d7b6c4e/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44f74e4cb760a204865655d2abc80276d7b6c4e/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=c44f74e4cb760a204865655d2abc80276d7b6c4e", "patch": "@@ -1632,7 +1632,7 @@ class Call_expression : public Expression\n       fn_(fn), args_(args), type_(NULL), results_(NULL), call_(NULL),\n       call_temp_(NULL), expected_result_count_(0), is_varargs_(is_varargs),\n       varargs_are_lowered_(false), types_are_determined_(false),\n-      is_deferred_(false), issued_error_(false)\n+      is_deferred_(false), issued_error_(false), is_multi_value_arg_(false)\n   { }\n \n   // The function to call.\n@@ -1703,6 +1703,17 @@ class Call_expression : public Expression\n   bool\n   issue_error();\n \n+  // Whether this call returns multiple results that are used as an\n+  // multi-valued argument.\n+  bool\n+  is_multi_value_arg() const\n+  { return this->is_multi_value_arg_; }\n+\n+  // Note this call is used as a multi-valued argument.\n+  void\n+  set_is_multi_value_arg()\n+  { this->is_multi_value_arg_ = true; }\n+\n  protected:\n   int\n   do_traverse(Traverse*);\n@@ -1806,6 +1817,8 @@ class Call_expression : public Expression\n   // results and uses.  This is to avoid producing multiple errors\n   // when there are multiple Call_result_expressions.\n   bool issued_error_;\n+  // True if this call is used as an argument that returns multiple results.\n+  bool is_multi_value_arg_;\n };\n \n // An expression which represents a pointer to a function."}, {"sha": "5b8c2e73fc775af5c175a310f29a59c10ae22680", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c44f74e4cb760a204865655d2abc80276d7b6c4e/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c44f74e4cb760a204865655d2abc80276d7b6c4e/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=c44f74e4cb760a204865655d2abc80276d7b6c4e", "patch": "@@ -726,6 +726,17 @@ Move_ordered_evals::expression(Expression** pexpr)\n \n   if ((*pexpr)->must_eval_in_order())\n     {\n+      Call_expression* call = (*pexpr)->call_expression();\n+      if (call != NULL && call->is_multi_value_arg())\n+\t{\n+\t  // A call expression which returns multiple results as an argument\n+\t  // to another call must be handled specially.  We can't create a\n+\t  // temporary because there is no type to give it.  Instead, group\n+\t  // the caller and this multi-valued call argument and use a temporary\n+\t  // variable to hold them.\n+\t  return TRAVERSE_SKIP_COMPONENTS;\n+\t}\n+\n       Location loc = (*pexpr)->location();\n       Temporary_statement* temp = Statement::make_temporary(NULL, *pexpr, loc);\n       this->block_->add_statement(temp);"}]}