{"sha": "a8e02a00a0fcac42657c8ef7921566e42db8ef49", "node_id": "C_kwDOANBUbNoAKGE4ZTAyYTAwYTBmY2FjNDI2NTdjOGVmNzkyMTU2NmU0MmRiOGVmNDk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T18:37:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-09T23:12:20Z"}, "message": "libstdc++: Make std::make_exception_ptr work with -fno-exceptions [PR85813]\n\nThis allows std::make_exception_ptr to be used in a translation unit\ncompiled with -fno-exceptions. This works because the new implementation\nadded for PR 68297 doesn't need to throw or catch anything. The catch is\nthere to handle exceptions from the constructor of the exception object,\nwhich we can assume won't happen in a -fno-exceptions TU and so use the\n__catch macro instead. If the constructor does throw (because it's\ndefined in a different TU which was compiled with exceptions enabled)\nthen that exception will propagate to the make_exception_ptr caller.\nThat seems acceptable for a program that is trying to mix & match TUs\ncompiled with and without exceptions, and using types that throw when\nconstructed. That should be rare, and can't reasonably be expected to\nhave sensible behaviour.\n\nThis also enables the new implementation for targets that use a\nnon-standard calling convention for the exceptionDestructor callback\n(specifically, mingw, which uses __thiscall). All we need to do is mark\nthe __dest_thunk function template with the right calling convention.\n\nFinally, the useless no-op definition of make_exception_ptr (which is\nonly used if both RTTI and exceptions are disabled) is marked\nalways_inline, to ensure that the linker won't keep that definition and\ndiscard the functional ones when both definitions of the function are\npresent in the link. An alternative would be to add the abi_tag\nattribute to the useless definition, but making it always_inline should\nwork, and it's small enough to always be inlined reliably.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/85813\n\t* libsupc++/exception_ptr.h (__dest_thunk): Add macro for\n\tdestructor calling convention.\n\t(make_exception_ptr): Enable non-throwing implementation for\n\t-fno-exceptions and for non-standard calling conventions. Use\n\talways_inline attribute on the useless no-rtti no-exceptions\n\tdefinition.\n\t* testsuite/18_support/exception_ptr/64241.cc: Add -fno-rtti so\n\tthe no-op implementation is still used.", "tree": {"sha": "ff0e684d7f3ed1b21d7e46bdd57a96fafe279134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff0e684d7f3ed1b21d7e46bdd57a96fafe279134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8e02a00a0fcac42657c8ef7921566e42db8ef49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e02a00a0fcac42657c8ef7921566e42db8ef49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e02a00a0fcac42657c8ef7921566e42db8ef49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e02a00a0fcac42657c8ef7921566e42db8ef49/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ca039fc0fe934ef36c25d8284e6e116bcaffa7"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "8c700e642651dd4f708273c0e14cb146aab03e48", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e02a00a0fcac42657c8ef7921566e42db8ef49/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e02a00a0fcac42657c8ef7921566e42db8ef49/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=a8e02a00a0fcac42657c8ef7921566e42db8ef49", "patch": "@@ -225,6 +225,7 @@ namespace std\n \n     /// @cond undocumented\n     template<typename _Ex>\n+      _GLIBCXX_CDTOR_CALLABI\n       inline void\n       __dest_thunk(void* __x)\n       { static_cast<_Ex*>(__x)->~_Ex(); }\n@@ -233,28 +234,28 @@ namespace std\n   } // namespace __exception_ptr\n \n   /// Obtain an exception_ptr pointing to a copy of the supplied object.\n+#if (__cplusplus >= 201103L && __cpp_rtti) || __cpp_exceptions\n   template<typename _Ex>\n-    exception_ptr \n+    exception_ptr\n     make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT\n     {\n-#if __cpp_exceptions && __cpp_rtti && !_GLIBCXX_HAVE_CDTOR_CALLABI \\\n-      && __cplusplus >= 201103L\n-      using _Ex2 = typename remove_reference<_Ex>::type;\n+#if __cplusplus >= 201103L && __cpp_rtti\n+      using _Ex2 = typename decay<_Ex>::type;\n       void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));\n       (void) __cxxabiv1::__cxa_init_primary_exception(\n \t  __e, const_cast<std::type_info*>(&typeid(_Ex)),\n \t  __exception_ptr::__dest_thunk<_Ex2>);\n-      try\n+      __try\n \t{\n-\t  ::new (__e) _Ex2(std::forward<_Ex>(__ex));\n-          return exception_ptr(__e);\n+\t  ::new (__e) _Ex2(__ex);\n+\t  return exception_ptr(__e);\n \t}\n-      catch(...)\n+      __catch(...)\n \t{\n \t  __cxxabiv1::__cxa_free_exception(__e);\n \t  return current_exception();\n \t}\n-#elif __cpp_exceptions\n+#else\n       try\n \t{\n           throw __ex;\n@@ -263,10 +264,17 @@ namespace std\n \t{\n \t  return current_exception();\n \t}\n-#else // no RTTI and no exceptions\n-      return exception_ptr();\n #endif\n     }\n+#else // no RTTI and no exceptions\n+  // This is always_inline so the linker will never use this useless definition\n+  // instead of a working one compiled with RTTI and/or exceptions enabled.\n+  template<typename _Ex>\n+    __attribute__ ((__always_inline__))\n+    exception_ptr\n+    make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT\n+    { return exception_ptr(); }\n+#endif\n \n #undef _GLIBCXX_EH_PTR_USED\n "}, {"sha": "034a0a08a8c749f24c46b13e42f935ed322dbb7a", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/64241.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8e02a00a0fcac42657c8ef7921566e42db8ef49/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F64241.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8e02a00a0fcac42657c8ef7921566e42db8ef49/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F64241.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F64241.cc?ref=a8e02a00a0fcac42657c8ef7921566e42db8ef49", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-fno-exceptions -O0\" }\n+// { dg-options \"-fno-exceptions -fno-rtti -O0\" }\n // { dg-do run { target c++11 } }\n \n #include <exception>"}]}