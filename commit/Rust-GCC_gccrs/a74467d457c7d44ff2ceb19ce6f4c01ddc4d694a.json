{"sha": "a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc0NDY3ZDQ1N2M3ZDQ0ZmYyY2ViMTljZTZmNGMwMWRkYzRkNjk0YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-09T04:41:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-09T04:41:02Z"}, "message": "(floating_exact_log2, standard_68881_constant_p):\n\n(standard_sun_fpa_constant_p): Use REAL_VALUE_FROM_CONST_DOUBLE.\n(print_operand): Likewise.\n\nFrom-SVN: r2377", "tree": {"sha": "73b97e1d9f324f80f4ee4929d43465fd654f5e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73b97e1d9f324f80f4ee4929d43465fd654f5e9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a/comments", "author": null, "committer": null, "parents": [{"sha": "396f9edb4b7e7ac87f8aa57c2a4fe8c0a5cdfd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396f9edb4b7e7ac87f8aa57c2a4fe8c0a5cdfd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396f9edb4b7e7ac87f8aa57c2a4fe8c0a5cdfd9e"}], "stats": {"total": 38, "additions": 9, "deletions": 29}, "files": [{"sha": "935c807101177be7a9e99c6e3bf34827e185ceed", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a74467d457c7d44ff2ceb19ce6f4c01ddc4d694a", "patch": "@@ -1255,7 +1255,6 @@ int\n standard_68881_constant_p (x)\n      rtx x;\n {\n-  union {double d; int i[2];} u;\n   register double d;\n \n   /* fmovecr must be emulated on the 68040, so it shouldn't be used at all. */\n@@ -1267,14 +1266,7 @@ standard_68881_constant_p (x)\n     return 0;\n #endif\n \n-#ifdef HOST_WORDS_BIG_ENDIAN\n-  u.i[0] = CONST_DOUBLE_LOW (x);\n-  u.i[1] = CONST_DOUBLE_HIGH (x);\n-#else\n-  u.i[0] = CONST_DOUBLE_HIGH (x);\n-  u.i[1] = CONST_DOUBLE_LOW (x);\n-#endif \n-  d = u.d;\n+  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n \n   if (d == 0)\n     return 0x0f;\n@@ -1306,7 +1298,6 @@ int\n floating_exact_log2 (x)\n      rtx x;\n {\n-  union {double d; int i[2];} u;\n   register double d, d1;\n   int i;\n \n@@ -1315,14 +1306,7 @@ floating_exact_log2 (x)\n     return 0;\n #endif\n \n-#ifdef HOST_WORDS_BIG_ENDIAN\n-  u.i[0] = CONST_DOUBLE_LOW (x);\n-  u.i[1] = CONST_DOUBLE_HIGH (x);\n-#else\n-  u.i[0] = CONST_DOUBLE_HIGH (x);\n-  u.i[1] = CONST_DOUBLE_LOW (x);\n-#endif \n-  d = u.d;\n+  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n \n   if (! (d > 0))\n     return 0;\n@@ -1366,18 +1350,14 @@ int\n standard_sun_fpa_constant_p (x)\n      rtx x;\n {\n-  union {double d; int i[2];} u;\n   register double d;\n \n #if HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n   if (! flag_pretend_float)\n     return 0;\n #endif\n \n-\n-  u.i[0] = CONST_DOUBLE_LOW (x);\n-  u.i[1] = CONST_DOUBLE_HIGH (x);\n-  d = u.d;\n+  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n \n   if (d == 0.0)\n     return 0x200;\t\t/* 0 once 0x1ff is anded with it */\n@@ -1619,17 +1599,17 @@ print_operand (file, op, letter)\n #endif\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == SFmode)\n     {\n-      union { double d; int i[2]; } u;\n+      double d;\n       union { float f; int i; } u1;\n-      PRINT_OPERAND_EXTRACT_FLOAT (op);\n-      u1.f = u.d;\n+      REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n+      u1.f = d;\n       PRINT_OPERAND_PRINT_FLOAT (letter, file);\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) != DImode)\n     {\n-      union { double d; int i[2]; } u;\n-      PRINT_OPERAND_EXTRACT_FLOAT (op);\n-      ASM_OUTPUT_DOUBLE_OPERAND (file, u.d);\n+      double d;\n+      REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n+      ASM_OUTPUT_DOUBLE_OPERAND (file, d);\n     }\n   else\n     {"}]}