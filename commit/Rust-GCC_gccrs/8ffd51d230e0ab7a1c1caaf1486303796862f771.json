{"sha": "8ffd51d230e0ab7a1c1caaf1486303796862f771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmZDUxZDIzMGUwYWI3YTFjMWNhYWYxNDg2MzAzNzk2ODYyZjc3MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-06-10T09:12:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-06-10T09:12:53Z"}, "message": "re PR target/66470 (TLS ICE due to ix86_split_long_move)\n\n\tPR target/66470\n\t* config/i386/i386.c (ix86_split_long_move): For collisions\n\tinvolving direct tls segment refs, move the UNSPEC_TP possibly\n\twrapped in ZERO_EXTEND out of the address for lea, to each of\n\tthe memory loads.\n\n\t* gcc.dg/tls/pr66470.c: New test.\n\t* gcc.target/i386/pr66470.c: New test.\n\nFrom-SVN: r224319", "tree": {"sha": "dec796ae97125a33366e7f80bb12f66109ef31a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec796ae97125a33366e7f80bb12f66109ef31a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ffd51d230e0ab7a1c1caaf1486303796862f771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffd51d230e0ab7a1c1caaf1486303796862f771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffd51d230e0ab7a1c1caaf1486303796862f771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffd51d230e0ab7a1c1caaf1486303796862f771/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b20952407935bd6c4638b9bd8fa44f6099c8bdbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20952407935bd6c4638b9bd8fa44f6099c8bdbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20952407935bd6c4638b9bd8fa44f6099c8bdbc"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "4486b4e4660c27dbb9d8ad773585f5a9fc7186ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ffd51d230e0ab7a1c1caaf1486303796862f771", "patch": "@@ -1,3 +1,11 @@\n+2015-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/66470\n+\t* config/i386/i386.c (ix86_split_long_move): For collisions\n+\tinvolving direct tls segment refs, move the UNSPEC_TP possibly\n+\twrapped in ZERO_EXTEND out of the address for lea, to each of\n+\tthe memory loads.\n+\n 2015-06-10  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/sync.md (*memory_barrier): Use dmb ish instead of"}, {"sha": "abae7721547d6682599de013b428668a95951c1d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8ffd51d230e0ab7a1c1caaf1486303796862f771", "patch": "@@ -22858,7 +22858,7 @@ ix86_split_long_move (rtx operands[])\n \t Do an lea to the last part and use only one colliding move.  */\n       else if (collisions > 1)\n \t{\n-\t  rtx base;\n+\t  rtx base, addr, tls_base = NULL_RTX;\n \n \t  collisions = 1;\n \n@@ -22869,10 +22869,50 @@ ix86_split_long_move (rtx operands[])\n \t  if (GET_MODE (base) != Pmode)\n \t    base = gen_rtx_REG (Pmode, REGNO (base));\n \n-\t  emit_insn (gen_rtx_SET (base, XEXP (part[1][0], 0)));\n+\t  addr = XEXP (part[1][0], 0);\n+\t  if (TARGET_TLS_DIRECT_SEG_REFS)\n+\t    {\n+\t      struct ix86_address parts;\n+\t      int ok = ix86_decompose_address (addr, &parts);\n+\t      gcc_assert (ok);\n+\t      if (parts.seg == DEFAULT_TLS_SEG_REG)\n+\t\t{\n+\t\t  /* It is not valid to use %gs: or %fs: in\n+\t\t     lea though, so we need to remove it from the\n+\t\t     address used for lea and add it to each individual\n+\t\t     memory loads instead.  */\n+\t\t  addr = copy_rtx (addr);\n+\t\t  rtx *x = &addr;\n+\t\t  while (GET_CODE (*x) == PLUS)\n+\t\t    {\n+\t\t      for (i = 0; i < 2; i++)\n+\t\t\t{\n+\t\t\t  rtx u = XEXP (*x, i);\n+\t\t\t  if (GET_CODE (u) == ZERO_EXTEND)\n+\t\t\t    u = XEXP (u, 0);\n+\t\t\t  if (GET_CODE (u) == UNSPEC\n+\t\t\t      && XINT (u, 1) == UNSPEC_TP)\n+\t\t\t    {\n+\t\t\t      tls_base = XEXP (*x, i);\n+\t\t\t      *x = XEXP (*x, 1 - i);\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t}\n+\t\t      if (tls_base)\n+\t\t\tbreak;\n+\t\t      x = &XEXP (*x, 0);\n+\t\t    }\n+\t\t  gcc_assert (tls_base);\n+\t\t}\n+\t    }\n+\t  emit_insn (gen_rtx_SET (base, addr));\n+\t  if (tls_base)\n+\t    base = gen_rtx_PLUS (GET_MODE (base), base, tls_base);\n \t  part[1][0] = replace_equiv_address (part[1][0], base);\n \t  for (i = 1; i < nparts; i++)\n \t    {\n+\t      if (tls_base)\n+\t\tbase = copy_rtx (base);\n \t      tmp = plus_constant (Pmode, base, UNITS_PER_WORD * i);\n \t      part[1][i] = replace_equiv_address (part[1][i], tmp);\n \t    }"}, {"sha": "f7e79fe0721a0fc95d99c86c4f5f1d2a02117f37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ffd51d230e0ab7a1c1caaf1486303796862f771", "patch": "@@ -1,3 +1,9 @@\n+2015-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/66470\n+\t* gcc.dg/tls/pr66470.c: New test.\n+\t* gcc.target/i386/pr66470.c: New test.\n+\n 2015-06-09  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/52144"}, {"sha": "6d78327787b8b49a3fd907d6214e58df07745f8f", "filename": "gcc/testsuite/gcc.dg/tls/pr66470.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr66470.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr66470.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr66470.c?ref=8ffd51d230e0ab7a1c1caaf1486303796862f771", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/66470 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target tls } */\n+\n+extern __thread unsigned long long a[10];\n+extern __thread struct S { int a, b; } b[10];\n+\n+unsigned long long\n+foo (long x)\n+{\n+  return a[x];\n+}\n+\n+struct S\n+bar (long x)\n+{\n+  return b[x];\n+}\n+\n+#ifdef __SIZEOF_INT128__\n+extern __thread unsigned __int128 c[10];\n+\n+unsigned __int128\n+baz (long x)\n+{\n+  return c[x];\n+}\n+#endif"}, {"sha": "73158d134389fcd4a3aa694dd3eeabb223c6016b", "filename": "gcc/testsuite/gcc.target/i386/pr66470.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66470.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffd51d230e0ab7a1c1caaf1486303796862f771/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66470.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66470.c?ref=8ffd51d230e0ab7a1c1caaf1486303796862f771", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/66470 */\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mx32 -maddress-mode=long\" } */\n+/* { dg-require-effective-target tls } */\n+\n+extern __thread unsigned __int128 c[10];\n+int d;\n+\n+unsigned __int128\n+foo (void)\n+{\n+  return c[d];\n+}"}]}