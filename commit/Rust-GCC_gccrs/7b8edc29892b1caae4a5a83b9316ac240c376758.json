{"sha": "7b8edc29892b1caae4a5a83b9316ac240c376758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4ZWRjMjk4OTJiMWNhYWU0YTVhODNiOTMxNmFjMjQwYzM3Njc1OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-11-27T14:22:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-27T14:22:26Z"}, "message": "nvptx-protos.h (nvptx_addr_space_from_address): Don't declare.\n\n\t* config/nvptx/nvptx-protos.h (nvptx_addr_space_from_address):\n\tDon't declare.\n\t* config/nvptx/nvptx.c (nvptx_addr_space_from_sym): New.\n\t(nvptx_maybe_convert_symbolic_operand): Simplify.\n\t(nvptx_addr_space_from_address): Delete.\n\t(nvptx_print_operand): Adjust 'A' case.\n\nFrom-SVN: r231016", "tree": {"sha": "19cb74e2616512020862152e0b68592adcf6f0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19cb74e2616512020862152e0b68592adcf6f0cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8edc29892b1caae4a5a83b9316ac240c376758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8edc29892b1caae4a5a83b9316ac240c376758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8edc29892b1caae4a5a83b9316ac240c376758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8edc29892b1caae4a5a83b9316ac240c376758/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72c0f64330a0a5500fe97bf829ce181a28820fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c0f64330a0a5500fe97bf829ce181a28820fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c0f64330a0a5500fe97bf829ce181a28820fdf"}], "stats": {"total": 93, "additions": 55, "deletions": 38}, "files": [{"sha": "9e61bd6967a5a37d6fbb6ccc7b2228886dbf7055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8edc29892b1caae4a5a83b9316ac240c376758/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8edc29892b1caae4a5a83b9316ac240c376758/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b8edc29892b1caae4a5a83b9316ac240c376758", "patch": "@@ -1,3 +1,12 @@\n+2015-11-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx-protos.h (nvptx_addr_space_from_address):\n+\tDon't declare.\n+\t* config/nvptx/nvptx.c (nvptx_addr_space_from_sym): New.\n+\t(nvptx_maybe_convert_symbolic_operand): Simplify.\n+\t(nvptx_addr_space_from_address): Delete.\n+\t(nvptx_print_operand): Adjust 'A' case.\n+\n 2015-11-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68559"}, {"sha": "9fda531bed37729bed46c6e558378c76a81073fc", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8edc29892b1caae4a5a83b9316ac240c376758/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8edc29892b1caae4a5a83b9316ac240c376758/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=7b8edc29892b1caae4a5a83b9316ac240c376758", "patch": "@@ -41,7 +41,6 @@ extern const char *nvptx_output_return (void);\n extern machine_mode nvptx_underlying_object_mode (rtx);\n extern const char *nvptx_section_from_addr_space (addr_space_t);\n extern bool nvptx_hard_regno_mode_ok (int, machine_mode);\n-extern addr_space_t nvptx_addr_space_from_address (rtx);\n extern rtx nvptx_maybe_convert_symbolic_operand (rtx);\n #endif\n #endif"}, {"sha": "f92fa857bf4edbcb1122481cb981d4e27924a940", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 46, "deletions": 37, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8edc29892b1caae4a5a83b9316ac240c376758/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8edc29892b1caae4a5a83b9316ac240c376758/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=7b8edc29892b1caae4a5a83b9316ac240c376758", "patch": "@@ -206,6 +206,24 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n     }\n }\n \n+/* Determine the address space to use for SYMBOL_REF SYM.  */\n+\n+static addr_space_t\n+nvptx_addr_space_from_sym (rtx sym)\n+{\n+  tree decl = SYMBOL_REF_DECL (sym);\n+  if (decl == NULL_TREE || TREE_CODE (decl) == FUNCTION_DECL)\n+    return ADDR_SPACE_GENERIC;\n+\n+  bool is_const = (CONSTANT_CLASS_P (decl)\n+\t\t   || TREE_CODE (decl) == CONST_DECL\n+\t\t   || TREE_READONLY (decl));\n+  if (is_const)\n+    return ADDR_SPACE_CONST;\n+\n+  return ADDR_SPACE_GLOBAL;\n+}\n+\n /* If MODE should be treated as two registers of an inner mode, return\n    that inner mode.  Otherwise return VOIDmode.  */\n \n@@ -1359,32 +1377,36 @@ nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, wcast_data_t *data)\n    original operand, or the converted one.  */\n \n rtx\n-nvptx_maybe_convert_symbolic_operand (rtx orig_op)\n+nvptx_maybe_convert_symbolic_operand (rtx op)\n {\n-  if (GET_MODE (orig_op) != Pmode)\n-    return orig_op;\n+  if (GET_MODE (op) != Pmode)\n+    return op;\n+\n+  rtx sym = op;\n+  if (GET_CODE (sym) == CONST)\n+    sym = XEXP (sym, 0);\n+  if (GET_CODE (sym) == PLUS)\n+    sym = XEXP (sym, 0);\n \n-  rtx op = orig_op;\n-  while (GET_CODE (op) == PLUS || GET_CODE (op) == CONST)\n-    op = XEXP (op, 0);\n-  if (GET_CODE (op) != SYMBOL_REF)\n-    return orig_op;\n+  if (GET_CODE (sym) != SYMBOL_REF)\n+    return op;\n \n-  nvptx_maybe_record_fnsym (op);\n+  nvptx_maybe_record_fnsym (sym);\n   \n-  addr_space_t as = nvptx_addr_space_from_address (op);\n+  addr_space_t as = nvptx_addr_space_from_sym (sym);\n   if (as == ADDR_SPACE_GENERIC)\n-    return orig_op;\n+    return op;\n \n   enum unspec code;\n   code = (as == ADDR_SPACE_GLOBAL ? UNSPEC_FROM_GLOBAL\n \t  : as == ADDR_SPACE_LOCAL ? UNSPEC_FROM_LOCAL\n \t  : as == ADDR_SPACE_SHARED ? UNSPEC_FROM_SHARED\n \t  : as == ADDR_SPACE_CONST ? UNSPEC_FROM_CONST\n \t  : UNSPEC_FROM_PARAM);\n+\n   rtx dest = gen_reg_rtx (Pmode);\n-  emit_insn (gen_rtx_SET (dest, gen_rtx_UNSPEC (Pmode, gen_rtvec (1, orig_op),\n-\t\t\t\t\t\tcode)));\n+  emit_insn (gen_rtx_SET (dest,\n+\t\t\t  gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op), code)));\n   return dest;\n }\n \f\n@@ -1465,29 +1487,6 @@ nvptx_section_for_decl (const_tree decl)\n   return \".global\";\n }\n \n-/* Look for a SYMBOL_REF in ADDR and return the address space to be used\n-   for the insn referencing this address.  */\n-\n-addr_space_t\n-nvptx_addr_space_from_address (rtx addr)\n-{\n-  while (GET_CODE (addr) == PLUS || GET_CODE (addr) == CONST)\n-    addr = XEXP (addr, 0);\n-  if (GET_CODE (addr) != SYMBOL_REF)\n-    return ADDR_SPACE_GENERIC;\n-\n-  tree decl = SYMBOL_REF_DECL (addr);\n-  if (decl == NULL_TREE || TREE_CODE (decl) == FUNCTION_DECL)\n-    return ADDR_SPACE_GENERIC;\n-\n-  bool is_const = (CONSTANT_CLASS_P (decl)\n-\t\t   || TREE_CODE (decl) == CONST_DECL\n-\t\t   || TREE_READONLY (decl));\n-  if (is_const)\n-    return ADDR_SPACE_CONST;\n-\n-  return ADDR_SPACE_GLOBAL;\n-}\n \f\n /* Machinery to output constant initializers.  When beginning an initializer,\n    we decide on a chunk size (which is visible in ptx in the type used), and\n@@ -1945,7 +1944,17 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n     {\n     case 'A':\n       {\n-\taddr_space_t as = nvptx_addr_space_from_address (XEXP (x, 0));\n+\taddr_space_t as = ADDR_SPACE_GENERIC;\n+\trtx sym = XEXP (x, 0);\n+\n+\tif (GET_CODE (sym) == CONST)\n+\t  sym = XEXP (sym, 0);\n+\tif (GET_CODE (sym) == PLUS)\n+\t  sym = XEXP (sym, 0);\n+\n+\tif (GET_CODE (sym) == SYMBOL_REF)\n+\t  as = nvptx_addr_space_from_sym (sym);\n+\n \tfputs (nvptx_section_from_addr_space (as), file);\n       }\n       break;"}]}