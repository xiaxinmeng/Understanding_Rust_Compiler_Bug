{"sha": "e97f62233f326cae658d7f9b42d2f944c616bb91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3ZjYyMjMzZjMyNmNhZTY1OGQ3ZjliNDJkMmY5NDRjNjE2YmI5MQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-07-06T23:53:20Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-07-06T23:53:20Z"}, "message": "make side_effects a vec<rtx>\n\ngcc/ChangeLog:\n\n2016-07-06  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* var-tracking.c (struct adjust_mem_data): Make side_effects a vector.\n\t(adjust_mems): Adjust.\n\t(adjust_insn): Likewise.\n\t(prepare_call_arguments): Likewise.\n\nFrom-SVN: r238066", "tree": {"sha": "e68d2fa0cd8ac40da523a632e2b824de5517cea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e68d2fa0cd8ac40da523a632e2b824de5517cea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97f62233f326cae658d7f9b42d2f944c616bb91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f62233f326cae658d7f9b42d2f944c616bb91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97f62233f326cae658d7f9b42d2f944c616bb91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97f62233f326cae658d7f9b42d2f944c616bb91/comments", "author": null, "committer": null, "parents": [{"sha": "0777c850bf46d987cba16c3b88582f1f34e29481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0777c850bf46d987cba16c3b88582f1f34e29481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0777c850bf46d987cba16c3b88582f1f34e29481"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "48edbc598105a50158b983c065b7be55e5512828", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f62233f326cae658d7f9b42d2f944c616bb91/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f62233f326cae658d7f9b42d2f944c616bb91/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e97f62233f326cae658d7f9b42d2f944c616bb91", "patch": "@@ -1,3 +1,10 @@\n+2016-07-06  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* var-tracking.c (struct adjust_mem_data): Make side_effects a vector.\n+\t(adjust_mems): Adjust.\n+\t(adjust_insn): Likewise.\n+\t(prepare_call_arguments): Likewise.\n+\n 2016-07-06  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* gcse.c (struct ls_expr): Make stores field a vector."}, {"sha": "5d09879bccdb53e983f4561222ab3a00527264f3", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97f62233f326cae658d7f9b42d2f944c616bb91/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97f62233f326cae658d7f9b42d2f944c616bb91/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=e97f62233f326cae658d7f9b42d2f944c616bb91", "patch": "@@ -926,7 +926,7 @@ struct adjust_mem_data\n   bool store;\n   machine_mode mem_mode;\n   HOST_WIDE_INT stack_adjust;\n-  rtx_expr_list *side_effects;\n+  auto_vec<rtx> side_effects;\n };\n \n /* Helper for adjust_mems.  Return true if X is suitable for\n@@ -1072,9 +1072,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       amd->store = false;\n       tem = simplify_replace_fn_rtx (tem, old_rtx, adjust_mems, data);\n       amd->store = store_save;\n-      amd->side_effects = alloc_EXPR_LIST (0,\n-\t\t\t\t\t   gen_rtx_SET (XEXP (loc, 0), tem),\n-\t\t\t\t\t   amd->side_effects);\n+      amd->side_effects.safe_push (gen_rtx_SET (XEXP (loc, 0), tem));\n       return addr;\n     case PRE_MODIFY:\n       addr = XEXP (loc, 1);\n@@ -1088,9 +1086,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       tem = simplify_replace_fn_rtx (XEXP (loc, 1), old_rtx,\n \t\t\t\t     adjust_mems, data);\n       amd->store = store_save;\n-      amd->side_effects = alloc_EXPR_LIST (0,\n-\t\t\t\t\t   gen_rtx_SET (XEXP (loc, 0), tem),\n-\t\t\t\t\t   amd->side_effects);\n+      amd->side_effects.safe_push (gen_rtx_SET (XEXP (loc, 0), tem));\n       return addr;\n     case SUBREG:\n       /* First try without delegitimization of whole MEMs and\n@@ -1184,7 +1180,6 @@ adjust_mem_stores (rtx loc, const_rtx expr, void *data)\n static void\n adjust_insn (basic_block bb, rtx_insn *insn)\n {\n-  struct adjust_mem_data amd;\n   rtx set;\n \n #ifdef HAVE_window_save\n@@ -1213,9 +1208,9 @@ adjust_insn (basic_block bb, rtx_insn *insn)\n     }\n #endif\n \n+  adjust_mem_data amd;\n   amd.mem_mode = VOIDmode;\n   amd.stack_adjust = -VTI (bb)->out.stack_adjust;\n-  amd.side_effects = NULL;\n \n   amd.store = true;\n   note_stores (PATTERN (insn), adjust_mem_stores, &amd);\n@@ -1281,10 +1276,10 @@ adjust_insn (basic_block bb, rtx_insn *insn)\n \tvalidate_change (NULL_RTX, &SET_SRC (set), XEXP (note, 0), true);\n     }\n \n-  if (amd.side_effects)\n+  if (!amd.side_effects.is_empty ())\n     {\n-      rtx *pat, new_pat, s;\n-      int i, oldn, newn;\n+      rtx *pat, new_pat;\n+      int i, oldn;\n \n       pat = &PATTERN (insn);\n       if (GET_CODE (*pat) == COND_EXEC)\n@@ -1293,17 +1288,18 @@ adjust_insn (basic_block bb, rtx_insn *insn)\n \toldn = XVECLEN (*pat, 0);\n       else\n \toldn = 1;\n-      for (s = amd.side_effects, newn = 0; s; newn++)\n-\ts = XEXP (s, 1);\n+      unsigned int newn = amd.side_effects.length ();\n       new_pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (oldn + newn));\n       if (GET_CODE (*pat) == PARALLEL)\n \tfor (i = 0; i < oldn; i++)\n \t  XVECEXP (new_pat, 0, i) = XVECEXP (*pat, 0, i);\n       else\n \tXVECEXP (new_pat, 0, 0) = *pat;\n-      for (s = amd.side_effects, i = oldn; i < oldn + newn; i++, s = XEXP (s, 1))\n-\tXVECEXP (new_pat, 0, i) = XEXP (s, 0);\n-      free_EXPR_LIST_list (&amd.side_effects);\n+\n+      rtx effect;\n+      unsigned int j;\n+      FOR_EACH_VEC_ELT_REVERSE (amd.side_effects, j, effect)\n+\tXVECEXP (new_pat, 0, j + oldn) = effect;\n       validate_change (NULL_RTX, pat, new_pat, true);\n     }\n }\n@@ -6335,11 +6331,10 @@ prepare_call_arguments (basic_block bb, rtx_insn *insn)\n \t\tstruct adjust_mem_data amd;\n \t\tamd.mem_mode = VOIDmode;\n \t\tamd.stack_adjust = -VTI (bb)->out.stack_adjust;\n-\t\tamd.side_effects = NULL;\n \t\tamd.store = true;\n \t\tmem = simplify_replace_fn_rtx (mem, NULL_RTX, adjust_mems,\n \t\t\t\t\t       &amd);\n-\t\tgcc_assert (amd.side_effects == NULL_RTX);\n+\t\tgcc_assert (amd.side_effects.is_empty ());\n \t      }\n \t    val = cselib_lookup (mem, GET_MODE (mem), 0, VOIDmode);\n \t    if (val && cselib_preserved_value_p (val))"}]}