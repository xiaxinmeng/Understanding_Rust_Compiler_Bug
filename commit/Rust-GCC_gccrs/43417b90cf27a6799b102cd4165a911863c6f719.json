{"sha": "43417b90cf27a6799b102cd4165a911863c6f719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0MTdiOTBjZjI3YTY3OTliMTAyY2Q0MTY1YTkxMTg2M2M2ZjcxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T16:10:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T16:10:53Z"}, "message": "[multiple changes]\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* exp_ch4.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* opt.adb (SPARK_Mode_Config): Handled like other config flags\n\t* opt.ads (SPARK_Mode_Type): Moved here from types (renamed from\n\tSPARK_Mode_Id) (SPARK_Mode_Type): Add pragma Ordered, remove\n\tSPARK_ from names (SPARK_Mode): New flag (SPARK_Mode_Config):\n\tNew flag (Config_Switches_Type): Add SPARK_Mode field\n\t* sem.adb: Minor code reorganization (remove unnecessary with)\n\t* sem.ads (Scope_Stack_Entry): Add Save_SPARK_Mode field\n\t* sem_aggr.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* sem_attr.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* sem_ch3.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* sem_ch4.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Reset SPARK_Mode\n\tfrom spec if needed\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Reset SPARK_Mode\n\tfrom spec if needed\n\t* sem_ch8.adb (Push_Scope): Save SPARK_Mode (Pop_Scope):\n\tRestore SPARK_Mode\n\t* sem_elab.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* sem_prag.adb (Get_SPARK_Mode_From_Pragma): New function\n\t(Get_SPARK_Mode_Id): Removed (Get_SPARK_Mode_Type): New name\n\tof Get_SPARK_Mode_Id\n\t* sem_prag.ads (Get_SPARK_Mode_From_Pragma): New function\n\t* sem_res.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* sem_util.adb: Check SPARK_Mode instead of GNATProve_Mode for\n\tconverting warnings on inevitable exceptions to errors.\n\t* types.ads (SPARK_Mode_Id): Moved to opt.ads and renamed\n\tSPARK_Mode_Type\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: Add semantic information to rewritten type\n\treference.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_N_Assignment_Statement): If both sides\n\tare of a type with unknown discriminants, convert both to the\n\tunderlying view of the type, so that the proper constraint check\n\tcan be applied to the right-hand side.\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.adb (Copy_Node): Fix failure to copy last component\n\t(Exchange_Entities): Fix failure to exchange last entity\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb: Code clean up.\n\nFrom-SVN: r206844", "tree": {"sha": "de2038d9772868c26e4ecc32ab0ca7550e3d1447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de2038d9772868c26e4ecc32ab0ca7550e3d1447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43417b90cf27a6799b102cd4165a911863c6f719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43417b90cf27a6799b102cd4165a911863c6f719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43417b90cf27a6799b102cd4165a911863c6f719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43417b90cf27a6799b102cd4165a911863c6f719/comments", "author": null, "committer": null, "parents": [{"sha": "e4deba8e2fc2e9566ff1bc5c778efc45b8b06e3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4deba8e2fc2e9566ff1bc5c778efc45b8b06e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4deba8e2fc2e9566ff1bc5c778efc45b8b06e3b"}], "stats": {"total": 326, "additions": 215, "deletions": 111}, "files": [{"sha": "0ae1c7adeaaf5ddf8877478dc13a7149409fe8c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -1,3 +1,64 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* exp_ch4.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* opt.adb (SPARK_Mode_Config): Handled like other config flags\n+\t* opt.ads (SPARK_Mode_Type): Moved here from types (renamed from\n+\tSPARK_Mode_Id) (SPARK_Mode_Type): Add pragma Ordered, remove\n+\tSPARK_ from names (SPARK_Mode): New flag (SPARK_Mode_Config):\n+\tNew flag (Config_Switches_Type): Add SPARK_Mode field\n+\t* sem.adb: Minor code reorganization (remove unnecessary with)\n+\t* sem.ads (Scope_Stack_Entry): Add Save_SPARK_Mode field\n+\t* sem_aggr.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* sem_attr.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* sem_ch3.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* sem_ch4.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Reset SPARK_Mode\n+\tfrom spec if needed\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Reset SPARK_Mode\n+\tfrom spec if needed\n+\t* sem_ch8.adb (Push_Scope): Save SPARK_Mode (Pop_Scope):\n+\tRestore SPARK_Mode\n+\t* sem_elab.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* sem_prag.adb (Get_SPARK_Mode_From_Pragma): New function\n+\t(Get_SPARK_Mode_Id): Removed (Get_SPARK_Mode_Type): New name\n+\tof Get_SPARK_Mode_Id\n+\t* sem_prag.ads (Get_SPARK_Mode_From_Pragma): New function\n+\t* sem_res.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* sem_util.adb: Check SPARK_Mode instead of GNATProve_Mode for\n+\tconverting warnings on inevitable exceptions to errors.\n+\t* types.ads (SPARK_Mode_Id): Moved to opt.ads and renamed\n+\tSPARK_Mode_Type\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: Add semantic information to rewritten type\n+\treference.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): If both sides\n+\tare of a type with unknown discriminants, convert both to the\n+\tunderlying view of the type, so that the proper constraint check\n+\tcan be applied to the right-hand side.\n+\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* atree.adb (Copy_Node): Fix failure to copy last component\n+\t(Exchange_Entities): Fix failure to exchange last entity\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb: Code clean up.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi, sem_ch4.adb: Minor reformatting."}, {"sha": "e7d4b20741f93edec7576f8caab559dd70d47071", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -733,6 +733,7 @@ package body Atree is\n          Nodes.Table (Destination + 2) := Nodes.Table (Source + 2);\n          Nodes.Table (Destination + 3) := Nodes.Table (Source + 3);\n          Nodes.Table (Destination + 4) := Nodes.Table (Source + 4);\n+         Nodes.Table (Destination + 5) := Nodes.Table (Source + 5);\n \n       else\n          pragma Assert (not Has_Extension (Source));\n@@ -1105,19 +1106,27 @@ package body Atree is\n       Temp_Ent := Nodes.Table (E1);\n       Nodes.Table (E1) := Nodes.Table (E2);\n       Nodes.Table (E2) := Temp_Ent;\n+\n       Temp_Ent := Nodes.Table (E1 + 1);\n       Nodes.Table (E1 + 1) := Nodes.Table (E2 + 1);\n       Nodes.Table (E2 + 1) := Temp_Ent;\n+\n       Temp_Ent := Nodes.Table (E1 + 2);\n       Nodes.Table (E1 + 2) := Nodes.Table (E2 + 2);\n       Nodes.Table (E2 + 2) := Temp_Ent;\n+\n       Temp_Ent := Nodes.Table (E1 + 3);\n       Nodes.Table (E1 + 3) := Nodes.Table (E2 + 3);\n       Nodes.Table (E2 + 3) := Temp_Ent;\n+\n       Temp_Ent := Nodes.Table (E1 + 4);\n       Nodes.Table (E1 + 4) := Nodes.Table (E2 + 4);\n       Nodes.Table (E2 + 4) := Temp_Ent;\n \n+      Temp_Ent := Nodes.Table (E1 + 5);\n+      Nodes.Table (E1 + 5) := Nodes.Table (E2 + 5);\n+      Nodes.Table (E2 + 5) := Temp_Ent;\n+\n       --  That exchange exchanged the parent pointers as well, which is what\n       --  we want, but we need to patch up the defining identifier pointers\n       --  in the parent nodes (the child pointers) to match this switch"}, {"sha": "496c3a23329cdc69023a3ff9a13a074a8f2d8604", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -3697,7 +3697,7 @@ package body Checks is\n       --  Here we have the optimizable case, warn if not short-circuited\n \n       if K = N_Op_And or else K = N_Op_Or then\n-         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_Warn := SPARK_Mode /= On;\n \n          case Check is\n             when Access_Check =>"}, {"sha": "7d1ec81446e18d28511ba33a274dc86b83630c17", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -9654,7 +9654,7 @@ package body Exp_Ch4 is\n \n       procedure Raise_Accessibility_Error is\n       begin\n-         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_Warn := SPARK_Mode /= On;\n          Rewrite (N,\n            Make_Raise_Program_Error (Sloc (N),\n              Reason => PE_Accessibility_Check_Failed));"}, {"sha": "1fb6dc7ee1c81c81f5d238a56d1928e0650b636f", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -1850,12 +1850,14 @@ package body Exp_Ch5 is\n          --  If the Lhs has a private type with unknown discriminants, it\n          --  may have a full view with discriminants, but those are nameable\n          --  only in the underlying type, so convert the Rhs to it before\n-         --  potential checking.\n+         --  potential checking. Convert Lhs as well, otherwise the actual\n+         --  subtype might not be constructible.\n \n       elsif Has_Unknown_Discriminants (Base_Type (Etype (Lhs)))\n         and then Has_Discriminants (Typ)\n       then\n          Rewrite (Rhs, OK_Convert_To (Base_Type (Typ), Rhs));\n+         Rewrite (Lhs, OK_Convert_To (Base_Type (Typ), Lhs));\n          Apply_Discriminant_Check (Rhs, Typ, Lhs);\n \n       --  In the access type case, we need the same discriminant check, and"}, {"sha": "ce23faacaab6051c87c87a7a9094de6c8d2158b3", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -63,6 +63,7 @@ package body Opt is\n       Persistent_BSS_Mode_Config            := Persistent_BSS_Mode;\n       Polling_Required_Config               := Polling_Required;\n       Short_Descriptors_Config              := Short_Descriptors;\n+      SPARK_Mode_Config                     := SPARK_Mode;\n       Use_VADS_Size_Config                  := Use_VADS_Size;\n \n       --  Reset the indication that Optimize_Alignment was set locally, since\n@@ -98,6 +99,7 @@ package body Opt is\n       Persistent_BSS_Mode            := Save.Persistent_BSS_Mode;\n       Polling_Required               := Save.Polling_Required;\n       Short_Descriptors              := Save.Short_Descriptors;\n+      SPARK_Mode                     := Save.SPARK_Mode;\n       Use_VADS_Size                  := Save.Use_VADS_Size;\n \n       --  Update consistently the value of Init_Or_Norm_Scalars. The value of\n@@ -134,6 +136,7 @@ package body Opt is\n       Save.Persistent_BSS_Mode            := Persistent_BSS_Mode;\n       Save.Polling_Required               := Polling_Required;\n       Save.Short_Descriptors              := Short_Descriptors;\n+      Save.SPARK_Mode                     := SPARK_Mode;\n       Save.Use_VADS_Size                  := Use_VADS_Size;\n    end Save_Opt_Config_Switches;\n \n@@ -164,6 +167,7 @@ package body Opt is\n          Persistent_BSS_Mode         := False;\n          Use_VADS_Size               := False;\n          Optimize_Alignment_Local    := True;\n+         SPARK_Mode                  := Auto;\n \n          --  For an internal unit, assertions/debug pragmas are off unless this\n          --  is the main unit and they were explicitly enabled. We also make\n@@ -198,6 +202,7 @@ package body Opt is\n          Optimize_Alignment          := Optimize_Alignment_Config;\n          Optimize_Alignment_Local    := False;\n          Persistent_BSS_Mode         := Persistent_BSS_Mode_Config;\n+         SPARK_Mode                  := SPARK_Mode_Config;\n          Use_VADS_Size               := Use_VADS_Size_Config;\n \n          --  Update consistently the value of Init_Or_Norm_Scalars. The value"}, {"sha": "6b291ac2f7cab28da3f098d3c9624db3142c2902", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -1,5 +1,5 @@\n ------------------------------------------------------------------------------\n---                                                                          --\n+--                                SPARK                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                                  O P T                                   --\n@@ -1264,6 +1264,14 @@ package Opt is\n    --  GNAT\n    --  Set True if a pragma Short_Descriptors applies to the current unit.\n \n+   type SPARK_Mode_Type is (None, Off, Auto, On);\n+   pragma Ordered (SPARK_Mode_Type);\n+   --  Possible legal modes that can be set by aspect/pragma SPARK_Mode\n+\n+   SPARK_Mode : SPARK_Mode_Type := None;\n+   --  GNAT\n+   --  Current SPARK mode setting\n+\n    Special_Exception_Package_Used : Boolean := False;\n    --  GNAT\n    --  Set to True if either of the unit GNAT.Most_Recent_Exception or\n@@ -1895,6 +1903,9 @@ package Opt is\n    --  This flag is used to set the initial value for Short_Descriptors at the\n    --  start of analyzing each unit.\n \n+   SPARK_Mode_Config : SPARK_Mode_Type := None;\n+   --  The setting of SPARK_Mode from configuration pragmas\n+\n    Use_VADS_Size_Config : Boolean;\n    --  GNAT\n    --  This is the value of the configuration switch that controls the use of\n@@ -2001,10 +2012,6 @@ package Opt is\n    -- Modes for Formal Verification --\n    -----------------------------------\n \n-   Global_SPARK_Mode : SPARK_Mode_Id := None;\n-   --  The mode applicable to the whole compilation. The global mode can be set\n-   --  in a configuration file such as gnat.adc.\n-\n    GNATprove_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification for those parts\n    --  of the input code that belong to the SPARK 2014 subset of Ada. Set True\n@@ -2043,6 +2050,7 @@ private\n       Persistent_BSS_Mode            : Boolean;\n       Polling_Required               : Boolean;\n       Short_Descriptors              : Boolean;\n+      SPARK_Mode                     : SPARK_Mode_Type;\n       Use_VADS_Size                  : Boolean;\n    end record;\n "}, {"sha": "3e66a0e05638ce241602a346c621c3035ce1da88", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -32,7 +32,6 @@ with Fname;    use Fname;\n with Lib;      use Lib;\n with Lib.Load; use Lib.Load;\n with Nlists;   use Nlists;\n-with Opt;      use Opt;\n with Output;   use Output;\n with Restrict; use Restrict;\n with Sem_Attr; use Sem_Attr;"}, {"sha": "c6b11dbca69874ea29e81e1f7d407c3db51ffd24", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -203,6 +203,7 @@\n \n with Alloc;\n with Einfo;  use Einfo;\n+with Opt;    use Opt;\n with Table;\n with Types;  use Types;\n \n@@ -474,6 +475,9 @@ package Sem is\n       Save_Default_Storage_Pool : Node_Id;\n       --  Save contents of Default_Storage_Pool on entry to restore on exit\n \n+      Save_SPARK_Mode : SPARK_Mode_Type;\n+      --  Setting of SPARK_Mode on entry to restore on exit\n+\n       Is_Transient : Boolean;\n       --  Marks transient scopes (see Exp_Ch7 body for details)\n "}, {"sha": "03930f5e3cffc8e7e9b6811967252256e445eaa1", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -597,7 +597,7 @@ package body Sem_Aggr is\n \n                elsif Expr_Value (This_Low) /= Expr_Value (Aggr_Low (Dim)) then\n                   Set_Raises_Constraint_Error (N);\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_N (\"sub-aggregate low bound mismatch<<\", N);\n                   Error_Msg_N (\"\\Constraint_Error [<<\", N);\n                end if;\n@@ -611,7 +611,7 @@ package body Sem_Aggr is\n                  Expr_Value (This_High) /= Expr_Value (Aggr_High (Dim))\n                then\n                   Set_Raises_Constraint_Error (N);\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_N (\"sub-aggregate high bound mismatch<<\", N);\n                   Error_Msg_N (\"\\Constraint_Error [<<\", N);\n                end if;\n@@ -1456,7 +1456,7 @@ package body Sem_Aggr is\n \n          if OK_BH and then OK_AH and then Val_BH < Val_AH then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n             Error_Msg_N (\"upper bound out of range<<\", AH);\n             Error_Msg_N (\"\\Constraint_Error [<<\", AH);\n \n@@ -1500,14 +1500,14 @@ package body Sem_Aggr is\n \n          if OK_L and then Val_L > Val_AL then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n             Error_Msg_N (\"lower bound of aggregate out of range<<\", N);\n             Error_Msg_N (\"\\Constraint_Error [<<\", N);\n          end if;\n \n          if OK_H and then Val_H < Val_AH then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n             Error_Msg_N (\"upper bound of aggregate out of range<<\", N);\n             Error_Msg_N (\"\\Constraint_Error [<<\", N);\n          end if;\n@@ -1548,7 +1548,7 @@ package body Sem_Aggr is\n \n          if Range_Len < Len then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n             Error_Msg_N (\"too many elements<<\", N);\n             Error_Msg_N (\"\\Constraint_Error [<<\", N);\n          end if;"}, {"sha": "1b585cb61facb4fd570da2ed9fe63b0d6060c0d8", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -5396,7 +5396,7 @@ package body Sem_Attr is\n                                            Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Msg_Name_1 := Aname;\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_N (\"cannot use % attribute for type with simple \"\n                                & \"storage pool<<\", N);\n                   Error_Msg_N (\"\\Program_Error [<<\", N);\n@@ -9311,7 +9311,7 @@ package body Sem_Attr is\n          --  know will fail, so generate an appropriate warning.\n \n          if In_Instance_Body then\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n             Error_Msg_F\n               (\"non-local pointer cannot point to local object<<\", P);\n             Error_Msg_F (\"\\Program_Error [<<\", P);\n@@ -9792,7 +9792,7 @@ package body Sem_Attr is\n                   --  know will fail, so generate an appropriate warning.\n \n                   if In_Instance_Body then\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Error_Msg_F\n                        (\"non-local pointer cannot point to local object<<\", P);\n                      Error_Msg_F (\"\\Program_Error [<<\", P);"}, {"sha": "12f53d3eddffd28e719c01817155a9a6f5bb42a5", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -13061,13 +13061,13 @@ package body Sem_Ch12 is\n                --  ASIS tree traversal, so we recover the original entity to\n                --  expose the renaming. Take into account that the context may\n                --  be a nested generic and that the original node may itself\n-               --  have an associated node.\n+               --  have an associated node that had better be an entity.\n \n                if Ekind (E) = E_Package\n                  and then Nkind (Parent (N)) = N_Expanded_Name\n                  and then Present (Original_Node (N2))\n+                 and then Is_Entity_Name (Original_Node (N2))\n                  and then Present (Entity (Original_Node (N2)))\n-                 and then Is_Entity_Name (Entity (Original_Node (N2)))\n                then\n                   if Is_Global (Entity (Original_Node (N2))) then\n                      N2 := Original_Node (N2);"}, {"sha": "630892a4a9ffc791905787e7c27b05d2f00f4bd8", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -5939,6 +5939,20 @@ package body Sem_Ch13 is\n \n          procedure Replace_Type_Reference (N : Node_Id) is\n          begin\n+\n+            --  Add semantic information to node to be rewritten, for ASIS\n+            --  navigation needs.\n+\n+            if Nkind (N) = N_Identifier then\n+               Set_Entity (N, T);\n+               Set_Etype  (N, T);\n+\n+            elsif Nkind (N) = N_Selected_Component then\n+               Analyze (Prefix (N));\n+               Set_Entity (Selector_Name (N), T);\n+               Set_Etype  (Selector_Name (N), T);\n+            end if;\n+\n             --  Invariant'Class, replace with T'Class (obj)\n \n             if Class_Present (Ritem) then"}, {"sha": "ffc233d28be92a1c9a11a05956dfbb61d4989be9", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -3797,7 +3797,7 @@ package body Sem_Ch3 is\n                     and then Present (Get_Attribute_Definition_Clause\n                                         (E, Attribute_Address))\n                   then\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Error_Msg_N\n                        (\"more than one task with same entry address<<\", N);\n                      Error_Msg_N (\"\\Program_Error [<<\", N);"}, {"sha": "867406ed6258209b10de2d446c1b20db1e2afb81", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -4651,7 +4651,7 @@ package body Sem_Ch4 is\n                      --  In SPARK mode, this is made into an error to simplify\n                      --  the processing of the formal verification backend.\n \n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"component not present in }<<\",\n                         CE_Discriminant_Check_Failed,"}, {"sha": "1120c6033fe0cfd5af1ce458aded42228cc72805", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -983,7 +983,7 @@ package body Sem_Ch6 is\n                    Reason => PE_Accessibility_Check_Failed));\n                Analyze (N);\n \n-               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_Warn := SPARK_Mode /= On;\n                Error_Msg_N (\"cannot return a local value by reference<<\", N);\n                Error_Msg_NE (\"\\& [<<\", N, Standard_Program_Error);\n             end if;\n@@ -2987,6 +2987,13 @@ package body Sem_Ch6 is\n \n             Push_Scope (Spec_Id);\n \n+            --  Set SPARK_Mode from spec if spec had a SPARK_Mode pragma\n+\n+            if Present (SPARK_Mode_Pragmas (Spec_Id)) then\n+               SPARK_Mode :=\n+                 Get_SPARK_Mode_From_Pragma (SPARK_Mode_Pragmas (Spec_Id));\n+            end if;\n+\n             --  Make sure that the subprogram is immediately visible. For\n             --  child units that have no separate spec this is indispensable.\n             --  Otherwise it is safe albeit redundant.\n@@ -7223,7 +7230,7 @@ package body Sem_Ch6 is\n \n                --  In GNATprove mode, it is an error to have a missing return\n \n-               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_Warn := SPARK_Mode /= On;\n                Error_Msg_N\n                  (\"RETURN statement missing following this statement<<!\",\n                   Last_Stm);\n@@ -7252,7 +7259,7 @@ package body Sem_Ch6 is\n                      & \"will raise Program_Error??\", Last_Stm);\n                end if;\n \n-               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_Warn := SPARK_Mode /= On;\n                Error_Msg_NE\n                  (\"\\procedure & is marked as No_Return<<!\", Last_Stm, Proc);\n             end if;"}, {"sha": "30704ff877ce8af2c044ceb47d4267781b4d4e4d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -56,6 +56,7 @@ with Sem_Ch12; use Sem_Ch12;\n with Sem_Ch13; use Sem_Ch13;\n with Sem_Disp; use Sem_Disp;\n with Sem_Eval; use Sem_Eval;\n+with Sem_Prag; use Sem_Prag;\n with Sem_Util; use Sem_Util;\n with Sem_Warn; use Sem_Warn;\n with Snames;   use Snames;\n@@ -345,6 +346,13 @@ package body Sem_Ch7 is\n \n       Push_Scope (Spec_Id);\n \n+      --  Set SPARK_Mode from spec if package spec had SPARK_Mode pragma\n+\n+      if Present (SPARK_Mode_Pragmas (Spec_Id)) then\n+         SPARK_Mode :=\n+           Get_SPARK_Mode_From_Pragma (SPARK_Mode_Pragmas (Spec_Id));\n+      end if;\n+\n       Set_Categorization_From_Pragmas (N);\n \n       Install_Visible_Declarations (Spec_Id);"}, {"sha": "33c3dbf7aac17f4eb1655401a7716d3536715da2", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -7395,6 +7395,7 @@ package body Sem_Ch8 is\n       Local_Suppress_Stack_Top := SST.Save_Local_Suppress_Stack_Top;\n       Check_Policy_List        := SST.Save_Check_Policy_List;\n       Default_Pool             := SST.Save_Default_Storage_Pool;\n+      SPARK_Mode               := SST.Save_SPARK_Mode;\n \n       if Debug_Flag_W then\n          Write_Str (\"<-- exiting scope: \");\n@@ -7468,6 +7469,7 @@ package body Sem_Ch8 is\n          SST.Save_Local_Suppress_Stack_Top := Local_Suppress_Stack_Top;\n          SST.Save_Check_Policy_List        := Check_Policy_List;\n          SST.Save_Default_Storage_Pool     := Default_Pool;\n+         SST.Save_SPARK_Mode               := SPARK_Mode;\n \n          if Scope_Stack.Last > Scope_Stack.First then\n             SST.Component_Alignment_Default := Scope_Stack.Table"}, {"sha": "4e6436194c800e1905652cc9a270d78fda79228c", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -1138,7 +1138,7 @@ package body Sem_Elab is\n \n       --  Here we definitely have a bad instantiation\n \n-      Error_Msg_Warn := not GNATprove_Mode;\n+      Error_Msg_Warn := SPARK_Mode /= On;\n       Error_Msg_NE (\"cannot instantiate& before body seen<<\", N, Ent);\n \n       if Present (Instance_Spec (N)) then\n@@ -2179,7 +2179,7 @@ package body Sem_Elab is\n       --  level, and the ABE is bound to occur.\n \n       if Elab_Call.Last = 0 then\n-         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_Warn := SPARK_Mode /= On;\n \n          if Inst_Case then\n             Error_Msg_NE\n@@ -2263,7 +2263,7 @@ package body Sem_Elab is\n            and then (Nkind (Original_Node (N)) /= N_Function_Call\n                       or else not In_Assertion_Expression (Original_Node (N)))\n          then\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n \n             if Inst_Case then\n                Error_Msg_NE\n@@ -2370,7 +2370,7 @@ package body Sem_Elab is\n                       or else\n                     Scope (Proc) = Scope (Defining_Identifier (Decl)))\n                then\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_N\n                     (\"task will be activated before elaboration of its body<<\",\n                       Decl);"}, {"sha": "880a829853e83ab5604539de9adc1a1501cb85ee", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 53, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -47,7 +47,6 @@ with Lib.Xref; use Lib.Xref;\n with Namet.Sp; use Namet.Sp;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n-with Opt;      use Opt;\n with Output;   use Output;\n with Par_SCO;  use Par_SCO;\n with Restrict; use Restrict;\n@@ -253,10 +252,10 @@ package body Sem_Prag is\n    --  original one, following the renaming chain) is returned. Otherwise the\n    --  entity is returned unchanged. Should be in Einfo???\n \n-   function Get_SPARK_Mode_Id (N : Name_Id) return SPARK_Mode_Id;\n+   function Get_SPARK_Mode_Type (N : Name_Id) return SPARK_Mode_Type;\n    --  Subsidiary to the analysis of pragma SPARK_Mode as well as subprogram\n-   --  Get_SPARK_Mode_Id. Convert a name into a corresponding value of type\n-   --  SPARK_Mode_Id.\n+   --  Get_SPARK_Mode_Type. Convert a name into a corresponding value of type\n+   --  SPARK_Mode_Type.\n \n    function Is_Part_Of\n      (State    : Entity_Id;\n@@ -18065,8 +18064,7 @@ package body Sem_Prag is\n                New_Id       : Entity_Id);\n             --  Verify the \"monotonicity\" of SPARK modes between two entities.\n             --  The order of modes is Off < Auto < On. Governing_Id establishes\n-            --  the mode of the context. New_Id attempts to redefine the known\n-            --  mode.\n+            --  the mode of the context. New_Id is the desired new mode.\n \n             procedure Check_Pragma_Conformance\n               (Governing_Mode : Node_Id;\n@@ -18076,8 +18074,8 @@ package body Sem_Prag is\n             --  mode dictated by the context. New_Mode attempts to redefine the\n             --  governing mode.\n \n-            function Get_SPARK_Mode_Name (Id : SPARK_Mode_Id) return Name_Id;\n-            --  Convert a value of type SPARK_Mode_Id into a corresponding name\n+            function Get_SPARK_Mode_Name (Id : SPARK_Mode_Type) return Name_Id;\n+            --  Convert a value of type SPARK_Mode_Type to corresponding name\n \n             ------------------\n             -- Chain_Pragma --\n@@ -18086,22 +18084,19 @@ package body Sem_Prag is\n             procedure Chain_Pragma (Context : Entity_Id; Prag : Node_Id) is\n                Existing_Prag : constant Node_Id :=\n                                  SPARK_Mode_Pragmas (Context);\n-            begin\n-               --  The context does not have a prior mode defined\n-\n-               if No (Existing_Prag) then\n-                  Set_SPARK_Mode_Pragmas (Context, Prag);\n \n-               --  Chain the new mode on the list of SPARK_Mode pragmas. Verify\n-               --  the consistency between the existing mode and the new one.\n-\n-               else\n-                  Set_Next_Pragma (Existing_Prag, Prag);\n+            begin\n+               --  Chain existing pragmas to this one, checking consistency\n \n+               if Present (Existing_Prag) then\n                   Check_Pragma_Conformance\n                     (Governing_Mode => Existing_Prag,\n                      New_Mode       => Prag);\n+\n+                  Set_Next_Pragma (Prag, Existing_Prag);\n                end if;\n+\n+               Set_SPARK_Mode_Pragmas (Context, Prag);\n             end Chain_Pragma;\n \n             ----------------------------------\n@@ -18150,9 +18145,10 @@ package body Sem_Prag is\n               (Governing_Mode : Node_Id;\n                New_Mode       : Node_Id)\n             is\n-               Gov_M : constant SPARK_Mode_Id :=\n-                         Get_SPARK_Mode_Id (Governing_Mode);\n-               New_M : constant SPARK_Mode_Id := Get_SPARK_Mode_Id (New_Mode);\n+               Gov_M : constant SPARK_Mode_Type :=\n+                         Get_SPARK_Mode_From_Pragma (Governing_Mode);\n+               New_M : constant SPARK_Mode_Type :=\n+                         Get_SPARK_Mode_From_Pragma (New_Mode);\n \n             begin\n                --  The new mode is less restrictive than the established mode\n@@ -18173,13 +18169,15 @@ package body Sem_Prag is\n             -- Get_SPARK_Mode_Name --\n             -------------------------\n \n-            function Get_SPARK_Mode_Name (Id : SPARK_Mode_Id) return Name_Id is\n+            function Get_SPARK_Mode_Name\n+              (Id : SPARK_Mode_Type) return Name_Id\n+            is\n             begin\n-               if Id = SPARK_On then\n+               if Id = On then\n                   return Name_On;\n-               elsif Id = SPARK_Off then\n+               elsif Id = Off then\n                   return Name_Off;\n-               elsif Id = SPARK_Auto then\n+               elsif Id = Auto then\n                   return Name_Auto;\n \n                --  Mode \"None\" should never be used in error message generation\n@@ -18194,51 +18192,48 @@ package body Sem_Prag is\n             Body_Id : Entity_Id;\n             Context : Node_Id;\n             Mode    : Name_Id;\n-            Mode_Id : SPARK_Mode_Id;\n+            Mode_Id : SPARK_Mode_Type;\n             Spec_Id : Entity_Id;\n             Stmt    : Node_Id;\n \n-         --  Start of processing for SPARK_Mode\n+         --  Start of processing for SPARK_Mod\n \n          begin\n             GNAT_Pragma;\n             Check_No_Identifiers;\n             Check_At_Most_N_Arguments (1);\n \n-            --  Check the legality of the mode\n+            --  Check the legality of the mode (no argument = ON)\n \n             if Arg_Count = 1 then\n                Check_Arg_Is_One_Of (Arg1, Name_On, Name_Off, Name_Auto);\n                Mode := Chars (Get_Pragma_Arg (Arg1));\n-\n-            --  A SPARK_Mode without an argument defaults to \"On\"\n-\n             else\n                Mode := Name_On;\n             end if;\n \n-            Mode_Id := Get_SPARK_Mode_Id (Mode);\n+            Mode_Id := Get_SPARK_Mode_Type (Mode);\n             Context := Parent (N);\n+            SPARK_Mode := Mode_Id;\n \n             --  The pragma appears in a configuration file\n \n             if No (Context) then\n                Check_Valid_Configuration_Pragma;\n-               Global_SPARK_Mode := Mode_Id;\n \n             --  When the pragma is placed before the declaration of a unit, it\n             --  configures the whole unit.\n \n             elsif Nkind (Context) = N_Compilation_Unit then\n                Check_Valid_Configuration_Pragma;\n-               Set_SPARK_Mode_Pragma (Current_Sem_Unit, N);\n+                  Set_SPARK_Mode_Pragma (Current_Sem_Unit, N);\n \n             --  The pragma applies to a [library unit] subprogram or package\n \n             else\n                --  Mode \"Auto\" cannot be used in nested subprograms or packages\n \n-               if Mode_Id = SPARK_Auto then\n+               if Mode_Id = Auto then\n                   Error_Pragma_Arg\n                     (\"mode `Auto` can only apply to the configuration variant \"\n                      & \"of pragma %\", Arg1);\n@@ -18256,8 +18251,7 @@ package body Sem_Prag is\n                      if Pragma_Name (Stmt) = Pname then\n                         Error_Msg_Name_1 := Pname;\n                         Error_Msg_Sloc   := Sloc (Stmt);\n-                        Error_Msg_N\n-                          (\"pragma % duplicates pragma declared #\", N);\n+                        Error_Msg_N (\"pragma% duplicates pragma declared#\", N);\n                      end if;\n \n                   --  Skip internally generated code\n@@ -18322,8 +18316,7 @@ package body Sem_Prag is\n                   Spec_Id := Defining_Unit_Name (Context);\n                   Chain_Pragma (Spec_Id, N);\n \n-               --  The pragma is immediately within a package or subprogram\n-               --  body.\n+               --  Pragma is immediately within a package or subprogram body\n \n                --    function F ... is\n                --       pragma SPARK_Mode;\n@@ -22845,30 +22838,30 @@ package body Sem_Prag is\n    end Get_Base_Subprogram;\n \n    -----------------------\n-   -- Get_SPARK_Mode_Id --\n+   -- Get_SPARK_Mode_Type --\n    -----------------------\n \n-   function Get_SPARK_Mode_Id (N : Name_Id) return SPARK_Mode_Id is\n+   function Get_SPARK_Mode_Type (N : Name_Id) return SPARK_Mode_Type is\n    begin\n       if N = Name_On then\n-         return SPARK_On;\n+         return On;\n       elsif N = Name_Off then\n-         return SPARK_Off;\n+         return Off;\n       elsif N = Name_Auto then\n-         return SPARK_Auto;\n+         return Auto;\n \n       --  Any other argument is erroneous\n \n       else\n          raise Program_Error;\n       end if;\n-   end Get_SPARK_Mode_Id;\n+   end Get_SPARK_Mode_Type;\n \n-   -----------------------\n-   -- Get_SPARK_Mode_Id --\n-   -----------------------\n+   --------------------------------\n+   -- Get_SPARK_Mode_From_Pragma --\n+   --------------------------------\n \n-   function Get_SPARK_Mode_Id (N : Node_Id) return SPARK_Mode_Id is\n+   function Get_SPARK_Mode_From_Pragma (N : Node_Id) return SPARK_Mode_Type is\n       Args : List_Id;\n       Mode : Node_Id;\n \n@@ -22880,14 +22873,14 @@ package body Sem_Prag is\n \n       if Present (Args) then\n          Mode := First (Pragma_Argument_Associations (N));\n-         return Get_SPARK_Mode_Id (Chars (Get_Pragma_Arg (Mode)));\n+         return Get_SPARK_Mode_Type (Chars (Get_Pragma_Arg (Mode)));\n \n-      --  When SPARK_Mode appears without an argument, the default is ON\n+      --  If SPARK_Mode pragma has no argument, default is ON\n \n       else\n-         return SPARK_On;\n+         return On;\n       end if;\n-   end Get_SPARK_Mode_Id;\n+   end Get_SPARK_Mode_From_Pragma;\n \n    ----------------\n    -- Initialize --"}, {"sha": "8dcee63b6356a64aa223f76b1a2e1850d113ff2f", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -27,6 +27,7 @@\n --  (logically this processing belongs in chapter 4)\n \n with Namet;  use Namet;\n+with Opt;    use Opt;\n with Snames; use Snames;\n with Types;  use Types;\n \n@@ -130,8 +131,8 @@ package Sem_Prag is\n    --  True have their analysis delayed until after the main program is parsed\n    --  and analyzed.\n \n-   function Get_SPARK_Mode_Id (N : Node_Id) return SPARK_Mode_Id;\n-   --  Given a pragma SPARK_Mode node, return the corresponding mode id\n+   function Get_SPARK_Mode_From_Pragma (N : Node_Id) return SPARK_Mode_Type;\n+   --  Given a pragma SPARK_Mode node, return corresponding mode id\n \n    procedure Initialize;\n    --  Initializes data structures used for pragma processing. Must be called"}, {"sha": "3919dc5cce565141e5f53d4facd87807ff464131", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -769,7 +769,7 @@ package body Sem_Res is\n               and then Nkind (Parent (P)) = N_Subprogram_Body\n               and then Is_Empty_List (Declarations (Parent (P)))\n             then\n-               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_Warn := SPARK_Mode /= On;\n                Error_Msg_N (\"!infinite recursion<<\", N);\n                Error_Msg_N (\"\\!Storage_Error [<<\", N);\n                Insert_Action (N,\n@@ -868,7 +868,7 @@ package body Sem_Res is\n          end if;\n       end loop;\n \n-      Error_Msg_Warn := not GNATprove_Mode;\n+      Error_Msg_Warn := SPARK_Mode /= On;\n       Error_Msg_N (\"!possible infinite recursion<<\", N);\n       Error_Msg_N (\"\\!??Storage_Error ]<<\", N);\n \n@@ -4555,7 +4555,7 @@ package body Sem_Res is\n                  Deepest_Type_Access_Level (Typ)\n             then\n                if In_Instance_Body then\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_N\n                     (\"type in allocator has deeper level than \"\n                      & \"designated class-wide type<<\", E);\n@@ -4666,7 +4666,7 @@ package body Sem_Res is\n         and then Ekind (Current_Scope) = E_Package\n         and then not In_Package_Body (Current_Scope)\n       then\n-         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_Warn := SPARK_Mode /= On;\n          Error_Msg_N (\"cannot activate task before body seen<<\", N);\n          Error_Msg_N (\"\\Program_Error [<<\", N);\n       end if;\n@@ -4680,7 +4680,7 @@ package body Sem_Res is\n         and then Present (Subpool_Handle_Name (N))\n         and then Has_Task (Desig_T)\n       then\n-         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_Warn := SPARK_Mode /= On;\n          Error_Msg_N (\"cannot allocate task on subpool<<\", N);\n          Error_Msg_N (\"\\Program_Error [<<\", N);\n \n@@ -5396,7 +5396,7 @@ package body Sem_Res is\n                            and then Is_Entry_Barrier_Function (P))\n                then\n                   Rtype := Etype (N);\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Error_Msg_NE\n                     (\"& should not be used in entry body (RM C.7(17))<<\",\n                      N, Nam);\n@@ -5697,7 +5697,7 @@ package body Sem_Res is\n                      --  Here warning is to be issued\n \n                      Set_Has_Recursive_Call (Nam);\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Error_Msg_N (\"possible infinite recursion<<!\", N);\n                      Error_Msg_N (\"\\Storage_Error ]<<!\", N);\n                   end if;\n@@ -6011,7 +6011,7 @@ package body Sem_Res is\n             end loop;\n \n             if not Call_OK then\n-               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_Warn := SPARK_Mode /= On;\n                Error_Msg_N (\"!cannot determine tag of result<<\", N);\n                Error_Msg_N (\"\\Program_Error [<<!\", N);\n                Insert_Action (N,\n@@ -10877,7 +10877,7 @@ package body Sem_Res is\n                     Deepest_Type_Access_Level (Opnd_Type)\n                then\n                   if In_Instance_Body then\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Conversion_Error_N\n                        (\"source array type has deeper accessibility \"\n                         & \"level than target<<\", Operand);\n@@ -11186,7 +11186,7 @@ package body Sem_Res is\n                --  will be generated by Expand_N_Type_Conversion.\n \n                if In_Instance_Body then\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Conversion_Error_N\n                     (\"cannot convert local pointer to non-local access type<<\",\n                      Operand);\n@@ -11219,7 +11219,7 @@ package body Sem_Res is\n                   --  will be generated by Expand_N_Type_Conversion.\n \n                   if In_Instance_Body then\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Conversion_Error_N\n                        (\"cannot convert access discriminant to non-local \"\n                         & \"access type<<\", Operand);\n@@ -11366,7 +11366,7 @@ package body Sem_Res is\n                --  will be generated by Expand_N_Type_Conversion.\n \n                if In_Instance_Body then\n-                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_Warn := SPARK_Mode /= On;\n                   Conversion_Error_N\n                     (\"cannot convert local pointer to non-local access type<<\",\n                      Operand);\n@@ -11406,7 +11406,7 @@ package body Sem_Res is\n                   --  will be generated by Expand_N_Type_Conversion.\n \n                   if In_Instance_Body then\n-                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_Warn := SPARK_Mode /= On;\n                      Conversion_Error_N\n                        (\"cannot convert access discriminant to non-local \"\n                         & \"access type<<\", Operand);"}, {"sha": "15c6a251e5f529d504273110fed6320e5450d7e7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -578,7 +578,7 @@ package body Sem_Util is\n    begin\n       if Has_Predicates (Typ) then\n          if Is_Generic_Actual_Type (Typ) then\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n             Error_Msg_FE (Msg & \"<<\", N, Typ);\n             Error_Msg_F (\"\\Program_Error [<<\", N);\n             Insert_Action (N,\n@@ -3268,11 +3268,10 @@ package body Sem_Util is\n       Eloc : Source_Ptr;\n \n    begin\n-      --  If this is a warning, convert it into an error if we are operating\n-      --  in GNATprove mode, because in SPARK, we are allowed to consider\n-      --  such warnings as illegalities, and we choose to do so!\n+      --  If this is a warning, convert it into an error if we are in code\n+      --  subject to SPARK_Mode being set ON.\n \n-      Error_Msg_Warn := not GNATprove_Mode;\n+      Error_Msg_Warn := SPARK_Mode /= On;\n \n       --  A static constraint error in an instance body is not a fatal error.\n       --  we choose to inhibit the message altogether, because there is no\n@@ -3414,7 +3413,7 @@ package body Sem_Util is\n          end loop;\n \n          if Msgs then\n-            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_Warn := SPARK_Mode /= On;\n \n             if Present (Ent) then\n                Error_Msg_NEL (Msgc (1 .. Msgl), N, Ent, Eloc);"}, {"sha": "6ab03820fd5485caa59031e270ab0b80a128a2e7", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43417b90cf27a6799b102cd4165a911863c6f719/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=43417b90cf27a6799b102cd4165a911863c6f719", "patch": "@@ -882,12 +882,4 @@ package Types is\n      SE_Empty_Storage_Pool ..\n      SE_Object_Too_Large;\n \n-   ----------------------------------------\n-   -- Types Used for SPARK Mode Handling --\n-   ----------------------------------------\n-\n-   type SPARK_Mode_Id is (None, SPARK_Off, SPARK_Auto, SPARK_On);\n-   --  Type used to represent all legal modes that can be set by aspect/pragma\n-   --  SPARK_Mode.\n-\n end Types;"}]}