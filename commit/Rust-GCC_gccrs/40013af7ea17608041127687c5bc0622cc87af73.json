{"sha": "40013af7ea17608041127687c5bc0622cc87af73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwMTNhZjdlYTE3NjA4MDQxMTI3Njg3YzViYzA2MjJjYzg3YWY3Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-09-06T04:49:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-09-06T04:49:16Z"}, "message": "pt.c (fold_non_dependent_expr_sfinae): Split out from...\n\n\t* pt.c (fold_non_dependent_expr_sfinae): Split out from...\n\t(fold_non_dependent_expr): ...here.\n\t(convert_nontype_argument): Use it.  Take complain parm.\n\tUse perform_implicit_conversion\tinstead of ocp_convert.\n\tAllow cv-qual changes.\n\t(convert_template_argument): Pass complain down.\n\t(tsubst_template_arg): Suppress constant expression warnings.\n\tDon't fold here.\n\nFrom-SVN: r163895", "tree": {"sha": "60c3c267c5798344ba39c1494ca42c669ef7beb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60c3c267c5798344ba39c1494ca42c669ef7beb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40013af7ea17608041127687c5bc0622cc87af73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40013af7ea17608041127687c5bc0622cc87af73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40013af7ea17608041127687c5bc0622cc87af73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40013af7ea17608041127687c5bc0622cc87af73/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea76c60a1660ae449c3071d86ff8a6c3ce0a7ab8"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "9fe9ef0db897cf9751e0acca841824fa700afb0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40013af7ea17608041127687c5bc0622cc87af73", "patch": "@@ -1,5 +1,14 @@\n 2010-09-06  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (fold_non_dependent_expr_sfinae): Split out from...\n+\t(fold_non_dependent_expr): ...here.\n+\t(convert_nontype_argument): Use it.  Take complain parm.\n+\tUse perform_implicit_conversion\tinstead of ocp_convert.\n+\tAllow cv-qual changes.\n+\t(convert_template_argument): Pass complain down.\n+\t(tsubst_template_arg): Suppress constant expression warnings.\n+\tDon't fold here.\n+\n \t* method.c (synthesized_method_walk): In constructors, also check\n \tsubobject destructors.\n "}, {"sha": "eb47ac41600af981620ff35b640b6ea7fe3f5a09", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=40013af7ea17608041127687c5bc0622cc87af73", "patch": "@@ -131,7 +131,7 @@ static int type_unification_real (tree, tree, tree, const tree *,\n \t\t\t\t  unsigned int, int, unification_kind_t, int);\n static void note_template_header (int);\n static tree convert_nontype_argument_function (tree, tree);\n-static tree convert_nontype_argument (tree, tree);\n+static tree convert_nontype_argument (tree, tree, tsubst_flags_t);\n static tree convert_template_argument (tree, tree, tree,\n \t\t\t\t       tsubst_flags_t, int, tree);\n static int for_each_template_parm (tree, tree_fn_t, void*,\n@@ -4800,8 +4800,8 @@ redeclare_class_template (tree type, tree parms)\n /* Simplify EXPR if it is a non-dependent expression.  Returns the\n    (possibly simplified) expression.  */\n \n-tree\n-fold_non_dependent_expr (tree expr)\n+static tree\n+fold_non_dependent_expr_sfinae (tree expr, tsubst_flags_t complain)\n {\n   if (expr == NULL_TREE)\n     return NULL_TREE;\n@@ -4823,7 +4823,7 @@ fold_non_dependent_expr (tree expr)\n       processing_template_decl = 0;\n       expr = tsubst_copy_and_build (expr,\n \t\t\t\t    /*args=*/NULL_TREE,\n-\t\t\t\t    tf_error,\n+\t\t\t\t    complain,\n \t\t\t\t    /*in_decl=*/NULL_TREE,\n \t\t\t\t    /*function_p=*/false,\n \t\t\t\t    /*integral_constant_expression_p=*/true);\n@@ -4832,6 +4832,12 @@ fold_non_dependent_expr (tree expr)\n   return expr;\n }\n \n+tree\n+fold_non_dependent_expr (tree expr)\n+{\n+  return fold_non_dependent_expr_sfinae (expr, tf_error);\n+}\n+\n /* EXPR is an expression which is used in a constant-expression context.\n    For instance, it could be a VAR_DECL with a constant initializer.\n    Extract the innermost constant expression.\n@@ -4960,7 +4966,7 @@ has_value_dependent_address (tree op)\n    hacks can go away after we fix the double coercion problem.  */\n \n static tree\n-convert_nontype_argument (tree type, tree expr)\n+convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n {\n   tree expr_type;\n \n@@ -4969,11 +4975,13 @@ convert_nontype_argument (tree type, tree expr)\n      catch this later), but only to provide better diagnostic for this\n      common user mistake. As suggested by DR 100, we do not mention\n      linkage issues in the diagnostic as this is not the point.  */\n+  /* FIXME we're making this OK.  */\n   if (TREE_CODE (expr) == STRING_CST)\n     {\n-      error (\"%qE is not a valid template argument for type %qT \"\n-\t     \"because string literals can never be used in this context\",\n-\t     expr, type);\n+      if (complain & tf_error)\n+\terror (\"%qE is not a valid template argument for type %qT \"\n+\t       \"because string literals can never be used in this context\",\n+\t       expr, type);\n       return NULL_TREE;\n     }\n \n@@ -4992,8 +5000,8 @@ convert_nontype_argument (tree type, tree expr)\n   if (TYPE_REF_OBJ_P (type)\n       && has_value_dependent_address (expr))\n     /* If we want the address and it's value-dependent, don't fold.  */;\n-  else\n-    expr = fold_non_dependent_expr (expr);\n+  else if (!type_unknown_p (expr))\n+    expr = fold_non_dependent_expr_sfinae (expr, complain);\n   if (error_operand_p (expr))\n     return error_mark_node;\n   expr_type = TREE_TYPE (expr);\n@@ -5061,15 +5069,16 @@ convert_nontype_argument (tree type, tree expr)\n \t do not fold into integer constants.  */\n       if (TREE_CODE (expr) != INTEGER_CST)\n \t{\n-\t  error (\"%qE is not a valid template argument for type %qT \"\n-\t\t \"because it is a non-constant expression\", expr, type);\n+\t  if (complain & tf_error)\n+\t    error (\"%qE is not a valid template argument for type %qT \"\n+\t\t   \"because it is a non-constant expression\", expr, type);\n \t  return NULL_TREE;\n \t}\n \n       /* At this point, an implicit conversion does what we want,\n \t because we already know that the expression is of integral\n \t type.  */\n-      expr = ocp_convert (type, expr, CONV_IMPLICIT, LOOKUP_PROTECT);\n+      expr = perform_implicit_conversion (type, expr, complain);\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n \n@@ -5319,7 +5328,8 @@ convert_nontype_argument (tree type, tree expr)\n \n   /* Sanity check: did we actually convert the argument to the\n      right type?  */\n-  gcc_assert (same_type_p (type, TREE_TYPE (expr)));\n+  gcc_assert (same_type_ignoring_top_level_qualifiers_p\n+\t      (type, TREE_TYPE (expr)));\n   return expr;\n }\n \n@@ -5784,7 +5794,7 @@ convert_template_argument (tree parm,\n \t   conversions can occur is part of determining which\n \t   function template to call, or whether a given explicit\n \t   argument specification is valid.  */\n-\tval = convert_nontype_argument (t, orig_arg);\n+\tval = convert_nontype_argument (t, orig_arg, complain);\n       else\n \tval = orig_arg;\n \n@@ -8270,9 +8280,12 @@ tsubst_template_arg (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     r = tsubst (t, args, complain, in_decl);\n   else\n     {\n+      if (!(complain & tf_warning))\n+\t++c_inhibit_evaluation_warnings;\n       r = tsubst_expr (t, args, complain, in_decl,\n \t\t       /*integral_constant_expression_p=*/true);\n-      r = fold_non_dependent_expr (r);\n+      if (!(complain & tf_warning))\n+\t--c_inhibit_evaluation_warnings;\n     }\n   return r;\n }"}, {"sha": "8cfc06e06a3d552d4c947f301662e596cb0734d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40013af7ea17608041127687c5bc0622cc87af73", "patch": "@@ -1,5 +1,9 @@\n 2010-09-06  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/template/sfinae25.C: New.\n+\t* g++.dg/template/char1.C: Expect warning.\n+\t* g++.dg/template/nontype10.C: Likewise.\n+\n \t* g++.dg/cpp0x/implicit9.C: New.\n \n \t* g++.dg/cpp0x/initlist43.C: New."}, {"sha": "c440577e808625bfd4e28465a9489df6ae5a979d", "filename": "gcc/testsuite/g++.dg/template/char1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fchar1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fchar1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fchar1.C?ref=40013af7ea17608041127687c5bc0622cc87af73", "patch": "@@ -1,4 +1,4 @@\n template <class CharType, CharType line_terminator = 0>\n class String {};\n \n-String<char, 255> s;\n+String<char, 255> s;\t\t// { dg-warning \"overflow\" }"}, {"sha": "83ac8e3026f3c421fa62950a2f8d0e246f8d9e6e", "filename": "gcc/testsuite/g++.dg/template/nontype10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype10.C?ref=40013af7ea17608041127687c5bc0622cc87af73", "patch": "@@ -5,6 +5,6 @@\n template <int  T> struct A {};\n template <void* T> struct B {};\n \n-A<NULL> a;\n+A<NULL> a;\t\t\t// { dg-warning \"NULL\" }\n B<NULL> b;  // { dg-error \"\" }\n "}, {"sha": "e9ee83e1200048c6ab2c51310d989139002c654c", "filename": "gcc/testsuite/g++.dg/template/sfinae25.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40013af7ea17608041127687c5bc0622cc87af73/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae25.C?ref=40013af7ea17608041127687c5bc0622cc87af73", "patch": "@@ -0,0 +1,14 @@\n+template <int I>\n+struct A { };\n+\n+template <int J>\n+void f(A<1/J>);\n+\n+template <int J>\n+void f(...) { }\n+\n+int main()\n+{\n+  f<0>();\n+}\n+"}]}