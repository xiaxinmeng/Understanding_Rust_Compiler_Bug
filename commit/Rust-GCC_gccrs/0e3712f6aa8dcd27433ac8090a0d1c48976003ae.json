{"sha": "0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzNzEyZjZhYThkY2QyNzQzM2FjODA5MGEwZDFjNDg5NzYwMDNhZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2017-05-27T11:29:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2017-05-27T11:29:52Z"}, "message": "d-demangle.c (dlang_call_convention_p): Move declaration before dlang_type.\n\nlibiberty/ChangeLog:\n\n\t* d-demangle.c (dlang_call_convention_p): Move declaration\n\tbefore dlang_type.\n\t(dlang_type): Handle function types.\n\t* testsuite/d-demangle-expected: Add tests.\n\nFrom-SVN: r248538", "tree": {"sha": "e7902a4dfb5a0be30b80f4b0e0366df50eeabd62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7902a4dfb5a0be30b80f4b0e0366df50eeabd62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a122a71eeb0671f92037ccdf5d2dc0b307af620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a122a71eeb0671f92037ccdf5d2dc0b307af620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a122a71eeb0671f92037ccdf5d2dc0b307af620"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "ba16ee5f295fe7dbe9eb4dfdf9a53801668fb7d0", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "patch": "@@ -1,3 +1,10 @@\n+2017-05-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-demangle.c (dlang_call_convention_p): Move declaration\n+\tbefore dlang_type.\n+\t(dlang_type): Handle function types.\n+\t* testsuite/d-demangle-expected: Add tests.\n+\n 2017-05-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-demangle.c (dlang_parse_real): Remove stack buffer, write"}, {"sha": "829050bc0b8428be581b92c8a56096d0347930ef", "filename": "libiberty/d-demangle.c", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/libiberty%2Fd-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/libiberty%2Fd-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fd-demangle.c?ref=0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "patch": "@@ -251,6 +251,22 @@ dlang_hexdigit (const char *mangled, char *ret)\n   return mangled;\n }\n \n+/* Extract the function calling convention from MANGLED and\n+   return 1 on success or 0 on failure.  */\n+static int\n+dlang_call_convention_p (const char *mangled)\n+{\n+  switch (*mangled)\n+    {\n+    case 'F': case 'U': case 'V':\n+    case 'W': case 'R': case 'Y':\n+      return 1;\n+\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Demangle the calling convention from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n@@ -600,17 +616,22 @@ dlang_type (string *decl, const char *mangled)\n     }\n     case 'P': /* pointer (T*) */\n       mangled++;\n-      /* Function pointer types don't include the trailing asterisk.  */\n-      switch (*mangled)\n+      if (!dlang_call_convention_p (mangled))\n \t{\n-\tcase 'F': case 'U': case 'W':\n-\tcase 'V': case 'R': case 'Y':\n-\t  mangled = dlang_function_type (decl, mangled);\n-\t  string_append (decl, \"function\");\n+\t  mangled = dlang_type (decl, mangled);\n+\t  string_append (decl, \"*\");\n \t  return mangled;\n \t}\n-      mangled = dlang_type (decl, mangled);\n-      string_append (decl, \"*\");\n+      /* Fall through */\n+    case 'F': /* function T (D) */\n+    case 'U': /* function T (C) */\n+    case 'W': /* function T (Windows) */\n+    case 'V': /* function T (Pascal) */\n+    case 'R': /* function T (C++) */\n+    case 'Y': /* function T (Objective-C) */\n+      /* Function pointer types don't include the trailing asterisk.  */\n+      mangled = dlang_function_type (decl, mangled);\n+      string_append (decl, \"function\");\n       return mangled;\n     case 'I': /* ident T */\n     case 'C': /* class T */\n@@ -1311,22 +1332,6 @@ dlang_value (string *decl, const char *mangled, const char *name, char type)\n   return mangled;\n }\n \n-/* Extract the function calling convention from MANGLED and\n-   return 1 on success or 0 on failure.  */\n-static int\n-dlang_call_convention_p (const char *mangled)\n-{\n-  switch (*mangled)\n-    {\n-    case 'F': case 'U': case 'V':\n-    case 'W': case 'R': case 'Y':\n-      return 1;\n-\n-    default:\n-      return 0;\n-    }\n-}\n-\n /* Extract and demangle the symbol in MANGLED and append it to DECL.\n    Returns the remaining signature on success or NULL on failure.  */\n static const char *"}, {"sha": "7bf8b1725f980539ae9dad17f4db8ef95828ceed", "filename": "libiberty/testsuite/d-demangle-expected", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/libiberty%2Ftestsuite%2Fd-demangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3712f6aa8dcd27433ac8090a0d1c48976003ae/libiberty%2Ftestsuite%2Fd-demangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fd-demangle-expected?ref=0e3712f6aa8dcd27433ac8090a0d1c48976003ae", "patch": "@@ -886,6 +886,10 @@ _D8demangle35__T4testVS8demangle1SS2i1a3_616263Zv\n demangle.test!(demangle.S(1, \"abc\"))\n #\n --format=dlang\n+_D8demangle13__T4testTFZaZ6mangleFZv\n+demangle.test!(char() function).mangle()\n+#\n+--format=dlang\n _D8demangle4testMxFZv\n demangle.test() const\n #\n@@ -1298,3 +1302,7 @@ std.traits.fqnSym!(std).adjustIdent(immutable(char)[])\n --format=dlang\n _D2rt8lifetime36__T14_d_newarrayOpTS13_d_newarrayiTZ14_d_newarrayOpTFNaNbxC8TypeInfomPmZAv\n rt.lifetime._d_newarrayOpT!(_d_newarrayiT)._d_newarrayOpT(const(TypeInfo), ulong, ulong*)\n+#\n+--format=dlang\n+_D4core8demangle16__T6mangleTFZPvZ6mangleFNaNbNfAxaAaZ11DotSplitter5emptyMxFNaNbNdNiNfZb\n+core.demangle.mangle!(void*() function).mangle(const(char)[], char[]).DotSplitter.empty() const"}]}