{"sha": "cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4ZTE0NTVhNDUzYWM2ZjFkMTJkMzg0ODQ1YTk0YTBjY2FiMjFmMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2008-09-24T21:58:36Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-09-24T21:58:36Z"}, "message": "Revert rs6000 change.\n\nFrom-SVN: r140646", "tree": {"sha": "6c4403ada0371d97c6a627c9218d04e6afd7424a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c4403ada0371d97c6a627c9218d04e6afd7424a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/comments", "author": null, "committer": null, "parents": [{"sha": "1547a8204076604d75249ab47d3da9417854372f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1547a8204076604d75249ab47d3da9417854372f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1547a8204076604d75249ab47d3da9417854372f"}], "stats": {"total": 485, "additions": 167, "deletions": 318}, "files": [{"sha": "386e27e835acdf104ec30cf8f10b3e792baa98ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -1,3 +1,8 @@\n+2008-09-24  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tRevert:\n+\t2008-09-24  Michael J. Eager  <eager@eagercon.com>\n+\n 2008-09-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-common.c (fname_decl): New location argument."}, {"sha": "22bca4d57a1858ba6e0b029ceae611b68cc3f541", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -1791,11 +1791,6 @@ powerpc-*-eabialtivec*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcendian rs6000/t-ppccomm\"\n \t;;\n-powerpc-xilinx-eabi*)\n-\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/singlefp.h\"\n-\textra_options=\"${extra_options} rs6000/sysv4.opt\"\n-\ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcgas rs6000/t-ppccomm\"\n-\t;;\n powerpc-*-eabi*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h freebsd-spec.h rs6000/sysv4.h rs6000/eabi.h rs6000/e500.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\""}, {"sha": "f6929706899068f510f1da714110a310972a6933", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -192,8 +192,7 @@\n     return 0;\n \n   /* Consider all constants with -msoft-float to be easy.  */\n-  if ((TARGET_SOFT_FLOAT || TARGET_E500_SINGLE \n-      || (TARGET_HARD_FLOAT && (TARGET_SINGLE_FLOAT && ! TARGET_DOUBLE_FLOAT)))\n+  if ((TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n       && mode != DImode)\n     return 1;\n "}, {"sha": "da1cb787169ecafbbd46a9453c27c25695f2530f", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -297,8 +297,7 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n     builtin_define (\"__PAIRED__\");\n   if (TARGET_SOFT_FLOAT)\n     builtin_define (\"_SOFT_FLOAT\");\n-  if ((!(TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)))\n-      ||(TARGET_HARD_FLOAT && TARGET_FPRS && !TARGET_DOUBLE_FLOAT))\n+  if (!(TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)))\n     builtin_define (\"_SOFT_DOUBLE\");\n   /* Used by lwarx/stwcx. errata work-around.  */\n   if (rs6000_cpu == PROCESSOR_PPC405)"}, {"sha": "cdeb1c9c500f3fc89b1d3656fa2028bdaa748f86", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 40, "deletions": 117, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -1556,6 +1556,8 @@ rs6000_override_options (const char *default_cpu)\n \t\t     | MASK_DLMZB | MASK_CMPB | MASK_MFPGPR | MASK_DFP)\n   };\n \n+  rs6000_init_hard_regno_mode_ok ();\n+\n   set_masks = POWER_MASKS | POWERPC_MASKS | MASK_SOFT_FLOAT;\n #ifdef OS_MISSING_POWERPC64\n   if (OS_MISSING_POWERPC64)\n@@ -1966,25 +1968,6 @@ rs6000_override_options (const char *default_cpu)\n      can be optimized to ap = __builtin_next_arg (0).  */\n   if (DEFAULT_ABI != ABI_V4)\n     targetm.expand_builtin_va_start = NULL;\n-\n-  /* Set up single/double float flags.  \n-     If TARGET_HARD_FLOAT is set, but neither single or double is set, \n-     then set both flags. */\n-  if (TARGET_HARD_FLOAT && TARGET_FPRS \n-      && rs6000_single_float == 0 && rs6000_double_float == 0)\n-    rs6000_single_float = rs6000_double_float = 1;\n-\n-  /* Reset single and double FP flags if target is E500. */\n-  if (TARGET_E500) \n-  {\n-    rs6000_single_float = rs6000_double_float = 0;\n-    if (TARGET_E500_SINGLE)\n-      rs6000_single_float = 1; \n-    if (TARGET_E500_DOUBLE)\n-      rs6000_single_float = rs6000_double_float = 1;\n-  }\n-\n-  rs6000_init_hard_regno_mode_ok ();\n }\n \n /* Implement targetm.vectorize.builtin_mask_for_load.  */\n@@ -2494,37 +2477,6 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n \t  return false;\n \t}\n       break;\n-\n-    case OPT_msingle_float:\n-      if (!TARGET_SINGLE_FPU) \n-\twarning (0, \"-msingle-float option equivalent to -mhard-float\");\n-      /* -msingle-float implies -mno-double-float and TARGET_HARD_FLOAT. */\n-      rs6000_double_float = 0;\n-      target_flags &= ~MASK_SOFT_FLOAT;\n-      target_flags_explicit |= MASK_SOFT_FLOAT;\n-      break;\n-\n-    case OPT_mdouble_float:\n-      /* -mdouble-float implies -msingle-float and TARGET_HARD_FLOAT. */\n-      rs6000_single_float = 1;\n-      target_flags &= ~MASK_SOFT_FLOAT;\n-      target_flags_explicit |= MASK_SOFT_FLOAT;\n-      break;\n-\n-    case OPT_msimple_fpu:\n-      if (!TARGET_SINGLE_FPU) \n-\twarning (0, \"-msimple-fpu option ignored\");\n-      break;\n-\n-    case OPT_mhard_float:\n-      /* -mhard_float implies -msingle-float and -mdouble-float. */\n-      rs6000_single_float = rs6000_double_float = 1;\n-      break;\n-\n-    case OPT_msoft_float:\n-      /* -msoft_float implies -mnosingle-float and -mnodouble-float. */\n-      rs6000_single_float = rs6000_double_float = 0;\n-      break;\n     }\n   return true;\n }\n@@ -2594,9 +2546,7 @@ rs6000_file_start (void)\n   if (TARGET_32BIT && DEFAULT_ABI == ABI_V4)\n     {\n       fprintf (file, \"\\t.gnu_attribute 4, %d\\n\",\n-\t       ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT) ? 1 \n-\t        : (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT) ? 3 \n-\t        : 2));\n+\t       (TARGET_HARD_FLOAT && TARGET_FPRS) ? 1 : 2);\n       fprintf (file, \"\\t.gnu_attribute 8, %d\\n\",\n \t       (TARGET_ALTIVEC_ABI ? 2\n \t\t: TARGET_SPE_ABI ? 3\n@@ -3741,7 +3691,7 @@ legitimate_lo_sum_address_p (enum machine_mode mode, rtx x, int strict)\n \treturn false;\n       if (GET_MODE_BITSIZE (mode) > 64\n \t  || (GET_MODE_BITSIZE (mode) > 32 && !TARGET_POWERPC64\n-\t      && !(TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n+\t      && !(TARGET_HARD_FLOAT && TARGET_FPRS\n \t\t   && (mode == DFmode || mode == DDmode))))\n \treturn false;\n \n@@ -3808,7 +3758,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && GET_CODE (XEXP (x, 0)) == REG\n \t   && GET_CODE (XEXP (x, 1)) != CONST_INT\n \t   && GET_MODE_NUNITS (mode) == 1\n-\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n \t       || TARGET_POWERPC64\n \t       || ((mode != DImode && mode != DFmode && mode != DDmode)\n \t\t   || (TARGET_E500_DOUBLE && mode != DDmode)))\n@@ -3877,7 +3827,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && CONSTANT_P (x)\n \t   && GET_MODE_NUNITS (mode) == 1\n \t   && (GET_MODE_BITSIZE (mode) <= 32\n-\t       || ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n+\t       || ((TARGET_HARD_FLOAT && TARGET_FPRS)\n \t\t   && (mode == DFmode || mode == DDmode))))\n     {\n       rtx reg = gen_reg_rtx (Pmode);\n@@ -3892,7 +3842,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE\n \t   && CONSTANT_P (x)\n-\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n+\t   && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n \t       || (mode != DFmode && mode != DDmode))\n \t   && mode != DImode\n \t   && mode != TImode)\n@@ -4309,7 +4259,7 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n       && mode != TDmode\n       && (mode != DImode || TARGET_POWERPC64)\n       && ((mode != DFmode && mode != DDmode) || TARGET_POWERPC64\n-\t  || (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)))\n+\t  || (TARGET_FPRS && TARGET_HARD_FLOAT)))\n     {\n #if TARGET_MACHO\n       if (flag_pic)\n@@ -4434,7 +4384,7 @@ rs6000_legitimate_address (enum machine_mode mode, rtx x, int reg_ok_strict)\n       && mode != TImode\n       && mode != TFmode\n       && mode != TDmode\n-      && ((TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT)\n+      && ((TARGET_HARD_FLOAT && TARGET_FPRS)\n \t  || TARGET_POWERPC64\n \t  || ((mode != DFmode && mode != DDmode) || TARGET_E500_DOUBLE))\n       && (TARGET_POWERPC64 || mode != DImode)\n@@ -4889,7 +4839,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n     operands[1] = force_reg (mode, operands[1]);\n \n   if (mode == SFmode && ! TARGET_POWERPC\n-      && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+      && TARGET_HARD_FLOAT && TARGET_FPRS\n       && GET_CODE (operands[0]) == MEM)\n     {\n       int regnum;\n@@ -5250,9 +5200,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n #define USE_FP_FOR_ARG_P(CUM,MODE,TYPE)\t\t\\\n   (SCALAR_FLOAT_MODE_P (MODE)\t\t\t\\\n    && (CUM)->fregno <= FP_ARG_MAX_REG\t\t\\\n-   && TARGET_HARD_FLOAT && TARGET_FPRS \t\t\\\n-   && (TARGET_DOUBLE_FLOAT_MODE (MODE)\t\t\\\n-       || TARGET_SINGLE_FLOAT_MODE (MODE)))\n+   && TARGET_HARD_FLOAT && TARGET_FPRS)\n \n /* Nonzero if we can use an AltiVec register to pass this arg.  */\n #define USE_ALTIVEC_FOR_ARG_P(CUM,MODE,TYPE,NAMED)\t\\\n@@ -5729,10 +5677,9 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-          && (TARGET_SINGLE_FLOAT_MODE (mode)\n-              || (TARGET_DOUBLE_FLOAT \n-                  && (mode == DFmode || mode == DDmode || mode == TDmode))\n-              || (mode == TFmode && !TARGET_IEEEQUAD)))\n+\t  && (mode == SFmode || mode == DFmode\n+\t      || mode == SDmode || mode == DDmode || mode == TDmode\n+\t      || (mode == TFmode && !TARGET_IEEEQUAD)))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -5798,8 +5745,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       cum->words = align_words + n_words;\n \n       if (SCALAR_FLOAT_MODE_P (mode)\n-\t  && TARGET_HARD_FLOAT && TARGET_FPRS\n- \t  && (TARGET_DOUBLE_FLOAT_MODE (mode) || TARGET_SINGLE_FLOAT_MODE (mode)))\n+\t  && TARGET_HARD_FLOAT && TARGET_FPRS)\n \t{\n \t  /* _Decimal128 must be passed in an even/odd float register pair.\n \t     This assumes that the register number is odd when fregno is\n@@ -6293,10 +6239,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   else if (abi == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n-\t  && (TARGET_SINGLE_FLOAT_MODE(mode)\n-\t       || (TARGET_DOUBLE_FLOAT && (mode == SFmode || mode == DFmode))\n-\t  && ((mode == TFmode && !TARGET_IEEEQUAD)\n-\t     || mode == SDmode || mode == DDmode || mode == TDmode)))\n+\t  && (mode == SFmode || mode == DFmode\n+\t      || (mode == TFmode && !TARGET_IEEEQUAD)\n+\t      || mode == SDmode || mode == DDmode || mode == TDmode))\n \t{\n \t  /* _Decimal128 must use an even/odd register pair.  This assumes\n \t     that the register number is odd when fregno is odd.  */\n@@ -6756,17 +6701,11 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t   fregno <= FP_ARG_V4_MAX_REG && nregs < cfun->va_list_fpr_size;\n \t   fregno++, off += UNITS_PER_FP_WORD, nregs++)\n \t{\n-\t  mem = gen_rtx_MEM ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t      ? DFmode : SFmode, \n-                             plus_constant (save_area, off));\n-  \t  MEM_NOTRAP_P (mem) = 1;\n-  \t  set_mem_alias_set (mem, set);\n-\t  set_mem_align (mem, GET_MODE_ALIGNMENT (\n-\t\t\t (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t  ? DFmode : SFmode));\n-\t  emit_move_insn (mem, gen_rtx_REG (\n-                          (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t   ? DFmode : SFmode, fregno));\n+\t  mem = gen_rtx_MEM (DFmode, plus_constant (save_area, off));\n+\t  MEM_NOTRAP_P (mem) = 1;\n+\t  set_mem_alias_set (mem, set);\n+\t  set_mem_align (mem, GET_MODE_ALIGNMENT (DFmode));\n+\t  emit_move_insn (mem, gen_rtx_REG (DFmode, fregno));\n \t}\n \n       emit_label (lab);\n@@ -6981,19 +6920,18 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   align = 1;\n \n   if (TARGET_HARD_FLOAT && TARGET_FPRS\n-      && (TARGET_SINGLE_FLOAT_MODE (TYPE_MODE (type))\n-          || (TARGET_DOUBLE_FLOAT \n-              && (TYPE_MODE (type) == DFmode \n- \t          || TYPE_MODE (type) == TFmode\n-\t          || TYPE_MODE (type) == SDmode\n-\t          || TYPE_MODE (type) == DDmode\n-\t          || TYPE_MODE (type) == TDmode))))\n+      && (TYPE_MODE (type) == SFmode\n+\t  || TYPE_MODE (type) == DFmode\n+\t  || TYPE_MODE (type) == TFmode\n+\t  || TYPE_MODE (type) == SDmode\n+\t  || TYPE_MODE (type) == DDmode\n+\t  || TYPE_MODE (type) == TDmode))\n     {\n       /* FP args go in FP registers, if present.  */\n       reg = fpr;\n       n_reg = (size + 7) / 8;\n-      sav_ofs = ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? 8 : 4) * 4;\n-      sav_scale = ((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? 8 : 4);\n+      sav_ofs = 8*4;\n+      sav_scale = 8;\n       if (TYPE_MODE (type) != SFmode && TYPE_MODE (type) != SDmode)\n \talign = 8;\n     }\n@@ -14189,8 +14127,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n   mode = GET_MODE (dst);\n   nregs = hard_regno_nregs[reg][mode];\n   if (FP_REGNO_P (reg))\n-    reg_mode = DECIMAL_FLOAT_MODE_P (mode) ? DDmode : \n-\t((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT) ? DFmode : SFmode);\n+    reg_mode = DECIMAL_FLOAT_MODE_P (mode) ? DDmode : DFmode;\n   else if (ALTIVEC_REGNO_P (reg))\n     reg_mode = V16QImode;\n   else if (TARGET_E500_DOUBLE && mode == TFmode)\n@@ -16142,14 +16079,11 @@ rs6000_emit_prologue (void)\n \t properly.  */\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \t{\n- \t  rtx reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t   ? DFmode : SFmode), \n-\t\t\t         info->first_fp_reg_save + i);\n+\t  rtx reg = gen_rtx_REG (DFmode, info->first_fp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + sp_offset + 8 * i));\n- \t  rtx mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t     ? DFmode : SFmode), addr);\n+\t  rtx mem = gen_frame_mem (DFmode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, mem, reg);\n \t}\n@@ -16256,9 +16190,7 @@ rs6000_emit_prologue (void)\n       for (i = 0; i < 64 - info->first_fp_reg_save; i++)\n \tif ((df_regs_ever_live_p (info->first_fp_reg_save+i)\n \t     && ! call_used_regs[info->first_fp_reg_save+i]))\n-\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, \n-\t\t\t   (TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t    ? DFmode : SFmode,\n+\t  emit_frame_save (frame_reg_rtx, frame_ptr_rtx, DFmode,\n \t\t\t   info->first_fp_reg_save + i,\n \t\t\t   info->fp_save_offset + sp_offset + 8 * i,\n \t\t\t   info->total_size);\n@@ -16903,14 +16835,11 @@ rs6000_emit_epilogue (int sibcall)\n \t}\n       for (i = 0; info->first_fp_reg_save + i <= 63; i++)\n \t{\n- \t  rtx reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t   ? DFmode : SFmode), \n- \t\t\t         info->first_fp_reg_save + i);\n+\t  rtx reg = gen_rtx_REG (DFmode, info->first_fp_reg_save + i);\n \t  rtx addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t\t   GEN_INT (info->fp_save_offset\n \t\t\t\t\t    + 8 * i));\n- \t  rtx mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t     ? DFmode : SFmode), addr);\n+\t  rtx mem = gen_frame_mem (DFmode, addr);\n \n \t  RTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, reg, mem);\n \t}\n@@ -17315,12 +17244,9 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t       GEN_INT (info->fp_save_offset\n \t\t\t\t\t+ sp_offset\n \t\t\t\t\t+ 8 * i));\n-\t  mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t ? DFmode : SFmode), addr);\n+\t  mem = gen_frame_mem (DFmode, addr);\n \n- \t  emit_move_insn (gen_rtx_REG (((TARGET_HARD_FLOAT \n-\t\t\t\t\t && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t        ? DFmode : SFmode),\n+\t  emit_move_insn (gen_rtx_REG (DFmode,\n \t\t\t\t       info->first_fp_reg_save + i),\n \t\t\t  mem);\n \t}\n@@ -22460,10 +22386,7 @@ rs6000_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n   if (DECIMAL_FLOAT_MODE_P (mode) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     /* _Decimal128 must use an even/odd register pair.  */\n     regno = (mode == TDmode) ? FP_ARG_RETURN + 1 : FP_ARG_RETURN;\n-  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_FPRS \n-           && (TARGET_HARD_FLOAT \n-\t       && (TARGET_SINGLE_FLOAT_MODE (mode) \n-\t            || TARGET_DOUBLE_FLOAT)))\n+  else if (SCALAR_FLOAT_TYPE_P (valtype) && TARGET_HARD_FLOAT && TARGET_FPRS)\n     regno = FP_ARG_RETURN;\n   else if (TREE_CODE (valtype) == COMPLEX_TYPE\n \t   && targetm.calls.split_complex_arg)"}, {"sha": "2d5bbff39abb6e864d600f9f3423c32b3571879e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -298,17 +298,6 @@ enum processor_type\n    PROCESSOR_CELL\n };\n \n-/* FPU operations supported. \n-   Each use of TARGET_SINGLE_FLOAT or TARGET_DOUBLE_FLOAT must \n-   also test TARGET_HARD_FLOAT.  */\n-#define TARGET_SINGLE_FLOAT 1\n-#define TARGET_DOUBLE_FLOAT 1\n-#define TARGET_SINGLE_FPU   0\n-#define TARGET_SIMPLE_FPU   0\n-\n-#define TARGET_SINGLE_FLOAT_MODE(MODE) (TARGET_SINGLE_FLOAT && (MODE) == SFmode)\n-#define TARGET_DOUBLE_FLOAT_MODE(MODE) (TARGET_DOUBLE_FLOAT && (MODE) == DFmode)\n-\n extern enum processor_type rs6000_cpu;\n \n /* Recast the processor type to the cpu attribute.  */"}, {"sha": "d35e9d4eac205f74b646afe1dca8b3b05586c03f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 119, "deletions": 155, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -202,11 +202,8 @@\n (define_mode_iterator P [(SI \"TARGET_32BIT\") (DI \"TARGET_64BIT\")])\n \n ; Any hardware-supported floating-point mode\n-(define_mode_iterator FP [\n-  (SF \"TARGET_HARD_FLOAT \n-   && ((TARGET_FPRS && TARGET_SINGLE_FLOAT) || TARGET_E500_SINGLE)\")\n-  (DF \"TARGET_HARD_FLOAT \n-   && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\")\n+(define_mode_iterator FP [(SF \"TARGET_HARD_FLOAT\")\n+  (DF \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\")\n   (TF \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT\n    && (TARGET_FPRS || TARGET_E500_DOUBLE)\n@@ -5062,13 +5059,13 @@\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(float_extend:DF (match_operand:SF 1 \"reg_or_none500mem_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,?f,f\")\n \t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"@\n    #\n    fmr %0,%1\n@@ -5084,147 +5081,145 @@\n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*truncdfsf2_fpr\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"aux_truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRSP))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frsp %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"*negsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"abssf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"*abssf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:SF (abs:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"addsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-\"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fadds %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsubs %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"mulsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fmuls %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fdivs %0,%1,%2\"\n   [(set_attr \"type\" \"sdiv\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -5252,8 +5247,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"fmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5262,8 +5256,7 @@\n \t(plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5272,8 +5265,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"fmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5282,8 +5274,7 @@\n \t(minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5293,7 +5284,7 @@\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5302,7 +5293,7 @@\n \t(minus:SF (mult:SF (neg:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\"))\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC && TARGET_SINGLE_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmadds %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n@@ -5312,8 +5303,7 @@\n \t(neg:SF (plus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5323,7 +5313,7 @@\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5333,7 +5323,7 @@\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT && HONOR_SIGNED_ZEROS (SFmode)\"\n+   && HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5343,7 +5333,7 @@\n \t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"fnmsubs %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5352,8 +5342,7 @@\n \t(neg:SF (minus:SF (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && TARGET_FUSED_MADD\"\n+  \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5363,31 +5352,27 @@\n \t\t  (mult:SF (match_operand:SF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:SF 2 \"gpc_reg_operand\" \"f\"))))]\n   \"! TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n-   && TARGET_SINGLE_FLOAT && ! HONOR_SIGNED_ZEROS (SFmode)\"\n+   && ! HONOR_SIGNED_ZEROS (SFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) \n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \n-   && !TARGET_SIMPLE_FPU\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT \n-   && TARGET_FPRS && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n+  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWER2 && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n+  \"TARGET_POWER2 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -5420,7 +5405,7 @@\n \t                     (match_dup 5))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\n    && !HONOR_NANS (SFmode) && !HONOR_SIGNED_ZEROS (SFmode)\"\n   {\n      operands[3] = gen_reg_rtx (SFmode);\n@@ -5438,7 +5423,7 @@\n \t                     (match_dup 5))\n \t\t\t (match_dup 3)\n \t\t\t (match_dup 4)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\n    && !HONOR_NANS (DFmode) && !HONOR_SIGNED_ZEROS (DFmode)\"\n   {\n      operands[3] = gen_reg_rtx (DFmode);\n@@ -5456,8 +5441,7 @@\n \t\t\t     (match_operand:SF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]); DONE;}\")\n \n (define_expand \"sminsf3\"\n@@ -5466,17 +5450,15 @@\n \t\t\t     (match_operand:SF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 2)\n \t\t\t (match_dup 1)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]); DONE;}\")\n \n (define_split\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(match_operator:SF 3 \"min_max_operator\"\n \t [(match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")]))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n   [(const_int 0)]\n   \"\n { rs6000_emit_minmax (operands[0], GET_CODE (operands[3]),\n@@ -5537,7 +5519,7 @@\n \t (if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n \t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5552,7 +5534,7 @@\n \t\t\t     (match_operand:SF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5562,100 +5544,100 @@\n \t\t\t     (match_operand:DF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"negdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*negdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fneg %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"absdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*absdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"*nabsdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (abs:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fnabs %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"adddf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*adddf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fa|fadd} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"subdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*subdf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fs|fsub} %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"muldf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*muldf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE) && !TARGET_SIMPLE_FPU\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn \"*divdf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && !TARGET_SIMPLE_FPU\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fd|fdiv} %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n@@ -5683,7 +5665,7 @@\n \t(plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fma|fmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5692,7 +5674,7 @@\n \t(minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\"\n   \"{fms|fmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n@@ -5701,7 +5683,7 @@\n \t(neg:DF (plus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -5711,7 +5693,7 @@\n \t(minus:DF (mult:DF (neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnma|fnmadd} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -5721,7 +5703,7 @@\n \t(neg:DF (minus:DF (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n@@ -5731,16 +5713,15 @@\n \t(minus:DF (match_operand:DF 3 \"gpc_reg_operand\" \"f\")\n \t          (mult:DF (match_operand:DF 1 \"gpc_reg_operand\" \"%f\")\n \t\t\t   (match_operand:DF 2 \"gpc_reg_operand\" \"f\"))))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD && TARGET_DOUBLE_FLOAT\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_FUSED_MADD\n    && ! HONOR_SIGNED_ZEROS (DFmode)\"\n   \"{fnms|fnmsub} %0,%1,%2,%3\"\n   [(set_attr \"type\" \"dmul\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n@@ -5753,8 +5734,7 @@\n \t\t\t     (match_operand:DF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 1)\n \t\t\t (match_dup 2)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]); DONE;}\")\n \n (define_expand \"smindf3\"\n@@ -5763,17 +5743,15 @@\n \t\t\t     (match_operand:DF 2 \"gpc_reg_operand\" \"\"))\n \t\t\t (match_dup 2)\n \t\t\t (match_dup 1)))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n   \"{ rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]); DONE;}\")\n \n (define_split\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(match_operator:DF 3 \"min_max_operator\"\n \t [(match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")]))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && !flag_trapping_math\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && !flag_trapping_math\"\n   [(const_int 0)]\n   \"\n { rs6000_emit_minmax (operands[0], GET_CODE (operands[3]),\n@@ -5786,7 +5764,7 @@\n \t (if_then_else:DF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n \t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (rs6000_emit_cmove (operands[0], operands[1], operands[2], operands[3]))\n@@ -5801,7 +5779,7 @@\n \t\t\t     (match_operand:DF 4 \"zero_fp_constant\" \"F\"))\n \t\t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n \t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_PPC_GFXOPT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fsel %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -5820,13 +5798,13 @@\n (define_expand \"fixuns_truncsfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(unsigned_fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n   \"\")\n \n (define_expand \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n   \"\")\n \n ; For each of these conversions, there is a define_expand, a define_insn\n@@ -5842,8 +5820,7 @@\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n \t      (clobber (match_dup 6))])]\n-  \"TARGET_HARD_FLOAT \n-   && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -5873,7 +5850,7 @@\n    (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&f\"))\n    (clobber (match_operand:SI 6 \"gpc_reg_operand\" \"=&r\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[4]))\"\n   [(pc)]\n@@ -5902,7 +5879,7 @@\n (define_expand \"floatunssisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (unsigned_float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && !TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n   \"\")\n \n (define_expand \"floatunssidf2\"\n@@ -5912,7 +5889,7 @@\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+  \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -5940,7 +5917,7 @@\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n    (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&f\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[4]))\"\n   [(pc)]\n@@ -5970,7 +5947,7 @@\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n   \"(TARGET_POWER2 || TARGET_POWERPC)\n-   && TARGET_HARD_FLOAT && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) || TARGET_E500_DOUBLE)\"\n+   && TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\n {\n   if (TARGET_E500_DOUBLE)\n@@ -6006,8 +5983,7 @@\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"=o\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[3]))\"\n   [(pc)]\n@@ -6028,8 +6004,7 @@\n   [(set (match_operand:SI 0 \"memory_operand\" \"=Z\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT \n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\n    && TARGET_PPC_GFXOPT\"\n   \"#\"\n   \"&& 1\"\n@@ -6047,8 +6022,7 @@\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))]\n-  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 2) (unspec:DI [(fix:SI (match_dup 1))] UNSPEC_FCTIWZ))\n@@ -6065,64 +6039,63 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DI [(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\"))]\n \t\t   UNSPEC_FCTIWZ))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"btruncdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIZ))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"friz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"btruncsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIZ))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"friz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"ceildf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIP))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frip %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"ceilsf2\"\n  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIP))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frip %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floordf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIM))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frim %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floorsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIM))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frim %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"rounddf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIN))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frin %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"roundsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRIN))]\n-  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n+  \"TARGET_FPRND && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"frin %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -6138,27 +6111,27 @@\n (define_expand \"floatsisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_HARD_FLOAT && (!TARGET_FPRS || TARGET_SINGLE_FPU)\"\n+  \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n   \"\")\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"gpc_reg_operand\" \"!f#r\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=!f#r\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"floatdisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   rtx val = operands[1];\n@@ -6180,7 +6153,7 @@\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"!f#r\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -6214,7 +6187,7 @@\n \t\t\t   (label_ref (match_operand:DI 2 \"\" \"\"))\n \t\t\t   (pc)))\n    (set (match_dup 0) (match_dup 1))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   operands[3] = gen_reg_rtx (DImode);\n@@ -8246,7 +8219,7 @@\n \t(match_operand:SF 1 \"input_operand\" \"r,m,r,f,m,f,r,r,h,0,G,Fn\"))]\n   \"(gpc_reg_operand (operands[0], SFmode)\n    || gpc_reg_operand (operands[1], SFmode))\n-   && (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT)\"\n+   && (TARGET_HARD_FLOAT && TARGET_FPRS)\"\n   \"@\n    mr %0,%1\n    {l%U1%X1|lwz%U1%X1} %0,%1\n@@ -8384,7 +8357,7 @@\n (define_insn \"*movdf_hardfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=!r,??r,m,f,f,m,!r,!r,!r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,f,m,f,G,H,F\"))]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n@@ -8479,9 +8452,7 @@\n (define_insn \"*movdf_softfloat32\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,m,r,G,H,F\"))]\n-  \"! TARGET_POWERPC64 \n-   && ((TARGET_FPRS && !TARGET_DOUBLE_FLOAT) \n-       || TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n+  \"! TARGET_POWERPC64 && (TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"*\n@@ -8524,8 +8495,7 @@\n (define_insn \"*movdf_hardfloat64_mfpgpr\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,f,f,m,*c*l,!r,*h,!r,!r,!r,r,f\")\n \t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,0,G,H,F,f,r\"))]\n-  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT \n+  \"TARGET_POWERPC64 && TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8551,8 +8521,7 @@\n (define_insn \"*movdf_hardfloat64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,r,!r,f,f,m,*c*l,!r,*h,!r,!r,!r\")\n \t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,0,G,H,F\"))]\n-  \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT \n+  \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n@@ -8645,8 +8614,7 @@\n \t\t   (float_extend:TF (match_operand:DF 1 \"input_operand\" \"\")))\n \t      (use (match_dup 2))])]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n   operands[2] = CONST0_RTX (DFmode);\n   /* Generate GOT reference early for SVR4 PIC.  */\n@@ -8659,8 +8627,7 @@\n        (float_extend:TF (match_operand:DF 1 \"input_operand\" \"fr,mf,mf,rmGHF\")))\n    (use (match_operand:DF 2 \"zero_reg_mem_operand\" \"rf,m,f,n\"))]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n@@ -8717,8 +8684,7 @@\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float_truncate:DF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))]\n   \"!TARGET_IEEEQUAD && TARGET_XL_COMPAT\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"fadd %0,%1,%L1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -8742,8 +8708,7 @@\n \t(float_truncate:SF (match_operand:TF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n@@ -8773,7 +8738,7 @@\n \t(unspec:DF [(match_operand:TF 1 \"gpc_reg_operand\" \"f\")]\n \t\t   UNSPEC_FIX_TRUNC_TF))\n    (clobber (match_operand:DF 2 \"gpc_reg_operand\" \"=&f\"))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"mffs %2\\n\\tmtfsb1 31\\n\\tmtfsb0 30\\n\\tfadd %0,%1,%L1\\n\\tmtfsf 1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"20\")])\n@@ -8894,8 +8859,7 @@\n \t\t\t   (pc)))\n    (set (match_dup 6) (neg:DF (match_dup 6)))]\n   \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"\n {\n   const int hi_word = FLOAT_WORDS_BIG_ENDIAN ? 0 : GET_MODE_SIZE (DFmode);\n@@ -10046,7 +10010,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n@@ -10058,7 +10022,7 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\"\n@@ -10094,7 +10058,7 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n@@ -10106,7 +10070,7 @@\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_UPDATE\"\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\"\n@@ -10127,7 +10091,7 @@\n    (set (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n \t(match_operand:DF 3 \"memory_operand\" \"\"))]\n   \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && TARGET_HARD_FLOAT && TARGET_FPRS\n    && registers_ok_for_quad_peep (operands[0], operands[2])\n    && mems_ok_for_quad_peep (operands[1], operands[3])\"\n   [(set (match_dup 0)\n@@ -10149,7 +10113,7 @@\n    (set (match_operand:DF 2 \"memory_operand\" \"\")\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n   \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n+   && TARGET_HARD_FLOAT && TARGET_FPRS\n    && registers_ok_for_quad_peep (operands[1], operands[3])\n    && mems_ok_for_quad_peep (operands[0], operands[2])\"\n   [(set (match_dup 0)\n@@ -11935,15 +11899,15 @@\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:SF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n (define_insn \"*cmpdf_internal1\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(compare:CCFP (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:DF 2 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"fcmpu %0,%1,%2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n@@ -11953,7 +11917,7 @@\n \t(compare:CCFP (match_operand:TF 1 \"gpc_reg_operand\" \"f\")\n \t\t      (match_operand:TF 2 \"gpc_reg_operand\" \"f\")))]\n   \"!TARGET_IEEEQUAD && !TARGET_XL_COMPAT\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"fcmpu %0,%1,%2\\;bne %0,$+8\\;fcmpu %0,%L1,%L2\"\n   [(set_attr \"type\" \"fpcompare\")\n    (set_attr \"length\" \"12\")])\n@@ -11971,7 +11935,7 @@\n     (clobber (match_scratch:DF 9 \"=f\"))\n     (clobber (match_scratch:DF 10 \"=f\"))]\n   \"!TARGET_IEEEQUAD && TARGET_XL_COMPAT\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_LONG_DOUBLE_128\"\n+   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (match_dup 13))"}, {"sha": "6ad682fad2b647e9662c641f956c02455b8d5c79", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -260,15 +260,3 @@ Specify alignment of structure fields default/natural\n mprioritize-restricted-insns=\n Target RejectNegative Joined UInteger Var(rs6000_sched_restricted_insns_priority)\n Specify scheduling priority for dispatch slot restricted insns\n-\n-msingle-float\n-Target RejectNegative Var(rs6000_single_float)\n-Single-precision floating point unit\n-\n-mdouble-float\n-Target RejectNegative Var(rs6000_double_float)\n-Double-precision floating point unit\n-\n-msimple-fpu\n-Target RejectNegative Var(rs6000_simple_fpu)\n-Floating point unit does not support divide & sqrt"}, {"sha": "05fc091009de45cb0311fc339843f823e1ebe8b0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf8e1455a453ac6f1d12d384845a94a0ccab21f1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cf8e1455a453ac6f1d12d384845a94a0ccab21f1", "patch": "@@ -715,7 +715,6 @@ See RS/6000 and PowerPC Options.\n -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe @gol\n -malign-power  -malign-natural @gol\n -msoft-float  -mhard-float  -mmultiple  -mno-multiple @gol\n--msingle-float -mdouble-float -msimple-fpu @gol\n -mstring  -mno-string  -mupdate  -mno-update @gol\n -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align @gol\n -mstrict-align  -mno-strict-align  -mrelocatable @gol\n@@ -13420,8 +13419,7 @@ following options:\n \n @gccoptlist{-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple @gol\n -mnew-mnemonics  -mpopcntb  -mpower  -mpower2  -mpowerpc64 @gol\n--mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float @gol\n--msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr}\n+-mpowerpc-gpopt  -mpowerpc-gfxopt  -mstring  -mmulhw  -mdlmzb  -mmfpgpr}\n \n The particular options set for any particular CPU will vary between\n compiler versions, depending on what setting seems to produce optimal\n@@ -13638,17 +13636,6 @@ Generate code that does not use (uses) the floating-point register set.\n Software floating point emulation is provided if you use the\n @option{-msoft-float} option, and pass the option to GCC when linking.\n \n-@item -msingle-float\n-@itemx -mdouble-float\n-@opindex msingle-float\n-@opindex mdouble-float\n-Generate code for single or double-precision floating point operations. \n-@option{-mdouble-float} implies @option{-msingle-float}. \n-\n-@item -msimple-fpu\n-@opindex msimple-fpu\n-Do not generate sqrt and div instructions for hardware floating point unit.\n-\n @item -mmultiple\n @itemx -mno-multiple\n @opindex mmultiple"}]}