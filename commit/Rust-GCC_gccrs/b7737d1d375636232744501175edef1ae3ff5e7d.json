{"sha": "b7737d1d375636232744501175edef1ae3ff5e7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc3MzdkMWQzNzU2MzYyMzI3NDQ1MDExNzVlZGVmMWFlM2ZmNWU3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:20:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:20:37Z"}, "message": "[multiple changes]\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* a-contai.adb, a-coinve.ads, a-contai.ads, a-conhel.adb, a-conhel.ads,\n\tMakefile.rtl, a-convec.ads: Move helper code from Ada.Containers to a\n\tnew package Ada.Containers.Helpers, because otherwise it's not\n\tvisible everywhere it needs to be (e.g. in the package\n\tAda.Containers.Red_Black_Trees, Generic_Tree_Types wants to have\n\ta component of type Tamper_Counts).\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_type.adb (Intersect_Types): Specialize error message when\n\tone operand is a limited view which is a priori incompatible\n\twith all other named types.\n\t* sem_prag.adb: minor fix in comment\n\t* sem_ch13.adb: Code clean up.\n\n2015-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch12.adb (Need_Subprogram_Instance_Body): Also return true\n\tfor a subprogram nested in an inlined subprogram.\n\nFrom-SVN: r229040", "tree": {"sha": "9fc91aab7887a6f3b231f34995b6e46bed5a9bf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fc91aab7887a6f3b231f34995b6e46bed5a9bf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7737d1d375636232744501175edef1ae3ff5e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7737d1d375636232744501175edef1ae3ff5e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7737d1d375636232744501175edef1ae3ff5e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7737d1d375636232744501175edef1ae3ff5e7d/comments", "author": null, "committer": null, "parents": [{"sha": "6fa8f71cf8f9232aac5086ef65b265338468e98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa8f71cf8f9232aac5086ef65b265338468e98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa8f71cf8f9232aac5086ef65b265338468e98d"}], "stats": {"total": 375, "additions": 237, "deletions": 138}, "files": [{"sha": "773b6a128f0ea39c52012d169881acf42a1178ac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -1,3 +1,25 @@\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* a-contai.adb, a-coinve.ads, a-contai.ads, a-conhel.adb, a-conhel.ads,\n+\tMakefile.rtl, a-convec.ads: Move helper code from Ada.Containers to a\n+\tnew package Ada.Containers.Helpers, because otherwise it's not\n+\tvisible everywhere it needs to be (e.g. in the package\n+\tAda.Containers.Red_Black_Trees, Generic_Tree_Types wants to have\n+\ta component of type Tamper_Counts).\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_type.adb (Intersect_Types): Specialize error message when\n+\tone operand is a limited view which is a priori incompatible\n+\twith all other named types.\n+\t* sem_prag.adb: minor fix in comment\n+\t* sem_ch13.adb: Code clean up.\n+\n+2015-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Need_Subprogram_Instance_Body): Also return true\n+\tfor a subprogram nested in an inlined subprogram.\n+\n 2015-10-20  Bob Duff  <duff@adacore.com>\n \n \t* a-coinve.adb, a-contai.adb: Update comments."}, {"sha": "68d8dc708cd02a27d6f8a7de628a9cf715966bf8", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -148,6 +148,7 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-colire$(objext) \\\n   a-comlin$(objext) \\\n   a-comutr$(objext) \\\n+  a-conhel$(objext) \\\n   a-contai$(objext) \\\n   a-convec$(objext) \\\n   a-coorma$(objext) \\"}, {"sha": "5cb97d53ddbbf6a07b1aa64ab02744fa541f3295", "filename": "gcc/ada/a-coinve.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.ads?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -33,6 +33,7 @@\n \n with Ada.Iterator_Interfaces;\n \n+private with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n \n@@ -357,6 +358,7 @@ private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n+   use Ada.Containers.Helpers;\n    package Implementation is new Generic_Implementation;\n    use Implementation;\n "}, {"sha": "11fe035022ac35199372cae81be61d66f8e9c72e", "filename": "gcc/ada/a-conhel.adb", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-conhel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-conhel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-conhel.adb?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n---                       A D A . C O N T A I N E R S                        --\n+--               A D A . C O N T A I N E R S . H E L P E R S                --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2015, Free Software Foundation, Inc.            --\n+--             Copyright (C) 2015, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,7 +25,7 @@\n -- <http://www.gnu.org/licenses/>.                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Containers is\n+package body Ada.Containers.Helpers is\n \n    package body Generic_Implementation is\n \n@@ -183,4 +183,4 @@ package body Ada.Containers is\n \n    end Generic_Implementation;\n \n-end Ada.Containers;\n+end Ada.Containers.Helpers;", "previous_filename": "gcc/ada/a-contai.adb"}, {"sha": "e48c03bdd34ff616f50c8ba0b0bd8cf8b270d1dd", "filename": "gcc/ada/a-conhel.ads", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-conhel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-conhel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-conhel.ads?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -0,0 +1,160 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--               A D A . C O N T A I N E R S . H E L P E R S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2015, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Finalization;\n+with System.Atomic_Counters;\n+\n+package Ada.Containers.Helpers is\n+   pragma Pure;\n+\n+   --  Miscellaneous helpers shared among various containers\n+\n+   package SAC renames System.Atomic_Counters;\n+\n+   Count_Type_Last : constant := Count_Type'Last;\n+   --  Count_Type'Last as a universal_integer, so we can compare Index_Type\n+   --  values against this without type conversions that might overflow.\n+\n+   type Tamper_Counts is record\n+      Busy : aliased SAC.Atomic_Unsigned := 0;\n+      Lock : aliased SAC.Atomic_Unsigned := 0;\n+   end record;\n+\n+   --  Busy is positive when tampering with cursors is prohibited. Busy and\n+   --  Lock are both positive when tampering with elements is prohibited.\n+\n+   type Tamper_Counts_Access is access all Tamper_Counts;\n+   for Tamper_Counts_Access'Storage_Size use 0;\n+\n+   generic\n+   package Generic_Implementation is\n+\n+      --  Generic package used in the implementation of containers.\n+      --  ???????????????????Currently used by Vectors; not yet by all other\n+      --  containers.\n+\n+      --  This needs to be generic so that the 'Enabled attribute will return\n+      --  the value that is relevant at the point where a container generic is\n+      --  instantiated. For example:\n+      --\n+      --     pragma Suppress (Container_Checks);\n+      --     package My_Vectors is new Ada.Containers.Vectors (...);\n+      --\n+      --  should suppress all container-related checks within the instance\n+      --  My_Vectors.\n+\n+      --  Shorthands for \"checks enabled\" and \"tampering checks enabled\". Note\n+      --  that suppressing either Container_Checks or Tampering_Check disables\n+      --  tampering checks. Note that this code needs to be in a generic\n+      --  package, because we want to take account of check suppressions at the\n+      --  instance. We use these flags, along with pragma Inline, to ensure\n+      --  that the compiler can optimize away the checks, as well as the\n+      --  tampering check machinery, when checks are suppressed.\n+\n+      Checks : constant Boolean := Container_Checks'Enabled;\n+      T_Check : constant Boolean :=\n+        Container_Checks'Enabled and Tampering_Check'Enabled;\n+\n+      --  Reference_Control_Type is used as a component of reference types, to\n+      --  prohibit tampering with elements so long as references exist.\n+\n+      type Reference_Control_Type is\n+         new Finalization.Controlled with record\n+            T_Counts : Tamper_Counts_Access;\n+         end record\n+           with Disable_Controlled => not T_Check;\n+\n+      overriding procedure Adjust (Control : in out Reference_Control_Type);\n+      pragma Inline (Adjust);\n+\n+      overriding procedure Finalize (Control : in out Reference_Control_Type);\n+      pragma Inline (Finalize);\n+\n+      procedure Zero_Counts (T_Counts : out Tamper_Counts);\n+      pragma Inline (Zero_Counts);\n+      --  Set Busy and Lock to zero\n+\n+      procedure Busy (T_Counts : in out Tamper_Counts);\n+      pragma Inline (Busy);\n+      --  Prohibit tampering with cursors\n+\n+      procedure Unbusy (T_Counts : in out Tamper_Counts);\n+      pragma Inline (Unbusy);\n+      --  Allow tampering with cursors\n+\n+      procedure Lock (T_Counts : in out Tamper_Counts);\n+      pragma Inline (Lock);\n+      --  Prohibit tampering with elements\n+\n+      procedure Unlock (T_Counts : in out Tamper_Counts);\n+      pragma Inline (Unlock);\n+      --  Allow tampering with elements\n+\n+      procedure TC_Check (T_Counts : Tamper_Counts);\n+      pragma Inline (TC_Check);\n+      --  Tampering-with-cursors check\n+\n+      procedure TE_Check (T_Counts : Tamper_Counts);\n+      pragma Inline (TE_Check);\n+      --  Tampering-with-elements check\n+\n+      -----------------\n+      --  RAII Types --\n+      -----------------\n+\n+      --  Initialize of With_Busy increments the Busy count, and Finalize\n+      --  decrements it. Thus, to prohibit tampering with elements within a\n+      --  given scope, declare an object of type With_Busy. The Busy count\n+      --  will be correctly decremented in case of exception or abort.\n+\n+      --  With_Lock is the same as With_Busy, except it increments/decrements\n+      --  BOTH Busy and Lock, thus prohibiting tampering with cursors.\n+\n+      type With_Busy (T_Counts : not null access Tamper_Counts) is\n+        new Finalization.Limited_Controlled with null record\n+          with Disable_Controlled => not T_Check;\n+      overriding procedure Initialize (Busy : in out With_Busy);\n+      overriding procedure Finalize (Busy : in out With_Busy);\n+\n+      type With_Lock (T_Counts : not null access Tamper_Counts) is\n+        new Finalization.Limited_Controlled with null record\n+          with Disable_Controlled => not T_Check;\n+      overriding procedure Initialize (Lock : in out With_Lock);\n+      overriding procedure Finalize (Lock : in out With_Lock);\n+\n+      --  Variables of type With_Busy and With_Lock are declared only for the\n+      --  effects of Initialize and Finalize, so they are not referenced;\n+      --  disable warnings about that. Note that all variables of these types\n+      --  have names starting with \"Busy\" or \"Lock\". These pragmas need to be\n+      --  present wherever these types are used.\n+\n+      pragma Warnings (Off, \"variable \"\"Busy*\"\" is not referenced\");\n+      pragma Warnings (Off, \"variable \"\"Lock*\"\" is not referenced\");\n+\n+   end Generic_Implementation;\n+\n+end Ada.Containers.Helpers;"}, {"sha": "5ae53ff875da38be065ed8a30b3353d712283f7a", "filename": "gcc/ada/a-contai.ads", "status": "modified", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-contai.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-contai.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-contai.ads?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -22,9 +22,6 @@ pragma Check_Name (Tampering_Check);\n --  Tampering_Check as well as all the other (not-so-expensive) containers\n --  checks.\n \n-private with Ada.Finalization;\n-with System.Atomic_Counters;\n-\n package Ada.Containers is\n    pragma Pure;\n \n@@ -33,129 +30,4 @@ package Ada.Containers is\n \n    Capacity_Error : exception;\n \n-private\n-\n-   package SAC renames System.Atomic_Counters;\n-\n-   Count_Type_Last : constant := Count_Type'Last;\n-   --  Count_Type'Last as a universal_integer, so we can compare Index_Type\n-   --  values against this without type conversions that might overflow.\n-\n-   type Tamper_Counts is record\n-      Busy : aliased SAC.Atomic_Unsigned := 0;\n-      Lock : aliased SAC.Atomic_Unsigned := 0;\n-   end record;\n-\n-   --  Busy is positive when tampering with cursors is prohibited. Busy and\n-   --  Lock are both positive when tampering with elements is prohibited.\n-\n-   type Tamper_Counts_Access is access all Tamper_Counts;\n-   for Tamper_Counts_Access'Storage_Size use 0;\n-\n-   generic\n-   package Generic_Implementation is\n-\n-      --  Generic package used in the implementation of containers.\n-      --  ???Currently used by Vectors; not yet by all other containers.\n-\n-      --  This needs to be generic so that the 'Enabled attribute will return\n-      --  the value that is relevant at the point where a container generic is\n-      --  instantiated. For example:\n-      --\n-      --     pragma Suppress (Container_Checks);\n-      --     package My_Vectors is new Ada.Containers.Vectors (...);\n-      --\n-      --  should suppress all container-related checks within the instance\n-      --  My_Vectors.\n-\n-      --  Shorthands for \"checks enabled\" and \"tampering checks enabled\". Note\n-      --  that suppressing either Container_Checks or Tampering_Check disables\n-      --  tampering checks. Note that this code needs to be in a generic\n-      --  package, because we want to take account of check suppressions at the\n-      --  instance. We use these flags, along with pragma Inline, to ensure\n-      --  that the compiler can optimize away the checks, as well as the\n-      --  tampering check machinery, when checks are suppressed.\n-\n-      Checks : constant Boolean := Container_Checks'Enabled;\n-      T_Check : constant Boolean :=\n-        Container_Checks'Enabled and Tampering_Check'Enabled;\n-\n-      --  Reference_Control_Type is used as a component of reference types, to\n-      --  prohibit tampering with elements so long as references exist.\n-\n-      type Reference_Control_Type is\n-         new Finalization.Controlled with record\n-            T_Counts : Tamper_Counts_Access;\n-         end record\n-           with Disable_Controlled => not T_Check;\n-\n-      overriding procedure Adjust (Control : in out Reference_Control_Type);\n-      pragma Inline (Adjust);\n-\n-      overriding procedure Finalize (Control : in out Reference_Control_Type);\n-      pragma Inline (Finalize);\n-\n-      procedure Zero_Counts (T_Counts : out Tamper_Counts);\n-      pragma Inline (Zero_Counts);\n-      --  Set Busy and Lock to zero\n-\n-      procedure Busy (T_Counts : in out Tamper_Counts);\n-      pragma Inline (Busy);\n-      --  Prohibit tampering with cursors\n-\n-      procedure Unbusy (T_Counts : in out Tamper_Counts);\n-      pragma Inline (Unbusy);\n-      --  Allow tampering with cursors\n-\n-      procedure Lock (T_Counts : in out Tamper_Counts);\n-      pragma Inline (Lock);\n-      --  Prohibit tampering with elements\n-\n-      procedure Unlock (T_Counts : in out Tamper_Counts);\n-      pragma Inline (Unlock);\n-      --  Allow tampering with elements\n-\n-      procedure TC_Check (T_Counts : Tamper_Counts);\n-      pragma Inline (TC_Check);\n-      --  Tampering-with-cursors check\n-\n-      procedure TE_Check (T_Counts : Tamper_Counts);\n-      pragma Inline (TE_Check);\n-      --  Tampering-with-elements check\n-\n-      -----------------\n-      --  RAII Types --\n-      -----------------\n-\n-      --  Initialize of With_Busy increments the Busy count, and Finalize\n-      --  decrements it. Thus, to prohibit tampering with elements within a\n-      --  given scope, declare an object of type With_Busy. The Busy count\n-      --  will be correctly decremented in case of exception or abort.\n-\n-      --  With_Lock is the same as With_Busy, except it increments/decrements\n-      --  BOTH Busy and Lock, thus prohibiting tampering with cursors.\n-\n-      type With_Busy (T_Counts : not null access Tamper_Counts) is\n-        new Finalization.Limited_Controlled with null record\n-          with Disable_Controlled => not T_Check;\n-      overriding procedure Initialize (Busy : in out With_Busy);\n-      overriding procedure Finalize (Busy : in out With_Busy);\n-\n-      type With_Lock (T_Counts : not null access Tamper_Counts) is\n-        new Finalization.Limited_Controlled with null record\n-          with Disable_Controlled => not T_Check;\n-      overriding procedure Initialize (Lock : in out With_Lock);\n-      overriding procedure Finalize (Lock : in out With_Lock);\n-\n-      --  Variables of type With_Busy and With_Lock are declared only for the\n-      --  effects of Initialize and Finalize, so they are not referenced;\n-      --  disable warnings about that. Note that all variables of these types\n-      --  have names starting with \"Busy\" or \"Lock\". These pragmas need to be\n-      --  present wherever these types are used.\n-\n-      pragma Warnings (Off, \"variable \"\"Busy*\"\" is not referenced\");\n-      pragma Warnings (Off, \"variable \"\"Lock*\"\" is not referenced\");\n-\n-   end Generic_Implementation;\n-\n end Ada.Containers;"}, {"sha": "bf5232908878dde630b58f075bfd21004644f116", "filename": "gcc/ada/a-convec.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-convec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fa-convec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-convec.ads?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -33,6 +33,7 @@\n \n with Ada.Iterator_Interfaces;\n \n+private with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n \n@@ -366,6 +367,7 @@ private\n    pragma Inline (Next);\n    pragma Inline (Previous);\n \n+   use Ada.Containers.Helpers;\n    package Implementation is new Generic_Implementation;\n    use Implementation;\n "}, {"sha": "ba0daa9f3ac09e80686536c23380892346130caa", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -4676,12 +4676,41 @@ package body Sem_Ch12 is\n      (N    : Node_Id;\n       Subp : Entity_Id) return Boolean\n    is\n+\n+      function Is_Inlined_Or_Child_Of_Inlined (E : Entity_Id) return Boolean;\n+      --  Return True if E is an inlined subprogram, an inlined renaming or a\n+      --  subprogram nested in an inlined subprogram. The inlining machinery\n+      --  totally disregards nested subprograms since it considers that they\n+      --  will always be compiled if the parent is (see Inline.Is_Nested).\n+\n+      ------------------------------------\n+      -- Is_Inlined_Or_Child_Of_Inlined --\n+      ------------------------------------\n+\n+      function Is_Inlined_Or_Child_Of_Inlined (E : Entity_Id) return Boolean is\n+         Scop : Entity_Id;\n+\n+      begin\n+         if Is_Inlined (E) or else Is_Inlined (Alias (E)) then\n+            return True;\n+         end if;\n+\n+         Scop := Scope (E);\n+         while Scop /= Standard_Standard loop\n+            if Ekind (Scop) in Subprogram_Kind and then Is_Inlined (Scop) then\n+               return True;\n+            end if;\n+\n+            Scop := Scope (Scop);\n+         end loop;\n+\n+         return False;\n+      end Is_Inlined_Or_Child_Of_Inlined;\n+\n    begin\n-      --  Must be inlined (or inlined renaming)\n+      --  Must be in the main unit or inlined (or child of inlined)\n \n-      if (Is_In_Main_Unit (N)\n-           or else Is_Inlined (Subp)\n-           or else Is_Inlined (Alias (Subp)))\n+      if (Is_In_Main_Unit (N) or else Is_Inlined_Or_Child_Of_Inlined (Subp))\n \n         --  Must be generating code or analyzing code in ASIS/GNATprove mode\n "}, {"sha": "9ba25d5e0de16ca44e8cd158a658abde180ede21", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -12458,7 +12458,7 @@ package body Sem_Ch13 is\n             end case;\n          end if;\n \n-         Next (ASN);\n+         ASN := Next_Rep_Item (ASN);\n       end loop;\n    end Resolve_Aspect_Expressions;\n "}, {"sha": "dabacf576df7e43b68a803cd4e349af33d3aed15", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -9264,7 +9264,7 @@ package body Sem_Prag is\n       --------------------------\n \n       --  The Rational profile includes Implicit_Packing, Use_Vads_Size, and\n-      --  and extension to the semantics of renaming declarations.\n+      --  extension to the semantics of renaming declarations.\n \n       procedure Set_Rational_Profile is\n       begin"}, {"sha": "64f019bde32a7969a684718f1a35c8872c00543a", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7737d1d375636232744501175edef1ae3ff5e7d/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=b7737d1d375636232744501175edef1ae3ff5e7d", "patch": "@@ -2711,6 +2711,17 @@ package body Sem_Type is\n          then\n             Error_Msg_NE (\"(Ada 2005) does not implement interface }\",\n                           L, Etype (Class_Wide_Type (Etype (R))));\n+\n+         --  Specialize message if one operand is a limited view, a priori\n+         --  unrelated to all other types.\n+\n+         elsif From_Limited_With (Etype (R)) then\n+            Error_Msg_NE (\"limited view of& not compatible with context\",\n+                           R, Etype (R));\n+\n+         elsif From_Limited_With (Etype (L)) then\n+            Error_Msg_NE (\"limited view of& not compatible with context\",\n+                           L, Etype (L));\n          else\n             Error_Msg_N (\"incompatible types\", Parent (L));\n          end if;"}]}