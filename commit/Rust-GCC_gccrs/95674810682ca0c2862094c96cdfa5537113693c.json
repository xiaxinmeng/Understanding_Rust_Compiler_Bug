{"sha": "95674810682ca0c2862094c96cdfa5537113693c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU2NzQ4MTA2ODJjYTBjMjg2MjA5NGM5NmNkZmE1NTM3MTEzNjkzYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-07-14T14:57:46Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-07-14T14:57:46Z"}, "message": "rs6000.c (function_arg_padding): Do not pad SFmode for TARGET_64BIT.\n\n\t* config/rs6000/rs6000.c (function_arg_padding): Do not pad SFmode\n\tfor TARGET_64BIT.\n\t(rs6000_gimplify_va_arg): Use size_int instead of build_int_2.\n\nFrom-SVN: r84688", "tree": {"sha": "9cf6a15bacfeea957e19606a65d37929ecb6a846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf6a15bacfeea957e19606a65d37929ecb6a846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95674810682ca0c2862094c96cdfa5537113693c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95674810682ca0c2862094c96cdfa5537113693c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95674810682ca0c2862094c96cdfa5537113693c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95674810682ca0c2862094c96cdfa5537113693c/comments", "author": null, "committer": null, "parents": [{"sha": "8063a3559dc757ad8336b03f693856b28e19c86c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8063a3559dc757ad8336b03f693856b28e19c86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8063a3559dc757ad8336b03f693856b28e19c86c"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "7110df0fabf624cdb55df12db5c72b19dd877efe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95674810682ca0c2862094c96cdfa5537113693c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95674810682ca0c2862094c96cdfa5537113693c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95674810682ca0c2862094c96cdfa5537113693c", "patch": "@@ -1,3 +1,9 @@\n+2004-07-14  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (function_arg_padding): Do not pad SFmode\n+\tfor TARGET_64BIT.\n+\t(rs6000_gimplify_va_arg): Use size_int instead of build_int_2.\n+\n 2004-07-14  Roger Sayle  <roger@eyesopen.com>\n \n \t* expmed.c (expand_sdiv_pow2): New function to expand signed division"}, {"sha": "704b8d3a05e5c5563ce3bd41fa2e870f19c1aa10", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95674810682ca0c2862094c96cdfa5537113693c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95674810682ca0c2862094c96cdfa5537113693c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=95674810682ca0c2862094c96cdfa5537113693c", "patch": "@@ -4597,6 +4597,10 @@ function_arg_padding (enum machine_mode mode, tree type)\n \treturn upward;\n     }\n \n+  /* SFmode parameters are not padded.  */\n+  if (TARGET_64BIT && mode == SFmode)\n+    return none;\n+\n   /* Fall back to the default.  */\n   return DEFAULT_FUNCTION_ARG_PADDING (mode, type);\n }\n@@ -5463,7 +5467,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t{\n \t  /* Args grow upward.  */\n \t  t = build2 (POSTINCREMENT_EXPR, TREE_TYPE (valist), valist,\n-\t\t      build_int_2 (POINTER_SIZE / BITS_PER_UNIT, 0));\n+\t\t      size_int (POINTER_SIZE / BITS_PER_UNIT));\n \t  t = build1 (NOP_EXPR, build_pointer_type (ptrtype), t);\n \t  t = build_fold_indirect_ref (t);\n \t  return build_fold_indirect_ref (t);\n@@ -5572,25 +5576,23 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n       if (n_reg == 2)\n \t{\n \t  u = build2 (BIT_AND_EXPR, TREE_TYPE (reg), reg,\n-\t\t     build_int_2 (n_reg - 1, 0));\n+\t\t     size_int (n_reg - 1));\n \t  u = build2 (POSTINCREMENT_EXPR, TREE_TYPE (reg), reg, u);\n \t}\n \n-      t = build_int_2 (8 - n_reg + 1, 0);\n-      TREE_TYPE (t) = TREE_TYPE (reg);\n+      t = fold_convert (TREE_TYPE (reg), size_int (8 - n_reg + 1));\n       t = build2 (GE_EXPR, boolean_type_node, u, t);\n       u = build1 (GOTO_EXPR, void_type_node, lab_false);\n       t = build3 (COND_EXPR, void_type_node, t, u, NULL_TREE);\n       gimplify_and_add (t, pre_p);\n \n       t = sav;\n       if (sav_ofs)\n-\tt = build2 (PLUS_EXPR, ptr_type_node, sav, build_int_2 (sav_ofs, 0));\n+\tt = build2 (PLUS_EXPR, ptr_type_node, sav, size_int (sav_ofs));\n \n-      u = build2 (POSTINCREMENT_EXPR, TREE_TYPE (reg), reg,\n-\t\t build_int_2 (n_reg, 0));\n+      u = build2 (POSTINCREMENT_EXPR, TREE_TYPE (reg), reg, size_int (n_reg));\n       u = build1 (CONVERT_EXPR, integer_type_node, u);\n-      u = build2 (MULT_EXPR, integer_type_node, u, build_int_2 (sav_scale, 0));\n+      u = build2 (MULT_EXPR, integer_type_node, u, size_int (sav_scale));\n       t = build2 (PLUS_EXPR, ptr_type_node, t, u);\n \n       t = build2 (MODIFY_EXPR, void_type_node, addr, t);\n@@ -5606,7 +5608,7 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \t{\n \t  /* Ensure that we don't find any more args in regs.\n \t     Alignment has taken care of the n_reg == 2 case.  */\n-\t  t = build (MODIFY_EXPR, TREE_TYPE (reg), reg, build_int_2 (8, 0));\n+\t  t = build (MODIFY_EXPR, TREE_TYPE (reg), reg, size_int (8));\n \t  gimplify_and_add (t, pre_p);\n \t}\n     }\n@@ -5617,15 +5619,15 @@ rs6000_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n   t = ovf;\n   if (align != 1)\n     {\n-      t = build2 (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (align - 1, 0));\n+      t = build2 (PLUS_EXPR, TREE_TYPE (t), t, size_int (align - 1));\n       t = build2 (BIT_AND_EXPR, TREE_TYPE (t), t, build_int_2 (-align, -1));\n     }\n   gimplify_expr (&t, pre_p, NULL, is_gimple_val, fb_rvalue);\n \n   u = build2 (MODIFY_EXPR, void_type_node, addr, t);\n   gimplify_and_add (u, pre_p);\n \n-  t = build2 (PLUS_EXPR, TREE_TYPE (t), t, build_int_2 (size, 0));\n+  t = build2 (PLUS_EXPR, TREE_TYPE (t), t, size_int (size));\n   t = build2 (MODIFY_EXPR, TREE_TYPE (ovf), ovf, t);\n   gimplify_and_add (t, pre_p);\n "}]}