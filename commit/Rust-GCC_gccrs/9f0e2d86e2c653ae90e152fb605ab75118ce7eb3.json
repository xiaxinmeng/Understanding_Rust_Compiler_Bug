{"sha": "9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwZTJkODZlMmM2NTNhZTkwZTE1MmZiNjA1YWI3NTExOGNlN2ViMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-12T19:14:05Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-02-12T19:14:05Z"}, "message": "c-parse.in (maybe_type_qual): Delete.\n\n\t* c-parse.in (maybe_type_qual): Delete.\n\t(maybe_volatile, simple_asm_expr, asmdef, asm_stmt)\n\t(asm_argument): New grammar rules.\n\t(extdef_1): Use asmdef.\n\t(maybeasm): Move down with other asm rules; use simple_asm_expr.\n\t(xexpr): Move up with other expression rules.\n\t(stmt): Use asm_stmt.\n\n\t* c-typeck.c (build_asm_expr): New function - body mostly\n\tpulled from build_asm_stmt.\n\t(build_asm_stmt): Just handle tacking on the volatile qualifier.\n\t* c-tree.h (build_asm_expr, build_asm_stmt): Update prototypes.\n\nFrom-SVN: r77723", "tree": {"sha": "439eeb30011254df0f56aabdcbd5252e64ac3b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/439eeb30011254df0f56aabdcbd5252e64ac3b01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/comments", "author": null, "committer": null, "parents": [{"sha": "35f5add9236429ef410635f4180d6ea3f29010c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35f5add9236429ef410635f4180d6ea3f29010c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35f5add9236429ef410635f4180d6ea3f29010c8"}], "stats": {"total": 200, "additions": 110, "deletions": 90}, "files": [{"sha": "346d86f1d86cc7968f7982945b514796d29331a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "patch": "@@ -1,3 +1,18 @@\n+2004-02-12  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-parse.in (maybe_type_qual): Delete.\n+\t(maybe_volatile, simple_asm_expr, asmdef, asm_stmt)\n+\t(asm_argument): New grammar rules.\n+\t(extdef_1): Use asmdef.\n+\t(maybeasm): Move down with other asm rules; use simple_asm_expr.\n+\t(xexpr): Move up with other expression rules.\n+\t(stmt): Use asm_stmt.\n+\n+\t* c-typeck.c (build_asm_expr): New function - body mostly\n+\tpulled from build_asm_stmt.\n+\t(build_asm_stmt): Just handle tacking on the volatile qualifier.\n+\t* c-tree.h (build_asm_expr, build_asm_stmt): Update prototypes.\n+\n 2004-02-12  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR bootstrap/13617\n@@ -197,7 +212,7 @@\n \n 2004-02-10  Matt Kraai  <kraai@alumni.cmu.edu>\n \n-        * doc/install.texi: Remove extra cd.\n+\t* doc/install.texi: Remove extra cd.\n \n 2004-02-10  Ziemowit Laski  <zlaski@apple.com>\n \n@@ -383,7 +398,7 @@\n \t* config/m68k/linux.h, config/m68k/m68k.c: Remove traling whitespace.\n \n 2004-02-08  Andreas Schwab  <schwab@suse.de>\n-            Bernardo Innocenti  <bernie@develer.com>\n+\t    Bernardo Innocenti  <bernie@develer.com>\n \n \t* config/m68k/m68k.h (REGISTER_NAMES): Prefix each name with\n \tREGISTER_PREFIX."}, {"sha": "7a68dbf077fcdbfb498e41943b049541d3d5648b", "filename": "gcc/c-parse.in", "status": "modified", "additions": 67, "deletions": 45, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "patch": "@@ -200,9 +200,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n %type <ttype> typespec_reserved_nonattr typespec_reserved_attr\n %type <ttype> typespec_nonreserved_nonattr\n \n-%type <ttype> scspec SCSPEC STATIC TYPESPEC TYPE_QUAL maybe_type_qual\n-%type <ttype> initdecls notype_initdecls initdcl notype_initdcl\n-%type <ttype> init maybeasm\n+%type <ttype> scspec SCSPEC STATIC TYPESPEC TYPE_QUAL maybe_volatile\n+%type <ttype> initdecls notype_initdecls initdcl notype_initdcl init\n+%type <ttype> simple_asm_expr maybeasm asmdef asm_stmt asm_argument\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n %type <ttype> any_word\n@@ -375,19 +375,12 @@ extdef:\n extdef_1:\n \tfndef\n \t| datadef\n+\t| asmdef\n+\t| extension extdef\n+\t\t{ RESTORE_EXT_FLAGS ($1); }\n @@ifobjc\n \t| objcdef\n @@end_ifobjc\n-\t| ASM_KEYWORD '(' expr ')' ';'\n-\t\t{ STRIP_NOPS ($3);\n-\t\t  if ((TREE_CODE ($3) == ADDR_EXPR\n-\t\t       && TREE_CODE (TREE_OPERAND ($3, 0)) == STRING_CST)\n-\t\t      || TREE_CODE ($3) == STRING_CST)\n-\t\t    assemble_asm ($3);\n-\t\t  else\n-\t\t    error (\"argument of `asm' is not a constant string\"); }\n-\t| extension extdef\n-\t\t{ RESTORE_EXT_FLAGS ($1); }\n \t;\n \n datadef:\n@@ -1392,13 +1385,6 @@ notype_initdecls:\n \t| notype_initdecls ',' maybe_resetattrs notype_initdcl\n \t;\n \n-maybeasm:\n-\t  /* empty */\n-\t\t{ $$ = NULL_TREE; }\n-\t| ASM_KEYWORD '(' STRING ')'\n-\t\t{ $$ = $3; }\n-\t;\n-\n initdcl:\n \t  declarator maybeasm maybe_attribute '='\n \t\t{ $<ttype>$ = start_decl ($1, current_declspecs, 1,\n@@ -2346,6 +2332,12 @@ for_init_stmt:\n \t\t{ check_for_loop_decls (); }\n \t;\n \n+xexpr:\n+\t/* empty */\n+\t\t{ $$ = NULL_TREE; }\n+\t| expr\n+\t;\n+\n /* Parse a single real statement, not including any labels.  */\n stmt:\n \t  compstmt\n@@ -2381,23 +2373,7 @@ stmt:\n \t| RETURN expr ';'\n                 { stmt_count++;\n \t\t  $$ = c_expand_return ($2); }\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ')' ';'\n-\t\t{ stmt_count++;\n-\t\t  $$ = simple_asm_stmt ($4); }\n-\t/* This is the case with just output operands.  */\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ')' ';'\n-\t\t{ stmt_count++;\n-\t\t  $$ = build_asm_stmt ($2, $4, $6, NULL_TREE, NULL_TREE); }\n-\t/* This is the case with input operands as well.  */\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'\n-\t  asm_operands ')' ';'\n-\t\t{ stmt_count++;\n-\t\t  $$ = build_asm_stmt ($2, $4, $6, $8, NULL_TREE); }\n-\t/* This is the case with clobbered registers as well.  */\n-\t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'\n-\t  asm_operands ':' asm_clobbers ')' ';'\n-\t\t{ stmt_count++;\n-\t\t  $$ = build_asm_stmt ($2, $4, $6, $8, $10); }\n+\t| asm_stmt\n \t| GOTO identifier ';'\n \t\t{ tree decl;\n \t\t  stmt_count++;\n@@ -2499,19 +2475,65 @@ label:\t  CASE expr_no_commas ':'\n \t\t}\n \t;\n \n-/* Either a type-qualifier or nothing.  First thing in an `asm' statement.  */\n+/* Asm expressions and statements */\n \n-maybe_type_qual:\n-\t/* empty */\n+/* simple_asm_expr is used in restricted contexts, where a full\n+   expression with inputs and outputs does not make sense.  */\n+simple_asm_expr:\n+\tASM_KEYWORD '(' STRING ')'\n+\t\t{ $$ = $3; }\n+\t;\n+\n+/* maybeasm: used for assembly names for declarations */\n+maybeasm:\n+\t  /* empty */\n \t\t{ $$ = NULL_TREE; }\n-\t| TYPE_QUAL\n-\t\t{ }\n+\t| simple_asm_expr\n \t;\n \n-xexpr:\n+/* asmdef: asm() outside a function body.  */\n+asmdef:\n+\tsimple_asm_expr ';'\n+\t\t{ assemble_asm ($1); }\n+\t;\n+\n+/* Full-blown asm statement with inputs, outputs, clobbers, and\n+   volatile tag allowed.  */\n+asm_stmt:\n+\tASM_KEYWORD maybe_volatile '(' asm_argument ')' ';'\n+\t\t{ stmt_count++;\n+\t\t  $$ = build_asm_stmt ($2, $4); }\n+\t;\n+\n+asm_argument:\n+\t/* no operands */\n+\tSTRING\n+\t\t{ $$ = build_asm_expr ($1, 0, 0, 0, true); }\n+\t/* output operands */\n+\t| STRING ':' asm_operands\n+\t\t{ $$ = build_asm_expr ($1, $3, 0, 0, false); }\n+\t/* output and input operands */\n+\t| STRING ':' asm_operands ':' asm_operands\n+\t\t{ $$ = build_asm_expr ($1, $3, $5, 0, false); }\n+\t/* output and input operands and clobbers */\n+\t| STRING ':' asm_operands ':' asm_operands ':' asm_clobbers\n+\t\t{ $$ = build_asm_expr ($1, $3, $5, $7, false); }\n+\t;\n+\n+/* Either 'volatile' or nothing.  First thing in an `asm' statement.  */\n+\n+maybe_volatile:\n \t/* empty */\n-\t\t{ $$ = NULL_TREE; }\n-\t| expr\n+\t\t{ $$ = 0; }\n+\t| TYPE_QUAL\n+\t\t{ if ($1 != ridpointers[RID_VOLATILE])\n+\t\t    {\n+\t\t      warning (\"%E qualifier ignored on asm\", $1);\n+\t\t      $$ = 0;\n+\t\t    }\n+\t\t  else\n+\t\t    $$ = $1;\n+\t\t}\n \t;\n \n /* These are the operands other than the first string and colon"}, {"sha": "1de2e25eab75e1eb4899e17f5e8baf67d43a7fc6", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "patch": "@@ -291,8 +291,8 @@ extern void pedwarn_c90 (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void pedwarn_c99 (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern tree c_start_case (tree);\n extern void c_finish_case (void);\n-extern tree simple_asm_stmt (tree);\n-extern tree build_asm_stmt (tree, tree, tree, tree, tree);\n+extern tree build_asm_expr (tree, tree, tree, tree, bool);\n+extern tree build_asm_stmt (tree, tree);\n extern tree c_convert_parm_for_inlining (tree, tree, tree, int);\n \n /* Set to 0 at beginning of a function definition, set to 1 if"}, {"sha": "ff37fea9216fddf0f8dd6ab88236e3f7318d13ce", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0e2d86e2c653ae90e152fb605ab75118ce7eb3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=9f0e2d86e2c653ae90e152fb605ab75118ce7eb3", "patch": "@@ -6002,52 +6002,28 @@ process_init_element (tree value)\n   constructor_range_stack = 0;\n }\n \f\n-/* Build a simple asm-statement, from one string literal.  */\n+/* Build a complete asm-statement, whose components are a CV_QUALIFIER\n+   (guaranteed to be 'volatile' or null) and ARGS (represented using\n+   an ASM_STMT node).  */\n tree\n-simple_asm_stmt (tree expr)\n+build_asm_stmt (tree cv_qualifier, tree args)\n {\n-  STRIP_NOPS (expr);\n-\n-  if (TREE_CODE (expr) == ADDR_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n-\n-  if (TREE_CODE (expr) == STRING_CST)\n-    {\n-      tree stmt;\n-\n-      /* Simple asm statements are treated as volatile.  */\n-      stmt = add_stmt (build_stmt (ASM_STMT, ridpointers[(int) RID_VOLATILE],\n-\t\t\t\t   expr, NULL_TREE, NULL_TREE, NULL_TREE));\n-      ASM_INPUT_P (stmt) = 1;\n-      return stmt;\n-    }\n-\n-  error (\"argument of `asm' is not a constant string\");\n-  return NULL_TREE;\n+  if (!TREE_OPERAND (args, 0))\n+    TREE_OPERAND (args, 0) = cv_qualifier;\n+  return add_stmt (args);\n }\n \n-/* Build an asm-statement, whose components are a CV_QUALIFIER, a\n-   STRING, some OUTPUTS, some INPUTS, and some CLOBBERS.  */\n-\n+/* Build an asm-expr, whose components are a STRING, some OUTPUTS,\n+   some INPUTS, and some CLOBBERS.  The latter three may be NULL.\n+   SIMPLE indicates whether there was anything at all after the\n+   string in the asm expression -- asm(\"blah\") and asm(\"blah\" : )\n+   are subtly different.  We use a ASM_STMT node to represent this.  */\n tree\n-build_asm_stmt (tree cv_qualifier, tree string, tree outputs, tree inputs,\n-\t\ttree clobbers)\n+build_asm_expr (tree string, tree outputs, tree inputs, tree clobbers,\n+\t\tbool simple)\n {\n   tree tail;\n-\n-  if (TREE_CODE (string) != STRING_CST)\n-    {\n-      error (\"asm template is not a string constant\");\n-      return NULL_TREE;\n-    }\n-\n-  if (cv_qualifier != NULL_TREE\n-      && cv_qualifier != ridpointers[(int) RID_VOLATILE])\n-    {\n-      warning (\"%s qualifier ignored on asm\",\n-\t       IDENTIFIER_POINTER (cv_qualifier));\n-      cv_qualifier = NULL_TREE;\n-    }\n+  tree args;\n \n   /* We can remove output conversions that change the type,\n      but not the mode.  */\n@@ -6086,8 +6062,15 @@ build_asm_stmt (tree cv_qualifier, tree string, tree outputs, tree inputs,\n   for (tail = inputs; tail; tail = TREE_CHAIN (tail))\n     TREE_VALUE (tail) = default_function_array_conversion (TREE_VALUE (tail));\n \n-  return add_stmt (build_stmt (ASM_STMT, cv_qualifier, string,\n-\t\t\t       outputs, inputs, clobbers));\n+  args = build_stmt (ASM_STMT, 0, string, outputs, inputs, clobbers);\n+\n+  /* Simple asm statements are treated as volatile.  */\n+  if (simple)\n+    {\n+      TREE_OPERAND (args, 0) = ridpointers[RID_VOLATILE];\n+      ASM_INPUT_P (args) = 1;\n+    }\n+  return args;\n }\n \n /* Expand an ASM statement with operands, handling output operands"}]}