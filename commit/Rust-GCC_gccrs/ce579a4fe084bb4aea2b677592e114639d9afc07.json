{"sha": "ce579a4fe084bb4aea2b677592e114639d9afc07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1NzlhNGZlMDg0YmI0YWVhMmI2Nzc1OTJlMTE0NjM5ZDlhZmMwNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-02-28T08:59:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-02-28T08:59:15Z"}, "message": "re PR debug/83917 (with -mcall-ms2sysv-xlogues, stepping into x86 tail-call restore stub gives bad backtrace)\n\n\tPR debug/83917\n\t* configure.ac (AS_HIDDEN_DIRECTIVE): AC_DEFINE_UNQUOTED this to\n\t$asm_hidden_op if visibility (\"hidden\") attribute works.\n\t(HAVE_AS_CFI_SECTIONS): New AC_DEFINE.\n\t* config/i386/i386-asm.h: Don't include auto-host.h.\n\t(PACKAGE_VERSION, PACKAGE_NAME, PACKAGE_STRING, PACKAGE_TARNAME,\n\tPACKAGE_URL): Don't undefine.\n\t(USE_GAS_CFI_DIRECTIVES): Don't use nor define this macro, instead\n\tguard cfi_startproc only on ifdef __GCC_HAVE_DWARF2_CFI_ASM.\n\t(FN_HIDDEN): Change guard from #ifdef HAVE_GAS_HIDDEN to\n\t#ifdef AS_HIDDEN_DIRECTIVE, use AS_HIDDEN_DIRECTIVE macro in the\n\tdefinition instead of hardcoded .hidden.\n\t* config/i386/cygwin.S: Include i386-asm.h first before .cfi_sections\n\tdirective.  Use #ifdef HAVE_AS_CFI_SECTIONS rather than\n\t#ifdef HAVE_GAS_CFI_SECTIONS_DIRECTIVE to guard .cfi_sections.\n\t(USE_GAS_CFI_DIRECTIVES): Don't define.\n\t* configure: Regenerated.\n\t* config.in: Likewise.\n\nFrom-SVN: r258057", "tree": {"sha": "ee17476149a90f9a012107fe31e62bdcb32f4996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee17476149a90f9a012107fe31e62bdcb32f4996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce579a4fe084bb4aea2b677592e114639d9afc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce579a4fe084bb4aea2b677592e114639d9afc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce579a4fe084bb4aea2b677592e114639d9afc07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce579a4fe084bb4aea2b677592e114639d9afc07/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "678127a85e78a86d680e33b208e1571dc2dc045f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678127a85e78a86d680e33b208e1571dc2dc045f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678127a85e78a86d680e33b208e1571dc2dc045f"}], "stats": {"total": 111, "additions": 89, "deletions": 22}, "files": [{"sha": "e93967799eade8ab0d7a698275452f2365bfdf29", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ce579a4fe084bb4aea2b677592e114639d9afc07", "patch": "@@ -1,3 +1,24 @@\n+2018-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/83917\n+\t* configure.ac (AS_HIDDEN_DIRECTIVE): AC_DEFINE_UNQUOTED this to\n+\t$asm_hidden_op if visibility (\"hidden\") attribute works.\n+\t(HAVE_AS_CFI_SECTIONS): New AC_DEFINE.\n+\t* config/i386/i386-asm.h: Don't include auto-host.h.\n+\t(PACKAGE_VERSION, PACKAGE_NAME, PACKAGE_STRING, PACKAGE_TARNAME,\n+\tPACKAGE_URL): Don't undefine.\n+\t(USE_GAS_CFI_DIRECTIVES): Don't use nor define this macro, instead\n+\tguard cfi_startproc only on ifdef __GCC_HAVE_DWARF2_CFI_ASM.\n+\t(FN_HIDDEN): Change guard from #ifdef HAVE_GAS_HIDDEN to\n+\t#ifdef AS_HIDDEN_DIRECTIVE, use AS_HIDDEN_DIRECTIVE macro in the\n+\tdefinition instead of hardcoded .hidden.\n+\t* config/i386/cygwin.S: Include i386-asm.h first before .cfi_sections\n+\tdirective.  Use #ifdef HAVE_AS_CFI_SECTIONS rather than\n+\t#ifdef HAVE_GAS_CFI_SECTIONS_DIRECTIVE to guard .cfi_sections.\n+\t(USE_GAS_CFI_DIRECTIVES): Don't define.\n+\t* configure: Regenerated.\n+\t* config.in: Likewise.\n+\n 2018-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/83917"}, {"sha": "d634af9d949741e26f5acc2606d40062d491dd8b", "filename": "libgcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=ce579a4fe084bb4aea2b677592e114639d9afc07", "patch": "@@ -1,8 +1,15 @@\n /* config.in.  Generated from configure.ac by autoheader.  */\n \n+/* Define to the .hidden-like directive if it exists. */\n+#undef AS_HIDDEN_DIRECTIVE\n+\n /* Define to 1 if the assembler supports AVX. */\n #undef HAVE_AS_AVX\n \n+/* Define to 1 if the assembler supports .cfi_sections .debug_frame directive.\n+   */\n+#undef HAVE_AS_CFI_SECTIONS\n+\n /* Define to 1 if the target assembler supports thread-local storage. */\n #undef HAVE_CC_TLS\n "}, {"sha": "ece17f82a68497e2fec07159f99a4fe3b764bba2", "filename": "libgcc/config/i386/cygwin.S", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfig%2Fi386%2Fcygwin.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfig%2Fi386%2Fcygwin.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygwin.S?ref=ce579a4fe084bb4aea2b677592e114639d9afc07", "patch": "@@ -23,13 +23,11 @@\n  * <http://www.gnu.org/licenses/>.\n  */\n \n-#ifdef HAVE_GAS_CFI_SECTIONS_DIRECTIVE\n-# define USE_GAS_CFI_DIRECTIVES 1\n+#include \"i386-asm.h\"\n+\n+#ifdef HAVE_AS_CFI_SECTIONS\n \t.cfi_sections\t.debug_frame\n-#else\n-# define USE_GAS_CFI_DIRECTIVES 0\n #endif\n-#include \"i386-asm.h\"\n \n #ifdef L_chkstk\n /* Function prologue calls __chkstk to probe the stack when allocating more"}, {"sha": "b5b7fb44fa515120f20016f3062e89592662c99e", "filename": "libgcc/config/i386/i386-asm.h", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfig%2Fi386%2Fi386-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfig%2Fi386%2Fi386-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fi386-asm.h?ref=ce579a4fe084bb4aea2b677592e114639d9afc07", "patch": "@@ -27,21 +27,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define I386_ASM_H\n \n #include \"auto-target.h\"\n-#undef PACKAGE_VERSION\n-#undef PACKAGE_NAME\n-#undef PACKAGE_STRING\n-#undef PACKAGE_TARNAME\n-#undef PACKAGE_URL\n-#include \"auto-host.h\"\n-\n-#ifndef USE_GAS_CFI_DIRECTIVES\n-# ifdef __GCC_HAVE_DWARF2_CFI_ASM\n-#  define USE_GAS_CFI_DIRECTIVES 1\n-# else\n-#  define USE_GAS_CFI_DIRECTIVES 0\n-# endif\n-#endif\n-#if USE_GAS_CFI_DIRECTIVES\n+\n+#ifdef __GCC_HAVE_DWARF2_CFI_ASM\n # define cfi_startproc()\t\t.cfi_startproc\n # define cfi_endproc()\t\t\t.cfi_endproc\n # define cfi_adjust_cfa_offset(X) \t.cfi_adjust_cfa_offset X\n@@ -76,8 +63,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifdef __ELF__\n # define FN_TYPE(fn) .type fn,@function\n # define FN_SIZE(fn) .size fn,.-fn\n-# ifdef HAVE_GAS_HIDDEN\n-#  define FN_HIDDEN(fn) .hidden fn\n+# ifdef AS_HIDDEN_DIRECTIVE\n+#  define FN_HIDDEN(fn) AS_HIDDEN_DIRECTIVE fn\n # endif\n #else\n # define FN_TYPE(fn)"}, {"sha": "7399c862bb0937323261bd1a9ea35808067a11a4", "filename": "libgcc/configure", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=ce579a4fe084bb4aea2b677592e114639d9afc07", "patch": "@@ -5214,11 +5214,47 @@ $as_echo \"$libgcc_cv_hidden_visibility_attribute\" >&6; }\n \n if test $libgcc_cv_hidden_visibility_attribute = yes; then\n     vis_hide='-fvisibility=hidden -DHIDE_EXPORTS'\n+\n+cat >>confdefs.h <<_ACEOF\n+#define AS_HIDDEN_DIRECTIVE $asm_hidden_op\n+_ACEOF\n+\n else\n     vis_hide=\n fi\n \n \n+# Check for .cfi_sections .debug_frame support.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for .cfi_sections .debug_frame\" >&5\n+$as_echo_n \"checking for .cfi_sections .debug_frame... \" >&6; }\n+if test \"${libgcc_cv_cfi_sections_directive+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\techo 'int foo (int, char *);' > conftest.c\n+\techo 'int bar (int x) { char *y = __builtin_alloca (x); return foo (x + 1, y) + 1; }' >> conftest.c\n+\tlibgcc_cv_cfi_sections_directive=no\n+\tif { ac_try='${CC-cc} -Werror -g -fno-asynchronous-unwind-tables -fno-unwind-tables -fno-exceptions -S conftest.c -o conftest.s 1>&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }; then\n+\t    if grep \"\\\\.cfi_sections.*\\\\.debug_frame\" conftest.s >/dev/null; then\n+\t\tlibgcc_cv_cfi_sections_directive=yes\n+\t    fi\n+\tfi\n+\trm -f conftest.*\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_cfi_sections_directive\" >&5\n+$as_echo \"$libgcc_cv_cfi_sections_directive\" >&6; }\n+if test $libgcc_cv_cfi_sections_directive = yes; then\n+\n+$as_echo \"#define HAVE_AS_CFI_SECTIONS 1\" >>confdefs.h\n+\n+fi\n+\n # See if we have thread-local storage.  We can only test assembler\n # since link-time and run-time tests require the newly built\n # gcc, which can't be used to build executable due to that libgcc"}, {"sha": "b59aa746afc6c93cad70961c7a3a211a632538c6", "filename": "libgcc/configure.ac", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce579a4fe084bb4aea2b677592e114639d9afc07/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=ce579a4fe084bb4aea2b677592e114639d9afc07", "patch": "@@ -486,11 +486,29 @@ AC_CACHE_CHECK([for __attribute__((visibility(\"hidden\")))],\n \n if test $libgcc_cv_hidden_visibility_attribute = yes; then\n     vis_hide='-fvisibility=hidden -DHIDE_EXPORTS'\n+    AC_DEFINE_UNQUOTED(AS_HIDDEN_DIRECTIVE, $asm_hidden_op, [Define to the .hidden-like directive if it exists.])\n else\n     vis_hide=\n fi\n AC_SUBST(vis_hide)\n \n+# Check for .cfi_sections .debug_frame support.\n+AC_CACHE_CHECK([for .cfi_sections .debug_frame],\n+    libgcc_cv_cfi_sections_directive, [\n+\techo 'int foo (int, char *);' > conftest.c\n+\techo 'int bar (int x) { char *y = __builtin_alloca (x); return foo (x + 1, y) + 1; }' >> conftest.c\n+\tlibgcc_cv_cfi_sections_directive=no\n+\tif AC_TRY_COMMAND(${CC-cc} -Werror -g -fno-asynchronous-unwind-tables -fno-unwind-tables -fno-exceptions -S conftest.c -o conftest.s 1>&AS_MESSAGE_LOG_FD); then\n+\t    if grep \"\\\\.cfi_sections.*\\\\.debug_frame\" conftest.s >/dev/null; then\n+\t\tlibgcc_cv_cfi_sections_directive=yes\n+\t    fi\n+\tfi\n+\trm -f conftest.*\n+    ])\n+if test $libgcc_cv_cfi_sections_directive = yes; then\n+    AC_DEFINE(HAVE_AS_CFI_SECTIONS, 1, [Define to 1 if the assembler supports .cfi_sections .debug_frame directive.])\n+fi\n+\n # See if we have thread-local storage.  We can only test assembler\n # since link-time and run-time tests require the newly built\n # gcc, which can't be used to build executable due to that libgcc"}]}