{"sha": "1ed37bfd37792f173fb9feb2f2513b72c22930cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVkMzdiZmQzNzc5MmYxNzNmYjlmZWIyZjI1MTNiNzJjMjI5MzBjZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-30T22:30:32Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-30T22:30:32Z"}, "message": "(FUNCTION_PROLOGUE): use __GLOBAL_OFFSET_TABLE_, not _GLOBAL_OFFSET_TABLE_.\n\n(LEGITIMATE_CONSTANT_P, LEGITIMATE_PIC_OPERAND_P): Use\nLEGITIMATE_PIC_OPERAND_P, not LEGITIMATE_CONSTANT_P,\nto set current_function_uses_pic_offset_table.\n(INDIRECTABLE_1_ADDRESS_P): Baseregisters are not legal\nfor {LABEL,SYMBOL}_REFS when emitting pic.\n(GO_IF_INDEXABLE_ADDRESS): INDIRECTABLE_1_ADDRESSes are indexable too.\n\nFrom-SVN: r6926", "tree": {"sha": "a66281fd6cae7f7dd262bf19aef87a706614a0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66281fd6cae7f7dd262bf19aef87a706614a0c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ed37bfd37792f173fb9feb2f2513b72c22930cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed37bfd37792f173fb9feb2f2513b72c22930cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed37bfd37792f173fb9feb2f2513b72c22930cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed37bfd37792f173fb9feb2f2513b72c22930cd/comments", "author": null, "committer": null, "parents": [{"sha": "4fa6668b453cff1474cb8b6f5511ad444a306e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa6668b453cff1474cb8b6f5511ad444a306e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa6668b453cff1474cb8b6f5511ad444a306e1f"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "af68772874181d5c5e86a88365a47d3b1bd29a93", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed37bfd37792f173fb9feb2f2513b72c22930cd/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed37bfd37792f173fb9feb2f2513b72c22930cd/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=1ed37bfd37792f173fb9feb2f2513b72c22930cd", "patch": "@@ -603,12 +603,12 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n       fprintf (FILE, \"\\tsprd sb,tos\\n\");\t\t\t\\\n       if (TARGET_REGPARM)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\taddr _GLOBAL_OFFSET_TABLE_(pc),tos\\n\"); \\\n+\t  fprintf (FILE, \"\\taddr __GLOBAL_OFFSET_TABLE_(pc),tos\\n\"); \\\n \t  fprintf (FILE, \"\\tlprd sb,tos\\n\");\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\taddr _GLOBAL_OFFSET_TABLE_(pc),r0\\n\"); \\\n+\t  fprintf (FILE, \"\\taddr __GLOBAL_OFFSET_TABLE_(pc),r0\\n\"); \\\n \t  fprintf (FILE, \"\\tlprd sb,r0\\n\");\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n@@ -851,12 +851,7 @@ __transfer_from_trampoline ()\t\t\\\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n \n-extern int current_function_uses_pic_offset_table, flag_pic;\n-#define LEGITIMATE_CONSTANT_P(X) \\\n-  (((flag_pic && ! current_function_uses_pic_offset_table\t\\\n-     && global_symbolic_reference_mentioned_p (X))?\t\t\\\n-      (current_function_uses_pic_offset_table = 1):0\t\t\\\n-   ), 1)\n+#define LEGITIMATE_CONSTANT_P(X) 1\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n@@ -910,7 +905,10 @@ extern int current_function_uses_pic_offset_table, flag_pic;\n    || (GET_CODE (X) == PLUS\t\t\t\t\t\t\\\n        && GET_CODE (XEXP (X, 0)) == REG\t\t\t\t\t\\\n        && REG_OK_FOR_BASE_P (XEXP (X, 0))\t\t\t\t\\\n-       && CONSTANT_ADDRESS_P (XEXP (X, 1))\t\t\t\t\\\n+       && (flag_pic ? \t\t\t\t\t\t\t\\\n+\t     CONSTANT_ADDRESS_NO_LABEL_P (XEXP (X, 1))\t \t\t\\\n+\t   :\t\t\t\t\t\t\t\t\\\n+\t     CONSTANT_ADDRESS_P (XEXP (X, 1))) \t\t\t\t\\\n        && (GET_CODE (X) != CONST_INT || NS32K_DISPLACEMENT_P (INTVAL (X)))))\n \n /* 1 if integer I will fit in a 4 byte displacement field.\n@@ -963,6 +961,7 @@ extern int current_function_uses_pic_offset_table, flag_pic;\n #define GO_IF_INDEXABLE_ADDRESS(X, ADDR) \\\n { if (GET_CODE (X) == REG && REG_OK_FOR_BASE_P (X)) goto ADDR;\t\t\\\n   if (INDIRECTABLE_2_ADDRESS_P (X)) goto ADDR;\t\t\t\t\\\n+  if (INDIRECTABLE_1_ADDRESS_P (X)) goto ADDR;\t\t\t\t\\\n }\n \n /* 1 if PROD is either a reg times size of mode MODE\n@@ -992,7 +991,7 @@ extern int current_function_uses_pic_offset_table, flag_pic;\n   extern int current_function_uses_pic_offset_table, flag_pic;\t\t\\\n   xfooy = X;\t\t\t\t\t\t\t\t\\\n   if (flag_pic && ! current_function_uses_pic_offset_table\t\t\\\n-      && global_symbolic_reference_mentioned_p (X))\t\t\t\\\n+      && global_symbolic_reference_mentioned_p (X, 1))\t\t\t\\\n     current_function_uses_pic_offset_table = 1;\t\t\t\t\\\n   GO_IF_NONINDEXED_ADDRESS (xfooy, ADDR);\t\t\t\t\\\n   if (GET_CODE (xfooy) == PLUS)\t\t\t\t\t\t\\\n@@ -1029,6 +1028,17 @@ extern int current_function_uses_pic_offset_table, flag_pic;\n \n #define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)   {}\n \n+/* Nonzero if the constant value X is a legitimate general operand\n+   when generating PIC code.  It is given that flag_pic is on and \n+   that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n+\n+extern int current_function_uses_pic_offset_table, flag_pic;\n+#define LEGITIMATE_PIC_OPERAND_P(X) \\\n+  (((! current_function_uses_pic_offset_table\t\t\t\\\n+     && global_symbolic_reference_mentioned_p (X, 1))?\t\t\\\n+      (current_function_uses_pic_offset_table = 1):0\t\t\\\n+   ), 1)\n+\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or\n    function named by the symbol (such as what section it is in)."}]}