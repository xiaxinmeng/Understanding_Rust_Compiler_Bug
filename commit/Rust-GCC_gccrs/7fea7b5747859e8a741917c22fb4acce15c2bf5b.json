{"sha": "7fea7b5747859e8a741917c22fb4acce15c2bf5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlYTdiNTc0Nzg1OWU4YTc0MTkxN2MyMmZiNGFjY2UxNWMyYmY1Yg==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2018-09-26T09:17:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:17:51Z"}, "message": "[Ada] Illegal formal objects associated with anonymous acc-to-subp args\n\nThe compiler was incorrectly accepting generic instantiations with\nformal objects of named access-to-subprogram types associated with an\nactual of an anonymous access-to-subprogram type.\nAnalyze_Object_Declaration tests for objects initialized anonymous\naccess-to-subprogram values, and wraps a conversion around the argument,\nwhich normally will result in error checks during resolution in\nValid_Conversion, but the conversion was only created when the\ninitialization expression Comes_From_Source, which prevented the\nconversion wrapping from happening for constant declarations resulting\nfrom generic expansion. The test for Comes_From_Source was removed.\n\nThe following test must report the error output given further below for\nthe three constructs marked as errors when compiled with this command:\n\ngcc -c -gnatj70 bad_anon_access_instance.adb\n\nprocedure Bad_Anon_Access_Instance (Anon_Acc : access procedure) is\n\n   type Ref is access procedure;\n\n   Ref_1 : Ref := Anon_Acc;           -- ERROR (flagged by GNAT)\n\n   Ref_2 : constant Ref := Anon_Acc;  -- ERROR (flagged by GNAT)\n\n   generic\n      Formal_Ref : Ref;\n   package Gen is\n   end Gen;\n\n   package Inst\n     is new Gen (Formal_Ref => Anon_Acc); -- ERROR (but not flagged by GNAT)\n\nbegin\n   null;\nend Bad_Anon_Access_Instance;\n\n-------------\nError output:\n-------------\n\nbad_anon_access_instance.adb:4:19: illegal attempt to store anonymous\n                                   access to subprogram, value has\n                                   deeper accessibility than any\n                                   master (RM 3.10.2 (13)), use named\n                                   access type for \"Anon_Acc\" instead\n                                   of access parameter\nbad_anon_access_instance.adb:6:28: illegal attempt to store anonymous\n                                   access to subprogram, value has\n                                   deeper accessibility than any\n                                   master (RM 3.10.2 (13)), use named\n                                   access type for \"Anon_Acc\" instead\n                                   of access parameter\nbad_anon_access_instance.adb:14:32: illegal attempt to store\n                                    anonymous access to subprogram,\n                                    value has deeper accessibility\n                                    than any master (RM 3.10.2 (13)),\n                                    use named access type for\n                                    \"Anon_Acc\" instead of access\n                                    parameter\n\n2018-09-26  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Remove test for\n\tComes_From_Source, which prevented implicit conversions from\n\tbeing applied to anonymous access-to-subprogram formals in\n\tconstant declartions that arise from instance associations for\n\tgeneric formal objects.  Add RM and AARM references to comment.\n\nFrom-SVN: r264618", "tree": {"sha": "dfecd24f0d17c1e959e69d425b598602f88ba9f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfecd24f0d17c1e959e69d425b598602f88ba9f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fea7b5747859e8a741917c22fb4acce15c2bf5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fea7b5747859e8a741917c22fb4acce15c2bf5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fea7b5747859e8a741917c22fb4acce15c2bf5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fea7b5747859e8a741917c22fb4acce15c2bf5b/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95f2be29446f6d04e4b221b228eac190057d839b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f2be29446f6d04e4b221b228eac190057d839b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f2be29446f6d04e4b221b228eac190057d839b"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "e4ab23db68ce8cb62a105e79f4244bc7e1944b0b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fea7b5747859e8a741917c22fb4acce15c2bf5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fea7b5747859e8a741917c22fb4acce15c2bf5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fea7b5747859e8a741917c22fb4acce15c2bf5b", "patch": "@@ -1,3 +1,11 @@\n+2018-09-26  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Remove test for\n+\tComes_From_Source, which prevented implicit conversions from\n+\tbeing applied to anonymous access-to-subprogram formals in\n+\tconstant declartions that arise from instance associations for\n+\tgeneric formal objects.  Add RM and AARM references to comment.\n+\n 2018-09-26  Olivier Hainque  <hainque@adacore.com>\n \n \t* opt.ads (OpenAcc_Enabled): New flag. False by default. True"}, {"sha": "cf45ccc295914b89a2c4d3bc2f18e459b1c99abb", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fea7b5747859e8a741917c22fb4acce15c2bf5b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fea7b5747859e8a741917c22fb4acce15c2bf5b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7fea7b5747859e8a741917c22fb4acce15c2bf5b", "patch": "@@ -4286,12 +4286,11 @@ package body Sem_Ch3 is\n          else\n \n             --  If the expression is a formal that is a \"subprogram pointer\"\n-            --  this is illegal in accessibility terms. Add an explicit\n-            --  conversion to force the corresponding check, as is done for\n-            --  assignments.\n+            --  this is illegal in accessibility terms (see RM 3.10.2 (13.1/2)\n+            --  and AARM 3.10.2 (13.b/2)). Add an explicit conversion to force\n+            --  the corresponding check, as is done for assignments.\n \n-            if Comes_From_Source (N)\n-              and then Is_Entity_Name (E)\n+            if Is_Entity_Name (E)\n               and then Present (Entity (E))\n               and then Is_Formal (Entity (E))\n               and then"}]}