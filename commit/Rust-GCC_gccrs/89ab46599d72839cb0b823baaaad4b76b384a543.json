{"sha": "89ab46599d72839cb0b823baaaad4b76b384a543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhYjQ2NTk5ZDcyODM5Y2IwYjgyM2JhYWFhZDRiNzZiMzg0YTU0Mw==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-07-10T01:01:11Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-07-10T01:01:11Z"}, "message": "re PR rtl-optimization/32664 ([sh] ICE in create_pre_exit, at mode-switching.c:373)\n\n\tPR rtl-optimization/32664\n\t* mode-switching.c (create_pre_exit): Skip barrier insns.\n\nFrom-SVN: r126507", "tree": {"sha": "178762480d117e6b39ac6b9f575f63df1f6642e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/178762480d117e6b39ac6b9f575f63df1f6642e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ab46599d72839cb0b823baaaad4b76b384a543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ab46599d72839cb0b823baaaad4b76b384a543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ab46599d72839cb0b823baaaad4b76b384a543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ab46599d72839cb0b823baaaad4b76b384a543/comments", "author": null, "committer": null, "parents": [{"sha": "823c696f9b593b5b7225d87587fba3f2d6acd41f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823c696f9b593b5b7225d87587fba3f2d6acd41f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823c696f9b593b5b7225d87587fba3f2d6acd41f"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "0261aa571381867b4e0b3b5aae42e16e73964257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab46599d72839cb0b823baaaad4b76b384a543/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab46599d72839cb0b823baaaad4b76b384a543/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ab46599d72839cb0b823baaaad4b76b384a543", "patch": "@@ -1,3 +1,8 @@\n+2007-07-10  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR rtl-optimization/32664\n+\t* mode-switching.c (create_pre_exit): Skip barrier insns.\n+\n 2007-07-10  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-scalar-evolution.c (scev_const_prop): Add arguments to"}, {"sha": "e935acdd9792dce13673d1bed5b0a39337389bfa", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ab46599d72839cb0b823baaaad4b76b384a543/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ab46599d72839cb0b823baaaad4b76b384a543/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=89ab46599d72839cb0b823baaaad4b76b384a543", "patch": "@@ -246,21 +246,37 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n \n \t\tif (INSN_P (return_copy))\n \t\t  {\n-\t\t    if (GET_CODE (PATTERN (return_copy)) == USE\n-\t\t\t&& GET_CODE (XEXP (PATTERN (return_copy), 0)) == REG\n-\t\t\t&& (FUNCTION_VALUE_REGNO_P\n-\t\t\t    (REGNO (XEXP (PATTERN (return_copy), 0)))))\n-\t\t      {\n-\t\t\tmaybe_builtin_apply = 1;\n-\t\t\tlast_insn = return_copy;\n-\t\t\tcontinue;\n-\t\t      }\n-\t\t    if (GET_CODE (PATTERN (return_copy)) == ASM_INPUT\n-\t\t\t&& strcmp (XSTR (PATTERN (return_copy), 0), \"\") == 0)\n+\t\t    return_copy_pat = PATTERN (return_copy);\n+\t\t    switch (GET_CODE (return_copy_pat))\n \t\t      {\n+\t\t      case USE:\n+\t\t\t/* Skip __builtin_apply pattern.  */\n+\t\t\tif (GET_CODE (XEXP (return_copy_pat, 0)) == REG\n+\t\t\t    && (FUNCTION_VALUE_REGNO_P\n+\t\t\t\t(REGNO (XEXP (return_copy_pat, 0)))))\n+\t\t\t  {\n+\t\t\t    maybe_builtin_apply = 1;\n+\t\t\t    last_insn = return_copy;\n+\t\t\t    continue;\n+\t\t\t  }\n+\t\t\tbreak;\n+\n+\t\t      case ASM_OPERANDS:\n+\t\t\t/* Skip barrier insns.  */\n+\t\t\tif (!MEM_VOLATILE_P (return_copy_pat))\n+\t\t\t  break;\n+\n+\t\t\t/* Fall through.  */\n+\n+\t\t      case ASM_INPUT:\n+\t\t      case UNSPEC_VOLATILE:\n \t\t\tlast_insn = return_copy;\n \t\t\tcontinue;\n+\n+\t\t      default:\n+\t\t\tbreak;\n \t\t      }\n+\n \t\t    /* If the return register is not (in its entirety)\n \t\t       likely spilled, the return copy might be\n \t\t       partially or completely optimized away.  */"}]}