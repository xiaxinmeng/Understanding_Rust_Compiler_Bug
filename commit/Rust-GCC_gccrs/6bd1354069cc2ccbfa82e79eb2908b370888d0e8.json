{"sha": "6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkMTM1NDA2OWNjMmNjYmZhODJlNzllYjI5MDhiMzcwODg4ZDBlOA==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2005-04-13T19:47:30Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2005-04-13T19:47:30Z"}, "message": "Fix result of folding of xor operation on two identical vectors.\n\nOKed by Roger Sayle.\n\nFrom-SVN: r98107", "tree": {"sha": "e476fa5d605916079ad210bcd6b6d58c66b60f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e476fa5d605916079ad210bcd6b6d58c66b60f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/comments", "author": null, "committer": null, "parents": [{"sha": "fda5e9366caaa3e5e5f80c7554ce5f47195e1ee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda5e9366caaa3e5e5f80c7554ce5f47195e1ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda5e9366caaa3e5e5f80c7554ce5f47195e1ee3"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "507bef1e9769bc4849da113bc8c6466528123d3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "patch": "@@ -1,3 +1,9 @@\n+2005-04-13 Fariborz Jahanian <fjahanian@apple.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1): Return\n+\tscalar or vector of constant 0, depending on the xor's \n+\tmode.\n+\n 2005-04-13  Dale Johannesen  <dalej@apple.com>\n \n         * objc/Make-lang.in (objc-lang.o):  Depend on tree-gimple.h."}, {"sha": "9e02a7a0458acf2bbdb3d06c65849b3aad6b91f3", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "patch": "@@ -1641,7 +1641,7 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n       if (trueop0 == trueop1\n \t  && ! side_effects_p (op0)\n \t  && GET_MODE_CLASS (mode) != MODE_CC)\n-\treturn const0_rtx;\n+\t return CONST0_RTX (mode);\n \n       /* Canonicalize XOR of the most significant bit to PLUS.  */\n       if ((GET_CODE (op1) == CONST_INT"}, {"sha": "86daa794ab44d008f9531501f6a525b5d986757c", "filename": "gcc/testsuite/gcc.dg/i386-xorps.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-xorps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bd1354069cc2ccbfa82e79eb2908b370888d0e8/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-xorps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-xorps.c?ref=6bd1354069cc2ccbfa82e79eb2908b370888d0e8", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-Os -msse2\" } */\n+\n+typedef float __m128 __attribute__ ((vector_size (16)));\n+\n+static __inline __m128\n+_mm_mul_ps (__m128 __A, __m128 __B)\n+{\n+  return __builtin_ia32_mulps (__A, __B);\n+}\n+\n+static __inline __m128\n+_mm_sub_ps (__m128 __A, __m128 __B)\n+{\n+  return  __builtin_ia32_subps (__A, __B);\n+}\n+\n+__m128 POW_FUNC (__m128 x, __m128 y)\n+{\n+    __m128 xmm0 = x, xmm1 = y, xmm2;\n+\n+    xmm0 = __builtin_ia32_xorps (xmm1, xmm1);\n+\n+    xmm0 = _mm_mul_ps (xmm0, xmm1);\n+\n+    xmm0 = _mm_sub_ps (xmm0, xmm1);\n+\n+    xmm0 = _mm_mul_ps (xmm0, xmm1);\n+\n+    return xmm0;\n+}"}]}