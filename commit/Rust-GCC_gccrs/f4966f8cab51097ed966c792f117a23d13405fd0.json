{"sha": "f4966f8cab51097ed966c792f117a23d13405fd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ5NjZmOGNhYjUxMDk3ZWQ5NjZjNzkyZjExN2EyM2QxMzQwNWZkMA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-09-18T06:43:09Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-09-18T06:43:09Z"}, "message": "linux.h (ASM_PREFERRED_EH_DATA_FORMAT): Remove.\n\n\t* config/sh/linux.h (ASM_PREFERRED_EH_DATA_FORMAT): Remove.\n\t* config/sh/sh.h (ASM_PREFERRED_EH_DATA_FORMAT): Use\n\tDW_EH_PE_sdata* for data.\n\t(ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): Likewise.\n\nFrom-SVN: r87696", "tree": {"sha": "30b6c7dda00cf029097157cbad6fbaca16b1d4c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30b6c7dda00cf029097157cbad6fbaca16b1d4c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4966f8cab51097ed966c792f117a23d13405fd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4966f8cab51097ed966c792f117a23d13405fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4966f8cab51097ed966c792f117a23d13405fd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4966f8cab51097ed966c792f117a23d13405fd0/comments", "author": null, "committer": null, "parents": [{"sha": "a396f8ae242ddd9993230025093b5f768647d194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a396f8ae242ddd9993230025093b5f768647d194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a396f8ae242ddd9993230025093b5f768647d194"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "06a6e53a1411baa98e9e1d5e20b3bd6c86fed594", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4966f8cab51097ed966c792f117a23d13405fd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4966f8cab51097ed966c792f117a23d13405fd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4966f8cab51097ed966c792f117a23d13405fd0", "patch": "@@ -1,3 +1,10 @@\n+2004-09-18  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/linux.h (ASM_PREFERRED_EH_DATA_FORMAT): Remove.\n+\t* config/sh/sh.h (ASM_PREFERRED_EH_DATA_FORMAT): Use\n+\tDW_EH_PE_sdata* for data.\n+\t(ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): Likewise.\n+\n 2004-09-17  Geoffrey Keating  <geoffk@apple.com>\n \n \t* tree-inline.c (copy_tree_r): Don't duplicate constants, they're"}, {"sha": "87248542f49a88189c5153c32e4969ae4d39190e", "filename": "gcc/config/sh/linux.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4966f8cab51097ed966c792f117a23d13405fd0/gcc%2Fconfig%2Fsh%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4966f8cab51097ed966c792f117a23d13405fd0/gcc%2Fconfig%2Fsh%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flinux.h?ref=f4966f8cab51097ed966c792f117a23d13405fd0", "patch": "@@ -41,13 +41,6 @@ Boston, MA 02111-1307, USA.  */\n #undef DWARF2_UNWIND_INFO\n #define DWARF2_UNWIND_INFO 1\n \n-/* ??? Current SH linux linker has a problem for DW_EH_PE_textrel.  */\n-#undef ASM_PREFERRED_EH_DATA_FORMAT\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)                      \\\n-  (flag_pic                                                             \\\n-    ? ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4 \\\n-   : DW_EH_PE_absptr)\n-\n #undef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC \"\\\n    %{posix:-D_POSIX_SOURCE} \\"}, {"sha": "8184e81ffed8e9d3af35f898c74ff71ac24d9ef3", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4966f8cab51097ed966c792f117a23d13405fd0/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4966f8cab51097ed966c792f117a23d13405fd0/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=f4966f8cab51097ed966c792f117a23d13405fd0", "patch": "@@ -3521,19 +3521,19 @@ extern int rtx_equal_function_value_matters;\n #define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, EH_RETURN_STACKADJ_REGNO)\n \n /* We have to distinguish between code and data, so that we apply\n-   datalabel where and only where appropriate.  Use textrel for code.  */\n+   datalabel where and only where appropriate.  Use sdataN for data.  */\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL) \\\n  ((flag_pic && (GLOBAL) ? DW_EH_PE_indirect : 0) \\\n-  | ((CODE) ? DW_EH_PE_textrel : flag_pic ? DW_EH_PE_pcrel : DW_EH_PE_absptr))\n+  | (flag_pic ? DW_EH_PE_pcrel : DW_EH_PE_absptr) \\\n+  | ((CODE) ? 0 : (TARGET_SHMEDIA64 ? DW_EH_PE_sdata8 : DW_EH_PE_sdata4)))\n \n /* Handle special EH pointer encodings.  Absolute, pc-relative, and\n    indirect are handled automatically.  */\n #define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n   do { \\\n-    if (((ENCODING) & 0x70) == DW_EH_PE_textrel) \\\n+    if (((ENCODING) & 0xf) != DW_EH_PE_sdata4 \\\n+\t&& ((ENCODING) & 0xf) != DW_EH_PE_sdata8) \\\n       { \\\n-\tencoding &= ~DW_EH_PE_textrel; \\\n-\tencoding |= flag_pic ? DW_EH_PE_pcrel : DW_EH_PE_absptr; \\\n \tif (GET_CODE (ADDR) != SYMBOL_REF) \\\n \t  abort (); \\\n \tSYMBOL_REF_FLAGS (ADDR) |= SYMBOL_FLAG_FUNCTION; \\"}]}