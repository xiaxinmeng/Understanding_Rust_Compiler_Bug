{"sha": "eba839f9719e66195f75207b377593c025c71b82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhODM5Zjk3MTllNjYxOTVmNzUyMDdiMzc3NTkzYzAyNWM3MWI4Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-07-18T15:44:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-07-18T15:44:36Z"}, "message": "re PR c++/22263 (explicit instantiation fails to emit symbols defined later)\n\n\tPR c++/22263\n\t* cp-tree.h (instantiate_decl): Change prototype.\n\t* decl2.c (mark_used): Adjust accordingly.\n\t* pt.c (do_decl_instantiation): Likewise.\n\t(instantiate_class_member): Likewise.\n\t(instantiate_decl): Rename undefined_ok as expl_inst_class_mem_p.\n\tClear DECL_INTERFACE_KNOWN for an explicitly instantiated template\n\tthat has no definition available.\n\t(instantiate_pending_templates): Adjust call to instantiate_decl.\n\n\tPR c++/22263\n\t* g++.dg/template/explicit7.C: New test.\n\nFrom-SVN: r102133", "tree": {"sha": "7a30e58e91902a07435d0df3f33afcd8eeeddc4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a30e58e91902a07435d0df3f33afcd8eeeddc4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eba839f9719e66195f75207b377593c025c71b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba839f9719e66195f75207b377593c025c71b82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba839f9719e66195f75207b377593c025c71b82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba839f9719e66195f75207b377593c025c71b82/comments", "author": null, "committer": null, "parents": [{"sha": "28356f52a9c5d00dcf7b6673a2e83309c63cee0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28356f52a9c5d00dcf7b6673a2e83309c63cee0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28356f52a9c5d00dcf7b6673a2e83309c63cee0c"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "b30aabc1f9a7b4d8daf6f7a00f4187a20f33bbb6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eba839f9719e66195f75207b377593c025c71b82", "patch": "@@ -1,3 +1,15 @@\n+2005-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22263\n+\t* cp-tree.h (instantiate_decl): Change prototype.\n+\t* decl2.c (mark_used): Adjust accordingly.\n+\t* pt.c (do_decl_instantiation): Likewise.\n+\t(instantiate_class_member): Likewise.\n+\t(instantiate_decl): Rename undefined_ok as expl_inst_class_mem_p.\n+\tClear DECL_INTERFACE_KNOWN for an explicitly instantiated template\n+\tthat has no definition available.\n+\t(instantiate_pending_templates): Adjust call to instantiate_decl.\n+\n 2005-07-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22139"}, {"sha": "d9d053d6dfb0397b5904835156d3a71317fbbecf", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eba839f9719e66195f75207b377593c025c71b82", "patch": "@@ -3997,7 +3997,7 @@ extern int more_specialized_fn\t\t\t(tree, tree, int);\n extern void mark_class_instantiated\t\t(tree, int);\n extern void do_decl_instantiation\t\t(tree, tree);\n extern void do_type_instantiation\t\t(tree, tree, tsubst_flags_t);\n-extern tree instantiate_decl\t\t\t(tree, int, int);\n+extern tree instantiate_decl\t\t\t(tree, int, bool);\n extern int push_tinst_level\t\t\t(tree);\n extern void pop_tinst_level\t\t\t(void);\n extern int more_specialized_class\t\t(tree, tree, tree);"}, {"sha": "5afcd896cc14a080cc6906e28bf2312f64151d6d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eba839f9719e66195f75207b377593c025c71b82", "patch": "@@ -3278,7 +3278,8 @@ mark_used (tree decl)\n        times.  Maintaining a stack of active functions is expensive,\n        and the inliner knows to instantiate any functions it might\n        need.  */\n-    instantiate_decl (decl, /*defer_ok=*/true, /*undefined_ok=*/0);\n+    instantiate_decl (decl, /*defer_ok=*/true, \n+\t\t      /*expl_inst_class_mem_p=*/false);\n }\n \n #include \"gt-cp-decl2.h\""}, {"sha": "619cdc117524c7e3157637aeb5d9f5645cfe1260", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba839f9719e66195f75207b377593c025c71b82/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eba839f9719e66195f75207b377593c025c71b82", "patch": "@@ -11010,7 +11010,8 @@ do_decl_instantiation (tree decl, tree storage)\n \n   mark_decl_instantiated (result, extern_p);\n   if (! extern_p)\n-    instantiate_decl (result, /*defer_ok=*/1, /*undefined_ok=*/0);\n+    instantiate_decl (result, /*defer_ok=*/1, \n+\t\t      /*expl_inst_class_mem_p=*/false);\n }\n \n void\n@@ -11047,7 +11048,8 @@ instantiate_class_member (tree decl, int extern_p)\n {\n   mark_decl_instantiated (decl, extern_p);\n   if (! extern_p)\n-    instantiate_decl (decl, /*defer_ok=*/1, /* undefined_ok=*/1);\n+    instantiate_decl (decl, /*defer_ok=*/1, \n+\t\t      /*expl_inst_class_mem_p=*/true);\n }\n \n /* Perform an explicit instantiation of template class T.  STORAGE, if\n@@ -11343,14 +11345,12 @@ template_for_substitution (tree decl)\n    DEFER_OK is nonzero, then we don't have to actually do the\n    instantiation now; we just have to do it sometime.  Normally it is\n    an error if this is an explicit instantiation but D is undefined.\n-   If UNDEFINED_OK is nonzero, then instead we treat it as an implicit\n-   instantiation.  UNDEFINED_OK is nonzero only if we are being used\n-   to instantiate the members of an explicitly instantiated class\n-   template.  */\n-\n+   EXPL_INST_CLASS_MEM_P is true iff D is a member of an\n+   explicitly instantiated class template.  */\n \n tree\n-instantiate_decl (tree d, int defer_ok, int undefined_ok)\n+instantiate_decl (tree d, int defer_ok, \n+\t\t  bool expl_inst_class_mem_p)\n {\n   tree tmpl = DECL_TI_TEMPLATE (d);\n   tree gen_args;\n@@ -11439,9 +11439,14 @@ instantiate_decl (tree d, int defer_ok, int undefined_ok)\n \n   input_location = DECL_SOURCE_LOCATION (d);\n \n-  if (! pattern_defined && DECL_EXPLICIT_INSTANTIATION (d) && undefined_ok)\n+  /* If D is a member of an explicitly instantiated class template,\n+     and no definition is available, treat it like an implicit\n+     instantiation.  */ \n+  if (!pattern_defined && expl_inst_class_mem_p \n+      && DECL_EXPLICIT_INSTANTIATION (d)) \n     {\n       DECL_NOT_REALLY_EXTERN (d) = 0;\n+      DECL_INTERFACE_KNOWN (d) = 0;\n       SET_DECL_IMPLICIT_INSTANTIATION (d);\n     }\n \n@@ -11678,8 +11683,9 @@ instantiate_pending_templates (int retries)\n \t\t\t fn;\n \t\t\t fn = TREE_CHAIN (fn))\n \t\t      if (! DECL_ARTIFICIAL (fn))\n-\t\t\tinstantiate_decl (fn, /*defer_ok=*/0,\n-\t\t\t\t\t  /*undefined_ok=*/0);\n+\t\t\tinstantiate_decl (fn, \n+\t\t\t\t\t  /*defer_ok=*/0,\n+\t\t\t\t\t  /*expl_inst_class_mem_p=*/false);\n \t\t  if (COMPLETE_TYPE_P (instantiation))\n \t\t    reconsider = 1;\n \t\t}\n@@ -11699,9 +11705,10 @@ instantiate_pending_templates (int retries)\n \t      if (!DECL_TEMPLATE_SPECIALIZATION (instantiation)\n \t\t  && !DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t{\n-\t\t  instantiation = instantiate_decl (instantiation,\n-\t\t\t\t\t\t    /*defer_ok=*/0,\n-\t\t\t\t\t\t    /*undefined_ok=*/0);\n+\t\t  instantiation \n+\t\t    = instantiate_decl (instantiation,\n+\t\t\t\t\t/*defer_ok=*/0,\n+\t\t\t\t\t/*expl_inst_class_mem_p=*/false);\n \t\t  if (DECL_TEMPLATE_INSTANTIATED (instantiation))\n \t\t    reconsider = 1;\n \t\t}"}, {"sha": "88228523684e679e74289f0e44678c0ee718131e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba839f9719e66195f75207b377593c025c71b82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba839f9719e66195f75207b377593c025c71b82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eba839f9719e66195f75207b377593c025c71b82", "patch": "@@ -1,3 +1,8 @@\n+2005-07-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22263\n+\t* g++.dg/template/explicit7.C: New test.\n+\n 2005-07-17  Jerry DeLisle  <jvdelisle@verizon.net>\n     * gfortran.fortran-torture/execute/nan_inf_fmt.f90: Change case of field\n     width of 8 to +Inf and -Inf."}, {"sha": "7424677181a787e2a8e62fdc59e6a62e793b4f20", "filename": "gcc/testsuite/g++.dg/template/explicit7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba839f9719e66195f75207b377593c025c71b82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba839f9719e66195f75207b377593c025c71b82/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fexplicit7.C?ref=eba839f9719e66195f75207b377593c025c71b82", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/22263\n+// { dg-do link }\n+\n+template <class T> struct S { T foo (); T bar (); };\n+template <class T> T S<T>::foo () { return bar (); }\n+template struct S<int>;\n+template <class T> T S<T>::bar () { return T (); }\n+\n+#if !__GXX_WEAK__\n+template int S<int>::bar ();\n+#endif\n+\n+int main () { return S<int>().foo (); }"}]}