{"sha": "d2e78d766294a5e548c2eaf92f07a8f768120e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlNzhkNzY2Mjk0YTVlNTQ4YzJlYWY5MmYwN2E4Zjc2ODEyMGUxYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-18T07:26:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-18T07:26:04Z"}, "message": "re PR tree-optimization/81418 (ICE in vect_get_vec_def_for_stmt_copy)\n\n2017-06-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81418\n\t* tree-vect-loop.c (vectorizable_reduction): Properly compute\n\tvectype_in.  Verify that with lane-reducing reduction operations\n\twe have a single def-use cycle.\n\n\t* gcc.dg/torture/pr81418.c: New testcase.\n\nFrom-SVN: r250296", "tree": {"sha": "9f3dd6f500bb84223c8af23792329fe80a0a3630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3dd6f500bb84223c8af23792329fe80a0a3630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2e78d766294a5e548c2eaf92f07a8f768120e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e78d766294a5e548c2eaf92f07a8f768120e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e78d766294a5e548c2eaf92f07a8f768120e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e78d766294a5e548c2eaf92f07a8f768120e1c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "651dbe5d8e8e4907af30fb319c6ca0d29269b1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651dbe5d8e8e4907af30fb319c6ca0d29269b1e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651dbe5d8e8e4907af30fb319c6ca0d29269b1e1"}], "stats": {"total": 91, "additions": 68, "deletions": 23}, "files": [{"sha": "dab4a95222998c3f01caf2750bf9fd37c8126e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2e78d766294a5e548c2eaf92f07a8f768120e1c", "patch": "@@ -1,4 +1,9 @@\n-gcc/ChangeLog:\n+2017-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81418\n+\t* tree-vect-loop.c (vectorizable_reduction): Properly compute\n+\tvectype_in.  Verify that with lane-reducing reduction operations\n+\twe have a single def-use cycle.\n \n 2017-07-17  Carl Love  <cel@us.ibm.com>\n "}, {"sha": "10951f51d4ada1f406795c44e6748c36b3a58100", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2e78d766294a5e548c2eaf92f07a8f768120e1c", "patch": "@@ -1,4 +1,7 @@\n-gcc/testsuite/ChangeLog:\n+2017-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81418\n+\t* gcc.dg/torture/pr81418.c: New testcase.\n \n 2017-07-17  Carl Love  <cel@us.ibm.com>\n "}, {"sha": "245861b7f3c9c9bbe6426c5cbef17589fa8f8c24", "filename": "gcc/testsuite/gcc.dg/torture/pr81418.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81418.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81418.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr81418.c?ref=d2e78d766294a5e548c2eaf92f07a8f768120e1c", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-loop-optimize\" } */\n+\n+int\n+ol (int ku)\n+{\n+  int zq = 0;\n+\n+  while (ku < 1)\n+    {\n+      int y6;\n+\n+      for (y6 = 0; y6 < 3; ++y6)\n+\tzq += (char)ku;\n+      ++ku;\n+    }\n+\n+  return zq;\n+}"}, {"sha": "08c56ce0fb0cab6bf7ebcfbc409a0f7711fcd18a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e78d766294a5e548c2eaf92f07a8f768120e1c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d2e78d766294a5e548c2eaf92f07a8f768120e1c", "patch": "@@ -5642,7 +5642,10 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t  if (k == 1\n \t      && gimple_assign_rhs_code (reduc_stmt) == COND_EXPR)\n \t    continue;\n-\t  vectype_in = get_vectype_for_scalar_type (TREE_TYPE (op));\n+\t  tem = get_vectype_for_scalar_type (TREE_TYPE (op));\n+\t  if (! vectype_in\n+\t      || TYPE_VECTOR_SUBPARTS (tem) < TYPE_VECTOR_SUBPARTS (vectype_in))\n+\t    vectype_in = tem;\n \t  break;\n \t}\n       gcc_assert (vectype_in);\n@@ -6213,26 +6216,6 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t}\n     }\n \n-  if (!vec_stmt) /* transformation not required.  */\n-    {\n-      if (first_p)\n-\tvect_model_reduction_cost (stmt_info, epilog_reduc_code, ncopies);\n-      STMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n-      return true;\n-    }\n-\n-  /* Transform.  */\n-\n-  if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location, \"transform reduction.\\n\");\n-\n-  /* FORNOW: Multiple types are not supported for condition.  */\n-  if (code == COND_EXPR)\n-    gcc_assert (ncopies == 1);\n-\n-  /* Create the destination vector  */\n-  vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n-\n   /* In case the vectorization factor (VF) is bigger than the number\n      of elements that we can fit in a vectype (nunits), we have to generate\n      more than one vector stmt - i.e - we need to \"unroll\" the\n@@ -6276,6 +6259,41 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   else\n     epilog_copies = ncopies;\n \n+  /* If the reduction stmt is one of the patterns that have lane\n+     reduction embedded we cannot handle the case of ! single_defuse_cycle.  */\n+  if ((ncopies > 1\n+       && ! single_defuse_cycle)\n+      && (code == DOT_PROD_EXPR\n+\t  || code == WIDEN_SUM_EXPR\n+\t  || code == SAD_EXPR))\n+    {\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"multi def-use cycle not possible for lane-reducing \"\n+\t\t\t \"reduction operation\\n\");\n+      return false;\n+    }\n+\n+  if (!vec_stmt) /* transformation not required.  */\n+    {\n+      if (first_p)\n+\tvect_model_reduction_cost (stmt_info, epilog_reduc_code, ncopies);\n+      STMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n+      return true;\n+    }\n+\n+  /* Transform.  */\n+\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, vect_location, \"transform reduction.\\n\");\n+\n+  /* FORNOW: Multiple types are not supported for condition.  */\n+  if (code == COND_EXPR)\n+    gcc_assert (ncopies == 1);\n+\n+  /* Create the destination vector  */\n+  vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n+\n   prev_stmt_info = NULL;\n   prev_phi_info = NULL;\n   if (slp_node)"}]}