{"sha": "caba9473d7381b3ba3f5c9415027f115ac4f2779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiYTk0NzNkNzM4MWIzYmEzZjVjOTQxNTAyN2YxMTVhYzRmMjc3OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-10-01T17:05:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-10-01T17:05:02Z"}, "message": "pa.h (LEGITIMIZE_ADDRESS, [...]): Emit a sequence which will cause \"addil\" instructions to be emitted instead of...\n\n\t* pa.h (LEGITIMIZE_ADDRESS, SYMBOL_REF case): Emit a sequence\n\twhich will cause \"addil\" instructions to be emitted instead of\n\t\"ldil; add\" sequences.\n\t* pa.h (TARGET_KERNEL): New switch \"-mkernel\" which forces gcc to\n\tavoid \"ldil; add\" sequences with %r27 and instead generate \"addil\"\n\tsequences.  This avoids a HPUX linker bug when compiling kernels.\n\nFrom-SVN: r2297", "tree": {"sha": "511d2ee2a15a67dbbf12b8e4a7ced9ade9db6cfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/511d2ee2a15a67dbbf12b8e4a7ced9ade9db6cfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caba9473d7381b3ba3f5c9415027f115ac4f2779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caba9473d7381b3ba3f5c9415027f115ac4f2779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caba9473d7381b3ba3f5c9415027f115ac4f2779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caba9473d7381b3ba3f5c9415027f115ac4f2779/comments", "author": null, "committer": null, "parents": [{"sha": "2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbd8ac74e5d308cecbe27a0c3ce5a05f28770a0"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "9a68aaa8b87ce3d062f885afd33ffcc43e40f351", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caba9473d7381b3ba3f5c9415027f115ac4f2779/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caba9473d7381b3ba3f5c9415027f115ac4f2779/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=caba9473d7381b3ba3f5c9415027f115ac4f2779", "patch": "@@ -99,6 +99,13 @@ extern int target_flags;\n \n #define TARGET_NO_BSS (target_flags & 2)\n \n+/* Force gcc to only use instructions which are safe when compiling kernels.\n+   Specifically, avoid using add instructions with dp (r27) as an argument.\n+   Use addil instructions instead.  Doing so avoids a nasty bug in the \n+   HPUX linker.  When HP fixes their linker take this option out.  */\n+\n+#define TARGET_KERNEL (target_flags & 4)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -111,6 +118,7 @@ extern int target_flags;\n    {\"pa-risc-1-0\", -1},\t\\\n    {\"pa-risc-1-1\", 1},\t\\\n    {\"no-bss\", 2},\t\\\n+   {\"kernel\", 4},\t\\\n    { \"\", TARGET_DEFAULT}}\n \n #define TARGET_DEFAULT 0\n@@ -1197,13 +1205,13 @@ extern union tree_node *current_function_decl;\n     (X) = gen_rtx (LO_SUM, Pmode,\t\t\t\t\\\n \t\t   copy_to_mode_reg (Pmode, gen_rtx (HIGH, Pmode, X)), X); \\\n   else if (GET_CODE (X) == SYMBOL_REF)\t\t\t\t\\\n-    (X) = gen_rtx (LO_SUM, Pmode,\t\t\t\t\\\n-\t\t   copy_to_mode_reg (Pmode,\t\t\t\\\n-\t\t\t\t     gen_rtx (PLUS, Pmode,\t\\\n-\t\t\t\t\t      copy_to_mode_reg (Pmode,\\\n-\t\t\t\t\t\t\t\tgen_rtx (HIGH, Pmode, X)),\\\n-\t\t\t\t\t      gen_rtx (REG, Pmode, 27))),\\\n-\t\t   X);\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      rtx temp2 = gen_reg_rtx (Pmode);\t\t\t\t\\\n+      emit_insn (gen_rtx (SET, VOIDmode, temp2, \t\t\\\n+\t\t\t  gen_rtx (PLUS, Pmode, gen_rtx (REG, Pmode, 27),\\\n+\t\t\t\t   gen_rtx (HIGH, Pmode, X))));\t\\\n+      (X) = gen_rtx (LO_SUM, Pmode, temp2, X);\t \t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   if (memory_address_p (MODE, X))\t\t\t\t\\\n     goto WIN;}\n "}]}