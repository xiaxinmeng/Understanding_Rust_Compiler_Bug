{"sha": "7f8479378a99d17de6847d4482f23e11944d35c5", "node_id": "C_kwDOANBUbNoAKDdmODQ3OTM3OGE5OWQxN2RlNjg0N2Q0NDgyZjIzZTExOTQ0ZDM1YzU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T12:54:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T13:05:34Z"}, "message": "remove unnessecary useage of ResolveTypeToCanonicalPath when we dont need it here", "tree": {"sha": "a0a5c3ec7cd50b2c1d63d804ab25aa02cf5d11c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0a5c3ec7cd50b2c1d63d804ab25aa02cf5d11c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8479378a99d17de6847d4482f23e11944d35c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8479378a99d17de6847d4482f23e11944d35c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8479378a99d17de6847d4482f23e11944d35c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8479378a99d17de6847d4482f23e11944d35c5/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "700849ffd066855f9d831a6bb34d4fc3de30ed50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700849ffd066855f9d831a6bb34d4fc3de30ed50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700849ffd066855f9d831a6bb34d4fc3de30ed50"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "5b30cdb6aa218b82009c8b7e65c036c97c8e2f63", "filename": "gcc/rust/resolve/rust-ast-resolve-item.cc", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8479378a99d17de6847d4482f23e11944d35c5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8479378a99d17de6847d4482f23e11944d35c5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.cc?ref=7f8479378a99d17de6847d4482f23e11944d35c5", "patch": "@@ -598,13 +598,10 @@ ResolveItem::visit (AST::InherentImpl &impl_block)\n   rust_assert (!self_cpath.is_empty ());\n \n   // Setup paths\n-  bool canonicalize_type_args = !impl_block.has_generics ();\n-  bool type_resolve_generic_args = false;\n-\n+  std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n   CanonicalPath impl_type\n-    = ResolveTypeToCanonicalPath::resolve (*impl_block.get_type ().get (),\n-\t\t\t\t\t   canonicalize_type_args,\n-\t\t\t\t\t   type_resolve_generic_args);\n+    = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n+\t\t\t      raw_impl_type_path);\n   CanonicalPath impl_prefix = prefix.append (impl_type);\n \n   // see https://godbolt.org/z/a3vMbsT6W\n@@ -762,17 +759,15 @@ ResolveItem::visit (AST::TraitImpl &impl_block)\n   rust_assert (!canonical_impl_type.is_empty ());\n \n   // setup paths\n-  bool canonicalize_type_args = !impl_block.has_generics ();\n-  bool type_resolve_generic_args = false;\n-\n+  std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n   CanonicalPath impl_type_seg\n-    = ResolveTypeToCanonicalPath::resolve (*impl_block.get_type ().get (),\n-\t\t\t\t\t   canonicalize_type_args,\n-\t\t\t\t\t   type_resolve_generic_args);\n+    = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n+\t\t\t      raw_impl_type_path);\n+\n+  std::string raw_trait_type_path = impl_block.get_trait_path ().as_string ();\n   CanonicalPath trait_type_seg\n-    = ResolveTypeToCanonicalPath::resolve (impl_block.get_trait_path (),\n-\t\t\t\t\t   canonicalize_type_args,\n-\t\t\t\t\t   type_resolve_generic_args);\n+    = CanonicalPath::new_seg (impl_block.get_trait_path ().get_node_id (),\n+\t\t\t      raw_trait_type_path);\n \n   CanonicalPath projection\n     = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),"}, {"sha": "7aacc0a55906c12d56407b381dc03229d62e908a", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8479378a99d17de6847d4482f23e11944d35c5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8479378a99d17de6847d4482f23e11944d35c5/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=7f8479378a99d17de6847d4482f23e11944d35c5", "patch": "@@ -325,34 +325,27 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::InherentImpl &impl_block) override\n   {\n-    bool canonicalize_type_args = !impl_block.has_generics ();\n-    bool type_resolve_generic_args = false;\n-\n+    std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n     CanonicalPath impl_type\n-      = ResolveTypeToCanonicalPath::resolve (*impl_block.get_type ().get (),\n-\t\t\t\t\t     canonicalize_type_args,\n-\t\t\t\t\t     type_resolve_generic_args);\n+      = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n+\t\t\t\traw_impl_type_path);\n     CanonicalPath impl_prefix = prefix.append (impl_type);\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       ResolveToplevelImplItem::go (impl_item.get (), impl_prefix);\n-\n-    // we cannot resolve canonical paths here until later on\n   }\n \n   void visit (AST::TraitImpl &impl_block) override\n   {\n-    bool canonicalize_type_args = !impl_block.has_generics ();\n-    bool type_resolve_generic_args = false;\n-\n+    std::string raw_impl_type_path = impl_block.get_type ()->as_string ();\n     CanonicalPath impl_type_seg\n-      = ResolveTypeToCanonicalPath::resolve (*impl_block.get_type ().get (),\n-\t\t\t\t\t     canonicalize_type_args,\n-\t\t\t\t\t     type_resolve_generic_args);\n+      = CanonicalPath::new_seg (impl_block.get_type ()->get_node_id (),\n+\t\t\t\traw_impl_type_path);\n+\n+    std::string raw_trait_type_path = impl_block.get_trait_path ().as_string ();\n     CanonicalPath trait_type_seg\n-      = ResolveTypeToCanonicalPath::resolve (impl_block.get_trait_path (),\n-\t\t\t\t\t     canonicalize_type_args,\n-\t\t\t\t\t     type_resolve_generic_args);\n+      = CanonicalPath::new_seg (impl_block.get_trait_path ().get_node_id (),\n+\t\t\t\traw_trait_type_path);\n \n     CanonicalPath projection\n       = CanonicalPath::trait_impl_projection_seg (impl_block.get_node_id (),\n@@ -370,8 +363,6 @@ class ResolveTopLevel : public ResolverBase\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       ResolveToplevelImplItem::go (impl_item.get (), impl_prefix);\n-\n-    // we cannot resolve canonical paths here until later on\n   }\n \n   void visit (AST::Trait &trait) override"}]}