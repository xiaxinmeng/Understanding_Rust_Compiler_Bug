{"sha": "6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU4MWIxNGJkZmU5ZTJjMWNkMWE2ZjIwNWRlZjQwM2Y2ZDhlYTkyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-30T02:29:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-30T02:29:14Z"}, "message": "PR libstdc++/40925 (again)\n\n2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n  \t    Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR libstdc++/40925 (again)\n\t* include/bits/stl_pair.h (pair<_T1, _T2>::pair(_U1&&, const _T2&),\n\tpair<_T1, _T2>::pair(const _T1&, _U2&&)): Add, to deal correctly\n\twith move-only types in the presence of \"null pointers\".\n\t* testsuite/20_util/pair/40925.cc: Extend.\n\nCo-Authored-By: Douglas Gregor <doug.gregor@gmail.com>\n\nFrom-SVN: r153733", "tree": {"sha": "5d41876da28d22a524959c5c7f3b6792d5225de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d41876da28d22a524959c5c7f3b6792d5225de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/comments", "author": null, "committer": null, "parents": [{"sha": "a684a364c7a3a414309951111c29a0f0ea0dd8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a684a364c7a3a414309951111c29a0f0ea0dd8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a684a364c7a3a414309951111c29a0f0ea0dd8d9"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "402d7fb87e4accf4afdb200f6c48cb4e452cb9b2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "patch": "@@ -1,3 +1,12 @@\n+2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+  \t    Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR libstdc++/40925 (again)\n+\t* include/bits/stl_pair.h (pair<_T1, _T2>::pair(_U1&&, const _T2&),\n+\tpair<_T1, _T2>::pair(const _T1&, _U2&&)): Add, to deal correctly\n+\twith move-only types in the presence of \"null pointers\".\n+\t* testsuite/20_util/pair/40925.cc: Extend.\n+\n 2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/type_traits (__is_int_or_cref): Remove."}, {"sha": "4a9fb6be485c6cd783d62527b10c8fa3c16dc2c6", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "patch": "@@ -88,10 +88,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : first(__a), second(__b) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      template<class _U1, class _U2>\n-        pair(_U1&& __x, _U2&& __y, typename\n-\t    std::enable_if<std::is_convertible<_U1, _T1>::value\n-\t                   && std::is_convertible<_U2, _T2>::value>::type* = 0)\n+      // DR 811.\n+      template<class _U1, class = typename\n+\t       std::enable_if<std::is_convertible<_U1, _T1>::value>::type>\n+        pair(_U1&& __x, const _T2& __y)\n+\t: first(std::forward<_U1>(__x)),\n+\t  second(__y) { }\n+\n+      template<class _U2, class = typename\n+\t       std::enable_if<std::is_convertible<_U2, _T2>::value>::type>\n+        pair(const _T1& __x, _U2&& __y)\n+\t: first(__x),\n+\t  second(std::forward<_U2>(__y)) { }\n+\n+      template<class _U1, class _U2, class = typename\n+\t       std::enable_if<std::is_convertible<_U1, _T1>::value\n+\t\t\t      && std::is_convertible<_U2, _T2>::value>::type>\n+        pair(_U1&& __x, _U2&& __y)\n \t: first(std::forward<_U1>(__x)),\n \t  second(std::forward<_U2>(__y)) { }\n "}, {"sha": "6abeb617fa01a30b1d51daf709a117ea8e4e6bb7", "filename": "libstdc++-v3/testsuite/20_util/pair/40925.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F40925.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F40925.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2F40925.cc?ref=6581b14bdfe9e2c1cd1a6f205def403f6d8ea92f", "patch": "@@ -28,6 +28,15 @@ struct X\n   X(const X&) = delete;\n };\n \n+struct move_only\n+{\n+  move_only() { }\n+  move_only(move_only&&) { }\n+\n+private:\n+  move_only(const move_only&) = delete;\n+};\n+\n // libstdc++/40925\n void test01()\n {\n@@ -43,4 +52,16 @@ void test01()\n   std::pair<int X::*, int X::*> p6(mp, 0);\n   std::pair<int X::*, int X::*> p7(0, mp);\n   std::pair<int X::*, int X::*> p8(mp, mp);\n+\n+  std::pair<int*, move_only> p9(0, move_only());\n+  std::pair<int X::*, move_only> p10(0, move_only());\n+  std::pair<move_only, int*> p11(move_only(), 0);\n+  std::pair<move_only, int X::*> p12(move_only(), 0);\n+\n+  std::pair<int*, move_only> p13(ip, move_only());\n+  std::pair<int X::*, move_only> p14(mp, move_only());\n+  std::pair<move_only, int*> p15(move_only(), ip);\n+  std::pair<move_only, int X::*> p16(move_only(), mp);\n+\n+  std::pair<move_only, move_only> p17(move_only(), move_only());\n }"}]}