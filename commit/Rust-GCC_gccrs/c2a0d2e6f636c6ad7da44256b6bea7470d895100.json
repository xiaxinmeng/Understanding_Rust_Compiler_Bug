{"sha": "c2a0d2e6f636c6ad7da44256b6bea7470d895100", "node_id": "C_kwDOANBUbNoAKGMyYTBkMmU2ZjYzNmM2YWQ3ZGE0NDI1NmI2YmVhNzQ3MGQ4OTUxMDA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-04T09:29:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-05T08:46:02Z"}, "message": "rewrite undefined overflow to defined in ifcombine\n\nWhen we make stmts to execute unconditionally in ifcombine we have\nto make sure to rewrite stmts that can invoke undefined behavior\non overflow into a form with defined overflow.  That's possible\nfor all but signed division for which we have to avoid the transform.\n\n2022-04-04  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-ifcombine.cc (bb_no_side_effects_p): Avoid executing\n\tdivisions with undefined overflow unconditionally.\n\t(pass_tree_ifcombine::execute): Rewrite stmts with undefined\n\toverflow to defined.", "tree": {"sha": "332644fbf86b4fa915ccfac745c8703c0961b1f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332644fbf86b4fa915ccfac745c8703c0961b1f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a0d2e6f636c6ad7da44256b6bea7470d895100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a0d2e6f636c6ad7da44256b6bea7470d895100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a0d2e6f636c6ad7da44256b6bea7470d895100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a0d2e6f636c6ad7da44256b6bea7470d895100/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000f4480005035d0811e009a7cb25b42721f0a6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/000f4480005035d0811e009a7cb25b42721f0a6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/000f4480005035d0811e009a7cb25b42721f0a6e"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "cb86cc1ea5fe742c5c58433a38482163542ced52", "filename": "gcc/tree-ssa-ifcombine.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a0d2e6f636c6ad7da44256b6bea7470d895100/gcc%2Ftree-ssa-ifcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a0d2e6f636c6ad7da44256b6bea7470d895100/gcc%2Ftree-ssa-ifcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.cc?ref=c2a0d2e6f636c6ad7da44256b6bea7470d895100", "patch": "@@ -125,10 +125,26 @@ bb_no_side_effects_p (basic_block bb)\n       if (is_gimple_debug (stmt))\n \tcontinue;\n \n+      gassign *ass;\n+      enum tree_code rhs_code;\n       if (gimple_has_side_effects (stmt)\n \t  || gimple_uses_undefined_value_p (stmt)\n \t  || gimple_could_trap_p (stmt)\n \t  || gimple_vuse (stmt)\n+\t  /* We need to rewrite stmts with undefined overflow to use\n+\t     unsigned arithmetic but cannot do so for signed division.  */\n+\t  || ((ass = dyn_cast <gassign *> (stmt))\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (ass)))\n+\t      && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (gimple_assign_lhs (ass)))\n+\t      && ((rhs_code = gimple_assign_rhs_code (ass)), true)\n+\t      && (rhs_code == TRUNC_DIV_EXPR\n+\t\t  || rhs_code == CEIL_DIV_EXPR\n+\t\t  || rhs_code == FLOOR_DIV_EXPR\n+\t\t  || rhs_code == ROUND_DIV_EXPR)\n+\t      /* We cannot use expr_not_equal_to since we'd have to restrict\n+\t\t flow-sensitive info to whats known at the outer if.  */\n+\t      && (TREE_CODE (gimple_assign_rhs2 (ass)) != INTEGER_CST\n+\t\t  || !integer_minus_onep (gimple_assign_rhs2 (ass))))\n \t  /* const calls don't match any of the above, yet they could\n \t     still have some side-effects - they could contain\n \t     gimple_could_trap_p statements, like floating point\n@@ -847,6 +863,19 @@ pass_tree_ifcombine::execute (function *fun)\n \t    /* Clear range info from all stmts in BB which is now executed\n \t       conditional on a always true/false condition.  */\n \t    reset_flow_sensitive_info_in_bb (bb);\n+\t    for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n+\t\t gsi_next (&gsi))\n+\t      {\n+\t\tgassign *ass = dyn_cast <gassign *> (gsi_stmt (gsi));\n+\t\tif (!ass)\n+\t\t  continue;\n+\t\ttree lhs = gimple_assign_lhs (ass);\n+\t\tif ((INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t\t     || POINTER_TYPE_P (TREE_TYPE (lhs)))\n+\t\t    && arith_code_with_undefined_signed_overflow\n+\t\t\t (gimple_assign_rhs_code (ass)))\n+\t\t  rewrite_to_defined_overflow (ass, true);\n+\t      }\n \t    cfg_changed |= true;\n \t  }\n     }"}]}