{"sha": "68e0063397ba820e71adc220b2da0581dce29ffa", "node_id": "C_kwDOANBUbNoAKDY4ZTAwNjMzOTdiYTgyMGU3MWFkYzIyMGIyZGEwNTgxZGNlMjlmZmE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-11T11:36:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-23T09:30:39Z"}, "message": "Force the selection operand of a GIMPLE COND_EXPR to be a register\n\nThis goes away with the selection operand allowed to be a GENERIC\ntcc_comparison tree.  It keeps those for vectorizer pattern recog,\nthose are short lived and removing this instance is a bigger task.\n\nThe patch doesn't yet remove dead code and functionality, that's\nleft for a followup.  Instead the patch makes sure to produce\nvalid GIMPLE IL and continue to optimize COND_EXPRs where the\nprevious IL allowed and the new IL showed regressions in the testsuite.\n\n2022-05-16  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-expr.cc (is_gimple_condexpr): Equate to is_gimple_val.\n\t* gimplify.cc (gimplify_pure_cond_expr): Gimplify the condition\n\tas is_gimple_val.\n\t* gimple-fold.cc (valid_gimple_rhs_p): Simplify.\n\t* tree-cfg.cc (verify_gimple_assign_ternary): Likewise.\n\t* gimple-loop-interchange.cc (loop_cand::undo_simple_reduction):\n\tBuild the condition of the COND_EXPR separately.\n\t* tree-ssa-loop-im.cc (move_computations_worker): Likewise.\n\t* tree-vect-generic.cc (expand_vector_condition): Likewise.\n\t* tree-vect-loop.cc (vect_create_epilog_for_reduction):\n\tLikewise.\n\t* vr-values.cc (simplify_using_ranges::simplify): Likewise.\n\t* tree-vect-patterns.cc: Add comment indicating we are\n\tbuilding invalid COND_EXPRs and why.\n\t* omp-expand.cc (expand_omp_simd): Gimplify the condition\n\tto the COND_EXPR separately.\n\t(expand_omp_atomic_cas): Note part that should be unreachable\n\tnow.\n\t* tree-ssa-forwprop.cc (forward_propagate_into_cond): Adjust\n\tcondition for valid replacements.\n\t* tree-if-conv.cc (predicate_bbs): Simulate previous\n\tre-folding of the condition in folded COND_EXPRs which\n\tis necessary because of unfolded GIMPLE_CONDs in the IL\n\tas in for example gcc.dg/fold-bopcond-1.c.\n\t* gimple-range-gori.cc (gori_compute::condexpr_adjust):\n\tHandle that the comparison is now in the def stmt of\n\tthe select operand.  Required by gcc.dg/pr104526.c.\n\n\t* gcc.dg/gimplefe-27.c: Adjust.\n\t* gcc.dg/gimplefe-45.c: Likewise.\n\t* gcc.dg/pr101145-2.c: Likewise.\n\t* gcc.dg/pr98211.c: Likewise.\n\t* gcc.dg/torture/pr89595.c: Likewise.\n\t* gcc.dg/tree-ssa/divide-7.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-lim-12.c: Likewise.", "tree": {"sha": "171b9d384db6af4abe9509eadbfd1fc950bf0e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171b9d384db6af4abe9509eadbfd1fc950bf0e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68e0063397ba820e71adc220b2da0581dce29ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e0063397ba820e71adc220b2da0581dce29ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e0063397ba820e71adc220b2da0581dce29ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e0063397ba820e71adc220b2da0581dce29ffa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d1a2f91325fa8cc011149e27e5093a988b3a49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d1a2f91325fa8cc011149e27e5093a988b3a49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d1a2f91325fa8cc011149e27e5093a988b3a49"}], "stats": {"total": 166, "additions": 104, "deletions": 62}, "files": [{"sha": "09eac80ae1c68c53297628968fd0103c5b8b85f7", "filename": "gcc/gimple-expr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -622,7 +622,7 @@ is_gimple_condexpr (tree t)\n {\n   /* Always split out _Complex type compares since complex lowering\n      doesn't handle this case.  */\n-  return is_gimple_condexpr_1 (t, true, false);\n+  return is_gimple_val (t);\n }\n \n /* Like is_gimple_condexpr, but does not allow T to trap.  */"}, {"sha": "f61bc87da63f66285c9fb8338d427a67d4a2d2ea", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -418,9 +418,7 @@ valid_gimple_rhs_p (tree expr)\n \tdefault:\n \t  if (get_gimple_rhs_class (code) == GIMPLE_TERNARY_RHS)\n \t    {\n-\t      if ((code == COND_EXPR\n-\t\t   ? !is_gimple_condexpr (TREE_OPERAND (expr, 0))\n-\t\t   : !is_gimple_val (TREE_OPERAND (expr, 0)))\n+\t      if (!is_gimple_val (TREE_OPERAND (expr, 0))\n \t\t  || !is_gimple_val (TREE_OPERAND (expr, 1))\n \t\t  || !is_gimple_val (TREE_OPERAND (expr, 2)))\n \t\treturn false;"}, {"sha": "d5d690b240719389413d9983cad4abb9e067f2d7", "filename": "gcc/gimple-loop-interchange.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-loop-interchange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-loop-interchange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-interchange.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -897,7 +897,9 @@ loop_cand::undo_simple_reduction (reduction_p re, bitmap dce_seeds)\n       /* Init new_var to MEM_REF or CONST depending on if it is the first\n \t iteration.  */\n       induction_p iv = m_inductions[0];\n-      cond = fold_build2 (NE_EXPR, boolean_type_node, iv->var, iv->init_val);\n+      cond = make_ssa_name (boolean_type_node);\n+      stmt = gimple_build_assign (cond, NE_EXPR, iv->var, iv->init_val);\n+      gimple_seq_add_stmt_without_update (&stmts, stmt);\n       new_var = copy_ssa_name (re->var);\n       stmt = gimple_build_assign (new_var, COND_EXPR, cond, tmp, re->init);\n       gimple_seq_add_stmt_without_update (&stmts, stmt);"}, {"sha": "3e15eb5192db306728ca5c2ba4a3e559a57777cb", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -1319,26 +1319,30 @@ gori_compute::condexpr_adjust (irange &r1, irange &r2, gimple *, tree cond,\n   tree ssa2 = gimple_range_ssa_p (op2);\n   if (!ssa1 && !ssa2)\n     return false;\n-  if (!COMPARISON_CLASS_P (cond))\n+  if (TREE_CODE (cond) != SSA_NAME)\n     return false;\n-  tree type = TREE_TYPE (TREE_OPERAND (cond, 0));\n-  if (!range_compatible_p (type, TREE_TYPE (TREE_OPERAND (cond, 1))))\n+  gassign *cond_def = dyn_cast <gassign *> (SSA_NAME_DEF_STMT (cond));\n+  if (!cond_def\n+      || TREE_CODE_CLASS (gimple_assign_rhs_code (cond_def)) != tcc_comparison)\n     return false;\n-  range_operator *hand = range_op_handler (TREE_CODE (cond), type);\n+  tree type = TREE_TYPE (gimple_assign_rhs1 (cond_def));\n+  if (!range_compatible_p (type, TREE_TYPE (gimple_assign_rhs2 (cond_def))))\n+    return false;\n+  range_operator *hand = range_op_handler (gimple_assign_rhs_code (cond_def), type);\n   if (!hand)\n     return false;\n \n-  tree c1 = gimple_range_ssa_p (TREE_OPERAND (cond, 0));\n-  tree c2 = gimple_range_ssa_p (TREE_OPERAND (cond, 1));\n+  tree c1 = gimple_range_ssa_p (gimple_assign_rhs1 (cond_def));\n+  tree c2 = gimple_range_ssa_p (gimple_assign_rhs2 (cond_def));\n \n   // Only solve if there is one SSA name in the condition.\n   if ((!c1 && !c2) || (c1 && c2))\n     return false;\n \n   // Pick up the current values of each part of the condition.\n   int_range_max cl, cr;\n-  src.get_operand (cl, TREE_OPERAND (cond, 0));\n-  src.get_operand (cr, TREE_OPERAND (cond, 1));\n+  src.get_operand (cl, gimple_assign_rhs1 (cond_def));\n+  src.get_operand (cr, gimple_assign_rhs2 (cond_def));\n \n   tree cond_name = c1 ? c1 : c2;\n   gimple *def_stmt = SSA_NAME_DEF_STMT (cond_name);"}, {"sha": "2b92b6394dc757860d5e795436a526fd2d48e3f8", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -4257,14 +4257,14 @@ gimplify_pure_cond_expr (tree *expr_p, gimple_seq *pre_p)\n     TREE_SET_CODE (cond, TRUTH_AND_EXPR);\n   else if (code == TRUTH_ORIF_EXPR)\n     TREE_SET_CODE (cond, TRUTH_OR_EXPR);\n-  ret = gimplify_expr (&cond, pre_p, NULL, is_gimple_condexpr, fb_rvalue);\n+  ret = gimplify_expr (&cond, pre_p, NULL, is_gimple_val, fb_rvalue);\n   COND_EXPR_COND (*expr_p) = cond;\n \n   tret = gimplify_expr (&COND_EXPR_THEN (expr), pre_p, NULL,\n-\t\t\t\t   is_gimple_val, fb_rvalue);\n+\t\t\tis_gimple_val, fb_rvalue);\n   ret = MIN (ret, tret);\n   tret = gimplify_expr (&COND_EXPR_ELSE (expr), pre_p, NULL,\n-\t\t\t\t   is_gimple_val, fb_rvalue);\n+\t\t\tis_gimple_val, fb_rvalue);\n \n   return MIN (ret, tret);\n }"}, {"sha": "5729a20397dc97321dec69a05eaf27b321b28424", "filename": "gcc/omp-expand.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fomp-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fomp-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -6613,9 +6613,9 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n       altn2 = create_tmp_var (TREE_TYPE (altv));\n       expand_omp_build_assign (&gsi, altn2, t);\n       tree t2 = fold_convert (TREE_TYPE (fd->loop.v), n2);\n+      t2 = fold_build2 (fd->loop.cond_code, boolean_type_node, fd->loop.v, t2);\n       t2 = force_gimple_operand_gsi (&gsi, t2, true, NULL_TREE,\n \t\t\t\t     true, GSI_SAME_STMT);\n-      t2 = fold_build2 (fd->loop.cond_code, boolean_type_node, fd->loop.v, t2);\n       gassign *g = gimple_build_assign (altn2, COND_EXPR, t2, altn2,\n \t\t\t\t\tbuild_zero_cst (TREE_TYPE (altv)));\n       gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n@@ -6989,10 +6989,10 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t      tree t2 = fold_convert (TREE_TYPE (fd->loops[i + 1].v),\n \t\t\t\t      fd->loops[i + 1].m2\n \t\t\t\t      ? n2v : fd->loops[i + 1].n2);\n-\t      t2 = force_gimple_operand_gsi (&gsi, t2, true, NULL_TREE,\n-\t\t\t\t\t     true, GSI_SAME_STMT);\n \t      t2 = fold_build2 (fd->loops[i + 1].cond_code, boolean_type_node,\n \t\t\t\tfd->loops[i + 1].v, t2);\n+\t      t2 = force_gimple_operand_gsi (&gsi, t2, true, NULL_TREE,\n+\t\t\t\t\t     true, GSI_SAME_STMT);\n \t      gassign *g\n \t\t= gimple_build_assign (altn2, COND_EXPR, t2, altn2,\n \t\t\t\t       build_zero_cst (TREE_TYPE (altv)));\n@@ -8978,6 +8978,7 @@ expand_omp_atomic_cas (basic_block load_bb, tree addr,\n   tree cond_op1, cond_op2;\n   if (cond_stmt)\n     {\n+      /* We should now always get a separate cond_stmt.  */\n       if (!operand_equal_p (cond, gimple_assign_lhs (cond_stmt)))\n \treturn false;\n       cond_op1 = gimple_assign_rhs1 (cond_stmt);"}, {"sha": "0053222c86780527500857e0d78315ea4cb85411", "filename": "gcc/testsuite/gcc.dg/gimplefe-27.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-27.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -4,6 +4,8 @@ int __GIMPLE ()\n p (int n)\n {\n   int _2;\n-  _2 = n_1(D) != 0 ? 2 : 0;\n+  _Bool _3;\n+  _3 = n_1(D) != 0;\n+  _2 = _3 ? 2 : 0;\n   return _2;\n }"}, {"sha": "8e1447ff3aea8ab067f835c2a4bce345bc163b77", "filename": "gcc/testsuite/gcc.dg/gimplefe-45.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-45.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -10,10 +10,12 @@ p (int n)\n   int *_2;\n   int *_t;\n   int *_t1;\n+  _Bool _3;\n   _t = (int*)8;\n   _t1 = 0;\n   n = n & 2;\n-  _2 = n != 0 ? _t : _t1;\n+  _3 = n != 0;\n+  _2 = _3 ? _t : _t1;\n   return _2;\n }\n "}, {"sha": "dad192cfebf6db052b4c8aa21dd2c90d0a01bc6f", "filename": "gcc/testsuite/gcc.dg/pr101145-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101145-2.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -12,4 +12,6 @@ unsigned foo(unsigned val, unsigned start)\n   return cnt;\n }\n \n-/* { dg-final { scan-tree-dump \"cnt_\\[0-9\\] = start_\\[0-9\\]\\\\(D\\\\) >= val_\\[0-9\\]\\\\(D\\\\) \\\\? _\\[0-9\\] : 1;\" \"optimized\" } } */\n+/* Look for start >= val ? -start : 1  */\n+/* { dg-final { scan-tree-dump \" = start_\\[0-9\\]\\\\(D\\\\) >= val_\\[0-9\\]\\\\(D\\\\);\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"cnt_\\[0-9\\] = _\\[0-9\\]+ \\\\? _\\[0-9\\]+ : 1;\" \"optimized\" } } */"}, {"sha": "8f14c8f98e078d824fd1ae9e6ce2e6d4ccc186d7", "filename": "gcc/testsuite/gcc.dg/pr98211.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr98211.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -13,15 +13,19 @@ test (int var_1, short int a, short int b, short int c, short int d)\n   _Bool _28;\n   short int _30;\n   short int _32;\n+  _Bool _29;\n+  _Bool _31;\n \n   __BB(2):\n   _24 = test_var_3;\n   tem_25 = _24 != 0;\n   tem2_26 = var_1_11(D) != 0;\n   _28 = tem_25 | tem2_26;\n-  _30 = _28 !=  _Literal (_Bool) 0 ? a_16(D) : b_15(D);\n+  _29 = _28 !=  _Literal (_Bool) 0;\n+  _30 = _29 ? a_16(D) : b_15(D);\n   arr_20[0u] = _30;\n-  _32 = _28 != _Literal (_Bool) 0 ? c_19(D) : d_18(D);\n+  _31 = _28 != _Literal (_Bool) 0;\n+  _32 = _31 ? c_19(D) : d_18(D);\n   arr_20[8u] = _32;\n   arr_20[1u] = _30;\n   arr_20[9u] = _32;"}, {"sha": "3a4bed9add89b0c8a97f63b47c0e4c559f84c1d9", "filename": "gcc/testsuite/gcc.dg/torture/pr89595.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89595.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89595.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr89595.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -5,6 +5,7 @@ int __attribute__((noipa))\n __GIMPLE(ssa,startwith(\"dom\")) bar(int cond, int val)\n {\n   int i;\n+  _Bool _7;\n \n __BB(3):\n   if (0 != 0)\n@@ -20,7 +21,8 @@ __BB(2):\n \n __BB(4):\n   i_6 = val_2(D);\n-  i_1 = val_2(D) > 0 ? i_6 : 0;\n+  _7 = val_2(D) > 0;\n+  i_1 = _7 ? i_6 : 0;\n   goto __BB5;\n \n __BB(5):"}, {"sha": "c577ea3fbe1be58da2c1f7301ef97bbb4951b5fc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/divide-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-7.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -6,4 +6,5 @@ int f(int x) {\n }\n \n /* { dg-final { scan-tree-dump-not \"1 / x_\\[0-9]\\+\\\\\\(D\\\\\\);\" \"optimized\" } } */\n-/* { dg-final { scan-tree-dump \" <= 2 \\\\? x_\\[0-9]\\+\\\\\\(D\\\\\\) : 0;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" <= 2;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" \\\\? x_\\[0-9]\\+\\\\\\(D\\\\\\) : 0;\" \"optimized\" } } */"}, {"sha": "c483951395b967f41bbee6059010a33d83188871", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-12.c?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -23,4 +23,4 @@ void bar (int x, int z)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"!= 0 ? \" 2 \"lim2\" } } */\n+/* { dg-final { scan-tree-dump-times \" = _\\[0-9\\]+ ? \" 2 \"lim2\" } } */"}, {"sha": "0a962dd542172c1dd6d520f2c6c61734cedc682c", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -4240,8 +4240,7 @@ verify_gimple_assign_ternary (gassign *stmt)\n       return true;\n     }\n \n-  if ((rhs_code == COND_EXPR\n-       ? !is_gimple_condexpr (rhs1) : !is_gimple_val (rhs1))\n+  if (!is_gimple_val (rhs1)\n       || !is_gimple_val (rhs2)\n       || !is_gimple_val (rhs3))\n     {\n@@ -4284,17 +4283,8 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  debug_generic_expr (rhs1_type);\n \t  return true;\n \t}\n-      if (!is_gimple_val (rhs1))\n-\treturn true;\n       /* Fallthrough.  */\n     case COND_EXPR:\n-      if (!is_gimple_val (rhs1)\n-\t  && (!is_gimple_condexpr (rhs1)\n-\t      || verify_gimple_comparison (TREE_TYPE (rhs1),\n-\t\t\t\t\t   TREE_OPERAND (rhs1, 0),\n-\t\t\t\t\t   TREE_OPERAND (rhs1, 1),\n-\t\t\t\t\t   TREE_CODE (rhs1))))\n-\treturn true;\n       if (!useless_type_conversion_p (lhs_type, rhs2_type)\n \t  || !useless_type_conversion_p (lhs_type, rhs3_type))\n \t{"}, {"sha": "5b884aae3d633df0894d8fc344ce2107581c1b61", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -1298,10 +1298,31 @@ predicate_bbs (loop_p loop)\n \t  tree c2;\n \t  edge true_edge, false_edge;\n \t  location_t loc = gimple_location (stmt);\n-\t  tree c = build2_loc (loc, gimple_cond_code (stmt),\n-\t\t\t\t    boolean_type_node,\n-\t\t\t\t    gimple_cond_lhs (stmt),\n-\t\t\t\t    gimple_cond_rhs (stmt));\n+\t  tree c;\n+\t  /* gcc.dg/fold-bopcond-1.c shows that despite all forwprop passes\n+\t     conditions can remain unfolded because of multiple uses so\n+\t     try to re-fold here, especially to get precision changing\n+\t     conversions sorted out.  Do not simply fold the stmt since\n+\t     this is analysis only.  When conditions were embedded in\n+\t     COND_EXPRs those were folded separately before folding the\n+\t     COND_EXPR but as they are now outside we have to make sure\n+\t     to fold them.  Do it here - another opportunity would be to\n+\t     fold predicates as they are inserted.  */\n+\t  gimple_match_op cexpr (gimple_match_cond::UNCOND,\n+\t\t\t\t gimple_cond_code (stmt),\n+\t\t\t\t boolean_type_node,\n+\t\t\t\t gimple_cond_lhs (stmt),\n+\t\t\t\t gimple_cond_rhs (stmt));\n+\t  if (cexpr.resimplify (NULL, follow_all_ssa_edges)\n+\t      && cexpr.code.is_tree_code ()\n+\t      && TREE_CODE_CLASS ((tree_code)cexpr.code) == tcc_comparison)\n+\t    c = build2_loc (loc, (tree_code)cexpr.code, boolean_type_node,\n+\t\t\t    cexpr.ops[0], cexpr.ops[1]);\n+\t  else\n+\t    c = build2_loc (loc, gimple_cond_code (stmt),\n+\t\t\t    boolean_type_node,\n+\t\t\t    gimple_cond_lhs (stmt),\n+\t\t\t    gimple_cond_rhs (stmt));\n \n \t  /* Add new condition into destination's predicate list.  */\n \t  extract_true_false_edges_from_block (gimple_bb (stmt),"}, {"sha": "b582529c404b045e6a7600c8b79c756c9c0a81c4", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -610,7 +610,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n     }\n \n   if (tmp\n-      && is_gimple_condexpr (tmp))\n+      && is_gimple_val (tmp))\n     {\n       if (dump_file)\n \t{"}, {"sha": "bfd6126a4a583b165058ab99a92821b2b276025c", "filename": "gcc/tree-ssa-loop-im.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-ssa-loop-im.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-ssa-loop-im.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -1241,8 +1241,11 @@ move_computations_worker (basic_block bb)\n \t     edges of COND.  */\n \t  extract_true_false_args_from_phi (dom, stmt, &arg0, &arg1);\n \t  gcc_assert (arg0 && arg1);\n-\t  t = build2 (gimple_cond_code (cond), boolean_type_node,\n-\t\t      gimple_cond_lhs (cond), gimple_cond_rhs (cond));\n+\t  t = make_ssa_name (boolean_type_node);\n+\t  new_stmt = gimple_build_assign (t, gimple_cond_code (cond),\n+\t\t\t\t\t  gimple_cond_lhs (cond),\n+\t\t\t\t\t  gimple_cond_rhs (cond));\n+\t  gsi_insert_on_edge (loop_preheader_edge (level), new_stmt);\n \t  new_stmt = gimple_build_assign (gimple_phi_result (stmt),\n \t\t\t\t\t  COND_EXPR, t, arg0, arg1);\n \t  todo |= TODO_cleanup_cfg;"}, {"sha": "f7de64cea404a796bc37816dc1abec390a683a40", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -1131,15 +1131,15 @@ expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n \t\t\t\t       comp_width, comp_index);\n \t  tree aa2 = tree_vec_extract (gsi, comp_inner_type, a2,\n \t\t\t\t       comp_width, comp_index);\n-\t  aa = build2 (code, cond_type, aa1, aa2);\n+\t  aa = gimplify_build2 (gsi, code, cond_type, aa1, aa2);\n \t}\n       else if (a_is_scalar_bitmask)\n \t{\n \t  wide_int w = wi::set_bit_in_zero (i, TYPE_PRECISION (TREE_TYPE (a)));\n \t  result = gimplify_build2 (gsi, BIT_AND_EXPR, TREE_TYPE (a),\n \t\t\t\t    a, wide_int_to_tree (TREE_TYPE (a), w));\n-\t  aa = build2 (NE_EXPR, boolean_type_node, result,\n-\t\t       build_zero_cst (TREE_TYPE (a)));\n+\t  aa = gimplify_build2 (gsi, NE_EXPR, boolean_type_node, result,\n+\t\t\t\tbuild_zero_cst (TREE_TYPE (a)));\n \t}\n       else\n \taa = tree_vec_extract (gsi, cond_type, a, comp_width, comp_index);"}, {"sha": "f204b72a7527280efe6c0bfcc808ee0d28c654a1", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -5697,14 +5697,13 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \t\t\t\t\t\t     old_idx_val);\n \t\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n \t\t}\n+\t      tree cond = make_ssa_name (boolean_type_node);\n+\t      epilog_stmt = gimple_build_assign (cond, GT_EXPR,\n+\t\t\t\t\t\t idx_val, old_idx_val);\n+\t      gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n \t      tree new_val = make_ssa_name (data_eltype);\n-\t      epilog_stmt = gimple_build_assign (new_val,\n-\t\t\t\t\t\t COND_EXPR,\n-\t\t\t\t\t\t build2 (GT_EXPR,\n-\t\t\t\t\t\t\t boolean_type_node,\n-\t\t\t\t\t\t\t idx_val,\n-\t\t\t\t\t\t\t old_idx_val),\n-\t\t\t\t\t\t val, old_val);\n+\t      epilog_stmt = gimple_build_assign (new_val, COND_EXPR,\n+\t\t\t\t\t\t cond, val, old_val);\n \t      gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n \t      idx_val = new_idx_val;\n \t      val = new_val;\n@@ -5747,10 +5746,11 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \t     values.  Check the result and if it is induc_val then replace\n \t     with the original initial value, unless induc_val is\n \t     the same as initial_def already.  */\n-\t  tree zcompare = build2 (EQ_EXPR, boolean_type_node, new_temp,\n-\t\t\t\t  induc_val);\n+\t  tree zcompare = make_ssa_name (boolean_type_node);\n+\t  epilog_stmt = gimple_build_assign (zcompare, EQ_EXPR,\n+\t\t\t\t\t     new_temp, induc_val);\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n \t  tree initial_def = reduc_info->reduc_initial_values[0];\n-\n \t  tmp = make_ssa_name (new_scalar_dest);\n \t  epilog_stmt = gimple_build_assign (tmp, COND_EXPR, zcompare,\n \t\t\t\t\t     initial_def, new_temp);\n@@ -6039,10 +6039,11 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n \t     values.  Check the result and if it is induc_val then replace\n \t     with the original initial value, unless induc_val is\n \t     the same as initial_def already.  */\n-\t  tree zcompare = build2 (EQ_EXPR, boolean_type_node, new_temp,\n-\t\t\t\t  induc_val);\n+\t  tree zcompare = make_ssa_name (boolean_type_node);\n+\t  epilog_stmt = gimple_build_assign (zcompare, EQ_EXPR, new_temp,\n+\t\t\t\t\t     induc_val);\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n \t  tree initial_def = reduc_info->reduc_initial_values[0];\n-\n \t  tree tmp = make_ssa_name (new_scalar_dest);\n \t  epilog_stmt = gimple_build_assign (tmp, COND_EXPR, zcompare,\n \t\t\t\t\t     initial_def, new_temp);"}, {"sha": "ac49c1a26e15085b1b686c7bc42f5c00080f13e4", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -50,6 +50,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec-perm-indices.h\"\n #include \"gimple-range.h\"\n \n+\n+/* TODO:  Note the vectorizer still builds COND_EXPRs with GENERIC compares\n+   in the first operand.  Disentangling this is future work, the\n+   IL is properly transfered to VEC_COND_EXPRs with separate compares.  */\n+\n+\n /* Return true if we have a useful VR_RANGE range for VAR, storing it\n    in *MIN_VALUE and *MAX_VALUE if so.  Note the range in the dump files.  */\n "}, {"sha": "47faa4ff938099917d9cef7d9d5a3e8ac1018f08", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68e0063397ba820e71adc220b2da0581dce29ffa/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=68e0063397ba820e71adc220b2da0581dce29ffa", "patch": "@@ -4292,7 +4292,10 @@ simplify_using_ranges::simplify (gimple_stmt_iterator *gsi)\n \t     in divide by zero, new_rhs1 / new_rhs will be NULL_TREE.  */\n \t  if (new_rhs1 && new_rhs2)\n \t    {\n-\t      tree cond = build2 (EQ_EXPR, boolean_type_node, cmp_var, val1);\n+\t      tree cond = gimple_build (gsi, true, GSI_SAME_STMT,\n+\t\t\t\t\tUNKNOWN_LOCATION,\n+\t\t\t\t\tEQ_EXPR, boolean_type_node,\n+\t\t\t\t\tcmp_var, val1);\n \t      gimple_assign_set_rhs_with_ops (gsi,\n \t\t\t\t\t      COND_EXPR, cond,\n \t\t\t\t\t      new_rhs1,"}]}