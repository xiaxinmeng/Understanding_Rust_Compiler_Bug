{"sha": "842392c856b8e15f8105b5fd8c3ed454cfd7c912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyMzkyYzg1NmI4ZTE1ZjgxMDViNWZkOGMzZWQ0NTRjZmQ3YzkxMg==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-03-23T22:12:06Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-03-23T22:12:06Z"}, "message": "p9-options-1.c: New test.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/p9-options-1.c: New test.\n\ngcc/ChangeLog:\n\n2017-03-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Change\n\thandling of certain combinations of target options, including the\n\tcombinations -mpower8-vector vs. -mno-vsx, -mpower9-vector vs.\n\t-mno-power8-vector, and -mpower9_dform vs. -mno-power9-vector.\n\nFrom-SVN: r246428", "tree": {"sha": "935aad24f47426259e6ff8eeeb079294ecd618fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/935aad24f47426259e6ff8eeeb079294ecd618fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/842392c856b8e15f8105b5fd8c3ed454cfd7c912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842392c856b8e15f8105b5fd8c3ed454cfd7c912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842392c856b8e15f8105b5fd8c3ed454cfd7c912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842392c856b8e15f8105b5fd8c3ed454cfd7c912/comments", "author": null, "committer": null, "parents": [{"sha": "01e3c2296ab9c74724c6cde8cd2b224640ece969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e3c2296ab9c74724c6cde8cd2b224640ece969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e3c2296ab9c74724c6cde8cd2b224640ece969"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "d1dcff022044bdc6ff193454f1cfad8de6ffd3fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=842392c856b8e15f8105b5fd8c3ed454cfd7c912", "patch": "@@ -1,3 +1,10 @@\n+2017-03-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Change\n+\thandling of certain combinations of target options, including the\n+\tcombinations -mpower8-vector vs. -mno-vsx, -mpower9-vector vs.\n+\t-mno-power8-vector, and -mpower9_dform vs. -mno-power9-vector.\n+\n 2017-03-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/71436"}, {"sha": "c91d2199acefaada2614f29c1f5933c54d0a4a0d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=842392c856b8e15f8105b5fd8c3ed454cfd7c912", "patch": "@@ -4315,9 +4315,22 @@ rs6000_option_override_internal (bool global_init_p)\n \n   if (TARGET_P8_VECTOR && !TARGET_VSX)\n     {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR)\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR)\n+\t  && (rs6000_isa_flags_explicit & OPTION_MASK_VSX))\n \terror (\"-mpower8-vector requires -mvsx\");\n-      rs6000_isa_flags &= ~OPTION_MASK_P8_VECTOR;\n+      else if ((rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR) == 0)\n+\t{\n+\t  rs6000_isa_flags &= ~OPTION_MASK_P8_VECTOR;\n+\t  if (rs6000_isa_flags_explicit & OPTION_MASK_VSX)\n+\t    rs6000_isa_flags_explicit |= OPTION_MASK_P8_VECTOR;\n+\t}\n+      else\n+\t{\n+\t  /* OPTION_MASK_P8_VECTOR is explicit, and OPTION_MASK_VSX is\n+\t     not explicit.  */\n+\t  rs6000_isa_flags |= OPTION_MASK_VSX;\n+\t  rs6000_isa_flags_explicit |= OPTION_MASK_VSX;\n+\t}\n     }\n \n   if (TARGET_VSX_TIMODE && !TARGET_VSX)\n@@ -4517,9 +4530,22 @@ rs6000_option_override_internal (bool global_init_p)\n \t error messages.  However, if users have managed to select\n \t power9-vector without selecting power8-vector, they\n \t already know about undocumented flags.  */\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR)\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR) &&\n+\t  (rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR))\n \terror (\"-mpower9-vector requires -mpower8-vector\");\n-      rs6000_isa_flags &= ~OPTION_MASK_P9_VECTOR;\n+      else if ((rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR) == 0)\n+\t{\n+\t  rs6000_isa_flags &= ~OPTION_MASK_P9_VECTOR;\n+\t  if (rs6000_isa_flags_explicit & OPTION_MASK_P8_VECTOR)\n+\t    rs6000_isa_flags_explicit |= OPTION_MASK_P9_VECTOR;\n+\t}\n+      else\n+\t{\n+\t  /* OPTION_MASK_P9_VECTOR is explicit and\n+\t     OPTION_MASK_P8_VECTOR is not explicit.  */\n+\t  rs6000_isa_flags |= OPTION_MASK_P8_VECTOR;\n+\t  rs6000_isa_flags_explicit |= OPTION_MASK_P8_VECTOR;\n+\t}\n     }\n \n   /* -mpower9-dform turns on both -mpower9-dform-scalar and\n@@ -4548,10 +4574,25 @@ rs6000_option_override_internal (bool global_init_p)\n \t error messages.  However, if users have managed to select\n \t power9-dform without selecting power9-vector, they\n \t already know about undocumented flags.  */\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n+      if ((rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n+\t  && (rs6000_isa_flags_explicit & (OPTION_MASK_P9_DFORM_SCALAR\n+\t\t\t\t\t   | OPTION_MASK_P9_DFORM_VECTOR)))\n \terror (\"-mpower9-dform requires -mpower9-vector\");\n-      rs6000_isa_flags &= ~(OPTION_MASK_P9_DFORM_SCALAR\n-\t\t\t    | OPTION_MASK_P9_DFORM_VECTOR);\n+      else if (rs6000_isa_flags_explicit & OPTION_MASK_P9_VECTOR)\n+\t{\n+\t  rs6000_isa_flags &=\n+\t    ~(OPTION_MASK_P9_DFORM_SCALAR | OPTION_MASK_P9_DFORM_VECTOR);\n+\t  rs6000_isa_flags_explicit |=\n+\t    (OPTION_MASK_P9_DFORM_SCALAR | OPTION_MASK_P9_DFORM_VECTOR);\n+\t}\n+      else\n+\t{\n+\t  /* We know that OPTION_MASK_P9_VECTOR is not explicit and\n+\t     OPTION_MASK_P9_DFORM_SCALAR or OPTION_MASK_P9_DORM_VECTOR\n+\t     may be explicit.  */\n+\t  rs6000_isa_flags |= OPTION_MASK_P9_VECTOR;\n+\t  rs6000_isa_flags_explicit |= OPTION_MASK_P9_VECTOR;\n+\t}\n     }\n \n   if (TARGET_P9_DFORM_SCALAR && !TARGET_UPPER_REGS_DF)"}, {"sha": "195552897f00b4a4ac03a43daaca70ed416b46d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=842392c856b8e15f8105b5fd8c3ed454cfd7c912", "patch": "@@ -1,3 +1,7 @@\n+2017-03-23  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/p9-options-1.c: New test.\n+\n 2017-03-23  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/71436"}, {"sha": "30a6b9313c232cd7d4ad1d3b4905b23ea89ffcbc", "filename": "gcc/testsuite/gcc.target/powerpc/p9-options-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-options-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842392c856b8e15f8105b5fd8c3ed454cfd7c912/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-options-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-options-1.c?ref=842392c856b8e15f8105b5fd8c3ed454cfd7c912", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -mno-power9-vector\" } */\n+\n+#include <altivec.h>\n+\n+/* This program's \"test for excess errors\" demonstrates that combining\n+   the target options -mcpu=power9 and -mno-power9-vector does not\n+   result in an error.  A previous version of the compiler aborted\n+   with the error message:\n+\n+      \"power9-dform requires power9-vector.\"\n+\n+   when these two options were used in combination.\n+\n+   The newer version of the compiler, instead, automatically disables\n+   power9-dform when the -mno-power9-vector command-line option is\n+   specified.  */\n+int\n+test_any_equal (vector bool char *arg1_p, vector bool char *arg2_p)\n+{\n+  vector bool char arg_1 = *arg1_p;\n+  vector bool char arg_2 = *arg2_p;\n+\n+  return vec_any_eq (arg_1, arg_2);\n+}\n+"}]}