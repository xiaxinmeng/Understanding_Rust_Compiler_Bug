{"sha": "9f4d9a366b3299c276043ab987234c7bed7d29f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0ZDlhMzY2YjMyOTljMjc2MDQzYWI5ODcyMzRjN2JlZDdkMjlmMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-02T11:24:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-02T11:24:27Z"}, "message": "tree-vectorizer.h (vect_transform_reduction): Declare.\n\n2019-10-02  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vect_transform_reduction): Declare.\n\t* tree-vect-stmts.c (vect_transform_stmt): Use it.\n\t* tree-vect-loop.c (vectorizable_reduction): Split out reduction\n\tstmt transform to ...\n\t(vect_transform_reduction): ... this.\n\nFrom-SVN: r276452", "tree": {"sha": "42a2e348ea2df118510ecce892fb80d520565e45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42a2e348ea2df118510ecce892fb80d520565e45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f4d9a366b3299c276043ab987234c7bed7d29f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4d9a366b3299c276043ab987234c7bed7d29f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4d9a366b3299c276043ab987234c7bed7d29f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4d9a366b3299c276043ab987234c7bed7d29f2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef4add8e543091083b1a30350b653968e7c58ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4add8e543091083b1a30350b653968e7c58ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4add8e543091083b1a30350b653968e7c58ab2"}], "stats": {"total": 269, "additions": 231, "deletions": 38}, "files": [{"sha": "441e5bbc0e7bd87d87e434afe0293c606f9aebb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f4d9a366b3299c276043ab987234c7bed7d29f2", "patch": "@@ -1,3 +1,11 @@\n+2019-10-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_transform_reduction): Declare.\n+\t* tree-vect-stmts.c (vect_transform_stmt): Use it.\n+\t* tree-vect-loop.c (vectorizable_reduction): Split out reduction\n+\tstmt transform to ...\n+\t(vect_transform_reduction): ... this.\n+\n 2019-10-02  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* omp-low.c (lower_omp_target): Dereference optional argument"}, {"sha": "31e745780baba9939303eeba62808419445be973", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 220, "deletions": 36, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9f4d9a366b3299c276043ab987234c7bed7d29f2", "patch": "@@ -5784,7 +5784,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   int i;\n   int ncopies;\n   bool single_defuse_cycle = false;\n-  int j;\n   tree ops[3];\n   enum vect_def_type dts[3];\n   bool nested_cycle = false, found_nested_cycle_def = false;\n@@ -6576,43 +6575,224 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n   bool mask_by_cond_expr = use_mask_by_cond_expr_p (code, cond_fn, vectype_in);\n \n-  if (!vec_stmt) /* transformation not required.  */\n+  /* transformation not required.  */\n+  gcc_assert (!vec_stmt);\n+\n+  vect_model_reduction_cost (stmt_info, reduc_fn, ncopies, cost_vec);\n+  if (loop_vinfo && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n     {\n-      vect_model_reduction_cost (stmt_info, reduc_fn, ncopies, cost_vec);\n-      if (loop_vinfo && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo))\n+      if (reduction_type != FOLD_LEFT_REDUCTION\n+\t  && !mask_by_cond_expr\n+\t  && (cond_fn == IFN_LAST\n+\t      || !direct_internal_fn_supported_p (cond_fn, vectype_in,\n+\t\t\t\t\t\t  OPTIMIZE_FOR_SPEED)))\n \t{\n-\t  if (reduction_type != FOLD_LEFT_REDUCTION\n-\t      && !mask_by_cond_expr\n-\t      && (cond_fn == IFN_LAST\n-\t\t  || !direct_internal_fn_supported_p (cond_fn, vectype_in,\n-\t\t\t\t\t\t      OPTIMIZE_FOR_SPEED)))\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"can't use a fully-masked loop because no\"\n-\t\t\t\t \" conditional operation is available.\\n\");\n-\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n-\t    }\n-\t  else if (reduc_index == -1)\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"can't use a fully-masked loop for chained\"\n-\t\t\t\t \" reductions.\\n\");\n-\t      LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n-\t    }\n-\t  else\n-\t    vect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n-\t\t\t\t   vectype_in);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"can't use a fully-masked loop because no\"\n+\t\t\t     \" conditional operation is available.\\n\");\n+\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n \t}\n-      if (dump_enabled_p ()\n-\t  && reduction_type == FOLD_LEFT_REDUCTION)\n-\tdump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t \"using an in-order (fold-left) reduction.\\n\");\n-      STMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n-      return true;\n+      else if (reduc_index == -1)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"can't use a fully-masked loop for chained\"\n+\t\t\t     \" reductions.\\n\");\n+\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n+\t}\n+      else\n+\tvect_record_loop_mask (loop_vinfo, masks, ncopies * vec_num,\n+\t\t\t       vectype_in);\n+    }\n+  if (dump_enabled_p ()\n+      && reduction_type == FOLD_LEFT_REDUCTION)\n+    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t     \"using an in-order (fold-left) reduction.\\n\");\n+  STMT_VINFO_TYPE (stmt_info) = reduc_vec_info_type;\n+  return true;\n+}\n+\n+/* Transform the definition stmt STMT_INFO of a reduction PHI backedge\n+   value.  */\n+\n+bool\n+vect_transform_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n+\t\t\t  stmt_vec_info *vec_stmt, slp_tree slp_node)\n+{\n+  tree vectype_out = STMT_VINFO_VECTYPE (stmt_info);\n+  tree vectype_in = NULL_TREE;\n+  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n+  class loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n+  enum tree_code code;\n+  int op_type;\n+  bool is_simple_use;\n+  int i;\n+  int ncopies;\n+  bool single_defuse_cycle = false;\n+  int j;\n+  tree ops[3];\n+  bool nested_cycle = false;\n+  int vec_num;\n+\n+  if (nested_in_vect_loop_p (loop, stmt_info))\n+    {\n+      loop = loop->inner;\n+      nested_cycle = true;\n     }\n \n+  gassign *stmt = as_a <gassign *> (stmt_info->stmt);\n+\n+  /* Flatten RHS.  */\n+  switch (get_gimple_rhs_class (gimple_assign_rhs_code (stmt)))\n+    {\n+    case GIMPLE_BINARY_RHS:\n+      code = gimple_assign_rhs_code (stmt);\n+      op_type = TREE_CODE_LENGTH (code);\n+      gcc_assert (op_type == binary_op);\n+      ops[0] = gimple_assign_rhs1 (stmt);\n+      ops[1] = gimple_assign_rhs2 (stmt);\n+      break;\n+\n+    case GIMPLE_TERNARY_RHS:\n+      code = gimple_assign_rhs_code (stmt);\n+      op_type = TREE_CODE_LENGTH (code);\n+      gcc_assert (op_type == ternary_op);\n+      ops[0] = gimple_assign_rhs1 (stmt);\n+      ops[1] = gimple_assign_rhs2 (stmt);\n+      ops[2] = gimple_assign_rhs3 (stmt);\n+      break;\n+\n+    case GIMPLE_UNARY_RHS:\n+      return false;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* All uses but the last are expected to be defined in the loop.\n+     The last use is the reduction variable.  In case of nested cycle this\n+     assumption is not true: we use reduc_index to record the index of the\n+     reduction variable.  */\n+  stmt_vec_info reduc_def_info\n+    = STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info));\n+  gcc_assert (reduc_def_info);\n+  gphi *reduc_def_phi = as_a <gphi *> (reduc_def_info->stmt);\n+  tree reduc_def = PHI_RESULT (reduc_def_phi);\n+  int reduc_index = -1;\n+  for (i = 0; i < op_type; i++)\n+    {\n+      /* The condition of COND_EXPR is checked in vectorizable_condition().  */\n+      if (i == 0 && code == COND_EXPR)\n+        continue;\n+\n+      stmt_vec_info def_stmt_info;\n+      enum vect_def_type dt;\n+      tree tem;\n+      is_simple_use = vect_is_simple_use (ops[i], loop_vinfo, &dt, &tem,\n+\t\t\t\t\t  &def_stmt_info);\n+      gcc_assert (is_simple_use);\n+      if (dt == vect_reduction_def\n+\t  && ops[i] == reduc_def)\n+\t{\n+\t  reduc_index = i;\n+\t  continue;\n+\t}\n+      else if (tem)\n+\t{\n+\t  /* To properly compute ncopies we are interested in the widest\n+\t     input type in case we're looking at a widening accumulation.  */\n+\t  if (!vectype_in\n+\t      || (GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (vectype_in)))\n+\t\t  < GET_MODE_SIZE (SCALAR_TYPE_MODE (TREE_TYPE (tem)))))\n+\t    vectype_in = tem;\n+\t}\n+\n+      if (dt == vect_nested_cycle\n+\t  && ops[i] == reduc_def)\n+\t{\n+\t  reduc_index = i;\n+\t}\n+    }\n+\n+  if (!vectype_in)\n+    vectype_in = vectype_out;\n+\n+  if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == INTEGER_INDUC_COND_REDUCTION\n+      && dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t     \"condition expression based on \"\n+\t\t     \"integer induction.\\n\");\n+\n+  if (slp_node)\n+    ncopies = 1;\n+  else\n+    ncopies = vect_get_num_copies (loop_vinfo, vectype_in);\n+\n+  vect_reduction_type reduction_type\n+    = STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info);\n+\n+  /* In case of widenning multiplication by a constant, we update the type\n+     of the constant to be the type of the other operand.  We check that the\n+     constant fits the type in the pattern recognition pass.  */\n+  if (code == DOT_PROD_EXPR\n+      && !types_compatible_p (TREE_TYPE (ops[0]), TREE_TYPE (ops[1])))\n+    {\n+      gcc_unreachable ();\n+      /* No testcase for this.  PR49478.  */\n+      if (TREE_CODE (ops[0]) == INTEGER_CST)\n+        ops[0] = fold_convert (TREE_TYPE (ops[1]), ops[0]);\n+      else if (TREE_CODE (ops[1]) == INTEGER_CST)\n+        ops[1] = fold_convert (TREE_TYPE (ops[0]), ops[1]);\n+    }\n+\n+  /* In case the vectorization factor (VF) is bigger than the number\n+     of elements that we can fit in a vectype (nunits), we have to generate\n+     more than one vector stmt - i.e - we need to \"unroll\" the\n+     vector stmt by a factor VF/nunits.  For more details see documentation\n+     in vectorizable_operation.  */\n+\n+  /* If the reduction is used in an outer loop we need to generate\n+     VF intermediate results, like so (e.g. for ncopies=2):\n+\tr0 = phi (init, r0)\n+\tr1 = phi (init, r1)\n+\tr0 = x0 + r0;\n+        r1 = x1 + r1;\n+    (i.e. we generate VF results in 2 registers).\n+    In this case we have a separate def-use cycle for each copy, and therefore\n+    for each copy we get the vector def for the reduction variable from the\n+    respective phi node created for this copy.\n+\n+    Otherwise (the reduction is unused in the loop nest), we can combine\n+    together intermediate results, like so (e.g. for ncopies=2):\n+\tr = phi (init, r)\n+\tr = x0 + r;\n+\tr = x1 + r;\n+   (i.e. we generate VF/2 results in a single register).\n+   In this case for each copy we get the vector def for the reduction variable\n+   from the vectorized reduction operation generated in the previous iteration.\n+\n+   This only works when we see both the reduction PHI and its only consumer\n+   in vectorizable_reduction and there are no intermediate stmts\n+   participating.  */\n+  stmt_vec_info use_stmt_info;\n+  tree reduc_phi_result = gimple_phi_result (reduc_def_phi);\n+  if (ncopies > 1\n+      && (STMT_VINFO_RELEVANT (stmt_info) <= vect_used_only_live)\n+      && (use_stmt_info = loop_vinfo->lookup_single_use (reduc_phi_result))\n+      && (!STMT_VINFO_IN_PATTERN_P (use_stmt_info)\n+\t  || !STMT_VINFO_PATTERN_DEF_SEQ (use_stmt_info))\n+      && vect_stmt_to_vectorize (use_stmt_info) == stmt_info)\n+    single_defuse_cycle = true;\n+\n+  if (slp_node)\n+    vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n+  else\n+    vec_num = 1;\n+\n+  internal_fn cond_fn = get_conditional_internal_fn (code);\n+  vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n+  bool mask_by_cond_expr = use_mask_by_cond_expr_p (code, cond_fn, vectype_in);\n \n   /* Transform.  */\n   stmt_vec_info new_stmt_info = NULL;\n@@ -6633,9 +6813,12 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   bool masked_loop_p = LOOP_VINFO_FULLY_MASKED_P (loop_vinfo);\n \n   if (reduction_type == FOLD_LEFT_REDUCTION)\n-    return vectorize_fold_left_reduction\n-      (stmt_info, gsi, vec_stmt, slp_node, reduc_def_phi, code,\n-       reduc_fn, ops, vectype_in, reduc_index, masks);\n+    {\n+      internal_fn reduc_fn = STMT_VINFO_REDUC_FN (stmt_info);\n+      return vectorize_fold_left_reduction\n+\t  (stmt_info, gsi, vec_stmt, slp_node, reduc_def_phi, code,\n+\t   reduc_fn, ops, vectype_in, reduc_index, masks);\n+    }\n \n   if (reduction_type == EXTRACT_LAST_REDUCTION)\n     {\n@@ -6645,6 +6828,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n     }\n \n   /* Create the destination vector  */\n+  tree scalar_dest = gimple_assign_lhs (stmt);\n   tree vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n \n   prev_stmt_info = NULL;"}, {"sha": "f997ad2b429b90581f009abf03d50434855f2024", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9f4d9a366b3299c276043ab987234c7bed7d29f2", "patch": "@@ -10819,8 +10819,7 @@ vect_transform_stmt (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       break;\n \n     case reduc_vec_info_type:\n-      done = vectorizable_reduction (stmt_info, gsi, &vec_stmt, slp_node,\n-\t\t\t\t     slp_node_instance, NULL);\n+      done = vect_transform_reduction (stmt_info, gsi, &vec_stmt, slp_node);\n       gcc_assert (done);\n       break;\n "}, {"sha": "837fb5ab52537cdf95a413557335b30704f9dc26", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4d9a366b3299c276043ab987234c7bed7d29f2/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9f4d9a366b3299c276043ab987234c7bed7d29f2", "patch": "@@ -1659,6 +1659,8 @@ extern bool vectorizable_reduction (stmt_vec_info, gimple_stmt_iterator *,\n extern bool vectorizable_induction (stmt_vec_info, gimple_stmt_iterator *,\n \t\t\t\t    stmt_vec_info *, slp_tree,\n \t\t\t\t    stmt_vector_for_cost *);\n+extern bool vect_transform_reduction (stmt_vec_info, gimple_stmt_iterator *,\n+\t\t\t\t      stmt_vec_info *, slp_tree);\n extern bool vect_transform_cycle_phi (stmt_vec_info, stmt_vec_info *,\n \t\t\t\t      slp_tree, slp_instance);\n extern bool vectorizable_lc_phi (stmt_vec_info, stmt_vec_info *, slp_tree);"}]}