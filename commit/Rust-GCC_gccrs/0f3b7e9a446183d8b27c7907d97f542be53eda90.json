{"sha": "0f3b7e9a446183d8b27c7907d97f542be53eda90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYzYjdlOWE0NDYxODNkOGIyN2M3OTA3ZDk3ZjU0MmJlNTNlZGE5MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-02-10T12:21:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-02-10T12:21:16Z"}, "message": "re PR middle-end/48600 (ICE when using cold attribute)\n\n\tPR middle-end/48600\n\t* predict.c (predict_paths_for_bb): Prevent looping.\n\t(predict_paths_leading_to_edge, predict_paths_leading_to): Update.\n\t* g++.dg/torture/pr48600.C: New testcase.\n\nFrom-SVN: r184089", "tree": {"sha": "5b6fdd5a22647ed052e64b528c984e777237ece1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6fdd5a22647ed052e64b528c984e777237ece1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f3b7e9a446183d8b27c7907d97f542be53eda90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3b7e9a446183d8b27c7907d97f542be53eda90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f3b7e9a446183d8b27c7907d97f542be53eda90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f3b7e9a446183d8b27c7907d97f542be53eda90/comments", "author": null, "committer": null, "parents": [{"sha": "76c9058b16afd55322d6f400f3ebf6072164eb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c9058b16afd55322d6f400f3ebf6072164eb35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c9058b16afd55322d6f400f3ebf6072164eb35"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "7dd7717fdeaff7492a674a180c71d9b5f27c6190", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f3b7e9a446183d8b27c7907d97f542be53eda90", "patch": "@@ -1,3 +1,9 @@\n+2012-02-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/48600\n+\t* predict.c (predict_paths_for_bb): Prevent looping.\n+\t(predict_paths_leading_to_edge, predict_paths_leading_to): Update.\n+\n 2012-02-10  Roman Zhuykov  <zhroma@ispras.ru>\n \n \t* config/arm/arm.c (output_move_double): In one case properly"}, {"sha": "67131c9e7594d961af44ca547f49a723afa38e08", "filename": "gcc/predict.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=0f3b7e9a446183d8b27c7907d97f542be53eda90", "patch": "@@ -1827,7 +1827,8 @@ tree_estimate_probability_driver (void)\n static void\n predict_paths_for_bb (basic_block cur, basic_block bb,\n \t\t      enum br_predictor pred,\n-\t\t      enum prediction taken)\n+\t\t      enum prediction taken,\n+\t\t      bitmap visited)\n {\n   edge e;\n   edge_iterator ei;\n@@ -1848,7 +1849,7 @@ predict_paths_for_bb (basic_block cur, basic_block bb,\n \tcontinue;\n       gcc_assert (bb == cur || dominated_by_p (CDI_POST_DOMINATORS, cur, bb));\n \n-      /* See if there is how many edge from e->src that is not abnormal\n+      /* See if there is an edge from e->src that is not abnormal\n \t and does not lead to BB.  */\n       FOR_EACH_EDGE (e2, ei2, e->src->succs)\n \tif (e2 != e\n@@ -1861,16 +1862,20 @@ predict_paths_for_bb (basic_block cur, basic_block bb,\n \n       /* If there is non-abnormal path leaving e->src, predict edge\n \t using predictor.  Otherwise we need to look for paths\n-\t leading to e->src.  */\n+\t leading to e->src.\n+\n+\t The second may lead to infinite loop in the case we are predicitng\n+\t regions that are only reachable by abnormal edges.  We simply\n+\t prevent visiting given BB twice.  */\n       if (found)\n         predict_edge_def (e, pred, taken);\n-      else\n-\tpredict_paths_for_bb (e->src, e->src, pred, taken);\n+      else if (!bitmap_set_bit (visited, e->src->index))\n+\tpredict_paths_for_bb (e->src, e->src, pred, taken, visited);\n     }\n   for (son = first_dom_son (CDI_POST_DOMINATORS, cur);\n        son;\n        son = next_dom_son (CDI_POST_DOMINATORS, son))\n-    predict_paths_for_bb (son, bb, pred, taken);\n+    predict_paths_for_bb (son, bb, pred, taken, visited);\n }\n \n /* Sets branch probabilities according to PREDiction and\n@@ -1880,7 +1885,9 @@ static void\n predict_paths_leading_to (basic_block bb, enum br_predictor pred,\n \t\t\t  enum prediction taken)\n {\n-  predict_paths_for_bb (bb, bb, pred, taken);\n+  bitmap visited = BITMAP_ALLOC (NULL);\n+  predict_paths_for_bb (bb, bb, pred, taken, visited);\n+  BITMAP_FREE (visited);\n }\n \n /* Like predict_paths_leading_to but take edge instead of basic block.  */\n@@ -1903,7 +1910,11 @@ predict_paths_leading_to_edge (edge e, enum br_predictor pred,\n \tbreak;\n       }\n   if (!has_nonloop_edge)\n-    predict_paths_for_bb (bb, bb, pred, taken);\n+    {\n+      bitmap visited = BITMAP_ALLOC (NULL);\n+      predict_paths_for_bb (bb, bb, pred, taken, visited);\n+      BITMAP_FREE (visited);\n+    }\n   else\n     predict_edge_def (e, pred, taken);\n }"}, {"sha": "95f1215f67be81986afe891afa364c3dd8868c7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f3b7e9a446183d8b27c7907d97f542be53eda90", "patch": "@@ -1,3 +1,8 @@\n+2012-02-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/48600\n+\t* g++.dg/torture/pr48600.C: New testcase.\n+\n 2012-02-09  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR middle-end/52140"}, {"sha": "b60a0a011eccee24cd1861bbe11f19c861e4e946", "filename": "gcc/testsuite/g++.dg/torture/pr48600.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48600.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f3b7e9a446183d8b27c7907d97f542be53eda90/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48600.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr48600.C?ref=0f3b7e9a446183d8b27c7907d97f542be53eda90", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+\n+class mx {\n+public:\n+    mx();\n+};\n+\n+int main()\n+{\n+  while (true) {\n+      mx *bar = new mx;\n+      mx *baz = new mx;\n+      continue;\n+  }\n+  return 0;\n+}"}]}