{"sha": "5805b08924db448a9f7389ed0b3867c328242f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgwNWIwODkyNGRiNDQ4YTlmNzM4OWVkMGIzODY3YzMyODI0MmYwNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-11T10:22:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-11T10:22:36Z"}, "message": "re PR rtl-optimization/85302 (ICE in size_of_loc_descr, at dwarf2out.c:1771 on i686-linux-gnu)\n\n\tPR debug/85302\n\t* dwarf2out.c (skip_loc_list_entry): Don't call size_of_locs if\n\tSIZEP is NULL.\n\t(output_loc_list): Pass address of a dummy size variable even in the\n\tlocview handling loop.\n\t(index_location_lists): Add comment on why skip_loc_list_entry can't\n\tcall size_of_locs.\n\n\t* g++.dg/debug/dwarf2/pr85302.C: New test.\n\nFrom-SVN: r259311", "tree": {"sha": "97f7ee062dd40c3ac2c4c1e17cf29fee6ca1214f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f7ee062dd40c3ac2c4c1e17cf29fee6ca1214f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5805b08924db448a9f7389ed0b3867c328242f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5805b08924db448a9f7389ed0b3867c328242f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5805b08924db448a9f7389ed0b3867c328242f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5805b08924db448a9f7389ed0b3867c328242f06/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60d1915f9a3bbc2b3cc9d5eec72404d9b7180ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d1915f9a3bbc2b3cc9d5eec72404d9b7180ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d1915f9a3bbc2b3cc9d5eec72404d9b7180ad8"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "ed58fc2afc9773231efc26e56dcb490388a29beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5805b08924db448a9f7389ed0b3867c328242f06", "patch": "@@ -1,3 +1,13 @@\n+2018-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/85302\n+\t* dwarf2out.c (skip_loc_list_entry): Don't call size_of_locs if\n+\tSIZEP is NULL.\n+\t(output_loc_list): Pass address of a dummy size variable even in the\n+\tlocview handling loop.\n+\t(index_location_lists): Add comment on why skip_loc_list_entry can't\n+\tcall size_of_locs.\n+\n 2018-04-11  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR target/85261"}, {"sha": "0838ebfeb796220f46b56221a25cf2ef58e7ea8a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5805b08924db448a9f7389ed0b3867c328242f06", "patch": "@@ -10032,18 +10032,22 @@ maybe_gen_llsym (dw_loc_list_ref list)\n   gen_llsym (list);\n }\n \n-/* Determine whether or not to skip loc_list entry CURR.  If we're not\n+/* Determine whether or not to skip loc_list entry CURR.  If SIZEP is\n+   NULL, don't consider size of the location expression.  If we're not\n    to skip it, and SIZEP is non-null, store the size of CURR->expr's\n    representation in *SIZEP.  */\n \n static bool\n-skip_loc_list_entry (dw_loc_list_ref curr, unsigned long *sizep = 0)\n+skip_loc_list_entry (dw_loc_list_ref curr, unsigned long *sizep = NULL)\n {\n   /* Don't output an entry that starts and ends at the same address.  */\n   if (strcmp (curr->begin, curr->end) == 0\n       && curr->vbegin == curr->vend && !curr->force)\n     return true;\n \n+  if (!sizep)\n+    return false;\n+\n   unsigned long size = size_of_locs (curr->expr);\n \n   /* If the expression is too large, drop it on the floor.  We could\n@@ -10053,8 +10057,7 @@ skip_loc_list_entry (dw_loc_list_ref curr, unsigned long *sizep = 0)\n   if (dwarf_version < 5 && size > 0xffff)\n     return true;\n \n-  if (sizep)\n-    *sizep = size;\n+  *sizep = size;\n \n   return false;\n }\n@@ -10121,7 +10124,9 @@ output_loc_list (dw_loc_list_ref list_head)\n       for (dw_loc_list_ref curr = list_head; curr != NULL;\n \t   curr = curr->dw_loc_next)\n \t{\n-\t  if (skip_loc_list_entry (curr))\n+\t  unsigned long size;\n+\n+\t  if (skip_loc_list_entry (curr, &size))\n \t    continue;\n \n \t  vcount++;\n@@ -30887,7 +30892,14 @@ index_location_lists (dw_die_ref die)\n         for (curr = list; curr != NULL; curr = curr->dw_loc_next)\n           {\n             /* Don't index an entry that has already been indexed\n-               or won't be output.  */\n+\t       or won't be output.  Make sure skip_loc_list_entry doesn't\n+\t       call size_of_locs, because that might cause circular dependency,\n+\t       index_location_lists requiring address table indexes to be\n+\t       computed, but adding new indexes through add_addr_table_entry\n+\t       and address table index computation requiring no new additions\n+\t       to the hash table.  In the rare case of DWARF[234] >= 64KB\n+\t       location expression, we'll just waste unused address table entry\n+\t       for it.  */\n             if (curr->begin_entry != NULL\n                 || skip_loc_list_entry (curr))\n               continue;"}, {"sha": "9f8b16a202323f5a9197c1fd7efc1a3c75d76686", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5805b08924db448a9f7389ed0b3867c328242f06", "patch": "@@ -1,3 +1,8 @@\n+2018-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/85302\n+\t* g++.dg/debug/dwarf2/pr85302.C: New test.\n+\n 2018-04-11  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR target/85261"}, {"sha": "97ac302a92179990bef90a3d1a0fb301232c4202", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pr85302.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr85302.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5805b08924db448a9f7389ed0b3867c328242f06/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr85302.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpr85302.C?ref=5805b08924db448a9f7389ed0b3867c328242f06", "patch": "@@ -0,0 +1,14 @@\n+// PR debug/85302\n+// { dg-do compile }\n+// { dg-options \"-std=c++11 -gsplit-dwarf -O1\" }\n+// { dg-additional-options \"-fPIE\" { target pie } }\n+\n+struct A { const char *b; A (const char *c) : b(c) {} };\n+struct B { void foo (A); };\n+B e;\n+\n+void\n+bar ()\n+{\n+  e.foo (\"\");\n+}"}]}