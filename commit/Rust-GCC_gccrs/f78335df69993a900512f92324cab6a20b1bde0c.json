{"sha": "f78335df69993a900512f92324cab6a20b1bde0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc4MzM1ZGY2OTk5M2E5MDA1MTJmOTIzMjRjYWI2YTIwYjFiZGUwYw==", "commit": {"author": {"name": "Delia Burduv", "email": "delia.burduv@arm.com", "date": "2020-02-06T09:45:52Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-06T16:40:12Z"}, "message": "aarch64: ACLE intrinsics bfmmla and bfmlal<b/t>\n\nThis patch adds the ARMv8.6 ACLE intrinsics for bfmmla, bfmlalb and\nbfmlalt as part of the BFloat16 extension.\n(https://developer.arm.com/architectures/instruction-sets/simd-isas/neon/intrinsics)\nThe intrinsics are declared in arm_neon.h and the RTL patterns are\ndefined in aarch64-simd.md.  Two new tests are added to check assembler\noutput.\n\n2020-02-06  Delia Burduv  <delia.burduv@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(bfmlaq): New built-in function.\n\t(bfmlalb): New built-in function.\n\t(bfmlalt): New built-in function.\n\t(bfmlalb_lane): New built-in function.\n\t(bfmlalt_lane): New built-in function.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_bfmmlaqv4sf): New pattern.\n\t(aarch64_bfmlal<bt>v4sf): New pattern.\n\t(aarch64_bfmlal<bt>_lane<q>v4sf): New pattern.\n\t* config/aarch64/arm_neon.h (vbfmmlaq_f32): New intrinsic.\n\t(vbfmlalbq_f32): New intrinsic.\n\t(vbfmlaltq_f32): New intrinsic.\n\t(vbfmlalbq_lane_f32): New intrinsic.\n\t(vbfmlaltq_lane_f32): New intrinsic.\n\t(vbfmlalbq_laneq_f32): New intrinsic.\n\t(vbfmlaltq_laneq_f32): New intrinsic.\n\t* config/aarch64/iterators.md (BF_MLA): New int iterator.\n\t(bt): New int attribute.", "tree": {"sha": "33e340eb3dd645f4c181157b35d3c731f71f11e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e340eb3dd645f4c181157b35d3c731f71f11e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f78335df69993a900512f92324cab6a20b1bde0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78335df69993a900512f92324cab6a20b1bde0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78335df69993a900512f92324cab6a20b1bde0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78335df69993a900512f92324cab6a20b1bde0c/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad84548336ad9a08b451ddd7ea64f07aee0576a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad84548336ad9a08b451ddd7ea64f07aee0576a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad84548336ad9a08b451ddd7ea64f07aee0576a6"}], "stats": {"total": 262, "additions": 262, "deletions": 0}, "files": [{"sha": "1fe29d337cd455d8cfc89363e90852ce51294a2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -1,3 +1,25 @@\n+2020-02-06  Delia Burduv  <delia.burduv@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(bfmlaq): New built-in function.\n+\t(bfmlalb): New built-in function.\n+\t(bfmlalt): New built-in function.\n+\t(bfmlalb_lane): New built-in function.\n+\t(bfmlalt_lane): New built-in function.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_bfmmlaqv4sf): New pattern.\n+\t(aarch64_bfmlal<bt>v4sf): New pattern.\n+\t(aarch64_bfmlal<bt>_lane<q>v4sf): New pattern.\n+\t* config/aarch64/arm_neon.h (vbfmmlaq_f32): New intrinsic.\n+\t(vbfmlalbq_f32): New intrinsic.\n+\t(vbfmlaltq_f32): New intrinsic.\n+\t(vbfmlalbq_lane_f32): New intrinsic.\n+\t(vbfmlaltq_lane_f32): New intrinsic.\n+\t(vbfmlalbq_laneq_f32): New intrinsic.\n+\t(vbfmlaltq_laneq_f32): New intrinsic.\n+\t* config/aarch64/iterators.md (BF_MLA): New int iterator.\n+\t(bt): New int attribute.\n+\n 2020-02-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*pushtf): Emit \"#\" instead of"}, {"sha": "02b2154cf64dad02cf57b110af51b19dd7f91c51", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -692,3 +692,14 @@\n   VAR2 (TERNOP, bfdot, 0, v2sf, v4sf)\n   VAR2 (QUADOP_LANE_PAIR, bfdot_lane, 0, v2sf, v4sf)\n   VAR2 (QUADOP_LANE_PAIR, bfdot_laneq, 0, v2sf, v4sf)\n+\n+  /* Implemented by aarch64_bfmmlaqv4sf  */\n+  VAR1 (TERNOP, bfmmlaq, 0, v4sf)\n+\n+  /* Implemented by aarch64_bfmlal<bt>{_lane{q}}v4sf  */\n+  VAR1 (TERNOP, bfmlalb, 0, v4sf)\n+  VAR1 (TERNOP, bfmlalt, 0, v4sf)\n+  VAR1 (QUADOP_LANE, bfmlalb_lane, 0, v4sf)\n+  VAR1 (QUADOP_LANE, bfmlalt_lane, 0, v4sf)\n+  VAR1 (QUADOP_LANE, bfmlalb_lane_q, 0, v4sf)\n+  VAR1 (QUADOP_LANE, bfmlalt_lane_q, 0, v4sf)"}, {"sha": "f2b440c36bbbf58a101a0c4909dc5d45b1c8180b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -7134,3 +7134,42 @@\n }\n   [(set_attr \"type\" \"neon_dot<VDQSF:q>\")]\n )\n+\n+;; bfmmla\n+(define_insn \"aarch64_bfmmlaqv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+        (plus:V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n+                   (unspec:V4SF [(match_operand:V8BF 2 \"register_operand\" \"w\")\n+                                 (match_operand:V8BF 3 \"register_operand\" \"w\")]\n+                    UNSPEC_BFMMLA)))]\n+  \"TARGET_BF16_SIMD\"\n+  \"bfmmla\\\\t%0.4s, %2.8h, %3.8h\"\n+  [(set_attr \"type\" \"neon_fp_mla_s_q\")]\n+)\n+\n+;; bfmlal<bt>\n+(define_insn \"aarch64_bfmlal<bt>v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+        (plus: V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n+                    (unspec:V4SF [(match_operand:V8BF 2 \"register_operand\" \"w\")\n+                                  (match_operand:V8BF 3 \"register_operand\" \"w\")]\n+                     BF_MLA)))]\n+  \"TARGET_BF16_SIMD\"\n+  \"bfmlal<bt>\\\\t%0.4s, %2.8h, %3.8h\"\n+  [(set_attr \"type\" \"neon_fp_mla_s_q\")]\n+)\n+\n+(define_insn \"aarch64_bfmlal<bt>_lane<q>v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+        (plus: V4SF (match_operand:V4SF 1 \"register_operand\" \"0\")\n+                    (unspec:V4SF [(match_operand:V8BF 2 \"register_operand\" \"w\")\n+                                  (match_operand:VBF 3 \"register_operand\" \"w\")\n+                                  (match_operand:SI 4 \"const_int_operand\" \"n\")]\n+                     BF_MLA)))]\n+  \"TARGET_BF16_SIMD\"\n+{\n+  operands[4] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[4]));\n+  return \"bfmlal<bt>\\\\t%0.4s, %2.8h, %3.h[%4]\";\n+}\n+  [(set_attr \"type\" \"neon_fp_mla_s_scalar_q\")]\n+)"}, {"sha": "db845a3d2d204d28f0e62fa61927e01dcb15f4a4", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -34660,6 +34660,60 @@ vbfdotq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n   return __builtin_aarch64_bfdot_laneqv4sf (__r, __a, __b, __index);\n }\n \n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmmlaq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b)\n+\n+{\n+  return __builtin_aarch64_bfmmlaqv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmlalbq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b)\n+{\n+  return __builtin_aarch64_bfmlalbv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmlaltq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b)\n+{\n+  return __builtin_aarch64_bfmlaltv4sf (__r, __a, __b);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmlalbq_lane_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x4_t __b,\n+\t\t    const int __index)\n+{\n+  return __builtin_aarch64_bfmlalb_lanev4sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmlaltq_lane_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x4_t __b,\n+\t\t    const int __index)\n+{\n+  return __builtin_aarch64_bfmlalt_lanev4sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmlalbq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n+\t\t     const int __index)\n+{\n+  return __builtin_aarch64_bfmlalb_lane_qv4sf (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vbfmlaltq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n+\t\t     const int __index)\n+{\n+  return __builtin_aarch64_bfmlalt_lane_qv4sf (__r, __a, __b, __index);\n+}\n+\n #pragma GCC pop_options\n \n /* AdvSIMD 8-bit Integer Matrix Multiply (I8MM) intrinsics.  */"}, {"sha": "7c62f164347e29e7d0bd4a881acdcf84712ead4d", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -2620,6 +2620,9 @@\n \n (define_int_iterator FMMLA [UNSPEC_FMMLA])\n \n+(define_int_iterator BF_MLA [UNSPEC_BFMLALB\n+\t\t\t     UNSPEC_BFMLALT])\n+\n ;; Iterators for atomic operations.\n \n (define_int_iterator ATOMIC_LDOP\n@@ -2871,6 +2874,8 @@\n (define_int_attr ab [(UNSPEC_CLASTA \"a\") (UNSPEC_CLASTB \"b\")\n \t\t     (UNSPEC_LASTA \"a\") (UNSPEC_LASTB \"b\")])\n \n+(define_int_attr bt [(UNSPEC_BFMLALB \"b\") (UNSPEC_BFMLALT \"t\")])\n+\n (define_int_attr addsub [(UNSPEC_SHADD \"add\")\n \t\t\t (UNSPEC_UHADD \"add\")\n \t\t\t (UNSPEC_SRHADD \"add\")"}, {"sha": "9810e4ba37444fe08425c1cceae086860d962453", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfmlalbt-compile.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfmlalbt-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfmlalbt-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfmlalbt-compile.c?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_bfmlalb:\n+**      bfmlalb\tv0.4s, v1.8h, v2.8h\n+**      ret\n+*/\n+float32x4_t test_bfmlalb (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlalbq_f32 (r, a, b);\n+}\n+\n+/*\n+**test_bfmlalt:\n+**      bfmlalt\tv0.4s, v1.8h, v2.8h\n+**      ret\n+*/\n+float32x4_t test_bfmlalt (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlaltq_f32 (r, a, b);\n+}\n+\n+/*\n+**test_bfmlalb_lane:\n+**      bfmlalb\tv0.4s, v1.8h, v2.h[0]\n+**      ret\n+*/\n+float32x4_t test_bfmlalb_lane (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  return vbfmlalbq_lane_f32 (r, a, b, 0);\n+}\n+\n+/*\n+**test_bfmlalt_lane:\n+**      bfmlalt\tv0.4s, v1.8h, v2.h[2]\n+**      ret\n+*/\n+float32x4_t test_bfmlalt_lane (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  return vbfmlaltq_lane_f32 (r, a, b, 2);\n+}\n+\n+/*\n+**test_bfmlalb_laneq:\n+**      bfmlalb\tv0.4s, v1.8h, v2.h[4]\n+**      ret\n+*/\n+float32x4_t test_bfmlalb_laneq (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlalbq_laneq_f32 (r, a, b, 4);\n+}\n+\n+/*\n+**test_bfmlalt_laneq:\n+**      bfmlalt\tv0.4s, v1.8h, v2.h[7]\n+**      ret\n+*/\n+float32x4_t test_bfmlalt_laneq (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  return vbfmlaltq_laneq_f32 (r, a, b, 7);\n+}"}, {"sha": "0aaa69f0037fb5ed5c085e76ee0c7eb61e5e8090", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfmmla-compile.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfmmla-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfmmla-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfmmla-compile.c?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include <arm_neon.h>\n+\n+\n+/*\n+**test_bfmmla:\n+**     bfmmla\tv0.4s, v1.8h, v2.8h\n+**     ret\n+*/\n+float32x4_t test_bfmmla (float32x4_t r, bfloat16x8_t x, bfloat16x8_t y)\n+{\n+  return vbfmmlaq_f32 (r, x, y);\n+}"}, {"sha": "4d50ba3a3814cb6fe8a768bdf6e13a4207cf585a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vbfmlalbt_lane_f32_indices_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbfmlalbt_lane_f32_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f78335df69993a900512f92324cab6a20b1bde0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbfmlalbt_lane_f32_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbfmlalbt_lane_f32_indices_1.c?ref=f78335df69993a900512f92324cab6a20b1bde0c", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+\n+#include <arm_neon.h>\n+\n+void\n+f_vbfmlaltq_lane_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vbfmlaltq_lane_f32 (r, a, b, -1);\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vbfmlaltq_lane_f32 (r, a, b, 4);\n+  return;\n+}\n+\n+void\n+f_vbfmlaltq_laneq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vbfmlaltq_laneq_f32 (r, a, b, -1);\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vbfmlaltq_laneq_f32 (r, a, b, 8);\n+  return;\n+}\n+\n+void\n+f_vbfmlalbq_lane_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x4_t b)\n+{\n+  /* { dg-error \"lane -2 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vbfmlalbq_lane_f32 (r, a, b, -2);\n+  /* { dg-error \"lane 5 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  vbfmlalbq_lane_f32 (r, a, b, 5);\n+  return;\n+}\n+\n+void\n+f_vbfmlalbq_laneq_f32 (float32x4_t r, bfloat16x8_t a, bfloat16x8_t b)\n+{\n+  /* { dg-error \"lane -2 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vbfmlalbq_laneq_f32 (r, a, b, -2);\n+  /* { dg-error \"lane 9 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  vbfmlalbq_laneq_f32 (r, a, b, 9);\n+  return;\n+}"}]}