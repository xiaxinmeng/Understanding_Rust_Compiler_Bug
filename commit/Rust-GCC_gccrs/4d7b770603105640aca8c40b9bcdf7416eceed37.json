{"sha": "4d7b770603105640aca8c40b9bcdf7416eceed37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3Yjc3MDYwMzEwNTY0MGFjYThjNDBiOWJjZGY3NDE2ZWNlZWQzNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-14T18:48:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-14T18:48:08Z"}, "message": "Fix defer/recover at high optimization levels.\n\nFrom-SVN: r178859", "tree": {"sha": "0dc70e83086aee3a21cc80901864a27873f5f719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dc70e83086aee3a21cc80901864a27873f5f719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7b770603105640aca8c40b9bcdf7416eceed37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7b770603105640aca8c40b9bcdf7416eceed37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7b770603105640aca8c40b9bcdf7416eceed37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7b770603105640aca8c40b9bcdf7416eceed37/comments", "author": null, "committer": null, "parents": [{"sha": "ebb077fc775ca085013742c10fc4273ad600ce6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb077fc775ca085013742c10fc4273ad600ce6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb077fc775ca085013742c10fc4273ad600ce6f"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "fbddc0492f62c4b868f18faffc62a0c99a711174", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7b770603105640aca8c40b9bcdf7416eceed37/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7b770603105640aca8c40b9bcdf7416eceed37/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=4d7b770603105640aca8c40b9bcdf7416eceed37", "patch": "@@ -1159,8 +1159,11 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no, tree id)\n \n \t  // If a function calls the predeclared recover function, we\n \t  // can't inline it, because recover behaves differently in a\n-\t  // function passed directly to defer.\n-\t  if (this->calls_recover_ && !this->is_recover_thunk_)\n+\t  // function passed directly to defer.  If this is a recover\n+\t  // thunk that we built to test whether a function can be\n+\t  // recovered, we can't inline it, because that will mess up\n+\t  // our return address comparison.\n+\t  if (this->calls_recover_ || this->is_recover_thunk_)\n \t    DECL_UNINLINABLE(decl) = 1;\n \n \t  // If this is a thunk created to call a function which calls"}]}