{"sha": "2b7e2984ce29a528a8a280191947742a19624b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3ZTI5ODRjZTI5YTUyOGE4YTI4MDE5MTk0Nzc0MmExOTYyNGIwYg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2009-10-29T16:44:02Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2009-10-29T16:44:02Z"}, "message": "re PR middle-end/37565 (__optimize__  attribute doesn't work correctly)\n\n2009-10-29  Steve Ellcey  <sje@cup.hp.com>\n\n\tPR middle-end/37565\n\tPR target/38018\n\t* doc/tm.texi (OVERRIDE_OPTIONS): Update.\n\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n\t* optc-gen.awk (cl_target_option_restore): Include call to \n\ttargetm.override_options_after_change.\n\t* target-def.h (TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n\t* target.h (override_options_after_change): New.\n\t* c-common.c (parse_optimize_options): Call\n\ttargetm.override_options_after_change.\n\t* config/ia64/ia64.c (TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n\t(ia64_override_options_after_change): New.\n\t(ia64_override_options) Add call to above.\n\nFrom-SVN: r153714", "tree": {"sha": "4c4f74fb7f7c6c8fe0a62100be5c7ce3bf5175c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4f74fb7f7c6c8fe0a62100be5c7ce3bf5175c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b7e2984ce29a528a8a280191947742a19624b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7e2984ce29a528a8a280191947742a19624b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7e2984ce29a528a8a280191947742a19624b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7e2984ce29a528a8a280191947742a19624b0b/comments", "author": null, "committer": null, "parents": [{"sha": "44e824996b295fb81976a35028097fea1b89c809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e824996b295fb81976a35028097fea1b89c809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e824996b295fb81976a35028097fea1b89c809"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "8a2b539358b2115a2ae63256f78596d252100dd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -1,3 +1,19 @@\n+2009-10-29  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR middle-end/37565\n+\tPR target/38018\n+\t* doc/tm.texi (OVERRIDE_OPTIONS): Update.\n+\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n+\t* optc-gen.awk (cl_target_option_restore): Include call to \n+\ttargetm.override_options_after_change.\n+\t* target-def.h (TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n+\t* target.h (override_options_after_change): New.\n+\t* c-common.c (parse_optimize_options): Call\n+\ttargetm.override_options_after_change.\n+\t* config/ia64/ia64.c (TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New.\n+\t(ia64_override_options_after_change): New.\n+\t(ia64_override_options) Add call to above.\n+\n 2009-10-29  Michael Matz  <matz@suse.de>\n \n \t* tree-ssa-math-opts.c (execute_convert_to_rsqrt): Remove."}, {"sha": "8b85f66a2ad5ae4c208d57a52c75b31ea4fb4da6", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -7825,6 +7825,8 @@ parse_optimize_options (tree args, bool attr_p)\n   /* Now parse the options.  */\n   decode_options (opt_argc, opt_argv);\n \n+  targetm.override_options_after_change();\n+\n   /* Don't allow changing -fstrict-aliasing.  */\n   flag_strict_aliasing = saved_flag_strict_aliasing;\n "}, {"sha": "8460475bddb12d73910f00d2a405581288b9f59e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -303,6 +303,7 @@ static enum machine_mode ia64_promote_function_mode (const_tree,\n \t\t\t\t\t\t     const_tree,\n \t\t\t\t\t\t     int);\n static void ia64_trampoline_init (rtx, tree, rtx);\n+static void ia64_override_options_after_change (void);\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -536,6 +537,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT ia64_trampoline_init\n \n+#undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE ia64_override_options_after_change\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum\n@@ -5504,6 +5508,25 @@ ia64_override_options (void)\n     flag_ira_loop_pressure = 1;\n \n \n+  ia64_section_threshold = g_switch_set ? g_switch_value : IA64_DEFAULT_GVALUE;\n+\n+  init_machine_status = ia64_init_machine_status;\n+\n+  if (align_functions <= 0)\n+    align_functions = 64;\n+  if (align_loops <= 0)\n+    align_loops = 32;\n+  if (TARGET_ABI_OPEN_VMS)\n+    flag_no_common = 1;\n+\n+  ia64_override_options_after_change();\n+}\n+\n+/* Implement targetm.override_options_after_change.  */\n+\n+static void\n+ia64_override_options_after_change (void)\n+{\n   ia64_flag_schedule_insns2 = flag_schedule_insns_after_reload;\n   flag_schedule_insns_after_reload = 0;\n \n@@ -5525,18 +5548,6 @@ ia64_override_options (void)\n          a transformation.  */\n       flag_auto_inc_dec = 0;\n     }\n-\n-  ia64_section_threshold = g_switch_set ? g_switch_value : IA64_DEFAULT_GVALUE;\n-\n-  init_machine_status = ia64_init_machine_status;\n-\n-  if (align_functions <= 0)\n-    align_functions = 64;\n-  if (align_loops <= 0)\n-    align_loops = 32;\n-\n-  if (TARGET_ABI_OPEN_VMS)\n-    flag_no_common = 1;\n }\n \n /* Initialize the record of emitted frame related registers.  */"}, {"sha": "984bbd70c1e07179fd392a1c594aeda4585c64f0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -814,8 +814,22 @@ parsed.\n \n Don't use this macro to turn on various extra optimizations for\n @option{-O}.  That is what @code{OPTIMIZATION_OPTIONS} is for.\n+\n+If you need to do something whenever the optimization level is\n+changed via the optimize attribute or pragma, see\n+@code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}\n @end defmac\n \n+@deftypefn {Target Hook} void TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE (void)\n+This target function is similar to the macro @code{OVERRIDE_OPTIONS}\n+but is called when the optimize level is changed via an attribute or\n+pragma or when it is reset at the end of the code affected by the\n+attribute or pragma.  It is not called at the beginning of compilation\n+when @code{OVERRIDE_OPTIONS} is called so if you want to perform these\n+actions then, you should have @code{OVERRIDE_OPTIONS} call\n+@code{TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE}.\n+@end deftypefn\n+\n @defmac C_COMMON_OVERRIDE_OPTIONS\n This is similar to @code{OVERRIDE_OPTIONS} but is only used in the C\n language frontends (C, Objective-C, C++, Objective-C++) and so can be"}, {"sha": "992e4d316aced6135ee1235ae0028e2aa03fe9da", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -327,6 +327,7 @@ for (i = 0; i < n_opt_char; i++) {\n \tprint \"  \" var_opt_char[i] \" = ptr->\" var_opt_char[i] \";\";\n }\n \n+print \"  targetm.override_options_after_change ();\";\n print \"}\";\n \n print \"\";"}, {"sha": "e76e86211757f43b5d786b6becafbafdebffa259", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -410,6 +410,8 @@\n \n #define TARGET_DEFAULT_TARGET_FLAGS 0\n \n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE hook_void_void\n+\n #define TARGET_HANDLE_OPTION hook_bool_size_t_constcharptr_int_true\n #define TARGET_HELP NULL\n \n@@ -905,6 +907,7 @@\n   TARGET_SCHED,\t\t\t\t\t\\\n   TARGET_VECTORIZE,\t\t\t\t\\\n   TARGET_DEFAULT_TARGET_FLAGS,\t\t\t\\\n+  TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE,\t\t\\\n   TARGET_HANDLE_OPTION,\t\t\t\t\\\n   TARGET_HELP,\t\t\t\t\t\\\n   TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\"}, {"sha": "6d62d5207e579cbeb20964d00e09183147b3a3dc", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7e2984ce29a528a8a280191947742a19624b0b/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=2b7e2984ce29a528a8a280191947742a19624b0b", "patch": "@@ -500,6 +500,11 @@ struct gcc_target\n   /* The initial value of target_flags.  */\n   int default_target_flags;\n \n+  /* Allow target specific overriding of option settings after options have\n+     been changed by an attribute or pragma or when it is reset at the\n+     end of the code affected by an attribute or pragma.  */\n+  void (* override_options_after_change) (void);\n+\n   /* Handle target switch CODE (an OPT_* value).  ARG is the argument\n      passed to the switch; it is NULL if no argument was.  VALUE is the\n      value of ARG if CODE specifies a UInteger option, otherwise it is"}]}