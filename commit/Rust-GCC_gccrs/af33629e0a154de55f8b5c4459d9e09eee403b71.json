{"sha": "af33629e0a154de55f8b5c4459d9e09eee403b71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzMzYyOWUwYTE1NGRlNTVmOGI1YzQ0NTlkOWUwOWVlZTQwM2I3MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-09-25T15:33:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-09-25T15:33:34Z"}, "message": "tree-ssa-threadedge.c (thread_across_edge): Use foo.last () rather than foo[foo.length () - 1] to access last member in a vec.\n\n        * tree-ssa-threadedge.c (thread_across_edge): Use foo.last () rather\n        than foo[foo.length () - 1] to access last member in a vec.\n        * tree-ssa-threadupdate.c (register_jump_thread): Similarly.\n\nFrom-SVN: r202892", "tree": {"sha": "1dfdaa7e4acd2b6fce294316b85339816660856f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfdaa7e4acd2b6fce294316b85339816660856f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af33629e0a154de55f8b5c4459d9e09eee403b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af33629e0a154de55f8b5c4459d9e09eee403b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af33629e0a154de55f8b5c4459d9e09eee403b71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af33629e0a154de55f8b5c4459d9e09eee403b71/comments", "author": null, "committer": null, "parents": [{"sha": "ed0d30514f77227b7d1d89c855f9791db102180e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0d30514f77227b7d1d89c855f9791db102180e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0d30514f77227b7d1d89c855f9791db102180e"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "b6b751b1a47d9b750df47c310eb5d2f7329b7026", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af33629e0a154de55f8b5c4459d9e09eee403b71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af33629e0a154de55f8b5c4459d9e09eee403b71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af33629e0a154de55f8b5c4459d9e09eee403b71", "patch": "@@ -1,3 +1,9 @@\n+2013-09-25  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadedge.c (thread_across_edge): Use foo.last () rather\n+\tthan foo[foo.length () - 1] to access last member in a vec.\n+\t* tree-ssa-threadupdate.c (register_jump_thread): Similarly.\n+\n 2013-09-25  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/58521"}, {"sha": "2ca56342aeb8611489f39af051b7f9c98bfcac08", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af33629e0a154de55f8b5c4459d9e09eee403b71/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af33629e0a154de55f8b5c4459d9e09eee403b71/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=af33629e0a154de55f8b5c4459d9e09eee403b71", "patch": "@@ -947,8 +947,7 @@ thread_across_edge (gimple dummy_cond,\n \t    }\n \n \t  remove_temporary_equivalences (stack);\n-\t  propagate_threaded_block_debug_into (path[path.length () - 1]->dest,\n-\t\t\t\t\t       e->dest);\n+\t  propagate_threaded_block_debug_into (path.last ()->dest, e->dest);\n \t  register_jump_thread (path, false);\n \t  path.release ();\n \t  return;\n@@ -987,7 +986,7 @@ thread_across_edge (gimple dummy_cond,\n \tpath.safe_push (taken_edge);\n \tfound = false;\n \tif ((e->flags & EDGE_DFS_BACK) == 0\n-\t    || ! cond_arg_set_in_bb (path[path.length () - 1], e->dest))\n+\t    || ! cond_arg_set_in_bb (path.last (), e->dest))\n \t  found = thread_around_empty_blocks (taken_edge,\n \t\t\t\t\t      dummy_cond,\n \t\t\t\t\t      handle_dominating_asserts,\n@@ -999,7 +998,7 @@ thread_across_edge (gimple dummy_cond,\n \t   record the jump threading opportunity.  */\n \tif (found)\n \t  {\n-\t    propagate_threaded_block_debug_into (path[path.length () - 1]->dest,\n+\t    propagate_threaded_block_debug_into (path.last ()->dest,\n \t\t\t\t\t\t taken_edge->dest);\n \t    register_jump_thread (path, true);\n \t  }"}, {"sha": "fd5234c15a16e5d0229daa9c5fc19ecf852d7d44", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af33629e0a154de55f8b5c4459d9e09eee403b71/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af33629e0a154de55f8b5c4459d9e09eee403b71/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=af33629e0a154de55f8b5c4459d9e09eee403b71", "patch": "@@ -1401,7 +1401,7 @@ register_jump_thread (vec<edge> path, bool through_joiner)\n   if (!through_joiner)\n     e3 = NULL;\n   else\n-    e3 = path[path.length () - 1];\n+    e3 = path.last ();\n \n   /* This can occur if we're jumping to a constant address or\n      or something similar.  Just get out now.  */"}]}