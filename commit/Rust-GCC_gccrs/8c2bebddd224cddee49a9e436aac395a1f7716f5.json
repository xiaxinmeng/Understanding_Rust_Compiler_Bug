{"sha": "8c2bebddd224cddee49a9e436aac395a1f7716f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMyYmViZGRkMjI0Y2RkZWU0OWE5ZTQzNmFhYzM5NWExZjc3MTZmNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-11-17T21:44:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-11-17T21:44:08Z"}, "message": "Don't fold -(constant) or -0.\n\n\t* parser.c (cp_parser_unary_expression): Fold -constant here.\n\t* typeck.c (cp_build_unary_op): Not here.\n\nFrom-SVN: r230506", "tree": {"sha": "4cfc6535864089407a9ca62300a2da16e43fa7d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cfc6535864089407a9ca62300a2da16e43fa7d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c2bebddd224cddee49a9e436aac395a1f7716f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2bebddd224cddee49a9e436aac395a1f7716f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2bebddd224cddee49a9e436aac395a1f7716f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2bebddd224cddee49a9e436aac395a1f7716f5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "33c6daf4781dd373ac4760ac020d670e075d3af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c6daf4781dd373ac4760ac020d670e075d3af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c6daf4781dd373ac4760ac020d670e075d3af4"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "536fee0b1baac113945bea1e3b25ce27cdad4dc1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2bebddd224cddee49a9e436aac395a1f7716f5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2bebddd224cddee49a9e436aac395a1f7716f5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c2bebddd224cddee49a9e436aac395a1f7716f5", "patch": "@@ -1,5 +1,8 @@\n 2015-11-17  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_unary_expression): Fold -constant here.\n+\t* typeck.c (cp_build_unary_op): Not here.\n+\n \tPR bootstrap/68361\n \t* cvt.c (cp_convert_and_check): Use warning_sentinel to suppress\n \t-Wparentheses."}, {"sha": "c5f95301e344b032c8c239a1f55336bddd623367", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2bebddd224cddee49a9e436aac395a1f7716f5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2bebddd224cddee49a9e436aac395a1f7716f5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8c2bebddd224cddee49a9e436aac395a1f7716f5", "patch": "@@ -7662,6 +7662,8 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \n       /* Consume the operator token.  */\n       token = cp_lexer_consume_token (parser->lexer);\n+      enum cpp_ttype op_ttype = cp_lexer_peek_token (parser->lexer)->type;\n+\n       /* Parse the cast-expression.  */\n       cast_expression\n \t= cp_parser_cast_expression (parser,\n@@ -7693,8 +7695,25 @@ cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,\n \t  non_constant_p = unary_operator == PREINCREMENT_EXPR\n \t\t\t   ? NIC_PREINCREMENT : NIC_PREDECREMENT;\n \t  /* Fall through.  */\n-\tcase UNARY_PLUS_EXPR:\n \tcase NEGATE_EXPR:\n+\t  /* Immediately fold negation of a constant, unless the constant is 0\n+\t     (since -0 == 0) or it would overflow.  */\n+\t  if (unary_operator == NEGATE_EXPR && op_ttype == CPP_NUMBER\n+\t      && CONSTANT_CLASS_P (cast_expression)\n+\t      && !integer_zerop (cast_expression)\n+\t      && !TREE_OVERFLOW (cast_expression))\n+\t    {\n+\t      tree folded = fold_build1 (unary_operator,\n+\t\t\t\t\t TREE_TYPE (cast_expression),\n+\t\t\t\t\t cast_expression);\n+\t      if (CONSTANT_CLASS_P (folded) && !TREE_OVERFLOW (folded))\n+\t\t{\n+\t\t  expression = folded;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  /* Fall through.  */\n+\tcase UNARY_PLUS_EXPR:\n \tcase TRUTH_NOT_EXPR:\n \t  expression = finish_unary_op_expr (loc, unary_operator,\n \t\t\t\t\t     cast_expression, complain);"}, {"sha": "b7395cf072a418e468776be2d3d31dfa302d155f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c2bebddd224cddee49a9e436aac395a1f7716f5/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c2bebddd224cddee49a9e436aac395a1f7716f5/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8c2bebddd224cddee49a9e436aac395a1f7716f5", "patch": "@@ -5768,10 +5768,6 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t    /* Make sure the result is not an lvalue: a unary plus or minus\n \t       expression is always a rvalue.  */\n \t    arg = rvalue (arg);\n-\n-\t    if (code == NEGATE_EXPR && CONSTANT_CLASS_P (arg))\n-\t      /* Immediately fold negation of a constant.  */\n-\t      return fold_build1 (code, TREE_TYPE (arg), arg);\n \t  }\n       }\n       break;"}]}