{"sha": "fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRiYWY0ZWM5MGY4YzljNWIwNWY0ZjA0NGQ3N2U5ZTU0NWNhNmMwNQ==", "commit": {"author": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-07-24T12:33:46Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-07-24T12:33:46Z"}, "message": "ChangeLog formatting fixed.\n\nFrom-SVN: r212985", "tree": {"sha": "be562378c53657b3c21006994bf5a3a675915672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be562378c53657b3c21006994bf5a3a675915672"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05/comments", "author": null, "committer": null, "parents": [{"sha": "9041d2e6d2a783f2fbd0760f9ce6002194d63d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9041d2e6d2a783f2fbd0760f9ce6002194d63d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9041d2e6d2a783f2fbd0760f9ce6002194d63d00"}], "stats": {"total": 402, "additions": 201, "deletions": 201}, "files": [{"sha": "04c51e40e84caf95197ff2aef5c0eb9c82a4cefc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 201, "deletions": 201, "changes": 402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdbaf4ec90f8c9c5b05f4f044d77e9e545ca6c05", "patch": "@@ -1,209 +1,209 @@\n 2014-07-24  Martin Liska  <mliska@suse.cz>\n \n-  * cgraph.h (varpool_node):\n-  (availability get_availability (void)):\n-    created from cgraph_variable_initializer_availability\n-  (inline varpool_node *ultimate_alias_target (availability *availability = NULL)\n-    creted from: cgraph_variable_initializer_availability\n-  (inline varpool_node *get_alias_target (void)): created from varpool_alias_target\n-  (void finalize_named_section_flags (void)):\n-    created from varpool_finalize_named_section_flags\n-  (bool assemble_decl (void)): created from varpool_assemble_decl\n-  (void analyze (void)): created from varpool_analyze_node\n-  (bool call_for_node_and_aliases (bool (*callback) (varpool_node *, void *),\n-    void *data, bool include_overwritable)): created fromvarpool_for_node_and_aliases\n-  (void remove_initializer (void)): created from varpool_remove_initializer\n-  (tree get_constructor (void)): created from varpool_get_constructor\n-  (bool externally_visible_p (void)): created from varpool_externally_visible_p\n-  (bool ctor_useable_for_folding_p (void)): created from varpool_ctor_useable_for_folding_p\n-  (inline bool all_refs_explicit_p ()): created from varpool_all_refs_explicit_p\n-  (inline bool can_remove_if_no_refs_p (void)): created from varpool_can_remove_if_no_refs\n-  (static inline varpool_node *get (const_tree decl)): created from varpool_get_node\n-  (static void finalize_decl (tree decl)): created from varpool_finalize_decl\n-  (static bool output_variables (void)): created from varpool_output_variables\n-  (static varpool_node * create_extra_name_alias (tree alias, tree decl)):\n-    created from varpool_extra_name_alias\n-  (static varpool_node * create_alias (tree, tree)): created from varpool_create_variable_alias\n-  (static void dump_varpool (FILE *f)): created from dump_varpool\n-  (static void DEBUG_FUNCTION debug_varpool (void)): created from debug_varpool\n-  (static varpool_node *create_empty (void)): created from varpool_create_empty_node\n-  (static varpool_node *get_create (tree decl)): created from varpool_node_for_decl\n-  (static varpool_node *get_for_asmname (tree asmname)): created from varpool_node_for_asm\n-  (void assemble_aliases (void)): created from assemble_aliases\n+\t* cgraph.h (varpool_node):\n+\t(availability get_availability (void)):\n+\tcreated from cgraph_variable_initializer_availability\n+\t(inline varpool_node *ultimate_alias_target (availability *availability = NULL)\n+\tcreated from: cgraph_variable_initializer_availability\n+\t(inline varpool_node *get_alias_target (void)): created from varpool_alias_target\n+\t(void finalize_named_section_flags (void)):\n+\tcreated from varpool_finalize_named_section_flags\n+\t(bool assemble_decl (void)): created from varpool_assemble_decl\n+\t(void analyze (void)): created from varpool_analyze_node\n+\t(bool call_for_node_and_aliases (bool (*callback) (varpool_node *, void *),\n+\tvoid *data, bool include_overwritable)): created fromvarpool_for_node_and_aliases\n+\t(void remove_initializer (void)): created from varpool_remove_initializer\n+\t(tree get_constructor (void)): created from varpool_get_constructor\n+\t(bool externally_visible_p (void)): created from varpool_externally_visible_p\n+\t(bool ctor_useable_for_folding_p (void)): created from varpool_ctor_useable_for_folding_p\n+\t(inline bool all_refs_explicit_p ()): created from varpool_all_refs_explicit_p\n+\t(inline bool can_remove_if_no_refs_p (void)): created from varpool_can_remove_if_no_refs\n+\t(static inline varpool_node *get (const_tree decl)): created from varpool_get_node\n+\t(static void finalize_decl (tree decl)): created from varpool_finalize_decl\n+\t(static bool output_variables (void)): created from varpool_output_variables\n+\t(static varpool_node * create_extra_name_alias (tree alias, tree decl)):\n+\tcreated from varpool_extra_name_alias\n+\t(static varpool_node * create_alias (tree, tree)): created from varpool_create_variable_alias\n+\t(static void dump_varpool (FILE *f)): created from dump_varpool\n+\t(static void DEBUG_FUNCTION debug_varpool (void)): created from debug_varpool\n+\t(static varpool_node *create_empty (void)): created from varpool_create_empty_node\n+\t(static varpool_node *get_create (tree decl)): created from varpool_node_for_decl\n+\t(static varpool_node *get_for_asmname (tree asmname)): created from varpool_node_for_asm\n+\t(void assemble_aliases (void)): created from assemble_aliases\n \n 2014-07-24  Martin Liska  <mliska@suse.cz>\n \n-  * cgraph.h (symtab_node):\n-  (void register_symbol (void)): created from symtab_register_node\n-  (void remove (void)): created from symtab_remove_node\n-  (void dump (FILE *f)): created from dump_symtab_node\n-  (void DEBUG_FUNCTION debug (void)): created from debug_symtab_node\n-  (void DEBUG_FUNCTION verify (void)): created from verify_symtab_node\n-  (struct ipa_ref *add_reference (symtab_node *referred_node,\n-    enum ipa_ref_use use_type)): created from add_reference \n-  (struct ipa_ref *add_reference (symtab_node *referred_node,\n-    enum ipa_ref_use use_type, gimple stmt)): created from add_reference\n-  (struct ipa_ref *maybe_add_reference (tree val, enum ipa_ref_use use_type,\n-    gimple stmt)): created from maybe_add_reference\n-  (bool semantically_equivalent_p (symtab_node *target)): created from\n-    symtab_semantically_equivalent_p\n-  (void remove_from_same_comdat_group (void)): created from\n-    remove_from_same_comdat_group\n-  (void add_to_same_comdat_group (symtab_node *old_node)): created from\n-    symtab_add_to_same_comdat_group\n-  (void dissolve_same_comdat_group_list (void)): created from\n-    symtab_dissolve_same_comdat_group_list\n-  (bool used_from_object_file_p (void)): created from symtab_used_from_object_file_p\n-  (symtab_node *ultimate_alias_target (enum availability *avail = NULL)):\n-    created from symtab_alias_ultimate_target\n-  (inline symtab_node *next_defined_symbol (void)): created from\n-    symtab_next_defined_symbol\n-  (bool resolve_alias (symtab_node *target)): created from\n-    symtab_resolve_alias\n-  (bool call_for_symbol_and_aliases (bool (*callback) (symtab_node *, void *),\n-    void *data, bool include_overwrite)): created from symtab_for_node_and_aliases\n-  (symtab_node *noninterposable_alias (void)): created from symtab_nonoverwritable_alias\n-  (inline symtab_node *get_alias_target (void)): created from symtab_alias_target\n-  (void set_section (const char *section)): created from set_section_1 \n-  (enum availability get_availability (void)): created from symtab_node_availability\n-  (void make_decl_local (void)): created from symtab_make_decl_local\n-  (bool real_symbol_p (void)): created from symtab_read_node\n-  (can_be_discarded_p (void)): created from symtab_can_be_discarded\n-  (inline bool comdat_local_p (void)): created from symtab_comdat_local_p\n-  (inline bool in_same_comdat_group_p (symtab_node *target)): created from\n-    symtab_in_same_comdat_p;\n-  (bool address_taken_from_non_vtable_p (void)): created from\n-    address_taken_from_non_vtable_p\n-  (static inline symtab_node *get (const_tree decl)): created from symtab_get_node\n-  (static void dump_table (FILE *)): created from dump_symtab\n-  (static inline DEBUG_FUNCTION void debug_symtab (void)): created from debug_symtab\n-  (static DEBUG_FUNCTION void verify_symtab_nodes (void)): created from verify_symtab\n-  (static bool used_from_object_file_p_worker (symtab_node *node)): created from\n-    symtab_used_from_object_file_p \n-  (void dump_base (FILE *)): created from dump_symtab_base\n-  (bool DEBUG_FUNCTION verify_base (void)): created from verify_symtab_base\n-  (void unregister (void)): created from symtab_unregister_node\n-  (struct symbol_priority_map *priority_info (void)): created from symtab_priority_info\n-  (static bool set_implicit_section (symtab_node *n, void *)): created from set_implicit_section\n-  (static bool noninterposable_alias (symtab_node *node, void *data)): created from\n-    symtab_nonoverwritable_alias_1\n-  * cgraph.h (cgraph_node):\n-  (bool remove_symbol_and_inline_clones (cgraph_node *forbidden_node = NULL)):\n-    created from cgraph_remove_node_and_inline_clones\n-  (void record_stmt_references (gimple stmt)): created from ipa_record_stmt_references\n-  (void set_call_stmt_including_clones (gimple old_stmt, gimple new_stmt,\n-    bool update_speculative = true)): created from cgraph_set_call_stmt_including_clones\n-  (cgraph_node *function_symbol (enum availability *avail = NULL)):\n-    created from cgraph_function_node\n-  (cgraph_node *create_clone (tree decl, gcov_type count, int freq, bool update_original,\n-    vec<cgraph_edge *> redirect_callers, bool call_duplication_hook,\n-    struct cgraph_node *new_inlined_to, bitmap args_to_skip)):\n-    created from cgraph_create_clone \n-  (cgraph_node *create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n-    vec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip, const char * suffix)):\n-    created from cgraph_create_virtual_clone\n-  (cgraph_node *find_replacement (void)): created from cgraph_find_replacement_node\n-  (cgraph_node *create_version_clone (tree new_decl, vec<cgraph_edge *> redirect_callers,\n-    bitmap bbs_to_copy)): created from cgraph_copy_node_for_versioning\n-  (cgraph_node *create_version_clone_with_body (vec<cgraph_edge *> redirect_callers,\n-    vec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip, bool skip_return,\n-    bitmap bbs_to_copy, basic_block new_entry_block, const char *clone_name)):\n-    created from cgraph_function_version_info\n-  (struct cgraph_function_version_info *insert_new_function_version (void)):\n-    created from insert_new_cgraph_node_version\n-  (struct cgraph_function_version_info *function_version (void)): created from\n-    get_cgraph_node_version\n-  (void analyze (void)): created from analyze_function\n-  (cgraph_node * create_thunk (tree alias, tree, bool this_adjusting,\n-    HOST_WIDE_INT fixed_offset, HOST_WIDE_INT virtual_value, tree virtual_offset,\n-    tree real_alias) cgraph_add_thunk\n-  (inline cgraph_node *get_alias_target (void)): created from cgraph_alias_target\n-  (cgraph_node *ultimate_alias_target (availability *availability = NULL)):\n-    created from cgraph_function_or_thunk_node\n-  (bool expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)):\n-    created from expand_thunk\n-  (void reset (void)): created from cgraph_reset_node\n-  (void create_wrapper (cgraph_node *target)): created from cgraph_make_wrapper\n-  (void DEBUG_FUNCTION verify_node (void)): created from verify_cgraph_node\n-  (void remove (void)): created from cgraph_remove_node\n-  (void dump (FILE *f)): created from dump_cgraph_node\n-  (void DEBUG_FUNCTION debug (void)): created from debug_cgraph_node\n-  (bool get_body (void)): created from cgraph_get_body\n-  (void release_body (void)): created from cgraph_release_function_body\n-  (void unnest (void)): created from cgraph_unnest_node\n-  (void make_local (void)): created from cgraph_make_node_local\n-  (void mark_address_taken (void)): created from cgraph_mark_address_taken_node\n-  (struct cgraph_edge *create_edge (cgraph_node *callee, gimple call_stmt,\n-    gcov_type count, int freq)): created from cgraph_create_edge\n-  (struct cgraph_edge *create_indirect_edge (gimple call_stmt, int ecf_flags,\n-    gcov_type count, int freq)): created from cgraph_create_indirect_edge\n-  (void create_edge_including_clones (struct cgraph_node *callee, gimple old_stmt,\n-    gimple stmt, gcov_type count, int freq, cgraph_inline_failed_t reason)):\n-    created from cgraph_create_edge_including_clones\n-  (cgraph_edge *get_edge (gimple call_stmt)): created from cgraph_edge\n-  (vec<cgraph_edge *> collect_callers (void)): created from collect_callers_of_node\n-  (void remove_callers (void)): created from cgraph_node_remove_callers\n-  (void remove_callees (void)): created from cgraph_node_remove_callees\n-  (enum availability get_availability (void)): created from cgraph_function_body_availability\n-  (void set_nothrow_flag (bool nothrow)): created from cgraph_set_nothrow_flag\n-  (void set_const_flag (bool readonly, bool looping)): created from cgraph_set_const_flag\n-  (void set_pure_flag (bool pure, bool looping)): created from cgraph_set_pure_flag\n-  (void call_duplication_hooks (cgraph_node *node2)): created from\n-    cgraph_call_node_duplication_hooks\n-  (bool call_for_symbol_and_aliases (bool (*callback) (cgraph_node *, void *),\n-    void *data, bool include_overwritable)): created from cgraph_for_node_and_aliases\n-  (bool call_for_symbol_thunks_and_aliases (bool (*callback) (cgraph_node *node, void *data),\n-    void *data, bool include_overwritable)): created from cgraph_for_node_thunks_and_aliases\n-  (void call_function_insertion_hooks (void)):\n-    created from cgraph_call_function_insertion_hooks\n-  (inline void mark_force_output (void)): created from cgraph_mark_force_output_node\n-  (bool local_p (void)): created from cgraph_local_node\n-  (bool can_be_local_p (void)): created from cgraph_node_can_be_local_p\n-  (bool cannot_return_p (void)): created from cgraph_node_cannot_return\n-  (bool only_called_directly_p (void)): created from cgraph_only_called_directly_p\n-  (inline bool only_called_directly_or_aliased_p (void)):\n-    created from cgraph_only_called_directly_or_aliased_p\n-  (bool will_be_removed_from_program_if_no_direct_calls_p (void)):\n-    created from cgraph_will_be_removed_from_program_if_no_direct_calls\n-  (bool can_remove_if_no_direct_calls_and_refs_p (void)):\n-    created from cgraph_can_remove_if_no_direct_calls_and_refs_p\n-  (bool can_remove_if_no_direct_calls_p (void)):\n-    created from cgraph_can_remove_if_no_direct_calls_p\n-  (inline bool has_gimple_body_p (void)):\n-    created from cgraph_function_with_gimple_body_p\n-  (bool optimize_for_size_p (void)): created from cgraph_optimize_for_size_p\n-  (static void dump_cgraph (FILE *f)): created from dump_cgraph\n-  (static inline void debug_cgraph (void)): created from debug_cgraph\n-  (static void record_function_versions (tree decl1, tree decl2)):\n-    created from record_function_versions\n-  (static void delete_function_version (tree decl)):\n-    created from delete_function_version\n-  (static void add_new_function (tree fndecl, bool lowered)):\n-    created from cgraph_add_new_function\n-  (static inline cgraph_node *get (const_tree decl)): created from cgraph_get_node\n-  (static cgraph_node * create (tree decl)): created from cgraph_create_node\n-  (static cgraph_node * create_empty (void)): created from cgraph_create_empty_node\n-  (static cgraph_node * get_create (tree)): created from cgraph_get_create_node\n-  (static cgraph_node *get_for_asmname (tree asmname)):\n-    created from cgraph_node_for_asm\n-  (static cgraph_node * create_same_body_alias (tree alias, tree decl)):\n-    created from cgraph_same_body_alias \n-  (static bool used_from_object_file_p_worker (cgraph_node *node,\n-    void *): new function\n-  (static bool non_local_p (cgraph_node *node, void *)):\n-    created from cgraph_non_local_node_p_1\n-  (static void DEBUG_FUNCTION verify_cgraph_nodes (void)):\n-    created from verify_cgraph\n-  (static bool make_local (cgraph_node *node, void *)):\n-    created from cgraph_make_node_local\n-  (static cgraph_node *create_alias (tree alias, tree target)):\n-    created from cgraph_create_function_alias\n-  (static cgraph_edge * create_edge (cgraph_node *caller, cgraph_node *callee,\n-    gimple call_stmt, gcov_type count, int freq, bool indir_unknown_callee)):\n-    created from cgraph_create_edge_1\n-  * cgraph.h (varpool_node):\n-  (void remove (void)): created from varpool_remove_node\n-  (void dump (FILE *f)): created from dump_varpool_node\n+\t* cgraph.h (symtab_node):\n+\t(void register_symbol (void)): created from symtab_register_node\n+\t(void remove (void)): created from symtab_remove_node\n+\t(void dump (FILE *f)): created from dump_symtab_node\n+\t(void DEBUG_FUNCTION debug (void)): created from debug_symtab_node\n+\t(void DEBUG_FUNCTION verify (void)): created from verify_symtab_node\n+\t(struct ipa_ref *add_reference (symtab_node *referred_node,\n+\tenum ipa_ref_use use_type)): created from add_reference \n+\t(struct ipa_ref *add_reference (symtab_node *referred_node,\n+\tenum ipa_ref_use use_type, gimple stmt)): created from add_reference\n+\t(struct ipa_ref *maybe_add_reference (tree val, enum ipa_ref_use use_type,\n+\tgimple stmt)): created from maybe_add_reference\n+\t(bool semantically_equivalent_p (symtab_node *target)): created from\n+\tsymtab_semantically_equivalent_p\n+\t(void remove_from_same_comdat_group (void)): created from\n+\tremove_from_same_comdat_group\n+\t(void add_to_same_comdat_group (symtab_node *old_node)): created from\n+\tsymtab_add_to_same_comdat_group\n+\t(void dissolve_same_comdat_group_list (void)): created from\n+\tsymtab_dissolve_same_comdat_group_list\n+\t(bool used_from_object_file_p (void)): created from symtab_used_from_object_file_p\n+\t(symtab_node *ultimate_alias_target (enum availability *avail = NULL)):\n+\tcreated from symtab_alias_ultimate_target\n+\t(inline symtab_node *next_defined_symbol (void)): created from\n+\tsymtab_next_defined_symbol\n+\t(bool resolve_alias (symtab_node *target)): created from\n+\tsymtab_resolve_alias\n+\t(bool call_for_symbol_and_aliases (bool (*callback) (symtab_node *, void *),\n+\tvoid *data, bool include_overwrite)): created from symtab_for_node_and_aliases\n+\t(symtab_node *noninterposable_alias (void)): created from symtab_nonoverwritable_alias\n+\t(inline symtab_node *get_alias_target (void)): created from symtab_alias_target\n+\t(void set_section (const char *section)): created from set_section_1 \n+\t(enum availability get_availability (void)): created from symtab_node_availability\n+\t(void make_decl_local (void)): created from symtab_make_decl_local\n+\t(bool real_symbol_p (void)): created from symtab_read_node\n+\t(can_be_discarded_p (void)): created from symtab_can_be_discarded\n+\t(inline bool comdat_local_p (void)): created from symtab_comdat_local_p\n+\t(inline bool in_same_comdat_group_p (symtab_node *target)): created from\n+\tsymtab_in_same_comdat_p;\n+\t(bool address_taken_from_non_vtable_p (void)): created from\n+\taddress_taken_from_non_vtable_p\n+\t(static inline symtab_node *get (const_tree decl)): created from symtab_get_node\n+\t(static void dump_table (FILE *)): created from dump_symtab\n+\t(static inline DEBUG_FUNCTION void debug_symtab (void)): created from debug_symtab\n+\t(static DEBUG_FUNCTION void verify_symtab_nodes (void)): created from verify_symtab\n+\t(static bool used_from_object_file_p_worker (symtab_node *node)): created from\n+\tsymtab_used_from_object_file_p \n+\t(void dump_base (FILE *)): created from dump_symtab_base\n+\t(bool DEBUG_FUNCTION verify_base (void)): created from verify_symtab_base\n+\t(void unregister (void)): created from symtab_unregister_node\n+\t(struct symbol_priority_map *priority_info (void)): created from symtab_priority_info\n+\t(static bool set_implicit_section (symtab_node *n, void *)): created from set_implicit_section\n+\t(static bool noninterposable_alias (symtab_node *node, void *data)): created from\n+\tsymtab_nonoverwritable_alias_1\n+\t* cgraph.h (cgraph_node):\n+\t(bool remove_symbol_and_inline_clones (cgraph_node *forbidden_node = NULL)):\n+\tcreated from cgraph_remove_node_and_inline_clones\n+\t(void record_stmt_references (gimple stmt)): created from ipa_record_stmt_references\n+\t(void set_call_stmt_including_clones (gimple old_stmt, gimple new_stmt,\n+\tbool update_speculative = true)): created from cgraph_set_call_stmt_including_clones\n+\t(cgraph_node *function_symbol (enum availability *avail = NULL)):\n+\tcreated from cgraph_function_node\n+\t(cgraph_node *create_clone (tree decl, gcov_type count, int freq, bool update_original,\n+\tvec<cgraph_edge *> redirect_callers, bool call_duplication_hook,\n+\tstruct cgraph_node *new_inlined_to, bitmap args_to_skip)):\n+\tcreated from cgraph_create_clone \n+\t(cgraph_node *create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n+\tvec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip, const char * suffix)):\n+\tcreated from cgraph_create_virtual_clone\n+\t(cgraph_node *find_replacement (void)): created from cgraph_find_replacement_node\n+\t(cgraph_node *create_version_clone (tree new_decl, vec<cgraph_edge *> redirect_callers,\n+\tbitmap bbs_to_copy)): created from cgraph_copy_node_for_versioning\n+\t(cgraph_node *create_version_clone_with_body (vec<cgraph_edge *> redirect_callers,\n+\tvec<ipa_replace_map *, va_gc> *tree_map, bitmap args_to_skip, bool skip_return,\n+\tbitmap bbs_to_copy, basic_block new_entry_block, const char *clone_name)):\n+\tcreated from cgraph_function_version_info\n+\t(struct cgraph_function_version_info *insert_new_function_version (void)):\n+\tcreated from insert_new_cgraph_node_version\n+\t(struct cgraph_function_version_info *function_version (void)): created from\n+\tget_cgraph_node_version\n+\t(void analyze (void)): created from analyze_function\n+\t(cgraph_node * create_thunk (tree alias, tree, bool this_adjusting,\n+\tHOST_WIDE_INT fixed_offset, HOST_WIDE_INT virtual_value, tree virtual_offset,\n+\ttree real_alias) cgraph_add_thunk\n+\t(inline cgraph_node *get_alias_target (void)): created from cgraph_alias_target\n+\t(cgraph_node *ultimate_alias_target (availability *availability = NULL)):\n+\tcreated from cgraph_function_or_thunk_node\n+\t(bool expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)):\n+\tcreated from expand_thunk\n+\t(void reset (void)): created from cgraph_reset_node\n+\t(void create_wrapper (cgraph_node *target)): created from cgraph_make_wrapper\n+\t(void DEBUG_FUNCTION verify_node (void)): created from verify_cgraph_node\n+\t(void remove (void)): created from cgraph_remove_node\n+\t(void dump (FILE *f)): created from dump_cgraph_node\n+\t(void DEBUG_FUNCTION debug (void)): created from debug_cgraph_node\n+\t(bool get_body (void)): created from cgraph_get_body\n+\t(void release_body (void)): created from cgraph_release_function_body\n+\t(void unnest (void)): created from cgraph_unnest_node\n+\t(void make_local (void)): created from cgraph_make_node_local\n+\t(void mark_address_taken (void)): created from cgraph_mark_address_taken_node\n+\t(struct cgraph_edge *create_edge (cgraph_node *callee, gimple call_stmt,\n+\tgcov_type count, int freq)): created from cgraph_create_edge\n+\t(struct cgraph_edge *create_indirect_edge (gimple call_stmt, int ecf_flags,\n+\tgcov_type count, int freq)): created from cgraph_create_indirect_edge\n+\t(void create_edge_including_clones (struct cgraph_node *callee, gimple old_stmt,\n+\tgimple stmt, gcov_type count, int freq, cgraph_inline_failed_t reason)):\n+\tcreated from cgraph_create_edge_including_clones\n+\t(cgraph_edge *get_edge (gimple call_stmt)): created from cgraph_edge\n+\t(vec<cgraph_edge *> collect_callers (void)): created from collect_callers_of_node\n+\t(void remove_callers (void)): created from cgraph_node_remove_callers\n+\t(void remove_callees (void)): created from cgraph_node_remove_callees\n+\t(enum availability get_availability (void)): created from cgraph_function_body_availability\n+\t(void set_nothrow_flag (bool nothrow)): created from cgraph_set_nothrow_flag\n+\t(void set_const_flag (bool readonly, bool looping)): created from cgraph_set_const_flag\n+\t(void set_pure_flag (bool pure, bool looping)): created from cgraph_set_pure_flag\n+\t(void call_duplication_hooks (cgraph_node *node2)): created from\n+\tcgraph_call_node_duplication_hooks\n+\t(bool call_for_symbol_and_aliases (bool (*callback) (cgraph_node *, void *),\n+\tvoid *data, bool include_overwritable)): created from cgraph_for_node_and_aliases\n+\t(bool call_for_symbol_thunks_and_aliases (bool (*callback) (cgraph_node *node, void *data),\n+\tvoid *data, bool include_overwritable)): created from cgraph_for_node_thunks_and_aliases\n+\t(void call_function_insertion_hooks (void)):\n+\tcreated from cgraph_call_function_insertion_hooks\n+\t(inline void mark_force_output (void)): created from cgraph_mark_force_output_node\n+\t(bool local_p (void)): created from cgraph_local_node\n+\t(bool can_be_local_p (void)): created from cgraph_node_can_be_local_p\n+\t(bool cannot_return_p (void)): created from cgraph_node_cannot_return\n+\t(bool only_called_directly_p (void)): created from cgraph_only_called_directly_p\n+\t(inline bool only_called_directly_or_aliased_p (void)):\n+\tcreated from cgraph_only_called_directly_or_aliased_p\n+\t(bool will_be_removed_from_program_if_no_direct_calls_p (void)):\n+\tcreated from cgraph_will_be_removed_from_program_if_no_direct_calls\n+\t(bool can_remove_if_no_direct_calls_and_refs_p (void)):\n+\tcreated from cgraph_can_remove_if_no_direct_calls_and_refs_p\n+\t(bool can_remove_if_no_direct_calls_p (void)):\n+\tcreated from cgraph_can_remove_if_no_direct_calls_p\n+\t(inline bool has_gimple_body_p (void)):\n+\tcreated from cgraph_function_with_gimple_body_p\n+\t(bool optimize_for_size_p (void)): created from cgraph_optimize_for_size_p\n+\t(static void dump_cgraph (FILE *f)): created from dump_cgraph\n+\t(static inline void debug_cgraph (void)): created from debug_cgraph\n+\t(static void record_function_versions (tree decl1, tree decl2)):\n+\tcreated from record_function_versions\n+\t(static void delete_function_version (tree decl)):\n+\tcreated from delete_function_version\n+\t(static void add_new_function (tree fndecl, bool lowered)):\n+\tcreated from cgraph_add_new_function\n+\t(static inline cgraph_node *get (const_tree decl)): created from cgraph_get_node\n+\t(static cgraph_node * create (tree decl)): created from cgraph_create_node\n+\t(static cgraph_node * create_empty (void)): created from cgraph_create_empty_node\n+\t(static cgraph_node * get_create (tree)): created from cgraph_get_create_node\n+\t(static cgraph_node *get_for_asmname (tree asmname)):\n+\tcreated from cgraph_node_for_asm\n+\t(static cgraph_node * create_same_body_alias (tree alias, tree decl)):\n+\tcreated from cgraph_same_body_alias \n+\t(static bool used_from_object_file_p_worker (cgraph_node *node,\n+\tvoid *): new function\n+\t(static bool non_local_p (cgraph_node *node, void *)):\n+\tcreated from cgraph_non_local_node_p_1\n+\t(static void DEBUG_FUNCTION verify_cgraph_nodes (void)):\n+\tcreated from verify_cgraph\n+\t(static bool make_local (cgraph_node *node, void *)):\n+\tcreated from cgraph_make_node_local\n+\t(static cgraph_node *create_alias (tree alias, tree target)):\n+\tcreated from cgraph_create_function_alias\n+\t(static cgraph_edge * create_edge (cgraph_node *caller, cgraph_node *callee,\n+\tgimple call_stmt, gcov_type count, int freq, bool indir_unknown_callee)):\n+\tcreated from cgraph_create_edge_1\n+\t* cgraph.h (varpool_node):\n+\t(void remove (void)): created from varpool_remove_node\n+\t(void dump (FILE *f)): created from dump_varpool_node\n \n 2014-07-24  Richard Biener  <rguenther@suse.de>\n "}]}