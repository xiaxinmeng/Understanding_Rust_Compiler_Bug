{"sha": "c1aef54de3609bcf5d6ed8252ff8e86a415ca961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhZWY1NGRlMzYwOWJjZjVkNmVkODI1MmZmOGU4NmE0MTVjYTk2MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-05-23T19:52:56Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1996-05-23T19:52:56Z"}, "message": "Do better scheduling of floating point instructions\n\nFrom-SVN: r12083", "tree": {"sha": "c492a0f9329273978a7aa6118df530838c45999e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c492a0f9329273978a7aa6118df530838c45999e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1aef54de3609bcf5d6ed8252ff8e86a415ca961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aef54de3609bcf5d6ed8252ff8e86a415ca961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1aef54de3609bcf5d6ed8252ff8e86a415ca961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1aef54de3609bcf5d6ed8252ff8e86a415ca961/comments", "author": null, "committer": null, "parents": [{"sha": "b0b61fc4649b98ce8a9f57f0b43b5e1de1b8e118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b61fc4649b98ce8a9f57f0b43b5e1de1b8e118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b61fc4649b98ce8a9f57f0b43b5e1de1b8e118"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "2d112adb03f95425027f7c5fe84bcd5e8f0a34e8", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1aef54de3609bcf5d6ed8252ff8e86a415ca961/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1aef54de3609bcf5d6ed8252ff8e86a415ca961/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c1aef54de3609bcf5d6ed8252ff8e86a415ca961", "patch": "@@ -91,9 +91,11 @@\n ;; rte\t\treturn from exception\n ;; sfunc\tspecial function call with known used registers\n ;; call\t\tfunction call\n+;; fp\t\tfloating point\n+;; fdiv\t\tfloating point divide (or square root)\n \n (define_attr \"type\"\n- \"cbranch,jump,arith,other,load,store,move,smpy,dmpy,return,pload,pstore,pcload,rte,sfunc,call\"\n+ \"cbranch,jump,arith,other,load,store,move,smpy,dmpy,return,pload,pstore,pcload,rte,sfunc,call,fp,fdiv\"\n   (const_string \"other\"))\n \n ; If a conditional branch destination is within -252..258 bytes away\n@@ -137,12 +139,20 @@\n ;; (define_function_unit {name} {num-units} {n-users} {test}\n ;;                       {ready-delay} {issue-delay} [{conflict-list}])\n \n-;; ??? These are probably not correct.\n-(define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"load,pcload,pload\") 2 2)\n+;; Load and store instructions save a cycle if they are aligned on a\n+;; four byte boundary.  Using a function unit for stores encourages\n+;; gcc to separate load and store instructions by one instruction,\n+;; which makes it more likely that the linker will be able to word\n+;; align them when relaxing.\n+(define_function_unit \"memory\" 1 0\n+  (eq_attr \"type\" \"load,pcload,pload,store,pstore\") 2 2)\n+\n+;; ??? These are approximations.\n (define_function_unit \"mpy\"    1 0 (eq_attr \"type\" \"smpy\") 2 2)\n (define_function_unit \"mpy\"    1 0 (eq_attr \"type\" \"dmpy\") 3 3)\n \n-;; ??? Must define SH3E function units.\n+(define_function_unit \"fp\"     1 0 (eq_attr \"type\" \"fp\") 2 1)\n+(define_function_unit \"fp\"     1 0 (eq_attr \"type\" \"fdiv\") 13 12)\n \n ; Definitions for filling branch delay slots.\n \n@@ -1460,7 +1470,7 @@\n \tmov.l\t%1,%0\n \tflds\t%1,fpul\\;sts\tfpul,%0\n \tlds\t%1,fpul\\;fsts\tfpul,%0\"\n-  [(set_attr \"type\" \"move,move,move,move,load,store,load,store,move,move\")\n+  [(set_attr \"type\" \"move,move,fp,fp,load,store,load,store,move,fp\")\n    (set_attr \"length\" \"*,*,*,*,*,*,*,*,4,4\")])\n \n (define_expand \"movsf\"\n@@ -2042,36 +2052,41 @@\n \t(plus:SF (match_operand:SF 1 \"arith_reg_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n-  \"fadd\t%2,%0\")\n+  \"fadd\t%2,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"subsf3\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")\n \t\t  (match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n-  \"fsub\t%2,%0\")\n+  \"fsub\t%2,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"arith_reg_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n-  \"fmul\t%2,%0\")\n+  \"fmul\t%2,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"*macsf3\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(plus:SF (mult:SF (match_operand:SF 1 \"arith_reg_operand\" \"%w\")\n \t\t\t  (match_operand:SF 2 \"arith_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"arith_reg_operand\" \"0\")))]\n   \"TARGET_SH3E\"\n-  \"fmac\tfr0,%2,%0\")\n+  \"fmac\tfr0,%2,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")\n \t\t(match_operand:SF 2 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n-  \"fdiv\t%2,%0\")\n+  \"fdiv\t%2,%0\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n ;; ??? This is the right solution, but it fails because the movs[if] patterns\n ;; silently clobber FPUL (r22) for int<->fp moves.  Thus we can not explicitly\n@@ -2096,7 +2111,8 @@\n \t(float:SF (match_operand:SI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH3E\"\n   \"lds\t%1,fpul\\;float\tfpul,%0\"\n-  [(set_attr \"length\" \"4\")])\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"fp\")])\n \n ;; ??? This is the right solution, but it fails because the movs[if] patterns\n ;; silently clobber FPUL (r22) for int<->fp moves.  Thus we can not explicitly\n@@ -2121,23 +2137,26 @@\n \t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n   \"ftrc\t%1,fpul\\;sts\tfpul,%0\"\n-  [(set_attr \"length\" \"4\")])\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"move\")])\n \n ;; ??? This should be SFmode not SImode in the compare, but that would\n ;; require fixing the branch patterns too.\n (define_insn \"*cmpgtsf_t\"\n   [(set (reg:SI 18) (gt:SI (match_operand:SF 0 \"arith_reg_operand\" \"f\")\n \t\t\t   (match_operand:SF 1 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n-  \"fcmp/gt\t%1,%0\")\n+  \"fcmp/gt\t%1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n ;; ??? This should be SFmode not SImode in the compare, but that would\n ;; require fixing the branch patterns too.\n (define_insn \"*cmpeqsf_t\"\n   [(set (reg:SI 18) (eq:SI (match_operand:SF 0 \"arith_reg_operand\" \"f\")\n \t\t\t   (match_operand:SF 1 \"arith_reg_operand\" \"f\")))]\n   \"TARGET_SH3E\"\n-  \"fcmp/eq\t%1,%0\")\n+  \"fcmp/eq\t%1,%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_expand \"cmpsf\"\n   [(set (reg:SI 18) (compare (match_operand:SF 0 \"arith_operand\" \"\")\n@@ -2154,19 +2173,22 @@\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")))]\n   \"TARGET_SH3E\"\n-  \"fneg\t%0\")\n+  \"fneg\t%0\"\n+  [(set_attr \"type\" \"fp\")])\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:SF 1 \"arith_reg_operand\" \"0\")))]\n   \"TARGET_SH3E\"\n-  \"fsqrt\t%0\")\n+  \"fsqrt\t%0\"\n+  [(set_attr \"type\" \"fdiv\")])\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"arith_reg_operand\" \"0\")))]\n   \"TARGET_SH3E\"\n-  \"fabs\t%0\")\n+  \"fabs\t%0\"\n+  [(set_attr \"type\" \"fp\")])\n \f\n ;; -------------------------------------------------------------------------\n ;; Peepholes"}]}