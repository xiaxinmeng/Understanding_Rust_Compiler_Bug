{"sha": "05416670a62a8914d3aa6143ce909ee8192090a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU0MTY2NzBhNjJhODkxNGQzYWE2MTQzY2U5MDllZTgxOTIwOTBhOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-04-21T13:30:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-04-21T13:30:56Z"}, "message": "i386.md (ARGP_REG, [...]): New.\n\n\t* config/i386/i386.md (ARGP_REG, FRAME_REG, BND2_REG, BND3_REG,\n\tFIRST_PSEUDO_REG): New.\n\t* config/i386/i386.h (STACK_POINTER_REGNUM): Define to SP_REG.\n\t(ARG_POINTER_REGNUM): Define to ARGP_REG.\n\t(FRAME_POINTER_REGNUM): Define to FRAME_REG.\n\t(HARD_FRAME_POINTER_REGNUM): Define to BP_REG.\n\t(FIRST_PSEUDO_REGISTER): Define to FIRST_PSEUDO_REG.\n\t(FIRST_INT_REG): New.\n\t(LAST_INT_REG): New.\n\t(FIRST_*_REG): Define using *_REG.\n\t(LAST_*_REG): Ditto.\n\t(QI_REGNO_P): Define using FIRST_QU_REG and LAST_QI_REG.\n\t(LEGACY_INT_REGNO_P): Define using FIRST_INT_REG and LAST_INT_REG.\n\t(FIRST_FLOAT_REG): Define to FIRST_STACK_REG.\n\nFrom-SVN: r222269", "tree": {"sha": "baab8a34e7078d11f836e83b901981f5242128b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baab8a34e7078d11f836e83b901981f5242128b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05416670a62a8914d3aa6143ce909ee8192090a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05416670a62a8914d3aa6143ce909ee8192090a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05416670a62a8914d3aa6143ce909ee8192090a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05416670a62a8914d3aa6143ce909ee8192090a9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35430ca0c6c34943932b111cb55475f292a0a208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35430ca0c6c34943932b111cb55475f292a0a208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35430ca0c6c34943932b111cb55475f292a0a208"}], "stats": {"total": 137, "additions": 81, "deletions": 56}, "files": [{"sha": "58a379b246dfe7c3f5bb75d3daaa759a88b0c730", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05416670a62a8914d3aa6143ce909ee8192090a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05416670a62a8914d3aa6143ce909ee8192090a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05416670a62a8914d3aa6143ce909ee8192090a9", "patch": "@@ -1,3 +1,20 @@\n+2015-04-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ARGP_REG, FRAME_REG, BND2_REG, BND3_REG,\n+\tFIRST_PSEUDO_REG): New.\n+\t* config/i386/i386.h (STACK_POINTER_REGNUM): Define to SP_REG.\n+\t(ARG_POINTER_REGNUM): Define to ARGP_REG.\n+\t(FRAME_POINTER_REGNUM): Define to FRAME_REG.\n+\t(HARD_FRAME_POINTER_REGNUM): Define to BP_REG.\n+\t(FIRST_PSEUDO_REGISTER): Define to FIRST_PSEUDO_REG.\n+\t(FIRST_INT_REG): New.\n+\t(LAST_INT_REG): New.\n+\t(FIRST_*_REG): Define using *_REG.\n+\t(LAST_*_REG): Ditto.\n+\t(QI_REGNO_P): Define using FIRST_QU_REG and LAST_QI_REG.\n+\t(LEGACY_INT_REGNO_P): Define using FIRST_INT_REG and LAST_INT_REG.\n+\t(FIRST_FLOAT_REG): Define to FIRST_STACK_REG.\n+\n 2015-04-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* expmed.c: (synth_mult): Only assume overlapping"}, {"sha": "d9313305c51b3170fae2affdae045ef5032c3eed", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 59, "deletions": 56, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05416670a62a8914d3aa6143ce909ee8192090a9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05416670a62a8914d3aa6143ce909ee8192090a9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=05416670a62a8914d3aa6143ce909ee8192090a9", "patch": "@@ -957,7 +957,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n \n-#define FIRST_PSEUDO_REGISTER 81\n+#define FIRST_PSEUDO_REGISTER FIRST_PSEUDO_REG\n \n /* Number of hardware registers that go into the DWARF-2 unwind info.\n    If not defined, equals FIRST_PSEUDO_REGISTER.  */\n@@ -1100,7 +1100,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V16SImode || (MODE) == V16SFmode || (MODE) == V32HImode \\\n    || (MODE) == V4TImode)\n \n-#define VALID_AVX512VL_128_REG_MODE(MODE)\t\t\t\t\t\\\n+#define VALID_AVX512VL_128_REG_MODE(MODE)\t\t\t\t\\\n   ((MODE) == V2DImode || (MODE) == V2DFmode || (MODE) == V16QImode\t\\\n    || (MODE) == V4SImode || (MODE) == V4SFmode || (MODE) == V8HImode)\n \n@@ -1121,6 +1121,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V2SImode || (MODE) == SImode\t\t\t\t\\\n    || (MODE) == V4HImode || (MODE) == V8QImode)\n \n+#define VALID_MASK_REG_MODE(MODE) ((MODE) == HImode || (MODE) == QImode)\n+\n+#define VALID_MASK_AVX512BW_MODE(MODE) ((MODE) == SImode || (MODE) == DImode)\n+\n #define VALID_BND_REG_MODE(MODE) \\\n   (TARGET_64BIT ? (MODE) == BND64mode : (MODE) == BND32mode)\n \n@@ -1150,9 +1154,15 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V16SImode || (MODE) == V32HImode || (MODE) == V8DFmode\t\\\n    || (MODE) == V16SFmode)\n \n-#define VALID_MASK_REG_MODE(MODE) ((MODE) == HImode || (MODE) == QImode)\n+#define X87_FLOAT_MODE_P(MODE)\t\\\n+  (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))\n \n-#define VALID_MASK_AVX512BW_MODE(MODE) ((MODE) == SImode || (MODE) == DImode)\n+#define SSE_FLOAT_MODE_P(MODE) \\\n+  ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n+\n+#define FMA4_VEC_FLOAT_MODE_P(MODE) \\\n+  (TARGET_FMA4 && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n+\t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n \n@@ -1198,42 +1208,46 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    register.  The ordinary mov instructions won't work */\n /* #define PC_REGNUM  */\n \n+/* Base register for access to arguments of the function.  */\n+#define ARG_POINTER_REGNUM ARGP_REG\n+\n /* Register to use for pushing function arguments.  */\n-#define STACK_POINTER_REGNUM 7\n+#define STACK_POINTER_REGNUM SP_REG\n \n /* Base register for access to local variables of the function.  */\n-#define HARD_FRAME_POINTER_REGNUM 6\n+#define FRAME_POINTER_REGNUM FRAME_REG\n+#define HARD_FRAME_POINTER_REGNUM BP_REG\n \n-/* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM 20\n+#define FIRST_INT_REG AX_REG\n+#define LAST_INT_REG  SP_REG\n \n-/* First floating point reg */\n-#define FIRST_FLOAT_REG 8\n+#define FIRST_QI_REG AX_REG\n+#define LAST_QI_REG  BX_REG\n \n /* First & last stack-like regs */\n-#define FIRST_STACK_REG FIRST_FLOAT_REG\n-#define LAST_STACK_REG (FIRST_FLOAT_REG + 7)\n+#define FIRST_STACK_REG ST0_REG\n+#define LAST_STACK_REG  ST7_REG\n \n-#define FIRST_SSE_REG (FRAME_POINTER_REGNUM + 1)\n-#define LAST_SSE_REG  (FIRST_SSE_REG + 7)\n+#define FIRST_SSE_REG XMM0_REG\n+#define LAST_SSE_REG  XMM7_REG\n \n-#define FIRST_MMX_REG  (LAST_SSE_REG + 1)   /*29*/\n-#define LAST_MMX_REG   (FIRST_MMX_REG + 7)\n+#define FIRST_MMX_REG  MM0_REG\n+#define LAST_MMX_REG   MM7_REG\n \n-#define FIRST_REX_INT_REG  (LAST_MMX_REG + 1) /*37*/\n-#define LAST_REX_INT_REG   (FIRST_REX_INT_REG + 7)\n+#define FIRST_REX_INT_REG  R8_REG\n+#define LAST_REX_INT_REG   R15_REG\n \n-#define FIRST_REX_SSE_REG  (LAST_REX_INT_REG + 1) /*45*/\n-#define LAST_REX_SSE_REG   (FIRST_REX_SSE_REG + 7)\n+#define FIRST_REX_SSE_REG  XMM8_REG\n+#define LAST_REX_SSE_REG   XMM15_REG\n \n-#define FIRST_EXT_REX_SSE_REG  (LAST_REX_SSE_REG + 1) /*53*/\n-#define LAST_EXT_REX_SSE_REG   (FIRST_EXT_REX_SSE_REG + 15) /*68*/\n+#define FIRST_EXT_REX_SSE_REG  XMM16_REG\n+#define LAST_EXT_REX_SSE_REG   XMM31_REG\n \n-#define FIRST_MASK_REG  (LAST_EXT_REX_SSE_REG + 1) /*69*/\n-#define LAST_MASK_REG   (FIRST_MASK_REG + 7) /*76*/\n+#define FIRST_MASK_REG  MASK0_REG\n+#define LAST_MASK_REG   MASK7_REG\n \n-#define FIRST_BND_REG  (LAST_MASK_REG + 1) /*77*/\n-#define LAST_BND_REG   (FIRST_BND_REG + 3) /*80*/\n+#define FIRST_BND_REG  BND0_REG\n+#define LAST_BND_REG   BND3_REG\n \n /* Override this in other tm.h files to cope with various OS lossage\n    requiring a frame pointer.  */\n@@ -1244,9 +1258,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /* Make sure we can access arbitrary call frames.  */\n #define SETUP_FRAME_ADDRESSES()  ix86_setup_frame_addresses ()\n \n-/* Base register for access to arguments of the function.  */\n-#define ARG_POINTER_REGNUM 16\n-\n /* Register to hold the addressing base for position independent\n    code access to data items.  We don't use PIC pointer for 64bit\n    mode.  Define the regnum to dummy value to prevent gcc from\n@@ -1444,7 +1455,14 @@ enum reg_class\n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n \n #define QI_REG_P(X) (REG_P (X) && QI_REGNO_P (REGNO (X)))\n-#define QI_REGNO_P(N) IN_RANGE ((N), AX_REG, BX_REG)\n+#define QI_REGNO_P(N) IN_RANGE ((N), FIRST_QI_REG, LAST_QI_REG)\n+\n+#define LEGACY_INT_REG_P(X) (REG_P (X) && LEGACY_INT_REGNO_P (REGNO (X)))\n+#define LEGACY_INT_REGNO_P(N) (IN_RANGE ((N), FIRST_INT_REG, LAST_INT_REG))\n+\n+#define REX_INT_REG_P(X) (REG_P (X) && REX_INT_REGNO_P (REGNO (X)))\n+#define REX_INT_REGNO_P(N) \\\n+  IN_RANGE ((N), FIRST_REX_INT_REG, LAST_REX_INT_REG)\n \n #define GENERAL_REG_P(X) (REG_P (X) && GENERAL_REGNO_P (REGNO (X)))\n #define GENERAL_REGNO_P(N) \\\n@@ -1454,22 +1472,9 @@ enum reg_class\n #define ANY_QI_REGNO_P(N) \\\n   (TARGET_64BIT ? GENERAL_REGNO_P (N) : QI_REGNO_P (N))\n \n-#define LEGACY_INT_REG_P(X) (REG_P (X) && LEGACY_INT_REGNO_P (REGNO (X)))\n-#define LEGACY_INT_REGNO_P(N) (IN_RANGE ((N), AX_REG, SP_REG))\n-\n-#define REX_INT_REG_P(X) (REG_P (X) && REX_INT_REGNO_P (REGNO (X)))\n-#define REX_INT_REGNO_P(N) \\\n-  IN_RANGE ((N), FIRST_REX_INT_REG, LAST_REX_INT_REG)\n-\n #define STACK_REG_P(X) (REG_P (X) && STACK_REGNO_P (REGNO (X)))\n #define STACK_REGNO_P(N) IN_RANGE ((N), FIRST_STACK_REG, LAST_STACK_REG)\n \n-#define ANY_FP_REG_P(X) (REG_P (X) && ANY_FP_REGNO_P (REGNO (X)))\n-#define ANY_FP_REGNO_P(N) (STACK_REGNO_P (N) || SSE_REGNO_P (N))\n-\n-#define X87_FLOAT_MODE_P(MODE)\t\\\n-  (TARGET_80387 && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode))\n-\n #define SSE_REG_P(X) (REG_P (X) && SSE_REGNO_P (REGNO (X)))\n #define SSE_REGNO_P(N)\t\t\t\t\t\t\\\n   (IN_RANGE ((N), FIRST_SSE_REG, LAST_SSE_REG)\t\t\t\\\n@@ -1482,32 +1487,30 @@ enum reg_class\n #define EXT_REX_SSE_REGNO_P(N) \\\n   IN_RANGE ((N), FIRST_EXT_REX_SSE_REG, LAST_EXT_REX_SSE_REG)\n \n-#define SSE_REGNO(N) \\\n-  ((N) < 8 ? FIRST_SSE_REG + (N) \\\n-         : (N) <= LAST_REX_SSE_REG ? (FIRST_REX_SSE_REG + (N) - 8) \\\n-                                   : (FIRST_EXT_REX_SSE_REG + (N) - 16))\n+#define ANY_FP_REG_P(X) (REG_P (X) && ANY_FP_REGNO_P (REGNO (X)))\n+#define ANY_FP_REGNO_P(N) (STACK_REGNO_P (N) || SSE_REGNO_P (N))\n \n #define MASK_REG_P(X) (REG_P (X) && MASK_REGNO_P (REGNO (X)))\n #define MASK_REGNO_P(N) IN_RANGE ((N), FIRST_MASK_REG, LAST_MASK_REG)\n \n-#define SSE_FLOAT_MODE_P(MODE) \\\n-  ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n-\n-#define FMA4_VEC_FLOAT_MODE_P(MODE) \\\n-  (TARGET_FMA4 && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n-\t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))\n-\n #define MMX_REG_P(X) (REG_P (X) && MMX_REGNO_P (REGNO (X)))\n #define MMX_REGNO_P(N) IN_RANGE ((N), FIRST_MMX_REG, LAST_MMX_REG)\n \n-#define STACK_TOP_P(X) (REG_P (X) && REGNO (X) == FIRST_STACK_REG)\n-\n #define CC_REG_P(X) (REG_P (X) && CC_REGNO_P (REGNO (X)))\n #define CC_REGNO_P(X) ((X) == FLAGS_REG || (X) == FPSR_REG)\n \n #define BND_REG_P(X) (REG_P (X) && BND_REGNO_P (REGNO (X)))\n #define BND_REGNO_P(N) IN_RANGE ((N), FIRST_BND_REG, LAST_BND_REG)\n \n+/* First floating point reg */\n+#define FIRST_FLOAT_REG FIRST_STACK_REG\n+#define STACK_TOP_P(X) (REG_P (X) && REGNO (X) == FIRST_FLOAT_REG)\n+\n+#define SSE_REGNO(N) \\\n+  ((N) < 8 ? FIRST_SSE_REG + (N) \\\n+         : (N) <= LAST_REX_SSE_REG ? (FIRST_REX_SSE_REG + (N) - 8) \\\n+                                   : (FIRST_EXT_REX_SSE_REG + (N) - 16))\n+\n /* The class value for index registers, and the one for base regs.  */\n \n #define INDEX_REG_CLASS INDEX_REGS"}, {"sha": "3e8474c42270c97ed3d23f7a8b0d448603fc332f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05416670a62a8914d3aa6143ce909ee8192090a9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05416670a62a8914d3aa6143ce909ee8192090a9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=05416670a62a8914d3aa6143ce909ee8192090a9", "patch": "@@ -324,9 +324,11 @@\n    (ST5_REG\t\t\t13)\n    (ST6_REG\t\t\t14)\n    (ST7_REG\t\t\t15)\n+   (ARGP_REG\t\t\t16)\n    (FLAGS_REG\t\t\t17)\n    (FPSR_REG\t\t\t18)\n    (FPCR_REG\t\t\t19)\n+   (FRAME_REG\t\t\t20)\n    (XMM0_REG\t\t\t21)\n    (XMM1_REG\t\t\t22)\n    (XMM2_REG\t\t\t23)\n@@ -385,6 +387,9 @@\n    (MASK7_REG\t\t\t76)\n    (BND0_REG\t\t\t77)\n    (BND1_REG\t\t\t78)\n+   (BND2_REG\t\t\t79)\n+   (BND3_REG\t\t\t80)\n+   (FIRST_PSEUDO_REG\t\t81)\n   ])\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls"}]}