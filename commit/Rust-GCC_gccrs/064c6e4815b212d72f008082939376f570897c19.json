{"sha": "064c6e4815b212d72f008082939376f570897c19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY0YzZlNDgxNWIyMTJkNzJmMDA4MDgyOTM5Mzc2ZjU3MDg5N2MxOQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-03T15:34:15Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-03T17:25:24Z"}, "message": "Type Resolve ReturnExpr's to ensure they match the function type.\n\nThis an implementation to check return types for functions it needs work\nto handle structs and other data structures later on.", "tree": {"sha": "4090d53e54ea8565d9515b3668f432306a2ee697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4090d53e54ea8565d9515b3668f432306a2ee697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/064c6e4815b212d72f008082939376f570897c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064c6e4815b212d72f008082939376f570897c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064c6e4815b212d72f008082939376f570897c19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064c6e4815b212d72f008082939376f570897c19/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03fc0e389fae2576a7f217fb0afb7cb0f18689f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fc0e389fae2576a7f217fb0afb7cb0f18689f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fc0e389fae2576a7f217fb0afb7cb0f18689f8"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "51c7380f3a703852c28d3eb7d3071c35cdf975c3", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=064c6e4815b212d72f008082939376f570897c19", "patch": "@@ -774,9 +774,42 @@ TypeResolution::visit (AST::RangeFromToInclExpr &expr)\n void\n TypeResolution::visit (AST::RangeToInclExpr &expr)\n {}\n+\n void\n TypeResolution::visit (AST::ReturnExpr &expr)\n-{}\n+{\n+  // Ensure the type of this matches the function\n+  auto before = typeBuffer.size ();\n+  expr.get_expr ()->accept_vis (*this);\n+\n+  if (typeBuffer.size () <= before)\n+    {\n+      rust_error_at (expr.get_expr ()->get_locus_slow (),\n+\t\t     \"unable to determine type for return expr\");\n+      return;\n+    }\n+\n+  auto inferedType = typeBuffer.back ();\n+  typeBuffer.pop_back ();\n+\n+  // check this is compatible with the return type\n+  // this will again have issues with structs before we move to HIR\n+\n+  auto function = scope.CurrentFunction ();\n+  if (!function->has_function_return_type ())\n+    {\n+      rust_error_at (expr.get_locus (), \"return for void function %s\",\n+\t\t     function->as_string ().c_str ());\n+      return;\n+    }\n+\n+  if (!typesAreCompatible (function->return_type.get (), inferedType,\n+\t\t\t   expr.get_locus_slow ()))\n+    {\n+      return;\n+    }\n+}\n+\n void\n TypeResolution::visit (AST::UnsafeBlockExpr &expr)\n {}\n@@ -889,18 +922,26 @@ TypeResolution::visit (AST::Function &function)\n   // its  a marker for a void function\n   scope.InsertType (function.function_name, function.return_type.get ());\n   scope.InsertFunction (function.function_name, &function);\n+  scope.PushFunction (&function);\n   scope.Push ();\n \n   for (auto &param : function.function_params)\n     {\n       if (!isTypeInScope (param.type.get (), param.locus))\n-\treturn;\n+\t{\n+\t  scope.Pop ();\n+\t  scope.PopFunction ();\n+\t  return;\n+\t}\n \n       auto before = letPatternBuffer.size ();\n       param.param_name->accept_vis (*this);\n       if (letPatternBuffer.size () <= before)\n \t{\n \t  rust_error_at (param.locus, \"failed to analyse parameter name\");\n+\n+\t  scope.Pop ();\n+\t  scope.PopFunction ();\n \t  return;\n \t}\n \n@@ -913,7 +954,11 @@ TypeResolution::visit (AST::Function &function)\n   if (function.has_function_return_type ())\n     {\n       if (!isTypeInScope (function.return_type.get (), function.locus))\n-\treturn;\n+\t{\n+\t  scope.Pop ();\n+\t  scope.PopFunction ();\n+\t  return;\n+\t}\n     }\n \n   // walk the expression body\n@@ -927,6 +972,7 @@ TypeResolution::visit (AST::Function &function)\n     function.locals.push_back (value);\n \n   scope.Pop ();\n+  scope.PopFunction ();\n }\n \n void"}, {"sha": "0fef2ae6217033ad248ddb59f1ff42ccf9cc9e88", "filename": "gcc/rust/analysis/rust-type-resolution.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.h?ref=064c6e4815b212d72f008082939376f570897c19", "patch": "@@ -55,6 +55,12 @@ class TypeScoping\n     return functionScope.Lookup (ident, fn);\n   }\n \n+  void PushFunction (AST::Function *fn) { functionStack.push_back (fn); }\n+\n+  void PopFunction () { functionStack.pop_back (); }\n+\n+  AST::Function *CurrentFunction () { return functionStack.back (); }\n+\n   void InsertLocal (std::string ident, AST::LetStmt *let)\n   {\n     localsPerBlock.Insert (ident, let);\n@@ -91,6 +97,8 @@ class TypeScoping\n   }\n \n private:\n+  std::vector<AST::Function *> functionStack;\n+\n   Scope<AST::Function *> functionScope;\n   Scope<AST::LetStmt *> localsPerBlock;\n   Scope<AST::StructStruct *> structsPerBlock;"}, {"sha": "f587c003b10c24c96edb36e50833c74b302e4b2a", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=064c6e4815b212d72f008082939376f570897c19", "patch": "@@ -3012,11 +3012,11 @@ class RangeToInclExpr : public RangeExpr\n // Return expression AST node representation\n class ReturnExpr : public ExprWithoutBlock\n {\n-public:\n   std::unique_ptr<Expr> return_expr;\n \n   Location locus;\n \n+public:\n   std::string as_string () const override;\n \n   /* Returns whether the object has an expression returned (i.e. not void return\n@@ -3059,6 +3059,8 @@ class ReturnExpr : public ExprWithoutBlock\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Expr *get_expr () { return return_expr.get (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "820f880f884debd863e4d796ec7ddf78ccf0bbc9", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/064c6e4815b212d72f008082939376f570897c19/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=064c6e4815b212d72f008082939376f570897c19", "patch": "@@ -805,18 +805,18 @@ void\n Compilation::visit (AST::ReturnExpr &expr)\n {\n   Bexpression *ret = NULL;\n-  VISIT_POP (expr.return_expr->get_locus_slow (), expr.return_expr, ret, exprs);\n+  VISIT_POP (expr.get_expr ()->get_locus_slow (), expr.get_expr (), ret, exprs);\n   if (ret == NULL)\n     {\n-      rust_fatal_error (expr.return_expr->get_locus_slow (),\n+      rust_fatal_error (expr.get_expr ()->get_locus_slow (),\n \t\t\t\"failed to compile\");\n       return;\n     }\n \n   std::vector<Bexpression *> retstmts;\n   retstmts.push_back (ret);\n   auto s = backend->return_statement (scope.GetCurrentFndecl (), retstmts,\n-\t\t\t\t      expr.locus);\n+\t\t\t\t      expr.get_locus ());\n   scope.AddStatement (s);\n }\n "}]}