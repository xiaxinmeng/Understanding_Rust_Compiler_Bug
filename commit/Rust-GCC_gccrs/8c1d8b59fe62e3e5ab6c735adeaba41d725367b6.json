{"sha": "8c1d8b59fe62e3e5ab6c735adeaba41d725367b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxZDhiNTlmZTYyZTNlNWFiNmM3MzVhZGVhYmE0MWQ3MjUzNjdiNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-04-29T23:56:16Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-04-29T23:56:16Z"}, "message": "ira.c tidies: move pdx_subregs into reg_equiv\n\nWhere pdx_subregs[regno] is used, reg_equiv[regno] is also used.\n\n\t* ira.c (pdx_subregs): Delete.\n\t(struct equivalence): Add pdx_subregs field.\n\t(set_paradoxical_subreg): Remove pdx_subregs param.  Update\n\tpdx_subregs access.\n\t(update_equiv_regs): Don't create or free pdx_subregs.  Update\n\tpdx_subregs access.\n\nFrom-SVN: r235656", "tree": {"sha": "6c44ee8c0307aa46103fa8667f3977ae4eefe2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c44ee8c0307aa46103fa8667f3977ae4eefe2a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fa97501de4808753618b8fbc96c48f2a234a0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa97501de4808753618b8fbc96c48f2a234a0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa97501de4808753618b8fbc96c48f2a234a0d8"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "767af7293a560af5594620decf7594af6b1e4e49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c1d8b59fe62e3e5ab6c735adeaba41d725367b6", "patch": "@@ -1,3 +1,12 @@\n+2016-04-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* ira.c (pdx_subregs): Delete.\n+\t(struct equivalence): Add pdx_subregs field.\n+\t(set_paradoxical_subreg): Remove pdx_subregs param.  Update\n+\tpdx_subregs access.\n+\t(update_equiv_regs): Don't create or free pdx_subregs.  Update\n+\tpdx_subregs access.\n+\n 2016-04-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/altivec.h: Change definitions of vec_xl and"}, {"sha": "eec5069ae9e6ed312529dea6fd74b57914ab3aee", "filename": "gcc/ira.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d8b59fe62e3e5ab6c735adeaba41d725367b6/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=8c1d8b59fe62e3e5ab6c735adeaba41d725367b6", "patch": "@@ -2918,6 +2918,8 @@ struct equivalence\n   unsigned char replace : 1;\n   /* Set if this register has no known equivalence.  */\n   unsigned char no_equiv : 1;\n+  /* Set if this register is mentioned in a paradoxical subreg.  */\n+  unsigned char pdx_subregs : 1;\n };\n \n /* reg_equiv[N] (where N is a pseudo reg number) is the equivalence\n@@ -3294,7 +3296,7 @@ no_equiv (rtx reg, const_rtx store ATTRIBUTE_UNUSED,\n    in PDX_SUBREGS.  */\n \n static void\n-set_paradoxical_subreg (rtx_insn *insn, bool *pdx_subregs)\n+set_paradoxical_subreg (rtx_insn *insn)\n {\n   subrtx_iterator::array_type array;\n   FOR_EACH_SUBRTX (iter, array, PATTERN (insn), NONCONST)\n@@ -3304,7 +3306,7 @@ set_paradoxical_subreg (rtx_insn *insn, bool *pdx_subregs)\n \t{\n \t  const_rtx reg = SUBREG_REG (subreg);\n \t  if (REG_P (reg) && paradoxical_subreg_p (subreg))\n-\t    pdx_subregs[REGNO (reg)] = true;\n+\t    reg_equiv[REGNO (reg)].pdx_subregs = true;\n \t}\n     }\n }\n@@ -3342,26 +3344,21 @@ update_equiv_regs (void)\n   basic_block bb;\n   int loop_depth;\n   bitmap cleared_regs;\n-  bool *pdx_subregs;\n   bitmap_head seen_insns;\n \n-  /* Use pdx_subregs to show whether a reg is used in a paradoxical\n-     subreg.  */\n-  pdx_subregs = XCNEWVEC (bool, max_regno);\n-\n   reg_equiv = XCNEWVEC (struct equivalence, max_regno);\n   grow_reg_equivs ();\n \n   init_alias_analysis ();\n \n-  /* Scan insns and set pdx_subregs[regno] if the reg is used in a\n-     paradoxical subreg. Don't set such reg equivalent to a mem,\n+  /* Scan insns and set pdx_subregs if the reg is used in a\n+     paradoxical subreg.  Don't set such reg equivalent to a mem,\n      because lra will not substitute such equiv memory in order to\n      prevent access beyond allocated memory for paradoxical memory subreg.  */\n   FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (NONDEBUG_INSN_P (insn))\n-\tset_paradoxical_subreg (insn, pdx_subregs);\n+\tset_paradoxical_subreg (insn);\n \n   /* Scan the insns and find which registers have equivalences.  Do this\n      in a separate scan of the insns because (due to -fcse-follow-jumps)\n@@ -3466,8 +3463,9 @@ update_equiv_regs (void)\n \t      continue;\n \t    }\n \n-\t  /* Don't set reg (if pdx_subregs[regno] == true) equivalent to a mem.  */\n-\t  if (MEM_P (src) && pdx_subregs[regno])\n+\t  /* Don't set reg mentioned in a paradoxical subreg\n+\t     equivalent to a mem.  */\n+\t  if (MEM_P (src) && reg_equiv[regno].pdx_subregs)\n \t    {\n \t      note_stores (set, no_equiv, NULL);\n \t      continue;\n@@ -3651,12 +3649,12 @@ update_equiv_regs (void)\n \t  && (regno = REGNO (src)) >= FIRST_PSEUDO_REGISTER\n \t  && REG_BASIC_BLOCK (regno) >= NUM_FIXED_BLOCKS\n \t  && DF_REG_DEF_COUNT (regno) == 1\n+\t  && ! reg_equiv[regno].pdx_subregs\n \t  && reg_equiv[regno].init_insns != NULL\n \t  && reg_equiv[regno].init_insns->insn () != NULL\n \t  && ! find_reg_note (XEXP (reg_equiv[regno].init_insns, 0),\n \t\t\t      REG_EQUIV, NULL_RTX)\n-\t  && ! contains_replace_regs (XEXP (dest, 0))\n-\t  && ! pdx_subregs[regno])\n+\t  && ! contains_replace_regs (XEXP (dest, 0)))\n \t{\n \t  rtx_insn *init_insn =\n \t    as_a <rtx_insn *> (XEXP (reg_equiv[regno].init_insns, 0));\n@@ -3856,7 +3854,6 @@ update_equiv_regs (void)\n \n   end_alias_analysis ();\n   free (reg_equiv);\n-  free (pdx_subregs);\n }\n \n /* A pass over indirect jumps, converting simple cases to direct jumps."}]}