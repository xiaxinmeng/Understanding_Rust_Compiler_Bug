{"sha": "48ff801bdafe31d8df087b73156e89ba424c6fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmZjgwMWJkYWZlMzFkOGRmMDg3YjczMTU2ZTg5YmE0MjRjNmZjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-30T21:31:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-30T21:31:09Z"}, "message": "Don't include sys/file.h for winnt; use process.h instead.\n\n(concat): Now just concats two things; all callers changed.\n(concat[346]): New functions.\n(dir_separator_str): New variable.\n(exec_prefixes, startfile_prefixes, include_prefixes): Renamed from same names\nwithout plural; all users changed.\n(find_a_file, process_command, do_spec_1): Use DIR_SEPARATOR.\n(find_file, is_directory, main): Likewise.\n(lookup_compiler): If OS/2, do case-independent search.\n(fix_argv): New function on winnt.\n(FIX_ARGV): New macro for some systems; use instead of argv.\n\nFrom-SVN: r8184", "tree": {"sha": "91753139363ff702b6993b06619d4618a7e88986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91753139363ff702b6993b06619d4618a7e88986"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48ff801bdafe31d8df087b73156e89ba424c6fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ff801bdafe31d8df087b73156e89ba424c6fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ff801bdafe31d8df087b73156e89ba424c6fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ff801bdafe31d8df087b73156e89ba424c6fc1/comments", "author": null, "committer": null, "parents": [{"sha": "7cc322e36f790da11c19860c96f2166ee4ce9e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc322e36f790da11c19860c96f2166ee4ce9e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc322e36f790da11c19860c96f2166ee4ce9e3e"}], "stats": {"total": 352, "additions": 231, "deletions": 121}, "files": [{"sha": "bf65e8e6b14473687f4890df6ae094d097d9818f", "filename": "gcc/gcc.c", "status": "modified", "additions": 231, "deletions": 121, "changes": 352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ff801bdafe31d8df087b73156e89ba424c6fc1/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ff801bdafe31d8df087b73156e89ba424c6fc1/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=48ff801bdafe31d8df087b73156e89ba424c6fc1", "patch": "@@ -34,9 +34,14 @@ compilation is specified by a string called a \"spec\".  */\n #include <ctype.h>\n #include <signal.h>\n #include <sys/stat.h>\n-#include <sys/file.h>   /* May get R_OK, etc. on some systems.  */\n #include <errno.h>\n \n+#ifndef WINNT\n+#include <sys/file.h>   /* May get R_OK, etc. on some systems.  */\n+#else\n+#include <process.h>\n+#endif\n+\n #include \"config.h\"\n #include \"obstack.h\"\n #ifdef __STDC__\n@@ -126,6 +131,12 @@ compilation is specified by a string called a \"spec\".  */\n #define PATH_SEPARATOR ':'\n #endif\n \n+#ifndef DIR_SEPARATOR\n+#define DIR_SEPARATOR '/'\n+#endif\n+\n+static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n+\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n@@ -234,7 +245,11 @@ static void choose_temp_base\tPROTO((void));\n static int check_live_switch\tPROTO((int, int));\n static char *handle_braces\tPROTO((char *));\n static char *save_string\tPROTO((char *, int));\n-static char *concat\t\tPROTO((char *, char *, char *));\n+static char *concat\t\tPROTO((char *, char *));\n+static char *concat3\t\tPROTO((char *, char *, char *));\n+static char *concat4\t\tPROTO((char *, char *, char *, char *));\n+static char *concat6\t\tPROTO((char *, char *, char *, char *, char *, \\\n+                                       char *));\n static int do_spec\t\tPROTO((char *));\n static int do_spec_1\t\tPROTO((char *, int, char *));\n static char *find_file\t\tPROTO((char *));\n@@ -325,7 +340,7 @@ or with constant text in a single argument.\n  %A\tprocess ASM_FINAL_SPEC as a spec.  A capital A is actually\n \tused here.  This can be used to run a post-processor after the\n \tassembler has done it's job.\n- %D\tDump out a -L option for each directory in startfile_prefix.\n+ %D\tDump out a -L option for each directory in startfile_prefixes.\n \tIf multilib_dir is set, extra entries are generated with it affixed.\n  %l     process LINK_SPEC as a spec.\n  %L     process LIB_SPEC as a spec.\n@@ -937,8 +952,7 @@ translate_options (argcp, argvp)\n \n \t\t  /* Store the translation as one argv elt or as two.  */\n \t\t  if (arg != 0 && index (arginfo, 'j') != 0)\n-\t\t    newv[newindex++] = concat (option_map[j].equivalent,\n-\t\t\t\t\t       arg, \"\");\n+\t\t    newv[newindex++] = concat (option_map[j].equivalent, arg);\n \t\t  else if (arg != 0)\n \t\t    {\n \t\t      newv[newindex++] = option_map[j].equivalent;\n@@ -1178,7 +1192,7 @@ set_spec (name, spec)\n \n   old_spec = sl->spec;\n   if (name && spec[0] == '+' && isspace (spec[1]))\n-    sl->spec = concat (old_spec, spec + 1, \"\");\n+    sl->spec = concat (old_spec, spec + 1);\n   else\n     sl->spec = save_string (spec, strlen (spec));\n \n@@ -1273,15 +1287,15 @@ struct path_prefix\n \n /* List of prefixes to try when looking for executables. */\n \n-static struct path_prefix exec_prefix = { 0, 0, \"exec\" };\n+static struct path_prefix exec_prefixes = { 0, 0, \"exec\" };\n \n /* List of prefixes to try when looking for startup (crt0) files. */\n \n-static struct path_prefix startfile_prefix = { 0, 0, \"startfile\" };\n+static struct path_prefix startfile_prefixes = { 0, 0, \"startfile\" };\n \n /* List of prefixes to try when looking for include files.  */\n \n-static struct path_prefix include_prefix = { 0, 0, \"include\" };\n+static struct path_prefix include_prefixes = { 0, 0, \"include\" };\n \n /* Suffix to attach to directories searched for commands.\n    This looks like `MACHINE/VERSION/'.  */\n@@ -1531,18 +1545,21 @@ choose_temp_base ()\n   base = choose_temp_base_try (P_tmpdir, base);\n #endif\n \n-  base = choose_temp_base_try (\"/usr/tmp\", base);\n-  base = choose_temp_base_try (\"/tmp\", base);\n-\n+  base = choose_temp_base_try (concat4 (dir_separator_str, \"usr\", \n+                                        dir_separator_str, \"tmp\"), \n+                                base);\n+  base = choose_temp_base_try (concat (dir_separator_str, \"tmp\"), base);\n+ \n   /* If all else fails, use the current directory! */  \n-  if (base == (char *)0)\n-    base = \"./\";\n+  if (base == (char *)0) base = concat(\".\", dir_separator_str);\n \n   len = strlen (base);\n-  temp_filename = xmalloc (len + sizeof(\"/ccXXXXXX\") + 1);\n+  temp_filename = xmalloc (len + strlen (concat (dir_separator_str, \n+                                                 \"ccXXXXXX\")) + 1);\n   strcpy (temp_filename, base);\n-  if (len > 0 && temp_filename[len-1] != '/')\n-    temp_filename[len++] = '/';\n+  if (len > 0 && temp_filename[len-1] != '/'\n+      && temp_filename[len-1] != DIR_SEPARATOR)\n+    temp_filename[len++] = DIR_SEPARATOR;\n   strcpy (temp_filename + len, \"ccXXXXXX\");\n \n   mktemp (temp_filename);\n@@ -1686,7 +1703,7 @@ find_a_file (pprefix, name, mode)\n \n   /* Determine the filename to execute (special case for absolute paths).  */\n \n-  if (*name == '/')\n+  if (*name == '/' || *name == DIR_SEPARATOR)\n     {\n       if (access (name, mode))\n \t{\n@@ -1906,7 +1923,6 @@ static int last_pipe_input;\n    NOT_LAST is nonzero if this is not the last subcommand\n    (i.e. its output should be piped to the next one.)  */\n \n-#ifndef OS2\n #ifdef __MSDOS__\n \n #include <process.h>\n@@ -1958,7 +1974,9 @@ pexecute (search_flag, program, argv, not_last)\n   return i << 8;\n }\n \n-#else /* not __MSDOS__ */\n+#endif\n+\n+#if !defined(__MSDOS__) && !defined(OS2) && !defined(WINNT)\n \n static int\n pexecute (search_flag, program, argv, not_last)\n@@ -2048,8 +2066,54 @@ pexecute (search_flag, program, argv, not_last)\n     }\n }\n \n-#endif /* not __MSDOS__ */\n-#else /* not OS2 */\n+#endif /* not __MSDOS__ and not OS2 */\n+\n+#if defined(OS2) || defined(WINNT)\n+\n+#ifdef WINNT\n+\n+char **\n+fix_argv (argvec)\n+     char **argvec\n+{\n+   int i;\n+\n+   for (i = 1; argvec[i] != 0; i++)\n+     {\n+       int len, j;\n+       char *temp, *newtemp;\n+\n+       temp = argvec[i];\n+       len = strlen (temp);\n+       for (j = 0; j < len; j++)\n+\t {\n+\t   if (temp[j] == '\"')\n+\t     {\n+\t       newtemp = xmalloc (len + 2);\n+\t       strncpy (newtemp, temp, j);\n+\t       newtemp [j] = '\\\\';\n+\t       strncpy (&newtemp [j+1], &temp [j], len-j);\n+\t       newtemp [len+1] = 0;\n+\t       free (temp);\n+\t       temp = newtemp;\n+\t       len++;\n+\t       j++;\n+\t     }\n+\t }\n+\n+       argvec[i] = temp;\n+     }\n+\n+   return argvec;\n+}\n+\n+#define FIX_ARGV(a) fix_argv(a)\n+\n+#else\n+\n+#define FIX_ARGV(a) a\n+\n+#endif /* OS2 or WINNT */\n \n static int\n pexecute (search_flag, program, argv, not_last)\n@@ -2058,9 +2122,10 @@ pexecute (search_flag, program, argv, not_last)\n      char *argv[];\n      int not_last;\n {\n-  return (search_flag ? spawnv : spawnvp) (1, program, argv);\n+  return (search_flag ? spawnv : spawnvp) (1, program, FIX_ARGV (argv));\n }\n-#endif /* not OS2 */\n+#endif /* OS2 or WINNT */\n+\n \f\n /* Execute the command specified by the arguments on the current line of spec.\n    When using pipes, this includes several piped-together commands\n@@ -2098,7 +2163,7 @@ execute ()\n \n   commands[0].prog = argbuf[0]; /* first command.  */\n   commands[0].argv = &argbuf[0];\n-  string = find_a_file (&exec_prefix, commands[0].prog, X_OK);\n+  string = find_a_file (&exec_prefixes, commands[0].prog, X_OK);\n   if (string)\n     commands[0].argv[0] = string;\n \n@@ -2111,7 +2176,7 @@ execute ()\n \targbuf[i] = 0;\t/* termination of command args.  */\n \tcommands[n_commands].prog = argbuf[i + 1];\n \tcommands[n_commands].argv = &argbuf[i + 1];\n-\tstring = find_a_file (&exec_prefix, commands[n_commands].prog, X_OK);\n+\tstring = find_a_file (&exec_prefixes, commands[n_commands].prog, X_OK);\n \tif (string)\n \t  commands[n_commands].argv[0] = string;\n \tn_commands++;\n@@ -2180,8 +2245,12 @@ execute ()\n \n #ifdef __MSDOS__\n         status = pid = commands[i].pid;\n+#else\n+#ifdef WINNT\n+\tpid = cwait (&status, commands[i].pid, WAIT_CHILD);\n #else\n \tpid = wait (&status);\n+#endif\n #endif\n \tif (pid < 0)\n \t  abort ();\n@@ -2280,8 +2349,8 @@ process_command (argc, argv)\n \n   if (gcc_exec_prefix)\n     {\n-      add_prefix (&exec_prefix, gcc_exec_prefix, 0, 0, NULL_PTR);\n-      add_prefix (&startfile_prefix, gcc_exec_prefix, 0, 0, NULL_PTR);\n+      add_prefix (&exec_prefixes, gcc_exec_prefix, 0, 0, NULL_PTR);\n+      add_prefix (&startfile_prefixes, gcc_exec_prefix, 0, 0, NULL_PTR);\n     }\n \n   /* COMPILER_PATH and LIBRARY_PATH have values\n@@ -2300,17 +2369,15 @@ process_command (argc, argv)\n \t    {\n \t      strncpy (nstore, startp, endp-startp);\n \t      if (endp == startp)\n+\t\tstrcpy (nstore, concat (\".\", dir_separator_str));\n+\t      else if (endp[-1] != '/' && endp[-1] != DIR_SEPARATOR)\n \t\t{\n-\t\t  strcpy (nstore, \"./\");\n-\t\t}\n-\t      else if (endp[-1] != '/')\n-\t\t{\n-\t\t  nstore[endp-startp] = '/';\n+\t\t  nstore[endp-startp] = DIR_SEPARATOR;\n \t\t  nstore[endp-startp+1] = 0;\n \t\t}\n \t      else\n \t\tnstore[endp-startp] = 0;\n-\t      add_prefix (&exec_prefix, nstore, 0, 0, NULL_PTR);\n+\t      add_prefix (&exec_prefixes, nstore, 0, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -2333,17 +2400,15 @@ process_command (argc, argv)\n \t    {\n \t      strncpy (nstore, startp, endp-startp);\n \t      if (endp == startp)\n+\t\tstrcpy (nstore, concat (\".\", dir_separator_str));\n+\t      else if (endp[-1] != '/' && endp[-1] != DIR_SEPARATOR)\n \t\t{\n-\t\t  strcpy (nstore, \"./\");\n-\t\t}\n-\t      else if (endp[-1] != '/')\n-\t\t{\n-\t\t  nstore[endp-startp] = '/';\n+\t\t  nstore[endp-startp] = DIR_SEPARATOR;\n \t\t  nstore[endp-startp+1] = 0;\n \t\t}\n \t      else\n \t\tnstore[endp-startp] = 0;\n-\t      add_prefix (&startfile_prefix, nstore, 0, 0, NULL_PTR);\n+\t      add_prefix (&startfile_prefixes, nstore, 0, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -2367,17 +2432,15 @@ process_command (argc, argv)\n \t    {\n \t      strncpy (nstore, startp, endp-startp);\n \t      if (endp == startp)\n+\t\tstrcpy (nstore, concat (\".\", dir_separator_str));\n+\t      else if (endp[-1] != '/' && endp[-1] != DIR_SEPARATOR)\n \t\t{\n-\t\t  strcpy (nstore, \"./\");\n-\t\t}\n-\t      else if (endp[-1] != '/')\n-\t\t{\n-\t\t  nstore[endp-startp] = '/';\n+\t\t  nstore[endp-startp] = DIR_SEPARATOR;\n \t\t  nstore[endp-startp+1] = 0;\n \t\t}\n \t      else\n \t\tnstore[endp-startp] = 0;\n-\t      add_prefix (&startfile_prefix, nstore, 0, 0, NULL_PTR);\n+\t      add_prefix (&startfile_prefixes, nstore, 0, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -2572,22 +2635,26 @@ process_command (argc, argv)\n \t\t  value = argv[++i];\n \t\telse\n \t\t  value = p + 1;\n-\t\tadd_prefix (&exec_prefix, value, 1, 0, temp);\n-\t\tadd_prefix (&startfile_prefix, value, 1, 0, temp);\n-\t\tadd_prefix (&include_prefix, concat (value, \"include\", \"\"),\n+\t\tadd_prefix (&exec_prefixes, value, 1, 0, temp);\n+\t\tadd_prefix (&startfile_prefixes, value, 1, 0, temp);\n+\t\tadd_prefix (&include_prefixes, concat (value, \"include\", \"\"),\n \t\t\t    1, 0, 0);\n \n \t\t/* As a kludge, if the arg is \"[foo/]stageN/\", just add\n \t\t   \"[foo/]include\" to the include prefix.  */\n \t\t{\n \t\t  int len = strlen (value);\n-\t\t  if ((len == 7 || (len > 7 && value[len - 8] == '/'))\n+\t\t  if ((len == 7\n+\t\t       || (len > 7\n+\t\t\t   && (value[len - 8] == '/'\n+\t\t\t       || value[len - 8] == DIR_SEPARATOR)))\n \t\t      && strncmp (value + len - 7, \"stage\", 5) == 0\n \t\t      && isdigit (value[len - 2])\n-\t\t      && value[len - 1] == '/')\n+\t\t      && (value[len - 1] == '/'\n+\t\t\t  || value[len - 1] == DIR_SEPARATOR))\n \t\t    {\n \t\t      if (len == 7)\n-\t\t\tadd_prefix (&include_prefix, \"include\", 1, 0, 0);\n+\t\t\tadd_prefix (&include_prefixes, \"include\", 1, 0, 0);\n \t\t      else\n \t\t\t{\n \t\t\t  char *string = xmalloc (len + 1);\n@@ -2645,44 +2712,52 @@ process_command (argc, argv)\n      (such as cpp) rather than those of the host system.  */\n   /* Use 2 as fourth arg meaning try just the machine as a suffix,\n      as well as trying the machine and the version.  */\n-  add_prefix (&exec_prefix, standard_exec_prefix, 0, 2, NULL_PTR);\n-  add_prefix (&exec_prefix, standard_exec_prefix_1, 0, 2, NULL_PTR);\n+#ifndef OS2\n+  add_prefix (&exec_prefixes, standard_exec_prefix, 0, 2, NULL_PTR);\n+  add_prefix (&exec_prefixes, standard_exec_prefix_1, 0, 2, NULL_PTR);\n+#endif\n \n-  add_prefix (&startfile_prefix, standard_exec_prefix, 0, 1, NULL_PTR);\n-  add_prefix (&startfile_prefix, standard_exec_prefix_1, 0, 1, NULL_PTR);\n+  add_prefix (&startfile_prefixes, standard_exec_prefix, 0, 1, NULL_PTR);\n+  add_prefix (&startfile_prefixes, standard_exec_prefix_1, 0, 1, NULL_PTR);\n \n-  tooldir_prefix = concat (tooldir_base_prefix, spec_machine, \"/\");\n+  tooldir_prefix = concat3 (tooldir_base_prefix, spec_machine, \n+                            dir_separator_str);\n \n-  /* If tooldir is relative, base it on exec_prefix.  A relative\n+  /* If tooldir is relative, base it on exec_prefixes.  A relative\n      tooldir lets us move the installed tree as a unit.\n \n      If GCC_EXEC_PREFIX is defined, then we want to add two relative\n      directories, so that we can search both the user specified directory\n      and the standard place.  */\n \n-  if (*tooldir_prefix != '/')\n+  if (*tooldir_prefix != '/' && *tooldir_prefix != DIR_SEPARATOR)\n     {\n       if (gcc_exec_prefix)\n \t{\n \t  char *gcc_exec_tooldir_prefix\n-\t    = concat (concat (gcc_exec_prefix, spec_machine, \"/\"),\n-\t\t      concat (spec_version, \"/\", tooldir_prefix),\n-\t\t      \"\");\n+\t    = concat6 (gcc_exec_prefix, spec_machine, dir_separator_str,\n+\t\t      spec_version, dir_separator_str, tooldir_prefix);\n \n-\t  add_prefix (&exec_prefix, concat (gcc_exec_tooldir_prefix, \"bin\", \"/\"),\n+\t  add_prefix (&exec_prefixes,\n+\t\t      concat3 (gcc_exec_tooldir_prefix, \"bin\", \n+                               dir_separator_str),\n \t\t      0, 0, NULL_PTR);\n-\t  add_prefix (&startfile_prefix, concat (gcc_exec_tooldir_prefix, \"lib\", \"/\"),\n+\t  add_prefix (&startfile_prefixes,\n+\t\t      concat3 (gcc_exec_tooldir_prefix, \"lib\", \n+                               dir_separator_str),\n \t\t      0, 0, NULL_PTR);\n \t}\n \n-      tooldir_prefix = concat (concat (standard_exec_prefix, spec_machine, \"/\"),\n-\t\t\t       concat (spec_version, \"/\", tooldir_prefix),\n-\t\t\t       \"\");\n+      tooldir_prefix = concat6 (standard_exec_prefix, spec_machine,\n+\t\t\t        dir_separator_str, spec_version, \n+                                dir_separator_str, tooldir_prefix);\n     }\n \n-  add_prefix (&exec_prefix, concat (tooldir_prefix, \"bin\", \"/\"),\n+  add_prefix (&exec_prefixes, \n+              concat3 (tooldir_prefix, \"bin\", dir_separator_str),\n \t      0, 0, NULL_PTR);\n-  add_prefix (&startfile_prefix, concat (tooldir_prefix, \"lib\", \"/\"),\n+  add_prefix (&startfile_prefixes,\n+\t      concat3 (tooldir_prefix, \"lib\", dir_separator_str),\n \t      0, 0, NULL_PTR);\n \n   /* More prefixes are enabled in main, after we read the specs file\n@@ -2837,9 +2912,9 @@ process_command (argc, argv)\n \t\t\t       + strlen (spec_machine) + 3);\n       strcpy (temp, gcc_exec_prefix);\n       strcat (temp, spec_machine);\n-      strcat (temp, \"/\");\n+      strcat (temp, dir_separator_str);\n       strcat (temp, spec_version);\n-      strcat (temp, \"/\");\n+      strcat (temp, dir_separator_str);\n       gcc_exec_prefix = temp;\n     }\n }\n@@ -3051,7 +3126,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t     that we search for startfiles.  */\n \t  case 'D':\n \t    {\n-\t      struct prefix_list *pl = startfile_prefix.plist;\n+\t      struct prefix_list *pl = startfile_prefixes.plist;\n \t      int bufsize = 100;\n \t      char *buffer = (char *) xmalloc (bufsize);\n \t      int idx;\n@@ -3064,7 +3139,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t  /* Relative directories always come from -B,\n \t\t     and it is better not to use them for searching\n \t\t     at run time.  In particular, stage1 loses  */\n-\t\t  if (pl->prefix[0] != '/')\n+\t\t  if (pl->prefix[0] != '/' && pl->prefix[0] != DIR_SEPARATOR)\n \t\t    continue;\n #endif\n \t\t  /* Try subdirectory if there is one.  */\n@@ -3121,7 +3196,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t  buffer = (char *) xrealloc (buffer, bufsize);\n \t\t\t  strcpy (buffer, machine_suffix);\n \t\t\t  idx = strlen (buffer);\n-\t\t\t  if (buffer[idx - 1] == '/')\n+\t\t\t  if (buffer[idx - 1] == '/'\n+\t\t\t      || buffer[idx - 1] == DIR_SEPARATOR)\n \t\t\t    buffer[idx - 1] = 0;\n \t\t\t  do_spec_1 (buffer, 1, NULL_PTR);\n \t\t\t  /* Make this a separate argument.  */\n@@ -3142,7 +3218,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t  buffer = (char *) xrealloc (buffer, bufsize);\n \t\t\t  strcpy (buffer, pl->prefix);\n \t\t\t  idx = strlen (buffer);\n-\t\t\t  if (buffer[idx - 1] == '/')\n+\t\t\t  if (buffer[idx - 1] == '/'\n+\t\t\t      || buffer[idx - 1] == DIR_SEPARATOR)\n \t\t\t    buffer[idx - 1] = 0;\n \t\t\t  do_spec_1 (buffer, 1, NULL_PTR);\n \t\t\t  /* Make this a separate argument.  */\n@@ -3240,7 +3317,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t  case 'I':\n \t    {\n-\t      struct prefix_list *pl = include_prefix.plist;\n+\t      struct prefix_list *pl = include_prefixes.plist;\n \n \t      if (gcc_exec_prefix)\n \t\t{\n@@ -4020,18 +4097,18 @@ find_file (name)\n \n       try = (char *) alloca (strlen (multilib_dir) + strlen (name) + 2);\n       strcpy (try, multilib_dir);\n-      strcat (try, \"/\");\n+      strcat (try, dir_separator_str);\n       strcat (try, name);\n \n-      newname = find_a_file (&startfile_prefix, try, R_OK);\n+      newname = find_a_file (&startfile_prefixes, try, R_OK);\n \n       /* If we don't find it in the multi library dir, then fall\n \t through and look for it in the normal places.  */\n       if (newname != NULL)\n \treturn newname;\n     }\n \n-  newname = find_a_file (&startfile_prefix, name, R_OK);\n+  newname = find_a_file (&startfile_prefixes, name, R_OK);\n   return newname ? newname : name;\n }\n \n@@ -4063,15 +4140,20 @@ is_directory (path1, path2, linker)\n   bcopy (path1, path, len1);\n   bcopy (path2, path + len1, len2);\n   cp = path + len1 + len2;\n-  if (cp[-1] != '/')\n-    *cp++ = '/';\n+  if (cp[-1] != '/' && cp[-1] != DIR_SEPARATOR)\n+    *cp++ = DIR_SEPARATOR;\n   *cp++ = '.';\n   *cp = '\\0';\n \n   /* Exclude directories that the linker is known to search.  */\n   if (linker\n-      && ((cp - path == 6 && strcmp (path, \"/lib/.\") == 0)\n-\t  || (cp - path == 10 && strcmp (path, \"/usr/lib/.\") == 0)))\n+      && ((cp - path == 6\n+\t   && strcmp (path, concat4 (dir_separator_str, \"lib\", \n+                                     dir_separator_str, \".\")) == 0)\n+\t  || (cp - path == 10\n+\t      && strcmp (path, concat6 (dir_separator_str, \"usr\", \n+                                        dir_separator_str, \"lib\", \n+                                        dir_separator_str, \".\")) == 0)))\n     return 0;\n \n   return (stat (path, &st) >= 0 && S_ISDIR (st.st_mode));\n@@ -4105,7 +4187,7 @@ main (argc, argv)\n   char *p;\n \n   p = argv[0] + strlen (argv[0]);\n-  while (p != argv[0] && p[-1] != '/') --p;\n+  while (p != argv[0] && p[-1] != '/' && p[-1] != DIR_SEPARATOR) --p;\n   programname = p;\n \n   if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n@@ -4154,10 +4236,11 @@ main (argc, argv)\n \n   /* Read specs from a file if there is one.  */\n \n-  machine_suffix = concat (spec_machine, \"/\", concat (spec_version, \"/\", \"\"));\n-  just_machine_suffix = concat (spec_machine, \"/\", \"\");\n+  machine_suffix = concat4 (spec_machine, dir_separator_str,\n+                            spec_version, dir_separator_str);\n+  just_machine_suffix = concat (spec_machine, dir_separator_str);\n \n-  specs_file = find_a_file (&startfile_prefix, \"specs\", R_OK);\n+  specs_file = find_a_file (&startfile_prefixes, \"specs\", R_OK);\n   /* Read the specs file unless it is a default one.  */\n   if (specs_file != 0 && strcmp (specs_file, \"specs\"))\n     read_specs (specs_file);\n@@ -4169,46 +4252,45 @@ main (argc, argv)\n   if (!cross_compile)\n     {\n #ifdef MD_EXEC_PREFIX\n-      add_prefix (&exec_prefix, md_exec_prefix, 0, 0, NULL_PTR);\n-      add_prefix (&startfile_prefix, md_exec_prefix, 0, 0, NULL_PTR);\n+      add_prefix (&exec_prefixes, md_exec_prefix, 0, 0, NULL_PTR);\n+      add_prefix (&startfile_prefixes, md_exec_prefix, 0, 0, NULL_PTR);\n #endif\n \n #ifdef MD_STARTFILE_PREFIX\n-      add_prefix (&startfile_prefix, md_startfile_prefix, 0, 0, NULL_PTR);\n+      add_prefix (&startfile_prefixes, md_startfile_prefix, 0, 0, NULL_PTR);\n #endif\n \n #ifdef MD_STARTFILE_PREFIX_1\n-      add_prefix (&startfile_prefix, md_startfile_prefix_1, 0, 0, NULL_PTR);\n+      add_prefix (&startfile_prefixes, md_startfile_prefix_1, 0, 0, NULL_PTR);\n #endif\n \n       /* If standard_startfile_prefix is relative, base it on\n \t standard_exec_prefix.  This lets us move the installed tree\n \t as a unit.  If GCC_EXEC_PREFIX is defined, base\n \t standard_startfile_prefix on that as well.  */\n-      if (*standard_startfile_prefix == '/')\n-\tadd_prefix (&startfile_prefix, standard_startfile_prefix, 0, 0,\n+      if (*standard_startfile_prefix == '/'\n+\t  || *standard_startfile_prefix == DIR_SEPARATOR)\n+\tadd_prefix (&startfile_prefixes, standard_startfile_prefix, 0, 0,\n \t\t    NULL_PTR);\n       else\n \t{\n \t  if (gcc_exec_prefix)\n-\t    add_prefix (&startfile_prefix,\n-\t\t\tconcat (gcc_exec_prefix,\n-\t\t\t\tstandard_startfile_prefix,\n-\t\t\t\t\"\"),\n+\t    add_prefix (&startfile_prefixes,\n+\t\t\tconcat (gcc_exec_prefix, standard_startfile_prefix),\n \t\t\t0, 0, NULL_PTR);\n-\t  add_prefix (&startfile_prefix,\n-\t\t      concat (standard_exec_prefix,\n-\t\t\t      machine_suffix,\n-\t\t\t      standard_startfile_prefix),\n+\t  add_prefix (&startfile_prefixes,\n+\t\t      concat3 (standard_exec_prefix,\n+\t\t\t       machine_suffix,\n+\t\t\t       standard_startfile_prefix),\n \t\t      0, 0, NULL_PTR);\n \t}\t\t       \n \n-      add_prefix (&startfile_prefix, standard_startfile_prefix_1, 0, 0,\n+      add_prefix (&startfile_prefixes, standard_startfile_prefix_1, 0, 0,\n \t\t  NULL_PTR);\n-      add_prefix (&startfile_prefix, standard_startfile_prefix_2, 0, 0,\n+      add_prefix (&startfile_prefixes, standard_startfile_prefix_2, 0, 0,\n \t\t  NULL_PTR);\n #if 0 /* Can cause surprises, and one can use -B./ instead.  */\n-      add_prefix (&startfile_prefix, \"./\", 0, 1, NULL_PTR);\n+      add_prefix (&startfile_prefixes, \"./\", 0, 1, NULL_PTR);\n #endif\n     }\n \n@@ -4237,7 +4319,7 @@ main (argc, argv)\n \n   if (print_prog_name)\n     {\n-      char *newname = find_a_file (&exec_prefix, print_prog_name, X_OK);\n+      char *newname = find_a_file (&exec_prefixes, print_prog_name, X_OK);\n       printf (\"%s\\n\", (newname ? newname : print_prog_name));\n       exit (0);\n     }\n@@ -4307,7 +4389,7 @@ main (argc, argv)\n \n \t  input_basename = input_filename;\n \t  for (p = input_filename; *p; p++)\n-\t    if (*p == '/')\n+\t    if (*p == '/' || *p == DIR_SEPARATOR)\n \t      input_basename = p + 1;\n \n \t  /* Find a suffix starting with the last period,\n@@ -4372,8 +4454,8 @@ main (argc, argv)\n \n       /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables\n \t for collect.  */\n-      putenv_from_prefixes (&exec_prefix, \"COMPILER_PATH=\");\n-      putenv_from_prefixes (&startfile_prefix, \"LIBRARY_PATH=\");\n+      putenv_from_prefixes (&exec_prefixes, \"COMPILER_PATH=\");\n+      putenv_from_prefixes (&startfile_prefixes, \"LIBRARY_PATH=\");\n \n       /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n \t the compiler.  */\n@@ -4408,8 +4490,8 @@ main (argc, argv)\n     }\n \n   /* Warn if a -B option was specified but the prefix was never used.  */\n-  unused_prefix_warnings (&exec_prefix);\n-  unused_prefix_warnings (&startfile_prefix);\n+  unused_prefix_warnings (&exec_prefixes);\n+  unused_prefix_warnings (&startfile_prefixes);\n \n   /* If options said don't run linker,\n      complain about input files to be given to the linker.  */\n@@ -4466,8 +4548,16 @@ lookup_compiler (name, length, language)\n \t  ||\n \t  (strlen (cp->suffix) < length\n \t   /* See if the suffix matches the end of NAME.  */\n+#ifdef OS2\n+\t   && (!strcmp (cp->suffix,\n+\t\t\tname + length - strlen (cp->suffix))\n+\t    || !strpbrk (cp->suffix, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n+\t     && !strcasecmp (cp->suffix,\n+\t\t\t  name + length - strlen (cp->suffix)))))\n+#else\n \t   && !strcmp (cp->suffix,\n \t\t       name + length - strlen (cp->suffix))))\n+#endif\n \t{\n \t  if (cp->spec[0][0] == '@')\n \t    {\n@@ -4512,23 +4602,44 @@ xrealloc (ptr, size)\n   return value;\n }\n \n-/* Return a newly-allocated string whose contents concatenate those of s1, s2, s3.  */\n+/* Return a newly-allocated string whose contents concatenate those of s1, s2 */\n \n static char *\n-concat (s1, s2, s3)\n-     char *s1, *s2, *s3;\n+concat (s1, s2)\n+     char *s1, *s2;\n {\n-  int len1 = strlen (s1), len2 = strlen (s2), len3 = strlen (s3);\n-  char *result = xmalloc (len1 + len2 + len3 + 1);\n+  int len1 = strlen (s1);\n+  int len2 = strlen (s2);\n+  char *result = xmalloc (len1 + len2 + 1);\n \n   strcpy (result, s1);\n   strcpy (result + len1, s2);\n-  strcpy (result + len1 + len2, s3);\n-  *(result + len1 + len2 + len3) = 0;\n+  *(result + len1 + len2) = 0;\n \n   return result;\n }\n \n+static char *\n+concat3 (s1, s2, s3)\n+     char *s1, *s2, *s3;\n+{\n+  return concat (concat (s1, s2), s3);\n+}\n+\n+static char *\n+concat4 (s1, s2, s3, s4)\n+     char *s1, *s2, *s3, *s4;\n+{\n+  return concat (concat (s1, s2), concat (s3, s4));\n+}\n+\n+static char *\n+concat6 (s1, s2, s3, s4, s5, s6)\n+     char *s1, *s2, *s3, *s4, *s5, *s6;\n+{\n+  return concat3 (concat (s1, s2), concat (s3, s4), concat (s5, s6));\n+}\n+\n static char *\n save_string (s, len)\n      char *s;\n@@ -4548,7 +4659,7 @@ pfatal_with_name (name)\n   char *s;\n \n   if (errno < sys_nerr)\n-    s = concat (\"%s: \", sys_errlist[errno], \"\");\n+    s = concat (\"%s: \", sys_errlist[errno]);\n   else\n     s = \"cannot open %s\";\n   fatal (s, name);\n@@ -4561,7 +4672,7 @@ perror_with_name (name)\n   char *s;\n \n   if (errno < sys_nerr)\n-    s = concat (\"%s: \", sys_errlist[errno], \"\");\n+    s = concat (\"%s: \", sys_errlist[errno]);\n   else\n     s = \"cannot open %s\";\n   error (s, name);\n@@ -4574,8 +4685,7 @@ perror_exec (name)\n   char *s;\n \n   if (errno < sys_nerr)\n-    s = concat (\"installation problem, cannot exec %s: \",\n-\t\tsys_errlist[errno], \"\");\n+    s = concat (\"installation problem, cannot exec %s: \", sys_errlist[errno]);\n   else\n     s = \"installation problem, cannot exec %s\";\n   error (s, name);"}]}