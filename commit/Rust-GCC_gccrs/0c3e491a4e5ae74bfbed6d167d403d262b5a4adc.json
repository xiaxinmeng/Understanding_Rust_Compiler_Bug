{"sha": "0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "node_id": "C_kwDOANBUbNoAKDBjM2U0OTFhNGU1YWU3NGJmYmVkNmQxNjdkNDAzZDI2MmI1YTRhZGM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-08T19:14:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-08T19:14:30Z"}, "message": "rs6000: Fix up vspltis_shifted [PR102140]\n\nThe following testcase ICEs, because\n(const_vector:V4SI [\n                (const_int 0 [0]) repeated x3\n                (const_int -2147483648 [0xffffffff80000000])\n            ])\nis recognized as valid easy_vector_constant in between split1 pass and\nend of RA.\nThe problem is that such constants need to be split, and the only\nsplitter for that is:\n(define_split\n  [(set (match_operand:VM 0 \"altivec_register_operand\")\n        (match_operand:VM 1 \"easy_vector_constant_vsldoi\"))]\n  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode) && can_create_pseudo_p ()\"\nThere is only a single splitting pass before RA, so after that finishes,\nif something gets matched in between that and end of RA (after that\ncan_create_pseudo_p () would be no longer true), it will never be\nsuccessfully split and we ICE at final.cc time or earlier.\n\nThe i386 backend (and a few others) already use\n(cfun->curr_properties & PROP_rtl_split_insns)\nas a test for split1 pass finished, so that some insns that should be split\nduring split1 and shouldn't be matched afterwards are properly guarded.\n\nSo, the following patch does that for vspltis_shifted too.\n\n2022-02-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/102140\n\t* config/rs6000/rs6000.cc (vspltis_shifted): Return false also if\n\tsplit1 pass has finished already.\n\n\t* gcc.dg/pr102140.c: New test.", "tree": {"sha": "3095e70e9c5d324fe822b13d8d67ecb737ca09af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3095e70e9c5d324fe822b13d8d67ecb737ca09af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "943d631abdd7be623cbf2b870d3d0cfef89f5f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943d631abdd7be623cbf2b870d3d0cfef89f5f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943d631abdd7be623cbf2b870d3d0cfef89f5f26"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "eaba9a2d6980c43d9f2b1aec8c1f558c9921c118", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "patch": "@@ -6257,8 +6257,11 @@ vspltis_shifted (rtx op)\n     return false;\n \n   /* We need to create pseudo registers to do the shift, so don't recognize\n-     shift vector constants after reload.  */\n-  if (!can_create_pseudo_p ())\n+     shift vector constants after reload.  Don't match it even before RA\n+     after split1 is done, because there won't be further splitting pass\n+     before RA to do the splitting.  */\n+  if (!can_create_pseudo_p ()\n+      || (cfun->curr_properties & PROP_rtl_split_insns))\n     return false;\n \n   nunits = GET_MODE_NUNITS (mode);"}, {"sha": "813ba8766aaeb6645837d545fd0c1a0c92bbb447", "filename": "gcc/testsuite/gcc.dg/pr102140.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3e491a4e5ae74bfbed6d167d403d262b5a4adc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102140.c?ref=0c3e491a4e5ae74bfbed6d167d403d262b5a4adc", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/102140 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og -fipa-cp -fno-tree-ccp -fno-tree-ter -Wno-psabi\" } */\n+\n+typedef int __attribute__((__vector_size__ (64))) U;\n+typedef __int128 __attribute__((__vector_size__ (64))) V;\n+\n+int a, b;\n+\n+static void\n+bar (char c, V v)\n+{\n+  v *= c;\n+  U u = a + (U) v;\n+  (union { U b; }) { u };\n+  b = 0;\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (1, (V){((__int128) 9223372036854775808ULL) << 64});\n+}"}]}