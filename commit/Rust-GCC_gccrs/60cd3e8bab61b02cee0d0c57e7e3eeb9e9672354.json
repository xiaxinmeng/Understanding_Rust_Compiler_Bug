{"sha": "60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjZDNlOGJhYjYxYjAyY2VlMGQwYzU3ZTdlM2VlYjllOTY3MjM1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-12-19T20:25:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-19T20:25:22Z"}, "message": "re PR c++/13371 (infinite loop with packed struct and inlining)\n\n        PR c++/13371\n        * typeck.c (build_modify_expr): Stabilize lhs if we're narrowing.\n\nFrom-SVN: r74846", "tree": {"sha": "13d28b960bbcfb9a2e460e83d58447d5ea93134b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13d28b960bbcfb9a2e460e83d58447d5ea93134b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0687c1fbcf51f8aec14b4bcbbf4cdd7c111be2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0687c1fbcf51f8aec14b4bcbbf4cdd7c111be2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0687c1fbcf51f8aec14b4bcbbf4cdd7c111be2c"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "68881403976b8d7db9d892c0a5132cb7ae9d6b39", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "patch": "@@ -1,3 +1,8 @@\n+2003-12-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/13371\n+\t* typeck.c (build_modify_expr): Stabilize lhs if we're narrowing.\n+\n 2003-12-18  Richard Henderson  <rth@redhat.com>\n \n \t* cp-tree.h (struct lang_type_header): Remove __extension__."}, {"sha": "56810e5c0b3d5edbbee1506ec0d30e7839a63eab", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "patch": "@@ -4919,7 +4919,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n   tree newrhs = rhs;\n   tree lhstype = TREE_TYPE (lhs);\n   tree olhstype = lhstype;\n-  tree olhs = lhs;\n+  tree olhs = NULL_TREE;\n \n   /* Avoid duplicate error messages from operands that had errors.  */\n   if (lhs == error_mark_node || rhs == error_mark_node)\n@@ -5149,6 +5149,15 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \n       if (lhstype != TREE_TYPE (lhs))\n \t{\n+\t  /* Avoid warnings converting integral types back into enums for\n+\t     enum bit fields.  */\n+\t  if (TREE_CODE (lhstype) == INTEGER_TYPE\n+\t      && TREE_CODE (olhstype) == ENUMERAL_TYPE)\n+\t    {\n+\t      if (TREE_SIDE_EFFECTS (lhs))\n+\t\tlhs = stabilize_reference (lhs);\n+\t      olhs = lhs;\n+\t    }\n \t  lhs = copy_node (lhs);\n \t  TREE_TYPE (lhs) = lhstype;\n \t}\n@@ -5221,10 +5230,7 @@ build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs)\n \n   if (olhstype == TREE_TYPE (result))\n     return result;\n-  /* Avoid warnings converting integral types back into enums\n-     for enum bit fields.  */\n-  if (TREE_CODE (TREE_TYPE (result)) == INTEGER_TYPE\n-      && TREE_CODE (olhstype) == ENUMERAL_TYPE)\n+  if (olhs)\n     {\n       result = build (COMPOUND_EXPR, olhstype, result, olhs);\n       TREE_NO_UNUSED_WARNING (result) = 1;"}, {"sha": "e54b2e423fb6c322756ef533c7a75fa82a946aac", "filename": "gcc/testsuite/g++.dg/init/bitfield2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbitfield2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbitfield2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fbitfield2.C?ref=60cd3e8bab61b02cee0d0c57e7e3eeb9e9672354", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/13371\n+// Bug: We were failing to properly protect the lhs on the line marked\n+// \"here\" from multiple evaluation.\n+\n+// { dg-do run }\n+\n+extern \"C\" int printf (const char *, ...);\n+\n+enum E { E1, E2 };\n+\n+struct A\n+{\n+  E e : 8;\n+  unsigned char c;\n+};\n+\n+A ar[2];\n+\n+int c;\n+\n+int f()\n+{\n+  ++c;\n+  printf (\"f()\\n\");\n+  return 0;\n+}\n+\n+int main()\n+{\n+  ar[0].c = 0xff;\n+  ar[f()].e = E1;\t\t// here\n+  return (c != 1 || ar[0].c != 0xff);\n+}  "}]}