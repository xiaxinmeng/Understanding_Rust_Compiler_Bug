{"sha": "8155316c6fc23045e8e056e91449a6e9863c357f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE1NTMxNmM2ZmMyMzA0NWU4ZTA1NmU5MTQ0OWE2ZTk4NjNjMzU3Zg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-16T18:04:19Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-16T19:16:11Z"}, "message": "c++: local-scope OMP UDR reductions have no template head\n\nThis corrects the earlier problems with removing the template header\nfrom local omp reductions.  And it uncovered a latent bug.  When we\ntsubst such a decl, we immediately tsubst its body.\ncp_check_omp_declare_reduction gets a success return value to gate\nthat instantiation.\n\nudr-2.C got a further error, as the omp checking machinery doesn't\nappear to turn the reduction into an error mark when failing.  I\ndidn't dig into that further.  udr-3.C appears to have been invalid\nand accidentally worked.\n\n\tgcc/cp/\n\t* cp-tree.h (cp_check_omp_declare_reduction): Return bool.\n\t* semantics.c (cp_check_omp_declare_reduction): Return true on for\n\tsuccess.\n\t* pt.c (push_template_decl_real): OMP reductions do not get a\n\ttemplate header.\n\t(tsubst_function_decl): Remove special casing for local decl omp\n\treductions.\n\t(tsubst_expr): Call instantiate_body for a local omp reduction.\n\t(instantiate_body): Add nested_p parm, and deal with such\n\tinstantiations.\n\t(instantiate_decl): Reject FUNCTION_SCOPE entities, adjust\n\tinstantiate_body call.\n\tgcc/testsuite/\n\t* g++.dg/gomp/udr-2.C: Add additional expected error.\n\tlibgomp/\n\t* testsuite/libgomp.c++/udr-3.C: Add missing ctor.", "tree": {"sha": "eb49f081f6ba90d0eda09fd14b4861a1af0ac019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb49f081f6ba90d0eda09fd14b4861a1af0ac019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8155316c6fc23045e8e056e91449a6e9863c357f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8155316c6fc23045e8e056e91449a6e9863c357f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8155316c6fc23045e8e056e91449a6e9863c357f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8155316c6fc23045e8e056e91449a6e9863c357f/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1339b519ae8cc4ae550baa127a21d8350462837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1339b519ae8cc4ae550baa127a21d8350462837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1339b519ae8cc4ae550baa127a21d8350462837"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "5b727348e51b5e8a6fc0ed8c35554058a87a0f0c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8155316c6fc23045e8e056e91449a6e9863c357f", "patch": "@@ -7228,7 +7228,7 @@ extern void simplify_aggr_init_expr\t\t(tree *);\n extern void finalize_nrv\t\t\t(tree *, tree, tree);\n extern tree omp_reduction_id\t\t\t(enum tree_code, tree, tree);\n extern tree cp_remove_omp_priv_cleanup_stmt\t(tree *, int *, void *);\n-extern void cp_check_omp_declare_reduction\t(tree);\n+extern bool cp_check_omp_declare_reduction\t(tree);\n extern void finish_omp_declare_simd_methods\t(tree);\n extern tree finish_omp_clauses\t\t\t(tree, enum c_omp_region_type);\n extern tree push_omp_privatization_clauses\t(bool);"}, {"sha": "cfe5ff4a94f471ecdb134a0f46442c23e9f4d10b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8155316c6fc23045e8e056e91449a6e9863c357f", "patch": "@@ -227,6 +227,7 @@ static tree canonicalize_expr_argument (tree, tsubst_flags_t);\n static tree make_argument_pack (tree);\n static void register_parameter_specializations (tree, tree);\n static tree enclosing_instantiation_of (tree tctx);\n+static void instantiate_body (tree pattern, tree args, tree d, bool nested);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -6073,10 +6074,7 @@ push_template_decl_real (tree decl, bool is_friend)\n \tretrofit_lang_decl (decl);\n       if (DECL_LANG_SPECIFIC (decl)\n \t  && !(VAR_OR_FUNCTION_DECL_P (decl)\n-\t       && DECL_LOCAL_DECL_P (decl)\n-\t       /* OMP reductions still need a template header.  */\n-\t       && !(TREE_CODE (decl) == FUNCTION_DECL\n-\t\t    && DECL_OMP_DECLARE_REDUCTION_P (decl))))\n+\t       && DECL_LOCAL_DECL_P (decl)))\n \tDECL_TEMPLATE_INFO (decl) = info;\n     }\n \n@@ -13714,8 +13712,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n   gcc_assert (DECL_TEMPLATE_INFO (t) != NULL_TREE\n \t      || DECL_LOCAL_DECL_P (t));\n \n-  if (DECL_LOCAL_DECL_P (t)\n-      && !DECL_OMP_DECLARE_REDUCTION_P (t))\n+  if (DECL_LOCAL_DECL_P (t))\n     {\n       if (tree spec = retrieve_local_specialization (t))\n \treturn spec;\n@@ -13970,8 +13967,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t  && !uses_template_parms (argvec))\n \ttsubst_default_arguments (r, complain);\n     }\n-  else if (DECL_LOCAL_DECL_P (r)\n-\t   && !DECL_OMP_DECLARE_REDUCTION_P (r))\n+  else if (DECL_LOCAL_DECL_P (r))\n     {\n       if (!cp_unevaluated_operand)\n \tregister_local_specialization (r, t);\n@@ -18083,7 +18079,8 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t\t    DECL_CONTEXT (decl) = global_namespace;\n \t\t    pushdecl (decl);\n \t\t    DECL_CONTEXT (decl) = current_function_decl;\n-\t\t    cp_check_omp_declare_reduction (decl);\n+\t\t    if (cp_check_omp_declare_reduction (decl))\n+\t\t      instantiate_body (pattern_decl, args, decl, true);\n \t\t  }\n \t\telse\n \t\t  {\n@@ -25448,15 +25445,24 @@ register_parameter_specializations (tree pattern, tree inst)\n }\n \n /* Instantiate the body of D using PATTERN with ARGS.  We have\n-   already determined PATTERN is the correct template to use.  */\n+   already determined PATTERN is the correct template to use.\n+   NESTED_P is true if this is a nested function, in which case\n+   PATTERN will be a FUNCTION_DECL not a TEMPLATE_DECL.  */\n \n static void\n-instantiate_body (tree pattern, tree args, tree d)\n+instantiate_body (tree pattern, tree args, tree d, bool nested_p)\n {\n-  gcc_checking_assert (TREE_CODE (pattern) == TEMPLATE_DECL);\n-  \n-  tree td = pattern;\n-  tree code_pattern = DECL_TEMPLATE_RESULT (td);\n+  tree td = NULL_TREE;\n+  tree code_pattern = pattern;\n+\n+  if (!nested_p)\n+    {\n+      td = pattern;\n+      code_pattern = DECL_TEMPLATE_RESULT (td);\n+    }\n+  else\n+    /* Only OMP reductions are nested.  */\n+    gcc_checking_assert (DECL_OMP_DECLARE_REDUCTION_P (code_pattern));\n \n   vec<tree> omp_privatization_save;\n   if (current_function_decl)\n@@ -25489,9 +25495,10 @@ instantiate_body (tree pattern, tree args, tree d)\n      instantiate_decl do not try to instantiate it again.  */\n   DECL_TEMPLATE_INSTANTIATED (d) = 1;\n \n-  /* Regenerate the declaration in case the template has been modified\n-     by a subsequent redeclaration.  */\n-  regenerate_decl_from_template (d, td, args);\n+  if (td)\n+    /* Regenerate the declaration in case the template has been modified\n+       by a subsequent redeclaration.  */\n+    regenerate_decl_from_template (d, td, args);\n \n   /* We already set the file and line above.  Reset them now in case\n      they changed as a result of calling regenerate_decl_from_template.  */\n@@ -25540,8 +25547,7 @@ instantiate_body (tree pattern, tree args, tree d)\n       tree block = NULL_TREE;\n \n       /* Set up context.  */\n-      if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern)\n-\t  && TREE_CODE (DECL_CONTEXT (code_pattern)) == FUNCTION_DECL)\n+      if (nested_p)\n \tblock = push_stmt_list ();\n       else\n \tstart_preparsed_function (d, NULL_TREE, SF_PRE_PARSED);\n@@ -25554,7 +25560,7 @@ instantiate_body (tree pattern, tree args, tree d)\n       /* Substitute into the body of the function.  */\n       if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern))\n \ttsubst_omp_udr (DECL_SAVED_TREE (code_pattern), args,\n-\t\t\ttf_warning_or_error, DECL_TI_TEMPLATE (d));\n+\t\t\ttf_warning_or_error, d);\n       else\n \t{\n \t  tsubst_expr (DECL_SAVED_TREE (code_pattern), args,\n@@ -25572,8 +25578,7 @@ instantiate_body (tree pattern, tree args, tree d)\n \t}\n \n       /* Finish the function.  */\n-      if (DECL_OMP_DECLARE_REDUCTION_P (code_pattern)\n-\t  && TREE_CODE (DECL_CONTEXT (code_pattern)) == FUNCTION_DECL)\n+      if (nested_p)\n \tDECL_SAVED_TREE (d) = pop_stmt_list (block);\n       else\n \t{\n@@ -25628,6 +25633,8 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n   /* A concept is never instantiated. */\n   gcc_assert (!DECL_DECLARED_CONCEPT_P (d));\n \n+  gcc_checking_assert (!DECL_FUNCTION_SCOPE_P (d));\n+\n   /* Variables are never deferred; if instantiation is required, they\n      are instantiated right away.  That allows for better code in the\n      case that an expression refers to the value of the variable --\n@@ -25844,7 +25851,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n     {\n       if (variable_template_p (gen_tmpl))\n \tnote_variable_template_instantiation (d);\n-      instantiate_body (td, args, d);\n+      instantiate_body (td, args, d, false);\n     }\n \n   pop_deferring_access_checks ();"}, {"sha": "11996c99ac798e4db89ab1f40cc2a9e9537416d7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8155316c6fc23045e8e056e91449a6e9863c357f", "patch": "@@ -5679,7 +5679,7 @@ cp_check_omp_declare_reduction_r (tree *tp, int *, void *data)\n \n /* Diagnose violation of OpenMP #pragma omp declare reduction restrictions.  */\n \n-void\n+bool\n cp_check_omp_declare_reduction (tree udr)\n {\n   tree type = TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (udr)));\n@@ -5689,7 +5689,7 @@ cp_check_omp_declare_reduction (tree udr)\n   location_t loc = DECL_SOURCE_LOCATION (udr);\n \n   if (type == error_mark_node)\n-    return;\n+    return false;\n   if (ARITHMETIC_TYPE_P (type))\n     {\n       static enum tree_code predef_codes[]\n@@ -5723,32 +5723,32 @@ cp_check_omp_declare_reduction (tree udr)\n \t{\n \t  error_at (loc, \"predeclared arithmetic type %qT in \"\n \t\t\t \"%<#pragma omp declare reduction%>\", type);\n-\t  return;\n+\t  return false;\n \t}\n     }\n   else if (FUNC_OR_METHOD_TYPE_P (type)\n \t   || TREE_CODE (type) == ARRAY_TYPE)\n     {\n       error_at (loc, \"function or array type %qT in \"\n \t\t     \"%<#pragma omp declare reduction%>\", type);\n-      return;\n+      return false;\n     }\n   else if (TYPE_REF_P (type))\n     {\n       error_at (loc, \"reference type %qT in %<#pragma omp declare reduction%>\",\n \t\ttype);\n-      return;\n+      return false;\n     }\n   else if (TYPE_QUALS_NO_ADDR_SPACE (type))\n     {\n       error_at (loc, \"%<const%>, %<volatile%> or %<__restrict%>-qualified \"\n \t\t\"type %qT in %<#pragma omp declare reduction%>\", type);\n-      return;\n+      return false;\n     }\n \n   tree body = DECL_SAVED_TREE (udr);\n   if (body == NULL_TREE || TREE_CODE (body) != STATEMENT_LIST)\n-    return;\n+    return true;\n \n   tree_stmt_iterator tsi;\n   struct cp_check_omp_declare_reduction_data data;\n@@ -5764,7 +5764,7 @@ cp_check_omp_declare_reduction (tree udr)\n       gcc_assert (TREE_CODE (data.stmts[0]) == DECL_EXPR\n \t\t  && TREE_CODE (data.stmts[1]) == DECL_EXPR);\n       if (TREE_NO_WARNING (DECL_EXPR_DECL (data.stmts[0])))\n-\treturn;\n+\treturn true;\n       data.combiner_p = true;\n       if (cp_walk_tree (&data.stmts[2], cp_check_omp_declare_reduction_r,\n \t\t\t&data, NULL))\n@@ -5783,6 +5783,7 @@ cp_check_omp_declare_reduction (tree udr)\n       if (i == 7)\n \tgcc_assert (TREE_CODE (data.stmts[6]) == DECL_EXPR);\n     }\n+  return true;\n }\n \n /* Helper function of finish_omp_clauses.  Clone STMT as if we were making"}, {"sha": "6ccf95f822d503fc96c6cd28e0a276383cc8b8ea", "filename": "gcc/testsuite/g++.dg/gomp/udr-2.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155316c6fc23045e8e056e91449a6e9863c357f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fudr-2.C?ref=8155316c6fc23045e8e056e91449a6e9863c357f", "patch": "@@ -34,6 +34,7 @@ namespace N2\n     typedef T3 T;\n     #pragma omp declare reduction (foo : T : omp_out += N1::v)\t// { dg-error \"combiner refers to variable\" }\n     #pragma omp declare reduction (foo : T4 : v *= omp_in)\t// { dg-error \"combiner refers to variable\" }\n+    // { dg-error \"in assignment\" \"\" { target *-*-* } .-1 }\n     #pragma omp declare reduction (foo : T5 : omp_out.w *= omp_in.w + v) // { dg-error \"combiner refers to variable\" }\n     return 0;\n   }"}, {"sha": "0c45cb8f808136df0bc0663bedd55a2eb498c919", "filename": "libgomp/testsuite/libgomp.c++/udr-3.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8155316c6fc23045e8e056e91449a6e9863c357f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8155316c6fc23045e8e056e91449a6e9863c357f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fudr-3.C?ref=8155316c6fc23045e8e056e91449a6e9863c357f", "patch": "@@ -86,6 +86,7 @@ struct W\n {\n   int v;\n   W () : v (6) {}\n+  W (int i) : v (i) {}\n   ~W () {}\n };\n "}]}