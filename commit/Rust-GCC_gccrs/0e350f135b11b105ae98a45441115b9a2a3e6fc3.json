{"sha": "0e350f135b11b105ae98a45441115b9a2a3e6fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzNTBmMTM1YjExYjEwNWFlOThhNDU0NDExMTViOWEyYTNlNmZjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-13T17:01:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-13T17:01:50Z"}, "message": "re PR tree-optimization/88464 (AVX-512 vectorization of masked scatter failing with \"not suitable for scatter store\")\n\n\tPR tree-optimization/88464\n\t* tree-vect-stmts.c (vect_build_gather_load_calls): Handle INTEGER_TYPE\n\tmasktype if mask is non-NULL.\n\t(vectorizable_load): Don't reject masked gather loads if masktype\n\tin the decl is INTEGER_TYPE.\n\n\t* gcc.target/i386/avx512f-pr88462-1.c: New test.\n\t* gcc.target/i386/avx512f-pr88462-2.c: New test.\n\nFrom-SVN: r267097", "tree": {"sha": "4a0229d83fc2631a02fda0bef8bc1a70a556c19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a0229d83fc2631a02fda0bef8bc1a70a556c19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e350f135b11b105ae98a45441115b9a2a3e6fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e350f135b11b105ae98a45441115b9a2a3e6fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e350f135b11b105ae98a45441115b9a2a3e6fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e350f135b11b105ae98a45441115b9a2a3e6fc3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2139fd74f31449c01f347bd1005cfab52cde7969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2139fd74f31449c01f347bd1005cfab52cde7969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2139fd74f31449c01f347bd1005cfab52cde7969"}], "stats": {"total": 154, "additions": 135, "deletions": 19}, "files": [{"sha": "760672f2fde9964b65ac357274d087e98560e97b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e350f135b11b105ae98a45441115b9a2a3e6fc3", "patch": "@@ -1,3 +1,11 @@\n+2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/88464\n+\t* tree-vect-stmts.c (vect_build_gather_load_calls): Handle INTEGER_TYPE\n+\tmasktype if mask is non-NULL.\n+\t(vectorizable_load): Don't reject masked gather loads if masktype\n+\tin the decl is INTEGER_TYPE.\n+\n 2018-12-13  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/s390-builtins.def (s390_vec_double_s64): Map to"}, {"sha": "5146c95d8c9c4ca1d2341ebda3946faca01f15f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e350f135b11b105ae98a45441115b9a2a3e6fc3", "patch": "@@ -1,3 +1,9 @@\n+2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/88464\n+\t* gcc.target/i386/avx512f-pr88462-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr88462-2.c: New test.\n+\n 2018-12-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/87531"}, {"sha": "00992276afa98ffce52686751154ab9dd102f9af", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr88462-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88462-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88462-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88462-1.c?ref=0e350f135b11b105ae98a45441115b9a2a3e6fc3", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/88462 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -mtune=skylake-avx512 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"loop vectorized using 64 byte vectors\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 3 \"vect\" } } */\n+\n+__attribute__((noipa)) void\n+f1 (double * __restrict__ a, const double * __restrict__ b, const int * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (a[i] > 10.0)\n+      a[i] = b[c[i]];\n+}\n+\n+__attribute__((noipa)) void\n+f2 (double * __restrict__ a, const double * __restrict__ b, const long * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (a[i] > 10.0)\n+      a[i] = b[c[i]];\n+}\n+\n+__attribute__((noipa)) void\n+f3 (float * __restrict__ a, const float * __restrict__ b, const int * __restrict__ c, int n)\n+{\n+  int i;\n+#pragma GCC ivdep\n+  for (i = 0; i < n; ++i)\n+    if (a[i] > 10.0f)\n+      a[i] = b[c[i]];\n+}"}, {"sha": "3b437c5849cfd143601bfa0f0cf32ae70d15726c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr88462-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88462-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88462-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr88462-2.c?ref=0e350f135b11b105ae98a45441115b9a2a3e6fc3", "patch": "@@ -0,0 +1,51 @@\n+/* PR tree-optimization/88462 */\n+/* { dg-do run { target { avx512f } } } */\n+/* { dg-options \"-O3 -mavx512f -mprefer-vector-width=512 -mtune=skylake-avx512\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+#include \"avx512f-pr88462-1.c\"\n+\n+static void\n+avx512f_test (void)\n+{\n+  double a[1024], b[1024];\n+  float c[1024], f[1024];\n+  int d[1024];\n+  long e[1024];\n+  int i;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      a[i] = (i % 3) != 0 ? 15.0 : -5.0;\n+      b[i] = 2 * i;\n+      d[i] = (i % 3) ? 1023 - i : __INT_MAX__;\n+    }\n+  f1 (a, b, d, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (a[i] != ((i % 3) != 0 ? (1023 - i) * 2.0 : -5.0))\n+\tabort ();\n+      a[i] = (i % 3) != 1 ? 15.0 : -5.0;\n+      b[i] = 3 * i;\n+      e[i] = (i % 3) != 1 ? 1023 - i : __LONG_MAX__;\n+    }\n+  f2 (a, b, e, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (a[i] != ((i % 3) != 1 ? (1023 - i) * 3.0 : -5.0))\n+\tabort ();\n+      c[i] = (i % 3) != 2 ? 15.0f : -5.0f;\n+      d[i] = (i % 3) != 2 ? 1023 - i : __INT_MAX__;\n+      f[i] = 4 * i;\n+    }\n+  f3 (c, f, d, 1024);\n+  for (i = 0; i < 1024; i++)\n+    {\n+      asm volatile (\"\" : \"+g\" (i));\n+      if (c[i] != ((i % 3) != 2 ? (1023 - i) * 4.0f : -5.0f))\n+\tabort ();\n+    }\n+}"}, {"sha": "3188bb8c35179ea09fac4f6154533eba58aeb84a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e350f135b11b105ae98a45441115b9a2a3e6fc3/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=0e350f135b11b105ae98a45441115b9a2a3e6fc3", "patch": "@@ -2647,8 +2647,13 @@ vect_build_gather_load_calls (stmt_vec_info stmt_info,\n   tree idxtype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n   tree masktype = TREE_VALUE (arglist); arglist = TREE_CHAIN (arglist);\n   tree scaletype = TREE_VALUE (arglist);\n+  tree real_masktype = masktype;\n   gcc_checking_assert (types_compatible_p (srctype, rettype)\n-\t\t       && (!mask || types_compatible_p (srctype, masktype)));\n+\t\t       && (!mask\n+\t\t\t   || TREE_CODE (masktype) == INTEGER_TYPE\n+\t\t\t   || types_compatible_p (srctype, masktype)));\n+  if (mask && TREE_CODE (masktype) == INTEGER_TYPE)\n+    masktype = build_same_sized_truth_vector_type (srctype);\n \n   tree perm_mask = NULL_TREE;\n   tree mask_perm_mask = NULL_TREE;\n@@ -2763,9 +2768,9 @@ vect_build_gather_load_calls (stmt_vec_info stmt_info,\n \t      mask_op = vec_mask;\n \t      if (!useless_type_conversion_p (masktype, TREE_TYPE (vec_mask)))\n \t\t{\n-\t\t  gcc_assert\n-\t\t    (known_eq (TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op)),\n-\t\t\t       TYPE_VECTOR_SUBPARTS (masktype)));\n+\t\t  poly_uint64 sub1 = TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask_op));\n+\t\t  poly_uint64 sub2 = TYPE_VECTOR_SUBPARTS (masktype);\n+\t\t  gcc_assert (known_eq (sub1, sub2));\n \t\t  var = vect_get_new_ssa_name (masktype, vect_simple_var);\n \t\t  mask_op = build1 (VIEW_CONVERT_EXPR, masktype, mask_op);\n \t\t  gassign *new_stmt\n@@ -2777,8 +2782,33 @@ vect_build_gather_load_calls (stmt_vec_info stmt_info,\n \t  src_op = mask_op;\n \t}\n \n+      tree mask_arg = mask_op;\n+      if (masktype != real_masktype)\n+\t{\n+\t  tree utype;\n+\t  if (TYPE_MODE (real_masktype) == TYPE_MODE (masktype))\n+\t    utype = real_masktype;\n+\t  else\n+\t    utype = lang_hooks.types.type_for_mode (TYPE_MODE (masktype), 1);\n+\t  var = vect_get_new_ssa_name (utype, vect_scalar_var);\n+\t  mask_arg = build1 (VIEW_CONVERT_EXPR, utype, mask_op);\n+\t  gassign *new_stmt\n+\t    = gimple_build_assign (var, VIEW_CONVERT_EXPR, mask_arg);\n+\t  vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n+\t  mask_arg = var;\n+\t  if (!useless_type_conversion_p (real_masktype, utype))\n+\t    {\n+\t      gcc_assert (TYPE_PRECISION (utype)\n+\t\t\t  <= TYPE_PRECISION (real_masktype));\n+\t      var = vect_get_new_ssa_name (real_masktype, vect_scalar_var);\n+\t      new_stmt = gimple_build_assign (var, NOP_EXPR, utype);\n+\t      vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n+\t      mask_arg = var;\n+\t    }\n+\t  src_op = build_zero_cst (srctype);\n+\t}\n       gcall *new_call = gimple_build_call (gs_info->decl, 5, src_op, ptr, op,\n-\t\t\t\t\t   mask_op, scale);\n+\t\t\t\t\t   mask_arg, scale);\n \n       stmt_vec_info new_stmt_info;\n       if (!useless_type_conversion_p (vectype, rettype))\n@@ -7555,20 +7585,6 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\t\t\t     TYPE_MODE (mask_vectype), true))\n \t    return false;\n \t}\n-      else if (memory_access_type == VMAT_GATHER_SCATTER && gs_info.decl)\n-\t{\n-\t  tree arglist = TYPE_ARG_TYPES (TREE_TYPE (gs_info.decl));\n-\t  tree masktype\n-\t    = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (arglist))));\n-\t  if (TREE_CODE (masktype) == INTEGER_TYPE)\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"masked gather with integer mask not\"\n-\t\t\t\t \" supported.\");\n-\t      return false;\n-\t    }\n-\t}\n       else if (memory_access_type != VMAT_LOAD_STORE_LANES\n \t       && memory_access_type != VMAT_GATHER_SCATTER)\n \t{"}]}