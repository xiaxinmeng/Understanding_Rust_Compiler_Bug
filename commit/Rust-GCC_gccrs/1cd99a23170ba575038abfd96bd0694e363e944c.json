{"sha": "1cd99a23170ba575038abfd96bd0694e363e944c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNkOTlhMjMxNzBiYTU3NTAzOGFiZmQ5NmJkMDY5NGUzNjNlOTQ0Yw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-01-12T22:15:26Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-01-12T22:15:26Z"}, "message": "rtl.texi (Insns): Remove statement that libcalls cannot return in memory...\n\n\t* doc/rtl.texi (Insns): Remove statement that libcalls cannot\n\treturn in memory, as this is no limitation is no longer present.\n\nFrom-SVN: r109649", "tree": {"sha": "914665bdaa03f828fb3f838c805d2c632bd14cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/914665bdaa03f828fb3f838c805d2c632bd14cac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cd99a23170ba575038abfd96bd0694e363e944c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd99a23170ba575038abfd96bd0694e363e944c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd99a23170ba575038abfd96bd0694e363e944c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd99a23170ba575038abfd96bd0694e363e944c/comments", "author": null, "committer": null, "parents": [{"sha": "04aff2c049817a650207994adad47b1259f1cb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04aff2c049817a650207994adad47b1259f1cb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04aff2c049817a650207994adad47b1259f1cb7d"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "0436ceaacbd3fea7fde3784f4046c0a74ac0e62b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cd99a23170ba575038abfd96bd0694e363e944c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cd99a23170ba575038abfd96bd0694e363e944c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cd99a23170ba575038abfd96bd0694e363e944c", "patch": "@@ -1,3 +1,8 @@\n+2006-01-13  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* doc/rtl.texi (Insns): Remove statement that libcalls cannot\n+\treturn in memory, as this is no limitation is no longer present.\n+\n 2006-01-12  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/addsub.md (addhi3): Add two more alternatives, for\n@@ -10,7 +15,8 @@\n \tDTORS_SECTION_ASM_OP, INIT_ARRAY_SECTION_ASM_OP,\n \tFINI_ARRAY_SECTION_ASM_OP): Define.\n \n-\t* config/m32c/m32c.c (m32c_legitimize_address): Remove temporary variable.\n+\t* config/m32c/m32c.c (m32c_legitimize_address): Remove temporary\n+\tvariable.\n \t(m32c_legitimize_reload_address): New logic to reload FB to An.\n \t(m32c_output_reg_push): Add newline.\n \t(m32c_output_reg_pop): Likewise."}, {"sha": "acd99c99dc96d36a0a7cee9d36919d2b34ce0440", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cd99a23170ba575038abfd96bd0694e363e944c/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cd99a23170ba575038abfd96bd0694e363e944c/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=1cd99a23170ba575038abfd96bd0694e363e944c", "patch": "@@ -2991,14 +2991,7 @@ TARGET_PASS_BY_REFERENCE}) are stored.  If the argument is\n caller-copied (@pxref{Register Arguments, TARGET_CALLEE_COPIES}),\n the stack slot will be mentioned in @code{CLOBBER} and @code{USE}\n entries; if it's callee-copied, only a @code{USE} will appear, and the\n-@code{MEM} may point to addresses that are not stack slots.  These\n-@code{MEM}s are used only in libcalls, because, unlike regular function\n-calls, @code{CONST_CALL}s (which libcalls generally are, @pxref{Flags,\n-CONST_CALL_P}) aren't assumed to read and write all memory, so flow\n-would consider the stores dead and remove them.  Note that, since a\n-libcall must never return values in memory (@pxref{Aggregate Return,\n-RETURN_IN_MEMORY}), there will never be a @code{CLOBBER} for a memory\n-address holding a return value.\n+@code{MEM} may point to addresses that are not stack slots.\n \n @code{CLOBBER}ed registers in this list augment registers specified in\n @code{CALL_USED_REGISTERS} (@pxref{Register Basics})."}]}