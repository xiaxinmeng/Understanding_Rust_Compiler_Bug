{"sha": "cc6fc442d8094d41410ca714e7ff87f822a1b4c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M2ZmM0NDJkODA5NGQ0MTQxMGNhNzE0ZTdmZjg3ZjgyMmExYjRjMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-03T08:40:32Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-03T08:40:32Z"}, "message": "(process_command): Correct for spaz by patch, installing last change.\n\nFrom-SVN: r2045", "tree": {"sha": "4bde12fbc5794d5b77f3254e0979df95948e7ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bde12fbc5794d5b77f3254e0979df95948e7ded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc6fc442d8094d41410ca714e7ff87f822a1b4c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6fc442d8094d41410ca714e7ff87f822a1b4c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6fc442d8094d41410ca714e7ff87f822a1b4c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6fc442d8094d41410ca714e7ff87f822a1b4c0/comments", "author": null, "committer": null, "parents": [{"sha": "86543c6e28b598dec46ba800e1eb685fdbfb2530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86543c6e28b598dec46ba800e1eb685fdbfb2530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86543c6e28b598dec46ba800e1eb685fdbfb2530"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "57b4a9d0dd7f40a32aa9ed28aea0d8d44977f659", "filename": "gcc/gcc.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6fc442d8094d41410ca714e7ff87f822a1b4c0/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6fc442d8094d41410ca714e7ff87f822a1b4c0/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=cc6fc442d8094d41410ca714e7ff87f822a1b4c0", "patch": "@@ -2100,18 +2100,6 @@ process_command (argc, argv)\n \n   add_prefix (&startfile_prefix, standard_exec_prefix, 0, 1, NULL_PTR);\n   add_prefix (&startfile_prefix, standard_exec_prefix_1, 0, 1, NULL_PTR);\n-      else if (argv[i][0] == '+' && argv[i][1] == 'e')\n-\t{\n-\t  /* Compensate for the +e options to the C++ front-end;\n-\t     they're there simply for cfront call-compatability.  We do\n-\t     some magic in default_compilers to pass them down properly.\n-\t     Note we deliberately start at the `+' here, to avoid passing\n-\t     -e0 or -e1 down into the linker.  */\n-\t  switches[n_switches].part1 = &argv[i][0];\n-\t  switches[n_switches].args = 0;\n-\t  switches[n_switches].valid = 0;\n-\t  n_switches++;\n-\t}\n \n   /* More prefixes are enabled in main, after we read the specs file\n      and determine whether this is cross-compilation or not.  */\n@@ -2141,6 +2129,18 @@ process_command (argc, argv)\n \t;\n       else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n \t;\n+      else if (argv[i][0] == '+' && argv[i][1] == 'e')\n+\t{\n+\t  /* Compensate for the +e options to the C++ front-end;\n+\t     they're there simply for cfront call-compatability.  We do\n+\t     some magic in default_compilers to pass them down properly.\n+\t     Note we deliberately start at the `+' here, to avoid passing\n+\t     -e0 or -e1 down into the linker.  */\n+\t  switches[n_switches].part1 = &argv[i][0];\n+\t  switches[n_switches].args = 0;\n+\t  switches[n_switches].valid = 0;\n+\t  n_switches++;\n+\t}\n       else if (argv[i][0] == '-' && argv[i][1] != 0 && argv[i][1] != 'l')\n \t{\n \t  register char *p = &argv[i][1];"}]}