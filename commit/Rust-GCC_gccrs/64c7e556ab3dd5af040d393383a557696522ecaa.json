{"sha": "64c7e556ab3dd5af040d393383a557696522ecaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjN2U1NTZhYjNkZDVhZjA0MGQzOTMzODNhNTU3Njk2NTIyZWNhYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-21T20:15:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-21T20:15:39Z"}, "message": "configure.in: Check for sys/sysmp.h and sysmp.\n\n\t* configure.in: Check for sys/sysmp.h and sysmp.\n\t* physmem.c: Pull upstream copy, add support for irix6.\n\n\t* config.in, configure: Regenerated.\n\nFrom-SVN: r63237", "tree": {"sha": "8952d0661c6f4e242d8bec701c82d491b43c1711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8952d0661c6f4e242d8bec701c82d491b43c1711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c7e556ab3dd5af040d393383a557696522ecaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c7e556ab3dd5af040d393383a557696522ecaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c7e556ab3dd5af040d393383a557696522ecaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c7e556ab3dd5af040d393383a557696522ecaa/comments", "author": null, "committer": null, "parents": [{"sha": "934b8c40fe91d6d3bb28a998d2f6872fff4fc9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934b8c40fe91d6d3bb28a998d2f6872fff4fc9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934b8c40fe91d6d3bb28a998d2f6872fff4fc9e9"}], "stats": {"total": 86, "additions": 76, "deletions": 10}, "files": [{"sha": "3757735fba051b18aa62953a9052e74b70e554cb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=64c7e556ab3dd5af040d393383a557696522ecaa", "patch": "@@ -1,3 +1,10 @@\n+2003-02-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* configure.in: Check for sys/sysmp.h and sysmp.\n+\t* physmem.c: Pull upstream copy, add support for irix6.\n+\n+\t* config.in, configure: Regenerated.\n+\n 2003-02-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* physmem.c (physmem_total, physmem_available): De-ANSI-fy."}, {"sha": "706fb1efd3fd3b87e248bff0cd8e513779be265c", "filename": "libiberty/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=64c7e556ab3dd5af040d393383a557696522ecaa", "patch": "@@ -180,6 +180,9 @@\n /* Define if you have the sysconf function.  */\n #undef HAVE_SYSCONF\n \n+/* Define if you have the sysmp function.  */\n+#undef HAVE_SYSMP\n+\n /* Define if you have the times function.  */\n #undef HAVE_TIMES\n \n@@ -237,6 +240,9 @@\n /* Define if you have the <sys/stat.h> header file.  */\n #undef HAVE_SYS_STAT_H\n \n+/* Define if you have the <sys/sysmp.h> header file.  */\n+#undef HAVE_SYS_SYSMP_H\n+\n /* Define if you have the <sys/time.h> header file.  */\n #undef HAVE_SYS_TIME_H\n "}, {"sha": "94a4e85a49c3f407db9b47e97778a4e7f5a70117", "filename": "libiberty/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=64c7e556ab3dd5af040d393383a557696522ecaa", "patch": "@@ -1356,7 +1356,7 @@ else\n fi\n echo \"$ac_t\"\"$CPP\" 1>&6\n \n-for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h\n+for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -1738,7 +1738,7 @@ funcs=\"$funcs waitpid\"\n vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n-checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic\"\n+checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic sysmp\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -2128,7 +2128,7 @@ else\n fi\n done\n \n-  for ac_func in pstat_getstatic pstat_getdynamic\n+  for ac_func in pstat_getstatic pstat_getdynamic sysmp\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:2135: checking for $ac_func\" >&5"}, {"sha": "ead53b421eb5ed43faa7024009635e0379751a3c", "filename": "libiberty/configure.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=64c7e556ab3dd5af040d393383a557696522ecaa", "patch": "@@ -142,7 +142,7 @@ AC_SUBST_FILE(host_makefile_frag)\n # It's OK to check for header files.  Although the compiler may not be\n # able to link anything, it had better be able to at least compile\n # something.\n-AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h)\n+AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h)\n AC_HEADER_SYS_WAIT\n AC_HEADER_TIME\n \n@@ -207,7 +207,7 @@ funcs=\"$funcs waitpid\"\n vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n-checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic\"\n+checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic sysmp\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -219,7 +219,7 @@ if test \"x\" = \"y\"; then\n   AC_CHECK_FUNCS(strtod strtol strtoul tmpnam vasprintf vfprintf vprintf)\n   AC_CHECK_FUNCS(vsprintf waitpid getrusage on_exit psignal strerror strsignal)\n   AC_CHECK_FUNCS(sysconf times sbrk gettimeofday ffs)\n-  AC_CHECK_FUNCS(pstat_getstatic pstat_getdynamic)\n+  AC_CHECK_FUNCS(pstat_getstatic pstat_getdynamic sysmp)\n   AC_CHECK_FUNCS(realpath canonicalize_file_name)\n   AC_DEFINE(HAVE_SYS_ERRLIST, 1, [Define if you have the sys_errlist variable.])\n   AC_DEFINE(HAVE_SYS_NERR,    1, [Define if you have the sys_nerr variable.])"}, {"sha": "52b9c8adfc250859f7f4e47e4560d6cf2ceda348", "filename": "libiberty/physmem.c", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fphysmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c7e556ab3dd5af040d393383a557696522ecaa/libiberty%2Fphysmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fphysmem.c?ref=64c7e556ab3dd5af040d393383a557696522ecaa", "patch": "@@ -1,5 +1,5 @@\n /* Calculate the size of physical memory.\n-   Copyright 2000, 2001 Free Software Foundation, Inc.\n+   Copyright 2000, 2001, 2003 Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n-/* Written by Paul Eggert.  */\n+/* Written by Paul Eggert and Jim Meyering.  */\n \n #if HAVE_CONFIG_H\n # include <config.h>\n@@ -29,6 +29,12 @@\n # include <sys/pstat.h>\n #endif\n \n+#if HAVE_SYS_SYSMP_H\n+#include <sys/sysmp.h>\n+#endif\n+\n+#include \"libiberty.h\"\n+\n /* Return the total amount of physical memory.  */\n double\n physmem_total ()\n@@ -43,7 +49,7 @@ physmem_total ()\n #endif\n \n #if HAVE_PSTAT_GETSTATIC\n-  {\n+  { /* This works on hpux11.  */\n     struct pst_static pss;\n     if (0 <= pstat_getstatic (&pss, sizeof pss, 1, 0))\n       {\n@@ -55,6 +61,19 @@ physmem_total ()\n   }\n #endif\n \n+#if HAVE_SYSMP && defined MP_SAGET && defined MPSA_RMINFO && defined _SC_PAGESIZE\n+  { /* This works on irix6. */\n+    struct rminfo realmem;\n+    if (sysmp(MP_SAGET, MPSA_RMINFO, &realmem, sizeof(realmem)) == 0)\n+      {\n+\tdouble pagesize = sysconf (_SC_PAGESIZE);\n+\tdouble pages = realmem.physmem;\n+\tif (0 <= pages && 0 <= pagesize)\n+          return pages * pagesize;\n+      }\n+  }\n+#endif\n+\n   /* Return 0 if we can't determine the value.  */\n   return 0;\n }\n@@ -73,7 +92,7 @@ physmem_available ()\n #endif\n \n #if HAVE_PSTAT_GETSTATIC && HAVE_PSTAT_GETDYNAMIC\n-  {\n+  { /* This works on hpux11.  */\n     struct pst_static pss;\n     struct pst_dynamic psd;\n     if (0 <= pstat_getstatic (&pss, sizeof pss, 1, 0)\n@@ -87,6 +106,40 @@ physmem_available ()\n   }\n #endif\n \n+#if HAVE_SYSMP && defined MP_SAGET && defined MPSA_RMINFO && defined _SC_PAGESIZE\n+  { /* This works on irix6. */\n+    struct rminfo realmem;\n+    if (sysmp(MP_SAGET, MPSA_RMINFO, &realmem, sizeof(realmem)) == 0)\n+      {\n+\tdouble pagesize = sysconf (_SC_PAGESIZE);\n+\tdouble pages = realmem.availrmem;\n+\tif (0 <= pages && 0 <= pagesize)\n+          return pages * pagesize;\n+      }\n+  }\n+#endif\n+\n   /* Guess 25% of physical memory.  */\n   return physmem_total () / 4;\n }\n+\n+\n+#if DEBUG\n+\n+# include <stdio.h>\n+# include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  printf (\"%12.f %12.f\\n\", physmem_total (), physmem_available ());\n+  exit (0);\n+}\n+\n+#endif /* DEBUG */\n+\n+/*\n+Local Variables:\n+compile-command: \"gcc -DDEBUG -DHAVE_CONFIG_H -I.. -g -O -Wall -W physmem.c\"\n+End:\n+*/"}]}