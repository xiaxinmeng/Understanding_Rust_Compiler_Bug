{"sha": "e8094962f6d28c1c0aa5765ae5391d92fe184061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwOTQ5NjJmNmQyOGMxYzBhYTU3NjVhZTUzOTFkOTJmZTE4NDA2MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-04T21:43:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-04-04T21:43:53Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r686", "tree": {"sha": "a8191e81309113e37c9fe9d57151ee6871ce718c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8191e81309113e37c9fe9d57151ee6871ce718c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8094962f6d28c1c0aa5765ae5391d92fe184061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8094962f6d28c1c0aa5765ae5391d92fe184061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8094962f6d28c1c0aa5765ae5391d92fe184061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8094962f6d28c1c0aa5765ae5391d92fe184061/comments", "author": null, "committer": null, "parents": [{"sha": "abf977d6a97fd6e55f8bf8949c127a95df2c2784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abf977d6a97fd6e55f8bf8949c127a95df2c2784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abf977d6a97fd6e55f8bf8949c127a95df2c2784"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "f7f1fc335187134c51469ac028f994d80b366d70", "filename": "gcc/reload.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8094962f6d28c1c0aa5765ae5391d92fe184061/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8094962f6d28c1c0aa5765ae5391d92fe184061/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=e8094962f6d28c1c0aa5765ae5391d92fe184061", "patch": "@@ -4463,6 +4463,7 @@ find_equiv_reg (goal, insn, class, other, reload_reg_p, goalreg, mode)\n \t     because it was assumed we would find that equivalent.  */\n \t      || INSN_UID (p) < reload_first_uid))\n \t{\n+\t  rtx tem;\n \t  pat = single_set (p);\n \t  /* First check for something that sets some reg equal to GOAL.  */\n \t  if (pat != 0\n@@ -4481,7 +4482,31 @@ find_equiv_reg (goal, insn, class, other, reload_reg_p, goalreg, mode)\n \t\t      && rtx_renumbered_equal_p (goal, SET_SRC (pat)))\n \t\t  || (goal_mem\n \t\t      && (valueno = true_regnum (valtry = SET_SRC (pat))) >= 0\n-\t\t      && rtx_renumbered_equal_p (goal, SET_DEST (pat)))))\n+\t\t      && rtx_renumbered_equal_p (goal, SET_DEST (pat)))\n+\t\t  /* If we are looking for a constant,\n+\t\t     and something equivalent to that constant was copied\n+\t\t     into a reg, we can use that reg.  */\n+\t\t  || (goal_const && (tem = find_reg_note (p, REG_EQUIV, 0))\n+\t\t      && rtx_equal_p (XEXP (tem, 0), goal)\n+\t\t      && (valueno = true_regnum (valtry = SET_DEST (pat))))\n+\t\t  || (goal_const && (tem = find_reg_note (p, REG_EQUIV, 0))\n+\t\t      && GET_CODE (SET_DEST (pat)) == REG\n+\t\t      && GET_CODE (XEXP (tem, 0)) == CONST_DOUBLE\n+\t\t      && GET_MODE_CLASS (GET_MODE (XEXP (tem, 0))) == MODE_FLOAT\n+\t\t      && GET_CODE (goal) == CONST_INT\n+\t\t      && INTVAL (goal) == CONST_DOUBLE_LOW (XEXP (tem, 0))\n+\t\t      && (valtry = operand_subword (SET_DEST (pat), 0, 0,\n+\t\t\t\t\t\t    VOIDmode))\n+\t\t      && (valueno = true_regnum (valtry)))\n+\t\t  || (goal_const && (tem = find_reg_note (p, REG_EQUIV, 0))\n+\t\t      && GET_CODE (SET_DEST (pat)) == REG\n+\t\t      && GET_CODE (XEXP (tem, 0)) == CONST_DOUBLE\n+\t\t      && GET_MODE_CLASS (GET_MODE (XEXP (tem, 0))) == MODE_FLOAT\n+\t\t      && GET_CODE (goal) == CONST_INT\n+\t\t      && INTVAL (goal) == CONST_DOUBLE_HIGH (XEXP (tem, 0))\n+\t\t      && (valtry\n+\t\t\t  = operand_subword (SET_DEST (pat), 1, 0, VOIDmode))\n+\t\t      && (valueno = true_regnum (valtry)))))\n \t    if (other >= 0\n \t\t? valueno == other\n \t\t: ((unsigned) valueno < FIRST_PSEUDO_REGISTER"}]}