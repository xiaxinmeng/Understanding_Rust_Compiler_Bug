{"sha": "48cff4fa4e314cc061c7113f9ec38e0844a3935d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjZmY0ZmE0ZTMxNGNjMDYxYzcxMTNmOWVjMzhlMDg0NGEzOTM1ZA==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-11-01T23:00:48Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-11-01T23:00:48Z"}, "message": "re PR c++/58708 (string literal operator templates broken)\n\n\ngcc/cp:\n\n2013-11-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/58708\n\t* parser.c (make_string_pack): Discover non-const type and size\n\tof character and build parm pack with correct type and chars.\n\n\ngcc/testsuite:\n\n2013-11-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR c++/58708\n\t* g++.dg/cpp1y/pr58708.C: New.\n\nFrom-SVN: r204305", "tree": {"sha": "235f6f34f7f71fe3e8c571751e62d95f1d95ffe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/235f6f34f7f71fe3e8c571751e62d95f1d95ffe0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48cff4fa4e314cc061c7113f9ec38e0844a3935d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48cff4fa4e314cc061c7113f9ec38e0844a3935d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48cff4fa4e314cc061c7113f9ec38e0844a3935d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48cff4fa4e314cc061c7113f9ec38e0844a3935d/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f25457b4c35d83be7cbbfdad0287ecfa4cd9366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f25457b4c35d83be7cbbfdad0287ecfa4cd9366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f25457b4c35d83be7cbbfdad0287ecfa4cd9366"}], "stats": {"total": 100, "additions": 94, "deletions": 6}, "files": [{"sha": "707b94955608554d7a272703ec30a04ca997148a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48cff4fa4e314cc061c7113f9ec38e0844a3935d", "patch": "@@ -1,3 +1,9 @@\n+2013-11-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/58708\n+\t* parser.c (make_string_pack): Discover non-const type and size\n+\tof character and build parm pack with correct type and chars.\n+\n 2013-11-01  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* semantics.c (build_anon_member_initialization): Convert fields to be"}, {"sha": "d55f5f9c7869059fff281143093bd0956485c52b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=48cff4fa4e314cc061c7113f9ec38e0844a3935d", "patch": "@@ -3793,22 +3793,39 @@ make_string_pack (tree value)\n   tree charvec;\n   tree argpack = make_node (NONTYPE_ARGUMENT_PACK);\n   const char *str = TREE_STRING_POINTER (value);\n-  int i, len = TREE_STRING_LENGTH (value) - 1;\n+  int sz = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (value))));\n+  int len = TREE_STRING_LENGTH (value) / sz - 1;\n   tree argvec = make_tree_vec (2);\n \n-  tree string_char_type_node = TREE_TYPE (TREE_TYPE (value));\n+  tree str_char_type_node = TREE_TYPE (TREE_TYPE (value));\n+  str_char_type_node = TYPE_MAIN_VARIANT (str_char_type_node);\n \n   /* First template parm is character type.  */\n-  TREE_VEC_ELT (argvec, 0) = string_char_type_node;\n+  TREE_VEC_ELT (argvec, 0) = str_char_type_node;\n \n   /* Fill in CHARVEC with all of the parameters.  */\n   charvec = make_tree_vec (len);\n-  for (i = 0; i < len; ++i)\n-    TREE_VEC_ELT (charvec, i) = build_int_cst (string_char_type_node, str[i]);\n+  if (sz == 1)\n+    {\n+      for (int i = 0; i < len; ++i)\n+\tTREE_VEC_ELT (charvec, i) = build_int_cst (str_char_type_node, str[i]);\n+    }\n+  else if (sz == 2)\n+    {\n+      const uint16_t *num = (const uint16_t *)str;\n+      for (int i = 0; i < len; ++i)\n+\tTREE_VEC_ELT (charvec, i) = build_int_cst (str_char_type_node, num[i]);\n+    }\n+  else if (sz == 4)\n+    {\n+      const uint32_t *num = (const uint32_t *)str;\n+      for (int i = 0; i < len; ++i)\n+\tTREE_VEC_ELT (charvec, i) = build_int_cst (str_char_type_node, num[i]);\n+    }\n \n   /* Build the argument packs.  */\n   SET_ARGUMENT_PACK_ARGS (argpack, charvec);\n-  TREE_TYPE (argpack) = string_char_type_node;\n+  TREE_TYPE (argpack) = str_char_type_node;\n \n   TREE_VEC_ELT (argvec, 1) = argpack;\n "}, {"sha": "75975d0be10807910a23a1e4d47fa6e44ab45738", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48cff4fa4e314cc061c7113f9ec38e0844a3935d", "patch": "@@ -1,3 +1,8 @@\n+2013-11-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR c++/58708\n+\t* g++.dg/cpp1y/pr58708.C: New.\n+\n 2013-11-01  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/58834"}, {"sha": "a9c19ebb6c32480f9cf667a9046b1fa4814f01c8", "filename": "gcc/testsuite/g++.dg/cpp1y/pr58708.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cff4fa4e314cc061c7113f9ec38e0844a3935d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr58708.C?ref=48cff4fa4e314cc061c7113f9ec38e0844a3935d", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options -std=c++1y }\n+// { dg-do run }\n+\n+template<typename, typename>\n+  struct is_same\n+  {\n+    static constexpr bool value = false;\n+  };\n+\n+template<typename _Tp>\n+  struct is_same<_Tp, _Tp>\n+  {\n+    static constexpr bool value = true;\n+  };\n+\n+template<typename CharT, CharT... Str>\n+  struct Foo\n+  {\n+    using char_type = CharT;\n+    char_type chars[sizeof...(Str)]{Str...};\n+  };\n+\n+template<typename CharT, CharT... Str>\n+  Foo<CharT, Str...>\n+  operator\"\"_foo()\n+  {\n+    return Foo<CharT, Str...>();\n+  }\n+\n+int\n+main()\n+{\n+  auto fooU = U\"\\x10000\\x10001\\x10002\"_foo;\n+  if (is_same<decltype(fooU)::char_type, char32_t>::value != true) __builtin_abort();\n+  if (sizeof(fooU.chars)/sizeof(char32_t) != 3) __builtin_abort();\n+  if (fooU.chars[0] != 65536) __builtin_abort();\n+  if (fooU.chars[1] != 65537) __builtin_abort();\n+  if (fooU.chars[2] != 65538) __builtin_abort();\n+\n+  auto foo = \"\\x61\\x62\\x63\"_foo;\n+  if (is_same<decltype(foo)::char_type, char>::value != true) __builtin_abort();\n+  if (sizeof(foo.chars)/sizeof(char) != 3) __builtin_abort();\n+  if (foo.chars[0] != 97) __builtin_abort();\n+  if (foo.chars[1] != 98) __builtin_abort();\n+  if (foo.chars[2] != 99) __builtin_abort();\n+\n+  auto wfoo = L\"\\x01020304\\x05060708\"_foo;\n+  if (is_same<decltype(wfoo)::char_type, wchar_t>::value != true) __builtin_abort();\n+  if (sizeof(wfoo.chars)/sizeof(wchar_t) != 2) __builtin_abort();\n+  if (wfoo.chars[0] != 16909060) __builtin_abort();\n+  if (wfoo.chars[1] != 84281096) __builtin_abort();\n+\n+  auto foou = u\"\\x0102\\x0304\\x0506\\x0708\"_foo;\n+  if (is_same<decltype(foou)::char_type, char16_t>::value != true) __builtin_abort();\n+  if (sizeof(foou.chars)/sizeof(char16_t) != 4) __builtin_abort();\n+  if (foou.chars[0] != 258) __builtin_abort();\n+  if (foou.chars[1] != 772) __builtin_abort();\n+  if (foou.chars[2] != 1286) __builtin_abort();\n+  if (foou.chars[3] != 1800) __builtin_abort();\n+}"}]}