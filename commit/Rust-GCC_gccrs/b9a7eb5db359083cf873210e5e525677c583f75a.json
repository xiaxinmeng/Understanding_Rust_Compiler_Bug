{"sha": "b9a7eb5db359083cf873210e5e525677c583f75a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhN2ViNWRiMzU5MDgzY2Y4NzMyMTBlNWU1MjU2NzdjNTgzZjc1YQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2013-04-25T00:57:16Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2013-04-25T00:57:16Z"}, "message": "config.host: Match little-endian powerpc-linux.\n\nlibgcc/\n\t* config.host: Match little-endian powerpc-linux.\ngcc/\n\t* config.gcc: Support little-endian powerpc-linux targets.\n\t* config/rs6000/linux.h (LINK_OS_LINUX_EMUL): Define.\n\t(LINK_OS_LINUX_SPEC): Define.\n\t* config/rs6000/linuxspe.h (TARGET_DEFAULT):\n\tPreserve MASK_LITTLE_ENDIAN.\n\t* config/rs6000/default64.h (TARGET_DEFAULT): Likewise.\n\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Likewise.\n\t* config/rs6000/linux64.h (OPTION_LITTLE_ENDIAN): Don't zero.\n\t(LINK_OS_LINUX_EMUL32, LINK_OS_LINUX_EMUL64): Define.\n\t(LINK_OS_LINUX_SPEC32, LINK_OS_LINUX_SPEC64): Use above.\n\t* config/rs6000/rs6000.c (output_toc): Don't use .tc for TARGET_ELF.\n\tCorrect fp word order for little-endian.  Don't shift toc entries\n\tsmaller than a word for little-endian.\n\t* config/rs6000/rs6000.md (bswaphi2, bswapsi2 split): Comment.\n\t(bswapdi2 splits): Correct low-part subreg for little-endian.\n\tRemove wrong BYTES_BIG_ENDIAN tests, and rename vars to remove\n\tlow/high where such is correct only for be.\n\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Allow\n\tlittle-endian for -mcall-aixdesc.\n\nFrom-SVN: r198273", "tree": {"sha": "655ced866b891c8b722de3e93c488c9a3492bc31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655ced866b891c8b722de3e93c488c9a3492bc31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9a7eb5db359083cf873210e5e525677c583f75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a7eb5db359083cf873210e5e525677c583f75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a7eb5db359083cf873210e5e525677c583f75a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a7eb5db359083cf873210e5e525677c583f75a/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87f7337481faf2ad038847155a0cb4fa6872dc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f7337481faf2ad038847155a0cb4fa6872dc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f7337481faf2ad038847155a0cb4fa6872dc77"}], "stats": {"total": 224, "additions": 136, "deletions": 88}, "files": [{"sha": "fb7eb523624a0dee64b5d745de014ea7a03c63b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -1,3 +1,25 @@\n+2013-04-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* config.gcc: Support little-endian powerpc-linux targets.\n+\t* config/rs6000/linux.h (LINK_OS_LINUX_EMUL): Define.\n+\t(LINK_OS_LINUX_SPEC): Define.\n+\t* config/rs6000/linuxspe.h (TARGET_DEFAULT):\n+\tPreserve MASK_LITTLE_ENDIAN.\n+\t* config/rs6000/default64.h (TARGET_DEFAULT): Likewise.\n+\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Likewise.\n+\t* config/rs6000/linux64.h (OPTION_LITTLE_ENDIAN): Don't zero.\n+\t(LINK_OS_LINUX_EMUL32, LINK_OS_LINUX_EMUL64): Define.\n+\t(LINK_OS_LINUX_SPEC32, LINK_OS_LINUX_SPEC64): Use above.\n+\t* config/rs6000/rs6000.c (output_toc): Don't use .tc for TARGET_ELF.\n+\tCorrect fp word order for little-endian.  Don't shift toc entries\n+\tsmaller than a word for little-endian.\n+\t* config/rs6000/rs6000.md (bswaphi2, bswapsi2 split): Comment.\n+\t(bswapdi2 splits): Correct low-part subreg for little-endian.\n+\tRemove wrong BYTES_BIG_ENDIAN tests, and rename vars to remove\n+\tlow/high where such is correct only for be.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Allow\n+\tlittle-endian for -mcall-aixdesc.\n+\n 2013-04-25  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_secondary_reload_inner): Use"}, {"sha": "5a205df353c5323b9c635a53e5e6787bc95d96b0", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -2086,20 +2086,24 @@ powerpc-*-rtems*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-rtems t-rtems rs6000/t-ppccomm\"\n \t;;\n-powerpc-*-linux* | powerpc64-*-linux*)\n+powerpc*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h freebsd-spec.h rs6000/sysv4.h\"\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\"\n+\tcase ${target} in\n+\t    powerpc*le-*-*)\n+\t    tm_file=\"${tm_file} rs6000/sysv4le.h\" ;;\n+\tesac\n \tmaybe_biarch=yes\n \tcase ${target} in\n-\t    powerpc64-*-linux*spe* | powerpc64-*-linux*paired*)\n+\t    powerpc64*-*-linux*spe* | powerpc64*-*-linux*paired*)\n \t    \techo \"*** Configuration ${target} not supported\" 1>&2\n \t\texit 1\n \t\t;;\n-\t    powerpc-*-linux*spe* | powerpc-*-linux*paired*)\n+\t    powerpc*-*-linux*spe* | powerpc*-*-linux*paired*)\n \t\tmaybe_biarch=\n \t\t;;\n-\t    powerpc64-*-linux*)\n+\t    powerpc64*-*-linux*)\n \t    \ttest x$with_cpu != x || cpu_is_64bit=yes\n \t\tmaybe_biarch=always\n \t\t;;"}, {"sha": "9ecd25c2723537f60d27fa7b26a8bd193fd80be0", "filename": "gcc/config/rs6000/default64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdefault64.h?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -18,5 +18,10 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_64BIT | MASK_LITTLE_ENDIAN)\n+#else\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_64BIT)\n+#endif"}, {"sha": "5329f01874b596c4d214f1640b2d2151c98f01b5", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -79,6 +79,17 @@\n #undef\tLINK_OS_DEFAULT_SPEC\n #define LINK_OS_DEFAULT_SPEC \"%(link_os_linux)\"\n \n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#define LINK_OS_LINUX_EMUL \"%{!mbig: %{!mbig-endian: -m elf32lppclinux}}%{mbig|mbig-endian: -m elf32ppclinux}\"\n+#else\n+#define LINK_OS_LINUX_EMUL \"%{!mlittle: %{!mlittle-endian: -m elf32ppclinux}}%{mlittle|mlittle-endian: -m elf32lppclinux}\"\n+#endif\n+\n+#undef LINK_OS_LINUX_SPEC\n+#define LINK_OS_LINUX_SPEC LINK_OS_LINUX_EMUL \" %{!shared: %{!static: \\\n+  %{rdynamic:-export-dynamic} \\\n+  -dynamic-linker \" GNU_USER_DYNAMIC_LINKER \"}}\"\n+\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\"\n "}, {"sha": "15336dd7d236f959a920d0826f74e9f2944f88c0", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -212,10 +212,6 @@ extern int dot_symbols;\n \n #ifndef RS6000_BI_ARCH\n \n-/* 64-bit PowerPC Linux is always big-endian.  */\n-#undef\tOPTION_LITTLE_ENDIAN\n-#define OPTION_LITTLE_ENDIAN\t0\n-\n /* 64-bit PowerPC Linux always has a TOC.  */\n #undef  TARGET_TOC\n #define\tTARGET_TOC\t\t1\n@@ -376,12 +372,19 @@ extern int dot_symbols;\n #define GNU_USER_DYNAMIC_LINKER64 \\\n   CHOOSE_DYNAMIC_LINKER (GLIBC_DYNAMIC_LINKER64, UCLIBC_DYNAMIC_LINKER64)\n \n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#define LINK_OS_LINUX_EMUL32 \"%{!mbig: %{!mbig-endian: -m elf32lppclinux}}%{mbig|mbig-endian: -m elf32ppclinux}\"\n+#define LINK_OS_LINUX_EMUL64 \"%{!mbig: %{!mbig-endian: -m elf64lppc}}%{mbig|mbig-endian: -m elf64ppc}\"\n+#else\n+#define LINK_OS_LINUX_EMUL32 \"%{!mlittle: %{!mlittle-endian: -m elf32ppclinux}}%{mlittle|mlittle-endian: -m elf32lppclinux}\"\n+#define LINK_OS_LINUX_EMUL64 \"%{!mlittle: %{!mlittle-endian: -m elf64ppc}}%{mlittle|mlittle-endian: -m elf64lppc}\"\n+#endif\n \n-#define LINK_OS_LINUX_SPEC32 \"-m elf32ppclinux %{!shared: %{!static: \\\n+#define LINK_OS_LINUX_SPEC32 LINK_OS_LINUX_EMUL32 \" %{!shared: %{!static: \\\n   %{rdynamic:-export-dynamic} \\\n   -dynamic-linker \" GNU_USER_DYNAMIC_LINKER32 \"}}\"\n \n-#define LINK_OS_LINUX_SPEC64 \"-m elf64ppc %{!shared: %{!static: \\\n+#define LINK_OS_LINUX_SPEC64 LINK_OS_LINUX_EMUL64 \" %{!shared: %{!static: \\\n   %{rdynamic:-export-dynamic} \\\n   -dynamic-linker \" GNU_USER_DYNAMIC_LINKER64 \"}}\"\n "}, {"sha": "f778dd8f737962952760e318e62b1615ff1e60cd", "filename": "gcc/config/rs6000/linuxaltivec.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -20,8 +20,13 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* Override rs6000.h and sysv4.h definition.  */\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#undef\tTARGET_DEFAULT\n+#define\tTARGET_DEFAULT (MASK_ALTIVEC | MASK_LITTLE_ENDIAN)\n+#else\n #undef\tTARGET_DEFAULT\n #define\tTARGET_DEFAULT MASK_ALTIVEC\n+#endif\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS rs6000_altivec_abi = 1"}, {"sha": "54b0d1159503738a141d0ffdf33df99a59f19bc9", "filename": "gcc/config/rs6000/linuxspe.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxspe.h?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -20,8 +20,13 @@\n    <http://www.gnu.org/licenses/>.  */\n \n /* Override rs6000.h and sysv4.h definition.  */\n+#if (TARGET_DEFAULT & MASK_LITTLE_ENDIAN)\n+#undef\tTARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_STRICT_ALIGN | MASK_LITTLE_ENDIAN)\n+#else\n #undef\tTARGET_DEFAULT\n #define TARGET_DEFAULT MASK_STRICT_ALIGN\n+#endif\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "7c32975448244fe23ea26ca98cf6cabd1d020585", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -22408,20 +22408,22 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \n       if (TARGET_64BIT)\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (DOUBLE_INT_ASM_OP, file);\n \t  else\n \t    fprintf (file, \"\\t.tc FT_%lx_%lx_%lx_%lx[TC],\",\n \t\t     k[0] & 0xffffffff, k[1] & 0xffffffff,\n \t\t     k[2] & 0xffffffff, k[3] & 0xffffffff);\n \t  fprintf (file, \"0x%lx%08lx,0x%lx%08lx\\n\",\n-\t\t   k[0] & 0xffffffff, k[1] & 0xffffffff,\n-\t\t   k[2] & 0xffffffff, k[3] & 0xffffffff);\n+\t\t   k[WORDS_BIG_ENDIAN ? 0 : 1] & 0xffffffff,\n+\t\t   k[WORDS_BIG_ENDIAN ? 1 : 0] & 0xffffffff,\n+\t\t   k[WORDS_BIG_ENDIAN ? 2 : 3] & 0xffffffff,\n+\t\t   k[WORDS_BIG_ENDIAN ? 3 : 2] & 0xffffffff);\n \t  return;\n \t}\n       else\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (\"\\t.long \", file);\n \t  else\n \t    fprintf (file, \"\\t.tc FT_%lx_%lx_%lx_%lx[TC],\",\n@@ -22448,18 +22450,19 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \n       if (TARGET_64BIT)\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (DOUBLE_INT_ASM_OP, file);\n \t  else\n \t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],\",\n \t\t     k[0] & 0xffffffff, k[1] & 0xffffffff);\n \t  fprintf (file, \"0x%lx%08lx\\n\",\n-\t\t   k[0] & 0xffffffff, k[1] & 0xffffffff);\n+\t\t   k[WORDS_BIG_ENDIAN ? 0 : 1] & 0xffffffff,\n+\t\t   k[WORDS_BIG_ENDIAN ? 1 : 0] & 0xffffffff);\n \t  return;\n \t}\n       else\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (\"\\t.long \", file);\n \t  else\n \t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],\",\n@@ -22483,7 +22486,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \n       if (TARGET_64BIT)\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (DOUBLE_INT_ASM_OP, file);\n \t  else\n \t    fprintf (file, \"\\t.tc FS_%lx[TC],\", l & 0xffffffff);\n@@ -22492,7 +22495,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \t}\n       else\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (\"\\t.long \", file);\n \t  else\n \t    fprintf (file, \"\\t.tc FS_%lx[TC],\", l & 0xffffffff);\n@@ -22524,9 +22527,8 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \t}\n #endif\n \n-      /* TOC entries are always Pmode-sized, but since this\n-\t is a bigendian machine then if we're putting smaller\n-\t integer constants in the TOC we have to pad them.\n+      /* TOC entries are always Pmode-sized, so when big-endian\n+\t smaller integer constants in the TOC need to be padded.\n \t (This is still a win over putting the constants in\n \t a separate constant pool, because then we'd have\n \t to have both a TOC entry _and_ the actual constant.)\n@@ -22537,7 +22539,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n       /* It would be easy to make this work, but it doesn't now.  */\n       gcc_assert (!TARGET_64BIT || POINTER_SIZE >= GET_MODE_BITSIZE (mode));\n \n-      if (POINTER_SIZE > GET_MODE_BITSIZE (mode))\n+      if (WORDS_BIG_ENDIAN && POINTER_SIZE > GET_MODE_BITSIZE (mode))\n \t{\n #if HOST_BITS_PER_WIDE_INT == 32\n \t  lshift_double (low, high, POINTER_SIZE - GET_MODE_BITSIZE (mode),\n@@ -22552,7 +22554,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \n       if (TARGET_64BIT)\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n+\t  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t    fputs (DOUBLE_INT_ASM_OP, file);\n \t  else\n \t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],\",\n@@ -22565,7 +22567,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \t{\n \t  if (POINTER_SIZE < GET_MODE_BITSIZE (mode))\n \t    {\n-\t      if (TARGET_MINIMAL_TOC)\n+\t      if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t\tfputs (\"\\t.long \", file);\n \t      else\n \t\tfprintf (file, \"\\t.tc ID_%lx_%lx[TC],\",\n@@ -22575,7 +22577,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \t    }\n \t  else\n \t    {\n-\t      if (TARGET_MINIMAL_TOC)\n+\t      if (TARGET_ELF || TARGET_MINIMAL_TOC)\n \t\tfputs (\"\\t.long \", file);\n \t      else\n \t\tfprintf (file, \"\\t.tc IS_%lx[TC],\", (long) low & 0xffffffff);\n@@ -22613,7 +22615,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n       gcc_unreachable ();\n     }\n \n-  if (TARGET_MINIMAL_TOC)\n+  if (TARGET_ELF || TARGET_MINIMAL_TOC)\n     fputs (TARGET_32BIT ? \"\\t.long \" : DOUBLE_INT_ASM_OP, file);\n   else\n     {"}, {"sha": "14bd9bfb4325c5a28d990a41d8e6ad5ea61a0581", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 47, "deletions": 54, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -2090,6 +2090,8 @@\n   [(set_attr \"length\" \"4,4,12\")\n    (set_attr \"type\" \"load,store,*\")])\n \n+;; We are always BITS_BIG_ENDIAN, so the (const_int 16) below is\n+;; correct for -mlittle as well as -mbig.\n (define_split\n   [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n \t(bswap:HI (match_operand:HI 1 \"gpc_reg_operand\" \"\")))\n@@ -2143,6 +2145,8 @@\n   [(set_attr \"length\" \"4,4,12\")\n    (set_attr \"type\" \"load,store,*\")])\n \n+;; We are always BITS_BIG_ENDIAN, so the bit positions below in\n+;; zero_extract insns do not change for -mlittle.\n (define_split\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(bswap:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")))]\n@@ -2225,8 +2229,10 @@\n   rtx op2    = operands[2];\n   rtx op3    = operands[3];\n   rtx op4    = operands[4];\n-  rtx op3_32 = simplify_gen_subreg (SImode, op3, DImode, 4);\n-  rtx op4_32 = simplify_gen_subreg (SImode, op4, DImode, 4);\n+  rtx op3_32 = simplify_gen_subreg (SImode, op3, DImode,\n+\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n+  rtx op4_32 = simplify_gen_subreg (SImode, op4, DImode,\n+\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n   rtx addr1;\n   rtx addr2;\n   rtx word_high;\n@@ -2286,8 +2292,10 @@\n   rtx src    = operands[1];\n   rtx op2    = operands[2];\n   rtx op3    = operands[3];\n-  rtx src_si = simplify_gen_subreg (SImode, src, DImode, 4);\n-  rtx op3_si = simplify_gen_subreg (SImode, op3, DImode, 4);\n+  rtx src_si = simplify_gen_subreg (SImode, src, DImode,\n+\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n+  rtx op3_si = simplify_gen_subreg (SImode, op3, DImode,\n+\t\t\t\t    BYTES_BIG_ENDIAN ? 4 : 0);\n   rtx addr1;\n   rtx addr2;\n   rtx word_high;\n@@ -2347,10 +2355,11 @@\n   rtx src     = operands[1];\n   rtx op2     = operands[2];\n   rtx op3     = operands[3];\n-  rtx dest_si = simplify_gen_subreg (SImode, dest, DImode, 4);\n-  rtx src_si  = simplify_gen_subreg (SImode, src, DImode, 4);\n-  rtx op2_si  = simplify_gen_subreg (SImode, op2, DImode, 4);\n-  rtx op3_si  = simplify_gen_subreg (SImode, op3, DImode, 4);\n+  int lo_off  = BYTES_BIG_ENDIAN ? 4 : 0;\n+  rtx dest_si = simplify_gen_subreg (SImode, dest, DImode, lo_off);\n+  rtx src_si  = simplify_gen_subreg (SImode, src, DImode, lo_off);\n+  rtx op2_si  = simplify_gen_subreg (SImode, op2, DImode, lo_off);\n+  rtx op3_si  = simplify_gen_subreg (SImode, op3, DImode, lo_off);\n \n   emit_insn (gen_lshrdi3 (op2, src, GEN_INT (32)));\n   emit_insn (gen_bswapsi2 (dest_si, src_si));\n@@ -2375,15 +2384,15 @@\n   [(const_int 0)]\n   \"\n {\n-  rtx dest   = operands[0];\n-  rtx src    = operands[1];\n-  rtx op2    = operands[2];\n-  rtx dest_hi = simplify_gen_subreg (SImode, dest, DImode, 0);\n-  rtx dest_lo = simplify_gen_subreg (SImode, dest, DImode, 4);\n+  rtx dest  = operands[0];\n+  rtx src   = operands[1];\n+  rtx op2   = operands[2];\n+  rtx dest1 = simplify_gen_subreg (SImode, dest, DImode, 0);\n+  rtx dest2 = simplify_gen_subreg (SImode, dest, DImode, 4);\n   rtx addr1;\n   rtx addr2;\n-  rtx word_high;\n-  rtx word_low;\n+  rtx word1;\n+  rtx word2;\n \n   addr1 = XEXP (src, 0);\n   if (GET_CODE (addr1) == PLUS)\n@@ -2408,19 +2417,11 @@\n       addr2 = gen_rtx_PLUS (SImode, op2, addr1);\n     }\n \n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      word_high = change_address (src, SImode, addr1);\n-      word_low  = change_address (src, SImode, addr2);\n-    }\n-  else\n-    {\n-      word_high = change_address (src, SImode, addr2);\n-      word_low  = change_address (src, SImode, addr1);\n-    }\n+  word1 = change_address (src, SImode, addr1);\n+  word2 = change_address (src, SImode, addr2);\n \n-  emit_insn (gen_bswapsi2 (dest_hi, word_low));\n-  emit_insn (gen_bswapsi2 (dest_lo, word_high));\n+  emit_insn (gen_bswapsi2 (dest2, word1));\n+  emit_insn (gen_bswapsi2 (dest1, word2));\n }\")\n \n (define_split\n@@ -2431,15 +2432,15 @@\n   [(const_int 0)]\n   \"\n {\n-  rtx dest     = operands[0];\n-  rtx src      = operands[1];\n-  rtx op2      = operands[2];\n-  rtx src_high = simplify_gen_subreg (SImode, src, DImode, 0);\n-  rtx src_low  = simplify_gen_subreg (SImode, src, DImode, 4);\n+  rtx dest = operands[0];\n+  rtx src  = operands[1];\n+  rtx op2  = operands[2];\n+  rtx src1 = simplify_gen_subreg (SImode, src, DImode, 0);\n+  rtx src2 = simplify_gen_subreg (SImode, src, DImode, 4);\n   rtx addr1;\n   rtx addr2;\n-  rtx word_high;\n-  rtx word_low;\n+  rtx word1;\n+  rtx word2;\n \n   addr1 = XEXP (dest, 0);\n   if (GET_CODE (addr1) == PLUS)\n@@ -2464,19 +2465,11 @@\n       addr2 = gen_rtx_PLUS (SImode, op2, addr1);\n     }\n \n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      word_high = change_address (dest, SImode, addr1);\n-      word_low  = change_address (dest, SImode, addr2);\n-    }\n-  else\n-    {\n-      word_high = change_address (dest, SImode, addr2);\n-      word_low  = change_address (dest, SImode, addr1);\n-    }\n+  word1 = change_address (dest, SImode, addr1);\n+  word2 = change_address (dest, SImode, addr2);\n \n-  emit_insn (gen_bswapsi2 (word_high, src_low));\n-  emit_insn (gen_bswapsi2 (word_low, src_high));\n+  emit_insn (gen_bswapsi2 (word2, src1));\n+  emit_insn (gen_bswapsi2 (word1, src2));\n }\")\n \n (define_split\n@@ -2487,15 +2480,15 @@\n   [(const_int 0)]\n   \"\n {\n-  rtx dest      = operands[0];\n-  rtx src       = operands[1];\n-  rtx src_high  = simplify_gen_subreg (SImode, src, DImode, 0);\n-  rtx src_low   = simplify_gen_subreg (SImode, src, DImode, 4);\n-  rtx dest_high = simplify_gen_subreg (SImode, dest, DImode, 0);\n-  rtx dest_low  = simplify_gen_subreg (SImode, dest, DImode, 4);\n+  rtx dest  = operands[0];\n+  rtx src   = operands[1];\n+  rtx src1  = simplify_gen_subreg (SImode, src, DImode, 0);\n+  rtx src2  = simplify_gen_subreg (SImode, src, DImode, 4);\n+  rtx dest1 = simplify_gen_subreg (SImode, dest, DImode, 0);\n+  rtx dest2 = simplify_gen_subreg (SImode, dest, DImode, 4);\n \n-  emit_insn (gen_bswapsi2 (dest_high, src_low));\n-  emit_insn (gen_bswapsi2 (dest_low, src_high));\n+  emit_insn (gen_bswapsi2 (dest1, src2));\n+  emit_insn (gen_bswapsi2 (dest2, src1));\n }\")\n \n (define_insn \"mulsi3\""}, {"sha": "e54c253a4c7255b876c66299d4f2b57dd03268df", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -187,12 +187,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     rs6000_abi_name);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (rs6000_current_abi == ABI_AIX && TARGET_LITTLE_ENDIAN)\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      rs6000_isa_flags &= ~OPTION_MASK_LITTLE_ENDIAN;\t\t\t\\\n-      error (\"-mcall-aixdesc must be big endian\");\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SECURE_PLT != secure_plt)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       error (\"-msecure-plt not supported by your assembler\");\t\t\\"}, {"sha": "d6a3c83e2f685a415c7280a3c0b208e1763bc60a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -1,3 +1,7 @@\n+2013-04-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* config.host: Match little-endian powerpc-linux.\n+\n 2013-04-19  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* config/aarch64/sfp-machine.h (_FP_W_TYPE): Change to define"}, {"sha": "5e0f5ce8497e142f5df5c881c0e02f198308efe6", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a7eb5db359083cf873210e5e525677c583f75a/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a7eb5db359083cf873210e5e525677c583f75a/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=b9a7eb5db359083cf873210e5e525677c583f75a", "patch": "@@ -882,7 +882,7 @@ powerpc-*-rtems*)\n \ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff t-crtstuff-pic t-fdpbit\"\n \textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n-powerpc-*-linux* | powerpc64-*-linux*)\n+powerpc*-*-linux*)\n \ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff rs6000/t-linux t-softfp-sfdf t-softfp-excl t-dfprules rs6000/t-ppc64-fp t-softfp t-slibgcc-libgcc\"\n \textra_parts=\"$extra_parts ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \tmd_unwind_header=rs6000/linux-unwind.h"}]}