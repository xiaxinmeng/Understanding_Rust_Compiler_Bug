{"sha": "7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4YjhhZGU4OTVkNDQ4M2E1M2YxYmI2Y2E2ZWJhODkzZDM4ZTllZg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cambridge.redhat.com", "date": "2001-06-24T09:46:02Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2001-06-24T09:46:02Z"}, "message": "Fix oinitialisation of frame pointer in interrupt functions.\n\nFix compile time warnings\n\nFrom-SVN: r43540", "tree": {"sha": "92a9e2d7e6b066d86c41c25f13a83ed0b7df7888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92a9e2d7e6b066d86c41c25f13a83ed0b7df7888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/comments", "author": null, "committer": null, "parents": [{"sha": "d06dd0e18fb2fe253fd18d59b818b22e5bd7217c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06dd0e18fb2fe253fd18d59b818b22e5bd7217c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06dd0e18fb2fe253fd18d59b818b22e5bd7217c"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "d0ad198fa1708269e55390aedfcb2a876bb213d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "patch": "@@ -1,3 +1,17 @@\n+2001-06-24  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config/arm/arm.c (arm_compute_save_reg_mask): For FIQ interrupt\n+\thandlers examine register r0-r7, for other interrupt handlers\n+\texamine r0-r12.  If the interrupt handler is not a leaf function\n+\tsave all call clobbered registers.\n+\t(arm_output_epilogue): If the prologue has pushed the IP register,\n+\trestore it here.\n+\t(Arm_expand_prologue): For interrupt functions that need the frame\n+\tpointer, push the IP register before it is corrupted.\n+\n+\t* config/arm/arm.h (ARM_SIGN_EXTEND): Fix compile time warnings\n+\tabout the use of signed and unsigned quantities in a conditional.\n+\n 2001-06-23  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/crtfastmath.c: New file."}, {"sha": "c1f78873350e6768d903a19396af7938d87238a5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"except.h\"\n #include \"c-pragma.h\"\n+#include \"integrate.h\"\n #include \"tm_p.h\"\n \n /* Forward definitions of types.  */\n@@ -6931,12 +6932,29 @@ arm_compute_save_reg_mask ()\n   if (IS_VOLATILE (func_type))\n     return save_reg_mask;\n \n-  if (ARM_FUNC_TYPE (func_type) == ARM_FT_ISR)\n+  if (IS_INTERRUPT (func_type))\n     {\n-      /* FIQ handlers have registers r8 - r12 banked, so\n-\t we only need to check r0 - r7, they must save them.  */\n-      for (reg = 0; reg < 8; reg++)\n-\tif (regs_ever_live[reg])\n+      unsigned int max_reg;\n+      \n+      /* Interrupt functions must not corrupt any registers,\n+\t even call clobbered ones.  If this is a leaf function\n+\t we can just examine the registers used by the RTL, but\n+\t otherwise we have to assume that whatever function is\n+\t called might clobber anything, and so we have to save\n+\t all the call-clobbered registers as well.  */\n+      if (ARM_FUNC_TYPE (func_type) == ARM_FT_FIQ)\n+\t/* FIQ handlers have registers r8 - r12 banked, so\n+\t   we only need to check r0 - r7, Normal ISRs only\n+\t   bank r14 and r15, so ew must check up to r12.\n+\t   r13 is the stack pointer which is always preserved,\n+\t   so we do not need to consider it here.  */\n+\tmax_reg = 7;\n+      else\n+\tmax_reg = 12;\n+\t\n+      for (reg = 0; reg <= max_reg; reg++)\n+\tif (regs_ever_live[reg]\n+\t    || (! current_function_is_leaf && call_used_regs [reg]))\n \t  save_reg_mask |= (1 << reg);\n     }\n   else\n@@ -7410,6 +7428,11 @@ arm_output_epilogue (really_return)\n \tsaved_regs_mask &= ~ (1 << PC_REGNUM);\n       \n       print_multi_reg (f, \"ldmea\\t%r\", FP_REGNUM, saved_regs_mask);\n+\n+      if (IS_INTERRUPT (func_type))\n+\t/* Interrupt handlers will have pushed the\n+\t   IP onto the stack, so restore it now.  */\n+\tprint_multi_reg (f, \"ldmea\\t%r\", SP_REGNUM, 1 << IP_REGNUM);\n     }\n   else\n     {\n@@ -7783,7 +7806,15 @@ arm_expand_prologue ()\n \n   if (frame_pointer_needed)\n     {\n-      if (IS_NESTED (func_type))\n+      if (IS_INTERRUPT (func_type))\n+\t{\n+\t  /* Interrupt functions must not corrupt any registers.\n+\t     Creating a frame pointer however, corrupts the IP\n+\t     register, so we must push it first.  */\n+\t  insn = emit_multi_reg_push (1 << IP_REGNUM);\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n+      else if (IS_NESTED (func_type))\n \t{\n \t  /* The Static chain register is the same as the IP register\n \t     used as a scratch register during stack frame creation.\n@@ -8925,7 +8956,7 @@ replace_symbols_in_block (block, orig, new)\n \t      )\n \t    continue;\n \n-\t  DECL_RTL (sym) = new;\n+\t  SET_DECL_RTL (sym, new);\n \t}\n       \n       replace_symbols_in_block (BLOCK_SUBBLOCKS (block), orig, new);"}, {"sha": "ed444db8029d230d896220d984ab95977dd4bc77", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7b8b8ade895d4483a53f1bb6ca6eba893d38e9ef", "patch": "@@ -969,8 +969,8 @@ extern const char * structure_size_string;\n    If we have to have a frame pointer we might as well make use of it.\n    APCS says that the frame pointer does not need to be pushed in leaf\n    functions, or simple tail call functions.  */\n-#define FRAME_POINTER_REQUIRED\t\t\t\t\t\t\\\n-  (current_function_has_nonlocal_label\t\t\t\t\t\\\n+#define FRAME_POINTER_REQUIRED\t\t\t\t\t\\\n+  (current_function_has_nonlocal_label\t\t\t\t\\\n    || (TARGET_ARM && TARGET_APCS_FRAME && ! leaf_function_p ()))\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n@@ -2758,12 +2758,12 @@ extern int making_const_table;\n #define HOST_UINT(x) ((unsigned HOST_WIDE_INT) x)\n #endif\n \n-#define ARM_SIGN_EXTEND(x)  ((HOST_WIDE_INT)\t\\\n-  (HOST_BITS_PER_WIDE_INT <= 32 ? (x)\t\t\\\n-   : (((x) & HOST_UINT (0xffffffff)) |\t\t\\\n-      (((x) & HOST_UINT (0x80000000))\t\t\\\n-       ? ((~ HOST_INT (0))\t\t\t\\\n-\t  & ~ HOST_UINT(0xffffffff))\t\t\\\n+#define ARM_SIGN_EXTEND(x)  ((HOST_WIDE_INT)\t\t\t\\\n+  (HOST_BITS_PER_WIDE_INT <= 32 ? (unsigned HOST_WIDE_INT) (x)\t\\\n+   : ((((unsigned HOST_WIDE_INT)(x)) & HOST_UINT (0xffffffff)) |\\\n+      ((((unsigned HOST_WIDE_INT)(x)) & HOST_UINT (0x80000000))\t\\\n+       ? ((~ HOST_UINT (0))\t\t\t\t\t\\\n+\t  & ~ HOST_UINT(0xffffffff))\t\t\t\t\\\n        : 0))))\n \n /* Output the address of an operand.  */"}]}