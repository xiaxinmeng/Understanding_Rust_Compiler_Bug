{"sha": "7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU4MWNlOWExYWQ2ZGY5Yzg5OThhM2M3NDI1NjgzN2ExZmY2ZjdjYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-05-11T09:16:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-05-11T09:16:00Z"}, "message": "tree-ssa-pre.c (eliminate_dom_walker::before_dom_children): Skip unreachable blocks and destinations.\n\n2017-05-11  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n\tSkip unreachable blocks and destinations.\n\t(eliminate): Move stmt removal and fixup ...\n\t(fini_eliminate): ... here.  Skip inserted exprs.\n\t(pass_pre::execute): Move fini_pre after fini_eliminate.\n\t* tree-ssa-tailmerge.c: Include tree-cfgcleanup.h.\n\t(tail_merge_optimize): Run cleanup_tree_cfg if requested by\n\tPRE to get rid of dead code that has invalid SSA form and\n\tsplit critical edges again.\n\nFrom-SVN: r247882", "tree": {"sha": "9a8d993679a6f1ac8732484d5735bfcfde36a743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a8d993679a6f1ac8732484d5735bfcfde36a743"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86b001e0012c26b3a39a65937ba949e2285fdd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b001e0012c26b3a39a65937ba949e2285fdd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b001e0012c26b3a39a65937ba949e2285fdd77"}], "stats": {"total": 89, "additions": 58, "deletions": 31}, "files": [{"sha": "be20be0c9ab11004789e38f8562003b256bec8f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "patch": "@@ -1,3 +1,15 @@\n+2017-05-11  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n+\tSkip unreachable blocks and destinations.\n+\t(eliminate): Move stmt removal and fixup ...\n+\t(fini_eliminate): ... here.  Skip inserted exprs.\n+\t(pass_pre::execute): Move fini_pre after fini_eliminate.\n+\t* tree-ssa-tailmerge.c: Include tree-cfgcleanup.h.\n+\t(tail_merge_optimize): Run cleanup_tree_cfg if requested by\n+\tPRE to get rid of dead code that has invalid SSA form and\n+\tsplit critical edges again.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* rtlanal.c (rtx_cost): Handle TRUNCATE between tieable modes."}, {"sha": "38723df733b391f8eaed7cc4e7a3ce792d6de119", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "patch": "@@ -4196,9 +4196,14 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n   /* Mark new bb.  */\n   el_avail_stack.safe_push (NULL_TREE);\n \n-  /* ???  If we do nothing for unreachable blocks then this will confuse\n-     tailmerging.  Eventually we can reduce its reliance on SCCVN now\n-     that we fully copy/constant-propagate (most) things.  */\n+  /* Skip unreachable blocks marked unreachable during the SCCVN domwalk.  */\n+  edge_iterator ei;\n+  edge e;\n+  FOR_EACH_EDGE (e, ei, b->preds)\n+    if (e->flags & EDGE_EXECUTABLE)\n+      break;\n+  if (! e)\n+    return NULL;\n \n   for (gphi_iterator gsi = gsi_start_phis (b); !gsi_end_p (gsi);)\n     {\n@@ -4695,10 +4700,8 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n     }\n \n   /* Replace destination PHI arguments.  */\n-  edge_iterator ei;\n-  edge e;\n   FOR_EACH_EDGE (e, ei, b->succs)\n-    {\n+    if (e->flags & EDGE_EXECUTABLE)\n       for (gphi_iterator gsi = gsi_start_phis (e->dest);\n \t   !gsi_end_p (gsi);\n \t   gsi_next (&gsi))\n@@ -4717,7 +4720,6 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t\tgimple_set_plf (SSA_NAME_DEF_STMT (sprime), NECESSARY, true);\n \t    }\n \t}\n-    }\n   return NULL;\n }\n \n@@ -4743,9 +4745,6 @@ eliminate_dom_walker::after_dom_children (basic_block)\n static unsigned int\n eliminate (bool do_pre)\n {\n-  gimple_stmt_iterator gsi;\n-  gimple *stmt;\n-\n   need_eh_cleanup = BITMAP_ALLOC (NULL);\n   need_ab_cleanup = BITMAP_ALLOC (NULL);\n \n@@ -4761,6 +4760,18 @@ eliminate (bool do_pre)\n   el_avail.release ();\n   el_avail_stack.release ();\n \n+  return el_todo;\n+}\n+\n+/* Perform CFG cleanups made necessary by elimination.  */\n+\n+static unsigned \n+fini_eliminate (void)\n+{\n+  gimple_stmt_iterator gsi;\n+  gimple *stmt;\n+  unsigned todo = 0;\n+\n   /* We cannot remove stmts during BB walk, especially not release SSA\n      names there as this confuses the VN machinery.  The stmts ending\n      up in el_to_remove are either stores or simple copies.\n@@ -4769,21 +4780,22 @@ eliminate (bool do_pre)\n     {\n       stmt = el_to_remove.pop ();\n \n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Removing dead stmt \");\n-\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n-\t}\n-\n       tree lhs;\n       if (gimple_code (stmt) == GIMPLE_PHI)\n \tlhs = gimple_phi_result (stmt);\n       else\n \tlhs = gimple_get_lhs (stmt);\n \n       if (inserted_exprs\n-\t  && TREE_CODE (lhs) == SSA_NAME)\n-\tbitmap_clear_bit (inserted_exprs, SSA_NAME_VERSION (lhs));\n+\t  && TREE_CODE (lhs) == SSA_NAME\n+\t  && bitmap_bit_p (inserted_exprs, SSA_NAME_VERSION (lhs)))\n+\tcontinue;\n+\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Removing dead stmt \");\n+\t  print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t}\n \n       gsi = gsi_for_stmt (stmt);\n       if (gimple_code (stmt) == GIMPLE_PHI)\n@@ -4800,7 +4812,7 @@ eliminate (bool do_pre)\n \t}\n \n       /* Removing a stmt may expose a forwarder block.  */\n-      el_todo |= TODO_cleanup_cfg;\n+      todo |= TODO_cleanup_cfg;\n     }\n   el_to_remove.release ();\n \n@@ -4819,18 +4831,10 @@ eliminate (bool do_pre)\n \t}\n \n       if (fixup_noreturn_call (stmt))\n-\tel_todo |= TODO_cleanup_cfg;\n+\ttodo |= TODO_cleanup_cfg;\n     }\n   el_to_fixup.release ();\n \n-  return el_todo;\n-}\n-\n-/* Perform CFG cleanups made necessary by elimination.  */\n-\n-static unsigned \n-fini_eliminate (void)\n-{\n   bool do_eh_cleanup = !bitmap_empty_p (need_eh_cleanup);\n   bool do_ab_cleanup = !bitmap_empty_p (need_ab_cleanup);\n \n@@ -4844,8 +4848,8 @@ fini_eliminate (void)\n   BITMAP_FREE (need_ab_cleanup);\n \n   if (do_eh_cleanup || do_ab_cleanup)\n-    return TODO_cleanup_cfg;\n-  return 0;\n+    todo |= TODO_cleanup_cfg;\n+  return todo;\n }\n \n /* Borrow a bit of tree-ssa-dce.c for the moment.\n@@ -5110,8 +5114,8 @@ pass_pre::execute (function *fun)\n   remove_dead_inserted_code ();\n \n   scev_finalize ();\n-  fini_pre ();\n   todo |= fini_eliminate ();\n+  fini_pre ();\n   loop_optimizer_finalize ();\n \n   /* Restore SSA info before tail-merging as that resets it as well.  */"}, {"sha": "8765fdd058cae527bd929e2c31d1987105a5e49e", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=7581ce9a1ad6df9c8998a3c74256837a1ff6f7cc", "patch": "@@ -205,6 +205,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-sccvn.h\"\n #include \"cfgloop.h\"\n #include \"tree-eh.h\"\n+#include \"tree-cfgcleanup.h\"\n \n /* Describes a group of bbs with the same successors.  The successor bbs are\n    cached in succs, and the successor edge flags are cached in succ_flags.\n@@ -1717,6 +1718,16 @@ tail_merge_optimize (unsigned int todo)\n \n   timevar_push (TV_TREE_TAIL_MERGE);\n \n+  /* We enter from PRE which has critical edges split.  Elimination\n+     does not process trivially dead code so cleanup the CFG if we\n+     are told so.  And re-split critical edges then.  */\n+  if (todo & TODO_cleanup_cfg)\n+    {\n+      cleanup_tree_cfg ();\n+      todo &= ~TODO_cleanup_cfg;\n+      split_critical_edges ();\n+    }\n+\n   if (!dom_info_available_p (CDI_DOMINATORS))\n     {\n       /* PRE can leave us with unreachable blocks, remove them now.  */"}]}