{"sha": "7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0MDkzOWI5ZTJjYmQwODRlNmRiZTAxNWVlNmNkMjc2MWFhY2Y0Ng==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-11-08T15:34:36Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-11-08T15:34:36Z"}, "message": "[AArch64] Remove aarch64_frame_pointer_required\n\nTo implement -fomit-leaf-frame-pointer, there are 2 places where we need\nto check whether we have to use a frame chain (since register allocation\nmay allocate LR in a leaf function that omits the frame pointer, but if\nLR is spilled we must emit a frame chain).  To simplify this do not force\nframe_pointer_needed via aarch64_frame_pointer_required, but enable the\nframe chain in aarch64_layout_frame.  Now aarch64_frame_pointer_required\ncan be removed and aarch64_can_eliminate is simplified.\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_frame_pointer_required)\n\tRemove.\n\t(aarch64_layout_frame): Initialise emit_frame_chain.\n\t(aarch64_can_eliminate): Remove omit leaf frame pointer code.\n\t(TARGET_FRAME_POINTER_REQUIRED): Remove define.\n\n    testsuite/\n\t* gcc.target/aarch64/dwarf-cfa-reg.c: Update.\n\nFrom-SVN: r254533", "tree": {"sha": "c7a02a8d9d4ea3d223427b71d56ca73e56370c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7a02a8d9d4ea3d223427b71d56ca73e56370c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/comments", "author": null, "committer": null, "parents": [{"sha": "7cc7f3aa68b852b217c511e7d841458b0bdd532a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc7f3aa68b852b217c511e7d841458b0bdd532a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc7f3aa68b852b217c511e7d841458b0bdd532a"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "d39de6b0320c73aec2f2899e4e71b8330d9fccac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "patch": "@@ -1,3 +1,11 @@\n+2017-11-08  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_frame_pointer_required)\n+\tRemove.\n+\t(aarch64_layout_frame): Initialise emit_frame_chain.\n+\t(aarch64_can_eliminate): Remove omit leaf frame pointer code.\n+\t(TARGET_FRAME_POINTER_REQUIRED): Remove define.\n+\n 2017-11-08  Martin Liska  <mliska@suse.cz>\n \n \t* gimplify.c (expand_FALLTHROUGH_r): Simplify usage"}, {"sha": "f58f192273e3ad313e154f28df0a88188cde36db", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "patch": "@@ -2891,21 +2891,6 @@ aarch64_output_probe_stack_range (rtx reg1, rtx reg2)\n   return \"\";\n }\n \n-static bool\n-aarch64_frame_pointer_required (void)\n-{\n-  /* Use the frame pointer if enabled and it is not a leaf function, unless\n-     leaf frame pointer omission is disabled.  If the frame pointer is enabled,\n-     force the frame pointer in leaf functions which use LR.  */\n-  if (flag_omit_frame_pointer == 2\n-      && !(flag_omit_leaf_frame_pointer\n-\t   && crtl->is_leaf\n-\t   && !df_regs_ever_live_p (LR_REGNUM)))\n-    return true;\n-\n-  return false;\n-}\n-\n /* Mark the registers that need to be saved by the callee and calculate\n    the size of the callee-saved registers area and frame record (both FP\n    and LR may be omitted).  */\n@@ -2922,6 +2907,14 @@ aarch64_layout_frame (void)\n   cfun->machine->frame.emit_frame_chain\n     = frame_pointer_needed || crtl->calls_eh_return;\n \n+  /* Emit a frame chain if the frame pointer is enabled.\n+     If -momit-leaf-frame-pointer is used, do not use a frame chain\n+     in leaf functions which do not use LR.  */\n+  if (flag_omit_frame_pointer == 2\n+      && !(flag_omit_leaf_frame_pointer && crtl->is_leaf\n+\t   && !df_regs_ever_live_p (LR_REGNUM)))\n+    cfun->machine->frame.emit_frame_chain = true;\n+\n #define SLOT_NOT_REQUIRED (-2)\n #define SLOT_REQUIRED     (-1)\n \n@@ -5939,17 +5932,6 @@ aarch64_can_eliminate (const int from, const int to)\n \n       return false;\n     }\n-  else\n-    {\n-      /* If we decided that we didn't need a leaf frame pointer but then used\n-\t LR in the function, then we'll want a frame pointer after all, so\n-\t prevent this elimination to ensure a frame pointer is used.  */\n-      if (to == STACK_POINTER_REGNUM\n-\t  && flag_omit_frame_pointer == 2\n-\t  && flag_omit_leaf_frame_pointer\n-\t  && df_regs_ever_live_p (LR_REGNUM))\n-\treturn false;\n-    }\n \n   return true;\n }\n@@ -15261,9 +15243,6 @@ aarch64_run_selftests (void)\n #undef TARGET_FUNCTION_VALUE_REGNO_P\n #define TARGET_FUNCTION_VALUE_REGNO_P aarch64_function_value_regno_p\n \n-#undef TARGET_FRAME_POINTER_REQUIRED\n-#define TARGET_FRAME_POINTER_REQUIRED aarch64_frame_pointer_required\n-\n #undef TARGET_GIMPLE_FOLD_BUILTIN\n #define TARGET_GIMPLE_FOLD_BUILTIN aarch64_gimple_fold_builtin\n "}, {"sha": "e20309abef1660c51c9b54fddb4d1e3a7eed6842", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "patch": "@@ -1,3 +1,7 @@\n+2017-11-08  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/dwarf-cfa-reg.c: Update.\n+\n 2017-11-08  Javier Miranda  <miranda@adacore.com>\n \n \t* gnat.dg/overriding_ops2.adb, gnat.dg/overriding_ops2.ads,"}, {"sha": "ae5b37970213fca2cd3160aeead60120504622b1", "filename": "gcc/testsuite/gcc.target/aarch64/dwarf-cfa-reg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf-cfa-reg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7040939b9e2cbd084e6dbe015ee6cd2761aacf46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf-cfa-reg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fdwarf-cfa-reg.c?ref=7040939b9e2cbd084e6dbe015ee6cd2761aacf46", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-O0 -gdwarf-2\" } */\n /* { dg-final { scan-assembler \".cfi_restore 30\" } } */\n /* { dg-final { scan-assembler \".cfi_restore 29\" } } */\n-/* { dg-final { scan-assembler \".cfi_def_cfa 31, 0\" } } */\n+/* { dg-final { scan-assembler \".cfi_def_cfa_offset 0\" } } */\n /* { dg-final { scan-assembler \"ret\" } } */\n \n int bar (unsigned int);"}]}