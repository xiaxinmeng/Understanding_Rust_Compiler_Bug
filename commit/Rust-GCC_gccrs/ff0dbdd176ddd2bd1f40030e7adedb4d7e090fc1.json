{"sha": "ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwZGJkZDE3NmRkZDJiZDFmNDAwMzBlN2FkZWRiNGQ3ZTA5MGZjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-03T22:11:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-03T22:11:26Z"}, "message": "(nonzero_bits, case REG): Check POINTERS_EXTEND_UNSIGNED.\n\n(num_sign_bit_copies, case REG): Likewise.\n\nFrom-SVN: r9303", "tree": {"sha": "f3015f7d18e826579a97aaf90d7b23790c3cdd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3015f7d18e826579a97aaf90d7b23790c3cdd18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1/comments", "author": null, "committer": null, "parents": [{"sha": "96ec484f7a846bd57b6fa5a5c230b863f9a5aeb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ec484f7a846bd57b6fa5a5c230b863f9a5aeb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ec484f7a846bd57b6fa5a5c230b863f9a5aeb3"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "05ec5d3e8a95d7b056acdaa61fab56f4c2e54474", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ff0dbdd176ddd2bd1f40030e7adedb4d7e090fc1", "patch": "@@ -6752,10 +6752,18 @@ nonzero_bits (x, mode)\n \t  sp_alignment = MIN (PUSH_ROUNDING (1), sp_alignment);\n #endif\n \n-\t  return nonzero & ~ (sp_alignment - 1);\n+\t  nonzero &= ~ (sp_alignment - 1);\n \t}\n #endif\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      /* If pointers extend unsigned and this is a pointer in Pmode, say that\n+\t all the bits above ptr_mode are known to be zero.  */\n+      if (POINTERS_EXTEND_UNSIGNED && GET_MODE (x) == Pmode\n+\t  && REGNO_POINTER_FLAG (REGNO (x)))\n+\tnonzero &= GET_MODE_MASK (ptr_mode);\n+#endif\n+\n       /* If X is a register whose nonzero bits value is current, use it.\n \t Otherwise, if X is a register whose value we can find, use that\n \t value.  Otherwise, use the previously-computed global nonzero bits\n@@ -7091,6 +7099,14 @@ num_sign_bit_copies (x, mode)\n     {\n     case REG:\n \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      /* If pointers extend signed and this is a pointer in Pmode, say that\n+\t all the bits above ptr_mode are known to be sign bit copies.  */\n+      if (! POINTERS_EXTEND_UNSIGNED && GET_MODE (x) == Pmode && mode == Pmode\n+\t  && REGNO_POINTER_FLAG (REGNO (x)))\n+\treturn GET_MODE_BITSIZE (Pmode) - GET_MODE_BITSIZE (ptr_mode) + 1;\n+#endif\n+\n       if (reg_last_set_value[REGNO (x)] != 0\n \t  && reg_last_set_mode[REGNO (x)] == mode\n \t  && (reg_n_sets[REGNO (x)] == 1"}]}