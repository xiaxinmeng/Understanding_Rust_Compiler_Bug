{"sha": "b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYWE3NTQ1YjY0M2E0MThhYTQ0MDU0YjhmMmQ3OWEyYjNjNmVmMg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-05-12T02:22:07Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2020-05-12T02:22:07Z"}, "message": "rs6000: Add xxgenpcvwm and xxgenpcvdm\n\nAdd support for xxgenpcv[dw]m, along with individual and overloaded\nbuilt-in functions for access.\n\n[gcc]\n\n2020-05-11  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_genpcvm): New #define.\n\t* config/rs6000/rs6000-builtin.def (XXGENPCVM_V16QI): New built-in\n\tinstantiation.\n\t(XXGENPCVM_V8HI): Likewise.\n\t(XXGENPCVM_V4SI): Likewise.\n\t(XXGENPCVM_V2DI): Likewise.\n\t(XXGENPCVM): New overloaded built-in instantiation.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins): Add\n\tentries for FUTURE_BUILTIN_VEC_XXGENPCVM.\n\t(altivec_expand_builtin): Add special handling for\n\tFUTURE_BUILTIN_VEC_XXGENPCVM.\n\t(builtin_function_type): Add handling for\n\tFUTURE_BUILTIN_XXGENPCVM_{V16QI,V8HI,V4SI,V2DI}.\n\t* config/rs6000/vsx.md (VSX_EXTRACT_I4): New mode iterator.\n\t(UNSPEC_XXGENPCV): New constant.\n\t(xxgenpcvm_<mode>_internal): New insn.\n\t(xxgenpcvm_<mode>): New expansion.\n\t* doc/extend.texi: Add documentation for vec_genpcvm built-ins.\n\n[gcc/testsuite]\n\n2020-05-11  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/xxgenpc-runnable.c: New.", "tree": {"sha": "5e08d7cdae0ef533b9fa0adb968c0baf4a728f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e08d7cdae0ef533b9fa0adb968c0baf4a728f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ca575182338a2670f3e7d636c48a2e2ef2d32dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ca575182338a2670f3e7d636c48a2e2ef2d32dc"}], "stats": {"total": 337, "additions": 337, "deletions": 0}, "files": [{"sha": "0edf580821504a310104be54e34d8861963f016d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,3 +1,24 @@\n+2020-05-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_genpcvm): New #define.\n+\t* config/rs6000/rs6000-builtin.def (XXGENPCVM_V16QI): New built-in\n+\tinstantiation.\n+\t(XXGENPCVM_V8HI): Likewise.\n+\t(XXGENPCVM_V4SI): Likewise.\n+\t(XXGENPCVM_V2DI): Likewise.\n+\t(XXGENPCVM): New overloaded built-in instantiation.\n+\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins): Add\n+\tentries for FUTURE_BUILTIN_VEC_XXGENPCVM.\n+\t(altivec_expand_builtin): Add special handling for\n+\tFUTURE_BUILTIN_VEC_XXGENPCVM.\n+\t(builtin_function_type): Add handling for\n+\tFUTURE_BUILTIN_XXGENPCVM_{V16QI,V8HI,V4SI,V2DI}.\n+\t* config/rs6000/vsx.md (VSX_EXTRACT_I4): New mode iterator.\n+\t(UNSPEC_XXGENPCV): New constant.\n+\t(xxgenpcvm_<mode>_internal): New insn.\n+\t(xxgenpcvm_<mode>): New expansion.\n+\t* doc/extend.texi: Add documentation for vec_genpcvm built-ins.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* config/rs6000/altivec.h (vec_strir): New #define."}, {"sha": "3729ceaf3360d68f5eb26845322aca31a2946e4e", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -694,6 +694,7 @@ __altivec_scalar_pred(vec_any_nle,\n #define vec_pdep(a, b)\t__builtin_altivec_vpdepd (a, b)\n #define vec_pext(a, b)\t__builtin_altivec_vpextd (a, b)\n #define vec_cfuge(a, b)\t__builtin_altivec_vcfuged (a, b)\n+#define vec_genpcvm(a, b)\t__builtin_vec_xxgenpcvm (a, b)\n \n /* Overloaded built-in functions for future architecture.  */\n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)"}, {"sha": "9acb448b8e452de124f4b78b1b1d45bbd15f423e", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -2611,6 +2611,10 @@ BU_FUTURE_V_2 (VPDEPD, \"vpdepd\", CONST, vpdepd)\n BU_FUTURE_V_2 (VPEXTD, \"vpextd\", CONST, vpextd)\n BU_FUTURE_V_2 (VGNB, \"vgnb\", CONST, vgnb)\n BU_FUTURE_V_4 (XXEVAL, \"xxeval\", CONST, xxeval)\n+BU_FUTURE_V_2 (XXGENPCVM_V16QI, \"xxgenpcvm_v16qi\", CONST, xxgenpcvm_v16qi)\n+BU_FUTURE_V_2 (XXGENPCVM_V8HI, \"xxgenpcvm_v8hi\", CONST, xxgenpcvm_v8hi)\n+BU_FUTURE_V_2 (XXGENPCVM_V4SI, \"xxgenpcvm_v4si\", CONST, xxgenpcvm_v4si)\n+BU_FUTURE_V_2 (XXGENPCVM_V2DI, \"xxgenpcvm_v2di\", CONST, xxgenpcvm_v2di)\n \n BU_FUTURE_V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_FUTURE_V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n@@ -2627,6 +2631,7 @@ BU_FUTURE_OVERLOAD_2 (CLRL, \"clrl\")\n BU_FUTURE_OVERLOAD_2 (CLRR, \"clrr\")\n BU_FUTURE_OVERLOAD_2 (GNB, \"gnb\")\n BU_FUTURE_OVERLOAD_4 (XXEVAL, \"xxeval\")\n+BU_FUTURE_OVERLOAD_2 (XXGENPCVM, \"xxgenpcvm\")\n \n BU_FUTURE_OVERLOAD_1 (VSTRIR, \"strir\")\n BU_FUTURE_OVERLOAD_1 (VSTRIL, \"stril\")"}, {"sha": "d4dffc5615f48a07af15b2f7f0d4370b3928e3b0", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -5532,6 +5532,15 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI, 0 },\n   { FUTURE_BUILTIN_VEC_GNB, FUTURE_BUILTIN_VGNB, RS6000_BTI_unsigned_long_long,\n     RS6000_BTI_unsigned_V1TI, RS6000_BTI_UINTQI, 0 },\n+  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, 0 },\n+  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, 0 },\n+  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, 0 },\n+  { FUTURE_BUILTIN_VEC_XXGENPCVM, FUTURE_BUILTIN_XXGENPCVM_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_INTSI, 0 },\n \n   /* The overloaded XXEVAL definitions are handled specially because the\n      fourth unsigned char operand is not encoded in this table.  */\n@@ -10384,6 +10393,24 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \t}\n       break;\n \n+    case FUTURE_BUILTIN_VEC_XXGENPCVM:\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      STRIP_NOPS (arg1);\n+\n+      /* Generate a normal call if it is invalid.  */\n+      if (arg1 == error_mark_node)\n+\treturn expand_call (exp, target, false);\n+\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || !IN_RANGE (TREE_INT_CST_LOW (arg1), 0, 3))\n+\t{\n+\t  size_t uns_fcode = (size_t) fcode;\n+\t  const char *name = rs6000_builtin_info[uns_fcode].name;\n+\t  error (\"Second argument of %qs must be in the range [0, 3].\", name);\n+\t  return expand_call (exp, target, false);\n+\t}\n+      break;\n+\n     default:\n       break;\n       /* Fall through.  */\n@@ -13202,6 +13229,10 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case FUTURE_BUILTIN_VGNB:\n     case FUTURE_BUILTIN_VPDEPD:\n     case FUTURE_BUILTIN_VPEXTD:\n+    case FUTURE_BUILTIN_XXGENPCVM_V16QI:\n+    case FUTURE_BUILTIN_XXGENPCVM_V8HI:\n+    case FUTURE_BUILTIN_XXGENPCVM_V4SI:\n+    case FUTURE_BUILTIN_XXGENPCVM_V2DI:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "62b4f612bb1d5a280450e283780e950cd4411c88", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -217,6 +217,7 @@\n ;; done on ISA 2.07 and not just ISA 3.0.\n (define_mode_iterator VSX_EXTRACT_I  [V16QI V8HI V4SI])\n (define_mode_iterator VSX_EXTRACT_I2 [V16QI V8HI])\n+(define_mode_iterator VSX_EXTRACT_I4 [V16QI V8HI V4SI V2DI])\n \n (define_mode_attr VSX_EXTRACT_WIDTH [(V16QI \"b\")\n \t\t  \t\t     (V8HI \"h\")\n@@ -342,6 +343,7 @@\n    UNSPEC_VSX_FIRST_MATCH_EOS_INDEX\n    UNSPEC_VSX_FIRST_MISMATCH_INDEX\n    UNSPEC_VSX_FIRST_MISMATCH_EOS_INDEX\n+   UNSPEC_XXGENPCV\n   ])\n \n ;; VSX moves\n@@ -2998,6 +3000,36 @@\n   \"xxpermdi %x0,%x1,%x1,2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_insn \"xxgenpcvm_<mode>_internal\"\n+  [(set (match_operand:VSX_EXTRACT_I4 0 \"altivec_register_operand\" \"=wa\")\n+\t(unspec:VSX_EXTRACT_I4\n+\t [(match_operand:VSX_EXTRACT_I4 1 \"altivec_register_operand\" \"v\")\n+\t  (match_operand:QI 2 \"const_0_to_3_operand\" \"n\")]\n+\t UNSPEC_XXGENPCV))]\n+    \"TARGET_FUTURE && TARGET_64BIT\"\n+    \"xxgenpcv<wd>m %x0,%1,%2\"\n+    [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"xxgenpcvm_<mode>\"\n+  [(use (match_operand:VSX_EXTRACT_I4 0 \"register_operand\"))\n+   (use (match_operand:VSX_EXTRACT_I4 1 \"register_operand\"))\n+   (use (match_operand:QI 2 \"immediate_operand\"))]\n+  \"TARGET_FUTURE\"\n+{\n+  if (!BYTES_BIG_ENDIAN)\n+    {\n+      /* gen_xxgenpcvm assumes Big Endian order.  If LE,\n+\t change swap upper and lower double words.  */\n+      rtx tmp = gen_reg_rtx (<MODE>mode);\n+\n+      emit_insn (gen_xxswapd_<mode> (tmp, operands[1]));\n+      operands[1] = tmp;\n+    }\n+    emit_insn (gen_xxgenpcvm_<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t      operands[2]));\n+  DONE;\n+})\n+\n ;; lxvd2x for little endian loads.  We need several of\n ;; these since the form of the PARALLEL differs by mode.\n (define_insn \"*vsx_lxvd2x2_le_<mode>\""}, {"sha": "c352c512285a9650cdea6383f71abd33cea46b5b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -20889,6 +20889,18 @@ little-endian targets.  Choose this built-in to check for presence of\n zero element if the same argument is also passed to @code{vec_strir}.\n @findex vec_strir_p\n \n+@smallexample\n+@exdent vector unsigned char vec_genpcvm (vector unsigned char, const int)\n+@exdent vector unsigned short vec_genpcvm (vector unsigned short, const int)\n+@exdent vector unsigned int vec_genpcvm (vector unsigned int, const int)\n+@exdent vector unsigned int vec_genpcvm (vector unsigned long long int,\n+                                         const int)\n+@end smallexample\n+Generate PCV from specified Mask size, as if implemented by the Future\n+@code{xxgenpcvbm}, @code{xxgenpcvhm}, @code{xxgenpcvwm} instructions, where\n+immediate value is either 0, 1, 2 or 3.\n+@findex vec_genpcvm\n+\n @node PowerPC Hardware Transactional Memory Built-in Functions\n @subsection PowerPC Hardware Transactional Memory Built-in Functions\n GCC provides two interfaces for accessing the Hardware Transactional"}, {"sha": "960dff0f1e3518978e78b7fa62d3297c8e5a21ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -1,3 +1,7 @@\n+2020-05-11  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/xxgenpc-runnable.c: New.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/vec-stril-0.c: New."}, {"sha": "de309efd449b354afdb194025982474d595d55ed", "filename": "gcc/testsuite/gcc.target/powerpc/xxgenpc-runnable.c", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fxxgenpc-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fxxgenpc-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fxxgenpc-runnable.c?ref=b8eaa7545b643a418aa44054b8f2d79a2b3c6ef2", "patch": "@@ -0,0 +1,231 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mcpu=future -O2\" } */\n+/* { dg-require-effective-target powerpc_future_hw } */\n+\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define IMM0 0\n+#define IMM1 1\n+#define IMM2 2\n+#define IMM3 3\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  int i;\n+  vector unsigned char vec_byte_arg;\n+  vector unsigned char vec_byte_result, vec_byte_expected0, vec_byte_expected1;\n+  vector unsigned char vec_byte_expected2, vec_byte_expected3;\n+\n+  vector unsigned short vec_hword_arg;\n+  vector unsigned short vec_hword_result, vec_hword_expected0;\n+  vector unsigned short vec_hword_expected1, vec_hword_expected2;\n+  vector unsigned short vec_hword_expected3;\n+\n+  vector unsigned int vec_word_arg;\n+  vector unsigned int vec_word_result, vec_word_expected0, vec_word_expected1;\n+  vector unsigned int vec_word_expected2, vec_word_expected3;\n+\n+  vec_byte_arg = (vector unsigned char ){ 0xFF, 0xF0, 0x7F, 0xFF,\n+\t\t\t\t\t  0xFF, 0xFF, 0xFF, 0xFF,\n+\t\t\t\t\t  0x00, 0x00, 0x01, 0x23,\n+\t\t\t\t\t  0x45, 0x67, 0x00, 0x00 };\n+\n+  vec_byte_result = (vector unsigned char ){ 0xFF, 0xFF, 0xFF, 0xFF,\n+\t\t\t\t\t     0xFF, 0xFF, 0xFF, 0xFF,\n+\t\t\t\t\t     0xFF, 0xFF, 0xFF, 0xFF,\n+\t\t\t\t\t     0xFF, 0xFF, 0xFF, 0xFF };\n+\n+  vec_byte_expected0 = (vector unsigned char){ 0x1F, 0x1E, 0x1D, 0x1C,\n+\t\t\t\t\t       0x1B, 0x1A, 0x19, 0x18,\n+\t\t\t\t\t       0x06, 0x05, 0x15, 0x04,\n+\t\t\t\t\t       0x03, 0x02, 0x01, 0x00 };\n+\n+  vec_byte_expected1 = (vector unsigned char){ 0x00, 0x00, 0x00, 0x00,\n+\t\t\t\t\t       0x00, 0x00, 0x00, 0x00,\n+\t\t\t\t\t       0x00, 0x07, 0x06, 0x04,\n+\t\t\t\t\t       0x03, 0x02, 0x01, 0x00 };\n+\n+  vec_byte_expected2 = (vector unsigned char){ 0x10, 0x11, 0x12, 0x13,\n+\t\t\t\t\t       0x14, 0x15, 0x16, 0x17,\n+\t\t\t\t\t       0x00, 0x01, 0x1a, 0x02,\n+\t\t\t\t\t       0x03, 0x04, 0x05, 0x06 };\n+\n+  vec_byte_expected3 = (vector unsigned char){ 0x08, 0x09, 0x0B, 0x0C,\n+\t\t\t\t\t       0x0D, 0x0E, 0x0F, 0x00,\n+\t\t\t\t\t       0x00, 0x00, 0x00, 0x00,\n+\t\t\t\t\t       0x00, 0x00, 0x00, 0x00 };\n+\n+  vec_hword_arg = (vector unsigned short) { 0x0004, 0xF003, 0x0002, 0x0001,\n+\t\t\t\t\t    0xF004, 0x1003, 0xF002, 0x0001 };\n+  vec_hword_expected0 = (vector unsigned short int){ 0x405, 0x1c1d, 0x203,\n+\t\t\t\t\t\t     0x1819, 0x1617, 0x1,\n+\t\t\t\t\t\t     0x1213, 0x1011 };\n+  vec_hword_expected1 = (vector unsigned short int){ 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0xe0f, 0xa0b, 0x405 };\n+  vec_hword_expected2 = (vector unsigned short int){ 0x100, 0x1312, 0x302,\n+\t\t\t\t\t\t     0x1716, 0x1918, 0x504,\n+\t\t\t\t\t\t     0x1d1c, 0x1f1e };\n+  vec_hword_expected3 = (vector unsigned short int){ 0x100, 0x504, 0xb0a, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+\n+  vec_word_arg = (vector unsigned int){ 0xFEDCBA90, 0xF101, 0xF0000202, 0xF303 };\n+  vec_word_expected0 = (vector unsigned int){ 0x4050607, 0x18191a1b,\n+\t\t\t\t\t      0x10203, 0x10111213 };\n+  vec_word_expected1 = (vector unsigned int){ 0x0, 0x0, 0xc0d0e0f, 0x4050607 };\n+  vec_word_expected2 = (vector unsigned int){ 0x3020100, 0x17161514,\n+\t\t\t\t\t      0x7060504, 0x1f1e1d1c };\n+  vec_word_expected3 = (vector unsigned int){ 0x3020100, 0xb0a0908, 0x0, 0x0 };\n+\n+  vec_byte_result = vec_genpcvm (vec_byte_arg, IMM0);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_byte_expected0[i] != vec_byte_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 0), vec_byte_expected[%d] = 0x%x does not match vec_byte_result[%d] = 0x%x\\n\",\n+\t     i, vec_byte_expected0[i], i, vec_byte_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_byte_result = vec_genpcvm (vec_byte_arg, IMM1);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_byte_expected1[i] != vec_byte_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 1), vec_byte_expected[%d] = 0x%x does not match vec_byte_result[%d] = 0x%x\\n\",\n+\t     i, vec_byte_expected1[i], i, vec_byte_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_byte_result = vec_genpcvm (vec_byte_arg, IMM2);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_byte_expected2[i] != vec_byte_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvmbm(IMM = 2), vec_byte_expected[%d] = 0x%x does not match vec_byte_result[%d] = 0x%x\\n\",\n+\t     i, vec_byte_expected2[i], i, vec_byte_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_byte_result = vec_genpcvm (vec_byte_arg, IMM3);\n+\n+  for (i = 0; i < 16; i++) {\n+    if (vec_byte_expected3[i] != vec_byte_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 3), vec_byte_expected[%d] = 0x%x does not match vec_byte_result[%d] = 0x%x\\n\",\n+\t     i, vec_byte_expected3[i], i, vec_byte_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_hword_result = vec_genpcvm (vec_hword_arg, IMM0);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_hword_expected0[i] != vec_hword_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvmhm(IMM = 0), vec_hword_expected[%d] = 0x%x does not match vec_hword_result[%d] = 0x%x\\n\",\n+\t     i, vec_hword_expected0[i], i, vec_hword_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_hword_result = vec_genpcvm (vec_hword_arg, IMM1);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_hword_expected1[i] != vec_hword_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 1), vec_hword_expected[%d] = 0x%x does not match vec_hword_result[%d] = 0x%x\\n\",\n+\t     i, vec_hword_expected1[i], i, vec_hword_result[i]);\n+#else\n+     abort();\n+#endif\n+  }\n+\n+  vec_hword_result = vec_genpcvm (vec_hword_arg, IMM2);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_hword_expected2[i] != vec_hword_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 2), vec_hword_expected[%d] = 0x%x does not match vec_hword_result[%d] = 0x%x\\n\",\n+\t     i, vec_hword_expected2[i], i, vec_hword_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_hword_result = vec_genpcvm (vec_hword_arg, IMM3);\n+\n+  for (i = 0; i < 8; i++) {\n+    if (vec_hword_expected3[i] != vec_hword_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 3), vec_hword_expected[%d] = 0x%x does not match vec_hword_result[%d] = 0x%x\\n\",\n+\t     i, vec_hword_expected3[i], i, vec_hword_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+\n+  vec_word_result = vec_genpcvm (vec_word_arg, IMM0);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_word_expected0[i] != vec_word_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 0), vec_word_expected[%d] = 0x%x does not match vec_word_result[%d] = 0x%x\\n\",\n+\t     i, vec_word_expected0[i], i, vec_word_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_word_result = vec_genpcvm (vec_word_arg, IMM1);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_word_expected1[i] != vec_word_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 1), vec_word_expected[%d] = 0%x does not match vec_word_result[%d] = 0x%x\\n\",\n+\t     i, vec_word_expected1[i], i, vec_word_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_word_result = vec_genpcvm (vec_word_arg, IMM2);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_word_expected2[i] != vec_word_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 2), vec_word_expected[%d] = 0x%x does not match vec_word_result[%d] = 0x%x\\n\",\n+\t     i, vec_word_expected2[i], i, vec_word_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  vec_word_result = vec_genpcvm (vec_word_arg, IMM3);\n+\n+  for (i = 0; i < 4; i++) {\n+    if (vec_word_expected3[i] != vec_word_result[i])\n+#if DEBUG\n+      printf(\"ERROR: vec_genpcvm(IMM = 3), vec_word_expected[%d] = 0x%x does not match vec_word_result[%d] = 0x%x\\n\",\n+\t     i, vec_word_expected3[i], i, vec_word_result[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  return 0;\n+}"}]}