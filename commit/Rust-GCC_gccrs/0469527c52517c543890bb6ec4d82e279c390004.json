{"sha": "0469527c52517c543890bb6ec4d82e279c390004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2OTUyN2M1MjUxN2M1NDM4OTBiYjZlYzRkODJlMjc5YzM5MDAwNA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-11-01T16:40:42Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-11-01T16:40:42Z"}, "message": "combine: Fix bug in giving up placing REG_DEAD notes (PR82683)\n\nWhen we have a REG_DEAD note for a reg that is set in the new I2, we\ndrop the note on the floor (we cannot find whether to place it on I2\nor on I3).  But the code I added to do this has a bug and does not\nalways actually drop it.  This patch fixes it.\n\nBut that on its own is too pessimistic, it turns out, and we generate\nworse code.  One case where we do know where to place the note is if\nit came from I3 (it should go to I3 again).  Doing this fixes all of\nthe regressions.\n\n\n\tPR rtl-optimization/64682\n\tPR rtl-optimization/69567\n\tPR rtl-optimization/69737\n\tPR rtl-optimization/82683\n\t* combine.c (distribute_notes) <REG_DEAD>: If the new I2 sets the same\n\tregister mentioned in the note, drop the note, unless it came from I3,\n\tin which case it should go to I3 again.\n\nFrom-SVN: r254315", "tree": {"sha": "ed4b461c1722bd9a12494bc5c1ad769ae22d20f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4b461c1722bd9a12494bc5c1ad769ae22d20f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0469527c52517c543890bb6ec4d82e279c390004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0469527c52517c543890bb6ec4d82e279c390004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0469527c52517c543890bb6ec4d82e279c390004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0469527c52517c543890bb6ec4d82e279c390004/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce12115844ef8f66a28205d1f1e81ea0ccc946b1"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "cc51a722b36cf2a8efce2cca87bdc592ff1e2a49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0469527c52517c543890bb6ec4d82e279c390004/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0469527c52517c543890bb6ec4d82e279c390004/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0469527c52517c543890bb6ec4d82e279c390004", "patch": "@@ -1,3 +1,13 @@\n+2017-11-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/64682\n+\tPR rtl-optimization/69567\n+\tPR rtl-optimization/69737\n+\tPR rtl-optimization/82683\n+\t* combine.c (distribute_notes) <REG_DEAD>: If the new I2 sets the same\n+\tregister mentioned in the note, drop the note, unless it came from I3,\n+\tin which case it should go to I3 again.\n+\n 2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-ssa-dse.c (normalize_ref): Check whether the ranges overlap"}, {"sha": "d5b15cb3caaea17d0843c124c8d7ab9fcd1785c0", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0469527c52517c543890bb6ec4d82e279c390004/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0469527c52517c543890bb6ec4d82e279c390004/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0469527c52517c543890bb6ec4d82e279c390004", "patch": "@@ -14360,6 +14360,17 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t\t  && CALL_P (from_insn)\n \t\t  && find_reg_fusage (from_insn, USE, XEXP (note, 0)))\n \t\tplace = from_insn;\n+\t      else if (i2 && reg_set_p (XEXP (note, 0), PATTERN (i2)))\n+\t\t{\n+\t\t  /* If the new I2 sets the same register that is marked\n+\t\t     dead in the note, we do not in general know where to\n+\t\t     put the note.  One important case we _can_ handle is\n+\t\t     when the note comes from I3.  */\n+\t\t  if (from_insn == i3)\n+\t\t    place = i3;\n+\t\t  else\n+\t\t    break;\n+\t\t}\n \t      else if (reg_referenced_p (XEXP (note, 0), PATTERN (i3)))\n \t\tplace = i3;\n \t      else if (i2 != 0 && next_nonnote_nondebug_insn (i2) == i3\n@@ -14373,11 +14384,6 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t\t       || rtx_equal_p (XEXP (note, 0), elim_i0))\n \t\tbreak;\n \t      tem_insn = i3;\n-\t      /* If the new I2 sets the same register that is marked dead\n-\t\t in the note, we do not know where to put the note.\n-\t\t Give up.  */\n-\t      if (i2 != 0 && reg_set_p (XEXP (note, 0), PATTERN (i2)))\n-\t\tbreak;\n \t    }\n \n \t  if (place == 0)"}]}