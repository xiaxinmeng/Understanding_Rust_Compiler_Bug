{"sha": "935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1YWZmNTJhNjZhNzBlMWU5NmYwYTZhYTdlMGFkMzdlZGEzZjkzYw==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-14T15:16:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-14T15:16:16Z"}, "message": "Merge #369\n\n369: Implement the inline visitor r=philberty a=YizhePKU\n\nThis is a clean implementation of the inline visitor. Should be useful for various cleanups such as #366.\n\nCo-authored-by: YizhePKU <yizhe@pku.edu.cn>", "tree": {"sha": "9cafc30a9f009d554817931556caeb5d87593a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cafc30a9f009d554817931556caeb5d87593a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdwdACRBK7hj4Ov3rIwAAdHIIAKJIXULbbwPZIv2gWAT3AUrC\nDQ9aiG5CZ9ILoxF1DvO3LJXM1tGOT6waKEmU3yrYO0fhP2yEsjbe5USNF5ICDOGh\n55XE/J5OW2BSrmH5qIZkm/3k0NOHbtewo2FlpnLb1rhJsNuGfDLhJu+s9KRIV0wf\ny0rFB8mkD4QBImEOSbpwumjwQZTIBhe/LvwKCHMalEvqJTr789P+PQ4mPSAaPURx\nPgXSmU6drPF00LcDGu67N7kvGiaAqT39P1AJC1sRNf+sWLEjNTIcTpIiGnMAWAsg\ng2jN7WYZFIMY0qdYZq4we9pHnKO1Andpt8vTaGrxzC3wvjJivp69E/+1R3dHb5k=\n=Jh1X\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cafc30a9f009d554817931556caeb5d87593a4a\nparent ce593f09f410e1ab0cfe44a680299bc47ab7885f\nparent f5f32fb4a36c742f0b6b5cac994550b3003c9f3a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618413376 +0000\ncommitter GitHub <noreply@github.com> 1618413376 +0000\n\nMerge #369\n\n369: Implement the inline visitor r=philberty a=YizhePKU\n\nThis is a clean implementation of the inline visitor. Should be useful for various cleanups such as #366.\n\nCo-authored-by: YizhePKU <yizhe@pku.edu.cn>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce593f09f410e1ab0cfe44a680299bc47ab7885f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce593f09f410e1ab0cfe44a680299bc47ab7885f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce593f09f410e1ab0cfe44a680299bc47ab7885f"}, {"sha": "f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5f32fb4a36c742f0b6b5cac994550b3003c9f3a"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "2addc8d786410a2309ce88d90d70b319b580827b", "filename": "gcc/rust/util/rust-inline-visitor.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/gcc%2Frust%2Futil%2Frust-inline-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c/gcc%2Frust%2Futil%2Frust-inline-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-inline-visitor.h?ref=935aff52a66a70e1e96f0a6aa7e0ad37eda3f93c", "patch": "@@ -0,0 +1,95 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// An improved implementation of the inline visitor.\n+// Original idea from https://members.accu.org/index.php/articles/2021\n+\n+#ifndef RUST_INLINE_VISITOR\n+#define RUST_INLINE_VISITOR\n+\n+#include <utility>\n+#include <type_traits>\n+\n+namespace Rust {\n+\n+// Wrapper for the target Visitor we're matching against.\n+// Consumes the final nullptr of the _args linked list.\n+template <typename TargetVisitor> struct EmptyVisitor : TargetVisitor\n+{\n+  EmptyVisitor (std::nullptr_t ptr) {}\n+\n+  using TargetVisitor::visit;\n+};\n+\n+// Wrapper for a (possibly incomplete) Visitor.\n+template <typename BaseVisitor, typename Args> struct VisitorWrapper\n+{\n+  // Lambdas are stored in _args as a linked list and passed to the actual\n+  // visitor when end_visitor() is called.\n+  Args _args;\n+\n+  // The actual visitor being created.\n+  // Each visitor inherits from the last one and implements one more visit().\n+  template <typename T, typename F> struct Visitor : BaseVisitor\n+  {\n+    F _f;\n+\n+    Visitor (std::pair<F, Args> &&args)\n+      : BaseVisitor (std::move (args.second)), _f (std::move (args.first))\n+    {}\n+\n+    using BaseVisitor::visit;\n+    virtual void visit (T &t) final override { _f (t); }\n+  };\n+\n+  VisitorWrapper (Args &&args) : _args (std::move (args)) {}\n+\n+  // Add another visit() method to the visitor.\n+  // _args will be moved over, so don't keep the old wrapper around.\n+  template <typename T, typename F>\n+  VisitorWrapper<Visitor<T, F>, std::pair<F, Args>> on (F &&f)\n+  {\n+    return VisitorWrapper<Visitor<T, F>, std::pair<F, Args>> (\n+      std::make_pair (std::move (f), std::move (_args)));\n+  }\n+\n+  // Returns the finished visitor.\n+  // NOTE: The reference implementation has a bug that exposes this method even\n+  // when BaseVisitor is still an abstract class. The C++11 standard states that\n+  // \"An abstract class shall not be used [...] as a function return type\". GCC\n+  // rejects the buggy code as expected, but Clang accepts the code as long as\n+  // the method is not actually called. Maybe this is a bug in Clang?\n+  template <typename T = BaseVisitor>\n+  typename std::enable_if<std::is_constructible<T, Args>::value, T>::type\n+  end_visitor ()\n+  {\n+    return T (std::move (_args));\n+  }\n+};\n+\n+// The entry point.\n+template <typename TargetVisitor>\n+VisitorWrapper<EmptyVisitor<TargetVisitor>, std::nullptr_t>\n+begin_visitor ()\n+{\n+  return VisitorWrapper<EmptyVisitor<TargetVisitor>, std::nullptr_t> (nullptr);\n+}\n+\n+} // namespace Rust\n+\n+#endif"}]}