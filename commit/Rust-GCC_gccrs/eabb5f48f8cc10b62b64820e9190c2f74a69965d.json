{"sha": "eabb5f48f8cc10b62b64820e9190c2f74a69965d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFiYjVmNDhmOGNjMTBiNjJiNjQ4MjBlOTE5MGMyZjc0YTY5OTY1ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-07-06T11:53:28Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-07-06T11:53:28Z"}, "message": "re PR target/57807 (Compile failure with __builtin_ia32_unpcklpd with -masm=intel)\n\n2013-07-06  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/sse.md (sse_movlhps): Change alternative 3\n\tof operand 2 to \"m\".\n\n2013-07-06  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/57807\n\t* config/i386/sse.md (iptr): New mode attribute.\n\t(sse2_movq128): Add pointer size overrides for Intel asm dialect.\n\t(<sse>_vm<plusminus_insn><mode>3): Ditto.\n\t(<sse>_vmmul<mode>3): Ditto.\n\t(<sse>_vmdiv<mode>3): Ditto.\n\t(sse_vmrcpv4sf2): Ditto.\n\t(<sse>_vmsqrt<mode>2): Ditto.\n\t(sse_vmrsqrtv4sf2): Ditto.\n\t(<sse>_vm<code><mode>3): Ditto.\n\t(avx_vmcmp<mode>3): Ditto.\n\t(<sse>_vmmaskcmp<mode>3): Ditto.\n\t(<sse>_comi): Ditto.\n\t(<sse>_ucomi): Ditto.\n\t(*xop_vmfrcz_<mode>): Ditto.\n\t(*fmai_fmadd_<mode>): Ditto.\n\t(*fmai_fmsub_<mode>): Ditto.\n\t(*fmai_fnmadd_<mode>): Ditto.\n\t(*fmai_fnmsub_<mode>): Ditto.\n\t(*fma4i_vmfmadd_<mode>): Ditto.\n\t(*fma4i_vmfmsub_<mode>): Ditto.\n\t(*fma4i_vmfnmadd_<mode>): Ditto.\n\t(*fma4i_vmfnmsub_<mode>): Ditto.\n\t(*xop_vmfrcz_<mode>): Ditto.\n\t(sse_cvtps2pi): Ditto.\n\t(sse_cvttps2pi): Ditto.\n\t(sse_cvtss2si): Ditto.\n\t(sse_cvtss2si_2): Ditto.\n\t(sse_cvtss2siq_2): Ditto.\n\t(sse_cvttss2si): Ditto.\n\t(sse_cvttss2siq): Ditto.\n\t(sse_cvtsd2si): Ditto.\n\t(sse_cvtsd2si_2): Ditto.\n\t(sse_cvtsd2siq_2): Ditto.\n\t(sse_cvttsd2si): Ditto.\n\t(sse_cvttsd2siq): Ditto.\n\t(sse_cvtsd2ss): Ditto.\n\t(sse_cvtss2sd): Ditto.\n\t(avx2_pbroadcast<mode>): Ditto.\n\t(avx2_pbroadcast<mode>_1): Ditto.\n\t(*avx_vperm_broadcast_v4sf): Ditto.\n\n\t(sse_movhlps): Ditto for movlp[sd]/movhp[sd] alternatives.\n\t(sse_movlhps): Ditto.\n\t(sse_storehps): Ditto.\n\t(sse_loadhps): Ditto.\n\t(sse_storelps): Ditto.\n\t(sse_loadlps): Ditto.\n\t(*vec_concatv4sf): Ditto.\n\t(*vec_interleave_highv2df): Ditto.\n\t(*vec_interleave_lowv2df): Ditto.\n\t(*vec_extractv2df_1_sse): Ditto.\n\t(*vec_extractv2df_0_sse): Ditto.\n\t(sse2_storelpd): Ditto.\n\t(sse2_loadlpd): Ditto.\n\t(sse2_movsd): Ditto.\n\t(*vec_concatv4si): Ditto.\n\t(vec_concatv2di): Ditto.\n\n\t* config/i386/mmx.md (mmx_punpcklbw): Add pointer size overrides\n\tfor Intel asm dialect.\n\t(mmx_punpcklwd): Ditto.\n\t(mmx_punpckldq): Ditto.\n\n\t* config/i386/i386.c (ix86_print_operand) ['H']: Output 'qword ptr'\n\tfor intel assembler dialect.\n\ntestsuite/ChangeLog:\n\n2013-07-06  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/57807\n\t* gcc.target/i386/pr57807.c: New test.\n\nFrom-SVN: r200737", "tree": {"sha": "8f91cb555002725385bba6e317018f5dff51d5b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f91cb555002725385bba6e317018f5dff51d5b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eabb5f48f8cc10b62b64820e9190c2f74a69965d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabb5f48f8cc10b62b64820e9190c2f74a69965d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabb5f48f8cc10b62b64820e9190c2f74a69965d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabb5f48f8cc10b62b64820e9190c2f74a69965d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f6eac9041e87e273c2b955a309ed44364f41544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6eac9041e87e273c2b955a309ed44364f41544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6eac9041e87e273c2b955a309ed44364f41544"}], "stats": {"total": 271, "additions": 187, "deletions": 84}, "files": [{"sha": "ffe2351741cdb205c506201266f7ebcbfec24dae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eabb5f48f8cc10b62b64820e9190c2f74a69965d", "patch": "@@ -1,3 +1,77 @@\n+2013-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (sse_movlhps): Change alternative 3\n+\tof operand 2 to \"m\".\n+\n+2013-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/57807\n+\t* config/i386/sse.md (iptr): New mode attribute.\n+\t(sse2_movq128): Add pointer size overrides for Intel asm dialect.\n+\t(<sse>_vm<plusminus_insn><mode>3): Ditto.\n+\t(<sse>_vmmul<mode>3): Ditto.\n+\t(<sse>_vmdiv<mode>3): Ditto.\n+\t(sse_vmrcpv4sf2): Ditto.\n+\t(<sse>_vmsqrt<mode>2): Ditto.\n+\t(sse_vmrsqrtv4sf2): Ditto.\n+\t(<sse>_vm<code><mode>3): Ditto.\n+\t(avx_vmcmp<mode>3): Ditto.\n+\t(<sse>_vmmaskcmp<mode>3): Ditto.\n+\t(<sse>_comi): Ditto.\n+\t(<sse>_ucomi): Ditto.\n+\t(*xop_vmfrcz_<mode>): Ditto.\n+\t(*fmai_fmadd_<mode>): Ditto.\n+\t(*fmai_fmsub_<mode>): Ditto.\n+\t(*fmai_fnmadd_<mode>): Ditto.\n+\t(*fmai_fnmsub_<mode>): Ditto.\n+\t(*fma4i_vmfmadd_<mode>): Ditto.\n+\t(*fma4i_vmfmsub_<mode>): Ditto.\n+\t(*fma4i_vmfnmadd_<mode>): Ditto.\n+\t(*fma4i_vmfnmsub_<mode>): Ditto.\n+\t(*xop_vmfrcz_<mode>): Ditto.\n+\t(sse_cvtps2pi): Ditto.\n+\t(sse_cvttps2pi): Ditto.\n+\t(sse_cvtss2si): Ditto.\n+\t(sse_cvtss2si_2): Ditto.\n+\t(sse_cvtss2siq_2): Ditto.\n+\t(sse_cvttss2si): Ditto.\n+\t(sse_cvttss2siq): Ditto.\n+\t(sse_cvtsd2si): Ditto.\n+\t(sse_cvtsd2si_2): Ditto.\n+\t(sse_cvtsd2siq_2): Ditto.\n+\t(sse_cvttsd2si): Ditto.\n+\t(sse_cvttsd2siq): Ditto.\n+\t(sse_cvtsd2ss): Ditto.\n+\t(sse_cvtss2sd): Ditto.\n+\t(avx2_pbroadcast<mode>): Ditto.\n+\t(avx2_pbroadcast<mode>_1): Ditto.\n+\t(*avx_vperm_broadcast_v4sf): Ditto.\n+\n+\t(sse_movhlps): Ditto for movlp[sd]/movhp[sd] alternatives.\n+\t(sse_movlhps): Ditto.\n+\t(sse_storehps): Ditto.\n+\t(sse_loadhps): Ditto.\n+\t(sse_storelps): Ditto.\n+\t(sse_loadlps): Ditto.\n+\t(*vec_concatv4sf): Ditto.\n+\t(*vec_interleave_highv2df): Ditto.\n+\t(*vec_interleave_lowv2df): Ditto.\n+\t(*vec_extractv2df_1_sse): Ditto.\n+\t(*vec_extractv2df_0_sse): Ditto.\n+\t(sse2_storelpd): Ditto.\n+\t(sse2_loadlpd): Ditto.\n+\t(sse2_movsd): Ditto.\n+\t(*vec_concatv4si): Ditto.\n+\t(vec_concatv2di): Ditto.\n+\n+\t* config/i386/mmx.md (mmx_punpcklbw): Add pointer size overrides\n+\tfor Intel asm dialect.\n+\t(mmx_punpcklwd): Ditto.\n+\t(mmx_punpckldq): Ditto.\n+\n+\t* config/i386/i386.c (ix86_print_operand) ['H']: Output 'qword ptr'\n+\tfor intel assembler dialect.\n+\n 2013-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/29776"}, {"sha": "4f1215808a682fdf41a493988c832411ab0b0b23", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eabb5f48f8cc10b62b64820e9190c2f74a69965d", "patch": "@@ -14670,6 +14670,9 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  /* It doesn't actually matter what mode we use here, as we're\n \t     only going to use this for printing.  */\n \t  x = adjust_address_nv (x, DImode, 8);\n+\t  /* Output 'qword ptr' for intel assembler dialect.  */\n+\t  if (ASSEMBLER_DIALECT == ASM_INTEL)\n+\t    code = 'q';\n \t  break;\n \n \tcase 'K':"}, {"sha": "12c062687c0034679555cb62ba4017d162d20678", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=eabb5f48f8cc10b62b64820e9190c2f74a69965d", "patch": "@@ -1078,7 +1078,7 @@\n                      (const_int 2) (const_int 10)\n                      (const_int 3) (const_int 11)])))]\n   \"TARGET_MMX\"\n-  \"punpcklbw\\t{%2, %0|%0, %2}\"\n+  \"punpcklbw\\t{%2, %0|%0, %k2}\"\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -1104,7 +1104,7 @@\n           (parallel [(const_int 0) (const_int 4)\n                      (const_int 1) (const_int 5)])))]\n   \"TARGET_MMX\"\n-  \"punpcklwd\\t{%2, %0|%0, %2}\"\n+  \"punpcklwd\\t{%2, %0|%0, %k2}\"\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n \n@@ -1130,7 +1130,7 @@\n \t  (parallel [(const_int 0)\n \t\t     (const_int 2)])))]\n   \"TARGET_MMX\"\n-  \"punpckldq\\t{%2, %0|%0, %2}\"\n+  \"punpckldq\\t{%2, %0|%0, %k2}\"\n   [(set_attr \"type\" \"mmxcvt\")\n    (set_attr \"mode\" \"DI\")])\n "}, {"sha": "439749877f2f8f1e9702c16778411bce9161483b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 91, "deletions": 81, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=eabb5f48f8cc10b62b64820e9190c2f74a69965d", "patch": "@@ -355,6 +355,14 @@\n    (V8SF \"SF\") (V4DF \"DF\")\n    (V4SF \"SF\") (V2DF \"DF\")])\n \n+;; Pointer size override for scalar modes (Intel asm dialect)\n+(define_mode_attr iptr\n+  [(V32QI \"b\") (V16HI \"w\") (V8SI \"k\") (V4DI \"q\")\n+   (V16QI \"b\") (V8HI \"w\") (V4SI \"k\") (V2DI \"q\")\n+   (V8SF \"k\") (V4DF \"q\")\n+   (V4SF \"k\") (V2DF \"q\")\n+   (SF \"k\") (DF \"q\")])\n+\n ;; Number of scalar elements in each vector type\n (define_mode_attr ssescalarnum\n   [(V32QI \"32\") (V16HI \"16\") (V8SI \"8\") (V4DI \"4\")\n@@ -511,7 +519,7 @@\n \t    (parallel [(const_int 0)]))\n \t  (const_int 0)))]\n   \"TARGET_SSE2\"\n-  \"%vmovq\\t{%1, %0|%0, %1}\"\n+  \"%vmovq\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -878,8 +886,8 @@\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   <plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n-   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   <plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n+   v<plusminus_mnemonic><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"prefix\" \"orig,vex\")\n@@ -918,8 +926,8 @@\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   mul<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n-   vmul<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   mul<ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n+   vmul<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssemul\")\n    (set_attr \"prefix\" \"orig,vex\")\n@@ -975,8 +983,8 @@\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   div<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n-   vdiv<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   div<ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n+   vdiv<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssediv\")\n    (set_attr \"prefix\" \"orig,vex\")\n@@ -1004,8 +1012,8 @@\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   rcpss\\t{%1, %0|%0, %1}\n-   vrcpss\\t{%1, %2, %0|%0, %2, %1}\"\n+   rcpss\\t{%1, %0|%0, %k1}\n+   vrcpss\\t{%1, %2, %0|%0, %2, %k1}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"rcp\")\n@@ -1054,8 +1062,8 @@\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   sqrt<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n-   vsqrt<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n+   sqrt<ssescalarmodesuffix>\\t{%1, %0|%0, %<iptr>1}\n+   vsqrt<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %<iptr>1}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"sqrt\")\n@@ -1092,8 +1100,8 @@\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   rsqrtss\\t{%1, %0|%0, %1}\n-   vrsqrtss\\t{%1, %2, %0|%0, %2, %1}\"\n+   rsqrtss\\t{%1, %0|%0, %k1}\n+   vrsqrtss\\t{%1, %2, %0|%0, %2, %k1}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"orig,vex\")\n@@ -1156,8 +1164,8 @@\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   <maxmin_float><ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n-   v<maxmin_float><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   <maxmin_float><ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n+   v<maxmin_float><ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sse\")\n    (set_attr \"btver2_sse_attr\" \"maxmin\")\n@@ -1588,7 +1596,7 @@\n \t (match_dup 1)\n \t (const_int 1)))]\n   \"TARGET_AVX\"\n-  \"vcmp<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vcmp<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %3}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n@@ -1635,8 +1643,8 @@\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   cmp%D3<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n-   vcmp%D3<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   cmp%D3<ssescalarmodesuffix>\\t{%2, %0|%0, %<iptr>2}\n+   vcmp%D3<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %<iptr>2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"length_immediate\" \"1,*\")\n@@ -1653,7 +1661,7 @@\n \t    (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"%vcomi<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  \"%vcomi<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -1673,7 +1681,7 @@\n \t    (match_operand:<ssevecmode> 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)]))))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n-  \"%vucomi<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  \"%vucomi<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n   [(set_attr \"type\" \"ssecomi\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -2246,8 +2254,8 @@\n \t  (const_int 1)))]\n   \"TARGET_FMA\"\n   \"@\n-   vfmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n+   vfmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n+   vfmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2263,8 +2271,8 @@\n \t  (const_int 1)))]\n   \"TARGET_FMA\"\n   \"@\n-   vfmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n+   vfmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n+   vfmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2280,8 +2288,8 @@\n \t  (const_int 1)))]\n   \"TARGET_FMA\"\n   \"@\n-   vfnmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfnmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n+   vfnmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n+   vfnmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2298,8 +2306,8 @@\n \t  (const_int 1)))]\n   \"TARGET_FMA\"\n   \"@\n-   vfnmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n-   vfnmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\"\n+   vfnmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %<iptr>3, %<iptr>2}\n+   vfnmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2328,7 +2336,7 @@\n \t  (match_operand:VF_128 4 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n-  \"vfmadd<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vfmadd<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2343,7 +2351,7 @@\n \t  (match_operand:VF_128 4 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n-  \"vfmsub<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vfmsub<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2358,7 +2366,7 @@\n \t  (match_operand:VF_128 4 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n-  \"vfnmadd<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vfnmadd<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2374,7 +2382,7 @@\n \t  (match_operand:VF_128 4 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_FMA4\"\n-  \"vfnmsub<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  \"vfnmsub<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %<iptr>2, %<iptr>3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -2403,7 +2411,7 @@\n \t\t       UNSPEC_FIX_NOTRUNC)\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_SSE\"\n-  \"cvtps2pi\\t{%1, %0|%0, %1}\"\n+  \"cvtps2pi\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx\")\n    (set_attr \"mode\" \"DI\")])\n@@ -2414,7 +2422,7 @@\n \t  (fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm\"))\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_SSE\"\n-  \"cvttps2pi\\t{%1, %0|%0, %1}\"\n+  \"cvttps2pi\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx\")\n    (set_attr \"prefix_rep\" \"0\")\n@@ -2472,7 +2480,7 @@\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n-  \"%vcvtss2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvtss2si\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -2485,7 +2493,7 @@\n \t(unspec:SI [(match_operand:SF 1 \"nonimmediate_operand\" \"x,m\")]\n \t\t   UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n-  \"%vcvtss2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvtss2si\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2502,7 +2510,7 @@\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvtss2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvtss2si{q}\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -2515,7 +2523,7 @@\n \t(unspec:DI [(match_operand:SF 1 \"nonimmediate_operand\" \"x,m\")]\n \t\t   UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvtss2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvtss2si{q}\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2531,7 +2539,7 @@\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE\"\n-  \"%vcvttss2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvttss2si\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2547,7 +2555,7 @@\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvttss2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvttss2si{q}\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2733,7 +2741,7 @@\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n-  \"%vcvtsd2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvtsd2si\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -2747,7 +2755,7 @@\n \t(unspec:SI [(match_operand:DF 1 \"nonimmediate_operand\" \"x,m\")]\n \t\t   UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n-  \"%vcvtsd2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvtsd2si\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2764,7 +2772,7 @@\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvtsd2si{q}\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n@@ -2777,7 +2785,7 @@\n \t(unspec:DI [(match_operand:DF 1 \"nonimmediate_operand\" \"x,m\")]\n \t\t   UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvtsd2si{q}\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2793,7 +2801,7 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n-  \"%vcvttsd2si\\t{%1, %0|%0, %1}\"\n+  \"%vcvttsd2si\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2810,7 +2818,7 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"x,m\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvttsd2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvttsd2si{q}\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n@@ -2983,8 +2991,8 @@\n   \"TARGET_SSE2\"\n   \"@\n    cvtsd2ss\\t{%2, %0|%0, %2}\n-   cvtsd2ss\\t{%2, %0|%0, %2}\n-   vcvtsd2ss\\t{%2, %1, %0|%0, %1, %2}\"\n+   cvtsd2ss\\t{%2, %0|%0, %q2}\n+   vcvtsd2ss\\t{%2, %1, %0|%0, %1, %q2}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n@@ -3006,8 +3014,8 @@\n   \"TARGET_SSE2\"\n   \"@\n    cvtss2sd\\t{%2, %0|%0, %2}\n-   cvtss2sd\\t{%2, %0|%0, %2}\n-   vcvtss2sd\\t{%2, %1, %0|%0, %1, %2}\"\n+   cvtss2sd\\t{%2, %0|%0, %k2}\n+   vcvtss2sd\\t{%2, %1, %0|%0, %1, %k2}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n@@ -3576,7 +3584,7 @@\n    vmovhlps\\t{%2, %1, %0|%0, %1, %2}\n    movlps\\t{%H2, %0|%0, %H2}\n    vmovlps\\t{%H2, %1, %0|%0, %1, %H2}\n-   %vmovhps\\t{%2, %0|%0, %2}\"\n+   %vmovhps\\t{%2, %0|%q0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex\")\n@@ -3610,7 +3618,7 @@\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \" 0,x,0,x,0\")\n-\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \" x,x,m,x,x\"))\n+\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \" x,x,m,m,x\"))\n \t  (parallel [(const_int 0)\n \t\t     (const_int 1)\n \t\t     (const_int 4)\n@@ -3619,8 +3627,8 @@\n   \"@\n    movlhps\\t{%2, %0|%0, %2}\n    vmovlhps\\t{%2, %1, %0|%0, %1, %2}\n-   movhps\\t{%2, %0|%0, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\n+   movhps\\t{%2, %0|%0, %q2}\n+   vmovhps\\t{%2, %1, %0|%0, %1, %q2}\n    %vmovlps\\t{%2, %H0|%H0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"ssemov\")\n@@ -3944,7 +3952,7 @@\n \t  (parallel [(const_int 2) (const_int 3)])))]\n   \"TARGET_SSE\"\n   \"@\n-   %vmovhps\\t{%1, %0|%0, %1}\n+   %vmovhps\\t{%1, %0|%q0, %1}\n    %vmovhlps\\t{%1, %d0|%d0, %1}\n    %vmovlps\\t{%H1, %d0|%d0, %H1}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -3980,8 +3988,8 @@\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\"   \" m,m,x,x,x\")))]\n   \"TARGET_SSE\"\n   \"@\n-   movhps\\t{%2, %0|%0, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\n+   movhps\\t{%2, %0|%0, %q2}\n+   vmovhps\\t{%2, %1, %0|%0, %1, %q2}\n    movlhps\\t{%2, %0|%0, %2}\n    vmovlhps\\t{%2, %1, %0|%0, %1, %2}\n    %vmovlps\\t{%2, %H0|%H0, %2}\"\n@@ -3997,9 +4005,9 @@\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"TARGET_SSE\"\n   \"@\n-   %vmovlps\\t{%1, %0|%0, %1}\n+   %vmovlps\\t{%1, %0|%q0, %1}\n    %vmovaps\\t{%1, %0|%0, %1}\n-   %vmovlps\\t{%1, %d0|%d0, %1}\"\n+   %vmovlps\\t{%1, %d0|%d0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n@@ -4035,9 +4043,9 @@\n   \"@\n    shufps\\t{$0xe4, %1, %0|%0, %1, 0xe4}\n    vshufps\\t{$0xe4, %1, %2, %0|%0, %2, %1, 0xe4}\n-   movlps\\t{%2, %0|%0, %2}\n-   vmovlps\\t{%2, %1, %0|%0, %1, %2}\n-   %vmovlps\\t{%2, %0|%0, %2}\"\n+   movlps\\t{%2, %0|%0, %q2}\n+   vmovlps\\t{%2, %1, %0|%0, %1, %q2}\n+   %vmovlps\\t{%2, %0|%q0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx,*\")\n    (set_attr \"type\" \"sseshuf,sseshuf,ssemov,ssemov,ssemov\")\n    (set_attr \"length_immediate\" \"1,1,*,*,*\")\n@@ -4149,8 +4157,8 @@\n   \"@\n    movlhps\\t{%2, %0|%0, %2}\n    vmovlhps\\t{%2, %1, %0|%0, %1, %2}\n-   movhps\\t{%2, %0|%0, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n+   movhps\\t{%2, %0|%0, %q2}\n+   vmovhps\\t{%2, %1, %0|%0, %1, %q2}\"\n   [(set_attr \"isa\" \"noavx,avx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"orig,vex,orig,vex\")\n@@ -4625,7 +4633,7 @@\n    %vmovddup\\t{%H1, %0|%0, %H1}\n    movlpd\\t{%H1, %0|%0, %H1}\n    vmovlpd\\t{%H1, %2, %0|%0, %2, %H1}\n-   %vmovhpd\\t{%1, %0|%0, %1}\"\n+   %vmovhpd\\t{%1, %0|%q0, %1}\"\n   [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n   (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"prefix_data16\" \"*,*,*,1,*,1\")\n@@ -4723,9 +4731,9 @@\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}\n    vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n-   %vmovddup\\t{%1, %0|%0, %1}\n-   movhpd\\t{%2, %0|%0, %2}\n-   vmovhpd\\t{%2, %1, %0|%0, %1, %2}\n+   %vmovddup\\t{%1, %0|%0, %q1}\n+   movhpd\\t{%2, %0|%0, %q2}\n+   vmovhpd\\t{%2, %1, %0|%0, %1, %q2}\n    %vmovlpd\\t{%2, %H0|%H0, %2}\"\n   [(set_attr \"isa\" \"noavx,avx,sse3,noavx,avx,*\")\n    (set_attr \"type\" \"sselog,sselog,sselog,ssemov,ssemov,ssemov\")\n@@ -4963,7 +4971,7 @@\n   \"!TARGET_SSE2 && TARGET_SSE\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n-   movhps\\t{%1, %0|%0, %1}\n+   movhps\\t{%1, %0|%q0, %1}\n    movhlps\\t{%1, %0|%0, %1}\n    movlps\\t{%H1, %0|%0, %H1}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -5012,7 +5020,7 @@\n   \"@\n    movlps\\t{%1, %0|%0, %1}\n    movaps\\t{%1, %0|%0, %1}\n-   movlps\\t{%1, %0|%0, %1}\"\n+   movlps\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n@@ -5151,9 +5159,9 @@\n   \"@\n    movsd\\t{%2, %0|%0, %2}\n    vmovsd\\t{%2, %1, %0|%0, %1, %2}\n-   movlpd\\t{%2, %0|%0, %2}\n-   vmovlpd\\t{%2, %1, %0|%0, %1, %2}\n-   %vmovlpd\\t{%2, %0|%0, %2}\n+   movlpd\\t{%2, %0|%0, %q2}\n+   vmovlpd\\t{%2, %1, %0|%0, %1, %q2}\n+   %vmovlpd\\t{%2, %0|%q0, %2}\n    shufpd\\t{$2, %1, %0|%0, %1, 2}\n    movhps\\t{%H1, %0|%0, %H1}\n    vmovhps\\t{%H1, %2, %0|%0, %2, %H1}\n@@ -7547,8 +7555,8 @@\n    punpcklqdq\\t{%2, %0|%0, %2}\n    vpunpcklqdq\\t{%2, %1, %0|%0, %1, %2}\n    movlhps\\t{%2, %0|%0, %2}\n-   movhps\\t{%2, %0|%0, %2}\n-   vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n+   movhps\\t{%2, %0|%0, %q2}\n+   vmovhps\\t{%2, %1, %0|%0, %1, %q2}\"\n   [(set_attr \"isa\" \"sse2_noavx,avx,noavx,noavx,avx\")\n    (set_attr \"type\" \"sselog,sselog,ssemov,ssemov,ssemov\")\n    (set_attr \"prefix\" \"orig,vex,orig,orig,vex\")\n@@ -10201,7 +10209,7 @@\n \t  (match_operand:VF_128 2 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_XOP\"\n-  \"vfrcz<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\"\n+  \"vfrcz<ssescalarmodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n   [(set_attr \"type\" \"ssecvt1\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -10451,20 +10459,22 @@\n \t    (match_operand:<AVXTOSSEMODE> 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX2\"\n-  \"vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  \"vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"avx2_pbroadcast<mode>_1\"\n-  [(set (match_operand:VI_256 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:VI_256 0 \"register_operand\" \"=x,x\")\n \t(vec_duplicate:VI_256\n \t  (vec_select:<ssescalarmode>\n-\t    (match_operand:VI_256 1 \"nonimmediate_operand\" \"xm\")\n+\t    (match_operand:VI_256 1 \"nonimmediate_operand\" \"m,x\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX2\"\n-  \"vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %x1}\"\n+  \"@\n+   vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\n+   vpbroadcast<ssemodesuffix>\\t{%x1, %0|%0, %x1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n@@ -10619,7 +10629,7 @@\n     case 0:\n     case 1:\n       operands[1] = adjust_address_nv (operands[1], SFmode, elt * 4);\n-      return \"vbroadcastss\\t{%1, %0|%0, %1}\";\n+      return \"vbroadcastss\\t{%1, %0|%0, %k1}\";\n     case 2:\n       operands[2] = GEN_INT (elt * 0x55);\n       return \"vpermilps\\t{%2, %1, %0|%0, %1, %2}\";"}, {"sha": "c905313a971d34d71687c4f9822480b3c327ff6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eabb5f48f8cc10b62b64820e9190c2f74a69965d", "patch": "@@ -1,3 +1,8 @@\n+2013-07-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/57807\n+\t* gcc.target/i386/pr57807.c: New test.\n+\n 2013-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/29776"}, {"sha": "48c1e99e96d8263e1fff5dacad7b1cb14b397dad", "filename": "gcc/testsuite/gcc.target/i386/pr57807.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57807.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eabb5f48f8cc10b62b64820e9190c2f74a69965d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57807.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr57807.c?ref=eabb5f48f8cc10b62b64820e9190c2f74a69965d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-msse2 -masm=intel\" } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-require-effective-target masm_intel } */\n+\n+typedef double __v2df __attribute__((__vector_size__(16)));\n+typedef double __m128d __attribute__((__vector_size__(16), __may_alias__));\n+\n+__m128d _mm_unpacklo_pd(__m128d __A, __m128d __B) {\n+  return (__m128d)__builtin_ia32_unpcklpd((__v2df)__A, (__v2df)__B);\n+}"}]}