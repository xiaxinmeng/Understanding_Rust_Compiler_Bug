{"sha": "612b9d1364bbefb708245c6cd5b5bfa2718926e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyYjlkMTM2NGJiZWZiNzA4MjQ1YzZjZDViNWJmYTI3MTg5MjZlNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-16T07:19:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-16T07:19:24Z"}, "message": "tree-ssa-dom.c (dom_valueize): New function.\n\n2015-07-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-dom.c (dom_valueize): New function.\n\t(record_temporary_equivalences): Also record equivalences\n\tfor dominating stmts that have uses of equivalences we are\n\tabout to record.\n\nFrom-SVN: r225860", "tree": {"sha": "9c87181ff8efc2ef85a2ee497faa4320ecf25ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c87181ff8efc2ef85a2ee497faa4320ecf25ed8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/612b9d1364bbefb708245c6cd5b5bfa2718926e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612b9d1364bbefb708245c6cd5b5bfa2718926e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612b9d1364bbefb708245c6cd5b5bfa2718926e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612b9d1364bbefb708245c6cd5b5bfa2718926e6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c3b378b5a9ddba3a66fa24203df5e850b4de3d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3b378b5a9ddba3a66fa24203df5e850b4de3d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3b378b5a9ddba3a66fa24203df5e850b4de3d6"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "47c7c16f6b6738869c96c37d6bd9243a61814400", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612b9d1364bbefb708245c6cd5b5bfa2718926e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612b9d1364bbefb708245c6cd5b5bfa2718926e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=612b9d1364bbefb708245c6cd5b5bfa2718926e6", "patch": "@@ -1,3 +1,10 @@\n+2015-07-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dom.c (dom_valueize): New function.\n+\t(record_temporary_equivalences): Also record equivalences\n+\tfor dominating stmts that have uses of equivalences we are\n+\tabout to record.\n+\n 2015-07-16  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (add_candidate): Remove call to"}, {"sha": "3eb003c728a92b6eca2312a483ea37c9dc03f211", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/612b9d1364bbefb708245c6cd5b5bfa2718926e6/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/612b9d1364bbefb708245c6cd5b5bfa2718926e6/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=612b9d1364bbefb708245c6cd5b5bfa2718926e6", "patch": "@@ -1401,6 +1401,20 @@ simplify_stmt_for_jump_threading (gimple stmt,\n   return lookup_avail_expr (stmt, false);\n }\n \n+/* Valueize hook for gimple_fold_stmt_to_constant_1.  */\n+\n+static tree\n+dom_valueize (tree t)\n+{\n+  if (TREE_CODE (t) == SSA_NAME)\n+    {\n+      tree tem = SSA_NAME_VALUE (t);\n+      if (tem)\n+\treturn tem;\n+    }\n+  return t;\n+}\n+\n /* Record into the equivalence tables any equivalences implied by\n    traversing edge E (which are cached in E->aux).\n \n@@ -1428,7 +1442,6 @@ record_temporary_equivalences (edge e)\n \t additional equivalences.  */\n       if (lhs\n \t  && TREE_CODE (lhs) == SSA_NAME\n-\t  && is_gimple_constant (rhs)\n \t  && TREE_CODE (rhs) == INTEGER_CST)\n \t{\n \t  gimple defstmt = SSA_NAME_DEF_STMT (lhs);\n@@ -1456,6 +1469,41 @@ record_temporary_equivalences (edge e)\n \t    }\n \t}\n \n+      /* If LHS is an SSA_NAME with a new equivalency then try if\n+         stmts with uses of that LHS that dominate the edge destination\n+\t simplify and allow further equivalences to be recorded.  */\n+      if (lhs && TREE_CODE (lhs) == SSA_NAME)\n+\t{\n+\t  use_operand_p use_p;\n+\t  imm_use_iterator iter;\n+\t  FOR_EACH_IMM_USE_FAST (use_p, iter, lhs)\n+\t    {\n+\t      gimple use_stmt = USE_STMT (use_p);\n+\n+\t      /* Only bother to record more equivalences for lhs that\n+\t         can be directly used by e->dest.\n+\t\t ???  If the code gets re-organized to a worklist to\n+\t\t catch more indirect opportunities and it is made to\n+\t\t handle PHIs then this should only consider use_stmts\n+\t\t in basic-blocks we have already visited.  */\n+\t      if (e->dest == gimple_bb (use_stmt)\n+\t\t  || !dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t      e->dest, gimple_bb (use_stmt)))\n+\t\tcontinue;\n+\t      tree lhs2 = gimple_get_lhs (use_stmt);\n+\t      if (lhs2 && TREE_CODE (lhs2) == SSA_NAME)\n+\t\t{\n+\t\t  tree res\n+\t\t    = gimple_fold_stmt_to_constant_1 (use_stmt, dom_valueize,\n+\t\t\t\t\t\t      no_follow_ssa_edges);\n+\t\t  if (res\n+\t\t      && (TREE_CODE (res) == SSA_NAME\n+\t\t\t  || is_gimple_min_invariant (res)))\n+\t\t    record_equality (lhs2, res);\n+\t\t}\n+\t    }\n+\t}\n+\n       /* If we have 0 = COND or 1 = COND equivalences, record them\n \t into our expression hash tables.  */\n       for (i = 0; edge_info->cond_equivalences.iterate (i, &eq); ++i)"}]}