{"sha": "d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZhMDViNDk0YjRiNzE0ZTk5NmE1Y2EwOWM1YTRhMWM0MWRiZDY0OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-27T12:21:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-09-01T09:52:10Z"}, "message": "rtl-optimization/96812 - remap dependence info on RTL loop unrolling\n\nThis carries over the PR87609 fix also to RTL loop unrolling.  The\ngcc.dg/torture/pr90328.c testcase otherwise is miscompiled with\nthe tree-ssa-address.c hunk (or alternatively with -fno-ivopts\non master).  I've tried to find the correct abstraction and\nadjusted two other duplicate_insn_chain users for which I do not\nhave testcases.  There may be other insn-chain copying routines\nthat could be affected but hopefully most appropriately go through\nCFG hooks.\n\n2020-08-27  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/96812\n\t* tree-ssa-address.c (copy_ref_info): Also copy dependence info.\n\t* cfgrtl.h (duplicate_insn_chain): Adjust prototype.\n\t* cfgrtl.c (duplicate_insn_chain): Remap dependence info\n\tif requested.\n\t(cfg_layout_duplicate_bb): Make sure we remap dependence info.\n\t* modulo-sched.c (duplicate_insns_of_cycles): Remap dependence\n\tinfo.\n\t(generate_prolog_epilog): Adjust.\n\t* config/c6x/c6x.c (hwloop_optimize): Remap dependence info.", "tree": {"sha": "0d9de018722a2f47b0fb13e01dd9ecc7439514a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9de018722a2f47b0fb13e01dd9ecc7439514a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37b0cccf4965f13006d2928f57a71e46e341cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37b0cccf4965f13006d2928f57a71e46e341cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37b0cccf4965f13006d2928f57a71e46e341cf8"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "eb5ccd42ed7f1c3d5797a7e2a949c53494c5f673", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "patch": "@@ -61,6 +61,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-pass.h\"\n #include \"print-rtl.h\"\n+#include \"rtl-iter.h\"\n+#include \"gimplify.h\"\n \n /* Disable warnings about missing quoting in GCC diagnostics.  */\n #if __GNUC__ >= 10\n@@ -4199,7 +4201,8 @@ cfg_layout_can_duplicate_bb_p (const_basic_block bb)\n }\n \n rtx_insn *\n-duplicate_insn_chain (rtx_insn *from, rtx_insn *to)\n+duplicate_insn_chain (rtx_insn *from, rtx_insn *to,\n+\t\t      class loop *loop, copy_bb_data *id)\n {\n   rtx_insn *insn, *next, *copy;\n   rtx_note *last;\n@@ -4228,6 +4231,51 @@ duplicate_insn_chain (rtx_insn *from, rtx_insn *to)\n \t      && ANY_RETURN_P (JUMP_LABEL (insn)))\n \t    JUMP_LABEL (copy) = JUMP_LABEL (insn);\n           maybe_copy_prologue_epilogue_insn (insn, copy);\n+\t  /* If requested remap dependence info of cliques brought in\n+\t     via inlining.  */\n+\t  if (id)\n+\t    {\n+\t      subrtx_iterator::array_type array;\n+\t      FOR_EACH_SUBRTX (iter, array, PATTERN (insn), ALL)\n+\t\tif (MEM_P (*iter) && MEM_EXPR (*iter))\n+\t\t  {\n+\t\t    tree op = MEM_EXPR (*iter);\n+\t\t    if (TREE_CODE (op) == WITH_SIZE_EXPR)\n+\t\t      op = TREE_OPERAND (op, 0);\n+\t\t    while (handled_component_p (op))\n+\t\t      op = TREE_OPERAND (op, 0);\n+\t\t    if ((TREE_CODE (op) == MEM_REF\n+\t\t\t || TREE_CODE (op) == TARGET_MEM_REF)\n+\t\t\t&& MR_DEPENDENCE_CLIQUE (op) > 1\n+\t\t\t&& (!loop\n+\t\t\t    || (MR_DEPENDENCE_CLIQUE (op)\n+\t\t\t\t!= loop->owned_clique)))\n+\t\t      {\n+\t\t\tif (!id->dependence_map)\n+\t\t\t  id->dependence_map = new hash_map<dependence_hash,\n+\t\t\t      unsigned short>;\n+\t\t\tbool existed;\n+\t\t\tunsigned short &newc = id->dependence_map->get_or_insert\n+\t\t\t\t\t (MR_DEPENDENCE_CLIQUE (op), &existed);\n+\t\t\tif (!existed)\n+\t\t\t  {\n+\t\t\t    gcc_assert\n+\t\t\t      (MR_DEPENDENCE_CLIQUE (op) <= cfun->last_clique);\n+\t\t\t    newc = ++cfun->last_clique;\n+\t\t\t  }\n+\t\t\t/* We cannot adjust MR_DEPENDENCE_CLIQUE in-place\n+\t\t\t   since MEM_EXPR is shared so make a copy and\n+\t\t\t   walk to the subtree again.  */\n+\t\t\ttree new_expr = unshare_expr (MEM_EXPR (*iter));\n+\t\t\tif (TREE_CODE (new_expr) == WITH_SIZE_EXPR)\n+\t\t\t  new_expr = TREE_OPERAND (new_expr, 0);\n+\t\t\twhile (handled_component_p (new_expr))\n+\t\t\t  new_expr = TREE_OPERAND (new_expr, 0);\n+\t\t\tMR_DEPENDENCE_CLIQUE (new_expr) = newc;\n+\t\t\tset_mem_expr (const_cast <rtx> (*iter), new_expr);\n+\t\t      }\n+\t\t  }\n+\t    }\n \t  break;\n \n \tcase JUMP_TABLE_DATA:\n@@ -4292,12 +4340,14 @@ duplicate_insn_chain (rtx_insn *from, rtx_insn *to)\n /* Create a duplicate of the basic block BB.  */\n \n static basic_block\n-cfg_layout_duplicate_bb (basic_block bb, copy_bb_data *)\n+cfg_layout_duplicate_bb (basic_block bb, copy_bb_data *id)\n {\n   rtx_insn *insn;\n   basic_block new_bb;\n \n-  insn = duplicate_insn_chain (BB_HEAD (bb), BB_END (bb));\n+  class loop *loop = (id && current_loops) ? bb->loop_father : NULL;\n+\n+  insn = duplicate_insn_chain (BB_HEAD (bb), BB_END (bb), loop, id);\n   new_bb = create_basic_block (insn,\n \t\t\t       insn ? get_last_insn () : NULL,\n \t\t\t       EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb);\n@@ -4308,7 +4358,7 @@ cfg_layout_duplicate_bb (basic_block bb, copy_bb_data *)\n       insn = BB_HEADER (bb);\n       while (NEXT_INSN (insn))\n \tinsn = NEXT_INSN (insn);\n-      insn = duplicate_insn_chain (BB_HEADER (bb), insn);\n+      insn = duplicate_insn_chain (BB_HEADER (bb), insn, loop, id);\n       if (insn)\n \tBB_HEADER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n     }\n@@ -4318,7 +4368,7 @@ cfg_layout_duplicate_bb (basic_block bb, copy_bb_data *)\n       insn = BB_FOOTER (bb);\n       while (NEXT_INSN (insn))\n \tinsn = NEXT_INSN (insn);\n-      insn = duplicate_insn_chain (BB_FOOTER (bb), insn);\n+      insn = duplicate_insn_chain (BB_FOOTER (bb), insn, loop, id);\n       if (insn)\n \tBB_FOOTER (new_bb) = unlink_insn_chain (insn, get_last_insn ());\n     }"}, {"sha": "ae62d6cf05ca7e90e6f5e483be2b5127ce66ed88", "filename": "gcc/cfgrtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fcfgrtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fcfgrtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.h?ref=d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "patch": "@@ -49,7 +49,8 @@ extern bool purge_all_dead_edges (void);\n extern bool fixup_abnormal_edges (void);\n extern rtx_insn *unlink_insn_chain (rtx_insn *, rtx_insn *);\n extern void relink_block_chain (bool);\n-extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *);\n+extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *,\n+\t\t\t\t       class loop *, class copy_bb_data *);\n extern void cfg_layout_initialize (int);\n extern void cfg_layout_finalize (void);\n extern void break_superblocks (void);"}, {"sha": "9aa7ef0620c838e0e0dcf8ac26c38010351f63c8", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "patch": "@@ -5600,7 +5600,8 @@ hwloop_optimize (hwloop_info loop)\n       int j;\n       rtx_insn *this_iter;\n \n-      this_iter = duplicate_insn_chain (head_insn, tail_insn);\n+      copy_bb_data id;\n+      this_iter = duplicate_insn_chain (head_insn, tail_insn, NULL, &id);\n       j = 0;\n       while (this_iter)\n \t{"}, {"sha": "6f699a874e3c69349da9cfa1b80f225a95256606", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "patch": "@@ -1085,10 +1085,11 @@ optimize_sc (partial_schedule_ptr ps, ddg_ptr g)\n \n static void\n duplicate_insns_of_cycles (partial_schedule_ptr ps, int from_stage,\n-\t\t\t   int to_stage, rtx count_reg)\n+\t\t\t   int to_stage, rtx count_reg, class loop *loop)\n {\n   int row;\n   ps_insn_ptr ps_ij;\n+  copy_bb_data id;\n \n   for (row = 0; row < ps->ii; row++)\n     for (ps_ij = ps->rows[row]; ps_ij; ps_ij = ps_ij->next_in_row)\n@@ -1113,7 +1114,8 @@ duplicate_insns_of_cycles (partial_schedule_ptr ps, int from_stage,\n \tif (from_stage <= last_u && to_stage >= first_u)\n \t  {\n \t    if (u < ps->g->num_nodes)\n-\t      duplicate_insn_chain (ps_first_note (ps, u), u_insn);\n+\t      duplicate_insn_chain (ps_first_note (ps, u), u_insn,\n+\t\t\t\t    loop, &id);\n \t    else\n \t      emit_insn (copy_rtx (PATTERN (u_insn)));\n \t  }\n@@ -1151,7 +1153,7 @@ generate_prolog_epilog (partial_schedule_ptr ps, class loop *loop,\n     }\n \n   for (i = 0; i < last_stage; i++)\n-    duplicate_insns_of_cycles (ps, 0, i, count_reg);\n+    duplicate_insns_of_cycles (ps, 0, i, count_reg, loop);\n \n   /* Put the prolog on the entry edge.  */\n   e = loop_preheader_edge (loop);\n@@ -1165,7 +1167,7 @@ generate_prolog_epilog (partial_schedule_ptr ps, class loop *loop,\n   start_sequence ();\n \n   for (i = 0; i < last_stage; i++)\n-    duplicate_insns_of_cycles (ps, i + 1, last_stage, count_reg);\n+    duplicate_insns_of_cycles (ps, i + 1, last_stage, count_reg, loop);\n \n   /* Put the epilogue on the exit edge.  */\n   gcc_assert (single_exit (loop));"}, {"sha": "baf495a00bc546337ceccc79378e1a9f9c53fd21", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6a05b494b4b714e996a5ca09c5a4a1c41dbd648/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=d6a05b494b4b714e996a5ca09c5a4a1c41dbd648", "patch": "@@ -1044,6 +1044,16 @@ copy_ref_info (tree new_ref, tree old_ref)\n \t}\n     }\n \n+  /* We can transfer dependence info.  */\n+  if (!MR_DEPENDENCE_CLIQUE (new_ref)\n+      && (TREE_CODE (base) == MEM_REF\n+\t  || TREE_CODE (base) == TARGET_MEM_REF)\n+      && MR_DEPENDENCE_CLIQUE (base))\n+    {\n+      MR_DEPENDENCE_CLIQUE (new_ref) = MR_DEPENDENCE_CLIQUE (base);\n+      MR_DEPENDENCE_BASE (new_ref) = MR_DEPENDENCE_BASE (base);\n+    }\n+\n   /* And alignment info.  Note we cannot transfer misalignment info\n      since that sits on the SSA name but this is flow-sensitive info\n      which we cannot transfer in this generic routine.  */"}]}