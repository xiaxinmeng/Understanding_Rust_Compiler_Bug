{"sha": "f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyZDdmN2MyY2FjNjE2MTJhNzBkMjJlMDNjYjk1ZWQ0N2YzYTRkNA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-10-22T05:32:04Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-10-22T05:32:04Z"}, "message": "aarch64-* and ppc*-linux-gnu long long float/long double mismatch\n\nSome platforms have failed to build because long long float is mapped\nto double rather than long double, and then the attempts to import\nintrinsics for long double in Aux_Long_Long_Float raise warnings\nturned into errors.\n\nThis patch is a work around for the mismatch, arranging for\nAux_Long_Long_Float to map to Aux_Long_Float.\n\nfor  gcc/ada/ChangeLog\n\n\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS): Use\n\ta-nallfl__wraplf.ads on aarch64-* and ppc*-linux-gnu targets.\n\t* libgnat/a-nallfl__wraplf.ads: New.", "tree": {"sha": "12e90187d0ae60f1fab2f117dc0bf6b848841c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e90187d0ae60f1fab2f117dc0bf6b848841c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4/comments", "author": null, "committer": null, "parents": [{"sha": "439407aa2c678a96bd5b430ab9c335e65beb5751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439407aa2c678a96bd5b430ab9c335e65beb5751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439407aa2c678a96bd5b430ab9c335e65beb5751"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "87ee3e94192b4c15b2a854df6696af608df1bdaa", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4", "patch": "@@ -1402,6 +1402,7 @@ ifeq ($(strip $(filter-out aarch64 arm% coff wrs vx%,$(target_cpu) $(target_vend\n     VX=vxworks7\n     EH_MECHANISM=-gcc\n     SIGTRAMP_OBJ=sigtramp-vxworks.o\n+    LIBGNAT_TARGET_PAIRS += a-nallfl.ads<libgnat/a-nallfl__wraplf.ads\n   else\n     ifeq ($(strip $(filter-out arm%, $(target_cpu))),)\n       ARCH_STR=arm\n@@ -1538,6 +1539,7 @@ endif\n ifeq ($(strip $(filter-out aarch64 %qnx,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__qnx.ads \\\n+  a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n   s-intman.adb<libgnarl/s-intman__qnx.adb \\\n   s-osinte.adb<libgnarl/s-osinte__qnx.adb \\\n@@ -1780,6 +1782,7 @@ endif\n ifeq ($(strip $(filter-out %aarch64 freebsd%,$(target_cpu) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<libgnarl/a-intnam__freebsd.ads \\\n+  a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n   s-intman.adb<libgnarl/s-intman__posix.adb \\\n   s-mudido.adb<libgnarl/s-mudido__affinity.adb \\\n@@ -2197,6 +2200,7 @@ ifeq ($(strip $(filter-out powerpc% linux%,$(target_cpu) $(target_os))),)\n   a-exetim.adb<libgnarl/a-exetim__posix.adb \\\n   a-exetim.ads<libgnarl/a-exetim__default.ads \\\n   a-intnam.ads<libgnarl/a-intnam__linux.ads \\\n+  a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n   a-synbar.adb<libgnarl/a-synbar__posix.adb \\\n   a-synbar.ads<libgnarl/a-synbar__posix.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n@@ -2268,6 +2272,7 @@ ifeq ($(strip $(filter-out aarch64% linux%,$(target_cpu) $(target_os))),)\n   a-exetim.adb<libgnarl/a-exetim__posix.adb \\\n   a-exetim.ads<libgnarl/a-exetim__default.ads \\\n   a-intnam.ads<libgnarl/a-intnam__linux.ads \\\n+  a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n   a-synbar.adb<libgnarl/a-synbar__posix.adb \\\n   a-synbar.ads<libgnarl/a-synbar__posix.ads \\\n   s-inmaop.adb<libgnarl/s-inmaop__posix.adb \\\n@@ -2683,6 +2688,7 @@ ifeq ($(strip $(filter-out darwin%,$(target_os))),)\n \n   ifeq ($(strip $(filter-out arm64 aarch64,$(target_cpu))),)\n     LIBGNAT_TARGET_PAIRS += \\\n+      a-nallfl.ads<libgnat/a-nallfl__wraplf.ads \\\n       s-intman.adb<libgnarl/s-intman__susv3.adb \\\n       s-osprim.adb<libgnat/s-osprim__darwin.adb \\\n       $(ATOMICS_TARGET_PAIRS) \\"}, {"sha": "2d5c71dd2d49afe6594bf339be958e5e27f62706", "filename": "gcc/ada/libgnat/a-nallfl__wraplf.ads", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4/gcc%2Fada%2Flibgnat%2Fa-nallfl__wraplf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4/gcc%2Fada%2Flibgnat%2Fa-nallfl__wraplf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nallfl__wraplf.ads?ref=f72d7f7c2cac61612a70d22e03cb95ed47f3a4d4", "patch": "@@ -0,0 +1,87 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--     A D A . N U M E R I C S . A U X . L O N G _ L O N G _ F L O A T      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--              (Long Long Float Wrapper in terms of Long Float)            --\n+--                                                                          --\n+--          Copyright (C) 1992-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the basic computational interface for the\n+--  generic elementary functions. The functions in this unit are\n+--  wrappers for those in the Long Float package.\n+\n+with Ada.Numerics.Aux_Long_Float;\n+\n+package Ada.Numerics.Aux_Long_Long_Float is\n+   pragma Pure;\n+\n+   subtype T is Long_Long_Float;\n+   package Aux renames Ada.Numerics.Aux_Long_Float;\n+   subtype W is Aux.T;\n+\n+   --  Use the Aux implementation.\n+\n+   function Sin (X : T) return T\n+   is (T (Aux.Sin (W (X))));\n+\n+   function Cos (X : T) return T\n+   is (T (Aux.Cos (W (X))));\n+\n+   function Tan (X : T) return T\n+   is (T (Aux.Tan (W (X))));\n+\n+   function Exp (X : T) return T\n+   is (T (Aux.Exp (W (X))));\n+\n+   function Sqrt (X : T) return T\n+   is (T (Aux.Sqrt (W (X))));\n+\n+   function Log (X : T) return T\n+   is (T (Aux.Log (W (X))));\n+\n+   function Acos (X : T) return T\n+   is (T (Aux.Acos (W (X))));\n+\n+   function Asin (X : T) return T\n+   is (T (Aux.Asin (W (X))));\n+\n+   function Atan (X : T) return T\n+   is (T (Aux.Atan (W (X))));\n+\n+   function Sinh (X : T) return T\n+   is (T (Aux.Sinh (W (X))));\n+\n+   function Cosh (X : T) return T\n+   is (T (Aux.Cosh (W (X))));\n+\n+   function Tanh (X : T) return T\n+   is (T (Aux.Tanh (W (X))));\n+\n+   function Pow (X, Y : T) return T\n+   is (T (Aux.Pow (W (X), W (Y))));\n+\n+end Ada.Numerics.Aux_Long_Long_Float;"}]}