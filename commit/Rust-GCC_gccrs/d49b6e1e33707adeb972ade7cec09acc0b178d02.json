{"sha": "d49b6e1e33707adeb972ade7cec09acc0b178d02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ5YjZlMWUzMzcwN2FkZWI5NzJhZGU3Y2VjMDlhY2MwYjE3OGQwMg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-21T18:13:54Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-21T18:13:54Z"}, "message": "real: Do not include gmp.h, mpfr.h, and mpc.h.\n\ngcc/ChangeLog:\n\t* real: Do not include gmp.h, mpfr.h, and mpc.h.\n\t(REAL_VALUE_NEGATE, REAL_VALUE_ABS, real_arithmetic2): Remove.\n\t(real_value_negate, real_value_abs): New prototypes.\n\t(do_mpc_arg2, real_from_mpfr, mpfr_from_real): Move from here...\n\t* realmpfr.h (do_mpc_arg2, real_from_mpfr, mpfr_from_real): ...to here,\n\tnew include file for interface between MPFR and REAL_VALUE_TYPE.\n\t* real.c: Include realmpfr.h.\n\t(real_arithmetic2): Remove legacy function.\n\t(real_value_negate): New.\n\t(real_value_abs): New.\n\t(mfpr_from_real, real_from_mpfr): Move from here...\n\t* realmpfr.c (mpfr_from_real, real_from_mpfr): ...to here, new file.\n\t* builtins.c: Include realmpfr.h.\n\t* fold-const.c: Include realmpfr.h.\n\t(fold_comparison): Use real_value_negate instead of REAL_VALUE_NEGATE.\n\t(fold_negate_const): Likewise.\n\t(fold_abs_const): Use real_value_abs instead of REAL_VALUE_ABS.\n\t* toplev.c: Include realmpfr.h.\n\t* simplify-rtx.c (simplify_const_unary_operation): Use real_value_abs\n\tand real_value_negate.\n\t* fixed-value.c (check_real_for_fixed_mode): Likewise.\n\t* config/arm/arm.c (neg_const_double_rtx_ok_for_fpa): Likewise.\n\t(vfp3_const_double_index): Likewise.\n\t(arm_print_operand): Likewise.\n\t* Makefile.in: Update dependencies.\n\nfortran/ChangeLog:\n\t* trans-const.c: Include realmpfr.h.\n\t* Make-lang.in: Update dependencies.\n\nFrom-SVN: r159679", "tree": {"sha": "d44cc1a6330da7188cdd65b1bfce6a8b5b0818dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44cc1a6330da7188cdd65b1bfce6a8b5b0818dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d49b6e1e33707adeb972ade7cec09acc0b178d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b6e1e33707adeb972ade7cec09acc0b178d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d49b6e1e33707adeb972ade7cec09acc0b178d02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d49b6e1e33707adeb972ade7cec09acc0b178d02/comments", "author": null, "committer": null, "parents": [{"sha": "759149fbf3c844c39b283e487190eed9377b594e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759149fbf3c844c39b283e487190eed9377b594e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759149fbf3c844c39b283e487190eed9377b594e"}], "stats": {"total": 322, "additions": 206, "deletions": 116}, "files": [{"sha": "ee78f2340d8228c3b166ca638a7950e439a47ac2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -1,3 +1,31 @@\n+2010-05-21  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* real: Do not include gmp.h, mpfr.h, and mpc.h.\n+\t(REAL_VALUE_NEGATE, REAL_VALUE_ABS, real_arithmetic2): Remove.\n+\t(real_value_negate, real_value_abs): New prototypes.\n+\t(do_mpc_arg2, real_from_mpfr, mpfr_from_real): Move from here...\n+\t* realmpfr.h (do_mpc_arg2, real_from_mpfr, mpfr_from_real): ...to here,\n+\tnew include file for interface between MPFR and REAL_VALUE_TYPE.\n+\t* real.c: Include realmpfr.h.\n+\t(real_arithmetic2): Remove legacy function.\n+\t(real_value_negate): New.\n+\t(real_value_abs): New.\n+\t(mfpr_from_real, real_from_mpfr): Move from here...\n+\t* realmpfr.c (mpfr_from_real, real_from_mpfr): ...to here, new file.\n+\t* builtins.c: Include realmpfr.h.\n+\t* fold-const.c: Include realmpfr.h.\n+\t(fold_comparison): Use real_value_negate instead of REAL_VALUE_NEGATE.\n+\t(fold_negate_const): Likewise.\n+\t(fold_abs_const): Use real_value_abs instead of REAL_VALUE_ABS.\n+\t* toplev.c: Include realmpfr.h.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Use real_value_abs\n+\tand real_value_negate.\n+\t* fixed-value.c (check_real_for_fixed_mode): Likewise.\n+\t* config/arm/arm.c (neg_const_double_rtx_ok_for_fpa): Likewise.\n+\t(vfp3_const_double_index): Likewise.\n+\t(arm_print_operand): Likewise.\n+\t* Makefile.in: Update dependencies.\n+\n 2010-05-21  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (override_options): Increase the default"}, {"sha": "2af58035a102b99a446f95bc6c1f8bc6a073aa86", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -1285,6 +1285,7 @@ OBJS-common = \\\n \tprint-tree.o \\\n \tprofile.o \\\n \treal.o \\\n+\trealmpfr.o \\\n \trecog.o \\\n \treg-stack.o \\\n \tregcprop.o \\\n@@ -2694,7 +2695,7 @@ tree-pretty-print.o : tree-pretty-print.c $(CONFIG_H) $(SYSTEM_H) \\\n fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(FLAGS_H) $(TOPLEV_H) $(HASHTAB_H) $(EXPR_H) $(RTL_H) \\\n    $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h $(TARGET_H) \\\n-   $(GIMPLE_H)\n+   $(GIMPLE_H) realmpfr.h\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) version.h $(TM_P_H) $(FLAGS_H) $(INPUT_H) $(TOPLEV_H) intl.h \\\n    $(DIAGNOSTIC_H) langhooks.h $(LANGHOOKS_DEF_H) diagnostic.def opts.h \\\n@@ -2728,7 +2729,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h insn-flags.h $(CFGLAYOUT_H) $(CFGLOOP_H) hosthooks.h \\\n    $(CGRAPH_H) $(COVERAGE_H) alloc-pool.h $(GGC_H) $(INTEGRATE_H) \\\n    opts.h params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n-   tree-ssa-alias.h $(PLUGIN_H)\n+   tree-ssa-alias.h $(PLUGIN_H) realmpfr.h\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t  -DTARGET_NAME=\\\"$(target_noncanonical)\\\" \\\n \t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)\n@@ -2807,7 +2808,7 @@ builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(GIMPLE_H) $(FLAGS_H) $(TARGET_H) $(FUNCTION_H) $(REGS_H) \\\n    $(EXPR_H) $(OPTABS_H) insn-config.h $(RECOG_H) output.h typeclass.h \\\n    hard-reg-set.h $(TOPLEV_H) hard-reg-set.h $(EXCEPT_H) $(TM_P_H) $(PREDICT_H) \\\n-   libfuncs.h langhooks.h $(BASIC_BLOCK_H) tree-mudflap.h \\\n+   libfuncs.h langhooks.h $(BASIC_BLOCK_H) tree-mudflap.h realmpfr.h \\\n    $(BUILTINS_DEF) $(MACHMODE_H) $(DIAGNOSTIC_H) $(TREE_FLOW_H) value-prof.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(EXPR_H) $(OPTABS_H) langhooks.h $(TARGET_H) \\\n@@ -2853,7 +2854,8 @@ emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(HASHTAB_H) $(TM_P_H) debug.h langhooks.h $(TREE_PASS_H) gt-emit-rtl.h \\\n    $(DF_H) $(PARAMS_H) $(TARGET_H)\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n-   $(TOPLEV_H) $(TM_P_H) $(REAL_H) dfp.h\n+   $(TOPLEV_H) $(TM_P_H) $(REAL_H) dfp.h realmpfr.h\n+realmpfr.o : realmpfr.c realmpfr.h $(CONFIG_H) $(SYSTEM_H) $(REAL_H)\n dfp.o : dfp.c dfp.h $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t$(TREE_H) \\\n    $(TOPLEV_H) $(TM_P_H) $(REAL_H) $(DECNUM_H)\n fixed-value.o: fixed-value.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "871d6707812fcf302c69a7750522e0c249f2ad06", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"realmpfr.h\"\n #include \"gimple.h\"\n #include \"flags.h\"\n #include \"regs.h\""}, {"sha": "88f21bc289fb640ffdc3ff3f15adb947c2452510", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -7799,7 +7799,7 @@ neg_const_double_rtx_ok_for_fpa (rtx x)\n     init_fp_table ();\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-  r = REAL_VALUE_NEGATE (r);\n+  r = real_value_negate (&r);\n   if (REAL_VALUE_MINUS_ZERO (r))\n     return 0;\n \n@@ -7850,7 +7850,7 @@ vfp3_const_double_index (rtx x)\n \n   /* Extract sign, exponent and mantissa.  */\n   sign = REAL_VALUE_NEGATIVE (r) ? 1 : 0;\n-  r = REAL_VALUE_ABS (r);\n+  r = real_value_abs (&r);\n   exponent = REAL_EXP (&r);\n   /* For the mantissa, we expand into two HOST_WIDE_INTS, apart from the\n      highest (sign) bit, with a fixed binary point at bit point_pos.\n@@ -15133,7 +15133,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n       {\n \tREAL_VALUE_TYPE r;\n \tREAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\tr = REAL_VALUE_NEGATE (r);\n+\tr = real_value_negate (&r);\n \tfprintf (stream, \"%s\", fp_const_from_val (&r));\n       }\n       return;"}, {"sha": "9af431cc8b7c40478ab8200232a92ed271dfdcfd", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -67,7 +67,7 @@ check_real_for_fixed_mode (REAL_VALUE_TYPE *real_value, enum machine_mode mode)\n   real_2expN (&epsilon_value, -GET_MODE_FBIT (mode), mode);\n \n   if (SIGNED_FIXED_POINT_MODE_P (mode))\n-    min_value = REAL_VALUE_NEGATE (max_value);\n+    min_value = real_value_negate (&max_value);\n   else\n     real_from_string (&min_value, \"0.0\");\n "}, {"sha": "17672ad6c439374c55fcfb4a0d6bdee199c5e56c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n+#include \"realmpfr.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"tm_p.h\"\n@@ -8977,7 +8978,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t    return fold_build2_loc (loc, swap_tree_comparison (code), type,\n \t\t\t\tTREE_OPERAND (arg0, 0),\n \t\t\t\tbuild_real (TREE_TYPE (arg1),\n-\t\t\t\t\t    REAL_VALUE_NEGATE (cst)));\n+\t\t\t\t\t    real_value_negate (&cst)));\n \n \t  /* IEEE doesn't distinguish +0 and -0 in comparisons.  */\n \t  /* a CMP (-0) -> a CMP 0  */\n@@ -15166,7 +15167,7 @@ fold_negate_const (tree arg0, tree type)\n       }\n \n     case REAL_CST:\n-      t = build_real (type, REAL_VALUE_NEGATE (TREE_REAL_CST (arg0)));\n+      t = build_real (type, real_value_negate (&TREE_REAL_CST (arg0)));\n       break;\n \n     case FIXED_CST:\n@@ -15225,7 +15226,7 @@ fold_abs_const (tree arg0, tree type)\n \n     case REAL_CST:\n       if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg0)))\n-\tt = build_real (type, REAL_VALUE_NEGATE (TREE_REAL_CST (arg0)));\n+\tt = build_real (type, real_value_negate (&TREE_REAL_CST (arg0)));\n       else\n \tt =  arg0;\n       break;"}, {"sha": "fc996199e5c99e31cdcf59630f0940c004b782b3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -1,3 +1,8 @@\n+2010-05-21  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* trans-const.c: Include realmpfr.h.\n+\t* Make-lang.in: Update dependencies.\n+\n 2010-05-21  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* trans-const.c, trans-types.c, trans-intrinsic.c:"}, {"sha": "b74f9e99d0bd1b22b339b98db67617802fe2543b", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -345,7 +345,7 @@ fortran/trans-decl.o: $(GFORTRAN_TRANS_DEPS) gt-fortran-trans-decl.h \\\n   $(TREE_DUMP_H) debug.h pointer-set.h\n fortran/trans-types.o: $(GFORTRAN_TRANS_DEPS) gt-fortran-trans-types.h \\\n   $(REAL_H) toplev.h $(TARGET_H) $(FLAGS_H) dwarf2out.h\n-fortran/trans-const.o: $(GFORTRAN_TRANS_DEPS)\n+fortran/trans-const.o: $(GFORTRAN_TRANS_DEPS) realmpfr.h\n fortran/trans-expr.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h\n fortran/trans-stmt.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h\n fortran/trans-openmp.o: $(GFORTRAN_TRANS_DEPS)"}, {"sha": "7ced6f44cb9609be039f31a15baf37a32150e1ce", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"realmpfr.h\"\n #include \"toplev.h\"\n #include \"double-int.h\"\n #include \"gfortran.h\""}, {"sha": "8a5799e5d94b2b91c83bb5d0352555ad043886b6", "filename": "gcc/real.c", "status": "modified", "additions": 10, "deletions": 80, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -27,6 +27,7 @@\n #include \"tree.h\"\n #include \"toplev.h\"\n #include \"real.h\"\n+#include \"realmpfr.h\"\n #include \"tm_p.h\"\n #include \"dfp.h\"\n \n@@ -1057,14 +1058,19 @@ real_arithmetic (REAL_VALUE_TYPE *r, int icode, const REAL_VALUE_TYPE *op0,\n   return false;\n }\n \n-/* Legacy.  Similar, but return the result directly.  */\n+REAL_VALUE_TYPE\n+real_value_negate (const REAL_VALUE_TYPE *op0)\n+{\n+  REAL_VALUE_TYPE r;\n+  real_arithmetic (&r, NEGATE_EXPR, op0, NULL);\n+  return r;\n+}\n \n REAL_VALUE_TYPE\n-real_arithmetic2 (int icode, const REAL_VALUE_TYPE *op0,\n-\t\t  const REAL_VALUE_TYPE *op1)\n+real_value_abs (const REAL_VALUE_TYPE *op0)\n {\n   REAL_VALUE_TYPE r;\n-  real_arithmetic (&r, icode, op0, op1);\n+  real_arithmetic (&r, ABS_EXPR, op0, NULL);\n   return r;\n }\n \n@@ -4982,82 +4988,6 @@ real_copysign (REAL_VALUE_TYPE *r, const REAL_VALUE_TYPE *x)\n   r->sign = x->sign;\n }\n \n-/* Convert from REAL_VALUE_TYPE to MPFR.  The caller is responsible\n-   for initializing and clearing the MPFR parameter.  */\n-\n-void\n-mpfr_from_real (mpfr_ptr m, const REAL_VALUE_TYPE *r, mp_rnd_t rndmode)\n-{\n-  /* We use a string as an intermediate type.  */\n-  char buf[128];\n-  int ret;\n-\n-  /* Take care of Infinity and NaN.  */\n-  if (r->cl == rvc_inf)\n-    {\n-      mpfr_set_inf (m, r->sign == 1 ? -1 : 1);\n-      return;\n-    }\n-\n-  if (r->cl == rvc_nan)\n-    {\n-      mpfr_set_nan (m);\n-      return;\n-    }\n-\n-  real_to_hexadecimal (buf, r, sizeof (buf), 0, 1);\n-  /* mpfr_set_str() parses hexadecimal floats from strings in the same\n-     format that GCC will output them.  Nothing extra is needed.  */\n-  ret = mpfr_set_str (m, buf, 16, rndmode);\n-  gcc_assert (ret == 0);\n-}\n-\n-/* Convert from MPFR to REAL_VALUE_TYPE, for a given type TYPE and rounding\n-   mode RNDMODE.  TYPE is only relevant if M is a NaN.  */\n-\n-void\n-real_from_mpfr (REAL_VALUE_TYPE *r, mpfr_srcptr m, tree type, mp_rnd_t rndmode)\n-{\n-  /* We use a string as an intermediate type.  */\n-  char buf[128], *rstr;\n-  mp_exp_t exp;\n-\n-  /* Take care of Infinity and NaN.  */\n-  if (mpfr_inf_p (m))\n-    {\n-      real_inf (r);\n-      if (mpfr_sgn (m) < 0)\n-\t*r = REAL_VALUE_NEGATE (*r);\n-      return;\n-    }\n-\n-  if (mpfr_nan_p (m))\n-    {\n-      real_nan (r, \"\", 1, TYPE_MODE (type));\n-      return;\n-    }\n-\n-  rstr = mpfr_get_str (NULL, &exp, 16, 0, m, rndmode);\n-\n-  /* The additional 12 chars add space for the sprintf below.  This\n-     leaves 6 digits for the exponent which is supposedly enough.  */\n-  gcc_assert (rstr != NULL && strlen (rstr) < sizeof (buf) - 12);\n-\n-  /* REAL_VALUE_ATOF expects the exponent for mantissa * 2**exp,\n-     mpfr_get_str returns the exponent for mantissa * 16**exp, adjust\n-     for that.  */\n-  exp *= 4;\n-\n-  if (rstr[0] == '-')\n-    sprintf (buf, \"-0x.%sp%d\", &rstr[1], (int) exp);\n-  else\n-    sprintf (buf, \"0x.%sp%d\", rstr, (int) exp);\n-\n-  mpfr_free_str (rstr);\n-\n-  real_from_string (r, buf);\n-}\n-\n /* Check whether the real constant value given is an integer.  */\n \n bool"}, {"sha": "d16dc249de90d5f1a1ca7e83a40aa123a41d9ab7", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -22,12 +22,6 @@\n #ifndef GCC_REAL_H\n #define GCC_REAL_H\n \n-#ifndef GENERATOR_FILE\n-#include <gmp.h>\n-#include <mpfr.h>\n-#include <mpc.h>\n-extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n-#endif\n #include \"machmode.h\"\n \n /* An expanded form of the represented number.  */\n@@ -394,14 +388,8 @@ extern REAL_VALUE_TYPE real_value_truncate (enum machine_mode,\n #define REAL_VALUE_TO_INT(plow, phigh, r) \\\n   real_to_integer2 (plow, phigh, &(r))\n \n-extern REAL_VALUE_TYPE real_arithmetic2 (int, const REAL_VALUE_TYPE *,\n-\t\t\t\t\t const REAL_VALUE_TYPE *);\n-\n-#define REAL_VALUE_NEGATE(X) \\\n-  real_arithmetic2 (NEGATE_EXPR, &(X), NULL)\n-\n-#define REAL_VALUE_ABS(X) \\\n-  real_arithmetic2 (ABS_EXPR, &(X), NULL)\n+extern REAL_VALUE_TYPE real_value_negate (const REAL_VALUE_TYPE *);\n+extern REAL_VALUE_TYPE real_value_abs (const REAL_VALUE_TYPE *);\n \n extern int significand_size (enum machine_mode);\n \n@@ -496,14 +484,6 @@ extern void real_round (REAL_VALUE_TYPE *, enum machine_mode,\n /* Set the sign of R to the sign of X.  */\n extern void real_copysign (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n \n-#ifndef GENERATOR_FILE\n-/* Convert between MPFR and REAL_VALUE_TYPE.  The caller is\n-   responsible for initializing and clearing the MPFR parameter.  */\n-\n-extern void real_from_mpfr (REAL_VALUE_TYPE *, mpfr_srcptr, tree, mp_rnd_t);\n-extern void mpfr_from_real (mpfr_ptr, const REAL_VALUE_TYPE *, mp_rnd_t);\n-#endif\n-\n /* Check whether the real constant value given is an integer.  */\n extern bool real_isinteger (const REAL_VALUE_TYPE *c, enum machine_mode mode);\n "}, {"sha": "2836338b109193900f14257905c23613c248ae43", "filename": "gcc/realmpfr.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Frealmpfr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Frealmpfr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frealmpfr.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -0,0 +1,101 @@\n+/* Conversion routines from GCC internal float representation to MPFR.\n+   Copyright (C) 2010\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"realmpfr.h\"\n+#include \"tree.h\"\t/* For TYPE_MODE in real_from_mpfr.  */\n+\n+/* Convert from REAL_VALUE_TYPE to MPFR.  The caller is responsible\n+   for initializing and clearing the MPFR parameter.  */\n+\n+void\n+mpfr_from_real (mpfr_ptr m, const REAL_VALUE_TYPE *r, mp_rnd_t rndmode)\n+{\n+  /* We use a string as an intermediate type.  */\n+  char buf[128];\n+  int ret;\n+\n+  /* Take care of Infinity and NaN.  */\n+  if (r->cl == rvc_inf)\n+    {\n+      mpfr_set_inf (m, r->sign == 1 ? -1 : 1);\n+      return;\n+    }\n+\n+  if (r->cl == rvc_nan)\n+    {\n+      mpfr_set_nan (m);\n+      return;\n+    }\n+\n+  real_to_hexadecimal (buf, r, sizeof (buf), 0, 1);\n+  /* mpfr_set_str() parses hexadecimal floats from strings in the same\n+     format that GCC will output them.  Nothing extra is needed.  */\n+  ret = mpfr_set_str (m, buf, 16, rndmode);\n+  gcc_assert (ret == 0);\n+}\n+\n+/* Convert from MPFR to REAL_VALUE_TYPE, for a given type TYPE and rounding\n+   mode RNDMODE.  TYPE is only relevant if M is a NaN.  */\n+\n+void\n+real_from_mpfr (REAL_VALUE_TYPE *r, mpfr_srcptr m, tree type, mp_rnd_t rndmode)\n+{\n+  /* We use a string as an intermediate type.  */\n+  char buf[128], *rstr;\n+  mp_exp_t exp;\n+\n+  /* Take care of Infinity and NaN.  */\n+  if (mpfr_inf_p (m))\n+    {\n+      real_inf (r);\n+      if (mpfr_sgn (m) < 0)\n+\t*r = real_value_negate (r);\n+      return;\n+    }\n+\n+  if (mpfr_nan_p (m))\n+    {\n+      real_nan (r, \"\", 1, TYPE_MODE (type));\n+      return;\n+    }\n+\n+  rstr = mpfr_get_str (NULL, &exp, 16, 0, m, rndmode);\n+\n+  /* The additional 12 chars add space for the sprintf below.  This\n+     leaves 6 digits for the exponent which is supposedly enough.  */\n+  gcc_assert (rstr != NULL && strlen (rstr) < sizeof (buf) - 12);\n+\n+  /* REAL_VALUE_ATOF expects the exponent for mantissa * 2**exp,\n+     mpfr_get_str returns the exponent for mantissa * 16**exp, adjust\n+     for that.  */\n+  exp *= 4;\n+\n+  if (rstr[0] == '-')\n+    sprintf (buf, \"-0x.%sp%d\", &rstr[1], (int) exp);\n+  else\n+    sprintf (buf, \"0x.%sp%d\", rstr, (int) exp);\n+\n+  mpfr_free_str (rstr);\n+\n+  real_from_string (r, buf);\n+}\n+"}, {"sha": "ab234e9195d456761edc324d0281de9ee66b7224", "filename": "gcc/realmpfr.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Frealmpfr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Frealmpfr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frealmpfr.h?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -0,0 +1,40 @@\n+/* Definitions of floating-point conversion from compiler\n+   internal format to MPFR.\n+   Copyright (C) 2010\n+   Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_REALGMP_H\n+#define GCC_REALGMP_H\n+\n+#include <gmp.h>\n+#include <mpfr.h>\n+#include <mpc.h>\n+#include \"real.h\"\n+\n+/* In builtins.c.  */\n+extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n+\n+/* Convert between MPFR and REAL_VALUE_TYPE.  The caller is\n+   responsible for initializing and clearing the MPFR parameter.  */\n+\n+extern void real_from_mpfr (REAL_VALUE_TYPE *, mpfr_srcptr, tree, mp_rnd_t);\n+extern void mpfr_from_real (mpfr_ptr, const REAL_VALUE_TYPE *, mp_rnd_t);\n+\n+#endif /* ! GCC_REALGMP_H */\n+"}, {"sha": "b38ab2e59912dce35e7d45e2f9754c8607ac34ab", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -1481,10 +1481,10 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  d = t;\n \t  break;\n \tcase ABS:\n-\t  d = REAL_VALUE_ABS (d);\n+\t  d = real_value_abs (&d);\n \t  break;\n \tcase NEG:\n-\t  d = REAL_VALUE_NEGATE (d);\n+\t  d = real_value_negate (&d);\n \t  break;\n \tcase FLOAT_TRUNCATE:\n \t  d = real_value_truncate (mode, d);"}, {"sha": "364a2aafcf59ccfb2ff1ca0e0da07233223113d1", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d49b6e1e33707adeb972ade7cec09acc0b178d02/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d49b6e1e33707adeb972ade7cec09acc0b178d02", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"line-map.h\"\n #include \"input.h\"\n #include \"tree.h\"\n+#include \"realmpfr.h\"\t/* For GMP/MPFR/MPC versions, in print_version.  */\n #include \"version.h\"\n #include \"rtl.h\"\n #include \"tm_p.h\""}]}