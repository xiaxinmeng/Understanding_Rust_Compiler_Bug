{"sha": "d057c8669b2ca758096697826647bdc06f77c336", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1N2M4NjY5YjJjYTc1ODA5NjY5NzgyNjY0N2JkYzA2Zjc3YzMzNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-23T14:31:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-23T14:31:44Z"}, "message": "generic-match-head.c: Include cgraph.h.\n\n2015-07-23  Richard Biener  <rguenther@suse.de>\n\n\t* generic-match-head.c: Include cgraph.h.\n\t* gimple-match-head.c: Likewise.\n\t* tree-ssa-sccvn.c (free_scc_vn): Guard against newly created\n\tSSA names.\n\t* fold-const.c (fold_binary_loc): Move &A ==/!= &B simplification...\n\t* match.pd: ...to a pattern here.  Add &A ==/!= 0 simplification\n\tpattern.\n\nFrom-SVN: r226111", "tree": {"sha": "b825dc9fc48e85dddf5705132c0c5adb5a343656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b825dc9fc48e85dddf5705132c0c5adb5a343656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d057c8669b2ca758096697826647bdc06f77c336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d057c8669b2ca758096697826647bdc06f77c336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d057c8669b2ca758096697826647bdc06f77c336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d057c8669b2ca758096697826647bdc06f77c336/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc891fe75e30646dea032b06ab484d814c7e05b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc891fe75e30646dea032b06ab484d814c7e05b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc891fe75e30646dea032b06ab484d814c7e05b6"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "cc07d768c1293a647e6d4ea9cdb96d8d83c5c470", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057c8669b2ca758096697826647bdc06f77c336/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057c8669b2ca758096697826647bdc06f77c336/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d057c8669b2ca758096697826647bdc06f77c336", "patch": "@@ -1,3 +1,13 @@\n+2015-07-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* generic-match-head.c: Include cgraph.h.\n+\t* gimple-match-head.c: Likewise.\n+\t* tree-ssa-sccvn.c (free_scc_vn): Guard against newly created\n+\tSSA names.\n+\t* fold-const.c (fold_binary_loc): Move &A ==/!= &B simplification...\n+\t* match.pd: ...to a pattern here.  Add &A ==/!= 0 simplification\n+\tpattern.\n+\n 2015-07-23  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.c (fold_gimple_cond): Do not require folding"}, {"sha": "886922fcbcfaae24f90d991404c0d583d0a4173b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d057c8669b2ca758096697826647bdc06f77c336", "patch": "@@ -11082,29 +11082,6 @@ fold_binary_loc (location_t loc,\n \t  && code == NE_EXPR)\n         return non_lvalue_loc (loc, fold_convert_loc (loc, type, arg0));\n \n-      /* If this is an equality comparison of the address of two non-weak,\n-\t unaliased symbols neither of which are extern (since we do not\n-\t have access to attributes for externs), then we know the result.  */\n-      if (TREE_CODE (arg0) == ADDR_EXPR\n-\t  && DECL_P (TREE_OPERAND (arg0, 0))\n-\t  && TREE_CODE (arg1) == ADDR_EXPR\n-\t  && DECL_P (TREE_OPERAND (arg1, 0)))\n-\t{\n-\t  int equal;\n-\n-\t  if (decl_in_symtab_p (TREE_OPERAND (arg0, 0))\n-\t      && decl_in_symtab_p (TREE_OPERAND (arg1, 0)))\n-\t    equal = symtab_node::get_create (TREE_OPERAND (arg0, 0))\n-\t\t    ->equal_address_to (symtab_node::get_create\n-\t\t\t\t\t  (TREE_OPERAND (arg1, 0)));\n-\t  else\n-\t    equal = TREE_OPERAND (arg0, 0) == TREE_OPERAND (arg1, 0);\n-\t  if (equal != 2)\n-\t    return constant_boolean_node (equal\n-\t\t\t\t          ? code == EQ_EXPR : code != EQ_EXPR,\n-\t\t\t\t          type);\n-\t}\n-\n       /* Similarly for a BIT_XOR_EXPR;  X ^ C1 == C2 is X == (C1 ^ C2).  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && TREE_CODE (arg1) == INTEGER_CST"}, {"sha": "0a7038dfc864e28ba1f1ca04a0c810638cff8f6e", "filename": "gcc/generic-match-head.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Fgeneric-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Fgeneric-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.c?ref=d057c8669b2ca758096697826647bdc06f77c336", "patch": "@@ -46,8 +46,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"dumpfile.h\"\n #include \"target.h\"\n+#include \"cgraph.h\"\n #include \"generic-match.h\"\n \n+\n /* Routine to determine if the types T1 and T2 are effectively\n    the same for GENERIC.  If T1 or T2 is not a type, the test\n    applies to their TREE_TYPE.  */"}, {"sha": "2c66dccb26024ce3de62024801b3f112d11af26e", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=d057c8669b2ca758096697826647bdc06f77c336", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"dumpfile.h\"\n #include \"target.h\"\n+#include \"cgraph.h\"\n #include \"gimple-match.h\"\n \n "}, {"sha": "9c181f6e1424f06ed16b89c7f86a65a24e9003d0", "filename": "gcc/match.pd", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d057c8669b2ca758096697826647bdc06f77c336", "patch": "@@ -1754,7 +1754,28 @@ along with GCC; see the file COPYING3.  If not see\n  (simplify\n   (cmp (convert?@3 (bit_xor @0 INTEGER_CST@1)) INTEGER_CST@2)\n   (if (tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@0)))\n-   (cmp @0 (bit_xor @1 (convert @2))))))\n+   (cmp @0 (bit_xor @1 (convert @2)))))\n+   \n+ /* If this is an equality comparison of the address of two non-weak,\n+    unaliased symbols neither of which are extern (since we do not\n+    have access to attributes for externs), then we know the result.  */\n+ (simplify\n+  (cmp (convert? addr@0) (convert? addr@1))\n+  (if (decl_in_symtab_p (TREE_OPERAND (@0, 0))\n+       && decl_in_symtab_p (TREE_OPERAND (@1, 0)))\n+   (with\n+    {\n+      int equal = symtab_node::get_create (TREE_OPERAND (@0, 0))\n+           ->equal_address_to (symtab_node::get_create (TREE_OPERAND (@1, 0)));\n+    }\n+    (if (equal != 2)\n+     { constant_boolean_node (equal ? cmp == EQ_EXPR : cmp != EQ_EXPR, type); }))))\n+\n+ (simplify\n+  (cmp (convert? addr@0) integer_zerop)\n+  (if (tree_single_nonzero_warnv_p (@0, NULL))\n+   { constant_boolean_node (cmp == NE_EXPR, type); })))\n+\n \n /* bool_var != 0 becomes bool_var.  */\n (simplify"}, {"sha": "ab4b1100b8ce5c166545520c84c724d8a294c823", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d057c8669b2ca758096697826647bdc06f77c336/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=d057c8669b2ca758096697826647bdc06f77c336", "patch": "@@ -4223,6 +4223,8 @@ free_scc_vn (void)\n     {\n       tree name = ssa_name (i);\n       if (name\n+\t  && SSA_NAME_VERSION (name) < vn_ssa_aux_table.length ()\n+\t  && vn_ssa_aux_table[SSA_NAME_VERSION (name)]\n \t  && VN_INFO (name)->needs_insertion)\n \trelease_ssa_name (name);\n     }"}]}