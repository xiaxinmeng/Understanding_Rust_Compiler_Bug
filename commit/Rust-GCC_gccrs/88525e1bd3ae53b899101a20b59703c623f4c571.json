{"sha": "88525e1bd3ae53b899101a20b59703c623f4c571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg1MjVlMWJkM2FlNTNiODk5MTAxYTIwYjU5NzAzYzYyM2Y0YzU3MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2006-09-04T15:21:50Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2006-09-04T15:21:50Z"}, "message": "PR 23287 Revert my 2006-09-01 patch.\n\ncp/\n\tPR 23287 Revert my 2006-09-01 patch.\n\t* parser.c: Reverted.\n\t* pt.c: Reverted.\ntestsuite/\n\tPR c++/23287 Revert my 2006-09-01 patch\n\t* g++.dg/parse/dtor12.C: Remove.\n\nFrom-SVN: r116679", "tree": {"sha": "764968dae60c3f1936e60a86a285d648374b8c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764968dae60c3f1936e60a86a285d648374b8c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88525e1bd3ae53b899101a20b59703c623f4c571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88525e1bd3ae53b899101a20b59703c623f4c571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88525e1bd3ae53b899101a20b59703c623f4c571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88525e1bd3ae53b899101a20b59703c623f4c571/comments", "author": null, "committer": null, "parents": [{"sha": "c4338a62e0f61177962f0ff361bc679bab91d07d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4338a62e0f61177962f0ff361bc679bab91d07d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4338a62e0f61177962f0ff361bc679bab91d07d"}], "stats": {"total": 269, "additions": 96, "deletions": 173}, "files": [{"sha": "673554f2dcfa9b44badddc8b8b993e9d342ee4dc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88525e1bd3ae53b899101a20b59703c623f4c571", "patch": "@@ -1,12 +1,18 @@\n+2006-09-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR 23287 Revert my 2006-09-01 patch.\n+\t* parser.c: Reverted.\n+\t* pt.c: Reverted.\n+\n 2006-09-02  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/27670\n-        PR c++/27493\n-        PR c++/27494\n-        PR c++/27397\n-        * parser.c (cp_parser_template_parameter_list): Add\n-        invalid template parameters to the parameter list as\n-        error_mark_node.\n+\tPR c++/27670\n+\tPR c++/27493\n+\tPR c++/27494\n+\tPR c++/27397\n+\t* parser.c (cp_parser_template_parameter_list): Add\n+\tinvalid template parameters to the parameter list as\n+\terror_mark_node.\n \n 2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "a4e5f37eece9a118bfbdff8e734b632255c8a6b7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 42, "deletions": 107, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=88525e1bd3ae53b899101a20b59703c623f4c571", "patch": "@@ -1393,9 +1393,9 @@ static bool cp_parser_translation_unit\n static tree cp_parser_primary_expression\n   (cp_parser *, bool, bool, bool, cp_id_kind *);\n static tree cp_parser_id_expression\n-  (cp_parser *, bool, bool, bool *, bool, bool, bool);\n+  (cp_parser *, bool, bool, bool *, bool, bool);\n static tree cp_parser_unqualified_id\n-  (cp_parser *, bool, bool, bool, bool, bool);\n+  (cp_parser *, bool, bool, bool, bool);\n static tree cp_parser_nested_name_specifier_opt\n   (cp_parser *, bool, bool, bool, bool);\n static tree cp_parser_nested_name_specifier\n@@ -1720,7 +1720,7 @@ static bool cp_parser_check_template_parameters\n static tree cp_parser_simple_cast_expression\n   (cp_parser *);\n static tree cp_parser_global_scope_opt\n-  (cp_parser *, bool, bool);\n+  (cp_parser *, bool);\n static bool cp_parser_constructor_declarator_p\n   (cp_parser *, bool);\n static tree cp_parser_function_definition_from_specifiers_and_declarator\n@@ -2182,8 +2182,7 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n \t\t\t\t/*check_dependency_p=*/true,\n \t\t\t\t/*template_p=*/NULL,\n \t\t\t\t/*declarator_p=*/true,\n-\t\t\t\t/*optional_p=*/false,\n-\t\t\t\t/*member_p=*/false);\n+\t\t\t\t/*optional_p=*/false);\n   /* After the id-expression, there should be a plain identifier,\n      otherwise this is not a simple variable declaration. Also, if\n      the scope is dependent, we cannot do much.  */\n@@ -3062,8 +3061,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t\t\t     /*check_dependency_p=*/true,\n \t\t\t\t     &template_p,\n \t\t\t\t     /*declarator_p=*/false,\n-\t\t\t\t     /*optional_p=*/false,\n-\t\t\t\t     /*member_p=*/false);\n+\t\t\t\t     /*optional_p=*/false);\n \tif (id_expression == error_mark_node)\n \t  return error_mark_node;\n \ttoken = cp_lexer_peek_token (parser->lexer);\n@@ -3197,8 +3195,7 @@ cp_parser_id_expression (cp_parser *parser,\n \t\t\t bool check_dependency_p,\n \t\t\t bool *template_p,\n \t\t\t bool declarator_p,\n-\t\t\t bool optional_p,\n-\t\t\t bool member_p)\n+\t\t\t bool optional_p)\n {\n   bool global_scope_p;\n   bool nested_name_specifier_p;\n@@ -3209,10 +3206,8 @@ cp_parser_id_expression (cp_parser *parser,\n \n   /* Look for the optional `::' operator.  */\n   global_scope_p\n-    = (cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false,\n-\t\t\t\t   /*object_scope_valid_p=*/member_p)\n+    = (cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false)\n        != NULL_TREE);\n-  \n   /* Look for the optional nested-name-specifier.  */\n   nested_name_specifier_p\n     = (cp_parser_nested_name_specifier_opt (parser,\n@@ -3244,8 +3239,7 @@ cp_parser_id_expression (cp_parser *parser,\n       unqualified_id = cp_parser_unqualified_id (parser, *template_p,\n \t\t\t\t\t\t check_dependency_p,\n \t\t\t\t\t\t declarator_p,\n-\t\t\t\t\t\t /*optional_p=*/false,\n-\t\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t\t /*optional_p=*/false);\n       /* Restore the SAVED_SCOPE for our caller.  */\n       parser->scope = saved_scope;\n       parser->object_scope = saved_object_scope;\n@@ -3303,7 +3297,8 @@ cp_parser_id_expression (cp_parser *parser,\n   else\n     return cp_parser_unqualified_id (parser, template_keyword_p,\n \t\t\t\t     /*check_dependency_p=*/true,\n-\t\t\t\t     declarator_p, optional_p, member_p);\n+\t\t\t\t     declarator_p,\n+\t\t\t\t     optional_p);\n }\n \n /* Parse an unqualified-id.\n@@ -3333,8 +3328,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t\t  bool template_keyword_p,\n \t\t\t  bool check_dependency_p,\n \t\t\t  bool declarator_p,\n-\t\t\t  bool optional_p,\n-\t\t\t  bool member_p)\n+\t\t\t  bool optional_p)\n {\n   cp_token *token;\n \n@@ -3462,7 +3456,6 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    if (cp_parser_parse_definitely (parser))\n \t      done = true;\n \t  }\n-\n \t/* In \"N::S::~S\", look in \"N\" as well.  */\n \tif (!done && scope && qualifying_scope)\n \t  {\n@@ -3481,56 +3474,24 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    if (cp_parser_parse_definitely (parser))\n \t      done = true;\n \t  }\n-\t/* In \"p->~T\", look in the scope given by \"*p\" as well.  */\n-\telse if (!done && member_p)\n+\t/* In \"p->S::~T\", look in the scope given by \"*p\" as well.  */\n+\telse if (!done && object_scope)\n \t  {\n-\t    if (!object_scope)\n-\t      {\n-\t\t/* It's a dependent expression, so just parse the\n-\t\t   dtor name.  */\n-\t\ttree id;\n-\n-\t\tif (template_keyword_p)\n-\t\t  /* It's a template-id.  */\n-\t\t  id = cp_parser_template_id (parser, true,\n-\t\t\t\t\t      check_dependency_p,\n-\t\t\t\t\t      declarator_p);\n-\t\telse\n-\t\t  {\n-\t\t    /* Otherwise, it's an ordinary identifier.  */\n-\t\t    id = cp_parser_identifier (parser);\n-\t\t    /* If ID is a template type parm, then use that\n-\t\t       directly.  */\n-\t\t    if (TREE_TYPE (id)\n-\t\t\t&& TREE_CODE (TREE_TYPE (id)) == TEMPLATE_TYPE_PARM)\n-\t\t      id = TREE_TYPE (id);\n-\t\t  }\n-\n-\t\tif (id != error_mark_node)\n-\t\t  id = build_nt (BIT_NOT_EXPR, id);\n-\t\treturn id;\n-\t      }\n-\n \t    cp_parser_parse_tentatively (parser);\n \t    parser->scope = object_scope;\n \t    parser->object_scope = NULL_TREE;\n \t    parser->qualifying_scope = NULL_TREE;\n \t    type_decl\n \t      = cp_parser_class_name (parser,\n-\t\t\t\t\t/*typename_keyword_p=*/false,\n+\t\t\t\t      /*typename_keyword_p=*/false,\n \t\t\t\t      /*template_keyword_p=*/false,\n \t\t\t\t      none_type,\n \t\t\t\t      /*check_dependency=*/false,\n \t\t\t\t      /*class_head_p=*/false,\n \t\t\t\t      declarator_p);\n-\t    /* The name is not qualified, so reset the parser scopes\n-\t       so our callers do not get confused.  */\n-\t    parser->object_scope = object_scope;\n-\t    parser->scope = NULL_TREE;\n \t    if (cp_parser_parse_definitely (parser))\n \t      done = true;\n \t  }\n-\t\n \t/* Look in the surrounding context.  */\n \tif (!done)\n \t  {\n@@ -4521,12 +4482,11 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n   parser->qualifying_scope = NULL_TREE;\n   parser->object_scope = NULL_TREE;\n   *idk = CP_ID_KIND_NONE;\n-\n   /* Enter the scope corresponding to the type of the object\n      given by the POSTFIX_EXPRESSION.  */\n-  scope = TREE_TYPE (postfix_expression);\n-  if (!dependent_p && scope)\n+  if (!dependent_p && TREE_TYPE (postfix_expression) != NULL_TREE)\n     {\n+      scope = TREE_TYPE (postfix_expression);\n       /* According to the standard, no expression should ever have\n \t reference type.  Unfortunately, we do not currently match\n \t the standard in this respect in that our internal representation\n@@ -4540,8 +4500,11 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \t  error (\"%qE does not have class type\", postfix_expression);\n \t  scope = NULL_TREE;\n \t}\n-      else if (!dependent_p)\n+      else\n \tscope = complete_type_or_else (scope, NULL_TREE);\n+      /* Let the name lookup machinery know that we are processing a\n+\t class member access expression.  */\n+      parser->context->object_type = scope;\n       /* If something went wrong, we want to be able to discern that case,\n \t as opposed to the case where there was no SCOPE due to the type\n \t of expression being dependent.  */\n@@ -4553,10 +4516,6 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n       if (scope == error_mark_node)\n \tpostfix_expression = error_mark_node;\n     }\n-  /* Let the name lookup machinery know that we are processing a class\n-     member access expression.  */\n-  parser->context->object_type = scope;\n-  parser->object_scope = scope;\n \n   /* Assume this expression is not a pseudo-destructor access.  */\n   pseudo_destructor_p = false;\n@@ -4594,8 +4553,7 @@ cp_parser_postfix_dot_deref_expression (cp_parser *parser,\n \t       /*check_dependency_p=*/true,\n \t       &template_p,\n \t       /*declarator_p=*/false,\n-\t       /*optional_p=*/false,\n-\t       /*member_p=*/true));\n+\t       /*optional_p=*/false));\n       /* In general, build a SCOPE_REF if the member name is qualified.\n \t However, if the name was not dependent and has already been\n \t resolved; there is no need to build the SCOPE_REF.  For example;\n@@ -4800,9 +4758,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n   *type = error_mark_node;\n \n   /* Look for the optional `::' operator.  */\n-  cp_parser_global_scope_opt (parser,\n-\t\t\t      /*current_scope_valid_p=*/true,\n-\t\t\t      /*object_scop_valid_p=*/true);\n+  cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/true);\n   /* Look for the optional nested-name-specifier.  */\n   nested_name_specifier_p\n     = (cp_parser_nested_name_specifier_opt (parser,\n@@ -5113,8 +5069,7 @@ cp_parser_new_expression (cp_parser* parser)\n   /* Look for the optional `::' operator.  */\n   global_scope_p\n     = (cp_parser_global_scope_opt (parser,\n-\t\t\t\t   /*current_scope_valid_p=*/false,\n-\t\t\t\t   /*object_scope_valid_p=*/false)\n+\t\t\t\t   /*current_scope_valid_p=*/false)\n        != NULL_TREE);\n   /* Look for the `new' operator.  */\n   cp_parser_require_keyword (parser, RID_NEW, \"`new'\");\n@@ -5412,8 +5367,7 @@ cp_parser_delete_expression (cp_parser* parser)\n   /* Look for the optional `::' operator.  */\n   global_scope_p\n     = (cp_parser_global_scope_opt (parser,\n-\t\t\t\t   /*current_scope_valid_p=*/false,\n-\t\t\t\t   /*object_scope_valid_p=*/false)\n+\t\t\t\t   /*current_scope_valid_p=*/false)\n        != NULL_TREE);\n   /* Look for the `delete' keyword.  */\n   cp_parser_require_keyword (parser, RID_DELETE, \"`delete'\");\n@@ -8068,8 +8022,7 @@ cp_parser_mem_initializer_id (cp_parser* parser)\n   /* Look for the optional `::' operator.  */\n   global_scope_p\n     = (cp_parser_global_scope_opt (parser,\n-\t\t\t\t   /*current_scope_valid_p=*/false,\n-\t\t\t\t   /*object_scope_valid_p=*/false)\n+\t\t\t\t   /*current_scope_valid_p=*/false)\n        != NULL_TREE);\n   /* Look for the optional nested-name-specifier.  The simplest way to\n      implement:\n@@ -8648,8 +8601,7 @@ cp_parser_type_parameter (cp_parser* parser)\n \t\t\t\t\t /*check_dependency_p=*/true,\n \t\t\t\t\t /*template_p=*/&is_template,\n \t\t\t\t\t /*declarator_p=*/false,\n-\t\t\t\t\t /*optional_p=*/false,\n-\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t /*optional_p=*/false);\n \t    if (TREE_CODE (default_argument) == TYPE_DECL)\n \t      /* If the id-expression was a template-id that refers to\n \t\t a template-class, we already have the declaration here,\n@@ -9214,8 +9166,7 @@ cp_parser_template_argument (cp_parser* parser)\n \t\t\t\t      /*check_dependency_p=*/true,\n \t\t\t\t      &template_p,\n \t\t\t\t      /*declarator_p=*/false,\n-\t\t\t\t      /*optional_p=*/false,\n-\t\t\t\t      /*member_p=*/false);\n+\t\t\t\t      /*optional_p=*/false);\n   /* If the next token isn't a `,' or a `>', then this argument wasn't\n      really finished.  */\n   if (!cp_parser_next_token_ends_template_argument_p (parser))\n@@ -9855,8 +9806,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       /* Look for the optional `::' operator.  */\n       global_p\n \t= (cp_parser_global_scope_opt (parser,\n-\t\t\t\t       /*current_scope_valid_p=*/false,\n-\t\t\t\t       /*object_scope_valid_p=*/false)\n+\t\t\t\t       /*current_scope_valid_p=*/false)\n \t   != NULL_TREE);\n       /* Look for the nested-name specifier.  */\n       qualified_p\n@@ -10081,8 +10031,7 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n   /* Look for the `::' operator.  */\n   cp_parser_global_scope_opt (parser,\n-\t\t\t      /*current_scope_valid_p=*/false,\n-\t\t\t      /*object_scope_valid_p=*/false);\n+\t\t\t      /*current_scope_valid_p=*/false);\n   /* Look for the nested-name-specifier.  */\n   if (tag_type == typename_type)\n     {\n@@ -10617,8 +10566,7 @@ cp_parser_qualified_namespace_specifier (cp_parser* parser)\n {\n   /* Look for the optional `::'.  */\n   cp_parser_global_scope_opt (parser,\n-\t\t\t      /*current_scope_valid_p=*/false,\n-\t\t\t      /*object_scope_valid_p=*/false);\n+\t\t\t      /*current_scope_valid_p=*/false);\n \n   /* Look for the optional nested-name-specifier.  */\n   cp_parser_nested_name_specifier_opt (parser,\n@@ -10663,8 +10611,7 @@ cp_parser_using_declaration (cp_parser* parser)\n   /* Look for the optional global scope qualification.  */\n   global_scope_p\n     = (cp_parser_global_scope_opt (parser,\n-\t\t\t\t   /*current_scope_valid_p=*/false,\n-\t\t\t\t   /*object_scope_valid_p=*/false)\n+\t\t\t\t   /*current_scope_valid_p=*/false)\n        != NULL_TREE);\n \n   /* If we saw `typename', or didn't see `::', then there must be a\n@@ -10690,8 +10637,7 @@ cp_parser_using_declaration (cp_parser* parser)\n \t\t\t\t\t /*template_keyword_p=*/false,\n \t\t\t\t\t /*check_dependency_p=*/true,\n \t\t\t\t\t /*declarator_p=*/true,\n-\t\t\t\t\t /*optional_p=*/false,\n-\t\t\t\t\t /*member_p=*/false);\n+\t\t\t\t\t /*optional_p=*/false);\n \n   /* The function we call to handle a using-declaration is different\n      depending on what scope we are in.  */\n@@ -10745,8 +10691,7 @@ cp_parser_using_directive (cp_parser* parser)\n   /* And the `namespace' keyword.  */\n   cp_parser_require_keyword (parser, RID_NAMESPACE, \"`namespace'\");\n   /* Look for the optional `::' operator.  */\n-  cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false,\n-\t\t\t      /*object_scope_valid_p=*/false);\n+  cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false);\n   /* And the optional nested-name-specifier.  */\n   cp_parser_nested_name_specifier_opt (parser,\n \t\t\t\t       /*typename_keyword_p=*/false,\n@@ -11814,8 +11759,7 @@ cp_parser_ptr_operator (cp_parser* parser,\n       cp_parser_parse_tentatively (parser);\n       /* Look for the optional `::' operator.  */\n       cp_parser_global_scope_opt (parser,\n-\t\t\t\t  /*current_scope_valid_p=*/false,\n-\t\t\t\t  /*object_scope_valid_p=*/false);\n+\t\t\t\t  /*current_scope_valid_p=*/false);\n       /* Look for the nested-name specifier.  */\n       cp_parser_nested_name_specifier (parser,\n \t\t\t\t       /*typename_keyword_p=*/false,\n@@ -11955,8 +11899,7 @@ cp_parser_declarator_id (cp_parser* parser, bool optional_p)\n \t\t\t\t/*check_dependency_p=*/false,\n \t\t\t\t/*template_p=*/NULL,\n \t\t\t\t/*declarator_p=*/true,\n-\t\t\t\toptional_p,\n-\t\t\t\t/*member_p=*/false);\n+\t\t\t\toptional_p);\n   if (id && BASELINK_P (id))\n     id = BASELINK_FUNCTIONS (id);\n   return id;\n@@ -13161,8 +13104,7 @@ cp_parser_class_head (cp_parser* parser,\n      issuing an error about it later if this really is a\n      class-head.  If it turns out just to be an elaborated type\n      specifier, remain silent.  */\n-  if (cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false,\n-\t\t\t\t  /*object_scope_valid_p=*/false))\n+  if (cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false))\n     qualified_p = true;\n \n   push_deferring_access_checks (dk_no_check);\n@@ -14148,8 +14090,7 @@ cp_parser_base_specifier (cp_parser* parser)\n     }\n \n   /* Look for the optional `::' operator.  */\n-  cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false,\n-\t\t\t      /*object_scope_valid_p=*/false);\n+  cp_parser_global_scope_opt (parser, /*current_scope_valid_p=*/false);\n   /* Look for the nested-name-specifier.  The simplest way to\n      implement:\n \n@@ -15198,8 +15139,7 @@ cp_parser_check_template_parameters (cp_parser* parser,\n    present, and NULL_TREE otherwise.  */\n \n static tree\n-cp_parser_global_scope_opt (cp_parser* parser, bool current_scope_valid_p,\n-\t\t\t    bool object_scope_valid_p)\n+cp_parser_global_scope_opt (cp_parser* parser, bool current_scope_valid_p)\n {\n   cp_token *token;\n \n@@ -15218,15 +15158,12 @@ cp_parser_global_scope_opt (cp_parser* parser, bool current_scope_valid_p,\n \n       return parser->scope;\n     }\n-\n-  if (!current_scope_valid_p)\n+  else if (!current_scope_valid_p)\n     {\n       parser->scope = NULL_TREE;\n       parser->qualifying_scope = NULL_TREE;\n+      parser->object_scope = NULL_TREE;\n     }\n-  \n-  if (!object_scope_valid_p)\n-    parser->object_scope = NULL_TREE;\n \n   return NULL_TREE;\n }\n@@ -15264,8 +15201,7 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n \n   /* Look for the optional `::' operator.  */\n   cp_parser_global_scope_opt (parser,\n-\t\t\t      /*current_scope_valid_p=*/false,\n-\t\t\t      /*object_scope_valid_p=*/false);\n+\t\t\t      /*current_scope_valid_p=*/false);\n   /* Look for the nested-name-specifier.  */\n   nested_name_p\n     = (cp_parser_nested_name_specifier_opt (parser,\n@@ -17972,8 +17908,7 @@ cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,\n \t\t\t\t      /*check_dependency_p=*/true,\n \t\t\t\t      /*template_p=*/NULL,\n \t\t\t\t      /*declarator_p=*/false,\n-\t\t\t\t      /*optional_p=*/false,\n-\t\t\t\t      /*member_p=*/false);\n+\t\t\t\t      /*optional_p=*/false);\n       if (name == error_mark_node)\n \tgoto skip_comma;\n "}, {"sha": "79d9de4e4ce79fd0134258696318901de197f5f8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=88525e1bd3ae53b899101a20b59703c623f4c571", "patch": "@@ -9200,14 +9200,6 @@ tsubst_copy_and_build (tree t,\n \t  member = tsubst_baselink (member,\n \t\t\t\t    non_reference (TREE_TYPE (object)),\n \t\t\t\t    args, complain, in_decl);\n-\telse if (TREE_CODE (member) == BIT_NOT_EXPR\n-\t\t && !TYPE_P (TREE_OPERAND (member, 0)))\n-\t  {\n-\t    tree id = TREE_OPERAND (member, 0);\n-\t    id = make_typename_type (object_type, id, typename_type, complain);\n-\t    gcc_assert (TREE_CODE (id) != TYPENAME_TYPE);\n-\t    member = build_nt (BIT_NOT_EXPR, id);\n-\t  }\n \telse\n \t  member = tsubst_copy (member, args, complain, in_decl);\n \tif (member == error_mark_node)"}, {"sha": "d2ca50ee831d0c532a89e14b9d56a10f106f66e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88525e1bd3ae53b899101a20b59703c623f4c571/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88525e1bd3ae53b899101a20b59703c623f4c571", "patch": "@@ -1,19 +1,24 @@\n+2006-09-04  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/23287 Revert my 2006-09-01 patch\n+\t* g++.dg/parse/dtor12.C: Remove.\n+\n 2006-09-02  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c+/27670\n-        * g++.dg/template/operator9.C: New test.\n+\tPR c+/27670\n+\t* g++.dg/template/operator9.C: New test.\n \n-        PR c++/27493\n-        * g++.dg/template/operator7.C: New test.\n+\tPR c++/27493\n+\t* g++.dg/template/operator7.C: New test.\n \n-        PR c++/27494\n-        * g++.dg/template/operator8.C: New test.\n+\tPR c++/27494\n+\t* g++.dg/template/operator8.C: New test.\n \n-        PR c++/27397\n-        * g++.dg/template/crash57.C: New test.\n+\tPR c++/27397\n+\t* g++.dg/template/crash57.C: New test.\n \n-        * g++.dg/template/typedef4.C: Adjust error markers.\n-        * g++.dg/template/typedef5.C: Likewise.\n+\t* g++.dg/template/typedef4.C: Adjust error markers.\n+\t* g++.dg/template/typedef5.C: Likewise.\n \t\n 2006-09-02  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -130,8 +135,8 @@\n \n 2006-08-27  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/26573\n-        * g++.dg/other/static2.C: New test. \n+\tPR c++/26573\n+\t* g++.dg/other/static2.C: New test. \n \t\n 2006-08-26  Roger Sayle  <roger@eyesopen.com>\n \n@@ -144,19 +149,19 @@\n \n 2006-08-26  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/28736\n-        * g++.dg/template/void10.C: New test.\n+\tPR c++/28736\n+\t* g++.dg/template/void10.C: New test.\n \n-        PR c++/28737\n-        * g++.dg/template/void8.C: New test.\n+\tPR c++/28737\n+\t* g++.dg/template/void8.C: New test.\n \n-        PR c+_+/28738\n-        * g++.dg/template/void9.C: New test.\n+\tPR c+_+/28738\n+\t* g++.dg/template/void9.C: New test.\n \n-        * g++.dg/template/void3.C: Adjust error markers.\n-        * g++.dg/template/void4.C: Likewise.\n-        * g++.dg/template/crash55.C: Likewise.\n-        * g++.dg/template/void7.C: Likewise\n+\t* g++.dg/template/void3.C: Adjust error markers.\n+\t* g++.dg/template/void4.C: Likewise.\n+\t* g++.dg/template/crash55.C: Likewise.\n+\t* g++.dg/template/void7.C: Likewise\n \t\n 2006-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -267,7 +272,7 @@\n \n 2006-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n-        PR C++/28450\n+\tPR C++/28450\n \t* g++.dg/ext/vector4.C: New test.\n \t* g++.dg/ext/complex1.C: New test.\n \n@@ -292,15 +297,15 @@\n \n 2006-08-21  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/26269\n-        * g++.dg/other/error14.C: New test.\n+\tPR c++/26269\n+\t* g++.dg/other/error14.C: New test.\n \n-        PR c++/28505\n-        * g++.dg/parse/ctor7.C: New test.\n-        * g++.dg/parse/ctor8.C: Likewise.\n+\tPR c++/28505\n+\t* g++.dg/parse/ctor7.C: New test.\n+\t* g++.dg/parse/ctor8.C: Likewise.\n \n \tPR c++/28741\n-        * g++.dg/template/void7.C: New test. \n+\t* g++.dg/template/void7.C: New test. \n \t\n 2006-08-21  Olivier Hainque  <hainque@adacore.com>\n \n@@ -742,14 +747,14 @@\n \n 2006-07-28  Lee Millward  <lee.millward@codesourcery.com>\n \n-        PR c++/27668\n-        * g++.dg/template/crash55.C: New test.\n+\tPR c++/27668\n+\t* g++.dg/template/crash55.C: New test.\n \n-        PR c++/27962\n-        * g++.dg/template/nontype16.C: New test.\n+\tPR c++/27962\n+\t* g++.dg/template/nontype16.C: New test.\n \n-        * g++.dg/template/void2.C: Adjust error markers.\n-        * g++.dg/template/nontype5.C: Adjust error markers.\n+\t* g++.dg/template/void2.C: Adjust error markers.\n+\t* g++.dg/template/nontype5.C: Adjust error markers.\n \t\n 2006-07-27  Arjan van de Ven <arjan@linux.intel.com>\n \n@@ -1620,7 +1625,7 @@\n \t* gcc.dg/sibcall-7.c: Do not run on ia64-*-* platforms.\n \n 2006-06-05  Dorit Nuzman  <dorit@il.ibm.com>\n-            Victor Kaplansky  <victork@il.ibm.com>\n+\t    Victor Kaplansky  <victork@il.ibm.com>\n \n \tPR tree-optimizations/26360\n \t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"no-tree-dce\""}, {"sha": "d964662178e6d21c67264bb40a02c31331899fbd", "filename": "gcc/testsuite/g++.dg/parse/dtor12.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4338a62e0f61177962f0ff361bc679bab91d07d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4338a62e0f61177962f0ff361bc679bab91d07d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor12.C?ref=c4338a62e0f61177962f0ff361bc679bab91d07d", "patch": "@@ -1,15 +0,0 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n-// Contributed by Nathan Sidwell 1 Sep 2006 <nathan@codesourcery.com>\n-\n-// PR 23287: Failure to parse dependent dtor name\n-// Origin:Wolfgang Bangerth  <bangerth@dealii.org>\n-\n-\n-template <class T> struct A {}; \n- \n-template <class T> void f(A<T> *ptr) { \n-  ptr->~A(); \n-}\n-\n-template void f<void> (A<void> *);\n-"}]}