{"sha": "1008df90cca4a4f49f2a898115f8756fafff3187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwOGRmOTBjY2E0YTRmNDlmMmE4OTgxMTVmODc1NmZhZmZmMzE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-29T14:18:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-29T14:18:55Z"}, "message": "re PR rtl-optimization/90257 (8% degradation on cpu2006 403.gcc starting with r270484)\n\n\tPR rtl-optimization/90257\n\t* cfgrtl.c (flow_active_insn_p): Return true for USE of a function\n\treturn value.\n\n\tRevert the revert:\n\t2019-04-21  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/90178\n\tRevert:\n\t2018-11-21  Uros Bizjak  <ubizjak@gmail.com>\n\n\tRevert the revert:\n\t2013-10-26  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tRevert:\n\t2013-10-25  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* lra-spills.c (lra_final_code_change): Remove useless move insns.\n\nFrom-SVN: r270653", "tree": {"sha": "65b74e56f1a118c9e0f26cb15c7ca45a6794cce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65b74e56f1a118c9e0f26cb15c7ca45a6794cce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1008df90cca4a4f49f2a898115f8756fafff3187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1008df90cca4a4f49f2a898115f8756fafff3187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1008df90cca4a4f49f2a898115f8756fafff3187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1008df90cca4a4f49f2a898115f8756fafff3187/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e29671cb258f486e498a0697f88861ff351de50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e29671cb258f486e498a0697f88861ff351de50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e29671cb258f486e498a0697f88861ff351de50"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "0c2b51a46812ee8c87e2c7bd9105f7e0db8273ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1008df90cca4a4f49f2a898115f8756fafff3187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1008df90cca4a4f49f2a898115f8756fafff3187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1008df90cca4a4f49f2a898115f8756fafff3187", "patch": "@@ -1,3 +1,24 @@\n+2019-04-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/90257\n+\t* cfgrtl.c (flow_active_insn_p): Return true for USE of a function\n+\treturn value.\n+\n+\tRevert the revert:\n+\t2019-04-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/90178\n+\tRevert:\n+\t2018-11-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tRevert the revert:\n+\t2013-10-26  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tRevert:\n+\t2013-10-25  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* lra-spills.c (lra_final_code_change): Remove useless move insns.\n+\n 2019-04-29  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa.c (insert_debug_temp_for_var_def): For {CLOBBER}"}, {"sha": "e06fb8d5a408c1bbb5bca49c044d5803e80c4c12", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1008df90cca4a4f49f2a898115f8756fafff3187/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1008df90cca4a4f49f2a898115f8756fafff3187/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=1008df90cca4a4f49f2a898115f8756fafff3187", "patch": "@@ -543,7 +543,7 @@ update_bb_for_insn (basic_block bb)\n }\n \n \f\n-/* Like active_insn_p, except keep the return value clobber around\n+/* Like active_insn_p, except keep the return value use or clobber around\n    even after reload.  */\n \n static bool\n@@ -556,8 +556,12 @@ flow_active_insn_p (const rtx_insn *insn)\n      programs that fail to return a value.  Its effect is to\n      keep the return value from being live across the entire\n      function.  If we allow it to be skipped, we introduce the\n-     possibility for register lifetime confusion.  */\n-  if (GET_CODE (PATTERN (insn)) == CLOBBER\n+     possibility for register lifetime confusion.\n+     Similarly, keep a USE of the function return value, otherwise\n+     the USE is dropped and we could fail to thread jump if USE\n+     appears on some paths and not on others, see PR90257.  */\n+  if ((GET_CODE (PATTERN (insn)) == CLOBBER\n+       || GET_CODE (PATTERN (insn)) == USE)\n       && REG_P (XEXP (PATTERN (insn), 0))\n       && REG_FUNCTION_VALUE_P (XEXP (PATTERN (insn), 0)))\n     return true;"}, {"sha": "c19b76a579cf7285096031db1801059c6d578c7a", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1008df90cca4a4f49f2a898115f8756fafff3187/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1008df90cca4a4f49f2a898115f8756fafff3187/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=1008df90cca4a4f49f2a898115f8756fafff3187", "patch": "@@ -740,6 +740,7 @@ lra_final_code_change (void)\n   int i, hard_regno;\n   basic_block bb;\n   rtx_insn *insn, *curr;\n+  rtx set;\n   int max_regno = max_reg_num ();\n \n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n@@ -818,5 +819,19 @@ lra_final_code_change (void)\n \t      }\n \t  if (insn_change_p)\n \t    lra_update_operator_dups (id);\n+\n+\t  if ((set = single_set (insn)) != NULL\n+\t      && REG_P (SET_SRC (set)) && REG_P (SET_DEST (set))\n+\t      && REGNO (SET_SRC (set)) == REGNO (SET_DEST (set)))\n+\t    {\n+\t      /* Remove an useless move insn.  IRA can generate move\n+\t\t insns involving pseudos.  It is better remove them\n+\t\t earlier to speed up compiler a bit.  It is also\n+\t\t better to do it here as they might not pass final RTL\n+\t\t check in LRA, (e.g. insn moving a control register\n+\t\t into itself).  */\n+\t      lra_invalidate_insn_data (insn);\n+\t      delete_insn (insn);\n+\t    }\n \t}\n }"}]}