{"sha": "59f89d34775aaf2a88881273713e485abb560bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmODlkMzQ3NzVhYWYyYTg4ODgxMjczNzEzZTQ4NWFiYjU2MGJlZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-02T02:57:26Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-02T02:57:26Z"}, "message": "re PR middle-end/32668 (The type-generic builtins apply default promotions)\n\ngcc/cp:\n\tPR middle-end/32668\n\t* call.c (magic_varargs_p): Honor the \"type generic\" attribute.\n\ngcc/testsuite:\n\t* g++.dg/torture/type-generic-1.C: New.\n\t* gcc.dg/pr28796-2.c: Move tests ...\n\t* gcc.dg/tg-tests.h: ... here.\n\t* gcc.dg/torture/type-generic-1.c: New.\n\nFrom-SVN: r127146", "tree": {"sha": "110c275cde5018c78a949eba77f12c20fe2df92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/110c275cde5018c78a949eba77f12c20fe2df92a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f89d34775aaf2a88881273713e485abb560bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f89d34775aaf2a88881273713e485abb560bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f89d34775aaf2a88881273713e485abb560bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f89d34775aaf2a88881273713e485abb560bee/comments", "author": null, "committer": null, "parents": [{"sha": "cf4a86e3f3355942901d962a94ee20fa868c36c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4a86e3f3355942901d962a94ee20fa868c36c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4a86e3f3355942901d962a94ee20fa868c36c6"}], "stats": {"total": 146, "additions": 39, "deletions": 107}, "files": [{"sha": "6bbdac6ea854a0348db696425e884ed95484330d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59f89d34775aaf2a88881273713e485abb560bee", "patch": "@@ -1,3 +1,8 @@\n+2007-08-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/32668\n+\t* call.c (magic_varargs_p): Honor the \"type generic\" attribute.\n+\n 2007-07-30  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/32108"}, {"sha": "31ca3c2d7f63f204f2e465bb5ac56666f09acc78", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=59f89d34775aaf2a88881273713e485abb560bee", "patch": "@@ -4816,6 +4816,8 @@ magic_varargs_p (tree fn)\n \treturn true;\n \n       default:;\n+\treturn lookup_attribute (\"type generic\",\n+\t\t\t\t TYPE_ATTRIBUTES (TREE_TYPE (fn))) != 0;\n       }\n \n   return false;"}, {"sha": "7e9392b23c67e8cc57e5bc4cfa40e6516ff92772", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59f89d34775aaf2a88881273713e485abb560bee", "patch": "@@ -1,3 +1,10 @@\n+2007-08-01  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* g++.dg/torture/type-generic-1.C: New.\n+\t* gcc.dg/pr28796-2.c: Move tests ...\n+\t* gcc.dg/tg-tests.h: ... here.\n+\t* gcc.dg/torture/type-generic-1.c: New.\n+\n 2007-08-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR libfortran/32954"}, {"sha": "89f87f3b2c7bddb4cd38822d71b485c638aabce8", "filename": "gcc/testsuite/g++.dg/torture/type-generic-1.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C?ref=59f89d34775aaf2a88881273713e485abb560bee", "patch": "@@ -0,0 +1,11 @@\n+/* Do the type-generic tests.  Unlike pr28796-2.c, we test these\n+   without any fast-math flags.  */\n+\n+/* { dg-do run } */\n+\n+#include \"../../gcc.dg/tg-tests.h\"\n+\n+int main(void)\n+{\n+  return main_tests ();\n+}"}, {"sha": "6a9eff827b76e1b611005736be224c36f55866e0", "filename": "gcc/testsuite/gcc.dg/pr28796-2.c", "status": "modified", "additions": 3, "deletions": 107, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c?ref=59f89d34775aaf2a88881273713e485abb560bee", "patch": "@@ -2,113 +2,9 @@\n /* { dg-options \"-O2 -funsafe-math-optimizations -fno-finite-math-only\" } */\n /* { dg-options \"-mieee -O2 -funsafe-math-optimizations -fno-finite-math-only\" { target alpha*-*-* } } */\n \n-extern void abort (void);\n+#include \"tg-tests.h\"\n \n-void __attribute__ ((__noinline__))\n-foo_1 (float f, double d, long double ld,\n-       int res_unord, int res_isnan, int res_isinf,\n-       int res_isfin, int res_isnorm)\n+int main(void)\n {\n-  if (__builtin_isunordered (f, 0) != res_unord)\n-    abort ();\n-  if (__builtin_isunordered (0, f) != res_unord)\n-    abort ();\n-  if (__builtin_isunordered (d, 0) != res_unord)\n-    abort ();\n-  if (__builtin_isunordered (0, d) != res_unord)\n-    abort ();\n-  if (__builtin_isunordered (ld, 0) != res_unord)\n-    abort ();\n-  if (__builtin_isunordered (0, ld) != res_unord)\n-    abort ();\n-\n-  if (__builtin_isnan (f) != res_isnan)\n-    abort ();\n-  if (__builtin_isnan (d) != res_isnan)\n-    abort ();\n-  if (__builtin_isnan (ld) != res_isnan)\n-    abort ();\n-  if (__builtin_isnanf (f) != res_isnan)\n-    abort ();\n-  if (__builtin_isnanl (ld) != res_isnan)\n-    abort ();\n-\n-  if (__builtin_isinf (f) != res_isinf)\n-    abort ();\n-  if (__builtin_isinf (d) != res_isinf)\n-    abort ();\n-  if (__builtin_isinf (ld) != res_isinf)\n-    abort ();\n-  if (__builtin_isinff (f) != res_isinf)\n-    abort ();\n-  if (__builtin_isinfl (ld) != res_isinf)\n-    abort ();\n-\n-  if (__builtin_isnormal (f) != res_isnorm)\n-    abort ();\n-  if (__builtin_isnormal (d) != res_isnorm)\n-    abort ();\n-  if (__builtin_isnormal (ld) != res_isnorm)\n-    abort ();\n-\n-  if (__builtin_isfinite (f) != res_isfin)\n-    abort ();\n-  if (__builtin_isfinite (d) != res_isfin)\n-    abort ();\n-  if (__builtin_isfinite (ld) != res_isfin)\n-    abort ();\n-\n-  if (__builtin_finitef (f) != res_isfin)\n-    abort ();\n-  if (__builtin_finite (f) != res_isfin)\n-    abort ();\n-  if (__builtin_finite (d) != res_isfin)\n-    abort ();\n-  if (__builtin_finitel (d) != res_isfin)\n-    abort ();\n-  if (__builtin_finitel (ld) != res_isfin)\n-    abort ();\n-}\n-\n-void __attribute__ ((__noinline__))\n-foo (float f, double d, long double ld,\n-     int res_unord, int res_isnan, int res_isinf,\n-     int res_isfin, int res_isnorm)\n-{\n-  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n-  /* Try all values negative as well.  */\n-  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, res_isfin, res_isnorm);\n-}\n-\n-int main()\n-{\n-  float f;\n-  double d;\n-  long double ld;\n-  \n-  f = __builtin_nanf(\"\"); d = __builtin_nan(\"\"); ld = __builtin_nanl(\"\");\n-  foo(f, d, ld, /*unord=*/ 1, /*isnan=*/ 1, /*isinf=*/ 0, /*isfin=*/ 0, /*isnorm=*/ 0);\n-\n-  f = __builtin_inff(); d = __builtin_inf(); ld = __builtin_infl();\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0);\n-\n-  f = 0; d = 0; ld = 0;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 0);\n-\n-  f = 1; d = 1; ld = 1;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n-\n-  f = __FLT_MIN__; d = __DBL_MIN__; ld = __LDBL_MIN__;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n-\n-  f = __FLT_MIN__/2; d = __DBL_MIN__/2; ld = __LDBL_MIN__/2;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 0);\n-\n-  f = __FLT_MAX__; d = __DBL_MAX__; ld = __LDBL_MAX__;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 0, /*isfin=*/ 1, /*isnorm=*/ 1);\n-\n-  f = __FLT_MAX__*2; d = __DBL_MAX__*2; ld = __LDBL_MAX__*2;\n-  foo(f, d, ld, /*unord=*/ 0, /*isnan=*/ 0, /*isinf=*/ 1, /*isfin=*/ 0, /*isnorm=*/ 0);\n-\n-  return 0;\n+  return main_tests ();\n }"}, {"sha": "4326127cee0fd68f9679c8e9547124b71eac1022", "filename": "gcc/testsuite/gcc.dg/torture/type-generic-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f89d34775aaf2a88881273713e485abb560bee/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c?ref=59f89d34775aaf2a88881273713e485abb560bee", "patch": "@@ -0,0 +1,11 @@\n+/* Do the type-generic tests.  Unlike pr28796-2.c, we test these\n+   without any fast-math flags.  */\n+\n+/* { dg-do run } */\n+\n+#include \"../tg-tests.h\"\n+\n+int main(void)\n+{\n+  return main_tests ();\n+}"}]}