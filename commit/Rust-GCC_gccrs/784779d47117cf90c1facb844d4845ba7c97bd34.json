{"sha": "784779d47117cf90c1facb844d4845ba7c97bd34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0Nzc5ZDQ3MTE3Y2Y5MGMxZmFjYjg0NGQ0ODQ1YmE3Yzk3YmQzNA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-03T05:50:01Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-03T05:50:01Z"}, "message": "2018-10-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/map.h\n\t(map<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n\t(map<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n\t(map<>::insert(value_type&&)): Likewise.\n\t(map<>::insert<>(_Pair&&)): Likewise.\n\t(map<>::insert<>(const_iterator, _Pair&&)): Likewise.\n\t(map<>::try_emplace): Likewise.\n\t(map<>::insert_or_assign): Likewise.\n\t(map<>::insert(node_type&&)): Likewise.\n\t(map<>::insert(const_iterator, node_type&&)): Likewise.\n\t(map<>::erase(const_iterator)): Likewise.\n\t(map<>::erase(const_iterator, const_iterator)): Likewise.\n\t* include/debug/multimap.h\n\t(multimap<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n\t(multimap<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n\t(multimap<>::insert<>(_Pair&&)): Likewise.\n\t(multimap<>::insert<>(const_iterator, _Pair&&)): Likewise.\n\t(multimap<>::insert(node_type&&)): Likewise.\n\t(multimap<>::insert(const_iterator, node_type&&)): Likewise.\n\t(multimap<>::erase(const_iterator)): Likewise.\n\t(multimap<>::erase(const_iterator, const_iterator)): Likewise.\n\t* include/debug/set.h\n\t(set<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n\t(set<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n\t(set<>::insert(value_type&&)): Likewise.\n\t(set<>::insert<>(const_iterator, value_type&&)): Likewise.\n\t(set<>::insert(const_iterator, node_type&&)): Likewise.\n\t(set<>::erase(const_iterator)): Likewise.\n\t(set<>::erase(const_iterator, const_iterator)): Likewise.\n\t* include/debug/multiset.h\n\t(multiset<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n\t(multiset<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n\t(multiset<>::insert<>(value_type&&)): Likewise.\n\t(multiset<>::insert<>(const_iterator, value_type&&)): Likewise.\n\t(multiset<>::insert(node_type&&)): Likewise.\n\t(multiset<>::insert(const_iterator, node_type&&)): Likewise.\n\t(multiset<>::erase(const_iterator)): Likewise.\n\t(multiset<>::erase(const_iterator, const_iterator)): Likewise.\n\nFrom-SVN: r264805", "tree": {"sha": "244cd2473bd383808150f8c529b53433fcd93f5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/244cd2473bd383808150f8c529b53433fcd93f5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/784779d47117cf90c1facb844d4845ba7c97bd34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784779d47117cf90c1facb844d4845ba7c97bd34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784779d47117cf90c1facb844d4845ba7c97bd34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784779d47117cf90c1facb844d4845ba7c97bd34/comments", "author": null, "committer": null, "parents": [{"sha": "da76e70f6221e77175a22f5201bb125090504523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da76e70f6221e77175a22f5201bb125090504523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da76e70f6221e77175a22f5201bb125090504523"}], "stats": {"total": 207, "additions": 132, "deletions": 75}, "files": [{"sha": "fe0fbf7bbdc6ab6b2b8a8a90d2bd3775ddd34433", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=784779d47117cf90c1facb844d4845ba7c97bd34", "patch": "@@ -1,3 +1,44 @@\n+2018-10-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/map.h\n+\t(map<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n+\t(map<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n+\t(map<>::insert(value_type&&)): Likewise.\n+\t(map<>::insert<>(_Pair&&)): Likewise.\n+\t(map<>::insert<>(const_iterator, _Pair&&)): Likewise.\n+\t(map<>::try_emplace): Likewise.\n+\t(map<>::insert_or_assign): Likewise.\n+\t(map<>::insert(node_type&&)): Likewise.\n+\t(map<>::insert(const_iterator, node_type&&)): Likewise.\n+\t(map<>::erase(const_iterator)): Likewise.\n+\t(map<>::erase(const_iterator, const_iterator)): Likewise.\n+\t* include/debug/multimap.h\n+\t(multimap<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n+\t(multimap<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n+\t(multimap<>::insert<>(_Pair&&)): Likewise.\n+\t(multimap<>::insert<>(const_iterator, _Pair&&)): Likewise.\n+\t(multimap<>::insert(node_type&&)): Likewise.\n+\t(multimap<>::insert(const_iterator, node_type&&)): Likewise.\n+\t(multimap<>::erase(const_iterator)): Likewise.\n+\t(multimap<>::erase(const_iterator, const_iterator)): Likewise.\n+\t* include/debug/set.h\n+\t(set<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n+\t(set<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n+\t(set<>::insert(value_type&&)): Likewise.\n+\t(set<>::insert<>(const_iterator, value_type&&)): Likewise.\n+\t(set<>::insert(const_iterator, node_type&&)): Likewise.\n+\t(set<>::erase(const_iterator)): Likewise.\n+\t(set<>::erase(const_iterator, const_iterator)): Likewise.\n+\t* include/debug/multiset.h\n+\t(multiset<>::emplace<>(_Args&&...)): Use C++11 direct initialization.\n+\t(multiset<>::emplace_hint<>(const_iterator, _Args&&...)): Likewise.\n+\t(multiset<>::insert<>(value_type&&)): Likewise.\n+\t(multiset<>::insert<>(const_iterator, value_type&&)): Likewise.\n+\t(multiset<>::insert(node_type&&)): Likewise.\n+\t(multiset<>::insert(const_iterator, node_type&&)): Likewise.\n+\t(multiset<>::erase(const_iterator)): Likewise.\n+\t(multiset<>::erase(const_iterator, const_iterator)): Likewise.\n+\n 2018-10-02  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/87258"}, {"sha": "a885859592b117b1dedc020347a4d5683254a938", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=784779d47117cf90c1facb844d4845ba7c97bd34", "patch": "@@ -240,18 +240,19 @@ namespace __debug\n \templace(_Args&&... __args)\n \t{\n \t  auto __res = _Base::emplace(std::forward<_Args>(__args)...);\n-\t  return std::pair<iterator, bool>(iterator(__res.first, this),\n-\t\t\t\t\t   __res.second);\n+\t  return { { __res.first, this }, __res.second };\n \t}\n \n       template<typename... _Args>\n \titerator\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__pos);\n-\t  return iterator(_Base::emplace_hint(__pos.base(),\n-\t\t\t\t\t      std::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...),\n+\t      this\n+\t    };\n \t}\n #endif\n \n@@ -270,7 +271,7 @@ namespace __debug\n       insert(value_type&& __x)\n       {\n \tauto __res = _Base::insert(std::move(__x));\n-\treturn { iterator(__res.first, this), __res.second };\n+\treturn { { __res.first, this }, __res.second };\n       }\n \n       template<typename _Pair, typename = typename\n@@ -279,10 +280,8 @@ namespace __debug\n \tstd::pair<iterator, bool>\n \tinsert(_Pair&& __x)\n \t{\n-\t  std::pair<_Base_iterator, bool> __res\n-\t    = _Base::insert(std::forward<_Pair>(__x));\n-\t  return std::pair<iterator, bool>(iterator(__res.first, this),\n-\t\t\t\t\t   __res.second);\n+\t  auto __res = _Base::insert(std::forward<_Pair>(__x));\n+\t  return { { __res.first, this }, __res.second };\n \t}\n #endif\n \n@@ -320,8 +319,11 @@ namespace __debug\n \tinsert(const_iterator __position, _Pair&& __x)\n \t{\n \t  __glibcxx_check_insert(__position);\n-\t  return iterator(_Base::insert(__position.base(),\n-\t\t\t\t\tstd::forward<_Pair>(__x)), this);\n+\t  return\n+\t    {\n+\t      _Base::insert(__position.base(), std::forward<_Pair>(__x)),\n+\t      this\n+\t    };\n \t}\n #endif\n \n@@ -347,7 +349,7 @@ namespace __debug\n         {\n \t  auto __res = _Base::try_emplace(__k,\n \t\t\t\t\t  std::forward<_Args>(__args)...);\n-\t  return { iterator(__res.first, this), __res.second };\n+\t  return { { __res.first, this }, __res.second };\n \t}\n \n       template <typename... _Args>\n@@ -356,7 +358,7 @@ namespace __debug\n         {\n \t  auto __res = _Base::try_emplace(std::move(__k),\n \t\t\t\t\t  std::forward<_Args>(__args)...);\n-\t  return { iterator(__res.first, this), __res.second };\n+\t  return { { __res.first, this }, __res.second };\n \t}\n \n       template <typename... _Args>\n@@ -365,19 +367,25 @@ namespace __debug\n                     _Args&&... __args)\n         {\n \t  __glibcxx_check_insert(__hint);\n-\t  return iterator(_Base::try_emplace(__hint.base(), __k,\n-\t\t\t\t\t     std::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::try_emplace(__hint.base(), __k,\n+\t\t\t\t std::forward<_Args>(__args)...),\n+\t      this\n+\t    };\n \t}\n \n       template <typename... _Args>\n         iterator\n         try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)\n         {\n \t  __glibcxx_check_insert(__hint);\n-\t  return iterator(_Base::try_emplace(__hint.base(), std::move(__k),\n-\t\t\t\t\t     std::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::try_emplace(__hint.base(), std::move(__k),\n+\t\t\t\t std::forward<_Args>(__args)...),\n+\t      this\n+\t    };\n \t}\n \n       template <typename _Obj>\n@@ -386,7 +394,7 @@ namespace __debug\n \t{\n \t  auto __res = _Base::insert_or_assign(__k,\n \t\t\t\t\t       std::forward<_Obj>(__obj));\n-\t  return { iterator(__res.first, this), __res.second };\n+\t  return { { __res.first, this }, __res.second };\n \t}\n \n       template <typename _Obj>\n@@ -395,7 +403,7 @@ namespace __debug\n \t{\n \t  auto __res = _Base::insert_or_assign(std::move(__k),\n \t\t\t\t\t       std::forward<_Obj>(__obj));\n-\t  return { iterator(__res.first, this), __res.second };\n+\t  return { { __res.first, this }, __res.second };\n \t}\n \n       template <typename _Obj>\n@@ -404,20 +412,25 @@ namespace __debug\n                          const key_type& __k, _Obj&& __obj)\n \t{\n \t  __glibcxx_check_insert(__hint);\n-\t  return iterator(_Base::insert_or_assign(__hint.base(), __k,\n-\t\t\t\t\t\t  std::forward<_Obj>(__obj)),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::insert_or_assign(__hint.base(), __k,\n+\t\t\t\t      std::forward<_Obj>(__obj)),\n+\t      this\n+\t    };\n \t}\n \n       template <typename _Obj>\n         iterator\n         insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)\n         {\n \t  __glibcxx_check_insert(__hint);\n-\t  return iterator(_Base::insert_or_assign(__hint.base(),\n-\t\t\t\t\t\t  std::move(__k),\n-\t\t\t\t\t\t  std::forward<_Obj>(__obj)),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::insert_or_assign(__hint.base(), std::move(__k),\n+\t\t\t\t      std::forward<_Obj>(__obj)),\n+\t      this\n+\t    };\n \t}\n #endif // C++17\n \n@@ -446,15 +459,15 @@ namespace __debug\n       insert(node_type&& __nh)\n       {\n \tauto __ret = _Base::insert(std::move(__nh));\n-\titerator __pos = iterator(__ret.position, this);\n-\treturn { __pos, __ret.inserted, std::move(__ret.node) };\n+\treturn\n+\t  { { __ret.position, this }, __ret.inserted, std::move(__ret.node) };\n       }\n \n       iterator\n       insert(const_iterator __hint, node_type&& __nh)\n       {\n \t__glibcxx_check_insert(__hint);\n-\treturn iterator(_Base::insert(__hint.base(), std::move(__nh)), this);\n+\treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n       using _Base::merge;\n@@ -466,7 +479,7 @@ namespace __debug\n       {\n \t__glibcxx_check_erase(__position);\n \tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn iterator(_Base::erase(__position.base()), this);\n+\treturn { _Base::erase(__position.base()), this };\n       }\n \n       iterator\n@@ -512,7 +525,8 @@ namespace __debug\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n-\treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n+\n+\treturn { _Base::erase(__first.base(), __last.base()), this };\n       }\n #else\n       void"}, {"sha": "50500d66f7021464767c32d073e33cf4d399c7fe", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=784779d47117cf90c1facb844d4845ba7c97bd34", "patch": "@@ -228,18 +228,18 @@ namespace __debug\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n-\t{\n-\t  return iterator(_Base::emplace(std::forward<_Args>(__args)...), this);\n-\t}\n+\t{ return { _Base::emplace(std::forward<_Args>(__args)...), this }; }\n \n       template<typename... _Args>\n \titerator\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__pos);\n-\t  return iterator(_Base::emplace_hint(__pos.base(),\n-\t\t\t\t\t      std::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...),\n+\t      this\n+\t    };\n \t}\n #endif\n \n@@ -259,7 +259,7 @@ namespace __debug\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(_Pair&& __x)\n-\t{ return iterator(_Base::insert(std::forward<_Pair>(__x)), this); }\n+\t{ return { _Base::insert(std::forward<_Pair>(__x)), this }; }\n #endif\n \n #if __cplusplus >= 201103L\n@@ -296,8 +296,11 @@ namespace __debug\n \tinsert(const_iterator __position, _Pair&& __x)\n \t{\n \t  __glibcxx_check_insert(__position);\n-\t  return iterator(_Base::insert(__position.base(),\n-\t\t\t\t\tstd::forward<_Pair>(__x)), this);\n+\t  return\n+\t    {\n+\t      _Base::insert(__position.base(), std::forward<_Pair>(__x)),\n+\t      this\n+\t    };\n \t}\n #endif\n \n@@ -337,13 +340,13 @@ namespace __debug\n \n       iterator\n       insert(node_type&& __nh)\n-      { return iterator(_Base::insert(std::move(__nh)), this); }\n+      { return { _Base::insert(std::move(__nh)), this }; }\n \n       iterator\n       insert(const_iterator __hint, node_type&& __nh)\n       {\n \t__glibcxx_check_insert(__hint);\n-\treturn iterator(_Base::insert(__hint.base(), std::move(__nh)), this);\n+\treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n       using _Base::merge;\n@@ -355,7 +358,7 @@ namespace __debug\n       {\n \t__glibcxx_check_erase(__position);\n \tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn iterator(_Base::erase(__position.base()), this);\n+\treturn { _Base::erase(__position.base()), this };\n       }\n \n       iterator\n@@ -403,7 +406,8 @@ namespace __debug\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n-\treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n+\n+\treturn { _Base::erase(__first.base(), __last.base()), this };\n       }\n #else\n       void"}, {"sha": "d292a14ca8c4ea0573942b4765c6356011ca1e79", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=784779d47117cf90c1facb844d4845ba7c97bd34", "patch": "@@ -228,19 +228,18 @@ namespace __debug\n       template<typename... _Args>\n \titerator\n \templace(_Args&&... __args)\n-\t{\n-\t  return iterator(_Base::emplace(std::forward<_Args>(__args)...),\n-\t\t\t  this);\n-\t}\n+\t{ return { _Base::emplace(std::forward<_Args>(__args)...), this }; }\n \n       template<typename... _Args>\n \titerator\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__pos);\n-\t  return iterator(_Base::emplace_hint(__pos.base(),\n-\t\t\t\t\t      std::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...),\n+\t      this\n+\t    };\n \t}\n #endif\n \n@@ -251,7 +250,7 @@ namespace __debug\n #if __cplusplus >= 201103L\n       iterator\n       insert(value_type&& __x)\n-      { return iterator(_Base::insert(std::move(__x)), this); }\n+      { return { _Base::insert(std::move(__x)), this }; }\n #endif\n \n       iterator\n@@ -266,8 +265,7 @@ namespace __debug\n       insert(const_iterator __position, value_type&& __x)\n       {\n \t__glibcxx_check_insert(__position);\n-\treturn iterator(_Base::insert(__position.base(), std::move(__x)),\n-\t\t\tthis);\n+\treturn { _Base::insert(__position.base(), std::move(__x)), this };\n       }\n #endif\n \n@@ -313,13 +311,13 @@ namespace __debug\n \n       iterator\n       insert(node_type&& __nh)\n-      { return iterator(_Base::insert(std::move(__nh)), this); }\n+      { return { _Base::insert(std::move(__nh)), this }; }\n \n       iterator\n       insert(const_iterator __hint, node_type&& __nh)\n       {\n \t__glibcxx_check_insert(__hint);\n-\treturn iterator(_Base::insert(__hint.base(), std::move(__nh)), this);\n+\treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n       using _Base::merge;\n@@ -331,7 +329,7 @@ namespace __debug\n       {\n \t__glibcxx_check_erase(__position);\n \tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn iterator(_Base::erase(__position.base()), this);\n+\treturn { _Base::erase(__position.base()), this };\n       }\n #else\n       void\n@@ -375,7 +373,8 @@ namespace __debug\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n-\treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n+\n+\treturn { _Base::erase(__first.base(), __last.base()), this };\n       }\n #else\n       void"}, {"sha": "ed75f0f174fe6da866b25157c28c8ebbd730e2ab", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784779d47117cf90c1facb844d4845ba7c97bd34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=784779d47117cf90c1facb844d4845ba7c97bd34", "patch": "@@ -229,18 +229,19 @@ namespace __debug\n \templace(_Args&&... __args)\n \t{\n \t  auto __res = _Base::emplace(std::forward<_Args>(__args)...);\n-\t  return std::pair<iterator, bool>(iterator(__res.first, this),\n-\t\t\t\t\t   __res.second);\n+\t  return { { __res.first, this }, __res.second };\n \t}\n \n       template<typename... _Args>\n \titerator\n \templace_hint(const_iterator __pos, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert(__pos);\n-\t  return iterator(_Base::emplace_hint(__pos.base(),\n-\t\t\t\t\t      std::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t  return\n+\t    {\n+\t      _Base::emplace_hint(__pos.base(), std::forward<_Args>(__args)...),\n+\t      this\n+\t    };\n \t}\n #endif\n \n@@ -256,10 +257,8 @@ namespace __debug\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       {\n-\tstd::pair<_Base_iterator, bool> __res\n-\t  = _Base::insert(std::move(__x));\n-\treturn std::pair<iterator, bool>(iterator(__res.first, this),\n-\t\t\t\t\t __res.second);\n+\tauto __res = _Base::insert(std::move(__x));\n+\treturn { { __res.first, this }, __res.second };\n       }\n #endif\n \n@@ -275,8 +274,7 @@ namespace __debug\n       insert(const_iterator __position, value_type&& __x)\n       {\n \t__glibcxx_check_insert(__position);\n-\treturn iterator(_Base::insert(__position.base(), std::move(__x)),\n-\t\t\tthis);\n+\treturn { _Base::insert(__position.base(), std::move(__x)), this };\n       }\n #endif\n \n@@ -333,7 +331,7 @@ namespace __debug\n       insert(const_iterator __hint, node_type&& __nh)\n       {\n \t__glibcxx_check_insert(__hint);\n-\treturn iterator(_Base::insert(__hint.base(), std::move(__nh)), this);\n+\treturn { _Base::insert(__hint.base(), std::move(__nh)), this };\n       }\n \n       using _Base::merge;\n@@ -345,7 +343,7 @@ namespace __debug\n       {\n \t__glibcxx_check_erase(__position);\n \tthis->_M_invalidate_if(_Equal(__position.base()));\n-\treturn iterator(_Base::erase(__position.base()), this);\n+\treturn { _Base::erase(__position.base()), this };\n       }\n #else\n       void\n@@ -387,7 +385,8 @@ namespace __debug\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n-\treturn iterator(_Base::erase(__first.base(), __last.base()), this);\n+\n+\treturn { _Base::erase(__first.base(), __last.base()), this };\n       }\n #else\n       void"}]}