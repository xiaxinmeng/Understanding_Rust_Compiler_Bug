{"sha": "7afbf31f02054b3b2977b5d6e511de71c192e7e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FmYmYzMWYwMjA1NGIzYjI5NzdiNWQ2ZTUxMWRlNzFjMTkyZTdlNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-11-29T18:57:22Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-11-29T18:57:22Z"}, "message": "(merge_attributes): New function.\n\n(merge_attributes): New function.  Move code from\ncommon_type to here.\n(common_type): Call merge_attributes instead of having inline code.\n\nFrom-SVN: r10620", "tree": {"sha": "b4d702df6539f28bc793cf8483a118bbbe81efe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4d702df6539f28bc793cf8483a118bbbe81efe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7afbf31f02054b3b2977b5d6e511de71c192e7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afbf31f02054b3b2977b5d6e511de71c192e7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7afbf31f02054b3b2977b5d6e511de71c192e7e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7afbf31f02054b3b2977b5d6e511de71c192e7e6/comments", "author": null, "committer": null, "parents": [{"sha": "771d55a31cea6a2791f8dad131681953f8a76845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/771d55a31cea6a2791f8dad131681953f8a76845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/771d55a31cea6a2791f8dad131681953f8a76845"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "d76e724861c9154b3649d85ef6626db0282a0753", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7afbf31f02054b3b2977b5d6e511de71c192e7e6/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7afbf31f02054b3b2977b5d6e511de71c192e7e6/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=7afbf31f02054b3b2977b5d6e511de71c192e7e6", "patch": "@@ -166,6 +166,43 @@ qualify_type (type, like)\n   return c_build_type_variant (type, constflag, volflag);\n }\n \f\n+/* Return an attribute list that is the union of a1 and a2.  */\n+tree\n+merge_attributes (a1, a2)\n+     register tree a1, a2;\n+{\n+  tree attributes;\n+\n+  /* Either one unset?  Take the set one.  */\n+\n+  if (! (attributes = a1))\n+    attributes = a2;\n+\n+  /* One that completely contains the other?  Take it.  */\n+\n+  else if (a2 && ! attribute_list_contained (a1, a2))\n+    if (attribute_list_contained (a2, a1))\n+      attributes = a2;\n+    else\n+      {\n+\t/* Pick the longest list, and hang on the other list.  */\n+\t/* ??? For the moment we punt on the issue of attrs with args.  */\n+\n+\tif (list_length (a1) < list_length (a2))\n+\t  attributes = a2, a2 = a1;\n+\n+\tfor (; a2; a2 = TREE_CHAIN (a2))\n+\t  if (lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (a2)),\n+\t\t\t\tattributes) == NULL_TREE)\n+\t    {\n+\t      a1 = copy_node (a2);\n+\t      TREE_CHAIN (a1) = attributes;\n+\t      attributes = a1;\n+\t    }\n+      }\n+  return attributes;\n+}\n+\n /* Return the common type of two types.\n    We assume that comptypes has already been done and returned 1;\n    if that isn't so, this may crash.  In particular, we assume that qualifiers\n@@ -193,39 +230,7 @@ common_type (t1, t2)\n     return t1;\n \n   /* Merge the attributes */\n-\n-  { register tree a1, a2;\n-    a1 = TYPE_ATTRIBUTES (t1);\n-    a2 = TYPE_ATTRIBUTES (t2);\n-\n-    /* Either one unset?  Take the set one.  */\n-\n-    if (!(attributes = a1))\n-       attributes = a2;\n-\n-    /* One that completely contains the other?  Take it.  */\n-\n-    else if (a2 && !attribute_list_contained (a1, a2))\n-       if (attribute_list_contained (a2, a1))\n-\t  attributes = a2;\n-       else\n-\t{\n-\t  /* Pick the longest list, and hang on the other list.  */\n-\t  /* ??? For the moment we punt on the issue of attrs with args.  */\n-\t\n-\t  if (list_length (a1) < list_length (a2))\n-\t     attributes = a2, a2 = a1;\n-\n-\t  for (; a2; a2 = TREE_CHAIN (a2))\n-\t    if (lookup_attribute (IDENTIFIER_POINTER (TREE_PURPOSE (a2)),\n-\t\t\t\t  attributes) == NULL_TREE)\n-\t      {\n-\t\ta1 = copy_node (a2);\n-\t\tTREE_CHAIN (a1) = attributes;\n-\t\tattributes = a1;\n-\t      }\n-\t}\n-  }\n+  attributes = merge_attributes (TYPE_ATTRIBUTES (t1), TYPE_ATTRIBUTES (t2));\n \n   /* Treat an enum type as the unsigned integer type of the same width.  */\n "}]}