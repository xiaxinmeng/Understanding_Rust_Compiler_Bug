{"sha": "ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4NmJlYjc2YTdjM2YwZjdhZDI2MjNkNDhiOTUyZTgyZjNlZmViZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:29:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-23T02:29:39Z"}, "message": "Call cplus_decl_attributes with prefix_attributes where appropriate.\n\n(primary, handler_seq): Set it.\n\nFrom-SVN: r10039", "tree": {"sha": "f87181425e035befc43b5b7f9277165b1c384112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f87181425e035befc43b5b7f9277165b1c384112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe/comments", "author": null, "committer": null, "parents": [{"sha": "f714b8e580722542ba86e414e6aa0ee4b415709f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f714b8e580722542ba86e414e6aa0ee4b415709f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f714b8e580722542ba86e414e6aa0ee4b415709f"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "ad898e9b4987c723df7a40321180144c8f3cc516", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff86beb76a7c3f0f7ad2623d48b952e82f3efebe/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=ff86beb76a7c3f0f7ad2623d48b952e82f3efebe", "patch": "@@ -1,5 +1,5 @@\n /* YACC parser for C++ syntax.\n-   Copyright (C) 1988, 1989, 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1989, 1993, 1994, 1995 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -531,6 +531,7 @@ template_def:\n \t\t{\n \t\t  int def = ($4 != ';');\n \t\t  tree d = start_decl ($<ttype>3, $<ttype>2, 0, NULL_TREE);\n+\t\t  cplus_decl_attributes (d, NULL_TREE, prefix_attributes);\n \t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  end_template_decl ($1, d, 0, def);\n \t\t  if (def)\n@@ -557,6 +558,7 @@ datadef:\n \t| declmods notype_declarator ';'\n \t\t{ tree d;\n \t\t  d = start_decl ($<ttype>2, $<ttype>$, 0, NULL_TREE);\n+\t\t  cplus_decl_attributes (d, NULL_TREE, prefix_attributes);\n \t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t}\n \t| typed_declspecs initdecls ';'\n@@ -567,6 +569,7 @@ datadef:\n \t| typed_declspecs declarator ';'\n \t\t{ tree d;\n \t\t  d = start_decl ($<ttype>2, $<ttype>$, 0, NULL_TREE);\n+\t\t  cplus_decl_attributes (d, NULL_TREE, prefix_attributes);\n \t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  note_list_got_semicolon ($<ttype>$);\n \t\t}\n@@ -1474,18 +1477,34 @@ primary:\n \t\t    }\n \t\t}\n \t| functional_cast\n-\t| DYNAMIC_CAST '<' type_id '>' '(' expr ')'\n-\t\t{ tree type = groktypename ($3);\n-\t\t  $$ = build_dynamic_cast (type, $6); }\n-\t| STATIC_CAST '<' type_id '>' '(' expr ')'\n-\t\t{ tree type = groktypename ($3);\n-\t\t  $$ = build_static_cast (type, $6); }\n-\t| REINTERPRET_CAST '<' type_id '>' '(' expr ')'\n-\t\t{ tree type = groktypename ($3);\n-\t\t  $$ = build_reinterpret_cast (type, $6); }\n-\t| CONST_CAST '<' type_id '>' '(' expr ')'\n-\t\t{ tree type = groktypename ($3);\n-\t\t  $$ = build_const_cast (type, $6); }\n+\t| DYNAMIC_CAST '<'\n+\t\t{ dont_allow_type_definitions = \"inside dynamic_cast\"; }\n+\t  type_id '>'\n+\t\t{ dont_allow_type_definitions = 0; }\n+\t  '(' expr ')'\n+\t\t{ tree type = groktypename ($4);\n+\t\t  $$ = build_dynamic_cast (type, $8); }\n+\t| STATIC_CAST '<'\n+\t\t{ dont_allow_type_definitions = \"inside static_cast\"; }\n+\t  type_id '>'\n+\t\t{ dont_allow_type_definitions = 0; }\n+\t  '(' expr ')'\n+\t\t{ tree type = groktypename ($4);\n+\t\t  $$ = build_static_cast (type, $8); }\n+\t| REINTERPRET_CAST '<'\n+\t\t{ dont_allow_type_definitions = \"inside reinterpret_cast\"; }\n+\t  type_id '>'\n+\t\t{ dont_allow_type_definitions = 0; }\n+\t  '(' expr ')'\n+\t\t{ tree type = groktypename ($4);\n+\t\t  $$ = build_reinterpret_cast (type, $8); }\n+\t| CONST_CAST '<'\n+\t\t{ dont_allow_type_definitions = \"inside const_cast\"; }\n+\t  type_id '>'\n+\t\t{ dont_allow_type_definitions = 0; }\n+\t  '(' expr ')'\n+\t\t{ tree type = groktypename ($4);\n+\t\t  $$ = build_const_cast (type, $8); }\n \t| TYPEID '(' expr ')'\n \t\t{ $$ = build_typeid ($3); }\n \t| TYPEID '(' type_id ')'\n@@ -1737,6 +1756,7 @@ decl:\n \t\t{ tree d = $1;\n \t\t  int yes = suspend_momentary ();\n \t\t  d = start_decl ($2, d, 0, NULL_TREE);\n+\t\t  cplus_decl_attributes (d, NULL_TREE, prefix_attributes);\n \t\t  cp_finish_decl (d, NULL_TREE, NULL_TREE, 0, 0);\n \t\t  resume_momentary (yes);\n \t\t  note_list_got_semicolon ($1);\n@@ -3427,7 +3447,11 @@ try_block:\n \n handler_seq:\n \t  /* empty */\n-\t| handler_seq CATCH .pushlevel handler_args compstmt\n+\t| handler_seq CATCH .pushlevel\n+\t\t{ dont_allow_type_definitions = \"inside exception declarations\"; }\n+\t  handler_args\n+\t\t{ dont_allow_type_definitions = 0; }\n+\t  compstmt\n \t\t{ expand_end_catch_block (); }\n \t  .poplevel\n \t;"}]}