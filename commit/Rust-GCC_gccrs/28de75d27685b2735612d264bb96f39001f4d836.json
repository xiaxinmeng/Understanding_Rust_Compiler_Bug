{"sha": "28de75d27685b2735612d264bb96f39001f4d836", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkZTc1ZDI3Njg1YjI3MzU2MTJkMjY0YmI5NmYzOTAwMWY0ZDgzNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-05-11T11:17:33Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-05-11T11:17:33Z"}, "message": "aarch64: A couple of mul_laneq tweaks\n\nThis patch removes the duplication between the mul_laneq<mode>3\nand the older mul-lane patterns.  The older patterns were previously\ndivided into two based on whether the indexed operand had the same mode\nas the other operands or whether it had the opposite length from the\nother operands (64-bit vs. 128-bit).  However, it seemed easier to\ndivide them instead based on whether the indexed operand was 64-bit or\n128-bit, since that maps directly to the arm_neon.h \u201cq\u201d conventions.\n\nAlso, it looks like the older patterns were missing cases for\nV8HF<->V4HF combinations, which meant that vmul_laneq_f16 and\nvmulq_lane_f16 didn't produce single instructions.\n\nThere was a typo in the V2SF entry for VCONQ, but in practice\nno patterns were using that entry until now.\n\nThe test passes for both endiannesses, but endianness does change\nthe mapping between regexps and functions.\n\ngcc/\n\t* config/aarch64/iterators.md (VMUL_CHANGE_NLANES): Delete.\n\t(VMULD): New iterator.\n\t(VCOND): Handle V4HF and V8HF.\n\t(VCONQ): Fix entry for V2SF.\n\t* config/aarch64/aarch64-simd.md (mul_lane<mode>3): Use VMULD\n\tinstead of VMUL.  Use a 64-bit vector mode for the indexed operand.\n\t(*aarch64_mul3_elt_<vswap_width_name><mode>): Merge with...\n\t(mul_laneq<mode>3): ...this define_insn.  Use VMUL instead of VDQSF.\n\tUse a 128-bit vector mode for the indexed operand.  Use stype for\n\tthe scheduling type.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/fmul_lane_1.c: New test.", "tree": {"sha": "6dc7aafb1c477e2ebde086d389e39cebd456f577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc7aafb1c477e2ebde086d389e39cebd456f577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28de75d27685b2735612d264bb96f39001f4d836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28de75d27685b2735612d264bb96f39001f4d836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28de75d27685b2735612d264bb96f39001f4d836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28de75d27685b2735612d264bb96f39001f4d836/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2301a394607b88f8996efe864350c5f841000f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2301a394607b88f8996efe864350c5f841000f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2301a394607b88f8996efe864350c5f841000f76"}], "stats": {"total": 118, "additions": 82, "deletions": 36}, "files": [{"sha": "99620895e7874cdfe346eb8994fa7b519c650f88", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de75d27685b2735612d264bb96f39001f4d836/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de75d27685b2735612d264bb96f39001f4d836/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=28de75d27685b2735612d264bb96f39001f4d836", "patch": "@@ -719,51 +719,35 @@\n )\n \n (define_insn \"mul_lane<mode>3\"\n- [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n-       (mult:VMUL\n-\t (vec_duplicate:VMUL\n+ [(set (match_operand:VMULD 0 \"register_operand\" \"=w\")\n+       (mult:VMULD\n+\t (vec_duplicate:VMULD\n \t   (vec_select:<VEL>\n-\t     (match_operand:VMUL 2 \"register_operand\" \"<h_con>\")\n+\t     (match_operand:<VCOND> 2 \"register_operand\" \"<h_con>\")\n \t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n-\t (match_operand:VMUL 1 \"register_operand\" \"w\")))]\n+\t (match_operand:VMULD 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   {\n-    operands[3] = aarch64_endian_lane_rtx (<MODE>mode, INTVAL (operands[3]));\n+    operands[3] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[3]));\n     return \"<f>mul\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\";\n   }\n   [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n (define_insn \"mul_laneq<mode>3\"\n-  [(set (match_operand:VDQSF 0 \"register_operand\" \"=w\")\n-\t(mult:VDQSF\n-\t  (vec_duplicate:VDQSF\n-\t    (vec_select:<VEL>\n-\t      (match_operand:V4SF 2 \"register_operand\" \"w\")\n-\t      (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n-\t  (match_operand:VDQSF 1 \"register_operand\" \"w\")))]\n-  \"TARGET_SIMD\"\n-  {\n-    operands[3] = aarch64_endian_lane_rtx (V4SFmode, INTVAL (operands[3]));\n-    return \"fmul\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\";\n-  }\n-  [(set_attr \"type\" \"neon_fp_mul_s_scalar<q>\")]\n-)\n-\n-(define_insn \"*aarch64_mul3_elt_<vswap_width_name><mode>\"\n-  [(set (match_operand:VMUL_CHANGE_NLANES 0 \"register_operand\" \"=w\")\n-     (mult:VMUL_CHANGE_NLANES\n-       (vec_duplicate:VMUL_CHANGE_NLANES\n+  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n+     (mult:VMUL\n+       (vec_duplicate:VMUL\n \t  (vec_select:<VEL>\n-\t    (match_operand:<VSWAP_WIDTH> 1 \"register_operand\" \"<h_con>\")\n-\t    (parallel [(match_operand:SI 2 \"immediate_operand\")])))\n-      (match_operand:VMUL_CHANGE_NLANES 3 \"register_operand\" \"w\")))]\n+\t    (match_operand:<VCONQ> 2 \"register_operand\" \"<h_con>\")\n+\t    (parallel [(match_operand:SI 3 \"immediate_operand\")])))\n+      (match_operand:VMUL 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   {\n-    operands[2] = aarch64_endian_lane_rtx (<VSWAP_WIDTH>mode, INTVAL (operands[2]));\n-    return \"<f>mul\\\\t%0.<Vtype>, %3.<Vtype>, %1.<Vetype>[%2]\";\n+    operands[3] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[3]));\n+    return \"<f>mul\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vetype>[%3]\";\n   }\n-  [(set_attr \"type\" \"neon<fp>_mul_<Vetype>_scalar<q>\")]\n+  [(set_attr \"type\" \"neon<fp>_mul_<stype>_scalar<q>\")]\n )\n \n (define_insn \"mul_n<mode>3\""}, {"sha": "69d9dbebe8f1fcee39e93586b97da1a887fd94e3", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de75d27685b2735612d264bb96f39001f4d836/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de75d27685b2735612d264bb96f39001f4d836/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=28de75d27685b2735612d264bb96f39001f4d836", "patch": "@@ -312,15 +312,17 @@\n (define_mode_iterator DSX [DF DI SF SI])\n \n \n-;; Modes available for Advanced SIMD <f>mul lane operations.\n+;; Modes available for Advanced SIMD <f>mul operations.\n (define_mode_iterator VMUL [V4HI V8HI V2SI V4SI\n \t\t\t    (V4HF \"TARGET_SIMD_F16INST\")\n \t\t\t    (V8HF \"TARGET_SIMD_F16INST\")\n \t\t\t    V2SF V4SF V2DF])\n \n-;; Modes available for Advanced SIMD <f>mul lane operations changing lane\n-;; count.\n-(define_mode_iterator VMUL_CHANGE_NLANES [V4HI V8HI V2SI V4SI V2SF V4SF])\n+;; The subset of VMUL for which VCOND is a vector mode.\n+(define_mode_iterator VMULD [V4HI V8HI V2SI V4SI\n+\t\t\t     (V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t     (V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t     V2SF V4SF])\n \n ;; Iterators for single modes, for \"@\" patterns.\n (define_mode_iterator VNx16QI_ONLY [VNx16QI])\n@@ -1201,6 +1203,7 @@\n \t\t\t (V4HI \"V4HI\") (V8HI \"V4HI\")\n \t\t\t (V2SI \"V2SI\") (V4SI \"V2SI\")\n \t\t\t (DI   \"DI\") (V2DI \"DI\")\n+\t\t\t (V4HF \"V4HF\") (V8HF \"V4HF\")\n \t\t\t (V2SF \"V2SF\") (V4SF \"V2SF\")\n \t\t\t (V2DF \"DF\")])\n \n@@ -1210,7 +1213,7 @@\n \t\t\t (V2SI \"V4SI\") (V4SI \"V4SI\")\n \t\t\t (DI   \"V2DI\") (V2DI \"V2DI\")\n \t\t\t (V4HF \"V8HF\") (V8HF \"V8HF\")\n-\t\t\t (V2SF \"V2SF\") (V4SF \"V4SF\")\n+\t\t\t (V2SF \"V4SF\") (V4SF \"V4SF\")\n \t\t\t (V2DF \"V2DF\") (SI   \"V4SI\")\n \t\t\t (HI   \"V8HI\") (QI   \"V16QI\")])\n "}, {"sha": "a2b57581c84f4c921bb658d9a0d3f0268e5415fb", "filename": "gcc/testsuite/gcc.target/aarch64/fmul_lane_1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de75d27685b2735612d264bb96f39001f4d836/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de75d27685b2735612d264bb96f39001f4d836/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ffmul_lane_1.c?ref=28de75d27685b2735612d264bb96f39001f4d836", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-options \"-O\" } */\n+\n+#pragma GCC target \"+simd+fp16\"\n+\n+__Float16x4_t\n+f1 (__Float16x4_t x, __Float16x4_t y)\n+{\n+  return x * y[0];\n+}\n+\n+__Float16x4_t\n+f2 (__Float16x4_t x, __Float16x4_t y)\n+{\n+  return x * y[3];\n+}\n+\n+__Float16x4_t\n+f3 (__Float16x4_t x, __Float16x8_t y)\n+{\n+  return x * y[0];\n+}\n+\n+__Float16x4_t\n+f4 (__Float16x4_t x, __Float16x8_t y)\n+{\n+  return x * y[7];\n+}\n+\n+__Float16x8_t\n+f5 (__Float16x8_t x, __Float16x4_t y)\n+{\n+  return x * y[0];\n+}\n+\n+__Float16x8_t\n+f6 (__Float16x8_t x, __Float16x4_t y)\n+{\n+  return x * y[3];\n+}\n+\n+__Float16x8_t\n+f7 (__Float16x8_t x, __Float16x8_t y)\n+{\n+  return x * y[0];\n+}\n+\n+__Float16x8_t\n+f8 (__Float16x8_t x, __Float16x8_t y)\n+{\n+  return x * y[7];\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tv0.4h, v0.4h, v1.h\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tv0.4h, v0.4h, v1.h\\[3\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tv0.4h, v0.4h, v1.h\\[7\\]} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\tv0.8h, v0.8h, v1.h\\[0\\]} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tv0.8h, v0.8h, v1.h\\[3\\]} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tv0.8h, v0.8h, v1.h\\[7\\]} 1 } } */"}]}