{"sha": "68ba34f361d5287404bde9283b9df315f4a2c147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhiYTM0ZjM2MWQ1Mjg3NDA0YmRlOTI4M2I5ZGYzMTVmNGEyYzE0Nw==", "commit": {"author": {"name": "Alexey Starovoytov", "email": "alexey.starovoytov@sun.com", "date": "2006-04-14T07:01:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-04-14T07:01:38Z"}, "message": "sparc.c (emit_and_preserve): Allocate space for the register save area.\n\n\t* config/sparc/sparc.c (emit_and_preserve): Allocate space for the\n\tregister save area.\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@libertysurf.fr>\n\nFrom-SVN: r112950", "tree": {"sha": "43f4e85b1d6157f26fa20af215d3f50757377754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f4e85b1d6157f26fa20af215d3f50757377754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ba34f361d5287404bde9283b9df315f4a2c147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ba34f361d5287404bde9283b9df315f4a2c147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ba34f361d5287404bde9283b9df315f4a2c147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ba34f361d5287404bde9283b9df315f4a2c147/comments", "author": null, "committer": null, "parents": [{"sha": "39b1ec97f0445bcc6e960de32e7b82011f0161ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b1ec97f0445bcc6e960de32e7b82011f0161ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39b1ec97f0445bcc6e960de32e7b82011f0161ca"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "d063df8311e5c172b601f1f2e9cf879831abc71c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ba34f361d5287404bde9283b9df315f4a2c147/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ba34f361d5287404bde9283b9df315f4a2c147/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68ba34f361d5287404bde9283b9df315f4a2c147", "patch": "@@ -1,3 +1,9 @@\n+2006-04-14  Alexey Starovoytov  <alexey.starovoytov@sun.com>\n+            Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (emit_and_preserve): Allocate space for the\n+\tregister save area.\n+\n 2005-04-13  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR middle-end/27134"}, {"sha": "692e46e5584343995a791d689704189020901d67", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ba34f361d5287404bde9283b9df315f4a2c147/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ba34f361d5287404bde9283b9df315f4a2c147/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=68ba34f361d5287404bde9283b9df315f4a2c147", "patch": "@@ -8487,16 +8487,24 @@ sparc_rtx_costs (rtx x, int code, int outer_code, int *total)\n     }\n }\n \n-/* Emit the sequence of insns SEQ while preserving the registers.  */\n+/* Emit the sequence of insns SEQ while preserving the registers REG and REG2.\n+   This is achieved by means of a manual dynamic stack space allocation in\n+   the current frame.  We make the assumption that SEQ doesn't contain any\n+   function calls, with the possible exception of calls to the PIC helper.  */\n \n static void\n emit_and_preserve (rtx seq, rtx reg, rtx reg2)\n {\n-  /* STACK_BOUNDARY guarantees that this is a 2-word slot.  */\n-  rtx slot = gen_rtx_MEM (word_mode,\n-\t\t\t  plus_constant (stack_pointer_rtx, SPARC_STACK_BIAS));\n+  /* We must preserve the lowest 16 words for the register save area.  */\n+  HOST_WIDE_INT offset = 16*UNITS_PER_WORD;\n+  /* We really need only 2 words of fresh stack space.  */\n+  HOST_WIDE_INT size = SPARC_STACK_ALIGN (offset + 2*UNITS_PER_WORD);\n \n-  emit_insn (gen_stack_pointer_dec (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT)));\n+  rtx slot\n+    = gen_rtx_MEM (word_mode, plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t     SPARC_STACK_BIAS + offset));\n+\n+  emit_insn (gen_stack_pointer_dec (GEN_INT (size)));\n   emit_insn (gen_rtx_SET (VOIDmode, slot, reg));\n   if (reg2)\n     emit_insn (gen_rtx_SET (VOIDmode,\n@@ -8508,7 +8516,7 @@ emit_and_preserve (rtx seq, rtx reg, rtx reg2)\n \t\t\t    reg2,\n \t\t\t    adjust_address (slot, word_mode, UNITS_PER_WORD)));\n   emit_insn (gen_rtx_SET (VOIDmode, reg, slot));\n-  emit_insn (gen_stack_pointer_inc (GEN_INT (STACK_BOUNDARY/BITS_PER_UNIT)));\n+  emit_insn (gen_stack_pointer_inc (GEN_INT (size)));\n }\n \n /* Output the assembler code for a thunk function.  THUNK_DECL is the"}]}