{"sha": "a6b13d324fa2d83538e2c733906ced7b000209ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiMTNkMzI0ZmEyZDgzNTM4ZTJjNzMzOTA2Y2VkN2IwMDAyMDlhYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-12-12T13:01:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-02T08:58:05Z"}, "message": "[Ada] Address potentially uninitialized variables and dead code\n\n2020-06-02  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* bcheck.adb, binde.adb, bindo-diagnostics.adb, checks.adb,\n\texp_aggr.adb, exp_ch3.adb, exp_ch4.adb, exp_ch7.adb,\n\texp_ch9.adb, gnatname.adb, sem_case.adb, sem_ch13.adb,\n\tsem_ch5.adb, sem_prag.adb, sem_util.adb, uintp.adb, urealp.adb,\n\txoscons.adb, xr_tabls.adb, xref_lib.adb: Initialize objects more\n\texplicitly and add corresponding assertions. Remove dead code.\n\tAlso add a few Annotate pragmas to help static analysis.\n\t* libgnat/a-caldel.adb, libgnat/a-calend.adb,\n\tlibgnat/a-ngcoty.adb, libgnat/a-ngelfu.adb,\n\tlibgnat/a-ngrear.adb, libgnat/a-strfix.adb,\n\tlibgnat/g-calend.adb, libgnat/g-catiio.adb,\n\tlibgnat/g-comlin.adb, libgnat/g-debpoo.adb,\n\tlibgnat/g-dirope.adb, libgnat/g-hesorg.adb,\n\tlibgnat/g-pehage.adb, libgnat/g-socket.adb, libgnat/i-cobol.adb,\n\tlibgnat/s-dwalin.adb, libgnat/s-dwalin.ads,\n\tlibgnat/s-fatgen.adb, libgnat/s-gearop.adb,\n\tlibgnat/s-genbig.adb, libgnat/s-imgrea.adb,\n\tlibgnat/s-os_lib.adb, libgnat/s-rannum.adb,\n\tlibgnat/s-regpat.adb, libgnat/s-trasym__dwarf.adb,\n\tlibgnat/s-valrea.adb: Ditto.", "tree": {"sha": "da57150775778fc8e4b3770d2b80fd68e49c4c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da57150775778fc8e4b3770d2b80fd68e49c4c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6b13d324fa2d83538e2c733906ced7b000209ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b13d324fa2d83538e2c733906ced7b000209ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b13d324fa2d83538e2c733906ced7b000209ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b13d324fa2d83538e2c733906ced7b000209ac/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c726f3e42e227fdca32289e99b815988c40481a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c726f3e42e227fdca32289e99b815988c40481a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c726f3e42e227fdca32289e99b815988c40481a"}], "stats": {"total": 312, "additions": 212, "deletions": 100}, "files": [{"sha": "55c1eff716dc8135a94299ecb4ada6ff56b26866", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -771,7 +771,7 @@ package body Bcheck is\n       --  Reset when we find a unit that depends on the default and does\n       --  not have a local specification of the Optimize_Alignment setting.\n \n-      OA_Unit : Unit_Id;\n+      OA_Unit : Unit_Id := No_Unit_Id;\n       --  Id of unit from which OA_Setting was set\n \n       C : Character;\n@@ -789,6 +789,7 @@ package body Bcheck is\n                null;\n \n             else\n+               pragma Assert (Present (OA_Unit));\n                Error_Msg_Unit_1 := Units.Table (OA_Unit).Uname;\n                Error_Msg_Unit_2 := Units.Table (U).Uname;\n "}, {"sha": "abf94973ea2aa56baca3395916baa61c0d9d739a", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1056,6 +1056,8 @@ package body Binde is\n       --  becomes zero, then add to no-predecessor list.\n \n       S := UNR.Table (Chosen).Successors;\n+      pragma Annotate (CodePeer, Modified, S);\n+\n       while S /= No_Successor loop\n          U := Succ.Table (S).After;\n          UNR.Table (U).Num_Pred := UNR.Table (U).Num_Pred - 1;\n@@ -2390,6 +2392,8 @@ package body Binde is\n    begin\n       if ST.Reason in Elab_All .. Elab_All_Desirable then\n          L := ST.Elab_All_Link;\n+         pragma Annotate (CodePeer, Modified, L);\n+\n          while L /= No_Elab_All_Link loop\n             Nam := Elab_All_Entries.Table (L).Needed_By;\n             Error_Msg_Unit_1 := Nam;"}, {"sha": "934e9a693367f77ff5fe6e0f422bf8c0c4db10b3", "filename": "gcc/ada/bindo-diagnostics.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fbindo-diagnostics.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fbindo-diagnostics.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-diagnostics.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -343,7 +343,7 @@ package body Bindo.Diagnostics is\n                                  (G     => Lib_Graph,\n                                   Cycle => Cycle);\n \n-      Current_Edge : Library_Graph_Edge_Id;\n+      Current_Edge : Library_Graph_Edge_Id := No_Library_Graph_Edge;\n       First_Edge   : Library_Graph_Edge_Id;\n       Iter         : Edges_Of_Cycle_Iterator;\n       Next_Edge    : Library_Graph_Edge_Id;"}, {"sha": "6c597648039aeba6b9d7b40256c5ccb1c761785a", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -8740,8 +8740,7 @@ package body Checks is\n \n             else\n                declare\n-                  Rtype    : Entity_Id;\n-                  pragma Warnings (Off, Rtype);\n+                  Rtype    : Entity_Id := Empty;\n                   New_Alts : List_Id;\n                   New_Exp  : Node_Id;\n \n@@ -8771,6 +8770,7 @@ package body Checks is\n                       Expression   => Expression (N),\n                       Alternatives => New_Alts));\n \n+                  pragma Assert (Present (Rtype));\n                   Reanalyze (Rtype, Suppress => True);\n                end;\n             end if;"}, {"sha": "f4b959516d761de44c1974beaecd59b8f9d1d0bf", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -5239,7 +5239,7 @@ package body Exp_Aggr is\n       --  specifically optimized for the target.\n \n       function Aggr_Assignment_OK_For_Backend (N : Node_Id) return Boolean is\n-         Csiz      : Uint;\n+         Csiz      : Uint := No_Uint;\n          Ctyp      : Entity_Id;\n          Expr      : Node_Id;\n          High      : Node_Id;\n@@ -5336,6 +5336,8 @@ package body Exp_Aggr is\n          --  Scalar types are OK if their size is a multiple of Storage_Unit\n \n          elsif Is_Scalar_Type (Ctyp) then\n+            pragma Assert (Csiz /= No_Uint);\n+\n             if Csiz mod System_Storage_Unit /= 0 then\n                return False;\n             end if;"}, {"sha": "15d468be6c1c8285f2ca9d479224212e67f41369", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -5579,7 +5579,7 @@ package body Exp_Ch3 is\n          declare\n             Comp  : Entity_Id;\n             First : Boolean;\n-            M_Id  : Entity_Id;\n+            M_Id  : Entity_Id := Empty;\n             Typ   : Entity_Id;\n \n          begin\n@@ -5612,6 +5612,7 @@ package body Exp_Ch3 is\n                   --  Reuse the same master to service any additional types\n \n                   else\n+                     pragma Assert (Present (M_Id));\n                      Set_Master_Id (Typ, M_Id);\n                   end if;\n                end if;"}, {"sha": "77857763b1eb2f54ceed03ddbad0f9ff24e8a614", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -2814,7 +2814,7 @@ package body Exp_Ch4 is\n       --  to just do a Copy_Node to get an appropriate copy. The extra zeroth\n       --  entry always is set to zero. The length is of type Artyp.\n \n-      Low_Bound : Node_Id;\n+      Low_Bound : Node_Id := Empty;\n       --  A tree node representing the low bound of the result (of type Ityp).\n       --  This is either an integer literal node, or an identifier reference to\n       --  a constant entity initialized to the appropriate value.\n@@ -2834,7 +2834,7 @@ package body Exp_Ch4 is\n       High_Bound : Node_Id := Empty;\n       --  A tree node representing the high bound of the result (of type Ityp)\n \n-      Result : Node_Id;\n+      Result : Node_Id := Empty;\n       --  Result of the concatenation (of type Ityp)\n \n       Actions : constant List_Id := New_List;\n@@ -3365,6 +3365,8 @@ package body Exp_Ch4 is\n          end;\n       end if;\n \n+      pragma Assert (Present (Low_Bound));\n+\n       --  Now we can safely compute the upper bound, normally\n       --  Low_Bound + Length - 1.\n \n@@ -3621,6 +3623,7 @@ package body Exp_Ch4 is\n       Result := New_Occurrence_Of (Ent, Loc);\n \n    <<Done>>\n+      pragma Assert (Present (Result));\n       Rewrite (Cnode, Result);\n       Analyze_And_Resolve (Cnode, Atyp);\n \n@@ -4369,8 +4372,7 @@ package body Exp_Ch4 is\n          declare\n             Idx : Node_Id := First_Index (E);\n             Len : Node_Id;\n-            Res : Node_Id;\n-            pragma Warnings (Off, Res);\n+            Res : Node_Id := Empty;\n \n          begin\n             for J in 1 .. Number_Dimensions (E) loop\n@@ -4443,6 +4445,7 @@ package body Exp_Ch4 is\n                   Res := Len;\n \n                else\n+                  pragma Assert (Present (Res));\n                   Res :=\n                     Make_Op_Multiply (Loc,\n                       Left_Opnd  => Res,"}, {"sha": "d4c8b99ef8d599e443ca350c904e5cf2083b5a1e", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -909,7 +909,7 @@ package body Exp_Ch7 is\n       elsif Is_Protected_Body then\n          declare\n             Spec      : constant Node_Id := Parent (Corresponding_Spec (N));\n-            Conc_Typ  : Entity_Id;\n+            Conc_Typ  : Entity_Id := Empty;\n             Param     : Node_Id;\n             Param_Typ : Entity_Id;\n \n@@ -929,6 +929,7 @@ package body Exp_Ch7 is\n             end loop;\n \n             pragma Assert (Present (Param));\n+            pragma Assert (Present (Conc_Typ));\n \n             --  Historical note: In earlier versions of GNAT, there was code\n             --  at this point to generate stuff to service entry queues. It is\n@@ -5720,8 +5721,8 @@ package body Exp_Ch7 is\n          Blk_Decl  : Node_Id := Empty;\n          Blk_Decls : List_Id := No_List;\n          Blk_Ins   : Node_Id;\n-         Blk_Stmts : List_Id;\n-         Loc       : Source_Ptr;\n+         Blk_Stmts : List_Id := No_List;\n+         Loc       : Source_Ptr := No_Location;\n          Obj_Decl  : Node_Id;\n \n       --  Start of processing for Process_Transients_In_Scope\n@@ -5854,6 +5855,7 @@ package body Exp_Ch7 is\n                --  Construct all necessary circuitry to hook and finalize a\n                --  single transient object.\n \n+               pragma Assert (Present (Blk_Stmts));\n                Process_Transient_In_Scope\n                  (Obj_Decl  => Obj_Decl,\n                   Blk_Data  => Blk_Data,\n@@ -5875,6 +5877,9 @@ package body Exp_Ch7 is\n \n          if Present (Blk_Decl) then\n \n+            pragma Assert (Present (Blk_Stmts));\n+            pragma Assert (Loc /= No_Location);\n+\n             --  Note that this Abort_Undefer does not require a extra block or\n             --  an AT_END handler because each finalization exception is caught\n             --  in its own corresponding finalization block. As a result, the"}, {"sha": "a2afa2ec71d57d6f015caa4ad3e831a4abc6f3eb", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -2546,7 +2546,7 @@ package body Exp_Ch9 is\n       Lo    : Node_Id;\n       Hi    : Node_Id;\n       Decls : List_Id := New_List;\n-      Ret   : Node_Id;\n+      Ret   : Node_Id := Empty;\n       Spec  : Node_Id;\n       Siz   : Node_Id := Empty;\n \n@@ -2692,16 +2692,21 @@ package body Exp_Ch9 is\n               Make_Simple_Return_Statement (Loc,\n                 Expression => Make_Integer_Literal (Loc, 1));\n \n-         elsif Nkind (Ret) = N_If_Statement then\n+         else\n+            pragma Assert (Present (Ret));\n \n-            --  Ranges are in increasing order, so last one doesn't need guard\n+            if Nkind (Ret) = N_If_Statement then\n \n-            declare\n-               Nod : constant Node_Id := Last (Elsif_Parts (Ret));\n-            begin\n-               Remove (Nod);\n-               Set_Else_Statements (Ret, Then_Statements (Nod));\n-            end;\n+               --  Ranges are in increasing order, so last one doesn't need\n+               --  guard.\n+\n+               declare\n+                  Nod : constant Node_Id := Last (Elsif_Parts (Ret));\n+               begin\n+                  Remove (Nod);\n+                  Set_Else_Statements (Ret, Then_Statements (Nod));\n+               end;\n+            end if;\n          end if;\n       end if;\n \n@@ -10209,8 +10214,7 @@ package body Exp_Ch9 is\n \n          declare\n             Elmt : Elmt_Id;\n-            Op   : Entity_Id;\n-            pragma Warnings (Off, Op);\n+            Op   : Entity_Id := Empty;\n \n          begin\n             Elmt := First_Elmt (Primitive_Operations (Etype (Conc_Typ)));\n@@ -10220,6 +10224,8 @@ package body Exp_Ch9 is\n                Next_Elmt (Elmt);\n             end loop;\n \n+            pragma Assert (Present (Op));\n+\n             return\n               Make_Procedure_Call_Statement (Loc,\n                 Name                   => New_Occurrence_Of (Op, Loc),\n@@ -10630,7 +10636,7 @@ package body Exp_Ch9 is\n       Num_Alts       : Nat;\n       Num_Accept     : Nat := 0;\n       Proc           : Node_Id;\n-      Time_Type      : Entity_Id;\n+      Time_Type      : Entity_Id := Empty;\n       Select_Call    : Node_Id;\n \n       Qnam : constant Entity_Id :=\n@@ -11251,6 +11257,8 @@ package body Exp_Ch9 is\n          Delay_Min :=\n            Make_Defining_Identifier (Loc, New_External_Name ('D', 3));\n \n+         pragma Assert (Present (Time_Type));\n+\n          Append_To (Decls,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Delay_Val,"}, {"sha": "4d500cef59aac722e59fbbc02a250cdae52b65a4", "filename": "gcc/ada/gnatname.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fgnatname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fgnatname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatname.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -681,6 +681,8 @@ procedure Gnatname is\n                                              Sources.Last\n                               loop\n                                  Current_Source := Sources.Table (Index);\n+                                 pragma Annotate\n+                                   (CodePeer, Modified, Current_Source);\n \n                                  if Opt.Verbose_Mode then\n                                     if Current_Source.Spec then"}, {"sha": "924442508621cfe1d78be6a0da08d49e1c1bb43a", "filename": "gcc/ada/libgnat/a-caldel.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-caldel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-caldel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-caldel.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -103,6 +103,8 @@ begin\n    --  this soft link, or this will be overridden during the elaboration of\n    --  System.Tasking.Initialization\n \n+   pragma Annotate (CodePeer, Modified, SSL.Timed_Delay);\n+\n    if SSL.Timed_Delay = null then\n       SSL.Timed_Delay := Timed_Delay_NT'Access;\n    end if;"}, {"sha": "219fd9aaabdd6a33c63c63d2b70d4b0fc8543d84", "filename": "gcc/ada/libgnat/a-calend.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calend.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -435,18 +435,14 @@ is\n       if End_T < Leap_Second_Times (1) then\n          Elapsed_Leaps := 0;\n          Next_Leap     := Leap_Second_Times (1);\n-         return;\n \n       elsif Start_T > Leap_Second_Times (Leap_Seconds_Count) then\n          Elapsed_Leaps := 0;\n          Next_Leap     := End_Of_Time;\n-         return;\n-      end if;\n-\n-      --  Perform the calculations only if the start date is within the leap\n-      --  second occurrences table.\n \n-      if Start_T <= Leap_Second_Times (Leap_Seconds_Count) then\n+      else\n+         --  Perform the calculations only if the start date is within the leap\n+         --  second occurrences table.\n \n          --    1    2                  N - 1   N\n          --  +----+----+--  . . .  --+-------+---+\n@@ -480,9 +476,6 @@ is\n          end if;\n \n          Elapsed_Leaps := End_Index - Start_Index;\n-\n-      else\n-         Elapsed_Leaps := 0;\n       end if;\n    end Cumulative_Leap_Seconds;\n \n@@ -763,6 +756,7 @@ is\n         (Secs_T'Unchecked_Access,\n          Flag'Unchecked_Access,\n          Offset'Unchecked_Access);\n+      pragma Annotate (CodePeer, Modified, Offset);\n \n       return Long_Integer (Offset);\n    end UTC_Time_Offset;"}, {"sha": "deb200b204af0291138c7fc7a5bc47fd04e5778f", "filename": "gcc/ada/libgnat/a-ngcoty.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-ngcoty.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-ngcoty.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngcoty.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -66,11 +66,19 @@ package body Ada.Numerics.Generic_Complex_Types is\n          --  return false, the test can only be written thus.\n \n          if not (abs (X) <= R'Last) then\n+            pragma Annotate\n+              (CodePeer, Intentional,\n+               \"test always false\", \"test for infinity\");\n+\n             X := Scale**2 * ((Left.Re / Scale) * (Right.Re / Scale) -\n                              (Left.Im / Scale) * (Right.Im / Scale));\n          end if;\n \n          if not (abs (Y) <= R'Last) then\n+            pragma Annotate\n+              (CodePeer, Intentional,\n+               \"test always false\", \"test for infinity\");\n+\n             Y := Scale**2 * ((Left.Re / Scale) * (Right.Im / Scale)\n                            + (Left.Im / Scale) * (Right.Re / Scale));\n          end if;\n@@ -588,6 +596,7 @@ package body Ada.Numerics.Generic_Complex_Types is\n \n       exception\n          when Constraint_Error =>\n+            pragma Assert (X.Re /= 0.0);\n             return R (Double (abs (X.Re))\n               * Sqrt (1.0 + (Double (X.Im) / Double (X.Re)) ** 2));\n       end;\n@@ -602,6 +611,7 @@ package body Ada.Numerics.Generic_Complex_Types is\n \n       exception\n          when Constraint_Error =>\n+            pragma Assert (X.Im /= 0.0);\n             return R (Double (abs (X.Im))\n               * Sqrt (1.0 + (Double (X.Re) / Double (X.Im)) ** 2));\n       end;"}, {"sha": "3d494042c2416943bb5ab14a659aa29b06195ce2", "filename": "gcc/ada/libgnat/a-ngelfu.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngelfu.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -680,6 +680,8 @@ is\n       Z := G * G;\n       P := G * ((P2 * Z + P1) * Z + P0);\n       Q := ((Q3 * Z + Q2) * Z + Q1) * Z + Q0;\n+\n+      pragma Assert (Q /= P);\n       R := 0.5 + P / (Q - P);\n \n       R := Float_Type'Base'Scaling (R, Integer (XN) + 1);"}, {"sha": "8348cb7fde65d5321f221153fb6fdca817108a94", "filename": "gcc/ada/libgnat/a-ngrear.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-ngrear.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-ngrear.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ngrear.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -560,6 +560,8 @@ package body Ada.Numerics.Generic_Real_Arrays is\n       function Compute_Tan (P, H : Real) return Real is\n          (if Is_Tiny (P, Compared_To => H) then P / H\n           else Compute_Tan (Theta => H / (2.0 * P)));\n+      pragma Annotate\n+        (CodePeer, False_Positive, \"divide by zero\", \"H, P /= 0\");\n \n       function Sum_Strict_Upper (M : Square_Matrix) return Real;\n       --  Return the sum of all elements in the strict upper triangle of M"}, {"sha": "1f94b864833d4e1065845bb2c4c9a0bb3ad7a11b", "filename": "gcc/ada/libgnat/a-strfix.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strfix.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -192,6 +192,10 @@ package body Ada.Strings.Fixed is\n       elsif From not in Source'Range\n         or else Through > Source'Last\n       then\n+         pragma Annotate\n+           (CodePeer, False_Positive,\n+            \"test always false\", \"self fullfilling prophecy\");\n+\n          --  In most cases this raises an exception, but the case of deleting\n          --  a null string at the end of the current one is a special-case, and\n          --  reflects the equivalence with Replace_String (RM A.4.3 (86/3))."}, {"sha": "ab5bab3574fc86ef3a9df059a5a4ded1c2d67c61", "filename": "gcc/ada/libgnat/g-calend.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-calend.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -352,6 +352,9 @@ package body GNAT.Calendar is\n \n    begin\n       timeval_to_duration (T, sec'Access, usec'Access);\n+      pragma Annotate (CodePeer, Modified, sec);\n+      pragma Annotate (CodePeer, Modified, usec);\n+\n       return Duration (sec) + Duration (usec) / Micro;\n    end To_Duration;\n "}, {"sha": "cc860abcf89d8f19e21d477773930c223a9f6d4b", "filename": "gcc/ada/libgnat/g-catiio.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-catiio.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -950,6 +950,8 @@ package body GNAT.Calendar.Time_IO is\n       when End_Of_Source_Reached\n          | Wrong_Syntax\n       =>\n+         Time :=\n+           Time_Of (Year_Number'First, Month_Number'First, Day_Number'First);\n          Success := False;\n    end Parse_ISO_8861_UTC;\n "}, {"sha": "bb553e972437f7e2d59c7195353cdb0d3c9c427e", "filename": "gcc/ada/libgnat/g-comlin.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-comlin.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -537,6 +537,7 @@ package body GNAT.Command_Line is\n       P      : Switch_Parameter_Type;\n \n    begin\n+      Param             := Parameter_None;\n       Index_In_Switches := 0;\n       Switch_Length     := 0;\n "}, {"sha": "ae2fb1ce157245d5691bb82c9023f4cc90506a9e", "filename": "gcc/ada/libgnat/g-debpoo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-debpoo.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1420,6 +1420,7 @@ package body GNAT.Debug_Pools is\n \n    begin\n       Valid := Is_Valid (Storage_Address);\n+      Size_In_Storage_Elements := Storage_Count'First;\n \n       if Is_Valid (Storage_Address) then\n          declare"}, {"sha": "0fd7a24d2ac5765299afcfd68851adb819f2c184", "filename": "gcc/ada/libgnat/g-dirope.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-dirope.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-dirope.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-dirope.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -352,6 +352,8 @@ package body GNAT.Directory_Operations is\n       begin\n          K := K + 1;\n \n+         pragma Annotate (CodePeer, Modified, P);\n+\n          if P = '%' or else Path (K) = '{' then\n \n             --  Set terminator character"}, {"sha": "bf5487420b4ef901ff708d4e3dbf0ccc8c516114", "filename": "gcc/ada/libgnat/g-hesorg.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-hesorg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-hesorg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-hesorg.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -45,6 +45,8 @@ package body GNAT.Heap_Sort_G is\n    --  from 2NlogN to NlogN.\n \n    procedure Sort (N : Natural) is\n+      pragma Annotate (CodePeer, Skip_Analysis);\n+      --  CodePeer is sometimes getting confused on this procedure\n \n       Max : Natural := N;\n       --  Current Max index in tree being sifted"}, {"sha": "a65dc853c17e40979dd7d07cb489471a70b5737f", "filename": "gcc/ada/libgnat/g-pehage.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-pehage.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -622,6 +622,7 @@ package body GNAT.Perfect_Hash_Generators is\n             E := Get_Edges (J);\n \n             if Get_Graph (E.Y) = -1 then\n+               pragma Assert (NK /= 0);\n                Set_Graph (E.Y, (E.Key - Get_Graph (X)) mod NK);\n                Assign (E.Y);\n             end if;\n@@ -2201,6 +2202,8 @@ package body GNAT.Perfect_Hash_Generators is\n          --  in the position selection.\n \n          for J in S'Range loop\n+            pragma Annotate (CodePeer, Modified, S (J));\n+\n             if S (J).First = S (J).Last then\n                F := S (J).First;\n                L := S (J).Last;\n@@ -2359,6 +2362,10 @@ package body GNAT.Perfect_Hash_Generators is\n \n             for P in 1 .. Last_Sel_Pos - 1 loop\n                if Max_Diff_Sel_Pos < Sel_Position (P) then\n+                  pragma Annotate\n+                    (CodePeer, False_Positive,\n+                     \"test always false\", \"false positive?\");\n+\n                   Sel_Position (P + 1 .. Last_Sel_Pos) :=\n                     Sel_Position (P .. Last_Sel_Pos - 1);\n                   Sel_Position (P) := Max_Diff_Sel_Pos;\n@@ -2525,13 +2532,15 @@ package body GNAT.Perfect_Hash_Generators is\n             for J in 0 .. T1_Len - 1 loop\n                exit when Word (J + 1) = ASCII.NUL;\n                R := Get_Table (Table, J, Get_Used_Char (Word (J + 1)));\n+               pragma Assert (NV /= 0);\n                S := (S + R) mod NV;\n             end loop;\n \n          when Memory_Space =>\n             for J in 0 .. T1_Len - 1 loop\n                exit when Word (J + 1) = ASCII.NUL;\n                R := Get_Table (Table, J, 0);\n+               pragma Assert (NV /= 0);\n                S := (S + R * Character'Pos (Word (J + 1))) mod NV;\n             end loop;\n       end case;"}, {"sha": "8f8c9d8179fd2e248172dec553825650f384c079", "filename": "gcc/ada/libgnat/g-socket.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socket.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -836,6 +836,7 @@ package body GNAT.Sockets is\n       --  the waiting task to resume its execution.\n \n       Res := Signalling_Fds.Create (Two_Fds'Access);\n+      pragma Annotate (CodePeer, Modified, Two_Fds);\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);\n@@ -886,6 +887,7 @@ package body GNAT.Sockets is\n         ((if Family = Family_Unspec then Default_Socket_Pair_Family\n           else Families (Family)),\n          Modes (Mode), Levels (Level), Pair'Access);\n+      pragma Annotate (CodePeer, Modified, Pair);\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);\n@@ -957,8 +959,12 @@ package body GNAT.Sockets is\n       if Item.Last /= No_Socket then\n          Get_Socket_From_Set\n            (Item.Set'Access, Last => L'Access, Socket => S'Access);\n+         pragma Annotate (CodePeer, Modified, L);\n+         pragma Annotate (CodePeer, Modified, S);\n+\n          Item.Last := Socket_Type (L);\n          Socket    := Socket_Type (S);\n+\n       else\n          Socket := No_Socket;\n       end if;\n@@ -2921,8 +2927,7 @@ package body GNAT.Sockets is\n    -- To_Int --\n    ------------\n \n-   function To_Int (F : Request_Flag_Type) return C.int\n-   is\n+   function To_Int (F : Request_Flag_Type) return C.int is\n       Current : Request_Flag_Type := F;\n       Result  : C.int := 0;\n \n@@ -2932,6 +2937,10 @@ package body GNAT.Sockets is\n \n          if Current mod 2 /= 0 then\n             if Flags (J) = -1 then\n+               pragma Annotate\n+                 (CodePeer, False_Positive,\n+                  \"test always false\", \"self fulfilling prophecy\");\n+\n                Raise_Socket_Error (SOSC.EOPNOTSUPP);\n             end if;\n "}, {"sha": "6caa35145a8e97bb2145de60a4b0ba9f9a2b955a", "filename": "gcc/ada/libgnat/i-cobol.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fi-cobol.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fi-cobol.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fi-cobol.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -240,11 +240,6 @@ package body Interfaces.COBOL is\n                            (COBOL_Character'Pos (K) -\n                              COBOL_Character'Pos (COBOL_Digits'First));\n \n-            elsif K in COBOL_Plus_Digits then\n-               Result := Result * 10 +\n-                           (COBOL_Character'Pos (K) -\n-                             COBOL_Character'Pos (COBOL_Plus_Digits'First));\n-\n             elsif K in COBOL_Minus_Digits then\n                Result := Result * 10 +\n                            (COBOL_Character'Pos (K) -"}, {"sha": "674595338ef65efab1f5934e312029878f1db863", "filename": "gcc/ada/libgnat/s-dwalin.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -440,6 +440,10 @@ package body System.Dwarf_Lines is\n         or else Info_Sec = Null_Section\n         or else Aranges_Sec = Null_Section\n       then\n+         pragma Annotate\n+           (CodePeer, False_Positive,\n+            \"test always true\", \"codepeer got confused\");\n+\n          C.Has_Debug := False;\n          return;\n       end if;\n@@ -883,6 +887,7 @@ package body System.Dwarf_Lines is\n       Success     :    out Boolean)\n    is\n    begin\n+      Info_Offset := 0;\n       Seek (C.Aranges, 0);\n \n       while Tell (C.Aranges) < Length (C.Aranges) loop\n@@ -905,6 +910,7 @@ package body System.Dwarf_Lines is\n             end;\n          end loop;\n       end loop;\n+\n       Success := False;\n    end Aranges_Lookup;\n \n@@ -1028,6 +1034,7 @@ package body System.Dwarf_Lines is\n       Has_Child     : uint8;\n       pragma Unreferenced (Has_Child);\n    begin\n+      Line_Offset := 0;\n       Success := False;\n \n       Seek (C.Info, Info_Offset);\n@@ -1119,7 +1126,8 @@ package body System.Dwarf_Lines is\n       Version     : uint16;\n       Sz          : uint8;\n    begin\n-      Success := False;\n+      Success     := False;\n+      Info_Offset := 0;\n \n       Read_Initial_Length (C.Aranges, Unit_Length, Is64);\n \n@@ -1407,6 +1415,7 @@ package body System.Dwarf_Lines is\n       Success      : Boolean;\n       Done         : Boolean;\n       S            : Object_Symbol;\n+\n    begin\n       --  Initialize result\n       Dir_Name    := null;\n@@ -1422,6 +1431,8 @@ package body System.Dwarf_Lines is\n          begin\n             First := C.Cache'First;\n             Last  := C.Cache'Last;\n+            Mid   := First;\n+\n             while First <= Last loop\n                Mid := First + (Last - First) / 2;\n                if Addr_Off < C.Cache (Mid).First then\n@@ -1432,6 +1443,7 @@ package body System.Dwarf_Lines is\n                   exit;\n                end if;\n             end loop;\n+\n             if Addr_Off >= C.Cache (Mid).First\n               and then Addr_Off < C.Cache (Mid).First + C.Cache (Mid).Size\n             then\n@@ -1474,6 +1486,7 @@ package body System.Dwarf_Lines is\n       C.Next_Prologue := 0;\n       Initialize_State_Machine (C);\n       Parse_Prologue (C);\n+      Previous_Row.Line := 0;\n \n       --  Advance to the first entry\n \n@@ -1535,7 +1548,7 @@ package body System.Dwarf_Lines is\n      (Cin          :        Dwarf_Context;\n       Traceback    :        AET.Tracebacks_Array;\n       Suppress_Hex :        Boolean;\n-      Symbol_Found : in out Boolean;\n+      Symbol_Found :    out Boolean;\n       Res          : in out System.Bounded_Strings.Bounded_String)\n    is\n       use Ada.Characters.Handling;"}, {"sha": "cfde1c64fc65978618c6dd5ab44da6441b19cf36", "filename": "gcc/ada/libgnat/s-dwalin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-dwalin.ads?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -93,7 +93,7 @@ package System.Dwarf_Lines is\n      (Cin          :        Dwarf_Context;\n       Traceback    :        AET.Tracebacks_Array;\n       Suppress_Hex :        Boolean;\n-      Symbol_Found : in out Boolean;\n+      Symbol_Found :    out Boolean;\n       Res          : in out System.Bounded_Strings.Bounded_String);\n    --  Generate a string for a traceback suitable for displaying to the user.\n    --  If one or more symbols are found, Symbol_Found is set to True. This"}, {"sha": "481d672a2cdc7197c4bfb0c2b0f1889e975e1db3", "filename": "gcc/ada/libgnat/s-fatgen.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-fatgen.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -219,6 +219,10 @@ package body System.Fat_Gen is\n                   Ax := Ax * R_Power (Expbits'Last);\n                   Ex := Ex - Log_Power (Expbits'Last);\n                end loop;\n+               pragma Annotate\n+                 (CodePeer, Intentional,\n+                  \"test always false\",\n+                  \"expected for some instantiations\");\n \n                --  Rad ** -64 <= Ax < 1\n "}, {"sha": "166b04ba7c1f3ca20914c889a8f98ef9afa48d51", "filename": "gcc/ada/libgnat/s-gearop.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-gearop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-gearop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-gearop.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -240,6 +240,8 @@ package body System.Generic_Array_Operations is\n          for J in N'Range (2) loop\n             N (Row - M'First (1) + N'First (1), J) :=\n               N (Row - M'First (1) + N'First (1), J) / Scale;\n+            pragma Annotate\n+              (CodePeer, False_Positive, \"divide by zero\", \"Scale /= 0\");\n          end loop;\n       end Divide_Row;\n \n@@ -602,6 +604,9 @@ package body System.Generic_Array_Operations is\n          end if;\n \n       elsif X > Real'Base'Last then\n+         pragma Annotate\n+           (CodePeer, Intentional,\n+            \"test always false\", \"test for infinity\");\n \n          --  X is infinity, which is its own square root\n \n@@ -627,6 +632,8 @@ package body System.Generic_Array_Operations is\n       --  of precision.\n \n       for J in 1 .. 8 loop\n+         pragma Assert (Root /= 0.0);\n+\n          Next := (Root + X / Root) / 2.0;\n          exit when Root = Next;\n          Root := Next;"}, {"sha": "69d284fd1626f93a144d63ab13864da607b941f4", "filename": "gcc/ada/libgnat/s-genbig.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-genbig.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-genbig.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-genbig.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -733,6 +733,7 @@ package body System.Generic_Bignums is\n             ND := 0;\n             for J in 1 .. X.Len loop\n                ND := Base * ND + DD (X.D (J));\n+               pragma Assert (Div /= 0);\n                Result (J) := SD (ND / Div);\n                ND := ND rem Div;\n             end loop;"}, {"sha": "46cacd0ec0c043f1e8aabdb6cd5bfd761cf3fd9c", "filename": "gcc/ada/libgnat/s-imgrea.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imgrea.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -289,6 +289,8 @@ package body System.Img_Real is\n             --  What we are looking for is a power of ten to divide X by\n             --  so that the result lies within the required range.\n \n+            pragma Assert (Powten (Maxpow) /= 0.0);\n+\n             loop\n                XP := X / Powten (Maxpow);\n                exit when XP < Powten (S) or else Scale > Maxscaling;\n@@ -490,6 +492,9 @@ package body System.Img_Real is\n          --  an infinite value, so we print Inf.\n \n          if V > Long_Long_Float'Last then\n+            pragma Annotate\n+              (CodePeer, Intentional, \"test always true\", \"test for infinity\");\n+\n             Set ('+');\n             Set ('I');\n             Set ('n');"}, {"sha": "28fbbf3106440e5cc6e6693f6f00e113ebea020e", "filename": "gcc/ada/libgnat/s-os_lib.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -574,14 +574,15 @@ package body System.OS_Lib is\n                --  touch destination file at all.\n \n                From := Open_Read (Name, Binary);\n-               if From /= Invalid_FD then\n+\n+               if From = Invalid_FD then\n+                  Success := False;\n+               else\n                   To := Open_Read_Write (Pathname, Binary);\n+                  Lseek (To, 0, Seek_End);\n+                  Copy (From, To);\n                end if;\n \n-               Lseek (To, 0, Seek_End);\n-\n-               Copy (From, To);\n-\n             --  Appending to directory, not allowed\n \n             elsif Is_Directory (Pathname) then\n@@ -1999,6 +2000,8 @@ package body System.OS_Lib is\n \n                   --  If the string ends with \\, double it\n \n+                  pragma Annotate (CodePeer, Modified, Res (J - 1));\n+\n                   if Res (J - 1) = '\\' then\n                      Res (J) := '\\';\n                      J := J + 1;"}, {"sha": "1aa755c0144476beb4fb94a558d18b333e712d05", "filename": "gcc/ada/libgnat/s-rannum.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rannum.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -295,6 +295,7 @@ is\n             K      : Bit_Count;       --  Next decrement to exponent\n \n          begin\n+            K := 0;\n             Mantissa := Random (Gen) / 2**Extra_Bits;\n             R := Unsigned_32 (Mantissa mod 2**Extra_Bits);\n             R_Bits := Extra_Bits;"}, {"sha": "69fe1503f5993954fd94710af48d9e151d194901", "filename": "gcc/ada/libgnat/s-regpat.adb", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-regpat.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1460,19 +1460,9 @@ package body System.Regpat is\n                  and then Expression (Parse_Pos + 1) /= ']'\n                then\n                   Parse_Pos := Parse_Pos + 1;\n-\n-                  --  Do we have a range like '\\d-a' and '[:space:]-a'\n-                  --  which is not a real range\n-\n-                  if Named_Class /= ANYOF_NONE then\n-                     Set_In_Class (Bitmap, '-');\n-                  else\n-                     In_Range := True;\n-                  end if;\n-\n+                  In_Range := True;\n                else\n                   Set_In_Class (Bitmap, Value);\n-\n                end if;\n \n             --  Else in a character range\n@@ -3275,13 +3265,13 @@ package body System.Regpat is\n         (IP  : Pointer;\n          Max : Natural := Natural'Last) return Natural\n       is\n-         Scan  : Natural := Input_Pos;\n-         Last  : Natural;\n-         Op    : constant Opcode := Opcode'Val (Character'Pos (Program (IP)));\n-         Count : Natural;\n-         C     : Character;\n-         Is_First : Boolean := True;\n-         Bitmap   : Character_Class;\n+         Scan   : Natural := Input_Pos;\n+         Last   : Natural;\n+         Op     : constant Opcode :=\n+           Opcode'Val (Character'Pos (Program (IP)));\n+         Count  : Natural;\n+         C      : Character;\n+         Bitmap : Character_Class;\n \n       begin\n          if Max = Natural'Last or else Scan + Max - 1 > Last_In_Data then\n@@ -3324,10 +3314,7 @@ package body System.Regpat is\n                end loop;\n \n             when ANYOF =>\n-               if Is_First then\n-                  Bitmap_Operand (Program, IP, Bitmap);\n-                  Is_First := False;\n-               end if;\n+               Bitmap_Operand (Program, IP, Bitmap);\n \n                while Scan <= Last\n                  and then Get_From_Class (Bitmap, Data (Scan))"}, {"sha": "9f962757392f9d0bfc71e5737163b54b78d63363", "filename": "gcc/ada/libgnat/s-trasym__dwarf.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-trasym__dwarf.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -438,7 +438,7 @@ package body System.Traceback.Symbolic is\n       Suppress_Hex :        Boolean;\n       Res          : in out Bounded_String)\n    is\n-      Success : Boolean := False;\n+      Success : Boolean;\n    begin\n       if Symbolic.Module_Name.Is_Supported then\n          Append (Res, '[');"}, {"sha": "2ecc99b29f9d4e260022a0698a5a8656b8474435", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -92,8 +92,7 @@ package body System.Val_Real is\n    -- As_Digit --\n    --------------\n \n-   function As_Digit (C : Character) return Char_As_Digit\n-   is\n+   function As_Digit (C : Character) return Char_As_Digit is\n    begin\n       case C is\n          when '0' .. '9' =>\n@@ -133,7 +132,9 @@ package body System.Val_Real is\n \n       Trailing_Zeros : Natural := 0;\n       --  Number of trailing zeros at a given point.\n+\n    begin\n+      pragma Assert (Base in 2 .. 16);\n \n       --  If initial Scale is not 0 then it means that Precision_Limit was\n       --  reached during integral part scanning.\n@@ -217,7 +218,6 @@ package body System.Val_Real is\n             end if;\n          end if;\n       end loop;\n-\n    end Scan_Decimal_Digits;\n \n    --------------------------\n@@ -268,6 +268,8 @@ package body System.Val_Real is\n             --  Precision limit has been reached so just update the exponent\n             Scale := Scale + 1;\n          else\n+            pragma Assert (Base /= 0);\n+\n             if Value > (Precision_Limit - Digit) / Base then\n                --  Updating Value will overflow so ignore this digit and any\n                --  following ones. Only update the scale\n@@ -369,6 +371,10 @@ package body System.Val_Real is\n \n       --  First character can be either a decimal digit or a dot.\n       if Str (Index) in '0' .. '9' then\n+         pragma Annotate\n+           (CodePeer, Intentional,\n+            \"test always true\", \"defensive code below\");\n+\n          --  If this is a digit it can indicates either the float decimal\n          --  part or the base to use\n          Scan_Integral_Digits"}, {"sha": "5536e6d66c1dfba0d81dda6cc1c3d63dac2513bd", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -458,8 +458,7 @@ package body Sem_Case is\n          Choice      : Node_Id;\n          Choice_Hi   : Uint;\n          Choice_Lo   : Uint;\n-         Prev_Choice : Node_Id;\n-         pragma Warnings (Off, Prev_Choice);\n+         Prev_Choice : Node_Id := Empty;\n          Prev_Hi     : Uint;\n \n       begin\n@@ -485,6 +484,8 @@ package body Sem_Case is\n                   end if;\n                end loop;\n \n+               pragma Assert (Present (Prev_Choice));\n+\n                if Sloc (Prev_Choice) <= Sloc (Choice) then\n                   Error_Msg_Sloc := Sloc (Prev_Choice);\n                   Dup_Choice (Choice_Lo, UI_Min (Choice_Hi, Prev_Hi), Choice);"}, {"sha": "38943935e51b12a963bffcaab2bc0eb3d7729d81", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1580,7 +1580,7 @@ package body Sem_Ch13 is\n       --  Local variables\n \n       Aspect : Node_Id;\n-      Aitem  : Node_Id;\n+      Aitem  : Node_Id := Empty;\n       Ent    : Node_Id;\n \n       L : constant List_Id := Aspect_Specifications (N);\n@@ -10136,8 +10136,8 @@ package body Sem_Ch13 is\n       Rectype : Entity_Id;\n       Fent    : Entity_Id;\n       CC      : Node_Id;\n-      Fbit    : Uint;\n-      Lbit    : Uint;\n+      Fbit    : Uint := No_Uint;\n+      Lbit    : Uint := No_Uint;\n       Hbit    : Uint := Uint_0;\n       Comp    : Entity_Id;\n       Pcomp   : Entity_Id;\n@@ -10485,6 +10485,7 @@ package body Sem_Ch13 is\n                Nbit := Sbit;\n                for J in 1 .. Ncomps loop\n                   CEnt := Comps (J);\n+                  pragma Annotate (CodePeer, Modified, CEnt);\n \n                   declare\n                      CBO : constant Uint := Component_Bit_Offset (CEnt);"}, {"sha": "3f859c2b08fcc932313c333a6b8720aefb1313fe", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1847,7 +1847,7 @@ package body Sem_Ch5 is\n       Save_Unblocked_Exit_Count : constant Nat := Unblocked_Exit_Count;\n       --  Recursively save value of this global, will be restored on exit\n \n-      Save_In_Deleted_Code : Boolean;\n+      Save_In_Deleted_Code : Boolean := In_Deleted_Code;\n \n       Del : Boolean := False;\n       --  This flag gets set True if a True condition has been found, which"}, {"sha": "7aa48b5a8764d2ca6c07f4fd2496887cfb69eb61", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -30079,7 +30079,7 @@ package body Sem_Prag is\n       --  explicit contract.\n \n       Prags        : constant Node_Id := Contract (Parent_Subp);\n-      In_Spec_Expr : Boolean;\n+      In_Spec_Expr : Boolean := In_Spec_Expression;\n       Installed    : Boolean;\n       Prag         : Node_Id;\n       New_Prag     : Node_Id;"}, {"sha": "814d5039867cdd39fb7237e7cf1c9ca0d113824e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -2759,7 +2759,7 @@ package body Sem_Util is\n                   declare\n                      Count_Components   : Uint := Uint_0;\n                      Num_Components     : Uint;\n-                     Others_Assoc       : Node_Id;\n+                     Others_Assoc       : Node_Id := Empty;\n                      Others_Choice      : Node_Id := Empty;\n                      Others_Box_Present : Boolean := False;\n \n@@ -2844,6 +2844,8 @@ package body Sem_Util is\n                            --  minimum decoration required to collect the\n                            --  identifiers.\n \n+                           pragma Assert (Present (Others_Assoc));\n+\n                            if not Expander_Active then\n                               Comp_Expr := Expression (Others_Assoc);\n                            else\n@@ -13269,7 +13271,7 @@ package body Sem_Util is\n    procedure Insert_Explicit_Dereference (N : Node_Id) is\n       New_Prefix : constant Node_Id := Relocate_Node (N);\n       Ent        : Entity_Id := Empty;\n-      Pref       : Node_Id;\n+      Pref       : Node_Id := Empty;\n       I          : Interp_Index;\n       It         : Interp;\n       T          : Entity_Id;"}, {"sha": "bfdcb29f7dfef914c21246d55f044d73b61f4bd5", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1294,6 +1294,7 @@ package body Uintp is\n                   Discard_Int : Int;\n                   pragma Warnings (Off, Discard_Int);\n                begin\n+                  pragma Assert (D /= Int'(0));\n                   UI_Div_Vector\n                     (Dividend (Dividend'Last - R_Length + 1 .. Dividend'Last),\n                      D,"}, {"sha": "de31a065143f7fce8068f33c35ac6c7f632d4a3a", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -568,6 +568,9 @@ package body Urealp is\n       Num  : Uint;\n \n    begin\n+      pragma Annotate (CodePeer, Modified, Lval);\n+      pragma Annotate (CodePeer, Modified, Rval);\n+\n       --  Note, in the temporary Ureal_Entry values used in this procedure,\n       --  we store the sign as the sign of the numerator (i.e. xxx.Num may\n       --  be negative, even though in stored entries this can never be so)\n@@ -685,6 +688,8 @@ package body Urealp is\n       Rneg : constant Boolean     := Rval.Negative xor Lval.Negative;\n \n    begin\n+      pragma Annotate (CodePeer, Modified, Lval);\n+      pragma Annotate (CodePeer, Modified, Rval);\n       pragma Assert (Rval.Num /= Uint_0);\n \n       if Lval.Rbase = 0 then"}, {"sha": "68784f2a3d88ef3a8b7ef4e01821e8de740aa994", "filename": "gcc/ada/xoscons.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fxoscons.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fxoscons.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxoscons.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -494,6 +494,9 @@ procedure XOSCons is\n       Value1 := Get_Value (Slice (Sline, 2));\n       Value2 := Get_Value (Slice (Sline, 4));\n \n+      pragma Annotate (CodePeer, Modified, Value1);\n+      pragma Annotate (CodePeer, Modified, Value2);\n+\n       if Slice (Sline, 3) = \">\" then\n          Res := Cond and (Value1 > Value2);\n \n@@ -619,7 +622,7 @@ procedure XOSCons is\n    Current_Line : Integer;\n    Current_Info : Integer;\n    In_Comment   : Boolean;\n-   In_Template  : Boolean;\n+   In_Template  : Boolean := False;\n \n --  Start of processing for XOSCons\n "}, {"sha": "604e97932e91f2008b9a57c325dfa1d5bfdfdfb6", "filename": "gcc/ada/xr_tabls.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fxr_tabls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fxr_tabls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxr_tabls.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -1015,12 +1015,12 @@ package body Xr_Tabls is\n       Decl         : Declaration_Reference := Entities_HTable.Get_First;\n       Arr          : Reference_Array_Access;\n       Index        : Natural;\n-      End_Index    : Natural;\n+      End_Index    : Natural := 0;\n       Current_File : File_Reference;\n       Current_Line : Cst_String_Access;\n       Buffer       : GNAT.OS_Lib.String_Access;\n       Ref          : Reference;\n-      Line         : Natural;\n+      Line         : Natural := Natural'Last;\n \n    begin\n       --  Create a temporary array, where all references will be"}, {"sha": "ca988ddbaad0e547764d4698be3bff9f7bf936b8", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6b13d324fa2d83538e2c733906ced7b000209ac/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=a6b13d324fa2d83538e2c733906ced7b000209ac", "patch": "@@ -23,6 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+pragma Ada_2012;\n+\n with Osint;\n with Output; use Output;\n with Types;  use Types;\n@@ -767,13 +769,14 @@ package body Xref_Lib is\n \n       E_Line   : Natural;   --  Line number of current entity\n       E_Col    : Natural;   --  Column number of current entity\n-      E_Type   : Character; --  Type of current entity\n       E_Name   : Positive;  --  Pointer to begin of entity name\n       E_Global : Boolean;   --  True iff entity is global\n+      E_Type   : Character; --  Type of current entity\n \n       R_Line   : Natural;   --  Line number of current reference\n       R_Col    : Natural;   --  Column number of current reference\n-      R_Type   : Character; --  Type of current reference\n+\n+      R_Type   : Character := ASCII.NUL; --  Type of current reference\n \n       Decl_Ref : Declaration_Reference;\n       File_Ref : File_Reference := Current_Xref_File (File);\n@@ -876,18 +879,19 @@ package body Xref_Lib is\n       if Ali (Ptr) > ' ' then\n          E_Type := Ali (Ptr);\n          Ptr := Ptr + 1;\n-      end if;\n \n-      --  Ignore some of the entities (labels,...)\n+         --  Ignore some of the entities (labels,...)\n \n-      case E_Type is\n-         when 'l' | 'L' | 'q' =>\n+         if E_Type in 'l' | 'L' | 'q' then\n             Parse_EOL (Ali, Ptr, Skip_Continuation_Line => True);\n             return;\n+         end if;\n+      else\n+         --  Unexpected contents, skip line and return\n \n-         when others =>\n-            null;\n-      end case;\n+         Parse_EOL (Ali, Ptr, Skip_Continuation_Line => True);\n+         return;\n+      end if;\n \n       Parse_Number (Ali, Ptr, E_Col);\n \n@@ -966,7 +970,7 @@ package body Xref_Lib is\n             Parse_Derived_Info : declare\n                P_Line   : Natural;          --  parent entity line\n                P_Column : Natural;          --  parent entity column\n-               P_Eun    : Positive;         --  parent entity file number\n+               P_Eun    : Natural := 0;     --  parent entity file number\n \n             begin\n                Parse_Number (Ali, Ptr, P_Line);\n@@ -1010,6 +1014,8 @@ package body Xref_Lib is\n                --  on or if we want to output the type hierarchy\n \n                if Der_Info or else Type_Tree then\n+                  pragma Assert (P_Eun /= 0);\n+\n                   declare\n                      Symbol : constant String :=\n                                 Get_Symbol_Name (P_Eun, P_Line, P_Column);\n@@ -1126,8 +1132,8 @@ package body Xref_Lib is\n             --    5U14*Foo2 5>20 6b<c,myfoo2>22   # Imported entity\n             --    5U14*Foo2 5>20 6i<c,myfoo2>22   # Exported entity\n \n-            if (R_Type = 'b' or else R_Type = 'i')\n-              and then Ali (Ptr) = '<'\n+            if Ali (Ptr) = '<'\n+              and then (R_Type = 'b' or else R_Type = 'i')\n             then\n                while Ptr <= Ali'Last\n                  and then Ali (Ptr) /= '>'\n@@ -1139,6 +1145,8 @@ package body Xref_Lib is\n \n             Parse_Number (Ali, Ptr, R_Col);\n \n+            pragma Assert (R_Type /= ASCII.NUL);\n+\n             --  Insert the reference or body in the table\n \n             Add_Reference"}]}