{"sha": "ed70c42623729d86d2dc610a5279a5f394be68ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3MGM0MjYyMzcyOWQ4NmQyZGM2MTBhNTI3OWE1ZjM5NGJlNjhlZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1999-02-26T12:00:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-02-26T12:00:10Z"}, "message": "class.c (check_for_override): Don't stop checking when we find the first overridden function.\n\n\t* class.c (check_for_override): Don't stop checking when we find\n\tthe first overridden function.  Delete #if 0'd code.\n\t* search.c (get_matching_virtual): Likewise.\n\nFrom-SVN: r25457", "tree": {"sha": "bdf499e8f2baf8ac571c9d16b451fb1e822edbcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdf499e8f2baf8ac571c9d16b451fb1e822edbcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed70c42623729d86d2dc610a5279a5f394be68ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed70c42623729d86d2dc610a5279a5f394be68ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed70c42623729d86d2dc610a5279a5f394be68ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed70c42623729d86d2dc610a5279a5f394be68ee/comments", "author": null, "committer": null, "parents": [{"sha": "f3d50f4227003ecc718cd59376bacfade9dd2c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d50f4227003ecc718cd59376bacfade9dd2c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d50f4227003ecc718cd59376bacfade9dd2c46"}], "stats": {"total": 76, "additions": 50, "deletions": 26}, "files": [{"sha": "e9f87d733c7797615667efd1c5350519de2538a3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed70c42623729d86d2dc610a5279a5f394be68ee", "patch": "@@ -1,3 +1,9 @@\n+1999-02-26  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* class.c (check_for_override): Don't stop checking when we find\n+\tthe first overridden function.  Delete #if 0'd code.\n+\t* search.c (get_matching_virtual): Likewise.\n+\t\n 1999-02-25  Richard Henderson  <rth@cygnus.com>\n \n \t* lang-specs.h: Define __FAST_MATH__ when appropriate."}, {"sha": "3fc9cf4999a43f2336633965d12c8d939bcf4930", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=ed70c42623729d86d2dc610a5279a5f394be68ee", "patch": "@@ -2991,6 +2991,7 @@ check_for_override (decl, ctype)\n   tree binfos = BINFO_BASETYPES (TYPE_BINFO (ctype));\n   int i, n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n   int virtualp = DECL_VIRTUAL_P (decl);\n+  int found_overriden_fn = 0;\n \n   for (i = 0; i < n_baselinks; i++)\n     {\n@@ -3000,7 +3001,8 @@ check_for_override (decl, ctype)\n \t  tree tmp = get_matching_virtual\n \t    (base_binfo, decl,\n \t     DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (decl)));\n-\t  if (tmp)\n+\n+\t  if (tmp && !found_overriden_fn)\n \t    {\n \t      /* If this function overrides some virtual in some base\n \t\t class, then the function itself is also necessarily\n@@ -3021,26 +3023,15 @@ check_for_override (decl, ctype)\n \t\t}\n \t      virtualp = 1;\n \n-#if 0 /* The signature of an overriding function is not changed.  */\n-\t      {\n-\t\t/* The argument types may have changed...  */\n-\t\ttree type = TREE_TYPE (decl);\n-\t\ttree argtypes = TYPE_ARG_TYPES (type);\n-\t\ttree base_variant = TREE_TYPE (TREE_VALUE (argtypes));\n-\t\ttree raises = TYPE_RAISES_EXCEPTIONS (type);\n-\n-\t\targtypes = commonparms (TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (tmp))),\n-\t\t\t\t\tTREE_CHAIN (argtypes));\n-\t\t/* But the return type has not.  */\n-\t\ttype = build_cplus_method_type (base_variant, TREE_TYPE (type), argtypes);\n-\t\tif (raises)\n-\t\t  type = build_exception_variant (type, raises);\n-\t\tTREE_TYPE (decl) = type;\n-\t      }\n-#endif\n \t      DECL_VINDEX (decl)\n \t\t= tree_cons (NULL_TREE, tmp, DECL_VINDEX (decl));\n-\t      break;\n+\t      \n+\t      /* We now know that DECL overrides something,\n+\t\t which is all that is important.  But, we must\n+\t\t continue to iterate through all the base-classes\n+\t\t in order to allow get_matching_virtual to check for\n+\t\t various illegal overrides.  */\n+\t      found_overriden_fn = 1;\n \t    }\n \t}\n     }\n@@ -4897,6 +4888,8 @@ push_nested_class (type, modify)\n {\n   tree context;\n \n+  my_friendly_assert (!type || TREE_CODE (type) != NAMESPACE_DECL, 980711);\n+\n   /* A namespace might be passed in error cases, like A::B:C.  */\n   if (type == NULL_TREE || type == error_mark_node || ! IS_AGGR_TYPE (type)\n       || TREE_CODE (type) == NAMESPACE_DECL"}, {"sha": "6c046ed37dc6f09d894cc54e61a48fd403efe798", "filename": "gcc/cp/search.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=ed70c42623729d86d2dc610a5279a5f394be68ee", "patch": "@@ -1887,15 +1887,15 @@ get_matching_virtual (binfo, fndecl, dtorp)\n \t\t      cp_error_at (\"  overriding definition as `%#D'\", tmp);\n \t\t      SET_IDENTIFIER_ERROR_LOCUS (name, basetype);\n \t\t    }\n-\t\t  break;\n+\n+\t\t  /* FNDECL overrides this function.  We continue to\n+\t\t     check all the other functions in order to catch\n+\t\t     errors; it might be that in some other baseclass\n+\t\t     a virtual function was declared with the same\n+\t\t     parameter types, but a different return type.  */\n+\t\t  best = tmp;\n \t\t}\n \t    }\n-\t  /* If not at the end */\n-\t  if (tmps)\n-\t    {\n-\t      best = tmp;\n-\t      break;\n-\t    }\n \t}\n \n       return best;"}, {"sha": "8a44ee14135d96b20a4c018b2acd0064368c57d1", "filename": "gcc/testsuite/g++.old-deja/g++.other/virtual4.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed70c42623729d86d2dc610a5279a5f394be68ee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual4.C?ref=ed70c42623729d86d2dc610a5279a5f394be68ee", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link:\n+\n+class A {\n+public:\n+  virtual int foo() = 0; // ERROR - original definition\n+};\n+\n+class B {\n+public:\n+    virtual double foo() = 0;\n+};\n+\n+class C\n+  : public A, public B\n+{\n+public:\n+  virtual double foo() { return 2; } // ERROR - conflicting return type\n+};\n+\n+class D\n+  : public B, public A\n+{\n+public:\n+  virtual double foo() { return 2; } // ERROR - conflicting return type\n+};"}]}