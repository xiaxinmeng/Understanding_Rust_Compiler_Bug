{"sha": "659efb326d2b75c6b77863540911c41c49acf1f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU5ZWZiMzI2ZDJiNzVjNmI3Nzg2MzU0MDkxMWM0MWM0OWFjZjFmMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-13T19:28:32Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-13T19:28:32Z"}, "message": "2003-02-13  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/Label.java\n\t(Label): Don't implement Serializable directly.\n\t(addNotify): Fixed typo in documentation.\n\t* java/awt/List.java\n\t(List): Don't implement Serializable directly.\n\t* java/awt/PopupMenu.java\n\t(PopupMenu): Don't implement Serializable directly.\n\t* java/awt/ScrollPane.java\n\t(ScrollPane): Don't implement Serializable directly.\n\t* java/awt/Scrollbar.java\n\t(Scrollbar): Don't implement Serializable directly.\n\t* java/awt/TextArea.java\n\t(preferredSize): Fixed method arguments.\n\t* java/awt/TextField.java\n\t(TextField): Don't implement Serializable directly.\n\t* java/awt/color/ICC_ColorSpace.java\n\t(fromCIOXYZ): Documentation added.\n\t(getMinValue): Documentation added.\n\t(getMaxValue): Documentation added.\n\t* java/awt/datatransfer/DataFlavor.java\n\t(isMimeTypeEqual): May not be final.\n\t(clone): Throws CloneNotSupportedException.\n\t(getReaderForText): Don't throws UnsupportedEncodingException.\n\nFrom-SVN: r62863", "tree": {"sha": "25971b73b4e9f74feefe1b4213d1e1613d9f6d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25971b73b4e9f74feefe1b4213d1e1613d9f6d2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/659efb326d2b75c6b77863540911c41c49acf1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659efb326d2b75c6b77863540911c41c49acf1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659efb326d2b75c6b77863540911c41c49acf1f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659efb326d2b75c6b77863540911c41c49acf1f1/comments", "author": null, "committer": null, "parents": [{"sha": "1cb02bdfd32b6a2d1248095729c33c3c93796abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb02bdfd32b6a2d1248095729c33c3c93796abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb02bdfd32b6a2d1248095729c33c3c93796abb"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "3f8448c1627325840bdaa9013189b9480607cc2d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -1,3 +1,29 @@\n+2003-02-13  Michael Koch  <konqueror@gmx.de>\n+ \n+\t* java/awt/Label.java\n+\t(Label): Don't implement Serializable directly.\n+\t(addNotify): Fixed typo in documentation.\n+\t* java/awt/List.java\n+\t(List): Don't implement Serializable directly.\n+\t* java/awt/PopupMenu.java\n+\t(PopupMenu): Don't implement Serializable directly.\n+\t* java/awt/ScrollPane.java\n+\t(ScrollPane): Don't implement Serializable directly.\n+\t* java/awt/Scrollbar.java\n+\t(Scrollbar): Don't implement Serializable directly.\n+\t* java/awt/TextArea.java\n+\t(preferredSize): Fixed method arguments.\n+\t* java/awt/TextField.java\n+\t(TextField): Don't implement Serializable directly.\n+\t* java/awt/color/ICC_ColorSpace.java\n+\t(fromCIOXYZ): Documentation added.\n+\t(getMinValue): Documentation added.\n+\t(getMaxValue): Documentation added.\n+\t* java/awt/datatransfer/DataFlavor.java\n+\t(isMimeTypeEqual): May not be final.\n+\t(clone): Throws CloneNotSupportedException.\n+\t(getReaderForText): Don't throws UnsupportedEncodingException.\n+\n 2003-02-13  Michael Koch  <konqueror@gmx.de>\n  \n \t* gnu/java/awt/peer/gtk/GdkGraphics.java"}, {"sha": "47f6733da1687c8638f404cd4961604ee77d7dbf", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -40,7 +40,6 @@\n \n import java.awt.peer.LabelPeer;\n import java.awt.peer.ComponentPeer;\n-import java.io.Serializable;\n import javax.accessibility.Accessible;\n \n /**\n@@ -50,7 +49,7 @@\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   * @author Tom Tromey <tromey@cygnus.com>\n   */\n-public class Label extends Component implements Serializable, Accessible\n+public class Label extends Component implements Accessible\n {\n \n /*\n@@ -225,7 +224,7 @@ public class Label extends Component implements Serializable, Accessible\n /*************************************************************************/\n \n /**\n-  * Notifies this lable that it has been added to a container, causing\n+  * Notifies this label that it has been added to a container, causing\n   * the peer to be created.  This method is called internally by the AWT\n   * system.\n   */"}, {"sha": "d182e56001469e88ef4fbe085d781af7a3dcb5f9", "filename": "libjava/java/awt/List.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -54,7 +54,7 @@\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n public class List extends Component\n-  implements ItemSelectable, Serializable, Accessible\n+  implements ItemSelectable, Accessible\n {\n \n /*"}, {"sha": "75e565d3e9b52714443a844d474d0f2066675d13", "filename": "libjava/java/awt/PopupMenu.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FPopupMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FPopupMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPopupMenu.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -47,7 +47,7 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class PopupMenu extends Menu implements java.io.Serializable\n+public class PopupMenu extends Menu\n {\n \n /*"}, {"sha": "9b8b82a9a952cc525469f7cd0a85cb4ae583b5ad", "filename": "libjava/java/awt/ScrollPane.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -41,7 +41,6 @@\n import java.awt.peer.ScrollPanePeer;\n import java.awt.peer.ContainerPeer;\n import java.awt.peer.ComponentPeer;\n-import java.io.Serializable;\n import javax.accessibility.Accessible;\n \n /**\n@@ -50,7 +49,7 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class ScrollPane extends Container implements Accessible, Serializable\n+public class ScrollPane extends Container implements Accessible\n {\n \n /*"}, {"sha": "76daee3f8bfbe059e95d3524a73a7115e164e3cb", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -42,7 +42,6 @@\n import java.awt.peer.ComponentPeer;\n import java.awt.event.AdjustmentListener;\n import java.awt.event.AdjustmentEvent;\n-import java.io.Serializable;\n import javax.accessibility.Accessible;\n \n /**\n@@ -52,8 +51,7 @@\n   * @author Tom Tromey <tromey@cygnus.com>\n   */\n public class Scrollbar extends Component implements Accessible,\n-                                                    Adjustable,\n-                                                    Serializable\n+                                                    Adjustable\n {\n \n // FIXME: Serialization readObject/writeObject"}, {"sha": "f458f9b75e5ff1049870145f18ee55cffaa06d4a", "filename": "libjava/java/awt/TextArea.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FTextArea.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FTextArea.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextArea.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -404,7 +404,7 @@ public class TextArea extends TextComponent implements java.io.Serializable\n   * <code>getPreferredSize(int)</code>.\n   */\n public Dimension\n-preferredSize(int columns)\n+preferredSize(int rows, int columns)\n {\n   return(getPreferredSize(rows, columns));\n }"}, {"sha": "335edc6d2206680b6854adf55e58a7df3b1c63b3", "filename": "libjava/java/awt/TextField.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FTextField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2FTextField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextField.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -49,7 +49,7 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class TextField extends TextComponent implements java.io.Serializable\n+public class TextField extends TextComponent\n {\n \n /*"}, {"sha": "2ed247f52b05a50a193ee9556c506a2f0bda03cb", "filename": "libjava/java/awt/color/ICC_ColorSpace.java", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2Fcolor%2FICC_ColorSpace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2Fcolor%2FICC_ColorSpace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FICC_ColorSpace.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -143,13 +143,26 @@ public float[] toCIEXYZ(float[] colorvalue)\n     throw new UnsupportedOperationException();\n   }\n \n+  /**\n+   * Transforms a color value assumed to be in the CS_CIEXYZ conversion color\n+   * space into this ColorSpace.\n+   *\n+   * @exception ArrayIndexOutOfBoundsException If array length is not at\n+   * least 3.\n+   */\n   public float[] fromCIEXYZ(float[] colorvalue)\n   {\n     // FIXME: Not implemented\n     throw new UnsupportedOperationException();\n   }\n \n   /**\n+   * Returns the minimum normalized color component value for the specified\n+   * component.\n+   *\n+   * @exception IllegalArgumentException If component is less than 0 or greater\n+   * than numComponents - 1.\n+   *\n    * @since 1.4\n    */\n   public float getMinValue(int idx)\n@@ -162,6 +175,12 @@ public float getMinValue(int idx)\n   }\n \n   /**\n+   * Returns the maximum normalized color component value for the specified\n+   * component.\n+   *\n+   * @exception IllegalArgumentException If component is less than 0 or greater\n+   * than numComponents - 1.\n+   *\n    * @since 1.4\n    */\n   public float getMaxValue(int idx)"}, {"sha": "86d1f53c1d9af4ad3dad78ec6724c8e388a0bf4f", "filename": "libjava/java/awt/datatransfer/DataFlavor.java", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659efb326d2b75c6b77863540911c41c49acf1f1/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java?ref=659efb326d2b75c6b77863540911c41c49acf1f1", "patch": "@@ -508,7 +508,7 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   *\n   * @exception NullPointerException If mimeType is null.\n   */\n-public final boolean\n+public boolean\n isMimeTypeEqual(String mimeType)\n {\n   // FIXME: Need to handle default attributes and parameters\n@@ -660,8 +660,7 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   * the Cloneable interface. Subclasses that override the clone method can also\n   * throw this exception to indicate that an instance cannot be cloned.\n   */\n-public Object\n-clone()\n+public Object clone () throws CloneNotSupportedException\n {\n   try\n     {\n@@ -975,10 +974,8 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   * @exception UnsupportedEncodingException if the \"charset\" isn't supported\n   * on this platform.\n   */\n-public Reader\n-getReaderForText(Transferable transferable) throws UnsupportedFlavorException,\n-                                                   IOException,\n-                                                   UnsupportedEncodingException\n+public Reader getReaderForText(Transferable transferable)\n+  throws UnsupportedFlavorException, IOException\n {\n     if (!transferable.isDataFlavorSupported(this))\n         throw new UnsupportedFlavorException(this);"}]}